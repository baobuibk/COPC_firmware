
cpoc_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002308  0800c890  0800c890  0000d890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb98  0800eb98  00010500  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb98  0800eb98  0000fb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eba0  0800eba0  00010500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eba0  0800eba0  0000fba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eba4  0800eba4  0000fba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000500  20000000  0800eba8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010500  2**0
                  CONTENTS
 10 .bss          0000269c  20000500  20000500  00010500  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002b9c  20002b9c  00010500  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010500  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bafb  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f1d  00000000  00000000  0001c02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  0001ef48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000999  00000000  00000000  0001fc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1ee  00000000  00000000  000205d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f157  00000000  00000000  0003d7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094fa9  00000000  00000000  0004c91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e18c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004800  00000000  00000000  000e190c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000e610c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000500 	.word	0x20000500
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c874 	.word	0x0800c874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000504 	.word	0x20000504
 80001cc:	0800c874 	.word	0x0800c874

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001014:	2b80      	cmp	r3, #128	@ 0x80
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103a:	2b40      	cmp	r3, #64	@ 0x40
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <DS3231_Write>:
#include "ds3231.h"

#define DS3231_ADDRESS 0xD0

void DS3231_Write(uint8_t reg, uint8_t data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 80011a0:	bf00      	nop
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <DS3231_Write+0x8c>)
 80011a4:	f7ff ff7a 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <DS3231_Write+0x12>
    LL_I2C_GenerateStartCondition(I2C1);
 80011ae:	481b      	ldr	r0, [pc, #108]	@ (800121c <DS3231_Write+0x8c>)
 80011b0:	f7ff ffac 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 80011b4:	bf00      	nop
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <DS3231_Write+0x8c>)
 80011b8:	f7ff ff4a 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <DS3231_Write+0x26>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 80011c2:	21d0      	movs	r1, #208	@ 0xd0
 80011c4:	4815      	ldr	r0, [pc, #84]	@ (800121c <DS3231_Write+0x8c>)
 80011c6:	f7ff ffce 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80011ca:	bf00      	nop
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <DS3231_Write+0x8c>)
 80011ce:	f7ff ff52 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <DS3231_Write+0x3c>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <DS3231_Write+0x8c>)
 80011da:	f7ff ff72 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <DS3231_Write+0x8c>)
 80011e4:	f7ff ffbf 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011e8:	bf00      	nop
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <DS3231_Write+0x8c>)
 80011ec:	f7ff ff0a 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f9      	beq.n	80011ea <DS3231_Write+0x5a>
    LL_I2C_TransmitData8(I2C1, data);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <DS3231_Write+0x8c>)
 80011fc:	f7ff ffb3 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001200:	bf00      	nop
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <DS3231_Write+0x8c>)
 8001204:	f7ff fefe 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <DS3231_Write+0x72>
    LL_I2C_GenerateStopCondition(I2C1);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <DS3231_Write+0x8c>)
 8001210:	f7ff ff8c 	bl	800112c <LL_I2C_GenerateStopCondition>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400

08001220 <DS3231_Read>:

uint8_t DS3231_Read(uint8_t reg)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 800122e:	bf00      	nop
 8001230:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <DS3231_Read+0xc4>)
 8001232:	f7ff ff33 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <DS3231_Read+0x10>
    LL_I2C_GenerateStartCondition(I2C1);
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <DS3231_Read+0xc4>)
 800123e:	f7ff ff65 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001242:	bf00      	nop
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <DS3231_Read+0xc4>)
 8001246:	f7ff ff03 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <DS3231_Read+0x24>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 8001250:	21d0      	movs	r1, #208	@ 0xd0
 8001252:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <DS3231_Read+0xc4>)
 8001254:	f7ff ff87 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001258:	bf00      	nop
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <DS3231_Read+0xc4>)
 800125c:	f7ff ff0b 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <DS3231_Read+0x3a>
    LL_I2C_ClearFlag_ADDR(I2C1);
 8001266:	481f      	ldr	r0, [pc, #124]	@ (80012e4 <DS3231_Read+0xc4>)
 8001268:	f7ff ff2b 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <DS3231_Read+0xc4>)
 8001272:	f7ff ff78 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001276:	bf00      	nop
 8001278:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <DS3231_Read+0xc4>)
 800127a:	f7ff fec3 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <DS3231_Read+0x58>
    LL_I2C_GenerateStartCondition(I2C1);
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <DS3231_Read+0xc4>)
 8001286:	f7ff ff41 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800128a:	bf00      	nop
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <DS3231_Read+0xc4>)
 800128e:	f7ff fedf 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <DS3231_Read+0x6c>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS | 1);
 8001298:	21d1      	movs	r1, #209	@ 0xd1
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <DS3231_Read+0xc4>)
 800129c:	f7ff ff63 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80012a0:	bf00      	nop
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <DS3231_Read+0xc4>)
 80012a4:	f7ff fee7 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f9      	beq.n	80012a2 <DS3231_Read+0x82>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b0:	f7ff ff07 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80012b4:	2100      	movs	r1, #0
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b8:	f7ff ff15 	bl	80010e6 <LL_I2C_AcknowledgeNextData>
    while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80012bc:	bf00      	nop
 80012be:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <DS3231_Read+0xc4>)
 80012c0:	f7ff feb3 	bl	800102a <LL_I2C_IsActiveFlag_RXNE>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <DS3231_Read+0x9e>
    data = LL_I2C_ReceiveData8(I2C1);
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <DS3231_Read+0xc4>)
 80012cc:	f7ff ff3e 	bl	800114c <LL_I2C_ReceiveData8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
    LL_I2C_GenerateStopCondition(I2C1);
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <DS3231_Read+0xc4>)
 80012d6:	f7ff ff29 	bl	800112c <LL_I2C_GenerateStopCondition>
    return data;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400

080012e8 <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t hour, uint8_t min, uint8_t sec)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	460b      	mov	r3, r1
 8001300:	717b      	strb	r3, [r7, #5]
 8001302:	4613      	mov	r3, r2
 8001304:	713b      	strb	r3, [r7, #4]
    DS3231_Write(0x00, ((sec / 10) << 4) | (sec % 10));
 8001306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130a:	4a55      	ldr	r2, [pc, #340]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b258      	sxtb	r0, r3
 8001318:	f897 2020 	ldrb.w	r2, [r7, #32]
 800131c:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4303      	orrs	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff28 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x01, ((min / 10) << 4) | (min % 10));
 8001340:	7f3b      	ldrb	r3, [r7, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	b258      	sxtb	r0, r3
 8001350:	7f3a      	ldrb	r2, [r7, #28]
 8001352:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001354:	fba3 1302 	umull	r1, r3, r3, r2
 8001358:	08d9      	lsrs	r1, r3, #3
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4303      	orrs	r3, r0
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff0d 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x02, ((hour / 10) << 4) | (hour % 10));
 8001376:	7e3b      	ldrb	r3, [r7, #24]
 8001378:	4a39      	ldr	r2, [pc, #228]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b258      	sxtb	r0, r3
 8001386:	7e3a      	ldrb	r2, [r7, #24]
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800138a:	fba3 1302 	umull	r1, r3, r3, r2
 800138e:	08d9      	lsrs	r1, r3, #3
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4303      	orrs	r3, r0
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fef2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x03, day);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2003      	movs	r0, #3
 80013b2:	f7ff feed 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x04, ((date / 10) << 4) | (date % 10));
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b258      	sxtb	r0, r3
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4303      	orrs	r3, r0
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff fed2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x05, ((month / 10) << 4) | (month % 10));
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b258      	sxtb	r0, r3
 80013fc:	797a      	ldrb	r2, [r7, #5]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001400:	fba3 1302 	umull	r1, r3, r3, r2
 8001404:	08d9      	lsrs	r1, r3, #3
 8001406:	460b      	mov	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4303      	orrs	r3, r0
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff feb7 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x06, ((year / 10) << 4) | (year % 10));
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b258      	sxtb	r0, r3
 8001432:	793a      	ldrb	r2, [r7, #4]
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001436:	fba3 1302 	umull	r1, r3, r3, r2
 800143a:	08d9      	lsrs	r1, r3, #3
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4303      	orrs	r3, r0
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2006      	movs	r0, #6
 8001454:	f7ff fe9c 	bl	8001190 <DS3231_Write>
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	cccccccd 	.word	0xcccccccd

08001464 <DS3231_GetDateTime>:

void DS3231_GetDateTime(uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year, uint8_t *hour, uint8_t *min, uint8_t *sec)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    *sec = DS3231_Read(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fed4 	bl	8001220 <DS3231_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	701a      	strb	r2, [r3, #0]
    *min = DS3231_Read(0x01);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fecd 	bl	8001220 <DS3231_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	701a      	strb	r2, [r3, #0]
    *hour = DS3231_Read(0x02);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fec6 	bl	8001220 <DS3231_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	701a      	strb	r2, [r3, #0]
    *day = DS3231_Read(0x03);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff febf 	bl	8001220 <DS3231_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
    *date = DS3231_Read(0x04);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff feb8 	bl	8001220 <DS3231_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	701a      	strb	r2, [r3, #0]
    *month = DS3231_Read(0x05);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f7ff feb1 	bl	8001220 <DS3231_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	701a      	strb	r2, [r3, #0]
    *year = DS3231_Read(0x06);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff feaa 	bl	8001220 <DS3231_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]

    *sec = ((*sec >> 4) * 10) + (*sec & 0x0F);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	701a      	strb	r2, [r3, #0]
    *min = ((*min >> 4) * 10) + (*min & 0x0F);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	701a      	strb	r2, [r3, #0]
    *hour = ((*hour >> 4) * 10) + (*hour & 0x0F);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	701a      	strb	r2, [r3, #0]
    *date = ((*date >> 4) * 10) + (*date & 0x0F);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	701a      	strb	r2, [r3, #0]
    *month = ((*month >> 4) * 10) + (*month & 0x0F);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	701a      	strb	r2, [r3, #0]
    *year = ((*year >> 4) * 10) + (*year & 0x0F);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <DS3231_GetTemperature>:

float DS3231_GetTemperature(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
    uint8_t temp_msb = DS3231_Read(0x11);
 80015ba:	2011      	movs	r0, #17
 80015bc:	f7ff fe30 	bl	8001220 <DS3231_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_lsb = DS3231_Read(0x12);
 80015c4:	2012      	movs	r0, #18
 80015c6:	f7ff fe2b 	bl	8001220 <DS3231_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71bb      	strb	r3, [r7, #6]
    int16_t temp = (temp_msb << 8) | temp_lsb;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
    float temperature = temp / 256.0;
 80015dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffaf 	bl	8000544 <__aeabi_i2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <DS3231_GetTemperature+0x5c>)
 80015ec:	f7ff f93e 	bl	800086c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb06 	bl	8000c08 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	603b      	str	r3, [r7, #0]
    return temperature;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40700000 	.word	0x40700000

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	@ (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ffc2 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <systick_timer_init+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <systick_timer_init+0x20>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffc3 	bl	8001668 <SysTick_Config>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000324 	.word	0x20000324
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b02      	cmp	r3, #2
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b20      	cmp	r3, #32
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001798:	2b80      	cmp	r3, #128	@ 0x80
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001804:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800181a:	b480      	push	{r7}
 800181c:	b089      	sub	sp, #36	@ 0x24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	e853 3f00 	ldrex	r3, [r3]
 800182e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	330c      	adds	r3, #12
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	61ba      	str	r2, [r7, #24]
 8001840:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001842:	6979      	ldr	r1, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	e841 2300 	strex	r3, r2, [r1]
 800184a:	613b      	str	r3, [r7, #16]
   return(result);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e7      	bne.n	8001822 <LL_USART_EnableIT_RXNE+0x8>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3724      	adds	r7, #36	@ 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	330c      	adds	r3, #12
 800186c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	e853 3f00 	ldrex	r3, [r3]
 8001874:	60bb      	str	r3, [r7, #8]
   return(result);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	330c      	adds	r3, #12
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	61ba      	str	r2, [r7, #24]
 8001886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	e841 2300 	strex	r3, r2, [r1]
 8001890:	613b      	str	r3, [r7, #16]
   return(result);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e7      	bne.n	8001868 <LL_USART_EnableIT_TXE+0x8>
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b089      	sub	sp, #36	@ 0x24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3314      	adds	r3, #20
 80018b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	e853 3f00 	ldrex	r3, [r3]
 80018ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3314      	adds	r3, #20
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	61ba      	str	r2, [r7, #24]
 80018cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	e841 2300 	strex	r3, r2, [r1]
 80018d6:	613b      	str	r3, [r7, #16]
   return(result);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e7      	bne.n	80018ae <LL_USART_EnableIT_ERROR+0x8>
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	@ 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	330c      	adds	r3, #12
 80018f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	e853 3f00 	ldrex	r3, [r3]
 8001900:	60bb      	str	r3, [r7, #8]
   return(result);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f023 0320 	bic.w	r3, r3, #32
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	61ba      	str	r2, [r7, #24]
 8001912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	e841 2300 	strex	r3, r2, [r1]
 800191c:	613b      	str	r3, [r7, #16]
   return(result);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e7      	bne.n	80018f4 <LL_USART_DisableIT_RXNE+0x8>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001932:	b480      	push	{r7}
 8001934:	b089      	sub	sp, #36	@ 0x24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330c      	adds	r3, #12
 800193e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	e853 3f00 	ldrex	r3, [r3]
 8001946:	60bb      	str	r3, [r7, #8]
   return(result);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	330c      	adds	r3, #12
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	61ba      	str	r2, [r7, #24]
 8001958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195a:	6979      	ldr	r1, [r7, #20]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	e841 2300 	strex	r3, r2, [r1]
 8001962:	613b      	str	r3, [r7, #16]
   return(result);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e7      	bne.n	800193a <LL_USART_DisableIT_TXE+0x8>
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3724      	adds	r7, #36	@ 0x24
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b20      	cmp	r3, #32
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b80      	cmp	r3, #128	@ 0x80
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	b2db      	uxtb	r3, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <Ringbuf_init>:


void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001a00:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <Ringbuf_init+0x88>)
 8001a02:	4a21      	ldr	r2, [pc, #132]	@ (8001a88 <Ringbuf_init+0x8c>)
 8001a04:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8001a06:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <Ringbuf_init+0x90>)
 8001a08:	4a21      	ldr	r2, [pc, #132]	@ (8001a90 <Ringbuf_init+0x94>)
 8001a0a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <Ringbuf_init+0x98>)
 8001a0e:	4a22      	ldr	r2, [pc, #136]	@ (8001a98 <Ringbuf_init+0x9c>)
 8001a10:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <Ringbuf_init+0xa0>)
 8001a14:	4a22      	ldr	r2, [pc, #136]	@ (8001aa0 <Ringbuf_init+0xa4>)
 8001a16:	601a      	str	r2, [r3, #0]
  _rx_buffer5 = &rx_buffer5;
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <Ringbuf_init+0xa8>)
 8001a1a:	4a23      	ldr	r2, [pc, #140]	@ (8001aa8 <Ringbuf_init+0xac>)
 8001a1c:	601a      	str	r2, [r3, #0]
  _tx_buffer5 = &tx_buffer5;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <Ringbuf_init+0xb0>)
 8001a20:	4a23      	ldr	r2, [pc, #140]	@ (8001ab0 <Ringbuf_init+0xb4>)
 8001a22:	601a      	str	r2, [r3, #0]
  _rx_buffer6 = &rx_buffer6;
 8001a24:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <Ringbuf_init+0xb8>)
 8001a26:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <Ringbuf_init+0xbc>)
 8001a28:	601a      	str	r2, [r3, #0]
  _tx_buffer6 = &tx_buffer6;
 8001a2a:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <Ringbuf_init+0xc0>)
 8001a2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <Ringbuf_init+0xc4>)
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  LL_USART_EnableIT_ERROR(uart1);
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff36 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart2);
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff31 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart5);
 8001a44:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff2c 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart6);
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff27 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart1);
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fedc 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart2);
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fed7 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart5);
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fed2 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart6);
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fecd 	bl	800181a <LL_USART_EnableIT_RXNE>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000255c 	.word	0x2000255c
 8001a88:	2000051c 	.word	0x2000051c
 8001a8c:	20002560 	.word	0x20002560
 8001a90:	20000924 	.word	0x20000924
 8001a94:	20002564 	.word	0x20002564
 8001a98:	20000d2c 	.word	0x20000d2c
 8001a9c:	20002568 	.word	0x20002568
 8001aa0:	20001134 	.word	0x20001134
 8001aa4:	2000256c 	.word	0x2000256c
 8001aa8:	2000153c 	.word	0x2000153c
 8001aac:	20002570 	.word	0x20002570
 8001ab0:	20001944 	.word	0x20001944
 8001ab4:	20002574 	.word	0x20002574
 8001ab8:	20001d4c 	.word	0x20001d4c
 8001abc:	20002578 	.word	0x20002578
 8001ac0:	20002154 	.word	0x20002154
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	2000000c 	.word	0x2000000c

08001ad4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aec:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d031      	beq.n	8001b5e <store_char+0x8a>
	ATOMIC_BLOCK_START(USART1)
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <store_char+0x94>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fef4 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(USART2)
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <store_char+0x98>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff feef 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(UART5)
 8001b0e:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <store_char+0x9c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff feea 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(USART6)
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <store_char+0xa0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fee5 	bl	80018ec <LL_USART_DisableIT_RXNE>
    buffer->buffer[buffer->head] = c;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	79f9      	ldrb	r1, [r7, #7]
 8001b2c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    ATOMIC_BLOCK_END(USART1)
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <store_char+0x94>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe6d 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART2)
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <store_char+0x98>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fe68 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART5)
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <store_char+0x9c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fe63 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART6)
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <store_char+0xa0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe5e 	bl	800181a <LL_USART_EnableIT_RXNE>
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	20000008 	.word	0x20000008
 8001b74:	2000000c 	.word	0x2000000c

08001b78 <Uart_read>:
//	else return -1;
//}
//

int Uart_read(USART_TypeDef *uart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  ring_buffer *_rx_buffer;

  switch ((uint32_t)uart) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a41      	ldr	r2, [pc, #260]	@ (8001c88 <Uart_read+0x110>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <Uart_read+0x24>
 8001b88:	4a3f      	ldr	r2, [pc, #252]	@ (8001c88 <Uart_read+0x110>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d812      	bhi.n	8001bb4 <Uart_read+0x3c>
 8001b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c8c <Uart_read+0x114>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <Uart_read+0x2c>
 8001b94:	4a3e      	ldr	r2, [pc, #248]	@ (8001c90 <Uart_read+0x118>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d008      	beq.n	8001bac <Uart_read+0x34>
 8001b9a:	e00b      	b.n	8001bb4 <Uart_read+0x3c>
    case (uint32_t)USART1:
      _rx_buffer = _rx_buffer1;
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <Uart_read+0x11c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
      break;
 8001ba2:	e00b      	b.n	8001bbc <Uart_read+0x44>
    case (uint32_t)USART2:
      _rx_buffer = _rx_buffer2;
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8001c98 <Uart_read+0x120>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
      break;
 8001baa:	e007      	b.n	8001bbc <Uart_read+0x44>
    case (uint32_t)UART5:
      _rx_buffer = _rx_buffer5;
 8001bac:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <Uart_read+0x124>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
      break;
 8001bb2:	e003      	b.n	8001bbc <Uart_read+0x44>
    default:
      _rx_buffer = _rx_buffer6;
 8001bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca0 <Uart_read+0x128>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
      break;
 8001bba:	bf00      	nop
  }

  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d102      	bne.n	8001bd2 <Uart_read+0x5a>
  {
    return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e055      	b.n	8001c7e <Uart_read+0x106>
  }
  else
  {
    ATOMIC_BLOCK_START(uart)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8001c88 <Uart_read+0x110>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d105      	bne.n	8001be6 <Uart_read+0x6e>
 8001bda:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <Uart_read+0x12c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fe84 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001be4:	e018      	b.n	8001c18 <Uart_read+0xa0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a28      	ldr	r2, [pc, #160]	@ (8001c8c <Uart_read+0x114>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d105      	bne.n	8001bfa <Uart_read+0x82>
 8001bee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <Uart_read+0x130>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fe7a 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001bf8:	e00e      	b.n	8001c18 <Uart_read+0xa0>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	@ (8001c90 <Uart_read+0x118>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d105      	bne.n	8001c0e <Uart_read+0x96>
 8001c02:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <Uart_read+0x134>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fe70 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c0c:	e004      	b.n	8001c18 <Uart_read+0xa0>
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <Uart_read+0x138>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fe6a 	bl	80018ec <LL_USART_DisableIT_RXNE>
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	72fb      	strb	r3, [r7, #11]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    ATOMIC_BLOCK_END(uart)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <Uart_read+0x110>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d105      	bne.n	8001c4a <Uart_read+0xd2>
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <Uart_read+0x12c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fde9 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c48:	e018      	b.n	8001c7c <Uart_read+0x104>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c8c <Uart_read+0x114>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d105      	bne.n	8001c5e <Uart_read+0xe6>
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <Uart_read+0x130>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fddf 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c5c:	e00e      	b.n	8001c7c <Uart_read+0x104>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0b      	ldr	r2, [pc, #44]	@ (8001c90 <Uart_read+0x118>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d105      	bne.n	8001c72 <Uart_read+0xfa>
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <Uart_read+0x134>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fdd5 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c70:	e004      	b.n	8001c7c <Uart_read+0x104>
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <Uart_read+0x138>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fdcf 	bl	800181a <LL_USART_EnableIT_RXNE>
    return c;
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	40004400 	.word	0x40004400
 8001c90:	40005000 	.word	0x40005000
 8001c94:	2000255c 	.word	0x2000255c
 8001c98:	20002564 	.word	0x20002564
 8001c9c:	2000256c 	.word	0x2000256c
 8001ca0:	20002574 	.word	0x20002574
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	2000000c 	.word	0x2000000c

08001cb4 <Uart_write>:

void Uart_write(USART_TypeDef *uart, int c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  ring_buffer *_tx_buffer;
  switch ((uint32_t)uart) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a54      	ldr	r2, [pc, #336]	@ (8001e14 <Uart_write+0x160>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d009      	beq.n	8001cda <Uart_write+0x26>
 8001cc6:	4a53      	ldr	r2, [pc, #332]	@ (8001e14 <Uart_write+0x160>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d812      	bhi.n	8001cf2 <Uart_write+0x3e>
 8001ccc:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <Uart_write+0x164>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <Uart_write+0x2e>
 8001cd2:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <Uart_write+0x168>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d008      	beq.n	8001cea <Uart_write+0x36>
 8001cd8:	e00b      	b.n	8001cf2 <Uart_write+0x3e>
    case (uint32_t)USART1:
      _tx_buffer = _tx_buffer1;
 8001cda:	4b51      	ldr	r3, [pc, #324]	@ (8001e20 <Uart_write+0x16c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]
      break;
 8001ce0:	e00b      	b.n	8001cfa <Uart_write+0x46>
    case (uint32_t)USART2:
      _tx_buffer = _tx_buffer2;
 8001ce2:	4b50      	ldr	r3, [pc, #320]	@ (8001e24 <Uart_write+0x170>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]
      break;
 8001ce8:	e007      	b.n	8001cfa <Uart_write+0x46>
    case (uint32_t)UART5:
      _tx_buffer = _tx_buffer5;
 8001cea:	4b4f      	ldr	r3, [pc, #316]	@ (8001e28 <Uart_write+0x174>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]
      break;
 8001cf0:	e003      	b.n	8001cfa <Uart_write+0x46>
    default:
      _tx_buffer = _tx_buffer6;
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001e2c <Uart_write+0x178>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
      break;
 8001cf8:	bf00      	nop
  }

	if (c>=0)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f2c0 8085 	blt.w	8001e0c <Uart_write+0x158>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d0e:	60bb      	str	r3, [r7, #8]

		ATOMIC_BLOCK_START(uart)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <Uart_write+0x160>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d105      	bne.n	8001d24 <Uart_write+0x70>
 8001d18:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <Uart_write+0x17c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fde5 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d22:	e018      	b.n	8001d56 <Uart_write+0xa2>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3c      	ldr	r2, [pc, #240]	@ (8001e18 <Uart_write+0x164>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d105      	bne.n	8001d38 <Uart_write+0x84>
 8001d2c:	4b41      	ldr	r3, [pc, #260]	@ (8001e34 <Uart_write+0x180>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fddb 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d36:	e00e      	b.n	8001d56 <Uart_write+0xa2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a38      	ldr	r2, [pc, #224]	@ (8001e1c <Uart_write+0x168>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d105      	bne.n	8001d4c <Uart_write+0x98>
 8001d40:	4b3d      	ldr	r3, [pc, #244]	@ (8001e38 <Uart_write+0x184>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fdd1 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d4a:	e004      	b.n	8001d56 <Uart_write+0xa2>
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <Uart_write+0x188>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fdcb 	bl	80018ec <LL_USART_DisableIT_RXNE>
		while (i == _tx_buffer->tail);
 8001d56:	bf00      	nop
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d0f9      	beq.n	8001d58 <Uart_write+0xa4>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	b2d1      	uxtb	r1, r2
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
		ATOMIC_BLOCK_END(uart)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	@ (8001e14 <Uart_write+0x160>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d105      	bne.n	8001d8e <Uart_write+0xda>
 8001d82:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <Uart_write+0x17c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fd47 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001d8c:	e018      	b.n	8001dc0 <Uart_write+0x10c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <Uart_write+0x164>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d105      	bne.n	8001da2 <Uart_write+0xee>
 8001d96:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <Uart_write+0x180>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fd3d 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001da0:	e00e      	b.n	8001dc0 <Uart_write+0x10c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <Uart_write+0x168>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d105      	bne.n	8001db6 <Uart_write+0x102>
 8001daa:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <Uart_write+0x184>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fd33 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001db4:	e004      	b.n	8001dc0 <Uart_write+0x10c>
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <Uart_write+0x188>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fd2d 	bl	800181a <LL_USART_EnableIT_RXNE>

		  switch ((uint32_t)uart) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <Uart_write+0x160>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <Uart_write+0x128>
 8001dc8:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <Uart_write+0x160>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d818      	bhi.n	8001e00 <Uart_write+0x14c>
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <Uart_write+0x164>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <Uart_write+0x134>
 8001dd4:	4a11      	ldr	r2, [pc, #68]	@ (8001e1c <Uart_write+0x168>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00c      	beq.n	8001df4 <Uart_write+0x140>
 8001dda:	e011      	b.n	8001e00 <Uart_write+0x14c>
		    case (uint32_t)USART1:
		      LL_USART_EnableIT_TXE(uart1);
 8001ddc:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <Uart_write+0x17c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fd3d 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001de6:	e011      	b.n	8001e0c <Uart_write+0x158>
		    case (uint32_t)USART2:
		      LL_USART_EnableIT_TXE(uart2);
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <Uart_write+0x180>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fd37 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001df2:	e00b      	b.n	8001e0c <Uart_write+0x158>
		    case (uint32_t)UART5:
		      LL_USART_EnableIT_TXE(uart5);
 8001df4:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <Uart_write+0x184>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fd31 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001dfe:	e005      	b.n	8001e0c <Uart_write+0x158>
		    default:
		      LL_USART_EnableIT_TXE(uart6);
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <Uart_write+0x188>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fd2b 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001e0a:	bf00      	nop
		  }
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40004400 	.word	0x40004400
 8001e1c:	40005000 	.word	0x40005000
 8001e20:	20002560 	.word	0x20002560
 8001e24:	20002568 	.word	0x20002568
 8001e28:	20002570 	.word	0x20002570
 8001e2c:	20002578 	.word	0x20002578
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	2000000c 	.word	0x2000000c

08001e40 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;
	  switch ((uint32_t)uart) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <IsDataAvailable+0x70>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <IsDataAvailable+0x24>
 8001e50:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <IsDataAvailable+0x70>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d812      	bhi.n	8001e7c <IsDataAvailable+0x3c>
 8001e56:	4a17      	ldr	r2, [pc, #92]	@ (8001eb4 <IsDataAvailable+0x74>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <IsDataAvailable+0x2c>
 8001e5c:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <IsDataAvailable+0x78>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d008      	beq.n	8001e74 <IsDataAvailable+0x34>
 8001e62:	e00b      	b.n	8001e7c <IsDataAvailable+0x3c>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001e64:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <IsDataAvailable+0x7c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
	      break;
 8001e6a:	e00b      	b.n	8001e84 <IsDataAvailable+0x44>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <IsDataAvailable+0x80>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
	      break;
 8001e72:	e007      	b.n	8001e84 <IsDataAvailable+0x44>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <IsDataAvailable+0x84>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
	      break;
 8001e7a:	e003      	b.n	8001e84 <IsDataAvailable+0x44>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <IsDataAvailable+0x88>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
	      break;
 8001e82:	bf00      	nop
	  }

  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40004400 	.word	0x40004400
 8001eb8:	40005000 	.word	0x40005000
 8001ebc:	2000255c 	.word	0x2000255c
 8001ec0:	20002564 	.word	0x20002564
 8001ec4:	2000256c 	.word	0x2000256c
 8001ec8:	20002574 	.word	0x20002574

08001ecc <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (USART_TypeDef *uart, const char *s)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	while(*s) Uart_write(uart, *s++);
 8001ed6:	e007      	b.n	8001ee8 <Uart_sendstring+0x1c>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	603a      	str	r2, [r7, #0]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fee6 	bl	8001cb4 <Uart_write>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f3      	bne.n	8001ed8 <Uart_sendstring+0xc>
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <Uart_isr>:
	if (so_far == len) return 1;
	else return 0;
}

void Uart_isr (USART_TypeDef *uart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  //  uint32_t isrflags   = LL_USART_ReadReg(uart, SR);
    ring_buffer *_rx_buffer;
    ring_buffer *_tx_buffer;

    switch ((uint32_t)uart) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a46      	ldr	r2, [pc, #280]	@ (8002020 <Uart_isr+0x124>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d009      	beq.n	8001f20 <Uart_isr+0x24>
 8001f0c:	4a44      	ldr	r2, [pc, #272]	@ (8002020 <Uart_isr+0x124>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d81b      	bhi.n	8001f4a <Uart_isr+0x4e>
 8001f12:	4a44      	ldr	r2, [pc, #272]	@ (8002024 <Uart_isr+0x128>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00a      	beq.n	8001f2e <Uart_isr+0x32>
 8001f18:	4a43      	ldr	r2, [pc, #268]	@ (8002028 <Uart_isr+0x12c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00e      	beq.n	8001f3c <Uart_isr+0x40>
 8001f1e:	e014      	b.n	8001f4a <Uart_isr+0x4e>
      case (uint32_t)USART1:
        _rx_buffer = _rx_buffer1;
 8001f20:	4b42      	ldr	r3, [pc, #264]	@ (800202c <Uart_isr+0x130>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer1;
 8001f26:	4b42      	ldr	r3, [pc, #264]	@ (8002030 <Uart_isr+0x134>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
        break;
 8001f2c:	e014      	b.n	8001f58 <Uart_isr+0x5c>
      case (uint32_t)USART2:
        _rx_buffer = _rx_buffer2;
 8001f2e:	4b41      	ldr	r3, [pc, #260]	@ (8002034 <Uart_isr+0x138>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer2;
 8001f34:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <Uart_isr+0x13c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	613b      	str	r3, [r7, #16]
        break;
 8001f3a:	e00d      	b.n	8001f58 <Uart_isr+0x5c>
      case (uint32_t)UART5:
        _rx_buffer = _rx_buffer5;
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800203c <Uart_isr+0x140>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer5;
 8001f42:	4b3f      	ldr	r3, [pc, #252]	@ (8002040 <Uart_isr+0x144>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	613b      	str	r3, [r7, #16]
        break;
 8001f48:	e006      	b.n	8001f58 <Uart_isr+0x5c>
      default:
        _rx_buffer = _rx_buffer6;
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002044 <Uart_isr+0x148>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer6;
 8001f50:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <Uart_isr+0x14c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	613b      	str	r3, [r7, #16]
        break;
 8001f56:	bf00      	nop
    }

    /* if DR is not empty and the Rx Int is enabled */
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fc02 	bl	8001762 <LL_USART_IsActiveFlag_RXNE>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d02c      	beq.n	8001fbe <Uart_isr+0xc2>
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fd07 	bl	8001978 <LL_USART_IsEnabledIT_RXNE>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d026      	beq.n	8001fbe <Uart_isr+0xc2>
//        LL_USART_ReceiveData8(uart);                /* Read status register */
//        unsigned char c = LL_USART_ReceiveData8(uart);    /* Read data register */
//        store_char (c, _rx_buffer);  // store data in buffer
//        return;

        unsigned char data = LL_USART_ReceiveData8(uart);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fd27 	bl	80019c4 <LL_USART_ReceiveData8>
 8001f76:	4603      	mov	r3, r0
 8001f78:	73fb      	strb	r3, [r7, #15]
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fbde 	bl	800173c <LL_USART_IsActiveFlag_ORE>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10b      	bne.n	8001f9e <Uart_isr+0xa2>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fbb2 	bl	80016f0 <LL_USART_IsActiveFlag_FE>
 8001f8c:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d105      	bne.n	8001f9e <Uart_isr+0xa2>
            (LL_USART_IsActiveFlag_NE(uart) != RESET))
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fbbf 	bl	8001716 <LL_USART_IsActiveFlag_NE>
 8001f98:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <Uart_isr+0xb6>
        {
          // if error, del flag
          LL_USART_ClearFlag_ORE(uart);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fc29 	bl	80017f6 <LL_USART_ClearFlag_ORE>
          LL_USART_ClearFlag_FE(uart);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fc02 	bl	80017ae <LL_USART_ClearFlag_FE>
          LL_USART_ClearFlag_NE(uart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fc11 	bl	80017d2 <LL_USART_ClearFlag_NE>
        }
        else
        {
          store_char(data, _rx_buffer); // store data in buffer
        }
        return;
 8001fb0:	e032      	b.n	8002018 <Uart_isr+0x11c>
          store_char(data, _rx_buffer); // store data in buffer
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	6979      	ldr	r1, [r7, #20]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fd8c 	bl	8001ad4 <store_char>
        return;
 8001fbc:	e02c      	b.n	8002018 <Uart_isr+0x11c>


    }
    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fbe2 	bl	8001788 <LL_USART_IsActiveFlag_TXE>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d026      	beq.n	8002018 <Uart_isr+0x11c>
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fce7 	bl	800199e <LL_USART_IsEnabledIT_TXE>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <Uart_isr+0x11c>
    {
        if(_tx_buffer->head == _tx_buffer->tail)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d103      	bne.n	8001fee <Uart_isr+0xf2>
        {
          // Buffer empty, so disable interrupts
          LL_USART_DisableIT_TXE(uart);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fca3 	bl	8001932 <LL_USART_DisableIT_TXE>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;

          LL_USART_TransmitData8(uart, c);
        }
        return;
 8001fec:	e013      	b.n	8002016 <Uart_isr+0x11a>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	73bb      	strb	r3, [r7, #14]
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002000:	3301      	adds	r3, #1
 8002002:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
          LL_USART_TransmitData8(uart, c);
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fce4 	bl	80019de <LL_USART_TransmitData8>
        return;
 8002016:	bf00      	nop
    }
}
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40011000 	.word	0x40011000
 8002024:	40004400 	.word	0x40004400
 8002028:	40005000 	.word	0x40005000
 800202c:	2000255c 	.word	0x2000255c
 8002030:	20002560 	.word	0x20002560
 8002034:	20002564 	.word	0x20002564
 8002038:	20002568 	.word	0x20002568
 800203c:	2000256c 	.word	0x2000256c
 8002040:	20002570 	.word	0x20002570
 8002044:	20002574 	.word	0x20002574
 8002048:	20002578 	.word	0x20002578

0800204c <send_packet_init>:
		status_ACKsend_update					// taskFunction;
	}
};

void send_packet_init(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <send_packet_init+0x1c>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
    retryCount = 0;
 8002056:	4b05      	ldr	r3, [pc, #20]	@ (800206c <send_packet_init+0x20>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	2000267c 	.word	0x2000267c
 800206c:	2000267d 	.word	0x2000267d

08002070 <set_send_flag>:

void set_send_flag(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
    sendFlag = 1;
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <set_send_flag+0x14>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	2000267c 	.word	0x2000267c

08002088 <clear_send_flag>:

void clear_send_flag(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
    sendFlag = 0;
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <clear_send_flag+0x14>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	2000267c 	.word	0x2000267c

080020a0 <set_fsp_packet>:


void set_fsp_packet(uint8_t *encoded_pkt, uint8_t encoded_len)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
	memset(g_encoded_pkt, 0, sizeof(g_encoded_pkt));
 80020ac:	22ff      	movs	r2, #255	@ 0xff
 80020ae:	2100      	movs	r1, #0
 80020b0:	4807      	ldr	r0, [pc, #28]	@ (80020d0 <set_fsp_packet+0x30>)
 80020b2:	f007 f882 	bl	80091ba <memset>
    memcpy(g_encoded_pkt, encoded_pkt, encoded_len);
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	461a      	mov	r2, r3
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4804      	ldr	r0, [pc, #16]	@ (80020d0 <set_fsp_packet+0x30>)
 80020be:	f007 f8fc 	bl	80092ba <memcpy>
    g_encoded_len = encoded_len;
 80020c2:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <set_fsp_packet+0x34>)
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	7013      	strb	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	2000257c 	.word	0x2000257c
 80020d4:	2000267b 	.word	0x2000267b

080020d8 <send_packet_create_task>:

void send_packet_create_task(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&ACKsend_task_context.taskHandle, &ACKsend_task_context.taskProperty);
 80020dc:	4902      	ldr	r1, [pc, #8]	@ (80020e8 <send_packet_create_task+0x10>)
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <send_packet_create_task+0x14>)
 80020e0:	f004 fc8e 	bl	8006a00 <SCH_TASK_CreateTask>
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000014 	.word	0x20000014
 80020ec:	20000010 	.word	0x20000010

080020f0 <status_ACKsend_update>:

void	status_ACKsend_update(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0

			if (SCH_TIM_HasCompleted(SCH_TIM_ACK))
 80020f6:	2003      	movs	r0, #3
 80020f8:	f004 fc6c 	bl	80069d4 <SCH_TIM_HasCompleted>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d037      	beq.n	8002172 <status_ACKsend_update+0x82>
			{

			    if (sendFlag)
 8002102:	4b1e      	ldr	r3, [pc, #120]	@ (800217c <status_ACKsend_update+0x8c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d02d      	beq.n	8002168 <status_ACKsend_update+0x78>
			    {
			    	if(retryCount < MAX_RETRIES){
 800210c:	4b1c      	ldr	r3, [pc, #112]	@ (8002180 <status_ACKsend_update+0x90>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d81b      	bhi.n	800214e <status_ACKsend_update+0x5e>

						for (int i = 0; i < g_encoded_len; i++) {
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	e00a      	b.n	8002132 <status_ACKsend_update+0x42>
							Uart_write(USART1, g_encoded_pkt[i]);
 800211c:	4a19      	ldr	r2, [pc, #100]	@ (8002184 <status_ACKsend_update+0x94>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	4818      	ldr	r0, [pc, #96]	@ (8002188 <status_ACKsend_update+0x98>)
 8002128:	f7ff fdc4 	bl	8001cb4 <Uart_write>
						for (int i = 0; i < g_encoded_len; i++) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3301      	adds	r3, #1
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b16      	ldr	r3, [pc, #88]	@ (800218c <status_ACKsend_update+0x9c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4293      	cmp	r3, r2
 800213c:	dbee      	blt.n	800211c <status_ACKsend_update+0x2c>
						}
						retryCount++;
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <status_ACKsend_update+0x90>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3301      	adds	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <status_ACKsend_update+0x90>)
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e00c      	b.n	8002168 <status_ACKsend_update+0x78>
			    	}
			    	else {
			    		retryCount = 0;
 800214e:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <status_ACKsend_update+0x90>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
			    		clear_send_flag();
 8002154:	f7ff ff98 	bl	8002088 <clear_send_flag>
			    		Uart_sendstring(USART6, "TIMEOUT_NORESPONE");
 8002158:	490d      	ldr	r1, [pc, #52]	@ (8002190 <status_ACKsend_update+0xa0>)
 800215a:	480e      	ldr	r0, [pc, #56]	@ (8002194 <status_ACKsend_update+0xa4>)
 800215c:	f7ff feb6 	bl	8001ecc <Uart_sendstring>
			    		Uart_sendstring(USART6, "\r\n> ");
 8002160:	490d      	ldr	r1, [pc, #52]	@ (8002198 <status_ACKsend_update+0xa8>)
 8002162:	480c      	ldr	r0, [pc, #48]	@ (8002194 <status_ACKsend_update+0xa4>)
 8002164:	f7ff feb2 	bl	8001ecc <Uart_sendstring>
			        }


			    }

				SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);	//restart
 8002168:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800216c:	2003      	movs	r0, #3
 800216e:	f004 fc1b 	bl	80069a8 <SCH_TIM_Start>

			}


		//	[set trang thai]
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000267c 	.word	0x2000267c
 8002180:	2000267d 	.word	0x2000267d
 8002184:	2000257c 	.word	0x2000257c
 8002188:	40011000 	.word	0x40011000
 800218c:	2000267b 	.word	0x2000267b
 8002190:	0800c890 	.word	0x0800c890
 8002194:	40011400 	.word	0x40011400
 8002198:	0800c8a4 	.word	0x0800c8a4

0800219c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	619a      	str	r2, [r3, #24]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <Cmd_iou_set_temp>:
//
//    return CMDLINE_PENDING;
//}

int Cmd_iou_set_temp(int argc, char *argv[])
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80021be:	af02      	add	r7, sp, #8
 80021c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80021c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80021c8:	6018      	str	r0, [r3, #0]
 80021ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80021ce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80021d2:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 80021d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80021d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	dc01      	bgt.n	80021e6 <Cmd_iou_set_temp+0x2e>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e073      	b.n	80022ce <Cmd_iou_set_temp+0x116>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 80021e6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80021ea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	dd01      	ble.n	80021f8 <Cmd_iou_set_temp+0x40>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e06a      	b.n	80022ce <Cmd_iou_set_temp+0x116>

    uint8_t channel = atoi(argv[1]);
 80021f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80021fc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3304      	adds	r3, #4
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f005 ffaa 	bl	8008160 <atoi>
 800220c:	4603      	mov	r3, r0
 800220e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002212:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002216:	2b03      	cmp	r3, #3
 8002218:	d901      	bls.n	800221e <Cmd_iou_set_temp+0x66>
 800221a:	2304      	movs	r3, #4
 800221c:	e057      	b.n	80022ce <Cmd_iou_set_temp+0x116>

    uint16_t temp = atoi(argv[2]);
 800221e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002222:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3308      	adds	r3, #8
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f005 ff97 	bl	8008160 <atoi>
 8002232:	4603      	mov	r3, r0
 8002234:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (temp > 500)    return CMDLINE_INVALID_ARG;
 8002238:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 800223c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002240:	d901      	bls.n	8002246 <Cmd_iou_set_temp+0x8e>
 8002242:	2304      	movs	r3, #4
 8002244:	e043      	b.n	80022ce <Cmd_iou_set_temp+0x116>

    // Create the command payload
    uint8_t cmd  = CMD_CODE_SET_TEMP;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0]  = channel;
 800224c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002250:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(temp >> 8);   //high
 8002254:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	b29b      	uxth	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(temp & 0xFF); //low
 8002262:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    fsp_packet_t  fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800226c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002270:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002274:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	2301      	movs	r3, #1
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2305      	movs	r3, #5
 8002280:	2203      	movs	r2, #3
 8002282:	f004 fd7d 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002286:	f107 020f 	add.w	r2, r7, #15
 800228a:	f107 0110 	add.w	r1, r7, #16
 800228e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002292:	4618      	mov	r0, r3
 8002294:	f004 fdfa 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002298:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800229c:	480e      	ldr	r0, [pc, #56]	@ (80022d8 <Cmd_iou_set_temp+0x120>)
 800229e:	f7ff ff7d 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80022a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022a6:	480c      	ldr	r0, [pc, #48]	@ (80022d8 <Cmd_iou_set_temp+0x120>)
 80022a8:	f7ff ff78 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 80022ac:	2005      	movs	r0, #5
 80022ae:	f004 fcd9 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80022b2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80022b6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff feec 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 80022c8:	f7ff fed2 	bl	8002070 <set_send_flag>
//  ==>>>> khi gui thi mo cong ra, + delay vai ms -> Set co`
//	==>>>> Neu vay thi luon luon mo cong, khi mà nhắn bên 1 2 3 4, nhắn bên 1 thì mở luôn bên 1
//	==>>>> Nhắn bên 2 thì mở luôn bên 2 nếu mà chưa nhận được ack -> busy please wait (processing...)
//  ==>>>> Đoạn đấy bỏ vào trong timeout -> Sau đó mới hiện ok, hoặc done gì đó

    return CMDLINE_PENDING;
 80022cc:	2305      	movs	r3, #5
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40020000 	.word	0x40020000

080022dc <Cmd_iou_get_temp>:


int Cmd_iou_get_temp(int argc, char *argv[])
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80022e2:	af02      	add	r7, sp, #8
 80022e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80022e8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80022ec:	6018      	str	r0, [r3, #0]
 80022ee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80022f2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80022f6:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 80022f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80022fc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b02      	cmp	r3, #2
 8002304:	dc01      	bgt.n	800230a <Cmd_iou_get_temp+0x2e>
 8002306:	2303      	movs	r3, #3
 8002308:	e06a      	b.n	80023e0 <Cmd_iou_get_temp+0x104>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 800230a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800230e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b03      	cmp	r3, #3
 8002316:	dd01      	ble.n	800231c <Cmd_iou_get_temp+0x40>
 8002318:	2302      	movs	r3, #2
 800231a:	e061      	b.n	80023e0 <Cmd_iou_get_temp+0x104>

    uint8_t channel = atoi(argv[1]);
 800231c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002320:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3304      	adds	r3, #4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f005 ff18 	bl	8008160 <atoi>
 8002330:	4603      	mov	r3, r0
 8002332:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002336:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800233a:	2b03      	cmp	r3, #3
 800233c:	d901      	bls.n	8002342 <Cmd_iou_get_temp+0x66>
 800233e:	2304      	movs	r3, #4
 8002340:	e04e      	b.n	80023e0 <Cmd_iou_get_temp+0x104>
    uint8_t sensor = atoi(argv[2]);
 8002342:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002346:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3308      	adds	r3, #8
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f005 ff05 	bl	8008160 <atoi>
 8002356:	4603      	mov	r3, r0
 8002358:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
    if (sensor > 1)    return CMDLINE_INVALID_ARG;
 800235c:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8002360:	2b01      	cmp	r3, #1
 8002362:	d901      	bls.n	8002368 <Cmd_iou_get_temp+0x8c>
 8002364:	2304      	movs	r3, #4
 8002366:	e03b      	b.n	80023e0 <Cmd_iou_get_temp+0x104>

    uint8_t cmd  = CMD_CODE_GET_TEMP;
 8002368:	2302      	movs	r3, #2
 800236a:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    uint8_t payload[2];

    payload[0] = channel;
 800236e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002372:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1] = sensor;
 8002376:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 800237a:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800237e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002382:	f897 0215 	ldrb.w	r0, [r7, #533]	@ 0x215
 8002386:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	2301      	movs	r3, #1
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2305      	movs	r3, #5
 8002392:	2202      	movs	r2, #2
 8002394:	f004 fcf4 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002398:	f107 020f 	add.w	r2, r7, #15
 800239c:	f107 0110 	add.w	r1, r7, #16
 80023a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023a4:	4618      	mov	r0, r3
 80023a6:	f004 fd71 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80023aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023ae:	480f      	ldr	r0, [pc, #60]	@ (80023ec <Cmd_iou_get_temp+0x110>)
 80023b0:	f7ff fef4 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80023b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023b8:	480c      	ldr	r0, [pc, #48]	@ (80023ec <Cmd_iou_get_temp+0x110>)
 80023ba:	f7ff feef 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 80023be:	2005      	movs	r0, #5
 80023c0:	f004 fc50 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80023c4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80023c8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe63 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 80023da:	f7ff fe49 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 80023de:	2305      	movs	r3, #5
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40020000 	.word	0x40020000

080023f0 <Cmd_iou_temp_setpoint>:

int Cmd_iou_temp_setpoint(int argc, char *argv[])
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80023f6:	af02      	add	r7, sp, #8
 80023f8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80023fc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002400:	6018      	str	r0, [r3, #0]
 8002402:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002406:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800240a:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 800240c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002410:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	dc01      	bgt.n	800241e <Cmd_iou_temp_setpoint+0x2e>
 800241a:	2303      	movs	r3, #3
 800241c:	e053      	b.n	80024c6 <Cmd_iou_temp_setpoint+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 800241e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002422:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b02      	cmp	r3, #2
 800242a:	dd01      	ble.n	8002430 <Cmd_iou_temp_setpoint+0x40>
 800242c:	2302      	movs	r3, #2
 800242e:	e04a      	b.n	80024c6 <Cmd_iou_temp_setpoint+0xd6>
    uint8_t channel = atoi(argv[1]);
 8002430:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002434:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3304      	adds	r3, #4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f005 fe8e 	bl	8008160 <atoi>
 8002444:	4603      	mov	r3, r0
 8002446:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800244a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800244e:	2b03      	cmp	r3, #3
 8002450:	d901      	bls.n	8002456 <Cmd_iou_temp_setpoint+0x66>
 8002452:	2304      	movs	r3, #4
 8002454:	e037      	b.n	80024c6 <Cmd_iou_temp_setpoint+0xd6>

    uint8_t cmd  = CMD_CODE_TEMP_SETPOINT;
 8002456:	2303      	movs	r3, #3
 8002458:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0] = channel;
 800245c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002460:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002464:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002468:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 800246c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	2301      	movs	r3, #1
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2305      	movs	r3, #5
 8002478:	2201      	movs	r2, #1
 800247a:	f004 fc81 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800247e:	f107 020b 	add.w	r2, r7, #11
 8002482:	f107 010c 	add.w	r1, r7, #12
 8002486:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800248a:	4618      	mov	r0, r3
 800248c:	f004 fcfe 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002490:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002494:	480e      	ldr	r0, [pc, #56]	@ (80024d0 <Cmd_iou_temp_setpoint+0xe0>)
 8002496:	f7ff fe81 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800249a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800249e:	480c      	ldr	r0, [pc, #48]	@ (80024d0 <Cmd_iou_temp_setpoint+0xe0>)
 80024a0:	f7ff fe7c 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 80024a4:	2005      	movs	r0, #5
 80024a6:	f004 fbdd 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80024aa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80024ae:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fdf0 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 80024c0:	f7ff fdd6 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 80024c4:	2305      	movs	r3, #5
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40020000 	.word	0x40020000

080024d4 <Cmd_iou_tec_ena>:

int Cmd_iou_tec_ena(int argc, char *argv[])
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80024da:	af02      	add	r7, sp, #8
 80024dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80024e0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80024e4:	6018      	str	r0, [r3, #0]
 80024e6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80024ea:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80024ee:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80024f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80024f4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	dc01      	bgt.n	8002502 <Cmd_iou_tec_ena+0x2e>
 80024fe:	2303      	movs	r3, #3
 8002500:	e053      	b.n	80025aa <Cmd_iou_tec_ena+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8002502:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002506:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	dd01      	ble.n	8002514 <Cmd_iou_tec_ena+0x40>
 8002510:	2302      	movs	r3, #2
 8002512:	e04a      	b.n	80025aa <Cmd_iou_tec_ena+0xd6>
    uint8_t channel = atoi(argv[1]);
 8002514:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002518:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3304      	adds	r3, #4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f005 fe1c 	bl	8008160 <atoi>
 8002528:	4603      	mov	r3, r0
 800252a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800252e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002532:	2b03      	cmp	r3, #3
 8002534:	d901      	bls.n	800253a <Cmd_iou_tec_ena+0x66>
 8002536:	2304      	movs	r3, #4
 8002538:	e037      	b.n	80025aa <Cmd_iou_tec_ena+0xd6>

    uint8_t cmd  = CMD_CODE_TEC_ENA;
 800253a:	2304      	movs	r3, #4
 800253c:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0] = channel;
 8002540:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002544:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002548:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800254c:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002550:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	2301      	movs	r3, #1
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2305      	movs	r3, #5
 800255c:	2201      	movs	r2, #1
 800255e:	f004 fc0f 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002562:	f107 020b 	add.w	r2, r7, #11
 8002566:	f107 010c 	add.w	r1, r7, #12
 800256a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800256e:	4618      	mov	r0, r3
 8002570:	f004 fc8c 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002574:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002578:	480e      	ldr	r0, [pc, #56]	@ (80025b4 <Cmd_iou_tec_ena+0xe0>)
 800257a:	f7ff fe0f 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800257e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002582:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <Cmd_iou_tec_ena+0xe0>)
 8002584:	f7ff fe0a 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002588:	2005      	movs	r0, #5
 800258a:	f004 fb6b 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800258e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002592:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fd7e 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 80025a4:	f7ff fd64 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 80025a8:	2305      	movs	r3, #5
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40020000 	.word	0x40020000

080025b8 <Cmd_iou_tec_dis>:

int Cmd_iou_tec_dis(int argc, char *argv[])
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80025be:	af02      	add	r7, sp, #8
 80025c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80025c4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80025c8:	6018      	str	r0, [r3, #0]
 80025ca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80025ce:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80025d2:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80025d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80025d8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	dc01      	bgt.n	80025e6 <Cmd_iou_tec_dis+0x2e>
 80025e2:	2303      	movs	r3, #3
 80025e4:	e053      	b.n	800268e <Cmd_iou_tec_dis+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80025e6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80025ea:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	dd01      	ble.n	80025f8 <Cmd_iou_tec_dis+0x40>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e04a      	b.n	800268e <Cmd_iou_tec_dis+0xd6>
    uint8_t channel = atoi(argv[1]);
 80025f8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80025fc:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3304      	adds	r3, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f005 fdaa 	bl	8008160 <atoi>
 800260c:	4603      	mov	r3, r0
 800260e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002612:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002616:	2b03      	cmp	r3, #3
 8002618:	d901      	bls.n	800261e <Cmd_iou_tec_dis+0x66>
 800261a:	2304      	movs	r3, #4
 800261c:	e037      	b.n	800268e <Cmd_iou_tec_dis+0xd6>

    uint8_t cmd  = CMD_CODE_TEC_DIS;
 800261e:	2305      	movs	r3, #5
 8002620:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0] = channel;
 8002624:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002628:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800262c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002630:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002634:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	2301      	movs	r3, #1
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2305      	movs	r3, #5
 8002640:	2201      	movs	r2, #1
 8002642:	f004 fb9d 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002646:	f107 020b 	add.w	r2, r7, #11
 800264a:	f107 010c 	add.w	r1, r7, #12
 800264e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002652:	4618      	mov	r0, r3
 8002654:	f004 fc1a 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002658:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800265c:	480e      	ldr	r0, [pc, #56]	@ (8002698 <Cmd_iou_tec_dis+0xe0>)
 800265e:	f7ff fd9d 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002662:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002666:	480c      	ldr	r0, [pc, #48]	@ (8002698 <Cmd_iou_tec_dis+0xe0>)
 8002668:	f7ff fd98 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 800266c:	2005      	movs	r0, #5
 800266e:	f004 faf9 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002672:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002676:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd0c 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8002688:	f7ff fcf2 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 800268c:	2305      	movs	r3, #5
}
 800268e:	4618      	mov	r0, r3
 8002690:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40020000 	.word	0x40020000

0800269c <Cmd_iou_tec_ena_auto>:

int Cmd_iou_tec_ena_auto(int argc, char *argv[])
{
 800269c:	b580      	push	{r7, lr}
 800269e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80026a2:	af02      	add	r7, sp, #8
 80026a4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80026a8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80026ac:	6018      	str	r0, [r3, #0]
 80026ae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80026b2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80026b6:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80026b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80026bc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	dc01      	bgt.n	80026ca <Cmd_iou_tec_ena_auto+0x2e>
 80026c6:	2303      	movs	r3, #3
 80026c8:	e053      	b.n	8002772 <Cmd_iou_tec_ena_auto+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80026ca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80026ce:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	dd01      	ble.n	80026dc <Cmd_iou_tec_ena_auto+0x40>
 80026d8:	2302      	movs	r3, #2
 80026da:	e04a      	b.n	8002772 <Cmd_iou_tec_ena_auto+0xd6>
    uint8_t channel = atoi(argv[1]);
 80026dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80026e0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3304      	adds	r3, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f005 fd38 	bl	8008160 <atoi>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80026f6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d901      	bls.n	8002702 <Cmd_iou_tec_ena_auto+0x66>
 80026fe:	2304      	movs	r3, #4
 8002700:	e037      	b.n	8002772 <Cmd_iou_tec_ena_auto+0xd6>

    uint8_t cmd  = CMD_CODE_TEC_ENA_AUTO;
 8002702:	2306      	movs	r3, #6
 8002704:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0] = channel;
 8002708:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800270c:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002710:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002714:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002718:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	2301      	movs	r3, #1
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2305      	movs	r3, #5
 8002724:	2201      	movs	r2, #1
 8002726:	f004 fb2b 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800272a:	f107 020b 	add.w	r2, r7, #11
 800272e:	f107 010c 	add.w	r1, r7, #12
 8002732:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002736:	4618      	mov	r0, r3
 8002738:	f004 fba8 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800273c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002740:	480e      	ldr	r0, [pc, #56]	@ (800277c <Cmd_iou_tec_ena_auto+0xe0>)
 8002742:	f7ff fd2b 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002746:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800274a:	480c      	ldr	r0, [pc, #48]	@ (800277c <Cmd_iou_tec_ena_auto+0xe0>)
 800274c:	f7ff fd26 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002750:	2005      	movs	r0, #5
 8002752:	f004 fa87 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002756:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800275a:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fc9a 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 800276c:	f7ff fc80 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8002770:	2305      	movs	r3, #5
}
 8002772:	4618      	mov	r0, r3
 8002774:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40020000 	.word	0x40020000

08002780 <Cmd_iou_tec_dis_auto>:

int Cmd_iou_tec_dis_auto(int argc, char *argv[])
{
 8002780:	b580      	push	{r7, lr}
 8002782:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002786:	af02      	add	r7, sp, #8
 8002788:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800278c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002790:	6018      	str	r0, [r3, #0]
 8002792:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002796:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800279a:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 800279c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80027a0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	dc01      	bgt.n	80027ae <Cmd_iou_tec_dis_auto+0x2e>
 80027aa:	2303      	movs	r3, #3
 80027ac:	e053      	b.n	8002856 <Cmd_iou_tec_dis_auto+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80027ae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80027b2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	dd01      	ble.n	80027c0 <Cmd_iou_tec_dis_auto+0x40>
 80027bc:	2302      	movs	r3, #2
 80027be:	e04a      	b.n	8002856 <Cmd_iou_tec_dis_auto+0xd6>
    uint8_t channel = atoi(argv[1]);
 80027c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80027c4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3304      	adds	r3, #4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f005 fcc6 	bl	8008160 <atoi>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80027da:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d901      	bls.n	80027e6 <Cmd_iou_tec_dis_auto+0x66>
 80027e2:	2304      	movs	r3, #4
 80027e4:	e037      	b.n	8002856 <Cmd_iou_tec_dis_auto+0xd6>

    uint8_t cmd  = CMD_CODE_TEC_DIS_AUTO;
 80027e6:	2307      	movs	r3, #7
 80027e8:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0] = channel;
 80027ec:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80027f0:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80027f4:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80027f8:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 80027fc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2301      	movs	r3, #1
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2305      	movs	r3, #5
 8002808:	2201      	movs	r2, #1
 800280a:	f004 fab9 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800280e:	f107 020b 	add.w	r2, r7, #11
 8002812:	f107 010c 	add.w	r1, r7, #12
 8002816:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fb36 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002820:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002824:	480e      	ldr	r0, [pc, #56]	@ (8002860 <Cmd_iou_tec_dis_auto+0xe0>)
 8002826:	f7ff fcb9 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800282a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800282e:	480c      	ldr	r0, [pc, #48]	@ (8002860 <Cmd_iou_tec_dis_auto+0xe0>)
 8002830:	f7ff fcb4 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002834:	2005      	movs	r0, #5
 8002836:	f004 fa15 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800283a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800283e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fc28 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8002850:	f7ff fc0e 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8002854:	2305      	movs	r3, #5
}
 8002856:	4618      	mov	r0, r3
 8002858:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40020000 	.word	0x40020000

08002864 <Cmd_iou_tec_set_output>:


int Cmd_iou_tec_set_output(int argc, char *argv[])
{
 8002864:	b580      	push	{r7, lr}
 8002866:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800286a:	af02      	add	r7, sp, #8
 800286c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002870:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002874:	6018      	str	r0, [r3, #0]
 8002876:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800287a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800287e:	6019      	str	r1, [r3, #0]
    if (argc < 4) return CMDLINE_TOO_FEW_ARGS;
 8002880:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002884:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b03      	cmp	r3, #3
 800288c:	dc01      	bgt.n	8002892 <Cmd_iou_tec_set_output+0x2e>
 800288e:	2303      	movs	r3, #3
 8002890:	e08a      	b.n	80029a8 <Cmd_iou_tec_set_output+0x144>
    if (argc > 4) return CMDLINE_TOO_MANY_ARGS;
 8002892:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002896:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b04      	cmp	r3, #4
 800289e:	dd01      	ble.n	80028a4 <Cmd_iou_tec_set_output+0x40>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e081      	b.n	80029a8 <Cmd_iou_tec_set_output+0x144>
    uint8_t channel = atoi(argv[1]);
 80028a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80028a8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3304      	adds	r3, #4
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f005 fc54 	bl	8008160 <atoi>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80028be:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d901      	bls.n	80028ca <Cmd_iou_tec_set_output+0x66>
 80028c6:	2304      	movs	r3, #4
 80028c8:	e06e      	b.n	80029a8 <Cmd_iou_tec_set_output+0x144>

    uint8_t mode = atoi(argv[2]);
 80028ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80028ce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3308      	adds	r3, #8
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f005 fc41 	bl	8008160 <atoi>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
    if (mode > 1)    return CMDLINE_INVALID_ARG;
 80028e4:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d901      	bls.n	80028f0 <Cmd_iou_tec_set_output+0x8c>
 80028ec:	2304      	movs	r3, #4
 80028ee:	e05b      	b.n	80029a8 <Cmd_iou_tec_set_output+0x144>

    uint16_t vol = atoi(argv[3]);
 80028f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80028f4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f005 fc2e 	bl	8008160 <atoi>
 8002904:	4603      	mov	r3, r0
 8002906:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 800290a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 800290e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002912:	d901      	bls.n	8002918 <Cmd_iou_tec_set_output+0xb4>
 8002914:	2304      	movs	r3, #4
 8002916:	e047      	b.n	80029a8 <Cmd_iou_tec_set_output+0x144>


    uint8_t cmd  = CMD_CODE_TEC_SET_OUTPUT;
 8002918:	2308      	movs	r3, #8
 800291a:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];
    payload[0] = channel;
 800291e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002922:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1] = mode;
 8002926:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 800292a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(vol >> 8);   //high
 800292e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	b29b      	uxth	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(vol & 0xFF); //low
 800293c:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002946:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800294a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800294e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	2301      	movs	r3, #1
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2305      	movs	r3, #5
 800295a:	2204      	movs	r2, #4
 800295c:	f004 fa10 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002960:	f107 020b 	add.w	r2, r7, #11
 8002964:	f107 010c 	add.w	r1, r7, #12
 8002968:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800296c:	4618      	mov	r0, r3
 800296e:	f004 fa8d 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002972:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002976:	480f      	ldr	r0, [pc, #60]	@ (80029b4 <Cmd_iou_tec_set_output+0x150>)
 8002978:	f7ff fc10 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800297c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002980:	480c      	ldr	r0, [pc, #48]	@ (80029b4 <Cmd_iou_tec_set_output+0x150>)
 8002982:	f7ff fc0b 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002986:	2005      	movs	r0, #5
 8002988:	f004 f96c 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800298c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002990:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fb7f 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 80029a2:	f7ff fb65 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 80029a6:	2305      	movs	r3, #5
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40020000 	.word	0x40020000

080029b8 <Cmd_iou_tec_auto_vol>:

int Cmd_iou_tec_auto_vol(int argc, char *argv[])
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80029be:	af02      	add	r7, sp, #8
 80029c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80029c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80029c8:	6018      	str	r0, [r3, #0]
 80029ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80029ce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80029d2:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 80029d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80029d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	dc01      	bgt.n	80029e6 <Cmd_iou_tec_auto_vol+0x2e>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e073      	b.n	8002ace <Cmd_iou_tec_auto_vol+0x116>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 80029e6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80029ea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	dd01      	ble.n	80029f8 <Cmd_iou_tec_auto_vol+0x40>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e06a      	b.n	8002ace <Cmd_iou_tec_auto_vol+0x116>
    uint8_t channel = atoi(argv[1]);
 80029f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80029fc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3304      	adds	r3, #4
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f005 fbaa 	bl	8008160 <atoi>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002a12:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d901      	bls.n	8002a1e <Cmd_iou_tec_auto_vol+0x66>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e057      	b.n	8002ace <Cmd_iou_tec_auto_vol+0x116>

    uint16_t vol = atoi(argv[2]);
 8002a1e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002a22:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3308      	adds	r3, #8
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f005 fb97 	bl	8008160 <atoi>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 8002a38:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8002a3c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a40:	d901      	bls.n	8002a46 <Cmd_iou_tec_auto_vol+0x8e>
 8002a42:	2304      	movs	r3, #4
 8002a44:	e043      	b.n	8002ace <Cmd_iou_tec_auto_vol+0x116>

    uint8_t cmd  = CMD_CODE_TEC_AUTO_VOL;
 8002a46:	2309      	movs	r3, #9
 8002a48:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0] = channel;
 8002a4c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002a50:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(vol >> 8);   //high
 8002a54:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(vol & 0xFF); //low
 8002a62:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002a6c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002a70:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002a74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2305      	movs	r3, #5
 8002a80:	2203      	movs	r2, #3
 8002a82:	f004 f97d 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002a86:	f107 020f 	add.w	r2, r7, #15
 8002a8a:	f107 0110 	add.w	r1, r7, #16
 8002a8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a92:	4618      	mov	r0, r3
 8002a94:	f004 f9fa 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002a98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a9c:	480e      	ldr	r0, [pc, #56]	@ (8002ad8 <Cmd_iou_tec_auto_vol+0x120>)
 8002a9e:	f7ff fb7d 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002aa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002aa6:	480c      	ldr	r0, [pc, #48]	@ (8002ad8 <Cmd_iou_tec_auto_vol+0x120>)
 8002aa8:	f7ff fb78 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002aac:	2005      	movs	r0, #5
 8002aae:	f004 f8d9 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002ab2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002ab6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002aba:	781a      	ldrb	r2, [r3, #0]
 8002abc:	f107 0310 	add.w	r3, r7, #16
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff faec 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8002ac8:	f7ff fad2 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8002acc:	2305      	movs	r3, #5
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40020000 	.word	0x40020000

08002adc <Cmd_iou_tec_status>:

int Cmd_iou_tec_status(int argc, char *argv[])
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002ae8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002aec:	6018      	str	r0, [r3, #0]
 8002aee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002af2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002af6:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8002af8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002afc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	dc01      	bgt.n	8002b0a <Cmd_iou_tec_status+0x2e>
 8002b06:	2303      	movs	r3, #3
 8002b08:	e037      	b.n	8002b7a <Cmd_iou_tec_status+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8002b0a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002b0e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	dd01      	ble.n	8002b1c <Cmd_iou_tec_status+0x40>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e02e      	b.n	8002b7a <Cmd_iou_tec_status+0x9e>

    uint8_t cmd  = CMD_CODE_TEC_STATUS;
 8002b1c:	230a      	movs	r3, #10
 8002b1e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002b22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b26:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	2105      	movs	r1, #5
 8002b2e:	f004 f8ff 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002b32:	f107 020f 	add.w	r2, r7, #15
 8002b36:	f107 0110 	add.w	r1, r7, #16
 8002b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 f9a4 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002b44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b48:	480e      	ldr	r0, [pc, #56]	@ (8002b84 <Cmd_iou_tec_status+0xa8>)
 8002b4a:	f7ff fb27 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002b4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b52:	480c      	ldr	r0, [pc, #48]	@ (8002b84 <Cmd_iou_tec_status+0xa8>)
 8002b54:	f7ff fb22 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002b58:	2005      	movs	r0, #5
 8002b5a:	f004 f883 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002b5e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002b62:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002b66:	781a      	ldrb	r2, [r3, #0]
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa96 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8002b74:	f7ff fa7c 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8002b78:	2305      	movs	r3, #5
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40020000 	.word	0x40020000

08002b88 <Cmd_iou_tec_log_ena>:

int Cmd_iou_tec_log_ena(int argc, char *argv[])
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002b94:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002b98:	6018      	str	r0, [r3, #0]
 8002b9a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002b9e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002ba2:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8002ba4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002ba8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	dc01      	bgt.n	8002bb6 <Cmd_iou_tec_log_ena+0x2e>
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e037      	b.n	8002c26 <Cmd_iou_tec_log_ena+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8002bb6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002bba:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	dd01      	ble.n	8002bc8 <Cmd_iou_tec_log_ena+0x40>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e02e      	b.n	8002c26 <Cmd_iou_tec_log_ena+0x9e>

    uint8_t cmd  = CMD_CODE_TEC_LOG_ENA;
 8002bc8:	230b      	movs	r3, #11
 8002bca:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002bce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002bd2:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	2105      	movs	r1, #5
 8002bda:	f004 f8a9 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002bde:	f107 020f 	add.w	r2, r7, #15
 8002be2:	f107 0110 	add.w	r1, r7, #16
 8002be6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 f94e 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002bf0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bf4:	480e      	ldr	r0, [pc, #56]	@ (8002c30 <Cmd_iou_tec_log_ena+0xa8>)
 8002bf6:	f7ff fad1 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002bfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bfe:	480c      	ldr	r0, [pc, #48]	@ (8002c30 <Cmd_iou_tec_log_ena+0xa8>)
 8002c00:	f7ff facc 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002c04:	2005      	movs	r0, #5
 8002c06:	f004 f82d 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002c0a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002c0e:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fa40 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8002c20:	f7ff fa26 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8002c24:	2305      	movs	r3, #5
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40020000 	.word	0x40020000

08002c34 <Cmd_iou_tec_log_dis>:

int Cmd_iou_tec_log_dis(int argc, char *argv[])
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002c40:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002c44:	6018      	str	r0, [r3, #0]
 8002c46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002c4a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002c4e:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8002c50:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002c54:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	dc01      	bgt.n	8002c62 <Cmd_iou_tec_log_dis+0x2e>
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e037      	b.n	8002cd2 <Cmd_iou_tec_log_dis+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8002c62:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002c66:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	dd01      	ble.n	8002c74 <Cmd_iou_tec_log_dis+0x40>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e02e      	b.n	8002cd2 <Cmd_iou_tec_log_dis+0x9e>

    uint8_t cmd  = CMD_CODE_TEC_LOG_DIS;
 8002c74:	230c      	movs	r3, #12
 8002c76:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002c7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c7e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8002c82:	2201      	movs	r2, #1
 8002c84:	2105      	movs	r1, #5
 8002c86:	f004 f853 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002c8a:	f107 020f 	add.w	r2, r7, #15
 8002c8e:	f107 0110 	add.w	r1, r7, #16
 8002c92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 f8f8 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002c9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ca0:	480e      	ldr	r0, [pc, #56]	@ (8002cdc <Cmd_iou_tec_log_dis+0xa8>)
 8002ca2:	f7ff fa7b 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002ca6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002caa:	480c      	ldr	r0, [pc, #48]	@ (8002cdc <Cmd_iou_tec_log_dis+0xa8>)
 8002cac:	f7ff fa76 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002cb0:	2005      	movs	r0, #5
 8002cb2:	f003 ffd7 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002cb6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002cba:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff f9ea 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8002ccc:	f7ff f9d0 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8002cd0:	2305      	movs	r3, #5
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40020000 	.word	0x40020000

08002ce0 <Cmd_iou_ringled_setRGB>:

int Cmd_iou_ringled_setRGB(int argc, char *argv[])
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002ce6:	af02      	add	r7, sp, #8
 8002ce8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002cec:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002cf0:	6018      	str	r0, [r3, #0]
 8002cf2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002cf6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002cfa:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8002cfc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002d00:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	dc01      	bgt.n	8002d0e <Cmd_iou_ringled_setRGB+0x2e>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e053      	b.n	8002db6 <Cmd_iou_ringled_setRGB+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8002d0e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002d12:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	dd01      	ble.n	8002d20 <Cmd_iou_ringled_setRGB+0x40>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e04a      	b.n	8002db6 <Cmd_iou_ringled_setRGB+0xd6>
    uint8_t mode = atoi(argv[1]);
 8002d20:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002d24:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f005 fa16 	bl	8008160 <atoi>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (mode > 3)    return CMDLINE_INVALID_ARG;
 8002d3a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d901      	bls.n	8002d46 <Cmd_iou_ringled_setRGB+0x66>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e037      	b.n	8002db6 <Cmd_iou_ringled_setRGB+0xd6>

    uint8_t cmd  = CMD_CODE_RINGLED_SETRGB;
 8002d46:	230d      	movs	r3, #13
 8002d48:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];

    payload[0]  = mode; //low
 8002d4c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002d50:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002d54:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002d58:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002d5c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	2301      	movs	r3, #1
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2305      	movs	r3, #5
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f004 f809 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002d6e:	f107 020b 	add.w	r2, r7, #11
 8002d72:	f107 010c 	add.w	r1, r7, #12
 8002d76:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 f886 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002d80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d84:	480e      	ldr	r0, [pc, #56]	@ (8002dc0 <Cmd_iou_ringled_setRGB+0xe0>)
 8002d86:	f7ff fa09 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002d8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d8e:	480c      	ldr	r0, [pc, #48]	@ (8002dc0 <Cmd_iou_ringled_setRGB+0xe0>)
 8002d90:	f7ff fa04 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002d94:	2005      	movs	r0, #5
 8002d96:	f003 ff65 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002d9a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002d9e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff f978 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8002db0:	f7ff f95e 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8002db4:	2305      	movs	r3, #5
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40020000 	.word	0x40020000

08002dc4 <Cmd_iou_ringled_getRGB>:

int Cmd_iou_ringled_getRGB(int argc, char *argv[])
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002dd0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002dd4:	6018      	str	r0, [r3, #0]
 8002dd6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002dda:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002dde:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8002de0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002de4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	dc01      	bgt.n	8002df2 <Cmd_iou_ringled_getRGB+0x2e>
 8002dee:	2303      	movs	r3, #3
 8002df0:	e037      	b.n	8002e62 <Cmd_iou_ringled_getRGB+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8002df2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002df6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	dd01      	ble.n	8002e04 <Cmd_iou_ringled_getRGB+0x40>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e02e      	b.n	8002e62 <Cmd_iou_ringled_getRGB+0x9e>


    uint8_t cmd  = CMD_CODE_RINGLED_GETRGB;
 8002e04:	230e      	movs	r3, #14
 8002e06:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002e0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e0e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8002e12:	2201      	movs	r2, #1
 8002e14:	2105      	movs	r1, #5
 8002e16:	f003 ff8b 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002e1a:	f107 020f 	add.w	r2, r7, #15
 8002e1e:	f107 0110 	add.w	r1, r7, #16
 8002e22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e26:	4618      	mov	r0, r3
 8002e28:	f004 f830 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002e2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e30:	480e      	ldr	r0, [pc, #56]	@ (8002e6c <Cmd_iou_ringled_getRGB+0xa8>)
 8002e32:	f7ff f9b3 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002e36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e3a:	480c      	ldr	r0, [pc, #48]	@ (8002e6c <Cmd_iou_ringled_getRGB+0xa8>)
 8002e3c:	f7ff f9ae 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002e40:	2005      	movs	r0, #5
 8002e42:	f003 ff0f 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002e46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e4a:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	f107 0310 	add.w	r3, r7, #16
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f922 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8002e5c:	f7ff f908 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8002e60:	2305      	movs	r3, #5
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40020000 	.word	0x40020000

08002e70 <Cmd_iou_irled_set_bright>:

int Cmd_iou_irled_set_bright(int argc, char *argv[])
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002e76:	af02      	add	r7, sp, #8
 8002e78:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e7c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002e80:	6018      	str	r0, [r3, #0]
 8002e82:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e86:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002e8a:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8002e8c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e90:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	dc01      	bgt.n	8002e9e <Cmd_iou_irled_set_bright+0x2e>
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e053      	b.n	8002f46 <Cmd_iou_irled_set_bright+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8002e9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002ea2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	dd01      	ble.n	8002eb0 <Cmd_iou_irled_set_bright+0x40>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e04a      	b.n	8002f46 <Cmd_iou_irled_set_bright+0xd6>
    uint8_t percent = atoi(argv[1]);
 8002eb0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002eb4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f005 f94e 	bl	8008160 <atoi>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (percent > 100)    return CMDLINE_INVALID_ARG;
 8002eca:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002ece:	2b64      	cmp	r3, #100	@ 0x64
 8002ed0:	d901      	bls.n	8002ed6 <Cmd_iou_irled_set_bright+0x66>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	e037      	b.n	8002f46 <Cmd_iou_irled_set_bright+0xd6>

    uint8_t cmd  = CMD_CODE_IRLED_SET_BRIGHT;
 8002ed6:	230f      	movs	r3, #15
 8002ed8:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];

    payload[0]  = percent; //low
 8002edc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002ee0:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002ee4:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002ee8:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002eec:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2305      	movs	r3, #5
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f003 ff41 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002efe:	f107 020b 	add.w	r2, r7, #11
 8002f02:	f107 010c 	add.w	r1, r7, #12
 8002f06:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 ffbe 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002f10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f14:	480e      	ldr	r0, [pc, #56]	@ (8002f50 <Cmd_iou_irled_set_bright+0xe0>)
 8002f16:	f7ff f941 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002f1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f1e:	480c      	ldr	r0, [pc, #48]	@ (8002f50 <Cmd_iou_irled_set_bright+0xe0>)
 8002f20:	f7ff f93c 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002f24:	2005      	movs	r0, #5
 8002f26:	f003 fe9d 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002f2a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f2e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f8b0 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8002f40:	f7ff f896 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8002f44:	2305      	movs	r3, #5
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40020000 	.word	0x40020000

08002f54 <Cmd_iou_irled_get_bright>:

int Cmd_iou_irled_get_bright(int argc, char *argv[])
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f60:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002f64:	6018      	str	r0, [r3, #0]
 8002f66:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f6a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002f6e:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8002f70:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f74:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	dc01      	bgt.n	8002f82 <Cmd_iou_irled_get_bright+0x2e>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e037      	b.n	8002ff2 <Cmd_iou_irled_get_bright+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8002f82:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f86:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	dd01      	ble.n	8002f94 <Cmd_iou_irled_get_bright+0x40>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e02e      	b.n	8002ff2 <Cmd_iou_irled_get_bright+0x9e>

    uint8_t cmd  = CMD_CODE_IRLED_GET_BRIGHT;
 8002f94:	2310      	movs	r3, #16
 8002f96:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002f9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f9e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	2105      	movs	r1, #5
 8002fa6:	f003 fec3 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002faa:	f107 020f 	add.w	r2, r7, #15
 8002fae:	f107 0110 	add.w	r1, r7, #16
 8002fb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 ff68 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002fbc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fc0:	480e      	ldr	r0, [pc, #56]	@ (8002ffc <Cmd_iou_irled_get_bright+0xa8>)
 8002fc2:	f7ff f8eb 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002fc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fca:	480c      	ldr	r0, [pc, #48]	@ (8002ffc <Cmd_iou_irled_get_bright+0xa8>)
 8002fcc:	f7ff f8e6 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002fd0:	2005      	movs	r0, #5
 8002fd2:	f003 fe47 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002fd6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002fda:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002fde:	781a      	ldrb	r2, [r3, #0]
 8002fe0:	f107 0310 	add.w	r3, r7, #16
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff f85a 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8002fec:	f7ff f840 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8002ff0:	2305      	movs	r3, #5
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40020000 	.word	0x40020000

08003000 <Cmd_iou_get_accel>:



int Cmd_iou_get_accel(int argc, char *argv[])
{
 8003000:	b580      	push	{r7, lr}
 8003002:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8003006:	af00      	add	r7, sp, #0
 8003008:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800300c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003010:	6018      	str	r0, [r3, #0]
 8003012:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003016:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800301a:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 800301c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003020:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	dc01      	bgt.n	800302e <Cmd_iou_get_accel+0x2e>
 800302a:	2303      	movs	r3, #3
 800302c:	e037      	b.n	800309e <Cmd_iou_get_accel+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 800302e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003032:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b01      	cmp	r3, #1
 800303a:	dd01      	ble.n	8003040 <Cmd_iou_get_accel+0x40>
 800303c:	2302      	movs	r3, #2
 800303e:	e02e      	b.n	800309e <Cmd_iou_get_accel+0x9e>

    uint8_t cmd  = CMD_CODE_GET_ACCEL_GYRO;
 8003040:	2311      	movs	r3, #17
 8003042:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003046:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800304a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800304e:	2201      	movs	r2, #1
 8003050:	2105      	movs	r1, #5
 8003052:	f003 fe6d 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003056:	f107 020f 	add.w	r2, r7, #15
 800305a:	f107 0110 	add.w	r1, r7, #16
 800305e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003062:	4618      	mov	r0, r3
 8003064:	f003 ff12 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003068:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800306c:	480e      	ldr	r0, [pc, #56]	@ (80030a8 <Cmd_iou_get_accel+0xa8>)
 800306e:	f7ff f895 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003072:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003076:	480c      	ldr	r0, [pc, #48]	@ (80030a8 <Cmd_iou_get_accel+0xa8>)
 8003078:	f7ff f890 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 800307c:	2005      	movs	r0, #5
 800307e:	f003 fdf1 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8003082:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003086:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	f107 0310 	add.w	r3, r7, #16
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff f804 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8003098:	f7fe ffea 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 800309c:	2305      	movs	r3, #5
}
 800309e:	4618      	mov	r0, r3
 80030a0:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40020000 	.word	0x40020000

080030ac <Cmd_iou_get_press>:

int Cmd_iou_get_press(int argc, char *argv[])
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80030b8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80030bc:	6018      	str	r0, [r3, #0]
 80030be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80030c2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80030c6:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 80030c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80030cc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	dc01      	bgt.n	80030da <Cmd_iou_get_press+0x2e>
 80030d6:	2303      	movs	r3, #3
 80030d8:	e037      	b.n	800314a <Cmd_iou_get_press+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80030da:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80030de:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	dd01      	ble.n	80030ec <Cmd_iou_get_press+0x40>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e02e      	b.n	800314a <Cmd_iou_get_press+0x9e>

    uint8_t cmd  = CMD_CODE_GET_PRESS;
 80030ec:	2312      	movs	r3, #18
 80030ee:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80030f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80030f6:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80030fa:	2201      	movs	r2, #1
 80030fc:	2105      	movs	r1, #5
 80030fe:	f003 fe17 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003102:	f107 020f 	add.w	r2, r7, #15
 8003106:	f107 0110 	add.w	r1, r7, #16
 800310a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800310e:	4618      	mov	r0, r3
 8003110:	f003 febc 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003114:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003118:	480e      	ldr	r0, [pc, #56]	@ (8003154 <Cmd_iou_get_press+0xa8>)
 800311a:	f7ff f83f 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800311e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003122:	480c      	ldr	r0, [pc, #48]	@ (8003154 <Cmd_iou_get_press+0xa8>)
 8003124:	f7ff f83a 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8003128:	2005      	movs	r0, #5
 800312a:	f003 fd9b 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800312e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003132:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	f107 0310 	add.w	r3, r7, #16
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe ffae 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8003144:	f7fe ff94 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8003148:	2305      	movs	r3, #5
}
 800314a:	4618      	mov	r0, r3
 800314c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40020000 	.word	0x40020000

08003158 <Cmd_iou_get_parameters>:


int Cmd_iou_get_parameters(int argc, char *argv[])
{
 8003158:	b580      	push	{r7, lr}
 800315a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800315e:	af00      	add	r7, sp, #0
 8003160:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003164:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003168:	6018      	str	r0, [r3, #0]
 800316a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800316e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003172:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003174:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003178:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	dc01      	bgt.n	8003186 <Cmd_iou_get_parameters+0x2e>
 8003182:	2303      	movs	r3, #3
 8003184:	e037      	b.n	80031f6 <Cmd_iou_get_parameters+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003186:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800318a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	dd01      	ble.n	8003198 <Cmd_iou_get_parameters+0x40>
 8003194:	2302      	movs	r3, #2
 8003196:	e02e      	b.n	80031f6 <Cmd_iou_get_parameters+0x9e>

    uint8_t cmd  = CMD_CODE_GET_PARAMETERS;
 8003198:	2313      	movs	r3, #19
 800319a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800319e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80031a2:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80031a6:	2201      	movs	r2, #1
 80031a8:	2105      	movs	r1, #5
 80031aa:	f003 fdc1 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80031ae:	f107 020f 	add.w	r2, r7, #15
 80031b2:	f107 0110 	add.w	r1, r7, #16
 80031b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fe66 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80031c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031c4:	480e      	ldr	r0, [pc, #56]	@ (8003200 <Cmd_iou_get_parameters+0xa8>)
 80031c6:	f7fe ffe9 	bl	800219c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80031ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031ce:	480c      	ldr	r0, [pc, #48]	@ (8003200 <Cmd_iou_get_parameters+0xa8>)
 80031d0:	f7fe ffe4 	bl	800219c <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 80031d4:	2005      	movs	r0, #5
 80031d6:	f003 fd45 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80031da:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80031de:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	f107 0310 	add.w	r3, r7, #16
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe ff58 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 80031f0:	f7fe ff3e 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 80031f4:	2305      	movs	r3, #5
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40020000 	.word	0x40020000

08003204 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	619a      	str	r2, [r3, #24]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <Cmd_pdu_set_channel>:


#define DEST_ADDR FSP_ADR_PDU

int Cmd_pdu_set_channel(int argc, char *argv[])
{
 8003224:	b580      	push	{r7, lr}
 8003226:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800322a:	af02      	add	r7, sp, #8
 800322c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003230:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003234:	6018      	str	r0, [r3, #0]
 8003236:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800323a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800323e:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8003240:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003244:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b02      	cmp	r3, #2
 800324c:	dc01      	bgt.n	8003252 <Cmd_pdu_set_channel+0x2e>
 800324e:	2303      	movs	r3, #3
 8003250:	e06a      	b.n	8003328 <Cmd_pdu_set_channel+0x104>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8003252:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003256:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b03      	cmp	r3, #3
 800325e:	dd01      	ble.n	8003264 <Cmd_pdu_set_channel+0x40>
 8003260:	2302      	movs	r3, #2
 8003262:	e061      	b.n	8003328 <Cmd_pdu_set_channel+0x104>
    uint8_t channel = atoi(argv[1]);
 8003264:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003268:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3304      	adds	r3, #4
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f004 ff74 	bl	8008160 <atoi>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 800327e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8003282:	2b09      	cmp	r3, #9
 8003284:	d901      	bls.n	800328a <Cmd_pdu_set_channel+0x66>
 8003286:	2304      	movs	r3, #4
 8003288:	e04e      	b.n	8003328 <Cmd_pdu_set_channel+0x104>

    uint8_t state = atoi(argv[2]);
 800328a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800328e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3308      	adds	r3, #8
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f004 ff61 	bl	8008160 <atoi>
 800329e:	4603      	mov	r3, r0
 80032a0:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
    if (state > 1) return CMDLINE_INVALID_ARG;
 80032a4:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d901      	bls.n	80032b0 <Cmd_pdu_set_channel+0x8c>
 80032ac:	2304      	movs	r3, #4
 80032ae:	e03b      	b.n	8003328 <Cmd_pdu_set_channel+0x104>

    uint8_t cmd  = CMD_CODE_PDU_SET_CHANNEL;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    uint8_t payload[2];
    payload[0]  = channel;
 80032b6:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80032ba:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 80032be:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80032c2:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80032c6:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80032ca:	f897 0215 	ldrb.w	r0, [r7, #533]	@ 0x215
 80032ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	2301      	movs	r3, #1
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	2303      	movs	r3, #3
 80032da:	2202      	movs	r2, #2
 80032dc:	f003 fd50 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80032e0:	f107 020f 	add.w	r2, r7, #15
 80032e4:	f107 0110 	add.w	r1, r7, #16
 80032e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 fdcd 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80032f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032f6:	480f      	ldr	r0, [pc, #60]	@ (8003334 <Cmd_pdu_set_channel+0x110>)
 80032f8:	f7ff ff84 	bl	8003204 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80032fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003300:	480c      	ldr	r0, [pc, #48]	@ (8003334 <Cmd_pdu_set_channel+0x110>)
 8003302:	f7ff ff7f 	bl	8003204 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 8003306:	2005      	movs	r0, #5
 8003308:	f003 fcac 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800330c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003310:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe febf 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8003322:	f7fe fea5 	bl	8002070 <set_send_flag>


    return CMDLINE_PENDING;
 8003326:	2305      	movs	r3, #5
}
 8003328:	4618      	mov	r0, r3
 800332a:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40020000 	.word	0x40020000

08003338 <Cmd_pdu_set_buck>:

int Cmd_pdu_set_buck(int argc, char *argv[])
{
 8003338:	b580      	push	{r7, lr}
 800333a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800333e:	af02      	add	r7, sp, #8
 8003340:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003344:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003348:	6018      	str	r0, [r3, #0]
 800334a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800334e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003352:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8003354:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003358:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b02      	cmp	r3, #2
 8003360:	dc01      	bgt.n	8003366 <Cmd_pdu_set_buck+0x2e>
 8003362:	2303      	movs	r3, #3
 8003364:	e06a      	b.n	800343c <Cmd_pdu_set_buck+0x104>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8003366:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800336a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b03      	cmp	r3, #3
 8003372:	dd01      	ble.n	8003378 <Cmd_pdu_set_buck+0x40>
 8003374:	2302      	movs	r3, #2
 8003376:	e061      	b.n	800343c <Cmd_pdu_set_buck+0x104>
    uint8_t buck = atoi(argv[1]);
 8003378:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800337c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3304      	adds	r3, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f004 feea 	bl	8008160 <atoi>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8003392:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8003396:	2b06      	cmp	r3, #6
 8003398:	d901      	bls.n	800339e <Cmd_pdu_set_buck+0x66>
 800339a:	2304      	movs	r3, #4
 800339c:	e04e      	b.n	800343c <Cmd_pdu_set_buck+0x104>

    uint8_t state = atoi(argv[2]);
 800339e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80033a2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3308      	adds	r3, #8
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 fed7 	bl	8008160 <atoi>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
    if (state > 1) return CMDLINE_INVALID_ARG;
 80033b8:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d901      	bls.n	80033c4 <Cmd_pdu_set_buck+0x8c>
 80033c0:	2304      	movs	r3, #4
 80033c2:	e03b      	b.n	800343c <Cmd_pdu_set_buck+0x104>

    uint8_t cmd  = CMD_CODE_PDU_SET_BUCK;
 80033c4:	2302      	movs	r3, #2
 80033c6:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    uint8_t payload[2];
    payload[0]  = buck;
 80033ca:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80033ce:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 80033d2:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80033d6:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80033da:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80033de:	f897 0215 	ldrb.w	r0, [r7, #533]	@ 0x215
 80033e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	2301      	movs	r3, #1
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2303      	movs	r3, #3
 80033ee:	2202      	movs	r2, #2
 80033f0:	f003 fcc6 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80033f4:	f107 020f 	add.w	r2, r7, #15
 80033f8:	f107 0110 	add.w	r1, r7, #16
 80033fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003400:	4618      	mov	r0, r3
 8003402:	f003 fd43 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003406:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800340a:	480f      	ldr	r0, [pc, #60]	@ (8003448 <Cmd_pdu_set_buck+0x110>)
 800340c:	f7ff fefa 	bl	8003204 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003410:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003414:	480c      	ldr	r0, [pc, #48]	@ (8003448 <Cmd_pdu_set_buck+0x110>)
 8003416:	f7ff fef5 	bl	8003204 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 800341a:	2005      	movs	r0, #5
 800341c:	f003 fc22 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8003420:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003424:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	f107 0310 	add.w	r3, r7, #16
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fe35 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8003436:	f7fe fe1b 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 800343a:	2305      	movs	r3, #5
}
 800343c:	4618      	mov	r0, r3
 800343e:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40020000 	.word	0x40020000

0800344c <Cmd_pdu_set_all>:

int Cmd_pdu_set_all(int argc, char *argv[])
{
 800344c:	b580      	push	{r7, lr}
 800344e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003452:	af02      	add	r7, sp, #8
 8003454:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003458:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800345c:	6018      	str	r0, [r3, #0]
 800345e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003462:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003466:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8003468:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800346c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	dc01      	bgt.n	800347a <Cmd_pdu_set_all+0x2e>
 8003476:	2303      	movs	r3, #3
 8003478:	e053      	b.n	8003522 <Cmd_pdu_set_all+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 800347a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800347e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	dd01      	ble.n	800348c <Cmd_pdu_set_all+0x40>
 8003488:	2302      	movs	r3, #2
 800348a:	e04a      	b.n	8003522 <Cmd_pdu_set_all+0xd6>

    uint8_t state = atoi(argv[1]);
 800348c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003490:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3304      	adds	r3, #4
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f004 fe60 	bl	8008160 <atoi>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (state > 1) return CMDLINE_INVALID_ARG;
 80034a6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d901      	bls.n	80034b2 <Cmd_pdu_set_all+0x66>
 80034ae:	2304      	movs	r3, #4
 80034b0:	e037      	b.n	8003522 <Cmd_pdu_set_all+0xd6>

    uint8_t cmd  = CMD_CODE_PDU_SET_ALL;
 80034b2:	2303      	movs	r3, #3
 80034b4:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0]  = state;
 80034b8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80034bc:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80034c0:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80034c4:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 80034c8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	2301      	movs	r3, #1
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2303      	movs	r3, #3
 80034d4:	2201      	movs	r2, #1
 80034d6:	f003 fc53 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80034da:	f107 020b 	add.w	r2, r7, #11
 80034de:	f107 010c 	add.w	r1, r7, #12
 80034e2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80034e6:	4618      	mov	r0, r3
 80034e8:	f003 fcd0 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80034ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80034f0:	480e      	ldr	r0, [pc, #56]	@ (800352c <Cmd_pdu_set_all+0xe0>)
 80034f2:	f7ff fe87 	bl	8003204 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80034f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034fa:	480c      	ldr	r0, [pc, #48]	@ (800352c <Cmd_pdu_set_all+0xe0>)
 80034fc:	f7ff fe82 	bl	8003204 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 8003500:	2005      	movs	r0, #5
 8003502:	f003 fbaf 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8003506:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800350a:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fdc2 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 800351c:	f7fe fda8 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8003520:	2305      	movs	r3, #5
}
 8003522:	4618      	mov	r0, r3
 8003524:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40020000 	.word	0x40020000

08003530 <Cmd_pdu_get_channel>:

int Cmd_pdu_get_channel(int argc, char *argv[])
{
 8003530:	b580      	push	{r7, lr}
 8003532:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003536:	af02      	add	r7, sp, #8
 8003538:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800353c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003540:	6018      	str	r0, [r3, #0]
 8003542:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003546:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800354a:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 800354c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003550:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	dc01      	bgt.n	800355e <Cmd_pdu_get_channel+0x2e>
 800355a:	2303      	movs	r3, #3
 800355c:	e053      	b.n	8003606 <Cmd_pdu_get_channel+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 800355e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003562:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b02      	cmp	r3, #2
 800356a:	dd01      	ble.n	8003570 <Cmd_pdu_get_channel+0x40>
 800356c:	2302      	movs	r3, #2
 800356e:	e04a      	b.n	8003606 <Cmd_pdu_get_channel+0xd6>
    uint8_t channel = atoi(argv[1]);
 8003570:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003574:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3304      	adds	r3, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f004 fdee 	bl	8008160 <atoi>
 8003584:	4603      	mov	r3, r0
 8003586:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 800358a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800358e:	2b09      	cmp	r3, #9
 8003590:	d901      	bls.n	8003596 <Cmd_pdu_get_channel+0x66>
 8003592:	2304      	movs	r3, #4
 8003594:	e037      	b.n	8003606 <Cmd_pdu_get_channel+0xd6>


    uint8_t cmd  = CMD_CODE_PDU_GET_CHANNEL;
 8003596:	2304      	movs	r3, #4
 8003598:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0]  = channel;
 800359c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80035a0:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80035a4:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80035a8:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 80035ac:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	2301      	movs	r3, #1
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2303      	movs	r3, #3
 80035b8:	2201      	movs	r2, #1
 80035ba:	f003 fbe1 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80035be:	f107 020b 	add.w	r2, r7, #11
 80035c2:	f107 010c 	add.w	r1, r7, #12
 80035c6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 fc5e 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80035d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80035d4:	480e      	ldr	r0, [pc, #56]	@ (8003610 <Cmd_pdu_get_channel+0xe0>)
 80035d6:	f7ff fe15 	bl	8003204 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80035da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035de:	480c      	ldr	r0, [pc, #48]	@ (8003610 <Cmd_pdu_get_channel+0xe0>)
 80035e0:	f7ff fe10 	bl	8003204 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 80035e4:	2005      	movs	r0, #5
 80035e6:	f003 fb3d 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80035ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80035ee:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80035f2:	781a      	ldrb	r2, [r3, #0]
 80035f4:	f107 030c 	add.w	r3, r7, #12
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fd50 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8003600:	f7fe fd36 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8003604:	2305      	movs	r3, #5
}
 8003606:	4618      	mov	r0, r3
 8003608:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40020000 	.word	0x40020000

08003614 <Cmd_pdu_get_buck>:

int Cmd_pdu_get_buck(int argc, char *argv[])
{
 8003614:	b580      	push	{r7, lr}
 8003616:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800361a:	af02      	add	r7, sp, #8
 800361c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003620:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003624:	6018      	str	r0, [r3, #0]
 8003626:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800362a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800362e:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8003630:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003634:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b01      	cmp	r3, #1
 800363c:	dc01      	bgt.n	8003642 <Cmd_pdu_get_buck+0x2e>
 800363e:	2303      	movs	r3, #3
 8003640:	e053      	b.n	80036ea <Cmd_pdu_get_buck+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8003642:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003646:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b02      	cmp	r3, #2
 800364e:	dd01      	ble.n	8003654 <Cmd_pdu_get_buck+0x40>
 8003650:	2302      	movs	r3, #2
 8003652:	e04a      	b.n	80036ea <Cmd_pdu_get_buck+0xd6>
    uint8_t buck = atoi(argv[1]);
 8003654:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003658:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3304      	adds	r3, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 fd7c 	bl	8008160 <atoi>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 800366e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003672:	2b06      	cmp	r3, #6
 8003674:	d901      	bls.n	800367a <Cmd_pdu_get_buck+0x66>
 8003676:	2304      	movs	r3, #4
 8003678:	e037      	b.n	80036ea <Cmd_pdu_get_buck+0xd6>

    uint8_t cmd  = CMD_CODE_PDU_GET_BUCK;
 800367a:	2305      	movs	r3, #5
 800367c:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0]  = buck;
 8003680:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003684:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003688:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800368c:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8003690:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	2301      	movs	r3, #1
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2303      	movs	r3, #3
 800369c:	2201      	movs	r2, #1
 800369e:	f003 fb6f 	bl	8006d80 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80036a2:	f107 020b 	add.w	r2, r7, #11
 80036a6:	f107 010c 	add.w	r1, r7, #12
 80036aa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 fbec 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80036b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036b8:	480e      	ldr	r0, [pc, #56]	@ (80036f4 <Cmd_pdu_get_buck+0xe0>)
 80036ba:	f7ff fda3 	bl	8003204 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80036be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036c2:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <Cmd_pdu_get_buck+0xe0>)
 80036c4:	f7ff fd9e 	bl	8003204 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 80036c8:	2005      	movs	r0, #5
 80036ca:	f003 facb 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80036ce:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80036d2:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80036d6:	781a      	ldrb	r2, [r3, #0]
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fcde 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 80036e4:	f7fe fcc4 	bl	8002070 <set_send_flag>


    return CMDLINE_PENDING;
 80036e8:	2305      	movs	r3, #5
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40020000 	.word	0x40020000

080036f8 <Cmd_pdu_get_all>:

int Cmd_pdu_get_all(int argc, char *argv[])
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80036fe:	af00      	add	r7, sp, #0
 8003700:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003704:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003708:	6018      	str	r0, [r3, #0]
 800370a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800370e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003712:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003714:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003718:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	dc01      	bgt.n	8003726 <Cmd_pdu_get_all+0x2e>
 8003722:	2303      	movs	r3, #3
 8003724:	e037      	b.n	8003796 <Cmd_pdu_get_all+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003726:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800372a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	dd01      	ble.n	8003738 <Cmd_pdu_get_all+0x40>
 8003734:	2302      	movs	r3, #2
 8003736:	e02e      	b.n	8003796 <Cmd_pdu_get_all+0x9e>

    uint8_t cmd  = CMD_CODE_PDU_GET_ALL;
 8003738:	2306      	movs	r3, #6
 800373a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800373e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003742:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003746:	2201      	movs	r2, #1
 8003748:	2103      	movs	r1, #3
 800374a:	f003 faf1 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800374e:	f107 020f 	add.w	r2, r7, #15
 8003752:	f107 0110 	add.w	r1, r7, #16
 8003756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800375a:	4618      	mov	r0, r3
 800375c:	f003 fb96 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003760:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003764:	480e      	ldr	r0, [pc, #56]	@ (80037a0 <Cmd_pdu_get_all+0xa8>)
 8003766:	f7ff fd4d 	bl	8003204 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800376a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800376e:	480c      	ldr	r0, [pc, #48]	@ (80037a0 <Cmd_pdu_get_all+0xa8>)
 8003770:	f7ff fd48 	bl	8003204 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 8003774:	2005      	movs	r0, #5
 8003776:	f003 fa75 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800377a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800377e:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	f107 0310 	add.w	r3, r7, #16
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fc88 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8003790:	f7fe fc6e 	bl	8002070 <set_send_flag>


    return CMDLINE_PENDING;
 8003794:	2305      	movs	r3, #5
}
 8003796:	4618      	mov	r0, r3
 8003798:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40020000 	.word	0x40020000

080037a4 <LL_GPIO_SetOutputPin>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	619a      	str	r2, [r3, #24]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_GPIO_ResetOutputPin>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	041a      	lsls	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	619a      	str	r2, [r3, #24]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <Cmd_pmu_get_temp>:
#include "../ACK_packet/ACKsend_packet.h"

#define DEST_ADDR FSP_ADR_PMU

int Cmd_pmu_get_temp(int argc, char *argv[])
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80037ec:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80037f0:	6018      	str	r0, [r3, #0]
 80037f2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80037f6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80037fa:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 80037fc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003800:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	dc01      	bgt.n	800380e <Cmd_pmu_get_temp+0x2e>
 800380a:	2303      	movs	r3, #3
 800380c:	e037      	b.n	800387e <Cmd_pmu_get_temp+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 800380e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003812:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	dd01      	ble.n	8003820 <Cmd_pmu_get_temp+0x40>
 800381c:	2302      	movs	r3, #2
 800381e:	e02e      	b.n	800387e <Cmd_pmu_get_temp+0x9e>

    uint8_t cmd  = CMD_CODE_PMU_GET_TEMP;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003826:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800382a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800382e:	2201      	movs	r2, #1
 8003830:	2102      	movs	r1, #2
 8003832:	f003 fa7d 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003836:	f107 020f 	add.w	r2, r7, #15
 800383a:	f107 0110 	add.w	r1, r7, #16
 800383e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003842:	4618      	mov	r0, r3
 8003844:	f003 fb22 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003848:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800384c:	480e      	ldr	r0, [pc, #56]	@ (8003888 <Cmd_pmu_get_temp+0xa8>)
 800384e:	f7ff ffb7 	bl	80037c0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003852:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003856:	480c      	ldr	r0, [pc, #48]	@ (8003888 <Cmd_pmu_get_temp+0xa8>)
 8003858:	f7ff ffa4 	bl	80037a4 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 800385c:	2005      	movs	r0, #5
 800385e:	f003 fa01 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8003862:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003866:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	f107 0310 	add.w	r3, r7, #16
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fc14 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8003878:	f7fe fbfa 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 800387c:	2305      	movs	r3, #5
}
 800387e:	4618      	mov	r0, r3
 8003880:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40020000 	.word	0x40020000

0800388c <Cmd_pmu_bat_vol>:

int Cmd_pmu_bat_vol(int argc, char *argv[])
{
 800388c:	b580      	push	{r7, lr}
 800388e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8003892:	af00      	add	r7, sp, #0
 8003894:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003898:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800389c:	6018      	str	r0, [r3, #0]
 800389e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80038a2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80038a6:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 80038a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80038ac:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	dc01      	bgt.n	80038ba <Cmd_pmu_bat_vol+0x2e>
 80038b6:	2303      	movs	r3, #3
 80038b8:	e037      	b.n	800392a <Cmd_pmu_bat_vol+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80038ba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80038be:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	dd01      	ble.n	80038cc <Cmd_pmu_bat_vol+0x40>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e02e      	b.n	800392a <Cmd_pmu_bat_vol+0x9e>

    uint8_t cmd  = CMD_CODE_BAT_VOL;
 80038cc:	2302      	movs	r3, #2
 80038ce:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80038d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038d6:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80038da:	2201      	movs	r2, #1
 80038dc:	2102      	movs	r1, #2
 80038de:	f003 fa27 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80038e2:	f107 020f 	add.w	r2, r7, #15
 80038e6:	f107 0110 	add.w	r1, r7, #16
 80038ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038ee:	4618      	mov	r0, r3
 80038f0:	f003 facc 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80038f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038f8:	480e      	ldr	r0, [pc, #56]	@ (8003934 <Cmd_pmu_bat_vol+0xa8>)
 80038fa:	f7ff ff61 	bl	80037c0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80038fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003902:	480c      	ldr	r0, [pc, #48]	@ (8003934 <Cmd_pmu_bat_vol+0xa8>)
 8003904:	f7ff ff4e 	bl	80037a4 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8003908:	2005      	movs	r0, #5
 800390a:	f003 f9ab 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800390e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003912:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	f107 0310 	add.w	r3, r7, #16
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fbbe 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8003924:	f7fe fba4 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8003928:	2305      	movs	r3, #5
}
 800392a:	4618      	mov	r0, r3
 800392c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40020000 	.word	0x40020000

08003938 <Cmd_pmu_parag_in>:

int Cmd_pmu_parag_in(int argc, char *argv[])
{
 8003938:	b580      	push	{r7, lr}
 800393a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800393e:	af00      	add	r7, sp, #0
 8003940:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003944:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003948:	6018      	str	r0, [r3, #0]
 800394a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800394e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003952:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003954:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003958:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	dc01      	bgt.n	8003966 <Cmd_pmu_parag_in+0x2e>
 8003962:	2303      	movs	r3, #3
 8003964:	e037      	b.n	80039d6 <Cmd_pmu_parag_in+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003966:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800396a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	dd01      	ble.n	8003978 <Cmd_pmu_parag_in+0x40>
 8003974:	2302      	movs	r3, #2
 8003976:	e02e      	b.n	80039d6 <Cmd_pmu_parag_in+0x9e>

    uint8_t cmd  = CMD_CODE_PARAG_IN;
 8003978:	2303      	movs	r3, #3
 800397a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800397e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003982:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003986:	2201      	movs	r2, #1
 8003988:	2102      	movs	r1, #2
 800398a:	f003 f9d1 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800398e:	f107 020f 	add.w	r2, r7, #15
 8003992:	f107 0110 	add.w	r1, r7, #16
 8003996:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800399a:	4618      	mov	r0, r3
 800399c:	f003 fa76 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80039a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039a4:	480e      	ldr	r0, [pc, #56]	@ (80039e0 <Cmd_pmu_parag_in+0xa8>)
 80039a6:	f7ff ff0b 	bl	80037c0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80039aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039ae:	480c      	ldr	r0, [pc, #48]	@ (80039e0 <Cmd_pmu_parag_in+0xa8>)
 80039b0:	f7ff fef8 	bl	80037a4 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 80039b4:	2005      	movs	r0, #5
 80039b6:	f003 f955 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80039ba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80039be:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80039c2:	781a      	ldrb	r2, [r3, #0]
 80039c4:	f107 0310 	add.w	r3, r7, #16
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fb68 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 80039d0:	f7fe fb4e 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 80039d4:	2305      	movs	r3, #5
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40020000 	.word	0x40020000

080039e4 <Cmd_pmu_parag_out>:

int Cmd_pmu_parag_out(int argc, char *argv[])
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80039f0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80039f4:	6018      	str	r0, [r3, #0]
 80039f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80039fa:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80039fe:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003a00:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003a04:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	dc01      	bgt.n	8003a12 <Cmd_pmu_parag_out+0x2e>
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e037      	b.n	8003a82 <Cmd_pmu_parag_out+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003a12:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003a16:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	dd01      	ble.n	8003a24 <Cmd_pmu_parag_out+0x40>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e02e      	b.n	8003a82 <Cmd_pmu_parag_out+0x9e>

    uint8_t cmd  = CMD_CODE_PARAG_OUT;
 8003a24:	2304      	movs	r3, #4
 8003a26:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003a2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a2e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003a32:	2201      	movs	r2, #1
 8003a34:	2102      	movs	r1, #2
 8003a36:	f003 f97b 	bl	8006d30 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003a3a:	f107 020f 	add.w	r2, r7, #15
 8003a3e:	f107 0110 	add.w	r1, r7, #16
 8003a42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 fa20 	bl	8006e8c <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003a4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a50:	480e      	ldr	r0, [pc, #56]	@ (8003a8c <Cmd_pmu_parag_out+0xa8>)
 8003a52:	f7ff feb5 	bl	80037c0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003a56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a5a:	480c      	ldr	r0, [pc, #48]	@ (8003a8c <Cmd_pmu_parag_out+0xa8>)
 8003a5c:	f7ff fea2 	bl	80037a4 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8003a60:	2005      	movs	r0, #5
 8003a62:	f003 f8ff 	bl	8006c64 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8003a66:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003a6a:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	f107 0310 	add.w	r3, r7, #16
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fb12 	bl	80020a0 <set_fsp_packet>
    set_send_flag();
 8003a7c:	f7fe faf8 	bl	8002070 <set_send_flag>

    return CMDLINE_PENDING;
 8003a80:	2305      	movs	r3, #5
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40020000 	.word	0x40020000

08003a90 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8003aa4:	e01f      	b.n	8003ae6 <CmdLineProcess+0x56>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d105      	bne.n	8003aba <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e012      	b.n	8003ae0 <CmdLineProcess+0x50>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00f      	beq.n	8003ae0 <CmdLineProcess+0x50>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b07      	cmp	r3, #7
 8003ac4:	d80a      	bhi.n	8003adc <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8003ac6:	491d      	ldr	r1, [pc, #116]	@ (8003b3c <CmdLineProcess+0xac>)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	e001      	b.n	8003ae0 <CmdLineProcess+0x50>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8003adc:	2302      	movs	r3, #2
 8003ade:	e028      	b.n	8003b32 <CmdLineProcess+0xa2>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1db      	bne.n	8003aa6 <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01d      	beq.n	8003b30 <CmdLineProcess+0xa0>
    {
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8003af4:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <CmdLineProcess+0xb0>)
 8003af6:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8003af8:	e016      	b.n	8003b28 <CmdLineProcess+0x98>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8003afa:	4b10      	ldr	r3, [pc, #64]	@ (8003b3c <CmdLineProcess+0xac>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f7fc fb63 	bl	80001d0 <strcmp>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d108      	bne.n	8003b22 <CmdLineProcess+0x92>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4909      	ldr	r1, [pc, #36]	@ (8003b3c <CmdLineProcess+0xac>)
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4798      	blx	r3
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e007      	b.n	8003b32 <CmdLineProcess+0xa2>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	330c      	adds	r3, #12
 8003b26:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e4      	bne.n	8003afa <CmdLineProcess+0x6a>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8003b30:	2301      	movs	r3, #1
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20002680 	.word	0x20002680
 8003b40:	20000038 	.word	0x20000038

08003b44 <__NVIC_SystemReset>:
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003b48:	f3bf 8f4f 	dsb	sy
}
 8003b4c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003b4e:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <__NVIC_SystemReset+0x24>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003b56:	4904      	ldr	r1, [pc, #16]	@ (8003b68 <__NVIC_SystemReset+0x24>)
 8003b58:	4b04      	ldr	r3, [pc, #16]	@ (8003b6c <__NVIC_SystemReset+0x28>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b5e:	f3bf 8f4f 	dsb	sy
}
 8003b62:	bf00      	nop
    __NOP();
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <__NVIC_SystemReset+0x20>
 8003b68:	e000ed00 	.word	0xe000ed00
 8003b6c:	05fa0004 	.word	0x05fa0004

08003b70 <LL_GPIO_IsOutputPinSet>:
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	4013      	ands	r3, r2
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <LL_GPIO_SetOutputPin>:
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	619a      	str	r2, [r3, #24]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <LL_GPIO_ResetOutputPin>:
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	041a      	lsls	r2, r3, #16
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	619a      	str	r2, [r3, #24]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <command_init>:
		command_task_update                // taskFunction;
	}
};

void	command_init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8003bda:	f7fd ff0f 	bl	80019fc <Ringbuf_init>

//	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 8003bde:	2280      	movs	r2, #128	@ 0x80
 8003be0:	2100      	movs	r1, #0
 8003be2:	4824      	ldr	r0, [pc, #144]	@ (8003c74 <command_init+0xa0>)
 8003be4:	f005 fae9 	bl	80091ba <memset>
	s_commandBufferIndex = 0;
 8003be8:	4b23      	ldr	r3, [pc, #140]	@ (8003c78 <command_init+0xa4>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
	Uart_sendstring(USART6,"\r\n");
 8003bee:	4923      	ldr	r1, [pc, #140]	@ (8003c7c <command_init+0xa8>)
 8003bf0:	4823      	ldr	r0, [pc, #140]	@ (8003c80 <command_init+0xac>)
 8003bf2:	f7fe f96b 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6,"\r\n");
 8003bf6:	4921      	ldr	r1, [pc, #132]	@ (8003c7c <command_init+0xa8>)
 8003bf8:	4821      	ldr	r0, [pc, #132]	@ (8003c80 <command_init+0xac>)
 8003bfa:	f7fe f967 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6,"> CPOC FIRMWARE V1.0.0 \r\n");
 8003bfe:	4921      	ldr	r1, [pc, #132]	@ (8003c84 <command_init+0xb0>)
 8003c00:	481f      	ldr	r0, [pc, #124]	@ (8003c80 <command_init+0xac>)
 8003c02:	f7fe f963 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6,"\r\n");
 8003c06:	491d      	ldr	r1, [pc, #116]	@ (8003c7c <command_init+0xa8>)
 8003c08:	481d      	ldr	r0, [pc, #116]	@ (8003c80 <command_init+0xac>)
 8003c0a:	f7fe f95f 	bl	8001ecc <Uart_sendstring>
	command_send_splash();
 8003c0e:	f000 fcef 	bl	80045f0 <command_send_splash>

	tCmdLineEntry *pEntry;


	Uart_sendstring(USART6, "\nStart with <help_xxxx> command\r\n");
 8003c12:	491d      	ldr	r1, [pc, #116]	@ (8003c88 <command_init+0xb4>)
 8003c14:	481a      	ldr	r0, [pc, #104]	@ (8003c80 <command_init+0xac>)
 8003c16:	f7fe f959 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "-------------------------------------\r\n");
 8003c1a:	491c      	ldr	r1, [pc, #112]	@ (8003c8c <command_init+0xb8>)
 8003c1c:	4818      	ldr	r0, [pc, #96]	@ (8003c80 <command_init+0xac>)
 8003c1e:	f7fe f955 	bl	8001ecc <Uart_sendstring>
	pEntry = &g_psCmdTable[0];
 8003c22:	4b1b      	ldr	r3, [pc, #108]	@ (8003c90 <command_init+0xbc>)
 8003c24:	607b      	str	r3, [r7, #4]

	while (pEntry->pcCmd) {
 8003c26:	e016      	b.n	8003c56 <command_init+0x82>
		Uart_sendstring(USART6, pEntry->pcCmd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4814      	ldr	r0, [pc, #80]	@ (8003c80 <command_init+0xac>)
 8003c30:	f7fe f94c 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4811      	ldr	r0, [pc, #68]	@ (8003c80 <command_init+0xac>)
 8003c3c:	f7fe f946 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 8003c40:	490e      	ldr	r1, [pc, #56]	@ (8003c7c <command_init+0xa8>)
 8003c42:	480f      	ldr	r0, [pc, #60]	@ (8003c80 <command_init+0xac>)
 8003c44:	f7fe f942 	bl	8001ecc <Uart_sendstring>
	    if (pEntry == &g_psCmdTable[8]) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a12      	ldr	r2, [pc, #72]	@ (8003c94 <command_init+0xc0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <command_init+0x8c>
	        break;
	    }
	    pEntry++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	330c      	adds	r3, #12
 8003c54:	607b      	str	r3, [r7, #4]
	while (pEntry->pcCmd) {
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e4      	bne.n	8003c28 <command_init+0x54>
 8003c5e:	e000      	b.n	8003c62 <command_init+0x8e>
	        break;
 8003c60:	bf00      	nop
	}



	Uart_sendstring(USART6, "\r\n> ");
 8003c62:	490d      	ldr	r1, [pc, #52]	@ (8003c98 <command_init+0xc4>)
 8003c64:	4806      	ldr	r0, [pc, #24]	@ (8003c80 <command_init+0xac>)
 8003c66:	f7fe f931 	bl	8001ecc <Uart_sendstring>


}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	200026a4 	.word	0x200026a4
 8003c78:	20002724 	.word	0x20002724
 8003c7c:	0800d994 	.word	0x0800d994
 8003c80:	40011400 	.word	0x40011400
 8003c84:	0800d998 	.word	0x0800d998
 8003c88:	0800d9b4 	.word	0x0800d9b4
 8003c8c:	0800d9d8 	.word	0x0800d9d8
 8003c90:	20000038 	.word	0x20000038
 8003c94:	20000098 	.word	0x20000098
 8003c98:	0800da00 	.word	0x0800da00

08003c9c <command_task_update>:

static void command_task_update(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
    char rxData;
    int8_t ret_val;

    while (IsDataAvailable(USART6))
 8003ca2:	e062      	b.n	8003d6a <command_task_update+0xce>
    {

        rxData = Uart_read(USART6);
 8003ca4:	4836      	ldr	r0, [pc, #216]	@ (8003d80 <command_task_update+0xe4>)
 8003ca6:	f7fd ff67 	bl	8001b78 <Uart_read>
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
        Uart_write(USART6, rxData);
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4833      	ldr	r0, [pc, #204]	@ (8003d80 <command_task_update+0xe4>)
 8003cb4:	f7fd fffe 	bl	8001cb4 <Uart_write>
        if ((rxData == '\r') || (rxData == '\n'))
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	2b0d      	cmp	r3, #13
 8003cbc:	d002      	beq.n	8003cc4 <command_task_update+0x28>
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	2b0a      	cmp	r3, #10
 8003cc2:	d12e      	bne.n	8003d22 <command_task_update+0x86>
        {
            if (s_commandBufferIndex > 0)
 8003cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8003d84 <command_task_update+0xe8>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d025      	beq.n	8003d18 <command_task_update+0x7c>
            {
                s_commandBuffer[s_commandBufferIndex] = 0;
 8003ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8003d84 <command_task_update+0xe8>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d88 <command_task_update+0xec>)
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	5499      	strb	r1, [r3, r2]
                s_commandBufferIndex++;
 8003cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d84 <command_task_update+0xe8>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b28      	ldr	r3, [pc, #160]	@ (8003d84 <command_task_update+0xe8>)
 8003ce2:	701a      	strb	r2, [r3, #0]
                ret_val = CmdLineProcess(s_commandBuffer);
 8003ce4:	4828      	ldr	r0, [pc, #160]	@ (8003d88 <command_task_update+0xec>)
 8003ce6:	f7ff fed3 	bl	8003a90 <CmdLineProcess>
 8003cea:	4603      	mov	r3, r0
 8003cec:	71bb      	strb	r3, [r7, #6]
                s_commandBufferIndex = 0;
 8003cee:	4b25      	ldr	r3, [pc, #148]	@ (8003d84 <command_task_update+0xe8>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
                Uart_sendstring(USART6, "\r\n> ");
 8003cf4:	4925      	ldr	r1, [pc, #148]	@ (8003d8c <command_task_update+0xf0>)
 8003cf6:	4822      	ldr	r0, [pc, #136]	@ (8003d80 <command_task_update+0xe4>)
 8003cf8:	f7fe f8e8 	bl	8001ecc <Uart_sendstring>
                Uart_sendstring(USART6, ErrorCode[ret_val]);
 8003cfc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003d00:	4a23      	ldr	r2, [pc, #140]	@ (8003d90 <command_task_update+0xf4>)
 8003d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d06:	4619      	mov	r1, r3
 8003d08:	481d      	ldr	r0, [pc, #116]	@ (8003d80 <command_task_update+0xe4>)
 8003d0a:	f7fe f8df 	bl	8001ecc <Uart_sendstring>
                Uart_sendstring(USART6, "> ");
 8003d0e:	4921      	ldr	r1, [pc, #132]	@ (8003d94 <command_task_update+0xf8>)
 8003d10:	481b      	ldr	r0, [pc, #108]	@ (8003d80 <command_task_update+0xe4>)
 8003d12:	f7fe f8db 	bl	8001ecc <Uart_sendstring>
            if (s_commandBufferIndex > 0)
 8003d16:	e028      	b.n	8003d6a <command_task_update+0xce>
            }
            else
            {
                Uart_sendstring(USART6, "\r\n> ");
 8003d18:	491c      	ldr	r1, [pc, #112]	@ (8003d8c <command_task_update+0xf0>)
 8003d1a:	4819      	ldr	r0, [pc, #100]	@ (8003d80 <command_task_update+0xe4>)
 8003d1c:	f7fe f8d6 	bl	8001ecc <Uart_sendstring>
            if (s_commandBufferIndex > 0)
 8003d20:	e023      	b.n	8003d6a <command_task_update+0xce>
            }
        }
        else if ((rxData == 8) || (rxData == 127))
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d002      	beq.n	8003d2e <command_task_update+0x92>
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d2c:	d10a      	bne.n	8003d44 <command_task_update+0xa8>
        {
            if (s_commandBufferIndex > 0)
 8003d2e:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <command_task_update+0xe8>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d019      	beq.n	8003d6a <command_task_update+0xce>
            {
                s_commandBufferIndex--;
 8003d36:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <command_task_update+0xe8>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <command_task_update+0xe8>)
 8003d40:	701a      	strb	r2, [r3, #0]
            if (s_commandBufferIndex > 0)
 8003d42:	e012      	b.n	8003d6a <command_task_update+0xce>
            }
        }
        else
        {
            s_commandBuffer[s_commandBufferIndex] = rxData;
 8003d44:	4b0f      	ldr	r3, [pc, #60]	@ (8003d84 <command_task_update+0xe8>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8003d88 <command_task_update+0xec>)
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	5453      	strb	r3, [r2, r1]
            s_commandBufferIndex++;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <command_task_update+0xe8>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	4b0a      	ldr	r3, [pc, #40]	@ (8003d84 <command_task_update+0xe8>)
 8003d5a:	701a      	strb	r2, [r3, #0]
            if (s_commandBufferIndex > COMMAND_MAX_LENGTH)
 8003d5c:	4b09      	ldr	r3, [pc, #36]	@ (8003d84 <command_task_update+0xe8>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b80      	cmp	r3, #128	@ 0x80
 8003d62:	d902      	bls.n	8003d6a <command_task_update+0xce>
            {
                s_commandBufferIndex = 0;
 8003d64:	4b07      	ldr	r3, [pc, #28]	@ (8003d84 <command_task_update+0xe8>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART6))
 8003d6a:	4805      	ldr	r0, [pc, #20]	@ (8003d80 <command_task_update+0xe4>)
 8003d6c:	f7fe f868 	bl	8001e40 <IsDataAvailable>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d196      	bne.n	8003ca4 <command_task_update+0x8>
            }
        }
    }
}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40011400 	.word	0x40011400
 8003d84:	20002724 	.word	0x20002724
 8003d88:	200026a4 	.word	0x200026a4
 8003d8c:	0800da00 	.word	0x0800da00
 8003d90:	20000020 	.word	0x20000020
 8003d94:	0800da08 	.word	0x0800da08

08003d98 <Cmd_help>:


int Cmd_help(int argc, char *argv[]) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	Uart_sendstring(USART6, "\nSimple commands\r\n");
 8003da2:	4916      	ldr	r1, [pc, #88]	@ (8003dfc <Cmd_help+0x64>)
 8003da4:	4816      	ldr	r0, [pc, #88]	@ (8003e00 <Cmd_help+0x68>)
 8003da6:	f7fe f891 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "------------------\r\n");
 8003daa:	4916      	ldr	r1, [pc, #88]	@ (8003e04 <Cmd_help+0x6c>)
 8003dac:	4814      	ldr	r0, [pc, #80]	@ (8003e00 <Cmd_help+0x68>)
 8003dae:	f7fe f88d 	bl	8001ecc <Uart_sendstring>
	pEntry = &g_psCmdTable[0];
 8003db2:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <Cmd_help+0x70>)
 8003db4:	60fb      	str	r3, [r7, #12]


	while (pEntry->pcCmd) {
 8003db6:	e016      	b.n	8003de6 <Cmd_help+0x4e>
		Uart_sendstring(USART6, pEntry->pcCmd);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4810      	ldr	r0, [pc, #64]	@ (8003e00 <Cmd_help+0x68>)
 8003dc0:	f7fe f884 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	480d      	ldr	r0, [pc, #52]	@ (8003e00 <Cmd_help+0x68>)
 8003dcc:	f7fe f87e 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 8003dd0:	490e      	ldr	r1, [pc, #56]	@ (8003e0c <Cmd_help+0x74>)
 8003dd2:	480b      	ldr	r0, [pc, #44]	@ (8003e00 <Cmd_help+0x68>)
 8003dd4:	f7fe f87a 	bl	8001ecc <Uart_sendstring>
	    if (pEntry == &g_psCmdTable[8]) {
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a0d      	ldr	r2, [pc, #52]	@ (8003e10 <Cmd_help+0x78>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d007      	beq.n	8003df0 <Cmd_help+0x58>
	        break;
	    }
	    pEntry++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	330c      	adds	r3, #12
 8003de4:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e4      	bne.n	8003db8 <Cmd_help+0x20>
 8003dee:	e000      	b.n	8003df2 <Cmd_help+0x5a>
	        break;
 8003df0:	bf00      	nop
	}

	// Return success.
	return (CMDLINE_OK);
 8003df2:	2300      	movs	r3, #0

}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	0800da0c 	.word	0x0800da0c
 8003e00:	40011400 	.word	0x40011400
 8003e04:	0800da20 	.word	0x0800da20
 8003e08:	20000038 	.word	0x20000038
 8003e0c:	0800d994 	.word	0x0800d994
 8003e10:	20000098 	.word	0x20000098

08003e14 <Cmd_help_all>:


int Cmd_help_all(int argc, char *argv[]) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;

	Uart_sendstring(USART6, "\nAvailable commands\r\n");
 8003e1e:	492b      	ldr	r1, [pc, #172]	@ (8003ecc <Cmd_help_all+0xb8>)
 8003e20:	482b      	ldr	r0, [pc, #172]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003e22:	f7fe f853 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "------------------\r\n");
 8003e26:	492b      	ldr	r1, [pc, #172]	@ (8003ed4 <Cmd_help_all+0xc0>)
 8003e28:	4829      	ldr	r0, [pc, #164]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003e2a:	f7fe f84f 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
 8003e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed8 <Cmd_help_all+0xc4>)
 8003e30:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8003e32:	e03e      	b.n	8003eb2 <Cmd_help_all+0x9e>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4825      	ldr	r0, [pc, #148]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003e3c:	f7fe f846 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4619      	mov	r1, r3
 8003e46:	4822      	ldr	r0, [pc, #136]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003e48:	f7fe f840 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 8003e4c:	4923      	ldr	r1, [pc, #140]	@ (8003edc <Cmd_help_all+0xc8>)
 8003e4e:	4820      	ldr	r0, [pc, #128]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003e50:	f7fe f83c 	bl	8001ecc <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[8]) {
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a22      	ldr	r2, [pc, #136]	@ (8003ee0 <Cmd_help_all+0xcc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d104      	bne.n	8003e66 <Cmd_help_all+0x52>
	        Uart_sendstring(USART6, "\n--------------CPOC Command List-------------\r\n");
 8003e5c:	4921      	ldr	r1, [pc, #132]	@ (8003ee4 <Cmd_help_all+0xd0>)
 8003e5e:	481c      	ldr	r0, [pc, #112]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003e60:	f7fe f834 	bl	8001ecc <Uart_sendstring>
 8003e64:	e022      	b.n	8003eac <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[24]) {
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee8 <Cmd_help_all+0xd4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d104      	bne.n	8003e78 <Cmd_help_all+0x64>
	        Uart_sendstring(USART6, "\n--------------PMU Command List-------------\r\n");
 8003e6e:	491f      	ldr	r1, [pc, #124]	@ (8003eec <Cmd_help_all+0xd8>)
 8003e70:	4817      	ldr	r0, [pc, #92]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003e72:	f7fe f82b 	bl	8001ecc <Uart_sendstring>
 8003e76:	e019      	b.n	8003eac <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[28]) {
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <Cmd_help_all+0xdc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d104      	bne.n	8003e8a <Cmd_help_all+0x76>
	        Uart_sendstring(USART6, "\n--------------PDU Command List-------------\r\n");
 8003e80:	491c      	ldr	r1, [pc, #112]	@ (8003ef4 <Cmd_help_all+0xe0>)
 8003e82:	4813      	ldr	r0, [pc, #76]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003e84:	f7fe f822 	bl	8001ecc <Uart_sendstring>
 8003e88:	e010      	b.n	8003eac <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[33]) {
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef8 <Cmd_help_all+0xe4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d104      	bne.n	8003e9c <Cmd_help_all+0x88>
	        Uart_sendstring(USART6, "\n--------------CAM Command List-------------\r\n");
 8003e92:	491a      	ldr	r1, [pc, #104]	@ (8003efc <Cmd_help_all+0xe8>)
 8003e94:	480e      	ldr	r0, [pc, #56]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003e96:	f7fe f819 	bl	8001ecc <Uart_sendstring>
 8003e9a:	e007      	b.n	8003eac <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[34]) {
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a18      	ldr	r2, [pc, #96]	@ (8003f00 <Cmd_help_all+0xec>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <Cmd_help_all+0x98>
	        Uart_sendstring(USART6, "\n--------------IOU Command List-------------\r\n");
 8003ea4:	4917      	ldr	r1, [pc, #92]	@ (8003f04 <Cmd_help_all+0xf0>)
 8003ea6:	480a      	ldr	r0, [pc, #40]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003ea8:	f7fe f810 	bl	8001ecc <Uart_sendstring>
	    }


		// Advance to the next entry in the table.
		pEntry++;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1bc      	bne.n	8003e34 <Cmd_help_all+0x20>

	}
	Uart_sendstring(USART6, "--------------    END    -------------\r\n");
 8003eba:	4913      	ldr	r1, [pc, #76]	@ (8003f08 <Cmd_help_all+0xf4>)
 8003ebc:	4804      	ldr	r0, [pc, #16]	@ (8003ed0 <Cmd_help_all+0xbc>)
 8003ebe:	f7fe f805 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	0800da38 	.word	0x0800da38
 8003ed0:	40011400 	.word	0x40011400
 8003ed4:	0800da20 	.word	0x0800da20
 8003ed8:	20000038 	.word	0x20000038
 8003edc:	0800d994 	.word	0x0800d994
 8003ee0:	20000098 	.word	0x20000098
 8003ee4:	0800da50 	.word	0x0800da50
 8003ee8:	20000158 	.word	0x20000158
 8003eec:	0800da80 	.word	0x0800da80
 8003ef0:	20000188 	.word	0x20000188
 8003ef4:	0800dab0 	.word	0x0800dab0
 8003ef8:	200001c4 	.word	0x200001c4
 8003efc:	0800dae0 	.word	0x0800dae0
 8003f00:	200001d0 	.word	0x200001d0
 8003f04:	0800db10 	.word	0x0800db10
 8003f08:	0800db40 	.word	0x0800db40

08003f0c <Cmd_help_cpoc>:

int Cmd_help_cpoc(int argc, char *argv[]) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(USART6, "--------------CPOC Command List-------------\r\n");
 8003f16:	4914      	ldr	r1, [pc, #80]	@ (8003f68 <Cmd_help_cpoc+0x5c>)
 8003f18:	4814      	ldr	r0, [pc, #80]	@ (8003f6c <Cmd_help_cpoc+0x60>)
 8003f1a:	f7fd ffd7 	bl	8001ecc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[9];
 8003f1e:	4b14      	ldr	r3, [pc, #80]	@ (8003f70 <Cmd_help_cpoc+0x64>)
 8003f20:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8003f22:	e016      	b.n	8003f52 <Cmd_help_cpoc+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4810      	ldr	r0, [pc, #64]	@ (8003f6c <Cmd_help_cpoc+0x60>)
 8003f2c:	f7fd ffce 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4619      	mov	r1, r3
 8003f36:	480d      	ldr	r0, [pc, #52]	@ (8003f6c <Cmd_help_cpoc+0x60>)
 8003f38:	f7fd ffc8 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 8003f3c:	490d      	ldr	r1, [pc, #52]	@ (8003f74 <Cmd_help_cpoc+0x68>)
 8003f3e:	480b      	ldr	r0, [pc, #44]	@ (8003f6c <Cmd_help_cpoc+0x60>)
 8003f40:	f7fd ffc4 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[24]) {
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <Cmd_help_cpoc+0x6c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d007      	beq.n	8003f5c <Cmd_help_cpoc+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e4      	bne.n	8003f24 <Cmd_help_cpoc+0x18>
 8003f5a:	e000      	b.n	8003f5e <Cmd_help_cpoc+0x52>
	        break;
 8003f5c:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8003f5e:	2300      	movs	r3, #0

}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	0800db6c 	.word	0x0800db6c
 8003f6c:	40011400 	.word	0x40011400
 8003f70:	200000a4 	.word	0x200000a4
 8003f74:	0800d994 	.word	0x0800d994
 8003f78:	20000158 	.word	0x20000158

08003f7c <Cmd_help_pmu>:
int Cmd_help_pmu(int argc, char *argv[]) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(USART6, "--------------PMU Command List-------------\r\n");
 8003f86:	4914      	ldr	r1, [pc, #80]	@ (8003fd8 <Cmd_help_pmu+0x5c>)
 8003f88:	4814      	ldr	r0, [pc, #80]	@ (8003fdc <Cmd_help_pmu+0x60>)
 8003f8a:	f7fd ff9f 	bl	8001ecc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[25];
 8003f8e:	4b14      	ldr	r3, [pc, #80]	@ (8003fe0 <Cmd_help_pmu+0x64>)
 8003f90:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8003f92:	e016      	b.n	8003fc2 <Cmd_help_pmu+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4810      	ldr	r0, [pc, #64]	@ (8003fdc <Cmd_help_pmu+0x60>)
 8003f9c:	f7fd ff96 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	480d      	ldr	r0, [pc, #52]	@ (8003fdc <Cmd_help_pmu+0x60>)
 8003fa8:	f7fd ff90 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 8003fac:	490d      	ldr	r1, [pc, #52]	@ (8003fe4 <Cmd_help_pmu+0x68>)
 8003fae:	480b      	ldr	r0, [pc, #44]	@ (8003fdc <Cmd_help_pmu+0x60>)
 8003fb0:	f7fd ff8c 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[28]) {
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe8 <Cmd_help_pmu+0x6c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d007      	beq.n	8003fcc <Cmd_help_pmu+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e4      	bne.n	8003f94 <Cmd_help_pmu+0x18>
 8003fca:	e000      	b.n	8003fce <Cmd_help_pmu+0x52>
	        break;
 8003fcc:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	0800db9c 	.word	0x0800db9c
 8003fdc:	40011400 	.word	0x40011400
 8003fe0:	20000164 	.word	0x20000164
 8003fe4:	0800d994 	.word	0x0800d994
 8003fe8:	20000188 	.word	0x20000188

08003fec <Cmd_help_pdu>:
int Cmd_help_pdu(int argc, char *argv[]) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(USART6, "--------------PDU Command List-------------\r\n");
 8003ff6:	4914      	ldr	r1, [pc, #80]	@ (8004048 <Cmd_help_pdu+0x5c>)
 8003ff8:	4814      	ldr	r0, [pc, #80]	@ (800404c <Cmd_help_pdu+0x60>)
 8003ffa:	f7fd ff67 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[29];
 8003ffe:	4b14      	ldr	r3, [pc, #80]	@ (8004050 <Cmd_help_pdu+0x64>)
 8004000:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8004002:	e016      	b.n	8004032 <Cmd_help_pdu+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4619      	mov	r1, r3
 800400a:	4810      	ldr	r0, [pc, #64]	@ (800404c <Cmd_help_pdu+0x60>)
 800400c:	f7fd ff5e 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4619      	mov	r1, r3
 8004016:	480d      	ldr	r0, [pc, #52]	@ (800404c <Cmd_help_pdu+0x60>)
 8004018:	f7fd ff58 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 800401c:	490d      	ldr	r1, [pc, #52]	@ (8004054 <Cmd_help_pdu+0x68>)
 800401e:	480b      	ldr	r0, [pc, #44]	@ (800404c <Cmd_help_pdu+0x60>)
 8004020:	f7fd ff54 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[33]) {
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4a0c      	ldr	r2, [pc, #48]	@ (8004058 <Cmd_help_pdu+0x6c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <Cmd_help_pdu+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	330c      	adds	r3, #12
 8004030:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e4      	bne.n	8004004 <Cmd_help_pdu+0x18>
 800403a:	e000      	b.n	800403e <Cmd_help_pdu+0x52>
	        break;
 800403c:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	0800dbcc 	.word	0x0800dbcc
 800404c:	40011400 	.word	0x40011400
 8004050:	20000194 	.word	0x20000194
 8004054:	0800d994 	.word	0x0800d994
 8004058:	200001c4 	.word	0x200001c4

0800405c <Cmd_help_cam>:
int Cmd_help_cam(int argc, char *argv[]) {
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(USART6, "--------------CAM Command List-------------\r\n");
 8004066:	4914      	ldr	r1, [pc, #80]	@ (80040b8 <Cmd_help_cam+0x5c>)
 8004068:	4814      	ldr	r0, [pc, #80]	@ (80040bc <Cmd_help_cam+0x60>)
 800406a:	f7fd ff2f 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[34];
 800406e:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <Cmd_help_cam+0x64>)
 8004070:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8004072:	e016      	b.n	80040a2 <Cmd_help_cam+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4619      	mov	r1, r3
 800407a:	4810      	ldr	r0, [pc, #64]	@ (80040bc <Cmd_help_cam+0x60>)
 800407c:	f7fd ff26 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4619      	mov	r1, r3
 8004086:	480d      	ldr	r0, [pc, #52]	@ (80040bc <Cmd_help_cam+0x60>)
 8004088:	f7fd ff20 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 800408c:	490d      	ldr	r1, [pc, #52]	@ (80040c4 <Cmd_help_cam+0x68>)
 800408e:	480b      	ldr	r0, [pc, #44]	@ (80040bc <Cmd_help_cam+0x60>)
 8004090:	f7fd ff1c 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[34]) {
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a0a      	ldr	r2, [pc, #40]	@ (80040c0 <Cmd_help_cam+0x64>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d007      	beq.n	80040ac <Cmd_help_cam+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	330c      	adds	r3, #12
 80040a0:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e4      	bne.n	8004074 <Cmd_help_cam+0x18>
 80040aa:	e000      	b.n	80040ae <Cmd_help_cam+0x52>
	        break;
 80040ac:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	0800dbfc 	.word	0x0800dbfc
 80040bc:	40011400 	.word	0x40011400
 80040c0:	200001d0 	.word	0x200001d0
 80040c4:	0800d994 	.word	0x0800d994

080040c8 <Cmd_help_iou>:
int Cmd_help_iou(int argc, char *argv[]) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(USART6, "--------------IOU Command List-------------\r\n");
 80040d2:	4914      	ldr	r1, [pc, #80]	@ (8004124 <Cmd_help_iou+0x5c>)
 80040d4:	4814      	ldr	r0, [pc, #80]	@ (8004128 <Cmd_help_iou+0x60>)
 80040d6:	f7fd fef9 	bl	8001ecc <Uart_sendstring>


	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[35];
 80040da:	4b14      	ldr	r3, [pc, #80]	@ (800412c <Cmd_help_iou+0x64>)
 80040dc:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80040de:	e016      	b.n	800410e <Cmd_help_iou+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4810      	ldr	r0, [pc, #64]	@ (8004128 <Cmd_help_iou+0x60>)
 80040e8:	f7fd fef0 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4619      	mov	r1, r3
 80040f2:	480d      	ldr	r0, [pc, #52]	@ (8004128 <Cmd_help_iou+0x60>)
 80040f4:	f7fd feea 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 80040f8:	490d      	ldr	r1, [pc, #52]	@ (8004130 <Cmd_help_iou+0x68>)
 80040fa:	480b      	ldr	r0, [pc, #44]	@ (8004128 <Cmd_help_iou+0x60>)
 80040fc:	f7fd fee6 	bl	8001ecc <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[23]) {
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a0c      	ldr	r2, [pc, #48]	@ (8004134 <Cmd_help_iou+0x6c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <Cmd_help_iou+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	330c      	adds	r3, #12
 800410c:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e4      	bne.n	80040e0 <Cmd_help_iou+0x18>
 8004116:	e000      	b.n	800411a <Cmd_help_iou+0x52>
	        break;
 8004118:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	0800dc2c 	.word	0x0800dc2c
 8004128:	40011400 	.word	0x40011400
 800412c:	200001dc 	.word	0x200001dc
 8004130:	0800d994 	.word	0x0800d994
 8004134:	2000014c 	.word	0x2000014c

08004138 <NotYetDefine>:





int NotYetDefine(int argc, char *argv[]) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
	Uart_sendstring(USART6, "\nThis function is not defined yet \r\n");
 8004142:	4904      	ldr	r1, [pc, #16]	@ (8004154 <NotYetDefine+0x1c>)
 8004144:	4804      	ldr	r0, [pc, #16]	@ (8004158 <NotYetDefine+0x20>)
 8004146:	f7fd fec1 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	0800dc5c 	.word	0x0800dc5c
 8004158:	40011400 	.word	0x40011400

0800415c <Cmd_splash>:

int Cmd_splash(int argc, char *argv[]) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
	command_send_splash();
 8004166:	f000 fa43 	bl	80045f0 <command_send_splash>
	// Return success.
	return (CMDLINE_OK);
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <Cmd_status_now>:

int Cmd_status_now(int argc, char *argv[]){
 8004174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004176:	b0a3      	sub	sp, #140	@ 0x8c
 8004178:	af04      	add	r7, sp, #16
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    float temp;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 800417e:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8004182:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 8004186:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 800418a:	f107 0073 	add.w	r0, r7, #115	@ 0x73
 800418e:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 8004192:	9302      	str	r3, [sp, #8]
 8004194:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	f107 036f 	add.w	r3, r7, #111	@ 0x6f
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	4623      	mov	r3, r4
 80041a2:	f7fd f95f 	bl	8001464 <DS3231_GetDateTime>

    // Get current temperature from DS3231
    temp = DS3231_GetTemperature();
 80041a6:	f7fd fa05 	bl	80015b4 <DS3231_GetTemperature>
 80041aa:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74

    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 80041ae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80041b2:	461d      	mov	r5, r3
 80041b4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80041b8:	461e      	mov	r6, r3
 80041ba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80041be:	461a      	mov	r2, r3
 80041c0:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80041c4:	4619      	mov	r1, r3
 80041c6:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80041ca:	461c      	mov	r4, r3
 80041cc:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80041d0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80041d4:	f107 0008 	add.w	r0, r7, #8
 80041d8:	9303      	str	r3, [sp, #12]
 80041da:	9402      	str	r4, [sp, #8]
 80041dc:	9101      	str	r1, [sp, #4]
 80041de:	9200      	str	r2, [sp, #0]
 80041e0:	4633      	mov	r3, r6
 80041e2:	462a      	mov	r2, r5
 80041e4:	4931      	ldr	r1, [pc, #196]	@ (80042ac <Cmd_status_now+0x138>)
 80041e6:	f004 ff85 	bl	80090f4 <siprintf>
    Uart_sendstring(USART6, buffer);
 80041ea:	f107 0308 	add.w	r3, r7, #8
 80041ee:	4619      	mov	r1, r3
 80041f0:	482f      	ldr	r0, [pc, #188]	@ (80042b0 <Cmd_status_now+0x13c>)
 80041f2:	f7fd fe6b 	bl	8001ecc <Uart_sendstring>

    sprintf(buffer, "Temperature: %.2f *C\r\n", temp);
 80041f6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80041f8:	f7fc f9b6 	bl	8000568 <__aeabi_f2d>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	f107 0008 	add.w	r0, r7, #8
 8004204:	492b      	ldr	r1, [pc, #172]	@ (80042b4 <Cmd_status_now+0x140>)
 8004206:	f004 ff75 	bl	80090f4 <siprintf>
    Uart_sendstring(USART6, buffer);
 800420a:	f107 0308 	add.w	r3, r7, #8
 800420e:	4619      	mov	r1, r3
 8004210:	4827      	ldr	r0, [pc, #156]	@ (80042b0 <Cmd_status_now+0x13c>)
 8004212:	f7fd fe5b 	bl	8001ecc <Uart_sendstring>
    sprintf(buffer, "HardwareVer: CPOC Hardware 1.2.0\r\n");
 8004216:	f107 0308 	add.w	r3, r7, #8
 800421a:	4927      	ldr	r1, [pc, #156]	@ (80042b8 <Cmd_status_now+0x144>)
 800421c:	4618      	mov	r0, r3
 800421e:	f004 ff69 	bl	80090f4 <siprintf>
    Uart_sendstring(USART6, buffer);
 8004222:	f107 0308 	add.w	r3, r7, #8
 8004226:	4619      	mov	r1, r3
 8004228:	4821      	ldr	r0, [pc, #132]	@ (80042b0 <Cmd_status_now+0x13c>)
 800422a:	f7fd fe4f 	bl	8001ecc <Uart_sendstring>
    sprintf(buffer, "FirmwareVer: CPOC Firmware 1.0.0\r\n");
 800422e:	f107 0308 	add.w	r3, r7, #8
 8004232:	4922      	ldr	r1, [pc, #136]	@ (80042bc <Cmd_status_now+0x148>)
 8004234:	4618      	mov	r0, r3
 8004236:	f004 ff5d 	bl	80090f4 <siprintf>
    Uart_sendstring(USART6, buffer);
 800423a:	f107 0308 	add.w	r3, r7, #8
 800423e:	4619      	mov	r1, r3
 8004240:	481b      	ldr	r0, [pc, #108]	@ (80042b0 <Cmd_status_now+0x13c>)
 8004242:	f7fd fe43 	bl	8001ecc <Uart_sendstring>

    if (LL_GPIO_IsOutputPinSet(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin)) {
 8004246:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800424a:	481d      	ldr	r0, [pc, #116]	@ (80042c0 <Cmd_status_now+0x14c>)
 800424c:	f7ff fc90 	bl	8003b70 <LL_GPIO_IsOutputPinSet>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00c      	beq.n	8004270 <Cmd_status_now+0xfc>
        sprintf(buffer, "Enable: RF[OFF]\r\n");
 8004256:	f107 0308 	add.w	r3, r7, #8
 800425a:	491a      	ldr	r1, [pc, #104]	@ (80042c4 <Cmd_status_now+0x150>)
 800425c:	4618      	mov	r0, r3
 800425e:	f004 ff49 	bl	80090f4 <siprintf>
        Uart_sendstring(USART6, buffer);
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	4619      	mov	r1, r3
 8004268:	4811      	ldr	r0, [pc, #68]	@ (80042b0 <Cmd_status_now+0x13c>)
 800426a:	f7fd fe2f 	bl	8001ecc <Uart_sendstring>
 800426e:	e00b      	b.n	8004288 <Cmd_status_now+0x114>
    } else {
        sprintf(buffer, "Enable: RF[ON]\r\n");
 8004270:	f107 0308 	add.w	r3, r7, #8
 8004274:	4914      	ldr	r1, [pc, #80]	@ (80042c8 <Cmd_status_now+0x154>)
 8004276:	4618      	mov	r0, r3
 8004278:	f004 ff3c 	bl	80090f4 <siprintf>
        Uart_sendstring(USART6, buffer);
 800427c:	f107 0308 	add.w	r3, r7, #8
 8004280:	4619      	mov	r1, r3
 8004282:	480b      	ldr	r0, [pc, #44]	@ (80042b0 <Cmd_status_now+0x13c>)
 8004284:	f7fd fe22 	bl	8001ecc <Uart_sendstring>
    }

    sprintf(buffer, "MuxMode: Auto\r\n");
 8004288:	f107 0308 	add.w	r3, r7, #8
 800428c:	490f      	ldr	r1, [pc, #60]	@ (80042cc <Cmd_status_now+0x158>)
 800428e:	4618      	mov	r0, r3
 8004290:	f004 ff30 	bl	80090f4 <siprintf>
    Uart_sendstring(USART6, buffer);
 8004294:	f107 0308 	add.w	r3, r7, #8
 8004298:	4619      	mov	r1, r3
 800429a:	4805      	ldr	r0, [pc, #20]	@ (80042b0 <Cmd_status_now+0x13c>)
 800429c:	f7fd fe16 	bl	8001ecc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	377c      	adds	r7, #124	@ 0x7c
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042aa:	bf00      	nop
 80042ac:	0800dc84 	.word	0x0800dc84
 80042b0:	40011400 	.word	0x40011400
 80042b4:	0800dca8 	.word	0x0800dca8
 80042b8:	0800dcc0 	.word	0x0800dcc0
 80042bc:	0800dce4 	.word	0x0800dce4
 80042c0:	40020400 	.word	0x40020400
 80042c4:	0800dd08 	.word	0x0800dd08
 80042c8:	0800dd1c 	.word	0x0800dd1c
 80042cc:	0800dd30 	.word	0x0800dd30

080042d0 <Cmd_memory_usage>:


int Cmd_memory_usage(int argc, char *argv[]) {
 80042d0:	b5b0      	push	{r4, r5, r7, lr}
 80042d2:	b0a4      	sub	sp, #144	@ 0x90
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	4674      	mov	r4, lr
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
    // STM32F405RGT7 có 192KB SRAM [[5]]
    uint32_t totalRAM = 192 * 1024;
 80042dc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80042e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80042e4:	f3ef 8308 	mrs	r3, MSP
 80042e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return(result);
 80042ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    uint32_t usedRAM = SRAM1_BASE + totalRAM - __get_MSP();
 80042ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80042f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float ramUsage = (float)usedRAM / totalRAM * 100;
 80042fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004306:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004316:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004390 <Cmd_memory_usage+0xc0>
 800431a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800431e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    // STM32F405RGT7 có 1MB Flash [[1]] [[4]]
    uint32_t totalFlash = 1 * 1024 * 1024;
 8004322:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004326:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t usedFlash = (uint32_t)__builtin_return_address(0) - FLASH_BASE;
 8004328:	4623      	mov	r3, r4
 800432a:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800432e:	677b      	str	r3, [r7, #116]	@ 0x74
    float flashUsage = (float)usedFlash / totalFlash * 100;
 8004330:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004348:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004390 <Cmd_memory_usage+0xc0>
 800434c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004350:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70


    char buffer[100];
    sprintf(buffer, "\nRAM: %.2f%% used\r\nFlash: %.2f%% used\r\n", ramUsage, flashUsage);
 8004354:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004356:	f7fc f907 	bl	8000568 <__aeabi_f2d>
 800435a:	4604      	mov	r4, r0
 800435c:	460d      	mov	r5, r1
 800435e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004360:	f7fc f902 	bl	8000568 <__aeabi_f2d>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	f107 0008 	add.w	r0, r7, #8
 800436c:	e9cd 2300 	strd	r2, r3, [sp]
 8004370:	4622      	mov	r2, r4
 8004372:	462b      	mov	r3, r5
 8004374:	4907      	ldr	r1, [pc, #28]	@ (8004394 <Cmd_memory_usage+0xc4>)
 8004376:	f004 febd 	bl	80090f4 <siprintf>
    Uart_sendstring(USART6, buffer);
 800437a:	f107 0308 	add.w	r3, r7, #8
 800437e:	4619      	mov	r1, r3
 8004380:	4805      	ldr	r0, [pc, #20]	@ (8004398 <Cmd_memory_usage+0xc8>)
 8004382:	f7fd fda3 	bl	8001ecc <Uart_sendstring>

    return CMDLINE_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3788      	adds	r7, #136	@ 0x88
 800438c:	46bd      	mov	sp, r7
 800438e:	bdb0      	pop	{r4, r5, r7, pc}
 8004390:	42c80000 	.word	0x42c80000
 8004394:	0800dd40 	.word	0x0800dd40
 8004398:	40011400 	.word	0x40011400

0800439c <Cmd_time_get>:


int Cmd_time_get(int argc, char *argv[]){
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	b0a3      	sub	sp, #140	@ 0x8c
 80043a0:	af04      	add	r7, sp, #16
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 80043a6:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80043aa:	f107 0275 	add.w	r2, r7, #117	@ 0x75
 80043ae:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 80043b2:	f107 0077 	add.w	r0, r7, #119	@ 0x77
 80043b6:	f107 0371 	add.w	r3, r7, #113	@ 0x71
 80043ba:	9302      	str	r3, [sp, #8]
 80043bc:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	4623      	mov	r3, r4
 80043ca:	f7fd f84b 	bl	8001464 <DS3231_GetDateTime>
    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);    Uart_sendstring(USART6, buffer);
 80043ce:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80043d2:	461d      	mov	r5, r3
 80043d4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80043d8:	461e      	mov	r6, r3
 80043da:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80043de:	461a      	mov	r2, r3
 80043e0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80043e4:	4619      	mov	r1, r3
 80043e6:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80043ea:	461c      	mov	r4, r3
 80043ec:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80043f0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80043f4:	f107 000c 	add.w	r0, r7, #12
 80043f8:	9303      	str	r3, [sp, #12]
 80043fa:	9402      	str	r4, [sp, #8]
 80043fc:	9101      	str	r1, [sp, #4]
 80043fe:	9200      	str	r2, [sp, #0]
 8004400:	4633      	mov	r3, r6
 8004402:	462a      	mov	r2, r5
 8004404:	4906      	ldr	r1, [pc, #24]	@ (8004420 <Cmd_time_get+0x84>)
 8004406:	f004 fe75 	bl	80090f4 <siprintf>
 800440a:	f107 030c 	add.w	r3, r7, #12
 800440e:	4619      	mov	r1, r3
 8004410:	4804      	ldr	r0, [pc, #16]	@ (8004424 <Cmd_time_get+0x88>)
 8004412:	f7fd fd5b 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	377c      	adds	r7, #124	@ 0x7c
 800441c:	46bd      	mov	sp, r7
 800441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004420:	0800dc84 	.word	0x0800dc84
 8004424:	40011400 	.word	0x40011400

08004428 <Cmd_time_set>:

int Cmd_time_set(int argc, char *argv[]){
 8004428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442a:	b0a3      	sub	sp, #140	@ 0x8c
 800442c:	af04      	add	r7, sp, #16
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
    if (argc < 7) return CMDLINE_TOO_FEW_ARGS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b06      	cmp	r3, #6
 8004436:	dc01      	bgt.n	800443c <Cmd_time_set+0x14>
 8004438:	2303      	movs	r3, #3
 800443a:	e088      	b.n	800454e <Cmd_time_set+0x126>
    if (argc > 7) return CMDLINE_TOO_MANY_ARGS;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b07      	cmp	r3, #7
 8004440:	dd01      	ble.n	8004446 <Cmd_time_set+0x1e>
 8004442:	2302      	movs	r3, #2
 8004444:	e083      	b.n	800454e <Cmd_time_set+0x126>

    uint8_t hour = atoi(argv[1]);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	3304      	adds	r3, #4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f003 fe87 	bl	8008160 <atoi>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    uint8_t min = atoi(argv[2]);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	3308      	adds	r3, #8
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f003 fe7e 	bl	8008160 <atoi>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    uint8_t sec = atoi(argv[3]);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f003 fe75 	bl	8008160 <atoi>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
    uint8_t date = atoi(argv[4]);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	3310      	adds	r3, #16
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f003 fe6c 	bl	8008160 <atoi>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    uint8_t month = atoi(argv[5]);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	3314      	adds	r3, #20
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f003 fe63 	bl	8008160 <atoi>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    uint8_t year = atoi(argv[6]);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	3318      	adds	r3, #24
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f003 fe5a 	bl	8008160 <atoi>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

    if (hour > 23 || min > 59 || sec > 59 || date > 31 || month > 12 || year > 99)
 80044b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80044b6:	2b17      	cmp	r3, #23
 80044b8:	d813      	bhi.n	80044e2 <Cmd_time_set+0xba>
 80044ba:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80044be:	2b3b      	cmp	r3, #59	@ 0x3b
 80044c0:	d80f      	bhi.n	80044e2 <Cmd_time_set+0xba>
 80044c2:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80044c6:	2b3b      	cmp	r3, #59	@ 0x3b
 80044c8:	d80b      	bhi.n	80044e2 <Cmd_time_set+0xba>
 80044ca:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80044ce:	2b1f      	cmp	r3, #31
 80044d0:	d807      	bhi.n	80044e2 <Cmd_time_set+0xba>
 80044d2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80044d6:	2b0c      	cmp	r3, #12
 80044d8:	d803      	bhi.n	80044e2 <Cmd_time_set+0xba>
 80044da:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80044de:	2b63      	cmp	r3, #99	@ 0x63
 80044e0:	d901      	bls.n	80044e6 <Cmd_time_set+0xbe>
        return CMDLINE_INVALID_ARG;
 80044e2:	2304      	movs	r3, #4
 80044e4:	e033      	b.n	800454e <Cmd_time_set+0x126>

    DS3231_SetDateTime(1, date, month, year, hour, min, sec);
 80044e6:	f897 0072 	ldrb.w	r0, [r7, #114]	@ 0x72
 80044ea:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80044ee:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 80044f2:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80044f6:	9302      	str	r3, [sp, #8]
 80044f8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	4603      	mov	r3, r0
 8004506:	2001      	movs	r0, #1
 8004508:	f7fc feee 	bl	80012e8 <DS3231_SetDateTime>

    char buffer[100];
    sprintf(buffer, "Time set to: %02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 800450c:	f897 5077 	ldrb.w	r5, [r7, #119]	@ 0x77
 8004510:	f897 6076 	ldrb.w	r6, [r7, #118]	@ 0x76
 8004514:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8004518:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 800451c:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8004520:	f897 0072 	ldrb.w	r0, [r7, #114]	@ 0x72
 8004524:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8004528:	f107 040c 	add.w	r4, r7, #12
 800452c:	9003      	str	r0, [sp, #12]
 800452e:	9102      	str	r1, [sp, #8]
 8004530:	9201      	str	r2, [sp, #4]
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	4633      	mov	r3, r6
 8004536:	462a      	mov	r2, r5
 8004538:	4907      	ldr	r1, [pc, #28]	@ (8004558 <Cmd_time_set+0x130>)
 800453a:	4620      	mov	r0, r4
 800453c:	f004 fdda 	bl	80090f4 <siprintf>
    Uart_sendstring(USART6, buffer);
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	4619      	mov	r1, r3
 8004546:	4805      	ldr	r0, [pc, #20]	@ (800455c <Cmd_time_set+0x134>)
 8004548:	f7fd fcc0 	bl	8001ecc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	377c      	adds	r7, #124	@ 0x7c
 8004552:	46bd      	mov	sp, r7
 8004554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004556:	bf00      	nop
 8004558:	0800dd68 	.word	0x0800dd68
 800455c:	40011400 	.word	0x40011400

08004560 <Cmd_cpoc_reset>:

int Cmd_cpoc_reset(int argc, char *argv[]){
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 800456a:	f7ff faeb 	bl	8003b44 <__NVIC_SystemReset>
	...

08004570 <Cmd_rf_ena>:
//	Cmd_pmu_board_alive();
//	Cmd_pmu_board_alive();
//
//}

int Cmd_rf_ena(int argc, char *argv[]){
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
	LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 800457a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800457e:	4806      	ldr	r0, [pc, #24]	@ (8004598 <Cmd_rf_ena+0x28>)
 8004580:	f7ff fb19 	bl	8003bb6 <LL_GPIO_ResetOutputPin>
	 Uart_sendstring(USART6, "\nRF Set to Enable\r\n");
 8004584:	4905      	ldr	r1, [pc, #20]	@ (800459c <Cmd_rf_ena+0x2c>)
 8004586:	4806      	ldr	r0, [pc, #24]	@ (80045a0 <Cmd_rf_ena+0x30>)
 8004588:	f7fd fca0 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40020400 	.word	0x40020400
 800459c:	0800dd98 	.word	0x0800dd98
 80045a0:	40011400 	.word	0x40011400

080045a4 <Cmd_rf_dis>:

int Cmd_rf_dis(int argc, char *argv[]){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 80045ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045b2:	4806      	ldr	r0, [pc, #24]	@ (80045cc <Cmd_rf_dis+0x28>)
 80045b4:	f7ff faf1 	bl	8003b9a <LL_GPIO_SetOutputPin>
	Uart_sendstring(USART6, "\nRF Disable\r\n");
 80045b8:	4905      	ldr	r1, [pc, #20]	@ (80045d0 <Cmd_rf_dis+0x2c>)
 80045ba:	4806      	ldr	r0, [pc, #24]	@ (80045d4 <Cmd_rf_dis+0x30>)
 80045bc:	f7fd fc86 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40020400 	.word	0x40020400
 80045d0:	0800ddac 	.word	0x0800ddac
 80045d4:	40011400 	.word	0x40011400

080045d8 <command_create_task>:




void	command_create_task(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 80045dc:	4902      	ldr	r1, [pc, #8]	@ (80045e8 <command_create_task+0x10>)
 80045de:	4803      	ldr	r0, [pc, #12]	@ (80045ec <command_create_task+0x14>)
 80045e0:	f002 fa0e 	bl	8006a00 <SCH_TASK_CreateTask>
}
 80045e4:	bf00      	nop
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	200002dc 	.word	0x200002dc
 80045ec:	200002d8 	.word	0x200002d8

080045f0 <command_send_splash>:

void	command_send_splash(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
	Uart_sendstring(USART6, "------------------------------------------------\r\n");
 80045f4:	4932      	ldr	r1, [pc, #200]	@ (80046c0 <command_send_splash+0xd0>)
 80045f6:	4833      	ldr	r0, [pc, #204]	@ (80046c4 <command_send_splash+0xd4>)
 80045f8:	f7fd fc68 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--        ____                                --\r\n");
 80045fc:	4932      	ldr	r1, [pc, #200]	@ (80046c8 <command_send_splash+0xd8>)
 80045fe:	4831      	ldr	r0, [pc, #196]	@ (80046c4 <command_send_splash+0xd4>)
 8004600:	f7fd fc64 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--       / ___| _ __   __ _  ___ ___          --\r\n");
 8004604:	4931      	ldr	r1, [pc, #196]	@ (80046cc <command_send_splash+0xdc>)
 8004606:	482f      	ldr	r0, [pc, #188]	@ (80046c4 <command_send_splash+0xd4>)
 8004608:	f7fd fc60 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--       \\___ \\| '_ \\ / _` |/ __/ _ \\         --  \r\n");
 800460c:	4930      	ldr	r1, [pc, #192]	@ (80046d0 <command_send_splash+0xe0>)
 800460e:	482d      	ldr	r0, [pc, #180]	@ (80046c4 <command_send_splash+0xd4>)
 8004610:	f7fd fc5c 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--        ___) | |_) | (_| | (_|  __/         --\r\n");
 8004614:	492f      	ldr	r1, [pc, #188]	@ (80046d4 <command_send_splash+0xe4>)
 8004616:	482b      	ldr	r0, [pc, #172]	@ (80046c4 <command_send_splash+0xd4>)
 8004618:	f7fd fc58 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--       |____/| -__/ \\__,_|\\___\\___|         --  \r\n");
 800461c:	492e      	ldr	r1, [pc, #184]	@ (80046d8 <command_send_splash+0xe8>)
 800461e:	4829      	ldr	r0, [pc, #164]	@ (80046c4 <command_send_splash+0xd4>)
 8004620:	f7fd fc54 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--             |_|                            --\r\n");
 8004624:	492d      	ldr	r1, [pc, #180]	@ (80046dc <command_send_splash+0xec>)
 8004626:	4827      	ldr	r0, [pc, #156]	@ (80046c4 <command_send_splash+0xd4>)
 8004628:	f7fd fc50 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--     _     _ _     _____         _          --\r\n");
 800462c:	492c      	ldr	r1, [pc, #176]	@ (80046e0 <command_send_splash+0xf0>)
 800462e:	4825      	ldr	r0, [pc, #148]	@ (80046c4 <command_send_splash+0xd4>)
 8004630:	f7fd fc4c 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |   (_|_)_ _|_   _|__  ___| |__       --\r\n");
 8004634:	492b      	ldr	r1, [pc, #172]	@ (80046e4 <command_send_splash+0xf4>)
 8004636:	4823      	ldr	r0, [pc, #140]	@ (80046c4 <command_send_splash+0xd4>)
 8004638:	f7fd fc48 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |   | | | '_ \\| |/ _ \\/ __| '_ \\      --\r\n");
 800463c:	492a      	ldr	r1, [pc, #168]	@ (80046e8 <command_send_splash+0xf8>)
 800463e:	4821      	ldr	r0, [pc, #132]	@ (80046c4 <command_send_splash+0xd4>)
 8004640:	f7fd fc44 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |___| | | | | | |  __/ (__| | | |     --\r\n");
 8004644:	4929      	ldr	r1, [pc, #164]	@ (80046ec <command_send_splash+0xfc>)
 8004646:	481f      	ldr	r0, [pc, #124]	@ (80046c4 <command_send_splash+0xd4>)
 8004648:	f7fd fc40 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--    |_____|_|_|_| |_|_|\\___|\\___| |_|_|     --\r\n");
 800464c:	4928      	ldr	r1, [pc, #160]	@ (80046f0 <command_send_splash+0x100>)
 800464e:	481d      	ldr	r0, [pc, #116]	@ (80046c4 <command_send_splash+0xd4>)
 8004650:	f7fd fc3c 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "------------------------------------------------\r\n");
 8004654:	491a      	ldr	r1, [pc, #104]	@ (80046c0 <command_send_splash+0xd0>)
 8004656:	481b      	ldr	r0, [pc, #108]	@ (80046c4 <command_send_splash+0xd4>)
 8004658:	f7fd fc38 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--           ____ ____   ___   ____           --\r\n");
 800465c:	4925      	ldr	r1, [pc, #148]	@ (80046f4 <command_send_splash+0x104>)
 800465e:	4819      	ldr	r0, [pc, #100]	@ (80046c4 <command_send_splash+0xd4>)
 8004660:	f7fd fc34 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          / ___|  _ \\ / _ \\ / ___|          --\r\n");
 8004664:	4924      	ldr	r1, [pc, #144]	@ (80046f8 <command_send_splash+0x108>)
 8004666:	4817      	ldr	r0, [pc, #92]	@ (80046c4 <command_send_splash+0xd4>)
 8004668:	f7fd fc30 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--         | |   | |_) | | | | |              --\r\n");
 800466c:	4923      	ldr	r1, [pc, #140]	@ (80046fc <command_send_splash+0x10c>)
 800466e:	4815      	ldr	r0, [pc, #84]	@ (80046c4 <command_send_splash+0xd4>)
 8004670:	f7fd fc2c 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--         | |___|  __/| |_| | |___           --\r\n");
 8004674:	4922      	ldr	r1, [pc, #136]	@ (8004700 <command_send_splash+0x110>)
 8004676:	4813      	ldr	r0, [pc, #76]	@ (80046c4 <command_send_splash+0xd4>)
 8004678:	f7fd fc28 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          \\____|_|    \\___/ \\____|          -- \r\n");
 800467c:	4921      	ldr	r1, [pc, #132]	@ (8004704 <command_send_splash+0x114>)
 800467e:	4811      	ldr	r0, [pc, #68]	@ (80046c4 <command_send_splash+0xd4>)
 8004680:	f7fd fc24 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--                  _   ___   ___             --\r\n");
 8004684:	4920      	ldr	r1, [pc, #128]	@ (8004708 <command_send_splash+0x118>)
 8004686:	480f      	ldr	r0, [pc, #60]	@ (80046c4 <command_send_splash+0xd4>)
 8004688:	f7fd fc20 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          __   __/ | / _ \\ / _ \\            -- \r\n");
 800468c:	491f      	ldr	r1, [pc, #124]	@ (800470c <command_send_splash+0x11c>)
 800468e:	480d      	ldr	r0, [pc, #52]	@ (80046c4 <command_send_splash+0xd4>)
 8004690:	f7fd fc1c 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--          \\ \\ / /| || | | | | | |           --  \r\n");
 8004694:	491e      	ldr	r1, [pc, #120]	@ (8004710 <command_send_splash+0x120>)
 8004696:	480b      	ldr	r0, [pc, #44]	@ (80046c4 <command_send_splash+0xd4>)
 8004698:	f7fd fc18 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--           \\ V / | || |_| | |_| |           -- \r\n");
 800469c:	491d      	ldr	r1, [pc, #116]	@ (8004714 <command_send_splash+0x124>)
 800469e:	4809      	ldr	r0, [pc, #36]	@ (80046c4 <command_send_splash+0xd4>)
 80046a0:	f7fd fc14 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(USART6, "--            \\_/  |_(_)___(_)___/            -- \r\n");
 80046a4:	491c      	ldr	r1, [pc, #112]	@ (8004718 <command_send_splash+0x128>)
 80046a6:	4807      	ldr	r0, [pc, #28]	@ (80046c4 <command_send_splash+0xd4>)
 80046a8:	f7fd fc10 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(USART6, "------------------------------------------------\r\n");
 80046ac:	4904      	ldr	r1, [pc, #16]	@ (80046c0 <command_send_splash+0xd0>)
 80046ae:	4805      	ldr	r0, [pc, #20]	@ (80046c4 <command_send_splash+0xd4>)
 80046b0:	f7fd fc0c 	bl	8001ecc <Uart_sendstring>

	Uart_sendstring(USART6, "> ");
 80046b4:	4919      	ldr	r1, [pc, #100]	@ (800471c <command_send_splash+0x12c>)
 80046b6:	4803      	ldr	r0, [pc, #12]	@ (80046c4 <command_send_splash+0xd4>)
 80046b8:	f7fd fc08 	bl	8001ecc <Uart_sendstring>
}
 80046bc:	bf00      	nop
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	0800ddbc 	.word	0x0800ddbc
 80046c4:	40011400 	.word	0x40011400
 80046c8:	0800ddf0 	.word	0x0800ddf0
 80046cc:	0800de24 	.word	0x0800de24
 80046d0:	0800de58 	.word	0x0800de58
 80046d4:	0800de90 	.word	0x0800de90
 80046d8:	0800dec4 	.word	0x0800dec4
 80046dc:	0800defc 	.word	0x0800defc
 80046e0:	0800df30 	.word	0x0800df30
 80046e4:	0800df64 	.word	0x0800df64
 80046e8:	0800df98 	.word	0x0800df98
 80046ec:	0800dfcc 	.word	0x0800dfcc
 80046f0:	0800e000 	.word	0x0800e000
 80046f4:	0800e034 	.word	0x0800e034
 80046f8:	0800e068 	.word	0x0800e068
 80046fc:	0800e09c 	.word	0x0800e09c
 8004700:	0800e0d0 	.word	0x0800e0d0
 8004704:	0800e104 	.word	0x0800e104
 8004708:	0800e138 	.word	0x0800e138
 800470c:	0800e16c 	.word	0x0800e16c
 8004710:	0800e1a0 	.word	0x0800e1a0
 8004714:	0800e1d8 	.word	0x0800e1d8
 8004718:	0800e20c 	.word	0x0800e20c
 800471c:	0800da08 	.word	0x0800da08

08004720 <COPC_init>:
		COPC_task_update                // taskFunction;
	}
};

void	COPC_init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8004724:	f7fd f96a 	bl	80019fc <Ringbuf_init>
	fsp_init(FSP_ADR_CPOC);
 8004728:	2001      	movs	r0, #1
 800472a:	f002 faeb 	bl	8006d04 <fsp_init>
	s_pCOPC_Sfp_Payload = (COPC_Sfp_Payload_t *)(&s_COPC_FspPacket.payload);
 800472e:	4b02      	ldr	r3, [pc, #8]	@ (8004738 <COPC_init+0x18>)
 8004730:	4a02      	ldr	r2, [pc, #8]	@ (800473c <COPC_init+0x1c>)
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20002828 	.word	0x20002828
 800473c:	2000272d 	.word	0x2000272d

08004740 <COPC_task_update>:
volatile uint8_t receiving = 0;
volatile uint8_t receive_buffer[FSP_PKT_MAX_LENGTH];
volatile uint8_t receive_index = 0;

static void COPC_task_update(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b0d0      	sub	sp, #320	@ 0x140
 8004744:	af00      	add	r7, sp, #0
	uint8_t rxData;


    while (IsDataAvailable(USART1))
 8004746:	e04f      	b.n	80047e8 <COPC_task_update+0xa8>
    {
        rxData = Uart_read(USART1);
 8004748:	482d      	ldr	r0, [pc, #180]	@ (8004800 <COPC_task_update+0xc0>)
 800474a:	f7fd fa15 	bl	8001b78 <Uart_read>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

//		char pos_str2[10];
//		sprintf(pos_str2, "%d", rxData);
//		Uart_sendstring(USART6, pos_str2);

        if (!receiving) {
 8004754:	4b2b      	ldr	r3, [pc, #172]	@ (8004804 <COPC_task_update+0xc4>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <COPC_task_update+0x34>
            if (rxData == FSP_PKT_SOD) {
 800475e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8004762:	2bca      	cmp	r3, #202	@ 0xca
 8004764:	d140      	bne.n	80047e8 <COPC_task_update+0xa8>
                receiving = 1;
 8004766:	4b27      	ldr	r3, [pc, #156]	@ (8004804 <COPC_task_update+0xc4>)
 8004768:	2201      	movs	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
                receive_index = 0;
 800476c:	4b26      	ldr	r3, [pc, #152]	@ (8004808 <COPC_task_update+0xc8>)
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e039      	b.n	80047e8 <COPC_task_update+0xa8>
            }
        } else {

            if (rxData == FSP_PKT_EOF) {
 8004774:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8004778:	2bef      	cmp	r3, #239	@ 0xef
 800477a:	d121      	bne.n	80047c0 <COPC_task_update+0x80>
                receiving = 0;
 800477c:	4b21      	ldr	r3, [pc, #132]	@ (8004804 <COPC_task_update+0xc4>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
                fsp_packet_t fsp_pkt;
                int ret = frame_decode((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 8004782:	4b21      	ldr	r3, [pc, #132]	@ (8004808 <COPC_task_update+0xc8>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800478c:	4619      	mov	r1, r3
 800478e:	481f      	ldr	r0, [pc, #124]	@ (800480c <COPC_task_update+0xcc>)
 8004790:	f002 fd80 	bl	8007294 <frame_decode>
 8004794:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138

                if (ret > 0) {
 8004798:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800479c:	2b00      	cmp	r3, #0
 800479e:	dd1b      	ble.n	80047d8 <COPC_task_update+0x98>
                    char error_msg[50];
                    sprintf(error_msg, "Error: %s\r\n", decode_error_msgs[ret]);
 80047a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004810 <COPC_task_update+0xd0>)
 80047a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80047a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	4919      	ldr	r1, [pc, #100]	@ (8004814 <COPC_task_update+0xd4>)
 80047ae:	4618      	mov	r0, r3
 80047b0:	f004 fca0 	bl	80090f4 <siprintf>
                    Uart_sendstring(USART6, error_msg);
 80047b4:	1d3b      	adds	r3, r7, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4817      	ldr	r0, [pc, #92]	@ (8004818 <COPC_task_update+0xd8>)
 80047ba:	f7fd fb87 	bl	8001ecc <Uart_sendstring>
 80047be:	e00b      	b.n	80047d8 <COPC_task_update+0x98>
                }


            }else{
            	receive_buffer[receive_index++] = rxData;
 80047c0:	4b11      	ldr	r3, [pc, #68]	@ (8004808 <COPC_task_update+0xc8>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	b2d1      	uxtb	r1, r2
 80047ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004808 <COPC_task_update+0xc8>)
 80047cc:	7011      	strb	r1, [r2, #0]
 80047ce:	4619      	mov	r1, r3
 80047d0:	4a0e      	ldr	r2, [pc, #56]	@ (800480c <COPC_task_update+0xcc>)
 80047d2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80047d6:	5453      	strb	r3, [r2, r1]
            }

            if (receive_index >= FSP_PKT_MAX_LENGTH) {
 80047d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <COPC_task_update+0xc8>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2bff      	cmp	r3, #255	@ 0xff
 80047e0:	d102      	bne.n	80047e8 <COPC_task_update+0xa8>
                // Frame quá dài, reset lại

                receiving = 0;
 80047e2:	4b08      	ldr	r3, [pc, #32]	@ (8004804 <COPC_task_update+0xc4>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART1))
 80047e8:	4805      	ldr	r0, [pc, #20]	@ (8004800 <COPC_task_update+0xc0>)
 80047ea:	f7fd fb29 	bl	8001e40 <IsDataAvailable>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1a9      	bne.n	8004748 <COPC_task_update+0x8>
            }
    }
}

}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40011000 	.word	0x40011000
 8004804:	2000282c 	.word	0x2000282c
 8004808:	2000292f 	.word	0x2000292f
 800480c:	20002830 	.word	0x20002830
 8004810:	200002e8 	.word	0x200002e8
 8004814:	0800e2cc 	.word	0x0800e2cc
 8004818:	40011400 	.word	0x40011400

0800481c <COPC_create_task>:
void	COPC_create_task(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
	COPC_init();
 8004820:	f7ff ff7e 	bl	8004720 <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
 8004824:	4902      	ldr	r1, [pc, #8]	@ (8004830 <COPC_create_task+0x14>)
 8004826:	4803      	ldr	r0, [pc, #12]	@ (8004834 <COPC_create_task+0x18>)
 8004828:	f002 f8ea 	bl	8006a00 <SCH_TASK_CreateTask>
}
 800482c:	bf00      	nop
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000308 	.word	0x20000308
 8004834:	20000304 	.word	0x20000304

08004838 <LL_GPIO_SetOutputPin>:
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	619a      	str	r2, [r3, #24]
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_GPIO_ResetOutputPin>:
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	041a      	lsls	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	619a      	str	r2, [r3, #24]
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <status_led_init>:
{
	s_led_display_status.state = status;
}

void status_led_init(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
    // Initialize LED status variable
    s_led_display_status.led = 0;
 8004878:	4a06      	ldr	r2, [pc, #24]	@ (8004894 <status_led_init+0x20>)
 800487a:	7813      	ldrb	r3, [r2, #0]
 800487c:	f36f 0300 	bfc	r3, #0, #1
 8004880:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 8004882:	4a04      	ldr	r2, [pc, #16]	@ (8004894 <status_led_init+0x20>)
 8004884:	7813      	ldrb	r3, [r2, #0]
 8004886:	f36f 0347 	bfc	r3, #1, #7
 800488a:	7013      	strb	r3, [r2, #0]

    // Turn off LED initially
    status_led_off();
 800488c:	f000 f804 	bl	8004898 <status_led_off>
}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20002930 	.word	0x20002930

08004898 <status_led_off>:

static void status_led_off(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 800489c:	2120      	movs	r1, #32
 800489e:	4802      	ldr	r0, [pc, #8]	@ (80048a8 <status_led_off+0x10>)
 80048a0:	f7ff ffd8 	bl	8004854 <LL_GPIO_ResetOutputPin>
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40020800 	.word	0x40020800

080048ac <status_led_on>:

static void status_led_on(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 80048b0:	2120      	movs	r1, #32
 80048b2:	4802      	ldr	r0, [pc, #8]	@ (80048bc <status_led_on+0x10>)
 80048b4:	f7ff ffc0 	bl	8004838 <LL_GPIO_SetOutputPin>
}
 80048b8:	bf00      	nop
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40020800 	.word	0x40020800

080048c0 <status_led_update>:

void	status_led_update(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
	switch (s_led_display_status.state) {
 80048c4:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <status_led_update+0x3c>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d811      	bhi.n	80048f6 <status_led_update+0x36>
 80048d2:	a201      	add	r2, pc, #4	@ (adr r2, 80048d8 <status_led_update+0x18>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	080048e9 	.word	0x080048e9
 80048dc:	080048ef 	.word	0x080048ef
 80048e0:	080048f5 	.word	0x080048f5
 80048e4:	080048f5 	.word	0x080048f5
	case POWERUP:
		status_led_powerup();
 80048e8:	f000 f80a 	bl	8004900 <status_led_powerup>
		break;
 80048ec:	e003      	b.n	80048f6 <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 80048ee:	f000 f841 	bl	8004974 <status_led_normal>
		break;
 80048f2:	e000      	b.n	80048f6 <status_led_update+0x36>
	case POWERING_SUB:
		break;
 80048f4:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20002930 	.word	0x20002930

08004900 <status_led_powerup>:

static void status_led_powerup(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 8004904:	4b1a      	ldr	r3, [pc, #104]	@ (8004970 <status_led_powerup+0x70>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d012      	beq.n	8004938 <status_led_powerup+0x38>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8004912:	2000      	movs	r0, #0
 8004914:	f002 f85e 	bl	80069d4 <SCH_TIM_HasCompleted>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d025      	beq.n	800496a <status_led_powerup+0x6a>
        {
            s_led_display_status.led = 0;
 800491e:	4a14      	ldr	r2, [pc, #80]	@ (8004970 <status_led_powerup+0x70>)
 8004920:	7813      	ldrb	r3, [r2, #0]
 8004922:	f36f 0300 	bfc	r3, #0, #1
 8004926:	7013      	strb	r3, [r2, #0]
//            char buffered[100];
//            sprintf(buffered, "PMU_INT: %d, PDU_INT: %d, IOU_INT: %d, CAM_INT: %d\r\n",
//                    pmu_int_value, pdu_int_value, iou_int_value, cam_int_value);
//            Uart_sendstring(USART6, buffered);

            status_led_off();
 8004928:	f7ff ffb6 	bl	8004898 <status_led_off>
//            command_send_splash();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 800492c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004930:	2000      	movs	r0, #0
 8004932:	f002 f839 	bl	80069a8 <SCH_TIM_Start>
            s_led_display_status.led = 1;
            status_led_on();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
        }
    }
}
 8004936:	e018      	b.n	800496a <status_led_powerup+0x6a>
    else if (s_led_display_status.led == 0) // LED is OFF
 8004938:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <status_led_powerup+0x70>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d111      	bne.n	800496a <status_led_powerup+0x6a>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8004946:	2000      	movs	r0, #0
 8004948:	f002 f844 	bl	80069d4 <SCH_TIM_HasCompleted>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <status_led_powerup+0x6a>
            s_led_display_status.led = 1;
 8004952:	4a07      	ldr	r2, [pc, #28]	@ (8004970 <status_led_powerup+0x70>)
 8004954:	7813      	ldrb	r3, [r2, #0]
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	7013      	strb	r3, [r2, #0]
            status_led_on();
 800495c:	f7ff ffa6 	bl	80048ac <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8004960:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004964:	2000      	movs	r0, #0
 8004966:	f002 f81f 	bl	80069a8 <SCH_TIM_Start>
}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20002930 	.word	0x20002930

08004974 <status_led_normal>:
//}
//


static void status_led_normal(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
//			s_led_display_status.led = 1;
//			status_led_on();
//			SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_ON_PERIOD);	//restart
//		}
//	}
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <status_led_create_task>:

void	status_led_create_task(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8004988:	4902      	ldr	r1, [pc, #8]	@ (8004994 <status_led_create_task+0x10>)
 800498a:	4803      	ldr	r0, [pc, #12]	@ (8004998 <status_led_create_task+0x14>)
 800498c:	f002 f838 	bl	8006a00 <SCH_TASK_CreateTask>
}
 8004990:	bf00      	nop
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000318 	.word	0x20000318
 8004998:	20000314 	.word	0x20000314

0800499c <__NVIC_SetPriorityGrouping>:
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049ac:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <__NVIC_SetPriorityGrouping+0x44>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049b8:	4013      	ands	r3, r2
 80049ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ce:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <__NVIC_SetPriorityGrouping+0x44>)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	60d3      	str	r3, [r2, #12]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_GetPriorityGrouping>:
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049e8:	4b04      	ldr	r3, [pc, #16]	@ (80049fc <__NVIC_GetPriorityGrouping+0x18>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 0307 	and.w	r3, r3, #7
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	e000ed00 	.word	0xe000ed00

08004a00 <__NVIC_EnableIRQ>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	db0b      	blt.n	8004a2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	4907      	ldr	r1, [pc, #28]	@ (8004a38 <__NVIC_EnableIRQ+0x38>)
 8004a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2001      	movs	r0, #1
 8004a22:	fa00 f202 	lsl.w	r2, r0, r2
 8004a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000e100 	.word	0xe000e100

08004a3c <__NVIC_SetPriority>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	6039      	str	r1, [r7, #0]
 8004a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db0a      	blt.n	8004a66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	490c      	ldr	r1, [pc, #48]	@ (8004a88 <__NVIC_SetPriority+0x4c>)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	0112      	lsls	r2, r2, #4
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	440b      	add	r3, r1
 8004a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a64:	e00a      	b.n	8004a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	4908      	ldr	r1, [pc, #32]	@ (8004a8c <__NVIC_SetPriority+0x50>)
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	3b04      	subs	r3, #4
 8004a74:	0112      	lsls	r2, r2, #4
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	440b      	add	r3, r1
 8004a7a:	761a      	strb	r2, [r3, #24]
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	e000e100 	.word	0xe000e100
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <NVIC_EncodePriority>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	@ 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f1c3 0307 	rsb	r3, r3, #7
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	bf28      	it	cs
 8004aae:	2304      	movcs	r3, #4
 8004ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2b06      	cmp	r3, #6
 8004ab8:	d902      	bls.n	8004ac0 <NVIC_EncodePriority+0x30>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3b03      	subs	r3, #3
 8004abe:	e000      	b.n	8004ac2 <NVIC_EncodePriority+0x32>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43da      	mvns	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	43d9      	mvns	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae8:	4313      	orrs	r3, r2
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3724      	adds	r7, #36	@ 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_I2C_EnableClockStretching>:
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	601a      	str	r2, [r3, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <LL_I2C_DisableGeneralCall>:
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_I2C_SetOwnAddress2>:
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_I2C_DisableOwnAddress2>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f023 0201 	bic.w	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004b80:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <LL_RCC_HSE_Enable+0x1c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a04      	ldr	r2, [pc, #16]	@ (8004b98 <LL_RCC_HSE_Enable+0x1c>)
 8004b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b8a:	6013      	str	r3, [r2, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40023800 	.word	0x40023800

08004b9c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004ba0:	4b07      	ldr	r3, [pc, #28]	@ (8004bc0 <LL_RCC_HSE_IsReady+0x24>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bac:	bf0c      	ite	eq
 8004bae:	2301      	moveq	r3, #1
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40023800 	.word	0x40023800

08004bc4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004bcc:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <LL_RCC_SetSysClkSource+0x24>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f023 0203 	bic.w	r2, r3, #3
 8004bd4:	4904      	ldr	r1, [pc, #16]	@ (8004be8 <LL_RCC_SetSysClkSource+0x24>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	608b      	str	r3, [r1, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40023800 	.word	0x40023800

08004bec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004bf0:	4b04      	ldr	r3, [pc, #16]	@ (8004c04 <LL_RCC_GetSysClkSource+0x18>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800

08004c08 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004c10:	4b06      	ldr	r3, [pc, #24]	@ (8004c2c <LL_RCC_SetAHBPrescaler+0x24>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c18:	4904      	ldr	r1, [pc, #16]	@ (8004c2c <LL_RCC_SetAHBPrescaler+0x24>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40023800 	.word	0x40023800

08004c30 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004c38:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <LL_RCC_SetAPB1Prescaler+0x24>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c40:	4904      	ldr	r1, [pc, #16]	@ (8004c54 <LL_RCC_SetAPB1Prescaler+0x24>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	608b      	str	r3, [r1, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40023800 	.word	0x40023800

08004c58 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004c60:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <LL_RCC_SetAPB2Prescaler+0x24>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c68:	4904      	ldr	r1, [pc, #16]	@ (8004c7c <LL_RCC_SetAPB2Prescaler+0x24>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	608b      	str	r3, [r1, #8]
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	40023800 	.word	0x40023800

08004c80 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <LL_RCC_PLL_Enable+0x1c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a04      	ldr	r2, [pc, #16]	@ (8004c9c <LL_RCC_PLL_Enable+0x1c>)
 8004c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800

08004ca0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004ca4:	4b07      	ldr	r3, [pc, #28]	@ (8004cc4 <LL_RCC_PLL_IsReady+0x24>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40023800 	.word	0x40023800

08004cc8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	4b0d      	ldr	r3, [pc, #52]	@ (8004d10 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	4311      	orrs	r1, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	0192      	lsls	r2, r2, #6
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	4908      	ldr	r1, [pc, #32]	@ (8004d0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8004cf0:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cf8:	4904      	ldr	r1, [pc, #16]	@ (8004d0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	ffbf8000 	.word	0xffbf8000

08004d14 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004d1c:	4b08      	ldr	r3, [pc, #32]	@ (8004d40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d20:	4907      	ldr	r1, [pc, #28]	@ (8004d40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004d28:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d32:	68fb      	ldr	r3, [r7, #12]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40023800 	.word	0x40023800

08004d44 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8004d4c:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004d4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d50:	4907      	ldr	r1, [pc, #28]	@ (8004d70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004d58:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d62:	68fb      	ldr	r3, [r7, #12]
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	40023800 	.word	0x40023800

08004d74 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004d7c:	4b08      	ldr	r3, [pc, #32]	@ (8004da0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004d7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d80:	4907      	ldr	r1, [pc, #28]	@ (8004da0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004d88:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004d8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d92:	68fb      	ldr	r3, [r7, #12]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40023800 	.word	0x40023800

08004da4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004dac:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <LL_FLASH_SetLatency+0x24>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 0207 	bic.w	r2, r3, #7
 8004db4:	4904      	ldr	r1, [pc, #16]	@ (8004dc8 <LL_FLASH_SetLatency+0x24>)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	600b      	str	r3, [r1, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40023c00 	.word	0x40023c00

08004dcc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004dd0:	4b04      	ldr	r3, [pc, #16]	@ (8004de4 <LL_FLASH_GetLatency+0x18>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40023c00 	.word	0x40023c00

08004de8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8004df0:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004df8:	4904      	ldr	r1, [pc, #16]	@ (8004e0c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	600b      	str	r3, [r1, #0]
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	40007000 	.word	0x40007000

08004e10 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8004e14:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40007000 	.word	0x40007000

08004e38 <LL_USART_Enable>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60da      	str	r2, [r3, #12]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_USART_ConfigAsyncMode>:
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	615a      	str	r2, [r3, #20]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <LL_GPIO_ResetOutputPin>:
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	041a      	lsls	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	619a      	str	r2, [r3, #24]
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8004ea8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004eac:	f7ff ff62 	bl	8004d74 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8004eb0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004eb4:	f7ff ff46 	bl	8004d44 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eb8:	2003      	movs	r0, #3
 8004eba:	f7ff fd6f 	bl	800499c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8004ebe:	f7ff fd91 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	210f      	movs	r1, #15
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fde1 	bl	8004a90 <NVIC_EncodePriority>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed6:	f7ff fdb1 	bl	8004a3c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004eda:	f000 f835 	bl	8004f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ede:	f000 fba1 	bl	8005624 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004ee2:	f000 f87b 	bl	8004fdc <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8004ee6:	f000 fb3d 	bl	8005564 <MX_USART6_UART_Init>
  MX_UART5_Init();
 8004eea:	f000 f9a1 	bl	8005230 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8004eee:	f000 fa17 	bl	8005320 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8004ef2:	f000 f93b 	bl	800516c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8004ef6:	f000 fad3 	bl	80054a0 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 8004efa:	f000 f8c7 	bl	800508c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8004efe:	f000 fa6f 	bl	80053e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  command_init();
 8004f02:	f7fe fe67 	bl	8003bd4 <command_init>

  fsp_init(FSP_ADR_CPOC);
 8004f06:	2001      	movs	r0, #1
 8004f08:	f001 fefc 	bl	8006d04 <fsp_init>
  LL_GPIO_ResetOutputPin(GPIOC, ENABLE_MUX_Pin);
 8004f0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f10:	480c      	ldr	r0, [pc, #48]	@ (8004f44 <main+0xa0>)
 8004f12:	f7ff ffb7 	bl	8004e84 <LL_GPIO_ResetOutputPin>

  status_led_init();
 8004f16:	f7ff fcad 	bl	8004874 <status_led_init>



  WDT_init();
 8004f1a:	f000 fd85 	bl	8005a28 <WDT_init>

  SCH_Initialize();
 8004f1e:	f001 fd19 	bl	8006954 <SCH_Initialize>

  status_led_create_task();
 8004f22:	f7ff fd2f 	bl	8004984 <status_led_create_task>

  send_packet_init();
 8004f26:	f7fd f891 	bl	800204c <send_packet_init>
  send_packet_create_task();
 8004f2a:	f7fd f8d5 	bl	80020d8 <send_packet_create_task>


  command_create_task();
 8004f2e:	f7ff fb53 	bl	80045d8 <command_create_task>

  COPC_create_task();
 8004f32:	f7ff fc73 	bl	800481c <COPC_create_task>

  WDT_create_task();
 8004f36:	f000 fd83 	bl	8005a40 <WDT_create_task>

  SCH_StartSchedular();
 8004f3a:	f001 fe33 	bl	8006ba4 <SCH_StartSchedular>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 8004f3e:	f001 fe37 	bl	8006bb0 <SCH_HandleScheduledTask>
 8004f42:	e7fc      	b.n	8004f3e <main+0x9a>
 8004f44:	40020800 	.word	0x40020800

08004f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	f7ff ff29 	bl	8004da4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8004f52:	bf00      	nop
 8004f54:	f7ff ff3a 	bl	8004dcc <LL_FLASH_GetLatency>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d1fa      	bne.n	8004f54 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8004f5e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004f62:	f7ff ff41 	bl	8004de8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8004f66:	f7ff fe09 	bl	8004b7c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8004f6a:	bf00      	nop
 8004f6c:	f7ff fe16 	bl	8004b9c <LL_RCC_HSE_IsReady>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d1fa      	bne.n	8004f6c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 192, LL_RCC_PLLP_DIV_6);
 8004f76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f7a:	22c0      	movs	r2, #192	@ 0xc0
 8004f7c:	2104      	movs	r1, #4
 8004f7e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8004f82:	f7ff fea1 	bl	8004cc8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8004f86:	f7ff fe7b 	bl	8004c80 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8004f8a:	bf00      	nop
 8004f8c:	f7ff fe88 	bl	8004ca0 <LL_RCC_PLL_IsReady>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d1fa      	bne.n	8004f8c <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8004f96:	bf00      	nop
 8004f98:	f7ff ff3a 	bl	8004e10 <LL_PWR_IsActiveFlag_VOS>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0fa      	beq.n	8004f98 <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8004fa2:	2080      	movs	r0, #128	@ 0x80
 8004fa4:	f7ff fe30 	bl	8004c08 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f7ff fe41 	bl	8004c30 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f7ff fe52 	bl	8004c58 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8004fb4:	2002      	movs	r0, #2
 8004fb6:	f7ff fe05 	bl	8004bc4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004fba:	bf00      	nop
 8004fbc:	f7ff fe16 	bl	8004bec <LL_RCC_GetSysClkSource>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d1fa      	bne.n	8004fbc <SystemClock_Config+0x74>
  {

  }
  LL_Init1msTick(32000000);
 8004fc6:	4804      	ldr	r0, [pc, #16]	@ (8004fd8 <SystemClock_Config+0x90>)
 8004fc8:	f001 fca6 	bl	8006918 <LL_Init1msTick>
  LL_SetSystemCoreClock(32000000);
 8004fcc:	4802      	ldr	r0, [pc, #8]	@ (8004fd8 <SystemClock_Config+0x90>)
 8004fce:	f001 fcb1 	bl	8006934 <LL_SetSystemCoreClock>
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	01e84800 	.word	0x01e84800

08004fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08c      	sub	sp, #48	@ 0x30
 8004fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8004fe2:	f107 0318 	add.w	r3, r7, #24
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	605a      	str	r2, [r3, #4]
 8004fec:	609a      	str	r2, [r3, #8]
 8004fee:	60da      	str	r2, [r3, #12]
 8004ff0:	611a      	str	r2, [r3, #16]
 8004ff2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	605a      	str	r2, [r3, #4]
 8004ffc:	609a      	str	r2, [r3, #8]
 8004ffe:	60da      	str	r2, [r3, #12]
 8005000:	611a      	str	r2, [r3, #16]
 8005002:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005004:	2002      	movs	r0, #2
 8005006:	f7ff fe85 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800500a:	23c0      	movs	r3, #192	@ 0xc0
 800500c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800500e:	2302      	movs	r3, #2
 8005010:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005012:	2303      	movs	r3, #3
 8005014:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8005016:	2301      	movs	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800501e:	2304      	movs	r3, #4
 8005020:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005022:	463b      	mov	r3, r7
 8005024:	4619      	mov	r1, r3
 8005026:	4816      	ldr	r0, [pc, #88]	@ (8005080 <MX_I2C1_Init+0xa4>)
 8005028:	f000 fe91 	bl	8005d4e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800502c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005030:	f7ff fe88 	bl	8004d44 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8005034:	4813      	ldr	r0, [pc, #76]	@ (8005084 <MX_I2C1_Init+0xa8>)
 8005036:	f7ff fd91 	bl	8004b5c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800503a:	4812      	ldr	r0, [pc, #72]	@ (8005084 <MX_I2C1_Init+0xa8>)
 800503c:	f7ff fd6b 	bl	8004b16 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8005040:	4810      	ldr	r0, [pc, #64]	@ (8005084 <MX_I2C1_Init+0xa8>)
 8005042:	f7ff fd58 	bl	8004af6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800504a:	4b0f      	ldr	r3, [pc, #60]	@ (8005088 <MX_I2C1_Init+0xac>)
 800504c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800504e:	2300      	movs	r3, #0
 8005050:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8005056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800505a:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800505c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8005062:	f107 0318 	add.w	r3, r7, #24
 8005066:	4619      	mov	r1, r3
 8005068:	4806      	ldr	r0, [pc, #24]	@ (8005084 <MX_I2C1_Init+0xa8>)
 800506a:	f000 ffe7 	bl	800603c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800506e:	2100      	movs	r1, #0
 8005070:	4804      	ldr	r0, [pc, #16]	@ (8005084 <MX_I2C1_Init+0xa8>)
 8005072:	f7ff fd60 	bl	8004b36 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005076:	bf00      	nop
 8005078:	3730      	adds	r7, #48	@ 0x30
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40020400 	.word	0x40020400
 8005084:	40005400 	.word	0x40005400
 8005088:	000186a0 	.word	0x000186a0

0800508c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08c      	sub	sp, #48	@ 0x30
 8005090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8005092:	f107 0318 	add.w	r3, r7, #24
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	605a      	str	r2, [r3, #4]
 800509c:	609a      	str	r2, [r3, #8]
 800509e:	60da      	str	r2, [r3, #12]
 80050a0:	611a      	str	r2, [r3, #16]
 80050a2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a4:	463b      	mov	r3, r7
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	609a      	str	r2, [r3, #8]
 80050ae:	60da      	str	r2, [r3, #12]
 80050b0:	611a      	str	r2, [r3, #16]
 80050b2:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80050b4:	2004      	movs	r0, #4
 80050b6:	f7ff fe2d 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80050ba:	2001      	movs	r0, #1
 80050bc:	f7ff fe2a 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80050c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80050c6:	2302      	movs	r3, #2
 80050c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80050ca:	2303      	movs	r3, #3
 80050cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80050ce:	2301      	movs	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80050d6:	2304      	movs	r3, #4
 80050d8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050da:	463b      	mov	r3, r7
 80050dc:	4619      	mov	r1, r3
 80050de:	481f      	ldr	r0, [pc, #124]	@ (800515c <MX_I2C3_Init+0xd0>)
 80050e0:	f000 fe35 	bl	8005d4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80050e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80050ea:	2302      	movs	r3, #2
 80050ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80050ee:	2303      	movs	r3, #3
 80050f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80050f2:	2301      	movs	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80050f6:	2300      	movs	r3, #0
 80050f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80050fa:	2304      	movs	r3, #4
 80050fc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050fe:	463b      	mov	r3, r7
 8005100:	4619      	mov	r1, r3
 8005102:	4817      	ldr	r0, [pc, #92]	@ (8005160 <MX_I2C3_Init+0xd4>)
 8005104:	f000 fe23 	bl	8005d4e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8005108:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800510c:	f7ff fe1a 	bl	8004d44 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8005110:	4814      	ldr	r0, [pc, #80]	@ (8005164 <MX_I2C3_Init+0xd8>)
 8005112:	f7ff fd23 	bl	8004b5c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8005116:	4813      	ldr	r0, [pc, #76]	@ (8005164 <MX_I2C3_Init+0xd8>)
 8005118:	f7ff fcfd 	bl	8004b16 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 800511c:	4811      	ldr	r0, [pc, #68]	@ (8005164 <MX_I2C3_Init+0xd8>)
 800511e:	f7ff fcea 	bl	8004af6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8005126:	4b10      	ldr	r3, [pc, #64]	@ (8005168 <MX_I2C3_Init+0xdc>)
 8005128:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800512a:	2300      	movs	r3, #0
 800512c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8005132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005136:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8005138:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800513c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 800513e:	f107 0318 	add.w	r3, r7, #24
 8005142:	4619      	mov	r1, r3
 8005144:	4807      	ldr	r0, [pc, #28]	@ (8005164 <MX_I2C3_Init+0xd8>)
 8005146:	f000 ff79 	bl	800603c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 800514a:	2100      	movs	r1, #0
 800514c:	4805      	ldr	r0, [pc, #20]	@ (8005164 <MX_I2C3_Init+0xd8>)
 800514e:	f7ff fcf2 	bl	8004b36 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005152:	bf00      	nop
 8005154:	3730      	adds	r7, #48	@ 0x30
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40020800 	.word	0x40020800
 8005160:	40020000 	.word	0x40020000
 8005164:	40005c00 	.word	0x40005c00
 8005168:	000186a0 	.word	0x000186a0

0800516c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08e      	sub	sp, #56	@ 0x38
 8005170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005172:	f107 031c 	add.w	r3, r7, #28
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	605a      	str	r2, [r3, #4]
 800517c:	609a      	str	r2, [r3, #8]
 800517e:	60da      	str	r2, [r3, #12]
 8005180:	611a      	str	r2, [r3, #16]
 8005182:	615a      	str	r2, [r3, #20]
 8005184:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	611a      	str	r2, [r3, #16]
 8005194:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8005196:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800519a:	f7ff fdd3 	bl	8004d44 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800519e:	2004      	movs	r0, #4
 80051a0:	f7ff fdb8 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80051a4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80051a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80051aa:	2302      	movs	r3, #2
 80051ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80051ae:	2303      	movs	r3, #3
 80051b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80051ba:	2308      	movs	r3, #8
 80051bc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	4619      	mov	r1, r3
 80051c2:	4819      	ldr	r0, [pc, #100]	@ (8005228 <MX_UART4_Init+0xbc>)
 80051c4:	f000 fdc3 	bl	8005d4e <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80051c8:	f7ff fc0c 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2200      	movs	r2, #0
 80051d0:	2100      	movs	r1, #0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fc5c 	bl	8004a90 <NVIC_EncodePriority>
 80051d8:	4603      	mov	r3, r0
 80051da:	4619      	mov	r1, r3
 80051dc:	2034      	movs	r0, #52	@ 0x34
 80051de:	f7ff fc2d 	bl	8004a3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80051e2:	2034      	movs	r0, #52	@ 0x34
 80051e4:	f7ff fc0c 	bl	8004a00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80051e8:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80051ec:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80051ee:	2300      	movs	r3, #0
 80051f0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80051fa:	230c      	movs	r3, #12
 80051fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80051fe:	2300      	movs	r3, #0
 8005200:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005202:	2300      	movs	r3, #0
 8005204:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8005206:	f107 031c 	add.w	r3, r7, #28
 800520a:	4619      	mov	r1, r3
 800520c:	4807      	ldr	r0, [pc, #28]	@ (800522c <MX_UART4_Init+0xc0>)
 800520e:	f001 fae9 	bl	80067e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8005212:	4806      	ldr	r0, [pc, #24]	@ (800522c <MX_UART4_Init+0xc0>)
 8005214:	f7ff fe20 	bl	8004e58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8005218:	4804      	ldr	r0, [pc, #16]	@ (800522c <MX_UART4_Init+0xc0>)
 800521a:	f7ff fe0d 	bl	8004e38 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800521e:	bf00      	nop
 8005220:	3738      	adds	r7, #56	@ 0x38
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40020800 	.word	0x40020800
 800522c:	40004c00 	.word	0x40004c00

08005230 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08e      	sub	sp, #56	@ 0x38
 8005234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005236:	f107 031c 	add.w	r3, r7, #28
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	605a      	str	r2, [r3, #4]
 8005240:	609a      	str	r2, [r3, #8]
 8005242:	60da      	str	r2, [r3, #12]
 8005244:	611a      	str	r2, [r3, #16]
 8005246:	615a      	str	r2, [r3, #20]
 8005248:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524a:	1d3b      	adds	r3, r7, #4
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	611a      	str	r2, [r3, #16]
 8005258:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800525a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800525e:	f7ff fd71 	bl	8004d44 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005262:	2004      	movs	r0, #4
 8005264:	f7ff fd56 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8005268:	2008      	movs	r0, #8
 800526a:	f7ff fd53 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800526e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005272:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005274:	2302      	movs	r3, #2
 8005276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005278:	2303      	movs	r3, #3
 800527a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005280:	2300      	movs	r3, #0
 8005282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005284:	2308      	movs	r3, #8
 8005286:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	4619      	mov	r1, r3
 800528c:	4821      	ldr	r0, [pc, #132]	@ (8005314 <MX_UART5_Init+0xe4>)
 800528e:	f000 fd5e 	bl	8005d4e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8005292:	2304      	movs	r3, #4
 8005294:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005296:	2302      	movs	r3, #2
 8005298:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800529a:	2303      	movs	r3, #3
 800529c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80052a6:	2308      	movs	r3, #8
 80052a8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052aa:	1d3b      	adds	r3, r7, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	481a      	ldr	r0, [pc, #104]	@ (8005318 <MX_UART5_Init+0xe8>)
 80052b0:	f000 fd4d 	bl	8005d4e <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80052b4:	f7ff fb96 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2200      	movs	r2, #0
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fbe6 	bl	8004a90 <NVIC_EncodePriority>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4619      	mov	r1, r3
 80052c8:	2035      	movs	r0, #53	@ 0x35
 80052ca:	f7ff fbb7 	bl	8004a3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80052ce:	2035      	movs	r0, #53	@ 0x35
 80052d0:	f7ff fb96 	bl	8004a00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80052d4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80052d8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80052da:	2300      	movs	r3, #0
 80052dc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80052de:	2300      	movs	r3, #0
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80052e6:	230c      	movs	r3, #12
 80052e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80052ee:	2300      	movs	r3, #0
 80052f0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80052f2:	f107 031c 	add.w	r3, r7, #28
 80052f6:	4619      	mov	r1, r3
 80052f8:	4808      	ldr	r0, [pc, #32]	@ (800531c <MX_UART5_Init+0xec>)
 80052fa:	f001 fa73 	bl	80067e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80052fe:	4807      	ldr	r0, [pc, #28]	@ (800531c <MX_UART5_Init+0xec>)
 8005300:	f7ff fdaa 	bl	8004e58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8005304:	4805      	ldr	r0, [pc, #20]	@ (800531c <MX_UART5_Init+0xec>)
 8005306:	f7ff fd97 	bl	8004e38 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800530a:	bf00      	nop
 800530c:	3738      	adds	r7, #56	@ 0x38
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40020800 	.word	0x40020800
 8005318:	40020c00 	.word	0x40020c00
 800531c:	40005000 	.word	0x40005000

08005320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08e      	sub	sp, #56	@ 0x38
 8005324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005326:	f107 031c 	add.w	r3, r7, #28
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	605a      	str	r2, [r3, #4]
 8005330:	609a      	str	r2, [r3, #8]
 8005332:	60da      	str	r2, [r3, #12]
 8005334:	611a      	str	r2, [r3, #16]
 8005336:	615a      	str	r2, [r3, #20]
 8005338:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	605a      	str	r2, [r3, #4]
 8005342:	609a      	str	r2, [r3, #8]
 8005344:	60da      	str	r2, [r3, #12]
 8005346:	611a      	str	r2, [r3, #16]
 8005348:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800534a:	2010      	movs	r0, #16
 800534c:	f7ff fd12 	bl	8004d74 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005350:	2001      	movs	r0, #1
 8005352:	f7ff fcdf 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8005356:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800535a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800535c:	2302      	movs	r3, #2
 800535e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005360:	2303      	movs	r3, #3
 8005362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005364:	2300      	movs	r3, #0
 8005366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800536c:	2307      	movs	r3, #7
 800536e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005370:	1d3b      	adds	r3, r7, #4
 8005372:	4619      	mov	r1, r3
 8005374:	4818      	ldr	r0, [pc, #96]	@ (80053d8 <MX_USART1_UART_Init+0xb8>)
 8005376:	f000 fcea 	bl	8005d4e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800537a:	f7ff fb33 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 800537e:	4603      	mov	r3, r0
 8005380:	2200      	movs	r2, #0
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fb83 	bl	8004a90 <NVIC_EncodePriority>
 800538a:	4603      	mov	r3, r0
 800538c:	4619      	mov	r1, r3
 800538e:	2025      	movs	r0, #37	@ 0x25
 8005390:	f7ff fb54 	bl	8004a3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8005394:	2025      	movs	r0, #37	@ 0x25
 8005396:	f7ff fb33 	bl	8004a00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800539a:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800539e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80053a0:	2300      	movs	r3, #0
 80053a2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80053a4:	2300      	movs	r3, #0
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80053ac:	230c      	movs	r3, #12
 80053ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80053b4:	2300      	movs	r3, #0
 80053b6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80053b8:	f107 031c 	add.w	r3, r7, #28
 80053bc:	4619      	mov	r1, r3
 80053be:	4807      	ldr	r0, [pc, #28]	@ (80053dc <MX_USART1_UART_Init+0xbc>)
 80053c0:	f001 fa10 	bl	80067e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80053c4:	4805      	ldr	r0, [pc, #20]	@ (80053dc <MX_USART1_UART_Init+0xbc>)
 80053c6:	f7ff fd47 	bl	8004e58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80053ca:	4804      	ldr	r0, [pc, #16]	@ (80053dc <MX_USART1_UART_Init+0xbc>)
 80053cc:	f7ff fd34 	bl	8004e38 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80053d0:	bf00      	nop
 80053d2:	3738      	adds	r7, #56	@ 0x38
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40020000 	.word	0x40020000
 80053dc:	40011000 	.word	0x40011000

080053e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08e      	sub	sp, #56	@ 0x38
 80053e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80053e6:	f107 031c 	add.w	r3, r7, #28
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	609a      	str	r2, [r3, #8]
 80053f2:	60da      	str	r2, [r3, #12]
 80053f4:	611a      	str	r2, [r3, #16]
 80053f6:	615a      	str	r2, [r3, #20]
 80053f8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053fa:	1d3b      	adds	r3, r7, #4
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	605a      	str	r2, [r3, #4]
 8005402:	609a      	str	r2, [r3, #8]
 8005404:	60da      	str	r2, [r3, #12]
 8005406:	611a      	str	r2, [r3, #16]
 8005408:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800540a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800540e:	f7ff fc99 	bl	8004d44 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005412:	2001      	movs	r0, #1
 8005414:	f7ff fc7e 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8005418:	230c      	movs	r3, #12
 800541a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800541c:	2302      	movs	r3, #2
 800541e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005420:	2303      	movs	r3, #3
 8005422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800542c:	2307      	movs	r3, #7
 800542e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005430:	1d3b      	adds	r3, r7, #4
 8005432:	4619      	mov	r1, r3
 8005434:	4818      	ldr	r0, [pc, #96]	@ (8005498 <MX_USART2_UART_Init+0xb8>)
 8005436:	f000 fc8a 	bl	8005d4e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800543a:	f7ff fad3 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 800543e:	4603      	mov	r3, r0
 8005440:	2200      	movs	r2, #0
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fb23 	bl	8004a90 <NVIC_EncodePriority>
 800544a:	4603      	mov	r3, r0
 800544c:	4619      	mov	r1, r3
 800544e:	2026      	movs	r0, #38	@ 0x26
 8005450:	f7ff faf4 	bl	8004a3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8005454:	2026      	movs	r0, #38	@ 0x26
 8005456:	f7ff fad3 	bl	8004a00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800545a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800545e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005460:	2300      	movs	r3, #0
 8005462:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005464:	2300      	movs	r3, #0
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005468:	2300      	movs	r3, #0
 800546a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800546c:	230c      	movs	r3, #12
 800546e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005470:	2300      	movs	r3, #0
 8005472:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005474:	2300      	movs	r3, #0
 8005476:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8005478:	f107 031c 	add.w	r3, r7, #28
 800547c:	4619      	mov	r1, r3
 800547e:	4807      	ldr	r0, [pc, #28]	@ (800549c <MX_USART2_UART_Init+0xbc>)
 8005480:	f001 f9b0 	bl	80067e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8005484:	4805      	ldr	r0, [pc, #20]	@ (800549c <MX_USART2_UART_Init+0xbc>)
 8005486:	f7ff fce7 	bl	8004e58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800548a:	4804      	ldr	r0, [pc, #16]	@ (800549c <MX_USART2_UART_Init+0xbc>)
 800548c:	f7ff fcd4 	bl	8004e38 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005490:	bf00      	nop
 8005492:	3738      	adds	r7, #56	@ 0x38
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40020000 	.word	0x40020000
 800549c:	40004400 	.word	0x40004400

080054a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	@ 0x38
 80054a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80054a6:	f107 031c 	add.w	r3, r7, #28
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	605a      	str	r2, [r3, #4]
 80054b0:	609a      	str	r2, [r3, #8]
 80054b2:	60da      	str	r2, [r3, #12]
 80054b4:	611a      	str	r2, [r3, #16]
 80054b6:	615a      	str	r2, [r3, #20]
 80054b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ba:	1d3b      	adds	r3, r7, #4
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	605a      	str	r2, [r3, #4]
 80054c2:	609a      	str	r2, [r3, #8]
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	611a      	str	r2, [r3, #16]
 80054c8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80054ca:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80054ce:	f7ff fc39 	bl	8004d44 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80054d2:	2002      	movs	r0, #2
 80054d4:	f7ff fc1e 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80054d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80054dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80054de:	2302      	movs	r3, #2
 80054e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80054e2:	2303      	movs	r3, #3
 80054e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80054ee:	2307      	movs	r3, #7
 80054f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f2:	1d3b      	adds	r3, r7, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	4819      	ldr	r0, [pc, #100]	@ (800555c <MX_USART3_UART_Init+0xbc>)
 80054f8:	f000 fc29 	bl	8005d4e <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80054fc:	f7ff fa72 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 8005500:	4603      	mov	r3, r0
 8005502:	2200      	movs	r2, #0
 8005504:	2100      	movs	r1, #0
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fac2 	bl	8004a90 <NVIC_EncodePriority>
 800550c:	4603      	mov	r3, r0
 800550e:	4619      	mov	r1, r3
 8005510:	2027      	movs	r0, #39	@ 0x27
 8005512:	f7ff fa93 	bl	8004a3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8005516:	2027      	movs	r0, #39	@ 0x27
 8005518:	f7ff fa72 	bl	8004a00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800551c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8005520:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005522:	2300      	movs	r3, #0
 8005524:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005526:	2300      	movs	r3, #0
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800552a:	2300      	movs	r3, #0
 800552c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800552e:	230c      	movs	r3, #12
 8005530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005532:	2300      	movs	r3, #0
 8005534:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005536:	2300      	movs	r3, #0
 8005538:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800553a:	f107 031c 	add.w	r3, r7, #28
 800553e:	4619      	mov	r1, r3
 8005540:	4807      	ldr	r0, [pc, #28]	@ (8005560 <MX_USART3_UART_Init+0xc0>)
 8005542:	f001 f94f 	bl	80067e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8005546:	4806      	ldr	r0, [pc, #24]	@ (8005560 <MX_USART3_UART_Init+0xc0>)
 8005548:	f7ff fc86 	bl	8004e58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800554c:	4804      	ldr	r0, [pc, #16]	@ (8005560 <MX_USART3_UART_Init+0xc0>)
 800554e:	f7ff fc73 	bl	8004e38 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005552:	bf00      	nop
 8005554:	3738      	adds	r7, #56	@ 0x38
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40020400 	.word	0x40020400
 8005560:	40004800 	.word	0x40004800

08005564 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08e      	sub	sp, #56	@ 0x38
 8005568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800556a:	f107 031c 	add.w	r3, r7, #28
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	609a      	str	r2, [r3, #8]
 8005576:	60da      	str	r2, [r3, #12]
 8005578:	611a      	str	r2, [r3, #16]
 800557a:	615a      	str	r2, [r3, #20]
 800557c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800557e:	1d3b      	adds	r3, r7, #4
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	60da      	str	r2, [r3, #12]
 800558a:	611a      	str	r2, [r3, #16]
 800558c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800558e:	2020      	movs	r0, #32
 8005590:	f7ff fbf0 	bl	8004d74 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005594:	2004      	movs	r0, #4
 8005596:	f7ff fbbd 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800559a:	23c0      	movs	r3, #192	@ 0xc0
 800559c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800559e:	2302      	movs	r3, #2
 80055a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80055a2:	2303      	movs	r3, #3
 80055a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80055ae:	2308      	movs	r3, #8
 80055b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055b2:	1d3b      	adds	r3, r7, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4819      	ldr	r0, [pc, #100]	@ (800561c <MX_USART6_UART_Init+0xb8>)
 80055b8:	f000 fbc9 	bl	8005d4e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80055bc:	f7ff fa12 	bl	80049e4 <__NVIC_GetPriorityGrouping>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2200      	movs	r2, #0
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff fa62 	bl	8004a90 <NVIC_EncodePriority>
 80055cc:	4603      	mov	r3, r0
 80055ce:	4619      	mov	r1, r3
 80055d0:	2047      	movs	r0, #71	@ 0x47
 80055d2:	f7ff fa33 	bl	8004a3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80055d6:	2047      	movs	r0, #71	@ 0x47
 80055d8:	f7ff fa12 	bl	8004a00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80055dc:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80055e0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80055e2:	2300      	movs	r3, #0
 80055e4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80055e6:	2300      	movs	r3, #0
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80055ee:	230c      	movs	r3, #12
 80055f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80055f6:	2300      	movs	r3, #0
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80055fa:	f107 031c 	add.w	r3, r7, #28
 80055fe:	4619      	mov	r1, r3
 8005600:	4807      	ldr	r0, [pc, #28]	@ (8005620 <MX_USART6_UART_Init+0xbc>)
 8005602:	f001 f8ef 	bl	80067e4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8005606:	4806      	ldr	r0, [pc, #24]	@ (8005620 <MX_USART6_UART_Init+0xbc>)
 8005608:	f7ff fc26 	bl	8004e58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800560c:	4804      	ldr	r0, [pc, #16]	@ (8005620 <MX_USART6_UART_Init+0xbc>)
 800560e:	f7ff fc13 	bl	8004e38 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005612:	bf00      	nop
 8005614:	3738      	adds	r7, #56	@ 0x38
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40020800 	.word	0x40020800
 8005620:	40011400 	.word	0x40011400

08005624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800562a:	463b      	mov	r3, r7
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	609a      	str	r2, [r3, #8]
 8005634:	60da      	str	r2, [r3, #12]
 8005636:	611a      	str	r2, [r3, #16]
 8005638:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800563a:	2004      	movs	r0, #4
 800563c:	f7ff fb6a 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8005640:	2080      	movs	r0, #128	@ 0x80
 8005642:	f7ff fb67 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005646:	2001      	movs	r0, #1
 8005648:	f7ff fb64 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800564c:	2002      	movs	r0, #2
 800564e:	f7ff fb61 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8005652:	2008      	movs	r0, #8
 8005654:	f7ff fb5e 	bl	8004d14 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, WD_DONE_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin);
 8005658:	f641 0102 	movw	r1, #6146	@ 0x1802
 800565c:	4826      	ldr	r0, [pc, #152]	@ (80056f8 <MX_GPIO_Init+0xd4>)
 800565e:	f7ff fc11 	bl	8004e84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_busy_Pin|ENABLE_MUX_Pin);
 8005662:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8005666:	4825      	ldr	r0, [pc, #148]	@ (80056fc <MX_GPIO_Init+0xd8>)
 8005668:	f7ff fc0c 	bl	8004e84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 800566c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005670:	4823      	ldr	r0, [pc, #140]	@ (8005700 <MX_GPIO_Init+0xdc>)
 8005672:	f7ff fc07 	bl	8004e84 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = PMU_INT_MCU_Pin|PDU_INT_MCU_Pin|IOU_INT_MCU_Pin|EJECT_Pin
 8005676:	f24e 030c 	movw	r3, #57356	@ 0xe00c
 800567a:	603b      	str	r3, [r7, #0]
                          |CAM_INT_MCU_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800567c:	2300      	movs	r3, #0
 800567e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005684:	463b      	mov	r3, r7
 8005686:	4619      	mov	r1, r3
 8005688:	481c      	ldr	r0, [pc, #112]	@ (80056fc <MX_GPIO_Init+0xd8>)
 800568a:	f000 fb60 	bl	8005d4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin;
 800568e:	f641 0302 	movw	r3, #6146	@ 0x1802
 8005692:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005694:	2301      	movs	r3, #1
 8005696:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005698:	2300      	movs	r3, #0
 800569a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056a4:	463b      	mov	r3, r7
 80056a6:	4619      	mov	r1, r3
 80056a8:	4813      	ldr	r0, [pc, #76]	@ (80056f8 <MX_GPIO_Init+0xd4>)
 80056aa:	f000 fb50 	bl	8005d4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_busy_Pin|ENABLE_MUX_Pin;
 80056ae:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80056b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80056b4:	2301      	movs	r3, #1
 80056b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80056c0:	2300      	movs	r3, #0
 80056c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056c4:	463b      	mov	r3, r7
 80056c6:	4619      	mov	r1, r3
 80056c8:	480c      	ldr	r0, [pc, #48]	@ (80056fc <MX_GPIO_Init+0xd8>)
 80056ca:	f000 fb40 	bl	8005d4e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_RF_Pin;
 80056ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80056d4:	2301      	movs	r3, #1
 80056d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80056d8:	2300      	movs	r3, #0
 80056da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENABLE_RF_GPIO_Port, &GPIO_InitStruct);
 80056e4:	463b      	mov	r3, r7
 80056e6:	4619      	mov	r1, r3
 80056e8:	4805      	ldr	r0, [pc, #20]	@ (8005700 <MX_GPIO_Init+0xdc>)
 80056ea:	f000 fb30 	bl	8005d4e <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40020000 	.word	0x40020000
 80056fc:	40020800 	.word	0x40020800
 8005700:	40020400 	.word	0x40020400

08005704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <NMI_Handler+0x4>

0800570c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005710:	bf00      	nop
 8005712:	e7fd      	b.n	8005710 <HardFault_Handler+0x4>

08005714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005718:	bf00      	nop
 800571a:	e7fd      	b.n	8005718 <MemManage_Handler+0x4>

0800571c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005720:	bf00      	nop
 8005722:	e7fd      	b.n	8005720 <BusFault_Handler+0x4>

08005724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005728:	bf00      	nop
 800572a:	e7fd      	b.n	8005728 <UsageFault_Handler+0x4>

0800572c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800573a:	b480      	push	{r7}
 800573c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800573e:	bf00      	nop
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    g_systick_count++;
 800575c:	4b04      	ldr	r3, [pc, #16]	@ (8005770 <SysTick_Handler+0x18>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3301      	adds	r3, #1
 8005762:	4a03      	ldr	r2, [pc, #12]	@ (8005770 <SysTick_Handler+0x18>)
 8005764:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 8005766:	f001 f989 	bl	8006a7c <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800576a:	bf00      	nop
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20002934 	.word	0x20002934

08005774 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (USART1);
 8005778:	4802      	ldr	r0, [pc, #8]	@ (8005784 <USART1_IRQHandler+0x10>)
 800577a:	f7fc fbbf 	bl	8001efc <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40011000 	.word	0x40011000

08005788 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (USART2);
 800578c:	4802      	ldr	r0, [pc, #8]	@ (8005798 <USART2_IRQHandler+0x10>)
 800578e:	f7fc fbb5 	bl	8001efc <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005792:	bf00      	nop
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	40004400 	.word	0x40004400

0800579c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (USART3);
 80057a0:	4802      	ldr	r0, [pc, #8]	@ (80057ac <USART3_IRQHandler+0x10>)
 80057a2:	f7fc fbab 	bl	8001efc <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80057a6:	bf00      	nop
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40004800 	.word	0x40004800

080057b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Uart_isr (UART4);
 80057b4:	4802      	ldr	r0, [pc, #8]	@ (80057c0 <UART4_IRQHandler+0x10>)
 80057b6:	f7fc fba1 	bl	8001efc <Uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80057ba:	bf00      	nop
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	40004c00 	.word	0x40004c00

080057c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr (UART5);
 80057c8:	4802      	ldr	r0, [pc, #8]	@ (80057d4 <UART5_IRQHandler+0x10>)
 80057ca:	f7fc fb97 	bl	8001efc <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40005000 	.word	0x40005000

080057d8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr (USART6);
 80057dc:	4802      	ldr	r0, [pc, #8]	@ (80057e8 <USART6_IRQHandler+0x10>)
 80057de:	f7fc fb8d 	bl	8001efc <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80057e2:	bf00      	nop
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40011400 	.word	0x40011400

080057ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  return 1;
 80057f0:	2301      	movs	r3, #1
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <_kill>:

int _kill(int pid, int sig)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005806:	f003 fd2b 	bl	8009260 <__errno>
 800580a:	4603      	mov	r3, r0
 800580c:	2216      	movs	r2, #22
 800580e:	601a      	str	r2, [r3, #0]
  return -1;
 8005810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <_exit>:

void _exit (int status)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005824:	f04f 31ff 	mov.w	r1, #4294967295
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ffe7 	bl	80057fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <_exit+0x12>

08005832 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b086      	sub	sp, #24
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e00a      	b.n	800585a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005844:	f3af 8000 	nop.w
 8005848:	4601      	mov	r1, r0
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	60ba      	str	r2, [r7, #8]
 8005850:	b2ca      	uxtb	r2, r1
 8005852:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3301      	adds	r3, #1
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	429a      	cmp	r2, r3
 8005860:	dbf0      	blt.n	8005844 <_read+0x12>
  }

  return len;
 8005862:	687b      	ldr	r3, [r7, #4]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e009      	b.n	8005892 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	60ba      	str	r2, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	3301      	adds	r3, #1
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	dbf1      	blt.n	800587e <_write+0x12>
  }
  return len;
 800589a:	687b      	ldr	r3, [r7, #4]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <_close>:

int _close(int file)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058cc:	605a      	str	r2, [r3, #4]
  return 0;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <_isatty>:

int _isatty(int file)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80058e4:	2301      	movs	r3, #1
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005914:	4a14      	ldr	r2, [pc, #80]	@ (8005968 <_sbrk+0x5c>)
 8005916:	4b15      	ldr	r3, [pc, #84]	@ (800596c <_sbrk+0x60>)
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005920:	4b13      	ldr	r3, [pc, #76]	@ (8005970 <_sbrk+0x64>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005928:	4b11      	ldr	r3, [pc, #68]	@ (8005970 <_sbrk+0x64>)
 800592a:	4a12      	ldr	r2, [pc, #72]	@ (8005974 <_sbrk+0x68>)
 800592c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800592e:	4b10      	ldr	r3, [pc, #64]	@ (8005970 <_sbrk+0x64>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4413      	add	r3, r2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	429a      	cmp	r2, r3
 800593a:	d207      	bcs.n	800594c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800593c:	f003 fc90 	bl	8009260 <__errno>
 8005940:	4603      	mov	r3, r0
 8005942:	220c      	movs	r2, #12
 8005944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005946:	f04f 33ff 	mov.w	r3, #4294967295
 800594a:	e009      	b.n	8005960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800594c:	4b08      	ldr	r3, [pc, #32]	@ (8005970 <_sbrk+0x64>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005952:	4b07      	ldr	r3, [pc, #28]	@ (8005970 <_sbrk+0x64>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4413      	add	r3, r2
 800595a:	4a05      	ldr	r2, [pc, #20]	@ (8005970 <_sbrk+0x64>)
 800595c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800595e:	68fb      	ldr	r3, [r7, #12]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20020000 	.word	0x20020000
 800596c:	00000400 	.word	0x00000400
 8005970:	20002938 	.word	0x20002938
 8005974:	20002ba0 	.word	0x20002ba0

08005978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800597c:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <SystemInit+0x20>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005982:	4a05      	ldr	r2, [pc, #20]	@ (8005998 <SystemInit+0x20>)
 8005984:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005988:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800599c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80059d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80059a0:	f7ff ffea 	bl	8005978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80059a4:	480c      	ldr	r0, [pc, #48]	@ (80059d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80059a6:	490d      	ldr	r1, [pc, #52]	@ (80059dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80059a8:	4a0d      	ldr	r2, [pc, #52]	@ (80059e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80059aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059ac:	e002      	b.n	80059b4 <LoopCopyDataInit>

080059ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059b2:	3304      	adds	r3, #4

080059b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059b8:	d3f9      	bcc.n	80059ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059ba:	4a0a      	ldr	r2, [pc, #40]	@ (80059e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80059bc:	4c0a      	ldr	r4, [pc, #40]	@ (80059e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80059be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059c0:	e001      	b.n	80059c6 <LoopFillZerobss>

080059c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059c4:	3204      	adds	r2, #4

080059c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059c8:	d3fb      	bcc.n	80059c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80059ca:	f003 fc4f 	bl	800926c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059ce:	f7ff fa69 	bl	8004ea4 <main>
  bx  lr    
 80059d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80059d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80059d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059dc:	20000500 	.word	0x20000500
  ldr r2, =_sidata
 80059e0:	0800eba8 	.word	0x0800eba8
  ldr r2, =_sbss
 80059e4:	20000500 	.word	0x20000500
  ldr r4, =_ebss
 80059e8:	20002b9c 	.word	0x20002b9c

080059ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059ec:	e7fe      	b.n	80059ec <ADC_IRQHandler>

080059ee <LL_GPIO_SetOutputPin>:
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	619a      	str	r2, [r3, #24]
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <LL_GPIO_ResetOutputPin>:
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	041a      	lsls	r2, r3, #16
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	619a      	str	r2, [r3, #24]
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <WDT_init>:




void WDT_init(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 8005a2c:	4b03      	ldr	r3, [pc, #12]	@ (8005a3c <WDT_init+0x14>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]

}
 8005a32:	bf00      	nop
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	2000293c 	.word	0x2000293c

08005a40 <WDT_create_task>:

void WDT_create_task(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 8005a44:	4902      	ldr	r1, [pc, #8]	@ (8005a50 <WDT_create_task+0x10>)
 8005a46:	4803      	ldr	r0, [pc, #12]	@ (8005a54 <WDT_create_task+0x14>)
 8005a48:	f000 ffda 	bl	8006a00 <SCH_TASK_CreateTask>

}
 8005a4c:	bf00      	nop
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	2000032c 	.word	0x2000032c
 8005a54:	20000328 	.word	0x20000328

08005a58 <status_wdt_update>:

void	status_wdt_update(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0

		if (WDT_Current){
 8005a5c:	4b14      	ldr	r3, [pc, #80]	@ (8005ab0 <status_wdt_update+0x58>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d012      	beq.n	8005a8a <status_wdt_update+0x32>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8005a64:	2001      	movs	r0, #1
 8005a66:	f000 ffb5 	bl	80069d4 <SCH_TIM_HasCompleted>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01d      	beq.n	8005aac <status_wdt_update+0x54>
			{
				WDT_Current = 0;
 8005a70:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab0 <status_wdt_update+0x58>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	701a      	strb	r2, [r3, #0]
				LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8005a76:	2102      	movs	r1, #2
 8005a78:	480e      	ldr	r0, [pc, #56]	@ (8005ab4 <status_wdt_update+0x5c>)
 8005a7a:	f7ff ffc6 	bl	8005a0a <LL_GPIO_ResetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 8005a7e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005a82:	2001      	movs	r0, #1
 8005a84:	f000 ff90 	bl	80069a8 <SCH_TIM_Start>
				WDT_Current = 1;
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
			}
	}
}
 8005a88:	e010      	b.n	8005aac <status_wdt_update+0x54>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	f000 ffa2 	bl	80069d4 <SCH_TIM_HasCompleted>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <status_wdt_update+0x54>
				WDT_Current = 1;
 8005a96:	4b06      	ldr	r3, [pc, #24]	@ (8005ab0 <status_wdt_update+0x58>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	701a      	strb	r2, [r3, #0]
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8005a9c:	2102      	movs	r1, #2
 8005a9e:	4805      	ldr	r0, [pc, #20]	@ (8005ab4 <status_wdt_update+0x5c>)
 8005aa0:	f7ff ffa5 	bl	80059ee <LL_GPIO_SetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 8005aa4:	21c8      	movs	r1, #200	@ 0xc8
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	f000 ff7e 	bl	80069a8 <SCH_TIM_Start>
}
 8005aac:	bf00      	nop
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	2000293c 	.word	0x2000293c
 8005ab4:	40020000 	.word	0x40020000

08005ab8 <LL_GPIO_SetPinMode>:
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b08b      	sub	sp, #44	@ 0x2c
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	fa93 f3a3 	rbit	r3, r3
 8005ad2:	613b      	str	r3, [r7, #16]
  return result;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005ade:	2320      	movs	r3, #32
 8005ae0:	e003      	b.n	8005aea <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	fab3 f383 	clz	r3, r3
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	2103      	movs	r1, #3
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	43db      	mvns	r3, r3
 8005af4:	401a      	ands	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	fa93 f3a3 	rbit	r3, r3
 8005b00:	61fb      	str	r3, [r7, #28]
  return result;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005b0c:	2320      	movs	r3, #32
 8005b0e:	e003      	b.n	8005b18 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	fab3 f383 	clz	r3, r3
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	601a      	str	r2, [r3, #0]
}
 8005b26:	bf00      	nop
 8005b28:	372c      	adds	r7, #44	@ 0x2c
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <LL_GPIO_SetPinOutputType>:
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	401a      	ands	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	fb01 f303 	mul.w	r3, r1, r3
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	605a      	str	r2, [r3, #4]
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <LL_GPIO_SetPinSpeed>:
{
 8005b62:	b480      	push	{r7}
 8005b64:	b08b      	sub	sp, #44	@ 0x2c
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	fa93 f3a3 	rbit	r3, r3
 8005b7c:	613b      	str	r3, [r7, #16]
  return result;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005b88:	2320      	movs	r3, #32
 8005b8a:	e003      	b.n	8005b94 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	fab3 f383 	clz	r3, r3
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	2103      	movs	r1, #3
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	401a      	ands	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	fa93 f3a3 	rbit	r3, r3
 8005baa:	61fb      	str	r3, [r7, #28]
  return result;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	e003      	b.n	8005bc2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	fab3 f383 	clz	r3, r3
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	609a      	str	r2, [r3, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	372c      	adds	r7, #44	@ 0x2c
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <LL_GPIO_SetPinPull>:
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b08b      	sub	sp, #44	@ 0x2c
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	fa93 f3a3 	rbit	r3, r3
 8005bf6:	613b      	str	r3, [r7, #16]
  return result;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005c02:	2320      	movs	r3, #32
 8005c04:	e003      	b.n	8005c0e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	fab3 f383 	clz	r3, r3
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	2103      	movs	r1, #3
 8005c12:	fa01 f303 	lsl.w	r3, r1, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	401a      	ands	r2, r3
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	fa93 f3a3 	rbit	r3, r3
 8005c24:	61fb      	str	r3, [r7, #28]
  return result;
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005c30:	2320      	movs	r3, #32
 8005c32:	e003      	b.n	8005c3c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	fab3 f383 	clz	r3, r3
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	fa01 f303 	lsl.w	r3, r1, r3
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	60da      	str	r2, [r3, #12]
}
 8005c4a:	bf00      	nop
 8005c4c:	372c      	adds	r7, #44	@ 0x2c
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <LL_GPIO_SetAFPin_0_7>:
{
 8005c56:	b480      	push	{r7}
 8005c58:	b08b      	sub	sp, #44	@ 0x2c
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a1a      	ldr	r2, [r3, #32]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	fa93 f3a3 	rbit	r3, r3
 8005c70:	613b      	str	r3, [r7, #16]
  return result;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005c7c:	2320      	movs	r3, #32
 8005c7e:	e003      	b.n	8005c88 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	fab3 f383 	clz	r3, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	210f      	movs	r1, #15
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	43db      	mvns	r3, r3
 8005c92:	401a      	ands	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	fa93 f3a3 	rbit	r3, r3
 8005c9e:	61fb      	str	r3, [r7, #28]
  return result;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005caa:	2320      	movs	r3, #32
 8005cac:	e003      	b.n	8005cb6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	fab3 f383 	clz	r3, r3
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	621a      	str	r2, [r3, #32]
}
 8005cc4:	bf00      	nop
 8005cc6:	372c      	adds	r7, #44	@ 0x2c
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <LL_GPIO_SetAFPin_8_15>:
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b08b      	sub	sp, #44	@ 0x2c
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	fa93 f3a3 	rbit	r3, r3
 8005cec:	613b      	str	r3, [r7, #16]
  return result;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	e003      	b.n	8005d04 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	fab3 f383 	clz	r3, r3
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	210f      	movs	r1, #15
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	401a      	ands	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	fa93 f3a3 	rbit	r3, r3
 8005d1c:	61fb      	str	r3, [r7, #28]
  return result;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005d28:	2320      	movs	r3, #32
 8005d2a:	e003      	b.n	8005d34 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	fab3 f383 	clz	r3, r3
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8005d42:	bf00      	nop
 8005d44:	372c      	adds	r7, #44	@ 0x2c
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b08a      	sub	sp, #40	@ 0x28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	fa93 f3a3 	rbit	r3, r3
 8005d6c:	617b      	str	r3, [r7, #20]
  return result;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <LL_GPIO_Init+0x2e>
    return 32U;
 8005d78:	2320      	movs	r3, #32
 8005d7a:	e003      	b.n	8005d84 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	fab3 f383 	clz	r3, r3
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005d86:	e057      	b.n	8005e38 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d90:	fa01 f303 	lsl.w	r3, r1, r3
 8005d94:	4013      	ands	r3, r2
 8005d96:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d049      	beq.n	8005e32 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d003      	beq.n	8005dae <LL_GPIO_Init+0x60>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d10d      	bne.n	8005dca <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	461a      	mov	r2, r3
 8005db4:	6a39      	ldr	r1, [r7, #32]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff fed3 	bl	8005b62 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6a39      	ldr	r1, [r7, #32]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff feb4 	bl	8005b32 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6a39      	ldr	r1, [r7, #32]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff ff02 	bl	8005bdc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d121      	bne.n	8005e24 <LL_GPIO_Init+0xd6>
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	fa93 f3a3 	rbit	r3, r3
 8005dea:	60bb      	str	r3, [r7, #8]
  return result;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <LL_GPIO_Init+0xac>
    return 32U;
 8005df6:	2320      	movs	r3, #32
 8005df8:	e003      	b.n	8005e02 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	fab3 f383 	clz	r3, r3
 8005e00:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005e02:	2b07      	cmp	r3, #7
 8005e04:	d807      	bhi.n	8005e16 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	6a39      	ldr	r1, [r7, #32]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff ff21 	bl	8005c56 <LL_GPIO_SetAFPin_0_7>
 8005e14:	e006      	b.n	8005e24 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6a39      	ldr	r1, [r7, #32]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ff56 	bl	8005cd0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6a39      	ldr	r1, [r7, #32]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff fe43 	bl	8005ab8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	3301      	adds	r3, #1
 8005e36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1a0      	bne.n	8005d88 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3728      	adds	r7, #40	@ 0x28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <LL_I2C_Enable>:
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f043 0201 	orr.w	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <LL_I2C_Disable>:
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f023 0201 	bic.w	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	601a      	str	r2, [r3, #0]
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <LL_I2C_SetOwnAddress1>:
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005ea4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	609a      	str	r2, [r3, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <LL_I2C_ConfigSpeed>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	4a42      	ldr	r2, [pc, #264]	@ (8005fe4 <LL_I2C_ConfigSpeed+0x124>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	0c9b      	lsrs	r3, r3, #18
 8005ee0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	431a      	orrs	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	493a      	ldr	r1, [pc, #232]	@ (8005fe8 <LL_I2C_ConfigSpeed+0x128>)
 8005efe:	428b      	cmp	r3, r1
 8005f00:	d802      	bhi.n	8005f08 <LL_I2C_ConfigSpeed+0x48>
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	3301      	adds	r3, #1
 8005f06:	e009      	b.n	8005f1c <LL_I2C_ConfigSpeed+0x5c>
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	4936      	ldr	r1, [pc, #216]	@ (8005fec <LL_I2C_ConfigSpeed+0x12c>)
 8005f14:	fba1 1303 	umull	r1, r3, r1, r3
 8005f18:	099b      	lsrs	r3, r3, #6
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a30      	ldr	r2, [pc, #192]	@ (8005fe8 <LL_I2C_ConfigSpeed+0x128>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d939      	bls.n	8005f9e <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d117      	bne.n	8005f60 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	4613      	mov	r3, r2
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	4413      	add	r3, r2
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005f54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f58:	e01d      	b.n	8005f96 <LL_I2C_ConfigSpeed+0xd6>
 8005f5a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005f5e:	e01a      	b.n	8005f96 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009a      	lsls	r2, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00b      	beq.n	8005f92 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009a      	lsls	r2, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f90:	e001      	b.n	8005f96 <LL_I2C_ConfigSpeed+0xd6>
 8005f92:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	e011      	b.n	8005fc2 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005fac:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	e000      	b.n	8005fc0 <LL_I2C_ConfigSpeed+0x100>
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8005fca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	61da      	str	r2, [r3, #28]
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	431bde83 	.word	0x431bde83
 8005fe8:	000186a0 	.word	0x000186a0
 8005fec:	10624dd3 	.word	0x10624dd3

08005ff0 <LL_I2C_SetMode>:
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f023 021a 	bic.w	r2, r3, #26
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	601a      	str	r2, [r3, #0]
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <LL_I2C_AcknowledgeNextData>:
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ff12 	bl	8005e70 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800604c:	f107 0308 	add.w	r3, r7, #8
 8006050:	4618      	mov	r0, r3
 8006052:	f000 f895 	bl	8006180 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8006056:	6939      	ldr	r1, [r7, #16]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff ff2d 	bl	8005ec0 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68d9      	ldr	r1, [r3, #12]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	461a      	mov	r2, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ff0d 	bl	8005e90 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ffb7 	bl	8005ff0 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fee4 	bl	8005e50 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ffc1 	bl	8006016 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <LL_RCC_GetSysClkSource>:
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80060a4:	4b04      	ldr	r3, [pc, #16]	@ (80060b8 <LL_RCC_GetSysClkSource+0x18>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 030c 	and.w	r3, r3, #12
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40023800 	.word	0x40023800

080060bc <LL_RCC_GetAHBPrescaler>:
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80060c0:	4b04      	ldr	r3, [pc, #16]	@ (80060d4 <LL_RCC_GetAHBPrescaler+0x18>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40023800 	.word	0x40023800

080060d8 <LL_RCC_GetAPB1Prescaler>:
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80060dc:	4b04      	ldr	r3, [pc, #16]	@ (80060f0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40023800 	.word	0x40023800

080060f4 <LL_RCC_GetAPB2Prescaler>:
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80060f8:	4b04      	ldr	r3, [pc, #16]	@ (800610c <LL_RCC_GetAPB2Prescaler+0x18>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006100:	4618      	mov	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800

08006110 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006114:	4b04      	ldr	r3, [pc, #16]	@ (8006128 <LL_RCC_PLL_GetMainSource+0x18>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800611c:	4618      	mov	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800

0800612c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006130:	4b04      	ldr	r3, [pc, #16]	@ (8006144 <LL_RCC_PLL_GetN+0x18>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	099b      	lsrs	r3, r3, #6
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800613a:	4618      	mov	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	40023800 	.word	0x40023800

08006148 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800614c:	4b04      	ldr	r3, [pc, #16]	@ (8006160 <LL_RCC_PLL_GetP+0x18>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006154:	4618      	mov	r0, r3
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40023800 	.word	0x40023800

08006164 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006168:	4b04      	ldr	r3, [pc, #16]	@ (800617c <LL_RCC_PLL_GetDivider+0x18>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800

08006180 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006188:	f000 f820 	bl	80061cc <RCC_GetSystemClockFreq>
 800618c:	4602      	mov	r2, r0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f840 	bl	800621c <RCC_GetHCLKClockFreq>
 800619c:	4602      	mov	r2, r0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f84e 	bl	8006248 <RCC_GetPCLK1ClockFreq>
 80061ac:	4602      	mov	r2, r0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 f85a 	bl	8006270 <RCC_GetPCLK2ClockFreq>
 80061bc:	4602      	mov	r2, r0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	60da      	str	r2, [r3, #12]
}
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80061d6:	f7ff ff63 	bl	80060a0 <LL_RCC_GetSysClkSource>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d00c      	beq.n	80061fa <RCC_GetSystemClockFreq+0x2e>
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d80f      	bhi.n	8006204 <RCC_GetSystemClockFreq+0x38>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <RCC_GetSystemClockFreq+0x22>
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d003      	beq.n	80061f4 <RCC_GetSystemClockFreq+0x28>
 80061ec:	e00a      	b.n	8006204 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80061ee:	4b09      	ldr	r3, [pc, #36]	@ (8006214 <RCC_GetSystemClockFreq+0x48>)
 80061f0:	607b      	str	r3, [r7, #4]
      break;
 80061f2:	e00a      	b.n	800620a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80061f4:	4b08      	ldr	r3, [pc, #32]	@ (8006218 <RCC_GetSystemClockFreq+0x4c>)
 80061f6:	607b      	str	r3, [r7, #4]
      break;
 80061f8:	e007      	b.n	800620a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80061fa:	2008      	movs	r0, #8
 80061fc:	f000 f84c 	bl	8006298 <RCC_PLL_GetFreqDomain_SYS>
 8006200:	6078      	str	r0, [r7, #4]
      break;
 8006202:	e002      	b.n	800620a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8006204:	4b03      	ldr	r3, [pc, #12]	@ (8006214 <RCC_GetSystemClockFreq+0x48>)
 8006206:	607b      	str	r3, [r7, #4]
      break;
 8006208:	bf00      	nop
  }

  return frequency;
 800620a:	687b      	ldr	r3, [r7, #4]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	00f42400 	.word	0x00f42400
 8006218:	007a1200 	.word	0x007a1200

0800621c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006224:	f7ff ff4a 	bl	80060bc <LL_RCC_GetAHBPrescaler>
 8006228:	4603      	mov	r3, r0
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	4a04      	ldr	r2, [pc, #16]	@ (8006244 <RCC_GetHCLKClockFreq+0x28>)
 8006232:	5cd3      	ldrb	r3, [r2, r3]
 8006234:	461a      	mov	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	40d3      	lsrs	r3, r2
}
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	0800e750 	.word	0x0800e750

08006248 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006250:	f7ff ff42 	bl	80060d8 <LL_RCC_GetAPB1Prescaler>
 8006254:	4603      	mov	r3, r0
 8006256:	0a9b      	lsrs	r3, r3, #10
 8006258:	4a04      	ldr	r2, [pc, #16]	@ (800626c <RCC_GetPCLK1ClockFreq+0x24>)
 800625a:	5cd3      	ldrb	r3, [r2, r3]
 800625c:	461a      	mov	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	40d3      	lsrs	r3, r2
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	0800e760 	.word	0x0800e760

08006270 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006278:	f7ff ff3c 	bl	80060f4 <LL_RCC_GetAPB2Prescaler>
 800627c:	4603      	mov	r3, r0
 800627e:	0b5b      	lsrs	r3, r3, #13
 8006280:	4a04      	ldr	r2, [pc, #16]	@ (8006294 <RCC_GetPCLK2ClockFreq+0x24>)
 8006282:	5cd3      	ldrb	r3, [r2, r3]
 8006284:	461a      	mov	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	40d3      	lsrs	r3, r2
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	0800e760 	.word	0x0800e760

08006298 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	2300      	movs	r3, #0
 80062aa:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80062ac:	f7ff ff30 	bl	8006110 <LL_RCC_PLL_GetMainSource>
 80062b0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062be:	d003      	beq.n	80062c8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80062c0:	e005      	b.n	80062ce <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80062c2:	4b12      	ldr	r3, [pc, #72]	@ (800630c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80062c4:	617b      	str	r3, [r7, #20]
      break;
 80062c6:	e005      	b.n	80062d4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80062c8:	4b11      	ldr	r3, [pc, #68]	@ (8006310 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80062ca:	617b      	str	r3, [r7, #20]
      break;
 80062cc:	e002      	b.n	80062d4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80062ce:	4b0f      	ldr	r3, [pc, #60]	@ (800630c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80062d0:	617b      	str	r3, [r7, #20]
      break;
 80062d2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d113      	bne.n	8006302 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80062da:	f7ff ff43 	bl	8006164 <LL_RCC_PLL_GetDivider>
 80062de:	4602      	mov	r2, r0
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	fbb3 f4f2 	udiv	r4, r3, r2
 80062e6:	f7ff ff21 	bl	800612c <LL_RCC_PLL_GetN>
 80062ea:	4603      	mov	r3, r0
 80062ec:	fb03 f404 	mul.w	r4, r3, r4
 80062f0:	f7ff ff2a 	bl	8006148 <LL_RCC_PLL_GetP>
 80062f4:	4603      	mov	r3, r0
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	3301      	adds	r3, #1
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8006300:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8006302:	693b      	ldr	r3, [r7, #16]
}
 8006304:	4618      	mov	r0, r3
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	bd90      	pop	{r4, r7, pc}
 800630c:	00f42400 	.word	0x00f42400
 8006310:	007a1200 	.word	0x007a1200

08006314 <LL_USART_IsEnabled>:
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006328:	bf0c      	ite	eq
 800632a:	2301      	moveq	r3, #1
 800632c:	2300      	movne	r3, #0
 800632e:	b2db      	uxtb	r3, r3
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <LL_USART_SetStopBitsLength>:
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	611a      	str	r2, [r3, #16]
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <LL_USART_SetHWFlowCtrl>:
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	615a      	str	r2, [r3, #20]
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <LL_USART_SetBaudRate>:
{
 8006388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800638c:	b0c0      	sub	sp, #256	@ 0x100
 800638e:	af00      	add	r7, sp, #0
 8006390:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006394:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8006398:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800639c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a8:	f040 810c 	bne.w	80065c4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80063ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063be:	4622      	mov	r2, r4
 80063c0:	462b      	mov	r3, r5
 80063c2:	1891      	adds	r1, r2, r2
 80063c4:	6639      	str	r1, [r7, #96]	@ 0x60
 80063c6:	415b      	adcs	r3, r3
 80063c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80063ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80063ce:	4621      	mov	r1, r4
 80063d0:	eb12 0801 	adds.w	r8, r2, r1
 80063d4:	4629      	mov	r1, r5
 80063d6:	eb43 0901 	adc.w	r9, r3, r1
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ee:	4690      	mov	r8, r2
 80063f0:	4699      	mov	r9, r3
 80063f2:	4623      	mov	r3, r4
 80063f4:	eb18 0303 	adds.w	r3, r8, r3
 80063f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063fc:	462b      	mov	r3, r5
 80063fe:	eb49 0303 	adc.w	r3, r9, r3
 8006402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006406:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800640a:	2200      	movs	r2, #0
 800640c:	469a      	mov	sl, r3
 800640e:	4693      	mov	fp, r2
 8006410:	eb1a 030a 	adds.w	r3, sl, sl
 8006414:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006416:	eb4b 030b 	adc.w	r3, fp, fp
 800641a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800641c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006424:	f7fa fc40 	bl	8000ca8 <__aeabi_uldivmod>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4b64      	ldr	r3, [pc, #400]	@ (80065c0 <LL_USART_SetBaudRate+0x238>)
 800642e:	fba3 2302 	umull	r2, r3, r3, r2
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	b29b      	uxth	r3, r3
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	b29c      	uxth	r4, r3
 800643a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800643e:	2200      	movs	r2, #0
 8006440:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006444:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006448:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800644c:	4642      	mov	r2, r8
 800644e:	464b      	mov	r3, r9
 8006450:	1891      	adds	r1, r2, r2
 8006452:	6539      	str	r1, [r7, #80]	@ 0x50
 8006454:	415b      	adcs	r3, r3
 8006456:	657b      	str	r3, [r7, #84]	@ 0x54
 8006458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800645c:	4641      	mov	r1, r8
 800645e:	1851      	adds	r1, r2, r1
 8006460:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006462:	4649      	mov	r1, r9
 8006464:	414b      	adcs	r3, r1
 8006466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8006474:	4659      	mov	r1, fp
 8006476:	00cb      	lsls	r3, r1, #3
 8006478:	4651      	mov	r1, sl
 800647a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647e:	4651      	mov	r1, sl
 8006480:	00ca      	lsls	r2, r1, #3
 8006482:	4610      	mov	r0, r2
 8006484:	4619      	mov	r1, r3
 8006486:	4603      	mov	r3, r0
 8006488:	4642      	mov	r2, r8
 800648a:	189b      	adds	r3, r3, r2
 800648c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006490:	464b      	mov	r3, r9
 8006492:	460a      	mov	r2, r1
 8006494:	eb42 0303 	adc.w	r3, r2, r3
 8006498:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800649c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064a6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80064aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80064ae:	460b      	mov	r3, r1
 80064b0:	18db      	adds	r3, r3, r3
 80064b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80064b4:	4613      	mov	r3, r2
 80064b6:	eb42 0303 	adc.w	r3, r2, r3
 80064ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80064bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064c0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80064c4:	f7fa fbf0 	bl	8000ca8 <__aeabi_uldivmod>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4611      	mov	r1, r2
 80064ce:	4b3c      	ldr	r3, [pc, #240]	@ (80065c0 <LL_USART_SetBaudRate+0x238>)
 80064d0:	fba3 2301 	umull	r2, r3, r3, r1
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	2264      	movs	r2, #100	@ 0x64
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
 80064dc:	1acb      	subs	r3, r1, r3
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064e4:	4b36      	ldr	r3, [pc, #216]	@ (80065c0 <LL_USART_SetBaudRate+0x238>)
 80064e6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	4423      	add	r3, r4
 80064fa:	b29c      	uxth	r4, r3
 80064fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006500:	2200      	movs	r2, #0
 8006502:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006506:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800650a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800650e:	4642      	mov	r2, r8
 8006510:	464b      	mov	r3, r9
 8006512:	1891      	adds	r1, r2, r2
 8006514:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006516:	415b      	adcs	r3, r3
 8006518:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800651a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800651e:	4641      	mov	r1, r8
 8006520:	1851      	adds	r1, r2, r1
 8006522:	6339      	str	r1, [r7, #48]	@ 0x30
 8006524:	4649      	mov	r1, r9
 8006526:	414b      	adcs	r3, r1
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006536:	4659      	mov	r1, fp
 8006538:	00cb      	lsls	r3, r1, #3
 800653a:	4651      	mov	r1, sl
 800653c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006540:	4651      	mov	r1, sl
 8006542:	00ca      	lsls	r2, r1, #3
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	4603      	mov	r3, r0
 800654a:	4642      	mov	r2, r8
 800654c:	189b      	adds	r3, r3, r2
 800654e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006552:	464b      	mov	r3, r9
 8006554:	460a      	mov	r2, r1
 8006556:	eb42 0303 	adc.w	r3, r2, r3
 800655a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800655e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006562:	2200      	movs	r2, #0
 8006564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006568:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800656c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006570:	460b      	mov	r3, r1
 8006572:	18db      	adds	r3, r3, r3
 8006574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006576:	4613      	mov	r3, r2
 8006578:	eb42 0303 	adc.w	r3, r2, r3
 800657c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800657e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006582:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8006586:	f7fa fb8f 	bl	8000ca8 <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4b0c      	ldr	r3, [pc, #48]	@ (80065c0 <LL_USART_SetBaudRate+0x238>)
 8006590:	fba3 1302 	umull	r1, r3, r3, r2
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	2164      	movs	r1, #100	@ 0x64
 8006598:	fb01 f303 	mul.w	r3, r1, r3
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	3332      	adds	r3, #50	@ 0x32
 80065a2:	4a07      	ldr	r2, [pc, #28]	@ (80065c0 <LL_USART_SetBaudRate+0x238>)
 80065a4:	fba2 2303 	umull	r2, r3, r2, r3
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	4423      	add	r3, r4
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065bc:	609a      	str	r2, [r3, #8]
}
 80065be:	e108      	b.n	80067d2 <LL_USART_SetBaudRate+0x44a>
 80065c0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80065c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065ce:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065d2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80065d6:	4642      	mov	r2, r8
 80065d8:	464b      	mov	r3, r9
 80065da:	1891      	adds	r1, r2, r2
 80065dc:	6239      	str	r1, [r7, #32]
 80065de:	415b      	adcs	r3, r3
 80065e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065e6:	4641      	mov	r1, r8
 80065e8:	1854      	adds	r4, r2, r1
 80065ea:	4649      	mov	r1, r9
 80065ec:	eb43 0501 	adc.w	r5, r3, r1
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	00eb      	lsls	r3, r5, #3
 80065fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065fe:	00e2      	lsls	r2, r4, #3
 8006600:	4614      	mov	r4, r2
 8006602:	461d      	mov	r5, r3
 8006604:	4643      	mov	r3, r8
 8006606:	18e3      	adds	r3, r4, r3
 8006608:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800660c:	464b      	mov	r3, r9
 800660e:	eb45 0303 	adc.w	r3, r5, r3
 8006612:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006616:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800661a:	2200      	movs	r2, #0
 800661c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006620:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8006630:	4629      	mov	r1, r5
 8006632:	008b      	lsls	r3, r1, #2
 8006634:	4621      	mov	r1, r4
 8006636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663a:	4621      	mov	r1, r4
 800663c:	008a      	lsls	r2, r1, #2
 800663e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8006642:	f7fa fb31 	bl	8000ca8 <__aeabi_uldivmod>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4b65      	ldr	r3, [pc, #404]	@ (80067e0 <LL_USART_SetBaudRate+0x458>)
 800664c:	fba3 2302 	umull	r2, r3, r3, r2
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	b29b      	uxth	r3, r3
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	b29c      	uxth	r4, r3
 8006658:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800665c:	2200      	movs	r2, #0
 800665e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006662:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006666:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800666a:	4642      	mov	r2, r8
 800666c:	464b      	mov	r3, r9
 800666e:	1891      	adds	r1, r2, r2
 8006670:	61b9      	str	r1, [r7, #24]
 8006672:	415b      	adcs	r3, r3
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800667a:	4641      	mov	r1, r8
 800667c:	1851      	adds	r1, r2, r1
 800667e:	6139      	str	r1, [r7, #16]
 8006680:	4649      	mov	r1, r9
 8006682:	414b      	adcs	r3, r1
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006692:	4659      	mov	r1, fp
 8006694:	00cb      	lsls	r3, r1, #3
 8006696:	4651      	mov	r1, sl
 8006698:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800669c:	4651      	mov	r1, sl
 800669e:	00ca      	lsls	r2, r1, #3
 80066a0:	4610      	mov	r0, r2
 80066a2:	4619      	mov	r1, r3
 80066a4:	4603      	mov	r3, r0
 80066a6:	4642      	mov	r2, r8
 80066a8:	189b      	adds	r3, r3, r2
 80066aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066ae:	464b      	mov	r3, r9
 80066b0:	460a      	mov	r2, r1
 80066b2:	eb42 0303 	adc.w	r3, r2, r3
 80066b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066c4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80066d4:	4649      	mov	r1, r9
 80066d6:	008b      	lsls	r3, r1, #2
 80066d8:	4641      	mov	r1, r8
 80066da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066de:	4641      	mov	r1, r8
 80066e0:	008a      	lsls	r2, r1, #2
 80066e2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80066e6:	f7fa fadf 	bl	8000ca8 <__aeabi_uldivmod>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4611      	mov	r1, r2
 80066f0:	4b3b      	ldr	r3, [pc, #236]	@ (80067e0 <LL_USART_SetBaudRate+0x458>)
 80066f2:	fba3 2301 	umull	r2, r3, r3, r1
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	2264      	movs	r2, #100	@ 0x64
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
 80066fe:	1acb      	subs	r3, r1, r3
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	3332      	adds	r3, #50	@ 0x32
 8006704:	4a36      	ldr	r2, [pc, #216]	@ (80067e0 <LL_USART_SetBaudRate+0x458>)
 8006706:	fba2 2303 	umull	r2, r3, r2, r3
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	b29b      	uxth	r3, r3
 800670e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006712:	b29b      	uxth	r3, r3
 8006714:	4423      	add	r3, r4
 8006716:	b29c      	uxth	r4, r3
 8006718:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800671c:	2200      	movs	r2, #0
 800671e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006720:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006722:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006726:	4642      	mov	r2, r8
 8006728:	464b      	mov	r3, r9
 800672a:	1891      	adds	r1, r2, r2
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	415b      	adcs	r3, r3
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006736:	4641      	mov	r1, r8
 8006738:	1851      	adds	r1, r2, r1
 800673a:	6039      	str	r1, [r7, #0]
 800673c:	4649      	mov	r1, r9
 800673e:	414b      	adcs	r3, r1
 8006740:	607b      	str	r3, [r7, #4]
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800674e:	4659      	mov	r1, fp
 8006750:	00cb      	lsls	r3, r1, #3
 8006752:	4651      	mov	r1, sl
 8006754:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006758:	4651      	mov	r1, sl
 800675a:	00ca      	lsls	r2, r1, #3
 800675c:	4610      	mov	r0, r2
 800675e:	4619      	mov	r1, r3
 8006760:	4603      	mov	r3, r0
 8006762:	4642      	mov	r2, r8
 8006764:	189b      	adds	r3, r3, r2
 8006766:	673b      	str	r3, [r7, #112]	@ 0x70
 8006768:	464b      	mov	r3, r9
 800676a:	460a      	mov	r2, r1
 800676c:	eb42 0303 	adc.w	r3, r2, r3
 8006770:	677b      	str	r3, [r7, #116]	@ 0x74
 8006772:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006776:	2200      	movs	r2, #0
 8006778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800677a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8006788:	4649      	mov	r1, r9
 800678a:	008b      	lsls	r3, r1, #2
 800678c:	4641      	mov	r1, r8
 800678e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006792:	4641      	mov	r1, r8
 8006794:	008a      	lsls	r2, r1, #2
 8006796:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800679a:	f7fa fa85 	bl	8000ca8 <__aeabi_uldivmod>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4b0f      	ldr	r3, [pc, #60]	@ (80067e0 <LL_USART_SetBaudRate+0x458>)
 80067a4:	fba3 1302 	umull	r1, r3, r3, r2
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	2164      	movs	r1, #100	@ 0x64
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	3332      	adds	r3, #50	@ 0x32
 80067b6:	4a0a      	ldr	r2, [pc, #40]	@ (80067e0 <LL_USART_SetBaudRate+0x458>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	b29b      	uxth	r3, r3
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	4423      	add	r3, r4
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067d0:	609a      	str	r2, [r3, #8]
}
 80067d2:	bf00      	nop
 80067d4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067d8:	46bd      	mov	sp, r7
 80067da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067de:	bf00      	nop
 80067e0:	51eb851f 	.word	0x51eb851f

080067e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff fd8c 	bl	8006314 <LL_USART_IsEnabled>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d15e      	bne.n	80068c0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800680a:	f023 030c 	bic.w	r3, r3, #12
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	6851      	ldr	r1, [r2, #4]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	68d2      	ldr	r2, [r2, #12]
 8006816:	4311      	orrs	r1, r2
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	6912      	ldr	r2, [r2, #16]
 800681c:	4311      	orrs	r1, r2
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	6992      	ldr	r2, [r2, #24]
 8006822:	430a      	orrs	r2, r1
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff fd83 	bl	800633c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fd90 	bl	8006362 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006842:	f107 0308 	add.w	r3, r7, #8
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff fc9a 	bl	8006180 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a1f      	ldr	r2, [pc, #124]	@ (80068cc <LL_USART_Init+0xe8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d102      	bne.n	800685a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	61bb      	str	r3, [r7, #24]
 8006858:	e021      	b.n	800689e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a1c      	ldr	r2, [pc, #112]	@ (80068d0 <LL_USART_Init+0xec>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d102      	bne.n	8006868 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	e01a      	b.n	800689e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a1a      	ldr	r2, [pc, #104]	@ (80068d4 <LL_USART_Init+0xf0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d102      	bne.n	8006876 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	e013      	b.n	800689e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a17      	ldr	r2, [pc, #92]	@ (80068d8 <LL_USART_Init+0xf4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d102      	bne.n	8006884 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e00c      	b.n	800689e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a15      	ldr	r2, [pc, #84]	@ (80068dc <LL_USART_Init+0xf8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d102      	bne.n	8006892 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	e005      	b.n	800689e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a12      	ldr	r2, [pc, #72]	@ (80068e0 <LL_USART_Init+0xfc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d101      	bne.n	800689e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d009      	beq.n	80068c0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80068ac:	2300      	movs	r3, #0
 80068ae:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80068b8:	69b9      	ldr	r1, [r7, #24]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff fd64 	bl	8006388 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80068c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40011000 	.word	0x40011000
 80068d0:	40004400 	.word	0x40004400
 80068d4:	40004800 	.word	0x40004800
 80068d8:	40011400 	.word	0x40011400
 80068dc:	40004c00 	.word	0x40004c00
 80068e0:	40005000 	.word	0x40005000

080068e4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f6:	4a07      	ldr	r2, [pc, #28]	@ (8006914 <LL_InitTick+0x30>)
 80068f8:	3b01      	subs	r3, #1
 80068fa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80068fc:	4b05      	ldr	r3, [pc, #20]	@ (8006914 <LL_InitTick+0x30>)
 80068fe:	2200      	movs	r2, #0
 8006900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006902:	4b04      	ldr	r3, [pc, #16]	@ (8006914 <LL_InitTick+0x30>)
 8006904:	2205      	movs	r2, #5
 8006906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	e000e010 	.word	0xe000e010

08006918 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8006920:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ffdd 	bl	80068e4 <LL_InitTick>
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800693c:	4a04      	ldr	r2, [pc, #16]	@ (8006950 <LL_SetSystemCoreClock+0x1c>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6013      	str	r3, [r2, #0]
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	20000324 	.word	0x20000324

08006954 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 8006958:	4b0d      	ldr	r3, [pc, #52]	@ (8006990 <SCH_Initialize+0x3c>)
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <SCH_Initialize+0x40>)
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 8006964:	4b0c      	ldr	r3, [pc, #48]	@ (8006998 <SCH_Initialize+0x44>)
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 800696a:	2278      	movs	r2, #120	@ 0x78
 800696c:	2100      	movs	r1, #0
 800696e:	480b      	ldr	r0, [pc, #44]	@ (800699c <SCH_Initialize+0x48>)
 8006970:	f002 fc23 	bl	80091ba <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8006974:	2278      	movs	r2, #120	@ 0x78
 8006976:	2100      	movs	r1, #0
 8006978:	4809      	ldr	r0, [pc, #36]	@ (80069a0 <SCH_Initialize+0x4c>)
 800697a:	f002 fc1e 	bl	80091ba <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 800697e:	2210      	movs	r2, #16
 8006980:	2100      	movs	r1, #0
 8006982:	4808      	ldr	r0, [pc, #32]	@ (80069a4 <SCH_Initialize+0x50>)
 8006984:	f002 fc19 	bl	80091ba <memset>

    // Initialize Scheduler context
  systick_timer_init();
 8006988:	f7fa fea0 	bl	80016cc <systick_timer_init>
}
 800698c:	bf00      	nop
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20002a38 	.word	0x20002a38
 8006994:	200029b8 	.word	0x200029b8
 8006998:	20002a34 	.word	0x20002a34
 800699c:	20002940 	.word	0x20002940
 80069a0:	200029bc 	.word	0x200029bc
 80069a4:	20002a3c 	.word	0x20002a3c

080069a8 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	4603      	mov	r3, r0
 80069b0:	6039      	str	r1, [r7, #0]
 80069b2:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d804      	bhi.n	80069c4 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	4904      	ldr	r1, [pc, #16]	@ (80069d0 <SCH_TIM_Start+0x28>)
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	20002a3c 	.word	0x20002a3c

080069d4 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	4a06      	ldr	r2, [pc, #24]	@ (80069fc <SCH_TIM_HasCompleted+0x28>)
 80069e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bf0c      	ite	eq
 80069ea:	2301      	moveq	r3, #1
 80069ec:	2300      	movne	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	20002a3c 	.word	0x20002a3c

08006a00 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d028      	beq.n	8006a66 <SCH_TASK_CreateTask+0x66>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d025      	beq.n	8006a66 <SCH_TASK_CreateTask+0x66>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 8006a1a:	4b16      	ldr	r3, [pc, #88]	@ (8006a74 <SCH_TASK_CreateTask+0x74>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d821      	bhi.n	8006a66 <SCH_TASK_CreateTask+0x66>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 8006a22:	4b14      	ldr	r3, [pc, #80]	@ (8006a74 <SCH_TASK_CreateTask+0x74>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	4613      	mov	r3, r2
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4a11      	ldr	r2, [pc, #68]	@ (8006a78 <SCH_TASK_CreateTask+0x78>)
 8006a32:	4413      	add	r3, r2
 8006a34:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = RESET;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2200      	movs	r2, #0
 8006a46:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 8006a4e:	4b09      	ldr	r3, [pc, #36]	@ (8006a74 <SCH_TASK_CreateTask+0x74>)
 8006a50:	781a      	ldrb	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 8006a56:	4b07      	ldr	r3, [pc, #28]	@ (8006a74 <SCH_TASK_CreateTask+0x74>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <SCH_TASK_CreateTask+0x74>)
 8006a60:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	200029b8 	.word	0x200029b8
 8006a78:	20002940 	.word	0x20002940

08006a7c <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 8006a82:	4b42      	ldr	r3, [pc, #264]	@ (8006b8c <SCH_RunSystemTickTimer+0x110>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	4a40      	ldr	r2, [pc, #256]	@ (8006b8c <SCH_RunSystemTickTimer+0x110>)
 8006a8a:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]
 8006a90:	e025      	b.n	8006ade <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8006a92:	7bfa      	ldrb	r2, [r7, #15]
 8006a94:	4613      	mov	r3, r2
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8006b90 <SCH_RunSystemTickTimer+0x114>)
 8006a9e:	4413      	add	r3, r2
 8006aa0:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d115      	bne.n	8006ad8 <SCH_RunSystemTickTimer+0x5c>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d111      	bne.n	8006ad8 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	1c5a      	adds	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d305      	bcc.n	8006ad8 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	3301      	adds	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
 8006ade:	4b2d      	ldr	r3, [pc, #180]	@ (8006b94 <SCH_RunSystemTickTimer+0x118>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	7bfa      	ldrb	r2, [r7, #15]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d3d4      	bcc.n	8006a92 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73bb      	strb	r3, [r7, #14]
 8006aec:	e02b      	b.n	8006b46 <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 8006aee:	7bba      	ldrb	r2, [r7, #14]
 8006af0:	4613      	mov	r3, r2
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4a27      	ldr	r2, [pc, #156]	@ (8006b98 <SCH_RunSystemTickTimer+0x11c>)
 8006afa:	4413      	add	r3, r2
 8006afc:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d11c      	bne.n	8006b40 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d310      	bcc.n	8006b40 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2201      	movs	r2, #1
 8006b22:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2200      	movs	r2, #0
 8006b28:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	3301      	adds	r3, #1
 8006b44:	73bb      	strb	r3, [r7, #14]
 8006b46:	4b15      	ldr	r3, [pc, #84]	@ (8006b9c <SCH_RunSystemTickTimer+0x120>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	7bba      	ldrb	r2, [r7, #14]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d3ce      	bcc.n	8006aee <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8006b50:	2300      	movs	r3, #0
 8006b52:	73bb      	strb	r3, [r7, #14]
 8006b54:	e010      	b.n	8006b78 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	4a11      	ldr	r2, [pc, #68]	@ (8006ba0 <SCH_RunSystemTickTimer+0x124>)
 8006b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <SCH_RunSystemTickTimer+0xf6>
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	4a0e      	ldr	r2, [pc, #56]	@ (8006ba0 <SCH_RunSystemTickTimer+0x124>)
 8006b66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006b6a:	3a01      	subs	r2, #1
 8006b6c:	490c      	ldr	r1, [pc, #48]	@ (8006ba0 <SCH_RunSystemTickTimer+0x124>)
 8006b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	3301      	adds	r3, #1
 8006b76:	73bb      	strb	r3, [r7, #14]
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d9eb      	bls.n	8006b56 <SCH_RunSystemTickTimer+0xda>
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20002a38 	.word	0x20002a38
 8006b90:	20002940 	.word	0x20002940
 8006b94:	200029b8 	.word	0x200029b8
 8006b98:	200029bc 	.word	0x200029bc
 8006b9c:	20002a34 	.word	0x20002a34
 8006ba0:	20002a3c 	.word	0x20002a3c

08006ba4 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8006ba8:	f7fa fd80 	bl	80016ac <systick_timer_start>
}
 8006bac:	bf00      	nop
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]
 8006bba:	e01e      	b.n	8006bfa <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8006bbc:	7bfa      	ldrb	r2, [r7, #15]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4a23      	ldr	r2, [pc, #140]	@ (8006c54 <SCH_HandleScheduledTask+0xa4>)
 8006bc8:	4413      	add	r3, r2
 8006bca:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	885b      	ldrh	r3, [r3, #2]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d10f      	bne.n	8006bf4 <SCH_HandleScheduledTask+0x44>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d10b      	bne.n	8006bf4 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	73fb      	strb	r3, [r7, #15]
 8006bfa:	4b17      	ldr	r3, [pc, #92]	@ (8006c58 <SCH_HandleScheduledTask+0xa8>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	7bfa      	ldrb	r2, [r7, #15]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d3db      	bcc.n	8006bbc <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8006c04:	2300      	movs	r3, #0
 8006c06:	73bb      	strb	r3, [r7, #14]
 8006c08:	e01a      	b.n	8006c40 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 8006c0a:	7bba      	ldrb	r2, [r7, #14]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4a11      	ldr	r2, [pc, #68]	@ (8006c5c <SCH_HandleScheduledTask+0xac>)
 8006c16:	4413      	add	r3, r2
 8006c18:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	885b      	ldrh	r3, [r3, #2]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d10b      	bne.n	8006c3a <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2200      	movs	r2, #0
 8006c26:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	73bb      	strb	r3, [r7, #14]
 8006c40:	4b07      	ldr	r3, [pc, #28]	@ (8006c60 <SCH_HandleScheduledTask+0xb0>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	7bba      	ldrb	r2, [r7, #14]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d3df      	bcc.n	8006c0a <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8006c4a:	bf00      	nop
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	20002940 	.word	0x20002940
 8006c58:	200029b8 	.word	0x200029b8
 8006c5c:	200029bc 	.word	0x200029bc
 8006c60:	20002a34 	.word	0x20002a34

08006c64 <SCH_Delay>:
  * @brief  Function to create a delay without affecting other tasks
  * @param  uint32_t delayInMs - delay time in milliseconds
  * @retval None
  *****************************************************************************/
void SCH_Delay(uint32_t delayInMs)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
    // Start the delay timer
    SCH_TIM_Start(SCH_TIM_DELAY, delayInMs);
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	2002      	movs	r0, #2
 8006c70:	f7ff fe9a 	bl	80069a8 <SCH_TIM_Start>

    // Wait until the delay timer completes
    while(!SCH_TIM_HasCompleted(SCH_TIM_DELAY));
 8006c74:	bf00      	nop
 8006c76:	2002      	movs	r0, #2
 8006c78:	f7ff feac 	bl	80069d4 <SCH_TIM_HasCompleted>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0f9      	beq.n	8006c76 <SCH_Delay+0x12>
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint8_t size)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	6039      	str	r1, [r7, #0]
 8006c96:	80fb      	strh	r3, [r7, #6]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	717b      	strb	r3, [r7, #5]
    uint8_t x;
    uint16_t crc = initial_value;
 8006c9c:	88fb      	ldrh	r3, [r7, #6]
 8006c9e:	81fb      	strh	r3, [r7, #14]

    while(size--)
 8006ca0:	e023      	b.n	8006cea <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 8006ca2:	89fb      	ldrh	r3, [r7, #14]
 8006ca4:	0a1b      	lsrs	r3, r3, #8
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	1c59      	adds	r1, r3, #1
 8006cae:	6039      	str	r1, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	4053      	eors	r3, r2
 8006cb4:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 8006cb6:	7b7b      	ldrb	r3, [r7, #13]
 8006cb8:	091b      	lsrs	r3, r3, #4
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	7b7b      	ldrb	r3, [r7, #13]
 8006cbe:	4053      	eors	r3, r2
 8006cc0:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 8006cc2:	89fb      	ldrh	r3, [r7, #14]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	b21a      	sxth	r2, r3
 8006cc8:	7b7b      	ldrb	r3, [r7, #13]
 8006cca:	b21b      	sxth	r3, r3
 8006ccc:	031b      	lsls	r3, r3, #12
 8006cce:	b21b      	sxth	r3, r3
 8006cd0:	4053      	eors	r3, r2
 8006cd2:	b21a      	sxth	r2, r3
 8006cd4:	7b7b      	ldrb	r3, [r7, #13]
 8006cd6:	b21b      	sxth	r3, r3
 8006cd8:	015b      	lsls	r3, r3, #5
 8006cda:	b21b      	sxth	r3, r3
 8006cdc:	4053      	eors	r3, r2
 8006cde:	b21a      	sxth	r2, r3
 8006ce0:	7b7b      	ldrb	r3, [r7, #13]
 8006ce2:	b21b      	sxth	r3, r3
 8006ce4:	4053      	eors	r3, r2
 8006ce6:	b21b      	sxth	r3, r3
 8006ce8:	81fb      	strh	r3, [r7, #14]
    while(size--)
 8006cea:	797b      	ldrb	r3, [r7, #5]
 8006cec:	1e5a      	subs	r2, r3, #1
 8006cee:	717a      	strb	r2, [r7, #5]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1d6      	bne.n	8006ca2 <crc16_CCITT+0x16>
    }

    return crc;
 8006cf4:	89fb      	ldrh	r3, [r7, #14]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <fsp_init>:
uint8_t fsp_my_adr;

volatile uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 8006d0e:	4a06      	ldr	r2, [pc, #24]	@ (8006d28 <fsp_init+0x24>)
 8006d10:	79fb      	ldrb	r3, [r7, #7]
 8006d12:	7013      	strb	r3, [r2, #0]

    fsp_decode_pos = 0;
 8006d14:	4b05      	ldr	r3, [pc, #20]	@ (8006d2c <fsp_init+0x28>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	20002a4c 	.word	0x20002a4c
 8006d2c:	20002a4d 	.word	0x20002a4d

08006d30 <fsp_gen_cmd_pkt>:
        fsp_gen_pkt((void*)0, data, data_len, dst_adr, FSP_PKT_TYPE_DATA, fsp);
    }
}

void fsp_gen_cmd_pkt(uint8_t cmd, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	4603      	mov	r3, r0
 8006d3a:	71fb      	strb	r3, [r7, #7]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	71bb      	strb	r3, [r7, #6]
 8006d40:	4613      	mov	r3, r2
 8006d42:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 8006d44:	797b      	ldrb	r3, [r7, #5]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d10b      	bne.n	8006d62 <fsp_gen_cmd_pkt+0x32>
    {
        fsp_gen_pkt(&cmd,(void*)0, 0, dst_adr, FSP_PKT_TYPE_CMD_WITH_ACK, fsp);
 8006d4a:	79ba      	ldrb	r2, [r7, #6]
 8006d4c:	1df8      	adds	r0, r7, #7
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	2304      	movs	r3, #4
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	4613      	mov	r3, r2
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	f000 f83a 	bl	8006dd4 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
    }
}
 8006d60:	e00a      	b.n	8006d78 <fsp_gen_cmd_pkt+0x48>
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
 8006d62:	79ba      	ldrb	r2, [r7, #6]
 8006d64:	1df8      	adds	r0, r7, #7
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	2200      	movs	r2, #0
 8006d72:	2100      	movs	r1, #0
 8006d74:	f000 f82e 	bl	8006dd4 <fsp_gen_pkt>
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <fsp_gen_cmd_w_data_pkt>:

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	6039      	str	r1, [r7, #0]
 8006d88:	4611      	mov	r1, r2
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	71fb      	strb	r3, [r7, #7]
 8006d90:	460b      	mov	r3, r1
 8006d92:	71bb      	strb	r3, [r7, #6]
 8006d94:	4613      	mov	r3, r2
 8006d96:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 8006d98:	7c3b      	ldrb	r3, [r7, #16]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d10b      	bne.n	8006db6 <fsp_gen_cmd_w_data_pkt+0x36>
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 8006d9e:	7979      	ldrb	r1, [r7, #5]
 8006da0:	79ba      	ldrb	r2, [r7, #6]
 8006da2:	1df8      	adds	r0, r7, #7
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	9301      	str	r3, [sp, #4]
 8006da8:	2308      	movs	r3, #8
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	460b      	mov	r3, r1
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	f000 f810 	bl	8006dd4 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
    }
}
 8006db4:	e00a      	b.n	8006dcc <fsp_gen_cmd_w_data_pkt+0x4c>
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 8006db6:	7979      	ldrb	r1, [r7, #5]
 8006db8:	79ba      	ldrb	r2, [r7, #6]
 8006dba:	1df8      	adds	r0, r7, #7
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	2307      	movs	r3, #7
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	f000 f804 	bl	8006dd4 <fsp_gen_pkt>
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <fsp_gen_pkt>:
    fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}


void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	4611      	mov	r1, r2
 8006de0:	461a      	mov	r2, r3
 8006de2:	460b      	mov	r3, r1
 8006de4:	71fb      	strb	r3, [r7, #7]
 8006de6:	4613      	mov	r3, r2
 8006de8:	71bb      	strb	r3, [r7, #6]
    fsp->sod        = FSP_PKT_SOD;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	22ca      	movs	r2, #202	@ 0xca
 8006dee:	701a      	strb	r2, [r3, #0]
    fsp->src_adr    = fsp_my_adr;
 8006df0:	4b25      	ldr	r3, [pc, #148]	@ (8006e88 <fsp_gen_pkt+0xb4>)
 8006df2:	781a      	ldrb	r2, [r3, #0]
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	705a      	strb	r2, [r3, #1]
    fsp->dst_adr    = dst_adr;
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	79ba      	ldrb	r2, [r7, #6]
 8006dfc:	709a      	strb	r2, [r3, #2]
    fsp->length     = payload_len;
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	79fa      	ldrb	r2, [r7, #7]
 8006e02:	70da      	strb	r2, [r3, #3]
    fsp->type       = type;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006e0a:	711a      	strb	r2, [r3, #4]

    uint8_t i = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	75fb      	strb	r3, [r7, #23]
    uint8_t j = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	75bb      	strb	r3, [r7, #22]

    // Copy cmd payload
    if (cmd != NULL) {
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00e      	beq.n	8006e38 <fsp_gen_pkt+0x64>
        fsp->length++; // length + byte cmd
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	78db      	ldrb	r3, [r3, #3]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	70da      	strb	r2, [r3, #3]
        fsp->payload[j++] = *cmd;
 8006e26:	7dbb      	ldrb	r3, [r7, #22]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	75ba      	strb	r2, [r7, #22]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	781a      	ldrb	r2, [r3, #0]
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	440b      	add	r3, r1
 8006e36:	715a      	strb	r2, [r3, #5]
    }

    // Copy payload fsp->payload
    for(i=0; i<payload_len; i++)
 8006e38:	2300      	movs	r3, #0
 8006e3a:	75fb      	strb	r3, [r7, #23]
 8006e3c:	e00d      	b.n	8006e5a <fsp_gen_pkt+0x86>
    {
        fsp->payload[j++] = payload[i];
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	441a      	add	r2, r3
 8006e44:	7dbb      	ldrb	r3, [r7, #22]
 8006e46:	1c59      	adds	r1, r3, #1
 8006e48:	75b9      	strb	r1, [r7, #22]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	7812      	ldrb	r2, [r2, #0]
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	440b      	add	r3, r1
 8006e52:	715a      	strb	r2, [r3, #5]
    for(i=0; i<payload_len; i++)
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	3301      	adds	r3, #1
 8006e58:	75fb      	strb	r3, [r7, #23]
 8006e5a:	7dfa      	ldrb	r2, [r7, #23]
 8006e5c:	79fb      	ldrb	r3, [r7, #7]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d3ed      	bcc.n	8006e3e <fsp_gen_pkt+0x6a>
    }

    fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	1c59      	adds	r1, r3, #1
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	78db      	ldrb	r3, [r3, #3]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	461a      	mov	r2, r3
 8006e70:	2000      	movs	r0, #0
 8006e72:	f7ff ff0b 	bl	8006c8c <crc16_CCITT>
 8006e76:	4603      	mov	r3, r0
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

}
 8006e80:	bf00      	nop
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20002a4c 	.word	0x20002a4c

08006e8c <frame_encode>:


void frame_encode(fsp_packet_t *fsp, uint8_t *frame, uint8_t *frame_len)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b0c8      	sub	sp, #288	@ 0x120
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006e96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006e9a:	6018      	str	r0, [r3, #0]
 8006e9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ea0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006ea4:	6019      	str	r1, [r3, #0]
 8006ea6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006eaa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006eae:	601a      	str	r2, [r3, #0]
    //frame
    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t encoded_length = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    encoded_frame[encoded_length++] = fsp->sod;
 8006eb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ec6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	7819      	ldrb	r1, [r3, #0]
 8006ece:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ed2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006ed6:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->src_adr;
 8006ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ee8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	7859      	ldrb	r1, [r3, #1]
 8006ef0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ef4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006ef8:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->dst_adr;
 8006efa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006f04:	461a      	mov	r2, r3
 8006f06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	7899      	ldrb	r1, [r3, #2]
 8006f12:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006f1a:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->length;
 8006f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006f26:	461a      	mov	r2, r3
 8006f28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f2c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	78d9      	ldrb	r1, [r3, #3]
 8006f34:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f38:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006f3c:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->type;
 8006f3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f4e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	7919      	ldrb	r1, [r3, #4]
 8006f56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006f5e:	5499      	strb	r1, [r3, r2]

    for(int i=0; i<fsp->length; i++)
 8006f60:	2300      	movs	r3, #0
 8006f62:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006f66:	e088      	b.n	800707a <frame_encode+0x1ee>
    {
        if (fsp->payload[i] == FSP_PKT_SOD) {
 8006f68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f6c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006f76:	4413      	add	r3, r2
 8006f78:	3305      	adds	r3, #5
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2bca      	cmp	r3, #202	@ 0xca
 8006f7e:	d118      	bne.n	8006fb2 <frame_encode+0x126>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8006f80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006f90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006f94:	21bd      	movs	r1, #189	@ 0xbd
 8006f96:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 8006f98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006fa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006fac:	21dc      	movs	r1, #220	@ 0xdc
 8006fae:	5499      	strb	r1, [r3, r2]
 8006fb0:	e05e      	b.n	8007070 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_EOF) {
 8006fb2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006fb6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006fc0:	4413      	add	r3, r2
 8006fc2:	3305      	adds	r3, #5
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2bef      	cmp	r3, #239	@ 0xef
 8006fc8:	d118      	bne.n	8006ffc <frame_encode+0x170>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8006fca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006fda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006fde:	21bd      	movs	r1, #189	@ 0xbd
 8006fe0:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 8006fe2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006fec:	461a      	mov	r2, r3
 8006fee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006ff2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006ff6:	21de      	movs	r1, #222	@ 0xde
 8006ff8:	5499      	strb	r1, [r3, r2]
 8006ffa:	e039      	b.n	8007070 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_ESC) {
 8006ffc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007000:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800700a:	4413      	add	r3, r2
 800700c:	3305      	adds	r3, #5
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2bbd      	cmp	r3, #189	@ 0xbd
 8007012:	d118      	bne.n	8007046 <frame_encode+0x1ba>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8007014:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800701e:	461a      	mov	r2, r3
 8007020:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007024:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007028:	21bd      	movs	r1, #189	@ 0xbd
 800702a:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800702c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8007036:	461a      	mov	r2, r3
 8007038:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800703c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007040:	21db      	movs	r1, #219	@ 0xdb
 8007042:	5499      	strb	r1, [r3, r2]
 8007044:	e014      	b.n	8007070 <frame_encode+0x1e4>
        } else {
            encoded_frame[encoded_length++] = fsp->payload[i];
 8007046:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8007050:	4619      	mov	r1, r3
 8007052:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007056:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007060:	4413      	add	r3, r2
 8007062:	3305      	adds	r3, #5
 8007064:	781a      	ldrb	r2, [r3, #0]
 8007066:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800706a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800706e:	545a      	strb	r2, [r3, r1]
    for(int i=0; i<fsp->length; i++)
 8007070:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007074:	3301      	adds	r3, #1
 8007076:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800707a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800707e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	78db      	ldrb	r3, [r3, #3]
 8007086:	461a      	mov	r2, r3
 8007088:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800708c:	4293      	cmp	r3, r2
 800708e:	f6ff af6b 	blt.w	8006f68 <frame_encode+0xdc>
        }
    }

    // CRC16
    uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 8007092:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007096:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 80070a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80070ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 80070b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

    if (crc_msb == FSP_PKT_SOD) {
 80070ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070be:	2bca      	cmp	r3, #202	@ 0xca
 80070c0:	d118      	bne.n	80070f4 <frame_encode+0x268>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 80070c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80070cc:	461a      	mov	r2, r3
 80070ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80070d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80070d6:	21bd      	movs	r1, #189	@ 0xbd
 80070d8:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 80070da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80070e4:	461a      	mov	r2, r3
 80070e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80070ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80070ee:	21dc      	movs	r1, #220	@ 0xdc
 80070f0:	5499      	strb	r1, [r3, r2]
 80070f2:	e046      	b.n	8007182 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_EOF) {
 80070f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070f8:	2bef      	cmp	r3, #239	@ 0xef
 80070fa:	d118      	bne.n	800712e <frame_encode+0x2a2>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 80070fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8007106:	461a      	mov	r2, r3
 8007108:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800710c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007110:	21bd      	movs	r1, #189	@ 0xbd
 8007112:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 8007114:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800711e:	461a      	mov	r2, r3
 8007120:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007124:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007128:	21de      	movs	r1, #222	@ 0xde
 800712a:	5499      	strb	r1, [r3, r2]
 800712c:	e029      	b.n	8007182 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_ESC) {
 800712e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007132:	2bbd      	cmp	r3, #189	@ 0xbd
 8007134:	d118      	bne.n	8007168 <frame_encode+0x2dc>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8007136:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8007140:	461a      	mov	r2, r3
 8007142:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007146:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800714a:	21bd      	movs	r1, #189	@ 0xbd
 800714c:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800714e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8007158:	461a      	mov	r2, r3
 800715a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800715e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007162:	21db      	movs	r1, #219	@ 0xdb
 8007164:	5499      	strb	r1, [r3, r2]
 8007166:	e00c      	b.n	8007182 <frame_encode+0x2f6>
    } else {
        encoded_frame[encoded_length++] = crc_msb;
 8007168:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8007172:	4619      	mov	r1, r3
 8007174:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007178:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800717c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8007180:	545a      	strb	r2, [r3, r1]
    }

    if (crc_lsb == FSP_PKT_SOD) {
 8007182:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007186:	2bca      	cmp	r3, #202	@ 0xca
 8007188:	d118      	bne.n	80071bc <frame_encode+0x330>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800718a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8007194:	461a      	mov	r2, r3
 8007196:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800719a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800719e:	21bd      	movs	r1, #189	@ 0xbd
 80071a0:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 80071a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80071ac:	461a      	mov	r2, r3
 80071ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80071b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80071b6:	21dc      	movs	r1, #220	@ 0xdc
 80071b8:	5499      	strb	r1, [r3, r2]
 80071ba:	e046      	b.n	800724a <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_EOF) {
 80071bc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80071c0:	2bef      	cmp	r3, #239	@ 0xef
 80071c2:	d118      	bne.n	80071f6 <frame_encode+0x36a>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 80071c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80071ce:	461a      	mov	r2, r3
 80071d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80071d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80071d8:	21bd      	movs	r1, #189	@ 0xbd
 80071da:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 80071dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80071e6:	461a      	mov	r2, r3
 80071e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80071ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80071f0:	21de      	movs	r1, #222	@ 0xde
 80071f2:	5499      	strb	r1, [r3, r2]
 80071f4:	e029      	b.n	800724a <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_ESC) {
 80071f6:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80071fa:	2bbd      	cmp	r3, #189	@ 0xbd
 80071fc:	d118      	bne.n	8007230 <frame_encode+0x3a4>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 80071fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8007208:	461a      	mov	r2, r3
 800720a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800720e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007212:	21bd      	movs	r1, #189	@ 0xbd
 8007214:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 8007216:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8007220:	461a      	mov	r2, r3
 8007222:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007226:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800722a:	21db      	movs	r1, #219	@ 0xdb
 800722c:	5499      	strb	r1, [r3, r2]
 800722e:	e00c      	b.n	800724a <frame_encode+0x3be>
    } else {
        encoded_frame[encoded_length++] = crc_lsb;
 8007230:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800723a:	4619      	mov	r1, r3
 800723c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8007240:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007244:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 8007248:	545a      	strb	r2, [r3, r1]
    }

    encoded_frame[encoded_length++] = FSP_PKT_EOF;
 800724a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8007254:	461a      	mov	r2, r3
 8007256:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800725a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800725e:	21ef      	movs	r1, #239	@ 0xef
 8007260:	5499      	strb	r1, [r3, r2]

    memcpy(frame, encoded_frame, encoded_length);
 8007262:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8007266:	f107 0114 	add.w	r1, r7, #20
 800726a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800726e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	f002 f821 	bl	80092ba <memcpy>
    *frame_len = encoded_length;
 8007278:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800727c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8007286:	701a      	strb	r2, [r3, #0]
}
 8007288:	bf00      	nop
 800728a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <frame_decode>:
                return FSP_PKT_ERROR;
            }
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 8007294:	b580      	push	{r7, lr}
 8007296:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800729a:	af00      	add	r7, sp, #0
 800729c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80072a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80072a4:	6018      	str	r0, [r3, #0]
 80072a6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80072aa:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80072b4:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80072b8:	460a      	mov	r2, r1
 80072ba:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];


	if (length < FSP_PKT_MIN_LENGTH - 2) {
 80072ce:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80072d2:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b05      	cmp	r3, #5
 80072da:	d862      	bhi.n	80073a2 <frame_decode+0x10e>
	        return FSP_PKT_INVALID;
 80072dc:	2302      	movs	r3, #2
 80072de:	e133      	b.n	8007548 <frame_decode+0x2b4>
	}


	while (i < length){
        uint8_t byte = buffer[i++];
 80072e0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 80072ea:	461a      	mov	r2, r3
 80072ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80072f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4413      	add	r3, r2
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (escape) {
 80072fe:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8007302:	2b00      	cmp	r3, #0
 8007304:	d038      	beq.n	8007378 <frame_decode+0xe4>
            if (byte == FSP_PKT_TSOD) {
 8007306:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800730a:	2bdc      	cmp	r3, #220	@ 0xdc
 800730c:	d10c      	bne.n	8007328 <frame_decode+0x94>
                decoded_payload[j++] = FSP_PKT_SOD;
 800730e:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 8007318:	461a      	mov	r2, r3
 800731a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800731e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8007322:	21ca      	movs	r1, #202	@ 0xca
 8007324:	5499      	strb	r1, [r3, r2]
 8007326:	e023      	b.n	8007370 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TEOF) {
 8007328:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800732c:	2bde      	cmp	r3, #222	@ 0xde
 800732e:	d10c      	bne.n	800734a <frame_decode+0xb6>
                decoded_payload[j++] = FSP_PKT_EOF;
 8007330:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800733a:	461a      	mov	r2, r3
 800733c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007340:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8007344:	21ef      	movs	r1, #239	@ 0xef
 8007346:	5499      	strb	r1, [r3, r2]
 8007348:	e012      	b.n	8007370 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TESC) {
 800734a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800734e:	2bdb      	cmp	r3, #219	@ 0xdb
 8007350:	d10c      	bne.n	800736c <frame_decode+0xd8>
                decoded_payload[j++] = FSP_PKT_ESC;
 8007352:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800735c:	461a      	mov	r2, r3
 800735e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007362:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8007366:	21bd      	movs	r1, #189	@ 0xbd
 8007368:	5499      	strb	r1, [r3, r2]
 800736a:	e001      	b.n	8007370 <frame_decode+0xdc>
            } else {
            	return FSP_PKT_INVALID;
 800736c:	2302      	movs	r3, #2
 800736e:	e0eb      	b.n	8007548 <frame_decode+0x2b4>
            }
            escape = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 8007376:	e014      	b.n	80073a2 <frame_decode+0x10e>
        } else if (byte == FSP_PKT_ESC) {
 8007378:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800737c:	2bbd      	cmp	r3, #189	@ 0xbd
 800737e:	d103      	bne.n	8007388 <frame_decode+0xf4>
        	escape = 1;
 8007380:	2301      	movs	r3, #1
 8007382:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 8007386:	e00c      	b.n	80073a2 <frame_decode+0x10e>
        } else {
            decoded_payload[j++] = byte;
 8007388:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 8007392:	4619      	mov	r1, r3
 8007394:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007398:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800739c:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 80073a0:	545a      	strb	r2, [r3, r1]
	while (i < length){
 80073a2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80073a6:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80073aa:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d395      	bcc.n	80072e0 <frame_decode+0x4c>
        }
	}

    i = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 80073ba:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 80073c4:	461a      	mov	r2, r3
 80073c6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80073ca:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80073ce:	5c9a      	ldrb	r2, [r3, r2]
 80073d0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d8:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 80073da:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 80073e4:	461a      	mov	r2, r3
 80073e6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80073ea:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80073ee:	5c9a      	ldrb	r2, [r3, r2]
 80073f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80073f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f8:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 80073fa:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 8007404:	461a      	mov	r2, r3
 8007406:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800740a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800740e:	5c9a      	ldrb	r2, [r3, r2]
 8007410:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007418:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800741a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 8007424:	461a      	mov	r2, r3
 8007426:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800742a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800742e:	5c9a      	ldrb	r2, [r3, r2]
 8007430:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007438:	711a      	strb	r2, [r3, #4]

    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 800743a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800743e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007442:	78db      	ldrb	r3, [r3, #3]
 8007444:	2bf7      	cmp	r3, #247	@ 0xf7
 8007446:	d80a      	bhi.n	800745e <frame_decode+0x1ca>
 8007448:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800744c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007450:	78db      	ldrb	r3, [r3, #3]
 8007452:	461a      	mov	r2, r3
 8007454:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8007458:	3b06      	subs	r3, #6
 800745a:	429a      	cmp	r2, r3
 800745c:	d001      	beq.n	8007462 <frame_decode+0x1ce>
        return FSP_PKT_WRONG_LENGTH;
 800745e:	2306      	movs	r3, #6
 8007460:	e072      	b.n	8007548 <frame_decode+0x2b4>
    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 8007462:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8007466:	f107 0210 	add.w	r2, r7, #16
 800746a:	18d1      	adds	r1, r2, r3
 800746c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007474:	78db      	ldrb	r3, [r3, #3]
 8007476:	461a      	mov	r2, r3
 8007478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747c:	3305      	adds	r3, #5
 800747e:	4618      	mov	r0, r3
 8007480:	f001 ff1b 	bl	80092ba <memcpy>
    i += fsp_pkt.length;
 8007484:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748c:	78da      	ldrb	r2, [r3, #3]
 800748e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8007492:	4413      	add	r3, r2
 8007494:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    //CRC
    uint16_t crc_received = (uint16_t)(decoded_payload[i++] << 8);
 8007498:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 80074a2:	461a      	mov	r2, r3
 80074a4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80074a8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80074ac:	5c9b      	ldrb	r3, [r3, r2]
 80074ae:	021b      	lsls	r3, r3, #8
 80074b0:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
    crc_received |= (uint16_t)(decoded_payload[i++]);
 80074b4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 80074be:	461a      	mov	r2, r3
 80074c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80074c4:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80074c8:	5c9b      	ldrb	r3, [r3, r2]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a


    // CAL CRC
    uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp_pkt.src_adr, fsp_pkt.length + 4);
 80074d6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074de:	78db      	ldrb	r3, [r3, #3]
 80074e0:	3304      	adds	r3, #4
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e8:	3301      	adds	r3, #1
 80074ea:	4619      	mov	r1, r3
 80074ec:	2000      	movs	r0, #0
 80074ee:	f7ff fbcd 	bl	8006c8c <crc16_CCITT>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208


    // CHECK CRC
    if (crc_received != crc_calculated) {
 80074f8:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 80074fc:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 8007500:	429a      	cmp	r2, r3
 8007502:	d001      	beq.n	8007508 <frame_decode+0x274>
        return FSP_PKT_CRC_FAIL;
 8007504:	2305      	movs	r3, #5
 8007506:	e01f      	b.n	8007548 <frame_decode+0x2b4>
    }

    // Address
    if (fsp_pkt.dst_adr != fsp_my_adr) {
 8007508:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800750c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007510:	789a      	ldrb	r2, [r3, #2]
 8007512:	4b10      	ldr	r3, [pc, #64]	@ (8007554 <frame_decode+0x2c0>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d001      	beq.n	800751e <frame_decode+0x28a>
        return FSP_PKT_WRONG_ADR;
 800751a:	2303      	movs	r3, #3
 800751c:	e014      	b.n	8007548 <frame_decode+0x2b4>
    }

    *pkt = fsp_pkt;
 800751e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007522:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800752c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007530:	4610      	mov	r0, r2
 8007532:	4619      	mov	r1, r3
 8007534:	23fe      	movs	r3, #254	@ 0xfe
 8007536:	461a      	mov	r2, r3
 8007538:	f001 febf 	bl	80092ba <memcpy>

    frame_processing(&fsp_pkt);
 800753c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007540:	4618      	mov	r0, r3
 8007542:	f000 f809 	bl	8007558 <frame_processing>
    return 0;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20002a4c 	.word	0x20002a4c

08007558 <frame_processing>:

char pos_str2[10];

int frame_processing(fsp_packet_t *fsp_pkt){
 8007558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755c:	f5ad 6dad 	sub.w	sp, sp, #1384	@ 0x568
 8007560:	af22      	add	r7, sp, #136	@ 0x88
 8007562:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007566:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800756a:	6018      	str	r0, [r3, #0]


	switch (fsp_pkt->src_adr){
 800756c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007570:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	3b02      	subs	r3, #2
 800757a:	2b03      	cmp	r3, #3
 800757c:	f200 85dc 	bhi.w	8008138 <frame_processing+0xbe0>
 8007580:	a201      	add	r2, pc, #4	@ (adr r2, 8007588 <frame_processing+0x30>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	08007599 	.word	0x08007599
 800758c:	080078ed 	.word	0x080078ed
 8007590:	0800813d 	.word	0x0800813d
 8007594:	08008091 	.word	0x08008091
		case FSP_ADR_PMU:
			switch (fsp_pkt->type)
 8007598:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800759c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	791b      	ldrb	r3, [r3, #4]
 80075a4:	2b05      	cmp	r3, #5
 80075a6:	d002      	beq.n	80075ae <frame_processing+0x56>
 80075a8:	2b07      	cmp	r3, #7
 80075aa:	d006      	beq.n	80075ba <frame_processing+0x62>
 80075ac:	e198      	b.n	80078e0 <frame_processing+0x388>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 80075ae:	f7fa fd6b 	bl	8002088 <clear_send_flag>
					Uart_sendstring(USART6, "\nPMU_ACK\r\n> ");
 80075b2:	49c2      	ldr	r1, [pc, #776]	@ (80078bc <frame_processing+0x364>)
 80075b4:	48c2      	ldr	r0, [pc, #776]	@ (80078c0 <frame_processing+0x368>)
 80075b6:	f7fa fc89 	bl	8001ecc <Uart_sendstring>

				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 80075ba:	f7fa fd65 	bl	8002088 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 80075be:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80075c2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	795b      	ldrb	r3, [r3, #5]
 80075ca:	2b08      	cmp	r3, #8
 80075cc:	dc1a      	bgt.n	8007604 <frame_processing+0xac>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f2c0 8189 	blt.w	80078e6 <frame_processing+0x38e>
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	f200 8186 	bhi.w	80078e6 <frame_processing+0x38e>
 80075da:	a201      	add	r2, pc, #4	@ (adr r2, 80075e0 <frame_processing+0x88>)
 80075dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e0:	0800760b 	.word	0x0800760b
 80075e4:	0800765b 	.word	0x0800765b
 80075e8:	0800771b 	.word	0x0800771b
 80075ec:	080077e3 	.word	0x080077e3
 80075f0:	0800784f 	.word	0x0800784f
 80075f4:	080078e7 	.word	0x080078e7
 80075f8:	080078e7 	.word	0x080078e7
 80075fc:	080078e7 	.word	0x080078e7
 8007600:	080078dd 	.word	0x080078dd
 8007604:	2bff      	cmp	r3, #255	@ 0xff
 8007606:	d014      	beq.n	8007632 <frame_processing+0xda>


							break;
					}

					break;
 8007608:	e16d      	b.n	80078e6 <frame_processing+0x38e>
							sprintf(buffer_0x00, "PMU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800760a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800760e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	799b      	ldrb	r3, [r3, #6]
 8007616:	461a      	mov	r2, r3
 8007618:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800761c:	49a9      	ldr	r1, [pc, #676]	@ (80078c4 <frame_processing+0x36c>)
 800761e:	4618      	mov	r0, r3
 8007620:	f001 fd68 	bl	80090f4 <siprintf>
							Uart_sendstring(USART6, buffer_0x00);
 8007624:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007628:	4619      	mov	r1, r3
 800762a:	48a5      	ldr	r0, [pc, #660]	@ (80078c0 <frame_processing+0x368>)
 800762c:	f7fa fc4e 	bl	8001ecc <Uart_sendstring>
							break;
 8007630:	e155      	b.n	80078de <frame_processing+0x386>
							sprintf(buffer_0xFF, "PMU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 8007632:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007636:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	799b      	ldrb	r3, [r3, #6]
 800763e:	461a      	mov	r2, r3
 8007640:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007644:	49a0      	ldr	r1, [pc, #640]	@ (80078c8 <frame_processing+0x370>)
 8007646:	4618      	mov	r0, r3
 8007648:	f001 fd54 	bl	80090f4 <siprintf>
							Uart_sendstring(USART6, buffer_0xFF);
 800764c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007650:	4619      	mov	r1, r3
 8007652:	489b      	ldr	r0, [pc, #620]	@ (80078c0 <frame_processing+0x368>)
 8007654:	f7fa fc3a 	bl	8001ecc <Uart_sendstring>
							break;
 8007658:	e141      	b.n	80078de <frame_processing+0x386>
					        int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800765a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800765e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	799b      	ldrb	r3, [r3, #6]
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	b21a      	sxth	r2, r3
 800766a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800766e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	79db      	ldrb	r3, [r3, #7]
 8007676:	b21b      	sxth	r3, r3
 8007678:	4313      	orrs	r3, r2
 800767a:	f8a7 3476 	strh.w	r3, [r7, #1142]	@ 0x476
					        int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800767e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007682:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	7a1b      	ldrb	r3, [r3, #8]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	b21a      	sxth	r2, r3
 800768e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007692:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	7a5b      	ldrb	r3, [r3, #9]
 800769a:	b21b      	sxth	r3, r3
 800769c:	4313      	orrs	r3, r2
 800769e:	f8a7 3474 	strh.w	r3, [r7, #1140]	@ 0x474
					        int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 80076a2:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80076a6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	7a9b      	ldrb	r3, [r3, #10]
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	b21a      	sxth	r2, r3
 80076b2:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80076b6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	7adb      	ldrb	r3, [r3, #11]
 80076be:	b21b      	sxth	r3, r3
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8a7 3472 	strh.w	r3, [r7, #1138]	@ 0x472
					        int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 80076c6:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80076ca:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	7b1b      	ldrb	r3, [r3, #12]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	b21a      	sxth	r2, r3
 80076d6:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80076da:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	7b5b      	ldrb	r3, [r3, #13]
 80076e2:	b21b      	sxth	r3, r3
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8a7 3470 	strh.w	r3, [r7, #1136]	@ 0x470
					        sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [NTC0: %d, NTC1: %d, NTC2: %d, NTC3: %d]\n", ntc0, ntc1, ntc2, ntc3);
 80076ea:	f9b7 1476 	ldrsh.w	r1, [r7, #1142]	@ 0x476
 80076ee:	f9b7 4474 	ldrsh.w	r4, [r7, #1140]	@ 0x474
 80076f2:	f9b7 3472 	ldrsh.w	r3, [r7, #1138]	@ 0x472
 80076f6:	f9b7 2470 	ldrsh.w	r2, [r7, #1136]	@ 0x470
 80076fa:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80076fe:	9201      	str	r2, [sp, #4]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	4623      	mov	r3, r4
 8007704:	460a      	mov	r2, r1
 8007706:	4971      	ldr	r1, [pc, #452]	@ (80078cc <frame_processing+0x374>)
 8007708:	f001 fcf4 	bl	80090f4 <siprintf>
					        Uart_sendstring(USART6, buffer_0x01);
 800770c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007710:	4619      	mov	r1, r3
 8007712:	486b      	ldr	r0, [pc, #428]	@ (80078c0 <frame_processing+0x368>)
 8007714:	f7fa fbda 	bl	8001ecc <Uart_sendstring>
							break;
 8007718:	e0e1      	b.n	80078de <frame_processing+0x386>
					        uint16_t bat0 = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800771a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800771e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	799b      	ldrb	r3, [r3, #6]
 8007726:	021b      	lsls	r3, r3, #8
 8007728:	b21a      	sxth	r2, r3
 800772a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800772e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	79db      	ldrb	r3, [r3, #7]
 8007736:	b21b      	sxth	r3, r3
 8007738:	4313      	orrs	r3, r2
 800773a:	b21b      	sxth	r3, r3
 800773c:	f8a7 347e 	strh.w	r3, [r7, #1150]	@ 0x47e
					        uint16_t bat1 = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8007740:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007744:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	7a1b      	ldrb	r3, [r3, #8]
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	b21a      	sxth	r2, r3
 8007750:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007754:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	7a5b      	ldrb	r3, [r3, #9]
 800775c:	b21b      	sxth	r3, r3
 800775e:	4313      	orrs	r3, r2
 8007760:	b21b      	sxth	r3, r3
 8007762:	f8a7 347c 	strh.w	r3, [r7, #1148]	@ 0x47c
					        uint16_t bat2 = (uint16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 8007766:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800776a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	7a9b      	ldrb	r3, [r3, #10]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	b21a      	sxth	r2, r3
 8007776:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800777a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	7adb      	ldrb	r3, [r3, #11]
 8007782:	b21b      	sxth	r3, r3
 8007784:	4313      	orrs	r3, r2
 8007786:	b21b      	sxth	r3, r3
 8007788:	f8a7 347a 	strh.w	r3, [r7, #1146]	@ 0x47a
					        uint16_t bat3 = (uint16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800778c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007790:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	7b1b      	ldrb	r3, [r3, #12]
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	b21a      	sxth	r2, r3
 800779c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80077a0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	7b5b      	ldrb	r3, [r3, #13]
 80077a8:	b21b      	sxth	r3, r3
 80077aa:	4313      	orrs	r3, r2
 80077ac:	b21b      	sxth	r3, r3
 80077ae:	f8a7 3478 	strh.w	r3, [r7, #1144]	@ 0x478
					        sprintf(buffer_0x02, "PDU_Res: CMDcode 0x02 [BAT0: %u mV, BAT1: %u mV, BAT2: %u mV, BAT3: %u mV]\n", bat0, bat1, bat2, bat3);
 80077b2:	f8b7 147e 	ldrh.w	r1, [r7, #1150]	@ 0x47e
 80077b6:	f8b7 447c 	ldrh.w	r4, [r7, #1148]	@ 0x47c
 80077ba:	f8b7 347a 	ldrh.w	r3, [r7, #1146]	@ 0x47a
 80077be:	f8b7 2478 	ldrh.w	r2, [r7, #1144]	@ 0x478
 80077c2:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80077c6:	9201      	str	r2, [sp, #4]
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	4623      	mov	r3, r4
 80077cc:	460a      	mov	r2, r1
 80077ce:	4940      	ldr	r1, [pc, #256]	@ (80078d0 <frame_processing+0x378>)
 80077d0:	f001 fc90 	bl	80090f4 <siprintf>
					        Uart_sendstring(USART6, buffer_0x02);
 80077d4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80077d8:	4619      	mov	r1, r3
 80077da:	4839      	ldr	r0, [pc, #228]	@ (80078c0 <frame_processing+0x368>)
 80077dc:	f7fa fb76 	bl	8001ecc <Uart_sendstring>
							break;
 80077e0:	e07d      	b.n	80078de <frame_processing+0x386>
					        uint16_t vin = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 80077e2:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80077e6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	799b      	ldrb	r3, [r3, #6]
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	b21a      	sxth	r2, r3
 80077f2:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80077f6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	79db      	ldrb	r3, [r3, #7]
 80077fe:	b21b      	sxth	r3, r3
 8007800:	4313      	orrs	r3, r2
 8007802:	b21b      	sxth	r3, r3
 8007804:	f8a7 3482 	strh.w	r3, [r7, #1154]	@ 0x482
					        uint16_t iin = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8007808:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800780c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	7a1b      	ldrb	r3, [r3, #8]
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	b21a      	sxth	r2, r3
 8007818:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800781c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	7a5b      	ldrb	r3, [r3, #9]
 8007824:	b21b      	sxth	r3, r3
 8007826:	4313      	orrs	r3, r2
 8007828:	b21b      	sxth	r3, r3
 800782a:	f8a7 3480 	strh.w	r3, [r7, #1152]	@ 0x480
					        sprintf(buffer_0x03, "PDU_Res: CMDcode 0x03 [VIN: %u mV, IIN: %u mA]\n", vin, iin);
 800782e:	f8b7 2482 	ldrh.w	r2, [r7, #1154]	@ 0x482
 8007832:	f8b7 3480 	ldrh.w	r3, [r7, #1152]	@ 0x480
 8007836:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 800783a:	4926      	ldr	r1, [pc, #152]	@ (80078d4 <frame_processing+0x37c>)
 800783c:	f001 fc5a 	bl	80090f4 <siprintf>
					        Uart_sendstring(USART6, buffer_0x03);
 8007840:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007844:	4619      	mov	r1, r3
 8007846:	481e      	ldr	r0, [pc, #120]	@ (80078c0 <frame_processing+0x368>)
 8007848:	f7fa fb40 	bl	8001ecc <Uart_sendstring>
							break;
 800784c:	e047      	b.n	80078de <frame_processing+0x386>
					        uint16_t vout = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800784e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007852:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	799b      	ldrb	r3, [r3, #6]
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	b21a      	sxth	r2, r3
 800785e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007862:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	79db      	ldrb	r3, [r3, #7]
 800786a:	b21b      	sxth	r3, r3
 800786c:	4313      	orrs	r3, r2
 800786e:	b21b      	sxth	r3, r3
 8007870:	f8a7 3486 	strh.w	r3, [r7, #1158]	@ 0x486
					        uint16_t iout = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8007874:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007878:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	7a1b      	ldrb	r3, [r3, #8]
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	b21a      	sxth	r2, r3
 8007884:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007888:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	7a5b      	ldrb	r3, [r3, #9]
 8007890:	b21b      	sxth	r3, r3
 8007892:	4313      	orrs	r3, r2
 8007894:	b21b      	sxth	r3, r3
 8007896:	f8a7 3484 	strh.w	r3, [r7, #1156]	@ 0x484
					        sprintf(buffer_0x04_pmu, "PDU_Res: CMDcode 0x04 [VOUT: %u mV, IOUT: %u mA]\n", vout, iout);
 800789a:	f8b7 2486 	ldrh.w	r2, [r7, #1158]	@ 0x486
 800789e:	f8b7 3484 	ldrh.w	r3, [r7, #1156]	@ 0x484
 80078a2:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80078a6:	490c      	ldr	r1, [pc, #48]	@ (80078d8 <frame_processing+0x380>)
 80078a8:	f001 fc24 	bl	80090f4 <siprintf>
					        Uart_sendstring(USART6, buffer_0x04_pmu);
 80078ac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80078b0:	4619      	mov	r1, r3
 80078b2:	4803      	ldr	r0, [pc, #12]	@ (80078c0 <frame_processing+0x368>)
 80078b4:	f7fa fb0a 	bl	8001ecc <Uart_sendstring>
							break;
 80078b8:	e011      	b.n	80078de <frame_processing+0x386>
 80078ba:	bf00      	nop
 80078bc:	0800e2d8 	.word	0x0800e2d8
 80078c0:	40011400 	.word	0x40011400
 80078c4:	0800e2e8 	.word	0x0800e2e8
 80078c8:	0800e304 	.word	0x0800e304
 80078cc:	0800e320 	.word	0x0800e320
 80078d0:	0800e360 	.word	0x0800e360
 80078d4:	0800e3ac 	.word	0x0800e3ac
 80078d8:	0800e3dc 	.word	0x0800e3dc
							break;
 80078dc:	bf00      	nop
					break;
 80078de:	e002      	b.n	80078e6 <frame_processing+0x38e>
				default:
					return FSP_PKT_INVALID;
 80078e0:	2302      	movs	r3, #2
 80078e2:	f000 bc2d 	b.w	8008140 <frame_processing+0xbe8>
					break;
 80078e6:	bf00      	nop
					break;
			}

			break;
 80078e8:	f000 bc29 	b.w	800813e <frame_processing+0xbe6>
		case FSP_ADR_PDU:
			switch (fsp_pkt->type)
 80078ec:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80078f0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	791b      	ldrb	r3, [r3, #4]
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	d002      	beq.n	8007902 <frame_processing+0x3aa>
 80078fc:	2b07      	cmp	r3, #7
 80078fe:	d007      	beq.n	8007910 <frame_processing+0x3b8>
 8007900:	e3c3      	b.n	800808a <frame_processing+0xb32>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 8007902:	f7fa fbc1 	bl	8002088 <clear_send_flag>
					Uart_sendstring(USART6, "\n> PDU_ACK\r\n> ");
 8007906:	4977      	ldr	r1, [pc, #476]	@ (8007ae4 <frame_processing+0x58c>)
 8007908:	4877      	ldr	r0, [pc, #476]	@ (8007ae8 <frame_processing+0x590>)
 800790a:	f7fa fadf 	bl	8001ecc <Uart_sendstring>
					break;
 800790e:	e3be      	b.n	800808e <frame_processing+0xb36>
				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 8007910:	f7fa fbba 	bl	8002088 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 8007914:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007918:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	795b      	ldrb	r3, [r3, #5]
 8007920:	2b06      	cmp	r3, #6
 8007922:	dc17      	bgt.n	8007954 <frame_processing+0x3fc>
 8007924:	2b00      	cmp	r3, #0
 8007926:	f2c0 83ad 	blt.w	8008084 <frame_processing+0xb2c>
 800792a:	2b06      	cmp	r3, #6
 800792c:	f200 83aa 	bhi.w	8008084 <frame_processing+0xb2c>
 8007930:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <frame_processing+0x3e0>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	0800795b 	.word	0x0800795b
 800793c:	08008085 	.word	0x08008085
 8007940:	08008085 	.word	0x08008085
 8007944:	08008085 	.word	0x08008085
 8007948:	080079ab 	.word	0x080079ab
 800794c:	08007a47 	.word	0x08007a47
 8007950:	08007afd 	.word	0x08007afd
 8007954:	2bff      	cmp	r3, #255	@ 0xff
 8007956:	d014      	beq.n	8007982 <frame_processing+0x42a>
 8007958:	e394      	b.n	8008084 <frame_processing+0xb2c>
					{
						case 0x00:
							char buffer_0x00[50];
							sprintf(buffer_0x00, "PDU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800795a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800795e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	799b      	ldrb	r3, [r3, #6]
 8007966:	461a      	mov	r2, r3
 8007968:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800796c:	495f      	ldr	r1, [pc, #380]	@ (8007aec <frame_processing+0x594>)
 800796e:	4618      	mov	r0, r3
 8007970:	f001 fbc0 	bl	80090f4 <siprintf>
							Uart_sendstring(USART6, buffer_0x00);
 8007974:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007978:	4619      	mov	r1, r3
 800797a:	485b      	ldr	r0, [pc, #364]	@ (8007ae8 <frame_processing+0x590>)
 800797c:	f7fa faa6 	bl	8001ecc <Uart_sendstring>
							break;
 8007980:	e382      	b.n	8008088 <frame_processing+0xb30>
						case 0xFF:
							char buffer_0xFF[50];
							sprintf(buffer_0xFF, "PDU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 8007982:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007986:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	799b      	ldrb	r3, [r3, #6]
 800798e:	461a      	mov	r2, r3
 8007990:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007994:	4956      	ldr	r1, [pc, #344]	@ (8007af0 <frame_processing+0x598>)
 8007996:	4618      	mov	r0, r3
 8007998:	f001 fbac 	bl	80090f4 <siprintf>
							Uart_sendstring(USART6, buffer_0xFF);
 800799c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80079a0:	4619      	mov	r1, r3
 80079a2:	4851      	ldr	r0, [pc, #324]	@ (8007ae8 <frame_processing+0x590>)
 80079a4:	f7fa fa92 	bl	8001ecc <Uart_sendstring>
							break;
 80079a8:	e36e      	b.n	8008088 <frame_processing+0xb30>

						case 0x04:

							        uint8_t channel = fsp_pkt->payload[1];
 80079aa:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80079ae:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	799b      	ldrb	r3, [r3, #6]
 80079b6:	f887 348d 	strb.w	r3, [r7, #1165]	@ 0x48d
							        uint8_t status_0x04 = fsp_pkt->payload[2];
 80079ba:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80079be:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	79db      	ldrb	r3, [r3, #7]
 80079c6:	f887 348c 	strb.w	r3, [r7, #1164]	@ 0x48c
							        uint16_t voltage_0x04 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 80079ca:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80079ce:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	7a1b      	ldrb	r3, [r3, #8]
 80079d6:	021b      	lsls	r3, r3, #8
 80079d8:	b21a      	sxth	r2, r3
 80079da:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80079de:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	7a5b      	ldrb	r3, [r3, #9]
 80079e6:	b21b      	sxth	r3, r3
 80079e8:	4313      	orrs	r3, r2
 80079ea:	b21b      	sxth	r3, r3
 80079ec:	f8a7 348a 	strh.w	r3, [r7, #1162]	@ 0x48a
							        uint16_t current_0x04 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 80079f0:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80079f4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	7a9b      	ldrb	r3, [r3, #10]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	b21a      	sxth	r2, r3
 8007a00:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007a04:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	7adb      	ldrb	r3, [r3, #11]
 8007a0c:	b21b      	sxth	r3, r3
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	b21b      	sxth	r3, r3
 8007a12:	f8a7 3488 	strh.w	r3, [r7, #1160]	@ 0x488

							        char buffer_0x07[100];
							        sprintf(buffer_0x07, "PDU_Res: CMDcode 0x04 [{Channel %u} Status %u, Voltage: %u, Current: %u]\n", channel, status_0x04, voltage_0x04, current_0x04);
 8007a16:	f897 148d 	ldrb.w	r1, [r7, #1165]	@ 0x48d
 8007a1a:	f897 448c 	ldrb.w	r4, [r7, #1164]	@ 0x48c
 8007a1e:	f8b7 348a 	ldrh.w	r3, [r7, #1162]	@ 0x48a
 8007a22:	f8b7 2488 	ldrh.w	r2, [r7, #1160]	@ 0x488
 8007a26:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8007a2a:	9201      	str	r2, [sp, #4]
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	4623      	mov	r3, r4
 8007a30:	460a      	mov	r2, r1
 8007a32:	4930      	ldr	r1, [pc, #192]	@ (8007af4 <frame_processing+0x59c>)
 8007a34:	f001 fb5e 	bl	80090f4 <siprintf>
							        Uart_sendstring(USART6, buffer_0x07);
 8007a38:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	482a      	ldr	r0, [pc, #168]	@ (8007ae8 <frame_processing+0x590>)
 8007a40:	f7fa fa44 	bl	8001ecc <Uart_sendstring>
									break;
 8007a44:	e320      	b.n	8008088 <frame_processing+0xb30>
						case 0x05:
						            uint8_t buck = fsp_pkt->payload[1];
 8007a46:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007a4a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	799b      	ldrb	r3, [r3, #6]
 8007a52:	f887 3493 	strb.w	r3, [r7, #1171]	@ 0x493
						            uint8_t status_0x05 = fsp_pkt->payload[2];
 8007a56:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007a5a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	79db      	ldrb	r3, [r3, #7]
 8007a62:	f887 3492 	strb.w	r3, [r7, #1170]	@ 0x492
						            uint16_t voltage_0x05 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 8007a66:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007a6a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	7a1b      	ldrb	r3, [r3, #8]
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	b21a      	sxth	r2, r3
 8007a76:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007a7a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	7a5b      	ldrb	r3, [r3, #9]
 8007a82:	b21b      	sxth	r3, r3
 8007a84:	4313      	orrs	r3, r2
 8007a86:	b21b      	sxth	r3, r3
 8007a88:	f8a7 3490 	strh.w	r3, [r7, #1168]	@ 0x490
						            uint16_t current_0x05 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 8007a8c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007a90:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	7a9b      	ldrb	r3, [r3, #10]
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	b21a      	sxth	r2, r3
 8007a9c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007aa0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	7adb      	ldrb	r3, [r3, #11]
 8007aa8:	b21b      	sxth	r3, r3
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	b21b      	sxth	r3, r3
 8007aae:	f8a7 348e 	strh.w	r3, [r7, #1166]	@ 0x48e

						            char buffer_0x05[100];
						            sprintf(buffer_0x05, "PDU_Res: CMDcode 0x05 [{Buck %u} Status %u, Voltage: %u, Current: %u]\n", buck, status_0x05, voltage_0x05, current_0x05);
 8007ab2:	f897 1493 	ldrb.w	r1, [r7, #1171]	@ 0x493
 8007ab6:	f897 4492 	ldrb.w	r4, [r7, #1170]	@ 0x492
 8007aba:	f8b7 3490 	ldrh.w	r3, [r7, #1168]	@ 0x490
 8007abe:	f8b7 248e 	ldrh.w	r2, [r7, #1166]	@ 0x48e
 8007ac2:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8007ac6:	9201      	str	r2, [sp, #4]
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	4623      	mov	r3, r4
 8007acc:	460a      	mov	r2, r1
 8007ace:	490a      	ldr	r1, [pc, #40]	@ (8007af8 <frame_processing+0x5a0>)
 8007ad0:	f001 fb10 	bl	80090f4 <siprintf>
						            Uart_sendstring(USART6, buffer_0x05);
 8007ad4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4803      	ldr	r0, [pc, #12]	@ (8007ae8 <frame_processing+0x590>)
 8007adc:	f7fa f9f6 	bl	8001ecc <Uart_sendstring>

									break;
 8007ae0:	e2d2      	b.n	8008088 <frame_processing+0xb30>
 8007ae2:	bf00      	nop
 8007ae4:	0800e410 	.word	0x0800e410
 8007ae8:	40011400 	.word	0x40011400
 8007aec:	0800e420 	.word	0x0800e420
 8007af0:	0800e43c 	.word	0x0800e43c
 8007af4:	0800e458 	.word	0x0800e458
 8007af8:	0800e4a4 	.word	0x0800e4a4
						case 0x06:
							uint8_t tec1buck_status = fsp_pkt->payload[1];
 8007afc:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007b00:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	799b      	ldrb	r3, [r3, #6]
 8007b08:	f887 34db 	strb.w	r3, [r7, #1243]	@ 0x4db
							uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 8007b0c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007b10:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	79db      	ldrb	r3, [r3, #7]
 8007b18:	021b      	lsls	r3, r3, #8
 8007b1a:	b21a      	sxth	r2, r3
 8007b1c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007b20:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	7a1b      	ldrb	r3, [r3, #8]
 8007b28:	b21b      	sxth	r3, r3
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	b21b      	sxth	r3, r3
 8007b2e:	f8a7 34d8 	strh.w	r3, [r7, #1240]	@ 0x4d8

							uint8_t tec2buck_status = fsp_pkt->payload[4];
 8007b32:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007b36:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	7a5b      	ldrb	r3, [r3, #9]
 8007b3e:	f887 34d7 	strb.w	r3, [r7, #1239]	@ 0x4d7
							uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 8007b42:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007b46:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	7a9b      	ldrb	r3, [r3, #10]
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	b21a      	sxth	r2, r3
 8007b52:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007b56:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	7adb      	ldrb	r3, [r3, #11]
 8007b5e:	b21b      	sxth	r3, r3
 8007b60:	4313      	orrs	r3, r2
 8007b62:	b21b      	sxth	r3, r3
 8007b64:	f8a7 34d4 	strh.w	r3, [r7, #1236]	@ 0x4d4

							uint8_t tec3buck_status = fsp_pkt->payload[7];
 8007b68:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007b6c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	7b1b      	ldrb	r3, [r3, #12]
 8007b74:	f887 34d3 	strb.w	r3, [r7, #1235]	@ 0x4d3
							uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 8007b78:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007b7c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	7b5b      	ldrb	r3, [r3, #13]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	b21a      	sxth	r2, r3
 8007b88:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007b8c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	7b9b      	ldrb	r3, [r3, #14]
 8007b94:	b21b      	sxth	r3, r3
 8007b96:	4313      	orrs	r3, r2
 8007b98:	b21b      	sxth	r3, r3
 8007b9a:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0

							uint8_t tec4buck_status = fsp_pkt->payload[10];
 8007b9e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007ba2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	7bdb      	ldrb	r3, [r3, #15]
 8007baa:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
							uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 8007bae:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007bb2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	7c1b      	ldrb	r3, [r3, #16]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	b21a      	sxth	r2, r3
 8007bbe:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007bc2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	7c5b      	ldrb	r3, [r3, #17]
 8007bca:	b21b      	sxth	r3, r3
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	b21b      	sxth	r3, r3
 8007bd0:	f8a7 34cc 	strh.w	r3, [r7, #1228]	@ 0x4cc

							uint8_t mcubuck_status = fsp_pkt->payload[13];
 8007bd4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007bd8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	7c9b      	ldrb	r3, [r3, #18]
 8007be0:	f887 34cb 	strb.w	r3, [r7, #1227]	@ 0x4cb
							uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 8007be4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007be8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	7cdb      	ldrb	r3, [r3, #19]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	b21a      	sxth	r2, r3
 8007bf4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007bf8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	7d1b      	ldrb	r3, [r3, #20]
 8007c00:	b21b      	sxth	r3, r3
 8007c02:	4313      	orrs	r3, r2
 8007c04:	b21b      	sxth	r3, r3
 8007c06:	f8a7 34c8 	strh.w	r3, [r7, #1224]	@ 0x4c8

							uint8_t ledbuck_status = fsp_pkt->payload[16];
 8007c0a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007c0e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	7d5b      	ldrb	r3, [r3, #21]
 8007c16:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
							uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 8007c1a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007c1e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	7d9b      	ldrb	r3, [r3, #22]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	b21a      	sxth	r2, r3
 8007c2a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007c2e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	7ddb      	ldrb	r3, [r3, #23]
 8007c36:	b21b      	sxth	r3, r3
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	b21b      	sxth	r3, r3
 8007c3c:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4

							uint8_t cm4buck_status = fsp_pkt->payload[19];
 8007c40:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007c44:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	7e1b      	ldrb	r3, [r3, #24]
 8007c4c:	f887 34c3 	strb.w	r3, [r7, #1219]	@ 0x4c3
							uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 8007c50:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007c54:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	7e5b      	ldrb	r3, [r3, #25]
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	b21a      	sxth	r2, r3
 8007c60:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007c64:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	7e9b      	ldrb	r3, [r3, #26]
 8007c6c:	b21b      	sxth	r3, r3
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	b21b      	sxth	r3, r3
 8007c72:	f8a7 34c0 	strh.w	r3, [r7, #1216]	@ 0x4c0

							uint8_t tec1_status = fsp_pkt->payload[22];
 8007c76:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007c7a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	7edb      	ldrb	r3, [r3, #27]
 8007c82:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
							uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 8007c86:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007c8a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	7f1b      	ldrb	r3, [r3, #28]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	b21a      	sxth	r2, r3
 8007c96:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007c9a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	7f5b      	ldrb	r3, [r3, #29]
 8007ca2:	b21b      	sxth	r3, r3
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc

							uint8_t tec2_status = fsp_pkt->payload[25];
 8007cac:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007cb0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	7f9b      	ldrb	r3, [r3, #30]
 8007cb8:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
							uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 8007cbc:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007cc0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	7fdb      	ldrb	r3, [r3, #31]
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	b21a      	sxth	r2, r3
 8007ccc:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007cd0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	b21b      	sxth	r3, r3
 8007ce0:	f8a7 34b8 	strh.w	r3, [r7, #1208]	@ 0x4b8

							uint8_t tec3_status = fsp_pkt->payload[28];
 8007ce4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007ce8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007cf2:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
							uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 8007cf6:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007cfa:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	b21a      	sxth	r2, r3
 8007d08:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007d0c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007d16:	b21b      	sxth	r3, r3
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	b21b      	sxth	r3, r3
 8007d1c:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4

							uint8_t tec4_status = fsp_pkt->payload[31];
 8007d20:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007d24:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007d2e:	f887 34b3 	strb.w	r3, [r7, #1203]	@ 0x4b3
							uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 8007d32:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007d36:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d40:	021b      	lsls	r3, r3, #8
 8007d42:	b21a      	sxth	r2, r3
 8007d44:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007d48:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8007d52:	b21b      	sxth	r3, r3
 8007d54:	4313      	orrs	r3, r2
 8007d56:	b21b      	sxth	r3, r3
 8007d58:	f8a7 34b0 	strh.w	r3, [r7, #1200]	@ 0x4b0

							uint8_t copc_status = fsp_pkt->payload[34];
 8007d5c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007d60:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007d6a:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
							uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 8007d6e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007d72:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	b21a      	sxth	r2, r3
 8007d80:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007d84:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8007d8e:	b21b      	sxth	r3, r3
 8007d90:	4313      	orrs	r3, r2
 8007d92:	b21b      	sxth	r3, r3
 8007d94:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac

							uint8_t iou_status = fsp_pkt->payload[37];
 8007d98:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007d9c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8007da6:	f887 34ab 	strb.w	r3, [r7, #1195]	@ 0x4ab
							uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 8007daa:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007dae:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	b21a      	sxth	r2, r3
 8007dbc:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007dc0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007dca:	b21b      	sxth	r3, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	b21b      	sxth	r3, r3
 8007dd0:	f8a7 34a8 	strh.w	r3, [r7, #1192]	@ 0x4a8

							uint8_t rgb_status = fsp_pkt->payload[40];
 8007dd4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007dd8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007de2:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
							uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 8007de6:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007dea:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	b21a      	sxth	r2, r3
 8007df8:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007dfc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007e06:	b21b      	sxth	r3, r3
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	b21b      	sxth	r3, r3
 8007e0c:	f8a7 34a4 	strh.w	r3, [r7, #1188]	@ 0x4a4

							uint8_t ir_status = fsp_pkt->payload[43];
 8007e10:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007e14:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e1e:	f887 34a3 	strb.w	r3, [r7, #1187]	@ 0x4a3
							uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 8007e22:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007e26:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007e30:	021b      	lsls	r3, r3, #8
 8007e32:	b21a      	sxth	r2, r3
 8007e34:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007e38:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007e42:	b21b      	sxth	r3, r3
 8007e44:	4313      	orrs	r3, r2
 8007e46:	b21b      	sxth	r3, r3
 8007e48:	f8a7 34a0 	strh.w	r3, [r7, #1184]	@ 0x4a0

							uint8_t cm4_status = fsp_pkt->payload[46];
 8007e4c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007e50:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8007e5a:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
							uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 8007e5e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007e62:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	b21a      	sxth	r2, r3
 8007e70:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007e74:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e7e:	b21b      	sxth	r3, r3
 8007e80:	4313      	orrs	r3, r2
 8007e82:	b21b      	sxth	r3, r3
 8007e84:	f8a7 349c 	strh.w	r3, [r7, #1180]	@ 0x49c

							uint8_t vin_status = fsp_pkt->payload[49];
 8007e88:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007e8c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007e96:	f887 349b 	strb.w	r3, [r7, #1179]	@ 0x49b
							uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 8007e9a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007e9e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	b21a      	sxth	r2, r3
 8007eac:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007eb0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007eba:	b21b      	sxth	r3, r3
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	b21b      	sxth	r3, r3
 8007ec0:	f8a7 3498 	strh.w	r3, [r7, #1176]	@ 0x498

							uint8_t vbus_status = fsp_pkt->payload[52];
 8007ec4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007ec8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8007ed2:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
							uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 8007ed6:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007eda:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	b21a      	sxth	r2, r3
 8007ee8:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8007eec:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8007ef6:	b21b      	sxth	r3, r3
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	b21b      	sxth	r3, r3
 8007efc:	f8a7 3494 	strh.w	r3, [r7, #1172]	@ 0x494


						            char buffer_0x06[1000];
						            sprintf(buffer_0x06, "TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n",
 8007f00:	f897 e4db 	ldrb.w	lr, [r7, #1243]	@ 0x4db
 8007f04:	f8b7 84d8 	ldrh.w	r8, [r7, #1240]	@ 0x4d8
 8007f08:	f897 34d7 	ldrb.w	r3, [r7, #1239]	@ 0x4d7
 8007f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f0e:	f8b7 24d4 	ldrh.w	r2, [r7, #1236]	@ 0x4d4
 8007f12:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f14:	f897 14d3 	ldrb.w	r1, [r7, #1235]	@ 0x4d3
 8007f18:	6639      	str	r1, [r7, #96]	@ 0x60
 8007f1a:	f8b7 04d0 	ldrh.w	r0, [r7, #1232]	@ 0x4d0
 8007f1e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8007f20:	f897 44cf 	ldrb.w	r4, [r7, #1231]	@ 0x4cf
 8007f24:	65bc      	str	r4, [r7, #88]	@ 0x58
 8007f26:	f8b7 54cc 	ldrh.w	r5, [r7, #1228]	@ 0x4cc
 8007f2a:	657d      	str	r5, [r7, #84]	@ 0x54
 8007f2c:	f897 64cb 	ldrb.w	r6, [r7, #1227]	@ 0x4cb
 8007f30:	653e      	str	r6, [r7, #80]	@ 0x50
 8007f32:	f8b7 c4c8 	ldrh.w	ip, [r7, #1224]	@ 0x4c8
 8007f36:	4663      	mov	r3, ip
 8007f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f3a:	f897 c4c7 	ldrb.w	ip, [r7, #1223]	@ 0x4c7
 8007f3e:	4662      	mov	r2, ip
 8007f40:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007f42:	f8b7 c4c4 	ldrh.w	ip, [r7, #1220]	@ 0x4c4
 8007f46:	4661      	mov	r1, ip
 8007f48:	6479      	str	r1, [r7, #68]	@ 0x44
 8007f4a:	f897 c4c3 	ldrb.w	ip, [r7, #1219]	@ 0x4c3
 8007f4e:	4660      	mov	r0, ip
 8007f50:	6438      	str	r0, [r7, #64]	@ 0x40
 8007f52:	f8b7 c4c0 	ldrh.w	ip, [r7, #1216]	@ 0x4c0
 8007f56:	4664      	mov	r4, ip
 8007f58:	63fc      	str	r4, [r7, #60]	@ 0x3c
 8007f5a:	f897 c4bf 	ldrb.w	ip, [r7, #1215]	@ 0x4bf
 8007f5e:	4665      	mov	r5, ip
 8007f60:	63bd      	str	r5, [r7, #56]	@ 0x38
 8007f62:	f8b7 c4bc 	ldrh.w	ip, [r7, #1212]	@ 0x4bc
 8007f66:	4666      	mov	r6, ip
 8007f68:	637e      	str	r6, [r7, #52]	@ 0x34
 8007f6a:	f897 c4bb 	ldrb.w	ip, [r7, #1211]	@ 0x4bb
 8007f6e:	4663      	mov	r3, ip
 8007f70:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f72:	f8b7 c4b8 	ldrh.w	ip, [r7, #1208]	@ 0x4b8
 8007f76:	4662      	mov	r2, ip
 8007f78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f7a:	f897 c4b7 	ldrb.w	ip, [r7, #1207]	@ 0x4b7
 8007f7e:	4661      	mov	r1, ip
 8007f80:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f82:	f8b7 c4b4 	ldrh.w	ip, [r7, #1204]	@ 0x4b4
 8007f86:	4660      	mov	r0, ip
 8007f88:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f8a:	f897 c4b3 	ldrb.w	ip, [r7, #1203]	@ 0x4b3
 8007f8e:	4664      	mov	r4, ip
 8007f90:	623c      	str	r4, [r7, #32]
 8007f92:	f8b7 c4b0 	ldrh.w	ip, [r7, #1200]	@ 0x4b0
 8007f96:	4665      	mov	r5, ip
 8007f98:	61fd      	str	r5, [r7, #28]
 8007f9a:	f897 c4af 	ldrb.w	ip, [r7, #1199]	@ 0x4af
 8007f9e:	4666      	mov	r6, ip
 8007fa0:	61be      	str	r6, [r7, #24]
 8007fa2:	f8b7 c4ac 	ldrh.w	ip, [r7, #1196]	@ 0x4ac
 8007fa6:	4663      	mov	r3, ip
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	f897 c4ab 	ldrb.w	ip, [r7, #1195]	@ 0x4ab
 8007fae:	4662      	mov	r2, ip
 8007fb0:	613a      	str	r2, [r7, #16]
 8007fb2:	f8b7 c4a8 	ldrh.w	ip, [r7, #1192]	@ 0x4a8
 8007fb6:	4661      	mov	r1, ip
 8007fb8:	60f9      	str	r1, [r7, #12]
 8007fba:	f897 c4a7 	ldrb.w	ip, [r7, #1191]	@ 0x4a7
 8007fbe:	4660      	mov	r0, ip
 8007fc0:	60b8      	str	r0, [r7, #8]
 8007fc2:	f8b7 c4a4 	ldrh.w	ip, [r7, #1188]	@ 0x4a4
 8007fc6:	4664      	mov	r4, ip
 8007fc8:	607c      	str	r4, [r7, #4]
 8007fca:	f897 c4a3 	ldrb.w	ip, [r7, #1187]	@ 0x4a3
 8007fce:	4665      	mov	r5, ip
 8007fd0:	603d      	str	r5, [r7, #0]
 8007fd2:	f8b7 64a0 	ldrh.w	r6, [r7, #1184]	@ 0x4a0
 8007fd6:	f897 549f 	ldrb.w	r5, [r7, #1183]	@ 0x49f
 8007fda:	f8b7 449c 	ldrh.w	r4, [r7, #1180]	@ 0x49c
 8007fde:	f897 049b 	ldrb.w	r0, [r7, #1179]	@ 0x49b
 8007fe2:	f8b7 1498 	ldrh.w	r1, [r7, #1176]	@ 0x498
 8007fe6:	f897 2497 	ldrb.w	r2, [r7, #1175]	@ 0x497
 8007fea:	f8b7 3494 	ldrh.w	r3, [r7, #1172]	@ 0x494
 8007fee:	f107 0c74 	add.w	ip, r7, #116	@ 0x74
 8007ff2:	9321      	str	r3, [sp, #132]	@ 0x84
 8007ff4:	9220      	str	r2, [sp, #128]	@ 0x80
 8007ff6:	911f      	str	r1, [sp, #124]	@ 0x7c
 8007ff8:	901e      	str	r0, [sp, #120]	@ 0x78
 8007ffa:	941d      	str	r4, [sp, #116]	@ 0x74
 8007ffc:	951c      	str	r5, [sp, #112]	@ 0x70
 8007ffe:	961b      	str	r6, [sp, #108]	@ 0x6c
 8008000:	683d      	ldr	r5, [r7, #0]
 8008002:	951a      	str	r5, [sp, #104]	@ 0x68
 8008004:	687c      	ldr	r4, [r7, #4]
 8008006:	9419      	str	r4, [sp, #100]	@ 0x64
 8008008:	68b8      	ldr	r0, [r7, #8]
 800800a:	9018      	str	r0, [sp, #96]	@ 0x60
 800800c:	68f9      	ldr	r1, [r7, #12]
 800800e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	9216      	str	r2, [sp, #88]	@ 0x58
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	9315      	str	r3, [sp, #84]	@ 0x54
 8008018:	69be      	ldr	r6, [r7, #24]
 800801a:	9614      	str	r6, [sp, #80]	@ 0x50
 800801c:	69fd      	ldr	r5, [r7, #28]
 800801e:	9513      	str	r5, [sp, #76]	@ 0x4c
 8008020:	6a3c      	ldr	r4, [r7, #32]
 8008022:	9412      	str	r4, [sp, #72]	@ 0x48
 8008024:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008026:	9011      	str	r0, [sp, #68]	@ 0x44
 8008028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800802a:	9110      	str	r1, [sp, #64]	@ 0x40
 800802c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800802e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008032:	930e      	str	r3, [sp, #56]	@ 0x38
 8008034:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8008036:	960d      	str	r6, [sp, #52]	@ 0x34
 8008038:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 800803a:	950c      	str	r5, [sp, #48]	@ 0x30
 800803c:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 800803e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008040:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8008042:	900a      	str	r0, [sp, #40]	@ 0x28
 8008044:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008046:	9109      	str	r1, [sp, #36]	@ 0x24
 8008048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800804a:	9208      	str	r2, [sp, #32]
 800804c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800804e:	9307      	str	r3, [sp, #28]
 8008050:	6d3e      	ldr	r6, [r7, #80]	@ 0x50
 8008052:	9606      	str	r6, [sp, #24]
 8008054:	6d7d      	ldr	r5, [r7, #84]	@ 0x54
 8008056:	9505      	str	r5, [sp, #20]
 8008058:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 800805a:	9404      	str	r4, [sp, #16]
 800805c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800805e:	9003      	str	r0, [sp, #12]
 8008060:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008062:	9102      	str	r1, [sp, #8]
 8008064:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008066:	9201      	str	r2, [sp, #4]
 8008068:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	4643      	mov	r3, r8
 800806e:	4672      	mov	r2, lr
 8008070:	4936      	ldr	r1, [pc, #216]	@ (800814c <frame_processing+0xbf4>)
 8008072:	4660      	mov	r0, ip
 8008074:	f001 f83e 	bl	80090f4 <siprintf>
						                ir_status, ir_current,
						                cm4_status, cm4_current,
						                vin_status, vin_voltage,
						                vbus_status, vbus_voltage);

						            Uart_sendstring(USART6, buffer_0x06);
 8008078:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800807c:	4619      	mov	r1, r3
 800807e:	4834      	ldr	r0, [pc, #208]	@ (8008150 <frame_processing+0xbf8>)
 8008080:	f7f9 ff24 	bl	8001ecc <Uart_sendstring>




						default:
							return FSP_PKT_INVALID;
 8008084:	2302      	movs	r3, #2
 8008086:	e05b      	b.n	8008140 <frame_processing+0xbe8>
//													      sprintf(buffer, "\n{%d}", fsp_pkt->payload[i]);
//													      Uart_sendstring(USART6, buffer);
//													}


					break;
 8008088:	e001      	b.n	800808e <frame_processing+0xb36>
				default:
					return FSP_PKT_INVALID;
 800808a:	2302      	movs	r3, #2
 800808c:	e058      	b.n	8008140 <frame_processing+0xbe8>
					break;
			}

			break;
 800808e:	e056      	b.n	800813e <frame_processing+0xbe6>
		case FSP_ADR_CAM:

			break;

		case FSP_ADR_IOU:
			switch (fsp_pkt->type)
 8008090:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8008094:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	791b      	ldrb	r3, [r3, #4]
 800809c:	2b05      	cmp	r3, #5
 800809e:	d002      	beq.n	80080a6 <frame_processing+0xb4e>
 80080a0:	2b07      	cmp	r3, #7
 80080a2:	d007      	beq.n	80080b4 <frame_processing+0xb5c>
 80080a4:	e045      	b.n	8008132 <frame_processing+0xbda>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 80080a6:	f7f9 ffef 	bl	8002088 <clear_send_flag>
					Uart_sendstring(USART6, "\nIOU_ACK\r\n> ");
 80080aa:	492a      	ldr	r1, [pc, #168]	@ (8008154 <frame_processing+0xbfc>)
 80080ac:	4828      	ldr	r0, [pc, #160]	@ (8008150 <frame_processing+0xbf8>)
 80080ae:	f7f9 ff0d 	bl	8001ecc <Uart_sendstring>
					break;
 80080b2:	e040      	b.n	8008136 <frame_processing+0xbde>
				case FSP_PKT_TYPE_CMD_W_DATA:

					if (fsp_pkt->payload[0] == 0) {
 80080b4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80080b8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	795b      	ldrb	r3, [r3, #5]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <frame_processing+0xb82>
					    printf("IOU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 80080c4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80080c8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	799b      	ldrb	r3, [r3, #6]
 80080d0:	4619      	mov	r1, r3
 80080d2:	4821      	ldr	r0, [pc, #132]	@ (8008158 <frame_processing+0xc00>)
 80080d4:	f000 fffc 	bl	80090d0 <iprintf>
					 			    sprintf(lmao, "\n{%d}", fsp_pkt->payload[i]);
					     		    Uart_sendstring(USART6, lmao);
					    }
					}

					break;
 80080d8:	e02d      	b.n	8008136 <frame_processing+0xbde>
					    for (int i = 0; i < fsp_pkt->length; i++) {
 80080da:	2300      	movs	r3, #0
 80080dc:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 80080e0:	e01b      	b.n	800811a <frame_processing+0xbc2>
					 			    sprintf(lmao, "\n{%d}", fsp_pkt->payload[i]);
 80080e2:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80080e6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 80080f0:	4413      	add	r3, r2
 80080f2:	3305      	adds	r3, #5
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 80080fc:	4917      	ldr	r1, [pc, #92]	@ (800815c <frame_processing+0xc04>)
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fff8 	bl	80090f4 <siprintf>
					     		    Uart_sendstring(USART6, lmao);
 8008104:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 8008108:	4619      	mov	r1, r3
 800810a:	4811      	ldr	r0, [pc, #68]	@ (8008150 <frame_processing+0xbf8>)
 800810c:	f7f9 fede 	bl	8001ecc <Uart_sendstring>
					    for (int i = 0; i < fsp_pkt->length; i++) {
 8008110:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8008114:	3301      	adds	r3, #1
 8008116:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 800811a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800811e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	461a      	mov	r2, r3
 8008128:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800812c:	4293      	cmp	r3, r2
 800812e:	dbd8      	blt.n	80080e2 <frame_processing+0xb8a>
					break;
 8008130:	e001      	b.n	8008136 <frame_processing+0xbde>
				default:
					return FSP_PKT_INVALID;
 8008132:	2302      	movs	r3, #2
 8008134:	e004      	b.n	8008140 <frame_processing+0xbe8>
					break;
			}

			break;
 8008136:	e002      	b.n	800813e <frame_processing+0xbe6>
		default:
			return FSP_PKT_WRONG_ADR;
 8008138:	2303      	movs	r3, #3
 800813a:	e001      	b.n	8008140 <frame_processing+0xbe8>
			break;
 800813c:	bf00      	nop
			break;

	}
	return 0;
 800813e:	2300      	movs	r3, #0

}
 8008140:	4618      	mov	r0, r3
 8008142:	f507 679c 	add.w	r7, r7, #1248	@ 0x4e0
 8008146:	46bd      	mov	sp, r7
 8008148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814c:	0800e4ec 	.word	0x0800e4ec
 8008150:	40011400 	.word	0x40011400
 8008154:	0800e71c 	.word	0x0800e71c
 8008158:	0800e72c 	.word	0x0800e72c
 800815c:	0800e748 	.word	0x0800e748

08008160 <atoi>:
 8008160:	220a      	movs	r2, #10
 8008162:	2100      	movs	r1, #0
 8008164:	f000 b87c 	b.w	8008260 <strtol>

08008168 <_strtol_l.constprop.0>:
 8008168:	2b24      	cmp	r3, #36	@ 0x24
 800816a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800816e:	4686      	mov	lr, r0
 8008170:	4690      	mov	r8, r2
 8008172:	d801      	bhi.n	8008178 <_strtol_l.constprop.0+0x10>
 8008174:	2b01      	cmp	r3, #1
 8008176:	d106      	bne.n	8008186 <_strtol_l.constprop.0+0x1e>
 8008178:	f001 f872 	bl	8009260 <__errno>
 800817c:	2316      	movs	r3, #22
 800817e:	6003      	str	r3, [r0, #0]
 8008180:	2000      	movs	r0, #0
 8008182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008186:	4834      	ldr	r0, [pc, #208]	@ (8008258 <_strtol_l.constprop.0+0xf0>)
 8008188:	460d      	mov	r5, r1
 800818a:	462a      	mov	r2, r5
 800818c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008190:	5d06      	ldrb	r6, [r0, r4]
 8008192:	f016 0608 	ands.w	r6, r6, #8
 8008196:	d1f8      	bne.n	800818a <_strtol_l.constprop.0+0x22>
 8008198:	2c2d      	cmp	r4, #45	@ 0x2d
 800819a:	d12d      	bne.n	80081f8 <_strtol_l.constprop.0+0x90>
 800819c:	782c      	ldrb	r4, [r5, #0]
 800819e:	2601      	movs	r6, #1
 80081a0:	1c95      	adds	r5, r2, #2
 80081a2:	f033 0210 	bics.w	r2, r3, #16
 80081a6:	d109      	bne.n	80081bc <_strtol_l.constprop.0+0x54>
 80081a8:	2c30      	cmp	r4, #48	@ 0x30
 80081aa:	d12a      	bne.n	8008202 <_strtol_l.constprop.0+0x9a>
 80081ac:	782a      	ldrb	r2, [r5, #0]
 80081ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80081b2:	2a58      	cmp	r2, #88	@ 0x58
 80081b4:	d125      	bne.n	8008202 <_strtol_l.constprop.0+0x9a>
 80081b6:	786c      	ldrb	r4, [r5, #1]
 80081b8:	2310      	movs	r3, #16
 80081ba:	3502      	adds	r5, #2
 80081bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80081c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80081c4:	2200      	movs	r2, #0
 80081c6:	fbbc f9f3 	udiv	r9, ip, r3
 80081ca:	4610      	mov	r0, r2
 80081cc:	fb03 ca19 	mls	sl, r3, r9, ip
 80081d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80081d4:	2f09      	cmp	r7, #9
 80081d6:	d81b      	bhi.n	8008210 <_strtol_l.constprop.0+0xa8>
 80081d8:	463c      	mov	r4, r7
 80081da:	42a3      	cmp	r3, r4
 80081dc:	dd27      	ble.n	800822e <_strtol_l.constprop.0+0xc6>
 80081de:	1c57      	adds	r7, r2, #1
 80081e0:	d007      	beq.n	80081f2 <_strtol_l.constprop.0+0x8a>
 80081e2:	4581      	cmp	r9, r0
 80081e4:	d320      	bcc.n	8008228 <_strtol_l.constprop.0+0xc0>
 80081e6:	d101      	bne.n	80081ec <_strtol_l.constprop.0+0x84>
 80081e8:	45a2      	cmp	sl, r4
 80081ea:	db1d      	blt.n	8008228 <_strtol_l.constprop.0+0xc0>
 80081ec:	fb00 4003 	mla	r0, r0, r3, r4
 80081f0:	2201      	movs	r2, #1
 80081f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081f6:	e7eb      	b.n	80081d0 <_strtol_l.constprop.0+0x68>
 80081f8:	2c2b      	cmp	r4, #43	@ 0x2b
 80081fa:	bf04      	itt	eq
 80081fc:	782c      	ldrbeq	r4, [r5, #0]
 80081fe:	1c95      	addeq	r5, r2, #2
 8008200:	e7cf      	b.n	80081a2 <_strtol_l.constprop.0+0x3a>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1da      	bne.n	80081bc <_strtol_l.constprop.0+0x54>
 8008206:	2c30      	cmp	r4, #48	@ 0x30
 8008208:	bf0c      	ite	eq
 800820a:	2308      	moveq	r3, #8
 800820c:	230a      	movne	r3, #10
 800820e:	e7d5      	b.n	80081bc <_strtol_l.constprop.0+0x54>
 8008210:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008214:	2f19      	cmp	r7, #25
 8008216:	d801      	bhi.n	800821c <_strtol_l.constprop.0+0xb4>
 8008218:	3c37      	subs	r4, #55	@ 0x37
 800821a:	e7de      	b.n	80081da <_strtol_l.constprop.0+0x72>
 800821c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008220:	2f19      	cmp	r7, #25
 8008222:	d804      	bhi.n	800822e <_strtol_l.constprop.0+0xc6>
 8008224:	3c57      	subs	r4, #87	@ 0x57
 8008226:	e7d8      	b.n	80081da <_strtol_l.constprop.0+0x72>
 8008228:	f04f 32ff 	mov.w	r2, #4294967295
 800822c:	e7e1      	b.n	80081f2 <_strtol_l.constprop.0+0x8a>
 800822e:	1c53      	adds	r3, r2, #1
 8008230:	d108      	bne.n	8008244 <_strtol_l.constprop.0+0xdc>
 8008232:	2322      	movs	r3, #34	@ 0x22
 8008234:	f8ce 3000 	str.w	r3, [lr]
 8008238:	4660      	mov	r0, ip
 800823a:	f1b8 0f00 	cmp.w	r8, #0
 800823e:	d0a0      	beq.n	8008182 <_strtol_l.constprop.0+0x1a>
 8008240:	1e69      	subs	r1, r5, #1
 8008242:	e006      	b.n	8008252 <_strtol_l.constprop.0+0xea>
 8008244:	b106      	cbz	r6, 8008248 <_strtol_l.constprop.0+0xe0>
 8008246:	4240      	negs	r0, r0
 8008248:	f1b8 0f00 	cmp.w	r8, #0
 800824c:	d099      	beq.n	8008182 <_strtol_l.constprop.0+0x1a>
 800824e:	2a00      	cmp	r2, #0
 8008250:	d1f6      	bne.n	8008240 <_strtol_l.constprop.0+0xd8>
 8008252:	f8c8 1000 	str.w	r1, [r8]
 8008256:	e794      	b.n	8008182 <_strtol_l.constprop.0+0x1a>
 8008258:	0800e769 	.word	0x0800e769

0800825c <_strtol_r>:
 800825c:	f7ff bf84 	b.w	8008168 <_strtol_l.constprop.0>

08008260 <strtol>:
 8008260:	4613      	mov	r3, r2
 8008262:	460a      	mov	r2, r1
 8008264:	4601      	mov	r1, r0
 8008266:	4802      	ldr	r0, [pc, #8]	@ (8008270 <strtol+0x10>)
 8008268:	6800      	ldr	r0, [r0, #0]
 800826a:	f7ff bf7d 	b.w	8008168 <_strtol_l.constprop.0>
 800826e:	bf00      	nop
 8008270:	20000344 	.word	0x20000344

08008274 <__cvt>:
 8008274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008278:	ec57 6b10 	vmov	r6, r7, d0
 800827c:	2f00      	cmp	r7, #0
 800827e:	460c      	mov	r4, r1
 8008280:	4619      	mov	r1, r3
 8008282:	463b      	mov	r3, r7
 8008284:	bfbb      	ittet	lt
 8008286:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800828a:	461f      	movlt	r7, r3
 800828c:	2300      	movge	r3, #0
 800828e:	232d      	movlt	r3, #45	@ 0x2d
 8008290:	700b      	strb	r3, [r1, #0]
 8008292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008294:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008298:	4691      	mov	r9, r2
 800829a:	f023 0820 	bic.w	r8, r3, #32
 800829e:	bfbc      	itt	lt
 80082a0:	4632      	movlt	r2, r6
 80082a2:	4616      	movlt	r6, r2
 80082a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80082a8:	d005      	beq.n	80082b6 <__cvt+0x42>
 80082aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80082ae:	d100      	bne.n	80082b2 <__cvt+0x3e>
 80082b0:	3401      	adds	r4, #1
 80082b2:	2102      	movs	r1, #2
 80082b4:	e000      	b.n	80082b8 <__cvt+0x44>
 80082b6:	2103      	movs	r1, #3
 80082b8:	ab03      	add	r3, sp, #12
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	ab02      	add	r3, sp, #8
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	ec47 6b10 	vmov	d0, r6, r7
 80082c4:	4653      	mov	r3, sl
 80082c6:	4622      	mov	r2, r4
 80082c8:	f001 f896 	bl	80093f8 <_dtoa_r>
 80082cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80082d0:	4605      	mov	r5, r0
 80082d2:	d119      	bne.n	8008308 <__cvt+0x94>
 80082d4:	f019 0f01 	tst.w	r9, #1
 80082d8:	d00e      	beq.n	80082f8 <__cvt+0x84>
 80082da:	eb00 0904 	add.w	r9, r0, r4
 80082de:	2200      	movs	r2, #0
 80082e0:	2300      	movs	r3, #0
 80082e2:	4630      	mov	r0, r6
 80082e4:	4639      	mov	r1, r7
 80082e6:	f7f8 fbff 	bl	8000ae8 <__aeabi_dcmpeq>
 80082ea:	b108      	cbz	r0, 80082f0 <__cvt+0x7c>
 80082ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80082f0:	2230      	movs	r2, #48	@ 0x30
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	454b      	cmp	r3, r9
 80082f6:	d31e      	bcc.n	8008336 <__cvt+0xc2>
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082fc:	1b5b      	subs	r3, r3, r5
 80082fe:	4628      	mov	r0, r5
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	b004      	add	sp, #16
 8008304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800830c:	eb00 0904 	add.w	r9, r0, r4
 8008310:	d1e5      	bne.n	80082de <__cvt+0x6a>
 8008312:	7803      	ldrb	r3, [r0, #0]
 8008314:	2b30      	cmp	r3, #48	@ 0x30
 8008316:	d10a      	bne.n	800832e <__cvt+0xba>
 8008318:	2200      	movs	r2, #0
 800831a:	2300      	movs	r3, #0
 800831c:	4630      	mov	r0, r6
 800831e:	4639      	mov	r1, r7
 8008320:	f7f8 fbe2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008324:	b918      	cbnz	r0, 800832e <__cvt+0xba>
 8008326:	f1c4 0401 	rsb	r4, r4, #1
 800832a:	f8ca 4000 	str.w	r4, [sl]
 800832e:	f8da 3000 	ldr.w	r3, [sl]
 8008332:	4499      	add	r9, r3
 8008334:	e7d3      	b.n	80082de <__cvt+0x6a>
 8008336:	1c59      	adds	r1, r3, #1
 8008338:	9103      	str	r1, [sp, #12]
 800833a:	701a      	strb	r2, [r3, #0]
 800833c:	e7d9      	b.n	80082f2 <__cvt+0x7e>

0800833e <__exponent>:
 800833e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008340:	2900      	cmp	r1, #0
 8008342:	bfba      	itte	lt
 8008344:	4249      	neglt	r1, r1
 8008346:	232d      	movlt	r3, #45	@ 0x2d
 8008348:	232b      	movge	r3, #43	@ 0x2b
 800834a:	2909      	cmp	r1, #9
 800834c:	7002      	strb	r2, [r0, #0]
 800834e:	7043      	strb	r3, [r0, #1]
 8008350:	dd29      	ble.n	80083a6 <__exponent+0x68>
 8008352:	f10d 0307 	add.w	r3, sp, #7
 8008356:	461d      	mov	r5, r3
 8008358:	270a      	movs	r7, #10
 800835a:	461a      	mov	r2, r3
 800835c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008360:	fb07 1416 	mls	r4, r7, r6, r1
 8008364:	3430      	adds	r4, #48	@ 0x30
 8008366:	f802 4c01 	strb.w	r4, [r2, #-1]
 800836a:	460c      	mov	r4, r1
 800836c:	2c63      	cmp	r4, #99	@ 0x63
 800836e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008372:	4631      	mov	r1, r6
 8008374:	dcf1      	bgt.n	800835a <__exponent+0x1c>
 8008376:	3130      	adds	r1, #48	@ 0x30
 8008378:	1e94      	subs	r4, r2, #2
 800837a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800837e:	1c41      	adds	r1, r0, #1
 8008380:	4623      	mov	r3, r4
 8008382:	42ab      	cmp	r3, r5
 8008384:	d30a      	bcc.n	800839c <__exponent+0x5e>
 8008386:	f10d 0309 	add.w	r3, sp, #9
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	42ac      	cmp	r4, r5
 800838e:	bf88      	it	hi
 8008390:	2300      	movhi	r3, #0
 8008392:	3302      	adds	r3, #2
 8008394:	4403      	add	r3, r0
 8008396:	1a18      	subs	r0, r3, r0
 8008398:	b003      	add	sp, #12
 800839a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80083a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80083a4:	e7ed      	b.n	8008382 <__exponent+0x44>
 80083a6:	2330      	movs	r3, #48	@ 0x30
 80083a8:	3130      	adds	r1, #48	@ 0x30
 80083aa:	7083      	strb	r3, [r0, #2]
 80083ac:	70c1      	strb	r1, [r0, #3]
 80083ae:	1d03      	adds	r3, r0, #4
 80083b0:	e7f1      	b.n	8008396 <__exponent+0x58>
	...

080083b4 <_printf_float>:
 80083b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b8:	b08d      	sub	sp, #52	@ 0x34
 80083ba:	460c      	mov	r4, r1
 80083bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80083c0:	4616      	mov	r6, r2
 80083c2:	461f      	mov	r7, r3
 80083c4:	4605      	mov	r5, r0
 80083c6:	f000 ff01 	bl	80091cc <_localeconv_r>
 80083ca:	6803      	ldr	r3, [r0, #0]
 80083cc:	9304      	str	r3, [sp, #16]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7f7 ff5e 	bl	8000290 <strlen>
 80083d4:	2300      	movs	r3, #0
 80083d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d8:	f8d8 3000 	ldr.w	r3, [r8]
 80083dc:	9005      	str	r0, [sp, #20]
 80083de:	3307      	adds	r3, #7
 80083e0:	f023 0307 	bic.w	r3, r3, #7
 80083e4:	f103 0208 	add.w	r2, r3, #8
 80083e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80083ec:	f8d4 b000 	ldr.w	fp, [r4]
 80083f0:	f8c8 2000 	str.w	r2, [r8]
 80083f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80083fc:	9307      	str	r3, [sp, #28]
 80083fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8008402:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800840a:	4b9c      	ldr	r3, [pc, #624]	@ (800867c <_printf_float+0x2c8>)
 800840c:	f04f 32ff 	mov.w	r2, #4294967295
 8008410:	f7f8 fb9c 	bl	8000b4c <__aeabi_dcmpun>
 8008414:	bb70      	cbnz	r0, 8008474 <_printf_float+0xc0>
 8008416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800841a:	4b98      	ldr	r3, [pc, #608]	@ (800867c <_printf_float+0x2c8>)
 800841c:	f04f 32ff 	mov.w	r2, #4294967295
 8008420:	f7f8 fb76 	bl	8000b10 <__aeabi_dcmple>
 8008424:	bb30      	cbnz	r0, 8008474 <_printf_float+0xc0>
 8008426:	2200      	movs	r2, #0
 8008428:	2300      	movs	r3, #0
 800842a:	4640      	mov	r0, r8
 800842c:	4649      	mov	r1, r9
 800842e:	f7f8 fb65 	bl	8000afc <__aeabi_dcmplt>
 8008432:	b110      	cbz	r0, 800843a <_printf_float+0x86>
 8008434:	232d      	movs	r3, #45	@ 0x2d
 8008436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800843a:	4a91      	ldr	r2, [pc, #580]	@ (8008680 <_printf_float+0x2cc>)
 800843c:	4b91      	ldr	r3, [pc, #580]	@ (8008684 <_printf_float+0x2d0>)
 800843e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008442:	bf94      	ite	ls
 8008444:	4690      	movls	r8, r2
 8008446:	4698      	movhi	r8, r3
 8008448:	2303      	movs	r3, #3
 800844a:	6123      	str	r3, [r4, #16]
 800844c:	f02b 0304 	bic.w	r3, fp, #4
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	f04f 0900 	mov.w	r9, #0
 8008456:	9700      	str	r7, [sp, #0]
 8008458:	4633      	mov	r3, r6
 800845a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800845c:	4621      	mov	r1, r4
 800845e:	4628      	mov	r0, r5
 8008460:	f000 f9d2 	bl	8008808 <_printf_common>
 8008464:	3001      	adds	r0, #1
 8008466:	f040 808d 	bne.w	8008584 <_printf_float+0x1d0>
 800846a:	f04f 30ff 	mov.w	r0, #4294967295
 800846e:	b00d      	add	sp, #52	@ 0x34
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008474:	4642      	mov	r2, r8
 8008476:	464b      	mov	r3, r9
 8008478:	4640      	mov	r0, r8
 800847a:	4649      	mov	r1, r9
 800847c:	f7f8 fb66 	bl	8000b4c <__aeabi_dcmpun>
 8008480:	b140      	cbz	r0, 8008494 <_printf_float+0xe0>
 8008482:	464b      	mov	r3, r9
 8008484:	2b00      	cmp	r3, #0
 8008486:	bfbc      	itt	lt
 8008488:	232d      	movlt	r3, #45	@ 0x2d
 800848a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800848e:	4a7e      	ldr	r2, [pc, #504]	@ (8008688 <_printf_float+0x2d4>)
 8008490:	4b7e      	ldr	r3, [pc, #504]	@ (800868c <_printf_float+0x2d8>)
 8008492:	e7d4      	b.n	800843e <_printf_float+0x8a>
 8008494:	6863      	ldr	r3, [r4, #4]
 8008496:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800849a:	9206      	str	r2, [sp, #24]
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	d13b      	bne.n	8008518 <_printf_float+0x164>
 80084a0:	2306      	movs	r3, #6
 80084a2:	6063      	str	r3, [r4, #4]
 80084a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80084a8:	2300      	movs	r3, #0
 80084aa:	6022      	str	r2, [r4, #0]
 80084ac:	9303      	str	r3, [sp, #12]
 80084ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80084b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80084b4:	ab09      	add	r3, sp, #36	@ 0x24
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	6861      	ldr	r1, [r4, #4]
 80084ba:	ec49 8b10 	vmov	d0, r8, r9
 80084be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80084c2:	4628      	mov	r0, r5
 80084c4:	f7ff fed6 	bl	8008274 <__cvt>
 80084c8:	9b06      	ldr	r3, [sp, #24]
 80084ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084cc:	2b47      	cmp	r3, #71	@ 0x47
 80084ce:	4680      	mov	r8, r0
 80084d0:	d129      	bne.n	8008526 <_printf_float+0x172>
 80084d2:	1cc8      	adds	r0, r1, #3
 80084d4:	db02      	blt.n	80084dc <_printf_float+0x128>
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	4299      	cmp	r1, r3
 80084da:	dd41      	ble.n	8008560 <_printf_float+0x1ac>
 80084dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80084e0:	fa5f fa8a 	uxtb.w	sl, sl
 80084e4:	3901      	subs	r1, #1
 80084e6:	4652      	mov	r2, sl
 80084e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80084ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80084ee:	f7ff ff26 	bl	800833e <__exponent>
 80084f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084f4:	1813      	adds	r3, r2, r0
 80084f6:	2a01      	cmp	r2, #1
 80084f8:	4681      	mov	r9, r0
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	dc02      	bgt.n	8008504 <_printf_float+0x150>
 80084fe:	6822      	ldr	r2, [r4, #0]
 8008500:	07d2      	lsls	r2, r2, #31
 8008502:	d501      	bpl.n	8008508 <_printf_float+0x154>
 8008504:	3301      	adds	r3, #1
 8008506:	6123      	str	r3, [r4, #16]
 8008508:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0a2      	beq.n	8008456 <_printf_float+0xa2>
 8008510:	232d      	movs	r3, #45	@ 0x2d
 8008512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008516:	e79e      	b.n	8008456 <_printf_float+0xa2>
 8008518:	9a06      	ldr	r2, [sp, #24]
 800851a:	2a47      	cmp	r2, #71	@ 0x47
 800851c:	d1c2      	bne.n	80084a4 <_printf_float+0xf0>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1c0      	bne.n	80084a4 <_printf_float+0xf0>
 8008522:	2301      	movs	r3, #1
 8008524:	e7bd      	b.n	80084a2 <_printf_float+0xee>
 8008526:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800852a:	d9db      	bls.n	80084e4 <_printf_float+0x130>
 800852c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008530:	d118      	bne.n	8008564 <_printf_float+0x1b0>
 8008532:	2900      	cmp	r1, #0
 8008534:	6863      	ldr	r3, [r4, #4]
 8008536:	dd0b      	ble.n	8008550 <_printf_float+0x19c>
 8008538:	6121      	str	r1, [r4, #16]
 800853a:	b913      	cbnz	r3, 8008542 <_printf_float+0x18e>
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	07d0      	lsls	r0, r2, #31
 8008540:	d502      	bpl.n	8008548 <_printf_float+0x194>
 8008542:	3301      	adds	r3, #1
 8008544:	440b      	add	r3, r1
 8008546:	6123      	str	r3, [r4, #16]
 8008548:	65a1      	str	r1, [r4, #88]	@ 0x58
 800854a:	f04f 0900 	mov.w	r9, #0
 800854e:	e7db      	b.n	8008508 <_printf_float+0x154>
 8008550:	b913      	cbnz	r3, 8008558 <_printf_float+0x1a4>
 8008552:	6822      	ldr	r2, [r4, #0]
 8008554:	07d2      	lsls	r2, r2, #31
 8008556:	d501      	bpl.n	800855c <_printf_float+0x1a8>
 8008558:	3302      	adds	r3, #2
 800855a:	e7f4      	b.n	8008546 <_printf_float+0x192>
 800855c:	2301      	movs	r3, #1
 800855e:	e7f2      	b.n	8008546 <_printf_float+0x192>
 8008560:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008566:	4299      	cmp	r1, r3
 8008568:	db05      	blt.n	8008576 <_printf_float+0x1c2>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	6121      	str	r1, [r4, #16]
 800856e:	07d8      	lsls	r0, r3, #31
 8008570:	d5ea      	bpl.n	8008548 <_printf_float+0x194>
 8008572:	1c4b      	adds	r3, r1, #1
 8008574:	e7e7      	b.n	8008546 <_printf_float+0x192>
 8008576:	2900      	cmp	r1, #0
 8008578:	bfd4      	ite	le
 800857a:	f1c1 0202 	rsble	r2, r1, #2
 800857e:	2201      	movgt	r2, #1
 8008580:	4413      	add	r3, r2
 8008582:	e7e0      	b.n	8008546 <_printf_float+0x192>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	055a      	lsls	r2, r3, #21
 8008588:	d407      	bmi.n	800859a <_printf_float+0x1e6>
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	4642      	mov	r2, r8
 800858e:	4631      	mov	r1, r6
 8008590:	4628      	mov	r0, r5
 8008592:	47b8      	blx	r7
 8008594:	3001      	adds	r0, #1
 8008596:	d12b      	bne.n	80085f0 <_printf_float+0x23c>
 8008598:	e767      	b.n	800846a <_printf_float+0xb6>
 800859a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800859e:	f240 80dd 	bls.w	800875c <_printf_float+0x3a8>
 80085a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80085a6:	2200      	movs	r2, #0
 80085a8:	2300      	movs	r3, #0
 80085aa:	f7f8 fa9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d033      	beq.n	800861a <_printf_float+0x266>
 80085b2:	4a37      	ldr	r2, [pc, #220]	@ (8008690 <_printf_float+0x2dc>)
 80085b4:	2301      	movs	r3, #1
 80085b6:	4631      	mov	r1, r6
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b8      	blx	r7
 80085bc:	3001      	adds	r0, #1
 80085be:	f43f af54 	beq.w	800846a <_printf_float+0xb6>
 80085c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80085c6:	4543      	cmp	r3, r8
 80085c8:	db02      	blt.n	80085d0 <_printf_float+0x21c>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	07d8      	lsls	r0, r3, #31
 80085ce:	d50f      	bpl.n	80085f0 <_printf_float+0x23c>
 80085d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	f43f af45 	beq.w	800846a <_printf_float+0xb6>
 80085e0:	f04f 0900 	mov.w	r9, #0
 80085e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80085e8:	f104 0a1a 	add.w	sl, r4, #26
 80085ec:	45c8      	cmp	r8, r9
 80085ee:	dc09      	bgt.n	8008604 <_printf_float+0x250>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	079b      	lsls	r3, r3, #30
 80085f4:	f100 8103 	bmi.w	80087fe <_printf_float+0x44a>
 80085f8:	68e0      	ldr	r0, [r4, #12]
 80085fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085fc:	4298      	cmp	r0, r3
 80085fe:	bfb8      	it	lt
 8008600:	4618      	movlt	r0, r3
 8008602:	e734      	b.n	800846e <_printf_float+0xba>
 8008604:	2301      	movs	r3, #1
 8008606:	4652      	mov	r2, sl
 8008608:	4631      	mov	r1, r6
 800860a:	4628      	mov	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	f43f af2b 	beq.w	800846a <_printf_float+0xb6>
 8008614:	f109 0901 	add.w	r9, r9, #1
 8008618:	e7e8      	b.n	80085ec <_printf_float+0x238>
 800861a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800861c:	2b00      	cmp	r3, #0
 800861e:	dc39      	bgt.n	8008694 <_printf_float+0x2e0>
 8008620:	4a1b      	ldr	r2, [pc, #108]	@ (8008690 <_printf_float+0x2dc>)
 8008622:	2301      	movs	r3, #1
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	f43f af1d 	beq.w	800846a <_printf_float+0xb6>
 8008630:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008634:	ea59 0303 	orrs.w	r3, r9, r3
 8008638:	d102      	bne.n	8008640 <_printf_float+0x28c>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	07d9      	lsls	r1, r3, #31
 800863e:	d5d7      	bpl.n	80085f0 <_printf_float+0x23c>
 8008640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008644:	4631      	mov	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	47b8      	blx	r7
 800864a:	3001      	adds	r0, #1
 800864c:	f43f af0d 	beq.w	800846a <_printf_float+0xb6>
 8008650:	f04f 0a00 	mov.w	sl, #0
 8008654:	f104 0b1a 	add.w	fp, r4, #26
 8008658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800865a:	425b      	negs	r3, r3
 800865c:	4553      	cmp	r3, sl
 800865e:	dc01      	bgt.n	8008664 <_printf_float+0x2b0>
 8008660:	464b      	mov	r3, r9
 8008662:	e793      	b.n	800858c <_printf_float+0x1d8>
 8008664:	2301      	movs	r3, #1
 8008666:	465a      	mov	r2, fp
 8008668:	4631      	mov	r1, r6
 800866a:	4628      	mov	r0, r5
 800866c:	47b8      	blx	r7
 800866e:	3001      	adds	r0, #1
 8008670:	f43f aefb 	beq.w	800846a <_printf_float+0xb6>
 8008674:	f10a 0a01 	add.w	sl, sl, #1
 8008678:	e7ee      	b.n	8008658 <_printf_float+0x2a4>
 800867a:	bf00      	nop
 800867c:	7fefffff 	.word	0x7fefffff
 8008680:	0800e869 	.word	0x0800e869
 8008684:	0800e86d 	.word	0x0800e86d
 8008688:	0800e871 	.word	0x0800e871
 800868c:	0800e875 	.word	0x0800e875
 8008690:	0800e879 	.word	0x0800e879
 8008694:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008696:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800869a:	4553      	cmp	r3, sl
 800869c:	bfa8      	it	ge
 800869e:	4653      	movge	r3, sl
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	4699      	mov	r9, r3
 80086a4:	dc36      	bgt.n	8008714 <_printf_float+0x360>
 80086a6:	f04f 0b00 	mov.w	fp, #0
 80086aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086ae:	f104 021a 	add.w	r2, r4, #26
 80086b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80086b4:	9306      	str	r3, [sp, #24]
 80086b6:	eba3 0309 	sub.w	r3, r3, r9
 80086ba:	455b      	cmp	r3, fp
 80086bc:	dc31      	bgt.n	8008722 <_printf_float+0x36e>
 80086be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c0:	459a      	cmp	sl, r3
 80086c2:	dc3a      	bgt.n	800873a <_printf_float+0x386>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	07da      	lsls	r2, r3, #31
 80086c8:	d437      	bmi.n	800873a <_printf_float+0x386>
 80086ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086cc:	ebaa 0903 	sub.w	r9, sl, r3
 80086d0:	9b06      	ldr	r3, [sp, #24]
 80086d2:	ebaa 0303 	sub.w	r3, sl, r3
 80086d6:	4599      	cmp	r9, r3
 80086d8:	bfa8      	it	ge
 80086da:	4699      	movge	r9, r3
 80086dc:	f1b9 0f00 	cmp.w	r9, #0
 80086e0:	dc33      	bgt.n	800874a <_printf_float+0x396>
 80086e2:	f04f 0800 	mov.w	r8, #0
 80086e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086ea:	f104 0b1a 	add.w	fp, r4, #26
 80086ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f0:	ebaa 0303 	sub.w	r3, sl, r3
 80086f4:	eba3 0309 	sub.w	r3, r3, r9
 80086f8:	4543      	cmp	r3, r8
 80086fa:	f77f af79 	ble.w	80085f0 <_printf_float+0x23c>
 80086fe:	2301      	movs	r3, #1
 8008700:	465a      	mov	r2, fp
 8008702:	4631      	mov	r1, r6
 8008704:	4628      	mov	r0, r5
 8008706:	47b8      	blx	r7
 8008708:	3001      	adds	r0, #1
 800870a:	f43f aeae 	beq.w	800846a <_printf_float+0xb6>
 800870e:	f108 0801 	add.w	r8, r8, #1
 8008712:	e7ec      	b.n	80086ee <_printf_float+0x33a>
 8008714:	4642      	mov	r2, r8
 8008716:	4631      	mov	r1, r6
 8008718:	4628      	mov	r0, r5
 800871a:	47b8      	blx	r7
 800871c:	3001      	adds	r0, #1
 800871e:	d1c2      	bne.n	80086a6 <_printf_float+0x2f2>
 8008720:	e6a3      	b.n	800846a <_printf_float+0xb6>
 8008722:	2301      	movs	r3, #1
 8008724:	4631      	mov	r1, r6
 8008726:	4628      	mov	r0, r5
 8008728:	9206      	str	r2, [sp, #24]
 800872a:	47b8      	blx	r7
 800872c:	3001      	adds	r0, #1
 800872e:	f43f ae9c 	beq.w	800846a <_printf_float+0xb6>
 8008732:	9a06      	ldr	r2, [sp, #24]
 8008734:	f10b 0b01 	add.w	fp, fp, #1
 8008738:	e7bb      	b.n	80086b2 <_printf_float+0x2fe>
 800873a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	d1c0      	bne.n	80086ca <_printf_float+0x316>
 8008748:	e68f      	b.n	800846a <_printf_float+0xb6>
 800874a:	9a06      	ldr	r2, [sp, #24]
 800874c:	464b      	mov	r3, r9
 800874e:	4442      	add	r2, r8
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	d1c3      	bne.n	80086e2 <_printf_float+0x32e>
 800875a:	e686      	b.n	800846a <_printf_float+0xb6>
 800875c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008760:	f1ba 0f01 	cmp.w	sl, #1
 8008764:	dc01      	bgt.n	800876a <_printf_float+0x3b6>
 8008766:	07db      	lsls	r3, r3, #31
 8008768:	d536      	bpl.n	80087d8 <_printf_float+0x424>
 800876a:	2301      	movs	r3, #1
 800876c:	4642      	mov	r2, r8
 800876e:	4631      	mov	r1, r6
 8008770:	4628      	mov	r0, r5
 8008772:	47b8      	blx	r7
 8008774:	3001      	adds	r0, #1
 8008776:	f43f ae78 	beq.w	800846a <_printf_float+0xb6>
 800877a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800877e:	4631      	mov	r1, r6
 8008780:	4628      	mov	r0, r5
 8008782:	47b8      	blx	r7
 8008784:	3001      	adds	r0, #1
 8008786:	f43f ae70 	beq.w	800846a <_printf_float+0xb6>
 800878a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800878e:	2200      	movs	r2, #0
 8008790:	2300      	movs	r3, #0
 8008792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008796:	f7f8 f9a7 	bl	8000ae8 <__aeabi_dcmpeq>
 800879a:	b9c0      	cbnz	r0, 80087ce <_printf_float+0x41a>
 800879c:	4653      	mov	r3, sl
 800879e:	f108 0201 	add.w	r2, r8, #1
 80087a2:	4631      	mov	r1, r6
 80087a4:	4628      	mov	r0, r5
 80087a6:	47b8      	blx	r7
 80087a8:	3001      	adds	r0, #1
 80087aa:	d10c      	bne.n	80087c6 <_printf_float+0x412>
 80087ac:	e65d      	b.n	800846a <_printf_float+0xb6>
 80087ae:	2301      	movs	r3, #1
 80087b0:	465a      	mov	r2, fp
 80087b2:	4631      	mov	r1, r6
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b8      	blx	r7
 80087b8:	3001      	adds	r0, #1
 80087ba:	f43f ae56 	beq.w	800846a <_printf_float+0xb6>
 80087be:	f108 0801 	add.w	r8, r8, #1
 80087c2:	45d0      	cmp	r8, sl
 80087c4:	dbf3      	blt.n	80087ae <_printf_float+0x3fa>
 80087c6:	464b      	mov	r3, r9
 80087c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80087cc:	e6df      	b.n	800858e <_printf_float+0x1da>
 80087ce:	f04f 0800 	mov.w	r8, #0
 80087d2:	f104 0b1a 	add.w	fp, r4, #26
 80087d6:	e7f4      	b.n	80087c2 <_printf_float+0x40e>
 80087d8:	2301      	movs	r3, #1
 80087da:	4642      	mov	r2, r8
 80087dc:	e7e1      	b.n	80087a2 <_printf_float+0x3ee>
 80087de:	2301      	movs	r3, #1
 80087e0:	464a      	mov	r2, r9
 80087e2:	4631      	mov	r1, r6
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b8      	blx	r7
 80087e8:	3001      	adds	r0, #1
 80087ea:	f43f ae3e 	beq.w	800846a <_printf_float+0xb6>
 80087ee:	f108 0801 	add.w	r8, r8, #1
 80087f2:	68e3      	ldr	r3, [r4, #12]
 80087f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087f6:	1a5b      	subs	r3, r3, r1
 80087f8:	4543      	cmp	r3, r8
 80087fa:	dcf0      	bgt.n	80087de <_printf_float+0x42a>
 80087fc:	e6fc      	b.n	80085f8 <_printf_float+0x244>
 80087fe:	f04f 0800 	mov.w	r8, #0
 8008802:	f104 0919 	add.w	r9, r4, #25
 8008806:	e7f4      	b.n	80087f2 <_printf_float+0x43e>

08008808 <_printf_common>:
 8008808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800880c:	4616      	mov	r6, r2
 800880e:	4698      	mov	r8, r3
 8008810:	688a      	ldr	r2, [r1, #8]
 8008812:	690b      	ldr	r3, [r1, #16]
 8008814:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008818:	4293      	cmp	r3, r2
 800881a:	bfb8      	it	lt
 800881c:	4613      	movlt	r3, r2
 800881e:	6033      	str	r3, [r6, #0]
 8008820:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008824:	4607      	mov	r7, r0
 8008826:	460c      	mov	r4, r1
 8008828:	b10a      	cbz	r2, 800882e <_printf_common+0x26>
 800882a:	3301      	adds	r3, #1
 800882c:	6033      	str	r3, [r6, #0]
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	0699      	lsls	r1, r3, #26
 8008832:	bf42      	ittt	mi
 8008834:	6833      	ldrmi	r3, [r6, #0]
 8008836:	3302      	addmi	r3, #2
 8008838:	6033      	strmi	r3, [r6, #0]
 800883a:	6825      	ldr	r5, [r4, #0]
 800883c:	f015 0506 	ands.w	r5, r5, #6
 8008840:	d106      	bne.n	8008850 <_printf_common+0x48>
 8008842:	f104 0a19 	add.w	sl, r4, #25
 8008846:	68e3      	ldr	r3, [r4, #12]
 8008848:	6832      	ldr	r2, [r6, #0]
 800884a:	1a9b      	subs	r3, r3, r2
 800884c:	42ab      	cmp	r3, r5
 800884e:	dc26      	bgt.n	800889e <_printf_common+0x96>
 8008850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008854:	6822      	ldr	r2, [r4, #0]
 8008856:	3b00      	subs	r3, #0
 8008858:	bf18      	it	ne
 800885a:	2301      	movne	r3, #1
 800885c:	0692      	lsls	r2, r2, #26
 800885e:	d42b      	bmi.n	80088b8 <_printf_common+0xb0>
 8008860:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008864:	4641      	mov	r1, r8
 8008866:	4638      	mov	r0, r7
 8008868:	47c8      	blx	r9
 800886a:	3001      	adds	r0, #1
 800886c:	d01e      	beq.n	80088ac <_printf_common+0xa4>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	6922      	ldr	r2, [r4, #16]
 8008872:	f003 0306 	and.w	r3, r3, #6
 8008876:	2b04      	cmp	r3, #4
 8008878:	bf02      	ittt	eq
 800887a:	68e5      	ldreq	r5, [r4, #12]
 800887c:	6833      	ldreq	r3, [r6, #0]
 800887e:	1aed      	subeq	r5, r5, r3
 8008880:	68a3      	ldr	r3, [r4, #8]
 8008882:	bf0c      	ite	eq
 8008884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008888:	2500      	movne	r5, #0
 800888a:	4293      	cmp	r3, r2
 800888c:	bfc4      	itt	gt
 800888e:	1a9b      	subgt	r3, r3, r2
 8008890:	18ed      	addgt	r5, r5, r3
 8008892:	2600      	movs	r6, #0
 8008894:	341a      	adds	r4, #26
 8008896:	42b5      	cmp	r5, r6
 8008898:	d11a      	bne.n	80088d0 <_printf_common+0xc8>
 800889a:	2000      	movs	r0, #0
 800889c:	e008      	b.n	80088b0 <_printf_common+0xa8>
 800889e:	2301      	movs	r3, #1
 80088a0:	4652      	mov	r2, sl
 80088a2:	4641      	mov	r1, r8
 80088a4:	4638      	mov	r0, r7
 80088a6:	47c8      	blx	r9
 80088a8:	3001      	adds	r0, #1
 80088aa:	d103      	bne.n	80088b4 <_printf_common+0xac>
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b4:	3501      	adds	r5, #1
 80088b6:	e7c6      	b.n	8008846 <_printf_common+0x3e>
 80088b8:	18e1      	adds	r1, r4, r3
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	2030      	movs	r0, #48	@ 0x30
 80088be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80088c2:	4422      	add	r2, r4
 80088c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80088c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088cc:	3302      	adds	r3, #2
 80088ce:	e7c7      	b.n	8008860 <_printf_common+0x58>
 80088d0:	2301      	movs	r3, #1
 80088d2:	4622      	mov	r2, r4
 80088d4:	4641      	mov	r1, r8
 80088d6:	4638      	mov	r0, r7
 80088d8:	47c8      	blx	r9
 80088da:	3001      	adds	r0, #1
 80088dc:	d0e6      	beq.n	80088ac <_printf_common+0xa4>
 80088de:	3601      	adds	r6, #1
 80088e0:	e7d9      	b.n	8008896 <_printf_common+0x8e>
	...

080088e4 <_printf_i>:
 80088e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	7e0f      	ldrb	r7, [r1, #24]
 80088ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088ec:	2f78      	cmp	r7, #120	@ 0x78
 80088ee:	4691      	mov	r9, r2
 80088f0:	4680      	mov	r8, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	469a      	mov	sl, r3
 80088f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088fa:	d807      	bhi.n	800890c <_printf_i+0x28>
 80088fc:	2f62      	cmp	r7, #98	@ 0x62
 80088fe:	d80a      	bhi.n	8008916 <_printf_i+0x32>
 8008900:	2f00      	cmp	r7, #0
 8008902:	f000 80d2 	beq.w	8008aaa <_printf_i+0x1c6>
 8008906:	2f58      	cmp	r7, #88	@ 0x58
 8008908:	f000 80b9 	beq.w	8008a7e <_printf_i+0x19a>
 800890c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008910:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008914:	e03a      	b.n	800898c <_printf_i+0xa8>
 8008916:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800891a:	2b15      	cmp	r3, #21
 800891c:	d8f6      	bhi.n	800890c <_printf_i+0x28>
 800891e:	a101      	add	r1, pc, #4	@ (adr r1, 8008924 <_printf_i+0x40>)
 8008920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008924:	0800897d 	.word	0x0800897d
 8008928:	08008991 	.word	0x08008991
 800892c:	0800890d 	.word	0x0800890d
 8008930:	0800890d 	.word	0x0800890d
 8008934:	0800890d 	.word	0x0800890d
 8008938:	0800890d 	.word	0x0800890d
 800893c:	08008991 	.word	0x08008991
 8008940:	0800890d 	.word	0x0800890d
 8008944:	0800890d 	.word	0x0800890d
 8008948:	0800890d 	.word	0x0800890d
 800894c:	0800890d 	.word	0x0800890d
 8008950:	08008a91 	.word	0x08008a91
 8008954:	080089bb 	.word	0x080089bb
 8008958:	08008a4b 	.word	0x08008a4b
 800895c:	0800890d 	.word	0x0800890d
 8008960:	0800890d 	.word	0x0800890d
 8008964:	08008ab3 	.word	0x08008ab3
 8008968:	0800890d 	.word	0x0800890d
 800896c:	080089bb 	.word	0x080089bb
 8008970:	0800890d 	.word	0x0800890d
 8008974:	0800890d 	.word	0x0800890d
 8008978:	08008a53 	.word	0x08008a53
 800897c:	6833      	ldr	r3, [r6, #0]
 800897e:	1d1a      	adds	r2, r3, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6032      	str	r2, [r6, #0]
 8008984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008988:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800898c:	2301      	movs	r3, #1
 800898e:	e09d      	b.n	8008acc <_printf_i+0x1e8>
 8008990:	6833      	ldr	r3, [r6, #0]
 8008992:	6820      	ldr	r0, [r4, #0]
 8008994:	1d19      	adds	r1, r3, #4
 8008996:	6031      	str	r1, [r6, #0]
 8008998:	0606      	lsls	r6, r0, #24
 800899a:	d501      	bpl.n	80089a0 <_printf_i+0xbc>
 800899c:	681d      	ldr	r5, [r3, #0]
 800899e:	e003      	b.n	80089a8 <_printf_i+0xc4>
 80089a0:	0645      	lsls	r5, r0, #25
 80089a2:	d5fb      	bpl.n	800899c <_printf_i+0xb8>
 80089a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80089a8:	2d00      	cmp	r5, #0
 80089aa:	da03      	bge.n	80089b4 <_printf_i+0xd0>
 80089ac:	232d      	movs	r3, #45	@ 0x2d
 80089ae:	426d      	negs	r5, r5
 80089b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089b4:	4859      	ldr	r0, [pc, #356]	@ (8008b1c <_printf_i+0x238>)
 80089b6:	230a      	movs	r3, #10
 80089b8:	e011      	b.n	80089de <_printf_i+0xfa>
 80089ba:	6821      	ldr	r1, [r4, #0]
 80089bc:	6833      	ldr	r3, [r6, #0]
 80089be:	0608      	lsls	r0, r1, #24
 80089c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80089c4:	d402      	bmi.n	80089cc <_printf_i+0xe8>
 80089c6:	0649      	lsls	r1, r1, #25
 80089c8:	bf48      	it	mi
 80089ca:	b2ad      	uxthmi	r5, r5
 80089cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80089ce:	4853      	ldr	r0, [pc, #332]	@ (8008b1c <_printf_i+0x238>)
 80089d0:	6033      	str	r3, [r6, #0]
 80089d2:	bf14      	ite	ne
 80089d4:	230a      	movne	r3, #10
 80089d6:	2308      	moveq	r3, #8
 80089d8:	2100      	movs	r1, #0
 80089da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089de:	6866      	ldr	r6, [r4, #4]
 80089e0:	60a6      	str	r6, [r4, #8]
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	bfa2      	ittt	ge
 80089e6:	6821      	ldrge	r1, [r4, #0]
 80089e8:	f021 0104 	bicge.w	r1, r1, #4
 80089ec:	6021      	strge	r1, [r4, #0]
 80089ee:	b90d      	cbnz	r5, 80089f4 <_printf_i+0x110>
 80089f0:	2e00      	cmp	r6, #0
 80089f2:	d04b      	beq.n	8008a8c <_printf_i+0x1a8>
 80089f4:	4616      	mov	r6, r2
 80089f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80089fa:	fb03 5711 	mls	r7, r3, r1, r5
 80089fe:	5dc7      	ldrb	r7, [r0, r7]
 8008a00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a04:	462f      	mov	r7, r5
 8008a06:	42bb      	cmp	r3, r7
 8008a08:	460d      	mov	r5, r1
 8008a0a:	d9f4      	bls.n	80089f6 <_printf_i+0x112>
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d10b      	bne.n	8008a28 <_printf_i+0x144>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	07df      	lsls	r7, r3, #31
 8008a14:	d508      	bpl.n	8008a28 <_printf_i+0x144>
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	6861      	ldr	r1, [r4, #4]
 8008a1a:	4299      	cmp	r1, r3
 8008a1c:	bfde      	ittt	le
 8008a1e:	2330      	movle	r3, #48	@ 0x30
 8008a20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a28:	1b92      	subs	r2, r2, r6
 8008a2a:	6122      	str	r2, [r4, #16]
 8008a2c:	f8cd a000 	str.w	sl, [sp]
 8008a30:	464b      	mov	r3, r9
 8008a32:	aa03      	add	r2, sp, #12
 8008a34:	4621      	mov	r1, r4
 8008a36:	4640      	mov	r0, r8
 8008a38:	f7ff fee6 	bl	8008808 <_printf_common>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d14a      	bne.n	8008ad6 <_printf_i+0x1f2>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	b004      	add	sp, #16
 8008a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	f043 0320 	orr.w	r3, r3, #32
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	4833      	ldr	r0, [pc, #204]	@ (8008b20 <_printf_i+0x23c>)
 8008a54:	2778      	movs	r7, #120	@ 0x78
 8008a56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	6831      	ldr	r1, [r6, #0]
 8008a5e:	061f      	lsls	r7, r3, #24
 8008a60:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a64:	d402      	bmi.n	8008a6c <_printf_i+0x188>
 8008a66:	065f      	lsls	r7, r3, #25
 8008a68:	bf48      	it	mi
 8008a6a:	b2ad      	uxthmi	r5, r5
 8008a6c:	6031      	str	r1, [r6, #0]
 8008a6e:	07d9      	lsls	r1, r3, #31
 8008a70:	bf44      	itt	mi
 8008a72:	f043 0320 	orrmi.w	r3, r3, #32
 8008a76:	6023      	strmi	r3, [r4, #0]
 8008a78:	b11d      	cbz	r5, 8008a82 <_printf_i+0x19e>
 8008a7a:	2310      	movs	r3, #16
 8008a7c:	e7ac      	b.n	80089d8 <_printf_i+0xf4>
 8008a7e:	4827      	ldr	r0, [pc, #156]	@ (8008b1c <_printf_i+0x238>)
 8008a80:	e7e9      	b.n	8008a56 <_printf_i+0x172>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	f023 0320 	bic.w	r3, r3, #32
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	e7f6      	b.n	8008a7a <_printf_i+0x196>
 8008a8c:	4616      	mov	r6, r2
 8008a8e:	e7bd      	b.n	8008a0c <_printf_i+0x128>
 8008a90:	6833      	ldr	r3, [r6, #0]
 8008a92:	6825      	ldr	r5, [r4, #0]
 8008a94:	6961      	ldr	r1, [r4, #20]
 8008a96:	1d18      	adds	r0, r3, #4
 8008a98:	6030      	str	r0, [r6, #0]
 8008a9a:	062e      	lsls	r6, r5, #24
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	d501      	bpl.n	8008aa4 <_printf_i+0x1c0>
 8008aa0:	6019      	str	r1, [r3, #0]
 8008aa2:	e002      	b.n	8008aaa <_printf_i+0x1c6>
 8008aa4:	0668      	lsls	r0, r5, #25
 8008aa6:	d5fb      	bpl.n	8008aa0 <_printf_i+0x1bc>
 8008aa8:	8019      	strh	r1, [r3, #0]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6123      	str	r3, [r4, #16]
 8008aae:	4616      	mov	r6, r2
 8008ab0:	e7bc      	b.n	8008a2c <_printf_i+0x148>
 8008ab2:	6833      	ldr	r3, [r6, #0]
 8008ab4:	1d1a      	adds	r2, r3, #4
 8008ab6:	6032      	str	r2, [r6, #0]
 8008ab8:	681e      	ldr	r6, [r3, #0]
 8008aba:	6862      	ldr	r2, [r4, #4]
 8008abc:	2100      	movs	r1, #0
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7f7 fb96 	bl	80001f0 <memchr>
 8008ac4:	b108      	cbz	r0, 8008aca <_printf_i+0x1e6>
 8008ac6:	1b80      	subs	r0, r0, r6
 8008ac8:	6060      	str	r0, [r4, #4]
 8008aca:	6863      	ldr	r3, [r4, #4]
 8008acc:	6123      	str	r3, [r4, #16]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ad4:	e7aa      	b.n	8008a2c <_printf_i+0x148>
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	4632      	mov	r2, r6
 8008ada:	4649      	mov	r1, r9
 8008adc:	4640      	mov	r0, r8
 8008ade:	47d0      	blx	sl
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d0ad      	beq.n	8008a40 <_printf_i+0x15c>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	079b      	lsls	r3, r3, #30
 8008ae8:	d413      	bmi.n	8008b12 <_printf_i+0x22e>
 8008aea:	68e0      	ldr	r0, [r4, #12]
 8008aec:	9b03      	ldr	r3, [sp, #12]
 8008aee:	4298      	cmp	r0, r3
 8008af0:	bfb8      	it	lt
 8008af2:	4618      	movlt	r0, r3
 8008af4:	e7a6      	b.n	8008a44 <_printf_i+0x160>
 8008af6:	2301      	movs	r3, #1
 8008af8:	4632      	mov	r2, r6
 8008afa:	4649      	mov	r1, r9
 8008afc:	4640      	mov	r0, r8
 8008afe:	47d0      	blx	sl
 8008b00:	3001      	adds	r0, #1
 8008b02:	d09d      	beq.n	8008a40 <_printf_i+0x15c>
 8008b04:	3501      	adds	r5, #1
 8008b06:	68e3      	ldr	r3, [r4, #12]
 8008b08:	9903      	ldr	r1, [sp, #12]
 8008b0a:	1a5b      	subs	r3, r3, r1
 8008b0c:	42ab      	cmp	r3, r5
 8008b0e:	dcf2      	bgt.n	8008af6 <_printf_i+0x212>
 8008b10:	e7eb      	b.n	8008aea <_printf_i+0x206>
 8008b12:	2500      	movs	r5, #0
 8008b14:	f104 0619 	add.w	r6, r4, #25
 8008b18:	e7f5      	b.n	8008b06 <_printf_i+0x222>
 8008b1a:	bf00      	nop
 8008b1c:	0800e87b 	.word	0x0800e87b
 8008b20:	0800e88c 	.word	0x0800e88c

08008b24 <_scanf_float>:
 8008b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	b087      	sub	sp, #28
 8008b2a:	4617      	mov	r7, r2
 8008b2c:	9303      	str	r3, [sp, #12]
 8008b2e:	688b      	ldr	r3, [r1, #8]
 8008b30:	1e5a      	subs	r2, r3, #1
 8008b32:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008b36:	bf81      	itttt	hi
 8008b38:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008b3c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008b40:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008b44:	608b      	strhi	r3, [r1, #8]
 8008b46:	680b      	ldr	r3, [r1, #0]
 8008b48:	460a      	mov	r2, r1
 8008b4a:	f04f 0500 	mov.w	r5, #0
 8008b4e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008b52:	f842 3b1c 	str.w	r3, [r2], #28
 8008b56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b5a:	4680      	mov	r8, r0
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	bf98      	it	ls
 8008b60:	f04f 0b00 	movls.w	fp, #0
 8008b64:	9201      	str	r2, [sp, #4]
 8008b66:	4616      	mov	r6, r2
 8008b68:	46aa      	mov	sl, r5
 8008b6a:	46a9      	mov	r9, r5
 8008b6c:	9502      	str	r5, [sp, #8]
 8008b6e:	68a2      	ldr	r2, [r4, #8]
 8008b70:	b152      	cbz	r2, 8008b88 <_scanf_float+0x64>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	2b4e      	cmp	r3, #78	@ 0x4e
 8008b78:	d864      	bhi.n	8008c44 <_scanf_float+0x120>
 8008b7a:	2b40      	cmp	r3, #64	@ 0x40
 8008b7c:	d83c      	bhi.n	8008bf8 <_scanf_float+0xd4>
 8008b7e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008b82:	b2c8      	uxtb	r0, r1
 8008b84:	280e      	cmp	r0, #14
 8008b86:	d93a      	bls.n	8008bfe <_scanf_float+0xda>
 8008b88:	f1b9 0f00 	cmp.w	r9, #0
 8008b8c:	d003      	beq.n	8008b96 <_scanf_float+0x72>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b9a:	f1ba 0f01 	cmp.w	sl, #1
 8008b9e:	f200 8117 	bhi.w	8008dd0 <_scanf_float+0x2ac>
 8008ba2:	9b01      	ldr	r3, [sp, #4]
 8008ba4:	429e      	cmp	r6, r3
 8008ba6:	f200 8108 	bhi.w	8008dba <_scanf_float+0x296>
 8008baa:	2001      	movs	r0, #1
 8008bac:	b007      	add	sp, #28
 8008bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008bb6:	2a0d      	cmp	r2, #13
 8008bb8:	d8e6      	bhi.n	8008b88 <_scanf_float+0x64>
 8008bba:	a101      	add	r1, pc, #4	@ (adr r1, 8008bc0 <_scanf_float+0x9c>)
 8008bbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008bc0:	08008d07 	.word	0x08008d07
 8008bc4:	08008b89 	.word	0x08008b89
 8008bc8:	08008b89 	.word	0x08008b89
 8008bcc:	08008b89 	.word	0x08008b89
 8008bd0:	08008d67 	.word	0x08008d67
 8008bd4:	08008d3f 	.word	0x08008d3f
 8008bd8:	08008b89 	.word	0x08008b89
 8008bdc:	08008b89 	.word	0x08008b89
 8008be0:	08008d15 	.word	0x08008d15
 8008be4:	08008b89 	.word	0x08008b89
 8008be8:	08008b89 	.word	0x08008b89
 8008bec:	08008b89 	.word	0x08008b89
 8008bf0:	08008b89 	.word	0x08008b89
 8008bf4:	08008ccd 	.word	0x08008ccd
 8008bf8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008bfc:	e7db      	b.n	8008bb6 <_scanf_float+0x92>
 8008bfe:	290e      	cmp	r1, #14
 8008c00:	d8c2      	bhi.n	8008b88 <_scanf_float+0x64>
 8008c02:	a001      	add	r0, pc, #4	@ (adr r0, 8008c08 <_scanf_float+0xe4>)
 8008c04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c08:	08008cbd 	.word	0x08008cbd
 8008c0c:	08008b89 	.word	0x08008b89
 8008c10:	08008cbd 	.word	0x08008cbd
 8008c14:	08008d53 	.word	0x08008d53
 8008c18:	08008b89 	.word	0x08008b89
 8008c1c:	08008c65 	.word	0x08008c65
 8008c20:	08008ca3 	.word	0x08008ca3
 8008c24:	08008ca3 	.word	0x08008ca3
 8008c28:	08008ca3 	.word	0x08008ca3
 8008c2c:	08008ca3 	.word	0x08008ca3
 8008c30:	08008ca3 	.word	0x08008ca3
 8008c34:	08008ca3 	.word	0x08008ca3
 8008c38:	08008ca3 	.word	0x08008ca3
 8008c3c:	08008ca3 	.word	0x08008ca3
 8008c40:	08008ca3 	.word	0x08008ca3
 8008c44:	2b6e      	cmp	r3, #110	@ 0x6e
 8008c46:	d809      	bhi.n	8008c5c <_scanf_float+0x138>
 8008c48:	2b60      	cmp	r3, #96	@ 0x60
 8008c4a:	d8b2      	bhi.n	8008bb2 <_scanf_float+0x8e>
 8008c4c:	2b54      	cmp	r3, #84	@ 0x54
 8008c4e:	d07b      	beq.n	8008d48 <_scanf_float+0x224>
 8008c50:	2b59      	cmp	r3, #89	@ 0x59
 8008c52:	d199      	bne.n	8008b88 <_scanf_float+0x64>
 8008c54:	2d07      	cmp	r5, #7
 8008c56:	d197      	bne.n	8008b88 <_scanf_float+0x64>
 8008c58:	2508      	movs	r5, #8
 8008c5a:	e02c      	b.n	8008cb6 <_scanf_float+0x192>
 8008c5c:	2b74      	cmp	r3, #116	@ 0x74
 8008c5e:	d073      	beq.n	8008d48 <_scanf_float+0x224>
 8008c60:	2b79      	cmp	r3, #121	@ 0x79
 8008c62:	e7f6      	b.n	8008c52 <_scanf_float+0x12e>
 8008c64:	6821      	ldr	r1, [r4, #0]
 8008c66:	05c8      	lsls	r0, r1, #23
 8008c68:	d51b      	bpl.n	8008ca2 <_scanf_float+0x17e>
 8008c6a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008c6e:	6021      	str	r1, [r4, #0]
 8008c70:	f109 0901 	add.w	r9, r9, #1
 8008c74:	f1bb 0f00 	cmp.w	fp, #0
 8008c78:	d003      	beq.n	8008c82 <_scanf_float+0x15e>
 8008c7a:	3201      	adds	r2, #1
 8008c7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c80:	60a2      	str	r2, [r4, #8]
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	60a3      	str	r3, [r4, #8]
 8008c88:	6923      	ldr	r3, [r4, #16]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	6123      	str	r3, [r4, #16]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	607b      	str	r3, [r7, #4]
 8008c96:	f340 8087 	ble.w	8008da8 <_scanf_float+0x284>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	e765      	b.n	8008b6e <_scanf_float+0x4a>
 8008ca2:	eb1a 0105 	adds.w	r1, sl, r5
 8008ca6:	f47f af6f 	bne.w	8008b88 <_scanf_float+0x64>
 8008caa:	6822      	ldr	r2, [r4, #0]
 8008cac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008cb0:	6022      	str	r2, [r4, #0]
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	468a      	mov	sl, r1
 8008cb6:	f806 3b01 	strb.w	r3, [r6], #1
 8008cba:	e7e2      	b.n	8008c82 <_scanf_float+0x15e>
 8008cbc:	6822      	ldr	r2, [r4, #0]
 8008cbe:	0610      	lsls	r0, r2, #24
 8008cc0:	f57f af62 	bpl.w	8008b88 <_scanf_float+0x64>
 8008cc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008cc8:	6022      	str	r2, [r4, #0]
 8008cca:	e7f4      	b.n	8008cb6 <_scanf_float+0x192>
 8008ccc:	f1ba 0f00 	cmp.w	sl, #0
 8008cd0:	d10e      	bne.n	8008cf0 <_scanf_float+0x1cc>
 8008cd2:	f1b9 0f00 	cmp.w	r9, #0
 8008cd6:	d10e      	bne.n	8008cf6 <_scanf_float+0x1d2>
 8008cd8:	6822      	ldr	r2, [r4, #0]
 8008cda:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008cde:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008ce2:	d108      	bne.n	8008cf6 <_scanf_float+0x1d2>
 8008ce4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ce8:	6022      	str	r2, [r4, #0]
 8008cea:	f04f 0a01 	mov.w	sl, #1
 8008cee:	e7e2      	b.n	8008cb6 <_scanf_float+0x192>
 8008cf0:	f1ba 0f02 	cmp.w	sl, #2
 8008cf4:	d055      	beq.n	8008da2 <_scanf_float+0x27e>
 8008cf6:	2d01      	cmp	r5, #1
 8008cf8:	d002      	beq.n	8008d00 <_scanf_float+0x1dc>
 8008cfa:	2d04      	cmp	r5, #4
 8008cfc:	f47f af44 	bne.w	8008b88 <_scanf_float+0x64>
 8008d00:	3501      	adds	r5, #1
 8008d02:	b2ed      	uxtb	r5, r5
 8008d04:	e7d7      	b.n	8008cb6 <_scanf_float+0x192>
 8008d06:	f1ba 0f01 	cmp.w	sl, #1
 8008d0a:	f47f af3d 	bne.w	8008b88 <_scanf_float+0x64>
 8008d0e:	f04f 0a02 	mov.w	sl, #2
 8008d12:	e7d0      	b.n	8008cb6 <_scanf_float+0x192>
 8008d14:	b97d      	cbnz	r5, 8008d36 <_scanf_float+0x212>
 8008d16:	f1b9 0f00 	cmp.w	r9, #0
 8008d1a:	f47f af38 	bne.w	8008b8e <_scanf_float+0x6a>
 8008d1e:	6822      	ldr	r2, [r4, #0]
 8008d20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d28:	f040 8108 	bne.w	8008f3c <_scanf_float+0x418>
 8008d2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d30:	6022      	str	r2, [r4, #0]
 8008d32:	2501      	movs	r5, #1
 8008d34:	e7bf      	b.n	8008cb6 <_scanf_float+0x192>
 8008d36:	2d03      	cmp	r5, #3
 8008d38:	d0e2      	beq.n	8008d00 <_scanf_float+0x1dc>
 8008d3a:	2d05      	cmp	r5, #5
 8008d3c:	e7de      	b.n	8008cfc <_scanf_float+0x1d8>
 8008d3e:	2d02      	cmp	r5, #2
 8008d40:	f47f af22 	bne.w	8008b88 <_scanf_float+0x64>
 8008d44:	2503      	movs	r5, #3
 8008d46:	e7b6      	b.n	8008cb6 <_scanf_float+0x192>
 8008d48:	2d06      	cmp	r5, #6
 8008d4a:	f47f af1d 	bne.w	8008b88 <_scanf_float+0x64>
 8008d4e:	2507      	movs	r5, #7
 8008d50:	e7b1      	b.n	8008cb6 <_scanf_float+0x192>
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	0591      	lsls	r1, r2, #22
 8008d56:	f57f af17 	bpl.w	8008b88 <_scanf_float+0x64>
 8008d5a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008d5e:	6022      	str	r2, [r4, #0]
 8008d60:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d64:	e7a7      	b.n	8008cb6 <_scanf_float+0x192>
 8008d66:	6822      	ldr	r2, [r4, #0]
 8008d68:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008d6c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008d70:	d006      	beq.n	8008d80 <_scanf_float+0x25c>
 8008d72:	0550      	lsls	r0, r2, #21
 8008d74:	f57f af08 	bpl.w	8008b88 <_scanf_float+0x64>
 8008d78:	f1b9 0f00 	cmp.w	r9, #0
 8008d7c:	f000 80de 	beq.w	8008f3c <_scanf_float+0x418>
 8008d80:	0591      	lsls	r1, r2, #22
 8008d82:	bf58      	it	pl
 8008d84:	9902      	ldrpl	r1, [sp, #8]
 8008d86:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d8a:	bf58      	it	pl
 8008d8c:	eba9 0101 	subpl.w	r1, r9, r1
 8008d90:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008d94:	bf58      	it	pl
 8008d96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d9a:	6022      	str	r2, [r4, #0]
 8008d9c:	f04f 0900 	mov.w	r9, #0
 8008da0:	e789      	b.n	8008cb6 <_scanf_float+0x192>
 8008da2:	f04f 0a03 	mov.w	sl, #3
 8008da6:	e786      	b.n	8008cb6 <_scanf_float+0x192>
 8008da8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008dac:	4639      	mov	r1, r7
 8008dae:	4640      	mov	r0, r8
 8008db0:	4798      	blx	r3
 8008db2:	2800      	cmp	r0, #0
 8008db4:	f43f aedb 	beq.w	8008b6e <_scanf_float+0x4a>
 8008db8:	e6e6      	b.n	8008b88 <_scanf_float+0x64>
 8008dba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dc2:	463a      	mov	r2, r7
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	4798      	blx	r3
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	e6e8      	b.n	8008ba2 <_scanf_float+0x7e>
 8008dd0:	1e6b      	subs	r3, r5, #1
 8008dd2:	2b06      	cmp	r3, #6
 8008dd4:	d824      	bhi.n	8008e20 <_scanf_float+0x2fc>
 8008dd6:	2d02      	cmp	r5, #2
 8008dd8:	d836      	bhi.n	8008e48 <_scanf_float+0x324>
 8008dda:	9b01      	ldr	r3, [sp, #4]
 8008ddc:	429e      	cmp	r6, r3
 8008dde:	f67f aee4 	bls.w	8008baa <_scanf_float+0x86>
 8008de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008de6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dea:	463a      	mov	r2, r7
 8008dec:	4640      	mov	r0, r8
 8008dee:	4798      	blx	r3
 8008df0:	6923      	ldr	r3, [r4, #16]
 8008df2:	3b01      	subs	r3, #1
 8008df4:	6123      	str	r3, [r4, #16]
 8008df6:	e7f0      	b.n	8008dda <_scanf_float+0x2b6>
 8008df8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dfc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008e00:	463a      	mov	r2, r7
 8008e02:	4640      	mov	r0, r8
 8008e04:	4798      	blx	r3
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	6123      	str	r3, [r4, #16]
 8008e0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e10:	fa5f fa8a 	uxtb.w	sl, sl
 8008e14:	f1ba 0f02 	cmp.w	sl, #2
 8008e18:	d1ee      	bne.n	8008df8 <_scanf_float+0x2d4>
 8008e1a:	3d03      	subs	r5, #3
 8008e1c:	b2ed      	uxtb	r5, r5
 8008e1e:	1b76      	subs	r6, r6, r5
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	05da      	lsls	r2, r3, #23
 8008e24:	d530      	bpl.n	8008e88 <_scanf_float+0x364>
 8008e26:	055b      	lsls	r3, r3, #21
 8008e28:	d511      	bpl.n	8008e4e <_scanf_float+0x32a>
 8008e2a:	9b01      	ldr	r3, [sp, #4]
 8008e2c:	429e      	cmp	r6, r3
 8008e2e:	f67f aebc 	bls.w	8008baa <_scanf_float+0x86>
 8008e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e3a:	463a      	mov	r2, r7
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	4798      	blx	r3
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	6123      	str	r3, [r4, #16]
 8008e46:	e7f0      	b.n	8008e2a <_scanf_float+0x306>
 8008e48:	46aa      	mov	sl, r5
 8008e4a:	46b3      	mov	fp, r6
 8008e4c:	e7de      	b.n	8008e0c <_scanf_float+0x2e8>
 8008e4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	2965      	cmp	r1, #101	@ 0x65
 8008e56:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e5a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	d00c      	beq.n	8008e7c <_scanf_float+0x358>
 8008e62:	2945      	cmp	r1, #69	@ 0x45
 8008e64:	d00a      	beq.n	8008e7c <_scanf_float+0x358>
 8008e66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e6a:	463a      	mov	r2, r7
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	4798      	blx	r3
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	1eb5      	subs	r5, r6, #2
 8008e7a:	6123      	str	r3, [r4, #16]
 8008e7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e80:	463a      	mov	r2, r7
 8008e82:	4640      	mov	r0, r8
 8008e84:	4798      	blx	r3
 8008e86:	462e      	mov	r6, r5
 8008e88:	6822      	ldr	r2, [r4, #0]
 8008e8a:	f012 0210 	ands.w	r2, r2, #16
 8008e8e:	d001      	beq.n	8008e94 <_scanf_float+0x370>
 8008e90:	2000      	movs	r0, #0
 8008e92:	e68b      	b.n	8008bac <_scanf_float+0x88>
 8008e94:	7032      	strb	r2, [r6, #0]
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ea0:	d11c      	bne.n	8008edc <_scanf_float+0x3b8>
 8008ea2:	9b02      	ldr	r3, [sp, #8]
 8008ea4:	454b      	cmp	r3, r9
 8008ea6:	eba3 0209 	sub.w	r2, r3, r9
 8008eaa:	d123      	bne.n	8008ef4 <_scanf_float+0x3d0>
 8008eac:	9901      	ldr	r1, [sp, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	f002 fc19 	bl	800b6e8 <_strtod_r>
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	6821      	ldr	r1, [r4, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f011 0f02 	tst.w	r1, #2
 8008ec0:	ec57 6b10 	vmov	r6, r7, d0
 8008ec4:	f103 0204 	add.w	r2, r3, #4
 8008ec8:	d01f      	beq.n	8008f0a <_scanf_float+0x3e6>
 8008eca:	9903      	ldr	r1, [sp, #12]
 8008ecc:	600a      	str	r2, [r1, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	e9c3 6700 	strd	r6, r7, [r3]
 8008ed4:	68e3      	ldr	r3, [r4, #12]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	60e3      	str	r3, [r4, #12]
 8008eda:	e7d9      	b.n	8008e90 <_scanf_float+0x36c>
 8008edc:	9b04      	ldr	r3, [sp, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0e4      	beq.n	8008eac <_scanf_float+0x388>
 8008ee2:	9905      	ldr	r1, [sp, #20]
 8008ee4:	230a      	movs	r3, #10
 8008ee6:	3101      	adds	r1, #1
 8008ee8:	4640      	mov	r0, r8
 8008eea:	f7ff f9b7 	bl	800825c <_strtol_r>
 8008eee:	9b04      	ldr	r3, [sp, #16]
 8008ef0:	9e05      	ldr	r6, [sp, #20]
 8008ef2:	1ac2      	subs	r2, r0, r3
 8008ef4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008ef8:	429e      	cmp	r6, r3
 8008efa:	bf28      	it	cs
 8008efc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008f00:	4910      	ldr	r1, [pc, #64]	@ (8008f44 <_scanf_float+0x420>)
 8008f02:	4630      	mov	r0, r6
 8008f04:	f000 f8f6 	bl	80090f4 <siprintf>
 8008f08:	e7d0      	b.n	8008eac <_scanf_float+0x388>
 8008f0a:	f011 0f04 	tst.w	r1, #4
 8008f0e:	9903      	ldr	r1, [sp, #12]
 8008f10:	600a      	str	r2, [r1, #0]
 8008f12:	d1dc      	bne.n	8008ece <_scanf_float+0x3aa>
 8008f14:	681d      	ldr	r5, [r3, #0]
 8008f16:	4632      	mov	r2, r6
 8008f18:	463b      	mov	r3, r7
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	f7f7 fe15 	bl	8000b4c <__aeabi_dcmpun>
 8008f22:	b128      	cbz	r0, 8008f30 <_scanf_float+0x40c>
 8008f24:	4808      	ldr	r0, [pc, #32]	@ (8008f48 <_scanf_float+0x424>)
 8008f26:	f000 f9d7 	bl	80092d8 <nanf>
 8008f2a:	ed85 0a00 	vstr	s0, [r5]
 8008f2e:	e7d1      	b.n	8008ed4 <_scanf_float+0x3b0>
 8008f30:	4630      	mov	r0, r6
 8008f32:	4639      	mov	r1, r7
 8008f34:	f7f7 fe68 	bl	8000c08 <__aeabi_d2f>
 8008f38:	6028      	str	r0, [r5, #0]
 8008f3a:	e7cb      	b.n	8008ed4 <_scanf_float+0x3b0>
 8008f3c:	f04f 0900 	mov.w	r9, #0
 8008f40:	e629      	b.n	8008b96 <_scanf_float+0x72>
 8008f42:	bf00      	nop
 8008f44:	0800e89d 	.word	0x0800e89d
 8008f48:	0800eb34 	.word	0x0800eb34

08008f4c <std>:
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	b510      	push	{r4, lr}
 8008f50:	4604      	mov	r4, r0
 8008f52:	e9c0 3300 	strd	r3, r3, [r0]
 8008f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f5a:	6083      	str	r3, [r0, #8]
 8008f5c:	8181      	strh	r1, [r0, #12]
 8008f5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f60:	81c2      	strh	r2, [r0, #14]
 8008f62:	6183      	str	r3, [r0, #24]
 8008f64:	4619      	mov	r1, r3
 8008f66:	2208      	movs	r2, #8
 8008f68:	305c      	adds	r0, #92	@ 0x5c
 8008f6a:	f000 f926 	bl	80091ba <memset>
 8008f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa4 <std+0x58>)
 8008f70:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f72:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa8 <std+0x5c>)
 8008f74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f76:	4b0d      	ldr	r3, [pc, #52]	@ (8008fac <std+0x60>)
 8008f78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb0 <std+0x64>)
 8008f7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb4 <std+0x68>)
 8008f80:	6224      	str	r4, [r4, #32]
 8008f82:	429c      	cmp	r4, r3
 8008f84:	d006      	beq.n	8008f94 <std+0x48>
 8008f86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f8a:	4294      	cmp	r4, r2
 8008f8c:	d002      	beq.n	8008f94 <std+0x48>
 8008f8e:	33d0      	adds	r3, #208	@ 0xd0
 8008f90:	429c      	cmp	r4, r3
 8008f92:	d105      	bne.n	8008fa0 <std+0x54>
 8008f94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f9c:	f000 b98a 	b.w	80092b4 <__retarget_lock_init_recursive>
 8008fa0:	bd10      	pop	{r4, pc}
 8008fa2:	bf00      	nop
 8008fa4:	08009135 	.word	0x08009135
 8008fa8:	08009157 	.word	0x08009157
 8008fac:	0800918f 	.word	0x0800918f
 8008fb0:	080091b3 	.word	0x080091b3
 8008fb4:	20002a50 	.word	0x20002a50

08008fb8 <stdio_exit_handler>:
 8008fb8:	4a02      	ldr	r2, [pc, #8]	@ (8008fc4 <stdio_exit_handler+0xc>)
 8008fba:	4903      	ldr	r1, [pc, #12]	@ (8008fc8 <stdio_exit_handler+0x10>)
 8008fbc:	4803      	ldr	r0, [pc, #12]	@ (8008fcc <stdio_exit_handler+0x14>)
 8008fbe:	f000 b869 	b.w	8009094 <_fwalk_sglue>
 8008fc2:	bf00      	nop
 8008fc4:	20000338 	.word	0x20000338
 8008fc8:	0800bd31 	.word	0x0800bd31
 8008fcc:	20000348 	.word	0x20000348

08008fd0 <cleanup_stdio>:
 8008fd0:	6841      	ldr	r1, [r0, #4]
 8008fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009004 <cleanup_stdio+0x34>)
 8008fd4:	4299      	cmp	r1, r3
 8008fd6:	b510      	push	{r4, lr}
 8008fd8:	4604      	mov	r4, r0
 8008fda:	d001      	beq.n	8008fe0 <cleanup_stdio+0x10>
 8008fdc:	f002 fea8 	bl	800bd30 <_fflush_r>
 8008fe0:	68a1      	ldr	r1, [r4, #8]
 8008fe2:	4b09      	ldr	r3, [pc, #36]	@ (8009008 <cleanup_stdio+0x38>)
 8008fe4:	4299      	cmp	r1, r3
 8008fe6:	d002      	beq.n	8008fee <cleanup_stdio+0x1e>
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f002 fea1 	bl	800bd30 <_fflush_r>
 8008fee:	68e1      	ldr	r1, [r4, #12]
 8008ff0:	4b06      	ldr	r3, [pc, #24]	@ (800900c <cleanup_stdio+0x3c>)
 8008ff2:	4299      	cmp	r1, r3
 8008ff4:	d004      	beq.n	8009000 <cleanup_stdio+0x30>
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ffc:	f002 be98 	b.w	800bd30 <_fflush_r>
 8009000:	bd10      	pop	{r4, pc}
 8009002:	bf00      	nop
 8009004:	20002a50 	.word	0x20002a50
 8009008:	20002ab8 	.word	0x20002ab8
 800900c:	20002b20 	.word	0x20002b20

08009010 <global_stdio_init.part.0>:
 8009010:	b510      	push	{r4, lr}
 8009012:	4b0b      	ldr	r3, [pc, #44]	@ (8009040 <global_stdio_init.part.0+0x30>)
 8009014:	4c0b      	ldr	r4, [pc, #44]	@ (8009044 <global_stdio_init.part.0+0x34>)
 8009016:	4a0c      	ldr	r2, [pc, #48]	@ (8009048 <global_stdio_init.part.0+0x38>)
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	4620      	mov	r0, r4
 800901c:	2200      	movs	r2, #0
 800901e:	2104      	movs	r1, #4
 8009020:	f7ff ff94 	bl	8008f4c <std>
 8009024:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009028:	2201      	movs	r2, #1
 800902a:	2109      	movs	r1, #9
 800902c:	f7ff ff8e 	bl	8008f4c <std>
 8009030:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009034:	2202      	movs	r2, #2
 8009036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800903a:	2112      	movs	r1, #18
 800903c:	f7ff bf86 	b.w	8008f4c <std>
 8009040:	20002b88 	.word	0x20002b88
 8009044:	20002a50 	.word	0x20002a50
 8009048:	08008fb9 	.word	0x08008fb9

0800904c <__sfp_lock_acquire>:
 800904c:	4801      	ldr	r0, [pc, #4]	@ (8009054 <__sfp_lock_acquire+0x8>)
 800904e:	f000 b932 	b.w	80092b6 <__retarget_lock_acquire_recursive>
 8009052:	bf00      	nop
 8009054:	20002b91 	.word	0x20002b91

08009058 <__sfp_lock_release>:
 8009058:	4801      	ldr	r0, [pc, #4]	@ (8009060 <__sfp_lock_release+0x8>)
 800905a:	f000 b92d 	b.w	80092b8 <__retarget_lock_release_recursive>
 800905e:	bf00      	nop
 8009060:	20002b91 	.word	0x20002b91

08009064 <__sinit>:
 8009064:	b510      	push	{r4, lr}
 8009066:	4604      	mov	r4, r0
 8009068:	f7ff fff0 	bl	800904c <__sfp_lock_acquire>
 800906c:	6a23      	ldr	r3, [r4, #32]
 800906e:	b11b      	cbz	r3, 8009078 <__sinit+0x14>
 8009070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009074:	f7ff bff0 	b.w	8009058 <__sfp_lock_release>
 8009078:	4b04      	ldr	r3, [pc, #16]	@ (800908c <__sinit+0x28>)
 800907a:	6223      	str	r3, [r4, #32]
 800907c:	4b04      	ldr	r3, [pc, #16]	@ (8009090 <__sinit+0x2c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1f5      	bne.n	8009070 <__sinit+0xc>
 8009084:	f7ff ffc4 	bl	8009010 <global_stdio_init.part.0>
 8009088:	e7f2      	b.n	8009070 <__sinit+0xc>
 800908a:	bf00      	nop
 800908c:	08008fd1 	.word	0x08008fd1
 8009090:	20002b88 	.word	0x20002b88

08009094 <_fwalk_sglue>:
 8009094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009098:	4607      	mov	r7, r0
 800909a:	4688      	mov	r8, r1
 800909c:	4614      	mov	r4, r2
 800909e:	2600      	movs	r6, #0
 80090a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090a4:	f1b9 0901 	subs.w	r9, r9, #1
 80090a8:	d505      	bpl.n	80090b6 <_fwalk_sglue+0x22>
 80090aa:	6824      	ldr	r4, [r4, #0]
 80090ac:	2c00      	cmp	r4, #0
 80090ae:	d1f7      	bne.n	80090a0 <_fwalk_sglue+0xc>
 80090b0:	4630      	mov	r0, r6
 80090b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b6:	89ab      	ldrh	r3, [r5, #12]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d907      	bls.n	80090cc <_fwalk_sglue+0x38>
 80090bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090c0:	3301      	adds	r3, #1
 80090c2:	d003      	beq.n	80090cc <_fwalk_sglue+0x38>
 80090c4:	4629      	mov	r1, r5
 80090c6:	4638      	mov	r0, r7
 80090c8:	47c0      	blx	r8
 80090ca:	4306      	orrs	r6, r0
 80090cc:	3568      	adds	r5, #104	@ 0x68
 80090ce:	e7e9      	b.n	80090a4 <_fwalk_sglue+0x10>

080090d0 <iprintf>:
 80090d0:	b40f      	push	{r0, r1, r2, r3}
 80090d2:	b507      	push	{r0, r1, r2, lr}
 80090d4:	4906      	ldr	r1, [pc, #24]	@ (80090f0 <iprintf+0x20>)
 80090d6:	ab04      	add	r3, sp, #16
 80090d8:	6808      	ldr	r0, [r1, #0]
 80090da:	f853 2b04 	ldr.w	r2, [r3], #4
 80090de:	6881      	ldr	r1, [r0, #8]
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	f002 fc89 	bl	800b9f8 <_vfiprintf_r>
 80090e6:	b003      	add	sp, #12
 80090e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090ec:	b004      	add	sp, #16
 80090ee:	4770      	bx	lr
 80090f0:	20000344 	.word	0x20000344

080090f4 <siprintf>:
 80090f4:	b40e      	push	{r1, r2, r3}
 80090f6:	b500      	push	{lr}
 80090f8:	b09c      	sub	sp, #112	@ 0x70
 80090fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80090fc:	9002      	str	r0, [sp, #8]
 80090fe:	9006      	str	r0, [sp, #24]
 8009100:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009104:	4809      	ldr	r0, [pc, #36]	@ (800912c <siprintf+0x38>)
 8009106:	9107      	str	r1, [sp, #28]
 8009108:	9104      	str	r1, [sp, #16]
 800910a:	4909      	ldr	r1, [pc, #36]	@ (8009130 <siprintf+0x3c>)
 800910c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009110:	9105      	str	r1, [sp, #20]
 8009112:	6800      	ldr	r0, [r0, #0]
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	a902      	add	r1, sp, #8
 8009118:	f002 fb48 	bl	800b7ac <_svfiprintf_r>
 800911c:	9b02      	ldr	r3, [sp, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	701a      	strb	r2, [r3, #0]
 8009122:	b01c      	add	sp, #112	@ 0x70
 8009124:	f85d eb04 	ldr.w	lr, [sp], #4
 8009128:	b003      	add	sp, #12
 800912a:	4770      	bx	lr
 800912c:	20000344 	.word	0x20000344
 8009130:	ffff0208 	.word	0xffff0208

08009134 <__sread>:
 8009134:	b510      	push	{r4, lr}
 8009136:	460c      	mov	r4, r1
 8009138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913c:	f000 f86c 	bl	8009218 <_read_r>
 8009140:	2800      	cmp	r0, #0
 8009142:	bfab      	itete	ge
 8009144:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009146:	89a3      	ldrhlt	r3, [r4, #12]
 8009148:	181b      	addge	r3, r3, r0
 800914a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800914e:	bfac      	ite	ge
 8009150:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009152:	81a3      	strhlt	r3, [r4, #12]
 8009154:	bd10      	pop	{r4, pc}

08009156 <__swrite>:
 8009156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800915a:	461f      	mov	r7, r3
 800915c:	898b      	ldrh	r3, [r1, #12]
 800915e:	05db      	lsls	r3, r3, #23
 8009160:	4605      	mov	r5, r0
 8009162:	460c      	mov	r4, r1
 8009164:	4616      	mov	r6, r2
 8009166:	d505      	bpl.n	8009174 <__swrite+0x1e>
 8009168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916c:	2302      	movs	r3, #2
 800916e:	2200      	movs	r2, #0
 8009170:	f000 f840 	bl	80091f4 <_lseek_r>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800917a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	4632      	mov	r2, r6
 8009182:	463b      	mov	r3, r7
 8009184:	4628      	mov	r0, r5
 8009186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800918a:	f000 b857 	b.w	800923c <_write_r>

0800918e <__sseek>:
 800918e:	b510      	push	{r4, lr}
 8009190:	460c      	mov	r4, r1
 8009192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009196:	f000 f82d 	bl	80091f4 <_lseek_r>
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	bf15      	itete	ne
 80091a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80091a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80091a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80091aa:	81a3      	strheq	r3, [r4, #12]
 80091ac:	bf18      	it	ne
 80091ae:	81a3      	strhne	r3, [r4, #12]
 80091b0:	bd10      	pop	{r4, pc}

080091b2 <__sclose>:
 80091b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b6:	f000 b80d 	b.w	80091d4 <_close_r>

080091ba <memset>:
 80091ba:	4402      	add	r2, r0
 80091bc:	4603      	mov	r3, r0
 80091be:	4293      	cmp	r3, r2
 80091c0:	d100      	bne.n	80091c4 <memset+0xa>
 80091c2:	4770      	bx	lr
 80091c4:	f803 1b01 	strb.w	r1, [r3], #1
 80091c8:	e7f9      	b.n	80091be <memset+0x4>
	...

080091cc <_localeconv_r>:
 80091cc:	4800      	ldr	r0, [pc, #0]	@ (80091d0 <_localeconv_r+0x4>)
 80091ce:	4770      	bx	lr
 80091d0:	20000484 	.word	0x20000484

080091d4 <_close_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	@ (80091f0 <_close_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f7fc fb60 	bl	80058a4 <_close>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_close_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_close_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20002b8c 	.word	0x20002b8c

080091f4 <_lseek_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	@ (8009214 <_lseek_r+0x20>)
 80091f8:	4604      	mov	r4, r0
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	2200      	movs	r2, #0
 8009200:	602a      	str	r2, [r5, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f7fc fb75 	bl	80058f2 <_lseek>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_lseek_r+0x1e>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_lseek_r+0x1e>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	20002b8c 	.word	0x20002b8c

08009218 <_read_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d07      	ldr	r5, [pc, #28]	@ (8009238 <_read_r+0x20>)
 800921c:	4604      	mov	r4, r0
 800921e:	4608      	mov	r0, r1
 8009220:	4611      	mov	r1, r2
 8009222:	2200      	movs	r2, #0
 8009224:	602a      	str	r2, [r5, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	f7fc fb03 	bl	8005832 <_read>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_read_r+0x1e>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	b103      	cbz	r3, 8009236 <_read_r+0x1e>
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	20002b8c 	.word	0x20002b8c

0800923c <_write_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d07      	ldr	r5, [pc, #28]	@ (800925c <_write_r+0x20>)
 8009240:	4604      	mov	r4, r0
 8009242:	4608      	mov	r0, r1
 8009244:	4611      	mov	r1, r2
 8009246:	2200      	movs	r2, #0
 8009248:	602a      	str	r2, [r5, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f7fc fb0e 	bl	800586c <_write>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_write_r+0x1e>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	b103      	cbz	r3, 800925a <_write_r+0x1e>
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	20002b8c 	.word	0x20002b8c

08009260 <__errno>:
 8009260:	4b01      	ldr	r3, [pc, #4]	@ (8009268 <__errno+0x8>)
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	20000344 	.word	0x20000344

0800926c <__libc_init_array>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	4d0d      	ldr	r5, [pc, #52]	@ (80092a4 <__libc_init_array+0x38>)
 8009270:	4c0d      	ldr	r4, [pc, #52]	@ (80092a8 <__libc_init_array+0x3c>)
 8009272:	1b64      	subs	r4, r4, r5
 8009274:	10a4      	asrs	r4, r4, #2
 8009276:	2600      	movs	r6, #0
 8009278:	42a6      	cmp	r6, r4
 800927a:	d109      	bne.n	8009290 <__libc_init_array+0x24>
 800927c:	4d0b      	ldr	r5, [pc, #44]	@ (80092ac <__libc_init_array+0x40>)
 800927e:	4c0c      	ldr	r4, [pc, #48]	@ (80092b0 <__libc_init_array+0x44>)
 8009280:	f003 faf8 	bl	800c874 <_init>
 8009284:	1b64      	subs	r4, r4, r5
 8009286:	10a4      	asrs	r4, r4, #2
 8009288:	2600      	movs	r6, #0
 800928a:	42a6      	cmp	r6, r4
 800928c:	d105      	bne.n	800929a <__libc_init_array+0x2e>
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	f855 3b04 	ldr.w	r3, [r5], #4
 8009294:	4798      	blx	r3
 8009296:	3601      	adds	r6, #1
 8009298:	e7ee      	b.n	8009278 <__libc_init_array+0xc>
 800929a:	f855 3b04 	ldr.w	r3, [r5], #4
 800929e:	4798      	blx	r3
 80092a0:	3601      	adds	r6, #1
 80092a2:	e7f2      	b.n	800928a <__libc_init_array+0x1e>
 80092a4:	0800eba0 	.word	0x0800eba0
 80092a8:	0800eba0 	.word	0x0800eba0
 80092ac:	0800eba0 	.word	0x0800eba0
 80092b0:	0800eba4 	.word	0x0800eba4

080092b4 <__retarget_lock_init_recursive>:
 80092b4:	4770      	bx	lr

080092b6 <__retarget_lock_acquire_recursive>:
 80092b6:	4770      	bx	lr

080092b8 <__retarget_lock_release_recursive>:
 80092b8:	4770      	bx	lr

080092ba <memcpy>:
 80092ba:	440a      	add	r2, r1
 80092bc:	4291      	cmp	r1, r2
 80092be:	f100 33ff 	add.w	r3, r0, #4294967295
 80092c2:	d100      	bne.n	80092c6 <memcpy+0xc>
 80092c4:	4770      	bx	lr
 80092c6:	b510      	push	{r4, lr}
 80092c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d0:	4291      	cmp	r1, r2
 80092d2:	d1f9      	bne.n	80092c8 <memcpy+0xe>
 80092d4:	bd10      	pop	{r4, pc}
	...

080092d8 <nanf>:
 80092d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80092e0 <nanf+0x8>
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	7fc00000 	.word	0x7fc00000

080092e4 <quorem>:
 80092e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	6903      	ldr	r3, [r0, #16]
 80092ea:	690c      	ldr	r4, [r1, #16]
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	4607      	mov	r7, r0
 80092f0:	db7e      	blt.n	80093f0 <quorem+0x10c>
 80092f2:	3c01      	subs	r4, #1
 80092f4:	f101 0814 	add.w	r8, r1, #20
 80092f8:	00a3      	lsls	r3, r4, #2
 80092fa:	f100 0514 	add.w	r5, r0, #20
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800930a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800930e:	3301      	adds	r3, #1
 8009310:	429a      	cmp	r2, r3
 8009312:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009316:	fbb2 f6f3 	udiv	r6, r2, r3
 800931a:	d32e      	bcc.n	800937a <quorem+0x96>
 800931c:	f04f 0a00 	mov.w	sl, #0
 8009320:	46c4      	mov	ip, r8
 8009322:	46ae      	mov	lr, r5
 8009324:	46d3      	mov	fp, sl
 8009326:	f85c 3b04 	ldr.w	r3, [ip], #4
 800932a:	b298      	uxth	r0, r3
 800932c:	fb06 a000 	mla	r0, r6, r0, sl
 8009330:	0c02      	lsrs	r2, r0, #16
 8009332:	0c1b      	lsrs	r3, r3, #16
 8009334:	fb06 2303 	mla	r3, r6, r3, r2
 8009338:	f8de 2000 	ldr.w	r2, [lr]
 800933c:	b280      	uxth	r0, r0
 800933e:	b292      	uxth	r2, r2
 8009340:	1a12      	subs	r2, r2, r0
 8009342:	445a      	add	r2, fp
 8009344:	f8de 0000 	ldr.w	r0, [lr]
 8009348:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800934c:	b29b      	uxth	r3, r3
 800934e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009352:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009356:	b292      	uxth	r2, r2
 8009358:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800935c:	45e1      	cmp	r9, ip
 800935e:	f84e 2b04 	str.w	r2, [lr], #4
 8009362:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009366:	d2de      	bcs.n	8009326 <quorem+0x42>
 8009368:	9b00      	ldr	r3, [sp, #0]
 800936a:	58eb      	ldr	r3, [r5, r3]
 800936c:	b92b      	cbnz	r3, 800937a <quorem+0x96>
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	3b04      	subs	r3, #4
 8009372:	429d      	cmp	r5, r3
 8009374:	461a      	mov	r2, r3
 8009376:	d32f      	bcc.n	80093d8 <quorem+0xf4>
 8009378:	613c      	str	r4, [r7, #16]
 800937a:	4638      	mov	r0, r7
 800937c:	f001 f9c4 	bl	800a708 <__mcmp>
 8009380:	2800      	cmp	r0, #0
 8009382:	db25      	blt.n	80093d0 <quorem+0xec>
 8009384:	4629      	mov	r1, r5
 8009386:	2000      	movs	r0, #0
 8009388:	f858 2b04 	ldr.w	r2, [r8], #4
 800938c:	f8d1 c000 	ldr.w	ip, [r1]
 8009390:	fa1f fe82 	uxth.w	lr, r2
 8009394:	fa1f f38c 	uxth.w	r3, ip
 8009398:	eba3 030e 	sub.w	r3, r3, lr
 800939c:	4403      	add	r3, r0
 800939e:	0c12      	lsrs	r2, r2, #16
 80093a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093ae:	45c1      	cmp	r9, r8
 80093b0:	f841 3b04 	str.w	r3, [r1], #4
 80093b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093b8:	d2e6      	bcs.n	8009388 <quorem+0xa4>
 80093ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093c2:	b922      	cbnz	r2, 80093ce <quorem+0xea>
 80093c4:	3b04      	subs	r3, #4
 80093c6:	429d      	cmp	r5, r3
 80093c8:	461a      	mov	r2, r3
 80093ca:	d30b      	bcc.n	80093e4 <quorem+0x100>
 80093cc:	613c      	str	r4, [r7, #16]
 80093ce:	3601      	adds	r6, #1
 80093d0:	4630      	mov	r0, r6
 80093d2:	b003      	add	sp, #12
 80093d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d8:	6812      	ldr	r2, [r2, #0]
 80093da:	3b04      	subs	r3, #4
 80093dc:	2a00      	cmp	r2, #0
 80093de:	d1cb      	bne.n	8009378 <quorem+0x94>
 80093e0:	3c01      	subs	r4, #1
 80093e2:	e7c6      	b.n	8009372 <quorem+0x8e>
 80093e4:	6812      	ldr	r2, [r2, #0]
 80093e6:	3b04      	subs	r3, #4
 80093e8:	2a00      	cmp	r2, #0
 80093ea:	d1ef      	bne.n	80093cc <quorem+0xe8>
 80093ec:	3c01      	subs	r4, #1
 80093ee:	e7ea      	b.n	80093c6 <quorem+0xe2>
 80093f0:	2000      	movs	r0, #0
 80093f2:	e7ee      	b.n	80093d2 <quorem+0xee>
 80093f4:	0000      	movs	r0, r0
	...

080093f8 <_dtoa_r>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	69c7      	ldr	r7, [r0, #28]
 80093fe:	b099      	sub	sp, #100	@ 0x64
 8009400:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009404:	ec55 4b10 	vmov	r4, r5, d0
 8009408:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800940a:	9109      	str	r1, [sp, #36]	@ 0x24
 800940c:	4683      	mov	fp, r0
 800940e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009410:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009412:	b97f      	cbnz	r7, 8009434 <_dtoa_r+0x3c>
 8009414:	2010      	movs	r0, #16
 8009416:	f000 fdfd 	bl	800a014 <malloc>
 800941a:	4602      	mov	r2, r0
 800941c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009420:	b920      	cbnz	r0, 800942c <_dtoa_r+0x34>
 8009422:	4ba7      	ldr	r3, [pc, #668]	@ (80096c0 <_dtoa_r+0x2c8>)
 8009424:	21ef      	movs	r1, #239	@ 0xef
 8009426:	48a7      	ldr	r0, [pc, #668]	@ (80096c4 <_dtoa_r+0x2cc>)
 8009428:	f002 fd82 	bl	800bf30 <__assert_func>
 800942c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009430:	6007      	str	r7, [r0, #0]
 8009432:	60c7      	str	r7, [r0, #12]
 8009434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009438:	6819      	ldr	r1, [r3, #0]
 800943a:	b159      	cbz	r1, 8009454 <_dtoa_r+0x5c>
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	604a      	str	r2, [r1, #4]
 8009440:	2301      	movs	r3, #1
 8009442:	4093      	lsls	r3, r2
 8009444:	608b      	str	r3, [r1, #8]
 8009446:	4658      	mov	r0, fp
 8009448:	f000 feda 	bl	800a200 <_Bfree>
 800944c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009450:	2200      	movs	r2, #0
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	1e2b      	subs	r3, r5, #0
 8009456:	bfb9      	ittee	lt
 8009458:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800945c:	9303      	strlt	r3, [sp, #12]
 800945e:	2300      	movge	r3, #0
 8009460:	6033      	strge	r3, [r6, #0]
 8009462:	9f03      	ldr	r7, [sp, #12]
 8009464:	4b98      	ldr	r3, [pc, #608]	@ (80096c8 <_dtoa_r+0x2d0>)
 8009466:	bfbc      	itt	lt
 8009468:	2201      	movlt	r2, #1
 800946a:	6032      	strlt	r2, [r6, #0]
 800946c:	43bb      	bics	r3, r7
 800946e:	d112      	bne.n	8009496 <_dtoa_r+0x9e>
 8009470:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009472:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800947c:	4323      	orrs	r3, r4
 800947e:	f000 854d 	beq.w	8009f1c <_dtoa_r+0xb24>
 8009482:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009484:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80096dc <_dtoa_r+0x2e4>
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 854f 	beq.w	8009f2c <_dtoa_r+0xb34>
 800948e:	f10a 0303 	add.w	r3, sl, #3
 8009492:	f000 bd49 	b.w	8009f28 <_dtoa_r+0xb30>
 8009496:	ed9d 7b02 	vldr	d7, [sp, #8]
 800949a:	2200      	movs	r2, #0
 800949c:	ec51 0b17 	vmov	r0, r1, d7
 80094a0:	2300      	movs	r3, #0
 80094a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80094a6:	f7f7 fb1f 	bl	8000ae8 <__aeabi_dcmpeq>
 80094aa:	4680      	mov	r8, r0
 80094ac:	b158      	cbz	r0, 80094c6 <_dtoa_r+0xce>
 80094ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094b0:	2301      	movs	r3, #1
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094b6:	b113      	cbz	r3, 80094be <_dtoa_r+0xc6>
 80094b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094ba:	4b84      	ldr	r3, [pc, #528]	@ (80096cc <_dtoa_r+0x2d4>)
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80096e0 <_dtoa_r+0x2e8>
 80094c2:	f000 bd33 	b.w	8009f2c <_dtoa_r+0xb34>
 80094c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094ca:	aa16      	add	r2, sp, #88	@ 0x58
 80094cc:	a917      	add	r1, sp, #92	@ 0x5c
 80094ce:	4658      	mov	r0, fp
 80094d0:	f001 fa3a 	bl	800a948 <__d2b>
 80094d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80094d8:	4681      	mov	r9, r0
 80094da:	2e00      	cmp	r6, #0
 80094dc:	d077      	beq.n	80095ce <_dtoa_r+0x1d6>
 80094de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80094e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80094f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80094f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80094f8:	4619      	mov	r1, r3
 80094fa:	2200      	movs	r2, #0
 80094fc:	4b74      	ldr	r3, [pc, #464]	@ (80096d0 <_dtoa_r+0x2d8>)
 80094fe:	f7f6 fed3 	bl	80002a8 <__aeabi_dsub>
 8009502:	a369      	add	r3, pc, #420	@ (adr r3, 80096a8 <_dtoa_r+0x2b0>)
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	f7f7 f886 	bl	8000618 <__aeabi_dmul>
 800950c:	a368      	add	r3, pc, #416	@ (adr r3, 80096b0 <_dtoa_r+0x2b8>)
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f7f6 fecb 	bl	80002ac <__adddf3>
 8009516:	4604      	mov	r4, r0
 8009518:	4630      	mov	r0, r6
 800951a:	460d      	mov	r5, r1
 800951c:	f7f7 f812 	bl	8000544 <__aeabi_i2d>
 8009520:	a365      	add	r3, pc, #404	@ (adr r3, 80096b8 <_dtoa_r+0x2c0>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f7 f877 	bl	8000618 <__aeabi_dmul>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4620      	mov	r0, r4
 8009530:	4629      	mov	r1, r5
 8009532:	f7f6 febb 	bl	80002ac <__adddf3>
 8009536:	4604      	mov	r4, r0
 8009538:	460d      	mov	r5, r1
 800953a:	f7f7 fb1d 	bl	8000b78 <__aeabi_d2iz>
 800953e:	2200      	movs	r2, #0
 8009540:	4607      	mov	r7, r0
 8009542:	2300      	movs	r3, #0
 8009544:	4620      	mov	r0, r4
 8009546:	4629      	mov	r1, r5
 8009548:	f7f7 fad8 	bl	8000afc <__aeabi_dcmplt>
 800954c:	b140      	cbz	r0, 8009560 <_dtoa_r+0x168>
 800954e:	4638      	mov	r0, r7
 8009550:	f7f6 fff8 	bl	8000544 <__aeabi_i2d>
 8009554:	4622      	mov	r2, r4
 8009556:	462b      	mov	r3, r5
 8009558:	f7f7 fac6 	bl	8000ae8 <__aeabi_dcmpeq>
 800955c:	b900      	cbnz	r0, 8009560 <_dtoa_r+0x168>
 800955e:	3f01      	subs	r7, #1
 8009560:	2f16      	cmp	r7, #22
 8009562:	d851      	bhi.n	8009608 <_dtoa_r+0x210>
 8009564:	4b5b      	ldr	r3, [pc, #364]	@ (80096d4 <_dtoa_r+0x2dc>)
 8009566:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009572:	f7f7 fac3 	bl	8000afc <__aeabi_dcmplt>
 8009576:	2800      	cmp	r0, #0
 8009578:	d048      	beq.n	800960c <_dtoa_r+0x214>
 800957a:	3f01      	subs	r7, #1
 800957c:	2300      	movs	r3, #0
 800957e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009580:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009582:	1b9b      	subs	r3, r3, r6
 8009584:	1e5a      	subs	r2, r3, #1
 8009586:	bf44      	itt	mi
 8009588:	f1c3 0801 	rsbmi	r8, r3, #1
 800958c:	2300      	movmi	r3, #0
 800958e:	9208      	str	r2, [sp, #32]
 8009590:	bf54      	ite	pl
 8009592:	f04f 0800 	movpl.w	r8, #0
 8009596:	9308      	strmi	r3, [sp, #32]
 8009598:	2f00      	cmp	r7, #0
 800959a:	db39      	blt.n	8009610 <_dtoa_r+0x218>
 800959c:	9b08      	ldr	r3, [sp, #32]
 800959e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80095a0:	443b      	add	r3, r7
 80095a2:	9308      	str	r3, [sp, #32]
 80095a4:	2300      	movs	r3, #0
 80095a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095aa:	2b09      	cmp	r3, #9
 80095ac:	d864      	bhi.n	8009678 <_dtoa_r+0x280>
 80095ae:	2b05      	cmp	r3, #5
 80095b0:	bfc4      	itt	gt
 80095b2:	3b04      	subgt	r3, #4
 80095b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80095b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b8:	f1a3 0302 	sub.w	r3, r3, #2
 80095bc:	bfcc      	ite	gt
 80095be:	2400      	movgt	r4, #0
 80095c0:	2401      	movle	r4, #1
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d863      	bhi.n	800968e <_dtoa_r+0x296>
 80095c6:	e8df f003 	tbb	[pc, r3]
 80095ca:	372a      	.short	0x372a
 80095cc:	5535      	.short	0x5535
 80095ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80095d2:	441e      	add	r6, r3
 80095d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80095d8:	2b20      	cmp	r3, #32
 80095da:	bfc1      	itttt	gt
 80095dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80095e0:	409f      	lslgt	r7, r3
 80095e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80095e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80095ea:	bfd6      	itet	le
 80095ec:	f1c3 0320 	rsble	r3, r3, #32
 80095f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80095f4:	fa04 f003 	lslle.w	r0, r4, r3
 80095f8:	f7f6 ff94 	bl	8000524 <__aeabi_ui2d>
 80095fc:	2201      	movs	r2, #1
 80095fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009602:	3e01      	subs	r6, #1
 8009604:	9214      	str	r2, [sp, #80]	@ 0x50
 8009606:	e777      	b.n	80094f8 <_dtoa_r+0x100>
 8009608:	2301      	movs	r3, #1
 800960a:	e7b8      	b.n	800957e <_dtoa_r+0x186>
 800960c:	9012      	str	r0, [sp, #72]	@ 0x48
 800960e:	e7b7      	b.n	8009580 <_dtoa_r+0x188>
 8009610:	427b      	negs	r3, r7
 8009612:	930a      	str	r3, [sp, #40]	@ 0x28
 8009614:	2300      	movs	r3, #0
 8009616:	eba8 0807 	sub.w	r8, r8, r7
 800961a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800961c:	e7c4      	b.n	80095a8 <_dtoa_r+0x1b0>
 800961e:	2300      	movs	r3, #0
 8009620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009624:	2b00      	cmp	r3, #0
 8009626:	dc35      	bgt.n	8009694 <_dtoa_r+0x29c>
 8009628:	2301      	movs	r3, #1
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	9307      	str	r3, [sp, #28]
 800962e:	461a      	mov	r2, r3
 8009630:	920e      	str	r2, [sp, #56]	@ 0x38
 8009632:	e00b      	b.n	800964c <_dtoa_r+0x254>
 8009634:	2301      	movs	r3, #1
 8009636:	e7f3      	b.n	8009620 <_dtoa_r+0x228>
 8009638:	2300      	movs	r3, #0
 800963a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800963c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800963e:	18fb      	adds	r3, r7, r3
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	3301      	adds	r3, #1
 8009644:	2b01      	cmp	r3, #1
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	bfb8      	it	lt
 800964a:	2301      	movlt	r3, #1
 800964c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009650:	2100      	movs	r1, #0
 8009652:	2204      	movs	r2, #4
 8009654:	f102 0514 	add.w	r5, r2, #20
 8009658:	429d      	cmp	r5, r3
 800965a:	d91f      	bls.n	800969c <_dtoa_r+0x2a4>
 800965c:	6041      	str	r1, [r0, #4]
 800965e:	4658      	mov	r0, fp
 8009660:	f000 fd8e 	bl	800a180 <_Balloc>
 8009664:	4682      	mov	sl, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d13c      	bne.n	80096e4 <_dtoa_r+0x2ec>
 800966a:	4b1b      	ldr	r3, [pc, #108]	@ (80096d8 <_dtoa_r+0x2e0>)
 800966c:	4602      	mov	r2, r0
 800966e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009672:	e6d8      	b.n	8009426 <_dtoa_r+0x2e>
 8009674:	2301      	movs	r3, #1
 8009676:	e7e0      	b.n	800963a <_dtoa_r+0x242>
 8009678:	2401      	movs	r4, #1
 800967a:	2300      	movs	r3, #0
 800967c:	9309      	str	r3, [sp, #36]	@ 0x24
 800967e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009680:	f04f 33ff 	mov.w	r3, #4294967295
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	9307      	str	r3, [sp, #28]
 8009688:	2200      	movs	r2, #0
 800968a:	2312      	movs	r3, #18
 800968c:	e7d0      	b.n	8009630 <_dtoa_r+0x238>
 800968e:	2301      	movs	r3, #1
 8009690:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009692:	e7f5      	b.n	8009680 <_dtoa_r+0x288>
 8009694:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	9307      	str	r3, [sp, #28]
 800969a:	e7d7      	b.n	800964c <_dtoa_r+0x254>
 800969c:	3101      	adds	r1, #1
 800969e:	0052      	lsls	r2, r2, #1
 80096a0:	e7d8      	b.n	8009654 <_dtoa_r+0x25c>
 80096a2:	bf00      	nop
 80096a4:	f3af 8000 	nop.w
 80096a8:	636f4361 	.word	0x636f4361
 80096ac:	3fd287a7 	.word	0x3fd287a7
 80096b0:	8b60c8b3 	.word	0x8b60c8b3
 80096b4:	3fc68a28 	.word	0x3fc68a28
 80096b8:	509f79fb 	.word	0x509f79fb
 80096bc:	3fd34413 	.word	0x3fd34413
 80096c0:	0800e8af 	.word	0x0800e8af
 80096c4:	0800e8c6 	.word	0x0800e8c6
 80096c8:	7ff00000 	.word	0x7ff00000
 80096cc:	0800e87a 	.word	0x0800e87a
 80096d0:	3ff80000 	.word	0x3ff80000
 80096d4:	0800e9c0 	.word	0x0800e9c0
 80096d8:	0800e91e 	.word	0x0800e91e
 80096dc:	0800e8ab 	.word	0x0800e8ab
 80096e0:	0800e879 	.word	0x0800e879
 80096e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096e8:	6018      	str	r0, [r3, #0]
 80096ea:	9b07      	ldr	r3, [sp, #28]
 80096ec:	2b0e      	cmp	r3, #14
 80096ee:	f200 80a4 	bhi.w	800983a <_dtoa_r+0x442>
 80096f2:	2c00      	cmp	r4, #0
 80096f4:	f000 80a1 	beq.w	800983a <_dtoa_r+0x442>
 80096f8:	2f00      	cmp	r7, #0
 80096fa:	dd33      	ble.n	8009764 <_dtoa_r+0x36c>
 80096fc:	4bad      	ldr	r3, [pc, #692]	@ (80099b4 <_dtoa_r+0x5bc>)
 80096fe:	f007 020f 	and.w	r2, r7, #15
 8009702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009706:	ed93 7b00 	vldr	d7, [r3]
 800970a:	05f8      	lsls	r0, r7, #23
 800970c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009710:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009714:	d516      	bpl.n	8009744 <_dtoa_r+0x34c>
 8009716:	4ba8      	ldr	r3, [pc, #672]	@ (80099b8 <_dtoa_r+0x5c0>)
 8009718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800971c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009720:	f7f7 f8a4 	bl	800086c <__aeabi_ddiv>
 8009724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009728:	f004 040f 	and.w	r4, r4, #15
 800972c:	2603      	movs	r6, #3
 800972e:	4da2      	ldr	r5, [pc, #648]	@ (80099b8 <_dtoa_r+0x5c0>)
 8009730:	b954      	cbnz	r4, 8009748 <_dtoa_r+0x350>
 8009732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800973a:	f7f7 f897 	bl	800086c <__aeabi_ddiv>
 800973e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009742:	e028      	b.n	8009796 <_dtoa_r+0x39e>
 8009744:	2602      	movs	r6, #2
 8009746:	e7f2      	b.n	800972e <_dtoa_r+0x336>
 8009748:	07e1      	lsls	r1, r4, #31
 800974a:	d508      	bpl.n	800975e <_dtoa_r+0x366>
 800974c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009750:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009754:	f7f6 ff60 	bl	8000618 <__aeabi_dmul>
 8009758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800975c:	3601      	adds	r6, #1
 800975e:	1064      	asrs	r4, r4, #1
 8009760:	3508      	adds	r5, #8
 8009762:	e7e5      	b.n	8009730 <_dtoa_r+0x338>
 8009764:	f000 80d2 	beq.w	800990c <_dtoa_r+0x514>
 8009768:	427c      	negs	r4, r7
 800976a:	4b92      	ldr	r3, [pc, #584]	@ (80099b4 <_dtoa_r+0x5bc>)
 800976c:	4d92      	ldr	r5, [pc, #584]	@ (80099b8 <_dtoa_r+0x5c0>)
 800976e:	f004 020f 	and.w	r2, r4, #15
 8009772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800977e:	f7f6 ff4b 	bl	8000618 <__aeabi_dmul>
 8009782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009786:	1124      	asrs	r4, r4, #4
 8009788:	2300      	movs	r3, #0
 800978a:	2602      	movs	r6, #2
 800978c:	2c00      	cmp	r4, #0
 800978e:	f040 80b2 	bne.w	80098f6 <_dtoa_r+0x4fe>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1d3      	bne.n	800973e <_dtoa_r+0x346>
 8009796:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009798:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 80b7 	beq.w	8009910 <_dtoa_r+0x518>
 80097a2:	4b86      	ldr	r3, [pc, #536]	@ (80099bc <_dtoa_r+0x5c4>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	4620      	mov	r0, r4
 80097a8:	4629      	mov	r1, r5
 80097aa:	f7f7 f9a7 	bl	8000afc <__aeabi_dcmplt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	f000 80ae 	beq.w	8009910 <_dtoa_r+0x518>
 80097b4:	9b07      	ldr	r3, [sp, #28]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 80aa 	beq.w	8009910 <_dtoa_r+0x518>
 80097bc:	9b00      	ldr	r3, [sp, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	dd37      	ble.n	8009832 <_dtoa_r+0x43a>
 80097c2:	1e7b      	subs	r3, r7, #1
 80097c4:	9304      	str	r3, [sp, #16]
 80097c6:	4620      	mov	r0, r4
 80097c8:	4b7d      	ldr	r3, [pc, #500]	@ (80099c0 <_dtoa_r+0x5c8>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	4629      	mov	r1, r5
 80097ce:	f7f6 ff23 	bl	8000618 <__aeabi_dmul>
 80097d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097d6:	9c00      	ldr	r4, [sp, #0]
 80097d8:	3601      	adds	r6, #1
 80097da:	4630      	mov	r0, r6
 80097dc:	f7f6 feb2 	bl	8000544 <__aeabi_i2d>
 80097e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097e4:	f7f6 ff18 	bl	8000618 <__aeabi_dmul>
 80097e8:	4b76      	ldr	r3, [pc, #472]	@ (80099c4 <_dtoa_r+0x5cc>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	f7f6 fd5e 	bl	80002ac <__adddf3>
 80097f0:	4605      	mov	r5, r0
 80097f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80097f6:	2c00      	cmp	r4, #0
 80097f8:	f040 808d 	bne.w	8009916 <_dtoa_r+0x51e>
 80097fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009800:	4b71      	ldr	r3, [pc, #452]	@ (80099c8 <_dtoa_r+0x5d0>)
 8009802:	2200      	movs	r2, #0
 8009804:	f7f6 fd50 	bl	80002a8 <__aeabi_dsub>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009810:	462a      	mov	r2, r5
 8009812:	4633      	mov	r3, r6
 8009814:	f7f7 f990 	bl	8000b38 <__aeabi_dcmpgt>
 8009818:	2800      	cmp	r0, #0
 800981a:	f040 828b 	bne.w	8009d34 <_dtoa_r+0x93c>
 800981e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009822:	462a      	mov	r2, r5
 8009824:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009828:	f7f7 f968 	bl	8000afc <__aeabi_dcmplt>
 800982c:	2800      	cmp	r0, #0
 800982e:	f040 8128 	bne.w	8009a82 <_dtoa_r+0x68a>
 8009832:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009836:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800983a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800983c:	2b00      	cmp	r3, #0
 800983e:	f2c0 815a 	blt.w	8009af6 <_dtoa_r+0x6fe>
 8009842:	2f0e      	cmp	r7, #14
 8009844:	f300 8157 	bgt.w	8009af6 <_dtoa_r+0x6fe>
 8009848:	4b5a      	ldr	r3, [pc, #360]	@ (80099b4 <_dtoa_r+0x5bc>)
 800984a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800984e:	ed93 7b00 	vldr	d7, [r3]
 8009852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009854:	2b00      	cmp	r3, #0
 8009856:	ed8d 7b00 	vstr	d7, [sp]
 800985a:	da03      	bge.n	8009864 <_dtoa_r+0x46c>
 800985c:	9b07      	ldr	r3, [sp, #28]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f340 8101 	ble.w	8009a66 <_dtoa_r+0x66e>
 8009864:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009868:	4656      	mov	r6, sl
 800986a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	f7f6 fffb 	bl	800086c <__aeabi_ddiv>
 8009876:	f7f7 f97f 	bl	8000b78 <__aeabi_d2iz>
 800987a:	4680      	mov	r8, r0
 800987c:	f7f6 fe62 	bl	8000544 <__aeabi_i2d>
 8009880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009884:	f7f6 fec8 	bl	8000618 <__aeabi_dmul>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	4620      	mov	r0, r4
 800988e:	4629      	mov	r1, r5
 8009890:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009894:	f7f6 fd08 	bl	80002a8 <__aeabi_dsub>
 8009898:	f806 4b01 	strb.w	r4, [r6], #1
 800989c:	9d07      	ldr	r5, [sp, #28]
 800989e:	eba6 040a 	sub.w	r4, r6, sl
 80098a2:	42a5      	cmp	r5, r4
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	f040 8117 	bne.w	8009ada <_dtoa_r+0x6e2>
 80098ac:	f7f6 fcfe 	bl	80002ac <__adddf3>
 80098b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098b4:	4604      	mov	r4, r0
 80098b6:	460d      	mov	r5, r1
 80098b8:	f7f7 f93e 	bl	8000b38 <__aeabi_dcmpgt>
 80098bc:	2800      	cmp	r0, #0
 80098be:	f040 80f9 	bne.w	8009ab4 <_dtoa_r+0x6bc>
 80098c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098c6:	4620      	mov	r0, r4
 80098c8:	4629      	mov	r1, r5
 80098ca:	f7f7 f90d 	bl	8000ae8 <__aeabi_dcmpeq>
 80098ce:	b118      	cbz	r0, 80098d8 <_dtoa_r+0x4e0>
 80098d0:	f018 0f01 	tst.w	r8, #1
 80098d4:	f040 80ee 	bne.w	8009ab4 <_dtoa_r+0x6bc>
 80098d8:	4649      	mov	r1, r9
 80098da:	4658      	mov	r0, fp
 80098dc:	f000 fc90 	bl	800a200 <_Bfree>
 80098e0:	2300      	movs	r3, #0
 80098e2:	7033      	strb	r3, [r6, #0]
 80098e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098e6:	3701      	adds	r7, #1
 80098e8:	601f      	str	r7, [r3, #0]
 80098ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 831d 	beq.w	8009f2c <_dtoa_r+0xb34>
 80098f2:	601e      	str	r6, [r3, #0]
 80098f4:	e31a      	b.n	8009f2c <_dtoa_r+0xb34>
 80098f6:	07e2      	lsls	r2, r4, #31
 80098f8:	d505      	bpl.n	8009906 <_dtoa_r+0x50e>
 80098fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098fe:	f7f6 fe8b 	bl	8000618 <__aeabi_dmul>
 8009902:	3601      	adds	r6, #1
 8009904:	2301      	movs	r3, #1
 8009906:	1064      	asrs	r4, r4, #1
 8009908:	3508      	adds	r5, #8
 800990a:	e73f      	b.n	800978c <_dtoa_r+0x394>
 800990c:	2602      	movs	r6, #2
 800990e:	e742      	b.n	8009796 <_dtoa_r+0x39e>
 8009910:	9c07      	ldr	r4, [sp, #28]
 8009912:	9704      	str	r7, [sp, #16]
 8009914:	e761      	b.n	80097da <_dtoa_r+0x3e2>
 8009916:	4b27      	ldr	r3, [pc, #156]	@ (80099b4 <_dtoa_r+0x5bc>)
 8009918:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800991a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800991e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009922:	4454      	add	r4, sl
 8009924:	2900      	cmp	r1, #0
 8009926:	d053      	beq.n	80099d0 <_dtoa_r+0x5d8>
 8009928:	4928      	ldr	r1, [pc, #160]	@ (80099cc <_dtoa_r+0x5d4>)
 800992a:	2000      	movs	r0, #0
 800992c:	f7f6 ff9e 	bl	800086c <__aeabi_ddiv>
 8009930:	4633      	mov	r3, r6
 8009932:	462a      	mov	r2, r5
 8009934:	f7f6 fcb8 	bl	80002a8 <__aeabi_dsub>
 8009938:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800993c:	4656      	mov	r6, sl
 800993e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009942:	f7f7 f919 	bl	8000b78 <__aeabi_d2iz>
 8009946:	4605      	mov	r5, r0
 8009948:	f7f6 fdfc 	bl	8000544 <__aeabi_i2d>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009954:	f7f6 fca8 	bl	80002a8 <__aeabi_dsub>
 8009958:	3530      	adds	r5, #48	@ 0x30
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009962:	f806 5b01 	strb.w	r5, [r6], #1
 8009966:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800996a:	f7f7 f8c7 	bl	8000afc <__aeabi_dcmplt>
 800996e:	2800      	cmp	r0, #0
 8009970:	d171      	bne.n	8009a56 <_dtoa_r+0x65e>
 8009972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009976:	4911      	ldr	r1, [pc, #68]	@ (80099bc <_dtoa_r+0x5c4>)
 8009978:	2000      	movs	r0, #0
 800997a:	f7f6 fc95 	bl	80002a8 <__aeabi_dsub>
 800997e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009982:	f7f7 f8bb 	bl	8000afc <__aeabi_dcmplt>
 8009986:	2800      	cmp	r0, #0
 8009988:	f040 8095 	bne.w	8009ab6 <_dtoa_r+0x6be>
 800998c:	42a6      	cmp	r6, r4
 800998e:	f43f af50 	beq.w	8009832 <_dtoa_r+0x43a>
 8009992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009996:	4b0a      	ldr	r3, [pc, #40]	@ (80099c0 <_dtoa_r+0x5c8>)
 8009998:	2200      	movs	r2, #0
 800999a:	f7f6 fe3d 	bl	8000618 <__aeabi_dmul>
 800999e:	4b08      	ldr	r3, [pc, #32]	@ (80099c0 <_dtoa_r+0x5c8>)
 80099a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099a4:	2200      	movs	r2, #0
 80099a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099aa:	f7f6 fe35 	bl	8000618 <__aeabi_dmul>
 80099ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099b2:	e7c4      	b.n	800993e <_dtoa_r+0x546>
 80099b4:	0800e9c0 	.word	0x0800e9c0
 80099b8:	0800e998 	.word	0x0800e998
 80099bc:	3ff00000 	.word	0x3ff00000
 80099c0:	40240000 	.word	0x40240000
 80099c4:	401c0000 	.word	0x401c0000
 80099c8:	40140000 	.word	0x40140000
 80099cc:	3fe00000 	.word	0x3fe00000
 80099d0:	4631      	mov	r1, r6
 80099d2:	4628      	mov	r0, r5
 80099d4:	f7f6 fe20 	bl	8000618 <__aeabi_dmul>
 80099d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80099de:	4656      	mov	r6, sl
 80099e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099e4:	f7f7 f8c8 	bl	8000b78 <__aeabi_d2iz>
 80099e8:	4605      	mov	r5, r0
 80099ea:	f7f6 fdab 	bl	8000544 <__aeabi_i2d>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099f6:	f7f6 fc57 	bl	80002a8 <__aeabi_dsub>
 80099fa:	3530      	adds	r5, #48	@ 0x30
 80099fc:	f806 5b01 	strb.w	r5, [r6], #1
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	42a6      	cmp	r6, r4
 8009a06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a0a:	f04f 0200 	mov.w	r2, #0
 8009a0e:	d124      	bne.n	8009a5a <_dtoa_r+0x662>
 8009a10:	4bac      	ldr	r3, [pc, #688]	@ (8009cc4 <_dtoa_r+0x8cc>)
 8009a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a16:	f7f6 fc49 	bl	80002ac <__adddf3>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a22:	f7f7 f889 	bl	8000b38 <__aeabi_dcmpgt>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d145      	bne.n	8009ab6 <_dtoa_r+0x6be>
 8009a2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a2e:	49a5      	ldr	r1, [pc, #660]	@ (8009cc4 <_dtoa_r+0x8cc>)
 8009a30:	2000      	movs	r0, #0
 8009a32:	f7f6 fc39 	bl	80002a8 <__aeabi_dsub>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a3e:	f7f7 f85d 	bl	8000afc <__aeabi_dcmplt>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f43f aef5 	beq.w	8009832 <_dtoa_r+0x43a>
 8009a48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009a4a:	1e73      	subs	r3, r6, #1
 8009a4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a52:	2b30      	cmp	r3, #48	@ 0x30
 8009a54:	d0f8      	beq.n	8009a48 <_dtoa_r+0x650>
 8009a56:	9f04      	ldr	r7, [sp, #16]
 8009a58:	e73e      	b.n	80098d8 <_dtoa_r+0x4e0>
 8009a5a:	4b9b      	ldr	r3, [pc, #620]	@ (8009cc8 <_dtoa_r+0x8d0>)
 8009a5c:	f7f6 fddc 	bl	8000618 <__aeabi_dmul>
 8009a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a64:	e7bc      	b.n	80099e0 <_dtoa_r+0x5e8>
 8009a66:	d10c      	bne.n	8009a82 <_dtoa_r+0x68a>
 8009a68:	4b98      	ldr	r3, [pc, #608]	@ (8009ccc <_dtoa_r+0x8d4>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a70:	f7f6 fdd2 	bl	8000618 <__aeabi_dmul>
 8009a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a78:	f7f7 f854 	bl	8000b24 <__aeabi_dcmpge>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f000 8157 	beq.w	8009d30 <_dtoa_r+0x938>
 8009a82:	2400      	movs	r4, #0
 8009a84:	4625      	mov	r5, r4
 8009a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	4656      	mov	r6, sl
 8009a8e:	2700      	movs	r7, #0
 8009a90:	4621      	mov	r1, r4
 8009a92:	4658      	mov	r0, fp
 8009a94:	f000 fbb4 	bl	800a200 <_Bfree>
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	d0dc      	beq.n	8009a56 <_dtoa_r+0x65e>
 8009a9c:	b12f      	cbz	r7, 8009aaa <_dtoa_r+0x6b2>
 8009a9e:	42af      	cmp	r7, r5
 8009aa0:	d003      	beq.n	8009aaa <_dtoa_r+0x6b2>
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	4658      	mov	r0, fp
 8009aa6:	f000 fbab 	bl	800a200 <_Bfree>
 8009aaa:	4629      	mov	r1, r5
 8009aac:	4658      	mov	r0, fp
 8009aae:	f000 fba7 	bl	800a200 <_Bfree>
 8009ab2:	e7d0      	b.n	8009a56 <_dtoa_r+0x65e>
 8009ab4:	9704      	str	r7, [sp, #16]
 8009ab6:	4633      	mov	r3, r6
 8009ab8:	461e      	mov	r6, r3
 8009aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009abe:	2a39      	cmp	r2, #57	@ 0x39
 8009ac0:	d107      	bne.n	8009ad2 <_dtoa_r+0x6da>
 8009ac2:	459a      	cmp	sl, r3
 8009ac4:	d1f8      	bne.n	8009ab8 <_dtoa_r+0x6c0>
 8009ac6:	9a04      	ldr	r2, [sp, #16]
 8009ac8:	3201      	adds	r2, #1
 8009aca:	9204      	str	r2, [sp, #16]
 8009acc:	2230      	movs	r2, #48	@ 0x30
 8009ace:	f88a 2000 	strb.w	r2, [sl]
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	3201      	adds	r2, #1
 8009ad6:	701a      	strb	r2, [r3, #0]
 8009ad8:	e7bd      	b.n	8009a56 <_dtoa_r+0x65e>
 8009ada:	4b7b      	ldr	r3, [pc, #492]	@ (8009cc8 <_dtoa_r+0x8d0>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	f7f6 fd9b 	bl	8000618 <__aeabi_dmul>
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	460d      	mov	r5, r1
 8009aea:	f7f6 fffd 	bl	8000ae8 <__aeabi_dcmpeq>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	f43f aebb 	beq.w	800986a <_dtoa_r+0x472>
 8009af4:	e6f0      	b.n	80098d8 <_dtoa_r+0x4e0>
 8009af6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009af8:	2a00      	cmp	r2, #0
 8009afa:	f000 80db 	beq.w	8009cb4 <_dtoa_r+0x8bc>
 8009afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b00:	2a01      	cmp	r2, #1
 8009b02:	f300 80bf 	bgt.w	8009c84 <_dtoa_r+0x88c>
 8009b06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	f000 80b7 	beq.w	8009c7c <_dtoa_r+0x884>
 8009b0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b14:	4646      	mov	r6, r8
 8009b16:	9a08      	ldr	r2, [sp, #32]
 8009b18:	2101      	movs	r1, #1
 8009b1a:	441a      	add	r2, r3
 8009b1c:	4658      	mov	r0, fp
 8009b1e:	4498      	add	r8, r3
 8009b20:	9208      	str	r2, [sp, #32]
 8009b22:	f000 fc6b 	bl	800a3fc <__i2b>
 8009b26:	4605      	mov	r5, r0
 8009b28:	b15e      	cbz	r6, 8009b42 <_dtoa_r+0x74a>
 8009b2a:	9b08      	ldr	r3, [sp, #32]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dd08      	ble.n	8009b42 <_dtoa_r+0x74a>
 8009b30:	42b3      	cmp	r3, r6
 8009b32:	9a08      	ldr	r2, [sp, #32]
 8009b34:	bfa8      	it	ge
 8009b36:	4633      	movge	r3, r6
 8009b38:	eba8 0803 	sub.w	r8, r8, r3
 8009b3c:	1af6      	subs	r6, r6, r3
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	9308      	str	r3, [sp, #32]
 8009b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b44:	b1f3      	cbz	r3, 8009b84 <_dtoa_r+0x78c>
 8009b46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 80b7 	beq.w	8009cbc <_dtoa_r+0x8c4>
 8009b4e:	b18c      	cbz	r4, 8009b74 <_dtoa_r+0x77c>
 8009b50:	4629      	mov	r1, r5
 8009b52:	4622      	mov	r2, r4
 8009b54:	4658      	mov	r0, fp
 8009b56:	f000 fd11 	bl	800a57c <__pow5mult>
 8009b5a:	464a      	mov	r2, r9
 8009b5c:	4601      	mov	r1, r0
 8009b5e:	4605      	mov	r5, r0
 8009b60:	4658      	mov	r0, fp
 8009b62:	f000 fc61 	bl	800a428 <__multiply>
 8009b66:	4649      	mov	r1, r9
 8009b68:	9004      	str	r0, [sp, #16]
 8009b6a:	4658      	mov	r0, fp
 8009b6c:	f000 fb48 	bl	800a200 <_Bfree>
 8009b70:	9b04      	ldr	r3, [sp, #16]
 8009b72:	4699      	mov	r9, r3
 8009b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b76:	1b1a      	subs	r2, r3, r4
 8009b78:	d004      	beq.n	8009b84 <_dtoa_r+0x78c>
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	4658      	mov	r0, fp
 8009b7e:	f000 fcfd 	bl	800a57c <__pow5mult>
 8009b82:	4681      	mov	r9, r0
 8009b84:	2101      	movs	r1, #1
 8009b86:	4658      	mov	r0, fp
 8009b88:	f000 fc38 	bl	800a3fc <__i2b>
 8009b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b8e:	4604      	mov	r4, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 81cf 	beq.w	8009f34 <_dtoa_r+0xb3c>
 8009b96:	461a      	mov	r2, r3
 8009b98:	4601      	mov	r1, r0
 8009b9a:	4658      	mov	r0, fp
 8009b9c:	f000 fcee 	bl	800a57c <__pow5mult>
 8009ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	f300 8095 	bgt.w	8009cd4 <_dtoa_r+0x8dc>
 8009baa:	9b02      	ldr	r3, [sp, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f040 8087 	bne.w	8009cc0 <_dtoa_r+0x8c8>
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f040 8089 	bne.w	8009cd0 <_dtoa_r+0x8d8>
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bc4:	0d1b      	lsrs	r3, r3, #20
 8009bc6:	051b      	lsls	r3, r3, #20
 8009bc8:	b12b      	cbz	r3, 8009bd6 <_dtoa_r+0x7de>
 8009bca:	9b08      	ldr	r3, [sp, #32]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	9308      	str	r3, [sp, #32]
 8009bd0:	f108 0801 	add.w	r8, r8, #1
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f000 81b0 	beq.w	8009f40 <_dtoa_r+0xb48>
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009be6:	6918      	ldr	r0, [r3, #16]
 8009be8:	f000 fbbc 	bl	800a364 <__hi0bits>
 8009bec:	f1c0 0020 	rsb	r0, r0, #32
 8009bf0:	9b08      	ldr	r3, [sp, #32]
 8009bf2:	4418      	add	r0, r3
 8009bf4:	f010 001f 	ands.w	r0, r0, #31
 8009bf8:	d077      	beq.n	8009cea <_dtoa_r+0x8f2>
 8009bfa:	f1c0 0320 	rsb	r3, r0, #32
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	dd6b      	ble.n	8009cda <_dtoa_r+0x8e2>
 8009c02:	9b08      	ldr	r3, [sp, #32]
 8009c04:	f1c0 001c 	rsb	r0, r0, #28
 8009c08:	4403      	add	r3, r0
 8009c0a:	4480      	add	r8, r0
 8009c0c:	4406      	add	r6, r0
 8009c0e:	9308      	str	r3, [sp, #32]
 8009c10:	f1b8 0f00 	cmp.w	r8, #0
 8009c14:	dd05      	ble.n	8009c22 <_dtoa_r+0x82a>
 8009c16:	4649      	mov	r1, r9
 8009c18:	4642      	mov	r2, r8
 8009c1a:	4658      	mov	r0, fp
 8009c1c:	f000 fd08 	bl	800a630 <__lshift>
 8009c20:	4681      	mov	r9, r0
 8009c22:	9b08      	ldr	r3, [sp, #32]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dd05      	ble.n	8009c34 <_dtoa_r+0x83c>
 8009c28:	4621      	mov	r1, r4
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	4658      	mov	r0, fp
 8009c2e:	f000 fcff 	bl	800a630 <__lshift>
 8009c32:	4604      	mov	r4, r0
 8009c34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d059      	beq.n	8009cee <_dtoa_r+0x8f6>
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4648      	mov	r0, r9
 8009c3e:	f000 fd63 	bl	800a708 <__mcmp>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	da53      	bge.n	8009cee <_dtoa_r+0x8f6>
 8009c46:	1e7b      	subs	r3, r7, #1
 8009c48:	9304      	str	r3, [sp, #16]
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	220a      	movs	r2, #10
 8009c50:	4658      	mov	r0, fp
 8009c52:	f000 faf7 	bl	800a244 <__multadd>
 8009c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c58:	4681      	mov	r9, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f000 8172 	beq.w	8009f44 <_dtoa_r+0xb4c>
 8009c60:	2300      	movs	r3, #0
 8009c62:	4629      	mov	r1, r5
 8009c64:	220a      	movs	r2, #10
 8009c66:	4658      	mov	r0, fp
 8009c68:	f000 faec 	bl	800a244 <__multadd>
 8009c6c:	9b00      	ldr	r3, [sp, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	4605      	mov	r5, r0
 8009c72:	dc67      	bgt.n	8009d44 <_dtoa_r+0x94c>
 8009c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	dc41      	bgt.n	8009cfe <_dtoa_r+0x906>
 8009c7a:	e063      	b.n	8009d44 <_dtoa_r+0x94c>
 8009c7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c82:	e746      	b.n	8009b12 <_dtoa_r+0x71a>
 8009c84:	9b07      	ldr	r3, [sp, #28]
 8009c86:	1e5c      	subs	r4, r3, #1
 8009c88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c8a:	42a3      	cmp	r3, r4
 8009c8c:	bfbf      	itttt	lt
 8009c8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009c90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009c92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009c94:	1ae3      	sublt	r3, r4, r3
 8009c96:	bfb4      	ite	lt
 8009c98:	18d2      	addlt	r2, r2, r3
 8009c9a:	1b1c      	subge	r4, r3, r4
 8009c9c:	9b07      	ldr	r3, [sp, #28]
 8009c9e:	bfbc      	itt	lt
 8009ca0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009ca2:	2400      	movlt	r4, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bfb5      	itete	lt
 8009ca8:	eba8 0603 	sublt.w	r6, r8, r3
 8009cac:	9b07      	ldrge	r3, [sp, #28]
 8009cae:	2300      	movlt	r3, #0
 8009cb0:	4646      	movge	r6, r8
 8009cb2:	e730      	b.n	8009b16 <_dtoa_r+0x71e>
 8009cb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009cb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009cb8:	4646      	mov	r6, r8
 8009cba:	e735      	b.n	8009b28 <_dtoa_r+0x730>
 8009cbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cbe:	e75c      	b.n	8009b7a <_dtoa_r+0x782>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e788      	b.n	8009bd6 <_dtoa_r+0x7de>
 8009cc4:	3fe00000 	.word	0x3fe00000
 8009cc8:	40240000 	.word	0x40240000
 8009ccc:	40140000 	.word	0x40140000
 8009cd0:	9b02      	ldr	r3, [sp, #8]
 8009cd2:	e780      	b.n	8009bd6 <_dtoa_r+0x7de>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cd8:	e782      	b.n	8009be0 <_dtoa_r+0x7e8>
 8009cda:	d099      	beq.n	8009c10 <_dtoa_r+0x818>
 8009cdc:	9a08      	ldr	r2, [sp, #32]
 8009cde:	331c      	adds	r3, #28
 8009ce0:	441a      	add	r2, r3
 8009ce2:	4498      	add	r8, r3
 8009ce4:	441e      	add	r6, r3
 8009ce6:	9208      	str	r2, [sp, #32]
 8009ce8:	e792      	b.n	8009c10 <_dtoa_r+0x818>
 8009cea:	4603      	mov	r3, r0
 8009cec:	e7f6      	b.n	8009cdc <_dtoa_r+0x8e4>
 8009cee:	9b07      	ldr	r3, [sp, #28]
 8009cf0:	9704      	str	r7, [sp, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	dc20      	bgt.n	8009d38 <_dtoa_r+0x940>
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	dd1e      	ble.n	8009d3c <_dtoa_r+0x944>
 8009cfe:	9b00      	ldr	r3, [sp, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f47f aec0 	bne.w	8009a86 <_dtoa_r+0x68e>
 8009d06:	4621      	mov	r1, r4
 8009d08:	2205      	movs	r2, #5
 8009d0a:	4658      	mov	r0, fp
 8009d0c:	f000 fa9a 	bl	800a244 <__multadd>
 8009d10:	4601      	mov	r1, r0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4648      	mov	r0, r9
 8009d16:	f000 fcf7 	bl	800a708 <__mcmp>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	f77f aeb3 	ble.w	8009a86 <_dtoa_r+0x68e>
 8009d20:	4656      	mov	r6, sl
 8009d22:	2331      	movs	r3, #49	@ 0x31
 8009d24:	f806 3b01 	strb.w	r3, [r6], #1
 8009d28:	9b04      	ldr	r3, [sp, #16]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	e6ae      	b.n	8009a8e <_dtoa_r+0x696>
 8009d30:	9c07      	ldr	r4, [sp, #28]
 8009d32:	9704      	str	r7, [sp, #16]
 8009d34:	4625      	mov	r5, r4
 8009d36:	e7f3      	b.n	8009d20 <_dtoa_r+0x928>
 8009d38:	9b07      	ldr	r3, [sp, #28]
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 8104 	beq.w	8009f4c <_dtoa_r+0xb54>
 8009d44:	2e00      	cmp	r6, #0
 8009d46:	dd05      	ble.n	8009d54 <_dtoa_r+0x95c>
 8009d48:	4629      	mov	r1, r5
 8009d4a:	4632      	mov	r2, r6
 8009d4c:	4658      	mov	r0, fp
 8009d4e:	f000 fc6f 	bl	800a630 <__lshift>
 8009d52:	4605      	mov	r5, r0
 8009d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d05a      	beq.n	8009e10 <_dtoa_r+0xa18>
 8009d5a:	6869      	ldr	r1, [r5, #4]
 8009d5c:	4658      	mov	r0, fp
 8009d5e:	f000 fa0f 	bl	800a180 <_Balloc>
 8009d62:	4606      	mov	r6, r0
 8009d64:	b928      	cbnz	r0, 8009d72 <_dtoa_r+0x97a>
 8009d66:	4b84      	ldr	r3, [pc, #528]	@ (8009f78 <_dtoa_r+0xb80>)
 8009d68:	4602      	mov	r2, r0
 8009d6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d6e:	f7ff bb5a 	b.w	8009426 <_dtoa_r+0x2e>
 8009d72:	692a      	ldr	r2, [r5, #16]
 8009d74:	3202      	adds	r2, #2
 8009d76:	0092      	lsls	r2, r2, #2
 8009d78:	f105 010c 	add.w	r1, r5, #12
 8009d7c:	300c      	adds	r0, #12
 8009d7e:	f7ff fa9c 	bl	80092ba <memcpy>
 8009d82:	2201      	movs	r2, #1
 8009d84:	4631      	mov	r1, r6
 8009d86:	4658      	mov	r0, fp
 8009d88:	f000 fc52 	bl	800a630 <__lshift>
 8009d8c:	f10a 0301 	add.w	r3, sl, #1
 8009d90:	9307      	str	r3, [sp, #28]
 8009d92:	9b00      	ldr	r3, [sp, #0]
 8009d94:	4453      	add	r3, sl
 8009d96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d98:	9b02      	ldr	r3, [sp, #8]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	462f      	mov	r7, r5
 8009da0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009da2:	4605      	mov	r5, r0
 8009da4:	9b07      	ldr	r3, [sp, #28]
 8009da6:	4621      	mov	r1, r4
 8009da8:	3b01      	subs	r3, #1
 8009daa:	4648      	mov	r0, r9
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	f7ff fa99 	bl	80092e4 <quorem>
 8009db2:	4639      	mov	r1, r7
 8009db4:	9002      	str	r0, [sp, #8]
 8009db6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009dba:	4648      	mov	r0, r9
 8009dbc:	f000 fca4 	bl	800a708 <__mcmp>
 8009dc0:	462a      	mov	r2, r5
 8009dc2:	9008      	str	r0, [sp, #32]
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4658      	mov	r0, fp
 8009dc8:	f000 fcba 	bl	800a740 <__mdiff>
 8009dcc:	68c2      	ldr	r2, [r0, #12]
 8009dce:	4606      	mov	r6, r0
 8009dd0:	bb02      	cbnz	r2, 8009e14 <_dtoa_r+0xa1c>
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	4648      	mov	r0, r9
 8009dd6:	f000 fc97 	bl	800a708 <__mcmp>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4658      	mov	r0, fp
 8009de0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009de2:	f000 fa0d 	bl	800a200 <_Bfree>
 8009de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dea:	9e07      	ldr	r6, [sp, #28]
 8009dec:	ea43 0102 	orr.w	r1, r3, r2
 8009df0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009df2:	4319      	orrs	r1, r3
 8009df4:	d110      	bne.n	8009e18 <_dtoa_r+0xa20>
 8009df6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009dfa:	d029      	beq.n	8009e50 <_dtoa_r+0xa58>
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	dd02      	ble.n	8009e08 <_dtoa_r+0xa10>
 8009e02:	9b02      	ldr	r3, [sp, #8]
 8009e04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e08:	9b00      	ldr	r3, [sp, #0]
 8009e0a:	f883 8000 	strb.w	r8, [r3]
 8009e0e:	e63f      	b.n	8009a90 <_dtoa_r+0x698>
 8009e10:	4628      	mov	r0, r5
 8009e12:	e7bb      	b.n	8009d8c <_dtoa_r+0x994>
 8009e14:	2201      	movs	r2, #1
 8009e16:	e7e1      	b.n	8009ddc <_dtoa_r+0x9e4>
 8009e18:	9b08      	ldr	r3, [sp, #32]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	db04      	blt.n	8009e28 <_dtoa_r+0xa30>
 8009e1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e20:	430b      	orrs	r3, r1
 8009e22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e24:	430b      	orrs	r3, r1
 8009e26:	d120      	bne.n	8009e6a <_dtoa_r+0xa72>
 8009e28:	2a00      	cmp	r2, #0
 8009e2a:	dded      	ble.n	8009e08 <_dtoa_r+0xa10>
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	2201      	movs	r2, #1
 8009e30:	4658      	mov	r0, fp
 8009e32:	f000 fbfd 	bl	800a630 <__lshift>
 8009e36:	4621      	mov	r1, r4
 8009e38:	4681      	mov	r9, r0
 8009e3a:	f000 fc65 	bl	800a708 <__mcmp>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	dc03      	bgt.n	8009e4a <_dtoa_r+0xa52>
 8009e42:	d1e1      	bne.n	8009e08 <_dtoa_r+0xa10>
 8009e44:	f018 0f01 	tst.w	r8, #1
 8009e48:	d0de      	beq.n	8009e08 <_dtoa_r+0xa10>
 8009e4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e4e:	d1d8      	bne.n	8009e02 <_dtoa_r+0xa0a>
 8009e50:	9a00      	ldr	r2, [sp, #0]
 8009e52:	2339      	movs	r3, #57	@ 0x39
 8009e54:	7013      	strb	r3, [r2, #0]
 8009e56:	4633      	mov	r3, r6
 8009e58:	461e      	mov	r6, r3
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e60:	2a39      	cmp	r2, #57	@ 0x39
 8009e62:	d052      	beq.n	8009f0a <_dtoa_r+0xb12>
 8009e64:	3201      	adds	r2, #1
 8009e66:	701a      	strb	r2, [r3, #0]
 8009e68:	e612      	b.n	8009a90 <_dtoa_r+0x698>
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	dd07      	ble.n	8009e7e <_dtoa_r+0xa86>
 8009e6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e72:	d0ed      	beq.n	8009e50 <_dtoa_r+0xa58>
 8009e74:	9a00      	ldr	r2, [sp, #0]
 8009e76:	f108 0301 	add.w	r3, r8, #1
 8009e7a:	7013      	strb	r3, [r2, #0]
 8009e7c:	e608      	b.n	8009a90 <_dtoa_r+0x698>
 8009e7e:	9b07      	ldr	r3, [sp, #28]
 8009e80:	9a07      	ldr	r2, [sp, #28]
 8009e82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d028      	beq.n	8009ede <_dtoa_r+0xae6>
 8009e8c:	4649      	mov	r1, r9
 8009e8e:	2300      	movs	r3, #0
 8009e90:	220a      	movs	r2, #10
 8009e92:	4658      	mov	r0, fp
 8009e94:	f000 f9d6 	bl	800a244 <__multadd>
 8009e98:	42af      	cmp	r7, r5
 8009e9a:	4681      	mov	r9, r0
 8009e9c:	f04f 0300 	mov.w	r3, #0
 8009ea0:	f04f 020a 	mov.w	r2, #10
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	4658      	mov	r0, fp
 8009ea8:	d107      	bne.n	8009eba <_dtoa_r+0xac2>
 8009eaa:	f000 f9cb 	bl	800a244 <__multadd>
 8009eae:	4607      	mov	r7, r0
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	9b07      	ldr	r3, [sp, #28]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	9307      	str	r3, [sp, #28]
 8009eb8:	e774      	b.n	8009da4 <_dtoa_r+0x9ac>
 8009eba:	f000 f9c3 	bl	800a244 <__multadd>
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	220a      	movs	r2, #10
 8009ec6:	4658      	mov	r0, fp
 8009ec8:	f000 f9bc 	bl	800a244 <__multadd>
 8009ecc:	4605      	mov	r5, r0
 8009ece:	e7f0      	b.n	8009eb2 <_dtoa_r+0xaba>
 8009ed0:	9b00      	ldr	r3, [sp, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	bfcc      	ite	gt
 8009ed6:	461e      	movgt	r6, r3
 8009ed8:	2601      	movle	r6, #1
 8009eda:	4456      	add	r6, sl
 8009edc:	2700      	movs	r7, #0
 8009ede:	4649      	mov	r1, r9
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	4658      	mov	r0, fp
 8009ee4:	f000 fba4 	bl	800a630 <__lshift>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4681      	mov	r9, r0
 8009eec:	f000 fc0c 	bl	800a708 <__mcmp>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	dcb0      	bgt.n	8009e56 <_dtoa_r+0xa5e>
 8009ef4:	d102      	bne.n	8009efc <_dtoa_r+0xb04>
 8009ef6:	f018 0f01 	tst.w	r8, #1
 8009efa:	d1ac      	bne.n	8009e56 <_dtoa_r+0xa5e>
 8009efc:	4633      	mov	r3, r6
 8009efe:	461e      	mov	r6, r3
 8009f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f04:	2a30      	cmp	r2, #48	@ 0x30
 8009f06:	d0fa      	beq.n	8009efe <_dtoa_r+0xb06>
 8009f08:	e5c2      	b.n	8009a90 <_dtoa_r+0x698>
 8009f0a:	459a      	cmp	sl, r3
 8009f0c:	d1a4      	bne.n	8009e58 <_dtoa_r+0xa60>
 8009f0e:	9b04      	ldr	r3, [sp, #16]
 8009f10:	3301      	adds	r3, #1
 8009f12:	9304      	str	r3, [sp, #16]
 8009f14:	2331      	movs	r3, #49	@ 0x31
 8009f16:	f88a 3000 	strb.w	r3, [sl]
 8009f1a:	e5b9      	b.n	8009a90 <_dtoa_r+0x698>
 8009f1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009f7c <_dtoa_r+0xb84>
 8009f22:	b11b      	cbz	r3, 8009f2c <_dtoa_r+0xb34>
 8009f24:	f10a 0308 	add.w	r3, sl, #8
 8009f28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	4650      	mov	r0, sl
 8009f2e:	b019      	add	sp, #100	@ 0x64
 8009f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	f77f ae37 	ble.w	8009baa <_dtoa_r+0x7b2>
 8009f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f40:	2001      	movs	r0, #1
 8009f42:	e655      	b.n	8009bf0 <_dtoa_r+0x7f8>
 8009f44:	9b00      	ldr	r3, [sp, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f77f aed6 	ble.w	8009cf8 <_dtoa_r+0x900>
 8009f4c:	4656      	mov	r6, sl
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4648      	mov	r0, r9
 8009f52:	f7ff f9c7 	bl	80092e4 <quorem>
 8009f56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f5a:	f806 8b01 	strb.w	r8, [r6], #1
 8009f5e:	9b00      	ldr	r3, [sp, #0]
 8009f60:	eba6 020a 	sub.w	r2, r6, sl
 8009f64:	4293      	cmp	r3, r2
 8009f66:	ddb3      	ble.n	8009ed0 <_dtoa_r+0xad8>
 8009f68:	4649      	mov	r1, r9
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	220a      	movs	r2, #10
 8009f6e:	4658      	mov	r0, fp
 8009f70:	f000 f968 	bl	800a244 <__multadd>
 8009f74:	4681      	mov	r9, r0
 8009f76:	e7ea      	b.n	8009f4e <_dtoa_r+0xb56>
 8009f78:	0800e91e 	.word	0x0800e91e
 8009f7c:	0800e8a2 	.word	0x0800e8a2

08009f80 <_free_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4605      	mov	r5, r0
 8009f84:	2900      	cmp	r1, #0
 8009f86:	d041      	beq.n	800a00c <_free_r+0x8c>
 8009f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f8c:	1f0c      	subs	r4, r1, #4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bfb8      	it	lt
 8009f92:	18e4      	addlt	r4, r4, r3
 8009f94:	f000 f8e8 	bl	800a168 <__malloc_lock>
 8009f98:	4a1d      	ldr	r2, [pc, #116]	@ (800a010 <_free_r+0x90>)
 8009f9a:	6813      	ldr	r3, [r2, #0]
 8009f9c:	b933      	cbnz	r3, 8009fac <_free_r+0x2c>
 8009f9e:	6063      	str	r3, [r4, #4]
 8009fa0:	6014      	str	r4, [r2, #0]
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fa8:	f000 b8e4 	b.w	800a174 <__malloc_unlock>
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	d908      	bls.n	8009fc2 <_free_r+0x42>
 8009fb0:	6820      	ldr	r0, [r4, #0]
 8009fb2:	1821      	adds	r1, r4, r0
 8009fb4:	428b      	cmp	r3, r1
 8009fb6:	bf01      	itttt	eq
 8009fb8:	6819      	ldreq	r1, [r3, #0]
 8009fba:	685b      	ldreq	r3, [r3, #4]
 8009fbc:	1809      	addeq	r1, r1, r0
 8009fbe:	6021      	streq	r1, [r4, #0]
 8009fc0:	e7ed      	b.n	8009f9e <_free_r+0x1e>
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	b10b      	cbz	r3, 8009fcc <_free_r+0x4c>
 8009fc8:	42a3      	cmp	r3, r4
 8009fca:	d9fa      	bls.n	8009fc2 <_free_r+0x42>
 8009fcc:	6811      	ldr	r1, [r2, #0]
 8009fce:	1850      	adds	r0, r2, r1
 8009fd0:	42a0      	cmp	r0, r4
 8009fd2:	d10b      	bne.n	8009fec <_free_r+0x6c>
 8009fd4:	6820      	ldr	r0, [r4, #0]
 8009fd6:	4401      	add	r1, r0
 8009fd8:	1850      	adds	r0, r2, r1
 8009fda:	4283      	cmp	r3, r0
 8009fdc:	6011      	str	r1, [r2, #0]
 8009fde:	d1e0      	bne.n	8009fa2 <_free_r+0x22>
 8009fe0:	6818      	ldr	r0, [r3, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	6053      	str	r3, [r2, #4]
 8009fe6:	4408      	add	r0, r1
 8009fe8:	6010      	str	r0, [r2, #0]
 8009fea:	e7da      	b.n	8009fa2 <_free_r+0x22>
 8009fec:	d902      	bls.n	8009ff4 <_free_r+0x74>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	e7d6      	b.n	8009fa2 <_free_r+0x22>
 8009ff4:	6820      	ldr	r0, [r4, #0]
 8009ff6:	1821      	adds	r1, r4, r0
 8009ff8:	428b      	cmp	r3, r1
 8009ffa:	bf04      	itt	eq
 8009ffc:	6819      	ldreq	r1, [r3, #0]
 8009ffe:	685b      	ldreq	r3, [r3, #4]
 800a000:	6063      	str	r3, [r4, #4]
 800a002:	bf04      	itt	eq
 800a004:	1809      	addeq	r1, r1, r0
 800a006:	6021      	streq	r1, [r4, #0]
 800a008:	6054      	str	r4, [r2, #4]
 800a00a:	e7ca      	b.n	8009fa2 <_free_r+0x22>
 800a00c:	bd38      	pop	{r3, r4, r5, pc}
 800a00e:	bf00      	nop
 800a010:	20002b98 	.word	0x20002b98

0800a014 <malloc>:
 800a014:	4b02      	ldr	r3, [pc, #8]	@ (800a020 <malloc+0xc>)
 800a016:	4601      	mov	r1, r0
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	f000 b825 	b.w	800a068 <_malloc_r>
 800a01e:	bf00      	nop
 800a020:	20000344 	.word	0x20000344

0800a024 <sbrk_aligned>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	4e0f      	ldr	r6, [pc, #60]	@ (800a064 <sbrk_aligned+0x40>)
 800a028:	460c      	mov	r4, r1
 800a02a:	6831      	ldr	r1, [r6, #0]
 800a02c:	4605      	mov	r5, r0
 800a02e:	b911      	cbnz	r1, 800a036 <sbrk_aligned+0x12>
 800a030:	f001 ff66 	bl	800bf00 <_sbrk_r>
 800a034:	6030      	str	r0, [r6, #0]
 800a036:	4621      	mov	r1, r4
 800a038:	4628      	mov	r0, r5
 800a03a:	f001 ff61 	bl	800bf00 <_sbrk_r>
 800a03e:	1c43      	adds	r3, r0, #1
 800a040:	d103      	bne.n	800a04a <sbrk_aligned+0x26>
 800a042:	f04f 34ff 	mov.w	r4, #4294967295
 800a046:	4620      	mov	r0, r4
 800a048:	bd70      	pop	{r4, r5, r6, pc}
 800a04a:	1cc4      	adds	r4, r0, #3
 800a04c:	f024 0403 	bic.w	r4, r4, #3
 800a050:	42a0      	cmp	r0, r4
 800a052:	d0f8      	beq.n	800a046 <sbrk_aligned+0x22>
 800a054:	1a21      	subs	r1, r4, r0
 800a056:	4628      	mov	r0, r5
 800a058:	f001 ff52 	bl	800bf00 <_sbrk_r>
 800a05c:	3001      	adds	r0, #1
 800a05e:	d1f2      	bne.n	800a046 <sbrk_aligned+0x22>
 800a060:	e7ef      	b.n	800a042 <sbrk_aligned+0x1e>
 800a062:	bf00      	nop
 800a064:	20002b94 	.word	0x20002b94

0800a068 <_malloc_r>:
 800a068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a06c:	1ccd      	adds	r5, r1, #3
 800a06e:	f025 0503 	bic.w	r5, r5, #3
 800a072:	3508      	adds	r5, #8
 800a074:	2d0c      	cmp	r5, #12
 800a076:	bf38      	it	cc
 800a078:	250c      	movcc	r5, #12
 800a07a:	2d00      	cmp	r5, #0
 800a07c:	4606      	mov	r6, r0
 800a07e:	db01      	blt.n	800a084 <_malloc_r+0x1c>
 800a080:	42a9      	cmp	r1, r5
 800a082:	d904      	bls.n	800a08e <_malloc_r+0x26>
 800a084:	230c      	movs	r3, #12
 800a086:	6033      	str	r3, [r6, #0]
 800a088:	2000      	movs	r0, #0
 800a08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a08e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a164 <_malloc_r+0xfc>
 800a092:	f000 f869 	bl	800a168 <__malloc_lock>
 800a096:	f8d8 3000 	ldr.w	r3, [r8]
 800a09a:	461c      	mov	r4, r3
 800a09c:	bb44      	cbnz	r4, 800a0f0 <_malloc_r+0x88>
 800a09e:	4629      	mov	r1, r5
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f7ff ffbf 	bl	800a024 <sbrk_aligned>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	d158      	bne.n	800a15e <_malloc_r+0xf6>
 800a0ac:	f8d8 4000 	ldr.w	r4, [r8]
 800a0b0:	4627      	mov	r7, r4
 800a0b2:	2f00      	cmp	r7, #0
 800a0b4:	d143      	bne.n	800a13e <_malloc_r+0xd6>
 800a0b6:	2c00      	cmp	r4, #0
 800a0b8:	d04b      	beq.n	800a152 <_malloc_r+0xea>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	4639      	mov	r1, r7
 800a0be:	4630      	mov	r0, r6
 800a0c0:	eb04 0903 	add.w	r9, r4, r3
 800a0c4:	f001 ff1c 	bl	800bf00 <_sbrk_r>
 800a0c8:	4581      	cmp	r9, r0
 800a0ca:	d142      	bne.n	800a152 <_malloc_r+0xea>
 800a0cc:	6821      	ldr	r1, [r4, #0]
 800a0ce:	1a6d      	subs	r5, r5, r1
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7ff ffa6 	bl	800a024 <sbrk_aligned>
 800a0d8:	3001      	adds	r0, #1
 800a0da:	d03a      	beq.n	800a152 <_malloc_r+0xea>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	442b      	add	r3, r5
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	bb62      	cbnz	r2, 800a144 <_malloc_r+0xdc>
 800a0ea:	f8c8 7000 	str.w	r7, [r8]
 800a0ee:	e00f      	b.n	800a110 <_malloc_r+0xa8>
 800a0f0:	6822      	ldr	r2, [r4, #0]
 800a0f2:	1b52      	subs	r2, r2, r5
 800a0f4:	d420      	bmi.n	800a138 <_malloc_r+0xd0>
 800a0f6:	2a0b      	cmp	r2, #11
 800a0f8:	d917      	bls.n	800a12a <_malloc_r+0xc2>
 800a0fa:	1961      	adds	r1, r4, r5
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	6025      	str	r5, [r4, #0]
 800a100:	bf18      	it	ne
 800a102:	6059      	strne	r1, [r3, #4]
 800a104:	6863      	ldr	r3, [r4, #4]
 800a106:	bf08      	it	eq
 800a108:	f8c8 1000 	streq.w	r1, [r8]
 800a10c:	5162      	str	r2, [r4, r5]
 800a10e:	604b      	str	r3, [r1, #4]
 800a110:	4630      	mov	r0, r6
 800a112:	f000 f82f 	bl	800a174 <__malloc_unlock>
 800a116:	f104 000b 	add.w	r0, r4, #11
 800a11a:	1d23      	adds	r3, r4, #4
 800a11c:	f020 0007 	bic.w	r0, r0, #7
 800a120:	1ac2      	subs	r2, r0, r3
 800a122:	bf1c      	itt	ne
 800a124:	1a1b      	subne	r3, r3, r0
 800a126:	50a3      	strne	r3, [r4, r2]
 800a128:	e7af      	b.n	800a08a <_malloc_r+0x22>
 800a12a:	6862      	ldr	r2, [r4, #4]
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	bf0c      	ite	eq
 800a130:	f8c8 2000 	streq.w	r2, [r8]
 800a134:	605a      	strne	r2, [r3, #4]
 800a136:	e7eb      	b.n	800a110 <_malloc_r+0xa8>
 800a138:	4623      	mov	r3, r4
 800a13a:	6864      	ldr	r4, [r4, #4]
 800a13c:	e7ae      	b.n	800a09c <_malloc_r+0x34>
 800a13e:	463c      	mov	r4, r7
 800a140:	687f      	ldr	r7, [r7, #4]
 800a142:	e7b6      	b.n	800a0b2 <_malloc_r+0x4a>
 800a144:	461a      	mov	r2, r3
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	42a3      	cmp	r3, r4
 800a14a:	d1fb      	bne.n	800a144 <_malloc_r+0xdc>
 800a14c:	2300      	movs	r3, #0
 800a14e:	6053      	str	r3, [r2, #4]
 800a150:	e7de      	b.n	800a110 <_malloc_r+0xa8>
 800a152:	230c      	movs	r3, #12
 800a154:	6033      	str	r3, [r6, #0]
 800a156:	4630      	mov	r0, r6
 800a158:	f000 f80c 	bl	800a174 <__malloc_unlock>
 800a15c:	e794      	b.n	800a088 <_malloc_r+0x20>
 800a15e:	6005      	str	r5, [r0, #0]
 800a160:	e7d6      	b.n	800a110 <_malloc_r+0xa8>
 800a162:	bf00      	nop
 800a164:	20002b98 	.word	0x20002b98

0800a168 <__malloc_lock>:
 800a168:	4801      	ldr	r0, [pc, #4]	@ (800a170 <__malloc_lock+0x8>)
 800a16a:	f7ff b8a4 	b.w	80092b6 <__retarget_lock_acquire_recursive>
 800a16e:	bf00      	nop
 800a170:	20002b90 	.word	0x20002b90

0800a174 <__malloc_unlock>:
 800a174:	4801      	ldr	r0, [pc, #4]	@ (800a17c <__malloc_unlock+0x8>)
 800a176:	f7ff b89f 	b.w	80092b8 <__retarget_lock_release_recursive>
 800a17a:	bf00      	nop
 800a17c:	20002b90 	.word	0x20002b90

0800a180 <_Balloc>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	69c6      	ldr	r6, [r0, #28]
 800a184:	4604      	mov	r4, r0
 800a186:	460d      	mov	r5, r1
 800a188:	b976      	cbnz	r6, 800a1a8 <_Balloc+0x28>
 800a18a:	2010      	movs	r0, #16
 800a18c:	f7ff ff42 	bl	800a014 <malloc>
 800a190:	4602      	mov	r2, r0
 800a192:	61e0      	str	r0, [r4, #28]
 800a194:	b920      	cbnz	r0, 800a1a0 <_Balloc+0x20>
 800a196:	4b18      	ldr	r3, [pc, #96]	@ (800a1f8 <_Balloc+0x78>)
 800a198:	4818      	ldr	r0, [pc, #96]	@ (800a1fc <_Balloc+0x7c>)
 800a19a:	216b      	movs	r1, #107	@ 0x6b
 800a19c:	f001 fec8 	bl	800bf30 <__assert_func>
 800a1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1a4:	6006      	str	r6, [r0, #0]
 800a1a6:	60c6      	str	r6, [r0, #12]
 800a1a8:	69e6      	ldr	r6, [r4, #28]
 800a1aa:	68f3      	ldr	r3, [r6, #12]
 800a1ac:	b183      	cbz	r3, 800a1d0 <_Balloc+0x50>
 800a1ae:	69e3      	ldr	r3, [r4, #28]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1b6:	b9b8      	cbnz	r0, 800a1e8 <_Balloc+0x68>
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	fa01 f605 	lsl.w	r6, r1, r5
 800a1be:	1d72      	adds	r2, r6, #5
 800a1c0:	0092      	lsls	r2, r2, #2
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f001 fed2 	bl	800bf6c <_calloc_r>
 800a1c8:	b160      	cbz	r0, 800a1e4 <_Balloc+0x64>
 800a1ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1ce:	e00e      	b.n	800a1ee <_Balloc+0x6e>
 800a1d0:	2221      	movs	r2, #33	@ 0x21
 800a1d2:	2104      	movs	r1, #4
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f001 fec9 	bl	800bf6c <_calloc_r>
 800a1da:	69e3      	ldr	r3, [r4, #28]
 800a1dc:	60f0      	str	r0, [r6, #12]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e4      	bne.n	800a1ae <_Balloc+0x2e>
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
 800a1e8:	6802      	ldr	r2, [r0, #0]
 800a1ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1f4:	e7f7      	b.n	800a1e6 <_Balloc+0x66>
 800a1f6:	bf00      	nop
 800a1f8:	0800e8af 	.word	0x0800e8af
 800a1fc:	0800e92f 	.word	0x0800e92f

0800a200 <_Bfree>:
 800a200:	b570      	push	{r4, r5, r6, lr}
 800a202:	69c6      	ldr	r6, [r0, #28]
 800a204:	4605      	mov	r5, r0
 800a206:	460c      	mov	r4, r1
 800a208:	b976      	cbnz	r6, 800a228 <_Bfree+0x28>
 800a20a:	2010      	movs	r0, #16
 800a20c:	f7ff ff02 	bl	800a014 <malloc>
 800a210:	4602      	mov	r2, r0
 800a212:	61e8      	str	r0, [r5, #28]
 800a214:	b920      	cbnz	r0, 800a220 <_Bfree+0x20>
 800a216:	4b09      	ldr	r3, [pc, #36]	@ (800a23c <_Bfree+0x3c>)
 800a218:	4809      	ldr	r0, [pc, #36]	@ (800a240 <_Bfree+0x40>)
 800a21a:	218f      	movs	r1, #143	@ 0x8f
 800a21c:	f001 fe88 	bl	800bf30 <__assert_func>
 800a220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a224:	6006      	str	r6, [r0, #0]
 800a226:	60c6      	str	r6, [r0, #12]
 800a228:	b13c      	cbz	r4, 800a23a <_Bfree+0x3a>
 800a22a:	69eb      	ldr	r3, [r5, #28]
 800a22c:	6862      	ldr	r2, [r4, #4]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a234:	6021      	str	r1, [r4, #0]
 800a236:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	0800e8af 	.word	0x0800e8af
 800a240:	0800e92f 	.word	0x0800e92f

0800a244 <__multadd>:
 800a244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a248:	690d      	ldr	r5, [r1, #16]
 800a24a:	4607      	mov	r7, r0
 800a24c:	460c      	mov	r4, r1
 800a24e:	461e      	mov	r6, r3
 800a250:	f101 0c14 	add.w	ip, r1, #20
 800a254:	2000      	movs	r0, #0
 800a256:	f8dc 3000 	ldr.w	r3, [ip]
 800a25a:	b299      	uxth	r1, r3
 800a25c:	fb02 6101 	mla	r1, r2, r1, r6
 800a260:	0c1e      	lsrs	r6, r3, #16
 800a262:	0c0b      	lsrs	r3, r1, #16
 800a264:	fb02 3306 	mla	r3, r2, r6, r3
 800a268:	b289      	uxth	r1, r1
 800a26a:	3001      	adds	r0, #1
 800a26c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a270:	4285      	cmp	r5, r0
 800a272:	f84c 1b04 	str.w	r1, [ip], #4
 800a276:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a27a:	dcec      	bgt.n	800a256 <__multadd+0x12>
 800a27c:	b30e      	cbz	r6, 800a2c2 <__multadd+0x7e>
 800a27e:	68a3      	ldr	r3, [r4, #8]
 800a280:	42ab      	cmp	r3, r5
 800a282:	dc19      	bgt.n	800a2b8 <__multadd+0x74>
 800a284:	6861      	ldr	r1, [r4, #4]
 800a286:	4638      	mov	r0, r7
 800a288:	3101      	adds	r1, #1
 800a28a:	f7ff ff79 	bl	800a180 <_Balloc>
 800a28e:	4680      	mov	r8, r0
 800a290:	b928      	cbnz	r0, 800a29e <__multadd+0x5a>
 800a292:	4602      	mov	r2, r0
 800a294:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c8 <__multadd+0x84>)
 800a296:	480d      	ldr	r0, [pc, #52]	@ (800a2cc <__multadd+0x88>)
 800a298:	21ba      	movs	r1, #186	@ 0xba
 800a29a:	f001 fe49 	bl	800bf30 <__assert_func>
 800a29e:	6922      	ldr	r2, [r4, #16]
 800a2a0:	3202      	adds	r2, #2
 800a2a2:	f104 010c 	add.w	r1, r4, #12
 800a2a6:	0092      	lsls	r2, r2, #2
 800a2a8:	300c      	adds	r0, #12
 800a2aa:	f7ff f806 	bl	80092ba <memcpy>
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	f7ff ffa5 	bl	800a200 <_Bfree>
 800a2b6:	4644      	mov	r4, r8
 800a2b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2bc:	3501      	adds	r5, #1
 800a2be:	615e      	str	r6, [r3, #20]
 800a2c0:	6125      	str	r5, [r4, #16]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c8:	0800e91e 	.word	0x0800e91e
 800a2cc:	0800e92f 	.word	0x0800e92f

0800a2d0 <__s2b>:
 800a2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	4615      	mov	r5, r2
 800a2d8:	461f      	mov	r7, r3
 800a2da:	2209      	movs	r2, #9
 800a2dc:	3308      	adds	r3, #8
 800a2de:	4606      	mov	r6, r0
 800a2e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	db09      	blt.n	800a300 <__s2b+0x30>
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	f7ff ff47 	bl	800a180 <_Balloc>
 800a2f2:	b940      	cbnz	r0, 800a306 <__s2b+0x36>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	4b19      	ldr	r3, [pc, #100]	@ (800a35c <__s2b+0x8c>)
 800a2f8:	4819      	ldr	r0, [pc, #100]	@ (800a360 <__s2b+0x90>)
 800a2fa:	21d3      	movs	r1, #211	@ 0xd3
 800a2fc:	f001 fe18 	bl	800bf30 <__assert_func>
 800a300:	0052      	lsls	r2, r2, #1
 800a302:	3101      	adds	r1, #1
 800a304:	e7f0      	b.n	800a2e8 <__s2b+0x18>
 800a306:	9b08      	ldr	r3, [sp, #32]
 800a308:	6143      	str	r3, [r0, #20]
 800a30a:	2d09      	cmp	r5, #9
 800a30c:	f04f 0301 	mov.w	r3, #1
 800a310:	6103      	str	r3, [r0, #16]
 800a312:	dd16      	ble.n	800a342 <__s2b+0x72>
 800a314:	f104 0909 	add.w	r9, r4, #9
 800a318:	46c8      	mov	r8, r9
 800a31a:	442c      	add	r4, r5
 800a31c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a320:	4601      	mov	r1, r0
 800a322:	3b30      	subs	r3, #48	@ 0x30
 800a324:	220a      	movs	r2, #10
 800a326:	4630      	mov	r0, r6
 800a328:	f7ff ff8c 	bl	800a244 <__multadd>
 800a32c:	45a0      	cmp	r8, r4
 800a32e:	d1f5      	bne.n	800a31c <__s2b+0x4c>
 800a330:	f1a5 0408 	sub.w	r4, r5, #8
 800a334:	444c      	add	r4, r9
 800a336:	1b2d      	subs	r5, r5, r4
 800a338:	1963      	adds	r3, r4, r5
 800a33a:	42bb      	cmp	r3, r7
 800a33c:	db04      	blt.n	800a348 <__s2b+0x78>
 800a33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a342:	340a      	adds	r4, #10
 800a344:	2509      	movs	r5, #9
 800a346:	e7f6      	b.n	800a336 <__s2b+0x66>
 800a348:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a34c:	4601      	mov	r1, r0
 800a34e:	3b30      	subs	r3, #48	@ 0x30
 800a350:	220a      	movs	r2, #10
 800a352:	4630      	mov	r0, r6
 800a354:	f7ff ff76 	bl	800a244 <__multadd>
 800a358:	e7ee      	b.n	800a338 <__s2b+0x68>
 800a35a:	bf00      	nop
 800a35c:	0800e91e 	.word	0x0800e91e
 800a360:	0800e92f 	.word	0x0800e92f

0800a364 <__hi0bits>:
 800a364:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a368:	4603      	mov	r3, r0
 800a36a:	bf36      	itet	cc
 800a36c:	0403      	lslcc	r3, r0, #16
 800a36e:	2000      	movcs	r0, #0
 800a370:	2010      	movcc	r0, #16
 800a372:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a376:	bf3c      	itt	cc
 800a378:	021b      	lslcc	r3, r3, #8
 800a37a:	3008      	addcc	r0, #8
 800a37c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a380:	bf3c      	itt	cc
 800a382:	011b      	lslcc	r3, r3, #4
 800a384:	3004      	addcc	r0, #4
 800a386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a38a:	bf3c      	itt	cc
 800a38c:	009b      	lslcc	r3, r3, #2
 800a38e:	3002      	addcc	r0, #2
 800a390:	2b00      	cmp	r3, #0
 800a392:	db05      	blt.n	800a3a0 <__hi0bits+0x3c>
 800a394:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a398:	f100 0001 	add.w	r0, r0, #1
 800a39c:	bf08      	it	eq
 800a39e:	2020      	moveq	r0, #32
 800a3a0:	4770      	bx	lr

0800a3a2 <__lo0bits>:
 800a3a2:	6803      	ldr	r3, [r0, #0]
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	f013 0007 	ands.w	r0, r3, #7
 800a3aa:	d00b      	beq.n	800a3c4 <__lo0bits+0x22>
 800a3ac:	07d9      	lsls	r1, r3, #31
 800a3ae:	d421      	bmi.n	800a3f4 <__lo0bits+0x52>
 800a3b0:	0798      	lsls	r0, r3, #30
 800a3b2:	bf49      	itett	mi
 800a3b4:	085b      	lsrmi	r3, r3, #1
 800a3b6:	089b      	lsrpl	r3, r3, #2
 800a3b8:	2001      	movmi	r0, #1
 800a3ba:	6013      	strmi	r3, [r2, #0]
 800a3bc:	bf5c      	itt	pl
 800a3be:	6013      	strpl	r3, [r2, #0]
 800a3c0:	2002      	movpl	r0, #2
 800a3c2:	4770      	bx	lr
 800a3c4:	b299      	uxth	r1, r3
 800a3c6:	b909      	cbnz	r1, 800a3cc <__lo0bits+0x2a>
 800a3c8:	0c1b      	lsrs	r3, r3, #16
 800a3ca:	2010      	movs	r0, #16
 800a3cc:	b2d9      	uxtb	r1, r3
 800a3ce:	b909      	cbnz	r1, 800a3d4 <__lo0bits+0x32>
 800a3d0:	3008      	adds	r0, #8
 800a3d2:	0a1b      	lsrs	r3, r3, #8
 800a3d4:	0719      	lsls	r1, r3, #28
 800a3d6:	bf04      	itt	eq
 800a3d8:	091b      	lsreq	r3, r3, #4
 800a3da:	3004      	addeq	r0, #4
 800a3dc:	0799      	lsls	r1, r3, #30
 800a3de:	bf04      	itt	eq
 800a3e0:	089b      	lsreq	r3, r3, #2
 800a3e2:	3002      	addeq	r0, #2
 800a3e4:	07d9      	lsls	r1, r3, #31
 800a3e6:	d403      	bmi.n	800a3f0 <__lo0bits+0x4e>
 800a3e8:	085b      	lsrs	r3, r3, #1
 800a3ea:	f100 0001 	add.w	r0, r0, #1
 800a3ee:	d003      	beq.n	800a3f8 <__lo0bits+0x56>
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	4770      	bx	lr
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	4770      	bx	lr
 800a3f8:	2020      	movs	r0, #32
 800a3fa:	4770      	bx	lr

0800a3fc <__i2b>:
 800a3fc:	b510      	push	{r4, lr}
 800a3fe:	460c      	mov	r4, r1
 800a400:	2101      	movs	r1, #1
 800a402:	f7ff febd 	bl	800a180 <_Balloc>
 800a406:	4602      	mov	r2, r0
 800a408:	b928      	cbnz	r0, 800a416 <__i2b+0x1a>
 800a40a:	4b05      	ldr	r3, [pc, #20]	@ (800a420 <__i2b+0x24>)
 800a40c:	4805      	ldr	r0, [pc, #20]	@ (800a424 <__i2b+0x28>)
 800a40e:	f240 1145 	movw	r1, #325	@ 0x145
 800a412:	f001 fd8d 	bl	800bf30 <__assert_func>
 800a416:	2301      	movs	r3, #1
 800a418:	6144      	str	r4, [r0, #20]
 800a41a:	6103      	str	r3, [r0, #16]
 800a41c:	bd10      	pop	{r4, pc}
 800a41e:	bf00      	nop
 800a420:	0800e91e 	.word	0x0800e91e
 800a424:	0800e92f 	.word	0x0800e92f

0800a428 <__multiply>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	4614      	mov	r4, r2
 800a42e:	690a      	ldr	r2, [r1, #16]
 800a430:	6923      	ldr	r3, [r4, #16]
 800a432:	429a      	cmp	r2, r3
 800a434:	bfa8      	it	ge
 800a436:	4623      	movge	r3, r4
 800a438:	460f      	mov	r7, r1
 800a43a:	bfa4      	itt	ge
 800a43c:	460c      	movge	r4, r1
 800a43e:	461f      	movge	r7, r3
 800a440:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a444:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a448:	68a3      	ldr	r3, [r4, #8]
 800a44a:	6861      	ldr	r1, [r4, #4]
 800a44c:	eb0a 0609 	add.w	r6, sl, r9
 800a450:	42b3      	cmp	r3, r6
 800a452:	b085      	sub	sp, #20
 800a454:	bfb8      	it	lt
 800a456:	3101      	addlt	r1, #1
 800a458:	f7ff fe92 	bl	800a180 <_Balloc>
 800a45c:	b930      	cbnz	r0, 800a46c <__multiply+0x44>
 800a45e:	4602      	mov	r2, r0
 800a460:	4b44      	ldr	r3, [pc, #272]	@ (800a574 <__multiply+0x14c>)
 800a462:	4845      	ldr	r0, [pc, #276]	@ (800a578 <__multiply+0x150>)
 800a464:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a468:	f001 fd62 	bl	800bf30 <__assert_func>
 800a46c:	f100 0514 	add.w	r5, r0, #20
 800a470:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a474:	462b      	mov	r3, r5
 800a476:	2200      	movs	r2, #0
 800a478:	4543      	cmp	r3, r8
 800a47a:	d321      	bcc.n	800a4c0 <__multiply+0x98>
 800a47c:	f107 0114 	add.w	r1, r7, #20
 800a480:	f104 0214 	add.w	r2, r4, #20
 800a484:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a488:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a48c:	9302      	str	r3, [sp, #8]
 800a48e:	1b13      	subs	r3, r2, r4
 800a490:	3b15      	subs	r3, #21
 800a492:	f023 0303 	bic.w	r3, r3, #3
 800a496:	3304      	adds	r3, #4
 800a498:	f104 0715 	add.w	r7, r4, #21
 800a49c:	42ba      	cmp	r2, r7
 800a49e:	bf38      	it	cc
 800a4a0:	2304      	movcc	r3, #4
 800a4a2:	9301      	str	r3, [sp, #4]
 800a4a4:	9b02      	ldr	r3, [sp, #8]
 800a4a6:	9103      	str	r1, [sp, #12]
 800a4a8:	428b      	cmp	r3, r1
 800a4aa:	d80c      	bhi.n	800a4c6 <__multiply+0x9e>
 800a4ac:	2e00      	cmp	r6, #0
 800a4ae:	dd03      	ble.n	800a4b8 <__multiply+0x90>
 800a4b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d05b      	beq.n	800a570 <__multiply+0x148>
 800a4b8:	6106      	str	r6, [r0, #16]
 800a4ba:	b005      	add	sp, #20
 800a4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c0:	f843 2b04 	str.w	r2, [r3], #4
 800a4c4:	e7d8      	b.n	800a478 <__multiply+0x50>
 800a4c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a4ca:	f1ba 0f00 	cmp.w	sl, #0
 800a4ce:	d024      	beq.n	800a51a <__multiply+0xf2>
 800a4d0:	f104 0e14 	add.w	lr, r4, #20
 800a4d4:	46a9      	mov	r9, r5
 800a4d6:	f04f 0c00 	mov.w	ip, #0
 800a4da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4de:	f8d9 3000 	ldr.w	r3, [r9]
 800a4e2:	fa1f fb87 	uxth.w	fp, r7
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a4ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a4f0:	f8d9 7000 	ldr.w	r7, [r9]
 800a4f4:	4463      	add	r3, ip
 800a4f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a4fa:	fb0a c70b 	mla	r7, sl, fp, ip
 800a4fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a502:	b29b      	uxth	r3, r3
 800a504:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a508:	4572      	cmp	r2, lr
 800a50a:	f849 3b04 	str.w	r3, [r9], #4
 800a50e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a512:	d8e2      	bhi.n	800a4da <__multiply+0xb2>
 800a514:	9b01      	ldr	r3, [sp, #4]
 800a516:	f845 c003 	str.w	ip, [r5, r3]
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a520:	3104      	adds	r1, #4
 800a522:	f1b9 0f00 	cmp.w	r9, #0
 800a526:	d021      	beq.n	800a56c <__multiply+0x144>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	f104 0c14 	add.w	ip, r4, #20
 800a52e:	46ae      	mov	lr, r5
 800a530:	f04f 0a00 	mov.w	sl, #0
 800a534:	f8bc b000 	ldrh.w	fp, [ip]
 800a538:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a53c:	fb09 770b 	mla	r7, r9, fp, r7
 800a540:	4457      	add	r7, sl
 800a542:	b29b      	uxth	r3, r3
 800a544:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a548:	f84e 3b04 	str.w	r3, [lr], #4
 800a54c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a550:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a554:	f8be 3000 	ldrh.w	r3, [lr]
 800a558:	fb09 330a 	mla	r3, r9, sl, r3
 800a55c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a560:	4562      	cmp	r2, ip
 800a562:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a566:	d8e5      	bhi.n	800a534 <__multiply+0x10c>
 800a568:	9f01      	ldr	r7, [sp, #4]
 800a56a:	51eb      	str	r3, [r5, r7]
 800a56c:	3504      	adds	r5, #4
 800a56e:	e799      	b.n	800a4a4 <__multiply+0x7c>
 800a570:	3e01      	subs	r6, #1
 800a572:	e79b      	b.n	800a4ac <__multiply+0x84>
 800a574:	0800e91e 	.word	0x0800e91e
 800a578:	0800e92f 	.word	0x0800e92f

0800a57c <__pow5mult>:
 800a57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a580:	4615      	mov	r5, r2
 800a582:	f012 0203 	ands.w	r2, r2, #3
 800a586:	4607      	mov	r7, r0
 800a588:	460e      	mov	r6, r1
 800a58a:	d007      	beq.n	800a59c <__pow5mult+0x20>
 800a58c:	4c25      	ldr	r4, [pc, #148]	@ (800a624 <__pow5mult+0xa8>)
 800a58e:	3a01      	subs	r2, #1
 800a590:	2300      	movs	r3, #0
 800a592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a596:	f7ff fe55 	bl	800a244 <__multadd>
 800a59a:	4606      	mov	r6, r0
 800a59c:	10ad      	asrs	r5, r5, #2
 800a59e:	d03d      	beq.n	800a61c <__pow5mult+0xa0>
 800a5a0:	69fc      	ldr	r4, [r7, #28]
 800a5a2:	b97c      	cbnz	r4, 800a5c4 <__pow5mult+0x48>
 800a5a4:	2010      	movs	r0, #16
 800a5a6:	f7ff fd35 	bl	800a014 <malloc>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	61f8      	str	r0, [r7, #28]
 800a5ae:	b928      	cbnz	r0, 800a5bc <__pow5mult+0x40>
 800a5b0:	4b1d      	ldr	r3, [pc, #116]	@ (800a628 <__pow5mult+0xac>)
 800a5b2:	481e      	ldr	r0, [pc, #120]	@ (800a62c <__pow5mult+0xb0>)
 800a5b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a5b8:	f001 fcba 	bl	800bf30 <__assert_func>
 800a5bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5c0:	6004      	str	r4, [r0, #0]
 800a5c2:	60c4      	str	r4, [r0, #12]
 800a5c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a5c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5cc:	b94c      	cbnz	r4, 800a5e2 <__pow5mult+0x66>
 800a5ce:	f240 2171 	movw	r1, #625	@ 0x271
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	f7ff ff12 	bl	800a3fc <__i2b>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5de:	4604      	mov	r4, r0
 800a5e0:	6003      	str	r3, [r0, #0]
 800a5e2:	f04f 0900 	mov.w	r9, #0
 800a5e6:	07eb      	lsls	r3, r5, #31
 800a5e8:	d50a      	bpl.n	800a600 <__pow5mult+0x84>
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f7ff ff1a 	bl	800a428 <__multiply>
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	4680      	mov	r8, r0
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	f7ff fe01 	bl	800a200 <_Bfree>
 800a5fe:	4646      	mov	r6, r8
 800a600:	106d      	asrs	r5, r5, #1
 800a602:	d00b      	beq.n	800a61c <__pow5mult+0xa0>
 800a604:	6820      	ldr	r0, [r4, #0]
 800a606:	b938      	cbnz	r0, 800a618 <__pow5mult+0x9c>
 800a608:	4622      	mov	r2, r4
 800a60a:	4621      	mov	r1, r4
 800a60c:	4638      	mov	r0, r7
 800a60e:	f7ff ff0b 	bl	800a428 <__multiply>
 800a612:	6020      	str	r0, [r4, #0]
 800a614:	f8c0 9000 	str.w	r9, [r0]
 800a618:	4604      	mov	r4, r0
 800a61a:	e7e4      	b.n	800a5e6 <__pow5mult+0x6a>
 800a61c:	4630      	mov	r0, r6
 800a61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a622:	bf00      	nop
 800a624:	0800e988 	.word	0x0800e988
 800a628:	0800e8af 	.word	0x0800e8af
 800a62c:	0800e92f 	.word	0x0800e92f

0800a630 <__lshift>:
 800a630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a634:	460c      	mov	r4, r1
 800a636:	6849      	ldr	r1, [r1, #4]
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a63e:	68a3      	ldr	r3, [r4, #8]
 800a640:	4607      	mov	r7, r0
 800a642:	4691      	mov	r9, r2
 800a644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a648:	f108 0601 	add.w	r6, r8, #1
 800a64c:	42b3      	cmp	r3, r6
 800a64e:	db0b      	blt.n	800a668 <__lshift+0x38>
 800a650:	4638      	mov	r0, r7
 800a652:	f7ff fd95 	bl	800a180 <_Balloc>
 800a656:	4605      	mov	r5, r0
 800a658:	b948      	cbnz	r0, 800a66e <__lshift+0x3e>
 800a65a:	4602      	mov	r2, r0
 800a65c:	4b28      	ldr	r3, [pc, #160]	@ (800a700 <__lshift+0xd0>)
 800a65e:	4829      	ldr	r0, [pc, #164]	@ (800a704 <__lshift+0xd4>)
 800a660:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a664:	f001 fc64 	bl	800bf30 <__assert_func>
 800a668:	3101      	adds	r1, #1
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	e7ee      	b.n	800a64c <__lshift+0x1c>
 800a66e:	2300      	movs	r3, #0
 800a670:	f100 0114 	add.w	r1, r0, #20
 800a674:	f100 0210 	add.w	r2, r0, #16
 800a678:	4618      	mov	r0, r3
 800a67a:	4553      	cmp	r3, sl
 800a67c:	db33      	blt.n	800a6e6 <__lshift+0xb6>
 800a67e:	6920      	ldr	r0, [r4, #16]
 800a680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a684:	f104 0314 	add.w	r3, r4, #20
 800a688:	f019 091f 	ands.w	r9, r9, #31
 800a68c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a694:	d02b      	beq.n	800a6ee <__lshift+0xbe>
 800a696:	f1c9 0e20 	rsb	lr, r9, #32
 800a69a:	468a      	mov	sl, r1
 800a69c:	2200      	movs	r2, #0
 800a69e:	6818      	ldr	r0, [r3, #0]
 800a6a0:	fa00 f009 	lsl.w	r0, r0, r9
 800a6a4:	4310      	orrs	r0, r2
 800a6a6:	f84a 0b04 	str.w	r0, [sl], #4
 800a6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ae:	459c      	cmp	ip, r3
 800a6b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6b4:	d8f3      	bhi.n	800a69e <__lshift+0x6e>
 800a6b6:	ebac 0304 	sub.w	r3, ip, r4
 800a6ba:	3b15      	subs	r3, #21
 800a6bc:	f023 0303 	bic.w	r3, r3, #3
 800a6c0:	3304      	adds	r3, #4
 800a6c2:	f104 0015 	add.w	r0, r4, #21
 800a6c6:	4584      	cmp	ip, r0
 800a6c8:	bf38      	it	cc
 800a6ca:	2304      	movcc	r3, #4
 800a6cc:	50ca      	str	r2, [r1, r3]
 800a6ce:	b10a      	cbz	r2, 800a6d4 <__lshift+0xa4>
 800a6d0:	f108 0602 	add.w	r6, r8, #2
 800a6d4:	3e01      	subs	r6, #1
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	612e      	str	r6, [r5, #16]
 800a6da:	4621      	mov	r1, r4
 800a6dc:	f7ff fd90 	bl	800a200 <_Bfree>
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	e7c5      	b.n	800a67a <__lshift+0x4a>
 800a6ee:	3904      	subs	r1, #4
 800a6f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6f8:	459c      	cmp	ip, r3
 800a6fa:	d8f9      	bhi.n	800a6f0 <__lshift+0xc0>
 800a6fc:	e7ea      	b.n	800a6d4 <__lshift+0xa4>
 800a6fe:	bf00      	nop
 800a700:	0800e91e 	.word	0x0800e91e
 800a704:	0800e92f 	.word	0x0800e92f

0800a708 <__mcmp>:
 800a708:	690a      	ldr	r2, [r1, #16]
 800a70a:	4603      	mov	r3, r0
 800a70c:	6900      	ldr	r0, [r0, #16]
 800a70e:	1a80      	subs	r0, r0, r2
 800a710:	b530      	push	{r4, r5, lr}
 800a712:	d10e      	bne.n	800a732 <__mcmp+0x2a>
 800a714:	3314      	adds	r3, #20
 800a716:	3114      	adds	r1, #20
 800a718:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a71c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a720:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a724:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a728:	4295      	cmp	r5, r2
 800a72a:	d003      	beq.n	800a734 <__mcmp+0x2c>
 800a72c:	d205      	bcs.n	800a73a <__mcmp+0x32>
 800a72e:	f04f 30ff 	mov.w	r0, #4294967295
 800a732:	bd30      	pop	{r4, r5, pc}
 800a734:	42a3      	cmp	r3, r4
 800a736:	d3f3      	bcc.n	800a720 <__mcmp+0x18>
 800a738:	e7fb      	b.n	800a732 <__mcmp+0x2a>
 800a73a:	2001      	movs	r0, #1
 800a73c:	e7f9      	b.n	800a732 <__mcmp+0x2a>
	...

0800a740 <__mdiff>:
 800a740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	4689      	mov	r9, r1
 800a746:	4606      	mov	r6, r0
 800a748:	4611      	mov	r1, r2
 800a74a:	4648      	mov	r0, r9
 800a74c:	4614      	mov	r4, r2
 800a74e:	f7ff ffdb 	bl	800a708 <__mcmp>
 800a752:	1e05      	subs	r5, r0, #0
 800a754:	d112      	bne.n	800a77c <__mdiff+0x3c>
 800a756:	4629      	mov	r1, r5
 800a758:	4630      	mov	r0, r6
 800a75a:	f7ff fd11 	bl	800a180 <_Balloc>
 800a75e:	4602      	mov	r2, r0
 800a760:	b928      	cbnz	r0, 800a76e <__mdiff+0x2e>
 800a762:	4b3f      	ldr	r3, [pc, #252]	@ (800a860 <__mdiff+0x120>)
 800a764:	f240 2137 	movw	r1, #567	@ 0x237
 800a768:	483e      	ldr	r0, [pc, #248]	@ (800a864 <__mdiff+0x124>)
 800a76a:	f001 fbe1 	bl	800bf30 <__assert_func>
 800a76e:	2301      	movs	r3, #1
 800a770:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a774:	4610      	mov	r0, r2
 800a776:	b003      	add	sp, #12
 800a778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77c:	bfbc      	itt	lt
 800a77e:	464b      	movlt	r3, r9
 800a780:	46a1      	movlt	r9, r4
 800a782:	4630      	mov	r0, r6
 800a784:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a788:	bfba      	itte	lt
 800a78a:	461c      	movlt	r4, r3
 800a78c:	2501      	movlt	r5, #1
 800a78e:	2500      	movge	r5, #0
 800a790:	f7ff fcf6 	bl	800a180 <_Balloc>
 800a794:	4602      	mov	r2, r0
 800a796:	b918      	cbnz	r0, 800a7a0 <__mdiff+0x60>
 800a798:	4b31      	ldr	r3, [pc, #196]	@ (800a860 <__mdiff+0x120>)
 800a79a:	f240 2145 	movw	r1, #581	@ 0x245
 800a79e:	e7e3      	b.n	800a768 <__mdiff+0x28>
 800a7a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7a4:	6926      	ldr	r6, [r4, #16]
 800a7a6:	60c5      	str	r5, [r0, #12]
 800a7a8:	f109 0310 	add.w	r3, r9, #16
 800a7ac:	f109 0514 	add.w	r5, r9, #20
 800a7b0:	f104 0e14 	add.w	lr, r4, #20
 800a7b4:	f100 0b14 	add.w	fp, r0, #20
 800a7b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a7bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	46d9      	mov	r9, fp
 800a7c4:	f04f 0c00 	mov.w	ip, #0
 800a7c8:	9b01      	ldr	r3, [sp, #4]
 800a7ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a7ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	fa1f f38a 	uxth.w	r3, sl
 800a7d8:	4619      	mov	r1, r3
 800a7da:	b283      	uxth	r3, r0
 800a7dc:	1acb      	subs	r3, r1, r3
 800a7de:	0c00      	lsrs	r0, r0, #16
 800a7e0:	4463      	add	r3, ip
 800a7e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a7e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a7f0:	4576      	cmp	r6, lr
 800a7f2:	f849 3b04 	str.w	r3, [r9], #4
 800a7f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7fa:	d8e5      	bhi.n	800a7c8 <__mdiff+0x88>
 800a7fc:	1b33      	subs	r3, r6, r4
 800a7fe:	3b15      	subs	r3, #21
 800a800:	f023 0303 	bic.w	r3, r3, #3
 800a804:	3415      	adds	r4, #21
 800a806:	3304      	adds	r3, #4
 800a808:	42a6      	cmp	r6, r4
 800a80a:	bf38      	it	cc
 800a80c:	2304      	movcc	r3, #4
 800a80e:	441d      	add	r5, r3
 800a810:	445b      	add	r3, fp
 800a812:	461e      	mov	r6, r3
 800a814:	462c      	mov	r4, r5
 800a816:	4544      	cmp	r4, r8
 800a818:	d30e      	bcc.n	800a838 <__mdiff+0xf8>
 800a81a:	f108 0103 	add.w	r1, r8, #3
 800a81e:	1b49      	subs	r1, r1, r5
 800a820:	f021 0103 	bic.w	r1, r1, #3
 800a824:	3d03      	subs	r5, #3
 800a826:	45a8      	cmp	r8, r5
 800a828:	bf38      	it	cc
 800a82a:	2100      	movcc	r1, #0
 800a82c:	440b      	add	r3, r1
 800a82e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a832:	b191      	cbz	r1, 800a85a <__mdiff+0x11a>
 800a834:	6117      	str	r7, [r2, #16]
 800a836:	e79d      	b.n	800a774 <__mdiff+0x34>
 800a838:	f854 1b04 	ldr.w	r1, [r4], #4
 800a83c:	46e6      	mov	lr, ip
 800a83e:	0c08      	lsrs	r0, r1, #16
 800a840:	fa1c fc81 	uxtah	ip, ip, r1
 800a844:	4471      	add	r1, lr
 800a846:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a84a:	b289      	uxth	r1, r1
 800a84c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a850:	f846 1b04 	str.w	r1, [r6], #4
 800a854:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a858:	e7dd      	b.n	800a816 <__mdiff+0xd6>
 800a85a:	3f01      	subs	r7, #1
 800a85c:	e7e7      	b.n	800a82e <__mdiff+0xee>
 800a85e:	bf00      	nop
 800a860:	0800e91e 	.word	0x0800e91e
 800a864:	0800e92f 	.word	0x0800e92f

0800a868 <__ulp>:
 800a868:	b082      	sub	sp, #8
 800a86a:	ed8d 0b00 	vstr	d0, [sp]
 800a86e:	9a01      	ldr	r2, [sp, #4]
 800a870:	4b0f      	ldr	r3, [pc, #60]	@ (800a8b0 <__ulp+0x48>)
 800a872:	4013      	ands	r3, r2
 800a874:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	dc08      	bgt.n	800a88e <__ulp+0x26>
 800a87c:	425b      	negs	r3, r3
 800a87e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a882:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a886:	da04      	bge.n	800a892 <__ulp+0x2a>
 800a888:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a88c:	4113      	asrs	r3, r2
 800a88e:	2200      	movs	r2, #0
 800a890:	e008      	b.n	800a8a4 <__ulp+0x3c>
 800a892:	f1a2 0314 	sub.w	r3, r2, #20
 800a896:	2b1e      	cmp	r3, #30
 800a898:	bfda      	itte	le
 800a89a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a89e:	40da      	lsrle	r2, r3
 800a8a0:	2201      	movgt	r2, #1
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	ec41 0b10 	vmov	d0, r0, r1
 800a8ac:	b002      	add	sp, #8
 800a8ae:	4770      	bx	lr
 800a8b0:	7ff00000 	.word	0x7ff00000

0800a8b4 <__b2d>:
 800a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b8:	6906      	ldr	r6, [r0, #16]
 800a8ba:	f100 0814 	add.w	r8, r0, #20
 800a8be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a8c2:	1f37      	subs	r7, r6, #4
 800a8c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	f7ff fd4b 	bl	800a364 <__hi0bits>
 800a8ce:	f1c0 0320 	rsb	r3, r0, #32
 800a8d2:	280a      	cmp	r0, #10
 800a8d4:	600b      	str	r3, [r1, #0]
 800a8d6:	491b      	ldr	r1, [pc, #108]	@ (800a944 <__b2d+0x90>)
 800a8d8:	dc15      	bgt.n	800a906 <__b2d+0x52>
 800a8da:	f1c0 0c0b 	rsb	ip, r0, #11
 800a8de:	fa22 f30c 	lsr.w	r3, r2, ip
 800a8e2:	45b8      	cmp	r8, r7
 800a8e4:	ea43 0501 	orr.w	r5, r3, r1
 800a8e8:	bf34      	ite	cc
 800a8ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a8ee:	2300      	movcs	r3, #0
 800a8f0:	3015      	adds	r0, #21
 800a8f2:	fa02 f000 	lsl.w	r0, r2, r0
 800a8f6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a8fa:	4303      	orrs	r3, r0
 800a8fc:	461c      	mov	r4, r3
 800a8fe:	ec45 4b10 	vmov	d0, r4, r5
 800a902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a906:	45b8      	cmp	r8, r7
 800a908:	bf3a      	itte	cc
 800a90a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a90e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a912:	2300      	movcs	r3, #0
 800a914:	380b      	subs	r0, #11
 800a916:	d012      	beq.n	800a93e <__b2d+0x8a>
 800a918:	f1c0 0120 	rsb	r1, r0, #32
 800a91c:	fa23 f401 	lsr.w	r4, r3, r1
 800a920:	4082      	lsls	r2, r0
 800a922:	4322      	orrs	r2, r4
 800a924:	4547      	cmp	r7, r8
 800a926:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a92a:	bf8c      	ite	hi
 800a92c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a930:	2200      	movls	r2, #0
 800a932:	4083      	lsls	r3, r0
 800a934:	40ca      	lsrs	r2, r1
 800a936:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a93a:	4313      	orrs	r3, r2
 800a93c:	e7de      	b.n	800a8fc <__b2d+0x48>
 800a93e:	ea42 0501 	orr.w	r5, r2, r1
 800a942:	e7db      	b.n	800a8fc <__b2d+0x48>
 800a944:	3ff00000 	.word	0x3ff00000

0800a948 <__d2b>:
 800a948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a94c:	460f      	mov	r7, r1
 800a94e:	2101      	movs	r1, #1
 800a950:	ec59 8b10 	vmov	r8, r9, d0
 800a954:	4616      	mov	r6, r2
 800a956:	f7ff fc13 	bl	800a180 <_Balloc>
 800a95a:	4604      	mov	r4, r0
 800a95c:	b930      	cbnz	r0, 800a96c <__d2b+0x24>
 800a95e:	4602      	mov	r2, r0
 800a960:	4b23      	ldr	r3, [pc, #140]	@ (800a9f0 <__d2b+0xa8>)
 800a962:	4824      	ldr	r0, [pc, #144]	@ (800a9f4 <__d2b+0xac>)
 800a964:	f240 310f 	movw	r1, #783	@ 0x30f
 800a968:	f001 fae2 	bl	800bf30 <__assert_func>
 800a96c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a974:	b10d      	cbz	r5, 800a97a <__d2b+0x32>
 800a976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	f1b8 0300 	subs.w	r3, r8, #0
 800a980:	d023      	beq.n	800a9ca <__d2b+0x82>
 800a982:	4668      	mov	r0, sp
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	f7ff fd0c 	bl	800a3a2 <__lo0bits>
 800a98a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a98e:	b1d0      	cbz	r0, 800a9c6 <__d2b+0x7e>
 800a990:	f1c0 0320 	rsb	r3, r0, #32
 800a994:	fa02 f303 	lsl.w	r3, r2, r3
 800a998:	430b      	orrs	r3, r1
 800a99a:	40c2      	lsrs	r2, r0
 800a99c:	6163      	str	r3, [r4, #20]
 800a99e:	9201      	str	r2, [sp, #4]
 800a9a0:	9b01      	ldr	r3, [sp, #4]
 800a9a2:	61a3      	str	r3, [r4, #24]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	bf0c      	ite	eq
 800a9a8:	2201      	moveq	r2, #1
 800a9aa:	2202      	movne	r2, #2
 800a9ac:	6122      	str	r2, [r4, #16]
 800a9ae:	b1a5      	cbz	r5, 800a9da <__d2b+0x92>
 800a9b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a9b4:	4405      	add	r5, r0
 800a9b6:	603d      	str	r5, [r7, #0]
 800a9b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a9bc:	6030      	str	r0, [r6, #0]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	b003      	add	sp, #12
 800a9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9c6:	6161      	str	r1, [r4, #20]
 800a9c8:	e7ea      	b.n	800a9a0 <__d2b+0x58>
 800a9ca:	a801      	add	r0, sp, #4
 800a9cc:	f7ff fce9 	bl	800a3a2 <__lo0bits>
 800a9d0:	9b01      	ldr	r3, [sp, #4]
 800a9d2:	6163      	str	r3, [r4, #20]
 800a9d4:	3020      	adds	r0, #32
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	e7e8      	b.n	800a9ac <__d2b+0x64>
 800a9da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a9e2:	6038      	str	r0, [r7, #0]
 800a9e4:	6918      	ldr	r0, [r3, #16]
 800a9e6:	f7ff fcbd 	bl	800a364 <__hi0bits>
 800a9ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9ee:	e7e5      	b.n	800a9bc <__d2b+0x74>
 800a9f0:	0800e91e 	.word	0x0800e91e
 800a9f4:	0800e92f 	.word	0x0800e92f

0800a9f8 <__ratio>:
 800a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	b085      	sub	sp, #20
 800a9fe:	e9cd 1000 	strd	r1, r0, [sp]
 800aa02:	a902      	add	r1, sp, #8
 800aa04:	f7ff ff56 	bl	800a8b4 <__b2d>
 800aa08:	9800      	ldr	r0, [sp, #0]
 800aa0a:	a903      	add	r1, sp, #12
 800aa0c:	ec55 4b10 	vmov	r4, r5, d0
 800aa10:	f7ff ff50 	bl	800a8b4 <__b2d>
 800aa14:	9b01      	ldr	r3, [sp, #4]
 800aa16:	6919      	ldr	r1, [r3, #16]
 800aa18:	9b00      	ldr	r3, [sp, #0]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	1ac9      	subs	r1, r1, r3
 800aa1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa22:	1a9b      	subs	r3, r3, r2
 800aa24:	ec5b ab10 	vmov	sl, fp, d0
 800aa28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	bfce      	itee	gt
 800aa30:	462a      	movgt	r2, r5
 800aa32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa36:	465a      	movle	r2, fp
 800aa38:	462f      	mov	r7, r5
 800aa3a:	46d9      	mov	r9, fp
 800aa3c:	bfcc      	ite	gt
 800aa3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa42:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aa46:	464b      	mov	r3, r9
 800aa48:	4652      	mov	r2, sl
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	f7f5 ff0d 	bl	800086c <__aeabi_ddiv>
 800aa52:	ec41 0b10 	vmov	d0, r0, r1
 800aa56:	b005      	add	sp, #20
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa5c <__copybits>:
 800aa5c:	3901      	subs	r1, #1
 800aa5e:	b570      	push	{r4, r5, r6, lr}
 800aa60:	1149      	asrs	r1, r1, #5
 800aa62:	6914      	ldr	r4, [r2, #16]
 800aa64:	3101      	adds	r1, #1
 800aa66:	f102 0314 	add.w	r3, r2, #20
 800aa6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa72:	1f05      	subs	r5, r0, #4
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	d30c      	bcc.n	800aa92 <__copybits+0x36>
 800aa78:	1aa3      	subs	r3, r4, r2
 800aa7a:	3b11      	subs	r3, #17
 800aa7c:	f023 0303 	bic.w	r3, r3, #3
 800aa80:	3211      	adds	r2, #17
 800aa82:	42a2      	cmp	r2, r4
 800aa84:	bf88      	it	hi
 800aa86:	2300      	movhi	r3, #0
 800aa88:	4418      	add	r0, r3
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	4288      	cmp	r0, r1
 800aa8e:	d305      	bcc.n	800aa9c <__copybits+0x40>
 800aa90:	bd70      	pop	{r4, r5, r6, pc}
 800aa92:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa96:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa9a:	e7eb      	b.n	800aa74 <__copybits+0x18>
 800aa9c:	f840 3b04 	str.w	r3, [r0], #4
 800aaa0:	e7f4      	b.n	800aa8c <__copybits+0x30>

0800aaa2 <__any_on>:
 800aaa2:	f100 0214 	add.w	r2, r0, #20
 800aaa6:	6900      	ldr	r0, [r0, #16]
 800aaa8:	114b      	asrs	r3, r1, #5
 800aaaa:	4298      	cmp	r0, r3
 800aaac:	b510      	push	{r4, lr}
 800aaae:	db11      	blt.n	800aad4 <__any_on+0x32>
 800aab0:	dd0a      	ble.n	800aac8 <__any_on+0x26>
 800aab2:	f011 011f 	ands.w	r1, r1, #31
 800aab6:	d007      	beq.n	800aac8 <__any_on+0x26>
 800aab8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aabc:	fa24 f001 	lsr.w	r0, r4, r1
 800aac0:	fa00 f101 	lsl.w	r1, r0, r1
 800aac4:	428c      	cmp	r4, r1
 800aac6:	d10b      	bne.n	800aae0 <__any_on+0x3e>
 800aac8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aacc:	4293      	cmp	r3, r2
 800aace:	d803      	bhi.n	800aad8 <__any_on+0x36>
 800aad0:	2000      	movs	r0, #0
 800aad2:	bd10      	pop	{r4, pc}
 800aad4:	4603      	mov	r3, r0
 800aad6:	e7f7      	b.n	800aac8 <__any_on+0x26>
 800aad8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aadc:	2900      	cmp	r1, #0
 800aade:	d0f5      	beq.n	800aacc <__any_on+0x2a>
 800aae0:	2001      	movs	r0, #1
 800aae2:	e7f6      	b.n	800aad2 <__any_on+0x30>

0800aae4 <sulp>:
 800aae4:	b570      	push	{r4, r5, r6, lr}
 800aae6:	4604      	mov	r4, r0
 800aae8:	460d      	mov	r5, r1
 800aaea:	ec45 4b10 	vmov	d0, r4, r5
 800aaee:	4616      	mov	r6, r2
 800aaf0:	f7ff feba 	bl	800a868 <__ulp>
 800aaf4:	ec51 0b10 	vmov	r0, r1, d0
 800aaf8:	b17e      	cbz	r6, 800ab1a <sulp+0x36>
 800aafa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aafe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	dd09      	ble.n	800ab1a <sulp+0x36>
 800ab06:	051b      	lsls	r3, r3, #20
 800ab08:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab0c:	2400      	movs	r4, #0
 800ab0e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab12:	4622      	mov	r2, r4
 800ab14:	462b      	mov	r3, r5
 800ab16:	f7f5 fd7f 	bl	8000618 <__aeabi_dmul>
 800ab1a:	ec41 0b10 	vmov	d0, r0, r1
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}

0800ab20 <_strtod_l>:
 800ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab24:	b09f      	sub	sp, #124	@ 0x7c
 800ab26:	460c      	mov	r4, r1
 800ab28:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab2e:	9005      	str	r0, [sp, #20]
 800ab30:	f04f 0a00 	mov.w	sl, #0
 800ab34:	f04f 0b00 	mov.w	fp, #0
 800ab38:	460a      	mov	r2, r1
 800ab3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab3c:	7811      	ldrb	r1, [r2, #0]
 800ab3e:	292b      	cmp	r1, #43	@ 0x2b
 800ab40:	d04a      	beq.n	800abd8 <_strtod_l+0xb8>
 800ab42:	d838      	bhi.n	800abb6 <_strtod_l+0x96>
 800ab44:	290d      	cmp	r1, #13
 800ab46:	d832      	bhi.n	800abae <_strtod_l+0x8e>
 800ab48:	2908      	cmp	r1, #8
 800ab4a:	d832      	bhi.n	800abb2 <_strtod_l+0x92>
 800ab4c:	2900      	cmp	r1, #0
 800ab4e:	d03b      	beq.n	800abc8 <_strtod_l+0xa8>
 800ab50:	2200      	movs	r2, #0
 800ab52:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ab54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ab56:	782a      	ldrb	r2, [r5, #0]
 800ab58:	2a30      	cmp	r2, #48	@ 0x30
 800ab5a:	f040 80b3 	bne.w	800acc4 <_strtod_l+0x1a4>
 800ab5e:	786a      	ldrb	r2, [r5, #1]
 800ab60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab64:	2a58      	cmp	r2, #88	@ 0x58
 800ab66:	d16e      	bne.n	800ac46 <_strtod_l+0x126>
 800ab68:	9302      	str	r3, [sp, #8]
 800ab6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab6c:	9301      	str	r3, [sp, #4]
 800ab6e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ab70:	9300      	str	r3, [sp, #0]
 800ab72:	4a8e      	ldr	r2, [pc, #568]	@ (800adac <_strtod_l+0x28c>)
 800ab74:	9805      	ldr	r0, [sp, #20]
 800ab76:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ab78:	a919      	add	r1, sp, #100	@ 0x64
 800ab7a:	f001 fa73 	bl	800c064 <__gethex>
 800ab7e:	f010 060f 	ands.w	r6, r0, #15
 800ab82:	4604      	mov	r4, r0
 800ab84:	d005      	beq.n	800ab92 <_strtod_l+0x72>
 800ab86:	2e06      	cmp	r6, #6
 800ab88:	d128      	bne.n	800abdc <_strtod_l+0xbc>
 800ab8a:	3501      	adds	r5, #1
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ab90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f040 858e 	bne.w	800b6b6 <_strtod_l+0xb96>
 800ab9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab9c:	b1cb      	cbz	r3, 800abd2 <_strtod_l+0xb2>
 800ab9e:	4652      	mov	r2, sl
 800aba0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aba4:	ec43 2b10 	vmov	d0, r2, r3
 800aba8:	b01f      	add	sp, #124	@ 0x7c
 800abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abae:	2920      	cmp	r1, #32
 800abb0:	d1ce      	bne.n	800ab50 <_strtod_l+0x30>
 800abb2:	3201      	adds	r2, #1
 800abb4:	e7c1      	b.n	800ab3a <_strtod_l+0x1a>
 800abb6:	292d      	cmp	r1, #45	@ 0x2d
 800abb8:	d1ca      	bne.n	800ab50 <_strtod_l+0x30>
 800abba:	2101      	movs	r1, #1
 800abbc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800abbe:	1c51      	adds	r1, r2, #1
 800abc0:	9119      	str	r1, [sp, #100]	@ 0x64
 800abc2:	7852      	ldrb	r2, [r2, #1]
 800abc4:	2a00      	cmp	r2, #0
 800abc6:	d1c5      	bne.n	800ab54 <_strtod_l+0x34>
 800abc8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abca:	9419      	str	r4, [sp, #100]	@ 0x64
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f040 8570 	bne.w	800b6b2 <_strtod_l+0xb92>
 800abd2:	4652      	mov	r2, sl
 800abd4:	465b      	mov	r3, fp
 800abd6:	e7e5      	b.n	800aba4 <_strtod_l+0x84>
 800abd8:	2100      	movs	r1, #0
 800abda:	e7ef      	b.n	800abbc <_strtod_l+0x9c>
 800abdc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800abde:	b13a      	cbz	r2, 800abf0 <_strtod_l+0xd0>
 800abe0:	2135      	movs	r1, #53	@ 0x35
 800abe2:	a81c      	add	r0, sp, #112	@ 0x70
 800abe4:	f7ff ff3a 	bl	800aa5c <__copybits>
 800abe8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abea:	9805      	ldr	r0, [sp, #20]
 800abec:	f7ff fb08 	bl	800a200 <_Bfree>
 800abf0:	3e01      	subs	r6, #1
 800abf2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800abf4:	2e04      	cmp	r6, #4
 800abf6:	d806      	bhi.n	800ac06 <_strtod_l+0xe6>
 800abf8:	e8df f006 	tbb	[pc, r6]
 800abfc:	201d0314 	.word	0x201d0314
 800ac00:	14          	.byte	0x14
 800ac01:	00          	.byte	0x00
 800ac02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac06:	05e1      	lsls	r1, r4, #23
 800ac08:	bf48      	it	mi
 800ac0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac12:	0d1b      	lsrs	r3, r3, #20
 800ac14:	051b      	lsls	r3, r3, #20
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1bb      	bne.n	800ab92 <_strtod_l+0x72>
 800ac1a:	f7fe fb21 	bl	8009260 <__errno>
 800ac1e:	2322      	movs	r3, #34	@ 0x22
 800ac20:	6003      	str	r3, [r0, #0]
 800ac22:	e7b6      	b.n	800ab92 <_strtod_l+0x72>
 800ac24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac34:	e7e7      	b.n	800ac06 <_strtod_l+0xe6>
 800ac36:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800adb4 <_strtod_l+0x294>
 800ac3a:	e7e4      	b.n	800ac06 <_strtod_l+0xe6>
 800ac3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac40:	f04f 3aff 	mov.w	sl, #4294967295
 800ac44:	e7df      	b.n	800ac06 <_strtod_l+0xe6>
 800ac46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac4c:	785b      	ldrb	r3, [r3, #1]
 800ac4e:	2b30      	cmp	r3, #48	@ 0x30
 800ac50:	d0f9      	beq.n	800ac46 <_strtod_l+0x126>
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d09d      	beq.n	800ab92 <_strtod_l+0x72>
 800ac56:	2301      	movs	r3, #1
 800ac58:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9308      	str	r3, [sp, #32]
 800ac62:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac64:	461f      	mov	r7, r3
 800ac66:	220a      	movs	r2, #10
 800ac68:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ac6a:	7805      	ldrb	r5, [r0, #0]
 800ac6c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ac70:	b2d9      	uxtb	r1, r3
 800ac72:	2909      	cmp	r1, #9
 800ac74:	d928      	bls.n	800acc8 <_strtod_l+0x1a8>
 800ac76:	494e      	ldr	r1, [pc, #312]	@ (800adb0 <_strtod_l+0x290>)
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f001 f92f 	bl	800bedc <strncmp>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d032      	beq.n	800ace8 <_strtod_l+0x1c8>
 800ac82:	2000      	movs	r0, #0
 800ac84:	462a      	mov	r2, r5
 800ac86:	4681      	mov	r9, r0
 800ac88:	463d      	mov	r5, r7
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2a65      	cmp	r2, #101	@ 0x65
 800ac8e:	d001      	beq.n	800ac94 <_strtod_l+0x174>
 800ac90:	2a45      	cmp	r2, #69	@ 0x45
 800ac92:	d114      	bne.n	800acbe <_strtod_l+0x19e>
 800ac94:	b91d      	cbnz	r5, 800ac9e <_strtod_l+0x17e>
 800ac96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac98:	4302      	orrs	r2, r0
 800ac9a:	d095      	beq.n	800abc8 <_strtod_l+0xa8>
 800ac9c:	2500      	movs	r5, #0
 800ac9e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aca0:	1c62      	adds	r2, r4, #1
 800aca2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aca4:	7862      	ldrb	r2, [r4, #1]
 800aca6:	2a2b      	cmp	r2, #43	@ 0x2b
 800aca8:	d077      	beq.n	800ad9a <_strtod_l+0x27a>
 800acaa:	2a2d      	cmp	r2, #45	@ 0x2d
 800acac:	d07b      	beq.n	800ada6 <_strtod_l+0x286>
 800acae:	f04f 0c00 	mov.w	ip, #0
 800acb2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800acb6:	2909      	cmp	r1, #9
 800acb8:	f240 8082 	bls.w	800adc0 <_strtod_l+0x2a0>
 800acbc:	9419      	str	r4, [sp, #100]	@ 0x64
 800acbe:	f04f 0800 	mov.w	r8, #0
 800acc2:	e0a2      	b.n	800ae0a <_strtod_l+0x2ea>
 800acc4:	2300      	movs	r3, #0
 800acc6:	e7c7      	b.n	800ac58 <_strtod_l+0x138>
 800acc8:	2f08      	cmp	r7, #8
 800acca:	bfd5      	itete	le
 800accc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800acce:	9908      	ldrgt	r1, [sp, #32]
 800acd0:	fb02 3301 	mlale	r3, r2, r1, r3
 800acd4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800acd8:	f100 0001 	add.w	r0, r0, #1
 800acdc:	bfd4      	ite	le
 800acde:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ace0:	9308      	strgt	r3, [sp, #32]
 800ace2:	3701      	adds	r7, #1
 800ace4:	9019      	str	r0, [sp, #100]	@ 0x64
 800ace6:	e7bf      	b.n	800ac68 <_strtod_l+0x148>
 800ace8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	9219      	str	r2, [sp, #100]	@ 0x64
 800acee:	785a      	ldrb	r2, [r3, #1]
 800acf0:	b37f      	cbz	r7, 800ad52 <_strtod_l+0x232>
 800acf2:	4681      	mov	r9, r0
 800acf4:	463d      	mov	r5, r7
 800acf6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800acfa:	2b09      	cmp	r3, #9
 800acfc:	d912      	bls.n	800ad24 <_strtod_l+0x204>
 800acfe:	2301      	movs	r3, #1
 800ad00:	e7c4      	b.n	800ac8c <_strtod_l+0x16c>
 800ad02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad08:	785a      	ldrb	r2, [r3, #1]
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	2a30      	cmp	r2, #48	@ 0x30
 800ad0e:	d0f8      	beq.n	800ad02 <_strtod_l+0x1e2>
 800ad10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad14:	2b08      	cmp	r3, #8
 800ad16:	f200 84d3 	bhi.w	800b6c0 <_strtod_l+0xba0>
 800ad1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad1e:	4681      	mov	r9, r0
 800ad20:	2000      	movs	r0, #0
 800ad22:	4605      	mov	r5, r0
 800ad24:	3a30      	subs	r2, #48	@ 0x30
 800ad26:	f100 0301 	add.w	r3, r0, #1
 800ad2a:	d02a      	beq.n	800ad82 <_strtod_l+0x262>
 800ad2c:	4499      	add	r9, r3
 800ad2e:	eb00 0c05 	add.w	ip, r0, r5
 800ad32:	462b      	mov	r3, r5
 800ad34:	210a      	movs	r1, #10
 800ad36:	4563      	cmp	r3, ip
 800ad38:	d10d      	bne.n	800ad56 <_strtod_l+0x236>
 800ad3a:	1c69      	adds	r1, r5, #1
 800ad3c:	4401      	add	r1, r0
 800ad3e:	4428      	add	r0, r5
 800ad40:	2808      	cmp	r0, #8
 800ad42:	dc16      	bgt.n	800ad72 <_strtod_l+0x252>
 800ad44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad46:	230a      	movs	r3, #10
 800ad48:	fb03 2300 	mla	r3, r3, r0, r2
 800ad4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad4e:	2300      	movs	r3, #0
 800ad50:	e018      	b.n	800ad84 <_strtod_l+0x264>
 800ad52:	4638      	mov	r0, r7
 800ad54:	e7da      	b.n	800ad0c <_strtod_l+0x1ec>
 800ad56:	2b08      	cmp	r3, #8
 800ad58:	f103 0301 	add.w	r3, r3, #1
 800ad5c:	dc03      	bgt.n	800ad66 <_strtod_l+0x246>
 800ad5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ad60:	434e      	muls	r6, r1
 800ad62:	960a      	str	r6, [sp, #40]	@ 0x28
 800ad64:	e7e7      	b.n	800ad36 <_strtod_l+0x216>
 800ad66:	2b10      	cmp	r3, #16
 800ad68:	bfde      	ittt	le
 800ad6a:	9e08      	ldrle	r6, [sp, #32]
 800ad6c:	434e      	mulle	r6, r1
 800ad6e:	9608      	strle	r6, [sp, #32]
 800ad70:	e7e1      	b.n	800ad36 <_strtod_l+0x216>
 800ad72:	280f      	cmp	r0, #15
 800ad74:	dceb      	bgt.n	800ad4e <_strtod_l+0x22e>
 800ad76:	9808      	ldr	r0, [sp, #32]
 800ad78:	230a      	movs	r3, #10
 800ad7a:	fb03 2300 	mla	r3, r3, r0, r2
 800ad7e:	9308      	str	r3, [sp, #32]
 800ad80:	e7e5      	b.n	800ad4e <_strtod_l+0x22e>
 800ad82:	4629      	mov	r1, r5
 800ad84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad86:	1c50      	adds	r0, r2, #1
 800ad88:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad8a:	7852      	ldrb	r2, [r2, #1]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	460d      	mov	r5, r1
 800ad90:	e7b1      	b.n	800acf6 <_strtod_l+0x1d6>
 800ad92:	f04f 0900 	mov.w	r9, #0
 800ad96:	2301      	movs	r3, #1
 800ad98:	e77d      	b.n	800ac96 <_strtod_l+0x176>
 800ad9a:	f04f 0c00 	mov.w	ip, #0
 800ad9e:	1ca2      	adds	r2, r4, #2
 800ada0:	9219      	str	r2, [sp, #100]	@ 0x64
 800ada2:	78a2      	ldrb	r2, [r4, #2]
 800ada4:	e785      	b.n	800acb2 <_strtod_l+0x192>
 800ada6:	f04f 0c01 	mov.w	ip, #1
 800adaa:	e7f8      	b.n	800ad9e <_strtod_l+0x27e>
 800adac:	0800eaa0 	.word	0x0800eaa0
 800adb0:	0800ea88 	.word	0x0800ea88
 800adb4:	7ff00000 	.word	0x7ff00000
 800adb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adba:	1c51      	adds	r1, r2, #1
 800adbc:	9119      	str	r1, [sp, #100]	@ 0x64
 800adbe:	7852      	ldrb	r2, [r2, #1]
 800adc0:	2a30      	cmp	r2, #48	@ 0x30
 800adc2:	d0f9      	beq.n	800adb8 <_strtod_l+0x298>
 800adc4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800adc8:	2908      	cmp	r1, #8
 800adca:	f63f af78 	bhi.w	800acbe <_strtod_l+0x19e>
 800adce:	3a30      	subs	r2, #48	@ 0x30
 800add0:	920e      	str	r2, [sp, #56]	@ 0x38
 800add2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800add4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800add6:	f04f 080a 	mov.w	r8, #10
 800adda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800addc:	1c56      	adds	r6, r2, #1
 800adde:	9619      	str	r6, [sp, #100]	@ 0x64
 800ade0:	7852      	ldrb	r2, [r2, #1]
 800ade2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ade6:	f1be 0f09 	cmp.w	lr, #9
 800adea:	d939      	bls.n	800ae60 <_strtod_l+0x340>
 800adec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800adee:	1a76      	subs	r6, r6, r1
 800adf0:	2e08      	cmp	r6, #8
 800adf2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800adf6:	dc03      	bgt.n	800ae00 <_strtod_l+0x2e0>
 800adf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800adfa:	4588      	cmp	r8, r1
 800adfc:	bfa8      	it	ge
 800adfe:	4688      	movge	r8, r1
 800ae00:	f1bc 0f00 	cmp.w	ip, #0
 800ae04:	d001      	beq.n	800ae0a <_strtod_l+0x2ea>
 800ae06:	f1c8 0800 	rsb	r8, r8, #0
 800ae0a:	2d00      	cmp	r5, #0
 800ae0c:	d14e      	bne.n	800aeac <_strtod_l+0x38c>
 800ae0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae10:	4308      	orrs	r0, r1
 800ae12:	f47f aebe 	bne.w	800ab92 <_strtod_l+0x72>
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f47f aed6 	bne.w	800abc8 <_strtod_l+0xa8>
 800ae1c:	2a69      	cmp	r2, #105	@ 0x69
 800ae1e:	d028      	beq.n	800ae72 <_strtod_l+0x352>
 800ae20:	dc25      	bgt.n	800ae6e <_strtod_l+0x34e>
 800ae22:	2a49      	cmp	r2, #73	@ 0x49
 800ae24:	d025      	beq.n	800ae72 <_strtod_l+0x352>
 800ae26:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae28:	f47f aece 	bne.w	800abc8 <_strtod_l+0xa8>
 800ae2c:	499b      	ldr	r1, [pc, #620]	@ (800b09c <_strtod_l+0x57c>)
 800ae2e:	a819      	add	r0, sp, #100	@ 0x64
 800ae30:	f001 fb3a 	bl	800c4a8 <__match>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f43f aec7 	beq.w	800abc8 <_strtod_l+0xa8>
 800ae3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b28      	cmp	r3, #40	@ 0x28
 800ae40:	d12e      	bne.n	800aea0 <_strtod_l+0x380>
 800ae42:	4997      	ldr	r1, [pc, #604]	@ (800b0a0 <_strtod_l+0x580>)
 800ae44:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae46:	a819      	add	r0, sp, #100	@ 0x64
 800ae48:	f001 fb42 	bl	800c4d0 <__hexnan>
 800ae4c:	2805      	cmp	r0, #5
 800ae4e:	d127      	bne.n	800aea0 <_strtod_l+0x380>
 800ae50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ae56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ae5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ae5e:	e698      	b.n	800ab92 <_strtod_l+0x72>
 800ae60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ae62:	fb08 2101 	mla	r1, r8, r1, r2
 800ae66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ae6a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae6c:	e7b5      	b.n	800adda <_strtod_l+0x2ba>
 800ae6e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ae70:	e7da      	b.n	800ae28 <_strtod_l+0x308>
 800ae72:	498c      	ldr	r1, [pc, #560]	@ (800b0a4 <_strtod_l+0x584>)
 800ae74:	a819      	add	r0, sp, #100	@ 0x64
 800ae76:	f001 fb17 	bl	800c4a8 <__match>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	f43f aea4 	beq.w	800abc8 <_strtod_l+0xa8>
 800ae80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae82:	4989      	ldr	r1, [pc, #548]	@ (800b0a8 <_strtod_l+0x588>)
 800ae84:	3b01      	subs	r3, #1
 800ae86:	a819      	add	r0, sp, #100	@ 0x64
 800ae88:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae8a:	f001 fb0d 	bl	800c4a8 <__match>
 800ae8e:	b910      	cbnz	r0, 800ae96 <_strtod_l+0x376>
 800ae90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae92:	3301      	adds	r3, #1
 800ae94:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b0b8 <_strtod_l+0x598>
 800ae9a:	f04f 0a00 	mov.w	sl, #0
 800ae9e:	e678      	b.n	800ab92 <_strtod_l+0x72>
 800aea0:	4882      	ldr	r0, [pc, #520]	@ (800b0ac <_strtod_l+0x58c>)
 800aea2:	f001 f83d 	bl	800bf20 <nan>
 800aea6:	ec5b ab10 	vmov	sl, fp, d0
 800aeaa:	e672      	b.n	800ab92 <_strtod_l+0x72>
 800aeac:	eba8 0309 	sub.w	r3, r8, r9
 800aeb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aeb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeb4:	2f00      	cmp	r7, #0
 800aeb6:	bf08      	it	eq
 800aeb8:	462f      	moveq	r7, r5
 800aeba:	2d10      	cmp	r5, #16
 800aebc:	462c      	mov	r4, r5
 800aebe:	bfa8      	it	ge
 800aec0:	2410      	movge	r4, #16
 800aec2:	f7f5 fb2f 	bl	8000524 <__aeabi_ui2d>
 800aec6:	2d09      	cmp	r5, #9
 800aec8:	4682      	mov	sl, r0
 800aeca:	468b      	mov	fp, r1
 800aecc:	dc13      	bgt.n	800aef6 <_strtod_l+0x3d6>
 800aece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f43f ae5e 	beq.w	800ab92 <_strtod_l+0x72>
 800aed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed8:	dd78      	ble.n	800afcc <_strtod_l+0x4ac>
 800aeda:	2b16      	cmp	r3, #22
 800aedc:	dc5f      	bgt.n	800af9e <_strtod_l+0x47e>
 800aede:	4974      	ldr	r1, [pc, #464]	@ (800b0b0 <_strtod_l+0x590>)
 800aee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aee8:	4652      	mov	r2, sl
 800aeea:	465b      	mov	r3, fp
 800aeec:	f7f5 fb94 	bl	8000618 <__aeabi_dmul>
 800aef0:	4682      	mov	sl, r0
 800aef2:	468b      	mov	fp, r1
 800aef4:	e64d      	b.n	800ab92 <_strtod_l+0x72>
 800aef6:	4b6e      	ldr	r3, [pc, #440]	@ (800b0b0 <_strtod_l+0x590>)
 800aef8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aefc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af00:	f7f5 fb8a 	bl	8000618 <__aeabi_dmul>
 800af04:	4682      	mov	sl, r0
 800af06:	9808      	ldr	r0, [sp, #32]
 800af08:	468b      	mov	fp, r1
 800af0a:	f7f5 fb0b 	bl	8000524 <__aeabi_ui2d>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	4650      	mov	r0, sl
 800af14:	4659      	mov	r1, fp
 800af16:	f7f5 f9c9 	bl	80002ac <__adddf3>
 800af1a:	2d0f      	cmp	r5, #15
 800af1c:	4682      	mov	sl, r0
 800af1e:	468b      	mov	fp, r1
 800af20:	ddd5      	ble.n	800aece <_strtod_l+0x3ae>
 800af22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af24:	1b2c      	subs	r4, r5, r4
 800af26:	441c      	add	r4, r3
 800af28:	2c00      	cmp	r4, #0
 800af2a:	f340 8096 	ble.w	800b05a <_strtod_l+0x53a>
 800af2e:	f014 030f 	ands.w	r3, r4, #15
 800af32:	d00a      	beq.n	800af4a <_strtod_l+0x42a>
 800af34:	495e      	ldr	r1, [pc, #376]	@ (800b0b0 <_strtod_l+0x590>)
 800af36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af3a:	4652      	mov	r2, sl
 800af3c:	465b      	mov	r3, fp
 800af3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af42:	f7f5 fb69 	bl	8000618 <__aeabi_dmul>
 800af46:	4682      	mov	sl, r0
 800af48:	468b      	mov	fp, r1
 800af4a:	f034 040f 	bics.w	r4, r4, #15
 800af4e:	d073      	beq.n	800b038 <_strtod_l+0x518>
 800af50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800af54:	dd48      	ble.n	800afe8 <_strtod_l+0x4c8>
 800af56:	2400      	movs	r4, #0
 800af58:	46a0      	mov	r8, r4
 800af5a:	940a      	str	r4, [sp, #40]	@ 0x28
 800af5c:	46a1      	mov	r9, r4
 800af5e:	9a05      	ldr	r2, [sp, #20]
 800af60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b0b8 <_strtod_l+0x598>
 800af64:	2322      	movs	r3, #34	@ 0x22
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	f04f 0a00 	mov.w	sl, #0
 800af6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f43f ae0f 	beq.w	800ab92 <_strtod_l+0x72>
 800af74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af76:	9805      	ldr	r0, [sp, #20]
 800af78:	f7ff f942 	bl	800a200 <_Bfree>
 800af7c:	9805      	ldr	r0, [sp, #20]
 800af7e:	4649      	mov	r1, r9
 800af80:	f7ff f93e 	bl	800a200 <_Bfree>
 800af84:	9805      	ldr	r0, [sp, #20]
 800af86:	4641      	mov	r1, r8
 800af88:	f7ff f93a 	bl	800a200 <_Bfree>
 800af8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af8e:	9805      	ldr	r0, [sp, #20]
 800af90:	f7ff f936 	bl	800a200 <_Bfree>
 800af94:	9805      	ldr	r0, [sp, #20]
 800af96:	4621      	mov	r1, r4
 800af98:	f7ff f932 	bl	800a200 <_Bfree>
 800af9c:	e5f9      	b.n	800ab92 <_strtod_l+0x72>
 800af9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afa0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800afa4:	4293      	cmp	r3, r2
 800afa6:	dbbc      	blt.n	800af22 <_strtod_l+0x402>
 800afa8:	4c41      	ldr	r4, [pc, #260]	@ (800b0b0 <_strtod_l+0x590>)
 800afaa:	f1c5 050f 	rsb	r5, r5, #15
 800afae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800afb2:	4652      	mov	r2, sl
 800afb4:	465b      	mov	r3, fp
 800afb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afba:	f7f5 fb2d 	bl	8000618 <__aeabi_dmul>
 800afbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc0:	1b5d      	subs	r5, r3, r5
 800afc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800afc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800afca:	e78f      	b.n	800aeec <_strtod_l+0x3cc>
 800afcc:	3316      	adds	r3, #22
 800afce:	dba8      	blt.n	800af22 <_strtod_l+0x402>
 800afd0:	4b37      	ldr	r3, [pc, #220]	@ (800b0b0 <_strtod_l+0x590>)
 800afd2:	eba9 0808 	sub.w	r8, r9, r8
 800afd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800afda:	e9d8 2300 	ldrd	r2, r3, [r8]
 800afde:	4650      	mov	r0, sl
 800afe0:	4659      	mov	r1, fp
 800afe2:	f7f5 fc43 	bl	800086c <__aeabi_ddiv>
 800afe6:	e783      	b.n	800aef0 <_strtod_l+0x3d0>
 800afe8:	4b32      	ldr	r3, [pc, #200]	@ (800b0b4 <_strtod_l+0x594>)
 800afea:	9308      	str	r3, [sp, #32]
 800afec:	2300      	movs	r3, #0
 800afee:	1124      	asrs	r4, r4, #4
 800aff0:	4650      	mov	r0, sl
 800aff2:	4659      	mov	r1, fp
 800aff4:	461e      	mov	r6, r3
 800aff6:	2c01      	cmp	r4, #1
 800aff8:	dc21      	bgt.n	800b03e <_strtod_l+0x51e>
 800affa:	b10b      	cbz	r3, 800b000 <_strtod_l+0x4e0>
 800affc:	4682      	mov	sl, r0
 800affe:	468b      	mov	fp, r1
 800b000:	492c      	ldr	r1, [pc, #176]	@ (800b0b4 <_strtod_l+0x594>)
 800b002:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b006:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b00a:	4652      	mov	r2, sl
 800b00c:	465b      	mov	r3, fp
 800b00e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b012:	f7f5 fb01 	bl	8000618 <__aeabi_dmul>
 800b016:	4b28      	ldr	r3, [pc, #160]	@ (800b0b8 <_strtod_l+0x598>)
 800b018:	460a      	mov	r2, r1
 800b01a:	400b      	ands	r3, r1
 800b01c:	4927      	ldr	r1, [pc, #156]	@ (800b0bc <_strtod_l+0x59c>)
 800b01e:	428b      	cmp	r3, r1
 800b020:	4682      	mov	sl, r0
 800b022:	d898      	bhi.n	800af56 <_strtod_l+0x436>
 800b024:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b028:	428b      	cmp	r3, r1
 800b02a:	bf86      	itte	hi
 800b02c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b0c0 <_strtod_l+0x5a0>
 800b030:	f04f 3aff 	movhi.w	sl, #4294967295
 800b034:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b038:	2300      	movs	r3, #0
 800b03a:	9308      	str	r3, [sp, #32]
 800b03c:	e07a      	b.n	800b134 <_strtod_l+0x614>
 800b03e:	07e2      	lsls	r2, r4, #31
 800b040:	d505      	bpl.n	800b04e <_strtod_l+0x52e>
 800b042:	9b08      	ldr	r3, [sp, #32]
 800b044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b048:	f7f5 fae6 	bl	8000618 <__aeabi_dmul>
 800b04c:	2301      	movs	r3, #1
 800b04e:	9a08      	ldr	r2, [sp, #32]
 800b050:	3208      	adds	r2, #8
 800b052:	3601      	adds	r6, #1
 800b054:	1064      	asrs	r4, r4, #1
 800b056:	9208      	str	r2, [sp, #32]
 800b058:	e7cd      	b.n	800aff6 <_strtod_l+0x4d6>
 800b05a:	d0ed      	beq.n	800b038 <_strtod_l+0x518>
 800b05c:	4264      	negs	r4, r4
 800b05e:	f014 020f 	ands.w	r2, r4, #15
 800b062:	d00a      	beq.n	800b07a <_strtod_l+0x55a>
 800b064:	4b12      	ldr	r3, [pc, #72]	@ (800b0b0 <_strtod_l+0x590>)
 800b066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b06a:	4650      	mov	r0, sl
 800b06c:	4659      	mov	r1, fp
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f7f5 fbfb 	bl	800086c <__aeabi_ddiv>
 800b076:	4682      	mov	sl, r0
 800b078:	468b      	mov	fp, r1
 800b07a:	1124      	asrs	r4, r4, #4
 800b07c:	d0dc      	beq.n	800b038 <_strtod_l+0x518>
 800b07e:	2c1f      	cmp	r4, #31
 800b080:	dd20      	ble.n	800b0c4 <_strtod_l+0x5a4>
 800b082:	2400      	movs	r4, #0
 800b084:	46a0      	mov	r8, r4
 800b086:	940a      	str	r4, [sp, #40]	@ 0x28
 800b088:	46a1      	mov	r9, r4
 800b08a:	9a05      	ldr	r2, [sp, #20]
 800b08c:	2322      	movs	r3, #34	@ 0x22
 800b08e:	f04f 0a00 	mov.w	sl, #0
 800b092:	f04f 0b00 	mov.w	fp, #0
 800b096:	6013      	str	r3, [r2, #0]
 800b098:	e768      	b.n	800af6c <_strtod_l+0x44c>
 800b09a:	bf00      	nop
 800b09c:	0800e876 	.word	0x0800e876
 800b0a0:	0800ea8c 	.word	0x0800ea8c
 800b0a4:	0800e86e 	.word	0x0800e86e
 800b0a8:	0800e8a5 	.word	0x0800e8a5
 800b0ac:	0800eb34 	.word	0x0800eb34
 800b0b0:	0800e9c0 	.word	0x0800e9c0
 800b0b4:	0800e998 	.word	0x0800e998
 800b0b8:	7ff00000 	.word	0x7ff00000
 800b0bc:	7ca00000 	.word	0x7ca00000
 800b0c0:	7fefffff 	.word	0x7fefffff
 800b0c4:	f014 0310 	ands.w	r3, r4, #16
 800b0c8:	bf18      	it	ne
 800b0ca:	236a      	movne	r3, #106	@ 0x6a
 800b0cc:	4ea9      	ldr	r6, [pc, #676]	@ (800b374 <_strtod_l+0x854>)
 800b0ce:	9308      	str	r3, [sp, #32]
 800b0d0:	4650      	mov	r0, sl
 800b0d2:	4659      	mov	r1, fp
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	07e2      	lsls	r2, r4, #31
 800b0d8:	d504      	bpl.n	800b0e4 <_strtod_l+0x5c4>
 800b0da:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0de:	f7f5 fa9b 	bl	8000618 <__aeabi_dmul>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	1064      	asrs	r4, r4, #1
 800b0e6:	f106 0608 	add.w	r6, r6, #8
 800b0ea:	d1f4      	bne.n	800b0d6 <_strtod_l+0x5b6>
 800b0ec:	b10b      	cbz	r3, 800b0f2 <_strtod_l+0x5d2>
 800b0ee:	4682      	mov	sl, r0
 800b0f0:	468b      	mov	fp, r1
 800b0f2:	9b08      	ldr	r3, [sp, #32]
 800b0f4:	b1b3      	cbz	r3, 800b124 <_strtod_l+0x604>
 800b0f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b0fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	4659      	mov	r1, fp
 800b102:	dd0f      	ble.n	800b124 <_strtod_l+0x604>
 800b104:	2b1f      	cmp	r3, #31
 800b106:	dd55      	ble.n	800b1b4 <_strtod_l+0x694>
 800b108:	2b34      	cmp	r3, #52	@ 0x34
 800b10a:	bfde      	ittt	le
 800b10c:	f04f 33ff 	movle.w	r3, #4294967295
 800b110:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b114:	4093      	lslle	r3, r2
 800b116:	f04f 0a00 	mov.w	sl, #0
 800b11a:	bfcc      	ite	gt
 800b11c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b120:	ea03 0b01 	andle.w	fp, r3, r1
 800b124:	2200      	movs	r2, #0
 800b126:	2300      	movs	r3, #0
 800b128:	4650      	mov	r0, sl
 800b12a:	4659      	mov	r1, fp
 800b12c:	f7f5 fcdc 	bl	8000ae8 <__aeabi_dcmpeq>
 800b130:	2800      	cmp	r0, #0
 800b132:	d1a6      	bne.n	800b082 <_strtod_l+0x562>
 800b134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b13a:	9805      	ldr	r0, [sp, #20]
 800b13c:	462b      	mov	r3, r5
 800b13e:	463a      	mov	r2, r7
 800b140:	f7ff f8c6 	bl	800a2d0 <__s2b>
 800b144:	900a      	str	r0, [sp, #40]	@ 0x28
 800b146:	2800      	cmp	r0, #0
 800b148:	f43f af05 	beq.w	800af56 <_strtod_l+0x436>
 800b14c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b14e:	2a00      	cmp	r2, #0
 800b150:	eba9 0308 	sub.w	r3, r9, r8
 800b154:	bfa8      	it	ge
 800b156:	2300      	movge	r3, #0
 800b158:	9312      	str	r3, [sp, #72]	@ 0x48
 800b15a:	2400      	movs	r4, #0
 800b15c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b160:	9316      	str	r3, [sp, #88]	@ 0x58
 800b162:	46a0      	mov	r8, r4
 800b164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b166:	9805      	ldr	r0, [sp, #20]
 800b168:	6859      	ldr	r1, [r3, #4]
 800b16a:	f7ff f809 	bl	800a180 <_Balloc>
 800b16e:	4681      	mov	r9, r0
 800b170:	2800      	cmp	r0, #0
 800b172:	f43f aef4 	beq.w	800af5e <_strtod_l+0x43e>
 800b176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b178:	691a      	ldr	r2, [r3, #16]
 800b17a:	3202      	adds	r2, #2
 800b17c:	f103 010c 	add.w	r1, r3, #12
 800b180:	0092      	lsls	r2, r2, #2
 800b182:	300c      	adds	r0, #12
 800b184:	f7fe f899 	bl	80092ba <memcpy>
 800b188:	ec4b ab10 	vmov	d0, sl, fp
 800b18c:	9805      	ldr	r0, [sp, #20]
 800b18e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b190:	a91b      	add	r1, sp, #108	@ 0x6c
 800b192:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b196:	f7ff fbd7 	bl	800a948 <__d2b>
 800b19a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b19c:	2800      	cmp	r0, #0
 800b19e:	f43f aede 	beq.w	800af5e <_strtod_l+0x43e>
 800b1a2:	9805      	ldr	r0, [sp, #20]
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	f7ff f929 	bl	800a3fc <__i2b>
 800b1aa:	4680      	mov	r8, r0
 800b1ac:	b948      	cbnz	r0, 800b1c2 <_strtod_l+0x6a2>
 800b1ae:	f04f 0800 	mov.w	r8, #0
 800b1b2:	e6d4      	b.n	800af5e <_strtod_l+0x43e>
 800b1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1bc:	ea03 0a0a 	and.w	sl, r3, sl
 800b1c0:	e7b0      	b.n	800b124 <_strtod_l+0x604>
 800b1c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b1c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b1c6:	2d00      	cmp	r5, #0
 800b1c8:	bfab      	itete	ge
 800b1ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b1cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b1ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b1d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b1d2:	bfac      	ite	ge
 800b1d4:	18ef      	addge	r7, r5, r3
 800b1d6:	1b5e      	sublt	r6, r3, r5
 800b1d8:	9b08      	ldr	r3, [sp, #32]
 800b1da:	1aed      	subs	r5, r5, r3
 800b1dc:	4415      	add	r5, r2
 800b1de:	4b66      	ldr	r3, [pc, #408]	@ (800b378 <_strtod_l+0x858>)
 800b1e0:	3d01      	subs	r5, #1
 800b1e2:	429d      	cmp	r5, r3
 800b1e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b1e8:	da50      	bge.n	800b28c <_strtod_l+0x76c>
 800b1ea:	1b5b      	subs	r3, r3, r5
 800b1ec:	2b1f      	cmp	r3, #31
 800b1ee:	eba2 0203 	sub.w	r2, r2, r3
 800b1f2:	f04f 0101 	mov.w	r1, #1
 800b1f6:	dc3d      	bgt.n	800b274 <_strtod_l+0x754>
 800b1f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1fe:	2300      	movs	r3, #0
 800b200:	9310      	str	r3, [sp, #64]	@ 0x40
 800b202:	18bd      	adds	r5, r7, r2
 800b204:	9b08      	ldr	r3, [sp, #32]
 800b206:	42af      	cmp	r7, r5
 800b208:	4416      	add	r6, r2
 800b20a:	441e      	add	r6, r3
 800b20c:	463b      	mov	r3, r7
 800b20e:	bfa8      	it	ge
 800b210:	462b      	movge	r3, r5
 800b212:	42b3      	cmp	r3, r6
 800b214:	bfa8      	it	ge
 800b216:	4633      	movge	r3, r6
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfc2      	ittt	gt
 800b21c:	1aed      	subgt	r5, r5, r3
 800b21e:	1af6      	subgt	r6, r6, r3
 800b220:	1aff      	subgt	r7, r7, r3
 800b222:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b224:	2b00      	cmp	r3, #0
 800b226:	dd16      	ble.n	800b256 <_strtod_l+0x736>
 800b228:	4641      	mov	r1, r8
 800b22a:	9805      	ldr	r0, [sp, #20]
 800b22c:	461a      	mov	r2, r3
 800b22e:	f7ff f9a5 	bl	800a57c <__pow5mult>
 800b232:	4680      	mov	r8, r0
 800b234:	2800      	cmp	r0, #0
 800b236:	d0ba      	beq.n	800b1ae <_strtod_l+0x68e>
 800b238:	4601      	mov	r1, r0
 800b23a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b23c:	9805      	ldr	r0, [sp, #20]
 800b23e:	f7ff f8f3 	bl	800a428 <__multiply>
 800b242:	900e      	str	r0, [sp, #56]	@ 0x38
 800b244:	2800      	cmp	r0, #0
 800b246:	f43f ae8a 	beq.w	800af5e <_strtod_l+0x43e>
 800b24a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b24c:	9805      	ldr	r0, [sp, #20]
 800b24e:	f7fe ffd7 	bl	800a200 <_Bfree>
 800b252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b254:	931a      	str	r3, [sp, #104]	@ 0x68
 800b256:	2d00      	cmp	r5, #0
 800b258:	dc1d      	bgt.n	800b296 <_strtod_l+0x776>
 800b25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	dd23      	ble.n	800b2a8 <_strtod_l+0x788>
 800b260:	4649      	mov	r1, r9
 800b262:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b264:	9805      	ldr	r0, [sp, #20]
 800b266:	f7ff f989 	bl	800a57c <__pow5mult>
 800b26a:	4681      	mov	r9, r0
 800b26c:	b9e0      	cbnz	r0, 800b2a8 <_strtod_l+0x788>
 800b26e:	f04f 0900 	mov.w	r9, #0
 800b272:	e674      	b.n	800af5e <_strtod_l+0x43e>
 800b274:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b278:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b27c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b280:	35e2      	adds	r5, #226	@ 0xe2
 800b282:	fa01 f305 	lsl.w	r3, r1, r5
 800b286:	9310      	str	r3, [sp, #64]	@ 0x40
 800b288:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b28a:	e7ba      	b.n	800b202 <_strtod_l+0x6e2>
 800b28c:	2300      	movs	r3, #0
 800b28e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b290:	2301      	movs	r3, #1
 800b292:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b294:	e7b5      	b.n	800b202 <_strtod_l+0x6e2>
 800b296:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b298:	9805      	ldr	r0, [sp, #20]
 800b29a:	462a      	mov	r2, r5
 800b29c:	f7ff f9c8 	bl	800a630 <__lshift>
 800b2a0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d1d9      	bne.n	800b25a <_strtod_l+0x73a>
 800b2a6:	e65a      	b.n	800af5e <_strtod_l+0x43e>
 800b2a8:	2e00      	cmp	r6, #0
 800b2aa:	dd07      	ble.n	800b2bc <_strtod_l+0x79c>
 800b2ac:	4649      	mov	r1, r9
 800b2ae:	9805      	ldr	r0, [sp, #20]
 800b2b0:	4632      	mov	r2, r6
 800b2b2:	f7ff f9bd 	bl	800a630 <__lshift>
 800b2b6:	4681      	mov	r9, r0
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d0d8      	beq.n	800b26e <_strtod_l+0x74e>
 800b2bc:	2f00      	cmp	r7, #0
 800b2be:	dd08      	ble.n	800b2d2 <_strtod_l+0x7b2>
 800b2c0:	4641      	mov	r1, r8
 800b2c2:	9805      	ldr	r0, [sp, #20]
 800b2c4:	463a      	mov	r2, r7
 800b2c6:	f7ff f9b3 	bl	800a630 <__lshift>
 800b2ca:	4680      	mov	r8, r0
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	f43f ae46 	beq.w	800af5e <_strtod_l+0x43e>
 800b2d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2d4:	9805      	ldr	r0, [sp, #20]
 800b2d6:	464a      	mov	r2, r9
 800b2d8:	f7ff fa32 	bl	800a740 <__mdiff>
 800b2dc:	4604      	mov	r4, r0
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	f43f ae3d 	beq.w	800af5e <_strtod_l+0x43e>
 800b2e4:	68c3      	ldr	r3, [r0, #12]
 800b2e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	60c3      	str	r3, [r0, #12]
 800b2ec:	4641      	mov	r1, r8
 800b2ee:	f7ff fa0b 	bl	800a708 <__mcmp>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	da46      	bge.n	800b384 <_strtod_l+0x864>
 800b2f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2f8:	ea53 030a 	orrs.w	r3, r3, sl
 800b2fc:	d16c      	bne.n	800b3d8 <_strtod_l+0x8b8>
 800b2fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b302:	2b00      	cmp	r3, #0
 800b304:	d168      	bne.n	800b3d8 <_strtod_l+0x8b8>
 800b306:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b30a:	0d1b      	lsrs	r3, r3, #20
 800b30c:	051b      	lsls	r3, r3, #20
 800b30e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b312:	d961      	bls.n	800b3d8 <_strtod_l+0x8b8>
 800b314:	6963      	ldr	r3, [r4, #20]
 800b316:	b913      	cbnz	r3, 800b31e <_strtod_l+0x7fe>
 800b318:	6923      	ldr	r3, [r4, #16]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	dd5c      	ble.n	800b3d8 <_strtod_l+0x8b8>
 800b31e:	4621      	mov	r1, r4
 800b320:	2201      	movs	r2, #1
 800b322:	9805      	ldr	r0, [sp, #20]
 800b324:	f7ff f984 	bl	800a630 <__lshift>
 800b328:	4641      	mov	r1, r8
 800b32a:	4604      	mov	r4, r0
 800b32c:	f7ff f9ec 	bl	800a708 <__mcmp>
 800b330:	2800      	cmp	r0, #0
 800b332:	dd51      	ble.n	800b3d8 <_strtod_l+0x8b8>
 800b334:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b338:	9a08      	ldr	r2, [sp, #32]
 800b33a:	0d1b      	lsrs	r3, r3, #20
 800b33c:	051b      	lsls	r3, r3, #20
 800b33e:	2a00      	cmp	r2, #0
 800b340:	d06b      	beq.n	800b41a <_strtod_l+0x8fa>
 800b342:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b346:	d868      	bhi.n	800b41a <_strtod_l+0x8fa>
 800b348:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b34c:	f67f ae9d 	bls.w	800b08a <_strtod_l+0x56a>
 800b350:	4b0a      	ldr	r3, [pc, #40]	@ (800b37c <_strtod_l+0x85c>)
 800b352:	4650      	mov	r0, sl
 800b354:	4659      	mov	r1, fp
 800b356:	2200      	movs	r2, #0
 800b358:	f7f5 f95e 	bl	8000618 <__aeabi_dmul>
 800b35c:	4b08      	ldr	r3, [pc, #32]	@ (800b380 <_strtod_l+0x860>)
 800b35e:	400b      	ands	r3, r1
 800b360:	4682      	mov	sl, r0
 800b362:	468b      	mov	fp, r1
 800b364:	2b00      	cmp	r3, #0
 800b366:	f47f ae05 	bne.w	800af74 <_strtod_l+0x454>
 800b36a:	9a05      	ldr	r2, [sp, #20]
 800b36c:	2322      	movs	r3, #34	@ 0x22
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	e600      	b.n	800af74 <_strtod_l+0x454>
 800b372:	bf00      	nop
 800b374:	0800eab8 	.word	0x0800eab8
 800b378:	fffffc02 	.word	0xfffffc02
 800b37c:	39500000 	.word	0x39500000
 800b380:	7ff00000 	.word	0x7ff00000
 800b384:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b388:	d165      	bne.n	800b456 <_strtod_l+0x936>
 800b38a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b38c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b390:	b35a      	cbz	r2, 800b3ea <_strtod_l+0x8ca>
 800b392:	4a9f      	ldr	r2, [pc, #636]	@ (800b610 <_strtod_l+0xaf0>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d12b      	bne.n	800b3f0 <_strtod_l+0x8d0>
 800b398:	9b08      	ldr	r3, [sp, #32]
 800b39a:	4651      	mov	r1, sl
 800b39c:	b303      	cbz	r3, 800b3e0 <_strtod_l+0x8c0>
 800b39e:	4b9d      	ldr	r3, [pc, #628]	@ (800b614 <_strtod_l+0xaf4>)
 800b3a0:	465a      	mov	r2, fp
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ac:	d81b      	bhi.n	800b3e6 <_strtod_l+0x8c6>
 800b3ae:	0d1b      	lsrs	r3, r3, #20
 800b3b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b8:	4299      	cmp	r1, r3
 800b3ba:	d119      	bne.n	800b3f0 <_strtod_l+0x8d0>
 800b3bc:	4b96      	ldr	r3, [pc, #600]	@ (800b618 <_strtod_l+0xaf8>)
 800b3be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d102      	bne.n	800b3ca <_strtod_l+0x8aa>
 800b3c4:	3101      	adds	r1, #1
 800b3c6:	f43f adca 	beq.w	800af5e <_strtod_l+0x43e>
 800b3ca:	4b92      	ldr	r3, [pc, #584]	@ (800b614 <_strtod_l+0xaf4>)
 800b3cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3ce:	401a      	ands	r2, r3
 800b3d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b3d4:	f04f 0a00 	mov.w	sl, #0
 800b3d8:	9b08      	ldr	r3, [sp, #32]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1b8      	bne.n	800b350 <_strtod_l+0x830>
 800b3de:	e5c9      	b.n	800af74 <_strtod_l+0x454>
 800b3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e4:	e7e8      	b.n	800b3b8 <_strtod_l+0x898>
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	e7e6      	b.n	800b3b8 <_strtod_l+0x898>
 800b3ea:	ea53 030a 	orrs.w	r3, r3, sl
 800b3ee:	d0a1      	beq.n	800b334 <_strtod_l+0x814>
 800b3f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3f2:	b1db      	cbz	r3, 800b42c <_strtod_l+0x90c>
 800b3f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3f6:	4213      	tst	r3, r2
 800b3f8:	d0ee      	beq.n	800b3d8 <_strtod_l+0x8b8>
 800b3fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3fc:	9a08      	ldr	r2, [sp, #32]
 800b3fe:	4650      	mov	r0, sl
 800b400:	4659      	mov	r1, fp
 800b402:	b1bb      	cbz	r3, 800b434 <_strtod_l+0x914>
 800b404:	f7ff fb6e 	bl	800aae4 <sulp>
 800b408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b40c:	ec53 2b10 	vmov	r2, r3, d0
 800b410:	f7f4 ff4c 	bl	80002ac <__adddf3>
 800b414:	4682      	mov	sl, r0
 800b416:	468b      	mov	fp, r1
 800b418:	e7de      	b.n	800b3d8 <_strtod_l+0x8b8>
 800b41a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b41e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b422:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b426:	f04f 3aff 	mov.w	sl, #4294967295
 800b42a:	e7d5      	b.n	800b3d8 <_strtod_l+0x8b8>
 800b42c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b42e:	ea13 0f0a 	tst.w	r3, sl
 800b432:	e7e1      	b.n	800b3f8 <_strtod_l+0x8d8>
 800b434:	f7ff fb56 	bl	800aae4 <sulp>
 800b438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b43c:	ec53 2b10 	vmov	r2, r3, d0
 800b440:	f7f4 ff32 	bl	80002a8 <__aeabi_dsub>
 800b444:	2200      	movs	r2, #0
 800b446:	2300      	movs	r3, #0
 800b448:	4682      	mov	sl, r0
 800b44a:	468b      	mov	fp, r1
 800b44c:	f7f5 fb4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b450:	2800      	cmp	r0, #0
 800b452:	d0c1      	beq.n	800b3d8 <_strtod_l+0x8b8>
 800b454:	e619      	b.n	800b08a <_strtod_l+0x56a>
 800b456:	4641      	mov	r1, r8
 800b458:	4620      	mov	r0, r4
 800b45a:	f7ff facd 	bl	800a9f8 <__ratio>
 800b45e:	ec57 6b10 	vmov	r6, r7, d0
 800b462:	2200      	movs	r2, #0
 800b464:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b468:	4630      	mov	r0, r6
 800b46a:	4639      	mov	r1, r7
 800b46c:	f7f5 fb50 	bl	8000b10 <__aeabi_dcmple>
 800b470:	2800      	cmp	r0, #0
 800b472:	d06f      	beq.n	800b554 <_strtod_l+0xa34>
 800b474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b476:	2b00      	cmp	r3, #0
 800b478:	d17a      	bne.n	800b570 <_strtod_l+0xa50>
 800b47a:	f1ba 0f00 	cmp.w	sl, #0
 800b47e:	d158      	bne.n	800b532 <_strtod_l+0xa12>
 800b480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b486:	2b00      	cmp	r3, #0
 800b488:	d15a      	bne.n	800b540 <_strtod_l+0xa20>
 800b48a:	4b64      	ldr	r3, [pc, #400]	@ (800b61c <_strtod_l+0xafc>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	4630      	mov	r0, r6
 800b490:	4639      	mov	r1, r7
 800b492:	f7f5 fb33 	bl	8000afc <__aeabi_dcmplt>
 800b496:	2800      	cmp	r0, #0
 800b498:	d159      	bne.n	800b54e <_strtod_l+0xa2e>
 800b49a:	4630      	mov	r0, r6
 800b49c:	4639      	mov	r1, r7
 800b49e:	4b60      	ldr	r3, [pc, #384]	@ (800b620 <_strtod_l+0xb00>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f7f5 f8b9 	bl	8000618 <__aeabi_dmul>
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	460f      	mov	r7, r1
 800b4aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b4ae:	9606      	str	r6, [sp, #24]
 800b4b0:	9307      	str	r3, [sp, #28]
 800b4b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4b6:	4d57      	ldr	r5, [pc, #348]	@ (800b614 <_strtod_l+0xaf4>)
 800b4b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4be:	401d      	ands	r5, r3
 800b4c0:	4b58      	ldr	r3, [pc, #352]	@ (800b624 <_strtod_l+0xb04>)
 800b4c2:	429d      	cmp	r5, r3
 800b4c4:	f040 80b2 	bne.w	800b62c <_strtod_l+0xb0c>
 800b4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b4ce:	ec4b ab10 	vmov	d0, sl, fp
 800b4d2:	f7ff f9c9 	bl	800a868 <__ulp>
 800b4d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4da:	ec51 0b10 	vmov	r0, r1, d0
 800b4de:	f7f5 f89b 	bl	8000618 <__aeabi_dmul>
 800b4e2:	4652      	mov	r2, sl
 800b4e4:	465b      	mov	r3, fp
 800b4e6:	f7f4 fee1 	bl	80002ac <__adddf3>
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4949      	ldr	r1, [pc, #292]	@ (800b614 <_strtod_l+0xaf4>)
 800b4ee:	4a4e      	ldr	r2, [pc, #312]	@ (800b628 <_strtod_l+0xb08>)
 800b4f0:	4019      	ands	r1, r3
 800b4f2:	4291      	cmp	r1, r2
 800b4f4:	4682      	mov	sl, r0
 800b4f6:	d942      	bls.n	800b57e <_strtod_l+0xa5e>
 800b4f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4fa:	4b47      	ldr	r3, [pc, #284]	@ (800b618 <_strtod_l+0xaf8>)
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d103      	bne.n	800b508 <_strtod_l+0x9e8>
 800b500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b502:	3301      	adds	r3, #1
 800b504:	f43f ad2b 	beq.w	800af5e <_strtod_l+0x43e>
 800b508:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b618 <_strtod_l+0xaf8>
 800b50c:	f04f 3aff 	mov.w	sl, #4294967295
 800b510:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b512:	9805      	ldr	r0, [sp, #20]
 800b514:	f7fe fe74 	bl	800a200 <_Bfree>
 800b518:	9805      	ldr	r0, [sp, #20]
 800b51a:	4649      	mov	r1, r9
 800b51c:	f7fe fe70 	bl	800a200 <_Bfree>
 800b520:	9805      	ldr	r0, [sp, #20]
 800b522:	4641      	mov	r1, r8
 800b524:	f7fe fe6c 	bl	800a200 <_Bfree>
 800b528:	9805      	ldr	r0, [sp, #20]
 800b52a:	4621      	mov	r1, r4
 800b52c:	f7fe fe68 	bl	800a200 <_Bfree>
 800b530:	e618      	b.n	800b164 <_strtod_l+0x644>
 800b532:	f1ba 0f01 	cmp.w	sl, #1
 800b536:	d103      	bne.n	800b540 <_strtod_l+0xa20>
 800b538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f43f ada5 	beq.w	800b08a <_strtod_l+0x56a>
 800b540:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b5f0 <_strtod_l+0xad0>
 800b544:	4f35      	ldr	r7, [pc, #212]	@ (800b61c <_strtod_l+0xafc>)
 800b546:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b54a:	2600      	movs	r6, #0
 800b54c:	e7b1      	b.n	800b4b2 <_strtod_l+0x992>
 800b54e:	4f34      	ldr	r7, [pc, #208]	@ (800b620 <_strtod_l+0xb00>)
 800b550:	2600      	movs	r6, #0
 800b552:	e7aa      	b.n	800b4aa <_strtod_l+0x98a>
 800b554:	4b32      	ldr	r3, [pc, #200]	@ (800b620 <_strtod_l+0xb00>)
 800b556:	4630      	mov	r0, r6
 800b558:	4639      	mov	r1, r7
 800b55a:	2200      	movs	r2, #0
 800b55c:	f7f5 f85c 	bl	8000618 <__aeabi_dmul>
 800b560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b562:	4606      	mov	r6, r0
 800b564:	460f      	mov	r7, r1
 800b566:	2b00      	cmp	r3, #0
 800b568:	d09f      	beq.n	800b4aa <_strtod_l+0x98a>
 800b56a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b56e:	e7a0      	b.n	800b4b2 <_strtod_l+0x992>
 800b570:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b5f8 <_strtod_l+0xad8>
 800b574:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b578:	ec57 6b17 	vmov	r6, r7, d7
 800b57c:	e799      	b.n	800b4b2 <_strtod_l+0x992>
 800b57e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b582:	9b08      	ldr	r3, [sp, #32]
 800b584:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1c1      	bne.n	800b510 <_strtod_l+0x9f0>
 800b58c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b590:	0d1b      	lsrs	r3, r3, #20
 800b592:	051b      	lsls	r3, r3, #20
 800b594:	429d      	cmp	r5, r3
 800b596:	d1bb      	bne.n	800b510 <_strtod_l+0x9f0>
 800b598:	4630      	mov	r0, r6
 800b59a:	4639      	mov	r1, r7
 800b59c:	f7f5 fb9c 	bl	8000cd8 <__aeabi_d2lz>
 800b5a0:	f7f5 f80c 	bl	80005bc <__aeabi_l2d>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	f7f4 fe7c 	bl	80002a8 <__aeabi_dsub>
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b5b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b5bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5be:	ea46 060a 	orr.w	r6, r6, sl
 800b5c2:	431e      	orrs	r6, r3
 800b5c4:	d06f      	beq.n	800b6a6 <_strtod_l+0xb86>
 800b5c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b600 <_strtod_l+0xae0>)
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f7f5 fa96 	bl	8000afc <__aeabi_dcmplt>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	f47f accf 	bne.w	800af74 <_strtod_l+0x454>
 800b5d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b608 <_strtod_l+0xae8>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5e0:	f7f5 faaa 	bl	8000b38 <__aeabi_dcmpgt>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d093      	beq.n	800b510 <_strtod_l+0x9f0>
 800b5e8:	e4c4      	b.n	800af74 <_strtod_l+0x454>
 800b5ea:	bf00      	nop
 800b5ec:	f3af 8000 	nop.w
 800b5f0:	00000000 	.word	0x00000000
 800b5f4:	bff00000 	.word	0xbff00000
 800b5f8:	00000000 	.word	0x00000000
 800b5fc:	3ff00000 	.word	0x3ff00000
 800b600:	94a03595 	.word	0x94a03595
 800b604:	3fdfffff 	.word	0x3fdfffff
 800b608:	35afe535 	.word	0x35afe535
 800b60c:	3fe00000 	.word	0x3fe00000
 800b610:	000fffff 	.word	0x000fffff
 800b614:	7ff00000 	.word	0x7ff00000
 800b618:	7fefffff 	.word	0x7fefffff
 800b61c:	3ff00000 	.word	0x3ff00000
 800b620:	3fe00000 	.word	0x3fe00000
 800b624:	7fe00000 	.word	0x7fe00000
 800b628:	7c9fffff 	.word	0x7c9fffff
 800b62c:	9b08      	ldr	r3, [sp, #32]
 800b62e:	b323      	cbz	r3, 800b67a <_strtod_l+0xb5a>
 800b630:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b634:	d821      	bhi.n	800b67a <_strtod_l+0xb5a>
 800b636:	a328      	add	r3, pc, #160	@ (adr r3, 800b6d8 <_strtod_l+0xbb8>)
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f5 fa66 	bl	8000b10 <__aeabi_dcmple>
 800b644:	b1a0      	cbz	r0, 800b670 <_strtod_l+0xb50>
 800b646:	4639      	mov	r1, r7
 800b648:	4630      	mov	r0, r6
 800b64a:	f7f5 fabd 	bl	8000bc8 <__aeabi_d2uiz>
 800b64e:	2801      	cmp	r0, #1
 800b650:	bf38      	it	cc
 800b652:	2001      	movcc	r0, #1
 800b654:	f7f4 ff66 	bl	8000524 <__aeabi_ui2d>
 800b658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b65a:	4606      	mov	r6, r0
 800b65c:	460f      	mov	r7, r1
 800b65e:	b9fb      	cbnz	r3, 800b6a0 <_strtod_l+0xb80>
 800b660:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b664:	9014      	str	r0, [sp, #80]	@ 0x50
 800b666:	9315      	str	r3, [sp, #84]	@ 0x54
 800b668:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b66c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b670:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b672:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b676:	1b5b      	subs	r3, r3, r5
 800b678:	9311      	str	r3, [sp, #68]	@ 0x44
 800b67a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b67e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b682:	f7ff f8f1 	bl	800a868 <__ulp>
 800b686:	4650      	mov	r0, sl
 800b688:	ec53 2b10 	vmov	r2, r3, d0
 800b68c:	4659      	mov	r1, fp
 800b68e:	f7f4 ffc3 	bl	8000618 <__aeabi_dmul>
 800b692:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b696:	f7f4 fe09 	bl	80002ac <__adddf3>
 800b69a:	4682      	mov	sl, r0
 800b69c:	468b      	mov	fp, r1
 800b69e:	e770      	b.n	800b582 <_strtod_l+0xa62>
 800b6a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b6a4:	e7e0      	b.n	800b668 <_strtod_l+0xb48>
 800b6a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6e0 <_strtod_l+0xbc0>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f7f5 fa26 	bl	8000afc <__aeabi_dcmplt>
 800b6b0:	e798      	b.n	800b5e4 <_strtod_l+0xac4>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b6b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6ba:	6013      	str	r3, [r2, #0]
 800b6bc:	f7ff ba6d 	b.w	800ab9a <_strtod_l+0x7a>
 800b6c0:	2a65      	cmp	r2, #101	@ 0x65
 800b6c2:	f43f ab66 	beq.w	800ad92 <_strtod_l+0x272>
 800b6c6:	2a45      	cmp	r2, #69	@ 0x45
 800b6c8:	f43f ab63 	beq.w	800ad92 <_strtod_l+0x272>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	f7ff bb9e 	b.w	800ae0e <_strtod_l+0x2ee>
 800b6d2:	bf00      	nop
 800b6d4:	f3af 8000 	nop.w
 800b6d8:	ffc00000 	.word	0xffc00000
 800b6dc:	41dfffff 	.word	0x41dfffff
 800b6e0:	94a03595 	.word	0x94a03595
 800b6e4:	3fcfffff 	.word	0x3fcfffff

0800b6e8 <_strtod_r>:
 800b6e8:	4b01      	ldr	r3, [pc, #4]	@ (800b6f0 <_strtod_r+0x8>)
 800b6ea:	f7ff ba19 	b.w	800ab20 <_strtod_l>
 800b6ee:	bf00      	nop
 800b6f0:	20000394 	.word	0x20000394

0800b6f4 <__ssputs_r>:
 800b6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f8:	688e      	ldr	r6, [r1, #8]
 800b6fa:	461f      	mov	r7, r3
 800b6fc:	42be      	cmp	r6, r7
 800b6fe:	680b      	ldr	r3, [r1, #0]
 800b700:	4682      	mov	sl, r0
 800b702:	460c      	mov	r4, r1
 800b704:	4690      	mov	r8, r2
 800b706:	d82d      	bhi.n	800b764 <__ssputs_r+0x70>
 800b708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b70c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b710:	d026      	beq.n	800b760 <__ssputs_r+0x6c>
 800b712:	6965      	ldr	r5, [r4, #20]
 800b714:	6909      	ldr	r1, [r1, #16]
 800b716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b71a:	eba3 0901 	sub.w	r9, r3, r1
 800b71e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b722:	1c7b      	adds	r3, r7, #1
 800b724:	444b      	add	r3, r9
 800b726:	106d      	asrs	r5, r5, #1
 800b728:	429d      	cmp	r5, r3
 800b72a:	bf38      	it	cc
 800b72c:	461d      	movcc	r5, r3
 800b72e:	0553      	lsls	r3, r2, #21
 800b730:	d527      	bpl.n	800b782 <__ssputs_r+0x8e>
 800b732:	4629      	mov	r1, r5
 800b734:	f7fe fc98 	bl	800a068 <_malloc_r>
 800b738:	4606      	mov	r6, r0
 800b73a:	b360      	cbz	r0, 800b796 <__ssputs_r+0xa2>
 800b73c:	6921      	ldr	r1, [r4, #16]
 800b73e:	464a      	mov	r2, r9
 800b740:	f7fd fdbb 	bl	80092ba <memcpy>
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b74a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b74e:	81a3      	strh	r3, [r4, #12]
 800b750:	6126      	str	r6, [r4, #16]
 800b752:	6165      	str	r5, [r4, #20]
 800b754:	444e      	add	r6, r9
 800b756:	eba5 0509 	sub.w	r5, r5, r9
 800b75a:	6026      	str	r6, [r4, #0]
 800b75c:	60a5      	str	r5, [r4, #8]
 800b75e:	463e      	mov	r6, r7
 800b760:	42be      	cmp	r6, r7
 800b762:	d900      	bls.n	800b766 <__ssputs_r+0x72>
 800b764:	463e      	mov	r6, r7
 800b766:	6820      	ldr	r0, [r4, #0]
 800b768:	4632      	mov	r2, r6
 800b76a:	4641      	mov	r1, r8
 800b76c:	f000 fb9c 	bl	800bea8 <memmove>
 800b770:	68a3      	ldr	r3, [r4, #8]
 800b772:	1b9b      	subs	r3, r3, r6
 800b774:	60a3      	str	r3, [r4, #8]
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	4433      	add	r3, r6
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	2000      	movs	r0, #0
 800b77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b782:	462a      	mov	r2, r5
 800b784:	f000 ff51 	bl	800c62a <_realloc_r>
 800b788:	4606      	mov	r6, r0
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d1e0      	bne.n	800b750 <__ssputs_r+0x5c>
 800b78e:	6921      	ldr	r1, [r4, #16]
 800b790:	4650      	mov	r0, sl
 800b792:	f7fe fbf5 	bl	8009f80 <_free_r>
 800b796:	230c      	movs	r3, #12
 800b798:	f8ca 3000 	str.w	r3, [sl]
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7a2:	81a3      	strh	r3, [r4, #12]
 800b7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a8:	e7e9      	b.n	800b77e <__ssputs_r+0x8a>
	...

0800b7ac <_svfiprintf_r>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	4698      	mov	r8, r3
 800b7b2:	898b      	ldrh	r3, [r1, #12]
 800b7b4:	061b      	lsls	r3, r3, #24
 800b7b6:	b09d      	sub	sp, #116	@ 0x74
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	4614      	mov	r4, r2
 800b7be:	d510      	bpl.n	800b7e2 <_svfiprintf_r+0x36>
 800b7c0:	690b      	ldr	r3, [r1, #16]
 800b7c2:	b973      	cbnz	r3, 800b7e2 <_svfiprintf_r+0x36>
 800b7c4:	2140      	movs	r1, #64	@ 0x40
 800b7c6:	f7fe fc4f 	bl	800a068 <_malloc_r>
 800b7ca:	6028      	str	r0, [r5, #0]
 800b7cc:	6128      	str	r0, [r5, #16]
 800b7ce:	b930      	cbnz	r0, 800b7de <_svfiprintf_r+0x32>
 800b7d0:	230c      	movs	r3, #12
 800b7d2:	603b      	str	r3, [r7, #0]
 800b7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d8:	b01d      	add	sp, #116	@ 0x74
 800b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7de:	2340      	movs	r3, #64	@ 0x40
 800b7e0:	616b      	str	r3, [r5, #20]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7e6:	2320      	movs	r3, #32
 800b7e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7f0:	2330      	movs	r3, #48	@ 0x30
 800b7f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b990 <_svfiprintf_r+0x1e4>
 800b7f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7fa:	f04f 0901 	mov.w	r9, #1
 800b7fe:	4623      	mov	r3, r4
 800b800:	469a      	mov	sl, r3
 800b802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b806:	b10a      	cbz	r2, 800b80c <_svfiprintf_r+0x60>
 800b808:	2a25      	cmp	r2, #37	@ 0x25
 800b80a:	d1f9      	bne.n	800b800 <_svfiprintf_r+0x54>
 800b80c:	ebba 0b04 	subs.w	fp, sl, r4
 800b810:	d00b      	beq.n	800b82a <_svfiprintf_r+0x7e>
 800b812:	465b      	mov	r3, fp
 800b814:	4622      	mov	r2, r4
 800b816:	4629      	mov	r1, r5
 800b818:	4638      	mov	r0, r7
 800b81a:	f7ff ff6b 	bl	800b6f4 <__ssputs_r>
 800b81e:	3001      	adds	r0, #1
 800b820:	f000 80a7 	beq.w	800b972 <_svfiprintf_r+0x1c6>
 800b824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b826:	445a      	add	r2, fp
 800b828:	9209      	str	r2, [sp, #36]	@ 0x24
 800b82a:	f89a 3000 	ldrb.w	r3, [sl]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f000 809f 	beq.w	800b972 <_svfiprintf_r+0x1c6>
 800b834:	2300      	movs	r3, #0
 800b836:	f04f 32ff 	mov.w	r2, #4294967295
 800b83a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b83e:	f10a 0a01 	add.w	sl, sl, #1
 800b842:	9304      	str	r3, [sp, #16]
 800b844:	9307      	str	r3, [sp, #28]
 800b846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b84a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b84c:	4654      	mov	r4, sl
 800b84e:	2205      	movs	r2, #5
 800b850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b854:	484e      	ldr	r0, [pc, #312]	@ (800b990 <_svfiprintf_r+0x1e4>)
 800b856:	f7f4 fccb 	bl	80001f0 <memchr>
 800b85a:	9a04      	ldr	r2, [sp, #16]
 800b85c:	b9d8      	cbnz	r0, 800b896 <_svfiprintf_r+0xea>
 800b85e:	06d0      	lsls	r0, r2, #27
 800b860:	bf44      	itt	mi
 800b862:	2320      	movmi	r3, #32
 800b864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b868:	0711      	lsls	r1, r2, #28
 800b86a:	bf44      	itt	mi
 800b86c:	232b      	movmi	r3, #43	@ 0x2b
 800b86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b872:	f89a 3000 	ldrb.w	r3, [sl]
 800b876:	2b2a      	cmp	r3, #42	@ 0x2a
 800b878:	d015      	beq.n	800b8a6 <_svfiprintf_r+0xfa>
 800b87a:	9a07      	ldr	r2, [sp, #28]
 800b87c:	4654      	mov	r4, sl
 800b87e:	2000      	movs	r0, #0
 800b880:	f04f 0c0a 	mov.w	ip, #10
 800b884:	4621      	mov	r1, r4
 800b886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b88a:	3b30      	subs	r3, #48	@ 0x30
 800b88c:	2b09      	cmp	r3, #9
 800b88e:	d94b      	bls.n	800b928 <_svfiprintf_r+0x17c>
 800b890:	b1b0      	cbz	r0, 800b8c0 <_svfiprintf_r+0x114>
 800b892:	9207      	str	r2, [sp, #28]
 800b894:	e014      	b.n	800b8c0 <_svfiprintf_r+0x114>
 800b896:	eba0 0308 	sub.w	r3, r0, r8
 800b89a:	fa09 f303 	lsl.w	r3, r9, r3
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	9304      	str	r3, [sp, #16]
 800b8a2:	46a2      	mov	sl, r4
 800b8a4:	e7d2      	b.n	800b84c <_svfiprintf_r+0xa0>
 800b8a6:	9b03      	ldr	r3, [sp, #12]
 800b8a8:	1d19      	adds	r1, r3, #4
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	9103      	str	r1, [sp, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	bfbb      	ittet	lt
 800b8b2:	425b      	neglt	r3, r3
 800b8b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8b8:	9307      	strge	r3, [sp, #28]
 800b8ba:	9307      	strlt	r3, [sp, #28]
 800b8bc:	bfb8      	it	lt
 800b8be:	9204      	strlt	r2, [sp, #16]
 800b8c0:	7823      	ldrb	r3, [r4, #0]
 800b8c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8c4:	d10a      	bne.n	800b8dc <_svfiprintf_r+0x130>
 800b8c6:	7863      	ldrb	r3, [r4, #1]
 800b8c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8ca:	d132      	bne.n	800b932 <_svfiprintf_r+0x186>
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	1d1a      	adds	r2, r3, #4
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	9203      	str	r2, [sp, #12]
 800b8d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8d8:	3402      	adds	r4, #2
 800b8da:	9305      	str	r3, [sp, #20]
 800b8dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9a0 <_svfiprintf_r+0x1f4>
 800b8e0:	7821      	ldrb	r1, [r4, #0]
 800b8e2:	2203      	movs	r2, #3
 800b8e4:	4650      	mov	r0, sl
 800b8e6:	f7f4 fc83 	bl	80001f0 <memchr>
 800b8ea:	b138      	cbz	r0, 800b8fc <_svfiprintf_r+0x150>
 800b8ec:	9b04      	ldr	r3, [sp, #16]
 800b8ee:	eba0 000a 	sub.w	r0, r0, sl
 800b8f2:	2240      	movs	r2, #64	@ 0x40
 800b8f4:	4082      	lsls	r2, r0
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	3401      	adds	r4, #1
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b900:	4824      	ldr	r0, [pc, #144]	@ (800b994 <_svfiprintf_r+0x1e8>)
 800b902:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b906:	2206      	movs	r2, #6
 800b908:	f7f4 fc72 	bl	80001f0 <memchr>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d036      	beq.n	800b97e <_svfiprintf_r+0x1d2>
 800b910:	4b21      	ldr	r3, [pc, #132]	@ (800b998 <_svfiprintf_r+0x1ec>)
 800b912:	bb1b      	cbnz	r3, 800b95c <_svfiprintf_r+0x1b0>
 800b914:	9b03      	ldr	r3, [sp, #12]
 800b916:	3307      	adds	r3, #7
 800b918:	f023 0307 	bic.w	r3, r3, #7
 800b91c:	3308      	adds	r3, #8
 800b91e:	9303      	str	r3, [sp, #12]
 800b920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b922:	4433      	add	r3, r6
 800b924:	9309      	str	r3, [sp, #36]	@ 0x24
 800b926:	e76a      	b.n	800b7fe <_svfiprintf_r+0x52>
 800b928:	fb0c 3202 	mla	r2, ip, r2, r3
 800b92c:	460c      	mov	r4, r1
 800b92e:	2001      	movs	r0, #1
 800b930:	e7a8      	b.n	800b884 <_svfiprintf_r+0xd8>
 800b932:	2300      	movs	r3, #0
 800b934:	3401      	adds	r4, #1
 800b936:	9305      	str	r3, [sp, #20]
 800b938:	4619      	mov	r1, r3
 800b93a:	f04f 0c0a 	mov.w	ip, #10
 800b93e:	4620      	mov	r0, r4
 800b940:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b944:	3a30      	subs	r2, #48	@ 0x30
 800b946:	2a09      	cmp	r2, #9
 800b948:	d903      	bls.n	800b952 <_svfiprintf_r+0x1a6>
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d0c6      	beq.n	800b8dc <_svfiprintf_r+0x130>
 800b94e:	9105      	str	r1, [sp, #20]
 800b950:	e7c4      	b.n	800b8dc <_svfiprintf_r+0x130>
 800b952:	fb0c 2101 	mla	r1, ip, r1, r2
 800b956:	4604      	mov	r4, r0
 800b958:	2301      	movs	r3, #1
 800b95a:	e7f0      	b.n	800b93e <_svfiprintf_r+0x192>
 800b95c:	ab03      	add	r3, sp, #12
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	462a      	mov	r2, r5
 800b962:	4b0e      	ldr	r3, [pc, #56]	@ (800b99c <_svfiprintf_r+0x1f0>)
 800b964:	a904      	add	r1, sp, #16
 800b966:	4638      	mov	r0, r7
 800b968:	f7fc fd24 	bl	80083b4 <_printf_float>
 800b96c:	1c42      	adds	r2, r0, #1
 800b96e:	4606      	mov	r6, r0
 800b970:	d1d6      	bne.n	800b920 <_svfiprintf_r+0x174>
 800b972:	89ab      	ldrh	r3, [r5, #12]
 800b974:	065b      	lsls	r3, r3, #25
 800b976:	f53f af2d 	bmi.w	800b7d4 <_svfiprintf_r+0x28>
 800b97a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b97c:	e72c      	b.n	800b7d8 <_svfiprintf_r+0x2c>
 800b97e:	ab03      	add	r3, sp, #12
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	462a      	mov	r2, r5
 800b984:	4b05      	ldr	r3, [pc, #20]	@ (800b99c <_svfiprintf_r+0x1f0>)
 800b986:	a904      	add	r1, sp, #16
 800b988:	4638      	mov	r0, r7
 800b98a:	f7fc ffab 	bl	80088e4 <_printf_i>
 800b98e:	e7ed      	b.n	800b96c <_svfiprintf_r+0x1c0>
 800b990:	0800eae0 	.word	0x0800eae0
 800b994:	0800eaea 	.word	0x0800eaea
 800b998:	080083b5 	.word	0x080083b5
 800b99c:	0800b6f5 	.word	0x0800b6f5
 800b9a0:	0800eae6 	.word	0x0800eae6

0800b9a4 <__sfputc_r>:
 800b9a4:	6893      	ldr	r3, [r2, #8]
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	b410      	push	{r4}
 800b9ac:	6093      	str	r3, [r2, #8]
 800b9ae:	da08      	bge.n	800b9c2 <__sfputc_r+0x1e>
 800b9b0:	6994      	ldr	r4, [r2, #24]
 800b9b2:	42a3      	cmp	r3, r4
 800b9b4:	db01      	blt.n	800b9ba <__sfputc_r+0x16>
 800b9b6:	290a      	cmp	r1, #10
 800b9b8:	d103      	bne.n	800b9c2 <__sfputc_r+0x1e>
 800b9ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9be:	f000 b9df 	b.w	800bd80 <__swbuf_r>
 800b9c2:	6813      	ldr	r3, [r2, #0]
 800b9c4:	1c58      	adds	r0, r3, #1
 800b9c6:	6010      	str	r0, [r2, #0]
 800b9c8:	7019      	strb	r1, [r3, #0]
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <__sfputs_r>:
 800b9d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	460f      	mov	r7, r1
 800b9d8:	4614      	mov	r4, r2
 800b9da:	18d5      	adds	r5, r2, r3
 800b9dc:	42ac      	cmp	r4, r5
 800b9de:	d101      	bne.n	800b9e4 <__sfputs_r+0x12>
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	e007      	b.n	800b9f4 <__sfputs_r+0x22>
 800b9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e8:	463a      	mov	r2, r7
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f7ff ffda 	bl	800b9a4 <__sfputc_r>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d1f3      	bne.n	800b9dc <__sfputs_r+0xa>
 800b9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9f8 <_vfiprintf_r>:
 800b9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	460d      	mov	r5, r1
 800b9fe:	b09d      	sub	sp, #116	@ 0x74
 800ba00:	4614      	mov	r4, r2
 800ba02:	4698      	mov	r8, r3
 800ba04:	4606      	mov	r6, r0
 800ba06:	b118      	cbz	r0, 800ba10 <_vfiprintf_r+0x18>
 800ba08:	6a03      	ldr	r3, [r0, #32]
 800ba0a:	b90b      	cbnz	r3, 800ba10 <_vfiprintf_r+0x18>
 800ba0c:	f7fd fb2a 	bl	8009064 <__sinit>
 800ba10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba12:	07d9      	lsls	r1, r3, #31
 800ba14:	d405      	bmi.n	800ba22 <_vfiprintf_r+0x2a>
 800ba16:	89ab      	ldrh	r3, [r5, #12]
 800ba18:	059a      	lsls	r2, r3, #22
 800ba1a:	d402      	bmi.n	800ba22 <_vfiprintf_r+0x2a>
 800ba1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba1e:	f7fd fc4a 	bl	80092b6 <__retarget_lock_acquire_recursive>
 800ba22:	89ab      	ldrh	r3, [r5, #12]
 800ba24:	071b      	lsls	r3, r3, #28
 800ba26:	d501      	bpl.n	800ba2c <_vfiprintf_r+0x34>
 800ba28:	692b      	ldr	r3, [r5, #16]
 800ba2a:	b99b      	cbnz	r3, 800ba54 <_vfiprintf_r+0x5c>
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f000 f9e4 	bl	800bdfc <__swsetup_r>
 800ba34:	b170      	cbz	r0, 800ba54 <_vfiprintf_r+0x5c>
 800ba36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba38:	07dc      	lsls	r4, r3, #31
 800ba3a:	d504      	bpl.n	800ba46 <_vfiprintf_r+0x4e>
 800ba3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba40:	b01d      	add	sp, #116	@ 0x74
 800ba42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba46:	89ab      	ldrh	r3, [r5, #12]
 800ba48:	0598      	lsls	r0, r3, #22
 800ba4a:	d4f7      	bmi.n	800ba3c <_vfiprintf_r+0x44>
 800ba4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba4e:	f7fd fc33 	bl	80092b8 <__retarget_lock_release_recursive>
 800ba52:	e7f3      	b.n	800ba3c <_vfiprintf_r+0x44>
 800ba54:	2300      	movs	r3, #0
 800ba56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba58:	2320      	movs	r3, #32
 800ba5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba62:	2330      	movs	r3, #48	@ 0x30
 800ba64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc14 <_vfiprintf_r+0x21c>
 800ba68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba6c:	f04f 0901 	mov.w	r9, #1
 800ba70:	4623      	mov	r3, r4
 800ba72:	469a      	mov	sl, r3
 800ba74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba78:	b10a      	cbz	r2, 800ba7e <_vfiprintf_r+0x86>
 800ba7a:	2a25      	cmp	r2, #37	@ 0x25
 800ba7c:	d1f9      	bne.n	800ba72 <_vfiprintf_r+0x7a>
 800ba7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ba82:	d00b      	beq.n	800ba9c <_vfiprintf_r+0xa4>
 800ba84:	465b      	mov	r3, fp
 800ba86:	4622      	mov	r2, r4
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7ff ffa1 	bl	800b9d2 <__sfputs_r>
 800ba90:	3001      	adds	r0, #1
 800ba92:	f000 80a7 	beq.w	800bbe4 <_vfiprintf_r+0x1ec>
 800ba96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba98:	445a      	add	r2, fp
 800ba9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba9c:	f89a 3000 	ldrb.w	r3, [sl]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 809f 	beq.w	800bbe4 <_vfiprintf_r+0x1ec>
 800baa6:	2300      	movs	r3, #0
 800baa8:	f04f 32ff 	mov.w	r2, #4294967295
 800baac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bab0:	f10a 0a01 	add.w	sl, sl, #1
 800bab4:	9304      	str	r3, [sp, #16]
 800bab6:	9307      	str	r3, [sp, #28]
 800bab8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800babc:	931a      	str	r3, [sp, #104]	@ 0x68
 800babe:	4654      	mov	r4, sl
 800bac0:	2205      	movs	r2, #5
 800bac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac6:	4853      	ldr	r0, [pc, #332]	@ (800bc14 <_vfiprintf_r+0x21c>)
 800bac8:	f7f4 fb92 	bl	80001f0 <memchr>
 800bacc:	9a04      	ldr	r2, [sp, #16]
 800bace:	b9d8      	cbnz	r0, 800bb08 <_vfiprintf_r+0x110>
 800bad0:	06d1      	lsls	r1, r2, #27
 800bad2:	bf44      	itt	mi
 800bad4:	2320      	movmi	r3, #32
 800bad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bada:	0713      	lsls	r3, r2, #28
 800badc:	bf44      	itt	mi
 800bade:	232b      	movmi	r3, #43	@ 0x2b
 800bae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bae4:	f89a 3000 	ldrb.w	r3, [sl]
 800bae8:	2b2a      	cmp	r3, #42	@ 0x2a
 800baea:	d015      	beq.n	800bb18 <_vfiprintf_r+0x120>
 800baec:	9a07      	ldr	r2, [sp, #28]
 800baee:	4654      	mov	r4, sl
 800baf0:	2000      	movs	r0, #0
 800baf2:	f04f 0c0a 	mov.w	ip, #10
 800baf6:	4621      	mov	r1, r4
 800baf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bafc:	3b30      	subs	r3, #48	@ 0x30
 800bafe:	2b09      	cmp	r3, #9
 800bb00:	d94b      	bls.n	800bb9a <_vfiprintf_r+0x1a2>
 800bb02:	b1b0      	cbz	r0, 800bb32 <_vfiprintf_r+0x13a>
 800bb04:	9207      	str	r2, [sp, #28]
 800bb06:	e014      	b.n	800bb32 <_vfiprintf_r+0x13a>
 800bb08:	eba0 0308 	sub.w	r3, r0, r8
 800bb0c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb10:	4313      	orrs	r3, r2
 800bb12:	9304      	str	r3, [sp, #16]
 800bb14:	46a2      	mov	sl, r4
 800bb16:	e7d2      	b.n	800babe <_vfiprintf_r+0xc6>
 800bb18:	9b03      	ldr	r3, [sp, #12]
 800bb1a:	1d19      	adds	r1, r3, #4
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	9103      	str	r1, [sp, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	bfbb      	ittet	lt
 800bb24:	425b      	neglt	r3, r3
 800bb26:	f042 0202 	orrlt.w	r2, r2, #2
 800bb2a:	9307      	strge	r3, [sp, #28]
 800bb2c:	9307      	strlt	r3, [sp, #28]
 800bb2e:	bfb8      	it	lt
 800bb30:	9204      	strlt	r2, [sp, #16]
 800bb32:	7823      	ldrb	r3, [r4, #0]
 800bb34:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb36:	d10a      	bne.n	800bb4e <_vfiprintf_r+0x156>
 800bb38:	7863      	ldrb	r3, [r4, #1]
 800bb3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb3c:	d132      	bne.n	800bba4 <_vfiprintf_r+0x1ac>
 800bb3e:	9b03      	ldr	r3, [sp, #12]
 800bb40:	1d1a      	adds	r2, r3, #4
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	9203      	str	r2, [sp, #12]
 800bb46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb4a:	3402      	adds	r4, #2
 800bb4c:	9305      	str	r3, [sp, #20]
 800bb4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc24 <_vfiprintf_r+0x22c>
 800bb52:	7821      	ldrb	r1, [r4, #0]
 800bb54:	2203      	movs	r2, #3
 800bb56:	4650      	mov	r0, sl
 800bb58:	f7f4 fb4a 	bl	80001f0 <memchr>
 800bb5c:	b138      	cbz	r0, 800bb6e <_vfiprintf_r+0x176>
 800bb5e:	9b04      	ldr	r3, [sp, #16]
 800bb60:	eba0 000a 	sub.w	r0, r0, sl
 800bb64:	2240      	movs	r2, #64	@ 0x40
 800bb66:	4082      	lsls	r2, r0
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	3401      	adds	r4, #1
 800bb6c:	9304      	str	r3, [sp, #16]
 800bb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb72:	4829      	ldr	r0, [pc, #164]	@ (800bc18 <_vfiprintf_r+0x220>)
 800bb74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb78:	2206      	movs	r2, #6
 800bb7a:	f7f4 fb39 	bl	80001f0 <memchr>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d03f      	beq.n	800bc02 <_vfiprintf_r+0x20a>
 800bb82:	4b26      	ldr	r3, [pc, #152]	@ (800bc1c <_vfiprintf_r+0x224>)
 800bb84:	bb1b      	cbnz	r3, 800bbce <_vfiprintf_r+0x1d6>
 800bb86:	9b03      	ldr	r3, [sp, #12]
 800bb88:	3307      	adds	r3, #7
 800bb8a:	f023 0307 	bic.w	r3, r3, #7
 800bb8e:	3308      	adds	r3, #8
 800bb90:	9303      	str	r3, [sp, #12]
 800bb92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb94:	443b      	add	r3, r7
 800bb96:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb98:	e76a      	b.n	800ba70 <_vfiprintf_r+0x78>
 800bb9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb9e:	460c      	mov	r4, r1
 800bba0:	2001      	movs	r0, #1
 800bba2:	e7a8      	b.n	800baf6 <_vfiprintf_r+0xfe>
 800bba4:	2300      	movs	r3, #0
 800bba6:	3401      	adds	r4, #1
 800bba8:	9305      	str	r3, [sp, #20]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	f04f 0c0a 	mov.w	ip, #10
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbb6:	3a30      	subs	r2, #48	@ 0x30
 800bbb8:	2a09      	cmp	r2, #9
 800bbba:	d903      	bls.n	800bbc4 <_vfiprintf_r+0x1cc>
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d0c6      	beq.n	800bb4e <_vfiprintf_r+0x156>
 800bbc0:	9105      	str	r1, [sp, #20]
 800bbc2:	e7c4      	b.n	800bb4e <_vfiprintf_r+0x156>
 800bbc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbc8:	4604      	mov	r4, r0
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e7f0      	b.n	800bbb0 <_vfiprintf_r+0x1b8>
 800bbce:	ab03      	add	r3, sp, #12
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	462a      	mov	r2, r5
 800bbd4:	4b12      	ldr	r3, [pc, #72]	@ (800bc20 <_vfiprintf_r+0x228>)
 800bbd6:	a904      	add	r1, sp, #16
 800bbd8:	4630      	mov	r0, r6
 800bbda:	f7fc fbeb 	bl	80083b4 <_printf_float>
 800bbde:	4607      	mov	r7, r0
 800bbe0:	1c78      	adds	r0, r7, #1
 800bbe2:	d1d6      	bne.n	800bb92 <_vfiprintf_r+0x19a>
 800bbe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbe6:	07d9      	lsls	r1, r3, #31
 800bbe8:	d405      	bmi.n	800bbf6 <_vfiprintf_r+0x1fe>
 800bbea:	89ab      	ldrh	r3, [r5, #12]
 800bbec:	059a      	lsls	r2, r3, #22
 800bbee:	d402      	bmi.n	800bbf6 <_vfiprintf_r+0x1fe>
 800bbf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbf2:	f7fd fb61 	bl	80092b8 <__retarget_lock_release_recursive>
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	065b      	lsls	r3, r3, #25
 800bbfa:	f53f af1f 	bmi.w	800ba3c <_vfiprintf_r+0x44>
 800bbfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc00:	e71e      	b.n	800ba40 <_vfiprintf_r+0x48>
 800bc02:	ab03      	add	r3, sp, #12
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	462a      	mov	r2, r5
 800bc08:	4b05      	ldr	r3, [pc, #20]	@ (800bc20 <_vfiprintf_r+0x228>)
 800bc0a:	a904      	add	r1, sp, #16
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7fc fe69 	bl	80088e4 <_printf_i>
 800bc12:	e7e4      	b.n	800bbde <_vfiprintf_r+0x1e6>
 800bc14:	0800eae0 	.word	0x0800eae0
 800bc18:	0800eaea 	.word	0x0800eaea
 800bc1c:	080083b5 	.word	0x080083b5
 800bc20:	0800b9d3 	.word	0x0800b9d3
 800bc24:	0800eae6 	.word	0x0800eae6

0800bc28 <__sflush_r>:
 800bc28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc30:	0716      	lsls	r6, r2, #28
 800bc32:	4605      	mov	r5, r0
 800bc34:	460c      	mov	r4, r1
 800bc36:	d454      	bmi.n	800bce2 <__sflush_r+0xba>
 800bc38:	684b      	ldr	r3, [r1, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	dc02      	bgt.n	800bc44 <__sflush_r+0x1c>
 800bc3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	dd48      	ble.n	800bcd6 <__sflush_r+0xae>
 800bc44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc46:	2e00      	cmp	r6, #0
 800bc48:	d045      	beq.n	800bcd6 <__sflush_r+0xae>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc50:	682f      	ldr	r7, [r5, #0]
 800bc52:	6a21      	ldr	r1, [r4, #32]
 800bc54:	602b      	str	r3, [r5, #0]
 800bc56:	d030      	beq.n	800bcba <__sflush_r+0x92>
 800bc58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	0759      	lsls	r1, r3, #29
 800bc5e:	d505      	bpl.n	800bc6c <__sflush_r+0x44>
 800bc60:	6863      	ldr	r3, [r4, #4]
 800bc62:	1ad2      	subs	r2, r2, r3
 800bc64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc66:	b10b      	cbz	r3, 800bc6c <__sflush_r+0x44>
 800bc68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc6a:	1ad2      	subs	r2, r2, r3
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc70:	6a21      	ldr	r1, [r4, #32]
 800bc72:	4628      	mov	r0, r5
 800bc74:	47b0      	blx	r6
 800bc76:	1c43      	adds	r3, r0, #1
 800bc78:	89a3      	ldrh	r3, [r4, #12]
 800bc7a:	d106      	bne.n	800bc8a <__sflush_r+0x62>
 800bc7c:	6829      	ldr	r1, [r5, #0]
 800bc7e:	291d      	cmp	r1, #29
 800bc80:	d82b      	bhi.n	800bcda <__sflush_r+0xb2>
 800bc82:	4a2a      	ldr	r2, [pc, #168]	@ (800bd2c <__sflush_r+0x104>)
 800bc84:	410a      	asrs	r2, r1
 800bc86:	07d6      	lsls	r6, r2, #31
 800bc88:	d427      	bmi.n	800bcda <__sflush_r+0xb2>
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	6062      	str	r2, [r4, #4]
 800bc8e:	04d9      	lsls	r1, r3, #19
 800bc90:	6922      	ldr	r2, [r4, #16]
 800bc92:	6022      	str	r2, [r4, #0]
 800bc94:	d504      	bpl.n	800bca0 <__sflush_r+0x78>
 800bc96:	1c42      	adds	r2, r0, #1
 800bc98:	d101      	bne.n	800bc9e <__sflush_r+0x76>
 800bc9a:	682b      	ldr	r3, [r5, #0]
 800bc9c:	b903      	cbnz	r3, 800bca0 <__sflush_r+0x78>
 800bc9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bca2:	602f      	str	r7, [r5, #0]
 800bca4:	b1b9      	cbz	r1, 800bcd6 <__sflush_r+0xae>
 800bca6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcaa:	4299      	cmp	r1, r3
 800bcac:	d002      	beq.n	800bcb4 <__sflush_r+0x8c>
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f7fe f966 	bl	8009f80 <_free_r>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcb8:	e00d      	b.n	800bcd6 <__sflush_r+0xae>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	47b0      	blx	r6
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	1c50      	adds	r0, r2, #1
 800bcc4:	d1c9      	bne.n	800bc5a <__sflush_r+0x32>
 800bcc6:	682b      	ldr	r3, [r5, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d0c6      	beq.n	800bc5a <__sflush_r+0x32>
 800bccc:	2b1d      	cmp	r3, #29
 800bcce:	d001      	beq.n	800bcd4 <__sflush_r+0xac>
 800bcd0:	2b16      	cmp	r3, #22
 800bcd2:	d11e      	bne.n	800bd12 <__sflush_r+0xea>
 800bcd4:	602f      	str	r7, [r5, #0]
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	e022      	b.n	800bd20 <__sflush_r+0xf8>
 800bcda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcde:	b21b      	sxth	r3, r3
 800bce0:	e01b      	b.n	800bd1a <__sflush_r+0xf2>
 800bce2:	690f      	ldr	r7, [r1, #16]
 800bce4:	2f00      	cmp	r7, #0
 800bce6:	d0f6      	beq.n	800bcd6 <__sflush_r+0xae>
 800bce8:	0793      	lsls	r3, r2, #30
 800bcea:	680e      	ldr	r6, [r1, #0]
 800bcec:	bf08      	it	eq
 800bcee:	694b      	ldreq	r3, [r1, #20]
 800bcf0:	600f      	str	r7, [r1, #0]
 800bcf2:	bf18      	it	ne
 800bcf4:	2300      	movne	r3, #0
 800bcf6:	eba6 0807 	sub.w	r8, r6, r7
 800bcfa:	608b      	str	r3, [r1, #8]
 800bcfc:	f1b8 0f00 	cmp.w	r8, #0
 800bd00:	dde9      	ble.n	800bcd6 <__sflush_r+0xae>
 800bd02:	6a21      	ldr	r1, [r4, #32]
 800bd04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd06:	4643      	mov	r3, r8
 800bd08:	463a      	mov	r2, r7
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	47b0      	blx	r6
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	dc08      	bgt.n	800bd24 <__sflush_r+0xfc>
 800bd12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd1a:	81a3      	strh	r3, [r4, #12]
 800bd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd24:	4407      	add	r7, r0
 800bd26:	eba8 0800 	sub.w	r8, r8, r0
 800bd2a:	e7e7      	b.n	800bcfc <__sflush_r+0xd4>
 800bd2c:	dfbffffe 	.word	0xdfbffffe

0800bd30 <_fflush_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	690b      	ldr	r3, [r1, #16]
 800bd34:	4605      	mov	r5, r0
 800bd36:	460c      	mov	r4, r1
 800bd38:	b913      	cbnz	r3, 800bd40 <_fflush_r+0x10>
 800bd3a:	2500      	movs	r5, #0
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	bd38      	pop	{r3, r4, r5, pc}
 800bd40:	b118      	cbz	r0, 800bd4a <_fflush_r+0x1a>
 800bd42:	6a03      	ldr	r3, [r0, #32]
 800bd44:	b90b      	cbnz	r3, 800bd4a <_fflush_r+0x1a>
 800bd46:	f7fd f98d 	bl	8009064 <__sinit>
 800bd4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d0f3      	beq.n	800bd3a <_fflush_r+0xa>
 800bd52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd54:	07d0      	lsls	r0, r2, #31
 800bd56:	d404      	bmi.n	800bd62 <_fflush_r+0x32>
 800bd58:	0599      	lsls	r1, r3, #22
 800bd5a:	d402      	bmi.n	800bd62 <_fflush_r+0x32>
 800bd5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd5e:	f7fd faaa 	bl	80092b6 <__retarget_lock_acquire_recursive>
 800bd62:	4628      	mov	r0, r5
 800bd64:	4621      	mov	r1, r4
 800bd66:	f7ff ff5f 	bl	800bc28 <__sflush_r>
 800bd6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd6c:	07da      	lsls	r2, r3, #31
 800bd6e:	4605      	mov	r5, r0
 800bd70:	d4e4      	bmi.n	800bd3c <_fflush_r+0xc>
 800bd72:	89a3      	ldrh	r3, [r4, #12]
 800bd74:	059b      	lsls	r3, r3, #22
 800bd76:	d4e1      	bmi.n	800bd3c <_fflush_r+0xc>
 800bd78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd7a:	f7fd fa9d 	bl	80092b8 <__retarget_lock_release_recursive>
 800bd7e:	e7dd      	b.n	800bd3c <_fflush_r+0xc>

0800bd80 <__swbuf_r>:
 800bd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd82:	460e      	mov	r6, r1
 800bd84:	4614      	mov	r4, r2
 800bd86:	4605      	mov	r5, r0
 800bd88:	b118      	cbz	r0, 800bd92 <__swbuf_r+0x12>
 800bd8a:	6a03      	ldr	r3, [r0, #32]
 800bd8c:	b90b      	cbnz	r3, 800bd92 <__swbuf_r+0x12>
 800bd8e:	f7fd f969 	bl	8009064 <__sinit>
 800bd92:	69a3      	ldr	r3, [r4, #24]
 800bd94:	60a3      	str	r3, [r4, #8]
 800bd96:	89a3      	ldrh	r3, [r4, #12]
 800bd98:	071a      	lsls	r2, r3, #28
 800bd9a:	d501      	bpl.n	800bda0 <__swbuf_r+0x20>
 800bd9c:	6923      	ldr	r3, [r4, #16]
 800bd9e:	b943      	cbnz	r3, 800bdb2 <__swbuf_r+0x32>
 800bda0:	4621      	mov	r1, r4
 800bda2:	4628      	mov	r0, r5
 800bda4:	f000 f82a 	bl	800bdfc <__swsetup_r>
 800bda8:	b118      	cbz	r0, 800bdb2 <__swbuf_r+0x32>
 800bdaa:	f04f 37ff 	mov.w	r7, #4294967295
 800bdae:	4638      	mov	r0, r7
 800bdb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdb2:	6823      	ldr	r3, [r4, #0]
 800bdb4:	6922      	ldr	r2, [r4, #16]
 800bdb6:	1a98      	subs	r0, r3, r2
 800bdb8:	6963      	ldr	r3, [r4, #20]
 800bdba:	b2f6      	uxtb	r6, r6
 800bdbc:	4283      	cmp	r3, r0
 800bdbe:	4637      	mov	r7, r6
 800bdc0:	dc05      	bgt.n	800bdce <__swbuf_r+0x4e>
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	f7ff ffb3 	bl	800bd30 <_fflush_r>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d1ed      	bne.n	800bdaa <__swbuf_r+0x2a>
 800bdce:	68a3      	ldr	r3, [r4, #8]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	60a3      	str	r3, [r4, #8]
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	6022      	str	r2, [r4, #0]
 800bdda:	701e      	strb	r6, [r3, #0]
 800bddc:	6962      	ldr	r2, [r4, #20]
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d004      	beq.n	800bdee <__swbuf_r+0x6e>
 800bde4:	89a3      	ldrh	r3, [r4, #12]
 800bde6:	07db      	lsls	r3, r3, #31
 800bde8:	d5e1      	bpl.n	800bdae <__swbuf_r+0x2e>
 800bdea:	2e0a      	cmp	r6, #10
 800bdec:	d1df      	bne.n	800bdae <__swbuf_r+0x2e>
 800bdee:	4621      	mov	r1, r4
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f7ff ff9d 	bl	800bd30 <_fflush_r>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d0d9      	beq.n	800bdae <__swbuf_r+0x2e>
 800bdfa:	e7d6      	b.n	800bdaa <__swbuf_r+0x2a>

0800bdfc <__swsetup_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4b29      	ldr	r3, [pc, #164]	@ (800bea4 <__swsetup_r+0xa8>)
 800be00:	4605      	mov	r5, r0
 800be02:	6818      	ldr	r0, [r3, #0]
 800be04:	460c      	mov	r4, r1
 800be06:	b118      	cbz	r0, 800be10 <__swsetup_r+0x14>
 800be08:	6a03      	ldr	r3, [r0, #32]
 800be0a:	b90b      	cbnz	r3, 800be10 <__swsetup_r+0x14>
 800be0c:	f7fd f92a 	bl	8009064 <__sinit>
 800be10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be14:	0719      	lsls	r1, r3, #28
 800be16:	d422      	bmi.n	800be5e <__swsetup_r+0x62>
 800be18:	06da      	lsls	r2, r3, #27
 800be1a:	d407      	bmi.n	800be2c <__swsetup_r+0x30>
 800be1c:	2209      	movs	r2, #9
 800be1e:	602a      	str	r2, [r5, #0]
 800be20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be24:	81a3      	strh	r3, [r4, #12]
 800be26:	f04f 30ff 	mov.w	r0, #4294967295
 800be2a:	e033      	b.n	800be94 <__swsetup_r+0x98>
 800be2c:	0758      	lsls	r0, r3, #29
 800be2e:	d512      	bpl.n	800be56 <__swsetup_r+0x5a>
 800be30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be32:	b141      	cbz	r1, 800be46 <__swsetup_r+0x4a>
 800be34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be38:	4299      	cmp	r1, r3
 800be3a:	d002      	beq.n	800be42 <__swsetup_r+0x46>
 800be3c:	4628      	mov	r0, r5
 800be3e:	f7fe f89f 	bl	8009f80 <_free_r>
 800be42:	2300      	movs	r3, #0
 800be44:	6363      	str	r3, [r4, #52]	@ 0x34
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be4c:	81a3      	strh	r3, [r4, #12]
 800be4e:	2300      	movs	r3, #0
 800be50:	6063      	str	r3, [r4, #4]
 800be52:	6923      	ldr	r3, [r4, #16]
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	89a3      	ldrh	r3, [r4, #12]
 800be58:	f043 0308 	orr.w	r3, r3, #8
 800be5c:	81a3      	strh	r3, [r4, #12]
 800be5e:	6923      	ldr	r3, [r4, #16]
 800be60:	b94b      	cbnz	r3, 800be76 <__swsetup_r+0x7a>
 800be62:	89a3      	ldrh	r3, [r4, #12]
 800be64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be6c:	d003      	beq.n	800be76 <__swsetup_r+0x7a>
 800be6e:	4621      	mov	r1, r4
 800be70:	4628      	mov	r0, r5
 800be72:	f000 fc4d 	bl	800c710 <__smakebuf_r>
 800be76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7a:	f013 0201 	ands.w	r2, r3, #1
 800be7e:	d00a      	beq.n	800be96 <__swsetup_r+0x9a>
 800be80:	2200      	movs	r2, #0
 800be82:	60a2      	str	r2, [r4, #8]
 800be84:	6962      	ldr	r2, [r4, #20]
 800be86:	4252      	negs	r2, r2
 800be88:	61a2      	str	r2, [r4, #24]
 800be8a:	6922      	ldr	r2, [r4, #16]
 800be8c:	b942      	cbnz	r2, 800bea0 <__swsetup_r+0xa4>
 800be8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be92:	d1c5      	bne.n	800be20 <__swsetup_r+0x24>
 800be94:	bd38      	pop	{r3, r4, r5, pc}
 800be96:	0799      	lsls	r1, r3, #30
 800be98:	bf58      	it	pl
 800be9a:	6962      	ldrpl	r2, [r4, #20]
 800be9c:	60a2      	str	r2, [r4, #8]
 800be9e:	e7f4      	b.n	800be8a <__swsetup_r+0x8e>
 800bea0:	2000      	movs	r0, #0
 800bea2:	e7f7      	b.n	800be94 <__swsetup_r+0x98>
 800bea4:	20000344 	.word	0x20000344

0800bea8 <memmove>:
 800bea8:	4288      	cmp	r0, r1
 800beaa:	b510      	push	{r4, lr}
 800beac:	eb01 0402 	add.w	r4, r1, r2
 800beb0:	d902      	bls.n	800beb8 <memmove+0x10>
 800beb2:	4284      	cmp	r4, r0
 800beb4:	4623      	mov	r3, r4
 800beb6:	d807      	bhi.n	800bec8 <memmove+0x20>
 800beb8:	1e43      	subs	r3, r0, #1
 800beba:	42a1      	cmp	r1, r4
 800bebc:	d008      	beq.n	800bed0 <memmove+0x28>
 800bebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bec6:	e7f8      	b.n	800beba <memmove+0x12>
 800bec8:	4402      	add	r2, r0
 800beca:	4601      	mov	r1, r0
 800becc:	428a      	cmp	r2, r1
 800bece:	d100      	bne.n	800bed2 <memmove+0x2a>
 800bed0:	bd10      	pop	{r4, pc}
 800bed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800beda:	e7f7      	b.n	800becc <memmove+0x24>

0800bedc <strncmp>:
 800bedc:	b510      	push	{r4, lr}
 800bede:	b16a      	cbz	r2, 800befc <strncmp+0x20>
 800bee0:	3901      	subs	r1, #1
 800bee2:	1884      	adds	r4, r0, r2
 800bee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bee8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800beec:	429a      	cmp	r2, r3
 800beee:	d103      	bne.n	800bef8 <strncmp+0x1c>
 800bef0:	42a0      	cmp	r0, r4
 800bef2:	d001      	beq.n	800bef8 <strncmp+0x1c>
 800bef4:	2a00      	cmp	r2, #0
 800bef6:	d1f5      	bne.n	800bee4 <strncmp+0x8>
 800bef8:	1ad0      	subs	r0, r2, r3
 800befa:	bd10      	pop	{r4, pc}
 800befc:	4610      	mov	r0, r2
 800befe:	e7fc      	b.n	800befa <strncmp+0x1e>

0800bf00 <_sbrk_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	4d06      	ldr	r5, [pc, #24]	@ (800bf1c <_sbrk_r+0x1c>)
 800bf04:	2300      	movs	r3, #0
 800bf06:	4604      	mov	r4, r0
 800bf08:	4608      	mov	r0, r1
 800bf0a:	602b      	str	r3, [r5, #0]
 800bf0c:	f7f9 fcfe 	bl	800590c <_sbrk>
 800bf10:	1c43      	adds	r3, r0, #1
 800bf12:	d102      	bne.n	800bf1a <_sbrk_r+0x1a>
 800bf14:	682b      	ldr	r3, [r5, #0]
 800bf16:	b103      	cbz	r3, 800bf1a <_sbrk_r+0x1a>
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	bd38      	pop	{r3, r4, r5, pc}
 800bf1c:	20002b8c 	.word	0x20002b8c

0800bf20 <nan>:
 800bf20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf28 <nan+0x8>
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	00000000 	.word	0x00000000
 800bf2c:	7ff80000 	.word	0x7ff80000

0800bf30 <__assert_func>:
 800bf30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf32:	4614      	mov	r4, r2
 800bf34:	461a      	mov	r2, r3
 800bf36:	4b09      	ldr	r3, [pc, #36]	@ (800bf5c <__assert_func+0x2c>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	68d8      	ldr	r0, [r3, #12]
 800bf3e:	b954      	cbnz	r4, 800bf56 <__assert_func+0x26>
 800bf40:	4b07      	ldr	r3, [pc, #28]	@ (800bf60 <__assert_func+0x30>)
 800bf42:	461c      	mov	r4, r3
 800bf44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf48:	9100      	str	r1, [sp, #0]
 800bf4a:	462b      	mov	r3, r5
 800bf4c:	4905      	ldr	r1, [pc, #20]	@ (800bf64 <__assert_func+0x34>)
 800bf4e:	f000 fba7 	bl	800c6a0 <fiprintf>
 800bf52:	f000 fc3b 	bl	800c7cc <abort>
 800bf56:	4b04      	ldr	r3, [pc, #16]	@ (800bf68 <__assert_func+0x38>)
 800bf58:	e7f4      	b.n	800bf44 <__assert_func+0x14>
 800bf5a:	bf00      	nop
 800bf5c:	20000344 	.word	0x20000344
 800bf60:	0800eb34 	.word	0x0800eb34
 800bf64:	0800eb06 	.word	0x0800eb06
 800bf68:	0800eaf9 	.word	0x0800eaf9

0800bf6c <_calloc_r>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	fba1 5402 	umull	r5, r4, r1, r2
 800bf72:	b93c      	cbnz	r4, 800bf84 <_calloc_r+0x18>
 800bf74:	4629      	mov	r1, r5
 800bf76:	f7fe f877 	bl	800a068 <_malloc_r>
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	b928      	cbnz	r0, 800bf8a <_calloc_r+0x1e>
 800bf7e:	2600      	movs	r6, #0
 800bf80:	4630      	mov	r0, r6
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	220c      	movs	r2, #12
 800bf86:	6002      	str	r2, [r0, #0]
 800bf88:	e7f9      	b.n	800bf7e <_calloc_r+0x12>
 800bf8a:	462a      	mov	r2, r5
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	f7fd f914 	bl	80091ba <memset>
 800bf92:	e7f5      	b.n	800bf80 <_calloc_r+0x14>

0800bf94 <rshift>:
 800bf94:	6903      	ldr	r3, [r0, #16]
 800bf96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bfa2:	f100 0414 	add.w	r4, r0, #20
 800bfa6:	dd45      	ble.n	800c034 <rshift+0xa0>
 800bfa8:	f011 011f 	ands.w	r1, r1, #31
 800bfac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bfb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bfb4:	d10c      	bne.n	800bfd0 <rshift+0x3c>
 800bfb6:	f100 0710 	add.w	r7, r0, #16
 800bfba:	4629      	mov	r1, r5
 800bfbc:	42b1      	cmp	r1, r6
 800bfbe:	d334      	bcc.n	800c02a <rshift+0x96>
 800bfc0:	1a9b      	subs	r3, r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	1eea      	subs	r2, r5, #3
 800bfc6:	4296      	cmp	r6, r2
 800bfc8:	bf38      	it	cc
 800bfca:	2300      	movcc	r3, #0
 800bfcc:	4423      	add	r3, r4
 800bfce:	e015      	b.n	800bffc <rshift+0x68>
 800bfd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bfd4:	f1c1 0820 	rsb	r8, r1, #32
 800bfd8:	40cf      	lsrs	r7, r1
 800bfda:	f105 0e04 	add.w	lr, r5, #4
 800bfde:	46a1      	mov	r9, r4
 800bfe0:	4576      	cmp	r6, lr
 800bfe2:	46f4      	mov	ip, lr
 800bfe4:	d815      	bhi.n	800c012 <rshift+0x7e>
 800bfe6:	1a9a      	subs	r2, r3, r2
 800bfe8:	0092      	lsls	r2, r2, #2
 800bfea:	3a04      	subs	r2, #4
 800bfec:	3501      	adds	r5, #1
 800bfee:	42ae      	cmp	r6, r5
 800bff0:	bf38      	it	cc
 800bff2:	2200      	movcc	r2, #0
 800bff4:	18a3      	adds	r3, r4, r2
 800bff6:	50a7      	str	r7, [r4, r2]
 800bff8:	b107      	cbz	r7, 800bffc <rshift+0x68>
 800bffa:	3304      	adds	r3, #4
 800bffc:	1b1a      	subs	r2, r3, r4
 800bffe:	42a3      	cmp	r3, r4
 800c000:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c004:	bf08      	it	eq
 800c006:	2300      	moveq	r3, #0
 800c008:	6102      	str	r2, [r0, #16]
 800c00a:	bf08      	it	eq
 800c00c:	6143      	streq	r3, [r0, #20]
 800c00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c012:	f8dc c000 	ldr.w	ip, [ip]
 800c016:	fa0c fc08 	lsl.w	ip, ip, r8
 800c01a:	ea4c 0707 	orr.w	r7, ip, r7
 800c01e:	f849 7b04 	str.w	r7, [r9], #4
 800c022:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c026:	40cf      	lsrs	r7, r1
 800c028:	e7da      	b.n	800bfe0 <rshift+0x4c>
 800c02a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c02e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c032:	e7c3      	b.n	800bfbc <rshift+0x28>
 800c034:	4623      	mov	r3, r4
 800c036:	e7e1      	b.n	800bffc <rshift+0x68>

0800c038 <__hexdig_fun>:
 800c038:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c03c:	2b09      	cmp	r3, #9
 800c03e:	d802      	bhi.n	800c046 <__hexdig_fun+0xe>
 800c040:	3820      	subs	r0, #32
 800c042:	b2c0      	uxtb	r0, r0
 800c044:	4770      	bx	lr
 800c046:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c04a:	2b05      	cmp	r3, #5
 800c04c:	d801      	bhi.n	800c052 <__hexdig_fun+0x1a>
 800c04e:	3847      	subs	r0, #71	@ 0x47
 800c050:	e7f7      	b.n	800c042 <__hexdig_fun+0xa>
 800c052:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c056:	2b05      	cmp	r3, #5
 800c058:	d801      	bhi.n	800c05e <__hexdig_fun+0x26>
 800c05a:	3827      	subs	r0, #39	@ 0x27
 800c05c:	e7f1      	b.n	800c042 <__hexdig_fun+0xa>
 800c05e:	2000      	movs	r0, #0
 800c060:	4770      	bx	lr
	...

0800c064 <__gethex>:
 800c064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c068:	b085      	sub	sp, #20
 800c06a:	468a      	mov	sl, r1
 800c06c:	9302      	str	r3, [sp, #8]
 800c06e:	680b      	ldr	r3, [r1, #0]
 800c070:	9001      	str	r0, [sp, #4]
 800c072:	4690      	mov	r8, r2
 800c074:	1c9c      	adds	r4, r3, #2
 800c076:	46a1      	mov	r9, r4
 800c078:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c07c:	2830      	cmp	r0, #48	@ 0x30
 800c07e:	d0fa      	beq.n	800c076 <__gethex+0x12>
 800c080:	eba9 0303 	sub.w	r3, r9, r3
 800c084:	f1a3 0b02 	sub.w	fp, r3, #2
 800c088:	f7ff ffd6 	bl	800c038 <__hexdig_fun>
 800c08c:	4605      	mov	r5, r0
 800c08e:	2800      	cmp	r0, #0
 800c090:	d168      	bne.n	800c164 <__gethex+0x100>
 800c092:	49a0      	ldr	r1, [pc, #640]	@ (800c314 <__gethex+0x2b0>)
 800c094:	2201      	movs	r2, #1
 800c096:	4648      	mov	r0, r9
 800c098:	f7ff ff20 	bl	800bedc <strncmp>
 800c09c:	4607      	mov	r7, r0
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d167      	bne.n	800c172 <__gethex+0x10e>
 800c0a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c0a6:	4626      	mov	r6, r4
 800c0a8:	f7ff ffc6 	bl	800c038 <__hexdig_fun>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d062      	beq.n	800c176 <__gethex+0x112>
 800c0b0:	4623      	mov	r3, r4
 800c0b2:	7818      	ldrb	r0, [r3, #0]
 800c0b4:	2830      	cmp	r0, #48	@ 0x30
 800c0b6:	4699      	mov	r9, r3
 800c0b8:	f103 0301 	add.w	r3, r3, #1
 800c0bc:	d0f9      	beq.n	800c0b2 <__gethex+0x4e>
 800c0be:	f7ff ffbb 	bl	800c038 <__hexdig_fun>
 800c0c2:	fab0 f580 	clz	r5, r0
 800c0c6:	096d      	lsrs	r5, r5, #5
 800c0c8:	f04f 0b01 	mov.w	fp, #1
 800c0cc:	464a      	mov	r2, r9
 800c0ce:	4616      	mov	r6, r2
 800c0d0:	3201      	adds	r2, #1
 800c0d2:	7830      	ldrb	r0, [r6, #0]
 800c0d4:	f7ff ffb0 	bl	800c038 <__hexdig_fun>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d1f8      	bne.n	800c0ce <__gethex+0x6a>
 800c0dc:	498d      	ldr	r1, [pc, #564]	@ (800c314 <__gethex+0x2b0>)
 800c0de:	2201      	movs	r2, #1
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f7ff fefb 	bl	800bedc <strncmp>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d13f      	bne.n	800c16a <__gethex+0x106>
 800c0ea:	b944      	cbnz	r4, 800c0fe <__gethex+0x9a>
 800c0ec:	1c74      	adds	r4, r6, #1
 800c0ee:	4622      	mov	r2, r4
 800c0f0:	4616      	mov	r6, r2
 800c0f2:	3201      	adds	r2, #1
 800c0f4:	7830      	ldrb	r0, [r6, #0]
 800c0f6:	f7ff ff9f 	bl	800c038 <__hexdig_fun>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d1f8      	bne.n	800c0f0 <__gethex+0x8c>
 800c0fe:	1ba4      	subs	r4, r4, r6
 800c100:	00a7      	lsls	r7, r4, #2
 800c102:	7833      	ldrb	r3, [r6, #0]
 800c104:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c108:	2b50      	cmp	r3, #80	@ 0x50
 800c10a:	d13e      	bne.n	800c18a <__gethex+0x126>
 800c10c:	7873      	ldrb	r3, [r6, #1]
 800c10e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c110:	d033      	beq.n	800c17a <__gethex+0x116>
 800c112:	2b2d      	cmp	r3, #45	@ 0x2d
 800c114:	d034      	beq.n	800c180 <__gethex+0x11c>
 800c116:	1c71      	adds	r1, r6, #1
 800c118:	2400      	movs	r4, #0
 800c11a:	7808      	ldrb	r0, [r1, #0]
 800c11c:	f7ff ff8c 	bl	800c038 <__hexdig_fun>
 800c120:	1e43      	subs	r3, r0, #1
 800c122:	b2db      	uxtb	r3, r3
 800c124:	2b18      	cmp	r3, #24
 800c126:	d830      	bhi.n	800c18a <__gethex+0x126>
 800c128:	f1a0 0210 	sub.w	r2, r0, #16
 800c12c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c130:	f7ff ff82 	bl	800c038 <__hexdig_fun>
 800c134:	f100 3cff 	add.w	ip, r0, #4294967295
 800c138:	fa5f fc8c 	uxtb.w	ip, ip
 800c13c:	f1bc 0f18 	cmp.w	ip, #24
 800c140:	f04f 030a 	mov.w	r3, #10
 800c144:	d91e      	bls.n	800c184 <__gethex+0x120>
 800c146:	b104      	cbz	r4, 800c14a <__gethex+0xe6>
 800c148:	4252      	negs	r2, r2
 800c14a:	4417      	add	r7, r2
 800c14c:	f8ca 1000 	str.w	r1, [sl]
 800c150:	b1ed      	cbz	r5, 800c18e <__gethex+0x12a>
 800c152:	f1bb 0f00 	cmp.w	fp, #0
 800c156:	bf0c      	ite	eq
 800c158:	2506      	moveq	r5, #6
 800c15a:	2500      	movne	r5, #0
 800c15c:	4628      	mov	r0, r5
 800c15e:	b005      	add	sp, #20
 800c160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c164:	2500      	movs	r5, #0
 800c166:	462c      	mov	r4, r5
 800c168:	e7b0      	b.n	800c0cc <__gethex+0x68>
 800c16a:	2c00      	cmp	r4, #0
 800c16c:	d1c7      	bne.n	800c0fe <__gethex+0x9a>
 800c16e:	4627      	mov	r7, r4
 800c170:	e7c7      	b.n	800c102 <__gethex+0x9e>
 800c172:	464e      	mov	r6, r9
 800c174:	462f      	mov	r7, r5
 800c176:	2501      	movs	r5, #1
 800c178:	e7c3      	b.n	800c102 <__gethex+0x9e>
 800c17a:	2400      	movs	r4, #0
 800c17c:	1cb1      	adds	r1, r6, #2
 800c17e:	e7cc      	b.n	800c11a <__gethex+0xb6>
 800c180:	2401      	movs	r4, #1
 800c182:	e7fb      	b.n	800c17c <__gethex+0x118>
 800c184:	fb03 0002 	mla	r0, r3, r2, r0
 800c188:	e7ce      	b.n	800c128 <__gethex+0xc4>
 800c18a:	4631      	mov	r1, r6
 800c18c:	e7de      	b.n	800c14c <__gethex+0xe8>
 800c18e:	eba6 0309 	sub.w	r3, r6, r9
 800c192:	3b01      	subs	r3, #1
 800c194:	4629      	mov	r1, r5
 800c196:	2b07      	cmp	r3, #7
 800c198:	dc0a      	bgt.n	800c1b0 <__gethex+0x14c>
 800c19a:	9801      	ldr	r0, [sp, #4]
 800c19c:	f7fd fff0 	bl	800a180 <_Balloc>
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	b940      	cbnz	r0, 800c1b6 <__gethex+0x152>
 800c1a4:	4b5c      	ldr	r3, [pc, #368]	@ (800c318 <__gethex+0x2b4>)
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	21e4      	movs	r1, #228	@ 0xe4
 800c1aa:	485c      	ldr	r0, [pc, #368]	@ (800c31c <__gethex+0x2b8>)
 800c1ac:	f7ff fec0 	bl	800bf30 <__assert_func>
 800c1b0:	3101      	adds	r1, #1
 800c1b2:	105b      	asrs	r3, r3, #1
 800c1b4:	e7ef      	b.n	800c196 <__gethex+0x132>
 800c1b6:	f100 0a14 	add.w	sl, r0, #20
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	4655      	mov	r5, sl
 800c1be:	469b      	mov	fp, r3
 800c1c0:	45b1      	cmp	r9, r6
 800c1c2:	d337      	bcc.n	800c234 <__gethex+0x1d0>
 800c1c4:	f845 bb04 	str.w	fp, [r5], #4
 800c1c8:	eba5 050a 	sub.w	r5, r5, sl
 800c1cc:	10ad      	asrs	r5, r5, #2
 800c1ce:	6125      	str	r5, [r4, #16]
 800c1d0:	4658      	mov	r0, fp
 800c1d2:	f7fe f8c7 	bl	800a364 <__hi0bits>
 800c1d6:	016d      	lsls	r5, r5, #5
 800c1d8:	f8d8 6000 	ldr.w	r6, [r8]
 800c1dc:	1a2d      	subs	r5, r5, r0
 800c1de:	42b5      	cmp	r5, r6
 800c1e0:	dd54      	ble.n	800c28c <__gethex+0x228>
 800c1e2:	1bad      	subs	r5, r5, r6
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f7fe fc5b 	bl	800aaa2 <__any_on>
 800c1ec:	4681      	mov	r9, r0
 800c1ee:	b178      	cbz	r0, 800c210 <__gethex+0x1ac>
 800c1f0:	1e6b      	subs	r3, r5, #1
 800c1f2:	1159      	asrs	r1, r3, #5
 800c1f4:	f003 021f 	and.w	r2, r3, #31
 800c1f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c1fc:	f04f 0901 	mov.w	r9, #1
 800c200:	fa09 f202 	lsl.w	r2, r9, r2
 800c204:	420a      	tst	r2, r1
 800c206:	d003      	beq.n	800c210 <__gethex+0x1ac>
 800c208:	454b      	cmp	r3, r9
 800c20a:	dc36      	bgt.n	800c27a <__gethex+0x216>
 800c20c:	f04f 0902 	mov.w	r9, #2
 800c210:	4629      	mov	r1, r5
 800c212:	4620      	mov	r0, r4
 800c214:	f7ff febe 	bl	800bf94 <rshift>
 800c218:	442f      	add	r7, r5
 800c21a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c21e:	42bb      	cmp	r3, r7
 800c220:	da42      	bge.n	800c2a8 <__gethex+0x244>
 800c222:	9801      	ldr	r0, [sp, #4]
 800c224:	4621      	mov	r1, r4
 800c226:	f7fd ffeb 	bl	800a200 <_Bfree>
 800c22a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c22c:	2300      	movs	r3, #0
 800c22e:	6013      	str	r3, [r2, #0]
 800c230:	25a3      	movs	r5, #163	@ 0xa3
 800c232:	e793      	b.n	800c15c <__gethex+0xf8>
 800c234:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c238:	2a2e      	cmp	r2, #46	@ 0x2e
 800c23a:	d012      	beq.n	800c262 <__gethex+0x1fe>
 800c23c:	2b20      	cmp	r3, #32
 800c23e:	d104      	bne.n	800c24a <__gethex+0x1e6>
 800c240:	f845 bb04 	str.w	fp, [r5], #4
 800c244:	f04f 0b00 	mov.w	fp, #0
 800c248:	465b      	mov	r3, fp
 800c24a:	7830      	ldrb	r0, [r6, #0]
 800c24c:	9303      	str	r3, [sp, #12]
 800c24e:	f7ff fef3 	bl	800c038 <__hexdig_fun>
 800c252:	9b03      	ldr	r3, [sp, #12]
 800c254:	f000 000f 	and.w	r0, r0, #15
 800c258:	4098      	lsls	r0, r3
 800c25a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c25e:	3304      	adds	r3, #4
 800c260:	e7ae      	b.n	800c1c0 <__gethex+0x15c>
 800c262:	45b1      	cmp	r9, r6
 800c264:	d8ea      	bhi.n	800c23c <__gethex+0x1d8>
 800c266:	492b      	ldr	r1, [pc, #172]	@ (800c314 <__gethex+0x2b0>)
 800c268:	9303      	str	r3, [sp, #12]
 800c26a:	2201      	movs	r2, #1
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7ff fe35 	bl	800bedc <strncmp>
 800c272:	9b03      	ldr	r3, [sp, #12]
 800c274:	2800      	cmp	r0, #0
 800c276:	d1e1      	bne.n	800c23c <__gethex+0x1d8>
 800c278:	e7a2      	b.n	800c1c0 <__gethex+0x15c>
 800c27a:	1ea9      	subs	r1, r5, #2
 800c27c:	4620      	mov	r0, r4
 800c27e:	f7fe fc10 	bl	800aaa2 <__any_on>
 800c282:	2800      	cmp	r0, #0
 800c284:	d0c2      	beq.n	800c20c <__gethex+0x1a8>
 800c286:	f04f 0903 	mov.w	r9, #3
 800c28a:	e7c1      	b.n	800c210 <__gethex+0x1ac>
 800c28c:	da09      	bge.n	800c2a2 <__gethex+0x23e>
 800c28e:	1b75      	subs	r5, r6, r5
 800c290:	4621      	mov	r1, r4
 800c292:	9801      	ldr	r0, [sp, #4]
 800c294:	462a      	mov	r2, r5
 800c296:	f7fe f9cb 	bl	800a630 <__lshift>
 800c29a:	1b7f      	subs	r7, r7, r5
 800c29c:	4604      	mov	r4, r0
 800c29e:	f100 0a14 	add.w	sl, r0, #20
 800c2a2:	f04f 0900 	mov.w	r9, #0
 800c2a6:	e7b8      	b.n	800c21a <__gethex+0x1b6>
 800c2a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c2ac:	42bd      	cmp	r5, r7
 800c2ae:	dd6f      	ble.n	800c390 <__gethex+0x32c>
 800c2b0:	1bed      	subs	r5, r5, r7
 800c2b2:	42ae      	cmp	r6, r5
 800c2b4:	dc34      	bgt.n	800c320 <__gethex+0x2bc>
 800c2b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d022      	beq.n	800c304 <__gethex+0x2a0>
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d024      	beq.n	800c30c <__gethex+0x2a8>
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d115      	bne.n	800c2f2 <__gethex+0x28e>
 800c2c6:	42ae      	cmp	r6, r5
 800c2c8:	d113      	bne.n	800c2f2 <__gethex+0x28e>
 800c2ca:	2e01      	cmp	r6, #1
 800c2cc:	d10b      	bne.n	800c2e6 <__gethex+0x282>
 800c2ce:	9a02      	ldr	r2, [sp, #8]
 800c2d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c2d4:	6013      	str	r3, [r2, #0]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	6123      	str	r3, [r4, #16]
 800c2da:	f8ca 3000 	str.w	r3, [sl]
 800c2de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2e0:	2562      	movs	r5, #98	@ 0x62
 800c2e2:	601c      	str	r4, [r3, #0]
 800c2e4:	e73a      	b.n	800c15c <__gethex+0xf8>
 800c2e6:	1e71      	subs	r1, r6, #1
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f7fe fbda 	bl	800aaa2 <__any_on>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d1ed      	bne.n	800c2ce <__gethex+0x26a>
 800c2f2:	9801      	ldr	r0, [sp, #4]
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	f7fd ff83 	bl	800a200 <_Bfree>
 800c2fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	2550      	movs	r5, #80	@ 0x50
 800c302:	e72b      	b.n	800c15c <__gethex+0xf8>
 800c304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1f3      	bne.n	800c2f2 <__gethex+0x28e>
 800c30a:	e7e0      	b.n	800c2ce <__gethex+0x26a>
 800c30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1dd      	bne.n	800c2ce <__gethex+0x26a>
 800c312:	e7ee      	b.n	800c2f2 <__gethex+0x28e>
 800c314:	0800ea88 	.word	0x0800ea88
 800c318:	0800e91e 	.word	0x0800e91e
 800c31c:	0800eb35 	.word	0x0800eb35
 800c320:	1e6f      	subs	r7, r5, #1
 800c322:	f1b9 0f00 	cmp.w	r9, #0
 800c326:	d130      	bne.n	800c38a <__gethex+0x326>
 800c328:	b127      	cbz	r7, 800c334 <__gethex+0x2d0>
 800c32a:	4639      	mov	r1, r7
 800c32c:	4620      	mov	r0, r4
 800c32e:	f7fe fbb8 	bl	800aaa2 <__any_on>
 800c332:	4681      	mov	r9, r0
 800c334:	117a      	asrs	r2, r7, #5
 800c336:	2301      	movs	r3, #1
 800c338:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c33c:	f007 071f 	and.w	r7, r7, #31
 800c340:	40bb      	lsls	r3, r7
 800c342:	4213      	tst	r3, r2
 800c344:	4629      	mov	r1, r5
 800c346:	4620      	mov	r0, r4
 800c348:	bf18      	it	ne
 800c34a:	f049 0902 	orrne.w	r9, r9, #2
 800c34e:	f7ff fe21 	bl	800bf94 <rshift>
 800c352:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c356:	1b76      	subs	r6, r6, r5
 800c358:	2502      	movs	r5, #2
 800c35a:	f1b9 0f00 	cmp.w	r9, #0
 800c35e:	d047      	beq.n	800c3f0 <__gethex+0x38c>
 800c360:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c364:	2b02      	cmp	r3, #2
 800c366:	d015      	beq.n	800c394 <__gethex+0x330>
 800c368:	2b03      	cmp	r3, #3
 800c36a:	d017      	beq.n	800c39c <__gethex+0x338>
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d109      	bne.n	800c384 <__gethex+0x320>
 800c370:	f019 0f02 	tst.w	r9, #2
 800c374:	d006      	beq.n	800c384 <__gethex+0x320>
 800c376:	f8da 3000 	ldr.w	r3, [sl]
 800c37a:	ea49 0903 	orr.w	r9, r9, r3
 800c37e:	f019 0f01 	tst.w	r9, #1
 800c382:	d10e      	bne.n	800c3a2 <__gethex+0x33e>
 800c384:	f045 0510 	orr.w	r5, r5, #16
 800c388:	e032      	b.n	800c3f0 <__gethex+0x38c>
 800c38a:	f04f 0901 	mov.w	r9, #1
 800c38e:	e7d1      	b.n	800c334 <__gethex+0x2d0>
 800c390:	2501      	movs	r5, #1
 800c392:	e7e2      	b.n	800c35a <__gethex+0x2f6>
 800c394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c396:	f1c3 0301 	rsb	r3, r3, #1
 800c39a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d0f0      	beq.n	800c384 <__gethex+0x320>
 800c3a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c3a6:	f104 0314 	add.w	r3, r4, #20
 800c3aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c3ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c3b2:	f04f 0c00 	mov.w	ip, #0
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c3c0:	d01b      	beq.n	800c3fa <__gethex+0x396>
 800c3c2:	3201      	adds	r2, #1
 800c3c4:	6002      	str	r2, [r0, #0]
 800c3c6:	2d02      	cmp	r5, #2
 800c3c8:	f104 0314 	add.w	r3, r4, #20
 800c3cc:	d13c      	bne.n	800c448 <__gethex+0x3e4>
 800c3ce:	f8d8 2000 	ldr.w	r2, [r8]
 800c3d2:	3a01      	subs	r2, #1
 800c3d4:	42b2      	cmp	r2, r6
 800c3d6:	d109      	bne.n	800c3ec <__gethex+0x388>
 800c3d8:	1171      	asrs	r1, r6, #5
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3e0:	f006 061f 	and.w	r6, r6, #31
 800c3e4:	fa02 f606 	lsl.w	r6, r2, r6
 800c3e8:	421e      	tst	r6, r3
 800c3ea:	d13a      	bne.n	800c462 <__gethex+0x3fe>
 800c3ec:	f045 0520 	orr.w	r5, r5, #32
 800c3f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3f2:	601c      	str	r4, [r3, #0]
 800c3f4:	9b02      	ldr	r3, [sp, #8]
 800c3f6:	601f      	str	r7, [r3, #0]
 800c3f8:	e6b0      	b.n	800c15c <__gethex+0xf8>
 800c3fa:	4299      	cmp	r1, r3
 800c3fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c400:	d8d9      	bhi.n	800c3b6 <__gethex+0x352>
 800c402:	68a3      	ldr	r3, [r4, #8]
 800c404:	459b      	cmp	fp, r3
 800c406:	db17      	blt.n	800c438 <__gethex+0x3d4>
 800c408:	6861      	ldr	r1, [r4, #4]
 800c40a:	9801      	ldr	r0, [sp, #4]
 800c40c:	3101      	adds	r1, #1
 800c40e:	f7fd feb7 	bl	800a180 <_Balloc>
 800c412:	4681      	mov	r9, r0
 800c414:	b918      	cbnz	r0, 800c41e <__gethex+0x3ba>
 800c416:	4b1a      	ldr	r3, [pc, #104]	@ (800c480 <__gethex+0x41c>)
 800c418:	4602      	mov	r2, r0
 800c41a:	2184      	movs	r1, #132	@ 0x84
 800c41c:	e6c5      	b.n	800c1aa <__gethex+0x146>
 800c41e:	6922      	ldr	r2, [r4, #16]
 800c420:	3202      	adds	r2, #2
 800c422:	f104 010c 	add.w	r1, r4, #12
 800c426:	0092      	lsls	r2, r2, #2
 800c428:	300c      	adds	r0, #12
 800c42a:	f7fc ff46 	bl	80092ba <memcpy>
 800c42e:	4621      	mov	r1, r4
 800c430:	9801      	ldr	r0, [sp, #4]
 800c432:	f7fd fee5 	bl	800a200 <_Bfree>
 800c436:	464c      	mov	r4, r9
 800c438:	6923      	ldr	r3, [r4, #16]
 800c43a:	1c5a      	adds	r2, r3, #1
 800c43c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c440:	6122      	str	r2, [r4, #16]
 800c442:	2201      	movs	r2, #1
 800c444:	615a      	str	r2, [r3, #20]
 800c446:	e7be      	b.n	800c3c6 <__gethex+0x362>
 800c448:	6922      	ldr	r2, [r4, #16]
 800c44a:	455a      	cmp	r2, fp
 800c44c:	dd0b      	ble.n	800c466 <__gethex+0x402>
 800c44e:	2101      	movs	r1, #1
 800c450:	4620      	mov	r0, r4
 800c452:	f7ff fd9f 	bl	800bf94 <rshift>
 800c456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c45a:	3701      	adds	r7, #1
 800c45c:	42bb      	cmp	r3, r7
 800c45e:	f6ff aee0 	blt.w	800c222 <__gethex+0x1be>
 800c462:	2501      	movs	r5, #1
 800c464:	e7c2      	b.n	800c3ec <__gethex+0x388>
 800c466:	f016 061f 	ands.w	r6, r6, #31
 800c46a:	d0fa      	beq.n	800c462 <__gethex+0x3fe>
 800c46c:	4453      	add	r3, sl
 800c46e:	f1c6 0620 	rsb	r6, r6, #32
 800c472:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c476:	f7fd ff75 	bl	800a364 <__hi0bits>
 800c47a:	42b0      	cmp	r0, r6
 800c47c:	dbe7      	blt.n	800c44e <__gethex+0x3ea>
 800c47e:	e7f0      	b.n	800c462 <__gethex+0x3fe>
 800c480:	0800e91e 	.word	0x0800e91e

0800c484 <L_shift>:
 800c484:	f1c2 0208 	rsb	r2, r2, #8
 800c488:	0092      	lsls	r2, r2, #2
 800c48a:	b570      	push	{r4, r5, r6, lr}
 800c48c:	f1c2 0620 	rsb	r6, r2, #32
 800c490:	6843      	ldr	r3, [r0, #4]
 800c492:	6804      	ldr	r4, [r0, #0]
 800c494:	fa03 f506 	lsl.w	r5, r3, r6
 800c498:	432c      	orrs	r4, r5
 800c49a:	40d3      	lsrs	r3, r2
 800c49c:	6004      	str	r4, [r0, #0]
 800c49e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c4a2:	4288      	cmp	r0, r1
 800c4a4:	d3f4      	bcc.n	800c490 <L_shift+0xc>
 800c4a6:	bd70      	pop	{r4, r5, r6, pc}

0800c4a8 <__match>:
 800c4a8:	b530      	push	{r4, r5, lr}
 800c4aa:	6803      	ldr	r3, [r0, #0]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4b2:	b914      	cbnz	r4, 800c4ba <__match+0x12>
 800c4b4:	6003      	str	r3, [r0, #0]
 800c4b6:	2001      	movs	r0, #1
 800c4b8:	bd30      	pop	{r4, r5, pc}
 800c4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c4c2:	2d19      	cmp	r5, #25
 800c4c4:	bf98      	it	ls
 800c4c6:	3220      	addls	r2, #32
 800c4c8:	42a2      	cmp	r2, r4
 800c4ca:	d0f0      	beq.n	800c4ae <__match+0x6>
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	e7f3      	b.n	800c4b8 <__match+0x10>

0800c4d0 <__hexnan>:
 800c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d4:	680b      	ldr	r3, [r1, #0]
 800c4d6:	6801      	ldr	r1, [r0, #0]
 800c4d8:	115e      	asrs	r6, r3, #5
 800c4da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c4de:	f013 031f 	ands.w	r3, r3, #31
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	bf18      	it	ne
 800c4e6:	3604      	addne	r6, #4
 800c4e8:	2500      	movs	r5, #0
 800c4ea:	1f37      	subs	r7, r6, #4
 800c4ec:	4682      	mov	sl, r0
 800c4ee:	4690      	mov	r8, r2
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c4f6:	46b9      	mov	r9, r7
 800c4f8:	463c      	mov	r4, r7
 800c4fa:	9502      	str	r5, [sp, #8]
 800c4fc:	46ab      	mov	fp, r5
 800c4fe:	784a      	ldrb	r2, [r1, #1]
 800c500:	1c4b      	adds	r3, r1, #1
 800c502:	9303      	str	r3, [sp, #12]
 800c504:	b342      	cbz	r2, 800c558 <__hexnan+0x88>
 800c506:	4610      	mov	r0, r2
 800c508:	9105      	str	r1, [sp, #20]
 800c50a:	9204      	str	r2, [sp, #16]
 800c50c:	f7ff fd94 	bl	800c038 <__hexdig_fun>
 800c510:	2800      	cmp	r0, #0
 800c512:	d151      	bne.n	800c5b8 <__hexnan+0xe8>
 800c514:	9a04      	ldr	r2, [sp, #16]
 800c516:	9905      	ldr	r1, [sp, #20]
 800c518:	2a20      	cmp	r2, #32
 800c51a:	d818      	bhi.n	800c54e <__hexnan+0x7e>
 800c51c:	9b02      	ldr	r3, [sp, #8]
 800c51e:	459b      	cmp	fp, r3
 800c520:	dd13      	ble.n	800c54a <__hexnan+0x7a>
 800c522:	454c      	cmp	r4, r9
 800c524:	d206      	bcs.n	800c534 <__hexnan+0x64>
 800c526:	2d07      	cmp	r5, #7
 800c528:	dc04      	bgt.n	800c534 <__hexnan+0x64>
 800c52a:	462a      	mov	r2, r5
 800c52c:	4649      	mov	r1, r9
 800c52e:	4620      	mov	r0, r4
 800c530:	f7ff ffa8 	bl	800c484 <L_shift>
 800c534:	4544      	cmp	r4, r8
 800c536:	d952      	bls.n	800c5de <__hexnan+0x10e>
 800c538:	2300      	movs	r3, #0
 800c53a:	f1a4 0904 	sub.w	r9, r4, #4
 800c53e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c542:	f8cd b008 	str.w	fp, [sp, #8]
 800c546:	464c      	mov	r4, r9
 800c548:	461d      	mov	r5, r3
 800c54a:	9903      	ldr	r1, [sp, #12]
 800c54c:	e7d7      	b.n	800c4fe <__hexnan+0x2e>
 800c54e:	2a29      	cmp	r2, #41	@ 0x29
 800c550:	d157      	bne.n	800c602 <__hexnan+0x132>
 800c552:	3102      	adds	r1, #2
 800c554:	f8ca 1000 	str.w	r1, [sl]
 800c558:	f1bb 0f00 	cmp.w	fp, #0
 800c55c:	d051      	beq.n	800c602 <__hexnan+0x132>
 800c55e:	454c      	cmp	r4, r9
 800c560:	d206      	bcs.n	800c570 <__hexnan+0xa0>
 800c562:	2d07      	cmp	r5, #7
 800c564:	dc04      	bgt.n	800c570 <__hexnan+0xa0>
 800c566:	462a      	mov	r2, r5
 800c568:	4649      	mov	r1, r9
 800c56a:	4620      	mov	r0, r4
 800c56c:	f7ff ff8a 	bl	800c484 <L_shift>
 800c570:	4544      	cmp	r4, r8
 800c572:	d936      	bls.n	800c5e2 <__hexnan+0x112>
 800c574:	f1a8 0204 	sub.w	r2, r8, #4
 800c578:	4623      	mov	r3, r4
 800c57a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c57e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c582:	429f      	cmp	r7, r3
 800c584:	d2f9      	bcs.n	800c57a <__hexnan+0xaa>
 800c586:	1b3b      	subs	r3, r7, r4
 800c588:	f023 0303 	bic.w	r3, r3, #3
 800c58c:	3304      	adds	r3, #4
 800c58e:	3401      	adds	r4, #1
 800c590:	3e03      	subs	r6, #3
 800c592:	42b4      	cmp	r4, r6
 800c594:	bf88      	it	hi
 800c596:	2304      	movhi	r3, #4
 800c598:	4443      	add	r3, r8
 800c59a:	2200      	movs	r2, #0
 800c59c:	f843 2b04 	str.w	r2, [r3], #4
 800c5a0:	429f      	cmp	r7, r3
 800c5a2:	d2fb      	bcs.n	800c59c <__hexnan+0xcc>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	b91b      	cbnz	r3, 800c5b0 <__hexnan+0xe0>
 800c5a8:	4547      	cmp	r7, r8
 800c5aa:	d128      	bne.n	800c5fe <__hexnan+0x12e>
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	603b      	str	r3, [r7, #0]
 800c5b0:	2005      	movs	r0, #5
 800c5b2:	b007      	add	sp, #28
 800c5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b8:	3501      	adds	r5, #1
 800c5ba:	2d08      	cmp	r5, #8
 800c5bc:	f10b 0b01 	add.w	fp, fp, #1
 800c5c0:	dd06      	ble.n	800c5d0 <__hexnan+0x100>
 800c5c2:	4544      	cmp	r4, r8
 800c5c4:	d9c1      	bls.n	800c54a <__hexnan+0x7a>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5cc:	2501      	movs	r5, #1
 800c5ce:	3c04      	subs	r4, #4
 800c5d0:	6822      	ldr	r2, [r4, #0]
 800c5d2:	f000 000f 	and.w	r0, r0, #15
 800c5d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c5da:	6020      	str	r0, [r4, #0]
 800c5dc:	e7b5      	b.n	800c54a <__hexnan+0x7a>
 800c5de:	2508      	movs	r5, #8
 800c5e0:	e7b3      	b.n	800c54a <__hexnan+0x7a>
 800c5e2:	9b01      	ldr	r3, [sp, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d0dd      	beq.n	800c5a4 <__hexnan+0xd4>
 800c5e8:	f1c3 0320 	rsb	r3, r3, #32
 800c5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f0:	40da      	lsrs	r2, r3
 800c5f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c5fc:	e7d2      	b.n	800c5a4 <__hexnan+0xd4>
 800c5fe:	3f04      	subs	r7, #4
 800c600:	e7d0      	b.n	800c5a4 <__hexnan+0xd4>
 800c602:	2004      	movs	r0, #4
 800c604:	e7d5      	b.n	800c5b2 <__hexnan+0xe2>

0800c606 <__ascii_mbtowc>:
 800c606:	b082      	sub	sp, #8
 800c608:	b901      	cbnz	r1, 800c60c <__ascii_mbtowc+0x6>
 800c60a:	a901      	add	r1, sp, #4
 800c60c:	b142      	cbz	r2, 800c620 <__ascii_mbtowc+0x1a>
 800c60e:	b14b      	cbz	r3, 800c624 <__ascii_mbtowc+0x1e>
 800c610:	7813      	ldrb	r3, [r2, #0]
 800c612:	600b      	str	r3, [r1, #0]
 800c614:	7812      	ldrb	r2, [r2, #0]
 800c616:	1e10      	subs	r0, r2, #0
 800c618:	bf18      	it	ne
 800c61a:	2001      	movne	r0, #1
 800c61c:	b002      	add	sp, #8
 800c61e:	4770      	bx	lr
 800c620:	4610      	mov	r0, r2
 800c622:	e7fb      	b.n	800c61c <__ascii_mbtowc+0x16>
 800c624:	f06f 0001 	mvn.w	r0, #1
 800c628:	e7f8      	b.n	800c61c <__ascii_mbtowc+0x16>

0800c62a <_realloc_r>:
 800c62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c62e:	4680      	mov	r8, r0
 800c630:	4615      	mov	r5, r2
 800c632:	460c      	mov	r4, r1
 800c634:	b921      	cbnz	r1, 800c640 <_realloc_r+0x16>
 800c636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c63a:	4611      	mov	r1, r2
 800c63c:	f7fd bd14 	b.w	800a068 <_malloc_r>
 800c640:	b92a      	cbnz	r2, 800c64e <_realloc_r+0x24>
 800c642:	f7fd fc9d 	bl	8009f80 <_free_r>
 800c646:	2400      	movs	r4, #0
 800c648:	4620      	mov	r0, r4
 800c64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c64e:	f000 f8c4 	bl	800c7da <_malloc_usable_size_r>
 800c652:	4285      	cmp	r5, r0
 800c654:	4606      	mov	r6, r0
 800c656:	d802      	bhi.n	800c65e <_realloc_r+0x34>
 800c658:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c65c:	d8f4      	bhi.n	800c648 <_realloc_r+0x1e>
 800c65e:	4629      	mov	r1, r5
 800c660:	4640      	mov	r0, r8
 800c662:	f7fd fd01 	bl	800a068 <_malloc_r>
 800c666:	4607      	mov	r7, r0
 800c668:	2800      	cmp	r0, #0
 800c66a:	d0ec      	beq.n	800c646 <_realloc_r+0x1c>
 800c66c:	42b5      	cmp	r5, r6
 800c66e:	462a      	mov	r2, r5
 800c670:	4621      	mov	r1, r4
 800c672:	bf28      	it	cs
 800c674:	4632      	movcs	r2, r6
 800c676:	f7fc fe20 	bl	80092ba <memcpy>
 800c67a:	4621      	mov	r1, r4
 800c67c:	4640      	mov	r0, r8
 800c67e:	f7fd fc7f 	bl	8009f80 <_free_r>
 800c682:	463c      	mov	r4, r7
 800c684:	e7e0      	b.n	800c648 <_realloc_r+0x1e>

0800c686 <__ascii_wctomb>:
 800c686:	4603      	mov	r3, r0
 800c688:	4608      	mov	r0, r1
 800c68a:	b141      	cbz	r1, 800c69e <__ascii_wctomb+0x18>
 800c68c:	2aff      	cmp	r2, #255	@ 0xff
 800c68e:	d904      	bls.n	800c69a <__ascii_wctomb+0x14>
 800c690:	228a      	movs	r2, #138	@ 0x8a
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	f04f 30ff 	mov.w	r0, #4294967295
 800c698:	4770      	bx	lr
 800c69a:	700a      	strb	r2, [r1, #0]
 800c69c:	2001      	movs	r0, #1
 800c69e:	4770      	bx	lr

0800c6a0 <fiprintf>:
 800c6a0:	b40e      	push	{r1, r2, r3}
 800c6a2:	b503      	push	{r0, r1, lr}
 800c6a4:	4601      	mov	r1, r0
 800c6a6:	ab03      	add	r3, sp, #12
 800c6a8:	4805      	ldr	r0, [pc, #20]	@ (800c6c0 <fiprintf+0x20>)
 800c6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ae:	6800      	ldr	r0, [r0, #0]
 800c6b0:	9301      	str	r3, [sp, #4]
 800c6b2:	f7ff f9a1 	bl	800b9f8 <_vfiprintf_r>
 800c6b6:	b002      	add	sp, #8
 800c6b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6bc:	b003      	add	sp, #12
 800c6be:	4770      	bx	lr
 800c6c0:	20000344 	.word	0x20000344

0800c6c4 <__swhatbuf_r>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6cc:	2900      	cmp	r1, #0
 800c6ce:	b096      	sub	sp, #88	@ 0x58
 800c6d0:	4615      	mov	r5, r2
 800c6d2:	461e      	mov	r6, r3
 800c6d4:	da0d      	bge.n	800c6f2 <__swhatbuf_r+0x2e>
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c6dc:	f04f 0100 	mov.w	r1, #0
 800c6e0:	bf14      	ite	ne
 800c6e2:	2340      	movne	r3, #64	@ 0x40
 800c6e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	6031      	str	r1, [r6, #0]
 800c6ec:	602b      	str	r3, [r5, #0]
 800c6ee:	b016      	add	sp, #88	@ 0x58
 800c6f0:	bd70      	pop	{r4, r5, r6, pc}
 800c6f2:	466a      	mov	r2, sp
 800c6f4:	f000 f848 	bl	800c788 <_fstat_r>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	dbec      	blt.n	800c6d6 <__swhatbuf_r+0x12>
 800c6fc:	9901      	ldr	r1, [sp, #4]
 800c6fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c702:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c706:	4259      	negs	r1, r3
 800c708:	4159      	adcs	r1, r3
 800c70a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c70e:	e7eb      	b.n	800c6e8 <__swhatbuf_r+0x24>

0800c710 <__smakebuf_r>:
 800c710:	898b      	ldrh	r3, [r1, #12]
 800c712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c714:	079d      	lsls	r5, r3, #30
 800c716:	4606      	mov	r6, r0
 800c718:	460c      	mov	r4, r1
 800c71a:	d507      	bpl.n	800c72c <__smakebuf_r+0x1c>
 800c71c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	6123      	str	r3, [r4, #16]
 800c724:	2301      	movs	r3, #1
 800c726:	6163      	str	r3, [r4, #20]
 800c728:	b003      	add	sp, #12
 800c72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c72c:	ab01      	add	r3, sp, #4
 800c72e:	466a      	mov	r2, sp
 800c730:	f7ff ffc8 	bl	800c6c4 <__swhatbuf_r>
 800c734:	9f00      	ldr	r7, [sp, #0]
 800c736:	4605      	mov	r5, r0
 800c738:	4639      	mov	r1, r7
 800c73a:	4630      	mov	r0, r6
 800c73c:	f7fd fc94 	bl	800a068 <_malloc_r>
 800c740:	b948      	cbnz	r0, 800c756 <__smakebuf_r+0x46>
 800c742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c746:	059a      	lsls	r2, r3, #22
 800c748:	d4ee      	bmi.n	800c728 <__smakebuf_r+0x18>
 800c74a:	f023 0303 	bic.w	r3, r3, #3
 800c74e:	f043 0302 	orr.w	r3, r3, #2
 800c752:	81a3      	strh	r3, [r4, #12]
 800c754:	e7e2      	b.n	800c71c <__smakebuf_r+0xc>
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	6020      	str	r0, [r4, #0]
 800c75a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c75e:	81a3      	strh	r3, [r4, #12]
 800c760:	9b01      	ldr	r3, [sp, #4]
 800c762:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c766:	b15b      	cbz	r3, 800c780 <__smakebuf_r+0x70>
 800c768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c76c:	4630      	mov	r0, r6
 800c76e:	f000 f81d 	bl	800c7ac <_isatty_r>
 800c772:	b128      	cbz	r0, 800c780 <__smakebuf_r+0x70>
 800c774:	89a3      	ldrh	r3, [r4, #12]
 800c776:	f023 0303 	bic.w	r3, r3, #3
 800c77a:	f043 0301 	orr.w	r3, r3, #1
 800c77e:	81a3      	strh	r3, [r4, #12]
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	431d      	orrs	r5, r3
 800c784:	81a5      	strh	r5, [r4, #12]
 800c786:	e7cf      	b.n	800c728 <__smakebuf_r+0x18>

0800c788 <_fstat_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4d07      	ldr	r5, [pc, #28]	@ (800c7a8 <_fstat_r+0x20>)
 800c78c:	2300      	movs	r3, #0
 800c78e:	4604      	mov	r4, r0
 800c790:	4608      	mov	r0, r1
 800c792:	4611      	mov	r1, r2
 800c794:	602b      	str	r3, [r5, #0]
 800c796:	f7f9 f891 	bl	80058bc <_fstat>
 800c79a:	1c43      	adds	r3, r0, #1
 800c79c:	d102      	bne.n	800c7a4 <_fstat_r+0x1c>
 800c79e:	682b      	ldr	r3, [r5, #0]
 800c7a0:	b103      	cbz	r3, 800c7a4 <_fstat_r+0x1c>
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	bd38      	pop	{r3, r4, r5, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20002b8c 	.word	0x20002b8c

0800c7ac <_isatty_r>:
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	4d06      	ldr	r5, [pc, #24]	@ (800c7c8 <_isatty_r+0x1c>)
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	4608      	mov	r0, r1
 800c7b6:	602b      	str	r3, [r5, #0]
 800c7b8:	f7f9 f890 	bl	80058dc <_isatty>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d102      	bne.n	800c7c6 <_isatty_r+0x1a>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	b103      	cbz	r3, 800c7c6 <_isatty_r+0x1a>
 800c7c4:	6023      	str	r3, [r4, #0]
 800c7c6:	bd38      	pop	{r3, r4, r5, pc}
 800c7c8:	20002b8c 	.word	0x20002b8c

0800c7cc <abort>:
 800c7cc:	b508      	push	{r3, lr}
 800c7ce:	2006      	movs	r0, #6
 800c7d0:	f000 f834 	bl	800c83c <raise>
 800c7d4:	2001      	movs	r0, #1
 800c7d6:	f7f9 f821 	bl	800581c <_exit>

0800c7da <_malloc_usable_size_r>:
 800c7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7de:	1f18      	subs	r0, r3, #4
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	bfbc      	itt	lt
 800c7e4:	580b      	ldrlt	r3, [r1, r0]
 800c7e6:	18c0      	addlt	r0, r0, r3
 800c7e8:	4770      	bx	lr

0800c7ea <_raise_r>:
 800c7ea:	291f      	cmp	r1, #31
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	460c      	mov	r4, r1
 800c7f2:	d904      	bls.n	800c7fe <_raise_r+0x14>
 800c7f4:	2316      	movs	r3, #22
 800c7f6:	6003      	str	r3, [r0, #0]
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fc:	bd38      	pop	{r3, r4, r5, pc}
 800c7fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c800:	b112      	cbz	r2, 800c808 <_raise_r+0x1e>
 800c802:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c806:	b94b      	cbnz	r3, 800c81c <_raise_r+0x32>
 800c808:	4628      	mov	r0, r5
 800c80a:	f000 f831 	bl	800c870 <_getpid_r>
 800c80e:	4622      	mov	r2, r4
 800c810:	4601      	mov	r1, r0
 800c812:	4628      	mov	r0, r5
 800c814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c818:	f000 b818 	b.w	800c84c <_kill_r>
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d00a      	beq.n	800c836 <_raise_r+0x4c>
 800c820:	1c59      	adds	r1, r3, #1
 800c822:	d103      	bne.n	800c82c <_raise_r+0x42>
 800c824:	2316      	movs	r3, #22
 800c826:	6003      	str	r3, [r0, #0]
 800c828:	2001      	movs	r0, #1
 800c82a:	e7e7      	b.n	800c7fc <_raise_r+0x12>
 800c82c:	2100      	movs	r1, #0
 800c82e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c832:	4620      	mov	r0, r4
 800c834:	4798      	blx	r3
 800c836:	2000      	movs	r0, #0
 800c838:	e7e0      	b.n	800c7fc <_raise_r+0x12>
	...

0800c83c <raise>:
 800c83c:	4b02      	ldr	r3, [pc, #8]	@ (800c848 <raise+0xc>)
 800c83e:	4601      	mov	r1, r0
 800c840:	6818      	ldr	r0, [r3, #0]
 800c842:	f7ff bfd2 	b.w	800c7ea <_raise_r>
 800c846:	bf00      	nop
 800c848:	20000344 	.word	0x20000344

0800c84c <_kill_r>:
 800c84c:	b538      	push	{r3, r4, r5, lr}
 800c84e:	4d07      	ldr	r5, [pc, #28]	@ (800c86c <_kill_r+0x20>)
 800c850:	2300      	movs	r3, #0
 800c852:	4604      	mov	r4, r0
 800c854:	4608      	mov	r0, r1
 800c856:	4611      	mov	r1, r2
 800c858:	602b      	str	r3, [r5, #0]
 800c85a:	f7f8 ffcf 	bl	80057fc <_kill>
 800c85e:	1c43      	adds	r3, r0, #1
 800c860:	d102      	bne.n	800c868 <_kill_r+0x1c>
 800c862:	682b      	ldr	r3, [r5, #0]
 800c864:	b103      	cbz	r3, 800c868 <_kill_r+0x1c>
 800c866:	6023      	str	r3, [r4, #0]
 800c868:	bd38      	pop	{r3, r4, r5, pc}
 800c86a:	bf00      	nop
 800c86c:	20002b8c 	.word	0x20002b8c

0800c870 <_getpid_r>:
 800c870:	f7f8 bfbc 	b.w	80057ec <_getpid>

0800c874 <_init>:
 800c874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c876:	bf00      	nop
 800c878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87a:	bc08      	pop	{r3}
 800c87c:	469e      	mov	lr, r3
 800c87e:	4770      	bx	lr

0800c880 <_fini>:
 800c880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c882:	bf00      	nop
 800c884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c886:	bc08      	pop	{r3}
 800c888:	469e      	mov	lr, r3
 800c88a:	4770      	bx	lr
