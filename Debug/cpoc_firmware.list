
cpoc_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003494  08013ef0  08013ef0  00014ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017384  08017384  0001b3b0  2**0
                  CONTENTS
  4 .ARM          00000008  08017384  08017384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801738c  0801738c  0001b3b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801738c  0801738c  0001838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017390  08017390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000023b0  20000000  08017394  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001b3b0  2**0
                  CONTENTS
 10 .bss          000080f4  200023b0  200023b0  0001b3b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a4a4  2000a4a4  0001b3b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001b3b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd1e  00000000  00000000  0001b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039ab  00000000  00000000  0002b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  0002eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b29  00000000  00000000  0002f970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dc8a  00000000  00000000  00030499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013779  00000000  00000000  0004e123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095bfa  00000000  00000000  0006189c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f7496  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f88  00000000  00000000  000f74dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000fc464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200023b0 	.word	0x200023b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ed8 	.word	0x08013ed8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200023b4 	.word	0x200023b4
 80001cc:	08013ed8 	.word	0x08013ed8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001014:	2b80      	cmp	r3, #128	@ 0x80
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103a:	2b40      	cmp	r3, #64	@ 0x40
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <DS3231_Write>:
#include "ds3231.h"

#define DS3231_ADDRESS 0xD0

void DS3231_Write(uint8_t reg, uint8_t data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 80011a0:	bf00      	nop
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <DS3231_Write+0x8c>)
 80011a4:	f7ff ff7a 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <DS3231_Write+0x12>
    LL_I2C_GenerateStartCondition(I2C1);
 80011ae:	481b      	ldr	r0, [pc, #108]	@ (800121c <DS3231_Write+0x8c>)
 80011b0:	f7ff ffac 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 80011b4:	bf00      	nop
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <DS3231_Write+0x8c>)
 80011b8:	f7ff ff4a 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <DS3231_Write+0x26>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 80011c2:	21d0      	movs	r1, #208	@ 0xd0
 80011c4:	4815      	ldr	r0, [pc, #84]	@ (800121c <DS3231_Write+0x8c>)
 80011c6:	f7ff ffce 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80011ca:	bf00      	nop
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <DS3231_Write+0x8c>)
 80011ce:	f7ff ff52 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <DS3231_Write+0x3c>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <DS3231_Write+0x8c>)
 80011da:	f7ff ff72 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <DS3231_Write+0x8c>)
 80011e4:	f7ff ffbf 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011e8:	bf00      	nop
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <DS3231_Write+0x8c>)
 80011ec:	f7ff ff0a 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f9      	beq.n	80011ea <DS3231_Write+0x5a>
    LL_I2C_TransmitData8(I2C1, data);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <DS3231_Write+0x8c>)
 80011fc:	f7ff ffb3 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001200:	bf00      	nop
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <DS3231_Write+0x8c>)
 8001204:	f7ff fefe 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <DS3231_Write+0x72>
    LL_I2C_GenerateStopCondition(I2C1);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <DS3231_Write+0x8c>)
 8001210:	f7ff ff8c 	bl	800112c <LL_I2C_GenerateStopCondition>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400

08001220 <DS3231_Read>:

uint8_t DS3231_Read(uint8_t reg)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 800122e:	bf00      	nop
 8001230:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <DS3231_Read+0xc4>)
 8001232:	f7ff ff33 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <DS3231_Read+0x10>
    LL_I2C_GenerateStartCondition(I2C1);
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <DS3231_Read+0xc4>)
 800123e:	f7ff ff65 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001242:	bf00      	nop
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <DS3231_Read+0xc4>)
 8001246:	f7ff ff03 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <DS3231_Read+0x24>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 8001250:	21d0      	movs	r1, #208	@ 0xd0
 8001252:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <DS3231_Read+0xc4>)
 8001254:	f7ff ff87 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001258:	bf00      	nop
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <DS3231_Read+0xc4>)
 800125c:	f7ff ff0b 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <DS3231_Read+0x3a>
    LL_I2C_ClearFlag_ADDR(I2C1);
 8001266:	481f      	ldr	r0, [pc, #124]	@ (80012e4 <DS3231_Read+0xc4>)
 8001268:	f7ff ff2b 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <DS3231_Read+0xc4>)
 8001272:	f7ff ff78 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001276:	bf00      	nop
 8001278:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <DS3231_Read+0xc4>)
 800127a:	f7ff fec3 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <DS3231_Read+0x58>
    LL_I2C_GenerateStartCondition(I2C1);
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <DS3231_Read+0xc4>)
 8001286:	f7ff ff41 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800128a:	bf00      	nop
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <DS3231_Read+0xc4>)
 800128e:	f7ff fedf 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <DS3231_Read+0x6c>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS | 1);
 8001298:	21d1      	movs	r1, #209	@ 0xd1
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <DS3231_Read+0xc4>)
 800129c:	f7ff ff63 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80012a0:	bf00      	nop
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <DS3231_Read+0xc4>)
 80012a4:	f7ff fee7 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f9      	beq.n	80012a2 <DS3231_Read+0x82>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b0:	f7ff ff07 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80012b4:	2100      	movs	r1, #0
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b8:	f7ff ff15 	bl	80010e6 <LL_I2C_AcknowledgeNextData>
    while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80012bc:	bf00      	nop
 80012be:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <DS3231_Read+0xc4>)
 80012c0:	f7ff feb3 	bl	800102a <LL_I2C_IsActiveFlag_RXNE>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <DS3231_Read+0x9e>
    data = LL_I2C_ReceiveData8(I2C1);
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <DS3231_Read+0xc4>)
 80012cc:	f7ff ff3e 	bl	800114c <LL_I2C_ReceiveData8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
    LL_I2C_GenerateStopCondition(I2C1);
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <DS3231_Read+0xc4>)
 80012d6:	f7ff ff29 	bl	800112c <LL_I2C_GenerateStopCondition>
    return data;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400

080012e8 <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t hour, uint8_t min, uint8_t sec)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	460b      	mov	r3, r1
 8001300:	717b      	strb	r3, [r7, #5]
 8001302:	4613      	mov	r3, r2
 8001304:	713b      	strb	r3, [r7, #4]
    DS3231_Write(0x00, ((sec / 10) << 4) | (sec % 10));
 8001306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130a:	4a55      	ldr	r2, [pc, #340]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b258      	sxtb	r0, r3
 8001318:	f897 2020 	ldrb.w	r2, [r7, #32]
 800131c:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4303      	orrs	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff28 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x01, ((min / 10) << 4) | (min % 10));
 8001340:	7f3b      	ldrb	r3, [r7, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	b258      	sxtb	r0, r3
 8001350:	7f3a      	ldrb	r2, [r7, #28]
 8001352:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001354:	fba3 1302 	umull	r1, r3, r3, r2
 8001358:	08d9      	lsrs	r1, r3, #3
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4303      	orrs	r3, r0
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff0d 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x02, ((hour / 10) << 4) | (hour % 10));
 8001376:	7e3b      	ldrb	r3, [r7, #24]
 8001378:	4a39      	ldr	r2, [pc, #228]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b258      	sxtb	r0, r3
 8001386:	7e3a      	ldrb	r2, [r7, #24]
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800138a:	fba3 1302 	umull	r1, r3, r3, r2
 800138e:	08d9      	lsrs	r1, r3, #3
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4303      	orrs	r3, r0
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fef2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x03, day);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2003      	movs	r0, #3
 80013b2:	f7ff feed 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x04, ((date / 10) << 4) | (date % 10));
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b258      	sxtb	r0, r3
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4303      	orrs	r3, r0
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff fed2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x05, ((month / 10) << 4) | (month % 10));
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b258      	sxtb	r0, r3
 80013fc:	797a      	ldrb	r2, [r7, #5]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001400:	fba3 1302 	umull	r1, r3, r3, r2
 8001404:	08d9      	lsrs	r1, r3, #3
 8001406:	460b      	mov	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4303      	orrs	r3, r0
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff feb7 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x06, ((year / 10) << 4) | (year % 10));
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b258      	sxtb	r0, r3
 8001432:	793a      	ldrb	r2, [r7, #4]
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001436:	fba3 1302 	umull	r1, r3, r3, r2
 800143a:	08d9      	lsrs	r1, r3, #3
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4303      	orrs	r3, r0
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2006      	movs	r0, #6
 8001454:	f7ff fe9c 	bl	8001190 <DS3231_Write>
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	cccccccd 	.word	0xcccccccd

08001464 <DS3231_GetDateTime>:

void DS3231_GetDateTime(uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year, uint8_t *hour, uint8_t *min, uint8_t *sec)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    *sec = DS3231_Read(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fed4 	bl	8001220 <DS3231_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	701a      	strb	r2, [r3, #0]
    *min = DS3231_Read(0x01);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fecd 	bl	8001220 <DS3231_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	701a      	strb	r2, [r3, #0]
    *hour = DS3231_Read(0x02);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fec6 	bl	8001220 <DS3231_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	701a      	strb	r2, [r3, #0]
    *day = DS3231_Read(0x03);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff febf 	bl	8001220 <DS3231_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
    *date = DS3231_Read(0x04);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff feb8 	bl	8001220 <DS3231_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	701a      	strb	r2, [r3, #0]
    *month = DS3231_Read(0x05);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f7ff feb1 	bl	8001220 <DS3231_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	701a      	strb	r2, [r3, #0]
    *year = DS3231_Read(0x06);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff feaa 	bl	8001220 <DS3231_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]

    *sec = ((*sec >> 4) * 10) + (*sec & 0x0F);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	701a      	strb	r2, [r3, #0]
    *min = ((*min >> 4) * 10) + (*min & 0x0F);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	701a      	strb	r2, [r3, #0]
    *hour = ((*hour >> 4) * 10) + (*hour & 0x0F);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	701a      	strb	r2, [r3, #0]
    *date = ((*date >> 4) * 10) + (*date & 0x0F);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	701a      	strb	r2, [r3, #0]
    *month = ((*month >> 4) * 10) + (*month & 0x0F);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	701a      	strb	r2, [r3, #0]
    *year = ((*year >> 4) * 10) + (*year & 0x0F);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <DS3231_GetTemperature>:

float DS3231_GetTemperature(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
    uint8_t temp_msb = DS3231_Read(0x11);
 80015ba:	2011      	movs	r0, #17
 80015bc:	f7ff fe30 	bl	8001220 <DS3231_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_lsb = DS3231_Read(0x12);
 80015c4:	2012      	movs	r0, #18
 80015c6:	f7ff fe2b 	bl	8001220 <DS3231_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71bb      	strb	r3, [r7, #6]
    int16_t temp = (temp_msb << 8) | temp_lsb;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
    float temperature = temp / 256.0;
 80015dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffaf 	bl	8000544 <__aeabi_i2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <DS3231_GetTemperature+0x5c>)
 80015ec:	f7ff f93e 	bl	800086c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb06 	bl	8000c08 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	603b      	str	r3, [r7, #0]
    return temperature;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40700000 	.word	0x40700000

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	@ (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ffc2 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <systick_timer_init+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <systick_timer_init+0x20>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffc3 	bl	8001668 <SysTick_Config>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200021d0 	.word	0x200021d0
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b02      	cmp	r3, #2
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b20      	cmp	r3, #32
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001798:	2b80      	cmp	r3, #128	@ 0x80
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001804:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800181a:	b480      	push	{r7}
 800181c:	b089      	sub	sp, #36	@ 0x24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	e853 3f00 	ldrex	r3, [r3]
 800182e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	330c      	adds	r3, #12
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	61ba      	str	r2, [r7, #24]
 8001840:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001842:	6979      	ldr	r1, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	e841 2300 	strex	r3, r2, [r1]
 800184a:	613b      	str	r3, [r7, #16]
   return(result);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e7      	bne.n	8001822 <LL_USART_EnableIT_RXNE+0x8>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3724      	adds	r7, #36	@ 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	330c      	adds	r3, #12
 800186c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	e853 3f00 	ldrex	r3, [r3]
 8001874:	60bb      	str	r3, [r7, #8]
   return(result);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	330c      	adds	r3, #12
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	61ba      	str	r2, [r7, #24]
 8001886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	e841 2300 	strex	r3, r2, [r1]
 8001890:	613b      	str	r3, [r7, #16]
   return(result);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e7      	bne.n	8001868 <LL_USART_EnableIT_TXE+0x8>
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b089      	sub	sp, #36	@ 0x24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3314      	adds	r3, #20
 80018b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	e853 3f00 	ldrex	r3, [r3]
 80018ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3314      	adds	r3, #20
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	61ba      	str	r2, [r7, #24]
 80018cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	e841 2300 	strex	r3, r2, [r1]
 80018d6:	613b      	str	r3, [r7, #16]
   return(result);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e7      	bne.n	80018ae <LL_USART_EnableIT_ERROR+0x8>
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	@ 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	330c      	adds	r3, #12
 80018f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	e853 3f00 	ldrex	r3, [r3]
 8001900:	60bb      	str	r3, [r7, #8]
   return(result);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f023 0320 	bic.w	r3, r3, #32
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	61ba      	str	r2, [r7, #24]
 8001912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	e841 2300 	strex	r3, r2, [r1]
 800191c:	613b      	str	r3, [r7, #16]
   return(result);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e7      	bne.n	80018f4 <LL_USART_DisableIT_RXNE+0x8>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001932:	b480      	push	{r7}
 8001934:	b089      	sub	sp, #36	@ 0x24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330c      	adds	r3, #12
 800193e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	e853 3f00 	ldrex	r3, [r3]
 8001946:	60bb      	str	r3, [r7, #8]
   return(result);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	330c      	adds	r3, #12
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	61ba      	str	r2, [r7, #24]
 8001958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195a:	6979      	ldr	r1, [r7, #20]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	e841 2300 	strex	r3, r2, [r1]
 8001962:	613b      	str	r3, [r7, #16]
   return(result);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e7      	bne.n	800193a <LL_USART_DisableIT_TXE+0x8>
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3724      	adds	r7, #36	@ 0x24
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b20      	cmp	r3, #32
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b80      	cmp	r3, #128	@ 0x80
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	b2db      	uxtb	r3, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <Ringbuf_init>:


void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <Ringbuf_init+0xa8>)
 8001a02:	4a29      	ldr	r2, [pc, #164]	@ (8001aa8 <Ringbuf_init+0xac>)
 8001a04:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <Ringbuf_init+0xb0>)
 8001a08:	4a29      	ldr	r2, [pc, #164]	@ (8001ab0 <Ringbuf_init+0xb4>)
 8001a0a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <Ringbuf_init+0xb8>)
 8001a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab8 <Ringbuf_init+0xbc>)
 8001a10:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001a12:	4b2a      	ldr	r3, [pc, #168]	@ (8001abc <Ringbuf_init+0xc0>)
 8001a14:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac0 <Ringbuf_init+0xc4>)
 8001a16:	601a      	str	r2, [r3, #0]
  _rx_buffer3 = &rx_buffer3;
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a1c:	601a      	str	r2, [r3, #0]
  _tx_buffer3 = &tx_buffer3;
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a20:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a22:	601a      	str	r2, [r3, #0]
  _rx_buffer5 = &rx_buffer5;
 8001a24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <Ringbuf_init+0xd8>)
 8001a26:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad8 <Ringbuf_init+0xdc>)
 8001a28:	601a      	str	r2, [r3, #0]
  _tx_buffer5 = &tx_buffer5;
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <Ringbuf_init+0xe0>)
 8001a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ae0 <Ringbuf_init+0xe4>)
 8001a2e:	601a      	str	r2, [r3, #0]
  _rx_buffer6 = &rx_buffer6;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <Ringbuf_init+0xe8>)
 8001a32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae8 <Ringbuf_init+0xec>)
 8001a34:	601a      	str	r2, [r3, #0]
  _tx_buffer6 = &tx_buffer6;
 8001a36:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <Ringbuf_init+0xf0>)
 8001a38:	4a2d      	ldr	r2, [pc, #180]	@ (8001af0 <Ringbuf_init+0xf4>)
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  LL_USART_EnableIT_ERROR(uart1);
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <Ringbuf_init+0xf8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff30 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart2);
 8001a46:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <Ringbuf_init+0xfc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff2b 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart3);
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <Ringbuf_init+0x100>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff26 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart5);
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <Ringbuf_init+0x104>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff21 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart6);
 8001a64:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <Ringbuf_init+0x108>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff1c 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart1);
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <Ringbuf_init+0xf8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fed1 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart2);
 8001a78:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <Ringbuf_init+0xfc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fecc 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart3);
 8001a82:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <Ringbuf_init+0x100>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fec7 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart5);
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <Ringbuf_init+0x104>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fec2 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart6);
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <Ringbuf_init+0x108>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff febd 	bl	800181a <LL_USART_EnableIT_RXNE>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20007764 	.word	0x20007764
 8001aa8:	20000014 	.word	0x20000014
 8001aac:	20007768 	.word	0x20007768
 8001ab0:	20000024 	.word	0x20000024
 8001ab4:	2000776c 	.word	0x2000776c
 8001ab8:	20000034 	.word	0x20000034
 8001abc:	20007770 	.word	0x20007770
 8001ac0:	20000044 	.word	0x20000044
 8001ac4:	20007774 	.word	0x20007774
 8001ac8:	20000054 	.word	0x20000054
 8001acc:	20007778 	.word	0x20007778
 8001ad0:	20000064 	.word	0x20000064
 8001ad4:	2000777c 	.word	0x2000777c
 8001ad8:	20000074 	.word	0x20000074
 8001adc:	20007780 	.word	0x20007780
 8001ae0:	20000084 	.word	0x20000084
 8001ae4:	20007784 	.word	0x20007784
 8001ae8:	20000094 	.word	0x20000094
 8001aec:	20007788 	.word	0x20007788
 8001af0:	200000a4 	.word	0x200000a4
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004
 8001afc:	20000008 	.word	0x20000008
 8001b00:	2000000c 	.word	0x2000000c
 8001b04:	20000010 	.word	0x20000010

08001b08 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % buffer->size;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	68d2      	ldr	r2, [r2, #12]
 8001b1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b22:	fb01 f202 	mul.w	r2, r1, r2
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d03b      	beq.n	8001bac <store_char+0xa4>
    ATOMIC_BLOCK_START(USART1)
 8001b34:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb4 <store_char+0xac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fed7 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(USART2)
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <store_char+0xb0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fed2 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(USART3)
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <store_char+0xb4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fecd 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(UART5)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <store_char+0xb8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fec8 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(UART4)
 8001b5c:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <store_char+0xbc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fec3 	bl	80018ec <LL_USART_DisableIT_RXNE>
    buffer->buffer[buffer->head] = c;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	79fa      	ldrb	r2, [r7, #7]
 8001b72:	701a      	strb	r2, [r3, #0]
    buffer->head = i;
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	605a      	str	r2, [r3, #4]
    ATOMIC_BLOCK_END(USART1)
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <store_char+0xac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fe4b 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART2)
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <store_char+0xb0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fe46 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART3)
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <store_char+0xb4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe41 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART5)
 8001b98:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <store_char+0xb8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fe3c 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART4)
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <store_char+0xbc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fe37 	bl	800181a <LL_USART_EnableIT_RXNE>
  }
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	20000010 	.word	0x20000010

08001bc8 <Uart_read>:

int Uart_read(USART_TypeDef *uart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  ring_buffer *_rx_buffer;

  switch ((uint32_t)uart) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a51      	ldr	r2, [pc, #324]	@ (8001d18 <Uart_read+0x150>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d00f      	beq.n	8001bf8 <Uart_read+0x30>
 8001bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d18 <Uart_read+0x150>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d81c      	bhi.n	8001c18 <Uart_read+0x50>
 8001bde:	4a4f      	ldr	r2, [pc, #316]	@ (8001d1c <Uart_read+0x154>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d015      	beq.n	8001c10 <Uart_read+0x48>
 8001be4:	4a4d      	ldr	r2, [pc, #308]	@ (8001d1c <Uart_read+0x154>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d816      	bhi.n	8001c18 <Uart_read+0x50>
 8001bea:	4a4d      	ldr	r2, [pc, #308]	@ (8001d20 <Uart_read+0x158>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d007      	beq.n	8001c00 <Uart_read+0x38>
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d24 <Uart_read+0x15c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d008      	beq.n	8001c08 <Uart_read+0x40>
 8001bf6:	e00f      	b.n	8001c18 <Uart_read+0x50>
    case (uint32_t)USART1:
      _rx_buffer = _rx_buffer1;
 8001bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8001d28 <Uart_read+0x160>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
      break;
 8001bfe:	e00f      	b.n	8001c20 <Uart_read+0x58>
    case (uint32_t)USART2:
      _rx_buffer = _rx_buffer2;
 8001c00:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <Uart_read+0x164>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
      break;
 8001c06:	e00b      	b.n	8001c20 <Uart_read+0x58>
    case (uint32_t)USART3:
      _rx_buffer = _rx_buffer3;
 8001c08:	4b49      	ldr	r3, [pc, #292]	@ (8001d30 <Uart_read+0x168>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
      break;
 8001c0e:	e007      	b.n	8001c20 <Uart_read+0x58>
    case (uint32_t)UART5:
      _rx_buffer = _rx_buffer5;
 8001c10:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <Uart_read+0x16c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
      break;
 8001c16:	e003      	b.n	8001c20 <Uart_read+0x58>
    default:
      _rx_buffer = _rx_buffer6;
 8001c18:	4b47      	ldr	r3, [pc, #284]	@ (8001d38 <Uart_read+0x170>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
      break;
 8001c1e:	bf00      	nop
  }

  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d102      	bne.n	8001c32 <Uart_read+0x6a>
  {
    return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	e06d      	b.n	8001d0e <Uart_read+0x146>
  }
  else
  {
    ATOMIC_BLOCK_START(uart)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a38      	ldr	r2, [pc, #224]	@ (8001d18 <Uart_read+0x150>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d105      	bne.n	8001c46 <Uart_read+0x7e>
 8001c3a:	4b40      	ldr	r3, [pc, #256]	@ (8001d3c <Uart_read+0x174>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe54 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c44:	e022      	b.n	8001c8c <Uart_read+0xc4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a35      	ldr	r2, [pc, #212]	@ (8001d20 <Uart_read+0x158>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d105      	bne.n	8001c5a <Uart_read+0x92>
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <Uart_read+0x178>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe4a 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c58:	e018      	b.n	8001c8c <Uart_read+0xc4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a31      	ldr	r2, [pc, #196]	@ (8001d24 <Uart_read+0x15c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d105      	bne.n	8001c6e <Uart_read+0xa6>
 8001c62:	4b38      	ldr	r3, [pc, #224]	@ (8001d44 <Uart_read+0x17c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fe40 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c6c:	e00e      	b.n	8001c8c <Uart_read+0xc4>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a2a      	ldr	r2, [pc, #168]	@ (8001d1c <Uart_read+0x154>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d105      	bne.n	8001c82 <Uart_read+0xba>
 8001c76:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <Uart_read+0x180>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe36 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c80:	e004      	b.n	8001c8c <Uart_read+0xc4>
 8001c82:	4b32      	ldr	r3, [pc, #200]	@ (8001d4c <Uart_read+0x184>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fe30 	bl	80018ec <LL_USART_DisableIT_RXNE>
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	72fb      	strb	r3, [r7, #11]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % _rx_buffer->size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	68d2      	ldr	r2, [r2, #12]
 8001ca4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ca8:	fb01 f202 	mul.w	r2, r1, r2
 8001cac:	1a9a      	subs	r2, r3, r2
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	609a      	str	r2, [r3, #8]
    ATOMIC_BLOCK_END(uart)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <Uart_read+0x150>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d105      	bne.n	8001cc6 <Uart_read+0xfe>
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <Uart_read+0x174>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fdab 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cc4:	e022      	b.n	8001d0c <Uart_read+0x144>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a15      	ldr	r2, [pc, #84]	@ (8001d20 <Uart_read+0x158>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d105      	bne.n	8001cda <Uart_read+0x112>
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <Uart_read+0x178>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fda1 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cd8:	e018      	b.n	8001d0c <Uart_read+0x144>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <Uart_read+0x15c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d105      	bne.n	8001cee <Uart_read+0x126>
 8001ce2:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <Uart_read+0x17c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fd97 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cec:	e00e      	b.n	8001d0c <Uart_read+0x144>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <Uart_read+0x154>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d105      	bne.n	8001d02 <Uart_read+0x13a>
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <Uart_read+0x180>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fd8d 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001d00:	e004      	b.n	8001d0c <Uart_read+0x144>
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <Uart_read+0x184>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fd87 	bl	800181a <LL_USART_EnableIT_RXNE>
    return c;
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	40005000 	.word	0x40005000
 8001d20:	40004400 	.word	0x40004400
 8001d24:	40004800 	.word	0x40004800
 8001d28:	20007764 	.word	0x20007764
 8001d2c:	2000776c 	.word	0x2000776c
 8001d30:	20007774 	.word	0x20007774
 8001d34:	2000777c 	.word	0x2000777c
 8001d38:	20007784 	.word	0x20007784
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000004 	.word	0x20000004
 8001d44:	20000008 	.word	0x20000008
 8001d48:	2000000c 	.word	0x2000000c
 8001d4c:	20000010 	.word	0x20000010

08001d50 <Uart_write>:

void Uart_write(USART_TypeDef *uart, int c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  ring_buffer *_tx_buffer;
  switch ((uint32_t)uart) {
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8001f0c <Uart_write+0x1bc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00f      	beq.n	8001d82 <Uart_write+0x32>
 8001d62:	4a6a      	ldr	r2, [pc, #424]	@ (8001f0c <Uart_write+0x1bc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d81c      	bhi.n	8001da2 <Uart_write+0x52>
 8001d68:	4a69      	ldr	r2, [pc, #420]	@ (8001f10 <Uart_write+0x1c0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d015      	beq.n	8001d9a <Uart_write+0x4a>
 8001d6e:	4a68      	ldr	r2, [pc, #416]	@ (8001f10 <Uart_write+0x1c0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d816      	bhi.n	8001da2 <Uart_write+0x52>
 8001d74:	4a67      	ldr	r2, [pc, #412]	@ (8001f14 <Uart_write+0x1c4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <Uart_write+0x3a>
 8001d7a:	4a67      	ldr	r2, [pc, #412]	@ (8001f18 <Uart_write+0x1c8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d008      	beq.n	8001d92 <Uart_write+0x42>
 8001d80:	e00f      	b.n	8001da2 <Uart_write+0x52>
    case (uint32_t)USART1:
      _tx_buffer = _tx_buffer1;
 8001d82:	4b66      	ldr	r3, [pc, #408]	@ (8001f1c <Uart_write+0x1cc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
      break;
 8001d88:	e00f      	b.n	8001daa <Uart_write+0x5a>
    case (uint32_t)USART2:
      _tx_buffer = _tx_buffer2;
 8001d8a:	4b65      	ldr	r3, [pc, #404]	@ (8001f20 <Uart_write+0x1d0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]
      break;
 8001d90:	e00b      	b.n	8001daa <Uart_write+0x5a>
    case (uint32_t)USART3:
      _tx_buffer = _tx_buffer3;
 8001d92:	4b64      	ldr	r3, [pc, #400]	@ (8001f24 <Uart_write+0x1d4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60fb      	str	r3, [r7, #12]
      break;
 8001d98:	e007      	b.n	8001daa <Uart_write+0x5a>
    case (uint32_t)UART5:
      _tx_buffer = _tx_buffer5;
 8001d9a:	4b63      	ldr	r3, [pc, #396]	@ (8001f28 <Uart_write+0x1d8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]
      break;
 8001da0:	e003      	b.n	8001daa <Uart_write+0x5a>
    default:
      _tx_buffer = _tx_buffer6;
 8001da2:	4b62      	ldr	r3, [pc, #392]	@ (8001f2c <Uart_write+0x1dc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]
      break;
 8001da8:	bf00      	nop
  }

  if (c >= 0)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f2c0 80a8 	blt.w	8001f02 <Uart_write+0x1b2>
  {
    int i = (_tx_buffer->head + 1) % _tx_buffer->size;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	3301      	adds	r3, #1
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	68d2      	ldr	r2, [r2, #12]
 8001dbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dc0:	fb01 f202 	mul.w	r2, r1, r2
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]

    ATOMIC_BLOCK_START(uart)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a50      	ldr	r2, [pc, #320]	@ (8001f0c <Uart_write+0x1bc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d105      	bne.n	8001ddc <Uart_write+0x8c>
 8001dd0:	4b57      	ldr	r3, [pc, #348]	@ (8001f30 <Uart_write+0x1e0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fd89 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001dda:	e022      	b.n	8001e22 <Uart_write+0xd2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <Uart_write+0x1c4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d105      	bne.n	8001df0 <Uart_write+0xa0>
 8001de4:	4b53      	ldr	r3, [pc, #332]	@ (8001f34 <Uart_write+0x1e4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fd7f 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001dee:	e018      	b.n	8001e22 <Uart_write+0xd2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a49      	ldr	r2, [pc, #292]	@ (8001f18 <Uart_write+0x1c8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d105      	bne.n	8001e04 <Uart_write+0xb4>
 8001df8:	4b4f      	ldr	r3, [pc, #316]	@ (8001f38 <Uart_write+0x1e8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fd75 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001e02:	e00e      	b.n	8001e22 <Uart_write+0xd2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a42      	ldr	r2, [pc, #264]	@ (8001f10 <Uart_write+0x1c0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d105      	bne.n	8001e18 <Uart_write+0xc8>
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f3c <Uart_write+0x1ec>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fd6b 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001e16:	e004      	b.n	8001e22 <Uart_write+0xd2>
 8001e18:	4b49      	ldr	r3, [pc, #292]	@ (8001f40 <Uart_write+0x1f0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fd65 	bl	80018ec <LL_USART_DisableIT_RXNE>
    while (i == _tx_buffer->tail);
 8001e22:	bf00      	nop
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d0fa      	beq.n	8001e24 <Uart_write+0xd4>

    _tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
    _tx_buffer->head = i;
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	605a      	str	r2, [r3, #4]
    ATOMIC_BLOCK_END(uart)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a31      	ldr	r2, [pc, #196]	@ (8001f0c <Uart_write+0x1bc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d105      	bne.n	8001e58 <Uart_write+0x108>
 8001e4c:	4b38      	ldr	r3, [pc, #224]	@ (8001f30 <Uart_write+0x1e0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fce2 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e56:	e022      	b.n	8001e9e <Uart_write+0x14e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f14 <Uart_write+0x1c4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d105      	bne.n	8001e6c <Uart_write+0x11c>
 8001e60:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <Uart_write+0x1e4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fcd8 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e6a:	e018      	b.n	8001e9e <Uart_write+0x14e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f18 <Uart_write+0x1c8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d105      	bne.n	8001e80 <Uart_write+0x130>
 8001e74:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <Uart_write+0x1e8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fcce 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e7e:	e00e      	b.n	8001e9e <Uart_write+0x14e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <Uart_write+0x1c0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d105      	bne.n	8001e94 <Uart_write+0x144>
 8001e88:	4b2c      	ldr	r3, [pc, #176]	@ (8001f3c <Uart_write+0x1ec>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fcc4 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e92:	e004      	b.n	8001e9e <Uart_write+0x14e>
 8001e94:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <Uart_write+0x1f0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fcbe 	bl	800181a <LL_USART_EnableIT_RXNE>

    switch ((uint32_t)uart) {
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f0c <Uart_write+0x1bc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00f      	beq.n	8001ec6 <Uart_write+0x176>
 8001ea6:	4a19      	ldr	r2, [pc, #100]	@ (8001f0c <Uart_write+0x1bc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d824      	bhi.n	8001ef6 <Uart_write+0x1a6>
 8001eac:	4a18      	ldr	r2, [pc, #96]	@ (8001f10 <Uart_write+0x1c0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01b      	beq.n	8001eea <Uart_write+0x19a>
 8001eb2:	4a17      	ldr	r2, [pc, #92]	@ (8001f10 <Uart_write+0x1c0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d81e      	bhi.n	8001ef6 <Uart_write+0x1a6>
 8001eb8:	4a16      	ldr	r2, [pc, #88]	@ (8001f14 <Uart_write+0x1c4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <Uart_write+0x182>
 8001ebe:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <Uart_write+0x1c8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00c      	beq.n	8001ede <Uart_write+0x18e>
 8001ec4:	e017      	b.n	8001ef6 <Uart_write+0x1a6>
      case (uint32_t)USART1:
        LL_USART_EnableIT_TXE(uart1);
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <Uart_write+0x1e0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fcc8 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ed0:	e017      	b.n	8001f02 <Uart_write+0x1b2>
      case (uint32_t)USART2:
        LL_USART_EnableIT_TXE(uart2);
 8001ed2:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <Uart_write+0x1e4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fcc2 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001edc:	e011      	b.n	8001f02 <Uart_write+0x1b2>
      case (uint32_t)USART3:
        LL_USART_EnableIT_TXE(uart3);
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <Uart_write+0x1e8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fcbc 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ee8:	e00b      	b.n	8001f02 <Uart_write+0x1b2>
      case (uint32_t)UART5:
        LL_USART_EnableIT_TXE(uart5);
 8001eea:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <Uart_write+0x1ec>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fcb6 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ef4:	e005      	b.n	8001f02 <Uart_write+0x1b2>
      default:
        LL_USART_EnableIT_TXE(uart6);
 8001ef6:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <Uart_write+0x1f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fcb0 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001f00:	bf00      	nop
    }
  }
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40005000 	.word	0x40005000
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40004800 	.word	0x40004800
 8001f1c:	20007768 	.word	0x20007768
 8001f20:	20007770 	.word	0x20007770
 8001f24:	20007778 	.word	0x20007778
 8001f28:	20007780 	.word	0x20007780
 8001f2c:	20007788 	.word	0x20007788
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	2000000c 	.word	0x2000000c
 8001f40:	20000010 	.word	0x20000010

08001f44 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;
	  switch ((uint32_t)uart) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <IsDataAvailable+0x90>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00f      	beq.n	8001f74 <IsDataAvailable+0x30>
 8001f54:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd4 <IsDataAvailable+0x90>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d81c      	bhi.n	8001f94 <IsDataAvailable+0x50>
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd8 <IsDataAvailable+0x94>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d015      	beq.n	8001f8c <IsDataAvailable+0x48>
 8001f60:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd8 <IsDataAvailable+0x94>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d816      	bhi.n	8001f94 <IsDataAvailable+0x50>
 8001f66:	4a1d      	ldr	r2, [pc, #116]	@ (8001fdc <IsDataAvailable+0x98>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <IsDataAvailable+0x38>
 8001f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe0 <IsDataAvailable+0x9c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d008      	beq.n	8001f84 <IsDataAvailable+0x40>
 8001f72:	e00f      	b.n	8001f94 <IsDataAvailable+0x50>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <IsDataAvailable+0xa0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
	      break;
 8001f7a:	e00f      	b.n	8001f9c <IsDataAvailable+0x58>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <IsDataAvailable+0xa4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
	      break;
 8001f82:	e00b      	b.n	8001f9c <IsDataAvailable+0x58>
	    case (uint32_t)USART3:
	      _rx_buffer = _rx_buffer3;
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <IsDataAvailable+0xa8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
	      break;
 8001f8a:	e007      	b.n	8001f9c <IsDataAvailable+0x58>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <IsDataAvailable+0xac>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
	      break;
 8001f92:	e003      	b.n	8001f9c <IsDataAvailable+0x58>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001f94:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <IsDataAvailable+0xb0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
	      break;
 8001f9a:	bf00      	nop
	  }

	  return (uint16_t)(_rx_buffer->size + _rx_buffer->head - _rx_buffer->tail) % _rx_buffer->size;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	1ad3      	subs	r3, r2, r3
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40011000 	.word	0x40011000
 8001fd8:	40005000 	.word	0x40005000
 8001fdc:	40004400 	.word	0x40004400
 8001fe0:	40004800 	.word	0x40004800
 8001fe4:	20007764 	.word	0x20007764
 8001fe8:	2000776c 	.word	0x2000776c
 8001fec:	20007774 	.word	0x20007774
 8001ff0:	2000777c 	.word	0x2000777c
 8001ff4:	20007784 	.word	0x20007784

08001ff8 <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (USART_TypeDef *uart, const char *s)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
	while(*s) Uart_write(uart, *s++);
 8002002:	e007      	b.n	8002014 <Uart_sendstring+0x1c>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	603a      	str	r2, [r7, #0]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fe9e 	bl	8001d50 <Uart_write>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f3      	bne.n	8002004 <Uart_sendstring+0xc>
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <Uart_flush>:


}

void Uart_flush (USART_TypeDef *uart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;

	  switch ((uint32_t)uart) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a1c      	ldr	r2, [pc, #112]	@ (80020a4 <Uart_flush+0x7c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00f      	beq.n	8002058 <Uart_flush+0x30>
 8002038:	4a1a      	ldr	r2, [pc, #104]	@ (80020a4 <Uart_flush+0x7c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d81c      	bhi.n	8002078 <Uart_flush+0x50>
 800203e:	4a1a      	ldr	r2, [pc, #104]	@ (80020a8 <Uart_flush+0x80>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d015      	beq.n	8002070 <Uart_flush+0x48>
 8002044:	4a18      	ldr	r2, [pc, #96]	@ (80020a8 <Uart_flush+0x80>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d816      	bhi.n	8002078 <Uart_flush+0x50>
 800204a:	4a18      	ldr	r2, [pc, #96]	@ (80020ac <Uart_flush+0x84>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <Uart_flush+0x38>
 8002050:	4a17      	ldr	r2, [pc, #92]	@ (80020b0 <Uart_flush+0x88>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d008      	beq.n	8002068 <Uart_flush+0x40>
 8002056:	e00f      	b.n	8002078 <Uart_flush+0x50>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8002058:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <Uart_flush+0x8c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
	      break;
 800205e:	e00f      	b.n	8002080 <Uart_flush+0x58>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8002060:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <Uart_flush+0x90>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
	      break;
 8002066:	e00b      	b.n	8002080 <Uart_flush+0x58>
	    case (uint32_t)USART3:
	      _rx_buffer = _rx_buffer3;
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <Uart_flush+0x94>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
	      break;
 800206e:	e007      	b.n	8002080 <Uart_flush+0x58>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <Uart_flush+0x98>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
	      break;
 8002076:	e003      	b.n	8002080 <Uart_flush+0x58>
	    default:
	      _rx_buffer = _rx_buffer6;
 8002078:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <Uart_flush+0x9c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
	      break;
 800207e:	bf00      	nop
	  }

	  memset(_rx_buffer->buffer,'\0', _rx_buffer->size);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	461a      	mov	r2, r3
 800208a:	2100      	movs	r1, #0
 800208c:	f00f f961 	bl	8011352 <memset>
	  _rx_buffer->head = 0;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
	  _rx_buffer->tail = 0;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40011000 	.word	0x40011000
 80020a8:	40005000 	.word	0x40005000
 80020ac:	40004400 	.word	0x40004400
 80020b0:	40004800 	.word	0x40004800
 80020b4:	20007764 	.word	0x20007764
 80020b8:	2000776c 	.word	0x2000776c
 80020bc:	20007774 	.word	0x20007774
 80020c0:	2000777c 	.word	0x2000777c
 80020c4:	20007784 	.word	0x20007784

080020c8 <Uart_isr>:
	if (so_far == len) return 1;
	else return 0;
}

void Uart_isr (USART_TypeDef *uart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  //  uint32_t isrflags   = LL_USART_ReadReg(uart, SR);
    ring_buffer *_rx_buffer;
    ring_buffer *_tx_buffer;

    switch ((uint32_t)uart) {
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002208 <Uart_isr+0x140>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00f      	beq.n	80020f8 <Uart_isr+0x30>
 80020d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002208 <Uart_isr+0x140>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d828      	bhi.n	8002130 <Uart_isr+0x68>
 80020de:	4a4b      	ldr	r2, [pc, #300]	@ (800220c <Uart_isr+0x144>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01e      	beq.n	8002122 <Uart_isr+0x5a>
 80020e4:	4a49      	ldr	r2, [pc, #292]	@ (800220c <Uart_isr+0x144>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d822      	bhi.n	8002130 <Uart_isr+0x68>
 80020ea:	4a49      	ldr	r2, [pc, #292]	@ (8002210 <Uart_isr+0x148>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00a      	beq.n	8002106 <Uart_isr+0x3e>
 80020f0:	4a48      	ldr	r2, [pc, #288]	@ (8002214 <Uart_isr+0x14c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00e      	beq.n	8002114 <Uart_isr+0x4c>
 80020f6:	e01b      	b.n	8002130 <Uart_isr+0x68>
      case (uint32_t)USART1:
        _rx_buffer = _rx_buffer1;
 80020f8:	4b47      	ldr	r3, [pc, #284]	@ (8002218 <Uart_isr+0x150>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer1;
 80020fe:	4b47      	ldr	r3, [pc, #284]	@ (800221c <Uart_isr+0x154>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	613b      	str	r3, [r7, #16]
        break;
 8002104:	e01b      	b.n	800213e <Uart_isr+0x76>
      case (uint32_t)USART2:
        _rx_buffer = _rx_buffer2;
 8002106:	4b46      	ldr	r3, [pc, #280]	@ (8002220 <Uart_isr+0x158>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer2;
 800210c:	4b45      	ldr	r3, [pc, #276]	@ (8002224 <Uart_isr+0x15c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	613b      	str	r3, [r7, #16]
        break;
 8002112:	e014      	b.n	800213e <Uart_isr+0x76>
      case (uint32_t)USART3:
        _rx_buffer = _rx_buffer3;
 8002114:	4b44      	ldr	r3, [pc, #272]	@ (8002228 <Uart_isr+0x160>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer3;
 800211a:	4b44      	ldr	r3, [pc, #272]	@ (800222c <Uart_isr+0x164>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	613b      	str	r3, [r7, #16]
        break;
 8002120:	e00d      	b.n	800213e <Uart_isr+0x76>
      case (uint32_t)UART5:
        _rx_buffer = _rx_buffer5;
 8002122:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <Uart_isr+0x168>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer5;
 8002128:	4b42      	ldr	r3, [pc, #264]	@ (8002234 <Uart_isr+0x16c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	613b      	str	r3, [r7, #16]
        break;
 800212e:	e006      	b.n	800213e <Uart_isr+0x76>
      default:
        _rx_buffer = _rx_buffer6;
 8002130:	4b41      	ldr	r3, [pc, #260]	@ (8002238 <Uart_isr+0x170>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer6;
 8002136:	4b41      	ldr	r3, [pc, #260]	@ (800223c <Uart_isr+0x174>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	613b      	str	r3, [r7, #16]
        break;
 800213c:	bf00      	nop
    }

    /* if DR is not empty and the Rx Int is enabled */
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fb0f 	bl	8001762 <LL_USART_IsActiveFlag_RXNE>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d02c      	beq.n	80021a4 <Uart_isr+0xdc>
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fc14 	bl	8001978 <LL_USART_IsEnabledIT_RXNE>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d026      	beq.n	80021a4 <Uart_isr+0xdc>
//        LL_USART_ReceiveData8(uart);                /* Read status register */
//        unsigned char c = LL_USART_ReceiveData8(uart);    /* Read data register */
//        store_char (c, _rx_buffer);  // store data in buffer
//        return;

        unsigned char data = LL_USART_ReceiveData8(uart);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fc34 	bl	80019c4 <LL_USART_ReceiveData8>
 800215c:	4603      	mov	r3, r0
 800215e:	73fb      	strb	r3, [r7, #15]
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff faeb 	bl	800173c <LL_USART_IsActiveFlag_ORE>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <Uart_isr+0xbc>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fabf 	bl	80016f0 <LL_USART_IsActiveFlag_FE>
 8002172:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <Uart_isr+0xbc>
            (LL_USART_IsActiveFlag_NE(uart) != RESET))
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff facc 	bl	8001716 <LL_USART_IsActiveFlag_NE>
 800217e:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002180:	2b00      	cmp	r3, #0
 8002182:	d009      	beq.n	8002198 <Uart_isr+0xd0>
        {
          // if error, del flag
          LL_USART_ClearFlag_ORE(uart);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fb36 	bl	80017f6 <LL_USART_ClearFlag_ORE>
          LL_USART_ClearFlag_FE(uart);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fb0f 	bl	80017ae <LL_USART_ClearFlag_FE>
          LL_USART_ClearFlag_NE(uart);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fb1e 	bl	80017d2 <LL_USART_ClearFlag_NE>
        }
        else
        {
          store_char(data, _rx_buffer); // store data in buffer
        }
        return;
 8002196:	e034      	b.n	8002202 <Uart_isr+0x13a>
          store_char(data, _rx_buffer); // store data in buffer
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	6979      	ldr	r1, [r7, #20]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fcb3 	bl	8001b08 <store_char>
        return;
 80021a2:	e02e      	b.n	8002202 <Uart_isr+0x13a>


    }
    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff faef 	bl	8001788 <LL_USART_IsActiveFlag_TXE>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d028      	beq.n	8002202 <Uart_isr+0x13a>
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fbf4 	bl	800199e <LL_USART_IsEnabledIT_TXE>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d022      	beq.n	8002202 <Uart_isr+0x13a>
    {
        if(_tx_buffer->head == _tx_buffer->tail)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d103      	bne.n	80021d0 <Uart_isr+0x108>
        {
          // Buffer empty, so disable interrupts
          LL_USART_DisableIT_TXE(uart);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fbb2 	bl	8001932 <LL_USART_DisableIT_TXE>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
          _tx_buffer->tail = (_tx_buffer->tail + 1) % _tx_buffer->size;

          LL_USART_TransmitData8(uart, c);
        }
        return;
 80021ce:	e017      	b.n	8002200 <Uart_isr+0x138>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4413      	add	r3, r2
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	73bb      	strb	r3, [r7, #14]
          _tx_buffer->tail = (_tx_buffer->tail + 1) % _tx_buffer->size;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	3301      	adds	r3, #1
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	68d2      	ldr	r2, [r2, #12]
 80021e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80021ec:	fb01 f202 	mul.w	r2, r1, r2
 80021f0:	1a9a      	subs	r2, r3, r2
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]
          LL_USART_TransmitData8(uart, c);
 80021f6:	7bbb      	ldrb	r3, [r7, #14]
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fbef 	bl	80019de <LL_USART_TransmitData8>
        return;
 8002200:	bf00      	nop
    }
}
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40011000 	.word	0x40011000
 800220c:	40005000 	.word	0x40005000
 8002210:	40004400 	.word	0x40004400
 8002214:	40004800 	.word	0x40004800
 8002218:	20007764 	.word	0x20007764
 800221c:	20007768 	.word	0x20007768
 8002220:	2000776c 	.word	0x2000776c
 8002224:	20007770 	.word	0x20007770
 8002228:	20007774 	.word	0x20007774
 800222c:	20007778 	.word	0x20007778
 8002230:	2000777c 	.word	0x2000777c
 8002234:	20007780 	.word	0x20007780
 8002238:	20007784 	.word	0x20007784
 800223c:	20007788 	.word	0x20007788

08002240 <send_packet_init>:
		95							//taskTick
	}
};

void send_packet_init(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <send_packet_init+0x1c>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
    retryCount = 0;
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <send_packet_init+0x20>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2000788d 	.word	0x2000788d
 8002260:	2000788e 	.word	0x2000788e

08002264 <set_send_flag>:

void set_send_flag(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
    sendFlag = 1;
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <set_send_flag+0x14>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	2000788d 	.word	0x2000788d

0800227c <clear_send_flag>:

void clear_send_flag(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <clear_send_flag+0x14>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	2000788d 	.word	0x2000788d

08002294 <set_fsp_packet>:


void set_fsp_packet(uint8_t *encoded_pkt, uint8_t encoded_len)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
	while (g_pkt_lock);
 80022a0:	bf00      	nop
 80022a2:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <set_fsp_packet+0x58>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1fa      	bne.n	80022a2 <set_fsp_packet+0xe>
	g_pkt_lock = 1;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <set_fsp_packet+0x58>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
	memset((void *)g_encoded_pkt, 0, sizeof(g_encoded_pkt));
 80022b2:	22ff      	movs	r2, #255	@ 0xff
 80022b4:	2100      	movs	r1, #0
 80022b6:	480e      	ldr	r0, [pc, #56]	@ (80022f0 <set_fsp_packet+0x5c>)
 80022b8:	f00f f84b 	bl	8011352 <memset>
    memcpy((void *)g_encoded_pkt, encoded_pkt, encoded_len);
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	461a      	mov	r2, r3
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	480b      	ldr	r0, [pc, #44]	@ (80022f0 <set_fsp_packet+0x5c>)
 80022c4:	f00f f949 	bl	801155a <memcpy>
    g_encoded_len = encoded_len;
 80022c8:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <set_fsp_packet+0x60>)
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	7013      	strb	r3, [r2, #0]
    g_pkt_lock = 0;
 80022ce:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <set_fsp_packet+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
    sendFlag = 1;
 80022d4:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <set_fsp_packet+0x64>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
    SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);
 80022da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022de:	2003      	movs	r0, #3
 80022e0:	f00a f96e 	bl	800c5c0 <SCH_TIM_Start>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	2000788c 	.word	0x2000788c
 80022f0:	2000778c 	.word	0x2000778c
 80022f4:	2000788b 	.word	0x2000788b
 80022f8:	2000788d 	.word	0x2000788d

080022fc <send_packet_create_task>:

void send_packet_create_task(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&ACKsend_task_context.taskHandle, &ACKsend_task_context.taskProperty);
 8002300:	4902      	ldr	r1, [pc, #8]	@ (800230c <send_packet_create_task+0x10>)
 8002302:	4803      	ldr	r0, [pc, #12]	@ (8002310 <send_packet_create_task+0x14>)
 8002304:	f00a f988 	bl	800c618 <SCH_TASK_CreateTask>
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200000b8 	.word	0x200000b8
 8002310:	200000b4 	.word	0x200000b4

08002314 <status_ACKsend_update>:


uint8_t sendBuffer[FSP_PKT_MAX_LENGTH];

void	status_ACKsend_update(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0

			if (SCH_TIM_HasCompleted(SCH_TIM_ACK))
 800231a:	2003      	movs	r0, #3
 800231c:	f00a f966 	bl	800c5ec <SCH_TIM_HasCompleted>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d059      	beq.n	80023da <status_ACKsend_update+0xc6>
			{

			    if (sendFlag)
 8002326:	4b2f      	ldr	r3, [pc, #188]	@ (80023e4 <status_ACKsend_update+0xd0>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d04f      	beq.n	80023d0 <status_ACKsend_update+0xbc>
			    {
			    	if(retryCount < MAX_RETRIES){
 8002330:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <status_ACKsend_update+0xd4>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d833      	bhi.n	80023a2 <status_ACKsend_update+0x8e>
			    		while (g_pkt_lock);
 800233a:	bf00      	nop
 800233c:	4b2b      	ldr	r3, [pc, #172]	@ (80023ec <status_ACKsend_update+0xd8>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1fa      	bne.n	800233c <status_ACKsend_update+0x28>
			    		g_pkt_lock = 1;
 8002346:	4b29      	ldr	r3, [pc, #164]	@ (80023ec <status_ACKsend_update+0xd8>)
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
			            memcpy(sendBuffer, (const void *)g_encoded_pkt, g_encoded_len);
 800234c:	4b28      	ldr	r3, [pc, #160]	@ (80023f0 <status_ACKsend_update+0xdc>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	4927      	ldr	r1, [pc, #156]	@ (80023f4 <status_ACKsend_update+0xe0>)
 8002356:	4828      	ldr	r0, [pc, #160]	@ (80023f8 <status_ACKsend_update+0xe4>)
 8002358:	f00f f8ff 	bl	801155a <memcpy>
			            for (int i = 0; i < g_encoded_len; i++) {
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	e00a      	b.n	8002378 <status_ACKsend_update+0x64>
			                Uart_write(USART1, sendBuffer[i]);
 8002362:	4a25      	ldr	r2, [pc, #148]	@ (80023f8 <status_ACKsend_update+0xe4>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4619      	mov	r1, r3
 800236c:	4823      	ldr	r0, [pc, #140]	@ (80023fc <status_ACKsend_update+0xe8>)
 800236e:	f7ff fcef 	bl	8001d50 <Uart_write>
			            for (int i = 0; i < g_encoded_len; i++) {
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3301      	adds	r3, #1
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <status_ACKsend_update+0xdc>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4293      	cmp	r3, r2
 8002384:	dbed      	blt.n	8002362 <status_ACKsend_update+0x4e>
			            }
						retryCount++;
 8002386:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <status_ACKsend_update+0xd4>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <status_ACKsend_update+0xd4>)
 8002392:	701a      	strb	r2, [r3, #0]
						sendFlag = 1;
 8002394:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <status_ACKsend_update+0xd0>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
						g_pkt_lock = 0;
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <status_ACKsend_update+0xd8>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e016      	b.n	80023d0 <status_ACKsend_update+0xbc>
			    	}
			    	else {
			    		retryCount = 0;
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <status_ACKsend_update+0xd4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
			    		clear_send_flag();
 80023a8:	f7ff ff68 	bl	800227c <clear_send_flag>

//			    		Uart_sendstring(UART5, "\nTIMEOUT_NORESPONE");
//			    		Uart_sendstring(UART5, "\r\n> ");
			    		Uart_sendstring(UART4, "\nTIMEOUT_NORESPONE");
 80023ac:	4914      	ldr	r1, [pc, #80]	@ (8002400 <status_ACKsend_update+0xec>)
 80023ae:	4815      	ldr	r0, [pc, #84]	@ (8002404 <status_ACKsend_update+0xf0>)
 80023b0:	f7ff fe22 	bl	8001ff8 <Uart_sendstring>
			    		Uart_sendstring(UART4, "\r\n> ");
 80023b4:	4914      	ldr	r1, [pc, #80]	@ (8002408 <status_ACKsend_update+0xf4>)
 80023b6:	4813      	ldr	r0, [pc, #76]	@ (8002404 <status_ACKsend_update+0xf0>)
 80023b8:	f7ff fe1e 	bl	8001ff8 <Uart_sendstring>
			    		Uart_sendstring(USART2, "\nTIMEOUT_NORESPONE");
 80023bc:	4910      	ldr	r1, [pc, #64]	@ (8002400 <status_ACKsend_update+0xec>)
 80023be:	4813      	ldr	r0, [pc, #76]	@ (800240c <status_ACKsend_update+0xf8>)
 80023c0:	f7ff fe1a 	bl	8001ff8 <Uart_sendstring>
			    		Uart_sendstring(USART2, "\r\n> ");
 80023c4:	4910      	ldr	r1, [pc, #64]	@ (8002408 <status_ACKsend_update+0xf4>)
 80023c6:	4811      	ldr	r0, [pc, #68]	@ (800240c <status_ACKsend_update+0xf8>)
 80023c8:	f7ff fe16 	bl	8001ff8 <Uart_sendstring>
			    		clear_send_flag();
 80023cc:	f7ff ff56 	bl	800227c <clear_send_flag>
			        }


			    }

				SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);	//restart
 80023d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023d4:	2003      	movs	r0, #3
 80023d6:	f00a f8f3 	bl	800c5c0 <SCH_TIM_Start>

			}


		//	[set trang thai]
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000788d 	.word	0x2000788d
 80023e8:	2000788e 	.word	0x2000788e
 80023ec:	2000788c 	.word	0x2000788c
 80023f0:	2000788b 	.word	0x2000788b
 80023f4:	2000778c 	.word	0x2000778c
 80023f8:	20007890 	.word	0x20007890
 80023fc:	40011000 	.word	0x40011000
 8002400:	08013ef0 	.word	0x08013ef0
 8002404:	40004c00 	.word	0x40004c00
 8002408:	08013f04 	.word	0x08013f04
 800240c:	40004400 	.word	0x40004400

08002410 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	619a      	str	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <IOU_create_task>:
};



void IOU_create_task(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&IOU_task_context.taskHandle, &IOU_task_context.taskProperty);
 8002430:	4906      	ldr	r1, [pc, #24]	@ (800244c <IOU_create_task+0x20>)
 8002432:	4807      	ldr	r0, [pc, #28]	@ (8002450 <IOU_create_task+0x24>)
 8002434:	f00a f8f0 	bl	800c618 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 8002438:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800243c:	2007      	movs	r0, #7
 800243e:	f00a f8bf 	bl	800c5c0 <SCH_TIM_Start>
    Ringbuf_init();
 8002442:	f7ff fadb 	bl	80019fc <Ringbuf_init>
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200000d8 	.word	0x200000d8
 8002450:	200000d4 	.word	0x200000d4

08002454 <IOU_update_task>:
volatile uint8_t send_rs422 = 0;

volatile uint8_t timeout_counter_iou = 0;


void IOU_update_task(void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 800245a:	4b31      	ldr	r3, [pc, #196]	@ (8002520 <IOU_update_task+0xcc>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d059      	beq.n	8002518 <IOU_update_task+0xc4>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_IOU))
 8002464:	2007      	movs	r0, #7
 8002466:	f00a f8c1 	bl	800c5ec <SCH_TIM_HasCompleted>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d053      	beq.n	8002518 <IOU_update_task+0xc4>
		{

			if(!sendFlag){
 8002470:	4b2c      	ldr	r3, [pc, #176]	@ (8002524 <IOU_update_task+0xd0>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d136      	bne.n	80024e8 <IOU_update_task+0x94>
				if(!send_rs422){
 800247a:	4b2b      	ldr	r3, [pc, #172]	@ (8002528 <IOU_update_task+0xd4>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d149      	bne.n	8002518 <IOU_update_task+0xc4>
					if(receive_pduFlag&&receive_pmuFlag){
 8002484:	4b29      	ldr	r3, [pc, #164]	@ (800252c <IOU_update_task+0xd8>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d044      	beq.n	8002518 <IOU_update_task+0xc4>
 800248e:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <IOU_update_task+0xdc>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03f      	beq.n	8002518 <IOU_update_task+0xc4>
						switch_board(3);
 8002498:	2003      	movs	r0, #3
 800249a:	f005 fb99 	bl	8007bd0 <switch_board>
						Uart_flush(USART1);
 800249e:	4825      	ldr	r0, [pc, #148]	@ (8002534 <IOU_update_task+0xe0>)
 80024a0:	f7ff fdc2 	bl	8002028 <Uart_flush>

						frame = iou_frame;
 80024a4:	4b24      	ldr	r3, [pc, #144]	@ (8002538 <IOU_update_task+0xe4>)
 80024a6:	60bb      	str	r3, [r7, #8]
						frame_len = sizeof(iou_frame);
 80024a8:	2309      	movs	r3, #9
 80024aa:	71fb      	strb	r3, [r7, #7]
						for (int i = 0; i < frame_len; i++) {
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e00a      	b.n	80024c8 <IOU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	4413      	add	r3, r2
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	481d      	ldr	r0, [pc, #116]	@ (8002534 <IOU_update_task+0xe0>)
 80024be:	f7ff fc47 	bl	8001d50 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	dbf0      	blt.n	80024b2 <IOU_update_task+0x5e>
						}
						receive_iouFlag = 0;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <IOU_update_task+0xe8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80024d6:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <IOU_update_task+0xd4>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 80024dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024e0:	2007      	movs	r0, #7
 80024e2:	f00a f86d 	bl	800c5c0 <SCH_TIM_Start>
					//Timeout memset 0xff
				}
			}
		}
	}
}
 80024e6:	e017      	b.n	8002518 <IOU_update_task+0xc4>
				if(!receive_iouFlag){
 80024e8:	4b14      	ldr	r3, [pc, #80]	@ (800253c <IOU_update_task+0xe8>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d112      	bne.n	8002518 <IOU_update_task+0xc4>
					send_rs422 = 0;
 80024f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <IOU_update_task+0xd4>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
					receive_iouFlag = 1;
 80024f8:	4b10      	ldr	r3, [pc, #64]	@ (800253c <IOU_update_task+0xe8>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
					SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 80024fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002502:	2007      	movs	r0, #7
 8002504:	f00a f85c 	bl	800c5c0 <SCH_TIM_Start>
					memset(&nextBuffer[8], 0xFF, 49);
 8002508:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <IOU_update_task+0xec>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3308      	adds	r3, #8
 800250e:	2231      	movs	r2, #49	@ 0x31
 8002510:	21ff      	movs	r1, #255	@ 0xff
 8002512:	4618      	mov	r0, r3
 8002514:	f00e ff1d 	bl	8011352 <memset>
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20007abd 	.word	0x20007abd
 8002524:	2000788d 	.word	0x2000788d
 8002528:	20007992 	.word	0x20007992
 800252c:	200000e8 	.word	0x200000e8
 8002530:	200000e9 	.word	0x200000e9
 8002534:	40011000 	.word	0x40011000
 8002538:	200000c8 	.word	0x200000c8
 800253c:	200000ea 	.word	0x200000ea
 8002540:	20002158 	.word	0x20002158

08002544 <Cmd_iou_set_temp>:

volatile uint8_t uart_choose_uart5 = 0;
volatile uint8_t uart_choose_usart2 = 0;

int Cmd_iou_set_temp(int argc, char *argv[])
{
 8002544:	b580      	push	{r7, lr}
 8002546:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800254a:	af02      	add	r7, sp, #8
 800254c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002550:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002554:	6018      	str	r0, [r3, #0]
 8002556:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800255a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800255e:	6019      	str	r1, [r3, #0]


    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8002560:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002564:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b03      	cmp	r3, #3
 800256c:	dc01      	bgt.n	8002572 <Cmd_iou_set_temp+0x2e>
 800256e:	2303      	movs	r3, #3
 8002570:	e0e4      	b.n	800273c <Cmd_iou_set_temp+0x1f8>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8002572:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002576:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b04      	cmp	r3, #4
 800257e:	dd01      	ble.n	8002584 <Cmd_iou_set_temp+0x40>
 8002580:	2302      	movs	r3, #2
 8002582:	e0db      	b.n	800273c <Cmd_iou_set_temp+0x1f8>

    uint8_t channel = atoi(argv[1]);
 8002584:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002588:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3304      	adds	r3, #4
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f00d f8ad 	bl	800f6f2 <atoi>
 8002598:	4603      	mov	r3, r0
 800259a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800259e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d901      	bls.n	80025aa <Cmd_iou_set_temp+0x66>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e0c8      	b.n	800273c <Cmd_iou_set_temp+0x1f8>

    uint16_t temp = atoi(argv[2]);
 80025aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025ae:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3308      	adds	r3, #8
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f00d f89a 	bl	800f6f2 <atoi>
 80025be:	4603      	mov	r3, r0
 80025c0:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (temp > 500)    return CMDLINE_INVALID_ARG;
 80025c4:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80025c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025cc:	d901      	bls.n	80025d2 <Cmd_iou_set_temp+0x8e>
 80025ce:	2304      	movs	r3, #4
 80025d0:	e0b4      	b.n	800273c <Cmd_iou_set_temp+0x1f8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80025d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025d6:	485c      	ldr	r0, [pc, #368]	@ (8002748 <Cmd_iou_set_temp+0x204>)
 80025d8:	f7ff ff1a 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80025dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025e0:	4859      	ldr	r0, [pc, #356]	@ (8002748 <Cmd_iou_set_temp+0x204>)
 80025e2:	f7ff ff15 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80025e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025ea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025f4:	3b01      	subs	r3, #1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80025fc:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	4413      	add	r3, r2
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800260a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800260e:	4a4f      	ldr	r2, [pc, #316]	@ (800274c <Cmd_iou_set_temp+0x208>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d103      	bne.n	800261c <Cmd_iou_set_temp+0xd8>
    	uart_choose_uart5 = 1;
 8002614:	4b4e      	ldr	r3, [pc, #312]	@ (8002750 <Cmd_iou_set_temp+0x20c>)
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e002      	b.n	8002622 <Cmd_iou_set_temp+0xde>
    }else{
    	uart_choose_uart5 = 0;
 800261c:	4b4c      	ldr	r3, [pc, #304]	@ (8002750 <Cmd_iou_set_temp+0x20c>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002622:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002626:	4a4b      	ldr	r2, [pc, #300]	@ (8002754 <Cmd_iou_set_temp+0x210>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d103      	bne.n	8002634 <Cmd_iou_set_temp+0xf0>
    	uart_choose_usart2 = 1;
 800262c:	4b4a      	ldr	r3, [pc, #296]	@ (8002758 <Cmd_iou_set_temp+0x214>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e002      	b.n	800263a <Cmd_iou_set_temp+0xf6>
    }else{
    	uart_choose_usart2 = 0;
 8002634:	4b48      	ldr	r3, [pc, #288]	@ (8002758 <Cmd_iou_set_temp+0x214>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
    }

    // Create the command payload
    uint8_t cmd  = CMD_CODE_SET_TEMP;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0]  = channel;
 8002640:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002644:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(temp >> 8);   //high
 8002648:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	b29b      	uxth	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(temp & 0xFF); //low
 8002656:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    fsp_packet_t  fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002660:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002664:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	2301      	movs	r3, #1
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2305      	movs	r3, #5
 8002674:	2203      	movs	r2, #3
 8002676:	f00a f97d 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800267a:	f107 020f 	add.w	r2, r7, #15
 800267e:	f107 0110 	add.w	r1, r7, #16
 8002682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002686:	4618      	mov	r0, r3
 8002688:	f00a f9fa 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 800268c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002690:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02c      	beq.n	80026f4 <Cmd_iou_set_temp+0x1b0>
        for (int i = 0; i < frame_len; i++) {
 800269a:	2300      	movs	r3, #0
 800269c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80026a0:	e010      	b.n	80026c4 <Cmd_iou_set_temp+0x180>
            Uart_write(USART1, encoded_frame[i]);
 80026a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026a6:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80026aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	4619      	mov	r1, r3
 80026b4:	4829      	ldr	r0, [pc, #164]	@ (800275c <Cmd_iou_set_temp+0x218>)
 80026b6:	f7ff fb4b 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80026ba:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026be:	3301      	adds	r3, #1
 80026c0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80026c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026c8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026d4:	4293      	cmp	r3, r2
 80026d6:	dbe4      	blt.n	80026a2 <Cmd_iou_set_temp+0x15e>

        }
        set_fsp_packet(encoded_frame, frame_len);
 80026d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026dc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	f107 0310 	add.w	r3, r7, #16
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fdd3 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 80026ee:	f7ff fdb9 	bl	8002264 <set_send_flag>
 80026f2:	e022      	b.n	800273a <Cmd_iou_set_temp+0x1f6>
    }else{
    	fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80026f4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80026f8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80026fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	2301      	movs	r3, #1
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2305      	movs	r3, #5
 8002708:	2203      	movs	r2, #3
 800270a:	f00a f933 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
    	frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800270e:	f107 020f 	add.w	r2, r7, #15
 8002712:	f107 0110 	add.w	r1, r7, #16
 8002716:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800271a:	4618      	mov	r0, r3
 800271c:	f00a f9b0 	bl	800ca80 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8002720:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002724:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fdaf 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8002736:	f7ff fd95 	bl	8002264 <set_send_flag>
//  ==>>>> khi gui thi mo cong ra, + delay vai ms -> Set co`
//	==>>>> Neu vay thi luon luon mo cong, khi mà nhắn bên 1 2 3 4, nhắn bên 1 thì mở luôn bên 1
//	==>>>> Nhắn bên 2 thì mở luôn bên 2 nếu mà chưa nhận được ack -> busy please wait (processing...)
//  ==>>>> Đoạn đấy bỏ vào trong timeout -> Sau đó mới hiện ok, hoặc done gì đó

    return CMDLINE_PENDING;
 800273a:	2305      	movs	r3, #5
}
 800273c:	4618      	mov	r0, r3
 800273e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40020000 	.word	0x40020000
 800274c:	40005000 	.word	0x40005000
 8002750:	20007993 	.word	0x20007993
 8002754:	40004400 	.word	0x40004400
 8002758:	20007994 	.word	0x20007994
 800275c:	40011000 	.word	0x40011000

08002760 <Cmd_iou_get_temp>:


int Cmd_iou_get_temp(int argc, char *argv[])
{
 8002760:	b580      	push	{r7, lr}
 8002762:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002766:	af02      	add	r7, sp, #8
 8002768:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800276c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002770:	6018      	str	r0, [r3, #0]
 8002772:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002776:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800277a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 800277c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002780:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b03      	cmp	r3, #3
 8002788:	dc01      	bgt.n	800278e <Cmd_iou_get_temp+0x2e>
 800278a:	2303      	movs	r3, #3
 800278c:	e0db      	b.n	8002946 <Cmd_iou_get_temp+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 800278e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002792:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b04      	cmp	r3, #4
 800279a:	dd01      	ble.n	80027a0 <Cmd_iou_get_temp+0x40>
 800279c:	2302      	movs	r3, #2
 800279e:	e0d2      	b.n	8002946 <Cmd_iou_get_temp+0x1e6>


    uint8_t sensor = atoi(argv[1]);
 80027a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027a4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3304      	adds	r3, #4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f00c ff9f 	bl	800f6f2 <atoi>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (sensor > 1)    return CMDLINE_INVALID_ARG;
 80027ba:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d901      	bls.n	80027c6 <Cmd_iou_get_temp+0x66>
 80027c2:	2304      	movs	r3, #4
 80027c4:	e0bf      	b.n	8002946 <Cmd_iou_get_temp+0x1e6>

    uint8_t channel = atoi(argv[2]);
 80027c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027ca:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3308      	adds	r3, #8
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f00c ff8c 	bl	800f6f2 <atoi>
 80027da:	4603      	mov	r3, r0
 80027dc:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80027e0:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d901      	bls.n	80027ec <Cmd_iou_get_temp+0x8c>
 80027e8:	2304      	movs	r3, #4
 80027ea:	e0ac      	b.n	8002946 <Cmd_iou_get_temp+0x1e6>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80027ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027f0:	4857      	ldr	r0, [pc, #348]	@ (8002950 <Cmd_iou_get_temp+0x1f0>)
 80027f2:	f7ff fe0d 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80027f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027fa:	4855      	ldr	r0, [pc, #340]	@ (8002950 <Cmd_iou_get_temp+0x1f0>)
 80027fc:	f7ff fe08 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002800:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002804:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800280e:	3b01      	subs	r3, #1
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002816:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	4413      	add	r3, r2
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002824:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002828:	4a4a      	ldr	r2, [pc, #296]	@ (8002954 <Cmd_iou_get_temp+0x1f4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d103      	bne.n	8002836 <Cmd_iou_get_temp+0xd6>
    	uart_choose_uart5 = 1;
 800282e:	4b4a      	ldr	r3, [pc, #296]	@ (8002958 <Cmd_iou_get_temp+0x1f8>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e002      	b.n	800283c <Cmd_iou_get_temp+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8002836:	4b48      	ldr	r3, [pc, #288]	@ (8002958 <Cmd_iou_get_temp+0x1f8>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800283c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002840:	4a46      	ldr	r2, [pc, #280]	@ (800295c <Cmd_iou_get_temp+0x1fc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d103      	bne.n	800284e <Cmd_iou_get_temp+0xee>
    	uart_choose_usart2 = 1;
 8002846:	4b46      	ldr	r3, [pc, #280]	@ (8002960 <Cmd_iou_get_temp+0x200>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e002      	b.n	8002854 <Cmd_iou_get_temp+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 800284e:	4b44      	ldr	r3, [pc, #272]	@ (8002960 <Cmd_iou_get_temp+0x200>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_GET_TEMP;
 8002854:	2302      	movs	r3, #2
 8002856:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];


    payload[0] = sensor;
 800285a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800285e:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1] = channel;
 8002862:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002866:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800286a:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800286e:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002872:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2301      	movs	r3, #1
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2305      	movs	r3, #5
 800287e:	2202      	movs	r2, #2
 8002880:	f00a f878 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002884:	f107 020f 	add.w	r2, r7, #15
 8002888:	f107 0110 	add.w	r1, r7, #16
 800288c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002890:	4618      	mov	r0, r3
 8002892:	f00a f8f5 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 8002896:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800289a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02c      	beq.n	80028fe <Cmd_iou_get_temp+0x19e>
        for (int i = 0; i < frame_len; i++) {
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80028aa:	e010      	b.n	80028ce <Cmd_iou_get_temp+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 80028ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028b0:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80028b4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80028b8:	4413      	add	r3, r2
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	4829      	ldr	r0, [pc, #164]	@ (8002964 <Cmd_iou_get_temp+0x204>)
 80028c0:	f7ff fa46 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80028c4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80028c8:	3301      	adds	r3, #1
 80028ca:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80028ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028d2:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80028de:	4293      	cmp	r3, r2
 80028e0:	dbe4      	blt.n	80028ac <Cmd_iou_get_temp+0x14c>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80028e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028e6:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fcce 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80028f8:	f7ff fcb4 	bl	8002264 <set_send_flag>
 80028fc:	e022      	b.n	8002944 <Cmd_iou_get_temp+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80028fe:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002902:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002906:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	2301      	movs	r3, #1
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2305      	movs	r3, #5
 8002912:	2202      	movs	r2, #2
 8002914:	f00a f82e 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002918:	f107 020f 	add.w	r2, r7, #15
 800291c:	f107 0110 	add.w	r1, r7, #16
 8002920:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002924:	4618      	mov	r0, r3
 8002926:	f00a f8ab 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800292a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800292e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fcaa 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002940:	f7ff fc90 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002944:	2305      	movs	r3, #5
}
 8002946:	4618      	mov	r0, r3
 8002948:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40020000 	.word	0x40020000
 8002954:	40005000 	.word	0x40005000
 8002958:	20007993 	.word	0x20007993
 800295c:	40004400 	.word	0x40004400
 8002960:	20007994 	.word	0x20007994
 8002964:	40011000 	.word	0x40011000

08002968 <Cmd_iou_temp_setpoint>:

int Cmd_iou_temp_setpoint(int argc, char *argv[])
{
 8002968:	b580      	push	{r7, lr}
 800296a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800296e:	af02      	add	r7, sp, #8
 8002970:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002974:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002978:	6018      	str	r0, [r3, #0]
 800297a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800297e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002982:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002984:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002988:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b02      	cmp	r3, #2
 8002990:	dc01      	bgt.n	8002996 <Cmd_iou_temp_setpoint+0x2e>
 8002992:	2303      	movs	r3, #3
 8002994:	e0c4      	b.n	8002b20 <Cmd_iou_temp_setpoint+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002996:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800299a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	dd01      	ble.n	80029a8 <Cmd_iou_temp_setpoint+0x40>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e0bb      	b.n	8002b20 <Cmd_iou_temp_setpoint+0x1b8>
    uint8_t channel = atoi(argv[1]);
 80029a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029ac:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3304      	adds	r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f00c fe9b 	bl	800f6f2 <atoi>
 80029bc:	4603      	mov	r3, r0
 80029be:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80029c2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d901      	bls.n	80029ce <Cmd_iou_temp_setpoint+0x66>
 80029ca:	2304      	movs	r3, #4
 80029cc:	e0a8      	b.n	8002b20 <Cmd_iou_temp_setpoint+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80029ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029d2:	4856      	ldr	r0, [pc, #344]	@ (8002b2c <Cmd_iou_temp_setpoint+0x1c4>)
 80029d4:	f7ff fd1c 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80029d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029dc:	4853      	ldr	r0, [pc, #332]	@ (8002b2c <Cmd_iou_temp_setpoint+0x1c4>)
 80029de:	f7ff fd17 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80029e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029e6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029f0:	3b01      	subs	r3, #1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80029f8:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002a06:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002a0a:	4a49      	ldr	r2, [pc, #292]	@ (8002b30 <Cmd_iou_temp_setpoint+0x1c8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d103      	bne.n	8002a18 <Cmd_iou_temp_setpoint+0xb0>
    	uart_choose_uart5 = 1;
 8002a10:	4b48      	ldr	r3, [pc, #288]	@ (8002b34 <Cmd_iou_temp_setpoint+0x1cc>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e002      	b.n	8002a1e <Cmd_iou_temp_setpoint+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002a18:	4b46      	ldr	r3, [pc, #280]	@ (8002b34 <Cmd_iou_temp_setpoint+0x1cc>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002a1e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002a22:	4a45      	ldr	r2, [pc, #276]	@ (8002b38 <Cmd_iou_temp_setpoint+0x1d0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d103      	bne.n	8002a30 <Cmd_iou_temp_setpoint+0xc8>
    	uart_choose_usart2 = 1;
 8002a28:	4b44      	ldr	r3, [pc, #272]	@ (8002b3c <Cmd_iou_temp_setpoint+0x1d4>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e002      	b.n	8002a36 <Cmd_iou_temp_setpoint+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002a30:	4b42      	ldr	r3, [pc, #264]	@ (8002b3c <Cmd_iou_temp_setpoint+0x1d4>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEMP_SETPOINT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002a3c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002a40:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002a44:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002a48:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002a4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	2301      	movs	r3, #1
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2305      	movs	r3, #5
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f009 ff8b 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002a5e:	f107 020f 	add.w	r2, r7, #15
 8002a62:	f107 0110 	add.w	r1, r7, #16
 8002a66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f00a f808 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 8002a70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a74:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d02c      	beq.n	8002ad8 <Cmd_iou_temp_setpoint+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002a84:	e010      	b.n	8002aa8 <Cmd_iou_temp_setpoint+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002a86:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a8a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002a8e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	4619      	mov	r1, r3
 8002a98:	4829      	ldr	r0, [pc, #164]	@ (8002b40 <Cmd_iou_temp_setpoint+0x1d8>)
 8002a9a:	f7ff f959 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002a9e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002aa8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002aac:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	dbe4      	blt.n	8002a86 <Cmd_iou_temp_setpoint+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002abc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ac0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	f107 0310 	add.w	r3, r7, #16
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fbe1 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002ad2:	f7ff fbc7 	bl	8002264 <set_send_flag>
 8002ad6:	e022      	b.n	8002b1e <Cmd_iou_temp_setpoint+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002ad8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002adc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002ae0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2305      	movs	r3, #5
 8002aec:	2201      	movs	r2, #1
 8002aee:	f009 ff41 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002af2:	f107 020f 	add.w	r2, r7, #15
 8002af6:	f107 0110 	add.w	r1, r7, #16
 8002afa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002afe:	4618      	mov	r0, r3
 8002b00:	f009 ffbe 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002b04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b08:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fbbd 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002b1a:	f7ff fba3 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002b1e:	2305      	movs	r3, #5
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	40005000 	.word	0x40005000
 8002b34:	20007993 	.word	0x20007993
 8002b38:	40004400 	.word	0x40004400
 8002b3c:	20007994 	.word	0x20007994
 8002b40:	40011000 	.word	0x40011000

08002b44 <Cmd_iou_tec_ena>:

int Cmd_iou_tec_ena(int argc, char *argv[])
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002b4a:	af02      	add	r7, sp, #8
 8002b4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b50:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b54:	6018      	str	r0, [r3, #0]
 8002b56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b5a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002b5e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002b60:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b64:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	dc01      	bgt.n	8002b72 <Cmd_iou_tec_ena+0x2e>
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0c4      	b.n	8002cfc <Cmd_iou_tec_ena+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002b72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b76:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	dd01      	ble.n	8002b84 <Cmd_iou_tec_ena+0x40>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e0bb      	b.n	8002cfc <Cmd_iou_tec_ena+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002b84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b88:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f00c fdad 	bl	800f6f2 <atoi>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002b9e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d901      	bls.n	8002baa <Cmd_iou_tec_ena+0x66>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e0a8      	b.n	8002cfc <Cmd_iou_tec_ena+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002baa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bae:	4856      	ldr	r0, [pc, #344]	@ (8002d08 <Cmd_iou_tec_ena+0x1c4>)
 8002bb0:	f7ff fc2e 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002bb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bb8:	4853      	ldr	r0, [pc, #332]	@ (8002d08 <Cmd_iou_tec_ena+0x1c4>)
 8002bba:	f7ff fc29 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002bbe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bc2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002bd4:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002be2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002be6:	4a49      	ldr	r2, [pc, #292]	@ (8002d0c <Cmd_iou_tec_ena+0x1c8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d103      	bne.n	8002bf4 <Cmd_iou_tec_ena+0xb0>
    	uart_choose_uart5 = 1;
 8002bec:	4b48      	ldr	r3, [pc, #288]	@ (8002d10 <Cmd_iou_tec_ena+0x1cc>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e002      	b.n	8002bfa <Cmd_iou_tec_ena+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002bf4:	4b46      	ldr	r3, [pc, #280]	@ (8002d10 <Cmd_iou_tec_ena+0x1cc>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002bfa:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002bfe:	4a45      	ldr	r2, [pc, #276]	@ (8002d14 <Cmd_iou_tec_ena+0x1d0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d103      	bne.n	8002c0c <Cmd_iou_tec_ena+0xc8>
    	uart_choose_usart2 = 1;
 8002c04:	4b44      	ldr	r3, [pc, #272]	@ (8002d18 <Cmd_iou_tec_ena+0x1d4>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e002      	b.n	8002c12 <Cmd_iou_tec_ena+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002c0c:	4b42      	ldr	r3, [pc, #264]	@ (8002d18 <Cmd_iou_tec_ena+0x1d4>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_ENA;
 8002c12:	2304      	movs	r3, #4
 8002c14:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002c18:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002c1c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002c20:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002c24:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002c28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	2301      	movs	r3, #1
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2305      	movs	r3, #5
 8002c34:	2201      	movs	r2, #1
 8002c36:	f009 fe9d 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002c3a:	f107 020f 	add.w	r2, r7, #15
 8002c3e:	f107 0110 	add.w	r1, r7, #16
 8002c42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c46:	4618      	mov	r0, r3
 8002c48:	f009 ff1a 	bl	800ca80 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002c4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c50:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d02c      	beq.n	8002cb4 <Cmd_iou_tec_ena+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002c60:	e010      	b.n	8002c84 <Cmd_iou_tec_ena+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002c62:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c66:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002c6a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4619      	mov	r1, r3
 8002c74:	4829      	ldr	r0, [pc, #164]	@ (8002d1c <Cmd_iou_tec_ena+0x1d8>)
 8002c76:	f7ff f86b 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002c7a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002c84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c88:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002c94:	4293      	cmp	r3, r2
 8002c96:	dbe4      	blt.n	8002c62 <Cmd_iou_tec_ena+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002c98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c9c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	f107 0310 	add.w	r3, r7, #16
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff faf3 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002cae:	f7ff fad9 	bl	8002264 <set_send_flag>
 8002cb2:	e022      	b.n	8002cfa <Cmd_iou_tec_ena+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002cb4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002cb8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002cbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2305      	movs	r3, #5
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f009 fe53 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002cce:	f107 020f 	add.w	r2, r7, #15
 8002cd2:	f107 0110 	add.w	r1, r7, #16
 8002cd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f009 fed0 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002ce0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ce4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff facf 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002cf6:	f7ff fab5 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002cfa:	2305      	movs	r3, #5
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	40005000 	.word	0x40005000
 8002d10:	20007993 	.word	0x20007993
 8002d14:	40004400 	.word	0x40004400
 8002d18:	20007994 	.word	0x20007994
 8002d1c:	40011000 	.word	0x40011000

08002d20 <Cmd_iou_tec_dis>:

int Cmd_iou_tec_dis(int argc, char *argv[])
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002d26:	af02      	add	r7, sp, #8
 8002d28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d2c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d30:	6018      	str	r0, [r3, #0]
 8002d32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d36:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002d3a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002d3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d40:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	dc01      	bgt.n	8002d4e <Cmd_iou_tec_dis+0x2e>
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0c4      	b.n	8002ed8 <Cmd_iou_tec_dis+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002d4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d52:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	dd01      	ble.n	8002d60 <Cmd_iou_tec_dis+0x40>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e0bb      	b.n	8002ed8 <Cmd_iou_tec_dis+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002d60:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d64:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f00c fcbf 	bl	800f6f2 <atoi>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002d7a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d901      	bls.n	8002d86 <Cmd_iou_tec_dis+0x66>
 8002d82:	2304      	movs	r3, #4
 8002d84:	e0a8      	b.n	8002ed8 <Cmd_iou_tec_dis+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002d86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d8a:	4856      	ldr	r0, [pc, #344]	@ (8002ee4 <Cmd_iou_tec_dis+0x1c4>)
 8002d8c:	f7ff fb40 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002d90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d94:	4853      	ldr	r0, [pc, #332]	@ (8002ee4 <Cmd_iou_tec_dis+0x1c4>)
 8002d96:	f7ff fb3b 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002d9a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d9e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002da8:	3b01      	subs	r3, #1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002db0:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	4413      	add	r3, r2
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002dbe:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002dc2:	4a49      	ldr	r2, [pc, #292]	@ (8002ee8 <Cmd_iou_tec_dis+0x1c8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d103      	bne.n	8002dd0 <Cmd_iou_tec_dis+0xb0>
    	uart_choose_uart5 = 1;
 8002dc8:	4b48      	ldr	r3, [pc, #288]	@ (8002eec <Cmd_iou_tec_dis+0x1cc>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e002      	b.n	8002dd6 <Cmd_iou_tec_dis+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002dd0:	4b46      	ldr	r3, [pc, #280]	@ (8002eec <Cmd_iou_tec_dis+0x1cc>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002dd6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002dda:	4a45      	ldr	r2, [pc, #276]	@ (8002ef0 <Cmd_iou_tec_dis+0x1d0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d103      	bne.n	8002de8 <Cmd_iou_tec_dis+0xc8>
    	uart_choose_usart2 = 1;
 8002de0:	4b44      	ldr	r3, [pc, #272]	@ (8002ef4 <Cmd_iou_tec_dis+0x1d4>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e002      	b.n	8002dee <Cmd_iou_tec_dis+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002de8:	4b42      	ldr	r3, [pc, #264]	@ (8002ef4 <Cmd_iou_tec_dis+0x1d4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_TEC_DIS;
 8002dee:	2305      	movs	r3, #5
 8002df0:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002df4:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002df8:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002dfc:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002e00:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002e04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2305      	movs	r3, #5
 8002e10:	2201      	movs	r2, #1
 8002e12:	f009 fdaf 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002e16:	f107 020f 	add.w	r2, r7, #15
 8002e1a:	f107 0110 	add.w	r1, r7, #16
 8002e1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e22:	4618      	mov	r0, r3
 8002e24:	f009 fe2c 	bl	800ca80 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002e28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e2c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d02c      	beq.n	8002e90 <Cmd_iou_tec_dis+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002e3c:	e010      	b.n	8002e60 <Cmd_iou_tec_dis+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002e3e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e42:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002e46:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4829      	ldr	r0, [pc, #164]	@ (8002ef8 <Cmd_iou_tec_dis+0x1d8>)
 8002e52:	f7fe ff7d 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002e56:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002e60:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e64:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e70:	4293      	cmp	r3, r2
 8002e72:	dbe4      	blt.n	8002e3e <Cmd_iou_tec_dis+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002e74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e78:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fa05 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002e8a:	f7ff f9eb 	bl	8002264 <set_send_flag>
 8002e8e:	e022      	b.n	8002ed6 <Cmd_iou_tec_dis+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002e90:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002e94:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002e98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f009 fd65 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002eaa:	f107 020f 	add.w	r2, r7, #15
 8002eae:	f107 0110 	add.w	r1, r7, #16
 8002eb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f009 fde2 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002ebc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ec0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	f107 0310 	add.w	r3, r7, #16
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f9e1 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002ed2:	f7ff f9c7 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002ed6:	2305      	movs	r3, #5
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40020000 	.word	0x40020000
 8002ee8:	40005000 	.word	0x40005000
 8002eec:	20007993 	.word	0x20007993
 8002ef0:	40004400 	.word	0x40004400
 8002ef4:	20007994 	.word	0x20007994
 8002ef8:	40011000 	.word	0x40011000

08002efc <Cmd_iou_tec_ena_auto>:

int Cmd_iou_tec_ena_auto(int argc, char *argv[])
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002f02:	af02      	add	r7, sp, #8
 8002f04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f08:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f0c:	6018      	str	r0, [r3, #0]
 8002f0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f12:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f16:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002f18:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f1c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	dc01      	bgt.n	8002f2a <Cmd_iou_tec_ena_auto+0x2e>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0c4      	b.n	80030b4 <Cmd_iou_tec_ena_auto+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002f2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f2e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	dd01      	ble.n	8002f3c <Cmd_iou_tec_ena_auto+0x40>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e0bb      	b.n	80030b4 <Cmd_iou_tec_ena_auto+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002f3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f40:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3304      	adds	r3, #4
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f00c fbd1 	bl	800f6f2 <atoi>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002f56:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d901      	bls.n	8002f62 <Cmd_iou_tec_ena_auto+0x66>
 8002f5e:	2304      	movs	r3, #4
 8002f60:	e0a8      	b.n	80030b4 <Cmd_iou_tec_ena_auto+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002f62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f66:	4856      	ldr	r0, [pc, #344]	@ (80030c0 <Cmd_iou_tec_ena_auto+0x1c4>)
 8002f68:	f7ff fa52 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002f6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f70:	4853      	ldr	r0, [pc, #332]	@ (80030c0 <Cmd_iou_tec_ena_auto+0x1c4>)
 8002f72:	f7ff fa4d 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002f76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f7a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f84:	3b01      	subs	r3, #1
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002f8c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002f9a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002f9e:	4a49      	ldr	r2, [pc, #292]	@ (80030c4 <Cmd_iou_tec_ena_auto+0x1c8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d103      	bne.n	8002fac <Cmd_iou_tec_ena_auto+0xb0>
    	uart_choose_uart5 = 1;
 8002fa4:	4b48      	ldr	r3, [pc, #288]	@ (80030c8 <Cmd_iou_tec_ena_auto+0x1cc>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e002      	b.n	8002fb2 <Cmd_iou_tec_ena_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002fac:	4b46      	ldr	r3, [pc, #280]	@ (80030c8 <Cmd_iou_tec_ena_auto+0x1cc>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002fb2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002fb6:	4a45      	ldr	r2, [pc, #276]	@ (80030cc <Cmd_iou_tec_ena_auto+0x1d0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d103      	bne.n	8002fc4 <Cmd_iou_tec_ena_auto+0xc8>
    	uart_choose_usart2 = 1;
 8002fbc:	4b44      	ldr	r3, [pc, #272]	@ (80030d0 <Cmd_iou_tec_ena_auto+0x1d4>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e002      	b.n	8002fca <Cmd_iou_tec_ena_auto+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002fc4:	4b42      	ldr	r3, [pc, #264]	@ (80030d0 <Cmd_iou_tec_ena_auto+0x1d4>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_ENA_AUTO;
 8002fca:	2306      	movs	r3, #6
 8002fcc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002fd0:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002fd4:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002fd8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002fdc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002fe0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002fe4:	9301      	str	r3, [sp, #4]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	2305      	movs	r3, #5
 8002fec:	2201      	movs	r2, #1
 8002fee:	f009 fcc1 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002ff2:	f107 020f 	add.w	r2, r7, #15
 8002ff6:	f107 0110 	add.w	r1, r7, #16
 8002ffa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ffe:	4618      	mov	r0, r3
 8003000:	f009 fd3e 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 8003004:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003008:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02c      	beq.n	800306c <Cmd_iou_tec_ena_auto+0x170>
        for (int i = 0; i < frame_len; i++) {
 8003012:	2300      	movs	r3, #0
 8003014:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003018:	e010      	b.n	800303c <Cmd_iou_tec_ena_auto+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800301a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800301e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8003022:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003026:	4413      	add	r3, r2
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	4619      	mov	r1, r3
 800302c:	4829      	ldr	r0, [pc, #164]	@ (80030d4 <Cmd_iou_tec_ena_auto+0x1d8>)
 800302e:	f7fe fe8f 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003032:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003036:	3301      	adds	r3, #1
 8003038:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800303c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003040:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800304c:	4293      	cmp	r3, r2
 800304e:	dbe4      	blt.n	800301a <Cmd_iou_tec_ena_auto+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003050:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003054:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003058:	781a      	ldrb	r2, [r3, #0]
 800305a:	f107 0310 	add.w	r3, r7, #16
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff f917 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003066:	f7ff f8fd 	bl	8002264 <set_send_flag>
 800306a:	e022      	b.n	80030b2 <Cmd_iou_tec_ena_auto+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800306c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003070:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003074:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	2301      	movs	r3, #1
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2305      	movs	r3, #5
 8003080:	2201      	movs	r2, #1
 8003082:	f009 fc77 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003086:	f107 020f 	add.w	r2, r7, #15
 800308a:	f107 0110 	add.w	r1, r7, #16
 800308e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003092:	4618      	mov	r0, r3
 8003094:	f009 fcf4 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003098:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800309c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f8f3 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80030ae:	f7ff f8d9 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80030b2:	2305      	movs	r3, #5
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40005000 	.word	0x40005000
 80030c8:	20007993 	.word	0x20007993
 80030cc:	40004400 	.word	0x40004400
 80030d0:	20007994 	.word	0x20007994
 80030d4:	40011000 	.word	0x40011000

080030d8 <Cmd_iou_tec_dis_auto>:

int Cmd_iou_tec_dis_auto(int argc, char *argv[])
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80030de:	af02      	add	r7, sp, #8
 80030e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030e4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030e8:	6018      	str	r0, [r3, #0]
 80030ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030ee:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80030f2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80030f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030f8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	dc01      	bgt.n	8003106 <Cmd_iou_tec_dis_auto+0x2e>
 8003102:	2303      	movs	r3, #3
 8003104:	e0c4      	b.n	8003290 <Cmd_iou_tec_dis_auto+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8003106:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800310a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b03      	cmp	r3, #3
 8003112:	dd01      	ble.n	8003118 <Cmd_iou_tec_dis_auto+0x40>
 8003114:	2302      	movs	r3, #2
 8003116:	e0bb      	b.n	8003290 <Cmd_iou_tec_dis_auto+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8003118:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800311c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3304      	adds	r3, #4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f00c fae3 	bl	800f6f2 <atoi>
 800312c:	4603      	mov	r3, r0
 800312e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8003132:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003136:	2b03      	cmp	r3, #3
 8003138:	d901      	bls.n	800313e <Cmd_iou_tec_dis_auto+0x66>
 800313a:	2304      	movs	r3, #4
 800313c:	e0a8      	b.n	8003290 <Cmd_iou_tec_dis_auto+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800313e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003142:	4856      	ldr	r0, [pc, #344]	@ (800329c <Cmd_iou_tec_dis_auto+0x1c4>)
 8003144:	f7ff f964 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003148:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800314c:	4853      	ldr	r0, [pc, #332]	@ (800329c <Cmd_iou_tec_dis_auto+0x1c4>)
 800314e:	f7ff f95f 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003152:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003156:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003160:	3b01      	subs	r3, #1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003168:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	4413      	add	r3, r2
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003176:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800317a:	4a49      	ldr	r2, [pc, #292]	@ (80032a0 <Cmd_iou_tec_dis_auto+0x1c8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d103      	bne.n	8003188 <Cmd_iou_tec_dis_auto+0xb0>
    	uart_choose_uart5 = 1;
 8003180:	4b48      	ldr	r3, [pc, #288]	@ (80032a4 <Cmd_iou_tec_dis_auto+0x1cc>)
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e002      	b.n	800318e <Cmd_iou_tec_dis_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8003188:	4b46      	ldr	r3, [pc, #280]	@ (80032a4 <Cmd_iou_tec_dis_auto+0x1cc>)
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800318e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003192:	4a45      	ldr	r2, [pc, #276]	@ (80032a8 <Cmd_iou_tec_dis_auto+0x1d0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d103      	bne.n	80031a0 <Cmd_iou_tec_dis_auto+0xc8>
    	uart_choose_usart2 = 1;
 8003198:	4b44      	ldr	r3, [pc, #272]	@ (80032ac <Cmd_iou_tec_dis_auto+0x1d4>)
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e002      	b.n	80031a6 <Cmd_iou_tec_dis_auto+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80031a0:	4b42      	ldr	r3, [pc, #264]	@ (80032ac <Cmd_iou_tec_dis_auto+0x1d4>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_DIS_AUTO;
 80031a6:	2307      	movs	r3, #7
 80031a8:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 80031ac:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80031b0:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80031b4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80031b8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80031bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	2301      	movs	r3, #1
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2305      	movs	r3, #5
 80031c8:	2201      	movs	r2, #1
 80031ca:	f009 fbd3 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80031ce:	f107 020f 	add.w	r2, r7, #15
 80031d2:	f107 0110 	add.w	r1, r7, #16
 80031d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80031da:	4618      	mov	r0, r3
 80031dc:	f009 fc50 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 80031e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031e4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d02c      	beq.n	8003248 <Cmd_iou_tec_dis_auto+0x170>
        for (int i = 0; i < frame_len; i++) {
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80031f4:	e010      	b.n	8003218 <Cmd_iou_tec_dis_auto+0x140>
            Uart_write(USART1, encoded_frame[i]);
 80031f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031fa:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80031fe:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003202:	4413      	add	r3, r2
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	4619      	mov	r1, r3
 8003208:	4829      	ldr	r0, [pc, #164]	@ (80032b0 <Cmd_iou_tec_dis_auto+0x1d8>)
 800320a:	f7fe fda1 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800320e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003212:	3301      	adds	r3, #1
 8003214:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003218:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800321c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003228:	4293      	cmp	r3, r2
 800322a:	dbe4      	blt.n	80031f6 <Cmd_iou_tec_dis_auto+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800322c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003230:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003234:	781a      	ldrb	r2, [r3, #0]
 8003236:	f107 0310 	add.w	r3, r7, #16
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff f829 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003242:	f7ff f80f 	bl	8002264 <set_send_flag>
 8003246:	e022      	b.n	800328e <Cmd_iou_tec_dis_auto+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003248:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800324c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003250:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	2301      	movs	r3, #1
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	2305      	movs	r3, #5
 800325c:	2201      	movs	r2, #1
 800325e:	f009 fb89 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003262:	f107 020f 	add.w	r2, r7, #15
 8003266:	f107 0110 	add.w	r1, r7, #16
 800326a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800326e:	4618      	mov	r0, r3
 8003270:	f009 fc06 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003274:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003278:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	f107 0310 	add.w	r3, r7, #16
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff f805 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800328a:	f7fe ffeb 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800328e:	2305      	movs	r3, #5
}
 8003290:	4618      	mov	r0, r3
 8003292:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40020000 	.word	0x40020000
 80032a0:	40005000 	.word	0x40005000
 80032a4:	20007993 	.word	0x20007993
 80032a8:	40004400 	.word	0x40004400
 80032ac:	20007994 	.word	0x20007994
 80032b0:	40011000 	.word	0x40011000

080032b4 <Cmd_iou_tec_set_output>:


int Cmd_iou_tec_set_output(int argc, char *argv[])
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80032ba:	af02      	add	r7, sp, #8
 80032bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032c0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032c4:	6018      	str	r0, [r3, #0]
 80032c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032ca:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80032ce:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 4) return CMDLINE_TOO_FEW_ARGS;
 80032d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032d4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	dc01      	bgt.n	80032e2 <Cmd_iou_tec_set_output+0x2e>
 80032de:	2303      	movs	r3, #3
 80032e0:	e0fb      	b.n	80034da <Cmd_iou_tec_set_output+0x226>
    if ((argc-1) > 4) return CMDLINE_TOO_MANY_ARGS;
 80032e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032e6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b05      	cmp	r3, #5
 80032ee:	dd01      	ble.n	80032f4 <Cmd_iou_tec_set_output+0x40>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0f2      	b.n	80034da <Cmd_iou_tec_set_output+0x226>
    uint8_t channel = atoi(argv[1]);
 80032f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032f8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3304      	adds	r3, #4
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f00c f9f5 	bl	800f6f2 <atoi>
 8003308:	4603      	mov	r3, r0
 800330a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800330e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003312:	2b03      	cmp	r3, #3
 8003314:	d901      	bls.n	800331a <Cmd_iou_tec_set_output+0x66>
 8003316:	2304      	movs	r3, #4
 8003318:	e0df      	b.n	80034da <Cmd_iou_tec_set_output+0x226>

    uint8_t mode = atoi(argv[2]);
 800331a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800331e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3308      	adds	r3, #8
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f00c f9e2 	bl	800f6f2 <atoi>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (mode > 1)    return CMDLINE_INVALID_ARG;
 8003334:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003338:	2b01      	cmp	r3, #1
 800333a:	d901      	bls.n	8003340 <Cmd_iou_tec_set_output+0x8c>
 800333c:	2304      	movs	r3, #4
 800333e:	e0cc      	b.n	80034da <Cmd_iou_tec_set_output+0x226>

    uint16_t vol = atoi(argv[3]);
 8003340:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003344:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f00c f9cf 	bl	800f6f2 <atoi>
 8003354:	4603      	mov	r3, r0
 8003356:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 800335a:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800335e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003362:	d901      	bls.n	8003368 <Cmd_iou_tec_set_output+0xb4>
 8003364:	2304      	movs	r3, #4
 8003366:	e0b8      	b.n	80034da <Cmd_iou_tec_set_output+0x226>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003368:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800336c:	485d      	ldr	r0, [pc, #372]	@ (80034e4 <Cmd_iou_tec_set_output+0x230>)
 800336e:	f7ff f84f 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003372:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003376:	485b      	ldr	r0, [pc, #364]	@ (80034e4 <Cmd_iou_tec_set_output+0x230>)
 8003378:	f7ff f84a 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800337c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003380:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800338a:	3b01      	subs	r3, #1
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003392:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	4413      	add	r3, r2
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80033a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80033a4:	4a50      	ldr	r2, [pc, #320]	@ (80034e8 <Cmd_iou_tec_set_output+0x234>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d103      	bne.n	80033b2 <Cmd_iou_tec_set_output+0xfe>
    	uart_choose_uart5 = 1;
 80033aa:	4b50      	ldr	r3, [pc, #320]	@ (80034ec <Cmd_iou_tec_set_output+0x238>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
 80033b0:	e002      	b.n	80033b8 <Cmd_iou_tec_set_output+0x104>
    }else{
    	uart_choose_uart5 = 0;
 80033b2:	4b4e      	ldr	r3, [pc, #312]	@ (80034ec <Cmd_iou_tec_set_output+0x238>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80033b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80033bc:	4a4c      	ldr	r2, [pc, #304]	@ (80034f0 <Cmd_iou_tec_set_output+0x23c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d103      	bne.n	80033ca <Cmd_iou_tec_set_output+0x116>
    	uart_choose_usart2 = 1;
 80033c2:	4b4c      	ldr	r3, [pc, #304]	@ (80034f4 <Cmd_iou_tec_set_output+0x240>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e002      	b.n	80033d0 <Cmd_iou_tec_set_output+0x11c>
    }else{
    	uart_choose_usart2 = 0;
 80033ca:	4b4a      	ldr	r3, [pc, #296]	@ (80034f4 <Cmd_iou_tec_set_output+0x240>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_SET_OUTPUT;
 80033d0:	2308      	movs	r3, #8
 80033d2:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];
    payload[0] = channel;
 80033d6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80033da:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1] = mode;
 80033de:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80033e2:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(vol >> 8);   //high
 80033e6:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(vol & 0xFF); //low
 80033f4:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80033fe:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003402:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003406:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2301      	movs	r3, #1
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	2305      	movs	r3, #5
 8003412:	2204      	movs	r2, #4
 8003414:	f009 faae 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003418:	f107 020b 	add.w	r2, r7, #11
 800341c:	f107 010c 	add.w	r1, r7, #12
 8003420:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003424:	4618      	mov	r0, r3
 8003426:	f009 fb2b 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 800342a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800342e:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d02c      	beq.n	8003492 <Cmd_iou_tec_set_output+0x1de>
        for (int i = 0; i < frame_len; i++) {
 8003438:	2300      	movs	r3, #0
 800343a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800343e:	e010      	b.n	8003462 <Cmd_iou_tec_set_output+0x1ae>
            Uart_write(USART1, encoded_frame[i]);
 8003440:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003444:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003448:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800344c:	4413      	add	r3, r2
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	4619      	mov	r1, r3
 8003452:	4829      	ldr	r0, [pc, #164]	@ (80034f8 <Cmd_iou_tec_set_output+0x244>)
 8003454:	f7fe fc7c 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003458:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800345c:	3301      	adds	r3, #1
 800345e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003462:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003466:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003472:	4293      	cmp	r3, r2
 8003474:	dbe4      	blt.n	8003440 <Cmd_iou_tec_set_output+0x18c>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003476:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800347a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe ff04 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800348c:	f7fe feea 	bl	8002264 <set_send_flag>
 8003490:	e022      	b.n	80034d8 <Cmd_iou_tec_set_output+0x224>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003492:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003496:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800349a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	2301      	movs	r3, #1
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2305      	movs	r3, #5
 80034a6:	2204      	movs	r2, #4
 80034a8:	f009 fa64 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80034ac:	f107 020b 	add.w	r2, r7, #11
 80034b0:	f107 010c 	add.w	r1, r7, #12
 80034b4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80034b8:	4618      	mov	r0, r3
 80034ba:	f009 fae1 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80034be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034c2:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fee0 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80034d4:	f7fe fec6 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80034d8:	2305      	movs	r3, #5
}
 80034da:	4618      	mov	r0, r3
 80034dc:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40005000 	.word	0x40005000
 80034ec:	20007993 	.word	0x20007993
 80034f0:	40004400 	.word	0x40004400
 80034f4:	20007994 	.word	0x20007994
 80034f8:	40011000 	.word	0x40011000

080034fc <Cmd_iou_tec_auto_vol>:

int Cmd_iou_tec_auto_vol(int argc, char *argv[])
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003502:	af02      	add	r7, sp, #8
 8003504:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003508:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800350c:	6018      	str	r0, [r3, #0]
 800350e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003512:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003516:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8003518:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800351c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b03      	cmp	r3, #3
 8003524:	dc01      	bgt.n	800352a <Cmd_iou_tec_auto_vol+0x2e>
 8003526:	2303      	movs	r3, #3
 8003528:	e0e4      	b.n	80036f4 <Cmd_iou_tec_auto_vol+0x1f8>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 800352a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800352e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b04      	cmp	r3, #4
 8003536:	dd01      	ble.n	800353c <Cmd_iou_tec_auto_vol+0x40>
 8003538:	2302      	movs	r3, #2
 800353a:	e0db      	b.n	80036f4 <Cmd_iou_tec_auto_vol+0x1f8>
    uint8_t channel = atoi(argv[1]);
 800353c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003540:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3304      	adds	r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f00c f8d1 	bl	800f6f2 <atoi>
 8003550:	4603      	mov	r3, r0
 8003552:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8003556:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800355a:	2b03      	cmp	r3, #3
 800355c:	d901      	bls.n	8003562 <Cmd_iou_tec_auto_vol+0x66>
 800355e:	2304      	movs	r3, #4
 8003560:	e0c8      	b.n	80036f4 <Cmd_iou_tec_auto_vol+0x1f8>

    uint16_t vol = atoi(argv[2]);
 8003562:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003566:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3308      	adds	r3, #8
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f00c f8be 	bl	800f6f2 <atoi>
 8003576:	4603      	mov	r3, r0
 8003578:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 800357c:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003580:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003584:	d901      	bls.n	800358a <Cmd_iou_tec_auto_vol+0x8e>
 8003586:	2304      	movs	r3, #4
 8003588:	e0b4      	b.n	80036f4 <Cmd_iou_tec_auto_vol+0x1f8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800358a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800358e:	485c      	ldr	r0, [pc, #368]	@ (8003700 <Cmd_iou_tec_auto_vol+0x204>)
 8003590:	f7fe ff3e 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003594:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003598:	4859      	ldr	r0, [pc, #356]	@ (8003700 <Cmd_iou_tec_auto_vol+0x204>)
 800359a:	f7fe ff39 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800359e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035a2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035ac:	3b01      	subs	r3, #1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80035b4:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80035c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80035c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003704 <Cmd_iou_tec_auto_vol+0x208>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d103      	bne.n	80035d4 <Cmd_iou_tec_auto_vol+0xd8>
    	uart_choose_uart5 = 1;
 80035cc:	4b4e      	ldr	r3, [pc, #312]	@ (8003708 <Cmd_iou_tec_auto_vol+0x20c>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	e002      	b.n	80035da <Cmd_iou_tec_auto_vol+0xde>
    }else{
    	uart_choose_uart5 = 0;
 80035d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003708 <Cmd_iou_tec_auto_vol+0x20c>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80035da:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80035de:	4a4b      	ldr	r2, [pc, #300]	@ (800370c <Cmd_iou_tec_auto_vol+0x210>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d103      	bne.n	80035ec <Cmd_iou_tec_auto_vol+0xf0>
    	uart_choose_usart2 = 1;
 80035e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003710 <Cmd_iou_tec_auto_vol+0x214>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e002      	b.n	80035f2 <Cmd_iou_tec_auto_vol+0xf6>
    }else{
    	uart_choose_usart2 = 0;
 80035ec:	4b48      	ldr	r3, [pc, #288]	@ (8003710 <Cmd_iou_tec_auto_vol+0x214>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_AUTO_VOL;
 80035f2:	2309      	movs	r3, #9
 80035f4:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0] = channel;
 80035f8:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80035fc:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(vol >> 8);   //high
 8003600:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003604:	0a1b      	lsrs	r3, r3, #8
 8003606:	b29b      	uxth	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(vol & 0xFF); //low
 800360e:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003618:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800361c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003620:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	2301      	movs	r3, #1
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2305      	movs	r3, #5
 800362c:	2203      	movs	r2, #3
 800362e:	f009 f9a1 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003632:	f107 020f 	add.w	r2, r7, #15
 8003636:	f107 0110 	add.w	r1, r7, #16
 800363a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800363e:	4618      	mov	r0, r3
 8003640:	f009 fa1e 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 8003644:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003648:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d02c      	beq.n	80036ac <Cmd_iou_tec_auto_vol+0x1b0>
        for (int i = 0; i < frame_len; i++) {
 8003652:	2300      	movs	r3, #0
 8003654:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003658:	e010      	b.n	800367c <Cmd_iou_tec_auto_vol+0x180>
            Uart_write(USART1, encoded_frame[i]);
 800365a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800365e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8003662:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003666:	4413      	add	r3, r2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	4829      	ldr	r0, [pc, #164]	@ (8003714 <Cmd_iou_tec_auto_vol+0x218>)
 800366e:	f7fe fb6f 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003672:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003676:	3301      	adds	r3, #1
 8003678:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800367c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003680:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800368c:	4293      	cmp	r3, r2
 800368e:	dbe4      	blt.n	800365a <Cmd_iou_tec_auto_vol+0x15e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003690:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003694:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	f107 0310 	add.w	r3, r7, #16
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe fdf7 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80036a6:	f7fe fddd 	bl	8002264 <set_send_flag>
 80036aa:	e022      	b.n	80036f2 <Cmd_iou_tec_auto_vol+0x1f6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80036ac:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80036b0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80036b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	2301      	movs	r3, #1
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2305      	movs	r3, #5
 80036c0:	2203      	movs	r2, #3
 80036c2:	f009 f957 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80036c6:	f107 020f 	add.w	r2, r7, #15
 80036ca:	f107 0110 	add.w	r1, r7, #16
 80036ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80036d2:	4618      	mov	r0, r3
 80036d4:	f009 f9d4 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80036d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036dc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	f107 0310 	add.w	r3, r7, #16
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fdd3 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80036ee:	f7fe fdb9 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80036f2:	2305      	movs	r3, #5
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40020000 	.word	0x40020000
 8003704:	40005000 	.word	0x40005000
 8003708:	20007993 	.word	0x20007993
 800370c:	40004400 	.word	0x40004400
 8003710:	20007994 	.word	0x20007994
 8003714:	40011000 	.word	0x40011000

08003718 <Cmd_iou_tec_status>:

int Cmd_iou_tec_status(int argc, char *argv[])
{
 8003718:	b580      	push	{r7, lr}
 800371a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800371e:	af00      	add	r7, sp, #0
 8003720:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003724:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003728:	6018      	str	r0, [r3, #0]
 800372a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800372e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003732:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003734:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003738:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b01      	cmp	r3, #1
 8003740:	dc01      	bgt.n	8003746 <Cmd_iou_tec_status+0x2e>
 8003742:	2303      	movs	r3, #3
 8003744:	e0a3      	b.n	800388e <Cmd_iou_tec_status+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003746:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800374a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b02      	cmp	r3, #2
 8003752:	dd01      	ble.n	8003758 <Cmd_iou_tec_status+0x40>
 8003754:	2302      	movs	r3, #2
 8003756:	e09a      	b.n	800388e <Cmd_iou_tec_status+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003758:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800375c:	484e      	ldr	r0, [pc, #312]	@ (8003898 <Cmd_iou_tec_status+0x180>)
 800375e:	f7fe fe57 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003766:	484c      	ldr	r0, [pc, #304]	@ (8003898 <Cmd_iou_tec_status+0x180>)
 8003768:	f7fe fe52 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800376c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003770:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800377a:	3b01      	subs	r3, #1
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003782:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	4413      	add	r3, r2
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003790:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003794:	4a41      	ldr	r2, [pc, #260]	@ (800389c <Cmd_iou_tec_status+0x184>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d103      	bne.n	80037a2 <Cmd_iou_tec_status+0x8a>
    	uart_choose_uart5 = 1;
 800379a:	4b41      	ldr	r3, [pc, #260]	@ (80038a0 <Cmd_iou_tec_status+0x188>)
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e002      	b.n	80037a8 <Cmd_iou_tec_status+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80037a2:	4b3f      	ldr	r3, [pc, #252]	@ (80038a0 <Cmd_iou_tec_status+0x188>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80037a8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80037ac:	4a3d      	ldr	r2, [pc, #244]	@ (80038a4 <Cmd_iou_tec_status+0x18c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d103      	bne.n	80037ba <Cmd_iou_tec_status+0xa2>
    	uart_choose_usart2 = 1;
 80037b2:	4b3d      	ldr	r3, [pc, #244]	@ (80038a8 <Cmd_iou_tec_status+0x190>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e002      	b.n	80037c0 <Cmd_iou_tec_status+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80037ba:	4b3b      	ldr	r3, [pc, #236]	@ (80038a8 <Cmd_iou_tec_status+0x190>)
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_STATUS;
 80037c0:	230a      	movs	r3, #10
 80037c2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80037c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037ca:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80037ce:	2201      	movs	r2, #1
 80037d0:	2105      	movs	r1, #5
 80037d2:	f009 f8a7 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80037d6:	f107 020f 	add.w	r2, r7, #15
 80037da:	f107 0110 	add.w	r1, r7, #16
 80037de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037e2:	4618      	mov	r0, r3
 80037e4:	f009 f94c 	bl	800ca80 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80037e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037ec:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d02c      	beq.n	8003850 <Cmd_iou_tec_status+0x138>
        for (int i = 0; i < frame_len; i++) {
 80037f6:	2300      	movs	r3, #0
 80037f8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80037fc:	e010      	b.n	8003820 <Cmd_iou_tec_status+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80037fe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003802:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003806:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	4619      	mov	r1, r3
 8003810:	4826      	ldr	r0, [pc, #152]	@ (80038ac <Cmd_iou_tec_status+0x194>)
 8003812:	f7fe fa9d 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003816:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800381a:	3301      	adds	r3, #1
 800381c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003820:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003824:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003830:	4293      	cmp	r3, r2
 8003832:	dbe4      	blt.n	80037fe <Cmd_iou_tec_status+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003834:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003838:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	f107 0310 	add.w	r3, r7, #16
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe fd25 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800384a:	f7fe fd0b 	bl	8002264 <set_send_flag>
 800384e:	e01d      	b.n	800388c <Cmd_iou_tec_status+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003850:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003854:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003858:	2201      	movs	r2, #1
 800385a:	2105      	movs	r1, #5
 800385c:	f009 f862 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003860:	f107 020f 	add.w	r2, r7, #15
 8003864:	f107 0110 	add.w	r1, r7, #16
 8003868:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800386c:	4618      	mov	r0, r3
 800386e:	f009 f907 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003872:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003876:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	f107 0310 	add.w	r3, r7, #16
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe fd06 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003888:	f7fe fcec 	bl	8002264 <set_send_flag>
    }
    return CMDLINE_PENDING;
 800388c:	2305      	movs	r3, #5
}
 800388e:	4618      	mov	r0, r3
 8003890:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40020000 	.word	0x40020000
 800389c:	40005000 	.word	0x40005000
 80038a0:	20007993 	.word	0x20007993
 80038a4:	40004400 	.word	0x40004400
 80038a8:	20007994 	.word	0x20007994
 80038ac:	40011000 	.word	0x40011000

080038b0 <Cmd_iou_tec_log_ena>:

int Cmd_iou_tec_log_ena(int argc, char *argv[])
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038bc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80038c0:	6018      	str	r0, [r3, #0]
 80038c2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038c6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80038ca:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80038cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038d0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	dc01      	bgt.n	80038de <Cmd_iou_tec_log_ena+0x2e>
 80038da:	2303      	movs	r3, #3
 80038dc:	e0a3      	b.n	8003a26 <Cmd_iou_tec_log_ena+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80038de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038e2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	dd01      	ble.n	80038f0 <Cmd_iou_tec_log_ena+0x40>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e09a      	b.n	8003a26 <Cmd_iou_tec_log_ena+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80038f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038f4:	484e      	ldr	r0, [pc, #312]	@ (8003a30 <Cmd_iou_tec_log_ena+0x180>)
 80038f6:	f7fe fd8b 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80038fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038fe:	484c      	ldr	r0, [pc, #304]	@ (8003a30 <Cmd_iou_tec_log_ena+0x180>)
 8003900:	f7fe fd86 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003904:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003908:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003912:	3b01      	subs	r3, #1
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800391a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	4413      	add	r3, r2
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003928:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800392c:	4a41      	ldr	r2, [pc, #260]	@ (8003a34 <Cmd_iou_tec_log_ena+0x184>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d103      	bne.n	800393a <Cmd_iou_tec_log_ena+0x8a>
    	uart_choose_uart5 = 1;
 8003932:	4b41      	ldr	r3, [pc, #260]	@ (8003a38 <Cmd_iou_tec_log_ena+0x188>)
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	e002      	b.n	8003940 <Cmd_iou_tec_log_ena+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800393a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a38 <Cmd_iou_tec_log_ena+0x188>)
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003940:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003944:	4a3d      	ldr	r2, [pc, #244]	@ (8003a3c <Cmd_iou_tec_log_ena+0x18c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d103      	bne.n	8003952 <Cmd_iou_tec_log_ena+0xa2>
    	uart_choose_usart2 = 1;
 800394a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a40 <Cmd_iou_tec_log_ena+0x190>)
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e002      	b.n	8003958 <Cmd_iou_tec_log_ena+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003952:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <Cmd_iou_tec_log_ena+0x190>)
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_LOG_ENA;
 8003958:	230b      	movs	r3, #11
 800395a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800395e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003962:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003966:	2201      	movs	r2, #1
 8003968:	2105      	movs	r1, #5
 800396a:	f008 ffdb 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800396e:	f107 020f 	add.w	r2, r7, #15
 8003972:	f107 0110 	add.w	r1, r7, #16
 8003976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800397a:	4618      	mov	r0, r3
 800397c:	f009 f880 	bl	800ca80 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8003980:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003984:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d02c      	beq.n	80039e8 <Cmd_iou_tec_log_ena+0x138>
        for (int i = 0; i < frame_len; i++) {
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003994:	e010      	b.n	80039b8 <Cmd_iou_tec_log_ena+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8003996:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800399a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800399e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80039a2:	4413      	add	r3, r2
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	4619      	mov	r1, r3
 80039a8:	4826      	ldr	r0, [pc, #152]	@ (8003a44 <Cmd_iou_tec_log_ena+0x194>)
 80039aa:	f7fe f9d1 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80039ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80039b2:	3301      	adds	r3, #1
 80039b4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80039b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039bc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80039c8:	4293      	cmp	r3, r2
 80039ca:	dbe4      	blt.n	8003996 <Cmd_iou_tec_log_ena+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80039cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039d0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	f107 0310 	add.w	r3, r7, #16
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe fc59 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80039e2:	f7fe fc3f 	bl	8002264 <set_send_flag>
 80039e6:	e01d      	b.n	8003a24 <Cmd_iou_tec_log_ena+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80039e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039ec:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80039f0:	2201      	movs	r2, #1
 80039f2:	2105      	movs	r1, #5
 80039f4:	f008 ff96 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80039f8:	f107 020f 	add.w	r2, r7, #15
 80039fc:	f107 0110 	add.w	r1, r7, #16
 8003a00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a04:	4618      	mov	r0, r3
 8003a06:	f009 f83b 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003a0a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a0e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003a12:	781a      	ldrb	r2, [r3, #0]
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe fc3a 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003a20:	f7fe fc20 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003a24:	2305      	movs	r3, #5
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40020000 	.word	0x40020000
 8003a34:	40005000 	.word	0x40005000
 8003a38:	20007993 	.word	0x20007993
 8003a3c:	40004400 	.word	0x40004400
 8003a40:	20007994 	.word	0x20007994
 8003a44:	40011000 	.word	0x40011000

08003a48 <Cmd_iou_tec_log_dis>:

int Cmd_iou_tec_log_dis(int argc, char *argv[])
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a54:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003a58:	6018      	str	r0, [r3, #0]
 8003a5a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a5e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003a62:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003a64:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a68:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	dc01      	bgt.n	8003a76 <Cmd_iou_tec_log_dis+0x2e>
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0a3      	b.n	8003bbe <Cmd_iou_tec_log_dis+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003a76:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a7a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	dd01      	ble.n	8003a88 <Cmd_iou_tec_log_dis+0x40>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e09a      	b.n	8003bbe <Cmd_iou_tec_log_dis+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003a88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a8c:	484e      	ldr	r0, [pc, #312]	@ (8003bc8 <Cmd_iou_tec_log_dis+0x180>)
 8003a8e:	f7fe fcbf 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003a92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a96:	484c      	ldr	r0, [pc, #304]	@ (8003bc8 <Cmd_iou_tec_log_dis+0x180>)
 8003a98:	f7fe fcba 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003a9c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003aa0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003ab2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003ac0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ac4:	4a41      	ldr	r2, [pc, #260]	@ (8003bcc <Cmd_iou_tec_log_dis+0x184>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d103      	bne.n	8003ad2 <Cmd_iou_tec_log_dis+0x8a>
    	uart_choose_uart5 = 1;
 8003aca:	4b41      	ldr	r3, [pc, #260]	@ (8003bd0 <Cmd_iou_tec_log_dis+0x188>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e002      	b.n	8003ad8 <Cmd_iou_tec_log_dis+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd0 <Cmd_iou_tec_log_dis+0x188>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003ad8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003adc:	4a3d      	ldr	r2, [pc, #244]	@ (8003bd4 <Cmd_iou_tec_log_dis+0x18c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d103      	bne.n	8003aea <Cmd_iou_tec_log_dis+0xa2>
    	uart_choose_usart2 = 1;
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd8 <Cmd_iou_tec_log_dis+0x190>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]
 8003ae8:	e002      	b.n	8003af0 <Cmd_iou_tec_log_dis+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003aea:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd8 <Cmd_iou_tec_log_dis+0x190>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_LOG_DIS;
 8003af0:	230c      	movs	r3, #12
 8003af2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003af6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003afa:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003afe:	2201      	movs	r2, #1
 8003b00:	2105      	movs	r1, #5
 8003b02:	f008 ff0f 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003b06:	f107 020f 	add.w	r2, r7, #15
 8003b0a:	f107 0110 	add.w	r1, r7, #16
 8003b0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b12:	4618      	mov	r0, r3
 8003b14:	f008 ffb4 	bl	800ca80 <frame_encode>

//    SCH_Delay(5);
    if (frame_len > 0) {
 8003b18:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b1c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d02c      	beq.n	8003b80 <Cmd_iou_tec_log_dis+0x138>
        for (int i = 0; i < frame_len; i++) {
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003b2c:	e010      	b.n	8003b50 <Cmd_iou_tec_log_dis+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8003b2e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b32:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003b36:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003b3a:	4413      	add	r3, r2
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4826      	ldr	r0, [pc, #152]	@ (8003bdc <Cmd_iou_tec_log_dis+0x194>)
 8003b42:	f7fe f905 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003b46:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003b50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b54:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003b60:	4293      	cmp	r3, r2
 8003b62:	dbe4      	blt.n	8003b2e <Cmd_iou_tec_log_dis+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003b64:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b68:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003b6c:	781a      	ldrb	r2, [r3, #0]
 8003b6e:	f107 0310 	add.w	r3, r7, #16
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fb8d 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003b7a:	f7fe fb73 	bl	8002264 <set_send_flag>
 8003b7e:	e01d      	b.n	8003bbc <Cmd_iou_tec_log_dis+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003b80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b84:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003b88:	2201      	movs	r2, #1
 8003b8a:	2105      	movs	r1, #5
 8003b8c:	f008 feca 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003b90:	f107 020f 	add.w	r2, r7, #15
 8003b94:	f107 0110 	add.w	r1, r7, #16
 8003b98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f008 ff6f 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003ba2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ba6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003baa:	781a      	ldrb	r2, [r3, #0]
 8003bac:	f107 0310 	add.w	r3, r7, #16
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fb6e 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003bb8:	f7fe fb54 	bl	8002264 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8003bbc:	2305      	movs	r3, #5
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40005000 	.word	0x40005000
 8003bd0:	20007993 	.word	0x20007993
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	20007994 	.word	0x20007994
 8003bdc:	40011000 	.word	0x40011000

08003be0 <Cmd_iou_ringled_setRGB>:

int Cmd_iou_ringled_setRGB(int argc, char *argv[])
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003be6:	af02      	add	r7, sp, #8
 8003be8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003bec:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003bf0:	6018      	str	r0, [r3, #0]
 8003bf2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003bf6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003bfa:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 5) return CMDLINE_TOO_FEW_ARGS;
 8003bfc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c00:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b05      	cmp	r3, #5
 8003c08:	dc01      	bgt.n	8003c0e <Cmd_iou_ringled_setRGB+0x2e>
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0f1      	b.n	8003df2 <Cmd_iou_ringled_setRGB+0x212>
    if ((argc-1) > 5) return CMDLINE_TOO_MANY_ARGS;
 8003c0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c12:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b06      	cmp	r3, #6
 8003c1a:	dd01      	ble.n	8003c20 <Cmd_iou_ringled_setRGB+0x40>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e0e8      	b.n	8003df2 <Cmd_iou_ringled_setRGB+0x212>
    uint8_t red = atoi(argv[1]);
 8003c20:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c24:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f00b fd5f 	bl	800f6f2 <atoi>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (red > 255)    return CMDLINE_INVALID_ARG;
    uint8_t green = atoi(argv[2]);
 8003c3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c3e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3308      	adds	r3, #8
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f00b fd52 	bl	800f6f2 <atoi>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (green > 255)    return CMDLINE_INVALID_ARG;
    uint8_t blue = atoi(argv[3]);
 8003c54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c58:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f00b fd45 	bl	800f6f2 <atoi>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
    if (blue > 255)    return CMDLINE_INVALID_ARG;
    uint8_t white = atoi(argv[4]);
 8003c6e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c72:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3310      	adds	r3, #16
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f00b fd38 	bl	800f6f2 <atoi>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003c88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003c8c:	485b      	ldr	r0, [pc, #364]	@ (8003dfc <Cmd_iou_ringled_setRGB+0x21c>)
 8003c8e:	f7fe fbbf 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003c92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c96:	4859      	ldr	r0, [pc, #356]	@ (8003dfc <Cmd_iou_ringled_setRGB+0x21c>)
 8003c98:	f7fe fbba 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003c9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ca0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003caa:	3b01      	subs	r3, #1
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003cb2:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003cc0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003cc4:	4a4e      	ldr	r2, [pc, #312]	@ (8003e00 <Cmd_iou_ringled_setRGB+0x220>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d103      	bne.n	8003cd2 <Cmd_iou_ringled_setRGB+0xf2>
    	uart_choose_uart5 = 1;
 8003cca:	4b4e      	ldr	r3, [pc, #312]	@ (8003e04 <Cmd_iou_ringled_setRGB+0x224>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	e002      	b.n	8003cd8 <Cmd_iou_ringled_setRGB+0xf8>
    }else{
    	uart_choose_uart5 = 0;
 8003cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8003e04 <Cmd_iou_ringled_setRGB+0x224>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003cd8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003cdc:	4a4a      	ldr	r2, [pc, #296]	@ (8003e08 <Cmd_iou_ringled_setRGB+0x228>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d103      	bne.n	8003cea <Cmd_iou_ringled_setRGB+0x10a>
    	uart_choose_usart2 = 1;
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8003e0c <Cmd_iou_ringled_setRGB+0x22c>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e002      	b.n	8003cf0 <Cmd_iou_ringled_setRGB+0x110>
    }else{
    	uart_choose_usart2 = 0;
 8003cea:	4b48      	ldr	r3, [pc, #288]	@ (8003e0c <Cmd_iou_ringled_setRGB+0x22c>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_RINGLED_SETRGB;
 8003cf0:	230d      	movs	r3, #13
 8003cf2:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];

    payload[0]  = red; //low
 8003cf6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003cfa:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = green; //low
 8003cfe:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003d02:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = blue; //low
 8003d06:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8003d0a:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = white; //low
 8003d0e:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8003d12:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003d16:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003d1a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003d1e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	2301      	movs	r3, #1
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2305      	movs	r3, #5
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	f008 fe22 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003d30:	f107 020b 	add.w	r2, r7, #11
 8003d34:	f107 010c 	add.w	r1, r7, #12
 8003d38:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f008 fe9f 	bl	800ca80 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003d42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d46:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d02c      	beq.n	8003daa <Cmd_iou_ringled_setRGB+0x1ca>
        for (int i = 0; i < frame_len; i++) {
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003d56:	e010      	b.n	8003d7a <Cmd_iou_ringled_setRGB+0x19a>
            Uart_write(USART1, encoded_frame[i]);
 8003d58:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d5c:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003d60:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003d64:	4413      	add	r3, r2
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4829      	ldr	r0, [pc, #164]	@ (8003e10 <Cmd_iou_ringled_setRGB+0x230>)
 8003d6c:	f7fd fff0 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003d70:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003d74:	3301      	adds	r3, #1
 8003d76:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003d7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d7e:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	dbe4      	blt.n	8003d58 <Cmd_iou_ringled_setRGB+0x178>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003d8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d92:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	f107 030c 	add.w	r3, r7, #12
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fa78 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003da4:	f7fe fa5e 	bl	8002264 <set_send_flag>
 8003da8:	e022      	b.n	8003df0 <Cmd_iou_ringled_setRGB+0x210>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003daa:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003dae:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003db2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	2301      	movs	r3, #1
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2305      	movs	r3, #5
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	f008 fdd8 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003dc4:	f107 020b 	add.w	r2, r7, #11
 8003dc8:	f107 010c 	add.w	r1, r7, #12
 8003dcc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f008 fe55 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003dd6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dda:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	f107 030c 	add.w	r3, r7, #12
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fa54 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003dec:	f7fe fa3a 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003df0:	2305      	movs	r3, #5
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40020000 	.word	0x40020000
 8003e00:	40005000 	.word	0x40005000
 8003e04:	20007993 	.word	0x20007993
 8003e08:	40004400 	.word	0x40004400
 8003e0c:	20007994 	.word	0x20007994
 8003e10:	40011000 	.word	0x40011000

08003e14 <Cmd_iou_ringled_getRGB>:

int Cmd_iou_ringled_getRGB(int argc, char *argv[])
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e20:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e24:	6018      	str	r0, [r3, #0]
 8003e26:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e2a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003e2e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003e30:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e34:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	dc01      	bgt.n	8003e42 <Cmd_iou_ringled_getRGB+0x2e>
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0a3      	b.n	8003f8a <Cmd_iou_ringled_getRGB+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003e42:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e46:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	dd01      	ble.n	8003e54 <Cmd_iou_ringled_getRGB+0x40>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e09a      	b.n	8003f8a <Cmd_iou_ringled_getRGB+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003e54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e58:	484e      	ldr	r0, [pc, #312]	@ (8003f94 <Cmd_iou_ringled_getRGB+0x180>)
 8003e5a:	f7fe fad9 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003e5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e62:	484c      	ldr	r0, [pc, #304]	@ (8003f94 <Cmd_iou_ringled_getRGB+0x180>)
 8003e64:	f7fe fad4 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003e68:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e6c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e76:	3b01      	subs	r3, #1
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003e7e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	4413      	add	r3, r2
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003e8c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003e90:	4a41      	ldr	r2, [pc, #260]	@ (8003f98 <Cmd_iou_ringled_getRGB+0x184>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d103      	bne.n	8003e9e <Cmd_iou_ringled_getRGB+0x8a>
    	uart_choose_uart5 = 1;
 8003e96:	4b41      	ldr	r3, [pc, #260]	@ (8003f9c <Cmd_iou_ringled_getRGB+0x188>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	e002      	b.n	8003ea4 <Cmd_iou_ringled_getRGB+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003f9c <Cmd_iou_ringled_getRGB+0x188>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003ea4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ea8:	4a3d      	ldr	r2, [pc, #244]	@ (8003fa0 <Cmd_iou_ringled_getRGB+0x18c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d103      	bne.n	8003eb6 <Cmd_iou_ringled_getRGB+0xa2>
    	uart_choose_usart2 = 1;
 8003eae:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa4 <Cmd_iou_ringled_getRGB+0x190>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e002      	b.n	8003ebc <Cmd_iou_ringled_getRGB+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa4 <Cmd_iou_ringled_getRGB+0x190>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_RINGLED_GETRGB;
 8003ebc:	230e      	movs	r3, #14
 8003ebe:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003ec2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003ec6:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003eca:	2201      	movs	r2, #1
 8003ecc:	2105      	movs	r1, #5
 8003ece:	f008 fd29 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003ed2:	f107 020f 	add.w	r2, r7, #15
 8003ed6:	f107 0110 	add.w	r1, r7, #16
 8003eda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f008 fdce 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 8003ee4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ee8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d02c      	beq.n	8003f4c <Cmd_iou_ringled_getRGB+0x138>
        for (int i = 0; i < frame_len; i++) {
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003ef8:	e010      	b.n	8003f1c <Cmd_iou_ringled_getRGB+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8003efa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003efe:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003f02:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f06:	4413      	add	r3, r2
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4826      	ldr	r0, [pc, #152]	@ (8003fa8 <Cmd_iou_ringled_getRGB+0x194>)
 8003f0e:	f7fd ff1f 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003f12:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f16:	3301      	adds	r3, #1
 8003f18:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003f1c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f20:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	dbe4      	blt.n	8003efa <Cmd_iou_ringled_getRGB+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003f30:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f34:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	f107 0310 	add.w	r3, r7, #16
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe f9a7 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003f46:	f7fe f98d 	bl	8002264 <set_send_flag>
 8003f4a:	e01d      	b.n	8003f88 <Cmd_iou_ringled_getRGB+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003f4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f50:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003f54:	2201      	movs	r2, #1
 8003f56:	2105      	movs	r1, #5
 8003f58:	f008 fce4 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003f5c:	f107 020f 	add.w	r2, r7, #15
 8003f60:	f107 0110 	add.w	r1, r7, #16
 8003f64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f008 fd89 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003f6e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f72:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	f107 0310 	add.w	r3, r7, #16
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe f988 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003f84:	f7fe f96e 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003f88:	2305      	movs	r3, #5
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40020000 	.word	0x40020000
 8003f98:	40005000 	.word	0x40005000
 8003f9c:	20007993 	.word	0x20007993
 8003fa0:	40004400 	.word	0x40004400
 8003fa4:	20007994 	.word	0x20007994
 8003fa8:	40011000 	.word	0x40011000

08003fac <Cmd_iou_irled_set_bright>:

int Cmd_iou_irled_set_bright(int argc, char *argv[])
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003fb2:	af02      	add	r7, sp, #8
 8003fb4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fb8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003fbc:	6018      	str	r0, [r3, #0]
 8003fbe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fc2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003fc6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8003fc8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fcc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	dc01      	bgt.n	8003fda <Cmd_iou_irled_set_bright+0x2e>
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e0c4      	b.n	8004164 <Cmd_iou_irled_set_bright+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8003fda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fde:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	dd01      	ble.n	8003fec <Cmd_iou_irled_set_bright+0x40>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e0bb      	b.n	8004164 <Cmd_iou_irled_set_bright+0x1b8>
    uint8_t percent = atoi(argv[1]);
 8003fec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ff0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f00b fb79 	bl	800f6f2 <atoi>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (percent > 100)    return CMDLINE_INVALID_ARG;
 8004006:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800400a:	2b64      	cmp	r3, #100	@ 0x64
 800400c:	d901      	bls.n	8004012 <Cmd_iou_irled_set_bright+0x66>
 800400e:	2304      	movs	r3, #4
 8004010:	e0a8      	b.n	8004164 <Cmd_iou_irled_set_bright+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004012:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004016:	4856      	ldr	r0, [pc, #344]	@ (8004170 <Cmd_iou_irled_set_bright+0x1c4>)
 8004018:	f7fe f9fa 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800401c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004020:	4853      	ldr	r0, [pc, #332]	@ (8004170 <Cmd_iou_irled_set_bright+0x1c4>)
 8004022:	f7fe f9f5 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004026:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800402a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004034:	3b01      	subs	r3, #1
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800403c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	4413      	add	r3, r2
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800404a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800404e:	4a49      	ldr	r2, [pc, #292]	@ (8004174 <Cmd_iou_irled_set_bright+0x1c8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d103      	bne.n	800405c <Cmd_iou_irled_set_bright+0xb0>
    	uart_choose_uart5 = 1;
 8004054:	4b48      	ldr	r3, [pc, #288]	@ (8004178 <Cmd_iou_irled_set_bright+0x1cc>)
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e002      	b.n	8004062 <Cmd_iou_irled_set_bright+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 800405c:	4b46      	ldr	r3, [pc, #280]	@ (8004178 <Cmd_iou_irled_set_bright+0x1cc>)
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004062:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004066:	4a45      	ldr	r2, [pc, #276]	@ (800417c <Cmd_iou_irled_set_bright+0x1d0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d103      	bne.n	8004074 <Cmd_iou_irled_set_bright+0xc8>
    	uart_choose_usart2 = 1;
 800406c:	4b44      	ldr	r3, [pc, #272]	@ (8004180 <Cmd_iou_irled_set_bright+0x1d4>)
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e002      	b.n	800407a <Cmd_iou_irled_set_bright+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8004074:	4b42      	ldr	r3, [pc, #264]	@ (8004180 <Cmd_iou_irled_set_bright+0x1d4>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_IRLED_SET_BRIGHT;
 800407a:	230f      	movs	r3, #15
 800407c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];

    payload[0]  = percent; //low
 8004080:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004084:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004088:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800408c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004090:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	2301      	movs	r3, #1
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	2305      	movs	r3, #5
 800409c:	2201      	movs	r2, #1
 800409e:	f008 fc69 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80040a2:	f107 020f 	add.w	r2, r7, #15
 80040a6:	f107 0110 	add.w	r1, r7, #16
 80040aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040ae:	4618      	mov	r0, r3
 80040b0:	f008 fce6 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 80040b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040b8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02c      	beq.n	800411c <Cmd_iou_irled_set_bright+0x170>
        for (int i = 0; i < frame_len; i++) {
 80040c2:	2300      	movs	r3, #0
 80040c4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80040c8:	e010      	b.n	80040ec <Cmd_iou_irled_set_bright+0x140>
            Uart_write(USART1, encoded_frame[i]);
 80040ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040ce:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80040d2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80040d6:	4413      	add	r3, r2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	4619      	mov	r1, r3
 80040dc:	4829      	ldr	r0, [pc, #164]	@ (8004184 <Cmd_iou_irled_set_bright+0x1d8>)
 80040de:	f7fd fe37 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80040e2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80040e6:	3301      	adds	r3, #1
 80040e8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80040ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040f0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80040fc:	4293      	cmp	r3, r2
 80040fe:	dbe4      	blt.n	80040ca <Cmd_iou_irled_set_bright+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8004100:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004104:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	f107 0310 	add.w	r3, r7, #16
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe f8bf 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004116:	f7fe f8a5 	bl	8002264 <set_send_flag>
 800411a:	e022      	b.n	8004162 <Cmd_iou_irled_set_bright+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800411c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004120:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004124:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	2301      	movs	r3, #1
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	2305      	movs	r3, #5
 8004130:	2201      	movs	r2, #1
 8004132:	f008 fc1f 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004136:	f107 020f 	add.w	r2, r7, #15
 800413a:	f107 0110 	add.w	r1, r7, #16
 800413e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004142:	4618      	mov	r0, r3
 8004144:	f008 fc9c 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004148:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800414c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	f107 0310 	add.w	r3, r7, #16
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe f89b 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800415e:	f7fe f881 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004162:	2305      	movs	r3, #5
}
 8004164:	4618      	mov	r0, r3
 8004166:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40020000 	.word	0x40020000
 8004174:	40005000 	.word	0x40005000
 8004178:	20007993 	.word	0x20007993
 800417c:	40004400 	.word	0x40004400
 8004180:	20007994 	.word	0x20007994
 8004184:	40011000 	.word	0x40011000

08004188 <Cmd_iou_irled_get_bright>:

int Cmd_iou_irled_get_bright(int argc, char *argv[])
{
 8004188:	b580      	push	{r7, lr}
 800418a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800418e:	af00      	add	r7, sp, #0
 8004190:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004194:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004198:	6018      	str	r0, [r3, #0]
 800419a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800419e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80041a2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80041a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041a8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	dc01      	bgt.n	80041b6 <Cmd_iou_irled_get_bright+0x2e>
 80041b2:	2303      	movs	r3, #3
 80041b4:	e0a3      	b.n	80042fe <Cmd_iou_irled_get_bright+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80041b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041ba:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	dd01      	ble.n	80041c8 <Cmd_iou_irled_get_bright+0x40>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e09a      	b.n	80042fe <Cmd_iou_irled_get_bright+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80041c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041cc:	484e      	ldr	r0, [pc, #312]	@ (8004308 <Cmd_iou_irled_get_bright+0x180>)
 80041ce:	f7fe f91f 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80041d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80041d6:	484c      	ldr	r0, [pc, #304]	@ (8004308 <Cmd_iou_irled_get_bright+0x180>)
 80041d8:	f7fe f91a 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80041dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041e0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041ea:	3b01      	subs	r3, #1
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80041f2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	4413      	add	r3, r2
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004200:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004204:	4a41      	ldr	r2, [pc, #260]	@ (800430c <Cmd_iou_irled_get_bright+0x184>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d103      	bne.n	8004212 <Cmd_iou_irled_get_bright+0x8a>
    	uart_choose_uart5 = 1;
 800420a:	4b41      	ldr	r3, [pc, #260]	@ (8004310 <Cmd_iou_irled_get_bright+0x188>)
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	e002      	b.n	8004218 <Cmd_iou_irled_get_bright+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004212:	4b3f      	ldr	r3, [pc, #252]	@ (8004310 <Cmd_iou_irled_get_bright+0x188>)
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004218:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800421c:	4a3d      	ldr	r2, [pc, #244]	@ (8004314 <Cmd_iou_irled_get_bright+0x18c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d103      	bne.n	800422a <Cmd_iou_irled_get_bright+0xa2>
    	uart_choose_usart2 = 1;
 8004222:	4b3d      	ldr	r3, [pc, #244]	@ (8004318 <Cmd_iou_irled_get_bright+0x190>)
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	e002      	b.n	8004230 <Cmd_iou_irled_get_bright+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800422a:	4b3b      	ldr	r3, [pc, #236]	@ (8004318 <Cmd_iou_irled_get_bright+0x190>)
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_IRLED_GET_BRIGHT;
 8004230:	2310      	movs	r3, #16
 8004232:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800423a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800423e:	2201      	movs	r2, #1
 8004240:	2105      	movs	r1, #5
 8004242:	f008 fb6f 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004246:	f107 020f 	add.w	r2, r7, #15
 800424a:	f107 0110 	add.w	r1, r7, #16
 800424e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004252:	4618      	mov	r0, r3
 8004254:	f008 fc14 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 8004258:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800425c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d02c      	beq.n	80042c0 <Cmd_iou_irled_get_bright+0x138>
        for (int i = 0; i < frame_len; i++) {
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800426c:	e010      	b.n	8004290 <Cmd_iou_irled_get_bright+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800426e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004272:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8004276:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800427a:	4413      	add	r3, r2
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	4619      	mov	r1, r3
 8004280:	4826      	ldr	r0, [pc, #152]	@ (800431c <Cmd_iou_irled_get_bright+0x194>)
 8004282:	f7fd fd65 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004286:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800428a:	3301      	adds	r3, #1
 800428c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004290:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004294:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80042a0:	4293      	cmp	r3, r2
 80042a2:	dbe4      	blt.n	800426e <Cmd_iou_irled_get_bright+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80042a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042a8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	f107 0310 	add.w	r3, r7, #16
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fd ffed 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80042ba:	f7fd ffd3 	bl	8002264 <set_send_flag>
 80042be:	e01d      	b.n	80042fc <Cmd_iou_irled_get_bright+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80042c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80042c4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80042c8:	2201      	movs	r2, #1
 80042ca:	2105      	movs	r1, #5
 80042cc:	f008 fb2a 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80042d0:	f107 020f 	add.w	r2, r7, #15
 80042d4:	f107 0110 	add.w	r1, r7, #16
 80042d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80042dc:	4618      	mov	r0, r3
 80042de:	f008 fbcf 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80042e2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042e6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042ea:	781a      	ldrb	r2, [r3, #0]
 80042ec:	f107 0310 	add.w	r3, r7, #16
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fd ffce 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80042f8:	f7fd ffb4 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80042fc:	2305      	movs	r3, #5
}
 80042fe:	4618      	mov	r0, r3
 8004300:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40020000 	.word	0x40020000
 800430c:	40005000 	.word	0x40005000
 8004310:	20007993 	.word	0x20007993
 8004314:	40004400 	.word	0x40004400
 8004318:	20007994 	.word	0x20007994
 800431c:	40011000 	.word	0x40011000

08004320 <Cmd_iou_get_accel>:



int Cmd_iou_get_accel(int argc, char *argv[])
{
 8004320:	b580      	push	{r7, lr}
 8004322:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8004326:	af00      	add	r7, sp, #0
 8004328:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800432c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004330:	6018      	str	r0, [r3, #0]
 8004332:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004336:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800433a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800433c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004340:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	dc01      	bgt.n	800434e <Cmd_iou_get_accel+0x2e>
 800434a:	2303      	movs	r3, #3
 800434c:	e0a3      	b.n	8004496 <Cmd_iou_get_accel+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800434e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004352:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b02      	cmp	r3, #2
 800435a:	dd01      	ble.n	8004360 <Cmd_iou_get_accel+0x40>
 800435c:	2302      	movs	r3, #2
 800435e:	e09a      	b.n	8004496 <Cmd_iou_get_accel+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004360:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004364:	484e      	ldr	r0, [pc, #312]	@ (80044a0 <Cmd_iou_get_accel+0x180>)
 8004366:	f7fe f853 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800436a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800436e:	484c      	ldr	r0, [pc, #304]	@ (80044a0 <Cmd_iou_get_accel+0x180>)
 8004370:	f7fe f84e 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004374:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004378:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004382:	3b01      	subs	r3, #1
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800438a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	4413      	add	r3, r2
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004398:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800439c:	4a41      	ldr	r2, [pc, #260]	@ (80044a4 <Cmd_iou_get_accel+0x184>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d103      	bne.n	80043aa <Cmd_iou_get_accel+0x8a>
    	uart_choose_uart5 = 1;
 80043a2:	4b41      	ldr	r3, [pc, #260]	@ (80044a8 <Cmd_iou_get_accel+0x188>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e002      	b.n	80043b0 <Cmd_iou_get_accel+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80043aa:	4b3f      	ldr	r3, [pc, #252]	@ (80044a8 <Cmd_iou_get_accel+0x188>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80043b0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80043b4:	4a3d      	ldr	r2, [pc, #244]	@ (80044ac <Cmd_iou_get_accel+0x18c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d103      	bne.n	80043c2 <Cmd_iou_get_accel+0xa2>
    	uart_choose_usart2 = 1;
 80043ba:	4b3d      	ldr	r3, [pc, #244]	@ (80044b0 <Cmd_iou_get_accel+0x190>)
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	e002      	b.n	80043c8 <Cmd_iou_get_accel+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80043c2:	4b3b      	ldr	r3, [pc, #236]	@ (80044b0 <Cmd_iou_get_accel+0x190>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_ACCEL_GYRO;
 80043c8:	2311      	movs	r3, #17
 80043ca:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80043ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043d2:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80043d6:	2201      	movs	r2, #1
 80043d8:	2105      	movs	r1, #5
 80043da:	f008 faa3 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80043de:	f107 020f 	add.w	r2, r7, #15
 80043e2:	f107 0110 	add.w	r1, r7, #16
 80043e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043ea:	4618      	mov	r0, r3
 80043ec:	f008 fb48 	bl	800ca80 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80043f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80043f4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d02c      	beq.n	8004458 <Cmd_iou_get_accel+0x138>
        for (int i = 0; i < frame_len; i++) {
 80043fe:	2300      	movs	r3, #0
 8004400:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004404:	e010      	b.n	8004428 <Cmd_iou_get_accel+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8004406:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800440a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800440e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004412:	4413      	add	r3, r2
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	4826      	ldr	r0, [pc, #152]	@ (80044b4 <Cmd_iou_get_accel+0x194>)
 800441a:	f7fd fc99 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800441e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004422:	3301      	adds	r3, #1
 8004424:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004428:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800442c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004438:	4293      	cmp	r3, r2
 800443a:	dbe4      	blt.n	8004406 <Cmd_iou_get_accel+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800443c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004440:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	f107 0310 	add.w	r3, r7, #16
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f7fd ff21 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004452:	f7fd ff07 	bl	8002264 <set_send_flag>
 8004456:	e01d      	b.n	8004494 <Cmd_iou_get_accel+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004458:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800445c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004460:	2201      	movs	r2, #1
 8004462:	2105      	movs	r1, #5
 8004464:	f008 fa5e 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004468:	f107 020f 	add.w	r2, r7, #15
 800446c:	f107 0110 	add.w	r1, r7, #16
 8004470:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004474:	4618      	mov	r0, r3
 8004476:	f008 fb03 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800447a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800447e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004482:	781a      	ldrb	r2, [r3, #0]
 8004484:	f107 0310 	add.w	r3, r7, #16
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f7fd ff02 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004490:	f7fd fee8 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004494:	2305      	movs	r3, #5
}
 8004496:	4618      	mov	r0, r3
 8004498:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40020000 	.word	0x40020000
 80044a4:	40005000 	.word	0x40005000
 80044a8:	20007993 	.word	0x20007993
 80044ac:	40004400 	.word	0x40004400
 80044b0:	20007994 	.word	0x20007994
 80044b4:	40011000 	.word	0x40011000

080044b8 <Cmd_iou_get_press>:

int Cmd_iou_get_press(int argc, char *argv[])
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80044be:	af00      	add	r7, sp, #0
 80044c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80044c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80044c8:	6018      	str	r0, [r3, #0]
 80044ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80044ce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80044d2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80044d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80044d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	dc01      	bgt.n	80044e6 <Cmd_iou_get_press+0x2e>
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0a3      	b.n	800462e <Cmd_iou_get_press+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80044e6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80044ea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	dd01      	ble.n	80044f8 <Cmd_iou_get_press+0x40>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e09a      	b.n	800462e <Cmd_iou_get_press+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80044f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80044fc:	484e      	ldr	r0, [pc, #312]	@ (8004638 <Cmd_iou_get_press+0x180>)
 80044fe:	f7fd ff87 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004502:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004506:	484c      	ldr	r0, [pc, #304]	@ (8004638 <Cmd_iou_get_press+0x180>)
 8004508:	f7fd ff82 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800450c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004510:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800451a:	3b01      	subs	r3, #1
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004522:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	4413      	add	r3, r2
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004530:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004534:	4a41      	ldr	r2, [pc, #260]	@ (800463c <Cmd_iou_get_press+0x184>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d103      	bne.n	8004542 <Cmd_iou_get_press+0x8a>
    	uart_choose_uart5 = 1;
 800453a:	4b41      	ldr	r3, [pc, #260]	@ (8004640 <Cmd_iou_get_press+0x188>)
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	e002      	b.n	8004548 <Cmd_iou_get_press+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004542:	4b3f      	ldr	r3, [pc, #252]	@ (8004640 <Cmd_iou_get_press+0x188>)
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004548:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800454c:	4a3d      	ldr	r2, [pc, #244]	@ (8004644 <Cmd_iou_get_press+0x18c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d103      	bne.n	800455a <Cmd_iou_get_press+0xa2>
    	uart_choose_usart2 = 1;
 8004552:	4b3d      	ldr	r3, [pc, #244]	@ (8004648 <Cmd_iou_get_press+0x190>)
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]
 8004558:	e002      	b.n	8004560 <Cmd_iou_get_press+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800455a:	4b3b      	ldr	r3, [pc, #236]	@ (8004648 <Cmd_iou_get_press+0x190>)
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_PRESS;
 8004560:	2312      	movs	r3, #18
 8004562:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004566:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800456a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800456e:	2201      	movs	r2, #1
 8004570:	2105      	movs	r1, #5
 8004572:	f008 f9d7 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004576:	f107 020f 	add.w	r2, r7, #15
 800457a:	f107 0110 	add.w	r1, r7, #16
 800457e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004582:	4618      	mov	r0, r3
 8004584:	f008 fa7c 	bl	800ca80 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8004588:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800458c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d02c      	beq.n	80045f0 <Cmd_iou_get_press+0x138>
        for (int i = 0; i < frame_len; i++) {
 8004596:	2300      	movs	r3, #0
 8004598:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800459c:	e010      	b.n	80045c0 <Cmd_iou_get_press+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800459e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80045a2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80045a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80045aa:	4413      	add	r3, r2
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	4619      	mov	r1, r3
 80045b0:	4826      	ldr	r0, [pc, #152]	@ (800464c <Cmd_iou_get_press+0x194>)
 80045b2:	f7fd fbcd 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80045b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80045ba:	3301      	adds	r3, #1
 80045bc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80045c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80045c4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80045d0:	4293      	cmp	r3, r2
 80045d2:	dbe4      	blt.n	800459e <Cmd_iou_get_press+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80045d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80045d8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	f107 0310 	add.w	r3, r7, #16
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd fe55 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80045ea:	f7fd fe3b 	bl	8002264 <set_send_flag>
 80045ee:	e01d      	b.n	800462c <Cmd_iou_get_press+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80045f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045f4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80045f8:	2201      	movs	r2, #1
 80045fa:	2105      	movs	r1, #5
 80045fc:	f008 f992 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004600:	f107 020f 	add.w	r2, r7, #15
 8004604:	f107 0110 	add.w	r1, r7, #16
 8004608:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800460c:	4618      	mov	r0, r3
 800460e:	f008 fa37 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004612:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004616:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	f107 0310 	add.w	r3, r7, #16
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f7fd fe36 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004628:	f7fd fe1c 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800462c:	2305      	movs	r3, #5
}
 800462e:	4618      	mov	r0, r3
 8004630:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40020000 	.word	0x40020000
 800463c:	40005000 	.word	0x40005000
 8004640:	20007993 	.word	0x20007993
 8004644:	40004400 	.word	0x40004400
 8004648:	20007994 	.word	0x20007994
 800464c:	40011000 	.word	0x40011000

08004650 <Cmd_iou_get_parameters>:


int Cmd_iou_get_parameters(int argc, char *argv[])
{
 8004650:	b580      	push	{r7, lr}
 8004652:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8004656:	af00      	add	r7, sp, #0
 8004658:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800465c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004660:	6018      	str	r0, [r3, #0]
 8004662:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004666:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800466a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800466c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004670:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b01      	cmp	r3, #1
 8004678:	dc01      	bgt.n	800467e <Cmd_iou_get_parameters+0x2e>
 800467a:	2303      	movs	r3, #3
 800467c:	e0a3      	b.n	80047c6 <Cmd_iou_get_parameters+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800467e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004682:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b02      	cmp	r3, #2
 800468a:	dd01      	ble.n	8004690 <Cmd_iou_get_parameters+0x40>
 800468c:	2302      	movs	r3, #2
 800468e:	e09a      	b.n	80047c6 <Cmd_iou_get_parameters+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004690:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004694:	484e      	ldr	r0, [pc, #312]	@ (80047d0 <Cmd_iou_get_parameters+0x180>)
 8004696:	f7fd febb 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800469a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800469e:	484c      	ldr	r0, [pc, #304]	@ (80047d0 <Cmd_iou_get_parameters+0x180>)
 80046a0:	f7fd feb6 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80046a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046a8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046b2:	3b01      	subs	r3, #1
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80046ba:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80046c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80046cc:	4a41      	ldr	r2, [pc, #260]	@ (80047d4 <Cmd_iou_get_parameters+0x184>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d103      	bne.n	80046da <Cmd_iou_get_parameters+0x8a>
    	uart_choose_uart5 = 1;
 80046d2:	4b41      	ldr	r3, [pc, #260]	@ (80047d8 <Cmd_iou_get_parameters+0x188>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e002      	b.n	80046e0 <Cmd_iou_get_parameters+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80046da:	4b3f      	ldr	r3, [pc, #252]	@ (80047d8 <Cmd_iou_get_parameters+0x188>)
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80046e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80046e4:	4a3d      	ldr	r2, [pc, #244]	@ (80047dc <Cmd_iou_get_parameters+0x18c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d103      	bne.n	80046f2 <Cmd_iou_get_parameters+0xa2>
    	uart_choose_usart2 = 1;
 80046ea:	4b3d      	ldr	r3, [pc, #244]	@ (80047e0 <Cmd_iou_get_parameters+0x190>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	e002      	b.n	80046f8 <Cmd_iou_get_parameters+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80046f2:	4b3b      	ldr	r3, [pc, #236]	@ (80047e0 <Cmd_iou_get_parameters+0x190>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_PARAMETERS;
 80046f8:	2313      	movs	r3, #19
 80046fa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80046fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004702:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004706:	2201      	movs	r2, #1
 8004708:	2105      	movs	r1, #5
 800470a:	f008 f90b 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800470e:	f107 020f 	add.w	r2, r7, #15
 8004712:	f107 0110 	add.w	r1, r7, #16
 8004716:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800471a:	4618      	mov	r0, r3
 800471c:	f008 f9b0 	bl	800ca80 <frame_encode>

  //  SCH_Delay(5);.
    if (frame_len > 0) {
 8004720:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004724:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d02c      	beq.n	8004788 <Cmd_iou_get_parameters+0x138>
        for (int i = 0; i < frame_len; i++) {
 800472e:	2300      	movs	r3, #0
 8004730:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004734:	e010      	b.n	8004758 <Cmd_iou_get_parameters+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8004736:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800473a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800473e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004742:	4413      	add	r3, r2
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	4826      	ldr	r0, [pc, #152]	@ (80047e4 <Cmd_iou_get_parameters+0x194>)
 800474a:	f7fd fb01 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800474e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004752:	3301      	adds	r3, #1
 8004754:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004758:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800475c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004768:	4293      	cmp	r3, r2
 800476a:	dbe4      	blt.n	8004736 <Cmd_iou_get_parameters+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800476c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004770:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	f107 0310 	add.w	r3, r7, #16
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f7fd fd89 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004782:	f7fd fd6f 	bl	8002264 <set_send_flag>
 8004786:	e01d      	b.n	80047c4 <Cmd_iou_get_parameters+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004788:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800478c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004790:	2201      	movs	r2, #1
 8004792:	2105      	movs	r1, #5
 8004794:	f008 f8c6 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004798:	f107 020f 	add.w	r2, r7, #15
 800479c:	f107 0110 	add.w	r1, r7, #16
 80047a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047a4:	4618      	mov	r0, r3
 80047a6:	f008 f96b 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80047aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80047ae:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80047b2:	781a      	ldrb	r2, [r3, #0]
 80047b4:	f107 0310 	add.w	r3, r7, #16
 80047b8:	4611      	mov	r1, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd fd6a 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80047c0:	f7fd fd50 	bl	8002264 <set_send_flag>

    }

    return CMDLINE_PENDING;
 80047c4:	2305      	movs	r3, #5
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40020000 	.word	0x40020000
 80047d4:	40005000 	.word	0x40005000
 80047d8:	20007993 	.word	0x20007993
 80047dc:	40004400 	.word	0x40004400
 80047e0:	20007994 	.word	0x20007994
 80047e4:	40011000 	.word	0x40011000

080047e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	041a      	lsls	r2, r3, #16
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	619a      	str	r2, [r3, #24]
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <PDU_create_task>:
};



void PDU_create_task(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PDU_task_context.taskHandle, &PDU_task_context.taskProperty);
 800480c:	4906      	ldr	r1, [pc, #24]	@ (8004828 <PDU_create_task+0x20>)
 800480e:	4807      	ldr	r0, [pc, #28]	@ (800482c <PDU_create_task+0x24>)
 8004810:	f007 ff02 	bl	800c618 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 8004814:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004818:	2006      	movs	r0, #6
 800481a:	f007 fed1 	bl	800c5c0 <SCH_TIM_Start>
    Ringbuf_init();
 800481e:	f7fd f8ed 	bl	80019fc <Ringbuf_init>
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200000fc 	.word	0x200000fc
 800482c:	200000f8 	.word	0x200000f8

08004830 <PDU_update_task>:


volatile uint8_t timeout_counter_pdu = 0;

void PDU_update_task(void) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 8004836:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <PDU_update_task+0xcc>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d059      	beq.n	80048f4 <PDU_update_task+0xc4>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PDU))
 8004840:	2006      	movs	r0, #6
 8004842:	f007 fed3 	bl	800c5ec <SCH_TIM_HasCompleted>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d053      	beq.n	80048f4 <PDU_update_task+0xc4>
		{

			if(!sendFlag){
 800484c:	4b2c      	ldr	r3, [pc, #176]	@ (8004900 <PDU_update_task+0xd0>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d136      	bne.n	80048c4 <PDU_update_task+0x94>
				if(!send_rs422){
 8004856:	4b2b      	ldr	r3, [pc, #172]	@ (8004904 <PDU_update_task+0xd4>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d149      	bne.n	80048f4 <PDU_update_task+0xc4>
					if(receive_iouFlag&&receive_pmuFlag){
 8004860:	4b29      	ldr	r3, [pc, #164]	@ (8004908 <PDU_update_task+0xd8>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d044      	beq.n	80048f4 <PDU_update_task+0xc4>
 800486a:	4b28      	ldr	r3, [pc, #160]	@ (800490c <PDU_update_task+0xdc>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d03f      	beq.n	80048f4 <PDU_update_task+0xc4>
						switch_board(0);
 8004874:	2000      	movs	r0, #0
 8004876:	f003 f9ab 	bl	8007bd0 <switch_board>
						Uart_flush(USART1);
 800487a:	4825      	ldr	r0, [pc, #148]	@ (8004910 <PDU_update_task+0xe0>)
 800487c:	f7fd fbd4 	bl	8002028 <Uart_flush>

						frame = pdu_frame;
 8004880:	4b24      	ldr	r3, [pc, #144]	@ (8004914 <PDU_update_task+0xe4>)
 8004882:	60bb      	str	r3, [r7, #8]
						frame_len = sizeof(pdu_frame);
 8004884:	2309      	movs	r3, #9
 8004886:	71fb      	strb	r3, [r7, #7]
						for (int i = 0; i < frame_len; i++) {
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e00a      	b.n	80048a4 <PDU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	4413      	add	r3, r2
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	4619      	mov	r1, r3
 8004898:	481d      	ldr	r0, [pc, #116]	@ (8004910 <PDU_update_task+0xe0>)
 800489a:	f7fd fa59 	bl	8001d50 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3301      	adds	r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	dbf0      	blt.n	800488e <PDU_update_task+0x5e>
						}
						receive_pduFlag = 0;
 80048ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004918 <PDU_update_task+0xe8>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80048b2:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <PDU_update_task+0xd4>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 80048b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80048bc:	2006      	movs	r0, #6
 80048be:	f007 fe7f 	bl	800c5c0 <SCH_TIM_Start>
					//Timeout memset 0xff
				}
			}
		}
	}
}
 80048c2:	e017      	b.n	80048f4 <PDU_update_task+0xc4>
				if(!receive_pduFlag){
 80048c4:	4b14      	ldr	r3, [pc, #80]	@ (8004918 <PDU_update_task+0xe8>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d112      	bne.n	80048f4 <PDU_update_task+0xc4>
					send_rs422 = 0;
 80048ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <PDU_update_task+0xd4>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
					receive_pduFlag = 1;
 80048d4:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <PDU_update_task+0xe8>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
					SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 80048da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80048de:	2006      	movs	r0, #6
 80048e0:	f007 fe6e 	bl	800c5c0 <SCH_TIM_Start>
					memset(&nextBuffer[57], 0xFF, 54);
 80048e4:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <PDU_update_task+0xec>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3339      	adds	r3, #57	@ 0x39
 80048ea:	2236      	movs	r2, #54	@ 0x36
 80048ec:	21ff      	movs	r1, #255	@ 0xff
 80048ee:	4618      	mov	r0, r3
 80048f0:	f00c fd2f 	bl	8011352 <memset>
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20007abd 	.word	0x20007abd
 8004900:	2000788d 	.word	0x2000788d
 8004904:	20007992 	.word	0x20007992
 8004908:	200000ea 	.word	0x200000ea
 800490c:	200000e9 	.word	0x200000e9
 8004910:	40011000 	.word	0x40011000
 8004914:	200000ec 	.word	0x200000ec
 8004918:	200000e8 	.word	0x200000e8
 800491c:	20002158 	.word	0x20002158

08004920 <Cmd_pdu_set_channel>:


#define DEST_ADDR FSP_ADR_PDU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pdu_set_channel(int argc, char *argv[])
{
 8004920:	b580      	push	{r7, lr}
 8004922:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004926:	af02      	add	r7, sp, #8
 8004928:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800492c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004930:	6018      	str	r0, [r3, #0]
 8004932:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004936:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800493a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 800493c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004940:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b03      	cmp	r3, #3
 8004948:	dc01      	bgt.n	800494e <Cmd_pdu_set_channel+0x2e>
 800494a:	2303      	movs	r3, #3
 800494c:	e0db      	b.n	8004b06 <Cmd_pdu_set_channel+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 800494e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004952:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b04      	cmp	r3, #4
 800495a:	dd01      	ble.n	8004960 <Cmd_pdu_set_channel+0x40>
 800495c:	2302      	movs	r3, #2
 800495e:	e0d2      	b.n	8004b06 <Cmd_pdu_set_channel+0x1e6>
    uint8_t channel = atoi(argv[1]);
 8004960:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004964:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3304      	adds	r3, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f00a febf 	bl	800f6f2 <atoi>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 800497a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800497e:	2b09      	cmp	r3, #9
 8004980:	d901      	bls.n	8004986 <Cmd_pdu_set_channel+0x66>
 8004982:	2304      	movs	r3, #4
 8004984:	e0bf      	b.n	8004b06 <Cmd_pdu_set_channel+0x1e6>

    uint8_t state = atoi(argv[2]);
 8004986:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800498a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3308      	adds	r3, #8
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f00a feac 	bl	800f6f2 <atoi>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 80049a0:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d901      	bls.n	80049ac <Cmd_pdu_set_channel+0x8c>
 80049a8:	2304      	movs	r3, #4
 80049aa:	e0ac      	b.n	8004b06 <Cmd_pdu_set_channel+0x1e6>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80049ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049b0:	4857      	ldr	r0, [pc, #348]	@ (8004b10 <Cmd_pdu_set_channel+0x1f0>)
 80049b2:	f7ff ff19 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80049b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80049ba:	4855      	ldr	r0, [pc, #340]	@ (8004b10 <Cmd_pdu_set_channel+0x1f0>)
 80049bc:	f7ff ff14 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80049c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049c4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049ce:	3b01      	subs	r3, #1
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80049d6:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	4413      	add	r3, r2
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80049e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80049e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004b14 <Cmd_pdu_set_channel+0x1f4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d103      	bne.n	80049f6 <Cmd_pdu_set_channel+0xd6>
    	uart_choose_uart5 = 1;
 80049ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004b18 <Cmd_pdu_set_channel+0x1f8>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	e002      	b.n	80049fc <Cmd_pdu_set_channel+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 80049f6:	4b48      	ldr	r3, [pc, #288]	@ (8004b18 <Cmd_pdu_set_channel+0x1f8>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80049fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004a00:	4a46      	ldr	r2, [pc, #280]	@ (8004b1c <Cmd_pdu_set_channel+0x1fc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d103      	bne.n	8004a0e <Cmd_pdu_set_channel+0xee>
    	uart_choose_usart2 = 1;
 8004a06:	4b46      	ldr	r3, [pc, #280]	@ (8004b20 <Cmd_pdu_set_channel+0x200>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e002      	b.n	8004a14 <Cmd_pdu_set_channel+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 8004a0e:	4b44      	ldr	r3, [pc, #272]	@ (8004b20 <Cmd_pdu_set_channel+0x200>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_CHANNEL;
 8004a14:	2301      	movs	r3, #1
 8004a16:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = channel;
 8004a1a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004a1e:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 8004a22:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004a26:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004a2a:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004a2e:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004a32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	2301      	movs	r3, #1
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f007 ff98 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004a44:	f107 020f 	add.w	r2, r7, #15
 8004a48:	f107 0110 	add.w	r1, r7, #16
 8004a4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004a50:	4618      	mov	r0, r3
 8004a52:	f008 f815 	bl	800ca80 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004a56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a5a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d02c      	beq.n	8004abe <Cmd_pdu_set_channel+0x19e>
        for (int i = 0; i < frame_len; i++) {
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004a6a:	e010      	b.n	8004a8e <Cmd_pdu_set_channel+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 8004a6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a70:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004a74:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004a78:	4413      	add	r3, r2
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4829      	ldr	r0, [pc, #164]	@ (8004b24 <Cmd_pdu_set_channel+0x204>)
 8004a80:	f7fd f966 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004a84:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004a8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a92:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	dbe4      	blt.n	8004a6c <Cmd_pdu_set_channel+0x14c>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004aa2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004aa6:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004aaa:	781a      	ldrb	r2, [r3, #0]
 8004aac:	f107 0310 	add.w	r3, r7, #16
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fd fbee 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8004ab8:	f7fd fbd4 	bl	8002264 <set_send_flag>
 8004abc:	e022      	b.n	8004b04 <Cmd_pdu_set_channel+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004abe:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004ac2:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004ac6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	2301      	movs	r3, #1
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f007 ff4e 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004ad8:	f107 020f 	add.w	r2, r7, #15
 8004adc:	f107 0110 	add.w	r1, r7, #16
 8004ae0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f007 ffcb 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004aea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004aee:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	f107 0310 	add.w	r3, r7, #16
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fd fbca 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004b00:	f7fd fbb0 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004b04:	2305      	movs	r3, #5
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40020000 	.word	0x40020000
 8004b14:	40005000 	.word	0x40005000
 8004b18:	20007993 	.word	0x20007993
 8004b1c:	40004400 	.word	0x40004400
 8004b20:	20007994 	.word	0x20007994
 8004b24:	40011000 	.word	0x40011000

08004b28 <Cmd_pdu_set_buck>:

int Cmd_pdu_set_buck(int argc, char *argv[])
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b34:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004b38:	6018      	str	r0, [r3, #0]
 8004b3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b3e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004b42:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8004b44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b48:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	dc01      	bgt.n	8004b56 <Cmd_pdu_set_buck+0x2e>
 8004b52:	2303      	movs	r3, #3
 8004b54:	e0db      	b.n	8004d0e <Cmd_pdu_set_buck+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8004b56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b5a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	dd01      	ble.n	8004b68 <Cmd_pdu_set_buck+0x40>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e0d2      	b.n	8004d0e <Cmd_pdu_set_buck+0x1e6>
    uint8_t buck = atoi(argv[1]);
 8004b68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b6c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3304      	adds	r3, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f00a fdbb 	bl	800f6f2 <atoi>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8004b82:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d901      	bls.n	8004b8e <Cmd_pdu_set_buck+0x66>
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	e0bf      	b.n	8004d0e <Cmd_pdu_set_buck+0x1e6>

    uint8_t state = atoi(argv[2]);
 8004b8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b92:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f00a fda8 	bl	800f6f2 <atoi>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004ba8:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d901      	bls.n	8004bb4 <Cmd_pdu_set_buck+0x8c>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	e0ac      	b.n	8004d0e <Cmd_pdu_set_buck+0x1e6>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004bb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004bb8:	4857      	ldr	r0, [pc, #348]	@ (8004d18 <Cmd_pdu_set_buck+0x1f0>)
 8004bba:	f7ff fe15 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004bbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004bc2:	4855      	ldr	r0, [pc, #340]	@ (8004d18 <Cmd_pdu_set_buck+0x1f0>)
 8004bc4:	f7ff fe10 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004bc8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bcc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004bde:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	4413      	add	r3, r2
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004bec:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004bf0:	4a4a      	ldr	r2, [pc, #296]	@ (8004d1c <Cmd_pdu_set_buck+0x1f4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d103      	bne.n	8004bfe <Cmd_pdu_set_buck+0xd6>
    	uart_choose_uart5 = 1;
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8004d20 <Cmd_pdu_set_buck+0x1f8>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e002      	b.n	8004c04 <Cmd_pdu_set_buck+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8004bfe:	4b48      	ldr	r3, [pc, #288]	@ (8004d20 <Cmd_pdu_set_buck+0x1f8>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004c04:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004c08:	4a46      	ldr	r2, [pc, #280]	@ (8004d24 <Cmd_pdu_set_buck+0x1fc>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d103      	bne.n	8004c16 <Cmd_pdu_set_buck+0xee>
    	uart_choose_usart2 = 1;
 8004c0e:	4b46      	ldr	r3, [pc, #280]	@ (8004d28 <Cmd_pdu_set_buck+0x200>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
 8004c14:	e002      	b.n	8004c1c <Cmd_pdu_set_buck+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 8004c16:	4b44      	ldr	r3, [pc, #272]	@ (8004d28 <Cmd_pdu_set_buck+0x200>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_BUCK;
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = buck;
 8004c22:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004c26:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 8004c2a:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004c2e:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004c32:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004c36:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004c3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	2301      	movs	r3, #1
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	2303      	movs	r3, #3
 8004c46:	2202      	movs	r2, #2
 8004c48:	f007 fe94 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004c4c:	f107 020f 	add.w	r2, r7, #15
 8004c50:	f107 0110 	add.w	r1, r7, #16
 8004c54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f007 ff11 	bl	800ca80 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004c5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c62:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d02c      	beq.n	8004cc6 <Cmd_pdu_set_buck+0x19e>
        for (int i = 0; i < frame_len; i++) {
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004c72:	e010      	b.n	8004c96 <Cmd_pdu_set_buck+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 8004c74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c78:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004c7c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c80:	4413      	add	r3, r2
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	4619      	mov	r1, r3
 8004c86:	4829      	ldr	r0, [pc, #164]	@ (8004d2c <Cmd_pdu_set_buck+0x204>)
 8004c88:	f7fd f862 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004c8c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004c90:	3301      	adds	r3, #1
 8004c92:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004c96:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c9a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	dbe4      	blt.n	8004c74 <Cmd_pdu_set_buck+0x14c>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004caa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cae:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	f107 0310 	add.w	r3, r7, #16
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fd faea 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8004cc0:	f7fd fad0 	bl	8002264 <set_send_flag>
 8004cc4:	e022      	b.n	8004d0c <Cmd_pdu_set_buck+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004cc6:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004cca:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004cce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2303      	movs	r3, #3
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f007 fe4a 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004ce0:	f107 020f 	add.w	r2, r7, #15
 8004ce4:	f107 0110 	add.w	r1, r7, #16
 8004ce8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cec:	4618      	mov	r0, r3
 8004cee:	f007 fec7 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004cf2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cf6:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004cfa:	781a      	ldrb	r2, [r3, #0]
 8004cfc:	f107 0310 	add.w	r3, r7, #16
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fd fac6 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004d08:	f7fd faac 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004d0c:	2305      	movs	r3, #5
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40020000 	.word	0x40020000
 8004d1c:	40005000 	.word	0x40005000
 8004d20:	20007993 	.word	0x20007993
 8004d24:	40004400 	.word	0x40004400
 8004d28:	20007994 	.word	0x20007994
 8004d2c:	40011000 	.word	0x40011000

08004d30 <Cmd_pdu_set_all>:

int Cmd_pdu_set_all(int argc, char *argv[])
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004d36:	af02      	add	r7, sp, #8
 8004d38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d3c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004d40:	6018      	str	r0, [r3, #0]
 8004d42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d46:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004d4a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004d4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d50:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	dc01      	bgt.n	8004d5e <Cmd_pdu_set_all+0x2e>
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e0c4      	b.n	8004ee8 <Cmd_pdu_set_all+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004d5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d62:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	dd01      	ble.n	8004d70 <Cmd_pdu_set_all+0x40>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e0bb      	b.n	8004ee8 <Cmd_pdu_set_all+0x1b8>

    uint8_t state = atoi(argv[1]);
 8004d70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d74:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f00a fcb7 	bl	800f6f2 <atoi>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004d8a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d901      	bls.n	8004d96 <Cmd_pdu_set_all+0x66>
 8004d92:	2304      	movs	r3, #4
 8004d94:	e0a8      	b.n	8004ee8 <Cmd_pdu_set_all+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004d96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d9a:	4856      	ldr	r0, [pc, #344]	@ (8004ef4 <Cmd_pdu_set_all+0x1c4>)
 8004d9c:	f7ff fd24 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004da0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004da4:	4853      	ldr	r0, [pc, #332]	@ (8004ef4 <Cmd_pdu_set_all+0x1c4>)
 8004da6:	f7ff fd1f 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004daa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dae:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004db8:	3b01      	subs	r3, #1
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004dc0:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004dce:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004dd2:	4a49      	ldr	r2, [pc, #292]	@ (8004ef8 <Cmd_pdu_set_all+0x1c8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d103      	bne.n	8004de0 <Cmd_pdu_set_all+0xb0>
    	uart_choose_uart5 = 1;
 8004dd8:	4b48      	ldr	r3, [pc, #288]	@ (8004efc <Cmd_pdu_set_all+0x1cc>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e002      	b.n	8004de6 <Cmd_pdu_set_all+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004de0:	4b46      	ldr	r3, [pc, #280]	@ (8004efc <Cmd_pdu_set_all+0x1cc>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004de6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004dea:	4a45      	ldr	r2, [pc, #276]	@ (8004f00 <Cmd_pdu_set_all+0x1d0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d103      	bne.n	8004df8 <Cmd_pdu_set_all+0xc8>
    	uart_choose_usart2 = 1;
 8004df0:	4b44      	ldr	r3, [pc, #272]	@ (8004f04 <Cmd_pdu_set_all+0x1d4>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e002      	b.n	8004dfe <Cmd_pdu_set_all+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8004df8:	4b42      	ldr	r3, [pc, #264]	@ (8004f04 <Cmd_pdu_set_all+0x1d4>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_ALL;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = state;
 8004e04:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004e08:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004e0c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004e10:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004e14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2303      	movs	r3, #3
 8004e20:	2201      	movs	r2, #1
 8004e22:	f007 fda7 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004e26:	f107 020f 	add.w	r2, r7, #15
 8004e2a:	f107 0110 	add.w	r1, r7, #16
 8004e2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e32:	4618      	mov	r0, r3
 8004e34:	f007 fe24 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 8004e38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e3c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d02c      	beq.n	8004ea0 <Cmd_pdu_set_all+0x170>
        for (int i = 0; i < frame_len; i++) {
 8004e46:	2300      	movs	r3, #0
 8004e48:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004e4c:	e010      	b.n	8004e70 <Cmd_pdu_set_all+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8004e4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e52:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004e56:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004e5a:	4413      	add	r3, r2
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4829      	ldr	r0, [pc, #164]	@ (8004f08 <Cmd_pdu_set_all+0x1d8>)
 8004e62:	f7fc ff75 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004e66:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004e70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e74:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004e80:	4293      	cmp	r3, r2
 8004e82:	dbe4      	blt.n	8004e4e <Cmd_pdu_set_all+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004e84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e88:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004e8c:	781a      	ldrb	r2, [r3, #0]
 8004e8e:	f107 0310 	add.w	r3, r7, #16
 8004e92:	4611      	mov	r1, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fd f9fd 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8004e9a:	f7fd f9e3 	bl	8002264 <set_send_flag>
 8004e9e:	e022      	b.n	8004ee6 <Cmd_pdu_set_all+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004ea0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004ea4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004ea8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	2301      	movs	r3, #1
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f007 fd5d 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004eba:	f107 020f 	add.w	r2, r7, #15
 8004ebe:	f107 0110 	add.w	r1, r7, #16
 8004ec2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f007 fdda 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004ecc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ed0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004ed4:	781a      	ldrb	r2, [r3, #0]
 8004ed6:	f107 0310 	add.w	r3, r7, #16
 8004eda:	4611      	mov	r1, r2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fd f9d9 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004ee2:	f7fd f9bf 	bl	8002264 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8004ee6:	2305      	movs	r3, #5
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40020000 	.word	0x40020000
 8004ef8:	40005000 	.word	0x40005000
 8004efc:	20007993 	.word	0x20007993
 8004f00:	40004400 	.word	0x40004400
 8004f04:	20007994 	.word	0x20007994
 8004f08:	40011000 	.word	0x40011000

08004f0c <Cmd_pdu_get_channel>:

int Cmd_pdu_get_channel(int argc, char *argv[])
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004f12:	af02      	add	r7, sp, #8
 8004f14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f18:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004f1c:	6018      	str	r0, [r3, #0]
 8004f1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f22:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004f26:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004f28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f2c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	dc01      	bgt.n	8004f3a <Cmd_pdu_get_channel+0x2e>
 8004f36:	2303      	movs	r3, #3
 8004f38:	e0c4      	b.n	80050c4 <Cmd_pdu_get_channel+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004f3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f3e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	dd01      	ble.n	8004f4c <Cmd_pdu_get_channel+0x40>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e0bb      	b.n	80050c4 <Cmd_pdu_get_channel+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8004f4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f50:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3304      	adds	r3, #4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f00a fbc9 	bl	800f6f2 <atoi>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8004f66:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004f6a:	2b09      	cmp	r3, #9
 8004f6c:	d901      	bls.n	8004f72 <Cmd_pdu_get_channel+0x66>
 8004f6e:	2304      	movs	r3, #4
 8004f70:	e0a8      	b.n	80050c4 <Cmd_pdu_get_channel+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004f72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f76:	4856      	ldr	r0, [pc, #344]	@ (80050d0 <Cmd_pdu_get_channel+0x1c4>)
 8004f78:	f7ff fc36 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004f7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f80:	4853      	ldr	r0, [pc, #332]	@ (80050d0 <Cmd_pdu_get_channel+0x1c4>)
 8004f82:	f7ff fc31 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004f86:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f8a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f94:	3b01      	subs	r3, #1
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004f9c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004faa:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004fae:	4a49      	ldr	r2, [pc, #292]	@ (80050d4 <Cmd_pdu_get_channel+0x1c8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d103      	bne.n	8004fbc <Cmd_pdu_get_channel+0xb0>
    	uart_choose_uart5 = 1;
 8004fb4:	4b48      	ldr	r3, [pc, #288]	@ (80050d8 <Cmd_pdu_get_channel+0x1cc>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	e002      	b.n	8004fc2 <Cmd_pdu_get_channel+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004fbc:	4b46      	ldr	r3, [pc, #280]	@ (80050d8 <Cmd_pdu_get_channel+0x1cc>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004fc2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004fc6:	4a45      	ldr	r2, [pc, #276]	@ (80050dc <Cmd_pdu_get_channel+0x1d0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d103      	bne.n	8004fd4 <Cmd_pdu_get_channel+0xc8>
    	uart_choose_usart2 = 1;
 8004fcc:	4b44      	ldr	r3, [pc, #272]	@ (80050e0 <Cmd_pdu_get_channel+0x1d4>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e002      	b.n	8004fda <Cmd_pdu_get_channel+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8004fd4:	4b42      	ldr	r3, [pc, #264]	@ (80050e0 <Cmd_pdu_get_channel+0x1d4>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
    }



    uint8_t cmd  = CMD_CODE_PDU_GET_CHANNEL;
 8004fda:	2304      	movs	r3, #4
 8004fdc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = channel;
 8004fe0:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004fe4:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004fe8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004fec:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004ff0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f007 fcb9 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005002:	f107 020f 	add.w	r2, r7, #15
 8005006:	f107 0110 	add.w	r1, r7, #16
 800500a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800500e:	4618      	mov	r0, r3
 8005010:	f007 fd36 	bl	800ca80 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005014:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005018:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d02c      	beq.n	800507c <Cmd_pdu_get_channel+0x170>
        for (int i = 0; i < frame_len; i++) {
 8005022:	2300      	movs	r3, #0
 8005024:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005028:	e010      	b.n	800504c <Cmd_pdu_get_channel+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800502a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800502e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8005032:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005036:	4413      	add	r3, r2
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	4619      	mov	r1, r3
 800503c:	4829      	ldr	r0, [pc, #164]	@ (80050e4 <Cmd_pdu_get_channel+0x1d8>)
 800503e:	f7fc fe87 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005042:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005046:	3301      	adds	r3, #1
 8005048:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800504c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005050:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800505c:	4293      	cmp	r3, r2
 800505e:	dbe4      	blt.n	800502a <Cmd_pdu_get_channel+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005060:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005064:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	f107 0310 	add.w	r3, r7, #16
 800506e:	4611      	mov	r1, r2
 8005070:	4618      	mov	r0, r3
 8005072:	f7fd f90f 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005076:	f7fd f8f5 	bl	8002264 <set_send_flag>
 800507a:	e022      	b.n	80050c2 <Cmd_pdu_get_channel+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800507c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8005080:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005084:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005088:	9301      	str	r3, [sp, #4]
 800508a:	2301      	movs	r3, #1
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2303      	movs	r3, #3
 8005090:	2201      	movs	r2, #1
 8005092:	f007 fc6f 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005096:	f107 020f 	add.w	r2, r7, #15
 800509a:	f107 0110 	add.w	r1, r7, #16
 800509e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80050a2:	4618      	mov	r0, r3
 80050a4:	f007 fcec 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80050a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050ac:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80050b0:	781a      	ldrb	r2, [r3, #0]
 80050b2:	f107 0310 	add.w	r3, r7, #16
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fd f8eb 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80050be:	f7fd f8d1 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80050c2:	2305      	movs	r3, #5
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40020000 	.word	0x40020000
 80050d4:	40005000 	.word	0x40005000
 80050d8:	20007993 	.word	0x20007993
 80050dc:	40004400 	.word	0x40004400
 80050e0:	20007994 	.word	0x20007994
 80050e4:	40011000 	.word	0x40011000

080050e8 <Cmd_pdu_get_buck>:

int Cmd_pdu_get_buck(int argc, char *argv[])
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80050ee:	af02      	add	r7, sp, #8
 80050f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050f4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80050f8:	6018      	str	r0, [r3, #0]
 80050fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050fe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005102:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8005104:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005108:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b02      	cmp	r3, #2
 8005110:	dc01      	bgt.n	8005116 <Cmd_pdu_get_buck+0x2e>
 8005112:	2303      	movs	r3, #3
 8005114:	e0c4      	b.n	80052a0 <Cmd_pdu_get_buck+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8005116:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800511a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b03      	cmp	r3, #3
 8005122:	dd01      	ble.n	8005128 <Cmd_pdu_get_buck+0x40>
 8005124:	2302      	movs	r3, #2
 8005126:	e0bb      	b.n	80052a0 <Cmd_pdu_get_buck+0x1b8>
    uint8_t buck = atoi(argv[1]);
 8005128:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800512c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3304      	adds	r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f00a fadb 	bl	800f6f2 <atoi>
 800513c:	4603      	mov	r3, r0
 800513e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8005142:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005146:	2b06      	cmp	r3, #6
 8005148:	d901      	bls.n	800514e <Cmd_pdu_get_buck+0x66>
 800514a:	2304      	movs	r3, #4
 800514c:	e0a8      	b.n	80052a0 <Cmd_pdu_get_buck+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800514e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005152:	4856      	ldr	r0, [pc, #344]	@ (80052ac <Cmd_pdu_get_buck+0x1c4>)
 8005154:	f7ff fb48 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005158:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800515c:	4853      	ldr	r0, [pc, #332]	@ (80052ac <Cmd_pdu_get_buck+0x1c4>)
 800515e:	f7ff fb43 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005162:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005166:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005170:	3b01      	subs	r3, #1
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005178:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	4413      	add	r3, r2
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005186:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800518a:	4a49      	ldr	r2, [pc, #292]	@ (80052b0 <Cmd_pdu_get_buck+0x1c8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d103      	bne.n	8005198 <Cmd_pdu_get_buck+0xb0>
    	uart_choose_uart5 = 1;
 8005190:	4b48      	ldr	r3, [pc, #288]	@ (80052b4 <Cmd_pdu_get_buck+0x1cc>)
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e002      	b.n	800519e <Cmd_pdu_get_buck+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005198:	4b46      	ldr	r3, [pc, #280]	@ (80052b4 <Cmd_pdu_get_buck+0x1cc>)
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800519e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80051a2:	4a45      	ldr	r2, [pc, #276]	@ (80052b8 <Cmd_pdu_get_buck+0x1d0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d103      	bne.n	80051b0 <Cmd_pdu_get_buck+0xc8>
    	uart_choose_usart2 = 1;
 80051a8:	4b44      	ldr	r3, [pc, #272]	@ (80052bc <Cmd_pdu_get_buck+0x1d4>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e002      	b.n	80051b6 <Cmd_pdu_get_buck+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80051b0:	4b42      	ldr	r3, [pc, #264]	@ (80052bc <Cmd_pdu_get_buck+0x1d4>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_GET_BUCK;
 80051b6:	2305      	movs	r3, #5
 80051b8:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = buck;
 80051bc:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80051c0:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80051c4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80051c8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80051cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	2301      	movs	r3, #1
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	2303      	movs	r3, #3
 80051d8:	2201      	movs	r2, #1
 80051da:	f007 fbcb 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80051de:	f107 020f 	add.w	r2, r7, #15
 80051e2:	f107 0110 	add.w	r1, r7, #16
 80051e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80051ea:	4618      	mov	r0, r3
 80051ec:	f007 fc48 	bl	800ca80 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80051f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80051f4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d02c      	beq.n	8005258 <Cmd_pdu_get_buck+0x170>
        for (int i = 0; i < frame_len; i++) {
 80051fe:	2300      	movs	r3, #0
 8005200:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005204:	e010      	b.n	8005228 <Cmd_pdu_get_buck+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8005206:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800520a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800520e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005212:	4413      	add	r3, r2
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	4619      	mov	r1, r3
 8005218:	4829      	ldr	r0, [pc, #164]	@ (80052c0 <Cmd_pdu_get_buck+0x1d8>)
 800521a:	f7fc fd99 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800521e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005222:	3301      	adds	r3, #1
 8005224:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005228:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800522c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005238:	4293      	cmp	r3, r2
 800523a:	dbe4      	blt.n	8005206 <Cmd_pdu_get_buck+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800523c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005240:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	f107 0310 	add.w	r3, r7, #16
 800524a:	4611      	mov	r1, r2
 800524c:	4618      	mov	r0, r3
 800524e:	f7fd f821 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005252:	f7fd f807 	bl	8002264 <set_send_flag>
 8005256:	e022      	b.n	800529e <Cmd_pdu_get_buck+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005258:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800525c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005260:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	2301      	movs	r3, #1
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	2303      	movs	r3, #3
 800526c:	2201      	movs	r2, #1
 800526e:	f007 fb81 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005272:	f107 020f 	add.w	r2, r7, #15
 8005276:	f107 0110 	add.w	r1, r7, #16
 800527a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800527e:	4618      	mov	r0, r3
 8005280:	f007 fbfe 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005284:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005288:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800528c:	781a      	ldrb	r2, [r3, #0]
 800528e:	f107 0310 	add.w	r3, r7, #16
 8005292:	4611      	mov	r1, r2
 8005294:	4618      	mov	r0, r3
 8005296:	f7fc fffd 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800529a:	f7fc ffe3 	bl	8002264 <set_send_flag>
    }


    return CMDLINE_PENDING;
 800529e:	2305      	movs	r3, #5
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40020000 	.word	0x40020000
 80052b0:	40005000 	.word	0x40005000
 80052b4:	20007993 	.word	0x20007993
 80052b8:	40004400 	.word	0x40004400
 80052bc:	20007994 	.word	0x20007994
 80052c0:	40011000 	.word	0x40011000

080052c4 <Cmd_pdu_get_all>:

int Cmd_pdu_get_all(int argc, char *argv[])
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052d0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80052d4:	6018      	str	r0, [r3, #0]
 80052d6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052da:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80052de:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80052e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052e4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	dc01      	bgt.n	80052f2 <Cmd_pdu_get_all+0x2e>
 80052ee:	2303      	movs	r3, #3
 80052f0:	e0a3      	b.n	800543a <Cmd_pdu_get_all+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80052f2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80052f6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	dd01      	ble.n	8005304 <Cmd_pdu_get_all+0x40>
 8005300:	2302      	movs	r3, #2
 8005302:	e09a      	b.n	800543a <Cmd_pdu_get_all+0x176>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005304:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005308:	484e      	ldr	r0, [pc, #312]	@ (8005444 <Cmd_pdu_get_all+0x180>)
 800530a:	f7ff fa6d 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800530e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005312:	484c      	ldr	r0, [pc, #304]	@ (8005444 <Cmd_pdu_get_all+0x180>)
 8005314:	f7ff fa68 	bl	80047e8 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005318:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800531c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005326:	3b01      	subs	r3, #1
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800532e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	4413      	add	r3, r2
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 800533c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005340:	4a41      	ldr	r2, [pc, #260]	@ (8005448 <Cmd_pdu_get_all+0x184>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d103      	bne.n	800534e <Cmd_pdu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 8005346:	4b41      	ldr	r3, [pc, #260]	@ (800544c <Cmd_pdu_get_all+0x188>)
 8005348:	2201      	movs	r2, #1
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	e002      	b.n	8005354 <Cmd_pdu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800534e:	4b3f      	ldr	r3, [pc, #252]	@ (800544c <Cmd_pdu_get_all+0x188>)
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005354:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005358:	4a3d      	ldr	r2, [pc, #244]	@ (8005450 <Cmd_pdu_get_all+0x18c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d103      	bne.n	8005366 <Cmd_pdu_get_all+0xa2>
    	uart_choose_usart2 = 1;
 800535e:	4b3d      	ldr	r3, [pc, #244]	@ (8005454 <Cmd_pdu_get_all+0x190>)
 8005360:	2201      	movs	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e002      	b.n	800536c <Cmd_pdu_get_all+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005366:	4b3b      	ldr	r3, [pc, #236]	@ (8005454 <Cmd_pdu_get_all+0x190>)
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_GET_ALL;
 800536c:	2306      	movs	r3, #6
 800536e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005372:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005376:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800537a:	2201      	movs	r2, #1
 800537c:	2103      	movs	r1, #3
 800537e:	f007 fad1 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005382:	f107 020f 	add.w	r2, r7, #15
 8005386:	f107 0110 	add.w	r1, r7, #16
 800538a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800538e:	4618      	mov	r0, r3
 8005390:	f007 fb76 	bl	800ca80 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005394:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005398:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d02c      	beq.n	80053fc <Cmd_pdu_get_all+0x138>
        for (int i = 0; i < frame_len; i++) {
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80053a8:	e010      	b.n	80053cc <Cmd_pdu_get_all+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80053aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80053ae:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80053b2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80053b6:	4413      	add	r3, r2
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	4619      	mov	r1, r3
 80053bc:	4826      	ldr	r0, [pc, #152]	@ (8005458 <Cmd_pdu_get_all+0x194>)
 80053be:	f7fc fcc7 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80053c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80053c6:	3301      	adds	r3, #1
 80053c8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80053cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80053d0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80053dc:	4293      	cmp	r3, r2
 80053de:	dbe4      	blt.n	80053aa <Cmd_pdu_get_all+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80053e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80053e4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	f107 0310 	add.w	r3, r7, #16
 80053ee:	4611      	mov	r1, r2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fc ff4f 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 80053f6:	f7fc ff35 	bl	8002264 <set_send_flag>
 80053fa:	e01d      	b.n	8005438 <Cmd_pdu_get_all+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80053fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005400:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005404:	2201      	movs	r2, #1
 8005406:	2103      	movs	r1, #3
 8005408:	f007 fa8c 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800540c:	f107 020f 	add.w	r2, r7, #15
 8005410:	f107 0110 	add.w	r1, r7, #16
 8005414:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005418:	4618      	mov	r0, r3
 800541a:	f007 fb31 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800541e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005422:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005426:	781a      	ldrb	r2, [r3, #0]
 8005428:	f107 0310 	add.w	r3, r7, #16
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f7fc ff30 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8005434:	f7fc ff16 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005438:	2305      	movs	r3, #5
}
 800543a:	4618      	mov	r0, r3
 800543c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40020000 	.word	0x40020000
 8005448:	40005000 	.word	0x40005000
 800544c:	20007993 	.word	0x20007993
 8005450:	40004400 	.word	0x40004400
 8005454:	20007994 	.word	0x20007994
 8005458:	40011000 	.word	0x40011000

0800545c <LL_GPIO_SetOutputPin>:
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	619a      	str	r2, [r3, #24]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LL_GPIO_ResetOutputPin>:
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	041a      	lsls	r2, r3, #16
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	619a      	str	r2, [r3, #24]
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <PMU_create_task>:
};



void PMU_create_task(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PMU_task_context.taskHandle, &PMU_task_context.taskProperty);
 800549c:	4906      	ldr	r1, [pc, #24]	@ (80054b8 <PMU_create_task+0x20>)
 800549e:	4807      	ldr	r0, [pc, #28]	@ (80054bc <PMU_create_task+0x24>)
 80054a0:	f007 f8ba 	bl	800c618 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 80054a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054a8:	2005      	movs	r0, #5
 80054aa:	f007 f889 	bl	800c5c0 <SCH_TIM_Start>
    Ringbuf_init();
 80054ae:	f7fc faa5 	bl	80019fc <Ringbuf_init>
}
 80054b2:	bf00      	nop
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	2000011c 	.word	0x2000011c
 80054bc:	20000118 	.word	0x20000118

080054c0 <PMU_update_task>:



volatile uint8_t timeout_counter_pmu = 0;

void PMU_update_task(void) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 80054c6:	4b31      	ldr	r3, [pc, #196]	@ (800558c <PMU_update_task+0xcc>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d059      	beq.n	8005584 <PMU_update_task+0xc4>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PMU))
 80054d0:	2005      	movs	r0, #5
 80054d2:	f007 f88b 	bl	800c5ec <SCH_TIM_HasCompleted>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d053      	beq.n	8005584 <PMU_update_task+0xc4>
		{

			if(!sendFlag){
 80054dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005590 <PMU_update_task+0xd0>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d136      	bne.n	8005554 <PMU_update_task+0x94>
				if(!send_rs422){
 80054e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005594 <PMU_update_task+0xd4>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d149      	bne.n	8005584 <PMU_update_task+0xc4>
					if(receive_iouFlag&&receive_pduFlag){
 80054f0:	4b29      	ldr	r3, [pc, #164]	@ (8005598 <PMU_update_task+0xd8>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d044      	beq.n	8005584 <PMU_update_task+0xc4>
 80054fa:	4b28      	ldr	r3, [pc, #160]	@ (800559c <PMU_update_task+0xdc>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d03f      	beq.n	8005584 <PMU_update_task+0xc4>
						switch_board(1);
 8005504:	2001      	movs	r0, #1
 8005506:	f002 fb63 	bl	8007bd0 <switch_board>
						Uart_flush(USART1);
 800550a:	4825      	ldr	r0, [pc, #148]	@ (80055a0 <PMU_update_task+0xe0>)
 800550c:	f7fc fd8c 	bl	8002028 <Uart_flush>

						frame = pmu_frame;
 8005510:	4b24      	ldr	r3, [pc, #144]	@ (80055a4 <PMU_update_task+0xe4>)
 8005512:	60bb      	str	r3, [r7, #8]
						frame_len = sizeof(pmu_frame);
 8005514:	2309      	movs	r3, #9
 8005516:	71fb      	strb	r3, [r7, #7]
						for (int i = 0; i < frame_len; i++) {
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e00a      	b.n	8005534 <PMU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	4413      	add	r3, r2
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	4619      	mov	r1, r3
 8005528:	481d      	ldr	r0, [pc, #116]	@ (80055a0 <PMU_update_task+0xe0>)
 800552a:	f7fc fc11 	bl	8001d50 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3301      	adds	r3, #1
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	429a      	cmp	r2, r3
 800553a:	dbf0      	blt.n	800551e <PMU_update_task+0x5e>
						}
						receive_pmuFlag = 0;
 800553c:	4b1a      	ldr	r3, [pc, #104]	@ (80055a8 <PMU_update_task+0xe8>)
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 8005542:	4b14      	ldr	r3, [pc, #80]	@ (8005594 <PMU_update_task+0xd4>)
 8005544:	2201      	movs	r2, #1
 8005546:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 8005548:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800554c:	2005      	movs	r0, #5
 800554e:	f007 f837 	bl	800c5c0 <SCH_TIM_Start>
					//Timeout memset 0xff
				}
			}
		}
	}
}
 8005552:	e017      	b.n	8005584 <PMU_update_task+0xc4>
				if(!receive_pmuFlag){
 8005554:	4b14      	ldr	r3, [pc, #80]	@ (80055a8 <PMU_update_task+0xe8>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d112      	bne.n	8005584 <PMU_update_task+0xc4>
					send_rs422 = 0;
 800555e:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <PMU_update_task+0xd4>)
 8005560:	2200      	movs	r2, #0
 8005562:	701a      	strb	r2, [r3, #0]
					receive_pmuFlag = 1;
 8005564:	4b10      	ldr	r3, [pc, #64]	@ (80055a8 <PMU_update_task+0xe8>)
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
					SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 800556a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800556e:	2005      	movs	r0, #5
 8005570:	f007 f826 	bl	800c5c0 <SCH_TIM_Start>
					memset(&nextBuffer[111], 0xFF, 24);
 8005574:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <PMU_update_task+0xec>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	336f      	adds	r3, #111	@ 0x6f
 800557a:	2218      	movs	r2, #24
 800557c:	21ff      	movs	r1, #255	@ 0xff
 800557e:	4618      	mov	r0, r3
 8005580:	f00b fee7 	bl	8011352 <memset>
}
 8005584:	bf00      	nop
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20007abd 	.word	0x20007abd
 8005590:	2000788d 	.word	0x2000788d
 8005594:	20007992 	.word	0x20007992
 8005598:	200000ea 	.word	0x200000ea
 800559c:	200000e8 	.word	0x200000e8
 80055a0:	40011000 	.word	0x40011000
 80055a4:	2000010c 	.word	0x2000010c
 80055a8:	200000e9 	.word	0x200000e9
 80055ac:	20002158 	.word	0x20002158

080055b0 <Cmd_pmu_get_temp>:


#define DEST_ADDR FSP_ADR_PMU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pmu_get_temp(int argc, char *argv[])
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80055bc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80055c0:	6018      	str	r0, [r3, #0]
 80055c2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80055c6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80055ca:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80055cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80055d0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	dc01      	bgt.n	80055de <Cmd_pmu_get_temp+0x2e>
 80055da:	2303      	movs	r3, #3
 80055dc:	e0a3      	b.n	8005726 <Cmd_pmu_get_temp+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80055de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80055e2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	dd01      	ble.n	80055f0 <Cmd_pmu_get_temp+0x40>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e09a      	b.n	8005726 <Cmd_pmu_get_temp+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80055f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055f4:	484e      	ldr	r0, [pc, #312]	@ (8005730 <Cmd_pmu_get_temp+0x180>)
 80055f6:	f7ff ff3f 	bl	8005478 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80055fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80055fe:	484c      	ldr	r0, [pc, #304]	@ (8005730 <Cmd_pmu_get_temp+0x180>)
 8005600:	f7ff ff2c 	bl	800545c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005604:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005608:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005612:	3b01      	subs	r3, #1
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800561a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	4413      	add	r3, r2
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005628:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800562c:	4a41      	ldr	r2, [pc, #260]	@ (8005734 <Cmd_pmu_get_temp+0x184>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d103      	bne.n	800563a <Cmd_pmu_get_temp+0x8a>
    	uart_choose_uart5 = 1;
 8005632:	4b41      	ldr	r3, [pc, #260]	@ (8005738 <Cmd_pmu_get_temp+0x188>)
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	e002      	b.n	8005640 <Cmd_pmu_get_temp+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800563a:	4b3f      	ldr	r3, [pc, #252]	@ (8005738 <Cmd_pmu_get_temp+0x188>)
 800563c:	2200      	movs	r2, #0
 800563e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005640:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005644:	4a3d      	ldr	r2, [pc, #244]	@ (800573c <Cmd_pmu_get_temp+0x18c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d103      	bne.n	8005652 <Cmd_pmu_get_temp+0xa2>
    	uart_choose_usart2 = 1;
 800564a:	4b3d      	ldr	r3, [pc, #244]	@ (8005740 <Cmd_pmu_get_temp+0x190>)
 800564c:	2201      	movs	r2, #1
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	e002      	b.n	8005658 <Cmd_pmu_get_temp+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005652:	4b3b      	ldr	r3, [pc, #236]	@ (8005740 <Cmd_pmu_get_temp+0x190>)
 8005654:	2200      	movs	r2, #0
 8005656:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PMU_GET_TEMP;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800565e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005662:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005666:	2201      	movs	r2, #1
 8005668:	2102      	movs	r1, #2
 800566a:	f007 f95b 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800566e:	f107 020f 	add.w	r2, r7, #15
 8005672:	f107 0110 	add.w	r1, r7, #16
 8005676:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800567a:	4618      	mov	r0, r3
 800567c:	f007 fa00 	bl	800ca80 <frame_encode>

    if (frame_len > 0) {
 8005680:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005684:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d02c      	beq.n	80056e8 <Cmd_pmu_get_temp+0x138>
        for (int i = 0; i < frame_len; i++) {
 800568e:	2300      	movs	r3, #0
 8005690:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005694:	e010      	b.n	80056b8 <Cmd_pmu_get_temp+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005696:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800569a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800569e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80056a2:	4413      	add	r3, r2
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	4619      	mov	r1, r3
 80056a8:	4826      	ldr	r0, [pc, #152]	@ (8005744 <Cmd_pmu_get_temp+0x194>)
 80056aa:	f7fc fb51 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80056ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80056b2:	3301      	adds	r3, #1
 80056b4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80056b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80056bc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80056c8:	4293      	cmp	r3, r2
 80056ca:	dbe4      	blt.n	8005696 <Cmd_pmu_get_temp+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80056cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80056d0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	f107 0310 	add.w	r3, r7, #16
 80056da:	4611      	mov	r1, r2
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fc fdd9 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 80056e2:	f7fc fdbf 	bl	8002264 <set_send_flag>
 80056e6:	e01d      	b.n	8005724 <Cmd_pmu_get_temp+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80056e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80056ec:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80056f0:	2201      	movs	r2, #1
 80056f2:	2102      	movs	r1, #2
 80056f4:	f007 f916 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80056f8:	f107 020f 	add.w	r2, r7, #15
 80056fc:	f107 0110 	add.w	r1, r7, #16
 8005700:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005704:	4618      	mov	r0, r3
 8005706:	f007 f9bb 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800570a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800570e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	f107 0310 	add.w	r3, r7, #16
 8005718:	4611      	mov	r1, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f7fc fdba 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8005720:	f7fc fda0 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005724:	2305      	movs	r3, #5
}
 8005726:	4618      	mov	r0, r3
 8005728:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40020000 	.word	0x40020000
 8005734:	40005000 	.word	0x40005000
 8005738:	20007993 	.word	0x20007993
 800573c:	40004400 	.word	0x40004400
 8005740:	20007994 	.word	0x20007994
 8005744:	40011000 	.word	0x40011000

08005748 <Cmd_pmu_bat_vol>:

int Cmd_pmu_bat_vol(int argc, char *argv[])
{
 8005748:	b580      	push	{r7, lr}
 800574a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800574e:	af00      	add	r7, sp, #0
 8005750:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005754:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005758:	6018      	str	r0, [r3, #0]
 800575a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800575e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005762:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005764:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005768:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	dc01      	bgt.n	8005776 <Cmd_pmu_bat_vol+0x2e>
 8005772:	2303      	movs	r3, #3
 8005774:	e0a3      	b.n	80058be <Cmd_pmu_bat_vol+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005776:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800577a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b02      	cmp	r3, #2
 8005782:	dd01      	ble.n	8005788 <Cmd_pmu_bat_vol+0x40>
 8005784:	2302      	movs	r3, #2
 8005786:	e09a      	b.n	80058be <Cmd_pmu_bat_vol+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005788:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800578c:	484e      	ldr	r0, [pc, #312]	@ (80058c8 <Cmd_pmu_bat_vol+0x180>)
 800578e:	f7ff fe73 	bl	8005478 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005792:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005796:	484c      	ldr	r0, [pc, #304]	@ (80058c8 <Cmd_pmu_bat_vol+0x180>)
 8005798:	f7ff fe60 	bl	800545c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800579c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80057a0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057aa:	3b01      	subs	r3, #1
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80057b2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	4413      	add	r3, r2
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80057c0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80057c4:	4a41      	ldr	r2, [pc, #260]	@ (80058cc <Cmd_pmu_bat_vol+0x184>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d103      	bne.n	80057d2 <Cmd_pmu_bat_vol+0x8a>
    	uart_choose_uart5 = 1;
 80057ca:	4b41      	ldr	r3, [pc, #260]	@ (80058d0 <Cmd_pmu_bat_vol+0x188>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e002      	b.n	80057d8 <Cmd_pmu_bat_vol+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80057d2:	4b3f      	ldr	r3, [pc, #252]	@ (80058d0 <Cmd_pmu_bat_vol+0x188>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80057d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80057dc:	4a3d      	ldr	r2, [pc, #244]	@ (80058d4 <Cmd_pmu_bat_vol+0x18c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d103      	bne.n	80057ea <Cmd_pmu_bat_vol+0xa2>
    	uart_choose_usart2 = 1;
 80057e2:	4b3d      	ldr	r3, [pc, #244]	@ (80058d8 <Cmd_pmu_bat_vol+0x190>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e002      	b.n	80057f0 <Cmd_pmu_bat_vol+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80057ea:	4b3b      	ldr	r3, [pc, #236]	@ (80058d8 <Cmd_pmu_bat_vol+0x190>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_BAT_VOL;
 80057f0:	2302      	movs	r3, #2
 80057f2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80057f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057fa:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80057fe:	2201      	movs	r2, #1
 8005800:	2102      	movs	r1, #2
 8005802:	f007 f88f 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005806:	f107 020f 	add.w	r2, r7, #15
 800580a:	f107 0110 	add.w	r1, r7, #16
 800580e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005812:	4618      	mov	r0, r3
 8005814:	f007 f934 	bl	800ca80 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005818:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800581c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d02c      	beq.n	8005880 <Cmd_pmu_bat_vol+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005826:	2300      	movs	r3, #0
 8005828:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800582c:	e010      	b.n	8005850 <Cmd_pmu_bat_vol+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800582e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005832:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005836:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800583a:	4413      	add	r3, r2
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	4619      	mov	r1, r3
 8005840:	4826      	ldr	r0, [pc, #152]	@ (80058dc <Cmd_pmu_bat_vol+0x194>)
 8005842:	f7fc fa85 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005846:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800584a:	3301      	adds	r3, #1
 800584c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005850:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005854:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005860:	4293      	cmp	r3, r2
 8005862:	dbe4      	blt.n	800582e <Cmd_pmu_bat_vol+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005864:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005868:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	f107 0310 	add.w	r3, r7, #16
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f7fc fd0d 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 800587a:	f7fc fcf3 	bl	8002264 <set_send_flag>
 800587e:	e01d      	b.n	80058bc <Cmd_pmu_bat_vol+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005880:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005884:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005888:	2201      	movs	r2, #1
 800588a:	2102      	movs	r1, #2
 800588c:	f007 f84a 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005890:	f107 020f 	add.w	r2, r7, #15
 8005894:	f107 0110 	add.w	r1, r7, #16
 8005898:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800589c:	4618      	mov	r0, r3
 800589e:	f007 f8ef 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80058a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80058a6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	f107 0310 	add.w	r3, r7, #16
 80058b0:	4611      	mov	r1, r2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fc fcee 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80058b8:	f7fc fcd4 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80058bc:	2305      	movs	r3, #5
}
 80058be:	4618      	mov	r0, r3
 80058c0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40020000 	.word	0x40020000
 80058cc:	40005000 	.word	0x40005000
 80058d0:	20007993 	.word	0x20007993
 80058d4:	40004400 	.word	0x40004400
 80058d8:	20007994 	.word	0x20007994
 80058dc:	40011000 	.word	0x40011000

080058e0 <Cmd_pmu_parag_in>:

int Cmd_pmu_parag_in(int argc, char *argv[])
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80058ec:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80058f0:	6018      	str	r0, [r3, #0]
 80058f2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80058f6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80058fa:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80058fc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005900:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b01      	cmp	r3, #1
 8005908:	dc01      	bgt.n	800590e <Cmd_pmu_parag_in+0x2e>
 800590a:	2303      	movs	r3, #3
 800590c:	e0a3      	b.n	8005a56 <Cmd_pmu_parag_in+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800590e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005912:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b02      	cmp	r3, #2
 800591a:	dd01      	ble.n	8005920 <Cmd_pmu_parag_in+0x40>
 800591c:	2302      	movs	r3, #2
 800591e:	e09a      	b.n	8005a56 <Cmd_pmu_parag_in+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005920:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005924:	484e      	ldr	r0, [pc, #312]	@ (8005a60 <Cmd_pmu_parag_in+0x180>)
 8005926:	f7ff fda7 	bl	8005478 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800592a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800592e:	484c      	ldr	r0, [pc, #304]	@ (8005a60 <Cmd_pmu_parag_in+0x180>)
 8005930:	f7ff fd94 	bl	800545c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005934:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005938:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005942:	3b01      	subs	r3, #1
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800594a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	4413      	add	r3, r2
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005958:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800595c:	4a41      	ldr	r2, [pc, #260]	@ (8005a64 <Cmd_pmu_parag_in+0x184>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d103      	bne.n	800596a <Cmd_pmu_parag_in+0x8a>
    	uart_choose_uart5 = 1;
 8005962:	4b41      	ldr	r3, [pc, #260]	@ (8005a68 <Cmd_pmu_parag_in+0x188>)
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	e002      	b.n	8005970 <Cmd_pmu_parag_in+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800596a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a68 <Cmd_pmu_parag_in+0x188>)
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005970:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005974:	4a3d      	ldr	r2, [pc, #244]	@ (8005a6c <Cmd_pmu_parag_in+0x18c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d103      	bne.n	8005982 <Cmd_pmu_parag_in+0xa2>
    	uart_choose_usart2 = 1;
 800597a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a70 <Cmd_pmu_parag_in+0x190>)
 800597c:	2201      	movs	r2, #1
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	e002      	b.n	8005988 <Cmd_pmu_parag_in+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005982:	4b3b      	ldr	r3, [pc, #236]	@ (8005a70 <Cmd_pmu_parag_in+0x190>)
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PARAG_IN;
 8005988:	2303      	movs	r3, #3
 800598a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800598e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005992:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005996:	2201      	movs	r2, #1
 8005998:	2102      	movs	r1, #2
 800599a:	f006 ffc3 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800599e:	f107 020f 	add.w	r2, r7, #15
 80059a2:	f107 0110 	add.w	r1, r7, #16
 80059a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80059aa:	4618      	mov	r0, r3
 80059ac:	f007 f868 	bl	800ca80 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80059b0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059b4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d02c      	beq.n	8005a18 <Cmd_pmu_parag_in+0x138>
        for (int i = 0; i < frame_len; i++) {
 80059be:	2300      	movs	r3, #0
 80059c0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80059c4:	e010      	b.n	80059e8 <Cmd_pmu_parag_in+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80059c6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059ca:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80059ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80059d2:	4413      	add	r3, r2
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	4619      	mov	r1, r3
 80059d8:	4826      	ldr	r0, [pc, #152]	@ (8005a74 <Cmd_pmu_parag_in+0x194>)
 80059da:	f7fc f9b9 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80059de:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80059e2:	3301      	adds	r3, #1
 80059e4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80059e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059ec:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80059f8:	4293      	cmp	r3, r2
 80059fa:	dbe4      	blt.n	80059c6 <Cmd_pmu_parag_in+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80059fc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a00:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005a04:	781a      	ldrb	r2, [r3, #0]
 8005a06:	f107 0310 	add.w	r3, r7, #16
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fc fc41 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005a12:	f7fc fc27 	bl	8002264 <set_send_flag>
 8005a16:	e01d      	b.n	8005a54 <Cmd_pmu_parag_in+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a1c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005a20:	2201      	movs	r2, #1
 8005a22:	2102      	movs	r1, #2
 8005a24:	f006 ff7e 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005a28:	f107 020f 	add.w	r2, r7, #15
 8005a2c:	f107 0110 	add.w	r1, r7, #16
 8005a30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a34:	4618      	mov	r0, r3
 8005a36:	f007 f823 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005a3a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a3e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	f107 0310 	add.w	r3, r7, #16
 8005a48:	4611      	mov	r1, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fc fc22 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8005a50:	f7fc fc08 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005a54:	2305      	movs	r3, #5
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40020000 	.word	0x40020000
 8005a64:	40005000 	.word	0x40005000
 8005a68:	20007993 	.word	0x20007993
 8005a6c:	40004400 	.word	0x40004400
 8005a70:	20007994 	.word	0x20007994
 8005a74:	40011000 	.word	0x40011000

08005a78 <Cmd_pmu_parag_out>:

int Cmd_pmu_parag_out(int argc, char *argv[])
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a84:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005a88:	6018      	str	r0, [r3, #0]
 8005a8a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a8e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005a92:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005a94:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a98:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	dc01      	bgt.n	8005aa6 <Cmd_pmu_parag_out+0x2e>
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e0a3      	b.n	8005bee <Cmd_pmu_parag_out+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005aa6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005aaa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	dd01      	ble.n	8005ab8 <Cmd_pmu_parag_out+0x40>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e09a      	b.n	8005bee <Cmd_pmu_parag_out+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005ab8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005abc:	484e      	ldr	r0, [pc, #312]	@ (8005bf8 <Cmd_pmu_parag_out+0x180>)
 8005abe:	f7ff fcdb 	bl	8005478 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005ac2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ac6:	484c      	ldr	r0, [pc, #304]	@ (8005bf8 <Cmd_pmu_parag_out+0x180>)
 8005ac8:	f7ff fcc8 	bl	800545c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005acc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005ad0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ada:	3b01      	subs	r3, #1
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005ae2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	4413      	add	r3, r2
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005af0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005af4:	4a41      	ldr	r2, [pc, #260]	@ (8005bfc <Cmd_pmu_parag_out+0x184>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d103      	bne.n	8005b02 <Cmd_pmu_parag_out+0x8a>
    	uart_choose_uart5 = 1;
 8005afa:	4b41      	ldr	r3, [pc, #260]	@ (8005c00 <Cmd_pmu_parag_out+0x188>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e002      	b.n	8005b08 <Cmd_pmu_parag_out+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005b02:	4b3f      	ldr	r3, [pc, #252]	@ (8005c00 <Cmd_pmu_parag_out+0x188>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005b08:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8005c04 <Cmd_pmu_parag_out+0x18c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d103      	bne.n	8005b1a <Cmd_pmu_parag_out+0xa2>
    	uart_choose_usart2 = 1;
 8005b12:	4b3d      	ldr	r3, [pc, #244]	@ (8005c08 <Cmd_pmu_parag_out+0x190>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e002      	b.n	8005b20 <Cmd_pmu_parag_out+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c08 <Cmd_pmu_parag_out+0x190>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PARAG_OUT;
 8005b20:	2304      	movs	r3, #4
 8005b22:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005b26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b2a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005b2e:	2201      	movs	r2, #1
 8005b30:	2102      	movs	r1, #2
 8005b32:	f006 fef7 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005b36:	f107 020f 	add.w	r2, r7, #15
 8005b3a:	f107 0110 	add.w	r1, r7, #16
 8005b3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b42:	4618      	mov	r0, r3
 8005b44:	f006 ff9c 	bl	800ca80 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8005b48:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b4c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d02c      	beq.n	8005bb0 <Cmd_pmu_parag_out+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005b56:	2300      	movs	r3, #0
 8005b58:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005b5c:	e010      	b.n	8005b80 <Cmd_pmu_parag_out+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005b5e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b62:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005b66:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005b6a:	4413      	add	r3, r2
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4826      	ldr	r0, [pc, #152]	@ (8005c0c <Cmd_pmu_parag_out+0x194>)
 8005b72:	f7fc f8ed 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005b76:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005b80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b84:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005b90:	4293      	cmp	r3, r2
 8005b92:	dbe4      	blt.n	8005b5e <Cmd_pmu_parag_out+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005b94:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b98:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	f107 0310 	add.w	r3, r7, #16
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fc fb75 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005baa:	f7fc fb5b 	bl	8002264 <set_send_flag>
 8005bae:	e01d      	b.n	8005bec <Cmd_pmu_parag_out+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005bb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005bb4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005bb8:	2201      	movs	r2, #1
 8005bba:	2102      	movs	r1, #2
 8005bbc:	f006 feb2 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005bc0:	f107 020f 	add.w	r2, r7, #15
 8005bc4:	f107 0110 	add.w	r1, r7, #16
 8005bc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f006 ff57 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005bd2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005bd6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005bda:	781a      	ldrb	r2, [r3, #0]
 8005bdc:	f107 0310 	add.w	r3, r7, #16
 8005be0:	4611      	mov	r1, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fc fb56 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8005be8:	f7fc fb3c 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005bec:	2305      	movs	r3, #5
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40020000 	.word	0x40020000
 8005bfc:	40005000 	.word	0x40005000
 8005c00:	20007993 	.word	0x20007993
 8005c04:	40004400 	.word	0x40004400
 8005c08:	20007994 	.word	0x20007994
 8005c0c:	40011000 	.word	0x40011000

08005c10 <Cmd_pmu_set_temppoint>:

int Cmd_pmu_set_temppoint(int argc, char *argv[])
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005c16:	af02      	add	r7, sp, #8
 8005c18:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c1c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005c20:	6018      	str	r0, [r3, #0]
 8005c22:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c26:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005c2a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8005c2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c30:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	dc01      	bgt.n	8005c3e <Cmd_pmu_set_temppoint+0x2e>
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0e7      	b.n	8005e0e <Cmd_pmu_set_temppoint+0x1fe>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8005c3e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c42:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	dd01      	ble.n	8005c50 <Cmd_pmu_set_temppoint+0x40>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e0de      	b.n	8005e0e <Cmd_pmu_set_temppoint+0x1fe>
    uint16_t lowpoint = atoi(argv[1]);
 8005c50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c54:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f009 fd47 	bl	800f6f2 <atoi>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
   // if (lowpoint > 6)   return CMDLINE_INVALID_ARG;
    uint16_t highpoint = atoi(argv[2]);
 8005c6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c6e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3308      	adds	r3, #8
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f009 fd3a 	bl	800f6f2 <atoi>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
   // if (highpoint > 6)   return CMDLINE_INVALID_ARG;
    if (highpoint < lowpoint)   return CMDLINE_INVALID_ARG;
 8005c84:	f8b7 2218 	ldrh.w	r2, [r7, #536]	@ 0x218
 8005c88:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d201      	bcs.n	8005c94 <Cmd_pmu_set_temppoint+0x84>
 8005c90:	2304      	movs	r3, #4
 8005c92:	e0bc      	b.n	8005e0e <Cmd_pmu_set_temppoint+0x1fe>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005c94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c98:	485f      	ldr	r0, [pc, #380]	@ (8005e18 <Cmd_pmu_set_temppoint+0x208>)
 8005c9a:	f7ff fbed 	bl	8005478 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005c9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ca2:	485d      	ldr	r0, [pc, #372]	@ (8005e18 <Cmd_pmu_set_temppoint+0x208>)
 8005ca4:	f7ff fbda 	bl	800545c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005ca8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005cac:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005cbe:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005ccc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005cd0:	4a52      	ldr	r2, [pc, #328]	@ (8005e1c <Cmd_pmu_set_temppoint+0x20c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d103      	bne.n	8005cde <Cmd_pmu_set_temppoint+0xce>
    	uart_choose_uart5 = 1;
 8005cd6:	4b52      	ldr	r3, [pc, #328]	@ (8005e20 <Cmd_pmu_set_temppoint+0x210>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	e002      	b.n	8005ce4 <Cmd_pmu_set_temppoint+0xd4>
    }else{
    	uart_choose_uart5 = 0;
 8005cde:	4b50      	ldr	r3, [pc, #320]	@ (8005e20 <Cmd_pmu_set_temppoint+0x210>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
    }
    if (USARTx == USART2) {
 8005ce4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005ce8:	4a4e      	ldr	r2, [pc, #312]	@ (8005e24 <Cmd_pmu_set_temppoint+0x214>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d103      	bne.n	8005cf6 <Cmd_pmu_set_temppoint+0xe6>
    	uart_choose_usart2 = 1;
 8005cee:	4b4e      	ldr	r3, [pc, #312]	@ (8005e28 <Cmd_pmu_set_temppoint+0x218>)
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e002      	b.n	8005cfc <Cmd_pmu_set_temppoint+0xec>
    }else{
    	uart_choose_usart2 = 0;
 8005cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8005e28 <Cmd_pmu_set_temppoint+0x218>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_TEMP_POINT;
 8005cfc:	2305      	movs	r3, #5
 8005cfe:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = (uint8_t)(lowpoint >> 8);
 8005d02:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005d06:	0a1b      	lsrs	r3, r3, #8
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = (uint8_t)(lowpoint & 0xFF);
 8005d10:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(highpoint >> 8);
 8005d1a:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8005d1e:	0a1b      	lsrs	r3, r3, #8
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(highpoint & 0xFF);
 8005d28:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005d32:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005d36:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005d3a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	2301      	movs	r3, #1
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	2302      	movs	r3, #2
 8005d46:	2204      	movs	r2, #4
 8005d48:	f006 fe14 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005d4c:	f107 020b 	add.w	r2, r7, #11
 8005d50:	f107 010c 	add.w	r1, r7, #12
 8005d54:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f006 fe91 	bl	800ca80 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005d5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d62:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d02c      	beq.n	8005dc6 <Cmd_pmu_set_temppoint+0x1b6>
        for (int i = 0; i < frame_len; i++) {
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005d72:	e010      	b.n	8005d96 <Cmd_pmu_set_temppoint+0x186>
            Uart_write(USART1, encoded_frame[i]);
 8005d74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d78:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8005d7c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005d80:	4413      	add	r3, r2
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	4619      	mov	r1, r3
 8005d86:	4829      	ldr	r0, [pc, #164]	@ (8005e2c <Cmd_pmu_set_temppoint+0x21c>)
 8005d88:	f7fb ffe2 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005d8c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005d90:	3301      	adds	r3, #1
 8005d92:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005d96:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d9a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005da6:	4293      	cmp	r3, r2
 8005da8:	dbe4      	blt.n	8005d74 <Cmd_pmu_set_temppoint+0x164>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005daa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005dae:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005db2:	781a      	ldrb	r2, [r3, #0]
 8005db4:	f107 030c 	add.w	r3, r7, #12
 8005db8:	4611      	mov	r1, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fc fa6a 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005dc0:	f7fc fa50 	bl	8002264 <set_send_flag>
 8005dc4:	e022      	b.n	8005e0c <Cmd_pmu_set_temppoint+0x1fc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005dc6:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005dca:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005dce:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	2302      	movs	r3, #2
 8005dda:	2204      	movs	r2, #4
 8005ddc:	f006 fdca 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005de0:	f107 020b 	add.w	r2, r7, #11
 8005de4:	f107 010c 	add.w	r1, r7, #12
 8005de8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005dec:	4618      	mov	r0, r3
 8005dee:	f006 fe47 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005df2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005df6:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	f107 030c 	add.w	r3, r7, #12
 8005e00:	4611      	mov	r1, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fc fa46 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8005e08:	f7fc fa2c 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005e0c:	2305      	movs	r3, #5
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40020000 	.word	0x40020000
 8005e1c:	40005000 	.word	0x40005000
 8005e20:	20007993 	.word	0x20007993
 8005e24:	40004400 	.word	0x40004400
 8005e28:	20007994 	.word	0x20007994
 8005e2c:	40011000 	.word	0x40011000

08005e30 <Cmd_pmu_set_output>:

int Cmd_pmu_set_output(int argc, char *argv[])
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005e36:	af02      	add	r7, sp, #8
 8005e38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e3c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005e40:	6018      	str	r0, [r3, #0]
 8005e42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e46:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005e4a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8005e4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e50:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	dc01      	bgt.n	8005e5e <Cmd_pmu_set_output+0x2e>
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e0c4      	b.n	8005fe8 <Cmd_pmu_set_output+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8005e5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e62:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	dd01      	ble.n	8005e70 <Cmd_pmu_set_output+0x40>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e0bb      	b.n	8005fe8 <Cmd_pmu_set_output+0x1b8>
    uint8_t state = atoi(argv[1]);
 8005e70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e74:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f009 fc37 	bl	800f6f2 <atoi>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1)   return CMDLINE_INVALID_ARG;
 8005e8a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d901      	bls.n	8005e96 <Cmd_pmu_set_output+0x66>
 8005e92:	2304      	movs	r3, #4
 8005e94:	e0a8      	b.n	8005fe8 <Cmd_pmu_set_output+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005e96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e9a:	4856      	ldr	r0, [pc, #344]	@ (8005ff4 <Cmd_pmu_set_output+0x1c4>)
 8005e9c:	f7ff faec 	bl	8005478 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005ea0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ea4:	4853      	ldr	r0, [pc, #332]	@ (8005ff4 <Cmd_pmu_set_output+0x1c4>)
 8005ea6:	f7ff fad9 	bl	800545c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005eaa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005eae:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005ec0:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005ece:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005ed2:	4a49      	ldr	r2, [pc, #292]	@ (8005ff8 <Cmd_pmu_set_output+0x1c8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d103      	bne.n	8005ee0 <Cmd_pmu_set_output+0xb0>
    	uart_choose_uart5 = 1;
 8005ed8:	4b48      	ldr	r3, [pc, #288]	@ (8005ffc <Cmd_pmu_set_output+0x1cc>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	e002      	b.n	8005ee6 <Cmd_pmu_set_output+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005ee0:	4b46      	ldr	r3, [pc, #280]	@ (8005ffc <Cmd_pmu_set_output+0x1cc>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005ee6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005eea:	4a45      	ldr	r2, [pc, #276]	@ (8006000 <Cmd_pmu_set_output+0x1d0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d103      	bne.n	8005ef8 <Cmd_pmu_set_output+0xc8>
    	uart_choose_usart2 = 1;
 8005ef0:	4b44      	ldr	r3, [pc, #272]	@ (8006004 <Cmd_pmu_set_output+0x1d4>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	e002      	b.n	8005efe <Cmd_pmu_set_output+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8005ef8:	4b42      	ldr	r3, [pc, #264]	@ (8006004 <Cmd_pmu_set_output+0x1d4>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
    }



    uint8_t cmd  = CMD_CODE_PMU_OUTPUT;
 8005efe:	2306      	movs	r3, #6
 8005f00:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = state;
 8005f04:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005f08:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005f0c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005f10:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005f14:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	2302      	movs	r3, #2
 8005f20:	2204      	movs	r2, #4
 8005f22:	f006 fd27 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005f26:	f107 020b 	add.w	r2, r7, #11
 8005f2a:	f107 010c 	add.w	r1, r7, #12
 8005f2e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005f32:	4618      	mov	r0, r3
 8005f34:	f006 fda4 	bl	800ca80 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8005f38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f3c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d02c      	beq.n	8005fa0 <Cmd_pmu_set_output+0x170>
        for (int i = 0; i < frame_len; i++) {
 8005f46:	2300      	movs	r3, #0
 8005f48:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005f4c:	e010      	b.n	8005f70 <Cmd_pmu_set_output+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8005f4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f52:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8005f56:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005f5a:	4413      	add	r3, r2
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4829      	ldr	r0, [pc, #164]	@ (8006008 <Cmd_pmu_set_output+0x1d8>)
 8005f62:	f7fb fef5 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005f66:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005f70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f74:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005f80:	4293      	cmp	r3, r2
 8005f82:	dbe4      	blt.n	8005f4e <Cmd_pmu_set_output+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005f84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f88:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	f107 030c 	add.w	r3, r7, #12
 8005f92:	4611      	mov	r1, r2
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fc f97d 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005f9a:	f7fc f963 	bl	8002264 <set_send_flag>
 8005f9e:	e022      	b.n	8005fe6 <Cmd_pmu_set_output+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005fa0:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005fa4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005fa8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	2301      	movs	r3, #1
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	2204      	movs	r2, #4
 8005fb6:	f006 fcdd 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005fba:	f107 020b 	add.w	r2, r7, #11
 8005fbe:	f107 010c 	add.w	r1, r7, #12
 8005fc2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f006 fd5a 	bl	800ca80 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8005fcc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005fd0:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005fd4:	781a      	ldrb	r2, [r3, #0]
 8005fd6:	f107 030c 	add.w	r3, r7, #12
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fc f959 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005fe2:	f7fc f93f 	bl	8002264 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8005fe6:	2305      	movs	r3, #5
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40020000 	.word	0x40020000
 8005ff8:	40005000 	.word	0x40005000
 8005ffc:	20007993 	.word	0x20007993
 8006000:	40004400 	.word	0x40004400
 8006004:	20007994 	.word	0x20007994
 8006008:	40011000 	.word	0x40011000

0800600c <Cmd_pmu_set_pwm>:

int Cmd_pmu_set_pwm(int argc, char *argv[])
{
 800600c:	b580      	push	{r7, lr}
 800600e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8006012:	af02      	add	r7, sp, #8
 8006014:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006018:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800601c:	6018      	str	r0, [r3, #0]
 800601e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006022:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8006026:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8006028:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800602c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b02      	cmp	r3, #2
 8006034:	dc01      	bgt.n	800603a <Cmd_pmu_set_pwm+0x2e>
 8006036:	2303      	movs	r3, #3
 8006038:	e0c4      	b.n	80061c4 <Cmd_pmu_set_pwm+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 800603a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800603e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b03      	cmp	r3, #3
 8006046:	dd01      	ble.n	800604c <Cmd_pmu_set_pwm+0x40>
 8006048:	2302      	movs	r3, #2
 800604a:	e0bb      	b.n	80061c4 <Cmd_pmu_set_pwm+0x1b8>
    uint8_t duty = atoi(argv[1]);
 800604c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006050:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3304      	adds	r3, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f009 fb49 	bl	800f6f2 <atoi>
 8006060:	4603      	mov	r3, r0
 8006062:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (duty > 100)   return CMDLINE_INVALID_ARG;
 8006066:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800606a:	2b64      	cmp	r3, #100	@ 0x64
 800606c:	d901      	bls.n	8006072 <Cmd_pmu_set_pwm+0x66>
 800606e:	2304      	movs	r3, #4
 8006070:	e0a8      	b.n	80061c4 <Cmd_pmu_set_pwm+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006072:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006076:	4856      	ldr	r0, [pc, #344]	@ (80061d0 <Cmd_pmu_set_pwm+0x1c4>)
 8006078:	f7ff f9fe 	bl	8005478 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800607c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006080:	4853      	ldr	r0, [pc, #332]	@ (80061d0 <Cmd_pmu_set_pwm+0x1c4>)
 8006082:	f7ff f9eb 	bl	800545c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006086:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800608a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006094:	3b01      	subs	r3, #1
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800609c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	4413      	add	r3, r2
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80060aa:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80060ae:	4a49      	ldr	r2, [pc, #292]	@ (80061d4 <Cmd_pmu_set_pwm+0x1c8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d103      	bne.n	80060bc <Cmd_pmu_set_pwm+0xb0>
    	uart_choose_uart5 = 1;
 80060b4:	4b48      	ldr	r3, [pc, #288]	@ (80061d8 <Cmd_pmu_set_pwm+0x1cc>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	e002      	b.n	80060c2 <Cmd_pmu_set_pwm+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 80060bc:	4b46      	ldr	r3, [pc, #280]	@ (80061d8 <Cmd_pmu_set_pwm+0x1cc>)
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80060c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80060c6:	4a45      	ldr	r2, [pc, #276]	@ (80061dc <Cmd_pmu_set_pwm+0x1d0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d103      	bne.n	80060d4 <Cmd_pmu_set_pwm+0xc8>
    	uart_choose_usart2 = 1;
 80060cc:	4b44      	ldr	r3, [pc, #272]	@ (80061e0 <Cmd_pmu_set_pwm+0x1d4>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	e002      	b.n	80060da <Cmd_pmu_set_pwm+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80060d4:	4b42      	ldr	r3, [pc, #264]	@ (80061e0 <Cmd_pmu_set_pwm+0x1d4>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PMU_PWM;
 80060da:	2307      	movs	r3, #7
 80060dc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = duty;
 80060e0:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80060e4:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80060e8:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80060ec:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80060f0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	2301      	movs	r3, #1
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	2302      	movs	r3, #2
 80060fc:	2204      	movs	r2, #4
 80060fe:	f006 fc39 	bl	800c974 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006102:	f107 020b 	add.w	r2, r7, #11
 8006106:	f107 010c 	add.w	r1, r7, #12
 800610a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800610e:	4618      	mov	r0, r3
 8006110:	f006 fcb6 	bl	800ca80 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8006114:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006118:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d02c      	beq.n	800617c <Cmd_pmu_set_pwm+0x170>
        for (int i = 0; i < frame_len; i++) {
 8006122:	2300      	movs	r3, #0
 8006124:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8006128:	e010      	b.n	800614c <Cmd_pmu_set_pwm+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800612a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800612e:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8006132:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006136:	4413      	add	r3, r2
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	4619      	mov	r1, r3
 800613c:	4829      	ldr	r0, [pc, #164]	@ (80061e4 <Cmd_pmu_set_pwm+0x1d8>)
 800613e:	f7fb fe07 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8006142:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006146:	3301      	adds	r3, #1
 8006148:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800614c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006150:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800615c:	4293      	cmp	r3, r2
 800615e:	dbe4      	blt.n	800612a <Cmd_pmu_set_pwm+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8006160:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006164:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	f107 030c 	add.w	r3, r7, #12
 800616e:	4611      	mov	r1, r2
 8006170:	4618      	mov	r0, r3
 8006172:	f7fc f88f 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8006176:	f7fc f875 	bl	8002264 <set_send_flag>
 800617a:	e022      	b.n	80061c2 <Cmd_pmu_set_pwm+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800617c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8006180:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8006184:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	2301      	movs	r3, #1
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	2302      	movs	r3, #2
 8006190:	2204      	movs	r2, #4
 8006192:	f006 fbef 	bl	800c974 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006196:	f107 020b 	add.w	r2, r7, #11
 800619a:	f107 010c 	add.w	r1, r7, #12
 800619e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80061a2:	4618      	mov	r0, r3
 80061a4:	f006 fc6c 	bl	800ca80 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 80061a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80061ac:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	f107 030c 	add.w	r3, r7, #12
 80061b6:	4611      	mov	r1, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fc f86b 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 80061be:	f7fc f851 	bl	8002264 <set_send_flag>
    }


    return CMDLINE_PENDING;
 80061c2:	2305      	movs	r3, #5
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	40020000 	.word	0x40020000
 80061d4:	40005000 	.word	0x40005000
 80061d8:	20007993 	.word	0x20007993
 80061dc:	40004400 	.word	0x40004400
 80061e0:	20007994 	.word	0x20007994
 80061e4:	40011000 	.word	0x40011000

080061e8 <Cmd_pmu_get_all>:

int Cmd_pmu_get_all(int argc, char *argv[])
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80061f4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80061f8:	6018      	str	r0, [r3, #0]
 80061fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80061fe:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006202:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8006204:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006208:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b01      	cmp	r3, #1
 8006210:	dc01      	bgt.n	8006216 <Cmd_pmu_get_all+0x2e>
 8006212:	2303      	movs	r3, #3
 8006214:	e0a3      	b.n	800635e <Cmd_pmu_get_all+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8006216:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800621a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b02      	cmp	r3, #2
 8006222:	dd01      	ble.n	8006228 <Cmd_pmu_get_all+0x40>
 8006224:	2302      	movs	r3, #2
 8006226:	e09a      	b.n	800635e <Cmd_pmu_get_all+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006228:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800622c:	484e      	ldr	r0, [pc, #312]	@ (8006368 <Cmd_pmu_get_all+0x180>)
 800622e:	f7ff f923 	bl	8005478 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006232:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006236:	484c      	ldr	r0, [pc, #304]	@ (8006368 <Cmd_pmu_get_all+0x180>)
 8006238:	f7ff f910 	bl	800545c <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800623c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006240:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800624a:	3b01      	subs	r3, #1
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8006252:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	4413      	add	r3, r2
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8006260:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8006264:	4a41      	ldr	r2, [pc, #260]	@ (800636c <Cmd_pmu_get_all+0x184>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d103      	bne.n	8006272 <Cmd_pmu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 800626a:	4b41      	ldr	r3, [pc, #260]	@ (8006370 <Cmd_pmu_get_all+0x188>)
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	e002      	b.n	8006278 <Cmd_pmu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8006272:	4b3f      	ldr	r3, [pc, #252]	@ (8006370 <Cmd_pmu_get_all+0x188>)
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8006278:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800627c:	4a3d      	ldr	r2, [pc, #244]	@ (8006374 <Cmd_pmu_get_all+0x18c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d103      	bne.n	800628a <Cmd_pmu_get_all+0xa2>
    	uart_choose_usart2 = 1;
 8006282:	4b3d      	ldr	r3, [pc, #244]	@ (8006378 <Cmd_pmu_get_all+0x190>)
 8006284:	2201      	movs	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	e002      	b.n	8006290 <Cmd_pmu_get_all+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800628a:	4b3b      	ldr	r3, [pc, #236]	@ (8006378 <Cmd_pmu_get_all+0x190>)
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_PMU_ALL;
 8006290:	2308      	movs	r3, #8
 8006292:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8006296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800629a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800629e:	2201      	movs	r2, #1
 80062a0:	2102      	movs	r1, #2
 80062a2:	f006 fb3f 	bl	800c924 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80062a6:	f107 020f 	add.w	r2, r7, #15
 80062aa:	f107 0110 	add.w	r1, r7, #16
 80062ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062b2:	4618      	mov	r0, r3
 80062b4:	f006 fbe4 	bl	800ca80 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80062b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062bc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d02c      	beq.n	8006320 <Cmd_pmu_get_all+0x138>
        for (int i = 0; i < frame_len; i++) {
 80062c6:	2300      	movs	r3, #0
 80062c8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80062cc:	e010      	b.n	80062f0 <Cmd_pmu_get_all+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80062ce:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062d2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80062d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80062da:	4413      	add	r3, r2
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	4826      	ldr	r0, [pc, #152]	@ (800637c <Cmd_pmu_get_all+0x194>)
 80062e2:	f7fb fd35 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80062e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80062ea:	3301      	adds	r3, #1
 80062ec:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80062f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062f4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8006300:	4293      	cmp	r3, r2
 8006302:	dbe4      	blt.n	80062ce <Cmd_pmu_get_all+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8006304:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006308:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800630c:	781a      	ldrb	r2, [r3, #0]
 800630e:	f107 0310 	add.w	r3, r7, #16
 8006312:	4611      	mov	r1, r2
 8006314:	4618      	mov	r0, r3
 8006316:	f7fb ffbd 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 800631a:	f7fb ffa3 	bl	8002264 <set_send_flag>
 800631e:	e01d      	b.n	800635c <Cmd_pmu_get_all+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8006320:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006324:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8006328:	2201      	movs	r2, #1
 800632a:	2102      	movs	r1, #2
 800632c:	f006 fafa 	bl	800c924 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006330:	f107 020f 	add.w	r2, r7, #15
 8006334:	f107 0110 	add.w	r1, r7, #16
 8006338:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800633c:	4618      	mov	r0, r3
 800633e:	f006 fb9f 	bl	800ca80 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8006342:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006346:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800634a:	781a      	ldrb	r2, [r3, #0]
 800634c:	f107 0310 	add.w	r3, r7, #16
 8006350:	4611      	mov	r1, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f7fb ff9e 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8006358:	f7fb ff84 	bl	8002264 <set_send_flag>
    }
    return CMDLINE_PENDING;
 800635c:	2305      	movs	r3, #5
}
 800635e:	4618      	mov	r0, r3
 8006360:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	40020000 	.word	0x40020000
 800636c:	40005000 	.word	0x40005000
 8006370:	20007993 	.word	0x20007993
 8006374:	40004400 	.word	0x40004400
 8006378:	20007994 	.word	0x20007994
 800637c:	40011000 	.word	0x40011000

08006380 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 800638a:	2301      	movs	r3, #1
 800638c:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8006396:	e01f      	b.n	80063d8 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b20      	cmp	r3, #32
 800639e:	d105      	bne.n	80063ac <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 80063a6:	2301      	movs	r3, #1
 80063a8:	73fb      	strb	r3, [r7, #15]
 80063aa:	e012      	b.n	80063d2 <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00f      	beq.n	80063d2 <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b07      	cmp	r3, #7
 80063b6:	d80a      	bhi.n	80063ce <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 80063b8:	4920      	ldr	r1, [pc, #128]	@ (800643c <CmdLineProcess+0xbc>)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	3301      	adds	r3, #1
 80063c6:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
 80063cc:	e001      	b.n	80063d2 <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 80063ce:	2302      	movs	r3, #2
 80063d0:	e030      	b.n	8006434 <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	3301      	adds	r3, #1
 80063d6:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1db      	bne.n	8006398 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d025      	beq.n	8006432 <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 80063e6:	4915      	ldr	r1, [pc, #84]	@ (800643c <CmdLineProcess+0xbc>)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	3301      	adds	r3, #1
 80063f4:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 80063f6:	4b12      	ldr	r3, [pc, #72]	@ (8006440 <CmdLineProcess+0xc0>)
 80063f8:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 80063fa:	e016      	b.n	800642a <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 80063fc:	4b0f      	ldr	r3, [pc, #60]	@ (800643c <CmdLineProcess+0xbc>)
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f7f9 fee2 	bl	80001d0 <strcmp>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d108      	bne.n	8006424 <CmdLineProcess+0xa4>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4908      	ldr	r1, [pc, #32]	@ (800643c <CmdLineProcess+0xbc>)
 800641a:	4610      	mov	r0, r2
 800641c:	4798      	blx	r3
 800641e:	4603      	mov	r3, r0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	e007      	b.n	8006434 <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	330c      	adds	r3, #12
 8006428:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e4      	bne.n	80063fc <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8006432:	2301      	movs	r3, #1
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20007998 	.word	0x20007998
 8006440:	20000144 	.word	0x20000144

08006444 <__NVIC_SystemReset>:
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006448:	f3bf 8f4f 	dsb	sy
}
 800644c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800644e:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <__NVIC_SystemReset+0x24>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006456:	4904      	ldr	r1, [pc, #16]	@ (8006468 <__NVIC_SystemReset+0x24>)
 8006458:	4b04      	ldr	r3, [pc, #16]	@ (800646c <__NVIC_SystemReset+0x28>)
 800645a:	4313      	orrs	r3, r2
 800645c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800645e:	f3bf 8f4f 	dsb	sy
}
 8006462:	bf00      	nop
    __NOP();
 8006464:	bf00      	nop
 8006466:	e7fd      	b.n	8006464 <__NVIC_SystemReset+0x20>
 8006468:	e000ed00 	.word	0xe000ed00
 800646c:	05fa0004 	.word	0x05fa0004

08006470 <LL_USART_Enable>:
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <LL_USART_Disable>:
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60da      	str	r2, [r3, #12]
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <LL_USART_SetBaudRate>:
{
 80064b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064b4:	b0c0      	sub	sp, #256	@ 0x100
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064bc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80064c0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80064c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064d0:	f040 810c 	bne.w	80066ec <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80064d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064e6:	4622      	mov	r2, r4
 80064e8:	462b      	mov	r3, r5
 80064ea:	1891      	adds	r1, r2, r2
 80064ec:	6639      	str	r1, [r7, #96]	@ 0x60
 80064ee:	415b      	adcs	r3, r3
 80064f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80064f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80064f6:	4621      	mov	r1, r4
 80064f8:	eb12 0801 	adds.w	r8, r2, r1
 80064fc:	4629      	mov	r1, r5
 80064fe:	eb43 0901 	adc.w	r9, r3, r1
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800650e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006516:	4690      	mov	r8, r2
 8006518:	4699      	mov	r9, r3
 800651a:	4623      	mov	r3, r4
 800651c:	eb18 0303 	adds.w	r3, r8, r3
 8006520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006524:	462b      	mov	r3, r5
 8006526:	eb49 0303 	adc.w	r3, r9, r3
 800652a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800652e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006532:	2200      	movs	r2, #0
 8006534:	469a      	mov	sl, r3
 8006536:	4693      	mov	fp, r2
 8006538:	eb1a 030a 	adds.w	r3, sl, sl
 800653c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800653e:	eb4b 030b 	adc.w	r3, fp, fp
 8006542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006544:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800654c:	f7fa fbac 	bl	8000ca8 <__aeabi_uldivmod>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4b64      	ldr	r3, [pc, #400]	@ (80066e8 <LL_USART_SetBaudRate+0x238>)
 8006556:	fba3 2302 	umull	r2, r3, r3, r2
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	b29b      	uxth	r3, r3
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	b29c      	uxth	r4, r3
 8006562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006566:	2200      	movs	r2, #0
 8006568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800656c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006570:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	1891      	adds	r1, r2, r2
 800657a:	6539      	str	r1, [r7, #80]	@ 0x50
 800657c:	415b      	adcs	r3, r3
 800657e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006584:	4641      	mov	r1, r8
 8006586:	1851      	adds	r1, r2, r1
 8006588:	64b9      	str	r1, [r7, #72]	@ 0x48
 800658a:	4649      	mov	r1, r9
 800658c:	414b      	adcs	r3, r1
 800658e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800659c:	4659      	mov	r1, fp
 800659e:	00cb      	lsls	r3, r1, #3
 80065a0:	4651      	mov	r1, sl
 80065a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a6:	4651      	mov	r1, sl
 80065a8:	00ca      	lsls	r2, r1, #3
 80065aa:	4610      	mov	r0, r2
 80065ac:	4619      	mov	r1, r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	4642      	mov	r2, r8
 80065b2:	189b      	adds	r3, r3, r2
 80065b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065b8:	464b      	mov	r3, r9
 80065ba:	460a      	mov	r2, r1
 80065bc:	eb42 0303 	adc.w	r3, r2, r3
 80065c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80065c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065ce:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80065d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80065d6:	460b      	mov	r3, r1
 80065d8:	18db      	adds	r3, r3, r3
 80065da:	643b      	str	r3, [r7, #64]	@ 0x40
 80065dc:	4613      	mov	r3, r2
 80065de:	eb42 0303 	adc.w	r3, r2, r3
 80065e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80065e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065e8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80065ec:	f7fa fb5c 	bl	8000ca8 <__aeabi_uldivmod>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4611      	mov	r1, r2
 80065f6:	4b3c      	ldr	r3, [pc, #240]	@ (80066e8 <LL_USART_SetBaudRate+0x238>)
 80065f8:	fba3 2301 	umull	r2, r3, r3, r1
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	2264      	movs	r2, #100	@ 0x64
 8006600:	fb02 f303 	mul.w	r3, r2, r3
 8006604:	1acb      	subs	r3, r1, r3
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800660c:	4b36      	ldr	r3, [pc, #216]	@ (80066e8 <LL_USART_SetBaudRate+0x238>)
 800660e:	fba3 2302 	umull	r2, r3, r3, r2
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	b29b      	uxth	r3, r3
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	b29b      	uxth	r3, r3
 800661a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800661e:	b29b      	uxth	r3, r3
 8006620:	4423      	add	r3, r4
 8006622:	b29c      	uxth	r4, r3
 8006624:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006628:	2200      	movs	r2, #0
 800662a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800662e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006632:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	1891      	adds	r1, r2, r2
 800663c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800663e:	415b      	adcs	r3, r3
 8006640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006642:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006646:	4641      	mov	r1, r8
 8006648:	1851      	adds	r1, r2, r1
 800664a:	6339      	str	r1, [r7, #48]	@ 0x30
 800664c:	4649      	mov	r1, r9
 800664e:	414b      	adcs	r3, r1
 8006650:	637b      	str	r3, [r7, #52]	@ 0x34
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800665e:	4659      	mov	r1, fp
 8006660:	00cb      	lsls	r3, r1, #3
 8006662:	4651      	mov	r1, sl
 8006664:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006668:	4651      	mov	r1, sl
 800666a:	00ca      	lsls	r2, r1, #3
 800666c:	4610      	mov	r0, r2
 800666e:	4619      	mov	r1, r3
 8006670:	4603      	mov	r3, r0
 8006672:	4642      	mov	r2, r8
 8006674:	189b      	adds	r3, r3, r2
 8006676:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800667a:	464b      	mov	r3, r9
 800667c:	460a      	mov	r2, r1
 800667e:	eb42 0303 	adc.w	r3, r2, r3
 8006682:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006686:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800668a:	2200      	movs	r2, #0
 800668c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006690:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006694:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006698:	460b      	mov	r3, r1
 800669a:	18db      	adds	r3, r3, r3
 800669c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800669e:	4613      	mov	r3, r2
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066aa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80066ae:	f7fa fafb 	bl	8000ca8 <__aeabi_uldivmod>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4b0c      	ldr	r3, [pc, #48]	@ (80066e8 <LL_USART_SetBaudRate+0x238>)
 80066b8:	fba3 1302 	umull	r1, r3, r3, r2
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	2164      	movs	r1, #100	@ 0x64
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	3332      	adds	r3, #50	@ 0x32
 80066ca:	4a07      	ldr	r2, [pc, #28]	@ (80066e8 <LL_USART_SetBaudRate+0x238>)
 80066cc:	fba2 2303 	umull	r2, r3, r2, r3
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	b29b      	uxth	r3, r3
 80066da:	4423      	add	r3, r4
 80066dc:	b29b      	uxth	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066e4:	609a      	str	r2, [r3, #8]
}
 80066e6:	e108      	b.n	80068fa <LL_USART_SetBaudRate+0x44a>
 80066e8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80066ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066f6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80066fa:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80066fe:	4642      	mov	r2, r8
 8006700:	464b      	mov	r3, r9
 8006702:	1891      	adds	r1, r2, r2
 8006704:	6239      	str	r1, [r7, #32]
 8006706:	415b      	adcs	r3, r3
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24
 800670a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800670e:	4641      	mov	r1, r8
 8006710:	1854      	adds	r4, r2, r1
 8006712:	4649      	mov	r1, r9
 8006714:	eb43 0501 	adc.w	r5, r3, r1
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	00eb      	lsls	r3, r5, #3
 8006722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006726:	00e2      	lsls	r2, r4, #3
 8006728:	4614      	mov	r4, r2
 800672a:	461d      	mov	r5, r3
 800672c:	4643      	mov	r3, r8
 800672e:	18e3      	adds	r3, r4, r3
 8006730:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006734:	464b      	mov	r3, r9
 8006736:	eb45 0303 	adc.w	r3, r5, r3
 800673a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800673e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006742:	2200      	movs	r2, #0
 8006744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006748:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8006758:	4629      	mov	r1, r5
 800675a:	008b      	lsls	r3, r1, #2
 800675c:	4621      	mov	r1, r4
 800675e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006762:	4621      	mov	r1, r4
 8006764:	008a      	lsls	r2, r1, #2
 8006766:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800676a:	f7fa fa9d 	bl	8000ca8 <__aeabi_uldivmod>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4b65      	ldr	r3, [pc, #404]	@ (8006908 <LL_USART_SetBaudRate+0x458>)
 8006774:	fba3 2302 	umull	r2, r3, r3, r2
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	b29b      	uxth	r3, r3
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	b29c      	uxth	r4, r3
 8006780:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006784:	2200      	movs	r2, #0
 8006786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800678a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800678e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8006792:	4642      	mov	r2, r8
 8006794:	464b      	mov	r3, r9
 8006796:	1891      	adds	r1, r2, r2
 8006798:	61b9      	str	r1, [r7, #24]
 800679a:	415b      	adcs	r3, r3
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067a2:	4641      	mov	r1, r8
 80067a4:	1851      	adds	r1, r2, r1
 80067a6:	6139      	str	r1, [r7, #16]
 80067a8:	4649      	mov	r1, r9
 80067aa:	414b      	adcs	r3, r1
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	f04f 0200 	mov.w	r2, #0
 80067b2:	f04f 0300 	mov.w	r3, #0
 80067b6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067ba:	4659      	mov	r1, fp
 80067bc:	00cb      	lsls	r3, r1, #3
 80067be:	4651      	mov	r1, sl
 80067c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067c4:	4651      	mov	r1, sl
 80067c6:	00ca      	lsls	r2, r1, #3
 80067c8:	4610      	mov	r0, r2
 80067ca:	4619      	mov	r1, r3
 80067cc:	4603      	mov	r3, r0
 80067ce:	4642      	mov	r2, r8
 80067d0:	189b      	adds	r3, r3, r2
 80067d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067d6:	464b      	mov	r3, r9
 80067d8:	460a      	mov	r2, r1
 80067da:	eb42 0303 	adc.w	r3, r2, r3
 80067de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067ec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80067fc:	4649      	mov	r1, r9
 80067fe:	008b      	lsls	r3, r1, #2
 8006800:	4641      	mov	r1, r8
 8006802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006806:	4641      	mov	r1, r8
 8006808:	008a      	lsls	r2, r1, #2
 800680a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800680e:	f7fa fa4b 	bl	8000ca8 <__aeabi_uldivmod>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4611      	mov	r1, r2
 8006818:	4b3b      	ldr	r3, [pc, #236]	@ (8006908 <LL_USART_SetBaudRate+0x458>)
 800681a:	fba3 2301 	umull	r2, r3, r3, r1
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	2264      	movs	r2, #100	@ 0x64
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	1acb      	subs	r3, r1, r3
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	3332      	adds	r3, #50	@ 0x32
 800682c:	4a36      	ldr	r2, [pc, #216]	@ (8006908 <LL_USART_SetBaudRate+0x458>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	b29b      	uxth	r3, r3
 8006836:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800683a:	b29b      	uxth	r3, r3
 800683c:	4423      	add	r3, r4
 800683e:	b29c      	uxth	r4, r3
 8006840:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006844:	2200      	movs	r2, #0
 8006846:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006848:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800684a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800684e:	4642      	mov	r2, r8
 8006850:	464b      	mov	r3, r9
 8006852:	1891      	adds	r1, r2, r2
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	415b      	adcs	r3, r3
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800685e:	4641      	mov	r1, r8
 8006860:	1851      	adds	r1, r2, r1
 8006862:	6039      	str	r1, [r7, #0]
 8006864:	4649      	mov	r1, r9
 8006866:	414b      	adcs	r3, r1
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	f04f 0200 	mov.w	r2, #0
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006876:	4659      	mov	r1, fp
 8006878:	00cb      	lsls	r3, r1, #3
 800687a:	4651      	mov	r1, sl
 800687c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006880:	4651      	mov	r1, sl
 8006882:	00ca      	lsls	r2, r1, #3
 8006884:	4610      	mov	r0, r2
 8006886:	4619      	mov	r1, r3
 8006888:	4603      	mov	r3, r0
 800688a:	4642      	mov	r2, r8
 800688c:	189b      	adds	r3, r3, r2
 800688e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006890:	464b      	mov	r3, r9
 8006892:	460a      	mov	r2, r1
 8006894:	eb42 0303 	adc.w	r3, r2, r3
 8006898:	677b      	str	r3, [r7, #116]	@ 0x74
 800689a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800689e:	2200      	movs	r2, #0
 80068a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80068b0:	4649      	mov	r1, r9
 80068b2:	008b      	lsls	r3, r1, #2
 80068b4:	4641      	mov	r1, r8
 80068b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ba:	4641      	mov	r1, r8
 80068bc:	008a      	lsls	r2, r1, #2
 80068be:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80068c2:	f7fa f9f1 	bl	8000ca8 <__aeabi_uldivmod>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006908 <LL_USART_SetBaudRate+0x458>)
 80068cc:	fba3 1302 	umull	r1, r3, r3, r2
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	2164      	movs	r1, #100	@ 0x64
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	3332      	adds	r3, #50	@ 0x32
 80068de:	4a0a      	ldr	r2, [pc, #40]	@ (8006908 <LL_USART_SetBaudRate+0x458>)
 80068e0:	fba2 2303 	umull	r2, r3, r2, r3
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	4423      	add	r3, r4
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	461a      	mov	r2, r3
 80068f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068f8:	609a      	str	r2, [r3, #8]
}
 80068fa:	bf00      	nop
 80068fc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006900:	46bd      	mov	sp, r7
 8006902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006906:	bf00      	nop
 8006908:	51eb851f 	.word	0x51eb851f

0800690c <LL_GPIO_IsOutputPinSet>:
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	4013      	ands	r3, r2
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	bf0c      	ite	eq
 8006924:	2301      	moveq	r3, #1
 8006926:	2300      	movne	r3, #0
 8006928:	b2db      	uxtb	r3, r3
}
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <LL_GPIO_SetOutputPin>:
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	619a      	str	r2, [r3, #24]
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <LL_GPIO_ResetOutputPin>:
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	041a      	lsls	r2, r3, #16
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	619a      	str	r2, [r3, #24]
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <command_init>:
		9
	}
};

void	command_init(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8006976:	f7fb f841 	bl	80019fc <Ringbuf_init>

//	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 800697a:	22ff      	movs	r2, #255	@ 0xff
 800697c:	2100      	movs	r1, #0
 800697e:	483b      	ldr	r0, [pc, #236]	@ (8006a6c <command_init+0xfc>)
 8006980:	f00a fce7 	bl	8011352 <memset>
	s_commandBufferIndex = 0;
 8006984:	4b3a      	ldr	r3, [pc, #232]	@ (8006a70 <command_init+0x100>)
 8006986:	2200      	movs	r2, #0
 8006988:	701a      	strb	r2, [r3, #0]
//	Uart_sendstring(UART5,"\r\n");
//	Uart_sendstring(UART5,"> CPOC FIRMWARE V1.2.0 \r\n");
//	Uart_sendstring(UART5,"\r\n");

    Uart_sendstring(UART4, "\r\n");
 800698a:	493a      	ldr	r1, [pc, #232]	@ (8006a74 <command_init+0x104>)
 800698c:	483a      	ldr	r0, [pc, #232]	@ (8006a78 <command_init+0x108>)
 800698e:	f7fb fb33 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(UART4, "> CPOC FIRMWARE V1.2.0 \r\n");
 8006992:	493a      	ldr	r1, [pc, #232]	@ (8006a7c <command_init+0x10c>)
 8006994:	4838      	ldr	r0, [pc, #224]	@ (8006a78 <command_init+0x108>)
 8006996:	f7fb fb2f 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(UART4, "\r\n");
 800699a:	4936      	ldr	r1, [pc, #216]	@ (8006a74 <command_init+0x104>)
 800699c:	4836      	ldr	r0, [pc, #216]	@ (8006a78 <command_init+0x108>)
 800699e:	f7fb fb2b 	bl	8001ff8 <Uart_sendstring>

    Uart_sendstring(USART2, "B");
 80069a2:	4937      	ldr	r1, [pc, #220]	@ (8006a80 <command_init+0x110>)
 80069a4:	4837      	ldr	r0, [pc, #220]	@ (8006a84 <command_init+0x114>)
 80069a6:	f7fb fb27 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n");
 80069aa:	4932      	ldr	r1, [pc, #200]	@ (8006a74 <command_init+0x104>)
 80069ac:	4835      	ldr	r0, [pc, #212]	@ (8006a84 <command_init+0x114>)
 80069ae:	f7fb fb23 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "> CPOC FIRMWARE V1.2.0 \r\n");
 80069b2:	4932      	ldr	r1, [pc, #200]	@ (8006a7c <command_init+0x10c>)
 80069b4:	4833      	ldr	r0, [pc, #204]	@ (8006a84 <command_init+0x114>)
 80069b6:	f7fb fb1f 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n");
 80069ba:	492e      	ldr	r1, [pc, #184]	@ (8006a74 <command_init+0x104>)
 80069bc:	4831      	ldr	r0, [pc, #196]	@ (8006a84 <command_init+0x114>)
 80069be:	f7fb fb1b 	bl	8001ff8 <Uart_sendstring>

    command_send_splash();
 80069c2:	f001 f82b 	bl	8007a1c <command_send_splash>
	tCmdLineEntry *pEntry;


//	Uart_sendstring(UART5, "\nStart with <help_xxxx> command\r\n");
//	Uart_sendstring(UART5, "-------------------------------------\r\n");
    Uart_sendstring(UART4, "\nStart with <help_xxxx> command\r\n");
 80069c6:	4930      	ldr	r1, [pc, #192]	@ (8006a88 <command_init+0x118>)
 80069c8:	482b      	ldr	r0, [pc, #172]	@ (8006a78 <command_init+0x108>)
 80069ca:	f7fb fb15 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(UART4, "-------------------------------------\r\n");
 80069ce:	492f      	ldr	r1, [pc, #188]	@ (8006a8c <command_init+0x11c>)
 80069d0:	4829      	ldr	r0, [pc, #164]	@ (8006a78 <command_init+0x108>)
 80069d2:	f7fb fb11 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "\nStart with <help_xxxx> command\r\n");
 80069d6:	492c      	ldr	r1, [pc, #176]	@ (8006a88 <command_init+0x118>)
 80069d8:	482a      	ldr	r0, [pc, #168]	@ (8006a84 <command_init+0x114>)
 80069da:	f7fb fb0d 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "-------------------------------------\r\n");
 80069de:	492b      	ldr	r1, [pc, #172]	@ (8006a8c <command_init+0x11c>)
 80069e0:	4828      	ldr	r0, [pc, #160]	@ (8006a84 <command_init+0x114>)
 80069e2:	f7fb fb09 	bl	8001ff8 <Uart_sendstring>

	pEntry = &g_psCmdTable[0];
 80069e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a90 <command_init+0x120>)
 80069e8:	607b      	str	r3, [r7, #4]

	while (pEntry->pcCmd) {
 80069ea:	e026      	b.n	8006a3a <command_init+0xca>
//		Uart_sendstring(UART5, pEntry->pcCmd);
//		Uart_sendstring(UART5, pEntry->pcHelp);
//		Uart_sendstring(UART5, "\r\n");

        Uart_sendstring(UART4, pEntry->pcCmd);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4619      	mov	r1, r3
 80069f2:	4821      	ldr	r0, [pc, #132]	@ (8006a78 <command_init+0x108>)
 80069f4:	f7fb fb00 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(UART4, pEntry->pcHelp);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	4619      	mov	r1, r3
 80069fe:	481e      	ldr	r0, [pc, #120]	@ (8006a78 <command_init+0x108>)
 8006a00:	f7fb fafa 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(UART4, "\r\n");
 8006a04:	491b      	ldr	r1, [pc, #108]	@ (8006a74 <command_init+0x104>)
 8006a06:	481c      	ldr	r0, [pc, #112]	@ (8006a78 <command_init+0x108>)
 8006a08:	f7fb faf6 	bl	8001ff8 <Uart_sendstring>

        Uart_sendstring(USART2, pEntry->pcCmd);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4619      	mov	r1, r3
 8006a12:	481c      	ldr	r0, [pc, #112]	@ (8006a84 <command_init+0x114>)
 8006a14:	f7fb faf0 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(USART2, pEntry->pcHelp);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4819      	ldr	r0, [pc, #100]	@ (8006a84 <command_init+0x114>)
 8006a20:	f7fb faea 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(USART2, "\r\n");
 8006a24:	4913      	ldr	r1, [pc, #76]	@ (8006a74 <command_init+0x104>)
 8006a26:	4817      	ldr	r0, [pc, #92]	@ (8006a84 <command_init+0x114>)
 8006a28:	f7fb fae6 	bl	8001ff8 <Uart_sendstring>

	    if (pEntry == &g_psCmdTable[12]) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a19      	ldr	r2, [pc, #100]	@ (8006a94 <command_init+0x124>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d007      	beq.n	8006a44 <command_init+0xd4>
	        break;
	    }
	    pEntry++;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	330c      	adds	r3, #12
 8006a38:	607b      	str	r3, [r7, #4]
	while (pEntry->pcCmd) {
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1d4      	bne.n	80069ec <command_init+0x7c>
 8006a42:	e000      	b.n	8006a46 <command_init+0xd6>
	        break;
 8006a44:	bf00      	nop
	}

//	Uart_sendstring(UART5, "\r\n> ");
    Uart_sendstring(UART4, "\r\n> ");
 8006a46:	4914      	ldr	r1, [pc, #80]	@ (8006a98 <command_init+0x128>)
 8006a48:	480b      	ldr	r0, [pc, #44]	@ (8006a78 <command_init+0x108>)
 8006a4a:	f7fb fad5 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n> ");
 8006a4e:	4912      	ldr	r1, [pc, #72]	@ (8006a98 <command_init+0x128>)
 8006a50:	480c      	ldr	r0, [pc, #48]	@ (8006a84 <command_init+0x114>)
 8006a52:	f7fb fad1 	bl	8001ff8 <Uart_sendstring>

    Uart_flush(USART2);
 8006a56:	480b      	ldr	r0, [pc, #44]	@ (8006a84 <command_init+0x114>)
 8006a58:	f7fb fae6 	bl	8002028 <Uart_flush>
    Uart_flush(UART4);
 8006a5c:	4806      	ldr	r0, [pc, #24]	@ (8006a78 <command_init+0x108>)
 8006a5e:	f7fb fae3 	bl	8002028 <Uart_flush>
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200079bc 	.word	0x200079bc
 8006a70:	20007abb 	.word	0x20007abb
 8006a74:	080155c8 	.word	0x080155c8
 8006a78:	40004c00 	.word	0x40004c00
 8006a7c:	080155cc 	.word	0x080155cc
 8006a80:	080155e8 	.word	0x080155e8
 8006a84:	40004400 	.word	0x40004400
 8006a88:	080155ec 	.word	0x080155ec
 8006a8c:	08015610 	.word	0x08015610
 8006a90:	20000144 	.word	0x20000144
 8006a94:	200001d4 	.word	0x200001d4
 8006a98:	08015638 	.word	0x08015638

08006a9c <command_task_update>:
volatile uint8_t rs422_report_enable = 0;
void process_command(USART_TypeDef* USARTx, char rxData);


static void command_task_update(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
    char rxData;


    while (IsDataAvailable(UART4) || IsDataAvailable(USART2))
 8006aa2:	e029      	b.n	8006af8 <command_task_update+0x5c>
//            rxData = Uart_read(UART5);
//            Uart_write(UART5, rxData);
//            process_command(UART5, rxData);
//        }

        if (IsDataAvailable(UART4)) {
 8006aa4:	481d      	ldr	r0, [pc, #116]	@ (8006b1c <command_task_update+0x80>)
 8006aa6:	f7fb fa4d 	bl	8001f44 <IsDataAvailable>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00e      	beq.n	8006ace <command_task_update+0x32>
            rxData = Uart_read(UART4);
 8006ab0:	481a      	ldr	r0, [pc, #104]	@ (8006b1c <command_task_update+0x80>)
 8006ab2:	f7fb f889 	bl	8001bc8 <Uart_read>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	71fb      	strb	r3, [r7, #7]
            Uart_write(UART4, rxData);
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	4619      	mov	r1, r3
 8006abe:	4817      	ldr	r0, [pc, #92]	@ (8006b1c <command_task_update+0x80>)
 8006ac0:	f7fb f946 	bl	8001d50 <Uart_write>
            process_command(UART4, rxData);
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4814      	ldr	r0, [pc, #80]	@ (8006b1c <command_task_update+0x80>)
 8006aca:	f000 f82b 	bl	8006b24 <process_command>
        }

        if (IsDataAvailable(USART2)) {
 8006ace:	4814      	ldr	r0, [pc, #80]	@ (8006b20 <command_task_update+0x84>)
 8006ad0:	f7fb fa38 	bl	8001f44 <IsDataAvailable>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00e      	beq.n	8006af8 <command_task_update+0x5c>
            rxData = Uart_read(USART2);
 8006ada:	4811      	ldr	r0, [pc, #68]	@ (8006b20 <command_task_update+0x84>)
 8006adc:	f7fb f874 	bl	8001bc8 <Uart_read>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	71fb      	strb	r3, [r7, #7]
            Uart_write(USART2, rxData);
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	480d      	ldr	r0, [pc, #52]	@ (8006b20 <command_task_update+0x84>)
 8006aea:	f7fb f931 	bl	8001d50 <Uart_write>
            process_command(USART2, rxData);
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	4619      	mov	r1, r3
 8006af2:	480b      	ldr	r0, [pc, #44]	@ (8006b20 <command_task_update+0x84>)
 8006af4:	f000 f816 	bl	8006b24 <process_command>
    while (IsDataAvailable(UART4) || IsDataAvailable(USART2))
 8006af8:	4808      	ldr	r0, [pc, #32]	@ (8006b1c <command_task_update+0x80>)
 8006afa:	f7fb fa23 	bl	8001f44 <IsDataAvailable>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1cf      	bne.n	8006aa4 <command_task_update+0x8>
 8006b04:	4806      	ldr	r0, [pc, #24]	@ (8006b20 <command_task_update+0x84>)
 8006b06:	f7fb fa1d 	bl	8001f44 <IsDataAvailable>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1c9      	bne.n	8006aa4 <command_task_update+0x8>
        }
    }
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40004c00 	.word	0x40004c00
 8006b20:	40004400 	.word	0x40004400

08006b24 <process_command>:

void process_command(USART_TypeDef* USARTx, char rxData)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
    int8_t ret_val;
    if (rxData == 27)  // ASCII code for ESC key
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	2b1b      	cmp	r3, #27
 8006b34:	d10c      	bne.n	8006b50 <process_command+0x2c>
    {
    	auto_report_enabled = 0;
 8006b36:	4b31      	ldr	r3, [pc, #196]	@ (8006bfc <process_command+0xd8>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]
        rs422_report_enable = 0;
 8006b3c:	4b30      	ldr	r3, [pc, #192]	@ (8006c00 <process_command+0xdc>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]
        rf_report_enable = 0;
 8006b42:	4b30      	ldr	r3, [pc, #192]	@ (8006c04 <process_command+0xe0>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	701a      	strb	r2, [r3, #0]
        gps_report_enable = 0;
 8006b48:	4b2f      	ldr	r3, [pc, #188]	@ (8006c08 <process_command+0xe4>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	701a      	strb	r2, [r3, #0]
        return;
 8006b4e:	e052      	b.n	8006bf6 <process_command+0xd2>
    }

    if ((rxData == '\r') || (rxData == '\n'))
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	2b0d      	cmp	r3, #13
 8006b54:	d002      	beq.n	8006b5c <process_command+0x38>
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	2b0a      	cmp	r3, #10
 8006b5a:	d12f      	bne.n	8006bbc <process_command+0x98>
    {
        if (s_commandBufferIndex > 0)
 8006b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c0c <process_command+0xe8>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d026      	beq.n	8006bb2 <process_command+0x8e>
        {
            s_commandBuffer[s_commandBufferIndex] = 0;
 8006b64:	4b29      	ldr	r3, [pc, #164]	@ (8006c0c <process_command+0xe8>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4b29      	ldr	r3, [pc, #164]	@ (8006c10 <process_command+0xec>)
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	5499      	strb	r1, [r3, r2]
            s_commandBufferIndex++;
 8006b70:	4b26      	ldr	r3, [pc, #152]	@ (8006c0c <process_command+0xe8>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	4b24      	ldr	r3, [pc, #144]	@ (8006c0c <process_command+0xe8>)
 8006b7a:	701a      	strb	r2, [r3, #0]
            ret_val = CmdLineProcess(s_commandBuffer,USARTx);
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	4824      	ldr	r0, [pc, #144]	@ (8006c10 <process_command+0xec>)
 8006b80:	f7ff fbfe 	bl	8006380 <CmdLineProcess>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
            s_commandBufferIndex = 0;
 8006b88:	4b20      	ldr	r3, [pc, #128]	@ (8006c0c <process_command+0xe8>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	701a      	strb	r2, [r3, #0]
            Uart_sendstring(USARTx, "\r\n> ");
 8006b8e:	4921      	ldr	r1, [pc, #132]	@ (8006c14 <process_command+0xf0>)
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7fb fa31 	bl	8001ff8 <Uart_sendstring>
            Uart_sendstring(USARTx, ErrorCode[ret_val]);
 8006b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006c18 <process_command+0xf4>)
 8006b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fb fa28 	bl	8001ff8 <Uart_sendstring>
            Uart_sendstring(USARTx, "> ");
 8006ba8:	491c      	ldr	r1, [pc, #112]	@ (8006c1c <process_command+0xf8>)
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7fb fa24 	bl	8001ff8 <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 8006bb0:	e021      	b.n	8006bf6 <process_command+0xd2>
        }
        else
        {
            Uart_sendstring(USARTx, "\r\n> ");
 8006bb2:	4918      	ldr	r1, [pc, #96]	@ (8006c14 <process_command+0xf0>)
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7fb fa1f 	bl	8001ff8 <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 8006bba:	e01c      	b.n	8006bf6 <process_command+0xd2>
        }
    }
    else if ((rxData == 8) || (rxData == 127))
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d002      	beq.n	8006bc8 <process_command+0xa4>
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bc6:	d10a      	bne.n	8006bde <process_command+0xba>
    {
        if (s_commandBufferIndex > 0)
 8006bc8:	4b10      	ldr	r3, [pc, #64]	@ (8006c0c <process_command+0xe8>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d012      	beq.n	8006bf6 <process_command+0xd2>
        {
            s_commandBufferIndex--;
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8006c0c <process_command+0xe8>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c0c <process_command+0xe8>)
 8006bda:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > 0)
 8006bdc:	e00b      	b.n	8006bf6 <process_command+0xd2>
        }
    }
    else
    {
        s_commandBuffer[s_commandBufferIndex] = rxData;
 8006bde:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <process_command+0xe8>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	4619      	mov	r1, r3
 8006be4:	4a0a      	ldr	r2, [pc, #40]	@ (8006c10 <process_command+0xec>)
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	5453      	strb	r3, [r2, r1]
        s_commandBufferIndex++;
 8006bea:	4b08      	ldr	r3, [pc, #32]	@ (8006c0c <process_command+0xe8>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <process_command+0xe8>)
 8006bf4:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > COMMAND_MAX_LENGTH)
        {
            s_commandBufferIndex = 0;
        }
    }
}
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20007abc 	.word	0x20007abc
 8006c00:	20007abd 	.word	0x20007abd
 8006c04:	20007abe 	.word	0x20007abe
 8006c08:	20007ac0 	.word	0x20007ac0
 8006c0c:	20007abb 	.word	0x20007abb
 8006c10:	200079bc 	.word	0x200079bc
 8006c14:	08015638 	.word	0x08015638
 8006c18:	2000012c 	.word	0x2000012c
 8006c1c:	08015640 	.word	0x08015640

08006c20 <Cmd_help>:

//USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];

int Cmd_help(int argc, char *argv[]) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
    tCmdLineEntry *pEntry;
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c30:	3b01      	subs	r3, #1
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	4413      	add	r3, r2
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60bb      	str	r3, [r7, #8]

    Uart_sendstring(USARTx, "\nSimple commands\r\n");
 8006c3c:	4916      	ldr	r1, [pc, #88]	@ (8006c98 <Cmd_help+0x78>)
 8006c3e:	68b8      	ldr	r0, [r7, #8]
 8006c40:	f7fb f9da 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USARTx, "------------------\r\n");
 8006c44:	4915      	ldr	r1, [pc, #84]	@ (8006c9c <Cmd_help+0x7c>)
 8006c46:	68b8      	ldr	r0, [r7, #8]
 8006c48:	f7fb f9d6 	bl	8001ff8 <Uart_sendstring>
    pEntry = &g_psCmdTable[0];
 8006c4c:	4b14      	ldr	r3, [pc, #80]	@ (8006ca0 <Cmd_help+0x80>)
 8006c4e:	60fb      	str	r3, [r7, #12]

    while (pEntry->pcCmd) {
 8006c50:	e016      	b.n	8006c80 <Cmd_help+0x60>
        Uart_sendstring(USARTx, pEntry->pcCmd);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	68b8      	ldr	r0, [r7, #8]
 8006c5a:	f7fb f9cd 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(USARTx, pEntry->pcHelp);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	4619      	mov	r1, r3
 8006c64:	68b8      	ldr	r0, [r7, #8]
 8006c66:	f7fb f9c7 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(USARTx, "\r\n");
 8006c6a:	490e      	ldr	r1, [pc, #56]	@ (8006ca4 <Cmd_help+0x84>)
 8006c6c:	68b8      	ldr	r0, [r7, #8]
 8006c6e:	f7fb f9c3 	bl	8001ff8 <Uart_sendstring>
        if (pEntry == &g_psCmdTable[12]) {
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca8 <Cmd_help+0x88>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d007      	beq.n	8006c8a <Cmd_help+0x6a>
            break;
        }
        pEntry++;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	60fb      	str	r3, [r7, #12]
    while (pEntry->pcCmd) {
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e4      	bne.n	8006c52 <Cmd_help+0x32>
 8006c88:	e000      	b.n	8006c8c <Cmd_help+0x6c>
            break;
 8006c8a:	bf00      	nop
    }

    return (CMDLINE_OK);
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	08015644 	.word	0x08015644
 8006c9c:	08015658 	.word	0x08015658
 8006ca0:	20000144 	.word	0x20000144
 8006ca4:	080155c8 	.word	0x080155c8
 8006ca8:	200001d4 	.word	0x200001d4

08006cac <Cmd_help_all>:

// 9table <-> 8 o day
int Cmd_help_all(int argc, char *argv[]) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60bb      	str	r3, [r7, #8]
	Uart_sendstring(USARTx, "\nAvailable commands\r\n");
 8006cc8:	4915      	ldr	r1, [pc, #84]	@ (8006d20 <Cmd_help_all+0x74>)
 8006cca:	68b8      	ldr	r0, [r7, #8]
 8006ccc:	f7fb f994 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(USARTx, "------------------\r\n");
 8006cd0:	4914      	ldr	r1, [pc, #80]	@ (8006d24 <Cmd_help_all+0x78>)
 8006cd2:	68b8      	ldr	r0, [r7, #8]
 8006cd4:	f7fb f990 	bl	8001ff8 <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
 8006cd8:	4b13      	ldr	r3, [pc, #76]	@ (8006d28 <Cmd_help_all+0x7c>)
 8006cda:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006cdc:	e012      	b.n	8006d04 <Cmd_help_all+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	68b8      	ldr	r0, [r7, #8]
 8006ce6:	f7fb f987 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	68b8      	ldr	r0, [r7, #8]
 8006cf2:	f7fb f981 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006cf6:	490d      	ldr	r1, [pc, #52]	@ (8006d2c <Cmd_help_all+0x80>)
 8006cf8:	68b8      	ldr	r0, [r7, #8]
 8006cfa:	f7fb f97d 	bl	8001ff8 <Uart_sendstring>
//	        Uart_sendstring(USARTx, "\n--------------IOU Command List-------------\r\n");
//	    }


		// Advance to the next entry in the table.
		pEntry++;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	330c      	adds	r3, #12
 8006d02:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e8      	bne.n	8006cde <Cmd_help_all+0x32>

	}
	Uart_sendstring(USARTx, "--------------    END    -------------\r\n");
 8006d0c:	4908      	ldr	r1, [pc, #32]	@ (8006d30 <Cmd_help_all+0x84>)
 8006d0e:	68b8      	ldr	r0, [r7, #8]
 8006d10:	f7fb f972 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	08015670 	.word	0x08015670
 8006d24:	08015658 	.word	0x08015658
 8006d28:	20000144 	.word	0x20000144
 8006d2c:	080155c8 	.word	0x080155c8
 8006d30:	08015688 	.word	0x08015688

08006d34 <Cmd_help_cpoc>:

int Cmd_help_cpoc(int argc, char *argv[]) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d44:	3b01      	subs	r3, #1
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CPOC Command List-------------\r\n");
 8006d50:	4914      	ldr	r1, [pc, #80]	@ (8006da4 <Cmd_help_cpoc+0x70>)
 8006d52:	68b8      	ldr	r0, [r7, #8]
 8006d54:	f7fb f950 	bl	8001ff8 <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[13];
 8006d58:	4b13      	ldr	r3, [pc, #76]	@ (8006da8 <Cmd_help_cpoc+0x74>)
 8006d5a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006d5c:	e016      	b.n	8006d8c <Cmd_help_cpoc+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4619      	mov	r1, r3
 8006d64:	68b8      	ldr	r0, [r7, #8]
 8006d66:	f7fb f947 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	68b8      	ldr	r0, [r7, #8]
 8006d72:	f7fb f941 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006d76:	490d      	ldr	r1, [pc, #52]	@ (8006dac <Cmd_help_cpoc+0x78>)
 8006d78:	68b8      	ldr	r0, [r7, #8]
 8006d7a:	f7fb f93d 	bl	8001ff8 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[27]) {
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4a0b      	ldr	r2, [pc, #44]	@ (8006db0 <Cmd_help_cpoc+0x7c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d007      	beq.n	8006d96 <Cmd_help_cpoc+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e4      	bne.n	8006d5e <Cmd_help_cpoc+0x2a>
 8006d94:	e000      	b.n	8006d98 <Cmd_help_cpoc+0x64>
	        break;
 8006d96:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006d98:	2300      	movs	r3, #0

}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	080156b4 	.word	0x080156b4
 8006da8:	200001e0 	.word	0x200001e0
 8006dac:	080155c8 	.word	0x080155c8
 8006db0:	20000288 	.word	0x20000288

08006db4 <Cmd_help_pmu>:
int Cmd_help_pmu(int argc, char *argv[]) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	4413      	add	r3, r2
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PMU Command List-------------\r\n");
 8006dd0:	4914      	ldr	r1, [pc, #80]	@ (8006e24 <Cmd_help_pmu+0x70>)
 8006dd2:	68b8      	ldr	r0, [r7, #8]
 8006dd4:	f7fb f910 	bl	8001ff8 <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[28];
 8006dd8:	4b13      	ldr	r3, [pc, #76]	@ (8006e28 <Cmd_help_pmu+0x74>)
 8006dda:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006ddc:	e016      	b.n	8006e0c <Cmd_help_pmu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4619      	mov	r1, r3
 8006de4:	68b8      	ldr	r0, [r7, #8]
 8006de6:	f7fb f907 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	4619      	mov	r1, r3
 8006df0:	68b8      	ldr	r0, [r7, #8]
 8006df2:	f7fb f901 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006df6:	490d      	ldr	r1, [pc, #52]	@ (8006e2c <Cmd_help_pmu+0x78>)
 8006df8:	68b8      	ldr	r0, [r7, #8]
 8006dfa:	f7fb f8fd 	bl	8001ff8 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[34]) {
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4a0b      	ldr	r2, [pc, #44]	@ (8006e30 <Cmd_help_pmu+0x7c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d007      	beq.n	8006e16 <Cmd_help_pmu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	330c      	adds	r3, #12
 8006e0a:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e4      	bne.n	8006dde <Cmd_help_pmu+0x2a>
 8006e14:	e000      	b.n	8006e18 <Cmd_help_pmu+0x64>
	        break;
 8006e16:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	080156e4 	.word	0x080156e4
 8006e28:	20000294 	.word	0x20000294
 8006e2c:	080155c8 	.word	0x080155c8
 8006e30:	200002dc 	.word	0x200002dc

08006e34 <Cmd_help_pdu>:
int Cmd_help_pdu(int argc, char *argv[]) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e44:	3b01      	subs	r3, #1
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PDU Command List-------------\r\n");
 8006e50:	4914      	ldr	r1, [pc, #80]	@ (8006ea4 <Cmd_help_pdu+0x70>)
 8006e52:	68b8      	ldr	r0, [r7, #8]
 8006e54:	f7fb f8d0 	bl	8001ff8 <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[35];
 8006e58:	4b13      	ldr	r3, [pc, #76]	@ (8006ea8 <Cmd_help_pdu+0x74>)
 8006e5a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006e5c:	e016      	b.n	8006e8c <Cmd_help_pdu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4619      	mov	r1, r3
 8006e64:	68b8      	ldr	r0, [r7, #8]
 8006e66:	f7fb f8c7 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	68b8      	ldr	r0, [r7, #8]
 8006e72:	f7fb f8c1 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006e76:	490d      	ldr	r1, [pc, #52]	@ (8006eac <Cmd_help_pdu+0x78>)
 8006e78:	68b8      	ldr	r0, [r7, #8]
 8006e7a:	f7fb f8bd 	bl	8001ff8 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[40]) {
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4a0b      	ldr	r2, [pc, #44]	@ (8006eb0 <Cmd_help_pdu+0x7c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d007      	beq.n	8006e96 <Cmd_help_pdu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e4      	bne.n	8006e5e <Cmd_help_pdu+0x2a>
 8006e94:	e000      	b.n	8006e98 <Cmd_help_pdu+0x64>
	        break;
 8006e96:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	08015714 	.word	0x08015714
 8006ea8:	200002e8 	.word	0x200002e8
 8006eac:	080155c8 	.word	0x080155c8
 8006eb0:	20000324 	.word	0x20000324

08006eb4 <Cmd_help_cam>:
int Cmd_help_cam(int argc, char *argv[]) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	4413      	add	r3, r2
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CAM Command List-------------\r\n");
 8006ed0:	4914      	ldr	r1, [pc, #80]	@ (8006f24 <Cmd_help_cam+0x70>)
 8006ed2:	68b8      	ldr	r0, [r7, #8]
 8006ed4:	f7fb f890 	bl	8001ff8 <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[41];
 8006ed8:	4b13      	ldr	r3, [pc, #76]	@ (8006f28 <Cmd_help_cam+0x74>)
 8006eda:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006edc:	e016      	b.n	8006f0c <Cmd_help_cam+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	68b8      	ldr	r0, [r7, #8]
 8006ee6:	f7fb f887 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68b8      	ldr	r0, [r7, #8]
 8006ef2:	f7fb f881 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006ef6:	490d      	ldr	r1, [pc, #52]	@ (8006f2c <Cmd_help_cam+0x78>)
 8006ef8:	68b8      	ldr	r0, [r7, #8]
 8006efa:	f7fb f87d 	bl	8001ff8 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[41]) {
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4a09      	ldr	r2, [pc, #36]	@ (8006f28 <Cmd_help_cam+0x74>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d007      	beq.n	8006f16 <Cmd_help_cam+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e4      	bne.n	8006ede <Cmd_help_cam+0x2a>
 8006f14:	e000      	b.n	8006f18 <Cmd_help_cam+0x64>
	        break;
 8006f16:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	08015744 	.word	0x08015744
 8006f28:	20000330 	.word	0x20000330
 8006f2c:	080155c8 	.word	0x080155c8

08006f30 <Cmd_help_iou>:
int Cmd_help_iou(int argc, char *argv[]) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f40:	3b01      	subs	r3, #1
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	4413      	add	r3, r2
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------IOU Command List-------------\r\n");
 8006f4c:	4914      	ldr	r1, [pc, #80]	@ (8006fa0 <Cmd_help_iou+0x70>)
 8006f4e:	68b8      	ldr	r0, [r7, #8]
 8006f50:	f7fb f852 	bl	8001ff8 <Uart_sendstring>


	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[42];
 8006f54:	4b13      	ldr	r3, [pc, #76]	@ (8006fa4 <Cmd_help_iou+0x74>)
 8006f56:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006f58:	e016      	b.n	8006f88 <Cmd_help_iou+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	68b8      	ldr	r0, [r7, #8]
 8006f62:	f7fb f849 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68b8      	ldr	r0, [r7, #8]
 8006f6e:	f7fb f843 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006f72:	490d      	ldr	r1, [pc, #52]	@ (8006fa8 <Cmd_help_iou+0x78>)
 8006f74:	68b8      	ldr	r0, [r7, #8]
 8006f76:	f7fb f83f 	bl	8001ff8 <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[23]) {
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006fac <Cmd_help_iou+0x7c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d007      	beq.n	8006f92 <Cmd_help_iou+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	330c      	adds	r3, #12
 8006f86:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e4      	bne.n	8006f5a <Cmd_help_iou+0x2a>
 8006f90:	e000      	b.n	8006f94 <Cmd_help_iou+0x64>
	        break;
 8006f92:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	08015774 	.word	0x08015774
 8006fa4:	2000033c 	.word	0x2000033c
 8006fa8:	080155c8 	.word	0x080155c8
 8006fac:	20000258 	.word	0x20000258

08006fb0 <NotYetDefine>:





int NotYetDefine(int argc, char *argv[]) {
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
	Uart_sendstring(USARTx, "\nThis function is not defined yet \r\n");
 8006fcc:	4904      	ldr	r1, [pc, #16]	@ (8006fe0 <NotYetDefine+0x30>)
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7fb f812 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	080157a4 	.word	0x080157a4

08006fe4 <Cmd_splash>:

int Cmd_splash(int argc, char *argv[]) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
	command_send_splash();
 8006fee:	f000 fd15 	bl	8007a1c <command_send_splash>
	// Return success.
	return (CMDLINE_OK);
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <Cmd_status_now>:

int Cmd_status_now(int argc, char *argv[]){
 8006ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffe:	b0a5      	sub	sp, #148	@ 0x94
 8007000:	af04      	add	r7, sp, #16
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800700c:	3b01      	subs	r3, #1
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	4413      	add	r3, r2
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint8_t day, date, month, year, hour, min, sec;
    float temp;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8007018:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800701c:	f107 0275 	add.w	r2, r7, #117	@ 0x75
 8007020:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 8007024:	f107 0077 	add.w	r0, r7, #119	@ 0x77
 8007028:	f107 0371 	add.w	r3, r7, #113	@ 0x71
 800702c:	9302      	str	r3, [sp, #8]
 800702e:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	4623      	mov	r3, r4
 800703c:	f7fa fa12 	bl	8001464 <DS3231_GetDateTime>

    // Get current temperature from DS3231
    temp = DS3231_GetTemperature();
 8007040:	f7fa fab8 	bl	80015b4 <DS3231_GetTemperature>
 8007044:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78

    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8007048:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800704c:	461d      	mov	r5, r3
 800704e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8007052:	461e      	mov	r6, r3
 8007054:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007058:	461a      	mov	r2, r3
 800705a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800705e:	4619      	mov	r1, r3
 8007060:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8007064:	461c      	mov	r4, r3
 8007066:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800706a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800706e:	f107 000c 	add.w	r0, r7, #12
 8007072:	9303      	str	r3, [sp, #12]
 8007074:	9402      	str	r4, [sp, #8]
 8007076:	9101      	str	r1, [sp, #4]
 8007078:	9200      	str	r2, [sp, #0]
 800707a:	4633      	mov	r3, r6
 800707c:	462a      	mov	r2, r5
 800707e:	4931      	ldr	r1, [pc, #196]	@ (8007144 <Cmd_status_now+0x148>)
 8007080:	f00a f904 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007084:	f107 030c 	add.w	r3, r7, #12
 8007088:	4619      	mov	r1, r3
 800708a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800708c:	f7fa ffb4 	bl	8001ff8 <Uart_sendstring>

    sprintf(buffer, "Temperature: %.2f *C\r\n", temp);
 8007090:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8007092:	f7f9 fa69 	bl	8000568 <__aeabi_f2d>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	f107 000c 	add.w	r0, r7, #12
 800709e:	492a      	ldr	r1, [pc, #168]	@ (8007148 <Cmd_status_now+0x14c>)
 80070a0:	f00a f8f4 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, buffer);
 80070a4:	f107 030c 	add.w	r3, r7, #12
 80070a8:	4619      	mov	r1, r3
 80070aa:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80070ac:	f7fa ffa4 	bl	8001ff8 <Uart_sendstring>
    sprintf(buffer, "HardwareVer: CPOC Hardware 1.2.0\r\n");
 80070b0:	f107 030c 	add.w	r3, r7, #12
 80070b4:	4925      	ldr	r1, [pc, #148]	@ (800714c <Cmd_status_now+0x150>)
 80070b6:	4618      	mov	r0, r3
 80070b8:	f00a f8e8 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, buffer);
 80070bc:	f107 030c 	add.w	r3, r7, #12
 80070c0:	4619      	mov	r1, r3
 80070c2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80070c4:	f7fa ff98 	bl	8001ff8 <Uart_sendstring>
    sprintf(buffer, "FirmwareVer: CPOC Firmware 1.2.0\r\n");
 80070c8:	f107 030c 	add.w	r3, r7, #12
 80070cc:	4920      	ldr	r1, [pc, #128]	@ (8007150 <Cmd_status_now+0x154>)
 80070ce:	4618      	mov	r0, r3
 80070d0:	f00a f8dc 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, buffer);
 80070d4:	f107 030c 	add.w	r3, r7, #12
 80070d8:	4619      	mov	r1, r3
 80070da:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80070dc:	f7fa ff8c 	bl	8001ff8 <Uart_sendstring>

    if (LL_GPIO_IsOutputPinSet(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin)) {
 80070e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80070e4:	481b      	ldr	r0, [pc, #108]	@ (8007154 <Cmd_status_now+0x158>)
 80070e6:	f7ff fc11 	bl	800690c <LL_GPIO_IsOutputPinSet>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00c      	beq.n	800710a <Cmd_status_now+0x10e>
        sprintf(buffer, "Enable: RF[OFF]\r\n");
 80070f0:	f107 030c 	add.w	r3, r7, #12
 80070f4:	4918      	ldr	r1, [pc, #96]	@ (8007158 <Cmd_status_now+0x15c>)
 80070f6:	4618      	mov	r0, r3
 80070f8:	f00a f8c8 	bl	801128c <siprintf>
        Uart_sendstring(USARTx, buffer);
 80070fc:	f107 030c 	add.w	r3, r7, #12
 8007100:	4619      	mov	r1, r3
 8007102:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007104:	f7fa ff78 	bl	8001ff8 <Uart_sendstring>
 8007108:	e00b      	b.n	8007122 <Cmd_status_now+0x126>
    } else {
        sprintf(buffer, "Enable: RF[ON]\r\n");
 800710a:	f107 030c 	add.w	r3, r7, #12
 800710e:	4913      	ldr	r1, [pc, #76]	@ (800715c <Cmd_status_now+0x160>)
 8007110:	4618      	mov	r0, r3
 8007112:	f00a f8bb 	bl	801128c <siprintf>
        Uart_sendstring(USARTx, buffer);
 8007116:	f107 030c 	add.w	r3, r7, #12
 800711a:	4619      	mov	r1, r3
 800711c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800711e:	f7fa ff6b 	bl	8001ff8 <Uart_sendstring>
    }

    sprintf(buffer, "MuxMode: Auto\r\n");
 8007122:	f107 030c 	add.w	r3, r7, #12
 8007126:	490e      	ldr	r1, [pc, #56]	@ (8007160 <Cmd_status_now+0x164>)
 8007128:	4618      	mov	r0, r3
 800712a:	f00a f8af 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, buffer);
 800712e:	f107 030c 	add.w	r3, r7, #12
 8007132:	4619      	mov	r1, r3
 8007134:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007136:	f7fa ff5f 	bl	8001ff8 <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3784      	adds	r7, #132	@ 0x84
 8007140:	46bd      	mov	sp, r7
 8007142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007144:	080157cc 	.word	0x080157cc
 8007148:	080157f0 	.word	0x080157f0
 800714c:	08015808 	.word	0x08015808
 8007150:	0801582c 	.word	0x0801582c
 8007154:	40020400 	.word	0x40020400
 8007158:	08015850 	.word	0x08015850
 800715c:	08015864 	.word	0x08015864
 8007160:	08015878 	.word	0x08015878

08007164 <Cmd_set_byte_rs422>:
//uint32_t RS422_PERIOD = 3000;

uint16_t ARRAY_SIZE = 282;

int Cmd_set_byte_rs422(int argc, char *argv[])
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b090      	sub	sp, #64	@ 0x40
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b02      	cmp	r3, #2
 8007172:	dc01      	bgt.n	8007178 <Cmd_set_byte_rs422+0x14>
 8007174:	2303      	movs	r3, #3
 8007176:	e03c      	b.n	80071f2 <Cmd_set_byte_rs422+0x8e>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b03      	cmp	r3, #3
 800717c:	dd01      	ble.n	8007182 <Cmd_set_byte_rs422+0x1e>
 800717e:	2302      	movs	r3, #2
 8007180:	e037      	b.n	80071f2 <Cmd_set_byte_rs422+0x8e>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007188:	3b01      	subs	r3, #1
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	4413      	add	r3, r2
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint16_t size = atoi(argv[1]);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	3304      	adds	r3, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f008 faa9 	bl	800f6f2 <atoi>
 80071a0:	4603      	mov	r3, r0
 80071a2:	877b      	strh	r3, [r7, #58]	@ 0x3a
    if (size <= 0) {
 80071a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <Cmd_set_byte_rs422+0x52>
        Uart_sendstring(USARTx,"\nPositive integer!!!\n");
 80071aa:	4914      	ldr	r1, [pc, #80]	@ (80071fc <Cmd_set_byte_rs422+0x98>)
 80071ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80071ae:	f7fa ff23 	bl	8001ff8 <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 80071b2:	2304      	movs	r3, #4
 80071b4:	e01d      	b.n	80071f2 <Cmd_set_byte_rs422+0x8e>
    }

    if ( size > 1000 || size < 150) {
 80071b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80071b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071bc:	d802      	bhi.n	80071c4 <Cmd_set_byte_rs422+0x60>
 80071be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80071c0:	2b95      	cmp	r3, #149	@ 0x95
 80071c2:	d805      	bhi.n	80071d0 <Cmd_set_byte_rs422+0x6c>
        Uart_sendstring(USARTx,"Array size > 150 or < 1000.\n");
 80071c4:	490e      	ldr	r1, [pc, #56]	@ (8007200 <Cmd_set_byte_rs422+0x9c>)
 80071c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80071c8:	f7fa ff16 	bl	8001ff8 <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 80071cc:	2304      	movs	r3, #4
 80071ce:	e010      	b.n	80071f2 <Cmd_set_byte_rs422+0x8e>
    }

    ARRAY_SIZE = size;
 80071d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007204 <Cmd_set_byte_rs422+0xa0>)
 80071d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80071d4:	8013      	strh	r3, [r2, #0]

    char msg[50];
    sprintf(msg, "\nArray size set to %d bytes.\n", size);
 80071d6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80071d8:	f107 0308 	add.w	r3, r7, #8
 80071dc:	490a      	ldr	r1, [pc, #40]	@ (8007208 <Cmd_set_byte_rs422+0xa4>)
 80071de:	4618      	mov	r0, r3
 80071e0:	f00a f854 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, msg);
 80071e4:	f107 0308 	add.w	r3, r7, #8
 80071e8:	4619      	mov	r1, r3
 80071ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80071ec:	f7fa ff04 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3740      	adds	r7, #64	@ 0x40
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	08015888 	.word	0x08015888
 8007200:	080158a0 	.word	0x080158a0
 8007204:	200004b8 	.word	0x200004b8
 8007208:	080158c0 	.word	0x080158c0

0800720c <Cmd_set_baudrate_rs422>:



int Cmd_set_baudrate_rs422(int argc, char *argv[])
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b096      	sub	sp, #88	@ 0x58
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b02      	cmp	r3, #2
 800721a:	dc01      	bgt.n	8007220 <Cmd_set_baudrate_rs422+0x14>
 800721c:	2303      	movs	r3, #3
 800721e:	e055      	b.n	80072cc <Cmd_set_baudrate_rs422+0xc0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b03      	cmp	r3, #3
 8007224:	dd01      	ble.n	800722a <Cmd_set_baudrate_rs422+0x1e>
 8007226:	2302      	movs	r3, #2
 8007228:	e050      	b.n	80072cc <Cmd_set_baudrate_rs422+0xc0>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007230:	3b01      	subs	r3, #1
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	4413      	add	r3, r2
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	657b      	str	r3, [r7, #84]	@ 0x54

//	{"set_baudrate_rs422", Cmd_set_baudrate_rs422, ": [9600|19200|38400|115200|230400|460800], Default 115200 | format: set_baudrate_rs422 <size>"},


    uint32_t baudrate = atoi(argv[1]);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	3304      	adds	r3, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4618      	mov	r0, r3
 8007244:	f008 fa55 	bl	800f6f2 <atoi>
 8007248:	4603      	mov	r3, r0
 800724a:	653b      	str	r3, [r7, #80]	@ 0x50

    if (baudrate != 9600 && baudrate != 19200 && baudrate != 38400 &&
 800724c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800724e:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8007252:	d019      	beq.n	8007288 <Cmd_set_baudrate_rs422+0x7c>
 8007254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007256:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 800725a:	d015      	beq.n	8007288 <Cmd_set_baudrate_rs422+0x7c>
 800725c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800725e:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8007262:	d011      	beq.n	8007288 <Cmd_set_baudrate_rs422+0x7c>
 8007264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007266:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800726a:	d00d      	beq.n	8007288 <Cmd_set_baudrate_rs422+0x7c>
        baudrate != 115200 && baudrate != 230400 && baudrate != 460800) {
 800726c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800726e:	f5b3 3f61 	cmp.w	r3, #230400	@ 0x38400
 8007272:	d009      	beq.n	8007288 <Cmd_set_baudrate_rs422+0x7c>
 8007274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007276:	f5b3 2fe1 	cmp.w	r3, #460800	@ 0x70800
 800727a:	d005      	beq.n	8007288 <Cmd_set_baudrate_rs422+0x7c>
        Uart_sendstring(USARTx, "\n Allowed Baudrates: [9600|19200|38400|115200|230400|460800]\n");
 800727c:	4915      	ldr	r1, [pc, #84]	@ (80072d4 <Cmd_set_baudrate_rs422+0xc8>)
 800727e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007280:	f7fa feba 	bl	8001ff8 <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 8007284:	2304      	movs	r3, #4
 8007286:	e021      	b.n	80072cc <Cmd_set_baudrate_rs422+0xc0>
    }

    // Disable UART5
    LL_USART_Disable(UART5);
 8007288:	4813      	ldr	r0, [pc, #76]	@ (80072d8 <Cmd_set_baudrate_rs422+0xcc>)
 800728a:	f7ff f901 	bl	8006490 <LL_USART_Disable>

    LL_RCC_ClocksTypeDef rcc_clocks;
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800728e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007292:	4618      	mov	r0, r3
 8007294:	f004 fd80 	bl	800bd98 <LL_RCC_GetSystemClocksFreq>
    // Configure baudrate
    LL_USART_SetBaudRate(UART5, rcc_clocks.PCLK1_Frequency, LL_USART_OVERSAMPLING_16, baudrate);
 8007298:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800729a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800729c:	2200      	movs	r2, #0
 800729e:	480e      	ldr	r0, [pc, #56]	@ (80072d8 <Cmd_set_baudrate_rs422+0xcc>)
 80072a0:	f7ff f906 	bl	80064b0 <LL_USART_SetBaudRate>

    // Enable UART5
    LL_USART_Enable(UART5);
 80072a4:	480c      	ldr	r0, [pc, #48]	@ (80072d8 <Cmd_set_baudrate_rs422+0xcc>)
 80072a6:	f7ff f8e3 	bl	8006470 <LL_USART_Enable>

	Uart_flush(UART5);
 80072aa:	480b      	ldr	r0, [pc, #44]	@ (80072d8 <Cmd_set_baudrate_rs422+0xcc>)
 80072ac:	f7fa febc 	bl	8002028 <Uart_flush>

    char msg[50];
    sprintf(msg, "\nRS422 Baudrate set to  %ld.\n", baudrate);
 80072b0:	f107 030c 	add.w	r3, r7, #12
 80072b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072b6:	4909      	ldr	r1, [pc, #36]	@ (80072dc <Cmd_set_baudrate_rs422+0xd0>)
 80072b8:	4618      	mov	r0, r3
 80072ba:	f009 ffe7 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, msg);
 80072be:	f107 030c 	add.w	r3, r7, #12
 80072c2:	4619      	mov	r1, r3
 80072c4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80072c6:	f7fa fe97 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3758      	adds	r7, #88	@ 0x58
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	080158e0 	.word	0x080158e0
 80072d8:	40005000 	.word	0x40005000
 80072dc:	08015920 	.word	0x08015920

080072e0 <Cmd_set_fre_rs422>:


int Cmd_set_fre_rs422(int argc, char *argv[])
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b090      	sub	sp, #64	@ 0x40
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	dc01      	bgt.n	80072f4 <Cmd_set_fre_rs422+0x14>
 80072f0:	2303      	movs	r3, #3
 80072f2:	e083      	b.n	80073fc <Cmd_set_fre_rs422+0x11c>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	dd01      	ble.n	80072fe <Cmd_set_fre_rs422+0x1e>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e07e      	b.n	80073fc <Cmd_set_fre_rs422+0x11c>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007304:	3b01      	subs	r3, #1
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	4413      	add	r3, r2
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	63fb      	str	r3, [r7, #60]	@ 0x3c

//	{"set_baudrate_rs422", Cmd_set_baudrate_rs422, ": [9600|19200|38400|115200|230400|460800], Default 115200 | format: set_baudrate_rs422 <size>"},


    uint8_t fre = atoi(argv[1]);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	3304      	adds	r3, #4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f008 f9eb 	bl	800f6f2 <atoi>
 800731c:	4603      	mov	r3, r0
 800731e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    switch (fre) {
 8007322:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007326:	2b0c      	cmp	r3, #12
 8007328:	d854      	bhi.n	80073d4 <Cmd_set_fre_rs422+0xf4>
 800732a:	a201      	add	r2, pc, #4	@ (adr r2, 8007330 <Cmd_set_fre_rs422+0x50>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007365 	.word	0x08007365
 8007334:	0800736f 	.word	0x0800736f
 8007338:	08007379 	.word	0x08007379
 800733c:	08007383 	.word	0x08007383
 8007340:	0800738d 	.word	0x0800738d
 8007344:	08007395 	.word	0x08007395
 8007348:	0800739d 	.word	0x0800739d
 800734c:	080073a5 	.word	0x080073a5
 8007350:	080073ad 	.word	0x080073ad
 8007354:	080073b5 	.word	0x080073b5
 8007358:	080073bd 	.word	0x080073bd
 800735c:	080073c5 	.word	0x080073c5
 8007360:	080073cd 	.word	0x080073cd
        case 0:
        	rs422_set_task_period(2000);
 8007364:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007368:	f000 fc20 	bl	8007bac <rs422_set_task_period>
            break;
 800736c:	e034      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 1:
        	rs422_set_task_period(1000);
 800736e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007372:	f000 fc1b 	bl	8007bac <rs422_set_task_period>
            break;
 8007376:	e02f      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 2:
        	rs422_set_task_period(500);
 8007378:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800737c:	f000 fc16 	bl	8007bac <rs422_set_task_period>
            break;
 8007380:	e02a      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 3:
        	rs422_set_task_period(333);
 8007382:	f240 104d 	movw	r0, #333	@ 0x14d
 8007386:	f000 fc11 	bl	8007bac <rs422_set_task_period>
            break;
 800738a:	e025      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 4:
        	rs422_set_task_period(250);
 800738c:	20fa      	movs	r0, #250	@ 0xfa
 800738e:	f000 fc0d 	bl	8007bac <rs422_set_task_period>
            break;
 8007392:	e021      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 5:
        	rs422_set_task_period(200);
 8007394:	20c8      	movs	r0, #200	@ 0xc8
 8007396:	f000 fc09 	bl	8007bac <rs422_set_task_period>
            break;
 800739a:	e01d      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 6:
        	rs422_set_task_period(167);
 800739c:	20a7      	movs	r0, #167	@ 0xa7
 800739e:	f000 fc05 	bl	8007bac <rs422_set_task_period>
            break;
 80073a2:	e019      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 7:
        	rs422_set_task_period(143);
 80073a4:	208f      	movs	r0, #143	@ 0x8f
 80073a6:	f000 fc01 	bl	8007bac <rs422_set_task_period>
            break;
 80073aa:	e015      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 8:
        	rs422_set_task_period(125);
 80073ac:	207d      	movs	r0, #125	@ 0x7d
 80073ae:	f000 fbfd 	bl	8007bac <rs422_set_task_period>
            break;
 80073b2:	e011      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 9:
        	rs422_set_task_period(111);
 80073b4:	206f      	movs	r0, #111	@ 0x6f
 80073b6:	f000 fbf9 	bl	8007bac <rs422_set_task_period>
            break;
 80073ba:	e00d      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 10:
        	rs422_set_task_period(100);
 80073bc:	2064      	movs	r0, #100	@ 0x64
 80073be:	f000 fbf5 	bl	8007bac <rs422_set_task_period>
            break;
 80073c2:	e009      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 11:
        	rs422_set_task_period(91);
 80073c4:	205b      	movs	r0, #91	@ 0x5b
 80073c6:	f000 fbf1 	bl	8007bac <rs422_set_task_period>
            break;
 80073ca:	e005      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        case 12:
        	rs422_set_task_period(83);
 80073cc:	2053      	movs	r0, #83	@ 0x53
 80073ce:	f000 fbed 	bl	8007bac <rs422_set_task_period>
            break;
 80073d2:	e001      	b.n	80073d8 <Cmd_set_fre_rs422+0xf8>
        default:
        	return CMDLINE_INVALID_ARG;
 80073d4:	2304      	movs	r3, #4
 80073d6:	e011      	b.n	80073fc <Cmd_set_fre_rs422+0x11c>
            break;
    }


	Uart_flush(USART1);
 80073d8:	480a      	ldr	r0, [pc, #40]	@ (8007404 <Cmd_set_fre_rs422+0x124>)
 80073da:	f7fa fe25 	bl	8002028 <Uart_flush>

    char msg[50];
    sprintf(msg, "\nRS422 Packet per second set to %d.\n", fre);
 80073de:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80073e2:	f107 0308 	add.w	r3, r7, #8
 80073e6:	4908      	ldr	r1, [pc, #32]	@ (8007408 <Cmd_set_fre_rs422+0x128>)
 80073e8:	4618      	mov	r0, r3
 80073ea:	f009 ff4f 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, msg);
 80073ee:	f107 0308 	add.w	r3, r7, #8
 80073f2:	4619      	mov	r1, r3
 80073f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80073f6:	f7fa fdff 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3740      	adds	r7, #64	@ 0x40
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	40011000 	.word	0x40011000
 8007408:	08015940 	.word	0x08015940

0800740c <Cmd_auto_report_ena>:


int Cmd_auto_report_ena(int argc, char *argv[])
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b01      	cmp	r3, #1
 800741a:	dc01      	bgt.n	8007420 <Cmd_auto_report_ena+0x14>
 800741c:	2303      	movs	r3, #3
 800741e:	e015      	b.n	800744c <Cmd_auto_report_ena+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b02      	cmp	r3, #2
 8007424:	dd01      	ble.n	800742a <Cmd_auto_report_ena+0x1e>
 8007426:	2302      	movs	r3, #2
 8007428:	e010      	b.n	800744c <Cmd_auto_report_ena+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007430:	3b01      	subs	r3, #1
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	4413      	add	r3, r2
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]


    auto_report_enabled = 1;
 800743c:	4b05      	ldr	r3, [pc, #20]	@ (8007454 <Cmd_auto_report_ena+0x48>)
 800743e:	2201      	movs	r2, #1
 8007440:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nAuto report mirror from RS422 Packet, [ESC] to Stop\n");
 8007442:	4905      	ldr	r1, [pc, #20]	@ (8007458 <Cmd_auto_report_ena+0x4c>)
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7fa fdd7 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20007abc 	.word	0x20007abc
 8007458:	08015968 	.word	0x08015968

0800745c <Cmd_rs422_report_ena>:



int Cmd_rs422_report_ena(int argc, char *argv[])
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b090      	sub	sp, #64	@ 0x40
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b01      	cmp	r3, #1
 800746a:	dc01      	bgt.n	8007470 <Cmd_rs422_report_ena+0x14>
 800746c:	2303      	movs	r3, #3
 800746e:	e020      	b.n	80074b2 <Cmd_rs422_report_ena+0x56>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b02      	cmp	r3, #2
 8007474:	dd01      	ble.n	800747a <Cmd_rs422_report_ena+0x1e>
 8007476:	2302      	movs	r3, #2
 8007478:	e01b      	b.n	80074b2 <Cmd_rs422_report_ena+0x56>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007480:	3b01      	subs	r3, #1
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	4413      	add	r3, r2
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    rs422_report_enable = 1;
 800748c:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <Cmd_rs422_report_ena+0x60>)
 800748e:	2201      	movs	r2, #1
 8007490:	701a      	strb	r2, [r3, #0]
 // Convert seconds to milliseconds
    Uart_flush(USART1);
 8007492:	480b      	ldr	r0, [pc, #44]	@ (80074c0 <Cmd_rs422_report_ena+0x64>)
 8007494:	f7fa fdc8 	bl	8002028 <Uart_flush>

    char msg[50];
    sprintf(msg, "\nAuto report RS422, [ESC] to Stop\n");
 8007498:	f107 0308 	add.w	r3, r7, #8
 800749c:	4909      	ldr	r1, [pc, #36]	@ (80074c4 <Cmd_rs422_report_ena+0x68>)
 800749e:	4618      	mov	r0, r3
 80074a0:	f009 fef4 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, msg);
 80074a4:	f107 0308 	add.w	r3, r7, #8
 80074a8:	4619      	mov	r1, r3
 80074aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80074ac:	f7fa fda4 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3740      	adds	r7, #64	@ 0x40
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20007abd 	.word	0x20007abd
 80074c0:	40011000 	.word	0x40011000
 80074c4:	080159a0 	.word	0x080159a0

080074c8 <Cmd_rf_report_ena>:

volatile uint8_t rf_report_enable = 0;
int Cmd_rf_report_ena(int argc, char *argv[])
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b090      	sub	sp, #64	@ 0x40
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	dc01      	bgt.n	80074dc <Cmd_rf_report_ena+0x14>
 80074d8:	2303      	movs	r3, #3
 80074da:	e01d      	b.n	8007518 <Cmd_rf_report_ena+0x50>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	dd01      	ble.n	80074e6 <Cmd_rf_report_ena+0x1e>
 80074e2:	2302      	movs	r3, #2
 80074e4:	e018      	b.n	8007518 <Cmd_rf_report_ena+0x50>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074ec:	3b01      	subs	r3, #1
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	4413      	add	r3, r2
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    rf_report_enable = 1;
 80074f8:	4b09      	ldr	r3, [pc, #36]	@ (8007520 <Cmd_rf_report_ena+0x58>)
 80074fa:	2201      	movs	r2, #1
 80074fc:	701a      	strb	r2, [r3, #0]
 // Convert seconds to milliseconds

    char msg[50];
    sprintf(msg, "\nAuto report RF, [ESC] to Stop\n");
 80074fe:	f107 0308 	add.w	r3, r7, #8
 8007502:	4908      	ldr	r1, [pc, #32]	@ (8007524 <Cmd_rf_report_ena+0x5c>)
 8007504:	4618      	mov	r0, r3
 8007506:	f009 fec1 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, msg);
 800750a:	f107 0308 	add.w	r3, r7, #8
 800750e:	4619      	mov	r1, r3
 8007510:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007512:	f7fa fd71 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3740      	adds	r7, #64	@ 0x40
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20007abe 	.word	0x20007abe
 8007524:	080159c4 	.word	0x080159c4

08007528 <Cmd_swap_byte_ena>:


volatile uint8_t swap_byte_enable = 0;

int Cmd_swap_byte_ena(int argc, char *argv[])
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b01      	cmp	r3, #1
 8007536:	dc01      	bgt.n	800753c <Cmd_swap_byte_ena+0x14>
 8007538:	2303      	movs	r3, #3
 800753a:	e015      	b.n	8007568 <Cmd_swap_byte_ena+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b02      	cmp	r3, #2
 8007540:	dd01      	ble.n	8007546 <Cmd_swap_byte_ena+0x1e>
 8007542:	2302      	movs	r3, #2
 8007544:	e010      	b.n	8007568 <Cmd_swap_byte_ena+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800754c:	3b01      	subs	r3, #1
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	4413      	add	r3, r2
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]


    swap_byte_enable = 1;
 8007558:	4b05      	ldr	r3, [pc, #20]	@ (8007570 <Cmd_swap_byte_ena+0x48>)
 800755a:	2201      	movs	r2, #1
 800755c:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nEnabled swap byte RS422, NOT INCLUDE STX-ETX, 0x02->0xFE, 0x03->0xFD \n");
 800755e:	4905      	ldr	r1, [pc, #20]	@ (8007574 <Cmd_swap_byte_ena+0x4c>)
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7fa fd49 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20007abf 	.word	0x20007abf
 8007574:	080159e4 	.word	0x080159e4

08007578 <Cmd_swap_byte_dis>:

int Cmd_swap_byte_dis(int argc, char *argv[])
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b01      	cmp	r3, #1
 8007586:	dc01      	bgt.n	800758c <Cmd_swap_byte_dis+0x14>
 8007588:	2303      	movs	r3, #3
 800758a:	e015      	b.n	80075b8 <Cmd_swap_byte_dis+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b02      	cmp	r3, #2
 8007590:	dd01      	ble.n	8007596 <Cmd_swap_byte_dis+0x1e>
 8007592:	2302      	movs	r3, #2
 8007594:	e010      	b.n	80075b8 <Cmd_swap_byte_dis+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800759c:	3b01      	subs	r3, #1
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	4413      	add	r3, r2
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]


    swap_byte_enable = 0;
 80075a8:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <Cmd_swap_byte_dis+0x48>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nDISABLE!!!\n");
 80075ae:	4905      	ldr	r1, [pc, #20]	@ (80075c4 <Cmd_swap_byte_dis+0x4c>)
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7fa fd21 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20007abf 	.word	0x20007abf
 80075c4:	08015a2c 	.word	0x08015a2c

080075c8 <Cmd_memory_usage>:





int Cmd_memory_usage(int argc, char *argv[]) {
 80075c8:	b5b0      	push	{r4, r5, r7, lr}
 80075ca:	b0a6      	sub	sp, #152	@ 0x98
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	4674      	mov	r4, lr
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075da:	3b01      	subs	r3, #1
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	4413      	add	r3, r2
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    // STM32F405RGT7 có 192KB SRAM [[5]]
    uint32_t totalRAM = 192 * 1024;
 80075e8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80075ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80075f0:	f3ef 8308 	mrs	r3, MSP
 80075f4:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 80075f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    uint32_t usedRAM = SRAM1_BASE + totalRAM - __get_MSP();
 80075f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007602:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    float ramUsage = (float)usedRAM / totalRAM * 100;
 8007606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007612:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800761e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007622:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80076a0 <Cmd_memory_usage+0xd8>
 8007626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800762a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

    // STM32F405RGT7 có 1MB Flash [[1]] [[4]]
    uint32_t totalFlash = 1 * 1024 * 1024;
 800762e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007632:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t usedFlash = (uint32_t)__builtin_return_address(0) - FLASH_BASE;
 8007634:	4623      	mov	r3, r4
 8007636:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800763a:	67bb      	str	r3, [r7, #120]	@ 0x78
    float flashUsage = (float)usedFlash / totalFlash * 100;
 800763c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007646:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007648:	ee07 3a90 	vmov	s15, r3
 800764c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007654:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80076a0 <Cmd_memory_usage+0xd8>
 8007658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800765c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74


    char buffer[100];
    sprintf(buffer, "\nRAM: %.2f%% used\r\nFlash: %.2f%% used\r\n", ramUsage, flashUsage);
 8007660:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8007664:	f7f8 ff80 	bl	8000568 <__aeabi_f2d>
 8007668:	4604      	mov	r4, r0
 800766a:	460d      	mov	r5, r1
 800766c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800766e:	f7f8 ff7b 	bl	8000568 <__aeabi_f2d>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	f107 000c 	add.w	r0, r7, #12
 800767a:	e9cd 2300 	strd	r2, r3, [sp]
 800767e:	4622      	mov	r2, r4
 8007680:	462b      	mov	r3, r5
 8007682:	4908      	ldr	r1, [pc, #32]	@ (80076a4 <Cmd_memory_usage+0xdc>)
 8007684:	f009 fe02 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007688:	f107 030c 	add.w	r3, r7, #12
 800768c:	4619      	mov	r1, r3
 800768e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8007692:	f7fa fcb1 	bl	8001ff8 <Uart_sendstring>

    return CMDLINE_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3790      	adds	r7, #144	@ 0x90
 800769c:	46bd      	mov	sp, r7
 800769e:	bdb0      	pop	{r4, r5, r7, pc}
 80076a0:	42c80000 	.word	0x42c80000
 80076a4:	08015a3c 	.word	0x08015a3c

080076a8 <Cmd_time_get>:


int Cmd_time_get(int argc, char *argv[]){
 80076a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076aa:	b0a3      	sub	sp, #140	@ 0x8c
 80076ac:	af04      	add	r7, sp, #16
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    char buffer[100];
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076b8:	3b01      	subs	r3, #1
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	4413      	add	r3, r2
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	677b      	str	r3, [r7, #116]	@ 0x74
    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 80076c4:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80076c8:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 80076cc:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 80076d0:	f107 0073 	add.w	r0, r7, #115	@ 0x73
 80076d4:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 80076d8:	9302      	str	r3, [sp, #8]
 80076da:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	f107 036f 	add.w	r3, r7, #111	@ 0x6f
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	4623      	mov	r3, r4
 80076e8:	f7f9 febc 	bl	8001464 <DS3231_GetDateTime>
    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 80076ec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80076f0:	461d      	mov	r5, r3
 80076f2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80076f6:	461e      	mov	r6, r3
 80076f8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80076fc:	461a      	mov	r2, r3
 80076fe:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8007702:	4619      	mov	r1, r3
 8007704:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007708:	461c      	mov	r4, r3
 800770a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800770e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8007712:	f107 0008 	add.w	r0, r7, #8
 8007716:	9303      	str	r3, [sp, #12]
 8007718:	9402      	str	r4, [sp, #8]
 800771a:	9101      	str	r1, [sp, #4]
 800771c:	9200      	str	r2, [sp, #0]
 800771e:	4633      	mov	r3, r6
 8007720:	462a      	mov	r2, r5
 8007722:	4907      	ldr	r1, [pc, #28]	@ (8007740 <Cmd_time_get+0x98>)
 8007724:	f009 fdb2 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007728:	f107 0308 	add.w	r3, r7, #8
 800772c:	4619      	mov	r1, r3
 800772e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007730:	f7fa fc62 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	377c      	adds	r7, #124	@ 0x7c
 800773a:	46bd      	mov	sp, r7
 800773c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773e:	bf00      	nop
 8007740:	080157cc 	.word	0x080157cc

08007744 <Cmd_time_set>:

int Cmd_time_set(int argc, char *argv[]){
 8007744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007746:	b0a3      	sub	sp, #140	@ 0x8c
 8007748:	af04      	add	r7, sp, #16
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 7) return CMDLINE_TOO_FEW_ARGS;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b07      	cmp	r3, #7
 8007752:	dc01      	bgt.n	8007758 <Cmd_time_set+0x14>
 8007754:	2303      	movs	r3, #3
 8007756:	e091      	b.n	800787c <Cmd_time_set+0x138>
    if ((argc-1) > 7) return CMDLINE_TOO_MANY_ARGS;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b08      	cmp	r3, #8
 800775c:	dd01      	ble.n	8007762 <Cmd_time_set+0x1e>
 800775e:	2302      	movs	r3, #2
 8007760:	e08c      	b.n	800787c <Cmd_time_set+0x138>
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007768:	3b01      	subs	r3, #1
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	4413      	add	r3, r2
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	677b      	str	r3, [r7, #116]	@ 0x74
    uint8_t hour = atoi(argv[1]);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	3304      	adds	r3, #4
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f007 ffb9 	bl	800f6f2 <atoi>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    uint8_t min = atoi(argv[2]);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	3308      	adds	r3, #8
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4618      	mov	r0, r3
 800778e:	f007 ffb0 	bl	800f6f2 <atoi>
 8007792:	4603      	mov	r3, r0
 8007794:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    uint8_t sec = atoi(argv[3]);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f007 ffa7 	bl	800f6f2 <atoi>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
    uint8_t date = atoi(argv[4]);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	3310      	adds	r3, #16
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f007 ff9e 	bl	800f6f2 <atoi>
 80077b6:	4603      	mov	r3, r0
 80077b8:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
    uint8_t month = atoi(argv[5]);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	3314      	adds	r3, #20
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f007 ff95 	bl	800f6f2 <atoi>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t year = atoi(argv[6]);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	3318      	adds	r3, #24
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f007 ff8c 	bl	800f6f2 <atoi>
 80077da:	4603      	mov	r3, r0
 80077dc:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

    if (hour > 23 || min > 59 || sec > 59 || date > 31 || month > 12 || year > 99)
 80077e0:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80077e4:	2b17      	cmp	r3, #23
 80077e6:	d813      	bhi.n	8007810 <Cmd_time_set+0xcc>
 80077e8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80077ec:	2b3b      	cmp	r3, #59	@ 0x3b
 80077ee:	d80f      	bhi.n	8007810 <Cmd_time_set+0xcc>
 80077f0:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80077f4:	2b3b      	cmp	r3, #59	@ 0x3b
 80077f6:	d80b      	bhi.n	8007810 <Cmd_time_set+0xcc>
 80077f8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80077fc:	2b1f      	cmp	r3, #31
 80077fe:	d807      	bhi.n	8007810 <Cmd_time_set+0xcc>
 8007800:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007804:	2b0c      	cmp	r3, #12
 8007806:	d803      	bhi.n	8007810 <Cmd_time_set+0xcc>
 8007808:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800780c:	2b63      	cmp	r3, #99	@ 0x63
 800780e:	d901      	bls.n	8007814 <Cmd_time_set+0xd0>
        return CMDLINE_INVALID_ARG;
 8007810:	2304      	movs	r3, #4
 8007812:	e033      	b.n	800787c <Cmd_time_set+0x138>

    DS3231_SetDateTime(1, date, month, year, hour, min, sec);
 8007814:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 8007818:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800781c:	f897 1070 	ldrb.w	r1, [r7, #112]	@ 0x70
 8007820:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007824:	9302      	str	r3, [sp, #8]
 8007826:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	4603      	mov	r3, r0
 8007834:	2001      	movs	r0, #1
 8007836:	f7f9 fd57 	bl	80012e8 <DS3231_SetDateTime>

    char buffer[100];
    sprintf(buffer, "\nTime set to: %02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 800783a:	f897 5073 	ldrb.w	r5, [r7, #115]	@ 0x73
 800783e:	f897 6072 	ldrb.w	r6, [r7, #114]	@ 0x72
 8007842:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007846:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 800784a:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800784e:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 8007852:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8007856:	f107 0408 	add.w	r4, r7, #8
 800785a:	9003      	str	r0, [sp, #12]
 800785c:	9102      	str	r1, [sp, #8]
 800785e:	9201      	str	r2, [sp, #4]
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	4633      	mov	r3, r6
 8007864:	462a      	mov	r2, r5
 8007866:	4907      	ldr	r1, [pc, #28]	@ (8007884 <Cmd_time_set+0x140>)
 8007868:	4620      	mov	r0, r4
 800786a:	f009 fd0f 	bl	801128c <siprintf>
    Uart_sendstring(USARTx, buffer);
 800786e:	f107 0308 	add.w	r3, r7, #8
 8007872:	4619      	mov	r1, r3
 8007874:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007876:	f7fa fbbf 	bl	8001ff8 <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	377c      	adds	r7, #124	@ 0x7c
 8007880:	46bd      	mov	sp, r7
 8007882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007884:	08015a64 	.word	0x08015a64

08007888 <Cmd_cpoc_reset>:

int Cmd_cpoc_reset(int argc, char *argv[]){
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 8007892:	f7fe fdd7 	bl	8006444 <__NVIC_SystemReset>
	...

08007898 <Cmd_rf_ena>:
//	Cmd_pmu_board_alive();
//	Cmd_pmu_board_alive();
//
//}

int Cmd_rf_ena(int argc, char *argv[]){
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078a8:	3b01      	subs	r3, #1
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	4413      	add	r3, r2
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]
	LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 80078b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80078b8:	4807      	ldr	r0, [pc, #28]	@ (80078d8 <Cmd_rf_ena+0x40>)
 80078ba:	f7ff f84a 	bl	8006952 <LL_GPIO_ResetOutputPin>
	 Uart_sendstring(USARTx, "\nRF Set to Enable\r\n");
 80078be:	4907      	ldr	r1, [pc, #28]	@ (80078dc <Cmd_rf_ena+0x44>)
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7fa fb99 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	Uart_sendstring(USART2, "B");
 80078c6:	4906      	ldr	r1, [pc, #24]	@ (80078e0 <Cmd_rf_ena+0x48>)
 80078c8:	4806      	ldr	r0, [pc, #24]	@ (80078e4 <Cmd_rf_ena+0x4c>)
 80078ca:	f7fa fb95 	bl	8001ff8 <Uart_sendstring>
	return (CMDLINE_OK);
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	40020400 	.word	0x40020400
 80078dc:	08015a94 	.word	0x08015a94
 80078e0:	080155e8 	.word	0x080155e8
 80078e4:	40004400 	.word	0x40004400

080078e8 <Cmd_rf_dis>:

int Cmd_rf_dis(int argc, char *argv[]){
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078f8:	3b01      	subs	r3, #1
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	4413      	add	r3, r2
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60fb      	str	r3, [r7, #12]
	LL_GPIO_SetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8007904:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007908:	4805      	ldr	r0, [pc, #20]	@ (8007920 <Cmd_rf_dis+0x38>)
 800790a:	f7ff f814 	bl	8006936 <LL_GPIO_SetOutputPin>
	Uart_sendstring(USARTx, "\nRF Disable\r\n");
 800790e:	4905      	ldr	r1, [pc, #20]	@ (8007924 <Cmd_rf_dis+0x3c>)
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f7fa fb71 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40020400 	.word	0x40020400
 8007924:	08015aa8 	.word	0x08015aa8

08007928 <Cmd_start_positioining>:

volatile uint8_t gps_report_enable = 0;
int Cmd_start_positioining (int argc, char *argv[]){
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007938:	3b01      	subs	r3, #1
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	4413      	add	r3, r2
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]
	gps_report_enable = 1;
 8007944:	4b07      	ldr	r3, [pc, #28]	@ (8007964 <Cmd_start_positioining+0x3c>)
 8007946:	2201      	movs	r2, #1
 8007948:	701a      	strb	r2, [r3, #0]
	Uart_flush(USART3);
 800794a:	4807      	ldr	r0, [pc, #28]	@ (8007968 <Cmd_start_positioining+0x40>)
 800794c:	f7fa fb6c 	bl	8002028 <Uart_flush>
	Uart_sendstring(USARTx, "\nStart reporting position to RF, [ESC] to Stop\r\n");
 8007950:	4906      	ldr	r1, [pc, #24]	@ (800796c <Cmd_start_positioining+0x44>)
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f7fa fb50 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20007ac0 	.word	0x20007ac0
 8007968:	40004800 	.word	0x40004800
 800796c:	08015ab8 	.word	0x08015ab8

08007970 <Cmd_format_gps>:

volatile uint8_t format_gps = 0;
int Cmd_format_gps (int argc, char *argv[]){
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]

    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b02      	cmp	r3, #2
 800797e:	dc01      	bgt.n	8007984 <Cmd_format_gps+0x14>
 8007980:	2303      	movs	r3, #3
 8007982:	e033      	b.n	80079ec <Cmd_format_gps+0x7c>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b03      	cmp	r3, #3
 8007988:	dd01      	ble.n	800798e <Cmd_format_gps+0x1e>
 800798a:	2302      	movs	r3, #2
 800798c:	e02e      	b.n	80079ec <Cmd_format_gps+0x7c>


	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007994:	3b01      	subs	r3, #1
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	4413      	add	r3, r2
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60fb      	str	r3, [r7, #12]

    uint8_t format = atoi(argv[1]);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	3304      	adds	r3, #4
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f007 fea3 	bl	800f6f2 <atoi>
 80079ac:	4603      	mov	r3, r0
 80079ae:	72fb      	strb	r3, [r7, #11]
    if (format > 1)   return CMDLINE_INVALID_ARG;
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d901      	bls.n	80079ba <Cmd_format_gps+0x4a>
 80079b6:	2304      	movs	r3, #4
 80079b8:	e018      	b.n	80079ec <Cmd_format_gps+0x7c>

    if(format){
 80079ba:	7afb      	ldrb	r3, [r7, #11]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <Cmd_format_gps+0x66>
    	format_gps = 1;
 80079c0:	4b0c      	ldr	r3, [pc, #48]	@ (80079f4 <Cmd_format_gps+0x84>)
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
    	Uart_flush(USART3);
 80079c6:	480c      	ldr	r0, [pc, #48]	@ (80079f8 <Cmd_format_gps+0x88>)
 80079c8:	f7fa fb2e 	bl	8002028 <Uart_flush>
    	Uart_sendstring(USARTx, "\nGPS Formated\r\n");
 80079cc:	490b      	ldr	r1, [pc, #44]	@ (80079fc <Cmd_format_gps+0x8c>)
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f7fa fb12 	bl	8001ff8 <Uart_sendstring>
 80079d4:	e009      	b.n	80079ea <Cmd_format_gps+0x7a>
    }else{
    	format_gps = 0;
 80079d6:	4b07      	ldr	r3, [pc, #28]	@ (80079f4 <Cmd_format_gps+0x84>)
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
    	Uart_flush(USART3);
 80079dc:	4806      	ldr	r0, [pc, #24]	@ (80079f8 <Cmd_format_gps+0x88>)
 80079de:	f7fa fb23 	bl	8002028 <Uart_flush>
    	Uart_sendstring(USARTx, "\nStop Formating\r\n");
 80079e2:	4907      	ldr	r1, [pc, #28]	@ (8007a00 <Cmd_format_gps+0x90>)
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f7fa fb07 	bl	8001ff8 <Uart_sendstring>
    }


	// Return success.
	return (CMDLINE_OK);
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20007ac1 	.word	0x20007ac1
 80079f8:	40004800 	.word	0x40004800
 80079fc:	08015aec 	.word	0x08015aec
 8007a00:	08015afc 	.word	0x08015afc

08007a04 <command_create_task>:



void	command_create_task(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8007a08:	4902      	ldr	r1, [pc, #8]	@ (8007a14 <command_create_task+0x10>)
 8007a0a:	4803      	ldr	r0, [pc, #12]	@ (8007a18 <command_create_task+0x14>)
 8007a0c:	f004 fe04 	bl	800c618 <SCH_TASK_CreateTask>
}
 8007a10:	bf00      	nop
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	200004a8 	.word	0x200004a8
 8007a18:	200004a4 	.word	0x200004a4

08007a1c <command_send_splash>:

void	command_send_splash(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
	Uart_sendstring(UART4, "------------------------------------------------\r\n");
 8007a20:	4938      	ldr	r1, [pc, #224]	@ (8007b04 <command_send_splash+0xe8>)
 8007a22:	4839      	ldr	r0, [pc, #228]	@ (8007b08 <command_send_splash+0xec>)
 8007a24:	f7fa fae8 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--        ____                                --\r\n");
 8007a28:	4938      	ldr	r1, [pc, #224]	@ (8007b0c <command_send_splash+0xf0>)
 8007a2a:	4837      	ldr	r0, [pc, #220]	@ (8007b08 <command_send_splash+0xec>)
 8007a2c:	f7fa fae4 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--       / ___| _ __   __ _  ___ ___          --\r\n");
 8007a30:	4937      	ldr	r1, [pc, #220]	@ (8007b10 <command_send_splash+0xf4>)
 8007a32:	4835      	ldr	r0, [pc, #212]	@ (8007b08 <command_send_splash+0xec>)
 8007a34:	f7fa fae0 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--       \\___ \\| '_ \\ / _` |/ __/ _ \\         --  \r\n");
 8007a38:	4936      	ldr	r1, [pc, #216]	@ (8007b14 <command_send_splash+0xf8>)
 8007a3a:	4833      	ldr	r0, [pc, #204]	@ (8007b08 <command_send_splash+0xec>)
 8007a3c:	f7fa fadc 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--        ___) | |_) | (_| | (_|  __/         --\r\n");
 8007a40:	4935      	ldr	r1, [pc, #212]	@ (8007b18 <command_send_splash+0xfc>)
 8007a42:	4831      	ldr	r0, [pc, #196]	@ (8007b08 <command_send_splash+0xec>)
 8007a44:	f7fa fad8 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--       |____/| -__/ \\__,_|\\___\\___|         --  \r\n");
 8007a48:	4934      	ldr	r1, [pc, #208]	@ (8007b1c <command_send_splash+0x100>)
 8007a4a:	482f      	ldr	r0, [pc, #188]	@ (8007b08 <command_send_splash+0xec>)
 8007a4c:	f7fa fad4 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--             |_|                            --\r\n");
 8007a50:	4933      	ldr	r1, [pc, #204]	@ (8007b20 <command_send_splash+0x104>)
 8007a52:	482d      	ldr	r0, [pc, #180]	@ (8007b08 <command_send_splash+0xec>)
 8007a54:	f7fa fad0 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--     _     _ _     _____         _          --\r\n");
 8007a58:	4932      	ldr	r1, [pc, #200]	@ (8007b24 <command_send_splash+0x108>)
 8007a5a:	482b      	ldr	r0, [pc, #172]	@ (8007b08 <command_send_splash+0xec>)
 8007a5c:	f7fa facc 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--    | |   (_|_)_ _|_   _|__  ___| |__       --\r\n");
 8007a60:	4931      	ldr	r1, [pc, #196]	@ (8007b28 <command_send_splash+0x10c>)
 8007a62:	4829      	ldr	r0, [pc, #164]	@ (8007b08 <command_send_splash+0xec>)
 8007a64:	f7fa fac8 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--    | |   | | | '_ \\| |/ _ \\/ __| '_ \\      --\r\n");
 8007a68:	4930      	ldr	r1, [pc, #192]	@ (8007b2c <command_send_splash+0x110>)
 8007a6a:	4827      	ldr	r0, [pc, #156]	@ (8007b08 <command_send_splash+0xec>)
 8007a6c:	f7fa fac4 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--    | |___| | | | | | |  __/ (__| | | |     --\r\n");
 8007a70:	492f      	ldr	r1, [pc, #188]	@ (8007b30 <command_send_splash+0x114>)
 8007a72:	4825      	ldr	r0, [pc, #148]	@ (8007b08 <command_send_splash+0xec>)
 8007a74:	f7fa fac0 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--    |_____|_|_|_| |_|_|\\___|\\___| |_|_|     --\r\n");
 8007a78:	492e      	ldr	r1, [pc, #184]	@ (8007b34 <command_send_splash+0x118>)
 8007a7a:	4823      	ldr	r0, [pc, #140]	@ (8007b08 <command_send_splash+0xec>)
 8007a7c:	f7fa fabc 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "------------------------------------------------\r\n");
 8007a80:	4920      	ldr	r1, [pc, #128]	@ (8007b04 <command_send_splash+0xe8>)
 8007a82:	4821      	ldr	r0, [pc, #132]	@ (8007b08 <command_send_splash+0xec>)
 8007a84:	f7fa fab8 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--           ____ ____   ___   ____           --\r\n");
 8007a88:	492b      	ldr	r1, [pc, #172]	@ (8007b38 <command_send_splash+0x11c>)
 8007a8a:	481f      	ldr	r0, [pc, #124]	@ (8007b08 <command_send_splash+0xec>)
 8007a8c:	f7fa fab4 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--          / ___|  _ \\ / _ \\ / ___|          --\r\n");
 8007a90:	492a      	ldr	r1, [pc, #168]	@ (8007b3c <command_send_splash+0x120>)
 8007a92:	481d      	ldr	r0, [pc, #116]	@ (8007b08 <command_send_splash+0xec>)
 8007a94:	f7fa fab0 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--         | |   | |_) | | | | |              --\r\n");
 8007a98:	4929      	ldr	r1, [pc, #164]	@ (8007b40 <command_send_splash+0x124>)
 8007a9a:	481b      	ldr	r0, [pc, #108]	@ (8007b08 <command_send_splash+0xec>)
 8007a9c:	f7fa faac 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--         | |___|  __/| |_| | |___           --\r\n");
 8007aa0:	4928      	ldr	r1, [pc, #160]	@ (8007b44 <command_send_splash+0x128>)
 8007aa2:	4819      	ldr	r0, [pc, #100]	@ (8007b08 <command_send_splash+0xec>)
 8007aa4:	f7fa faa8 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--          \\____|_|    \\___/ \\____|          -- \r\n");
 8007aa8:	4927      	ldr	r1, [pc, #156]	@ (8007b48 <command_send_splash+0x12c>)
 8007aaa:	4817      	ldr	r0, [pc, #92]	@ (8007b08 <command_send_splash+0xec>)
 8007aac:	f7fa faa4 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--                  _   ___   ___             --\r\n");
 8007ab0:	4926      	ldr	r1, [pc, #152]	@ (8007b4c <command_send_splash+0x130>)
 8007ab2:	4815      	ldr	r0, [pc, #84]	@ (8007b08 <command_send_splash+0xec>)
 8007ab4:	f7fa faa0 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--          __   __/ | / _ \\ / _ \\            -- \r\n");
 8007ab8:	4925      	ldr	r1, [pc, #148]	@ (8007b50 <command_send_splash+0x134>)
 8007aba:	4813      	ldr	r0, [pc, #76]	@ (8007b08 <command_send_splash+0xec>)
 8007abc:	f7fa fa9c 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--          \\ \\ / /| || | | | | | |           --  \r\n");
 8007ac0:	4924      	ldr	r1, [pc, #144]	@ (8007b54 <command_send_splash+0x138>)
 8007ac2:	4811      	ldr	r0, [pc, #68]	@ (8007b08 <command_send_splash+0xec>)
 8007ac4:	f7fa fa98 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--           \\ V / | || |_| | |_| |           -- \r\n");
 8007ac8:	4923      	ldr	r1, [pc, #140]	@ (8007b58 <command_send_splash+0x13c>)
 8007aca:	480f      	ldr	r0, [pc, #60]	@ (8007b08 <command_send_splash+0xec>)
 8007acc:	f7fa fa94 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--            \\_/  |_(_)___(_)___/            -- \r\n");
 8007ad0:	4922      	ldr	r1, [pc, #136]	@ (8007b5c <command_send_splash+0x140>)
 8007ad2:	480d      	ldr	r0, [pc, #52]	@ (8007b08 <command_send_splash+0xec>)
 8007ad4:	f7fa fa90 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(UART4, "------------------------------------------------\r\n");
 8007ad8:	490a      	ldr	r1, [pc, #40]	@ (8007b04 <command_send_splash+0xe8>)
 8007ada:	480b      	ldr	r0, [pc, #44]	@ (8007b08 <command_send_splash+0xec>)
 8007adc:	f7fa fa8c 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "> ");
 8007ae0:	491f      	ldr	r1, [pc, #124]	@ (8007b60 <command_send_splash+0x144>)
 8007ae2:	4809      	ldr	r0, [pc, #36]	@ (8007b08 <command_send_splash+0xec>)
 8007ae4:	f7fa fa88 	bl	8001ff8 <Uart_sendstring>

//	Uart_sendstring(UART5, "\r\n");
//	Uart_sendstring(UART5, ">>>>> CPOC V1.2.0 RS422 <<<<<\r\n");
//	Uart_sendstring(UART5, "> ");

	Uart_sendstring(USART2, "\r\n");
 8007ae8:	491e      	ldr	r1, [pc, #120]	@ (8007b64 <command_send_splash+0x148>)
 8007aea:	481f      	ldr	r0, [pc, #124]	@ (8007b68 <command_send_splash+0x14c>)
 8007aec:	f7fa fa84 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(USART2, ">>>>> CPOC V1.2.0 XBEE RF <<<<<\r\n");
 8007af0:	491e      	ldr	r1, [pc, #120]	@ (8007b6c <command_send_splash+0x150>)
 8007af2:	481d      	ldr	r0, [pc, #116]	@ (8007b68 <command_send_splash+0x14c>)
 8007af4:	f7fa fa80 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(USART2, "> ");
 8007af8:	4919      	ldr	r1, [pc, #100]	@ (8007b60 <command_send_splash+0x144>)
 8007afa:	481b      	ldr	r0, [pc, #108]	@ (8007b68 <command_send_splash+0x14c>)
 8007afc:	f7fa fa7c 	bl	8001ff8 <Uart_sendstring>
}
 8007b00:	bf00      	nop
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	08015b10 	.word	0x08015b10
 8007b08:	40004c00 	.word	0x40004c00
 8007b0c:	08015b44 	.word	0x08015b44
 8007b10:	08015b78 	.word	0x08015b78
 8007b14:	08015bac 	.word	0x08015bac
 8007b18:	08015be4 	.word	0x08015be4
 8007b1c:	08015c18 	.word	0x08015c18
 8007b20:	08015c50 	.word	0x08015c50
 8007b24:	08015c84 	.word	0x08015c84
 8007b28:	08015cb8 	.word	0x08015cb8
 8007b2c:	08015cec 	.word	0x08015cec
 8007b30:	08015d20 	.word	0x08015d20
 8007b34:	08015d54 	.word	0x08015d54
 8007b38:	08015d88 	.word	0x08015d88
 8007b3c:	08015dbc 	.word	0x08015dbc
 8007b40:	08015df0 	.word	0x08015df0
 8007b44:	08015e24 	.word	0x08015e24
 8007b48:	08015e58 	.word	0x08015e58
 8007b4c:	08015e8c 	.word	0x08015e8c
 8007b50:	08015ec0 	.word	0x08015ec0
 8007b54:	08015ef4 	.word	0x08015ef4
 8007b58:	08015f2c 	.word	0x08015f2c
 8007b5c:	08015f60 	.word	0x08015f60
 8007b60:	08015640 	.word	0x08015640
 8007b64:	080155c8 	.word	0x080155c8
 8007b68:	40004400 	.word	0x40004400
 8007b6c:	08015f94 	.word	0x08015f94

08007b70 <LL_GPIO_SetOutputPin>:
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	619a      	str	r2, [r3, #24]
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <LL_GPIO_ResetOutputPin>:
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	041a      	lsls	r2, r3, #16
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	619a      	str	r2, [r3, #24]
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
	...

08007bac <rs422_set_task_period>:
	}
};


void rs422_set_task_period(uint32_t period_ms)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
    RS422_task_context.taskProperty.taskPeriodInMS = period_ms;
 8007bb4:	4a05      	ldr	r2, [pc, #20]	@ (8007bcc <rs422_set_task_period+0x20>)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	60d3      	str	r3, [r2, #12]

 //    Reset taskTick when changing task period
    RS422_task_context.taskTick = 0;
 8007bba:	4b04      	ldr	r3, [pc, #16]	@ (8007bcc <rs422_set_task_period+0x20>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	605a      	str	r2, [r3, #4]

}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	2000213c 	.word	0x2000213c

08007bd0 <switch_board>:


void switch_board(uint8_t board_id) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
    switch (board_id) {
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d837      	bhi.n	8007c50 <switch_board+0x80>
 8007be0:	a201      	add	r2, pc, #4	@ (adr r2, 8007be8 <switch_board+0x18>)
 8007be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be6:	bf00      	nop
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007c0f 	.word	0x08007c0f
 8007bf0:	08007c25 	.word	0x08007c25
 8007bf4:	08007c3b 	.word	0x08007c3b
        case 0: // PDU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007bf8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007bfc:	4816      	ldr	r0, [pc, #88]	@ (8007c58 <switch_board+0x88>)
 8007bfe:	f7ff ffc5 	bl	8007b8c <LL_GPIO_ResetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c06:	4814      	ldr	r0, [pc, #80]	@ (8007c58 <switch_board+0x88>)
 8007c08:	f7ff ffc0 	bl	8007b8c <LL_GPIO_ResetOutputPin>
            break;
 8007c0c:	e020      	b.n	8007c50 <switch_board+0x80>
        case 1: // PMU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c12:	4811      	ldr	r0, [pc, #68]	@ (8007c58 <switch_board+0x88>)
 8007c14:	f7ff ffba 	bl	8007b8c <LL_GPIO_ResetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c1c:	480e      	ldr	r0, [pc, #56]	@ (8007c58 <switch_board+0x88>)
 8007c1e:	f7ff ffa7 	bl	8007b70 <LL_GPIO_SetOutputPin>
            break;
 8007c22:	e015      	b.n	8007c50 <switch_board+0x80>
        case 2: // CAM
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c28:	480b      	ldr	r0, [pc, #44]	@ (8007c58 <switch_board+0x88>)
 8007c2a:	f7ff ffa1 	bl	8007b70 <LL_GPIO_SetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c32:	4809      	ldr	r0, [pc, #36]	@ (8007c58 <switch_board+0x88>)
 8007c34:	f7ff ffaa 	bl	8007b8c <LL_GPIO_ResetOutputPin>
            break;
 8007c38:	e00a      	b.n	8007c50 <switch_board+0x80>
        case 3: // IOU
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c3e:	4806      	ldr	r0, [pc, #24]	@ (8007c58 <switch_board+0x88>)
 8007c40:	f7ff ff96 	bl	8007b70 <LL_GPIO_SetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c48:	4803      	ldr	r0, [pc, #12]	@ (8007c58 <switch_board+0x88>)
 8007c4a:	f7ff ff91 	bl	8007b70 <LL_GPIO_SetOutputPin>
            break;
 8007c4e:	bf00      	nop
    }
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	40020000 	.word	0x40020000

08007c5c <Cmd_send_frame_status>:
volatile uint8_t packet_count = 0x00;



int Cmd_send_frame_status(int argc, char *argv[])
{
 8007c5c:	b590      	push	{r4, r7, lr}
 8007c5e:	b0d9      	sub	sp, #356	@ 0x164
 8007c60:	af04      	add	r7, sp, #16
 8007c62:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007c66:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8007c6a:	6018      	str	r0, [r3, #0]
 8007c6c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007c70:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8007c74:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8007c76:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007c7a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	dc01      	bgt.n	8007c88 <Cmd_send_frame_status+0x2c>
 8007c84:	2303      	movs	r3, #3
 8007c86:	e13b      	b.n	8007f00 <Cmd_send_frame_status+0x2a4>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8007c88:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007c8c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	dd01      	ble.n	8007c9a <Cmd_send_frame_status+0x3e>
 8007c96:	2302      	movs	r3, #2
 8007c98:	e132      	b.n	8007f00 <Cmd_send_frame_status+0x2a4>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007c9a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007c9e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8007cb0:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    uint8_t statusBuffer[282];
       statusBuffer[0] = 0x02;
 8007cbe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007cc2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	701a      	strb	r2, [r3, #0]
       statusBuffer[281] = 0x03;
 8007cca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007cce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
       statusBuffer[1] = 0xFF;
 8007cd8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007cdc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007ce0:	22ff      	movs	r2, #255	@ 0xff
 8007ce2:	705a      	strb	r2, [r3, #1]

       uint8_t day, date, month, year, hour, min, sec;
       DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8007ce4:	f107 0414 	add.w	r4, r7, #20
 8007ce8:	f107 0215 	add.w	r2, r7, #21
 8007cec:	f107 0116 	add.w	r1, r7, #22
 8007cf0:	f107 0017 	add.w	r0, r7, #23
 8007cf4:	f107 0311 	add.w	r3, r7, #17
 8007cf8:	9302      	str	r3, [sp, #8]
 8007cfa:	f107 0312 	add.w	r3, r7, #18
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	f107 0313 	add.w	r3, r7, #19
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4623      	mov	r3, r4
 8007d08:	f7f9 fbac 	bl	8001464 <DS3231_GetDateTime>

       float temp;
       uint8_t rounded_temp;

       temp = DS3231_GetTemperature();
 8007d0c:	f7f9 fc52 	bl	80015b4 <DS3231_GetTemperature>
 8007d10:	ed87 0a4e 	vstr	s0, [r7, #312]	@ 0x138
       rounded_temp = (uint8_t)temp;
 8007d14:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8007d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d1c:	edc7 7a01 	vstr	s15, [r7, #4]
 8007d20:	793b      	ldrb	r3, [r7, #4]
 8007d22:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

       statusBuffer[2] = sec;
 8007d26:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d2a:	f2a3 133f 	subw	r3, r3, #319	@ 0x13f
 8007d2e:	781a      	ldrb	r2, [r3, #0]
 8007d30:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d34:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007d38:	709a      	strb	r2, [r3, #2]
       statusBuffer[3] = min;
 8007d3a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d3e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d48:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007d4c:	70da      	strb	r2, [r3, #3]
       statusBuffer[4] = hour;
 8007d4e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d52:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8007d56:	781a      	ldrb	r2, [r3, #0]
 8007d58:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d5c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007d60:	711a      	strb	r2, [r3, #4]
       statusBuffer[5] = date;
 8007d62:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d66:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8007d6a:	781a      	ldrb	r2, [r3, #0]
 8007d6c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d70:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007d74:	715a      	strb	r2, [r3, #5]
       statusBuffer[6] = month;
 8007d76:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d7a:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 8007d7e:	781a      	ldrb	r2, [r3, #0]
 8007d80:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d84:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007d88:	719a      	strb	r2, [r3, #6]
       statusBuffer[7] = rounded_temp;
 8007d8a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007d8e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007d92:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8007d96:	71da      	strb	r2, [r3, #7]

       for (int i = 135; i <= 160; i++) {
 8007d98:	2387      	movs	r3, #135	@ 0x87
 8007d9a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8007d9e:	e012      	b.n	8007dc6 <Cmd_send_frame_status+0x16a>
           statusBuffer[i] = i - 135;
 8007da0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	3379      	adds	r3, #121	@ 0x79
 8007da8:	b2d9      	uxtb	r1, r3
 8007daa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007dae:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8007db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007db6:	4413      	add	r3, r2
 8007db8:	460a      	mov	r2, r1
 8007dba:	701a      	strb	r2, [r3, #0]
       for (int i = 135; i <= 160; i++) {
 8007dbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8007dc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dca:	2ba0      	cmp	r3, #160	@ 0xa0
 8007dcc:	dde8      	ble.n	8007da0 <Cmd_send_frame_status+0x144>
       }

       for (int i = 161; i <= 279; i++) {
 8007dce:	23a1      	movs	r3, #161	@ 0xa1
 8007dd0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8007dd4:	e012      	b.n	8007dfc <Cmd_send_frame_status+0x1a0>
           statusBuffer[i] = i - 161;
 8007dd6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	335f      	adds	r3, #95	@ 0x5f
 8007dde:	b2d9      	uxtb	r1, r3
 8007de0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007de4:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8007de8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007dec:	4413      	add	r3, r2
 8007dee:	460a      	mov	r2, r1
 8007df0:	701a      	strb	r2, [r3, #0]
       for (int i = 161; i <= 279; i++) {
 8007df2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007df6:	3301      	adds	r3, #1
 8007df8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8007dfc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007e00:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8007e04:	dbe7      	blt.n	8007dd6 <Cmd_send_frame_status+0x17a>
       }

       uint16_t crc = crc16_CCITT(0xFFFF, &statusBuffer[1], 279);
 8007e06:	f107 0318 	add.w	r3, r7, #24
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	f240 1217 	movw	r2, #279	@ 0x117
 8007e10:	4619      	mov	r1, r3
 8007e12:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007e16:	f004 fd33 	bl	800c880 <crc16_CCITT>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
       statusBuffer[279] = (crc >> 8) & 0xFF;
 8007e20:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8007e24:	0a1b      	lsrs	r3, r3, #8
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007e2e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007e32:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
       statusBuffer[280] = crc & 0xFF;
 8007e36:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007e40:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007e44:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118

   	if (swap_byte_enable){
 8007e48:	4b30      	ldr	r3, [pc, #192]	@ (8007f0c <Cmd_send_frame_status+0x2b0>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d036      	beq.n	8007ec0 <Cmd_send_frame_status+0x264>
   		for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 8007e52:	2301      	movs	r3, #1
 8007e54:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8007e58:	e02b      	b.n	8007eb2 <Cmd_send_frame_status+0x256>
   			if (statusBuffer[i] == 0x02) {
 8007e5a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007e5e:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8007e62:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007e66:	4413      	add	r3, r2
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d109      	bne.n	8007e82 <Cmd_send_frame_status+0x226>
   				statusBuffer[i] = 0xFE;
 8007e6e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007e72:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8007e76:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007e7a:	4413      	add	r3, r2
 8007e7c:	22fe      	movs	r2, #254	@ 0xfe
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	e012      	b.n	8007ea8 <Cmd_send_frame_status+0x24c>
   			} else if (statusBuffer[i] == 0x03) {
 8007e82:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007e86:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8007e8a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007e8e:	4413      	add	r3, r2
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d108      	bne.n	8007ea8 <Cmd_send_frame_status+0x24c>
   				statusBuffer[i] = 0xFD;
 8007e96:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007e9a:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8007e9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007ea2:	4413      	add	r3, r2
 8007ea4:	22fd      	movs	r2, #253	@ 0xfd
 8007ea6:	701a      	strb	r2, [r3, #0]
   		for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 8007ea8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007eac:	3301      	adds	r3, #1
 8007eae:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8007eb2:	4b17      	ldr	r3, [pc, #92]	@ (8007f10 <Cmd_send_frame_status+0x2b4>)
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	dbcc      	blt.n	8007e5a <Cmd_send_frame_status+0x1fe>
   			}
   		}
   	}

       // Gửi gói tin trạng thái
       for (int i = 0; i < 282; i++) {
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8007ec6:	e010      	b.n	8007eea <Cmd_send_frame_status+0x28e>
           Uart_write(UART5, statusBuffer[i]);
 8007ec8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8007ecc:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8007ed0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007ed4:	4413      	add	r3, r2
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	480e      	ldr	r0, [pc, #56]	@ (8007f14 <Cmd_send_frame_status+0x2b8>)
 8007edc:	f7f9 ff38 	bl	8001d50 <Uart_write>
       for (int i = 0; i < 282; i++) {
 8007ee0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8007eea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007eee:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 8007ef2:	dbe9      	blt.n	8007ec8 <Cmd_send_frame_status+0x26c>
       }

       Uart_sendstring(USARTx, "\nSending 1 Frame Status\n");
 8007ef4:	4908      	ldr	r1, [pc, #32]	@ (8007f18 <Cmd_send_frame_status+0x2bc>)
 8007ef6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8007efa:	f7fa f87d 	bl	8001ff8 <Uart_sendstring>
       return (CMDLINE_OK);
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd90      	pop	{r4, r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20007abf 	.word	0x20007abf
 8007f10:	200004b8 	.word	0x200004b8
 8007f14:	40005000 	.word	0x40005000
 8007f18:	08015fb8 	.word	0x08015fb8

08007f1c <Cmd_send_frame_cam>:

int Cmd_send_frame_cam(int argc, char *argv[])
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b0d0      	sub	sp, #320	@ 0x140
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f26:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007f2a:	6018      	str	r0, [r3, #0]
 8007f2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f30:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8007f34:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8007f36:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f3a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	dc01      	bgt.n	8007f48 <Cmd_send_frame_cam+0x2c>
 8007f44:	2303      	movs	r3, #3
 8007f46:	e108      	b.n	800815a <Cmd_send_frame_cam+0x23e>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8007f48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	dd01      	ble.n	8007f5a <Cmd_send_frame_cam+0x3e>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e0ff      	b.n	800815a <Cmd_send_frame_cam+0x23e>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007f5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007f70:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	4413      	add	r3, r2
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    // Kiểm tra packet_count từ dòng lệnh

    uint8_t packet_count = atoi(argv[1]);
 8007f7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007f82:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f007 fbb0 	bl	800f6f2 <atoi>
 8007f92:	4603      	mov	r3, r0
 8007f94:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133

    if (packet_count < 0 || packet_count >= 9) {
 8007f98:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d906      	bls.n	8007fae <Cmd_send_frame_cam+0x92>
        Uart_sendstring(USARTx, "\nInvalid packet_count (must be 0-8)\n");
 8007fa0:	4970      	ldr	r1, [pc, #448]	@ (8008164 <Cmd_send_frame_cam+0x248>)
 8007fa2:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007fa6:	f7fa f827 	bl	8001ff8 <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 8007faa:	2304      	movs	r3, #4
 8007fac:	e0d5      	b.n	800815a <Cmd_send_frame_cam+0x23e>
    }

    // Chuẩn bị gói tin CAM
    uint8_t camBuffer[282];
    camBuffer[0] = 0x02;
 8007fae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007fb2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	701a      	strb	r2, [r3, #0]
    camBuffer[281] = 0x03;
 8007fba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007fbe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
    camBuffer[1] = packet_count;
 8007fc8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007fcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007fd0:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 8007fd4:	705a      	strb	r2, [r3, #1]

    uint16_t cam_start_index = packet_count * 277;
 8007fd6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	0112      	lsls	r2, r2, #4
 8007fe0:	441a      	add	r2, r3
 8007fe2:	0092      	lsls	r2, r2, #2
 8007fe4:	441a      	add	r2, r3
 8007fe6:	0092      	lsls	r2, r2, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
    uint16_t cam_end_index = cam_start_index + 277;
 8007fee:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8007ff2:	f203 1315 	addw	r3, r3, #277	@ 0x115
 8007ff6:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e

    if (cam_end_index <= sizeof(cam_data_img)) {
 8007ffa:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8007ffe:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 8008002:	d80c      	bhi.n	800801e <Cmd_send_frame_cam+0x102>
        memcpy(&camBuffer[2], &cam_data_img[cam_start_index], 277);
 8008004:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8008008:	4a57      	ldr	r2, [pc, #348]	@ (8008168 <Cmd_send_frame_cam+0x24c>)
 800800a:	1899      	adds	r1, r3, r2
 800800c:	f107 030c 	add.w	r3, r7, #12
 8008010:	3302      	adds	r3, #2
 8008012:	f240 1215 	movw	r2, #277	@ 0x115
 8008016:	4618      	mov	r0, r3
 8008018:	f009 fa9f 	bl	801155a <memcpy>
 800801c:	e020      	b.n	8008060 <Cmd_send_frame_cam+0x144>
    } else {
        int remaining_bytes = sizeof(cam_data_img) - cam_start_index;
 800801e:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8008022:	f5c3 53e4 	rsb	r3, r3, #7296	@ 0x1c80
 8008026:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        memcpy(&camBuffer[2], &cam_data_img[cam_start_index], remaining_bytes);
 800802a:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 800802e:	4a4e      	ldr	r2, [pc, #312]	@ (8008168 <Cmd_send_frame_cam+0x24c>)
 8008030:	1899      	adds	r1, r3, r2
 8008032:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008036:	f107 030c 	add.w	r3, r7, #12
 800803a:	3302      	adds	r3, #2
 800803c:	4618      	mov	r0, r3
 800803e:	f009 fa8c 	bl	801155a <memcpy>
        memset(&camBuffer[2 + remaining_bytes], 0xFF, 277 - remaining_bytes);
 8008042:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008046:	3302      	adds	r3, #2
 8008048:	f107 020c 	add.w	r2, r7, #12
 800804c:	18d0      	adds	r0, r2, r3
 800804e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008052:	f5c3 738a 	rsb	r3, r3, #276	@ 0x114
 8008056:	3301      	adds	r3, #1
 8008058:	461a      	mov	r2, r3
 800805a:	21ff      	movs	r1, #255	@ 0xff
 800805c:	f009 f979 	bl	8011352 <memset>
    }

    uint16_t crc = crc16_CCITT(0xFFFF, &camBuffer[1], 279);
 8008060:	f107 030c 	add.w	r3, r7, #12
 8008064:	3301      	adds	r3, #1
 8008066:	f240 1217 	movw	r2, #279	@ 0x117
 800806a:	4619      	mov	r1, r3
 800806c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008070:	f004 fc06 	bl	800c880 <crc16_CCITT>
 8008074:	4603      	mov	r3, r0
 8008076:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    camBuffer[279] = (crc >> 8) & 0xFF;
 800807a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	b29b      	uxth	r3, r3
 8008082:	b2da      	uxtb	r2, r3
 8008084:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008088:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800808c:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
    camBuffer[280] = crc & 0xFF;
 8008090:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8008094:	b2da      	uxtb	r2, r3
 8008096:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800809a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800809e:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118

    // Gửi gói tin CAM

	if (swap_byte_enable){
 80080a2:	4b32      	ldr	r3, [pc, #200]	@ (800816c <Cmd_send_frame_cam+0x250>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d036      	beq.n	800811a <Cmd_send_frame_cam+0x1fe>
		for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 80080ac:	2301      	movs	r3, #1
 80080ae:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80080b2:	e02b      	b.n	800810c <Cmd_send_frame_cam+0x1f0>
			if (camBuffer[i] == 0x02) {
 80080b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80080b8:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 80080bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80080c0:	4413      	add	r3, r2
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d109      	bne.n	80080dc <Cmd_send_frame_cam+0x1c0>
				camBuffer[i] = 0xFE;
 80080c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80080cc:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 80080d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80080d4:	4413      	add	r3, r2
 80080d6:	22fe      	movs	r2, #254	@ 0xfe
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	e012      	b.n	8008102 <Cmd_send_frame_cam+0x1e6>
			} else if (camBuffer[i] == 0x03) {
 80080dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80080e0:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 80080e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80080e8:	4413      	add	r3, r2
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d108      	bne.n	8008102 <Cmd_send_frame_cam+0x1e6>
				camBuffer[i] = 0xFD;
 80080f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80080f4:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 80080f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80080fc:	4413      	add	r3, r2
 80080fe:	22fd      	movs	r2, #253	@ 0xfd
 8008100:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 8008102:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8008106:	3301      	adds	r3, #1
 8008108:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800810c:	4b18      	ldr	r3, [pc, #96]	@ (8008170 <Cmd_send_frame_cam+0x254>)
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	3b01      	subs	r3, #1
 8008112:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8008116:	429a      	cmp	r2, r3
 8008118:	dbcc      	blt.n	80080b4 <Cmd_send_frame_cam+0x198>
			}
		}
	}

    for (int i = 0; i < 282; i++) {
 800811a:	2300      	movs	r3, #0
 800811c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8008120:	e010      	b.n	8008144 <Cmd_send_frame_cam+0x228>
        Uart_write(UART5, camBuffer[i]);
 8008122:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008126:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 800812a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800812e:	4413      	add	r3, r2
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	4619      	mov	r1, r3
 8008134:	480f      	ldr	r0, [pc, #60]	@ (8008174 <Cmd_send_frame_cam+0x258>)
 8008136:	f7f9 fe0b 	bl	8001d50 <Uart_write>
    for (int i = 0; i < 282; i++) {
 800813a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800813e:	3301      	adds	r3, #1
 8008140:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8008144:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8008148:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 800814c:	dbe9      	blt.n	8008122 <Cmd_send_frame_cam+0x206>
    }

    Uart_sendstring(USARTx, "\nSent 1 Frame CAM\n");
 800814e:	490a      	ldr	r1, [pc, #40]	@ (8008178 <Cmd_send_frame_cam+0x25c>)
 8008150:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8008154:	f7f9 ff50 	bl	8001ff8 <Uart_sendstring>

    return (CMDLINE_OK);
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	08015fd4 	.word	0x08015fd4
 8008168:	200004bc 	.word	0x200004bc
 800816c:	20007abf 	.word	0x20007abf
 8008170:	200004b8 	.word	0x200004b8
 8008174:	40005000 	.word	0x40005000
 8008178:	08015ffc 	.word	0x08015ffc

0800817c <RS422_periodic_task>:




void RS422_periodic_task(void) {
 800817c:	b590      	push	{r4, r7, lr}
 800817e:	b093      	sub	sp, #76	@ 0x4c
 8008180:	af04      	add	r7, sp, #16
	if (rs422_report_enable) {
 8008182:	4ba3      	ldr	r3, [pc, #652]	@ (8008410 <RS422_periodic_task+0x294>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8183 	beq.w	8008494 <RS422_periodic_task+0x318>

        packet_count = 0;
 800818e:	4ba1      	ldr	r3, [pc, #644]	@ (8008414 <RS422_periodic_task+0x298>)
 8008190:	2200      	movs	r2, #0
 8008192:	701a      	strb	r2, [r3, #0]
//        }




		if (packet_count < 9)
 8008194:	4b9f      	ldr	r3, [pc, #636]	@ (8008414 <RS422_periodic_task+0x298>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b08      	cmp	r3, #8
 800819c:	d867      	bhi.n	800826e <RS422_periodic_task+0xf2>
		{

			nextBuffer[0] = 0x02;
 800819e:	4b9e      	ldr	r3, [pc, #632]	@ (8008418 <RS422_periodic_task+0x29c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2202      	movs	r2, #2
 80081a4:	701a      	strb	r2, [r3, #0]
			nextBuffer[281] = 0x03;
 80081a6:	4b9c      	ldr	r3, [pc, #624]	@ (8008418 <RS422_periodic_task+0x29c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f203 1319 	addw	r3, r3, #281	@ 0x119
 80081ae:	2203      	movs	r2, #3
 80081b0:	701a      	strb	r2, [r3, #0]
			nextBuffer[1] = packet_count;
 80081b2:	4b99      	ldr	r3, [pc, #612]	@ (8008418 <RS422_periodic_task+0x29c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3301      	adds	r3, #1
 80081b8:	4a96      	ldr	r2, [pc, #600]	@ (8008414 <RS422_periodic_task+0x298>)
 80081ba:	7812      	ldrb	r2, [r2, #0]
 80081bc:	b2d2      	uxtb	r2, r2
 80081be:	701a      	strb	r2, [r3, #0]

		    uint16_t cam_start_index = packet_count * 277;
 80081c0:	4b94      	ldr	r3, [pc, #592]	@ (8008414 <RS422_periodic_task+0x298>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	0112      	lsls	r2, r2, #4
 80081ca:	441a      	add	r2, r3
 80081cc:	0092      	lsls	r2, r2, #2
 80081ce:	441a      	add	r2, r3
 80081d0:	0092      	lsls	r2, r2, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	83fb      	strh	r3, [r7, #30]
		    uint16_t cam_end_index = cam_start_index + 277;
 80081d6:	8bfb      	ldrh	r3, [r7, #30]
 80081d8:	f203 1315 	addw	r3, r3, #277	@ 0x115
 80081dc:	83bb      	strh	r3, [r7, #28]

		    if (cam_end_index <= 7296) {
 80081de:	8bbb      	ldrh	r3, [r7, #28]
 80081e0:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 80081e4:	d80b      	bhi.n	80081fe <RS422_periodic_task+0x82>
		        memcpy(&nextBuffer[2], &cam_data_img[cam_start_index], 277);
 80081e6:	4b8c      	ldr	r3, [pc, #560]	@ (8008418 <RS422_periodic_task+0x29c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	1c98      	adds	r0, r3, #2
 80081ec:	8bfb      	ldrh	r3, [r7, #30]
 80081ee:	4a8b      	ldr	r2, [pc, #556]	@ (800841c <RS422_periodic_task+0x2a0>)
 80081f0:	4413      	add	r3, r2
 80081f2:	f240 1215 	movw	r2, #277	@ 0x115
 80081f6:	4619      	mov	r1, r3
 80081f8:	f009 f9af 	bl	801155a <memcpy>
 80081fc:	e01a      	b.n	8008234 <RS422_periodic_task+0xb8>
		    } else {
		        // Xử lý trường hợp gói tin cuối cùng (vị trí 26)
		        int remaining_bytes = 7296 - cam_start_index;
 80081fe:	8bfb      	ldrh	r3, [r7, #30]
 8008200:	f5c3 53e4 	rsb	r3, r3, #7296	@ 0x1c80
 8008204:	61bb      	str	r3, [r7, #24]
		        memcpy(&nextBuffer[2], &cam_data_img[cam_start_index], remaining_bytes);
 8008206:	4b84      	ldr	r3, [pc, #528]	@ (8008418 <RS422_periodic_task+0x29c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	1c98      	adds	r0, r3, #2
 800820c:	8bfb      	ldrh	r3, [r7, #30]
 800820e:	4a83      	ldr	r2, [pc, #524]	@ (800841c <RS422_periodic_task+0x2a0>)
 8008210:	4413      	add	r3, r2
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	4619      	mov	r1, r3
 8008216:	f009 f9a0 	bl	801155a <memcpy>
		        memset(&nextBuffer[2 + remaining_bytes], 0xFF, 277 - remaining_bytes);
 800821a:	4b7f      	ldr	r3, [pc, #508]	@ (8008418 <RS422_periodic_task+0x29c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	3202      	adds	r2, #2
 8008222:	1898      	adds	r0, r3, r2
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	f5c3 738a 	rsb	r3, r3, #276	@ 0x114
 800822a:	3301      	adds	r3, #1
 800822c:	461a      	mov	r2, r3
 800822e:	21ff      	movs	r1, #255	@ 0xff
 8008230:	f009 f88f 	bl	8011352 <memset>
		    }


		    uint16_t crc = crc16_CCITT(0xFFFF, &nextBuffer[1], 279);
 8008234:	4b78      	ldr	r3, [pc, #480]	@ (8008418 <RS422_periodic_task+0x29c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3301      	adds	r3, #1
 800823a:	f240 1217 	movw	r2, #279	@ 0x117
 800823e:	4619      	mov	r1, r3
 8008240:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008244:	f004 fb1c 	bl	800c880 <crc16_CCITT>
 8008248:	4603      	mov	r3, r0
 800824a:	82fb      	strh	r3, [r7, #22]
		    nextBuffer[279] = (crc >> 8) & 0xFF;
 800824c:	8afb      	ldrh	r3, [r7, #22]
 800824e:	0a1b      	lsrs	r3, r3, #8
 8008250:	b29a      	uxth	r2, r3
 8008252:	4b71      	ldr	r3, [pc, #452]	@ (8008418 <RS422_periodic_task+0x29c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f203 1317 	addw	r3, r3, #279	@ 0x117
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]
		    nextBuffer[280] = crc & 0xFF;
 800825e:	4b6e      	ldr	r3, [pc, #440]	@ (8008418 <RS422_periodic_task+0x29c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8008266:	8afa      	ldrh	r2, [r7, #22]
 8008268:	b2d2      	uxtb	r2, r2
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	e097      	b.n	800839e <RS422_periodic_task+0x222>
//
//			    new_data_available = 0;
//			}


			nextBuffer[0] = 0x02;
 800826e:	4b6a      	ldr	r3, [pc, #424]	@ (8008418 <RS422_periodic_task+0x29c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2202      	movs	r2, #2
 8008274:	701a      	strb	r2, [r3, #0]
			nextBuffer[281] = 0x03;
 8008276:	4b68      	ldr	r3, [pc, #416]	@ (8008418 <RS422_periodic_task+0x29c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f203 1319 	addw	r3, r3, #281	@ 0x119
 800827e:	2203      	movs	r2, #3
 8008280:	701a      	strb	r2, [r3, #0]
			nextBuffer[1] = 0xFF;
 8008282:	4b65      	ldr	r3, [pc, #404]	@ (8008418 <RS422_periodic_task+0x29c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3301      	adds	r3, #1
 8008288:	22ff      	movs	r2, #255	@ 0xff
 800828a:	701a      	strb	r2, [r3, #0]
		    uint8_t day, date, month, year, hour, min, sec;
		    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 800828c:	f107 040c 	add.w	r4, r7, #12
 8008290:	f107 020d 	add.w	r2, r7, #13
 8008294:	f107 010e 	add.w	r1, r7, #14
 8008298:	f107 000f 	add.w	r0, r7, #15
 800829c:	f107 0309 	add.w	r3, r7, #9
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	f107 030a 	add.w	r3, r7, #10
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	f107 030b 	add.w	r3, r7, #11
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	4623      	mov	r3, r4
 80082b0:	f7f9 f8d8 	bl	8001464 <DS3231_GetDateTime>

		    float temp;
		    uint8_t rounded_temp;

		    temp = DS3231_GetTemperature();
 80082b4:	f7f9 f97e 	bl	80015b4 <DS3231_GetTemperature>
 80082b8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		    rounded_temp = (uint8_t)temp;
 80082bc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80082c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80082c8:	793b      	ldrb	r3, [r7, #4]
 80082ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		    nextBuffer[2] = sec;
 80082ce:	4b52      	ldr	r3, [pc, #328]	@ (8008418 <RS422_periodic_task+0x29c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3302      	adds	r3, #2
 80082d4:	7a7a      	ldrb	r2, [r7, #9]
 80082d6:	701a      	strb	r2, [r3, #0]
		    nextBuffer[3] = min;
 80082d8:	4b4f      	ldr	r3, [pc, #316]	@ (8008418 <RS422_periodic_task+0x29c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3303      	adds	r3, #3
 80082de:	7aba      	ldrb	r2, [r7, #10]
 80082e0:	701a      	strb	r2, [r3, #0]
		    nextBuffer[4] = hour;
 80082e2:	4b4d      	ldr	r3, [pc, #308]	@ (8008418 <RS422_periodic_task+0x29c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3304      	adds	r3, #4
 80082e8:	7afa      	ldrb	r2, [r7, #11]
 80082ea:	701a      	strb	r2, [r3, #0]
		    nextBuffer[5] = date;
 80082ec:	4b4a      	ldr	r3, [pc, #296]	@ (8008418 <RS422_periodic_task+0x29c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3305      	adds	r3, #5
 80082f2:	7bba      	ldrb	r2, [r7, #14]
 80082f4:	701a      	strb	r2, [r3, #0]
		    nextBuffer[6] = month;
 80082f6:	4b48      	ldr	r3, [pc, #288]	@ (8008418 <RS422_periodic_task+0x29c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3306      	adds	r3, #6
 80082fc:	7b7a      	ldrb	r2, [r7, #13]
 80082fe:	701a      	strb	r2, [r3, #0]
		    nextBuffer[7] = rounded_temp;
 8008300:	4b45      	ldr	r3, [pc, #276]	@ (8008418 <RS422_periodic_task+0x29c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3307      	adds	r3, #7
 8008306:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800830a:	701a      	strb	r2, [r3, #0]


			for (int i = 135; i <= 160; i++) {
 800830c:	2387      	movs	r3, #135	@ 0x87
 800830e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008310:	e00b      	b.n	800832a <RS422_periodic_task+0x1ae>
				nextBuffer[i] = i - 135;
 8008312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008314:	b2da      	uxtb	r2, r3
 8008316:	4b40      	ldr	r3, [pc, #256]	@ (8008418 <RS422_periodic_task+0x29c>)
 8008318:	6819      	ldr	r1, [r3, #0]
 800831a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831c:	440b      	add	r3, r1
 800831e:	3279      	adds	r2, #121	@ 0x79
 8008320:	b2d2      	uxtb	r2, r2
 8008322:	701a      	strb	r2, [r3, #0]
			for (int i = 135; i <= 160; i++) {
 8008324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008326:	3301      	adds	r3, #1
 8008328:	637b      	str	r3, [r7, #52]	@ 0x34
 800832a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832c:	2ba0      	cmp	r3, #160	@ 0xa0
 800832e:	ddf0      	ble.n	8008312 <RS422_periodic_task+0x196>
			}


			for (int i = 161; i <= ARRAY_SIZE-2; i++) {
 8008330:	23a1      	movs	r3, #161	@ 0xa1
 8008332:	633b      	str	r3, [r7, #48]	@ 0x30
 8008334:	e00b      	b.n	800834e <RS422_periodic_task+0x1d2>
				nextBuffer[i] = i - 161;
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	b2da      	uxtb	r2, r3
 800833a:	4b37      	ldr	r3, [pc, #220]	@ (8008418 <RS422_periodic_task+0x29c>)
 800833c:	6819      	ldr	r1, [r3, #0]
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	440b      	add	r3, r1
 8008342:	325f      	adds	r2, #95	@ 0x5f
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	701a      	strb	r2, [r3, #0]
			for (int i = 161; i <= ARRAY_SIZE-2; i++) {
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	3301      	adds	r3, #1
 800834c:	633b      	str	r3, [r7, #48]	@ 0x30
 800834e:	4b34      	ldr	r3, [pc, #208]	@ (8008420 <RS422_periodic_task+0x2a4>)
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	3b01      	subs	r3, #1
 8008354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008356:	429a      	cmp	r2, r3
 8008358:	dbed      	blt.n	8008336 <RS422_periodic_task+0x1ba>
			}


			uint16_t crc = crc16_CCITT(0xFFFF, &nextBuffer[1], ARRAY_SIZE - 4);
 800835a:	4b2f      	ldr	r3, [pc, #188]	@ (8008418 <RS422_periodic_task+0x29c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	1c59      	adds	r1, r3, #1
 8008360:	4b2f      	ldr	r3, [pc, #188]	@ (8008420 <RS422_periodic_task+0x2a4>)
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	3b04      	subs	r3, #4
 8008366:	b29b      	uxth	r3, r3
 8008368:	461a      	mov	r2, r3
 800836a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800836e:	f004 fa87 	bl	800c880 <crc16_CCITT>
 8008372:	4603      	mov	r3, r0
 8008374:	843b      	strh	r3, [r7, #32]

			nextBuffer[ARRAY_SIZE - 3] = (crc >> 8) & 0xFF;  // CRC#HIGH
 8008376:	8c3b      	ldrh	r3, [r7, #32]
 8008378:	0a1b      	lsrs	r3, r3, #8
 800837a:	b299      	uxth	r1, r3
 800837c:	4b26      	ldr	r3, [pc, #152]	@ (8008418 <RS422_periodic_task+0x29c>)
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	4b27      	ldr	r3, [pc, #156]	@ (8008420 <RS422_periodic_task+0x2a4>)
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	3b03      	subs	r3, #3
 8008386:	4413      	add	r3, r2
 8008388:	b2ca      	uxtb	r2, r1
 800838a:	701a      	strb	r2, [r3, #0]
			nextBuffer[ARRAY_SIZE - 2] = crc & 0xFF;         // CRC#LOW
 800838c:	4b22      	ldr	r3, [pc, #136]	@ (8008418 <RS422_periodic_task+0x29c>)
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	4b23      	ldr	r3, [pc, #140]	@ (8008420 <RS422_periodic_task+0x2a4>)
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	3b02      	subs	r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	8c3a      	ldrh	r2, [r7, #32]
 800839a:	b2d2      	uxtb	r2, r2
 800839c:	701a      	strb	r2, [r3, #0]



		}

        uint8_t* tempz = currentBuffer;
 800839e:	4b21      	ldr	r3, [pc, #132]	@ (8008424 <RS422_periodic_task+0x2a8>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	613b      	str	r3, [r7, #16]
        currentBuffer = nextBuffer;
 80083a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008418 <RS422_periodic_task+0x29c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008424 <RS422_periodic_task+0x2a8>)
 80083aa:	6013      	str	r3, [r2, #0]
        nextBuffer = tempz;
 80083ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008418 <RS422_periodic_task+0x29c>)
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	6013      	str	r3, [r2, #0]


		if (swap_byte_enable){
 80083b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008428 <RS422_periodic_task+0x2ac>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d026      	beq.n	800840a <RS422_periodic_task+0x28e>
			for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 80083bc:	2301      	movs	r3, #1
 80083be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083c0:	e01d      	b.n	80083fe <RS422_periodic_task+0x282>
				if (currentBuffer[i] == 0x02) {
 80083c2:	4b18      	ldr	r3, [pc, #96]	@ (8008424 <RS422_periodic_task+0x2a8>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c8:	4413      	add	r3, r2
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d106      	bne.n	80083de <RS422_periodic_task+0x262>
					currentBuffer[i] = 0xFE;
 80083d0:	4b14      	ldr	r3, [pc, #80]	@ (8008424 <RS422_periodic_task+0x2a8>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d6:	4413      	add	r3, r2
 80083d8:	22fe      	movs	r2, #254	@ 0xfe
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e00c      	b.n	80083f8 <RS422_periodic_task+0x27c>
				} else if (currentBuffer[i] == 0x03) {
 80083de:	4b11      	ldr	r3, [pc, #68]	@ (8008424 <RS422_periodic_task+0x2a8>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e4:	4413      	add	r3, r2
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d105      	bne.n	80083f8 <RS422_periodic_task+0x27c>
					currentBuffer[i] = 0xFD;
 80083ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008424 <RS422_periodic_task+0x2a8>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f2:	4413      	add	r3, r2
 80083f4:	22fd      	movs	r2, #253	@ 0xfd
 80083f6:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 80083f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fa:	3301      	adds	r3, #1
 80083fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083fe:	4b08      	ldr	r3, [pc, #32]	@ (8008420 <RS422_periodic_task+0x2a4>)
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	3b01      	subs	r3, #1
 8008404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008406:	429a      	cmp	r2, r3
 8008408:	dbdb      	blt.n	80083c2 <RS422_periodic_task+0x246>
				}
			}
		}

        for (int i = 0; i < ARRAY_SIZE; i++) {
 800840a:	2300      	movs	r3, #0
 800840c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800840e:	e019      	b.n	8008444 <RS422_periodic_task+0x2c8>
 8008410:	20007abd 	.word	0x20007abd
 8008414:	20008295 	.word	0x20008295
 8008418:	20002158 	.word	0x20002158
 800841c:	200004bc 	.word	0x200004bc
 8008420:	200004b8 	.word	0x200004b8
 8008424:	20002154 	.word	0x20002154
 8008428:	20007abf 	.word	0x20007abf
            Uart_write(UART5, currentBuffer[i]);
 800842c:	4b1b      	ldr	r3, [pc, #108]	@ (800849c <RS422_periodic_task+0x320>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008432:	4413      	add	r3, r2
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	4619      	mov	r1, r3
 8008438:	4819      	ldr	r0, [pc, #100]	@ (80084a0 <RS422_periodic_task+0x324>)
 800843a:	f7f9 fc89 	bl	8001d50 <Uart_write>
        for (int i = 0; i < ARRAY_SIZE; i++) {
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	3301      	adds	r3, #1
 8008442:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008444:	4b17      	ldr	r3, [pc, #92]	@ (80084a4 <RS422_periodic_task+0x328>)
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	461a      	mov	r2, r3
 800844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844c:	4293      	cmp	r3, r2
 800844e:	dbed      	blt.n	800842c <RS422_periodic_task+0x2b0>
        }

        if(packet_sig){
 8008450:	4b15      	ldr	r3, [pc, #84]	@ (80084a8 <RS422_periodic_task+0x32c>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <RS422_periodic_task+0x2ec>
        	packet_sig = 0;
 8008458:	4b13      	ldr	r3, [pc, #76]	@ (80084a8 <RS422_periodic_task+0x32c>)
 800845a:	2200      	movs	r2, #0
 800845c:	701a      	strb	r2, [r3, #0]
            LL_GPIO_ResetOutputPin(GPIOA,LORA_IO0_Pin);
 800845e:	2110      	movs	r1, #16
 8008460:	4812      	ldr	r0, [pc, #72]	@ (80084ac <RS422_periodic_task+0x330>)
 8008462:	f7ff fb93 	bl	8007b8c <LL_GPIO_ResetOutputPin>
 8008466:	e006      	b.n	8008476 <RS422_periodic_task+0x2fa>
        }else{
        	packet_sig = 1;
 8008468:	4b0f      	ldr	r3, [pc, #60]	@ (80084a8 <RS422_periodic_task+0x32c>)
 800846a:	2201      	movs	r2, #1
 800846c:	701a      	strb	r2, [r3, #0]
        	LL_GPIO_SetOutputPin(GPIOA,LORA_IO0_Pin);
 800846e:	2110      	movs	r1, #16
 8008470:	480e      	ldr	r0, [pc, #56]	@ (80084ac <RS422_periodic_task+0x330>)
 8008472:	f7ff fb7d 	bl	8007b70 <LL_GPIO_SetOutputPin>
        }

        packet_count++;
 8008476:	4b0e      	ldr	r3, [pc, #56]	@ (80084b0 <RS422_periodic_task+0x334>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	b2db      	uxtb	r3, r3
 800847c:	3301      	adds	r3, #1
 800847e:	b2da      	uxtb	r2, r3
 8008480:	4b0b      	ldr	r3, [pc, #44]	@ (80084b0 <RS422_periodic_task+0x334>)
 8008482:	701a      	strb	r2, [r3, #0]

        if (packet_count >= 10) {
 8008484:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <RS422_periodic_task+0x334>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b09      	cmp	r3, #9
 800848c:	d902      	bls.n	8008494 <RS422_periodic_task+0x318>
            packet_count = 0;
 800848e:	4b08      	ldr	r3, [pc, #32]	@ (80084b0 <RS422_periodic_task+0x334>)
 8008490:	2200      	movs	r2, #0
 8008492:	701a      	strb	r2, [r3, #0]
        }


	}
}
 8008494:	bf00      	nop
 8008496:	373c      	adds	r7, #60	@ 0x3c
 8008498:	46bd      	mov	sp, r7
 800849a:	bd90      	pop	{r4, r7, pc}
 800849c:	20002154 	.word	0x20002154
 80084a0:	40005000 	.word	0x40005000
 80084a4:	200004b8 	.word	0x200004b8
 80084a8:	20008294 	.word	0x20008294
 80084ac:	40020000 	.word	0x40020000
 80084b0:	20008295 	.word	0x20008295

080084b4 <frame_processing_rs422>:

void frame_processing_rs422(fsp_packet_t *fsp_pkt){
 80084b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b8:	f5ad 6ddb 	sub.w	sp, sp, #1752	@ 0x6d8
 80084bc:	af34      	add	r7, sp, #208	@ 0xd0
 80084be:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80084c2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80084c6:	6018      	str	r0, [r3, #0]
	switch(fsp_pkt->payload[0])
 80084c8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80084cc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	795b      	ldrb	r3, [r3, #5]
 80084d4:	2b13      	cmp	r3, #19
 80084d6:	f000 8629 	beq.w	800912c <frame_processing_rs422+0xc78>
 80084da:	2b13      	cmp	r3, #19
 80084dc:	f301 833a 	bgt.w	8009b54 <frame_processing_rs422+0x16a0>
 80084e0:	2b06      	cmp	r3, #6
 80084e2:	f000 82eb 	beq.w	8008abc <frame_processing_rs422+0x608>
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	f041 8334 	bne.w	8009b54 <frame_processing_rs422+0x16a0>
	{
		case 0x08:
	    {
			if(auto_report_enabled || rf_report_enable){
 80084ec:	4bab      	ldr	r3, [pc, #684]	@ (800879c <frame_processing_rs422+0x2e8>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d105      	bne.n	8008502 <frame_processing_rs422+0x4e>
 80084f6:	4baa      	ldr	r3, [pc, #680]	@ (80087a0 <frame_processing_rs422+0x2ec>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 82a3 	beq.w	8008a48 <frame_processing_rs422+0x594>
				if(auto_report_enabled){
 8008502:	4ba6      	ldr	r3, [pc, #664]	@ (800879c <frame_processing_rs422+0x2e8>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <frame_processing_rs422+0x62>
					Uart_sendstring(UART4, "\nPMU:\n");
 800850c:	49a5      	ldr	r1, [pc, #660]	@ (80087a4 <frame_processing_rs422+0x2f0>)
 800850e:	48a6      	ldr	r0, [pc, #664]	@ (80087a8 <frame_processing_rs422+0x2f4>)
 8008510:	f7f9 fd72 	bl	8001ff8 <Uart_sendstring>
 8008514:	e003      	b.n	800851e <frame_processing_rs422+0x6a>
				}else{
					Uart_sendstring(USART2, "\nPMU:\n");
 8008516:	49a3      	ldr	r1, [pc, #652]	@ (80087a4 <frame_processing_rs422+0x2f0>)
 8008518:	48a4      	ldr	r0, [pc, #656]	@ (80087ac <frame_processing_rs422+0x2f8>)
 800851a:	f7f9 fd6d 	bl	8001ff8 <Uart_sendstring>
				}

				int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800851e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008522:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	799b      	ldrb	r3, [r3, #6]
 800852a:	021b      	lsls	r3, r3, #8
 800852c:	b21a      	sxth	r2, r3
 800852e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008532:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	79db      	ldrb	r3, [r3, #7]
 800853a:	b21b      	sxth	r3, r3
 800853c:	4313      	orrs	r3, r2
 800853e:	f8a7 35c8 	strh.w	r3, [r7, #1480]	@ 0x5c8
				int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8008542:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008546:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	7a1b      	ldrb	r3, [r3, #8]
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	b21a      	sxth	r2, r3
 8008552:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008556:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	7a5b      	ldrb	r3, [r3, #9]
 800855e:	b21b      	sxth	r3, r3
 8008560:	4313      	orrs	r3, r2
 8008562:	f8a7 35c6 	strh.w	r3, [r7, #1478]	@ 0x5c6
				int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 8008566:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800856a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	7a9b      	ldrb	r3, [r3, #10]
 8008572:	021b      	lsls	r3, r3, #8
 8008574:	b21a      	sxth	r2, r3
 8008576:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800857a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	7adb      	ldrb	r3, [r3, #11]
 8008582:	b21b      	sxth	r3, r3
 8008584:	4313      	orrs	r3, r2
 8008586:	f8a7 35c4 	strh.w	r3, [r7, #1476]	@ 0x5c4
				int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800858a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800858e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	7b1b      	ldrb	r3, [r3, #12]
 8008596:	021b      	lsls	r3, r3, #8
 8008598:	b21a      	sxth	r2, r3
 800859a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800859e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	7b5b      	ldrb	r3, [r3, #13]
 80085a6:	b21b      	sxth	r3, r3
 80085a8:	4313      	orrs	r3, r2
 80085aa:	f8a7 35c2 	strh.w	r3, [r7, #1474]	@ 0x5c2

				uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 80085ae:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085b2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	7b9b      	ldrb	r3, [r3, #14]
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	b21a      	sxth	r2, r3
 80085be:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085c2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	7bdb      	ldrb	r3, [r3, #15]
 80085ca:	b21b      	sxth	r3, r3
 80085cc:	4313      	orrs	r3, r2
 80085ce:	b21b      	sxth	r3, r3
 80085d0:	f8a7 35c0 	strh.w	r3, [r7, #1472]	@ 0x5c0
				uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 80085d4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085d8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	7c1b      	ldrb	r3, [r3, #16]
 80085e0:	021b      	lsls	r3, r3, #8
 80085e2:	b21a      	sxth	r2, r3
 80085e4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085e8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	7c5b      	ldrb	r3, [r3, #17]
 80085f0:	b21b      	sxth	r3, r3
 80085f2:	4313      	orrs	r3, r2
 80085f4:	b21b      	sxth	r3, r3
 80085f6:	f8a7 35be 	strh.w	r3, [r7, #1470]	@ 0x5be
				uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 80085fa:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085fe:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	7c9b      	ldrb	r3, [r3, #18]
 8008606:	021b      	lsls	r3, r3, #8
 8008608:	b21a      	sxth	r2, r3
 800860a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800860e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	7cdb      	ldrb	r3, [r3, #19]
 8008616:	b21b      	sxth	r3, r3
 8008618:	4313      	orrs	r3, r2
 800861a:	b21b      	sxth	r3, r3
 800861c:	f8a7 35bc 	strh.w	r3, [r7, #1468]	@ 0x5bc
				uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8008620:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008624:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	7d1b      	ldrb	r3, [r3, #20]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	b21a      	sxth	r2, r3
 8008630:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008634:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	7d5b      	ldrb	r3, [r3, #21]
 800863c:	b21b      	sxth	r3, r3
 800863e:	4313      	orrs	r3, r2
 8008640:	b21b      	sxth	r3, r3
 8008642:	f8a7 35ba 	strh.w	r3, [r7, #1466]	@ 0x5ba

				uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 8008646:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800864a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	7d9b      	ldrb	r3, [r3, #22]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	b21a      	sxth	r2, r3
 8008656:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800865a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	7ddb      	ldrb	r3, [r3, #23]
 8008662:	b21b      	sxth	r3, r3
 8008664:	4313      	orrs	r3, r2
 8008666:	b21b      	sxth	r3, r3
 8008668:	f8a7 35b8 	strh.w	r3, [r7, #1464]	@ 0x5b8
				uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800866c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008670:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	7e1b      	ldrb	r3, [r3, #24]
 8008678:	021b      	lsls	r3, r3, #8
 800867a:	b21a      	sxth	r2, r3
 800867c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008680:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	7e5b      	ldrb	r3, [r3, #25]
 8008688:	b21b      	sxth	r3, r3
 800868a:	4313      	orrs	r3, r2
 800868c:	b21b      	sxth	r3, r3
 800868e:	f8a7 35b6 	strh.w	r3, [r7, #1462]	@ 0x5b6

				uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 8008692:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008696:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	7e9b      	ldrb	r3, [r3, #26]
 800869e:	021b      	lsls	r3, r3, #8
 80086a0:	b21a      	sxth	r2, r3
 80086a2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086a6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	7edb      	ldrb	r3, [r3, #27]
 80086ae:	b21b      	sxth	r3, r3
 80086b0:	4313      	orrs	r3, r2
 80086b2:	b21b      	sxth	r3, r3
 80086b4:	f8a7 35b4 	strh.w	r3, [r7, #1460]	@ 0x5b4
				uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 80086b8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086bc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	7f1b      	ldrb	r3, [r3, #28]
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	b21a      	sxth	r2, r3
 80086c8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086cc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	7f5b      	ldrb	r3, [r3, #29]
 80086d4:	b21b      	sxth	r3, r3
 80086d6:	4313      	orrs	r3, r2
 80086d8:	b21b      	sxth	r3, r3
 80086da:	f8a7 35b2 	strh.w	r3, [r7, #1458]	@ 0x5b2

				char buffer_0x08[500];
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80086de:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da03      	bge.n	80086ee <frame_processing_rs422+0x23a>
 80086e6:	4b32      	ldr	r3, [pc, #200]	@ (80087b0 <frame_processing_rs422+0x2fc>)
 80086e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086ec:	e002      	b.n	80086f4 <frame_processing_rs422+0x240>
 80086ee:	4b31      	ldr	r3, [pc, #196]	@ (80087b4 <frame_processing_rs422+0x300>)
 80086f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 80086f4:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bfb8      	it	lt
 80086fc:	425b      	neglt	r3, r3
 80086fe:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008700:	4a2d      	ldr	r2, [pc, #180]	@ (80087b8 <frame_processing_rs422+0x304>)
 8008702:	fb82 1203 	smull	r1, r2, r2, r3
 8008706:	1152      	asrs	r2, r2, #5
 8008708:	17db      	asrs	r3, r3, #31
 800870a:	eba2 0c03 	sub.w	ip, r2, r3
						ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800870e:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 8008712:	2b00      	cmp	r3, #0
 8008714:	bfb8      	it	lt
 8008716:	425b      	neglt	r3, r3
 8008718:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800871a:	4a27      	ldr	r2, [pc, #156]	@ (80087b8 <frame_processing_rs422+0x304>)
 800871c:	fb82 1203 	smull	r1, r2, r2, r3
 8008720:	1151      	asrs	r1, r2, #5
 8008722:	17da      	asrs	r2, r3, #31
 8008724:	1a8a      	subs	r2, r1, r2
 8008726:	4611      	mov	r1, r2
 8008728:	2264      	movs	r2, #100	@ 0x64
 800872a:	fb01 f202 	mul.w	r2, r1, r2
 800872e:	1a9b      	subs	r3, r3, r2
 8008730:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008734:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 8008738:	2b00      	cmp	r3, #0
 800873a:	da03      	bge.n	8008744 <frame_processing_rs422+0x290>
 800873c:	4b1c      	ldr	r3, [pc, #112]	@ (80087b0 <frame_processing_rs422+0x2fc>)
 800873e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008742:	e002      	b.n	800874a <frame_processing_rs422+0x296>
 8008744:	4b1b      	ldr	r3, [pc, #108]	@ (80087b4 <frame_processing_rs422+0x300>)
 8008746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800874a:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfb8      	it	lt
 8008752:	425b      	neglt	r3, r3
 8008754:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008756:	4a18      	ldr	r2, [pc, #96]	@ (80087b8 <frame_processing_rs422+0x304>)
 8008758:	fb82 1203 	smull	r1, r2, r2, r3
 800875c:	1152      	asrs	r2, r2, #5
 800875e:	17db      	asrs	r3, r3, #31
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 8008766:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 800876a:	2b00      	cmp	r3, #0
 800876c:	bfb8      	it	lt
 800876e:	425b      	neglt	r3, r3
 8008770:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008772:	4a11      	ldr	r2, [pc, #68]	@ (80087b8 <frame_processing_rs422+0x304>)
 8008774:	fb82 1203 	smull	r1, r2, r2, r3
 8008778:	1151      	asrs	r1, r2, #5
 800877a:	17da      	asrs	r2, r3, #31
 800877c:	1a8a      	subs	r2, r1, r2
 800877e:	4611      	mov	r1, r2
 8008780:	2264      	movs	r2, #100	@ 0x64
 8008782:	fb01 f202 	mul.w	r2, r1, r2
 8008786:	1a9b      	subs	r3, r3, r2
 8008788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800878c:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 8008790:	2b00      	cmp	r3, #0
 8008792:	da13      	bge.n	80087bc <frame_processing_rs422+0x308>
 8008794:	4b06      	ldr	r3, [pc, #24]	@ (80087b0 <frame_processing_rs422+0x2fc>)
 8008796:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800879a:	e012      	b.n	80087c2 <frame_processing_rs422+0x30e>
 800879c:	20007abc 	.word	0x20007abc
 80087a0:	20007abe 	.word	0x20007abe
 80087a4:	08016010 	.word	0x08016010
 80087a8:	40004c00 	.word	0x40004c00
 80087ac:	40004400 	.word	0x40004400
 80087b0:	08016018 	.word	0x08016018
 80087b4:	0801601c 	.word	0x0801601c
 80087b8:	51eb851f 	.word	0x51eb851f
 80087bc:	4bb5      	ldr	r3, [pc, #724]	@ (8008a94 <frame_processing_rs422+0x5e0>)
 80087be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 80087c2:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	bfb8      	it	lt
 80087ca:	425b      	neglt	r3, r3
 80087cc:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80087ce:	4ab2      	ldr	r2, [pc, #712]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 80087d0:	fb82 1203 	smull	r1, r2, r2, r3
 80087d4:	1152      	asrs	r2, r2, #5
 80087d6:	17db      	asrs	r3, r3, #31
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 80087de:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bfb8      	it	lt
 80087e6:	425b      	neglt	r3, r3
 80087e8:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80087ea:	4aab      	ldr	r2, [pc, #684]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 80087ec:	fb82 1203 	smull	r1, r2, r2, r3
 80087f0:	1151      	asrs	r1, r2, #5
 80087f2:	17da      	asrs	r2, r3, #31
 80087f4:	1a8a      	subs	r2, r1, r2
 80087f6:	4611      	mov	r1, r2
 80087f8:	2264      	movs	r2, #100	@ 0x64
 80087fa:	fb01 f202 	mul.w	r2, r1, r2
 80087fe:	1a9b      	subs	r3, r3, r2
 8008800:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008804:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 8008808:	2b00      	cmp	r3, #0
 800880a:	da03      	bge.n	8008814 <frame_processing_rs422+0x360>
 800880c:	4ba3      	ldr	r3, [pc, #652]	@ (8008a9c <frame_processing_rs422+0x5e8>)
 800880e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008812:	e002      	b.n	800881a <frame_processing_rs422+0x366>
 8008814:	4b9f      	ldr	r3, [pc, #636]	@ (8008a94 <frame_processing_rs422+0x5e0>)
 8008816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800881a:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 800881e:	2b00      	cmp	r3, #0
 8008820:	bfb8      	it	lt
 8008822:	425b      	neglt	r3, r3
 8008824:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008826:	4a9c      	ldr	r2, [pc, #624]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 8008828:	fb82 1203 	smull	r1, r2, r2, r3
 800882c:	1152      	asrs	r2, r2, #5
 800882e:	17db      	asrs	r3, r3, #31
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 8008836:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 800883a:	2b00      	cmp	r3, #0
 800883c:	bfb8      	it	lt
 800883e:	425b      	neglt	r3, r3
 8008840:	b29b      	uxth	r3, r3
 8008842:	4619      	mov	r1, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008844:	4b94      	ldr	r3, [pc, #592]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 8008846:	fb83 2301 	smull	r2, r3, r3, r1
 800884a:	115a      	asrs	r2, r3, #5
 800884c:	17cb      	asrs	r3, r1, #31
 800884e:	1ad6      	subs	r6, r2, r3
 8008850:	2364      	movs	r3, #100	@ 0x64
 8008852:	fb06 f303 	mul.w	r3, r6, r3
 8008856:	1ace      	subs	r6, r1, r3
 8008858:	f8b7 35c0 	ldrh.w	r3, [r7, #1472]	@ 0x5c0
 800885c:	4a8e      	ldr	r2, [pc, #568]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 800885e:	fba2 2303 	umull	r2, r3, r2, r3
 8008862:	095b      	lsrs	r3, r3, #5
 8008864:	b29b      	uxth	r3, r3
 8008866:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800886a:	f8b7 15c0 	ldrh.w	r1, [r7, #1472]	@ 0x5c0
 800886e:	4b8a      	ldr	r3, [pc, #552]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 8008870:	fba3 2301 	umull	r2, r3, r3, r1
 8008874:	095a      	lsrs	r2, r3, #5
 8008876:	2364      	movs	r3, #100	@ 0x64
 8008878:	fb02 f303 	mul.w	r3, r2, r3
 800887c:	1acb      	subs	r3, r1, r3
 800887e:	b29b      	uxth	r3, r3
 8008880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008884:	f8b7 25be 	ldrh.w	r2, [r7, #1470]	@ 0x5be
 8008888:	4b83      	ldr	r3, [pc, #524]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 800888a:	fba3 2302 	umull	r2, r3, r3, r2
 800888e:	095b      	lsrs	r3, r3, #5
 8008890:	b29b      	uxth	r3, r3
 8008892:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008896:	f8b7 15be 	ldrh.w	r1, [r7, #1470]	@ 0x5be
 800889a:	4b7f      	ldr	r3, [pc, #508]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 800889c:	fba3 2301 	umull	r2, r3, r3, r1
 80088a0:	095a      	lsrs	r2, r3, #5
 80088a2:	2364      	movs	r3, #100	@ 0x64
 80088a4:	fb02 f303 	mul.w	r3, r2, r3
 80088a8:	1acb      	subs	r3, r1, r3
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088ae:	f8b7 25bc 	ldrh.w	r2, [r7, #1468]	@ 0x5bc
 80088b2:	4b79      	ldr	r3, [pc, #484]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 80088b4:	fba3 2302 	umull	r2, r3, r3, r2
 80088b8:	095b      	lsrs	r3, r3, #5
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088be:	f8b7 15bc 	ldrh.w	r1, [r7, #1468]	@ 0x5bc
 80088c2:	4b75      	ldr	r3, [pc, #468]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 80088c4:	fba3 2301 	umull	r2, r3, r3, r1
 80088c8:	095a      	lsrs	r2, r3, #5
 80088ca:	2364      	movs	r3, #100	@ 0x64
 80088cc:	fb02 f303 	mul.w	r3, r2, r3
 80088d0:	1acb      	subs	r3, r1, r3
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80088d6:	f8b7 25ba 	ldrh.w	r2, [r7, #1466]	@ 0x5ba
 80088da:	4b6f      	ldr	r3, [pc, #444]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 80088dc:	fba3 2302 	umull	r2, r3, r3, r2
 80088e0:	095b      	lsrs	r3, r3, #5
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80088e6:	f8b7 15ba 	ldrh.w	r1, [r7, #1466]	@ 0x5ba
 80088ea:	4b6b      	ldr	r3, [pc, #428]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 80088ec:	fba3 2301 	umull	r2, r3, r3, r1
 80088f0:	095a      	lsrs	r2, r3, #5
 80088f2:	2364      	movs	r3, #100	@ 0x64
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	1acb      	subs	r3, r1, r3
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088fe:	f8b7 25b8 	ldrh.w	r2, [r7, #1464]	@ 0x5b8
 8008902:	4b65      	ldr	r3, [pc, #404]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 8008904:	fba3 2302 	umull	r2, r3, r3, r2
 8008908:	095b      	lsrs	r3, r3, #5
 800890a:	b29b      	uxth	r3, r3
 800890c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800890e:	f8b7 15b8 	ldrh.w	r1, [r7, #1464]	@ 0x5b8
 8008912:	4b61      	ldr	r3, [pc, #388]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 8008914:	fba3 2301 	umull	r2, r3, r3, r1
 8008918:	095a      	lsrs	r2, r3, #5
 800891a:	2364      	movs	r3, #100	@ 0x64
 800891c:	fb02 f303 	mul.w	r3, r2, r3
 8008920:	1acb      	subs	r3, r1, r3
 8008922:	b29b      	uxth	r3, r3
 8008924:	667b      	str	r3, [r7, #100]	@ 0x64
 8008926:	f8b7 25b6 	ldrh.w	r2, [r7, #1462]	@ 0x5b6
 800892a:	4b5b      	ldr	r3, [pc, #364]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 800892c:	fba3 2302 	umull	r2, r3, r3, r2
 8008930:	095b      	lsrs	r3, r3, #5
 8008932:	b29b      	uxth	r3, r3
 8008934:	663b      	str	r3, [r7, #96]	@ 0x60
 8008936:	f8b7 15b6 	ldrh.w	r1, [r7, #1462]	@ 0x5b6
 800893a:	4b57      	ldr	r3, [pc, #348]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 800893c:	fba3 2301 	umull	r2, r3, r3, r1
 8008940:	095a      	lsrs	r2, r3, #5
 8008942:	2364      	movs	r3, #100	@ 0x64
 8008944:	fb02 f303 	mul.w	r3, r2, r3
 8008948:	1acb      	subs	r3, r1, r3
 800894a:	b29b      	uxth	r3, r3
 800894c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800894e:	f8b7 25b4 	ldrh.w	r2, [r7, #1460]	@ 0x5b4
 8008952:	4b51      	ldr	r3, [pc, #324]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 8008954:	fba3 2302 	umull	r2, r3, r3, r2
 8008958:	095b      	lsrs	r3, r3, #5
 800895a:	b29b      	uxth	r3, r3
 800895c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800895e:	f8b7 15b4 	ldrh.w	r1, [r7, #1460]	@ 0x5b4
 8008962:	4b4d      	ldr	r3, [pc, #308]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 8008964:	fba3 2301 	umull	r2, r3, r3, r1
 8008968:	095a      	lsrs	r2, r3, #5
 800896a:	2364      	movs	r3, #100	@ 0x64
 800896c:	fb02 f303 	mul.w	r3, r2, r3
 8008970:	1acb      	subs	r3, r1, r3
 8008972:	b29b      	uxth	r3, r3
 8008974:	461d      	mov	r5, r3
 8008976:	f8b7 25b2 	ldrh.w	r2, [r7, #1458]	@ 0x5b2
 800897a:	4b47      	ldr	r3, [pc, #284]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 800897c:	fba3 2302 	umull	r2, r3, r3, r2
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	b29b      	uxth	r3, r3
 8008984:	461c      	mov	r4, r3
 8008986:	f8b7 15b2 	ldrh.w	r1, [r7, #1458]	@ 0x5b2
 800898a:	4b43      	ldr	r3, [pc, #268]	@ (8008a98 <frame_processing_rs422+0x5e4>)
 800898c:	fba3 2301 	umull	r2, r3, r3, r1
 8008990:	095a      	lsrs	r2, r3, #5
 8008992:	2364      	movs	r3, #100	@ 0x64
 8008994:	fb02 f303 	mul.w	r3, r2, r3
 8008998:	1acb      	subs	r3, r1, r3
 800899a:	b29b      	uxth	r3, r3
 800899c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 80089a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80089a2:	9418      	str	r4, [sp, #96]	@ 0x60
 80089a4:	9517      	str	r5, [sp, #92]	@ 0x5c
 80089a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089a8:	9216      	str	r2, [sp, #88]	@ 0x58
 80089aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089ac:	9215      	str	r2, [sp, #84]	@ 0x54
 80089ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80089b0:	9214      	str	r2, [sp, #80]	@ 0x50
 80089b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80089b4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80089b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80089b8:	9212      	str	r2, [sp, #72]	@ 0x48
 80089ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089bc:	9211      	str	r2, [sp, #68]	@ 0x44
 80089be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80089c0:	9210      	str	r2, [sp, #64]	@ 0x40
 80089c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80089c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80089c6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80089c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80089ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80089cc:	920d      	str	r2, [sp, #52]	@ 0x34
 80089ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089d2:	920c      	str	r2, [sp, #48]	@ 0x30
 80089d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80089d8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80089da:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80089de:	920a      	str	r2, [sp, #40]	@ 0x28
 80089e0:	9609      	str	r6, [sp, #36]	@ 0x24
 80089e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089e6:	9308      	str	r3, [sp, #32]
 80089e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089ec:	9307      	str	r3, [sp, #28]
 80089ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80089f2:	9306      	str	r3, [sp, #24]
 80089f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089f8:	9305      	str	r3, [sp, #20]
 80089fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089fe:	9304      	str	r3, [sp, #16]
 8008a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a04:	9303      	str	r3, [sp, #12]
 8008a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a0a:	9302      	str	r3, [sp, #8]
 8008a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	4663      	mov	r3, ip
 8008a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a1e:	4920      	ldr	r1, [pc, #128]	@ (8008aa0 <frame_processing_rs422+0x5ec>)
 8008a20:	f008 fc34 	bl	801128c <siprintf>
						bat0 / 100, bat0 % 100, bat1 / 100, bat1 % 100,
						bat2 / 100, bat2 % 100, bat3 / 100, bat3 % 100,
						vin / 100, vin % 100, iin / 100, iin % 100,
						vout / 100, vout % 100, iout / 100, iout % 100);

				if(auto_report_enabled){
 8008a24:	4b1f      	ldr	r3, [pc, #124]	@ (8008aa4 <frame_processing_rs422+0x5f0>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d006      	beq.n	8008a3c <frame_processing_rs422+0x588>
					Uart_sendstring(UART4, buffer_0x08);
 8008a2e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008a32:	4619      	mov	r1, r3
 8008a34:	481c      	ldr	r0, [pc, #112]	@ (8008aa8 <frame_processing_rs422+0x5f4>)
 8008a36:	f7f9 fadf 	bl	8001ff8 <Uart_sendstring>
 8008a3a:	e005      	b.n	8008a48 <frame_processing_rs422+0x594>
				}else{
					Uart_sendstring(USART2, buffer_0x08);
 8008a3c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008a40:	4619      	mov	r1, r3
 8008a42:	481a      	ldr	r0, [pc, #104]	@ (8008aac <frame_processing_rs422+0x5f8>)
 8008a44:	f7f9 fad8 	bl	8001ff8 <Uart_sendstring>
				}
			}
			receive_pmuFlag = 1;
 8008a48:	4b19      	ldr	r3, [pc, #100]	@ (8008ab0 <frame_processing_rs422+0x5fc>)
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	701a      	strb	r2, [r3, #0]

			for (int i = 1; i <= 24; i++) {
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8008a54:	e015      	b.n	8008a82 <frame_processing_rs422+0x5ce>
			    nextBuffer[i + 110] = fsp_pkt->payload[i]; //97   pay1    + 98 pay2    120    pay24
 8008a56:	4b17      	ldr	r3, [pc, #92]	@ (8008ab4 <frame_processing_rs422+0x600>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8008a5e:	336e      	adds	r3, #110	@ 0x6e
 8008a60:	4413      	add	r3, r2
 8008a62:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 8008a66:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 8008a6a:	6811      	ldr	r1, [r2, #0]
 8008a6c:	f8d7 2604 	ldr.w	r2, [r7, #1540]	@ 0x604
 8008a70:	440a      	add	r2, r1
 8008a72:	3205      	adds	r2, #5
 8008a74:	7812      	ldrb	r2, [r2, #0]
 8008a76:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= 24; i++) {
 8008a78:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8008a82:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8008a86:	2b18      	cmp	r3, #24
 8008a88:	dde5      	ble.n	8008a56 <frame_processing_rs422+0x5a2>
			}
//			Uart_sendstring(UART4, "\nPMU_Collected\r\n");

			disconnect_counter_pmu = 0;
 8008a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab8 <frame_processing_rs422+0x604>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]

	    }
	    break;
 8008a90:	f001 b869 	b.w	8009b66 <frame_processing_rs422+0x16b2>
 8008a94:	0801601c 	.word	0x0801601c
 8008a98:	51eb851f 	.word	0x51eb851f
 8008a9c:	08016018 	.word	0x08016018
 8008aa0:	08016020 	.word	0x08016020
 8008aa4:	20007abc 	.word	0x20007abc
 8008aa8:	40004c00 	.word	0x40004c00
 8008aac:	40004400 	.word	0x40004400
 8008ab0:	200000e9 	.word	0x200000e9
 8008ab4:	20002158 	.word	0x20002158
 8008ab8:	20007991 	.word	0x20007991

		case 0x06:
		{
			if(auto_report_enabled || rf_report_enable){
 8008abc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae8 <frame_processing_rs422+0x634>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d105      	bne.n	8008ad2 <frame_processing_rs422+0x61e>
 8008ac6:	4b09      	ldr	r3, [pc, #36]	@ (8008aec <frame_processing_rs422+0x638>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 8307 	beq.w	80090e0 <frame_processing_rs422+0xc2c>
				if(auto_report_enabled){
 8008ad2:	4b05      	ldr	r3, [pc, #20]	@ (8008ae8 <frame_processing_rs422+0x634>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00d      	beq.n	8008af8 <frame_processing_rs422+0x644>
					Uart_sendstring(UART4, "\nPDU:\n");
 8008adc:	4904      	ldr	r1, [pc, #16]	@ (8008af0 <frame_processing_rs422+0x63c>)
 8008ade:	4805      	ldr	r0, [pc, #20]	@ (8008af4 <frame_processing_rs422+0x640>)
 8008ae0:	f7f9 fa8a 	bl	8001ff8 <Uart_sendstring>
 8008ae4:	e012      	b.n	8008b0c <frame_processing_rs422+0x658>
 8008ae6:	bf00      	nop
 8008ae8:	20007abc 	.word	0x20007abc
 8008aec:	20007abe 	.word	0x20007abe
 8008af0:	08016110 	.word	0x08016110
 8008af4:	40004c00 	.word	0x40004c00
				}else{
					Uart_sendstring(USART2, "\nPDU:\n");
 8008af8:	4902      	ldr	r1, [pc, #8]	@ (8008b04 <frame_processing_rs422+0x650>)
 8008afa:	4803      	ldr	r0, [pc, #12]	@ (8008b08 <frame_processing_rs422+0x654>)
 8008afc:	f7f9 fa7c 	bl	8001ff8 <Uart_sendstring>
 8008b00:	e004      	b.n	8008b0c <frame_processing_rs422+0x658>
 8008b02:	bf00      	nop
 8008b04:	08016110 	.word	0x08016110
 8008b08:	40004400 	.word	0x40004400
				}
				uint8_t tec1buck_status = fsp_pkt->payload[1];
 8008b0c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b10:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	799b      	ldrb	r3, [r3, #6]
 8008b18:	f887 35b1 	strb.w	r3, [r7, #1457]	@ 0x5b1
				uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 8008b1c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b20:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	79db      	ldrb	r3, [r3, #7]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	b21a      	sxth	r2, r3
 8008b2c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b30:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	7a1b      	ldrb	r3, [r3, #8]
 8008b38:	b21b      	sxth	r3, r3
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	b21b      	sxth	r3, r3
 8008b3e:	f8a7 35ae 	strh.w	r3, [r7, #1454]	@ 0x5ae

				uint8_t tec2buck_status = fsp_pkt->payload[4];
 8008b42:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b46:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	7a5b      	ldrb	r3, [r3, #9]
 8008b4e:	f887 35ad 	strb.w	r3, [r7, #1453]	@ 0x5ad
				uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 8008b52:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b56:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	7a9b      	ldrb	r3, [r3, #10]
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	b21a      	sxth	r2, r3
 8008b62:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b66:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	7adb      	ldrb	r3, [r3, #11]
 8008b6e:	b21b      	sxth	r3, r3
 8008b70:	4313      	orrs	r3, r2
 8008b72:	b21b      	sxth	r3, r3
 8008b74:	f8a7 35aa 	strh.w	r3, [r7, #1450]	@ 0x5aa

				uint8_t tec3buck_status = fsp_pkt->payload[7];
 8008b78:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b7c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	7b1b      	ldrb	r3, [r3, #12]
 8008b84:	f887 35a9 	strb.w	r3, [r7, #1449]	@ 0x5a9
				uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 8008b88:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b8c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	7b5b      	ldrb	r3, [r3, #13]
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	b21a      	sxth	r2, r3
 8008b98:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b9c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	7b9b      	ldrb	r3, [r3, #14]
 8008ba4:	b21b      	sxth	r3, r3
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	b21b      	sxth	r3, r3
 8008baa:	f8a7 35a6 	strh.w	r3, [r7, #1446]	@ 0x5a6

				uint8_t tec4buck_status = fsp_pkt->payload[10];
 8008bae:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008bb2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	7bdb      	ldrb	r3, [r3, #15]
 8008bba:	f887 35a5 	strb.w	r3, [r7, #1445]	@ 0x5a5
				uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 8008bbe:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008bc2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	7c1b      	ldrb	r3, [r3, #16]
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	b21a      	sxth	r2, r3
 8008bce:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008bd2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	7c5b      	ldrb	r3, [r3, #17]
 8008bda:	b21b      	sxth	r3, r3
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	b21b      	sxth	r3, r3
 8008be0:	f8a7 35a2 	strh.w	r3, [r7, #1442]	@ 0x5a2

				uint8_t mcubuck_status = fsp_pkt->payload[13];
 8008be4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008be8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	7c9b      	ldrb	r3, [r3, #18]
 8008bf0:	f887 35a1 	strb.w	r3, [r7, #1441]	@ 0x5a1
				uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 8008bf4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008bf8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	7cdb      	ldrb	r3, [r3, #19]
 8008c00:	021b      	lsls	r3, r3, #8
 8008c02:	b21a      	sxth	r2, r3
 8008c04:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c08:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	7d1b      	ldrb	r3, [r3, #20]
 8008c10:	b21b      	sxth	r3, r3
 8008c12:	4313      	orrs	r3, r2
 8008c14:	b21b      	sxth	r3, r3
 8008c16:	f8a7 359e 	strh.w	r3, [r7, #1438]	@ 0x59e

				uint8_t ledbuck_status = fsp_pkt->payload[16];
 8008c1a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c1e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	7d5b      	ldrb	r3, [r3, #21]
 8008c26:	f887 359d 	strb.w	r3, [r7, #1437]	@ 0x59d
				uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 8008c2a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c2e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	7d9b      	ldrb	r3, [r3, #22]
 8008c36:	021b      	lsls	r3, r3, #8
 8008c38:	b21a      	sxth	r2, r3
 8008c3a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c3e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	7ddb      	ldrb	r3, [r3, #23]
 8008c46:	b21b      	sxth	r3, r3
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	b21b      	sxth	r3, r3
 8008c4c:	f8a7 359a 	strh.w	r3, [r7, #1434]	@ 0x59a

				uint8_t cm4buck_status = fsp_pkt->payload[19];
 8008c50:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c54:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	7e1b      	ldrb	r3, [r3, #24]
 8008c5c:	f887 3599 	strb.w	r3, [r7, #1433]	@ 0x599
				uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 8008c60:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c64:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	7e5b      	ldrb	r3, [r3, #25]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	b21a      	sxth	r2, r3
 8008c70:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c74:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	7e9b      	ldrb	r3, [r3, #26]
 8008c7c:	b21b      	sxth	r3, r3
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	b21b      	sxth	r3, r3
 8008c82:	f8a7 3596 	strh.w	r3, [r7, #1430]	@ 0x596

				uint8_t tec1_status = fsp_pkt->payload[22];
 8008c86:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c8a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	7edb      	ldrb	r3, [r3, #27]
 8008c92:	f887 3595 	strb.w	r3, [r7, #1429]	@ 0x595
				uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 8008c96:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c9a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	7f1b      	ldrb	r3, [r3, #28]
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	b21a      	sxth	r2, r3
 8008ca6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008caa:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	7f5b      	ldrb	r3, [r3, #29]
 8008cb2:	b21b      	sxth	r3, r3
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	b21b      	sxth	r3, r3
 8008cb8:	f8a7 3592 	strh.w	r3, [r7, #1426]	@ 0x592

				uint8_t tec2_status = fsp_pkt->payload[25];
 8008cbc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008cc0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	7f9b      	ldrb	r3, [r3, #30]
 8008cc8:	f887 3591 	strb.w	r3, [r7, #1425]	@ 0x591
				uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 8008ccc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008cd0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	7fdb      	ldrb	r3, [r3, #31]
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	b21a      	sxth	r2, r3
 8008cdc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ce0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008cea:	b21b      	sxth	r3, r3
 8008cec:	4313      	orrs	r3, r2
 8008cee:	b21b      	sxth	r3, r3
 8008cf0:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e

				uint8_t tec3_status = fsp_pkt->payload[28];
 8008cf4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008cf8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008d02:	f887 358d 	strb.w	r3, [r7, #1421]	@ 0x58d
				uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 8008d06:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d0a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008d14:	021b      	lsls	r3, r3, #8
 8008d16:	b21a      	sxth	r2, r3
 8008d18:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d1c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008d26:	b21b      	sxth	r3, r3
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	b21b      	sxth	r3, r3
 8008d2c:	f8a7 358a 	strh.w	r3, [r7, #1418]	@ 0x58a

				uint8_t tec4_status = fsp_pkt->payload[31];
 8008d30:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d34:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008d3e:	f887 3589 	strb.w	r3, [r7, #1417]	@ 0x589
				uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 8008d42:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d46:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	b21a      	sxth	r2, r3
 8008d54:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d58:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8008d62:	b21b      	sxth	r3, r3
 8008d64:	4313      	orrs	r3, r2
 8008d66:	b21b      	sxth	r3, r3
 8008d68:	f8a7 3586 	strh.w	r3, [r7, #1414]	@ 0x586

				uint8_t copc_status = fsp_pkt->payload[34];
 8008d6c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d70:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8008d7a:	f887 3585 	strb.w	r3, [r7, #1413]	@ 0x585
				uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 8008d7e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d82:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	b21a      	sxth	r2, r3
 8008d90:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d94:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008d9e:	b21b      	sxth	r3, r3
 8008da0:	4313      	orrs	r3, r2
 8008da2:	b21b      	sxth	r3, r3
 8008da4:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582

				uint8_t iou_status = fsp_pkt->payload[37];
 8008da8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dac:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8008db6:	f887 3581 	strb.w	r3, [r7, #1409]	@ 0x581
				uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 8008dba:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dbe:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	b21a      	sxth	r2, r3
 8008dcc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dd0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008dda:	b21b      	sxth	r3, r3
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	b21b      	sxth	r3, r3
 8008de0:	f8a7 357e 	strh.w	r3, [r7, #1406]	@ 0x57e

				uint8_t rgb_status = fsp_pkt->payload[40];
 8008de4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008de8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008df2:	f887 357d 	strb.w	r3, [r7, #1405]	@ 0x57d
				uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 8008df6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dfa:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8008e04:	021b      	lsls	r3, r3, #8
 8008e06:	b21a      	sxth	r2, r3
 8008e08:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e0c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008e16:	b21b      	sxth	r3, r3
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	b21b      	sxth	r3, r3
 8008e1c:	f8a7 357a 	strh.w	r3, [r7, #1402]	@ 0x57a

				uint8_t ir_status = fsp_pkt->payload[43];
 8008e20:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e24:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e2e:	f887 3579 	strb.w	r3, [r7, #1401]	@ 0x579
				uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 8008e32:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e36:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008e40:	021b      	lsls	r3, r3, #8
 8008e42:	b21a      	sxth	r2, r3
 8008e44:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e48:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008e52:	b21b      	sxth	r3, r3
 8008e54:	4313      	orrs	r3, r2
 8008e56:	b21b      	sxth	r3, r3
 8008e58:	f8a7 3576 	strh.w	r3, [r7, #1398]	@ 0x576

				uint8_t cm4_status = fsp_pkt->payload[46];
 8008e5c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e60:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008e6a:	f887 3575 	strb.w	r3, [r7, #1397]	@ 0x575
				uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 8008e6e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e72:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	b21a      	sxth	r2, r3
 8008e80:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e84:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e8e:	b21b      	sxth	r3, r3
 8008e90:	4313      	orrs	r3, r2
 8008e92:	b21b      	sxth	r3, r3
 8008e94:	f8a7 3572 	strh.w	r3, [r7, #1394]	@ 0x572

				uint8_t vin_status = fsp_pkt->payload[49];
 8008e98:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e9c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008ea6:	f887 3571 	strb.w	r3, [r7, #1393]	@ 0x571
				uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 8008eaa:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008eae:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8008eb8:	021b      	lsls	r3, r3, #8
 8008eba:	b21a      	sxth	r2, r3
 8008ebc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ec0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008eca:	b21b      	sxth	r3, r3
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	b21b      	sxth	r3, r3
 8008ed0:	f8a7 356e 	strh.w	r3, [r7, #1390]	@ 0x56e

				uint8_t vbus_status = fsp_pkt->payload[52];
 8008ed4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ed8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008ee2:	f887 356d 	strb.w	r3, [r7, #1389]	@ 0x56d
				uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 8008ee6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008eea:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008ef4:	021b      	lsls	r3, r3, #8
 8008ef6:	b21a      	sxth	r2, r3
 8008ef8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008efc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008f06:	b21b      	sxth	r3, r3
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	f8a7 356a 	strh.w	r3, [r7, #1386]	@ 0x56a


						char buffer_0x06[1000];
						sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 8008f10:	f897 e5b1 	ldrb.w	lr, [r7, #1457]	@ 0x5b1
 8008f14:	f8b7 85ae 	ldrh.w	r8, [r7, #1454]	@ 0x5ae
 8008f18:	f897 35ad 	ldrb.w	r3, [r7, #1453]	@ 0x5ad
 8008f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f20:	f8b7 25aa 	ldrh.w	r2, [r7, #1450]	@ 0x5aa
 8008f24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008f28:	f897 15a9 	ldrb.w	r1, [r7, #1449]	@ 0x5a9
 8008f2c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8008f30:	f8b7 05a6 	ldrh.w	r0, [r7, #1446]	@ 0x5a6
 8008f34:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 8008f38:	f897 45a5 	ldrb.w	r4, [r7, #1445]	@ 0x5a5
 8008f3c:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8008f40:	f8b7 55a2 	ldrh.w	r5, [r7, #1442]	@ 0x5a2
 8008f44:	f8c7 509c 	str.w	r5, [r7, #156]	@ 0x9c
 8008f48:	f897 65a1 	ldrb.w	r6, [r7, #1441]	@ 0x5a1
 8008f4c:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 8008f50:	f8b7 c59e 	ldrh.w	ip, [r7, #1438]	@ 0x59e
 8008f54:	4663      	mov	r3, ip
 8008f56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f5a:	f897 c59d 	ldrb.w	ip, [r7, #1437]	@ 0x59d
 8008f5e:	4662      	mov	r2, ip
 8008f60:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8008f64:	f8b7 c59a 	ldrh.w	ip, [r7, #1434]	@ 0x59a
 8008f68:	4661      	mov	r1, ip
 8008f6a:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8008f6e:	f897 c599 	ldrb.w	ip, [r7, #1433]	@ 0x599
 8008f72:	4660      	mov	r0, ip
 8008f74:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8008f78:	f8b7 c596 	ldrh.w	ip, [r7, #1430]	@ 0x596
 8008f7c:	4664      	mov	r4, ip
 8008f7e:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
 8008f82:	f897 c595 	ldrb.w	ip, [r7, #1429]	@ 0x595
 8008f86:	4665      	mov	r5, ip
 8008f88:	f8c7 5080 	str.w	r5, [r7, #128]	@ 0x80
 8008f8c:	f8b7 c592 	ldrh.w	ip, [r7, #1426]	@ 0x592
 8008f90:	4666      	mov	r6, ip
 8008f92:	67fe      	str	r6, [r7, #124]	@ 0x7c
 8008f94:	f897 c591 	ldrb.w	ip, [r7, #1425]	@ 0x591
 8008f98:	4663      	mov	r3, ip
 8008f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f9c:	f8b7 c58e 	ldrh.w	ip, [r7, #1422]	@ 0x58e
 8008fa0:	4662      	mov	r2, ip
 8008fa2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008fa4:	f897 c58d 	ldrb.w	ip, [r7, #1421]	@ 0x58d
 8008fa8:	4661      	mov	r1, ip
 8008faa:	6739      	str	r1, [r7, #112]	@ 0x70
 8008fac:	f8b7 c58a 	ldrh.w	ip, [r7, #1418]	@ 0x58a
 8008fb0:	4660      	mov	r0, ip
 8008fb2:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8008fb4:	f897 c589 	ldrb.w	ip, [r7, #1417]	@ 0x589
 8008fb8:	4664      	mov	r4, ip
 8008fba:	66bc      	str	r4, [r7, #104]	@ 0x68
 8008fbc:	f8b7 c586 	ldrh.w	ip, [r7, #1414]	@ 0x586
 8008fc0:	4665      	mov	r5, ip
 8008fc2:	667d      	str	r5, [r7, #100]	@ 0x64
 8008fc4:	f897 c585 	ldrb.w	ip, [r7, #1413]	@ 0x585
 8008fc8:	4666      	mov	r6, ip
 8008fca:	663e      	str	r6, [r7, #96]	@ 0x60
 8008fcc:	f8b7 c582 	ldrh.w	ip, [r7, #1410]	@ 0x582
 8008fd0:	4663      	mov	r3, ip
 8008fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fd4:	f897 c581 	ldrb.w	ip, [r7, #1409]	@ 0x581
 8008fd8:	4662      	mov	r2, ip
 8008fda:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008fdc:	f8b7 c57e 	ldrh.w	ip, [r7, #1406]	@ 0x57e
 8008fe0:	4661      	mov	r1, ip
 8008fe2:	6579      	str	r1, [r7, #84]	@ 0x54
 8008fe4:	f897 c57d 	ldrb.w	ip, [r7, #1405]	@ 0x57d
 8008fe8:	4660      	mov	r0, ip
 8008fea:	6538      	str	r0, [r7, #80]	@ 0x50
 8008fec:	f8b7 c57a 	ldrh.w	ip, [r7, #1402]	@ 0x57a
 8008ff0:	4664      	mov	r4, ip
 8008ff2:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8008ff4:	f897 c579 	ldrb.w	ip, [r7, #1401]	@ 0x579
 8008ff8:	4665      	mov	r5, ip
 8008ffa:	64bd      	str	r5, [r7, #72]	@ 0x48
 8008ffc:	f8b7 6576 	ldrh.w	r6, [r7, #1398]	@ 0x576
 8009000:	f897 5575 	ldrb.w	r5, [r7, #1397]	@ 0x575
 8009004:	f8b7 4572 	ldrh.w	r4, [r7, #1394]	@ 0x572
 8009008:	f897 0571 	ldrb.w	r0, [r7, #1393]	@ 0x571
 800900c:	f8b7 156e 	ldrh.w	r1, [r7, #1390]	@ 0x56e
 8009010:	f897 256d 	ldrb.w	r2, [r7, #1389]	@ 0x56d
 8009014:	f8b7 356a 	ldrh.w	r3, [r7, #1386]	@ 0x56a
 8009018:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 800901c:	9321      	str	r3, [sp, #132]	@ 0x84
 800901e:	9220      	str	r2, [sp, #128]	@ 0x80
 8009020:	911f      	str	r1, [sp, #124]	@ 0x7c
 8009022:	901e      	str	r0, [sp, #120]	@ 0x78
 8009024:	941d      	str	r4, [sp, #116]	@ 0x74
 8009026:	951c      	str	r5, [sp, #112]	@ 0x70
 8009028:	961b      	str	r6, [sp, #108]	@ 0x6c
 800902a:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 800902c:	951a      	str	r5, [sp, #104]	@ 0x68
 800902e:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8009030:	9419      	str	r4, [sp, #100]	@ 0x64
 8009032:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009034:	9018      	str	r0, [sp, #96]	@ 0x60
 8009036:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009038:	9117      	str	r1, [sp, #92]	@ 0x5c
 800903a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800903c:	9216      	str	r2, [sp, #88]	@ 0x58
 800903e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009040:	9315      	str	r3, [sp, #84]	@ 0x54
 8009042:	6e3e      	ldr	r6, [r7, #96]	@ 0x60
 8009044:	9614      	str	r6, [sp, #80]	@ 0x50
 8009046:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 8009048:	9513      	str	r5, [sp, #76]	@ 0x4c
 800904a:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 800904c:	9412      	str	r4, [sp, #72]	@ 0x48
 800904e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009050:	9011      	str	r0, [sp, #68]	@ 0x44
 8009052:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009054:	9110      	str	r1, [sp, #64]	@ 0x40
 8009056:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009058:	920f      	str	r2, [sp, #60]	@ 0x3c
 800905a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800905c:	930e      	str	r3, [sp, #56]	@ 0x38
 800905e:	6ffe      	ldr	r6, [r7, #124]	@ 0x7c
 8009060:	960d      	str	r6, [sp, #52]	@ 0x34
 8009062:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 8009066:	950c      	str	r5, [sp, #48]	@ 0x30
 8009068:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800906c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800906e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8009072:	900a      	str	r0, [sp, #40]	@ 0x28
 8009074:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8009078:	9109      	str	r1, [sp, #36]	@ 0x24
 800907a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800907e:	9208      	str	r2, [sp, #32]
 8009080:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009084:	9307      	str	r3, [sp, #28]
 8009086:	f8d7 6098 	ldr.w	r6, [r7, #152]	@ 0x98
 800908a:	9606      	str	r6, [sp, #24]
 800908c:	f8d7 509c 	ldr.w	r5, [r7, #156]	@ 0x9c
 8009090:	9505      	str	r5, [sp, #20]
 8009092:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8009096:	9404      	str	r4, [sp, #16]
 8009098:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800909c:	9003      	str	r0, [sp, #12]
 800909e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80090a2:	9102      	str	r1, [sp, #8]
 80090a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80090a8:	9201      	str	r2, [sp, #4]
 80090aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	4643      	mov	r3, r8
 80090b2:	4672      	mov	r2, lr
 80090b4:	4928      	ldr	r1, [pc, #160]	@ (8009158 <frame_processing_rs422+0xca4>)
 80090b6:	4660      	mov	r0, ip
 80090b8:	f008 f8e8 	bl	801128c <siprintf>
							cm4_status, cm4_current,
							vin_status, vin_voltage,
							vbus_status, vbus_voltage);


					if(auto_report_enabled){
 80090bc:	4b27      	ldr	r3, [pc, #156]	@ (800915c <frame_processing_rs422+0xca8>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d006      	beq.n	80090d4 <frame_processing_rs422+0xc20>
							Uart_sendstring(UART4, buffer_0x06);
 80090c6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80090ca:	4619      	mov	r1, r3
 80090cc:	4824      	ldr	r0, [pc, #144]	@ (8009160 <frame_processing_rs422+0xcac>)
 80090ce:	f7f8 ff93 	bl	8001ff8 <Uart_sendstring>
 80090d2:	e005      	b.n	80090e0 <frame_processing_rs422+0xc2c>
					}else{
							Uart_sendstring(USART2, buffer_0x06);
 80090d4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80090d8:	4619      	mov	r1, r3
 80090da:	4822      	ldr	r0, [pc, #136]	@ (8009164 <frame_processing_rs422+0xcb0>)
 80090dc:	f7f8 ff8c 	bl	8001ff8 <Uart_sendstring>
					}
			}

					receive_pduFlag = 1;
 80090e0:	4b21      	ldr	r3, [pc, #132]	@ (8009168 <frame_processing_rs422+0xcb4>)
 80090e2:	2201      	movs	r2, #1
 80090e4:	701a      	strb	r2, [r3, #0]

					for (int i = 1; i <= 54; i++) {
 80090e6:	2301      	movs	r3, #1
 80090e8:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 80090ec:	e015      	b.n	800911a <frame_processing_rs422+0xc66>
					    nextBuffer[i + 56] = fsp_pkt->payload[i]; //43   pay1    + 44  pay2        96-<54
 80090ee:	4b1f      	ldr	r3, [pc, #124]	@ (800916c <frame_processing_rs422+0xcb8>)
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 80090f6:	3338      	adds	r3, #56	@ 0x38
 80090f8:	4413      	add	r3, r2
 80090fa:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 80090fe:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 8009102:	6811      	ldr	r1, [r2, #0]
 8009104:	f8d7 2600 	ldr.w	r2, [r7, #1536]	@ 0x600
 8009108:	440a      	add	r2, r1
 800910a:	3205      	adds	r2, #5
 800910c:	7812      	ldrb	r2, [r2, #0]
 800910e:	701a      	strb	r2, [r3, #0]
					for (int i = 1; i <= 54; i++) {
 8009110:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8009114:	3301      	adds	r3, #1
 8009116:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 800911a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 800911e:	2b36      	cmp	r3, #54	@ 0x36
 8009120:	dde5      	ble.n	80090ee <frame_processing_rs422+0xc3a>
					}
//					Uart_sendstring(UART4, "\nPDU_Collected\r\n");

					disconnect_counter_pdu = 0;
 8009122:	4b13      	ldr	r3, [pc, #76]	@ (8009170 <frame_processing_rs422+0xcbc>)
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009128:	f000 bd1d 	b.w	8009b66 <frame_processing_rs422+0x16b2>


		case 0x13:
		{
			if(auto_report_enabled || rf_report_enable){
 800912c:	4b0b      	ldr	r3, [pc, #44]	@ (800915c <frame_processing_rs422+0xca8>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d105      	bne.n	8009142 <frame_processing_rs422+0xc8e>
 8009136:	4b0f      	ldr	r3, [pc, #60]	@ (8009174 <frame_processing_rs422+0xcc0>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 84e4 	beq.w	8009b0a <frame_processing_rs422+0x1656>
				if(auto_report_enabled){
 8009142:	4b06      	ldr	r3, [pc, #24]	@ (800915c <frame_processing_rs422+0xca8>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d017      	beq.n	800917c <frame_processing_rs422+0xcc8>
					Uart_sendstring(UART4, "\nIOU:\n");
 800914c:	490a      	ldr	r1, [pc, #40]	@ (8009178 <frame_processing_rs422+0xcc4>)
 800914e:	4804      	ldr	r0, [pc, #16]	@ (8009160 <frame_processing_rs422+0xcac>)
 8009150:	f7f8 ff52 	bl	8001ff8 <Uart_sendstring>
 8009154:	e01c      	b.n	8009190 <frame_processing_rs422+0xcdc>
 8009156:	bf00      	nop
 8009158:	08016118 	.word	0x08016118
 800915c:	20007abc 	.word	0x20007abc
 8009160:	40004c00 	.word	0x40004c00
 8009164:	40004400 	.word	0x40004400
 8009168:	200000e8 	.word	0x200000e8
 800916c:	20002158 	.word	0x20002158
 8009170:	20007990 	.word	0x20007990
 8009174:	20007abe 	.word	0x20007abe
 8009178:	08016360 	.word	0x08016360
				}else{
					Uart_sendstring(USART2, "\nIOU:\n");
 800917c:	4902      	ldr	r1, [pc, #8]	@ (8009188 <frame_processing_rs422+0xcd4>)
 800917e:	4803      	ldr	r0, [pc, #12]	@ (800918c <frame_processing_rs422+0xcd8>)
 8009180:	f7f8 ff3a 	bl	8001ff8 <Uart_sendstring>
 8009184:	e004      	b.n	8009190 <frame_processing_rs422+0xcdc>
 8009186:	bf00      	nop
 8009188:	08016360 	.word	0x08016360
 800918c:	40004400 	.word	0x40004400
				}

			int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8009190:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009194:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	799b      	ldrb	r3, [r3, #6]
 800919c:	021b      	lsls	r3, r3, #8
 800919e:	b21a      	sxth	r2, r3
 80091a0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80091a4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	79db      	ldrb	r3, [r3, #7]
 80091ac:	b21b      	sxth	r3, r3
 80091ae:	4313      	orrs	r3, r2
 80091b0:	f8a7 35fa 	strh.w	r3, [r7, #1530]	@ 0x5fa
			int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 80091b4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80091b8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	7a1b      	ldrb	r3, [r3, #8]
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	b21a      	sxth	r2, r3
 80091c4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80091c8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	7a5b      	ldrb	r3, [r3, #9]
 80091d0:	b21b      	sxth	r3, r3
 80091d2:	4313      	orrs	r3, r2
 80091d4:	f8a7 35f8 	strh.w	r3, [r7, #1528]	@ 0x5f8
			int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 80091d8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80091dc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	7a9b      	ldrb	r3, [r3, #10]
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	b21a      	sxth	r2, r3
 80091e8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80091ec:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	7adb      	ldrb	r3, [r3, #11]
 80091f4:	b21b      	sxth	r3, r3
 80091f6:	4313      	orrs	r3, r2
 80091f8:	f8a7 35f6 	strh.w	r3, [r7, #1526]	@ 0x5f6
			int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 80091fc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009200:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	7b1b      	ldrb	r3, [r3, #12]
 8009208:	021b      	lsls	r3, r3, #8
 800920a:	b21a      	sxth	r2, r3
 800920c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009210:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	7b5b      	ldrb	r3, [r3, #13]
 8009218:	b21b      	sxth	r3, r3
 800921a:	4313      	orrs	r3, r2
 800921c:	f8a7 35f4 	strh.w	r3, [r7, #1524]	@ 0x5f4

			int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 8009220:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009224:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	7b9b      	ldrb	r3, [r3, #14]
 800922c:	021b      	lsls	r3, r3, #8
 800922e:	b21a      	sxth	r2, r3
 8009230:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009234:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	7bdb      	ldrb	r3, [r3, #15]
 800923c:	b21b      	sxth	r3, r3
 800923e:	4313      	orrs	r3, r2
 8009240:	f8a7 35f2 	strh.w	r3, [r7, #1522]	@ 0x5f2
			int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8009244:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009248:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	7c1b      	ldrb	r3, [r3, #16]
 8009250:	021b      	lsls	r3, r3, #8
 8009252:	b21a      	sxth	r2, r3
 8009254:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009258:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	7c5b      	ldrb	r3, [r3, #17]
 8009260:	b21b      	sxth	r3, r3
 8009262:	4313      	orrs	r3, r2
 8009264:	f8a7 35f0 	strh.w	r3, [r7, #1520]	@ 0x5f0

			int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 8009268:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800926c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	7c9b      	ldrb	r3, [r3, #18]
 8009274:	021b      	lsls	r3, r3, #8
 8009276:	b21a      	sxth	r2, r3
 8009278:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800927c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	7cdb      	ldrb	r3, [r3, #19]
 8009284:	b21b      	sxth	r3, r3
 8009286:	4313      	orrs	r3, r2
 8009288:	f8a7 35ee 	strh.w	r3, [r7, #1518]	@ 0x5ee

			int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800928c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009290:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	7d1b      	ldrb	r3, [r3, #20]
 8009298:	021b      	lsls	r3, r3, #8
 800929a:	b21a      	sxth	r2, r3
 800929c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80092a0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	7d5b      	ldrb	r3, [r3, #21]
 80092a8:	b21b      	sxth	r3, r3
 80092aa:	4313      	orrs	r3, r2
 80092ac:	f8a7 35ec 	strh.w	r3, [r7, #1516]	@ 0x5ec
			int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 80092b0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80092b4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	7d9b      	ldrb	r3, [r3, #22]
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	b21a      	sxth	r2, r3
 80092c0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80092c4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	7ddb      	ldrb	r3, [r3, #23]
 80092cc:	b21b      	sxth	r3, r3
 80092ce:	4313      	orrs	r3, r2
 80092d0:	f8a7 35ea 	strh.w	r3, [r7, #1514]	@ 0x5ea
			int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 80092d4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80092d8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	7e1b      	ldrb	r3, [r3, #24]
 80092e0:	021b      	lsls	r3, r3, #8
 80092e2:	b21a      	sxth	r2, r3
 80092e4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80092e8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	7e5b      	ldrb	r3, [r3, #25]
 80092f0:	b21b      	sxth	r3, r3
 80092f2:	4313      	orrs	r3, r2
 80092f4:	f8a7 35e8 	strh.w	r3, [r7, #1512]	@ 0x5e8
			int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 80092f8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80092fc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	7e9b      	ldrb	r3, [r3, #26]
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	b21a      	sxth	r2, r3
 8009308:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800930c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	7edb      	ldrb	r3, [r3, #27]
 8009314:	b21b      	sxth	r3, r3
 8009316:	4313      	orrs	r3, r2
 8009318:	f8a7 35e6 	strh.w	r3, [r7, #1510]	@ 0x5e6

			uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800931c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009320:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	7f1b      	ldrb	r3, [r3, #28]
 8009328:	021b      	lsls	r3, r3, #8
 800932a:	b21a      	sxth	r2, r3
 800932c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009330:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	7f5b      	ldrb	r3, [r3, #29]
 8009338:	b21b      	sxth	r3, r3
 800933a:	4313      	orrs	r3, r2
 800933c:	b21b      	sxth	r3, r3
 800933e:	f8a7 35e4 	strh.w	r3, [r7, #1508]	@ 0x5e4
			uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 8009342:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009346:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	7f9b      	ldrb	r3, [r3, #30]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	b21a      	sxth	r2, r3
 8009352:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009356:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	7fdb      	ldrb	r3, [r3, #31]
 800935e:	b21b      	sxth	r3, r3
 8009360:	4313      	orrs	r3, r2
 8009362:	b21b      	sxth	r3, r3
 8009364:	f8a7 35e2 	strh.w	r3, [r7, #1506]	@ 0x5e2
			uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 8009368:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800936c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	b21a      	sxth	r2, r3
 800937a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800937e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009388:	b21b      	sxth	r3, r3
 800938a:	4313      	orrs	r3, r2
 800938c:	b21b      	sxth	r3, r3
 800938e:	f8a7 35e0 	strh.w	r3, [r7, #1504]	@ 0x5e0
			uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 8009392:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009396:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	b21a      	sxth	r2, r3
 80093a4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80093a8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80093b2:	b21b      	sxth	r3, r3
 80093b4:	4313      	orrs	r3, r2
 80093b6:	b21b      	sxth	r3, r3
 80093b8:	f8a7 35de 	strh.w	r3, [r7, #1502]	@ 0x5de

			uint8_t neo_led_r = fsp_pkt->payload[31];
 80093bc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80093c0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80093ca:	f887 35dd 	strb.w	r3, [r7, #1501]	@ 0x5dd
			uint8_t neo_led_g = fsp_pkt->payload[32];
 80093ce:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80093d2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80093dc:	f887 35dc 	strb.w	r3, [r7, #1500]	@ 0x5dc
			uint8_t neo_led_b = fsp_pkt->payload[33];
 80093e0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80093e4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80093ee:	f887 35db 	strb.w	r3, [r7, #1499]	@ 0x5db
			uint8_t neo_led_w = fsp_pkt->payload[34];
 80093f2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80093f6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8009400:	f887 35da 	strb.w	r3, [r7, #1498]	@ 0x5da

			uint8_t ir_led_duty = fsp_pkt->payload[35];
 8009404:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009408:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009412:	f887 35d9 	strb.w	r3, [r7, #1497]	@ 0x5d9

		    int16_t accel_x = (int16_t)((fsp_pkt->payload[36] << 8) | fsp_pkt->payload[37]);
 8009416:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800941a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	b21a      	sxth	r2, r3
 8009428:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800942c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8009436:	b21b      	sxth	r3, r3
 8009438:	4313      	orrs	r3, r2
 800943a:	f8a7 35d6 	strh.w	r3, [r7, #1494]	@ 0x5d6
		    int16_t accel_y = (int16_t)((fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39]);
 800943e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009442:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	b21a      	sxth	r2, r3
 8009450:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009454:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800945e:	b21b      	sxth	r3, r3
 8009460:	4313      	orrs	r3, r2
 8009462:	f8a7 35d4 	strh.w	r3, [r7, #1492]	@ 0x5d4
		    int16_t accel_z = (int16_t)((fsp_pkt->payload[40] << 8) | fsp_pkt->payload[41]);
 8009466:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800946a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009474:	021b      	lsls	r3, r3, #8
 8009476:	b21a      	sxth	r2, r3
 8009478:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800947c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8009486:	b21b      	sxth	r3, r3
 8009488:	4313      	orrs	r3, r2
 800948a:	f8a7 35d2 	strh.w	r3, [r7, #1490]	@ 0x5d2

		    int16_t gyro_x = (int16_t)((fsp_pkt->payload[42] << 8) | fsp_pkt->payload[43]);
 800948e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009492:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	b21a      	sxth	r2, r3
 80094a0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80094a4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80094ae:	b21b      	sxth	r3, r3
 80094b0:	4313      	orrs	r3, r2
 80094b2:	f8a7 35d0 	strh.w	r3, [r7, #1488]	@ 0x5d0
		    int16_t gyro_y = (int16_t)((fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45]);
 80094b6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80094ba:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80094c4:	021b      	lsls	r3, r3, #8
 80094c6:	b21a      	sxth	r2, r3
 80094c8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80094cc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80094d6:	b21b      	sxth	r3, r3
 80094d8:	4313      	orrs	r3, r2
 80094da:	f8a7 35ce 	strh.w	r3, [r7, #1486]	@ 0x5ce
		    int16_t gyro_z = (int16_t)((fsp_pkt->payload[46] << 8) | fsp_pkt->payload[47]);
 80094de:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80094e2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80094ec:	021b      	lsls	r3, r3, #8
 80094ee:	b21a      	sxth	r2, r3
 80094f0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80094f4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80094fe:	b21b      	sxth	r3, r3
 8009500:	4313      	orrs	r3, r2
 8009502:	f8a7 35cc 	strh.w	r3, [r7, #1484]	@ 0x5cc

		    int16_t press = (int16_t)((fsp_pkt->payload[48] << 8) | fsp_pkt->payload[49]);
 8009506:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800950a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009514:	021b      	lsls	r3, r3, #8
 8009516:	b21a      	sxth	r2, r3
 8009518:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800951c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009526:	b21b      	sxth	r3, r3
 8009528:	4313      	orrs	r3, r2
 800952a:	f8a7 35ca 	strh.w	r3, [r7, #1482]	@ 0x5ca


			char buffer_0x13[1200];
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800952e:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 8009532:	2b00      	cmp	r3, #0
 8009534:	da03      	bge.n	800953e <frame_processing_rs422+0x108a>
 8009536:	4bb5      	ldr	r3, [pc, #724]	@ (800980c <frame_processing_rs422+0x1358>)
 8009538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800953c:	e002      	b.n	8009544 <frame_processing_rs422+0x1090>
 800953e:	4bb4      	ldr	r3, [pc, #720]	@ (8009810 <frame_processing_rs422+0x135c>)
 8009540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			                     "Neo LED: R=%u, G=%u, B=%u, W=%u\n"
			                     "IR LED Duty: %u%%\n"
					 	 	 	 "Accel: X=%d, Y=%d, Z=%d\n"
					             "Gyro: X=%d, Y=%d, Z=%d\n"
					             "Pressure: %d]\n",
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 8009544:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 8009548:	2b00      	cmp	r3, #0
 800954a:	bfb8      	it	lt
 800954c:	425b      	neglt	r3, r3
 800954e:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009550:	4ab0      	ldr	r2, [pc, #704]	@ (8009814 <frame_processing_rs422+0x1360>)
 8009552:	fb82 1203 	smull	r1, r2, r2, r3
 8009556:	1092      	asrs	r2, r2, #2
 8009558:	17db      	asrs	r3, r3, #31
 800955a:	eba2 0e03 	sub.w	lr, r2, r3
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800955e:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 8009562:	2b00      	cmp	r3, #0
 8009564:	bfb8      	it	lt
 8009566:	425b      	neglt	r3, r3
 8009568:	b29b      	uxth	r3, r3
 800956a:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800956c:	4ba9      	ldr	r3, [pc, #676]	@ (8009814 <frame_processing_rs422+0x1360>)
 800956e:	fb83 1302 	smull	r1, r3, r3, r2
 8009572:	1099      	asrs	r1, r3, #2
 8009574:	17d3      	asrs	r3, r2, #31
 8009576:	1acb      	subs	r3, r1, r3
 8009578:	4619      	mov	r1, r3
 800957a:	460b      	mov	r3, r1
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	440b      	add	r3, r1
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009588:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 800958c:	2b00      	cmp	r3, #0
 800958e:	da03      	bge.n	8009598 <frame_processing_rs422+0x10e4>
 8009590:	4b9e      	ldr	r3, [pc, #632]	@ (800980c <frame_processing_rs422+0x1358>)
 8009592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009596:	e002      	b.n	800959e <frame_processing_rs422+0x10ea>
 8009598:	4b9d      	ldr	r3, [pc, #628]	@ (8009810 <frame_processing_rs422+0x135c>)
 800959a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800959e:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bfb8      	it	lt
 80095a6:	425b      	neglt	r3, r3
 80095a8:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80095aa:	4a9a      	ldr	r2, [pc, #616]	@ (8009814 <frame_processing_rs422+0x1360>)
 80095ac:	fb82 1203 	smull	r1, r2, r2, r3
 80095b0:	1092      	asrs	r2, r2, #2
 80095b2:	17db      	asrs	r3, r3, #31
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 80095ba:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bfb8      	it	lt
 80095c2:	425b      	neglt	r3, r3
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80095c8:	4b92      	ldr	r3, [pc, #584]	@ (8009814 <frame_processing_rs422+0x1360>)
 80095ca:	fb83 1302 	smull	r1, r3, r3, r2
 80095ce:	1099      	asrs	r1, r3, #2
 80095d0:	17d3      	asrs	r3, r2, #31
 80095d2:	1acb      	subs	r3, r1, r3
 80095d4:	4619      	mov	r1, r3
 80095d6:	460b      	mov	r3, r1
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	440b      	add	r3, r1
 80095dc:	005b      	lsls	r3, r3, #1
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80095e2:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	da03      	bge.n	80095f2 <frame_processing_rs422+0x113e>
 80095ea:	4b88      	ldr	r3, [pc, #544]	@ (800980c <frame_processing_rs422+0x1358>)
 80095ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095f0:	e002      	b.n	80095f8 <frame_processing_rs422+0x1144>
 80095f2:	4b87      	ldr	r3, [pc, #540]	@ (8009810 <frame_processing_rs422+0x135c>)
 80095f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 80095f8:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	bfb8      	it	lt
 8009600:	425b      	neglt	r3, r3
 8009602:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009604:	4a83      	ldr	r2, [pc, #524]	@ (8009814 <frame_processing_rs422+0x1360>)
 8009606:	fb82 1203 	smull	r1, r2, r2, r3
 800960a:	1092      	asrs	r2, r2, #2
 800960c:	17db      	asrs	r3, r3, #31
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	67bb      	str	r3, [r7, #120]	@ 0x78
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 8009612:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 8009616:	2b00      	cmp	r3, #0
 8009618:	bfb8      	it	lt
 800961a:	425b      	neglt	r3, r3
 800961c:	b29b      	uxth	r3, r3
 800961e:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009620:	4b7c      	ldr	r3, [pc, #496]	@ (8009814 <frame_processing_rs422+0x1360>)
 8009622:	fb83 1302 	smull	r1, r3, r3, r2
 8009626:	1099      	asrs	r1, r3, #2
 8009628:	17d3      	asrs	r3, r2, #31
 800962a:	1acb      	subs	r3, r1, r3
 800962c:	4619      	mov	r1, r3
 800962e:	460b      	mov	r3, r1
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	677b      	str	r3, [r7, #116]	@ 0x74
 800963a:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 800963e:	2b00      	cmp	r3, #0
 8009640:	da03      	bge.n	800964a <frame_processing_rs422+0x1196>
 8009642:	4b72      	ldr	r3, [pc, #456]	@ (800980c <frame_processing_rs422+0x1358>)
 8009644:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009648:	e002      	b.n	8009650 <frame_processing_rs422+0x119c>
 800964a:	4b71      	ldr	r3, [pc, #452]	@ (8009810 <frame_processing_rs422+0x135c>)
 800964c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 8009650:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 8009654:	2b00      	cmp	r3, #0
 8009656:	bfb8      	it	lt
 8009658:	425b      	neglt	r3, r3
 800965a:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800965c:	4a6d      	ldr	r2, [pc, #436]	@ (8009814 <frame_processing_rs422+0x1360>)
 800965e:	fb82 1203 	smull	r1, r2, r2, r3
 8009662:	1092      	asrs	r2, r2, #2
 8009664:	17db      	asrs	r3, r3, #31
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	673b      	str	r3, [r7, #112]	@ 0x70
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800966a:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfb8      	it	lt
 8009672:	425b      	neglt	r3, r3
 8009674:	b29b      	uxth	r3, r3
 8009676:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009678:	4b66      	ldr	r3, [pc, #408]	@ (8009814 <frame_processing_rs422+0x1360>)
 800967a:	fb83 2301 	smull	r2, r3, r3, r1
 800967e:	109a      	asrs	r2, r3, #2
 8009680:	17cb      	asrs	r3, r1, #31
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	461a      	mov	r2, r3
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	1acb      	subs	r3, r1, r3
 8009690:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009692:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 8009696:	2b00      	cmp	r3, #0
 8009698:	da03      	bge.n	80096a2 <frame_processing_rs422+0x11ee>
 800969a:	4b5c      	ldr	r3, [pc, #368]	@ (800980c <frame_processing_rs422+0x1358>)
 800969c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096a0:	e002      	b.n	80096a8 <frame_processing_rs422+0x11f4>
 80096a2:	4b5b      	ldr	r3, [pc, #364]	@ (8009810 <frame_processing_rs422+0x135c>)
 80096a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 80096a8:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	bfb8      	it	lt
 80096b0:	425b      	neglt	r3, r3
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80096b6:	4b57      	ldr	r3, [pc, #348]	@ (8009814 <frame_processing_rs422+0x1360>)
 80096b8:	fb83 2301 	smull	r2, r3, r3, r1
 80096bc:	109a      	asrs	r2, r3, #2
 80096be:	17cb      	asrs	r3, r1, #31
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	66bb      	str	r3, [r7, #104]	@ 0x68
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 80096c4:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bfb8      	it	lt
 80096cc:	425b      	neglt	r3, r3
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80096d2:	4b50      	ldr	r3, [pc, #320]	@ (8009814 <frame_processing_rs422+0x1360>)
 80096d4:	fb83 2301 	smull	r2, r3, r3, r1
 80096d8:	109a      	asrs	r2, r3, #2
 80096da:	17cb      	asrs	r3, r1, #31
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	461a      	mov	r2, r3
 80096e0:	4613      	mov	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	1acb      	subs	r3, r1, r3
 80096ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80096ec:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	da03      	bge.n	80096fc <frame_processing_rs422+0x1248>
 80096f4:	4b45      	ldr	r3, [pc, #276]	@ (800980c <frame_processing_rs422+0x1358>)
 80096f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80096fa:	e002      	b.n	8009702 <frame_processing_rs422+0x124e>
 80096fc:	4b44      	ldr	r3, [pc, #272]	@ (8009810 <frame_processing_rs422+0x135c>)
 80096fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 8009702:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 8009706:	2b00      	cmp	r3, #0
 8009708:	bfb8      	it	lt
 800970a:	425b      	neglt	r3, r3
 800970c:	b29b      	uxth	r3, r3
 800970e:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009710:	4b40      	ldr	r3, [pc, #256]	@ (8009814 <frame_processing_rs422+0x1360>)
 8009712:	fb83 2301 	smull	r2, r3, r3, r1
 8009716:	109a      	asrs	r2, r3, #2
 8009718:	17cb      	asrs	r3, r1, #31
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	663b      	str	r3, [r7, #96]	@ 0x60
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800971e:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 8009722:	2b00      	cmp	r3, #0
 8009724:	bfb8      	it	lt
 8009726:	425b      	neglt	r3, r3
 8009728:	b29b      	uxth	r3, r3
 800972a:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800972c:	4b39      	ldr	r3, [pc, #228]	@ (8009814 <frame_processing_rs422+0x1360>)
 800972e:	fb83 2301 	smull	r2, r3, r3, r1
 8009732:	109a      	asrs	r2, r3, #2
 8009734:	17cb      	asrs	r3, r1, #31
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	461a      	mov	r2, r3
 800973a:	4613      	mov	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	1acb      	subs	r3, r1, r3
 8009744:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009746:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 800974a:	2b00      	cmp	r3, #0
 800974c:	da03      	bge.n	8009756 <frame_processing_rs422+0x12a2>
 800974e:	4b2f      	ldr	r3, [pc, #188]	@ (800980c <frame_processing_rs422+0x1358>)
 8009750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009754:	e002      	b.n	800975c <frame_processing_rs422+0x12a8>
 8009756:	4b2e      	ldr	r3, [pc, #184]	@ (8009810 <frame_processing_rs422+0x135c>)
 8009758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800975c:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 8009760:	2b00      	cmp	r3, #0
 8009762:	bfb8      	it	lt
 8009764:	425b      	neglt	r3, r3
 8009766:	b29b      	uxth	r3, r3
 8009768:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800976a:	4b2a      	ldr	r3, [pc, #168]	@ (8009814 <frame_processing_rs422+0x1360>)
 800976c:	fb83 2301 	smull	r2, r3, r3, r1
 8009770:	109a      	asrs	r2, r3, #2
 8009772:	17cb      	asrs	r3, r1, #31
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	65bb      	str	r3, [r7, #88]	@ 0x58
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 8009778:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 800977c:	2b00      	cmp	r3, #0
 800977e:	bfb8      	it	lt
 8009780:	425b      	neglt	r3, r3
 8009782:	b29b      	uxth	r3, r3
 8009784:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009786:	4b23      	ldr	r3, [pc, #140]	@ (8009814 <frame_processing_rs422+0x1360>)
 8009788:	fb83 2301 	smull	r2, r3, r3, r1
 800978c:	109a      	asrs	r2, r3, #2
 800978e:	17cb      	asrs	r3, r1, #31
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	461a      	mov	r2, r3
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	1acb      	subs	r3, r1, r3
 800979e:	657b      	str	r3, [r7, #84]	@ 0x54
 80097a0:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	da03      	bge.n	80097b0 <frame_processing_rs422+0x12fc>
 80097a8:	4b18      	ldr	r3, [pc, #96]	@ (800980c <frame_processing_rs422+0x1358>)
 80097aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80097ae:	e002      	b.n	80097b6 <frame_processing_rs422+0x1302>
 80097b0:	4b17      	ldr	r3, [pc, #92]	@ (8009810 <frame_processing_rs422+0x135c>)
 80097b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 80097b6:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	bfb8      	it	lt
 80097be:	425b      	neglt	r3, r3
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80097c4:	4b13      	ldr	r3, [pc, #76]	@ (8009814 <frame_processing_rs422+0x1360>)
 80097c6:	fb83 2301 	smull	r2, r3, r3, r1
 80097ca:	109a      	asrs	r2, r3, #2
 80097cc:	17cb      	asrs	r3, r1, #31
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	653b      	str	r3, [r7, #80]	@ 0x50
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 80097d2:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	bfb8      	it	lt
 80097da:	425b      	neglt	r3, r3
 80097dc:	b29b      	uxth	r3, r3
 80097de:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80097e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009814 <frame_processing_rs422+0x1360>)
 80097e2:	fb83 2301 	smull	r2, r3, r3, r1
 80097e6:	109a      	asrs	r2, r3, #2
 80097e8:	17cb      	asrs	r3, r1, #31
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	461a      	mov	r2, r3
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	1acb      	subs	r3, r1, r3
 80097f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097fa:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 80097fe:	2b00      	cmp	r3, #0
 8009800:	da0a      	bge.n	8009818 <frame_processing_rs422+0x1364>
 8009802:	4b02      	ldr	r3, [pc, #8]	@ (800980c <frame_processing_rs422+0x1358>)
 8009804:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009808:	e009      	b.n	800981e <frame_processing_rs422+0x136a>
 800980a:	bf00      	nop
 800980c:	08016018 	.word	0x08016018
 8009810:	0801601c 	.word	0x0801601c
 8009814:	66666667 	.word	0x66666667
 8009818:	4b2c      	ldr	r3, [pc, #176]	@ (80098cc <frame_processing_rs422+0x1418>)
 800981a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800981e:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 8009822:	2b00      	cmp	r3, #0
 8009824:	bfb8      	it	lt
 8009826:	425b      	neglt	r3, r3
 8009828:	b29b      	uxth	r3, r3
 800982a:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800982c:	4b28      	ldr	r3, [pc, #160]	@ (80098d0 <frame_processing_rs422+0x141c>)
 800982e:	fb83 2301 	smull	r2, r3, r3, r1
 8009832:	109a      	asrs	r2, r3, #2
 8009834:	17cb      	asrs	r3, r1, #31
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	64bb      	str	r3, [r7, #72]	@ 0x48
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800983a:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 800983e:	2b00      	cmp	r3, #0
 8009840:	bfb8      	it	lt
 8009842:	425b      	neglt	r3, r3
 8009844:	b29b      	uxth	r3, r3
 8009846:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009848:	4b21      	ldr	r3, [pc, #132]	@ (80098d0 <frame_processing_rs422+0x141c>)
 800984a:	fb83 2301 	smull	r2, r3, r3, r1
 800984e:	109a      	asrs	r2, r3, #2
 8009850:	17cb      	asrs	r3, r1, #31
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	461a      	mov	r2, r3
 8009856:	4613      	mov	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	1acb      	subs	r3, r1, r3
 8009860:	647b      	str	r3, [r7, #68]	@ 0x44
 8009862:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 8009866:	2b00      	cmp	r3, #0
 8009868:	da03      	bge.n	8009872 <frame_processing_rs422+0x13be>
 800986a:	4b1a      	ldr	r3, [pc, #104]	@ (80098d4 <frame_processing_rs422+0x1420>)
 800986c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009870:	e002      	b.n	8009878 <frame_processing_rs422+0x13c4>
 8009872:	4b16      	ldr	r3, [pc, #88]	@ (80098cc <frame_processing_rs422+0x1418>)
 8009874:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 8009878:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 800987c:	2b00      	cmp	r3, #0
 800987e:	bfb8      	it	lt
 8009880:	425b      	neglt	r3, r3
 8009882:	b29b      	uxth	r3, r3
 8009884:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009886:	4b12      	ldr	r3, [pc, #72]	@ (80098d0 <frame_processing_rs422+0x141c>)
 8009888:	fb83 2301 	smull	r2, r3, r3, r1
 800988c:	109a      	asrs	r2, r3, #2
 800988e:	17cb      	asrs	r3, r1, #31
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	643b      	str	r3, [r7, #64]	@ 0x40
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 8009894:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 8009898:	2b00      	cmp	r3, #0
 800989a:	bfb8      	it	lt
 800989c:	425b      	neglt	r3, r3
 800989e:	b29b      	uxth	r3, r3
 80098a0:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80098a2:	4b0b      	ldr	r3, [pc, #44]	@ (80098d0 <frame_processing_rs422+0x141c>)
 80098a4:	fb83 2301 	smull	r2, r3, r3, r1
 80098a8:	109a      	asrs	r2, r3, #2
 80098aa:	17cb      	asrs	r3, r1, #31
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	461a      	mov	r2, r3
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	1acb      	subs	r3, r1, r3
 80098ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098bc:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	da09      	bge.n	80098d8 <frame_processing_rs422+0x1424>
 80098c4:	4b03      	ldr	r3, [pc, #12]	@ (80098d4 <frame_processing_rs422+0x1420>)
 80098c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098ca:	e008      	b.n	80098de <frame_processing_rs422+0x142a>
 80098cc:	0801601c 	.word	0x0801601c
 80098d0:	66666667 	.word	0x66666667
 80098d4:	08016018 	.word	0x08016018
 80098d8:	4ba6      	ldr	r3, [pc, #664]	@ (8009b74 <frame_processing_rs422+0x16c0>)
 80098da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 80098de:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bfb8      	it	lt
 80098e6:	425b      	neglt	r3, r3
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80098ec:	4ba2      	ldr	r3, [pc, #648]	@ (8009b78 <frame_processing_rs422+0x16c4>)
 80098ee:	fb83 2301 	smull	r2, r3, r3, r1
 80098f2:	109a      	asrs	r2, r3, #2
 80098f4:	17cb      	asrs	r3, r1, #31
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	63bb      	str	r3, [r7, #56]	@ 0x38
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 80098fa:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfb8      	it	lt
 8009902:	425b      	neglt	r3, r3
 8009904:	b29b      	uxth	r3, r3
 8009906:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009908:	4b9b      	ldr	r3, [pc, #620]	@ (8009b78 <frame_processing_rs422+0x16c4>)
 800990a:	fb83 2301 	smull	r2, r3, r3, r1
 800990e:	109a      	asrs	r2, r3, #2
 8009910:	17cb      	asrs	r3, r1, #31
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	461a      	mov	r2, r3
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	1aca      	subs	r2, r1, r3
 8009920:	637a      	str	r2, [r7, #52]	@ 0x34
 8009922:	f8b7 25e4 	ldrh.w	r2, [r7, #1508]	@ 0x5e4
 8009926:	4b95      	ldr	r3, [pc, #596]	@ (8009b7c <frame_processing_rs422+0x16c8>)
 8009928:	fba3 2302 	umull	r2, r3, r3, r2
 800992c:	095b      	lsrs	r3, r3, #5
 800992e:	b29b      	uxth	r3, r3
 8009930:	633b      	str	r3, [r7, #48]	@ 0x30
 8009932:	f8b7 15e4 	ldrh.w	r1, [r7, #1508]	@ 0x5e4
 8009936:	4b91      	ldr	r3, [pc, #580]	@ (8009b7c <frame_processing_rs422+0x16c8>)
 8009938:	fba3 2301 	umull	r2, r3, r3, r1
 800993c:	095a      	lsrs	r2, r3, #5
 800993e:	2364      	movs	r3, #100	@ 0x64
 8009940:	fb02 f303 	mul.w	r3, r2, r3
 8009944:	1acb      	subs	r3, r1, r3
 8009946:	b29b      	uxth	r3, r3
 8009948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800994a:	f8b7 25e2 	ldrh.w	r2, [r7, #1506]	@ 0x5e2
 800994e:	4b8b      	ldr	r3, [pc, #556]	@ (8009b7c <frame_processing_rs422+0x16c8>)
 8009950:	fba3 2302 	umull	r2, r3, r3, r2
 8009954:	095b      	lsrs	r3, r3, #5
 8009956:	b29b      	uxth	r3, r3
 8009958:	62bb      	str	r3, [r7, #40]	@ 0x28
 800995a:	f8b7 15e2 	ldrh.w	r1, [r7, #1506]	@ 0x5e2
 800995e:	4b87      	ldr	r3, [pc, #540]	@ (8009b7c <frame_processing_rs422+0x16c8>)
 8009960:	fba3 2301 	umull	r2, r3, r3, r1
 8009964:	095a      	lsrs	r2, r3, #5
 8009966:	2364      	movs	r3, #100	@ 0x64
 8009968:	fb02 f303 	mul.w	r3, r2, r3
 800996c:	1acb      	subs	r3, r1, r3
 800996e:	b29b      	uxth	r3, r3
 8009970:	627b      	str	r3, [r7, #36]	@ 0x24
 8009972:	f8b7 25e0 	ldrh.w	r2, [r7, #1504]	@ 0x5e0
 8009976:	4b81      	ldr	r3, [pc, #516]	@ (8009b7c <frame_processing_rs422+0x16c8>)
 8009978:	fba3 2302 	umull	r2, r3, r3, r2
 800997c:	095b      	lsrs	r3, r3, #5
 800997e:	b29b      	uxth	r3, r3
 8009980:	623b      	str	r3, [r7, #32]
 8009982:	f8b7 15e0 	ldrh.w	r1, [r7, #1504]	@ 0x5e0
 8009986:	4b7d      	ldr	r3, [pc, #500]	@ (8009b7c <frame_processing_rs422+0x16c8>)
 8009988:	fba3 2301 	umull	r2, r3, r3, r1
 800998c:	095a      	lsrs	r2, r3, #5
 800998e:	2364      	movs	r3, #100	@ 0x64
 8009990:	fb02 f303 	mul.w	r3, r2, r3
 8009994:	1acb      	subs	r3, r1, r3
 8009996:	b29b      	uxth	r3, r3
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	f8b7 25de 	ldrh.w	r2, [r7, #1502]	@ 0x5de
 800999e:	4b77      	ldr	r3, [pc, #476]	@ (8009b7c <frame_processing_rs422+0x16c8>)
 80099a0:	fba3 2302 	umull	r2, r3, r3, r2
 80099a4:	095b      	lsrs	r3, r3, #5
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	61bb      	str	r3, [r7, #24]
 80099aa:	f8b7 15de 	ldrh.w	r1, [r7, #1502]	@ 0x5de
 80099ae:	4b73      	ldr	r3, [pc, #460]	@ (8009b7c <frame_processing_rs422+0x16c8>)
 80099b0:	fba3 2301 	umull	r2, r3, r3, r1
 80099b4:	095a      	lsrs	r2, r3, #5
 80099b6:	2364      	movs	r3, #100	@ 0x64
 80099b8:	fb02 f303 	mul.w	r3, r2, r3
 80099bc:	1acb      	subs	r3, r1, r3
 80099be:	b29b      	uxth	r3, r3
 80099c0:	617b      	str	r3, [r7, #20]
 80099c2:	f897 05dd 	ldrb.w	r0, [r7, #1501]	@ 0x5dd
 80099c6:	4601      	mov	r1, r0
 80099c8:	6139      	str	r1, [r7, #16]
 80099ca:	f897 05dc 	ldrb.w	r0, [r7, #1500]	@ 0x5dc
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	f897 45db 	ldrb.w	r4, [r7, #1499]	@ 0x5db
 80099d4:	60bc      	str	r4, [r7, #8]
 80099d6:	f897 55da 	ldrb.w	r5, [r7, #1498]	@ 0x5da
 80099da:	607d      	str	r5, [r7, #4]
 80099dc:	f897 65d9 	ldrb.w	r6, [r7, #1497]	@ 0x5d9
 80099e0:	603e      	str	r6, [r7, #0]
 80099e2:	f9b7 65d6 	ldrsh.w	r6, [r7, #1494]	@ 0x5d6
 80099e6:	f9b7 55d4 	ldrsh.w	r5, [r7, #1492]	@ 0x5d4
 80099ea:	f9b7 45d2 	ldrsh.w	r4, [r7, #1490]	@ 0x5d2
 80099ee:	f9b7 05d0 	ldrsh.w	r0, [r7, #1488]	@ 0x5d0
 80099f2:	f9b7 15ce 	ldrsh.w	r1, [r7, #1486]	@ 0x5ce
 80099f6:	f9b7 25cc 	ldrsh.w	r2, [r7, #1484]	@ 0x5cc
 80099fa:	f9b7 35ca 	ldrsh.w	r3, [r7, #1482]	@ 0x5ca
 80099fe:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 8009a02:	9332      	str	r3, [sp, #200]	@ 0xc8
 8009a04:	9231      	str	r2, [sp, #196]	@ 0xc4
 8009a06:	9130      	str	r1, [sp, #192]	@ 0xc0
 8009a08:	902f      	str	r0, [sp, #188]	@ 0xbc
 8009a0a:	942e      	str	r4, [sp, #184]	@ 0xb8
 8009a0c:	952d      	str	r5, [sp, #180]	@ 0xb4
 8009a0e:	962c      	str	r6, [sp, #176]	@ 0xb0
 8009a10:	683e      	ldr	r6, [r7, #0]
 8009a12:	962b      	str	r6, [sp, #172]	@ 0xac
 8009a14:	687d      	ldr	r5, [r7, #4]
 8009a16:	952a      	str	r5, [sp, #168]	@ 0xa8
 8009a18:	68bc      	ldr	r4, [r7, #8]
 8009a1a:	9429      	str	r4, [sp, #164]	@ 0xa4
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	9028      	str	r0, [sp, #160]	@ 0xa0
 8009a20:	6939      	ldr	r1, [r7, #16]
 8009a22:	9127      	str	r1, [sp, #156]	@ 0x9c
 8009a24:	6979      	ldr	r1, [r7, #20]
 8009a26:	9126      	str	r1, [sp, #152]	@ 0x98
 8009a28:	69b9      	ldr	r1, [r7, #24]
 8009a2a:	9125      	str	r1, [sp, #148]	@ 0x94
 8009a2c:	69f9      	ldr	r1, [r7, #28]
 8009a2e:	9124      	str	r1, [sp, #144]	@ 0x90
 8009a30:	6a39      	ldr	r1, [r7, #32]
 8009a32:	9123      	str	r1, [sp, #140]	@ 0x8c
 8009a34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a36:	9122      	str	r1, [sp, #136]	@ 0x88
 8009a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a3a:	9121      	str	r1, [sp, #132]	@ 0x84
 8009a3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a3e:	9120      	str	r1, [sp, #128]	@ 0x80
 8009a40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009a42:	911f      	str	r1, [sp, #124]	@ 0x7c
 8009a44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a46:	921e      	str	r2, [sp, #120]	@ 0x78
 8009a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4a:	931d      	str	r3, [sp, #116]	@ 0x74
 8009a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a50:	931c      	str	r3, [sp, #112]	@ 0x70
 8009a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a54:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a58:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a5e:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a62:	9318      	str	r3, [sp, #96]	@ 0x60
 8009a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a66:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009a68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a6c:	9316      	str	r3, [sp, #88]	@ 0x58
 8009a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a70:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a74:	9314      	str	r3, [sp, #80]	@ 0x50
 8009a76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a82:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a88:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a8c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a90:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a96:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009aa0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009aa4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009aac:	9308      	str	r3, [sp, #32]
 8009aae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ab2:	9307      	str	r3, [sp, #28]
 8009ab4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ab6:	9306      	str	r3, [sp, #24]
 8009ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009aba:	9305      	str	r3, [sp, #20]
 8009abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ac0:	9304      	str	r3, [sp, #16]
 8009ac2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ac4:	9303      	str	r3, [sp, #12]
 8009ac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009aca:	9302      	str	r3, [sp, #8]
 8009acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	4673      	mov	r3, lr
 8009ada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ade:	4928      	ldr	r1, [pc, #160]	@ (8009b80 <frame_processing_rs422+0x16cc>)
 8009ae0:	4660      	mov	r0, ip
 8009ae2:	f007 fbd3 	bl	801128c <siprintf>
			        neo_led_r, neo_led_g, neo_led_b, neo_led_w,
			        ir_led_duty, accel_x, accel_y, accel_z,
		            gyro_x, gyro_y, gyro_z,
		            press);

			if(auto_report_enabled){
 8009ae6:	4b27      	ldr	r3, [pc, #156]	@ (8009b84 <frame_processing_rs422+0x16d0>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d006      	beq.n	8009afe <frame_processing_rs422+0x164a>
				Uart_sendstring(UART4, buffer_0x13);
 8009af0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8009af4:	4619      	mov	r1, r3
 8009af6:	4824      	ldr	r0, [pc, #144]	@ (8009b88 <frame_processing_rs422+0x16d4>)
 8009af8:	f7f8 fa7e 	bl	8001ff8 <Uart_sendstring>
 8009afc:	e005      	b.n	8009b0a <frame_processing_rs422+0x1656>
			}else{
				Uart_sendstring(USART2, buffer_0x13);
 8009afe:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8009b02:	4619      	mov	r1, r3
 8009b04:	4821      	ldr	r0, [pc, #132]	@ (8009b8c <frame_processing_rs422+0x16d8>)
 8009b06:	f7f8 fa77 	bl	8001ff8 <Uart_sendstring>
			}



			}
			receive_iouFlag = 1;
 8009b0a:	4b21      	ldr	r3, [pc, #132]	@ (8009b90 <frame_processing_rs422+0x16dc>)
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	701a      	strb	r2, [r3, #0]

			for (int i = 1; i <= 49; i++) {
 8009b10:	2301      	movs	r3, #1
 8009b12:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 8009b16:	e015      	b.n	8009b44 <frame_processing_rs422+0x1690>
					    nextBuffer[i + 7] = fsp_pkt->payload[i]; //42   =  35  + 7      8 -> pay 1   9 -> pay2    43 -< pay35
 8009b18:	4b1e      	ldr	r3, [pc, #120]	@ (8009b94 <frame_processing_rs422+0x16e0>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 8009b20:	3307      	adds	r3, #7
 8009b22:	4413      	add	r3, r2
 8009b24:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 8009b28:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 8009b2c:	6811      	ldr	r1, [r2, #0]
 8009b2e:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 8009b32:	440a      	add	r2, r1
 8009b34:	3205      	adds	r2, #5
 8009b36:	7812      	ldrb	r2, [r2, #0]
 8009b38:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= 49; i++) {
 8009b3a:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 8009b3e:	3301      	adds	r3, #1
 8009b40:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 8009b44:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 8009b48:	2b31      	cmp	r3, #49	@ 0x31
 8009b4a:	dde5      	ble.n	8009b18 <frame_processing_rs422+0x1664>
			}
//			Uart_sendstring(UART4, "\nIOU_Collected\r\n");

			disconnect_counter_iou = 0;
 8009b4c:	4b12      	ldr	r3, [pc, #72]	@ (8009b98 <frame_processing_rs422+0x16e4>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	701a      	strb	r2, [r3, #0]

		}
		break;
 8009b52:	e008      	b.n	8009b66 <frame_processing_rs422+0x16b2>


		default:
			Uart_sendstring(UART4, "Failed to get all");
 8009b54:	4911      	ldr	r1, [pc, #68]	@ (8009b9c <frame_processing_rs422+0x16e8>)
 8009b56:	480c      	ldr	r0, [pc, #48]	@ (8009b88 <frame_processing_rs422+0x16d4>)
 8009b58:	f7f8 fa4e 	bl	8001ff8 <Uart_sendstring>
			Uart_sendstring(USART2, "Failed to get all");
 8009b5c:	490f      	ldr	r1, [pc, #60]	@ (8009b9c <frame_processing_rs422+0x16e8>)
 8009b5e:	480b      	ldr	r0, [pc, #44]	@ (8009b8c <frame_processing_rs422+0x16d8>)
 8009b60:	f7f8 fa4a 	bl	8001ff8 <Uart_sendstring>
			break;
 8009b64:	bf00      	nop
	}

}
 8009b66:	bf00      	nop
 8009b68:	f507 67c1 	add.w	r7, r7, #1544	@ 0x608
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b72:	bf00      	nop
 8009b74:	0801601c 	.word	0x0801601c
 8009b78:	66666667 	.word	0x66666667
 8009b7c:	51eb851f 	.word	0x51eb851f
 8009b80:	08016368 	.word	0x08016368
 8009b84:	20007abc 	.word	0x20007abc
 8009b88:	40004c00 	.word	0x40004c00
 8009b8c:	40004400 	.word	0x40004400
 8009b90:	200000ea 	.word	0x200000ea
 8009b94:	20002158 	.word	0x20002158
 8009b98:	2000798f 	.word	0x2000798f
 8009b9c:	080164ec 	.word	0x080164ec

08009ba0 <rs422_create_task>:

void	rs422_create_task(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&RS422_task_context.taskHandle, &RS422_task_context.taskProperty);
 8009ba4:	4903      	ldr	r1, [pc, #12]	@ (8009bb4 <rs422_create_task+0x14>)
 8009ba6:	4804      	ldr	r0, [pc, #16]	@ (8009bb8 <rs422_create_task+0x18>)
 8009ba8:	f002 fd36 	bl	800c618 <SCH_TASK_CreateTask>
	Ringbuf_init();
 8009bac:	f7f7 ff26 	bl	80019fc <Ringbuf_init>

}
 8009bb0:	bf00      	nop
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	20002144 	.word	0x20002144
 8009bb8:	2000213c 	.word	0x2000213c

08009bbc <COPC_init>:
		8
	}
};

void	COPC_init(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8009bc0:	f7f7 ff1c 	bl	80019fc <Ringbuf_init>
	fsp_init(FSP_ADR_CPOC);
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	f002 fe97 	bl	800c8f8 <fsp_init>
	s_pCOPC_Sfp_Payload = (COPC_Sfp_Payload_t *)(&s_COPC_FspPacket.payload);
 8009bca:	4b02      	ldr	r3, [pc, #8]	@ (8009bd4 <COPC_init+0x18>)
 8009bcc:	4a02      	ldr	r2, [pc, #8]	@ (8009bd8 <COPC_init+0x1c>)
 8009bce:	601a      	str	r2, [r3, #0]
}
 8009bd0:	bf00      	nop
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20008398 	.word	0x20008398
 8009bd8:	2000829d 	.word	0x2000829d

08009bdc <COPC_task_update>:
uint8_t *cam_send_buffer = cam_buffer3;
uint8_t new_data_available = 0;


static void COPC_task_update(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b0d0      	sub	sp, #320	@ 0x140
 8009be0:	af00      	add	r7, sp, #0
	uint8_t rxData;


    while (IsDataAvailable(USART1))
 8009be2:	e06b      	b.n	8009cbc <COPC_task_update+0xe0>
    {
        rxData = Uart_read(USART1);
 8009be4:	483b      	ldr	r0, [pc, #236]	@ (8009cd4 <COPC_task_update+0xf8>)
 8009be6:	f7f7 ffef 	bl	8001bc8 <Uart_read>
 8009bea:	4603      	mov	r3, r0
 8009bec:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
//        		send_by_cam = 0;
//        		send_rs42 = 0;
//        		receive_camFlag= 1;
//        	}
//        }else{
            if (!receiving) {
 8009bf0:	4b39      	ldr	r3, [pc, #228]	@ (8009cd8 <COPC_task_update+0xfc>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10a      	bne.n	8009c10 <COPC_task_update+0x34>
                if (rxData == FSP_PKT_SOD) {
 8009bfa:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009bfe:	2bca      	cmp	r3, #202	@ 0xca
 8009c00:	d15c      	bne.n	8009cbc <COPC_task_update+0xe0>
                    receiving = 1;
 8009c02:	4b35      	ldr	r3, [pc, #212]	@ (8009cd8 <COPC_task_update+0xfc>)
 8009c04:	2201      	movs	r2, #1
 8009c06:	701a      	strb	r2, [r3, #0]
                    receive_index = 0;
 8009c08:	4b34      	ldr	r3, [pc, #208]	@ (8009cdc <COPC_task_update+0x100>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	701a      	strb	r2, [r3, #0]
 8009c0e:	e055      	b.n	8009cbc <COPC_task_update+0xe0>
                }
            } else {

                if (rxData == FSP_PKT_EOF) {
 8009c10:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009c14:	2bef      	cmp	r3, #239	@ 0xef
 8009c16:	d13d      	bne.n	8009c94 <COPC_task_update+0xb8>
                    receiving = 0;
 8009c18:	4b2f      	ldr	r3, [pc, #188]	@ (8009cd8 <COPC_task_update+0xfc>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	701a      	strb	r2, [r3, #0]
                    fsp_packet_t fsp_pkt;
                    if(send_rs422){
 8009c1e:	4b30      	ldr	r3, [pc, #192]	@ (8009ce0 <COPC_task_update+0x104>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d011      	beq.n	8009c4c <COPC_task_update+0x70>

    					frame_decode_rs422((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 8009c28:	4b2c      	ldr	r3, [pc, #176]	@ (8009cdc <COPC_task_update+0x100>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8009c32:	4619      	mov	r1, r3
 8009c34:	482b      	ldr	r0, [pc, #172]	@ (8009ce4 <COPC_task_update+0x108>)
 8009c36:	f003 fa89 	bl	800d14c <frame_decode_rs422>
    					frame_processing_rs422(&fsp_pkt);
 8009c3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe fc38 	bl	80084b4 <frame_processing_rs422>
    					send_rs422 = 0;
 8009c44:	4b26      	ldr	r3, [pc, #152]	@ (8009ce0 <COPC_task_update+0x104>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	e02f      	b.n	8009cac <COPC_task_update+0xd0>

                    }else{
                        int ret = frame_decode((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 8009c4c:	4b23      	ldr	r3, [pc, #140]	@ (8009cdc <COPC_task_update+0x100>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8009c56:	4619      	mov	r1, r3
 8009c58:	4822      	ldr	r0, [pc, #136]	@ (8009ce4 <COPC_task_update+0x108>)
 8009c5a:	f003 f915 	bl	800ce88 <frame_decode>
 8009c5e:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138

                        if (ret > 0) {
 8009c62:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	dd20      	ble.n	8009cac <COPC_task_update+0xd0>
                            char error_msg[50];
                            sprintf(error_msg, "Error: %s\r\n", decode_error_msgs[ret]);
 8009c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8009ce8 <COPC_task_update+0x10c>)
 8009c6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009c70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c74:	1d3b      	adds	r3, r7, #4
 8009c76:	491d      	ldr	r1, [pc, #116]	@ (8009cec <COPC_task_update+0x110>)
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f007 fb07 	bl	801128c <siprintf>
    //                        Uart_sendstring(UART5, error_msg);
                            Uart_sendstring(UART4, error_msg);
 8009c7e:	1d3b      	adds	r3, r7, #4
 8009c80:	4619      	mov	r1, r3
 8009c82:	481b      	ldr	r0, [pc, #108]	@ (8009cf0 <COPC_task_update+0x114>)
 8009c84:	f7f8 f9b8 	bl	8001ff8 <Uart_sendstring>
                            Uart_sendstring(USART2, error_msg);
 8009c88:	1d3b      	adds	r3, r7, #4
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	4819      	ldr	r0, [pc, #100]	@ (8009cf4 <COPC_task_update+0x118>)
 8009c8e:	f7f8 f9b3 	bl	8001ff8 <Uart_sendstring>
 8009c92:	e00b      	b.n	8009cac <COPC_task_update+0xd0>
                    }



                }else{
                	receive_buffer[receive_index++] = rxData;
 8009c94:	4b11      	ldr	r3, [pc, #68]	@ (8009cdc <COPC_task_update+0x100>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	b2d1      	uxtb	r1, r2
 8009c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8009cdc <COPC_task_update+0x100>)
 8009ca0:	7011      	strb	r1, [r2, #0]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8009ce4 <COPC_task_update+0x108>)
 8009ca6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009caa:	5453      	strb	r3, [r2, r1]
                }

                if (receive_index >= FSP_PKT_MAX_LENGTH) {
 8009cac:	4b0b      	ldr	r3, [pc, #44]	@ (8009cdc <COPC_task_update+0x100>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2bff      	cmp	r3, #255	@ 0xff
 8009cb4:	d102      	bne.n	8009cbc <COPC_task_update+0xe0>
                    // Frame quá dài, reset lại

                    receiving = 0;
 8009cb6:	4b08      	ldr	r3, [pc, #32]	@ (8009cd8 <COPC_task_update+0xfc>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART1))
 8009cbc:	4805      	ldr	r0, [pc, #20]	@ (8009cd4 <COPC_task_update+0xf8>)
 8009cbe:	f7f8 f941 	bl	8001f44 <IsDataAvailable>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d18d      	bne.n	8009be4 <COPC_task_update+0x8>
            }
        //}

    }

}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	40011000 	.word	0x40011000
 8009cd8:	2000839c 	.word	0x2000839c
 8009cdc:	2000849f 	.word	0x2000849f
 8009ce0:	20007992 	.word	0x20007992
 8009ce4:	200083a0 	.word	0x200083a0
 8009ce8:	2000215c 	.word	0x2000215c
 8009cec:	0801658c 	.word	0x0801658c
 8009cf0:	40004c00 	.word	0x40004c00
 8009cf4:	40004400 	.word	0x40004400

08009cf8 <COPC_create_task>:
void	COPC_create_task(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	af00      	add	r7, sp, #0
	COPC_init();
 8009cfc:	f7ff ff5e 	bl	8009bbc <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
 8009d00:	4902      	ldr	r1, [pc, #8]	@ (8009d0c <COPC_create_task+0x14>)
 8009d02:	4803      	ldr	r0, [pc, #12]	@ (8009d10 <COPC_create_task+0x18>)
 8009d04:	f002 fc88 	bl	800c618 <SCH_TASK_CreateTask>
}
 8009d08:	bf00      	nop
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	2000217c 	.word	0x2000217c
 8009d10:	20002178 	.word	0x20002178

08009d14 <GPS_create_task>:

};


void GPS_create_task(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8009d18:	f7f7 fe70 	bl	80019fc <Ringbuf_init>
	SCH_TASK_CreateTask(&gps_task_context.taskHandle, &gps_task_context.taskProperty);
 8009d1c:	4902      	ldr	r1, [pc, #8]	@ (8009d28 <GPS_create_task+0x14>)
 8009d1e:	4803      	ldr	r0, [pc, #12]	@ (8009d2c <GPS_create_task+0x18>)
 8009d20:	f002 fc7a 	bl	800c618 <SCH_TASK_CreateTask>
}
 8009d24:	bf00      	nop
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	20002190 	.word	0x20002190
 8009d2c:	2000218c 	.word	0x2000218c

08009d30 <GPS_task_update>:


uint16_t try_count = 0;
static void GPS_task_update(void)
{
 8009d30:	b590      	push	{r4, r7, lr}
 8009d32:	b0db      	sub	sp, #364	@ 0x16c
 8009d34:	af04      	add	r7, sp, #16
    if (gps_report_enable) {
 8009d36:	4b6f      	ldr	r3, [pc, #444]	@ (8009ef4 <GPS_task_update+0x1c4>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 81e6 	beq.w	800a10e <GPS_task_update+0x3de>
        uint8_t rxData;
        char gps_data[100] = {0};
 8009d42:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8009d46:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]
 8009d4e:	3304      	adds	r3, #4
 8009d50:	2260      	movs	r2, #96	@ 0x60
 8009d52:	2100      	movs	r1, #0
 8009d54:	4618      	mov	r0, r3
 8009d56:	f007 fafc 	bl	8011352 <memset>
        int index = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

        while (IsDataAvailable(USART3)) {
 8009d60:	e1ce      	b.n	800a100 <GPS_task_update+0x3d0>
            rxData = Uart_read(USART3);
 8009d62:	4865      	ldr	r0, [pc, #404]	@ (8009ef8 <GPS_task_update+0x1c8>)
 8009d64:	f7f7 ff30 	bl	8001bc8 <Uart_read>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

            if (!format_gps) {
 8009d6e:	4b63      	ldr	r3, [pc, #396]	@ (8009efc <GPS_task_update+0x1cc>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10c      	bne.n	8009d92 <GPS_task_update+0x62>
                Uart_write(USART2, rxData);
 8009d78:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4860      	ldr	r0, [pc, #384]	@ (8009f00 <GPS_task_update+0x1d0>)
 8009d80:	f7f7 ffe6 	bl	8001d50 <Uart_write>
                Uart_write(UART4, rxData);
 8009d84:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009d88:	4619      	mov	r1, r3
 8009d8a:	485e      	ldr	r0, [pc, #376]	@ (8009f04 <GPS_task_update+0x1d4>)
 8009d8c:	f7f7 ffe0 	bl	8001d50 <Uart_write>
 8009d90:	e1b6      	b.n	800a100 <GPS_task_update+0x3d0>
            } else {
                gps_data[index++] = rxData;
 8009d92:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8009d9c:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8009da0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8009da4:	f897 1153 	ldrb.w	r1, [r7, #339]	@ 0x153
 8009da8:	54d1      	strb	r1, [r2, r3]

                if (rxData == '\n') {
 8009daa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009dae:	2b0a      	cmp	r3, #10
 8009db0:	f040 81a6 	bne.w	800a100 <GPS_task_update+0x3d0>
                    if (strstr(gps_data, "$GNGLL") != NULL) {
 8009db4:	463b      	mov	r3, r7
 8009db6:	4954      	ldr	r1, [pc, #336]	@ (8009f08 <GPS_task_update+0x1d8>)
 8009db8:	4618      	mov	r0, r3
 8009dba:	f007 fb41 	bl	8011440 <strstr>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 8194 	beq.w	800a0ee <GPS_task_update+0x3be>
//                        char *token = strtok(gps_data, ",");
                        char *latitude = strtok(NULL, ",");
 8009dc6:	4951      	ldr	r1, [pc, #324]	@ (8009f0c <GPS_task_update+0x1dc>)
 8009dc8:	2000      	movs	r0, #0
 8009dca:	f007 fadd 	bl	8011388 <strtok>
 8009dce:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
                        char *latitude_dir = strtok(NULL, ",");
 8009dd2:	494e      	ldr	r1, [pc, #312]	@ (8009f0c <GPS_task_update+0x1dc>)
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	f007 fad7 	bl	8011388 <strtok>
 8009dda:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
                        char *longitude = strtok(NULL, ",");
 8009dde:	494b      	ldr	r1, [pc, #300]	@ (8009f0c <GPS_task_update+0x1dc>)
 8009de0:	2000      	movs	r0, #0
 8009de2:	f007 fad1 	bl	8011388 <strtok>
 8009de6:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
                        char *longitude_dir = strtok(NULL, ",");
 8009dea:	4948      	ldr	r1, [pc, #288]	@ (8009f0c <GPS_task_update+0x1dc>)
 8009dec:	2000      	movs	r0, #0
 8009dee:	f007 facb 	bl	8011388 <strtok>
 8009df2:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
                        char *utc_time = strtok(NULL, ",");
 8009df6:	4945      	ldr	r1, [pc, #276]	@ (8009f0c <GPS_task_update+0x1dc>)
 8009df8:	2000      	movs	r0, #0
 8009dfa:	f007 fac5 	bl	8011388 <strtok>
 8009dfe:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c

                        if (strlen(latitude) == 0 && strlen(longitude) == 0) {
 8009e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d12a      	bne.n	8009e62 <GPS_task_update+0x132>
 8009e0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d125      	bne.n	8009e62 <GPS_task_update+0x132>
                            if (try_count < 3000) {
 8009e16:	4b3e      	ldr	r3, [pc, #248]	@ (8009f10 <GPS_task_update+0x1e0>)
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d81b      	bhi.n	8009e5a <GPS_task_update+0x12a>
                                char msg[50];
                                sprintf(msg, "[Try: %d] GPS Getting data...\n", try_count);
 8009e22:	4b3b      	ldr	r3, [pc, #236]	@ (8009f10 <GPS_task_update+0x1e0>)
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009e2c:	4939      	ldr	r1, [pc, #228]	@ (8009f14 <GPS_task_update+0x1e4>)
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f007 fa2c 	bl	801128c <siprintf>
                                Uart_sendstring(USART2, msg);
 8009e34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4831      	ldr	r0, [pc, #196]	@ (8009f00 <GPS_task_update+0x1d0>)
 8009e3c:	f7f8 f8dc 	bl	8001ff8 <Uart_sendstring>
                                Uart_sendstring(UART4, msg);
 8009e40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009e44:	4619      	mov	r1, r3
 8009e46:	482f      	ldr	r0, [pc, #188]	@ (8009f04 <GPS_task_update+0x1d4>)
 8009e48:	f7f8 f8d6 	bl	8001ff8 <Uart_sendstring>
                                try_count++;
 8009e4c:	4b30      	ldr	r3, [pc, #192]	@ (8009f10 <GPS_task_update+0x1e0>)
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	3301      	adds	r3, #1
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	4b2e      	ldr	r3, [pc, #184]	@ (8009f10 <GPS_task_update+0x1e0>)
 8009e56:	801a      	strh	r2, [r3, #0]
                            if (try_count < 3000) {
 8009e58:	e149      	b.n	800a0ee <GPS_task_update+0x3be>
                            } else {
                                try_count = 0;
 8009e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8009f10 <GPS_task_update+0x1e0>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	801a      	strh	r2, [r3, #0]
                            if (try_count < 3000) {
 8009e60:	e145      	b.n	800a0ee <GPS_task_update+0x3be>
                            }
                        } else if (strlen(latitude) == 0 && strlen(longitude) == 0 && strlen(utc_time) > 0) {
 8009e62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d159      	bne.n	8009f20 <GPS_task_update+0x1f0>
 8009e6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d154      	bne.n	8009f20 <GPS_task_update+0x1f0>
 8009e76:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d04f      	beq.n	8009f20 <GPS_task_update+0x1f0>
                            if (try_count < 3000) {
 8009e80:	4b23      	ldr	r3, [pc, #140]	@ (8009f10 <GPS_task_update+0x1e0>)
 8009e82:	881b      	ldrh	r3, [r3, #0]
 8009e84:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d82f      	bhi.n	8009eec <GPS_task_update+0x1bc>
                                char formatted_utc[12];
                                sprintf(formatted_utc, "%.2s:%.2s:%.2s.%.2s", utc_time, utc_time + 2, utc_time + 4, utc_time + 7);
 8009e8c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009e90:	1c99      	adds	r1, r3, #2
 8009e92:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009e96:	3304      	adds	r3, #4
 8009e98:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8009e9c:	3207      	adds	r2, #7
 8009e9e:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8009ea2:	9201      	str	r2, [sp, #4]
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8009eac:	491a      	ldr	r1, [pc, #104]	@ (8009f18 <GPS_task_update+0x1e8>)
 8009eae:	f007 f9ed 	bl	801128c <siprintf>
                                char msg[60];
                                sprintf(msg, "[Try: %d] UTC: %s, Try to get Position...\n", try_count, formatted_utc);
 8009eb2:	4b17      	ldr	r3, [pc, #92]	@ (8009f10 <GPS_task_update+0x1e0>)
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8009ebc:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8009ec0:	4916      	ldr	r1, [pc, #88]	@ (8009f1c <GPS_task_update+0x1ec>)
 8009ec2:	f007 f9e3 	bl	801128c <siprintf>
                                Uart_sendstring(USART2, msg);
 8009ec6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009eca:	4619      	mov	r1, r3
 8009ecc:	480c      	ldr	r0, [pc, #48]	@ (8009f00 <GPS_task_update+0x1d0>)
 8009ece:	f7f8 f893 	bl	8001ff8 <Uart_sendstring>
                                Uart_sendstring(UART4, msg);
 8009ed2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	480a      	ldr	r0, [pc, #40]	@ (8009f04 <GPS_task_update+0x1d4>)
 8009eda:	f7f8 f88d 	bl	8001ff8 <Uart_sendstring>
                                try_count++;
 8009ede:	4b0c      	ldr	r3, [pc, #48]	@ (8009f10 <GPS_task_update+0x1e0>)
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8009f10 <GPS_task_update+0x1e0>)
 8009ee8:	801a      	strh	r2, [r3, #0]
                            if (try_count < 3000) {
 8009eea:	e100      	b.n	800a0ee <GPS_task_update+0x3be>
                            } else {
                                try_count = 0;
 8009eec:	4b08      	ldr	r3, [pc, #32]	@ (8009f10 <GPS_task_update+0x1e0>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	801a      	strh	r2, [r3, #0]
                            if (try_count < 3000) {
 8009ef2:	e0fc      	b.n	800a0ee <GPS_task_update+0x3be>
 8009ef4:	20007ac0 	.word	0x20007ac0
 8009ef8:	40004800 	.word	0x40004800
 8009efc:	20007ac1 	.word	0x20007ac1
 8009f00:	40004400 	.word	0x40004400
 8009f04:	40004c00 	.word	0x40004c00
 8009f08:	08016598 	.word	0x08016598
 8009f0c:	080165a0 	.word	0x080165a0
 8009f10:	200084a0 	.word	0x200084a0
 8009f14:	080165a4 	.word	0x080165a4
 8009f18:	080165c4 	.word	0x080165c4
 8009f1c:	080165d8 	.word	0x080165d8
                            }
                        } else if (strlen(latitude) > 0 && strlen(longitude) > 0 && strlen(utc_time) > 0) {
 8009f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 80e1 	beq.w	800a0ee <GPS_task_update+0x3be>
 8009f2c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 80db 	beq.w	800a0ee <GPS_task_update+0x3be>
 8009f38:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f000 80d5 	beq.w	800a0ee <GPS_task_update+0x3be>

                            char lat_str[20], lon_str[20];
                            double lat = atof(latitude);
 8009f44:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8009f48:	f005 fbd0 	bl	800f6ec <atof>
 8009f4c:	ed87 0b4c 	vstr	d0, [r7, #304]	@ 0x130
                            double lon = atof(longitude);
 8009f50:	f8d7 0144 	ldr.w	r0, [r7, #324]	@ 0x144
 8009f54:	f005 fbca 	bl	800f6ec <atof>
 8009f58:	ed87 0b4a 	vstr	d0, [r7, #296]	@ 0x128
                            int lat_deg = (int)(lat / 100);
 8009f5c:	f04f 0200 	mov.w	r2, #0
 8009f60:	4b6d      	ldr	r3, [pc, #436]	@ (800a118 <GPS_task_update+0x3e8>)
 8009f62:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8009f66:	f7f6 fc81 	bl	800086c <__aeabi_ddiv>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4610      	mov	r0, r2
 8009f70:	4619      	mov	r1, r3
 8009f72:	f7f6 fe01 	bl	8000b78 <__aeabi_d2iz>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                            double lat_min = lat - lat_deg * 100;
 8009f7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009f80:	2264      	movs	r2, #100	@ 0x64
 8009f82:	fb02 f303 	mul.w	r3, r2, r3
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7f6 fadc 	bl	8000544 <__aeabi_i2d>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8009f94:	f7f6 f988 	bl	80002a8 <__aeabi_dsub>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
                            int lon_deg = (int)(lon / 100);
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	4b5c      	ldr	r3, [pc, #368]	@ (800a118 <GPS_task_update+0x3e8>)
 8009fa6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8009faa:	f7f6 fc5f 	bl	800086c <__aeabi_ddiv>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	f7f6 fddf 	bl	8000b78 <__aeabi_d2iz>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                            double lon_min = lon - lon_deg * 100;
 8009fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc4:	2264      	movs	r2, #100	@ 0x64
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f6 faba 	bl	8000544 <__aeabi_i2d>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8009fd8:	f7f6 f966 	bl	80002a8 <__aeabi_dsub>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
                            sprintf(lat_str, "%d°%02d'%04.1f\"%s", lat_deg, (int)lat_min, (lat_min - (int)lat_min) * 60, latitude_dir);
 8009fe4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8009fe8:	f7f6 fdc6 	bl	8000b78 <__aeabi_d2iz>
 8009fec:	4604      	mov	r4, r0
 8009fee:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8009ff2:	f7f6 fdc1 	bl	8000b78 <__aeabi_d2iz>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7f6 faa3 	bl	8000544 <__aeabi_i2d>
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800a006:	f7f6 f94f 	bl	80002a8 <__aeabi_dsub>
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	4610      	mov	r0, r2
 800a010:	4619      	mov	r1, r3
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	4b41      	ldr	r3, [pc, #260]	@ (800a11c <GPS_task_update+0x3ec>)
 800a018:	f7f6 fafe 	bl	8000618 <__aeabi_dmul>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 800a024:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 800a028:	9102      	str	r1, [sp, #8]
 800a02a:	e9cd 2300 	strd	r2, r3, [sp]
 800a02e:	4623      	mov	r3, r4
 800a030:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800a034:	493a      	ldr	r1, [pc, #232]	@ (800a120 <GPS_task_update+0x3f0>)
 800a036:	f007 f929 	bl	801128c <siprintf>
                            sprintf(lon_str, "%d°%02d'%04.1f\"%s", lon_deg, (int)lon_min, (lon_min - (int)lon_min) * 60, longitude_dir);
 800a03a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800a03e:	f7f6 fd9b 	bl	8000b78 <__aeabi_d2iz>
 800a042:	4604      	mov	r4, r0
 800a044:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800a048:	f7f6 fd96 	bl	8000b78 <__aeabi_d2iz>
 800a04c:	4603      	mov	r3, r0
 800a04e:	4618      	mov	r0, r3
 800a050:	f7f6 fa78 	bl	8000544 <__aeabi_i2d>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 800a05c:	f7f6 f924 	bl	80002a8 <__aeabi_dsub>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4610      	mov	r0, r2
 800a066:	4619      	mov	r1, r3
 800a068:	f04f 0200 	mov.w	r2, #0
 800a06c:	4b2b      	ldr	r3, [pc, #172]	@ (800a11c <GPS_task_update+0x3ec>)
 800a06e:	f7f6 fad3 	bl	8000618 <__aeabi_dmul>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 800a07a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a07e:	9102      	str	r1, [sp, #8]
 800a080:	e9cd 2300 	strd	r2, r3, [sp]
 800a084:	4623      	mov	r3, r4
 800a086:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800a08a:	4925      	ldr	r1, [pc, #148]	@ (800a120 <GPS_task_update+0x3f0>)
 800a08c:	f007 f8fe 	bl	801128c <siprintf>


                            char formatted_utc[12];
                            sprintf(formatted_utc, "%.2s:%.2s:%.2s.%.2s", utc_time, utc_time + 2, utc_time + 4, utc_time + 7);
 800a090:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800a094:	1c99      	adds	r1, r3, #2
 800a096:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800a09a:	3304      	adds	r3, #4
 800a09c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800a0a0:	3207      	adds	r2, #7
 800a0a2:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 800a0a6:	9201      	str	r2, [sp, #4]
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800a0b0:	491c      	ldr	r1, [pc, #112]	@ (800a124 <GPS_task_update+0x3f4>)
 800a0b2:	f007 f8eb 	bl	801128c <siprintf>

                            char msg[100];
                            sprintf(msg, "[OK] UTC: %s, Position: %s %s\n", formatted_utc, lat_str, lon_str);
 800a0b6:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800a0ba:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 800a0be:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800a0c2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4917      	ldr	r1, [pc, #92]	@ (800a128 <GPS_task_update+0x3f8>)
 800a0cc:	f007 f8de 	bl	801128c <siprintf>
                            Uart_sendstring(USART2, msg);
 800a0d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4815      	ldr	r0, [pc, #84]	@ (800a12c <GPS_task_update+0x3fc>)
 800a0d8:	f7f7 ff8e 	bl	8001ff8 <Uart_sendstring>
                            Uart_sendstring(UART4, msg);
 800a0dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4813      	ldr	r0, [pc, #76]	@ (800a130 <GPS_task_update+0x400>)
 800a0e4:	f7f7 ff88 	bl	8001ff8 <Uart_sendstring>
                            try_count = 0;
 800a0e8:	4b12      	ldr	r3, [pc, #72]	@ (800a134 <GPS_task_update+0x404>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	801a      	strh	r2, [r3, #0]
                        }
                    }

                    memset(gps_data, 0, sizeof(gps_data));
 800a0ee:	463b      	mov	r3, r7
 800a0f0:	2264      	movs	r2, #100	@ 0x64
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f007 f92c 	bl	8011352 <memset>
                    index = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
        while (IsDataAvailable(USART3)) {
 800a100:	480d      	ldr	r0, [pc, #52]	@ (800a138 <GPS_task_update+0x408>)
 800a102:	f7f7 ff1f 	bl	8001f44 <IsDataAvailable>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f47f ae2a 	bne.w	8009d62 <GPS_task_update+0x32>
                }
            }
        }
    }
}
 800a10e:	bf00      	nop
 800a110:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 800a114:	46bd      	mov	sp, r7
 800a116:	bd90      	pop	{r4, r7, pc}
 800a118:	40590000 	.word	0x40590000
 800a11c:	404e0000 	.word	0x404e0000
 800a120:	08016604 	.word	0x08016604
 800a124:	080165c4 	.word	0x080165c4
 800a128:	08016618 	.word	0x08016618
 800a12c:	40004400 	.word	0x40004400
 800a130:	40004c00 	.word	0x40004c00
 800a134:	200084a0 	.word	0x200084a0
 800a138:	40004800 	.word	0x40004800

0800a13c <LL_I2C_DisableIT_RX>:
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	605a      	str	r2, [r3, #4]
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <LL_I2C_IsActiveFlag_RXNE>:
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16c:	2b40      	cmp	r3, #64	@ 0x40
 800a16e:	bf0c      	ite	eq
 800a170:	2301      	moveq	r3, #1
 800a172:	2300      	movne	r3, #0
 800a174:	b2db      	uxtb	r3, r3
}
 800a176:	4618      	mov	r0, r3
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <LL_I2C_ClearFlag_ADDR>:
{
 800a182:	b480      	push	{r7}
 800a184:	b085      	sub	sp, #20
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800a190:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800a198:	68fb      	ldr	r3, [r7, #12]
}
 800a19a:	bf00      	nop
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <LL_I2C_GenerateStartCondition>:
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	601a      	str	r2, [r3, #0]
}
 800a1ba:	bf00      	nop
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <LL_I2C_GenerateStopCondition>:
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b083      	sub	sp, #12
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	601a      	str	r2, [r3, #0]
}
 800a1da:	bf00      	nop
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <LL_I2C_ReceiveData8>:
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	b2db      	uxtb	r3, r3
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <LL_I2C_TransmitData8>:
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	431a      	orrs	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	611a      	str	r2, [r3, #16]
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <I2C_img_task_update>:
    }
};

uint8_t img_read_enable = 0;
static void I2C_img_task_update(void)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
  //  if (img_read_enable)
    if (img_read_enable)
 800a22e:	4b2b      	ldr	r3, [pc, #172]	@ (800a2dc <I2C_img_task_update+0xb4>)
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d042      	beq.n	800a2bc <I2C_img_task_update+0x94>
    {
        if (currentBlock < NUM_BLOCKS)
 800a236:	4b2a      	ldr	r3, [pc, #168]	@ (800a2e0 <I2C_img_task_update+0xb8>)
 800a238:	881b      	ldrh	r3, [r3, #0]
 800a23a:	2b38      	cmp	r3, #56	@ 0x38
 800a23c:	d811      	bhi.n	800a262 <I2C_img_task_update+0x3a>
        {
            if (imgReadIndex == 0)
 800a23e:	4b29      	ldr	r3, [pc, #164]	@ (800a2e4 <I2C_img_task_update+0xbc>)
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d128      	bne.n	800a298 <I2C_img_task_update+0x70>
     //           while (!LL_I2C_IsActiveFlag_ADDR(I2C3));
//                LL_I2C_ClearFlag_ADDR(I2C3);
//                LL_I2C_EnableIT_RX(I2C3);


                LL_I2C_GenerateStartCondition(I2C3);
 800a246:	4828      	ldr	r0, [pc, #160]	@ (800a2e8 <I2C_img_task_update+0xc0>)
 800a248:	f7ff ffad 	bl	800a1a6 <LL_I2C_GenerateStartCondition>

                LL_I2C_TransmitData8(I2C3, IMG_ADDRESS);
 800a24c:	2113      	movs	r1, #19
 800a24e:	4826      	ldr	r0, [pc, #152]	@ (800a2e8 <I2C_img_task_update+0xc0>)
 800a250:	f7ff ffd6 	bl	800a200 <LL_I2C_TransmitData8>
                LL_I2C_ClearFlag_ADDR(I2C3);
 800a254:	4824      	ldr	r0, [pc, #144]	@ (800a2e8 <I2C_img_task_update+0xc0>)
 800a256:	f7ff ff94 	bl	800a182 <LL_I2C_ClearFlag_ADDR>
                LL_I2C_GenerateStopCondition(I2C3);
 800a25a:	4823      	ldr	r0, [pc, #140]	@ (800a2e8 <I2C_img_task_update+0xc0>)
 800a25c:	f7ff ffb3 	bl	800a1c6 <LL_I2C_GenerateStopCondition>
 800a260:	e01a      	b.n	800a298 <I2C_img_task_update+0x70>
            }
        }
        else
        {
            // All blocks have been read
            LL_I2C_DisableIT_RX(I2C3);
 800a262:	4821      	ldr	r0, [pc, #132]	@ (800a2e8 <I2C_img_task_update+0xc0>)
 800a264:	f7ff ff6a 	bl	800a13c <LL_I2C_DisableIT_RX>
            LL_I2C_GenerateStopCondition(I2C3);
 800a268:	481f      	ldr	r0, [pc, #124]	@ (800a2e8 <I2C_img_task_update+0xc0>)
 800a26a:	f7ff ffac 	bl	800a1c6 <LL_I2C_GenerateStopCondition>
            img_read_enable = 0;
 800a26e:	4b1b      	ldr	r3, [pc, #108]	@ (800a2dc <I2C_img_task_update+0xb4>)
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
            // Process the received data
            // Switch block ở đây
            // ...
            for (int i = 0; i < IMG_SIZE; i++) {
 800a274:	2300      	movs	r3, #0
 800a276:	607b      	str	r3, [r7, #4]
 800a278:	e00a      	b.n	800a290 <I2C_img_task_update+0x68>
                Uart_write(UART4, imgData[i]);
 800a27a:	4a1c      	ldr	r2, [pc, #112]	@ (800a2ec <I2C_img_task_update+0xc4>)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4413      	add	r3, r2
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	4619      	mov	r1, r3
 800a284:	481a      	ldr	r0, [pc, #104]	@ (800a2f0 <I2C_img_task_update+0xc8>)
 800a286:	f7f7 fd63 	bl	8001d50 <Uart_write>
            for (int i = 0; i < IMG_SIZE; i++) {
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3301      	adds	r3, #1
 800a28e:	607b      	str	r3, [r7, #4]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 800a296:	dbf0      	blt.n	800a27a <I2C_img_task_update+0x52>
            }
        }

        // Check if 1 second has elapsed
        if (SCH_TIM_HasCompleted(SCH_TIM_IMG))
 800a298:	2008      	movs	r0, #8
 800a29a:	f002 f9a7 	bl	800c5ec <SCH_TIM_HasCompleted>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d016      	beq.n	800a2d2 <I2C_img_task_update+0xaa>
        {
            // Reset the read process
            imgReadIndex = 0;
 800a2a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a2e4 <I2C_img_task_update+0xbc>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	801a      	strh	r2, [r3, #0]
            currentBlock = 0;
 800a2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e0 <I2C_img_task_update+0xb8>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	801a      	strh	r2, [r3, #0]
            SCH_TIM_Start(SCH_TIM_IMG, IMG_PERIOD);
 800a2b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a2b4:	2008      	movs	r0, #8
 800a2b6:	f002 f983 	bl	800c5c0 <SCH_TIM_Start>
        // Reset the read process
        imgReadIndex = 0;
        currentBlock = 0;
        SCH_TIM_Start(SCH_TIM_IMG, IMG_PERIOD);
    }
}
 800a2ba:	e00a      	b.n	800a2d2 <I2C_img_task_update+0xaa>
        imgReadIndex = 0;
 800a2bc:	4b09      	ldr	r3, [pc, #36]	@ (800a2e4 <I2C_img_task_update+0xbc>)
 800a2be:	2200      	movs	r2, #0
 800a2c0:	801a      	strh	r2, [r3, #0]
        currentBlock = 0;
 800a2c2:	4b07      	ldr	r3, [pc, #28]	@ (800a2e0 <I2C_img_task_update+0xb8>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	801a      	strh	r2, [r3, #0]
        SCH_TIM_Start(SCH_TIM_IMG, IMG_PERIOD);
 800a2c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a2cc:	2008      	movs	r0, #8
 800a2ce:	f002 f977 	bl	800c5c0 <SCH_TIM_Start>
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	2000a128 	.word	0x2000a128
 800a2e0:	2000a126 	.word	0x2000a126
 800a2e4:	2000a124 	.word	0x2000a124
 800a2e8:	40005c00 	.word	0x40005c00
 800a2ec:	200084a4 	.word	0x200084a4
 800a2f0:	40004c00 	.word	0x40004c00

0800a2f4 <I2C_img_create_task>:


void I2C_img_create_task(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&i2c_img_task_context.taskHandle, &i2c_img_task_context.taskProperty);
 800a2f8:	4902      	ldr	r1, [pc, #8]	@ (800a304 <I2C_img_create_task+0x10>)
 800a2fa:	4803      	ldr	r0, [pc, #12]	@ (800a308 <I2C_img_create_task+0x14>)
 800a2fc:	f002 f98c 	bl	800c618 <SCH_TASK_CreateTask>
}
 800a300:	bf00      	nop
 800a302:	bd80      	pop	{r7, pc}
 800a304:	200021a4 	.word	0x200021a4
 800a308:	200021a0 	.word	0x200021a0

0800a30c <I2C3_IRQHandler>:

void I2C3_IRQHandler(void)
{
 800a30c:	b598      	push	{r3, r4, r7, lr}
 800a30e:	af00      	add	r7, sp, #0
    if (LL_I2C_IsActiveFlag_RXNE(I2C3))
 800a310:	4816      	ldr	r0, [pc, #88]	@ (800a36c <I2C3_IRQHandler+0x60>)
 800a312:	f7ff ff23 	bl	800a15c <LL_I2C_IsActiveFlag_RXNE>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d025      	beq.n	800a368 <I2C3_IRQHandler+0x5c>
    {
        // Read received data
        imgData[currentBlock * BLOCK_SIZE + imgReadIndex] = LL_I2C_ReceiveData8(I2C3);
 800a31c:	4b14      	ldr	r3, [pc, #80]	@ (800a370 <I2C3_IRQHandler+0x64>)
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	01db      	lsls	r3, r3, #7
 800a322:	4a14      	ldr	r2, [pc, #80]	@ (800a374 <I2C3_IRQHandler+0x68>)
 800a324:	8812      	ldrh	r2, [r2, #0]
 800a326:	189c      	adds	r4, r3, r2
 800a328:	4810      	ldr	r0, [pc, #64]	@ (800a36c <I2C3_IRQHandler+0x60>)
 800a32a:	f7ff ff5c 	bl	800a1e6 <LL_I2C_ReceiveData8>
 800a32e:	4603      	mov	r3, r0
 800a330:	461a      	mov	r2, r3
 800a332:	4b11      	ldr	r3, [pc, #68]	@ (800a378 <I2C3_IRQHandler+0x6c>)
 800a334:	551a      	strb	r2, [r3, r4]
        imgReadIndex++;
 800a336:	4b0f      	ldr	r3, [pc, #60]	@ (800a374 <I2C3_IRQHandler+0x68>)
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	3301      	adds	r3, #1
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	4b0d      	ldr	r3, [pc, #52]	@ (800a374 <I2C3_IRQHandler+0x68>)
 800a340:	801a      	strh	r2, [r3, #0]

        if (imgReadIndex >= BLOCK_SIZE)
 800a342:	4b0c      	ldr	r3, [pc, #48]	@ (800a374 <I2C3_IRQHandler+0x68>)
 800a344:	881b      	ldrh	r3, [r3, #0]
 800a346:	2b7f      	cmp	r3, #127	@ 0x7f
 800a348:	d90e      	bls.n	800a368 <I2C3_IRQHandler+0x5c>
        {
            // Current block is fully read
            LL_I2C_DisableIT_RX(I2C3);
 800a34a:	4808      	ldr	r0, [pc, #32]	@ (800a36c <I2C3_IRQHandler+0x60>)
 800a34c:	f7ff fef6 	bl	800a13c <LL_I2C_DisableIT_RX>
            LL_I2C_GenerateStopCondition(I2C3);
 800a350:	4806      	ldr	r0, [pc, #24]	@ (800a36c <I2C3_IRQHandler+0x60>)
 800a352:	f7ff ff38 	bl	800a1c6 <LL_I2C_GenerateStopCondition>
            imgReadIndex = 0;
 800a356:	4b07      	ldr	r3, [pc, #28]	@ (800a374 <I2C3_IRQHandler+0x68>)
 800a358:	2200      	movs	r2, #0
 800a35a:	801a      	strh	r2, [r3, #0]
            currentBlock++;
 800a35c:	4b04      	ldr	r3, [pc, #16]	@ (800a370 <I2C3_IRQHandler+0x64>)
 800a35e:	881b      	ldrh	r3, [r3, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	b29a      	uxth	r2, r3
 800a364:	4b02      	ldr	r3, [pc, #8]	@ (800a370 <I2C3_IRQHandler+0x64>)
 800a366:	801a      	strh	r2, [r3, #0]
        }
    }
}
 800a368:	bf00      	nop
 800a36a:	bd98      	pop	{r3, r4, r7, pc}
 800a36c:	40005c00 	.word	0x40005c00
 800a370:	2000a126 	.word	0x2000a126
 800a374:	2000a124 	.word	0x2000a124
 800a378:	200084a4 	.word	0x200084a4

0800a37c <LL_GPIO_SetOutputPin>:
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	683a      	ldr	r2, [r7, #0]
 800a38a:	619a      	str	r2, [r3, #24]
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <LL_GPIO_ResetOutputPin>:
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	041a      	lsls	r2, r3, #16
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	619a      	str	r2, [r3, #24]
}
 800a3aa:	bf00      	nop
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
	...

0800a3b8 <status_led_init>:
{
	s_led_display_status.state = status;
}

void status_led_init(void)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	af00      	add	r7, sp, #0
    // Initialize LED status variable
    s_led_display_status.led = 0;
 800a3bc:	4a06      	ldr	r2, [pc, #24]	@ (800a3d8 <status_led_init+0x20>)
 800a3be:	7813      	ldrb	r3, [r2, #0]
 800a3c0:	f36f 0300 	bfc	r3, #0, #1
 800a3c4:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 800a3c6:	4a04      	ldr	r2, [pc, #16]	@ (800a3d8 <status_led_init+0x20>)
 800a3c8:	7813      	ldrb	r3, [r2, #0]
 800a3ca:	f36f 0347 	bfc	r3, #1, #7
 800a3ce:	7013      	strb	r3, [r2, #0]

    // Turn off LED initially
    status_led_off();
 800a3d0:	f000 f804 	bl	800a3dc <status_led_off>
}
 800a3d4:	bf00      	nop
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	2000a12c 	.word	0x2000a12c

0800a3dc <status_led_off>:

static void status_led_off(void)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 800a3e0:	2120      	movs	r1, #32
 800a3e2:	4802      	ldr	r0, [pc, #8]	@ (800a3ec <status_led_off+0x10>)
 800a3e4:	f7ff ffd8 	bl	800a398 <LL_GPIO_ResetOutputPin>
}
 800a3e8:	bf00      	nop
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	40020800 	.word	0x40020800

0800a3f0 <status_led_on>:

static void status_led_on(void)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 800a3f4:	2120      	movs	r1, #32
 800a3f6:	4802      	ldr	r0, [pc, #8]	@ (800a400 <status_led_on+0x10>)
 800a3f8:	f7ff ffc0 	bl	800a37c <LL_GPIO_SetOutputPin>
}
 800a3fc:	bf00      	nop
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	40020800 	.word	0x40020800

0800a404 <status_led_update>:

void	status_led_update(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0
//	Uart_sendstring(UART4, "LED Update");

	switch (s_led_display_status.state) {
 800a408:	4b0d      	ldr	r3, [pc, #52]	@ (800a440 <status_led_update+0x3c>)
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b03      	cmp	r3, #3
 800a414:	d811      	bhi.n	800a43a <status_led_update+0x36>
 800a416:	a201      	add	r2, pc, #4	@ (adr r2, 800a41c <status_led_update+0x18>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800a42d 	.word	0x0800a42d
 800a420:	0800a433 	.word	0x0800a433
 800a424:	0800a439 	.word	0x0800a439
 800a428:	0800a439 	.word	0x0800a439
	case POWERUP:
		status_led_powerup();
 800a42c:	f000 f80a 	bl	800a444 <status_led_powerup>
		break;
 800a430:	e003      	b.n	800a43a <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 800a432:	f000 f871 	bl	800a518 <status_led_normal>
		break;
 800a436:	e000      	b.n	800a43a <status_led_update+0x36>
	case POWERING_SUB:
		break;
 800a438:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 800a43a:	bf00      	nop
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	2000a12c 	.word	0x2000a12c

0800a444 <status_led_powerup>:

int count = 0;
int count_ena = 0;
int xflag = 1;
static void status_led_powerup(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 800a448:	4b2e      	ldr	r3, [pc, #184]	@ (800a504 <status_led_powerup+0xc0>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d03b      	beq.n	800a4ce <status_led_powerup+0x8a>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 800a456:	2000      	movs	r0, #0
 800a458:	f002 f8c8 	bl	800c5ec <SCH_TIM_HasCompleted>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d04e      	beq.n	800a500 <status_led_powerup+0xbc>
        {
            s_led_display_status.led = 0;
 800a462:	4a28      	ldr	r2, [pc, #160]	@ (800a504 <status_led_powerup+0xc0>)
 800a464:	7813      	ldrb	r3, [r2, #0]
 800a466:	f36f 0300 	bfc	r3, #0, #1
 800a46a:	7013      	strb	r3, [r2, #0]
            if(!rs422_report_enable){
 800a46c:	4b26      	ldr	r3, [pc, #152]	@ (800a508 <status_led_powerup+0xc4>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10b      	bne.n	800a48e <status_led_powerup+0x4a>
       //     	char buffer_0x00[20];

	//			sprintf(buffer_0x00, "\nAlive[%d]\n", count);
	//			Uart_sendstring(UART5, buffer_0x00);
				count++;
 800a476:	4b25      	ldr	r3, [pc, #148]	@ (800a50c <status_led_powerup+0xc8>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	3301      	adds	r3, #1
 800a47c:	4a23      	ldr	r2, [pc, #140]	@ (800a50c <status_led_powerup+0xc8>)
 800a47e:	6013      	str	r3, [r2, #0]
				if(count>4){
 800a480:	4b22      	ldr	r3, [pc, #136]	@ (800a50c <status_led_powerup+0xc8>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b04      	cmp	r3, #4
 800a486:	dd02      	ble.n	800a48e <status_led_powerup+0x4a>
					count =0;
 800a488:	4b20      	ldr	r3, [pc, #128]	@ (800a50c <status_led_powerup+0xc8>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
				}

            }
            count_ena++;
 800a48e:	4b20      	ldr	r3, [pc, #128]	@ (800a510 <status_led_powerup+0xcc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3301      	adds	r3, #1
 800a494:	4a1e      	ldr	r2, [pc, #120]	@ (800a510 <status_led_powerup+0xcc>)
 800a496:	6013      	str	r3, [r2, #0]
            if(count_ena>3 || rs422_report_enable){
 800a498:	4b1d      	ldr	r3, [pc, #116]	@ (800a510 <status_led_powerup+0xcc>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b03      	cmp	r3, #3
 800a49e:	dc04      	bgt.n	800a4aa <status_led_powerup+0x66>
 800a4a0:	4b19      	ldr	r3, [pc, #100]	@ (800a508 <status_led_powerup+0xc4>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d009      	beq.n	800a4be <status_led_powerup+0x7a>
            	count_ena = 0;
 800a4aa:	4b19      	ldr	r3, [pc, #100]	@ (800a510 <status_led_powerup+0xcc>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	601a      	str	r2, [r3, #0]
            	if((!(rs422_report_enable)) && xflag){
 800a4b0:	4b15      	ldr	r3, [pc, #84]	@ (800a508 <status_led_powerup+0xc4>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
            	//	rs422_report_enable = 1;
            	}
            	xflag = 0;
 800a4b8:	4b16      	ldr	r3, [pc, #88]	@ (800a514 <status_led_powerup+0xd0>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	601a      	str	r2, [r3, #0]
//            char buffered[100];
//            sprintf(buffered, "PMU_INT: %d, PDU_INT: %d, IOU_INT: %d, CAM_INT: %d\r\n",
//                    pmu_int_value, pdu_int_value, iou_int_value, cam_int_value);
//            Uart_sendstring(USART6, buffered);

            status_led_off();
 800a4be:	f7ff ff8d 	bl	800a3dc <status_led_off>
//            command_send_splash();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 800a4c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	f002 f87a 	bl	800c5c0 <SCH_TIM_Start>
            s_led_display_status.led = 1;
            status_led_on();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
        }
    }
}
 800a4cc:	e018      	b.n	800a500 <status_led_powerup+0xbc>
    else if (s_led_display_status.led == 0) // LED is OFF
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a504 <status_led_powerup+0xc0>)
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d111      	bne.n	800a500 <status_led_powerup+0xbc>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 800a4dc:	2000      	movs	r0, #0
 800a4de:	f002 f885 	bl	800c5ec <SCH_TIM_HasCompleted>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00b      	beq.n	800a500 <status_led_powerup+0xbc>
            s_led_display_status.led = 1;
 800a4e8:	4a06      	ldr	r2, [pc, #24]	@ (800a504 <status_led_powerup+0xc0>)
 800a4ea:	7813      	ldrb	r3, [r2, #0]
 800a4ec:	f043 0301 	orr.w	r3, r3, #1
 800a4f0:	7013      	strb	r3, [r2, #0]
            status_led_on();
 800a4f2:	f7ff ff7d 	bl	800a3f0 <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 800a4f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	f002 f860 	bl	800c5c0 <SCH_TIM_Start>
}
 800a500:	bf00      	nop
 800a502:	bd80      	pop	{r7, pc}
 800a504:	2000a12c 	.word	0x2000a12c
 800a508:	20007abd 	.word	0x20007abd
 800a50c:	2000a130 	.word	0x2000a130
 800a510:	2000a134 	.word	0x2000a134
 800a514:	200021cc 	.word	0x200021cc

0800a518 <status_led_normal>:
//}
//


static void status_led_normal(void)
{
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
//			s_led_display_status.led = 1;
//			status_led_on();
//			SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_ON_PERIOD);	//restart
//		}
//	}
}
 800a51c:	bf00      	nop
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <status_led_create_task>:

void	status_led_create_task(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 800a52c:	4902      	ldr	r1, [pc, #8]	@ (800a538 <status_led_create_task+0x10>)
 800a52e:	4803      	ldr	r0, [pc, #12]	@ (800a53c <status_led_create_task+0x14>)
 800a530:	f002 f872 	bl	800c618 <SCH_TASK_CreateTask>
}
 800a534:	bf00      	nop
 800a536:	bd80      	pop	{r7, pc}
 800a538:	200021b8 	.word	0x200021b8
 800a53c:	200021b4 	.word	0x200021b4

0800a540 <__NVIC_SetPriorityGrouping>:
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f003 0307 	and.w	r3, r3, #7
 800a54e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a550:	4b0c      	ldr	r3, [pc, #48]	@ (800a584 <__NVIC_SetPriorityGrouping+0x44>)
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a55c:	4013      	ands	r3, r2
 800a55e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a56c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a572:	4a04      	ldr	r2, [pc, #16]	@ (800a584 <__NVIC_SetPriorityGrouping+0x44>)
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	60d3      	str	r3, [r2, #12]
}
 800a578:	bf00      	nop
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	e000ed00 	.word	0xe000ed00

0800a588 <__NVIC_GetPriorityGrouping>:
{
 800a588:	b480      	push	{r7}
 800a58a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a58c:	4b04      	ldr	r3, [pc, #16]	@ (800a5a0 <__NVIC_GetPriorityGrouping+0x18>)
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	f003 0307 	and.w	r3, r3, #7
}
 800a596:	4618      	mov	r0, r3
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	e000ed00 	.word	0xe000ed00

0800a5a4 <__NVIC_EnableIRQ>:
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	db0b      	blt.n	800a5ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	f003 021f 	and.w	r2, r3, #31
 800a5bc:	4907      	ldr	r1, [pc, #28]	@ (800a5dc <__NVIC_EnableIRQ+0x38>)
 800a5be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5c2:	095b      	lsrs	r3, r3, #5
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	fa00 f202 	lsl.w	r2, r0, r2
 800a5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a5ce:	bf00      	nop
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	e000e100 	.word	0xe000e100

0800a5e0 <__NVIC_SetPriority>:
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	6039      	str	r1, [r7, #0]
 800a5ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	db0a      	blt.n	800a60a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	490c      	ldr	r1, [pc, #48]	@ (800a62c <__NVIC_SetPriority+0x4c>)
 800a5fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5fe:	0112      	lsls	r2, r2, #4
 800a600:	b2d2      	uxtb	r2, r2
 800a602:	440b      	add	r3, r1
 800a604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a608:	e00a      	b.n	800a620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	4908      	ldr	r1, [pc, #32]	@ (800a630 <__NVIC_SetPriority+0x50>)
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	f003 030f 	and.w	r3, r3, #15
 800a616:	3b04      	subs	r3, #4
 800a618:	0112      	lsls	r2, r2, #4
 800a61a:	b2d2      	uxtb	r2, r2
 800a61c:	440b      	add	r3, r1
 800a61e:	761a      	strb	r2, [r3, #24]
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	e000e100 	.word	0xe000e100
 800a630:	e000ed00 	.word	0xe000ed00

0800a634 <NVIC_EncodePriority>:
{
 800a634:	b480      	push	{r7}
 800a636:	b089      	sub	sp, #36	@ 0x24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	f1c3 0307 	rsb	r3, r3, #7
 800a64e:	2b04      	cmp	r3, #4
 800a650:	bf28      	it	cs
 800a652:	2304      	movcs	r3, #4
 800a654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	3304      	adds	r3, #4
 800a65a:	2b06      	cmp	r3, #6
 800a65c:	d902      	bls.n	800a664 <NVIC_EncodePriority+0x30>
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	3b03      	subs	r3, #3
 800a662:	e000      	b.n	800a666 <NVIC_EncodePriority+0x32>
 800a664:	2300      	movs	r3, #0
 800a666:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a668:	f04f 32ff 	mov.w	r2, #4294967295
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	fa02 f303 	lsl.w	r3, r2, r3
 800a672:	43da      	mvns	r2, r3
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	401a      	ands	r2, r3
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a67c:	f04f 31ff 	mov.w	r1, #4294967295
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	fa01 f303 	lsl.w	r3, r1, r3
 800a686:	43d9      	mvns	r1, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a68c:	4313      	orrs	r3, r2
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3724      	adds	r7, #36	@ 0x24
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <LL_I2C_EnableClockStretching>:
{
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
}
 800a6ae:	bf00      	nop
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <LL_I2C_DisableGeneralCall>:
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	b083      	sub	sp, #12
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	601a      	str	r2, [r3, #0]
}
 800a6ce:	bf00      	nop
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <LL_I2C_SetOwnAddress2>:
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	60da      	str	r2, [r3, #12]
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <LL_I2C_DisableOwnAddress2>:
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	f023 0201 	bic.w	r2, r3, #1
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	60da      	str	r2, [r3, #12]
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800a720:	b480      	push	{r7}
 800a722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a724:	4b05      	ldr	r3, [pc, #20]	@ (800a73c <LL_RCC_HSE_Enable+0x1c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a04      	ldr	r2, [pc, #16]	@ (800a73c <LL_RCC_HSE_Enable+0x1c>)
 800a72a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a72e:	6013      	str	r3, [r2, #0]
}
 800a730:	bf00      	nop
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	40023800 	.word	0x40023800

0800a740 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800a740:	b480      	push	{r7}
 800a742:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800a744:	4b07      	ldr	r3, [pc, #28]	@ (800a764 <LL_RCC_HSE_IsReady+0x24>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a74c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a750:	bf0c      	ite	eq
 800a752:	2301      	moveq	r3, #1
 800a754:	2300      	movne	r3, #0
 800a756:	b2db      	uxtb	r3, r3
}
 800a758:	4618      	mov	r0, r3
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	40023800 	.word	0x40023800

0800a768 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a770:	4b06      	ldr	r3, [pc, #24]	@ (800a78c <LL_RCC_SetSysClkSource+0x24>)
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	f023 0203 	bic.w	r2, r3, #3
 800a778:	4904      	ldr	r1, [pc, #16]	@ (800a78c <LL_RCC_SetSysClkSource+0x24>)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	608b      	str	r3, [r1, #8]
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	40023800 	.word	0x40023800

0800a790 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800a790:	b480      	push	{r7}
 800a792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a794:	4b04      	ldr	r3, [pc, #16]	@ (800a7a8 <LL_RCC_GetSysClkSource+0x18>)
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f003 030c 	and.w	r3, r3, #12
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	40023800 	.word	0x40023800

0800a7ac <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a7b4:	4b06      	ldr	r3, [pc, #24]	@ (800a7d0 <LL_RCC_SetAHBPrescaler+0x24>)
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a7bc:	4904      	ldr	r1, [pc, #16]	@ (800a7d0 <LL_RCC_SetAHBPrescaler+0x24>)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	608b      	str	r3, [r1, #8]
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	40023800 	.word	0x40023800

0800a7d4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a7dc:	4b06      	ldr	r3, [pc, #24]	@ (800a7f8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a7e4:	4904      	ldr	r1, [pc, #16]	@ (800a7f8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	608b      	str	r3, [r1, #8]
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	40023800 	.word	0x40023800

0800a7fc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a804:	4b06      	ldr	r3, [pc, #24]	@ (800a820 <LL_RCC_SetAPB2Prescaler+0x24>)
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a80c:	4904      	ldr	r1, [pc, #16]	@ (800a820 <LL_RCC_SetAPB2Prescaler+0x24>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4313      	orrs	r3, r2
 800a812:	608b      	str	r3, [r1, #8]
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	40023800 	.word	0x40023800

0800a824 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a824:	b480      	push	{r7}
 800a826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a828:	4b05      	ldr	r3, [pc, #20]	@ (800a840 <LL_RCC_PLL_Enable+0x1c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a04      	ldr	r2, [pc, #16]	@ (800a840 <LL_RCC_PLL_Enable+0x1c>)
 800a82e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a832:	6013      	str	r3, [r2, #0]
}
 800a834:	bf00      	nop
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	40023800 	.word	0x40023800

0800a844 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a844:	b480      	push	{r7}
 800a846:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800a848:	4b07      	ldr	r3, [pc, #28]	@ (800a868 <LL_RCC_PLL_IsReady+0x24>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a854:	bf0c      	ite	eq
 800a856:	2301      	moveq	r3, #1
 800a858:	2300      	movne	r3, #0
 800a85a:	b2db      	uxtb	r3, r3
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	40023800 	.word	0x40023800

0800a86c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
 800a878:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800a87a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800a880:	4013      	ands	r3, r2
 800a882:	68f9      	ldr	r1, [r7, #12]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	4311      	orrs	r1, r2
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	0192      	lsls	r2, r2, #6
 800a88c:	430a      	orrs	r2, r1
 800a88e:	4908      	ldr	r1, [pc, #32]	@ (800a8b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a890:	4313      	orrs	r3, r2
 800a892:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800a894:	4b06      	ldr	r3, [pc, #24]	@ (800a8b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a89c:	4904      	ldr	r1, [pc, #16]	@ (800a8b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800a8a4:	bf00      	nop
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	40023800 	.word	0x40023800
 800a8b4:	ffbf8000 	.word	0xffbf8000

0800a8b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800a8c0:	4b08      	ldr	r3, [pc, #32]	@ (800a8e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a8c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8c4:	4907      	ldr	r1, [pc, #28]	@ (800a8e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800a8cc:	4b05      	ldr	r3, [pc, #20]	@ (800a8e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a8ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
}
 800a8d8:	bf00      	nop
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	40023800 	.word	0x40023800

0800a8e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800a8f0:	4b08      	ldr	r3, [pc, #32]	@ (800a914 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a8f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8f4:	4907      	ldr	r1, [pc, #28]	@ (800a914 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800a8fc:	4b05      	ldr	r3, [pc, #20]	@ (800a914 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a8fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4013      	ands	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a906:	68fb      	ldr	r3, [r7, #12]
}
 800a908:	bf00      	nop
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	40023800 	.word	0x40023800

0800a918 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a920:	4b08      	ldr	r3, [pc, #32]	@ (800a944 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a922:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a924:	4907      	ldr	r1, [pc, #28]	@ (800a944 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4313      	orrs	r3, r2
 800a92a:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a92c:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a92e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4013      	ands	r3, r2
 800a934:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a936:	68fb      	ldr	r3, [r7, #12]
}
 800a938:	bf00      	nop
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	40023800 	.word	0x40023800

0800a948 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800a950:	4b06      	ldr	r3, [pc, #24]	@ (800a96c <LL_FLASH_SetLatency+0x24>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f023 0207 	bic.w	r2, r3, #7
 800a958:	4904      	ldr	r1, [pc, #16]	@ (800a96c <LL_FLASH_SetLatency+0x24>)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	600b      	str	r3, [r1, #0]
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	40023c00 	.word	0x40023c00

0800a970 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800a970:	b480      	push	{r7}
 800a972:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800a974:	4b04      	ldr	r3, [pc, #16]	@ (800a988 <LL_FLASH_GetLatency+0x18>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0307 	and.w	r3, r3, #7
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	40023c00 	.word	0x40023c00

0800a98c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800a994:	4b06      	ldr	r3, [pc, #24]	@ (800a9b0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a99c:	4904      	ldr	r1, [pc, #16]	@ (800a9b0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	600b      	str	r3, [r1, #0]
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	40007000 	.word	0x40007000

0800a9b4 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800a9b8:	4b07      	ldr	r3, [pc, #28]	@ (800a9d8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9c4:	bf0c      	ite	eq
 800a9c6:	2301      	moveq	r3, #1
 800a9c8:	2300      	movne	r3, #0
 800a9ca:	b2db      	uxtb	r3, r3
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	40007000 	.word	0x40007000

0800a9dc <LL_USART_Enable>:
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	60da      	str	r2, [r3, #12]
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <LL_USART_ConfigAsyncMode>:
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	695b      	ldr	r3, [r3, #20]
 800aa14:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	615a      	str	r2, [r3, #20]
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <LL_GPIO_ResetOutputPin>:
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	041a      	lsls	r2, r3, #16
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	619a      	str	r2, [r3, #24]
}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
	...

0800aa48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800aa4c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800aa50:	f7ff ff62 	bl	800a918 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800aa54:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800aa58:	f7ff ff46 	bl	800a8e8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aa5c:	2003      	movs	r0, #3
 800aa5e:	f7ff fd6f 	bl	800a540 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800aa62:	f7ff fd91 	bl	800a588 <__NVIC_GetPriorityGrouping>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2200      	movs	r2, #0
 800aa6a:	210f      	movs	r1, #15
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff fde1 	bl	800a634 <NVIC_EncodePriority>
 800aa72:	4603      	mov	r3, r0
 800aa74:	4619      	mov	r1, r3
 800aa76:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7a:	f7ff fdb1 	bl	800a5e0 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aa7e:	f000 f841 	bl	800ab04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800aa82:	f000 fbcd 	bl	800b220 <MX_GPIO_Init>
  MX_I2C1_Init();
 800aa86:	f000 f887 	bl	800ab98 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800aa8a:	f000 fb69 	bl	800b160 <MX_USART6_UART_Init>
  MX_UART5_Init();
 800aa8e:	f000 f9cd 	bl	800ae2c <MX_UART5_Init>
  MX_USART1_UART_Init();
 800aa92:	f000 fa43 	bl	800af1c <MX_USART1_UART_Init>
  MX_UART4_Init();
 800aa96:	f000 f967 	bl	800ad68 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800aa9a:	f000 faff 	bl	800b09c <MX_USART3_UART_Init>
  MX_I2C3_Init();
 800aa9e:	f000 f8d3 	bl	800ac48 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 800aaa2:	f000 fa9b 	bl	800afdc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  command_init();
 800aaa6:	f7fb ff63 	bl	8006970 <command_init>

  fsp_init(FSP_ADR_CPOC);
 800aaaa:	2001      	movs	r0, #1
 800aaac:	f001 ff24 	bl	800c8f8 <fsp_init>
  LL_GPIO_ResetOutputPin(GPIOC, ENABLE_MUX_Pin);
 800aab0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800aab4:	4812      	ldr	r0, [pc, #72]	@ (800ab00 <main+0xb8>)
 800aab6:	f7ff ffb7 	bl	800aa28 <LL_GPIO_ResetOutputPin>

  status_led_init();
 800aaba:	f7ff fc7d 	bl	800a3b8 <status_led_init>



  WDT_init();
 800aabe:	f000 fdbf 	bl	800b640 <WDT_init>

  SCH_Initialize();
 800aac2:	f001 fd53 	bl	800c56c <SCH_Initialize>

  status_led_create_task();
 800aac6:	f7ff fd2f 	bl	800a528 <status_led_create_task>

  send_packet_init();
 800aaca:	f7f7 fbb9 	bl	8002240 <send_packet_init>
  send_packet_create_task();
 800aace:	f7f7 fc15 	bl	80022fc <send_packet_create_task>


  command_create_task();
 800aad2:	f7fc ff97 	bl	8007a04 <command_create_task>

  COPC_create_task();
 800aad6:	f7ff f90f 	bl	8009cf8 <COPC_create_task>

  WDT_create_task();
 800aada:	f000 fdbd 	bl	800b658 <WDT_create_task>

  IOU_create_task();
 800aade:	f7f7 fca5 	bl	800242c <IOU_create_task>
  PMU_create_task();
 800aae2:	f7fa fcd9 	bl	8005498 <PMU_create_task>
  PDU_create_task();
 800aae6:	f7f9 fe8f 	bl	8004808 <PDU_create_task>
  rs422_create_task();
 800aaea:	f7ff f859 	bl	8009ba0 <rs422_create_task>
  GPS_create_task();
 800aaee:	f7ff f911 	bl	8009d14 <GPS_create_task>
  I2C_img_create_task();
 800aaf2:	f7ff fbff 	bl	800a2f4 <I2C_img_create_task>

  SCH_StartSchedular();
 800aaf6:	f001 fe63 	bl	800c7c0 <SCH_StartSchedular>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 800aafa:	f001 fe67 	bl	800c7cc <SCH_HandleScheduledTask>
 800aafe:	e7fc      	b.n	800aafa <main+0xb2>
 800ab00:	40020800 	.word	0x40020800

0800ab04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 800ab08:	2001      	movs	r0, #1
 800ab0a:	f7ff ff1d 	bl	800a948 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800ab0e:	bf00      	nop
 800ab10:	f7ff ff2e 	bl	800a970 <LL_FLASH_GetLatency>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d1fa      	bne.n	800ab10 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800ab1a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ab1e:	f7ff ff35 	bl	800a98c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800ab22:	f7ff fdfd 	bl	800a720 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800ab26:	bf00      	nop
 800ab28:	f7ff fe0a 	bl	800a740 <LL_RCC_HSE_IsReady>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d1fa      	bne.n	800ab28 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 192, LL_RCC_PLLP_DIV_4);
 800ab32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ab36:	22c0      	movs	r2, #192	@ 0xc0
 800ab38:	2104      	movs	r1, #4
 800ab3a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800ab3e:	f7ff fe95 	bl	800a86c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800ab42:	f7ff fe6f 	bl	800a824 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800ab46:	bf00      	nop
 800ab48:	f7ff fe7c 	bl	800a844 <LL_RCC_PLL_IsReady>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d1fa      	bne.n	800ab48 <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800ab52:	bf00      	nop
 800ab54:	f7ff ff2e 	bl	800a9b4 <LL_PWR_IsActiveFlag_VOS>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0fa      	beq.n	800ab54 <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 800ab5e:	2080      	movs	r0, #128	@ 0x80
 800ab60:	f7ff fe24 	bl	800a7ac <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800ab64:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ab68:	f7ff fe34 	bl	800a7d4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	f7ff fe45 	bl	800a7fc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800ab72:	2002      	movs	r0, #2
 800ab74:	f7ff fdf8 	bl	800a768 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800ab78:	bf00      	nop
 800ab7a:	f7ff fe09 	bl	800a790 <LL_RCC_GetSysClkSource>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b08      	cmp	r3, #8
 800ab82:	d1fa      	bne.n	800ab7a <SystemClock_Config+0x76>
  {

  }
  LL_Init1msTick(48000000);
 800ab84:	4803      	ldr	r0, [pc, #12]	@ (800ab94 <SystemClock_Config+0x90>)
 800ab86:	f001 fcd3 	bl	800c530 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 800ab8a:	4802      	ldr	r0, [pc, #8]	@ (800ab94 <SystemClock_Config+0x90>)
 800ab8c:	f001 fcde 	bl	800c54c <LL_SetSystemCoreClock>
}
 800ab90:	bf00      	nop
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	02dc6c00 	.word	0x02dc6c00

0800ab98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08c      	sub	sp, #48	@ 0x30
 800ab9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800ab9e:	f107 0318 	add.w	r3, r7, #24
 800aba2:	2200      	movs	r2, #0
 800aba4:	601a      	str	r2, [r3, #0]
 800aba6:	605a      	str	r2, [r3, #4]
 800aba8:	609a      	str	r2, [r3, #8]
 800abaa:	60da      	str	r2, [r3, #12]
 800abac:	611a      	str	r2, [r3, #16]
 800abae:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abb0:	463b      	mov	r3, r7
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	605a      	str	r2, [r3, #4]
 800abb8:	609a      	str	r2, [r3, #8]
 800abba:	60da      	str	r2, [r3, #12]
 800abbc:	611a      	str	r2, [r3, #16]
 800abbe:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800abc0:	2002      	movs	r0, #2
 800abc2:	f7ff fe79 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800abc6:	23c0      	movs	r3, #192	@ 0xc0
 800abc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800abca:	2302      	movs	r3, #2
 800abcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800abce:	2303      	movs	r3, #3
 800abd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800abd2:	2301      	movs	r3, #1
 800abd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800abd6:	2300      	movs	r3, #0
 800abd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800abda:	2304      	movs	r3, #4
 800abdc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800abde:	463b      	mov	r3, r7
 800abe0:	4619      	mov	r1, r3
 800abe2:	4816      	ldr	r0, [pc, #88]	@ (800ac3c <MX_I2C1_Init+0xa4>)
 800abe4:	f000 febf 	bl	800b966 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800abe8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800abec:	f7ff fe7c 	bl	800a8e8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800abf0:	4813      	ldr	r0, [pc, #76]	@ (800ac40 <MX_I2C1_Init+0xa8>)
 800abf2:	f7ff fd85 	bl	800a700 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800abf6:	4812      	ldr	r0, [pc, #72]	@ (800ac40 <MX_I2C1_Init+0xa8>)
 800abf8:	f7ff fd5f 	bl	800a6ba <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800abfc:	4810      	ldr	r0, [pc, #64]	@ (800ac40 <MX_I2C1_Init+0xa8>)
 800abfe:	f7ff fd4c 	bl	800a69a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800ac02:	2300      	movs	r3, #0
 800ac04:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 800ac06:	4b0f      	ldr	r3, [pc, #60]	@ (800ac44 <MX_I2C1_Init+0xac>)
 800ac08:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800ac12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac16:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800ac18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ac1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800ac1e:	f107 0318 	add.w	r3, r7, #24
 800ac22:	4619      	mov	r1, r3
 800ac24:	4806      	ldr	r0, [pc, #24]	@ (800ac40 <MX_I2C1_Init+0xa8>)
 800ac26:	f001 f815 	bl	800bc54 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	4804      	ldr	r0, [pc, #16]	@ (800ac40 <MX_I2C1_Init+0xa8>)
 800ac2e:	f7ff fd54 	bl	800a6da <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800ac32:	bf00      	nop
 800ac34:	3730      	adds	r7, #48	@ 0x30
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	40020400 	.word	0x40020400
 800ac40:	40005400 	.word	0x40005400
 800ac44:	00061a80 	.word	0x00061a80

0800ac48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b08c      	sub	sp, #48	@ 0x30
 800ac4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800ac4e:	f107 0318 	add.w	r3, r7, #24
 800ac52:	2200      	movs	r2, #0
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	605a      	str	r2, [r3, #4]
 800ac58:	609a      	str	r2, [r3, #8]
 800ac5a:	60da      	str	r2, [r3, #12]
 800ac5c:	611a      	str	r2, [r3, #16]
 800ac5e:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac60:	463b      	mov	r3, r7
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
 800ac66:	605a      	str	r2, [r3, #4]
 800ac68:	609a      	str	r2, [r3, #8]
 800ac6a:	60da      	str	r2, [r3, #12]
 800ac6c:	611a      	str	r2, [r3, #16]
 800ac6e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800ac70:	2004      	movs	r0, #4
 800ac72:	f7ff fe21 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800ac76:	2001      	movs	r0, #1
 800ac78:	f7ff fe1e 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800ac7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac80:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ac82:	2302      	movs	r3, #2
 800ac84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800ac86:	2303      	movs	r3, #3
 800ac88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800ac92:	2304      	movs	r3, #4
 800ac94:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac96:	463b      	mov	r3, r7
 800ac98:	4619      	mov	r1, r3
 800ac9a:	482f      	ldr	r0, [pc, #188]	@ (800ad58 <MX_I2C3_Init+0x110>)
 800ac9c:	f000 fe63 	bl	800b966 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800aca0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aca4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800aca6:	2302      	movs	r3, #2
 800aca8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800acaa:	2303      	movs	r3, #3
 800acac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800acae:	2301      	movs	r3, #1
 800acb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800acb2:	2300      	movs	r3, #0
 800acb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800acb6:	2304      	movs	r3, #4
 800acb8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acba:	463b      	mov	r3, r7
 800acbc:	4619      	mov	r1, r3
 800acbe:	4827      	ldr	r0, [pc, #156]	@ (800ad5c <MX_I2C3_Init+0x114>)
 800acc0:	f000 fe51 	bl	800b966 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800acc4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800acc8:	f7ff fe0e 	bl	800a8e8 <LL_APB1_GRP1_EnableClock>

  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800accc:	f7ff fc5c 	bl	800a588 <__NVIC_GetPriorityGrouping>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2200      	movs	r2, #0
 800acd4:	2100      	movs	r1, #0
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7ff fcac 	bl	800a634 <NVIC_EncodePriority>
 800acdc:	4603      	mov	r3, r0
 800acde:	4619      	mov	r1, r3
 800ace0:	2048      	movs	r0, #72	@ 0x48
 800ace2:	f7ff fc7d 	bl	800a5e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 800ace6:	2048      	movs	r0, #72	@ 0x48
 800ace8:	f7ff fc5c 	bl	800a5a4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800acec:	f7ff fc4c 	bl	800a588 <__NVIC_GetPriorityGrouping>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2200      	movs	r2, #0
 800acf4:	2100      	movs	r1, #0
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff fc9c 	bl	800a634 <NVIC_EncodePriority>
 800acfc:	4603      	mov	r3, r0
 800acfe:	4619      	mov	r1, r3
 800ad00:	2049      	movs	r0, #73	@ 0x49
 800ad02:	f7ff fc6d 	bl	800a5e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 800ad06:	2049      	movs	r0, #73	@ 0x49
 800ad08:	f7ff fc4c 	bl	800a5a4 <__NVIC_EnableIRQ>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 800ad0c:	4814      	ldr	r0, [pc, #80]	@ (800ad60 <MX_I2C3_Init+0x118>)
 800ad0e:	f7ff fcf7 	bl	800a700 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 800ad12:	4813      	ldr	r0, [pc, #76]	@ (800ad60 <MX_I2C3_Init+0x118>)
 800ad14:	f7ff fcd1 	bl	800a6ba <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 800ad18:	4811      	ldr	r0, [pc, #68]	@ (800ad60 <MX_I2C3_Init+0x118>)
 800ad1a:	f7ff fcbe 	bl	800a69a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 800ad22:	4b10      	ldr	r3, [pc, #64]	@ (800ad64 <MX_I2C3_Init+0x11c>)
 800ad24:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800ad26:	2300      	movs	r3, #0
 800ad28:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800ad2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad32:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800ad34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ad38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 800ad3a:	f107 0318 	add.w	r3, r7, #24
 800ad3e:	4619      	mov	r1, r3
 800ad40:	4807      	ldr	r0, [pc, #28]	@ (800ad60 <MX_I2C3_Init+0x118>)
 800ad42:	f000 ff87 	bl	800bc54 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 800ad46:	2100      	movs	r1, #0
 800ad48:	4805      	ldr	r0, [pc, #20]	@ (800ad60 <MX_I2C3_Init+0x118>)
 800ad4a:	f7ff fcc6 	bl	800a6da <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800ad4e:	bf00      	nop
 800ad50:	3730      	adds	r7, #48	@ 0x30
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	40020800 	.word	0x40020800
 800ad5c:	40020000 	.word	0x40020000
 800ad60:	40005c00 	.word	0x40005c00
 800ad64:	00061a80 	.word	0x00061a80

0800ad68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08e      	sub	sp, #56	@ 0x38
 800ad6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800ad6e:	f107 031c 	add.w	r3, r7, #28
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	605a      	str	r2, [r3, #4]
 800ad78:	609a      	str	r2, [r3, #8]
 800ad7a:	60da      	str	r2, [r3, #12]
 800ad7c:	611a      	str	r2, [r3, #16]
 800ad7e:	615a      	str	r2, [r3, #20]
 800ad80:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad82:	1d3b      	adds	r3, r7, #4
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	605a      	str	r2, [r3, #4]
 800ad8a:	609a      	str	r2, [r3, #8]
 800ad8c:	60da      	str	r2, [r3, #12]
 800ad8e:	611a      	str	r2, [r3, #16]
 800ad90:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800ad92:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800ad96:	f7ff fda7 	bl	800a8e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800ad9a:	2004      	movs	r0, #4
 800ad9c:	f7ff fd8c 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800ada0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ada4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ada6:	2302      	movs	r3, #2
 800ada8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800adaa:	2303      	movs	r3, #3
 800adac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800adb2:	2300      	movs	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800adb6:	2308      	movs	r3, #8
 800adb8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800adba:	1d3b      	adds	r3, r7, #4
 800adbc:	4619      	mov	r1, r3
 800adbe:	4819      	ldr	r0, [pc, #100]	@ (800ae24 <MX_UART4_Init+0xbc>)
 800adc0:	f000 fdd1 	bl	800b966 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800adc4:	f7ff fbe0 	bl	800a588 <__NVIC_GetPriorityGrouping>
 800adc8:	4603      	mov	r3, r0
 800adca:	2200      	movs	r2, #0
 800adcc:	2100      	movs	r1, #0
 800adce:	4618      	mov	r0, r3
 800add0:	f7ff fc30 	bl	800a634 <NVIC_EncodePriority>
 800add4:	4603      	mov	r3, r0
 800add6:	4619      	mov	r1, r3
 800add8:	2034      	movs	r0, #52	@ 0x34
 800adda:	f7ff fc01 	bl	800a5e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800adde:	2034      	movs	r0, #52	@ 0x34
 800ade0:	f7ff fbe0 	bl	800a5a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800ade4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800ade8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800adea:	2300      	movs	r3, #0
 800adec:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800adee:	2300      	movs	r3, #0
 800adf0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800adf2:	2300      	movs	r3, #0
 800adf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800adf6:	230c      	movs	r3, #12
 800adf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800adfa:	2300      	movs	r3, #0
 800adfc:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800adfe:	2300      	movs	r3, #0
 800ae00:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800ae02:	f107 031c 	add.w	r3, r7, #28
 800ae06:	4619      	mov	r1, r3
 800ae08:	4807      	ldr	r0, [pc, #28]	@ (800ae28 <MX_UART4_Init+0xc0>)
 800ae0a:	f001 faf7 	bl	800c3fc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800ae0e:	4806      	ldr	r0, [pc, #24]	@ (800ae28 <MX_UART4_Init+0xc0>)
 800ae10:	f7ff fdf4 	bl	800a9fc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800ae14:	4804      	ldr	r0, [pc, #16]	@ (800ae28 <MX_UART4_Init+0xc0>)
 800ae16:	f7ff fde1 	bl	800a9dc <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800ae1a:	bf00      	nop
 800ae1c:	3738      	adds	r7, #56	@ 0x38
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	40020800 	.word	0x40020800
 800ae28:	40004c00 	.word	0x40004c00

0800ae2c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08e      	sub	sp, #56	@ 0x38
 800ae30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800ae32:	f107 031c 	add.w	r3, r7, #28
 800ae36:	2200      	movs	r2, #0
 800ae38:	601a      	str	r2, [r3, #0]
 800ae3a:	605a      	str	r2, [r3, #4]
 800ae3c:	609a      	str	r2, [r3, #8]
 800ae3e:	60da      	str	r2, [r3, #12]
 800ae40:	611a      	str	r2, [r3, #16]
 800ae42:	615a      	str	r2, [r3, #20]
 800ae44:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae46:	1d3b      	adds	r3, r7, #4
 800ae48:	2200      	movs	r2, #0
 800ae4a:	601a      	str	r2, [r3, #0]
 800ae4c:	605a      	str	r2, [r3, #4]
 800ae4e:	609a      	str	r2, [r3, #8]
 800ae50:	60da      	str	r2, [r3, #12]
 800ae52:	611a      	str	r2, [r3, #16]
 800ae54:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800ae56:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ae5a:	f7ff fd45 	bl	800a8e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800ae5e:	2004      	movs	r0, #4
 800ae60:	f7ff fd2a 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800ae64:	2008      	movs	r0, #8
 800ae66:	f7ff fd27 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800ae6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ae70:	2302      	movs	r3, #2
 800ae72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800ae74:	2303      	movs	r3, #3
 800ae76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800ae80:	2308      	movs	r3, #8
 800ae82:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae84:	1d3b      	adds	r3, r7, #4
 800ae86:	4619      	mov	r1, r3
 800ae88:	4821      	ldr	r0, [pc, #132]	@ (800af10 <MX_UART5_Init+0xe4>)
 800ae8a:	f000 fd6c 	bl	800b966 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800ae8e:	2304      	movs	r3, #4
 800ae90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800ae92:	2302      	movs	r3, #2
 800ae94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800ae96:	2303      	movs	r3, #3
 800ae98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800aea2:	2308      	movs	r3, #8
 800aea4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aea6:	1d3b      	adds	r3, r7, #4
 800aea8:	4619      	mov	r1, r3
 800aeaa:	481a      	ldr	r0, [pc, #104]	@ (800af14 <MX_UART5_Init+0xe8>)
 800aeac:	f000 fd5b 	bl	800b966 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800aeb0:	f7ff fb6a 	bl	800a588 <__NVIC_GetPriorityGrouping>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2100      	movs	r1, #0
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7ff fbba 	bl	800a634 <NVIC_EncodePriority>
 800aec0:	4603      	mov	r3, r0
 800aec2:	4619      	mov	r1, r3
 800aec4:	2035      	movs	r0, #53	@ 0x35
 800aec6:	f7ff fb8b 	bl	800a5e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800aeca:	2035      	movs	r0, #53	@ 0x35
 800aecc:	f7ff fb6a 	bl	800a5a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800aed0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800aed4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800aed6:	2300      	movs	r3, #0
 800aed8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800aeda:	2300      	movs	r3, #0
 800aedc:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800aede:	2300      	movs	r3, #0
 800aee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800aee2:	230c      	movs	r3, #12
 800aee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800aee6:	2300      	movs	r3, #0
 800aee8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800aeea:	2300      	movs	r3, #0
 800aeec:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800aeee:	f107 031c 	add.w	r3, r7, #28
 800aef2:	4619      	mov	r1, r3
 800aef4:	4808      	ldr	r0, [pc, #32]	@ (800af18 <MX_UART5_Init+0xec>)
 800aef6:	f001 fa81 	bl	800c3fc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800aefa:	4807      	ldr	r0, [pc, #28]	@ (800af18 <MX_UART5_Init+0xec>)
 800aefc:	f7ff fd7e 	bl	800a9fc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800af00:	4805      	ldr	r0, [pc, #20]	@ (800af18 <MX_UART5_Init+0xec>)
 800af02:	f7ff fd6b 	bl	800a9dc <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800af06:	bf00      	nop
 800af08:	3738      	adds	r7, #56	@ 0x38
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	40020800 	.word	0x40020800
 800af14:	40020c00 	.word	0x40020c00
 800af18:	40005000 	.word	0x40005000

0800af1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08e      	sub	sp, #56	@ 0x38
 800af20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800af22:	f107 031c 	add.w	r3, r7, #28
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	605a      	str	r2, [r3, #4]
 800af2c:	609a      	str	r2, [r3, #8]
 800af2e:	60da      	str	r2, [r3, #12]
 800af30:	611a      	str	r2, [r3, #16]
 800af32:	615a      	str	r2, [r3, #20]
 800af34:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af36:	1d3b      	adds	r3, r7, #4
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	605a      	str	r2, [r3, #4]
 800af3e:	609a      	str	r2, [r3, #8]
 800af40:	60da      	str	r2, [r3, #12]
 800af42:	611a      	str	r2, [r3, #16]
 800af44:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800af46:	2010      	movs	r0, #16
 800af48:	f7ff fce6 	bl	800a918 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800af4c:	2001      	movs	r0, #1
 800af4e:	f7ff fcb3 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800af52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800af56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800af58:	2302      	movs	r3, #2
 800af5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800af5c:	2303      	movs	r3, #3
 800af5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800af60:	2300      	movs	r3, #0
 800af62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800af64:	2300      	movs	r3, #0
 800af66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800af68:	2307      	movs	r3, #7
 800af6a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af6c:	1d3b      	adds	r3, r7, #4
 800af6e:	4619      	mov	r1, r3
 800af70:	4818      	ldr	r0, [pc, #96]	@ (800afd4 <MX_USART1_UART_Init+0xb8>)
 800af72:	f000 fcf8 	bl	800b966 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800af76:	f7ff fb07 	bl	800a588 <__NVIC_GetPriorityGrouping>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2200      	movs	r2, #0
 800af7e:	2100      	movs	r1, #0
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff fb57 	bl	800a634 <NVIC_EncodePriority>
 800af86:	4603      	mov	r3, r0
 800af88:	4619      	mov	r1, r3
 800af8a:	2025      	movs	r0, #37	@ 0x25
 800af8c:	f7ff fb28 	bl	800a5e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800af90:	2025      	movs	r0, #37	@ 0x25
 800af92:	f7ff fb07 	bl	800a5a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 800af96:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 800af9a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800af9c:	2300      	movs	r3, #0
 800af9e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800afa0:	2300      	movs	r3, #0
 800afa2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800afa4:	2300      	movs	r3, #0
 800afa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800afa8:	230c      	movs	r3, #12
 800afaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800afac:	2300      	movs	r3, #0
 800afae:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800afb0:	2300      	movs	r3, #0
 800afb2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800afb4:	f107 031c 	add.w	r3, r7, #28
 800afb8:	4619      	mov	r1, r3
 800afba:	4807      	ldr	r0, [pc, #28]	@ (800afd8 <MX_USART1_UART_Init+0xbc>)
 800afbc:	f001 fa1e 	bl	800c3fc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800afc0:	4805      	ldr	r0, [pc, #20]	@ (800afd8 <MX_USART1_UART_Init+0xbc>)
 800afc2:	f7ff fd1b 	bl	800a9fc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800afc6:	4804      	ldr	r0, [pc, #16]	@ (800afd8 <MX_USART1_UART_Init+0xbc>)
 800afc8:	f7ff fd08 	bl	800a9dc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800afcc:	bf00      	nop
 800afce:	3738      	adds	r7, #56	@ 0x38
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	40020000 	.word	0x40020000
 800afd8:	40011000 	.word	0x40011000

0800afdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b08e      	sub	sp, #56	@ 0x38
 800afe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800afe2:	f107 031c 	add.w	r3, r7, #28
 800afe6:	2200      	movs	r2, #0
 800afe8:	601a      	str	r2, [r3, #0]
 800afea:	605a      	str	r2, [r3, #4]
 800afec:	609a      	str	r2, [r3, #8]
 800afee:	60da      	str	r2, [r3, #12]
 800aff0:	611a      	str	r2, [r3, #16]
 800aff2:	615a      	str	r2, [r3, #20]
 800aff4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aff6:	1d3b      	adds	r3, r7, #4
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]
 800affc:	605a      	str	r2, [r3, #4]
 800affe:	609a      	str	r2, [r3, #8]
 800b000:	60da      	str	r2, [r3, #12]
 800b002:	611a      	str	r2, [r3, #16]
 800b004:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800b006:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800b00a:	f7ff fc6d 	bl	800a8e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800b00e:	2001      	movs	r0, #1
 800b010:	f7ff fc52 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800b014:	230c      	movs	r3, #12
 800b016:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b018:	2302      	movs	r3, #2
 800b01a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b01c:	2303      	movs	r3, #3
 800b01e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b020:	2300      	movs	r3, #0
 800b022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b024:	2300      	movs	r3, #0
 800b026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800b028:	2307      	movs	r3, #7
 800b02a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b02c:	1d3b      	adds	r3, r7, #4
 800b02e:	4619      	mov	r1, r3
 800b030:	4818      	ldr	r0, [pc, #96]	@ (800b094 <MX_USART2_UART_Init+0xb8>)
 800b032:	f000 fc98 	bl	800b966 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800b036:	f7ff faa7 	bl	800a588 <__NVIC_GetPriorityGrouping>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2200      	movs	r2, #0
 800b03e:	2100      	movs	r1, #0
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff faf7 	bl	800a634 <NVIC_EncodePriority>
 800b046:	4603      	mov	r3, r0
 800b048:	4619      	mov	r1, r3
 800b04a:	2026      	movs	r0, #38	@ 0x26
 800b04c:	f7ff fac8 	bl	800a5e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800b050:	2026      	movs	r0, #38	@ 0x26
 800b052:	f7ff faa7 	bl	800a5a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800b056:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800b05a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800b05c:	2300      	movs	r3, #0
 800b05e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800b060:	2300      	movs	r3, #0
 800b062:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800b064:	2300      	movs	r3, #0
 800b066:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800b068:	230c      	movs	r3, #12
 800b06a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800b06c:	2300      	movs	r3, #0
 800b06e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800b070:	2300      	movs	r3, #0
 800b072:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800b074:	f107 031c 	add.w	r3, r7, #28
 800b078:	4619      	mov	r1, r3
 800b07a:	4807      	ldr	r0, [pc, #28]	@ (800b098 <MX_USART2_UART_Init+0xbc>)
 800b07c:	f001 f9be 	bl	800c3fc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800b080:	4805      	ldr	r0, [pc, #20]	@ (800b098 <MX_USART2_UART_Init+0xbc>)
 800b082:	f7ff fcbb 	bl	800a9fc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800b086:	4804      	ldr	r0, [pc, #16]	@ (800b098 <MX_USART2_UART_Init+0xbc>)
 800b088:	f7ff fca8 	bl	800a9dc <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b08c:	bf00      	nop
 800b08e:	3738      	adds	r7, #56	@ 0x38
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	40020000 	.word	0x40020000
 800b098:	40004400 	.word	0x40004400

0800b09c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08e      	sub	sp, #56	@ 0x38
 800b0a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800b0a2:	f107 031c 	add.w	r3, r7, #28
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	601a      	str	r2, [r3, #0]
 800b0aa:	605a      	str	r2, [r3, #4]
 800b0ac:	609a      	str	r2, [r3, #8]
 800b0ae:	60da      	str	r2, [r3, #12]
 800b0b0:	611a      	str	r2, [r3, #16]
 800b0b2:	615a      	str	r2, [r3, #20]
 800b0b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0b6:	1d3b      	adds	r3, r7, #4
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	605a      	str	r2, [r3, #4]
 800b0be:	609a      	str	r2, [r3, #8]
 800b0c0:	60da      	str	r2, [r3, #12]
 800b0c2:	611a      	str	r2, [r3, #16]
 800b0c4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800b0c6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800b0ca:	f7ff fc0d 	bl	800a8e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800b0ce:	2002      	movs	r0, #2
 800b0d0:	f7ff fbf2 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800b0d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b0d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b0da:	2302      	movs	r3, #2
 800b0dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800b0ea:	2307      	movs	r3, #7
 800b0ec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0ee:	1d3b      	adds	r3, r7, #4
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4819      	ldr	r0, [pc, #100]	@ (800b158 <MX_USART3_UART_Init+0xbc>)
 800b0f4:	f000 fc37 	bl	800b966 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800b0f8:	f7ff fa46 	bl	800a588 <__NVIC_GetPriorityGrouping>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2200      	movs	r2, #0
 800b100:	2100      	movs	r1, #0
 800b102:	4618      	mov	r0, r3
 800b104:	f7ff fa96 	bl	800a634 <NVIC_EncodePriority>
 800b108:	4603      	mov	r3, r0
 800b10a:	4619      	mov	r1, r3
 800b10c:	2027      	movs	r0, #39	@ 0x27
 800b10e:	f7ff fa67 	bl	800a5e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800b112:	2027      	movs	r0, #39	@ 0x27
 800b114:	f7ff fa46 	bl	800a5a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800b118:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800b11c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800b11e:	2300      	movs	r3, #0
 800b120:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800b122:	2300      	movs	r3, #0
 800b124:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800b126:	2300      	movs	r3, #0
 800b128:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800b12a:	230c      	movs	r3, #12
 800b12c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800b12e:	2300      	movs	r3, #0
 800b130:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800b132:	2300      	movs	r3, #0
 800b134:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800b136:	f107 031c 	add.w	r3, r7, #28
 800b13a:	4619      	mov	r1, r3
 800b13c:	4807      	ldr	r0, [pc, #28]	@ (800b15c <MX_USART3_UART_Init+0xc0>)
 800b13e:	f001 f95d 	bl	800c3fc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800b142:	4806      	ldr	r0, [pc, #24]	@ (800b15c <MX_USART3_UART_Init+0xc0>)
 800b144:	f7ff fc5a 	bl	800a9fc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800b148:	4804      	ldr	r0, [pc, #16]	@ (800b15c <MX_USART3_UART_Init+0xc0>)
 800b14a:	f7ff fc47 	bl	800a9dc <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b14e:	bf00      	nop
 800b150:	3738      	adds	r7, #56	@ 0x38
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	40020400 	.word	0x40020400
 800b15c:	40004800 	.word	0x40004800

0800b160 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08e      	sub	sp, #56	@ 0x38
 800b164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800b166:	f107 031c 	add.w	r3, r7, #28
 800b16a:	2200      	movs	r2, #0
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	605a      	str	r2, [r3, #4]
 800b170:	609a      	str	r2, [r3, #8]
 800b172:	60da      	str	r2, [r3, #12]
 800b174:	611a      	str	r2, [r3, #16]
 800b176:	615a      	str	r2, [r3, #20]
 800b178:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b17a:	1d3b      	adds	r3, r7, #4
 800b17c:	2200      	movs	r2, #0
 800b17e:	601a      	str	r2, [r3, #0]
 800b180:	605a      	str	r2, [r3, #4]
 800b182:	609a      	str	r2, [r3, #8]
 800b184:	60da      	str	r2, [r3, #12]
 800b186:	611a      	str	r2, [r3, #16]
 800b188:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800b18a:	2020      	movs	r0, #32
 800b18c:	f7ff fbc4 	bl	800a918 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800b190:	2004      	movs	r0, #4
 800b192:	f7ff fb91 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800b196:	23c0      	movs	r3, #192	@ 0xc0
 800b198:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b19a:	2302      	movs	r3, #2
 800b19c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800b1aa:	2308      	movs	r3, #8
 800b1ac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b1ae:	1d3b      	adds	r3, r7, #4
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	4819      	ldr	r0, [pc, #100]	@ (800b218 <MX_USART6_UART_Init+0xb8>)
 800b1b4:	f000 fbd7 	bl	800b966 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800b1b8:	f7ff f9e6 	bl	800a588 <__NVIC_GetPriorityGrouping>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2200      	movs	r2, #0
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7ff fa36 	bl	800a634 <NVIC_EncodePriority>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	2047      	movs	r0, #71	@ 0x47
 800b1ce:	f7ff fa07 	bl	800a5e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800b1d2:	2047      	movs	r0, #71	@ 0x47
 800b1d4:	f7ff f9e6 	bl	800a5a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800b1d8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800b1dc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800b1ea:	230c      	movs	r3, #12
 800b1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800b1f6:	f107 031c 	add.w	r3, r7, #28
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4807      	ldr	r0, [pc, #28]	@ (800b21c <MX_USART6_UART_Init+0xbc>)
 800b1fe:	f001 f8fd 	bl	800c3fc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800b202:	4806      	ldr	r0, [pc, #24]	@ (800b21c <MX_USART6_UART_Init+0xbc>)
 800b204:	f7ff fbfa 	bl	800a9fc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800b208:	4804      	ldr	r0, [pc, #16]	@ (800b21c <MX_USART6_UART_Init+0xbc>)
 800b20a:	f7ff fbe7 	bl	800a9dc <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800b20e:	bf00      	nop
 800b210:	3738      	adds	r7, #56	@ 0x38
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	40020800 	.word	0x40020800
 800b21c:	40011400 	.word	0x40011400

0800b220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b226:	463b      	mov	r3, r7
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	605a      	str	r2, [r3, #4]
 800b22e:	609a      	str	r2, [r3, #8]
 800b230:	60da      	str	r2, [r3, #12]
 800b232:	611a      	str	r2, [r3, #16]
 800b234:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800b236:	2004      	movs	r0, #4
 800b238:	f7ff fb3e 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800b23c:	2080      	movs	r0, #128	@ 0x80
 800b23e:	f7ff fb3b 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800b242:	2001      	movs	r0, #1
 800b244:	f7ff fb38 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800b248:	2002      	movs	r0, #2
 800b24a:	f7ff fb35 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800b24e:	2008      	movs	r0, #8
 800b250:	f7ff fb32 	bl	800a8b8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, WD_DONE_Pin|LORA_IO0_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin);
 800b254:	f641 0112 	movw	r1, #6162	@ 0x1812
 800b258:	4826      	ldr	r0, [pc, #152]	@ (800b2f4 <MX_GPIO_Init+0xd4>)
 800b25a:	f7ff fbe5 	bl	800aa28 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_busy_Pin|ENABLE_MUX_Pin);
 800b25e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800b262:	4825      	ldr	r0, [pc, #148]	@ (800b2f8 <MX_GPIO_Init+0xd8>)
 800b264:	f7ff fbe0 	bl	800aa28 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 800b268:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b26c:	4823      	ldr	r0, [pc, #140]	@ (800b2fc <MX_GPIO_Init+0xdc>)
 800b26e:	f7ff fbdb 	bl	800aa28 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = PMU_INT_MCU_Pin|PDU_INT_MCU_Pin|IOU_INT_MCU_Pin|EJECT_Pin
 800b272:	f24e 030c 	movw	r3, #57356	@ 0xe00c
 800b276:	603b      	str	r3, [r7, #0]
                          |CAM_INT_MCU_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800b278:	2300      	movs	r3, #0
 800b27a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b27c:	2300      	movs	r3, #0
 800b27e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b280:	463b      	mov	r3, r7
 800b282:	4619      	mov	r1, r3
 800b284:	481c      	ldr	r0, [pc, #112]	@ (800b2f8 <MX_GPIO_Init+0xd8>)
 800b286:	f000 fb6e 	bl	800b966 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin|LORA_IO0_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin;
 800b28a:	f641 0312 	movw	r3, #6162	@ 0x1812
 800b28e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800b290:	2301      	movs	r3, #1
 800b292:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800b294:	2300      	movs	r3, #0
 800b296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b29c:	2300      	movs	r3, #0
 800b29e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2a0:	463b      	mov	r3, r7
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4813      	ldr	r0, [pc, #76]	@ (800b2f4 <MX_GPIO_Init+0xd4>)
 800b2a6:	f000 fb5e 	bl	800b966 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_busy_Pin|ENABLE_MUX_Pin;
 800b2aa:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800b2ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	480c      	ldr	r0, [pc, #48]	@ (800b2f8 <MX_GPIO_Init+0xd8>)
 800b2c6:	f000 fb4e 	bl	800b966 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_RF_Pin;
 800b2ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b2ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENABLE_RF_GPIO_Port, &GPIO_InitStruct);
 800b2e0:	463b      	mov	r3, r7
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	4805      	ldr	r0, [pc, #20]	@ (800b2fc <MX_GPIO_Init+0xdc>)
 800b2e6:	f000 fb3e 	bl	800b966 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800b2ea:	bf00      	nop
 800b2ec:	3718      	adds	r7, #24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	40020000 	.word	0x40020000
 800b2f8:	40020800 	.word	0x40020800
 800b2fc:	40020400 	.word	0x40020400

0800b300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b300:	b480      	push	{r7}
 800b302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b304:	bf00      	nop
 800b306:	e7fd      	b.n	800b304 <NMI_Handler+0x4>

0800b308 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b308:	b480      	push	{r7}
 800b30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b30c:	bf00      	nop
 800b30e:	e7fd      	b.n	800b30c <HardFault_Handler+0x4>

0800b310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b310:	b480      	push	{r7}
 800b312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b314:	bf00      	nop
 800b316:	e7fd      	b.n	800b314 <MemManage_Handler+0x4>

0800b318 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b318:	b480      	push	{r7}
 800b31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b31c:	bf00      	nop
 800b31e:	e7fd      	b.n	800b31c <BusFault_Handler+0x4>

0800b320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b320:	b480      	push	{r7}
 800b322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b324:	bf00      	nop
 800b326:	e7fd      	b.n	800b324 <UsageFault_Handler+0x4>

0800b328 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b328:	b480      	push	{r7}
 800b32a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b32c:	bf00      	nop
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b336:	b480      	push	{r7}
 800b338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b33a:	bf00      	nop
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b344:	b480      	push	{r7}
 800b346:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b348:	bf00      	nop
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
	...

0800b354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    g_systick_count++;
 800b358:	4b04      	ldr	r3, [pc, #16]	@ (800b36c <SysTick_Handler+0x18>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3301      	adds	r3, #1
 800b35e:	4a03      	ldr	r2, [pc, #12]	@ (800b36c <SysTick_Handler+0x18>)
 800b360:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 800b362:	f001 f999 	bl	800c698 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b366:	bf00      	nop
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	2000a138 	.word	0x2000a138

0800b370 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (USART1);
 800b374:	4802      	ldr	r0, [pc, #8]	@ (800b380 <USART1_IRQHandler+0x10>)
 800b376:	f7f6 fea7 	bl	80020c8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b37a:	bf00      	nop
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	40011000 	.word	0x40011000

0800b384 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (USART2);
 800b388:	4802      	ldr	r0, [pc, #8]	@ (800b394 <USART2_IRQHandler+0x10>)
 800b38a:	f7f6 fe9d 	bl	80020c8 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b38e:	bf00      	nop
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	40004400 	.word	0x40004400

0800b398 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (USART3);
 800b39c:	4802      	ldr	r0, [pc, #8]	@ (800b3a8 <USART3_IRQHandler+0x10>)
 800b39e:	f7f6 fe93 	bl	80020c8 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b3a2:	bf00      	nop
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	40004800 	.word	0x40004800

0800b3ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Uart_isr (UART4);
 800b3b0:	4802      	ldr	r0, [pc, #8]	@ (800b3bc <UART4_IRQHandler+0x10>)
 800b3b2:	f7f6 fe89 	bl	80020c8 <Uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b3b6:	bf00      	nop
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	40004c00 	.word	0x40004c00

0800b3c0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr (UART5);
 800b3c4:	4802      	ldr	r0, [pc, #8]	@ (800b3d0 <UART5_IRQHandler+0x10>)
 800b3c6:	f7f6 fe7f 	bl	80020c8 <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800b3ca:	bf00      	nop
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	40005000 	.word	0x40005000

0800b3d4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr (USART6);
 800b3d8:	4802      	ldr	r0, [pc, #8]	@ (800b3e4 <USART6_IRQHandler+0x10>)
 800b3da:	f7f6 fe75 	bl	80020c8 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800b3de:	bf00      	nop
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	40011400 	.word	0x40011400

0800b3e8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */
	I2C3_IRQHandler();
 800b3ec:	f7fe ff8e 	bl	800a30c <I2C3_IRQHandler>
  /* USER CODE END I2C3_EV_IRQn 0 */

  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800b3f0:	bf00      	nop
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_ER_IRQn 0 */

  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800b3f8:	bf00      	nop
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b402:	b480      	push	{r7}
 800b404:	af00      	add	r7, sp, #0
  return 1;
 800b406:	2301      	movs	r3, #1
}
 800b408:	4618      	mov	r0, r3
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <_kill>:

int _kill(int pid, int sig)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b082      	sub	sp, #8
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b41c:	f006 f870 	bl	8011500 <__errno>
 800b420:	4603      	mov	r3, r0
 800b422:	2216      	movs	r2, #22
 800b424:	601a      	str	r2, [r3, #0]
  return -1;
 800b426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <_exit>:

void _exit (int status)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b082      	sub	sp, #8
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b43a:	f04f 31ff 	mov.w	r1, #4294967295
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7ff ffe7 	bl	800b412 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b444:	bf00      	nop
 800b446:	e7fd      	b.n	800b444 <_exit+0x12>

0800b448 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b454:	2300      	movs	r3, #0
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	e00a      	b.n	800b470 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b45a:	f3af 8000 	nop.w
 800b45e:	4601      	mov	r1, r0
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	60ba      	str	r2, [r7, #8]
 800b466:	b2ca      	uxtb	r2, r1
 800b468:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	3301      	adds	r3, #1
 800b46e:	617b      	str	r3, [r7, #20]
 800b470:	697a      	ldr	r2, [r7, #20]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	429a      	cmp	r2, r3
 800b476:	dbf0      	blt.n	800b45a <_read+0x12>
  }

  return len;
 800b478:	687b      	ldr	r3, [r7, #4]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3718      	adds	r7, #24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b086      	sub	sp, #24
 800b486:	af00      	add	r7, sp, #0
 800b488:	60f8      	str	r0, [r7, #12]
 800b48a:	60b9      	str	r1, [r7, #8]
 800b48c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b48e:	2300      	movs	r3, #0
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	e009      	b.n	800b4a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	60ba      	str	r2, [r7, #8]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	617b      	str	r3, [r7, #20]
 800b4a8:	697a      	ldr	r2, [r7, #20]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	dbf1      	blt.n	800b494 <_write+0x12>
  }
  return len;
 800b4b0:	687b      	ldr	r3, [r7, #4]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <_close>:

int _close(int file)
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b083      	sub	sp, #12
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b4c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr

0800b4d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b4e2:	605a      	str	r2, [r3, #4]
  return 0;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <_isatty>:

int _isatty(int file)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b083      	sub	sp, #12
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b4fa:	2301      	movs	r3, #1
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
	...

0800b524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b52c:	4a14      	ldr	r2, [pc, #80]	@ (800b580 <_sbrk+0x5c>)
 800b52e:	4b15      	ldr	r3, [pc, #84]	@ (800b584 <_sbrk+0x60>)
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b538:	4b13      	ldr	r3, [pc, #76]	@ (800b588 <_sbrk+0x64>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d102      	bne.n	800b546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b540:	4b11      	ldr	r3, [pc, #68]	@ (800b588 <_sbrk+0x64>)
 800b542:	4a12      	ldr	r2, [pc, #72]	@ (800b58c <_sbrk+0x68>)
 800b544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b546:	4b10      	ldr	r3, [pc, #64]	@ (800b588 <_sbrk+0x64>)
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4413      	add	r3, r2
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	429a      	cmp	r2, r3
 800b552:	d207      	bcs.n	800b564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b554:	f005 ffd4 	bl	8011500 <__errno>
 800b558:	4603      	mov	r3, r0
 800b55a:	220c      	movs	r2, #12
 800b55c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b55e:	f04f 33ff 	mov.w	r3, #4294967295
 800b562:	e009      	b.n	800b578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b564:	4b08      	ldr	r3, [pc, #32]	@ (800b588 <_sbrk+0x64>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b56a:	4b07      	ldr	r3, [pc, #28]	@ (800b588 <_sbrk+0x64>)
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4413      	add	r3, r2
 800b572:	4a05      	ldr	r2, [pc, #20]	@ (800b588 <_sbrk+0x64>)
 800b574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b576:	68fb      	ldr	r3, [r7, #12]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3718      	adds	r7, #24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20020000 	.word	0x20020000
 800b584:	00000400 	.word	0x00000400
 800b588:	2000a13c 	.word	0x2000a13c
 800b58c:	2000a4a8 	.word	0x2000a4a8

0800b590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b590:	b480      	push	{r7}
 800b592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b594:	4b06      	ldr	r3, [pc, #24]	@ (800b5b0 <SystemInit+0x20>)
 800b596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b59a:	4a05      	ldr	r2, [pc, #20]	@ (800b5b0 <SystemInit+0x20>)
 800b59c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b5a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b5a4:	bf00      	nop
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	e000ed00 	.word	0xe000ed00

0800b5b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b5b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800b5ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800b5b8:	f7ff ffea 	bl	800b590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b5bc:	480c      	ldr	r0, [pc, #48]	@ (800b5f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b5be:	490d      	ldr	r1, [pc, #52]	@ (800b5f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b5c0:	4a0d      	ldr	r2, [pc, #52]	@ (800b5f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b5c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b5c4:	e002      	b.n	800b5cc <LoopCopyDataInit>

0800b5c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b5c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b5c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b5ca:	3304      	adds	r3, #4

0800b5cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b5cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b5ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b5d0:	d3f9      	bcc.n	800b5c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b5d2:	4a0a      	ldr	r2, [pc, #40]	@ (800b5fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b5d4:	4c0a      	ldr	r4, [pc, #40]	@ (800b600 <LoopFillZerobss+0x22>)
  movs r3, #0
 800b5d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b5d8:	e001      	b.n	800b5de <LoopFillZerobss>

0800b5da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b5da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b5dc:	3204      	adds	r2, #4

0800b5de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b5de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b5e0:	d3fb      	bcc.n	800b5da <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800b5e2:	f005 ff93 	bl	801150c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b5e6:	f7ff fa2f 	bl	800aa48 <main>
  bx  lr    
 800b5ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b5ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b5f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b5f4:	200023b0 	.word	0x200023b0
  ldr r2, =_sidata
 800b5f8:	08017394 	.word	0x08017394
  ldr r2, =_sbss
 800b5fc:	200023b0 	.word	0x200023b0
  ldr r4, =_ebss
 800b600:	2000a4a4 	.word	0x2000a4a4

0800b604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b604:	e7fe      	b.n	800b604 <ADC_IRQHandler>

0800b606 <LL_GPIO_SetOutputPin>:
{
 800b606:	b480      	push	{r7}
 800b608:	b083      	sub	sp, #12
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	619a      	str	r2, [r3, #24]
}
 800b616:	bf00      	nop
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <LL_GPIO_ResetOutputPin>:
{
 800b622:	b480      	push	{r7}
 800b624:	b083      	sub	sp, #12
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	041a      	lsls	r2, r3, #16
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	619a      	str	r2, [r3, #24]
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <WDT_init>:




void WDT_init(void)
{
 800b640:	b480      	push	{r7}
 800b642:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 800b644:	4b03      	ldr	r3, [pc, #12]	@ (800b654 <WDT_init+0x14>)
 800b646:	2200      	movs	r2, #0
 800b648:	701a      	strb	r2, [r3, #0]

}
 800b64a:	bf00      	nop
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	2000a140 	.word	0x2000a140

0800b658 <WDT_create_task>:

void WDT_create_task(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800b65c:	4902      	ldr	r1, [pc, #8]	@ (800b668 <WDT_create_task+0x10>)
 800b65e:	4803      	ldr	r0, [pc, #12]	@ (800b66c <WDT_create_task+0x14>)
 800b660:	f000 ffda 	bl	800c618 <SCH_TASK_CreateTask>

}
 800b664:	bf00      	nop
 800b666:	bd80      	pop	{r7, pc}
 800b668:	200021d8 	.word	0x200021d8
 800b66c:	200021d4 	.word	0x200021d4

0800b670 <status_wdt_update>:

void	status_wdt_update(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	af00      	add	r7, sp, #0

		if (WDT_Current){
 800b674:	4b14      	ldr	r3, [pc, #80]	@ (800b6c8 <status_wdt_update+0x58>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d012      	beq.n	800b6a2 <status_wdt_update+0x32>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800b67c:	2001      	movs	r0, #1
 800b67e:	f000 ffb5 	bl	800c5ec <SCH_TIM_HasCompleted>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d01d      	beq.n	800b6c4 <status_wdt_update+0x54>
			{
				WDT_Current = 0;
 800b688:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c8 <status_wdt_update+0x58>)
 800b68a:	2200      	movs	r2, #0
 800b68c:	701a      	strb	r2, [r3, #0]
				LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800b68e:	2102      	movs	r1, #2
 800b690:	480e      	ldr	r0, [pc, #56]	@ (800b6cc <status_wdt_update+0x5c>)
 800b692:	f7ff ffc6 	bl	800b622 <LL_GPIO_ResetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 800b696:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b69a:	2001      	movs	r0, #1
 800b69c:	f000 ff90 	bl	800c5c0 <SCH_TIM_Start>
				WDT_Current = 1;
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
			}
	}
}
 800b6a0:	e010      	b.n	800b6c4 <status_wdt_update+0x54>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800b6a2:	2001      	movs	r0, #1
 800b6a4:	f000 ffa2 	bl	800c5ec <SCH_TIM_HasCompleted>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00a      	beq.n	800b6c4 <status_wdt_update+0x54>
				WDT_Current = 1;
 800b6ae:	4b06      	ldr	r3, [pc, #24]	@ (800b6c8 <status_wdt_update+0x58>)
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	701a      	strb	r2, [r3, #0]
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800b6b4:	2102      	movs	r1, #2
 800b6b6:	4805      	ldr	r0, [pc, #20]	@ (800b6cc <status_wdt_update+0x5c>)
 800b6b8:	f7ff ffa5 	bl	800b606 <LL_GPIO_SetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800b6bc:	21c8      	movs	r1, #200	@ 0xc8
 800b6be:	2001      	movs	r0, #1
 800b6c0:	f000 ff7e 	bl	800c5c0 <SCH_TIM_Start>
}
 800b6c4:	bf00      	nop
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	2000a140 	.word	0x2000a140
 800b6cc:	40020000 	.word	0x40020000

0800b6d0 <LL_GPIO_SetPinMode>:
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b08b      	sub	sp, #44	@ 0x2c
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	fa93 f3a3 	rbit	r3, r3
 800b6ea:	613b      	str	r3, [r7, #16]
  return result;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d101      	bne.n	800b6fa <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b6f6:	2320      	movs	r3, #32
 800b6f8:	e003      	b.n	800b702 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	fab3 f383 	clz	r3, r3
 800b700:	b2db      	uxtb	r3, r3
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	2103      	movs	r1, #3
 800b706:	fa01 f303 	lsl.w	r3, r1, r3
 800b70a:	43db      	mvns	r3, r3
 800b70c:	401a      	ands	r2, r3
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	fa93 f3a3 	rbit	r3, r3
 800b718:	61fb      	str	r3, [r7, #28]
  return result;
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b724:	2320      	movs	r3, #32
 800b726:	e003      	b.n	800b730 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72a:	fab3 f383 	clz	r3, r3
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	005b      	lsls	r3, r3, #1
 800b732:	6879      	ldr	r1, [r7, #4]
 800b734:	fa01 f303 	lsl.w	r3, r1, r3
 800b738:	431a      	orrs	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	601a      	str	r2, [r3, #0]
}
 800b73e:	bf00      	nop
 800b740:	372c      	adds	r7, #44	@ 0x2c
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <LL_GPIO_SetPinOutputType>:
{
 800b74a:	b480      	push	{r7}
 800b74c:	b085      	sub	sp, #20
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	685a      	ldr	r2, [r3, #4]
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	43db      	mvns	r3, r3
 800b75e:	401a      	ands	r2, r3
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	6879      	ldr	r1, [r7, #4]
 800b764:	fb01 f303 	mul.w	r3, r1, r3
 800b768:	431a      	orrs	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	605a      	str	r2, [r3, #4]
}
 800b76e:	bf00      	nop
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <LL_GPIO_SetPinSpeed>:
{
 800b77a:	b480      	push	{r7}
 800b77c:	b08b      	sub	sp, #44	@ 0x2c
 800b77e:	af00      	add	r7, sp, #0
 800b780:	60f8      	str	r0, [r7, #12]
 800b782:	60b9      	str	r1, [r7, #8]
 800b784:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	689a      	ldr	r2, [r3, #8]
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	fa93 f3a3 	rbit	r3, r3
 800b794:	613b      	str	r3, [r7, #16]
  return result;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b7a0:	2320      	movs	r3, #32
 800b7a2:	e003      	b.n	800b7ac <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	fab3 f383 	clz	r3, r3
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	005b      	lsls	r3, r3, #1
 800b7ae:	2103      	movs	r1, #3
 800b7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b4:	43db      	mvns	r3, r3
 800b7b6:	401a      	ands	r2, r3
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	fa93 f3a3 	rbit	r3, r3
 800b7c2:	61fb      	str	r3, [r7, #28]
  return result;
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b7ce:	2320      	movs	r3, #32
 800b7d0:	e003      	b.n	800b7da <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d4:	fab3 f383 	clz	r3, r3
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	6879      	ldr	r1, [r7, #4]
 800b7de:	fa01 f303 	lsl.w	r3, r1, r3
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	609a      	str	r2, [r3, #8]
}
 800b7e8:	bf00      	nop
 800b7ea:	372c      	adds	r7, #44	@ 0x2c
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <LL_GPIO_SetPinPull>:
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b08b      	sub	sp, #44	@ 0x2c
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	68da      	ldr	r2, [r3, #12]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	fa93 f3a3 	rbit	r3, r3
 800b80e:	613b      	str	r3, [r7, #16]
  return result;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b81a:	2320      	movs	r3, #32
 800b81c:	e003      	b.n	800b826 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	fab3 f383 	clz	r3, r3
 800b824:	b2db      	uxtb	r3, r3
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	2103      	movs	r1, #3
 800b82a:	fa01 f303 	lsl.w	r3, r1, r3
 800b82e:	43db      	mvns	r3, r3
 800b830:	401a      	ands	r2, r3
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b836:	6a3b      	ldr	r3, [r7, #32]
 800b838:	fa93 f3a3 	rbit	r3, r3
 800b83c:	61fb      	str	r3, [r7, #28]
  return result;
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b848:	2320      	movs	r3, #32
 800b84a:	e003      	b.n	800b854 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84e:	fab3 f383 	clz	r3, r3
 800b852:	b2db      	uxtb	r3, r3
 800b854:	005b      	lsls	r3, r3, #1
 800b856:	6879      	ldr	r1, [r7, #4]
 800b858:	fa01 f303 	lsl.w	r3, r1, r3
 800b85c:	431a      	orrs	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	60da      	str	r2, [r3, #12]
}
 800b862:	bf00      	nop
 800b864:	372c      	adds	r7, #44	@ 0x2c
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <LL_GPIO_SetAFPin_0_7>:
{
 800b86e:	b480      	push	{r7}
 800b870:	b08b      	sub	sp, #44	@ 0x2c
 800b872:	af00      	add	r7, sp, #0
 800b874:	60f8      	str	r0, [r7, #12]
 800b876:	60b9      	str	r1, [r7, #8]
 800b878:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6a1a      	ldr	r2, [r3, #32]
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	fa93 f3a3 	rbit	r3, r3
 800b888:	613b      	str	r3, [r7, #16]
  return result;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b894:	2320      	movs	r3, #32
 800b896:	e003      	b.n	800b8a0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	fab3 f383 	clz	r3, r3
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	210f      	movs	r1, #15
 800b8a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a8:	43db      	mvns	r3, r3
 800b8aa:	401a      	ands	r2, r3
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8b0:	6a3b      	ldr	r3, [r7, #32]
 800b8b2:	fa93 f3a3 	rbit	r3, r3
 800b8b6:	61fb      	str	r3, [r7, #28]
  return result;
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b8c2:	2320      	movs	r3, #32
 800b8c4:	e003      	b.n	800b8ce <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c8:	fab3 f383 	clz	r3, r3
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	6879      	ldr	r1, [r7, #4]
 800b8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d6:	431a      	orrs	r2, r3
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	621a      	str	r2, [r3, #32]
}
 800b8dc:	bf00      	nop
 800b8de:	372c      	adds	r7, #44	@ 0x2c
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <LL_GPIO_SetAFPin_8_15>:
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b08b      	sub	sp, #44	@ 0x2c
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	0a1b      	lsrs	r3, r3, #8
 800b8fc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	fa93 f3a3 	rbit	r3, r3
 800b904:	613b      	str	r3, [r7, #16]
  return result;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b910:	2320      	movs	r3, #32
 800b912:	e003      	b.n	800b91c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	fab3 f383 	clz	r3, r3
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	210f      	movs	r1, #15
 800b920:	fa01 f303 	lsl.w	r3, r1, r3
 800b924:	43db      	mvns	r3, r3
 800b926:	401a      	ands	r2, r3
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	0a1b      	lsrs	r3, r3, #8
 800b92c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	fa93 f3a3 	rbit	r3, r3
 800b934:	61fb      	str	r3, [r7, #28]
  return result;
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b940:	2320      	movs	r3, #32
 800b942:	e003      	b.n	800b94c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b946:	fab3 f383 	clz	r3, r3
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	6879      	ldr	r1, [r7, #4]
 800b950:	fa01 f303 	lsl.w	r3, r1, r3
 800b954:	431a      	orrs	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b95a:	bf00      	nop
 800b95c:	372c      	adds	r7, #44	@ 0x2c
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b08a      	sub	sp, #40	@ 0x28
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800b970:	2300      	movs	r3, #0
 800b972:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800b974:	2300      	movs	r3, #0
 800b976:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	fa93 f3a3 	rbit	r3, r3
 800b984:	617b      	str	r3, [r7, #20]
  return result;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <LL_GPIO_Init+0x2e>
    return 32U;
 800b990:	2320      	movs	r3, #32
 800b992:	e003      	b.n	800b99c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	fab3 f383 	clz	r3, r3
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b99e:	e057      	b.n	800ba50 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800b9b0:	6a3b      	ldr	r3, [r7, #32]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d049      	beq.n	800ba4a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d003      	beq.n	800b9c6 <LL_GPIO_Init+0x60>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d10d      	bne.n	800b9e2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	6a39      	ldr	r1, [r7, #32]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff fed3 	bl	800b77a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6a39      	ldr	r1, [r7, #32]
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff feb4 	bl	800b74a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	6a39      	ldr	r1, [r7, #32]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7ff ff02 	bl	800b7f4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d121      	bne.n	800ba3c <LL_GPIO_Init+0xd6>
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	fa93 f3a3 	rbit	r3, r3
 800ba02:	60bb      	str	r3, [r7, #8]
  return result;
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d101      	bne.n	800ba12 <LL_GPIO_Init+0xac>
    return 32U;
 800ba0e:	2320      	movs	r3, #32
 800ba10:	e003      	b.n	800ba1a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	fab3 f383 	clz	r3, r3
 800ba18:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800ba1a:	2b07      	cmp	r3, #7
 800ba1c:	d807      	bhi.n	800ba2e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	461a      	mov	r2, r3
 800ba24:	6a39      	ldr	r1, [r7, #32]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7ff ff21 	bl	800b86e <LL_GPIO_SetAFPin_0_7>
 800ba2c:	e006      	b.n	800ba3c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	461a      	mov	r2, r3
 800ba34:	6a39      	ldr	r1, [r7, #32]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff ff56 	bl	800b8e8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	461a      	mov	r2, r3
 800ba42:	6a39      	ldr	r1, [r7, #32]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7ff fe43 	bl	800b6d0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba56:	fa22 f303 	lsr.w	r3, r2, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1a0      	bne.n	800b9a0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3728      	adds	r7, #40	@ 0x28
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <LL_I2C_Enable>:
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f043 0201 	orr.w	r2, r3, #1
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	601a      	str	r2, [r3, #0]
}
 800ba7c:	bf00      	nop
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <LL_I2C_Disable>:
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f023 0201 	bic.w	r2, r3, #1
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	601a      	str	r2, [r3, #0]
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <LL_I2C_SetOwnAddress1>:
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800babc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bac0:	68b9      	ldr	r1, [r7, #8]
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	430a      	orrs	r2, r1
 800bac6:	431a      	orrs	r2, r3
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	609a      	str	r2, [r3, #8]
}
 800bacc:	bf00      	nop
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <LL_I2C_ConfigSpeed>:
{
 800bad8:	b480      	push	{r7}
 800bada:	b087      	sub	sp, #28
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800bae6:	2300      	movs	r3, #0
 800bae8:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800baea:	2300      	movs	r3, #0
 800baec:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	4a42      	ldr	r2, [pc, #264]	@ (800bbfc <LL_I2C_ConfigSpeed+0x124>)
 800baf2:	fba2 2303 	umull	r2, r3, r2, r3
 800baf6:	0c9b      	lsrs	r3, r3, #18
 800baf8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	431a      	orrs	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6a1b      	ldr	r3, [r3, #32]
 800bb0e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	493a      	ldr	r1, [pc, #232]	@ (800bc00 <LL_I2C_ConfigSpeed+0x128>)
 800bb16:	428b      	cmp	r3, r1
 800bb18:	d802      	bhi.n	800bb20 <LL_I2C_ConfigSpeed+0x48>
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	e009      	b.n	800bb34 <LL_I2C_ConfigSpeed+0x5c>
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800bb26:	fb01 f303 	mul.w	r3, r1, r3
 800bb2a:	4936      	ldr	r1, [pc, #216]	@ (800bc04 <LL_I2C_ConfigSpeed+0x12c>)
 800bb2c:	fba1 1303 	umull	r1, r3, r1, r3
 800bb30:	099b      	lsrs	r3, r3, #6
 800bb32:	3301      	adds	r3, #1
 800bb34:	431a      	orrs	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a30      	ldr	r2, [pc, #192]	@ (800bc00 <LL_I2C_ConfigSpeed+0x128>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d939      	bls.n	800bbb6 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d117      	bne.n	800bb78 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	005b      	lsls	r3, r3, #1
 800bb4e:	4413      	add	r3, r2
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb56:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d009      	beq.n	800bb72 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	4613      	mov	r3, r2
 800bb62:	005b      	lsls	r3, r3, #1
 800bb64:	4413      	add	r3, r2
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800bb6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb70:	e01d      	b.n	800bbae <LL_I2C_ConfigSpeed+0xd6>
 800bb72:	f248 0301 	movw	r3, #32769	@ 0x8001
 800bb76:	e01a      	b.n	800bbae <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009a      	lsls	r2, r3, #2
 800bb82:	4413      	add	r3, r2
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00b      	beq.n	800bbaa <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	4613      	mov	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	009a      	lsls	r2, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800bba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bba8:	e001      	b.n	800bbae <LL_I2C_ConfigSpeed+0xd6>
 800bbaa:	f248 0301 	movw	r3, #32769	@ 0x8001
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]
 800bbb4:	e011      	b.n	800bbda <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	fbb2 f2f3 	udiv	r2, r2, r3
 800bbc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bbc4:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d005      	beq.n	800bbd6 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd4:	e000      	b.n	800bbd8 <LL_I2C_ConfigSpeed+0x100>
 800bbd6:	2304      	movs	r3, #4
 800bbd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 800bbe2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	431a      	orrs	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	61da      	str	r2, [r3, #28]
}
 800bbee:	bf00      	nop
 800bbf0:	371c      	adds	r7, #28
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop
 800bbfc:	431bde83 	.word	0x431bde83
 800bc00:	000186a0 	.word	0x000186a0
 800bc04:	10624dd3 	.word	0x10624dd3

0800bc08 <LL_I2C_SetMode>:
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f023 021a 	bic.w	r2, r3, #26
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	431a      	orrs	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	601a      	str	r2, [r3, #0]
}
 800bc22:	bf00      	nop
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <LL_I2C_AcknowledgeNextData>:
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	431a      	orrs	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	601a      	str	r2, [r3, #0]
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7ff ff12 	bl	800ba88 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800bc64:	f107 0308 	add.w	r3, r7, #8
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 f895 	bl	800bd98 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800bc6e:	6939      	ldr	r1, [r7, #16]
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	685a      	ldr	r2, [r3, #4]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff ff2d 	bl	800bad8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	68d9      	ldr	r1, [r3, #12]
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	695b      	ldr	r3, [r3, #20]
 800bc86:	461a      	mov	r2, r3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7ff ff0d 	bl	800baa8 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff ffb7 	bl	800bc08 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7ff fee4 	bl	800ba68 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7ff ffc1 	bl	800bc2e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
	...

0800bcb8 <LL_RCC_GetSysClkSource>:
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bcbc:	4b04      	ldr	r3, [pc, #16]	@ (800bcd0 <LL_RCC_GetSysClkSource+0x18>)
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	f003 030c 	and.w	r3, r3, #12
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	40023800 	.word	0x40023800

0800bcd4 <LL_RCC_GetAHBPrescaler>:
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bcd8:	4b04      	ldr	r3, [pc, #16]	@ (800bcec <LL_RCC_GetAHBPrescaler+0x18>)
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	40023800 	.word	0x40023800

0800bcf0 <LL_RCC_GetAPB1Prescaler>:
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800bcf4:	4b04      	ldr	r3, [pc, #16]	@ (800bd08 <LL_RCC_GetAPB1Prescaler+0x18>)
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	40023800 	.word	0x40023800

0800bd0c <LL_RCC_GetAPB2Prescaler>:
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800bd10:	4b04      	ldr	r3, [pc, #16]	@ (800bd24 <LL_RCC_GetAPB2Prescaler+0x18>)
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	40023800 	.word	0x40023800

0800bd28 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bd2c:	4b04      	ldr	r3, [pc, #16]	@ (800bd40 <LL_RCC_PLL_GetMainSource+0x18>)
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	40023800 	.word	0x40023800

0800bd44 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800bd44:	b480      	push	{r7}
 800bd46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bd48:	4b04      	ldr	r3, [pc, #16]	@ (800bd5c <LL_RCC_PLL_GetN+0x18>)
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	099b      	lsrs	r3, r3, #6
 800bd4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	40023800 	.word	0x40023800

0800bd60 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800bd60:	b480      	push	{r7}
 800bd62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800bd64:	4b04      	ldr	r3, [pc, #16]	@ (800bd78 <LL_RCC_PLL_GetP+0x18>)
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	40023800 	.word	0x40023800

0800bd7c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bd80:	4b04      	ldr	r3, [pc, #16]	@ (800bd94 <LL_RCC_PLL_GetDivider+0x18>)
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	40023800 	.word	0x40023800

0800bd98 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800bda0:	f000 f820 	bl	800bde4 <RCC_GetSystemClockFreq>
 800bda4:	4602      	mov	r2, r0
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 f840 	bl	800be34 <RCC_GetHCLKClockFreq>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f000 f84e 	bl	800be60 <RCC_GetPCLK1ClockFreq>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f000 f85a 	bl	800be88 <RCC_GetPCLK2ClockFreq>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	60da      	str	r2, [r3, #12]
}
 800bdda:	bf00      	nop
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800bdea:	2300      	movs	r3, #0
 800bdec:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800bdee:	f7ff ff63 	bl	800bcb8 <LL_RCC_GetSysClkSource>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b08      	cmp	r3, #8
 800bdf6:	d00c      	beq.n	800be12 <RCC_GetSystemClockFreq+0x2e>
 800bdf8:	2b08      	cmp	r3, #8
 800bdfa:	d80f      	bhi.n	800be1c <RCC_GetSystemClockFreq+0x38>
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <RCC_GetSystemClockFreq+0x22>
 800be00:	2b04      	cmp	r3, #4
 800be02:	d003      	beq.n	800be0c <RCC_GetSystemClockFreq+0x28>
 800be04:	e00a      	b.n	800be1c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800be06:	4b09      	ldr	r3, [pc, #36]	@ (800be2c <RCC_GetSystemClockFreq+0x48>)
 800be08:	607b      	str	r3, [r7, #4]
      break;
 800be0a:	e00a      	b.n	800be22 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800be0c:	4b08      	ldr	r3, [pc, #32]	@ (800be30 <RCC_GetSystemClockFreq+0x4c>)
 800be0e:	607b      	str	r3, [r7, #4]
      break;
 800be10:	e007      	b.n	800be22 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800be12:	2008      	movs	r0, #8
 800be14:	f000 f84c 	bl	800beb0 <RCC_PLL_GetFreqDomain_SYS>
 800be18:	6078      	str	r0, [r7, #4]
      break;
 800be1a:	e002      	b.n	800be22 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800be1c:	4b03      	ldr	r3, [pc, #12]	@ (800be2c <RCC_GetSystemClockFreq+0x48>)
 800be1e:	607b      	str	r3, [r7, #4]
      break;
 800be20:	bf00      	nop
  }

  return frequency;
 800be22:	687b      	ldr	r3, [r7, #4]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	00f42400 	.word	0x00f42400
 800be30:	007a1200 	.word	0x007a1200

0800be34 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800be3c:	f7ff ff4a 	bl	800bcd4 <LL_RCC_GetAHBPrescaler>
 800be40:	4603      	mov	r3, r0
 800be42:	091b      	lsrs	r3, r3, #4
 800be44:	f003 030f 	and.w	r3, r3, #15
 800be48:	4a04      	ldr	r2, [pc, #16]	@ (800be5c <RCC_GetHCLKClockFreq+0x28>)
 800be4a:	5cd3      	ldrb	r3, [r2, r3]
 800be4c:	461a      	mov	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	40d3      	lsrs	r3, r2
}
 800be52:	4618      	mov	r0, r3
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	08016ee0 	.word	0x08016ee0

0800be60 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800be68:	f7ff ff42 	bl	800bcf0 <LL_RCC_GetAPB1Prescaler>
 800be6c:	4603      	mov	r3, r0
 800be6e:	0a9b      	lsrs	r3, r3, #10
 800be70:	4a04      	ldr	r2, [pc, #16]	@ (800be84 <RCC_GetPCLK1ClockFreq+0x24>)
 800be72:	5cd3      	ldrb	r3, [r2, r3]
 800be74:	461a      	mov	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	40d3      	lsrs	r3, r2
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	08016ef0 	.word	0x08016ef0

0800be88 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800be90:	f7ff ff3c 	bl	800bd0c <LL_RCC_GetAPB2Prescaler>
 800be94:	4603      	mov	r3, r0
 800be96:	0b5b      	lsrs	r3, r3, #13
 800be98:	4a04      	ldr	r2, [pc, #16]	@ (800beac <RCC_GetPCLK2ClockFreq+0x24>)
 800be9a:	5cd3      	ldrb	r3, [r2, r3]
 800be9c:	461a      	mov	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	40d3      	lsrs	r3, r2
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	08016ef0 	.word	0x08016ef0

0800beb0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800beb0:	b590      	push	{r4, r7, lr}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800beb8:	2300      	movs	r3, #0
 800beba:	617b      	str	r3, [r7, #20]
 800bebc:	2300      	movs	r3, #0
 800bebe:	60fb      	str	r3, [r7, #12]
 800bec0:	2300      	movs	r3, #0
 800bec2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800bec4:	f7ff ff30 	bl	800bd28 <LL_RCC_PLL_GetMainSource>
 800bec8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d004      	beq.n	800beda <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bed6:	d003      	beq.n	800bee0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800bed8:	e005      	b.n	800bee6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800beda:	4b12      	ldr	r3, [pc, #72]	@ (800bf24 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800bedc:	617b      	str	r3, [r7, #20]
      break;
 800bede:	e005      	b.n	800beec <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800bee0:	4b11      	ldr	r3, [pc, #68]	@ (800bf28 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800bee2:	617b      	str	r3, [r7, #20]
      break;
 800bee4:	e002      	b.n	800beec <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800bee6:	4b0f      	ldr	r3, [pc, #60]	@ (800bf24 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800bee8:	617b      	str	r3, [r7, #20]
      break;
 800beea:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b08      	cmp	r3, #8
 800bef0:	d113      	bne.n	800bf1a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800bef2:	f7ff ff43 	bl	800bd7c <LL_RCC_PLL_GetDivider>
 800bef6:	4602      	mov	r2, r0
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	fbb3 f4f2 	udiv	r4, r3, r2
 800befe:	f7ff ff21 	bl	800bd44 <LL_RCC_PLL_GetN>
 800bf02:	4603      	mov	r3, r0
 800bf04:	fb03 f404 	mul.w	r4, r3, r4
 800bf08:	f7ff ff2a 	bl	800bd60 <LL_RCC_PLL_GetP>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	0c1b      	lsrs	r3, r3, #16
 800bf10:	3301      	adds	r3, #1
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	fbb4 f3f3 	udiv	r3, r4, r3
 800bf18:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800bf1a:	693b      	ldr	r3, [r7, #16]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	371c      	adds	r7, #28
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd90      	pop	{r4, r7, pc}
 800bf24:	00f42400 	.word	0x00f42400
 800bf28:	007a1200 	.word	0x007a1200

0800bf2c <LL_USART_IsEnabled>:
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf40:	bf0c      	ite	eq
 800bf42:	2301      	moveq	r3, #1
 800bf44:	2300      	movne	r3, #0
 800bf46:	b2db      	uxtb	r3, r3
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <LL_USART_SetStopBitsLength>:
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	431a      	orrs	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	611a      	str	r2, [r3, #16]
}
 800bf6e:	bf00      	nop
 800bf70:	370c      	adds	r7, #12
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr

0800bf7a <LL_USART_SetHWFlowCtrl>:
{
 800bf7a:	b480      	push	{r7}
 800bf7c:	b083      	sub	sp, #12
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
 800bf82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	431a      	orrs	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	615a      	str	r2, [r3, #20]
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <LL_USART_SetBaudRate>:
{
 800bfa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfa4:	b0c0      	sub	sp, #256	@ 0x100
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bfac:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800bfb0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800bfb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800bfb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfc0:	f040 810c 	bne.w	800c1dc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800bfc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bfce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bfd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	462b      	mov	r3, r5
 800bfda:	1891      	adds	r1, r2, r2
 800bfdc:	6639      	str	r1, [r7, #96]	@ 0x60
 800bfde:	415b      	adcs	r3, r3
 800bfe0:	667b      	str	r3, [r7, #100]	@ 0x64
 800bfe2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	eb12 0801 	adds.w	r8, r2, r1
 800bfec:	4629      	mov	r1, r5
 800bfee:	eb43 0901 	adc.w	r9, r3, r1
 800bff2:	f04f 0200 	mov.w	r2, #0
 800bff6:	f04f 0300 	mov.w	r3, #0
 800bffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c006:	4690      	mov	r8, r2
 800c008:	4699      	mov	r9, r3
 800c00a:	4623      	mov	r3, r4
 800c00c:	eb18 0303 	adds.w	r3, r8, r3
 800c010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c014:	462b      	mov	r3, r5
 800c016:	eb49 0303 	adc.w	r3, r9, r3
 800c01a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c01e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c022:	2200      	movs	r2, #0
 800c024:	469a      	mov	sl, r3
 800c026:	4693      	mov	fp, r2
 800c028:	eb1a 030a 	adds.w	r3, sl, sl
 800c02c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c02e:	eb4b 030b 	adc.w	r3, fp, fp
 800c032:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c034:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c038:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c03c:	f7f4 fe34 	bl	8000ca8 <__aeabi_uldivmod>
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	4b64      	ldr	r3, [pc, #400]	@ (800c1d8 <LL_USART_SetBaudRate+0x238>)
 800c046:	fba3 2302 	umull	r2, r3, r3, r2
 800c04a:	095b      	lsrs	r3, r3, #5
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	011b      	lsls	r3, r3, #4
 800c050:	b29c      	uxth	r4, r3
 800c052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c056:	2200      	movs	r2, #0
 800c058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c05c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c060:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800c064:	4642      	mov	r2, r8
 800c066:	464b      	mov	r3, r9
 800c068:	1891      	adds	r1, r2, r2
 800c06a:	6539      	str	r1, [r7, #80]	@ 0x50
 800c06c:	415b      	adcs	r3, r3
 800c06e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c074:	4641      	mov	r1, r8
 800c076:	1851      	adds	r1, r2, r1
 800c078:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c07a:	4649      	mov	r1, r9
 800c07c:	414b      	adcs	r3, r1
 800c07e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c080:	f04f 0200 	mov.w	r2, #0
 800c084:	f04f 0300 	mov.w	r3, #0
 800c088:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800c08c:	4659      	mov	r1, fp
 800c08e:	00cb      	lsls	r3, r1, #3
 800c090:	4651      	mov	r1, sl
 800c092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c096:	4651      	mov	r1, sl
 800c098:	00ca      	lsls	r2, r1, #3
 800c09a:	4610      	mov	r0, r2
 800c09c:	4619      	mov	r1, r3
 800c09e:	4603      	mov	r3, r0
 800c0a0:	4642      	mov	r2, r8
 800c0a2:	189b      	adds	r3, r3, r2
 800c0a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c0a8:	464b      	mov	r3, r9
 800c0aa:	460a      	mov	r2, r1
 800c0ac:	eb42 0303 	adc.w	r3, r2, r3
 800c0b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c0b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c0be:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800c0c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	18db      	adds	r3, r3, r3
 800c0ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	eb42 0303 	adc.w	r3, r2, r3
 800c0d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c0d8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800c0dc:	f7f4 fde4 	bl	8000ca8 <__aeabi_uldivmod>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4b3c      	ldr	r3, [pc, #240]	@ (800c1d8 <LL_USART_SetBaudRate+0x238>)
 800c0e8:	fba3 2301 	umull	r2, r3, r3, r1
 800c0ec:	095b      	lsrs	r3, r3, #5
 800c0ee:	2264      	movs	r2, #100	@ 0x64
 800c0f0:	fb02 f303 	mul.w	r3, r2, r3
 800c0f4:	1acb      	subs	r3, r1, r3
 800c0f6:	00db      	lsls	r3, r3, #3
 800c0f8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c0fc:	4b36      	ldr	r3, [pc, #216]	@ (800c1d8 <LL_USART_SetBaudRate+0x238>)
 800c0fe:	fba3 2302 	umull	r2, r3, r3, r2
 800c102:	095b      	lsrs	r3, r3, #5
 800c104:	b29b      	uxth	r3, r3
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	b29b      	uxth	r3, r3
 800c10a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c10e:	b29b      	uxth	r3, r3
 800c110:	4423      	add	r3, r4
 800c112:	b29c      	uxth	r4, r3
 800c114:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c118:	2200      	movs	r2, #0
 800c11a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c11e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c122:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800c126:	4642      	mov	r2, r8
 800c128:	464b      	mov	r3, r9
 800c12a:	1891      	adds	r1, r2, r2
 800c12c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c12e:	415b      	adcs	r3, r3
 800c130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c132:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c136:	4641      	mov	r1, r8
 800c138:	1851      	adds	r1, r2, r1
 800c13a:	6339      	str	r1, [r7, #48]	@ 0x30
 800c13c:	4649      	mov	r1, r9
 800c13e:	414b      	adcs	r3, r1
 800c140:	637b      	str	r3, [r7, #52]	@ 0x34
 800c142:	f04f 0200 	mov.w	r2, #0
 800c146:	f04f 0300 	mov.w	r3, #0
 800c14a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c14e:	4659      	mov	r1, fp
 800c150:	00cb      	lsls	r3, r1, #3
 800c152:	4651      	mov	r1, sl
 800c154:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c158:	4651      	mov	r1, sl
 800c15a:	00ca      	lsls	r2, r1, #3
 800c15c:	4610      	mov	r0, r2
 800c15e:	4619      	mov	r1, r3
 800c160:	4603      	mov	r3, r0
 800c162:	4642      	mov	r2, r8
 800c164:	189b      	adds	r3, r3, r2
 800c166:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c16a:	464b      	mov	r3, r9
 800c16c:	460a      	mov	r2, r1
 800c16e:	eb42 0303 	adc.w	r3, r2, r3
 800c172:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c176:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c17a:	2200      	movs	r2, #0
 800c17c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c180:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c184:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c188:	460b      	mov	r3, r1
 800c18a:	18db      	adds	r3, r3, r3
 800c18c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c18e:	4613      	mov	r3, r2
 800c190:	eb42 0303 	adc.w	r3, r2, r3
 800c194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c19a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800c19e:	f7f4 fd83 	bl	8000ca8 <__aeabi_uldivmod>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c1d8 <LL_USART_SetBaudRate+0x238>)
 800c1a8:	fba3 1302 	umull	r1, r3, r3, r2
 800c1ac:	095b      	lsrs	r3, r3, #5
 800c1ae:	2164      	movs	r1, #100	@ 0x64
 800c1b0:	fb01 f303 	mul.w	r3, r1, r3
 800c1b4:	1ad3      	subs	r3, r2, r3
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	3332      	adds	r3, #50	@ 0x32
 800c1ba:	4a07      	ldr	r2, [pc, #28]	@ (800c1d8 <LL_USART_SetBaudRate+0x238>)
 800c1bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c1c0:	095b      	lsrs	r3, r3, #5
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	f003 0307 	and.w	r3, r3, #7
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	4423      	add	r3, r4
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1d4:	609a      	str	r2, [r3, #8]
}
 800c1d6:	e108      	b.n	800c3ea <LL_USART_SetBaudRate+0x44a>
 800c1d8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800c1dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1e6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c1ea:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800c1ee:	4642      	mov	r2, r8
 800c1f0:	464b      	mov	r3, r9
 800c1f2:	1891      	adds	r1, r2, r2
 800c1f4:	6239      	str	r1, [r7, #32]
 800c1f6:	415b      	adcs	r3, r3
 800c1f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c1fe:	4641      	mov	r1, r8
 800c200:	1854      	adds	r4, r2, r1
 800c202:	4649      	mov	r1, r9
 800c204:	eb43 0501 	adc.w	r5, r3, r1
 800c208:	f04f 0200 	mov.w	r2, #0
 800c20c:	f04f 0300 	mov.w	r3, #0
 800c210:	00eb      	lsls	r3, r5, #3
 800c212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c216:	00e2      	lsls	r2, r4, #3
 800c218:	4614      	mov	r4, r2
 800c21a:	461d      	mov	r5, r3
 800c21c:	4643      	mov	r3, r8
 800c21e:	18e3      	adds	r3, r4, r3
 800c220:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c224:	464b      	mov	r3, r9
 800c226:	eb45 0303 	adc.w	r3, r5, r3
 800c22a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c22e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c232:	2200      	movs	r2, #0
 800c234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c238:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c23c:	f04f 0200 	mov.w	r2, #0
 800c240:	f04f 0300 	mov.w	r3, #0
 800c244:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800c248:	4629      	mov	r1, r5
 800c24a:	008b      	lsls	r3, r1, #2
 800c24c:	4621      	mov	r1, r4
 800c24e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c252:	4621      	mov	r1, r4
 800c254:	008a      	lsls	r2, r1, #2
 800c256:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800c25a:	f7f4 fd25 	bl	8000ca8 <__aeabi_uldivmod>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4b65      	ldr	r3, [pc, #404]	@ (800c3f8 <LL_USART_SetBaudRate+0x458>)
 800c264:	fba3 2302 	umull	r2, r3, r3, r2
 800c268:	095b      	lsrs	r3, r3, #5
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	011b      	lsls	r3, r3, #4
 800c26e:	b29c      	uxth	r4, r3
 800c270:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c274:	2200      	movs	r2, #0
 800c276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c27a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c27e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800c282:	4642      	mov	r2, r8
 800c284:	464b      	mov	r3, r9
 800c286:	1891      	adds	r1, r2, r2
 800c288:	61b9      	str	r1, [r7, #24]
 800c28a:	415b      	adcs	r3, r3
 800c28c:	61fb      	str	r3, [r7, #28]
 800c28e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c292:	4641      	mov	r1, r8
 800c294:	1851      	adds	r1, r2, r1
 800c296:	6139      	str	r1, [r7, #16]
 800c298:	4649      	mov	r1, r9
 800c29a:	414b      	adcs	r3, r1
 800c29c:	617b      	str	r3, [r7, #20]
 800c29e:	f04f 0200 	mov.w	r2, #0
 800c2a2:	f04f 0300 	mov.w	r3, #0
 800c2a6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c2aa:	4659      	mov	r1, fp
 800c2ac:	00cb      	lsls	r3, r1, #3
 800c2ae:	4651      	mov	r1, sl
 800c2b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2b4:	4651      	mov	r1, sl
 800c2b6:	00ca      	lsls	r2, r1, #3
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	4603      	mov	r3, r0
 800c2be:	4642      	mov	r2, r8
 800c2c0:	189b      	adds	r3, r3, r2
 800c2c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	460a      	mov	r2, r1
 800c2ca:	eb42 0303 	adc.w	r3, r2, r3
 800c2ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c2d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c2dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c2e0:	f04f 0200 	mov.w	r2, #0
 800c2e4:	f04f 0300 	mov.w	r3, #0
 800c2e8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800c2ec:	4649      	mov	r1, r9
 800c2ee:	008b      	lsls	r3, r1, #2
 800c2f0:	4641      	mov	r1, r8
 800c2f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c2f6:	4641      	mov	r1, r8
 800c2f8:	008a      	lsls	r2, r1, #2
 800c2fa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800c2fe:	f7f4 fcd3 	bl	8000ca8 <__aeabi_uldivmod>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	4611      	mov	r1, r2
 800c308:	4b3b      	ldr	r3, [pc, #236]	@ (800c3f8 <LL_USART_SetBaudRate+0x458>)
 800c30a:	fba3 2301 	umull	r2, r3, r3, r1
 800c30e:	095b      	lsrs	r3, r3, #5
 800c310:	2264      	movs	r2, #100	@ 0x64
 800c312:	fb02 f303 	mul.w	r3, r2, r3
 800c316:	1acb      	subs	r3, r1, r3
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	3332      	adds	r3, #50	@ 0x32
 800c31c:	4a36      	ldr	r2, [pc, #216]	@ (800c3f8 <LL_USART_SetBaudRate+0x458>)
 800c31e:	fba2 2303 	umull	r2, r3, r2, r3
 800c322:	095b      	lsrs	r3, r3, #5
 800c324:	b29b      	uxth	r3, r3
 800c326:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	4423      	add	r3, r4
 800c32e:	b29c      	uxth	r4, r3
 800c330:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c334:	2200      	movs	r2, #0
 800c336:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c338:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c33a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c33e:	4642      	mov	r2, r8
 800c340:	464b      	mov	r3, r9
 800c342:	1891      	adds	r1, r2, r2
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	415b      	adcs	r3, r3
 800c348:	60fb      	str	r3, [r7, #12]
 800c34a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c34e:	4641      	mov	r1, r8
 800c350:	1851      	adds	r1, r2, r1
 800c352:	6039      	str	r1, [r7, #0]
 800c354:	4649      	mov	r1, r9
 800c356:	414b      	adcs	r3, r1
 800c358:	607b      	str	r3, [r7, #4]
 800c35a:	f04f 0200 	mov.w	r2, #0
 800c35e:	f04f 0300 	mov.w	r3, #0
 800c362:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c366:	4659      	mov	r1, fp
 800c368:	00cb      	lsls	r3, r1, #3
 800c36a:	4651      	mov	r1, sl
 800c36c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c370:	4651      	mov	r1, sl
 800c372:	00ca      	lsls	r2, r1, #3
 800c374:	4610      	mov	r0, r2
 800c376:	4619      	mov	r1, r3
 800c378:	4603      	mov	r3, r0
 800c37a:	4642      	mov	r2, r8
 800c37c:	189b      	adds	r3, r3, r2
 800c37e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c380:	464b      	mov	r3, r9
 800c382:	460a      	mov	r2, r1
 800c384:	eb42 0303 	adc.w	r3, r2, r3
 800c388:	677b      	str	r3, [r7, #116]	@ 0x74
 800c38a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c38e:	2200      	movs	r2, #0
 800c390:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c392:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c394:	f04f 0200 	mov.w	r2, #0
 800c398:	f04f 0300 	mov.w	r3, #0
 800c39c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800c3a0:	4649      	mov	r1, r9
 800c3a2:	008b      	lsls	r3, r1, #2
 800c3a4:	4641      	mov	r1, r8
 800c3a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3aa:	4641      	mov	r1, r8
 800c3ac:	008a      	lsls	r2, r1, #2
 800c3ae:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800c3b2:	f7f4 fc79 	bl	8000ca8 <__aeabi_uldivmod>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4b0f      	ldr	r3, [pc, #60]	@ (800c3f8 <LL_USART_SetBaudRate+0x458>)
 800c3bc:	fba3 1302 	umull	r1, r3, r3, r2
 800c3c0:	095b      	lsrs	r3, r3, #5
 800c3c2:	2164      	movs	r1, #100	@ 0x64
 800c3c4:	fb01 f303 	mul.w	r3, r1, r3
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	011b      	lsls	r3, r3, #4
 800c3cc:	3332      	adds	r3, #50	@ 0x32
 800c3ce:	4a0a      	ldr	r2, [pc, #40]	@ (800c3f8 <LL_USART_SetBaudRate+0x458>)
 800c3d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d4:	095b      	lsrs	r3, r3, #5
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	f003 030f 	and.w	r3, r3, #15
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	4423      	add	r3, r4
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3e8:	609a      	str	r2, [r3, #8]
}
 800c3ea:	bf00      	nop
 800c3ec:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3f6:	bf00      	nop
 800c3f8:	51eb851f 	.word	0x51eb851f

0800c3fc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b088      	sub	sp, #32
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c40a:	2300      	movs	r3, #0
 800c40c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff fd8c 	bl	800bf2c <LL_USART_IsEnabled>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d15e      	bne.n	800c4d8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800c422:	f023 030c 	bic.w	r3, r3, #12
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	6851      	ldr	r1, [r2, #4]
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	68d2      	ldr	r2, [r2, #12]
 800c42e:	4311      	orrs	r1, r2
 800c430:	683a      	ldr	r2, [r7, #0]
 800c432:	6912      	ldr	r2, [r2, #16]
 800c434:	4311      	orrs	r1, r2
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	6992      	ldr	r2, [r2, #24]
 800c43a:	430a      	orrs	r2, r1
 800c43c:	431a      	orrs	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff fd83 	bl	800bf54 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	4619      	mov	r1, r3
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f7ff fd90 	bl	800bf7a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800c45a:	f107 0308 	add.w	r3, r7, #8
 800c45e:	4618      	mov	r0, r3
 800c460:	f7ff fc9a 	bl	800bd98 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4a1f      	ldr	r2, [pc, #124]	@ (800c4e4 <LL_USART_Init+0xe8>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d102      	bne.n	800c472 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	61bb      	str	r3, [r7, #24]
 800c470:	e021      	b.n	800c4b6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a1c      	ldr	r2, [pc, #112]	@ (800c4e8 <LL_USART_Init+0xec>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d102      	bne.n	800c480 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	61bb      	str	r3, [r7, #24]
 800c47e:	e01a      	b.n	800c4b6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4a1a      	ldr	r2, [pc, #104]	@ (800c4ec <LL_USART_Init+0xf0>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d102      	bne.n	800c48e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	61bb      	str	r3, [r7, #24]
 800c48c:	e013      	b.n	800c4b6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a17      	ldr	r2, [pc, #92]	@ (800c4f0 <LL_USART_Init+0xf4>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d102      	bne.n	800c49c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	61bb      	str	r3, [r7, #24]
 800c49a:	e00c      	b.n	800c4b6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a15      	ldr	r2, [pc, #84]	@ (800c4f4 <LL_USART_Init+0xf8>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d102      	bne.n	800c4aa <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	61bb      	str	r3, [r7, #24]
 800c4a8:	e005      	b.n	800c4b6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a12      	ldr	r2, [pc, #72]	@ (800c4f8 <LL_USART_Init+0xfc>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d101      	bne.n	800c4b6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00d      	beq.n	800c4d8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d009      	beq.n	800c4d8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c4d0:	69b9      	ldr	r1, [r7, #24]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7ff fd64 	bl	800bfa0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c4d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3720      	adds	r7, #32
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	40011000 	.word	0x40011000
 800c4e8:	40004400 	.word	0x40004400
 800c4ec:	40004800 	.word	0x40004800
 800c4f0:	40011400 	.word	0x40011400
 800c4f4:	40004c00 	.word	0x40004c00
 800c4f8:	40005000 	.word	0x40005000

0800c4fc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c50e:	4a07      	ldr	r2, [pc, #28]	@ (800c52c <LL_InitTick+0x30>)
 800c510:	3b01      	subs	r3, #1
 800c512:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800c514:	4b05      	ldr	r3, [pc, #20]	@ (800c52c <LL_InitTick+0x30>)
 800c516:	2200      	movs	r2, #0
 800c518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c51a:	4b04      	ldr	r3, [pc, #16]	@ (800c52c <LL_InitTick+0x30>)
 800c51c:	2205      	movs	r2, #5
 800c51e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	e000e010 	.word	0xe000e010

0800c530 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800c538:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff ffdd 	bl	800c4fc <LL_InitTick>
}
 800c542:	bf00      	nop
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800c554:	4a04      	ldr	r2, [pc, #16]	@ (800c568 <LL_SetSystemCoreClock+0x1c>)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6013      	str	r3, [r2, #0]
}
 800c55a:	bf00      	nop
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop
 800c568:	200021d0 	.word	0x200021d0

0800c56c <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 800c570:	4b0d      	ldr	r3, [pc, #52]	@ (800c5a8 <SCH_Initialize+0x3c>)
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 800c576:	4b0d      	ldr	r3, [pc, #52]	@ (800c5ac <SCH_Initialize+0x40>)
 800c578:	2200      	movs	r2, #0
 800c57a:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 800c57c:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b0 <SCH_Initialize+0x44>)
 800c57e:	2200      	movs	r2, #0
 800c580:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 800c582:	22f0      	movs	r2, #240	@ 0xf0
 800c584:	2100      	movs	r1, #0
 800c586:	480b      	ldr	r0, [pc, #44]	@ (800c5b4 <SCH_Initialize+0x48>)
 800c588:	f004 fee3 	bl	8011352 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 800c58c:	22f0      	movs	r2, #240	@ 0xf0
 800c58e:	2100      	movs	r1, #0
 800c590:	4809      	ldr	r0, [pc, #36]	@ (800c5b8 <SCH_Initialize+0x4c>)
 800c592:	f004 fede 	bl	8011352 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 800c596:	2224      	movs	r2, #36	@ 0x24
 800c598:	2100      	movs	r1, #0
 800c59a:	4808      	ldr	r0, [pc, #32]	@ (800c5bc <SCH_Initialize+0x50>)
 800c59c:	f004 fed9 	bl	8011352 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 800c5a0:	f7f5 f894 	bl	80016cc <systick_timer_init>
}
 800c5a4:	bf00      	nop
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	2000a32c 	.word	0x2000a32c
 800c5ac:	2000a234 	.word	0x2000a234
 800c5b0:	2000a328 	.word	0x2000a328
 800c5b4:	2000a144 	.word	0x2000a144
 800c5b8:	2000a238 	.word	0x2000a238
 800c5bc:	2000a330 	.word	0x2000a330

0800c5c0 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	6039      	str	r1, [r7, #0]
 800c5ca:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	2b08      	cmp	r3, #8
 800c5d0:	d804      	bhi.n	800c5dc <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 800c5d2:	79fb      	ldrb	r3, [r7, #7]
 800c5d4:	4904      	ldr	r1, [pc, #16]	@ (800c5e8 <SCH_TIM_Start+0x28>)
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c5dc:	bf00      	nop
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr
 800c5e8:	2000a330 	.word	0x2000a330

0800c5ec <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800c5f6:	79fb      	ldrb	r3, [r7, #7]
 800c5f8:	4a06      	ldr	r2, [pc, #24]	@ (800c614 <SCH_TIM_HasCompleted+0x28>)
 800c5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	bf0c      	ite	eq
 800c602:	2301      	moveq	r3, #1
 800c604:	2300      	movne	r3, #0
 800c606:	b2db      	uxtb	r3, r3
}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr
 800c614:	2000a330 	.word	0x2000a330

0800c618 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d029      	beq.n	800c680 <SCH_TASK_CreateTask+0x68>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d026      	beq.n	800c680 <SCH_TASK_CreateTask+0x68>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 800c632:	4b17      	ldr	r3, [pc, #92]	@ (800c690 <SCH_TASK_CreateTask+0x78>)
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	2b12      	cmp	r3, #18
 800c638:	d822      	bhi.n	800c680 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 800c63a:	4b15      	ldr	r3, [pc, #84]	@ (800c690 <SCH_TASK_CreateTask+0x78>)
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	4613      	mov	r3, r2
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	4413      	add	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4a12      	ldr	r2, [pc, #72]	@ (800c694 <SCH_TASK_CreateTask+0x7c>)
 800c64a:	4413      	add	r3, r2
 800c64c:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	2200      	movs	r2, #0
 800c658:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = pTaskProperty->taskTick;;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68da      	ldr	r2, [r3, #12]
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	2201      	movs	r2, #1
 800c666:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 800c668:	4b09      	ldr	r3, [pc, #36]	@ (800c690 <SCH_TASK_CreateTask+0x78>)
 800c66a:	781a      	ldrb	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800c670:	4b07      	ldr	r3, [pc, #28]	@ (800c690 <SCH_TASK_CreateTask+0x78>)
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	3301      	adds	r3, #1
 800c676:	b2da      	uxtb	r2, r3
 800c678:	4b05      	ldr	r3, [pc, #20]	@ (800c690 <SCH_TASK_CreateTask+0x78>)
 800c67a:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 800c67c:	2300      	movs	r3, #0
 800c67e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800c680:	7bfb      	ldrb	r3, [r7, #15]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	2000a234 	.word	0x2000a234
 800c694:	2000a144 	.word	0x2000a144

0800c698 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 800c69e:	4b42      	ldr	r3, [pc, #264]	@ (800c7a8 <SCH_RunSystemTickTimer+0x110>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	4a40      	ldr	r2, [pc, #256]	@ (800c7a8 <SCH_RunSystemTickTimer+0x110>)
 800c6a6:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73fb      	strb	r3, [r7, #15]
 800c6ac:	e025      	b.n	800c6fa <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800c6ae:	7bfa      	ldrb	r2, [r7, #15]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4a3c      	ldr	r2, [pc, #240]	@ (800c7ac <SCH_RunSystemTickTimer+0x114>)
 800c6ba:	4413      	add	r3, r2
 800c6bc:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d115      	bne.n	800c6f4 <SCH_RunSystemTickTimer+0x5c>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d111      	bne.n	800c6f4 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	685a      	ldr	r2, [r3, #4]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d305      	bcc.n	800c6f4 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	73fb      	strb	r3, [r7, #15]
 800c6fa:	4b2d      	ldr	r3, [pc, #180]	@ (800c7b0 <SCH_RunSystemTickTimer+0x118>)
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	7bfa      	ldrb	r2, [r7, #15]
 800c700:	429a      	cmp	r2, r3
 800c702:	d3d4      	bcc.n	800c6ae <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c704:	2300      	movs	r3, #0
 800c706:	73bb      	strb	r3, [r7, #14]
 800c708:	e02b      	b.n	800c762 <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 800c70a:	7bba      	ldrb	r2, [r7, #14]
 800c70c:	4613      	mov	r3, r2
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	4413      	add	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4a27      	ldr	r2, [pc, #156]	@ (800c7b4 <SCH_RunSystemTickTimer+0x11c>)
 800c716:	4413      	add	r3, r2
 800c718:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d11c      	bne.n	800c75c <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	1c5a      	adds	r2, r3, #1
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	685a      	ldr	r2, [r3, #4]
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	429a      	cmp	r2, r3
 800c738:	d310      	bcc.n	800c75c <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2201      	movs	r2, #1
 800c73e:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	2200      	movs	r2, #0
 800c744:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	bf0c      	ite	eq
 800c750:	2301      	moveq	r3, #1
 800c752:	2300      	movne	r3, #0
 800c754:	b2db      	uxtb	r3, r3
 800c756:	461a      	mov	r2, r3
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c75c:	7bbb      	ldrb	r3, [r7, #14]
 800c75e:	3301      	adds	r3, #1
 800c760:	73bb      	strb	r3, [r7, #14]
 800c762:	4b15      	ldr	r3, [pc, #84]	@ (800c7b8 <SCH_RunSystemTickTimer+0x120>)
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	7bba      	ldrb	r2, [r7, #14]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d3ce      	bcc.n	800c70a <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800c76c:	2300      	movs	r3, #0
 800c76e:	73bb      	strb	r3, [r7, #14]
 800c770:	e010      	b.n	800c794 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 800c772:	7bbb      	ldrb	r3, [r7, #14]
 800c774:	4a11      	ldr	r2, [pc, #68]	@ (800c7bc <SCH_RunSystemTickTimer+0x124>)
 800c776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d007      	beq.n	800c78e <SCH_RunSystemTickTimer+0xf6>
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
 800c780:	4a0e      	ldr	r2, [pc, #56]	@ (800c7bc <SCH_RunSystemTickTimer+0x124>)
 800c782:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c786:	3a01      	subs	r2, #1
 800c788:	490c      	ldr	r1, [pc, #48]	@ (800c7bc <SCH_RunSystemTickTimer+0x124>)
 800c78a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800c78e:	7bbb      	ldrb	r3, [r7, #14]
 800c790:	3301      	adds	r3, #1
 800c792:	73bb      	strb	r3, [r7, #14]
 800c794:	7bbb      	ldrb	r3, [r7, #14]
 800c796:	2b08      	cmp	r3, #8
 800c798:	d9eb      	bls.n	800c772 <SCH_RunSystemTickTimer+0xda>
}
 800c79a:	bf00      	nop
 800c79c:	bf00      	nop
 800c79e:	3714      	adds	r7, #20
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	2000a32c 	.word	0x2000a32c
 800c7ac:	2000a144 	.word	0x2000a144
 800c7b0:	2000a234 	.word	0x2000a234
 800c7b4:	2000a238 	.word	0x2000a238
 800c7b8:	2000a328 	.word	0x2000a328
 800c7bc:	2000a330 	.word	0x2000a330

0800c7c0 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 800c7c4:	f7f4 ff72 	bl	80016ac <systick_timer_start>
}
 800c7c8:	bf00      	nop
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	73fb      	strb	r3, [r7, #15]
 800c7d6:	e01e      	b.n	800c816 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800c7d8:	7bfa      	ldrb	r2, [r7, #15]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	4413      	add	r3, r2
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	4a23      	ldr	r2, [pc, #140]	@ (800c870 <SCH_HandleScheduledTask+0xa4>)
 800c7e4:	4413      	add	r3, r2
 800c7e6:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	885b      	ldrh	r3, [r3, #2]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d10f      	bne.n	800c810 <SCH_HandleScheduledTask+0x44>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d10b      	bne.n	800c810 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d003      	beq.n	800c810 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	3301      	adds	r3, #1
 800c814:	73fb      	strb	r3, [r7, #15]
 800c816:	4b17      	ldr	r3, [pc, #92]	@ (800c874 <SCH_HandleScheduledTask+0xa8>)
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	7bfa      	ldrb	r2, [r7, #15]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d3db      	bcc.n	800c7d8 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c820:	2300      	movs	r3, #0
 800c822:	73bb      	strb	r3, [r7, #14]
 800c824:	e01a      	b.n	800c85c <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 800c826:	7bba      	ldrb	r2, [r7, #14]
 800c828:	4613      	mov	r3, r2
 800c82a:	005b      	lsls	r3, r3, #1
 800c82c:	4413      	add	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4a11      	ldr	r2, [pc, #68]	@ (800c878 <SCH_HandleScheduledTask+0xac>)
 800c832:	4413      	add	r3, r2
 800c834:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	885b      	ldrh	r3, [r3, #2]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d10b      	bne.n	800c856 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	2200      	movs	r2, #0
 800c842:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d003      	beq.n	800c856 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c856:	7bbb      	ldrb	r3, [r7, #14]
 800c858:	3301      	adds	r3, #1
 800c85a:	73bb      	strb	r3, [r7, #14]
 800c85c:	4b07      	ldr	r3, [pc, #28]	@ (800c87c <SCH_HandleScheduledTask+0xb0>)
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	7bba      	ldrb	r2, [r7, #14]
 800c862:	429a      	cmp	r2, r3
 800c864:	d3df      	bcc.n	800c826 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800c866:	bf00      	nop
 800c868:	bf00      	nop
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	2000a144 	.word	0x2000a144
 800c874:	2000a234 	.word	0x2000a234
 800c878:	2000a238 	.word	0x2000a238
 800c87c:	2000a328 	.word	0x2000a328

0800c880 <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint16_t size)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	4603      	mov	r3, r0
 800c888:	6039      	str	r1, [r7, #0]
 800c88a:	80fb      	strh	r3, [r7, #6]
 800c88c:	4613      	mov	r3, r2
 800c88e:	80bb      	strh	r3, [r7, #4]
    uint8_t x;
    uint16_t crc = initial_value;
 800c890:	88fb      	ldrh	r3, [r7, #6]
 800c892:	81fb      	strh	r3, [r7, #14]

    while(size--)
 800c894:	e023      	b.n	800c8de <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 800c896:	89fb      	ldrh	r3, [r7, #14]
 800c898:	0a1b      	lsrs	r3, r3, #8
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	1c59      	adds	r1, r3, #1
 800c8a2:	6039      	str	r1, [r7, #0]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	4053      	eors	r3, r2
 800c8a8:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 800c8aa:	7b7b      	ldrb	r3, [r7, #13]
 800c8ac:	091b      	lsrs	r3, r3, #4
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	7b7b      	ldrb	r3, [r7, #13]
 800c8b2:	4053      	eors	r3, r2
 800c8b4:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 800c8b6:	89fb      	ldrh	r3, [r7, #14]
 800c8b8:	021b      	lsls	r3, r3, #8
 800c8ba:	b21a      	sxth	r2, r3
 800c8bc:	7b7b      	ldrb	r3, [r7, #13]
 800c8be:	b21b      	sxth	r3, r3
 800c8c0:	031b      	lsls	r3, r3, #12
 800c8c2:	b21b      	sxth	r3, r3
 800c8c4:	4053      	eors	r3, r2
 800c8c6:	b21a      	sxth	r2, r3
 800c8c8:	7b7b      	ldrb	r3, [r7, #13]
 800c8ca:	b21b      	sxth	r3, r3
 800c8cc:	015b      	lsls	r3, r3, #5
 800c8ce:	b21b      	sxth	r3, r3
 800c8d0:	4053      	eors	r3, r2
 800c8d2:	b21a      	sxth	r2, r3
 800c8d4:	7b7b      	ldrb	r3, [r7, #13]
 800c8d6:	b21b      	sxth	r3, r3
 800c8d8:	4053      	eors	r3, r2
 800c8da:	b21b      	sxth	r3, r3
 800c8dc:	81fb      	strh	r3, [r7, #14]
    while(size--)
 800c8de:	88bb      	ldrh	r3, [r7, #4]
 800c8e0:	1e5a      	subs	r2, r3, #1
 800c8e2:	80ba      	strh	r2, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1d6      	bne.n	800c896 <crc16_CCITT+0x16>
    }

    return crc;
 800c8e8:	89fb      	ldrh	r3, [r7, #14]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3714      	adds	r7, #20
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
	...

0800c8f8 <fsp_init>:
uint8_t fsp_my_adr;

volatile uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	4603      	mov	r3, r0
 800c900:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 800c902:	4a06      	ldr	r2, [pc, #24]	@ (800c91c <fsp_init+0x24>)
 800c904:	79fb      	ldrb	r3, [r7, #7]
 800c906:	7013      	strb	r3, [r2, #0]

    fsp_decode_pos = 0;
 800c908:	4b05      	ldr	r3, [pc, #20]	@ (800c920 <fsp_init+0x28>)
 800c90a:	2200      	movs	r2, #0
 800c90c:	701a      	strb	r2, [r3, #0]
}
 800c90e:	bf00      	nop
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	2000a354 	.word	0x2000a354
 800c920:	2000a355 	.word	0x2000a355

0800c924 <fsp_gen_cmd_pkt>:
        fsp_gen_pkt((void*)0, data, data_len, dst_adr, FSP_PKT_TYPE_DATA, fsp);
    }
}

void fsp_gen_cmd_pkt(uint8_t cmd, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af02      	add	r7, sp, #8
 800c92a:	603b      	str	r3, [r7, #0]
 800c92c:	4603      	mov	r3, r0
 800c92e:	71fb      	strb	r3, [r7, #7]
 800c930:	460b      	mov	r3, r1
 800c932:	71bb      	strb	r3, [r7, #6]
 800c934:	4613      	mov	r3, r2
 800c936:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800c938:	797b      	ldrb	r3, [r7, #5]
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d10b      	bne.n	800c956 <fsp_gen_cmd_pkt+0x32>
    {
        fsp_gen_pkt(&cmd,(void*)0, 0, dst_adr, FSP_PKT_TYPE_CMD_WITH_ACK, fsp);
 800c93e:	79ba      	ldrb	r2, [r7, #6]
 800c940:	1df8      	adds	r0, r7, #7
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	9301      	str	r3, [sp, #4]
 800c946:	2304      	movs	r3, #4
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	4613      	mov	r3, r2
 800c94c:	2200      	movs	r2, #0
 800c94e:	2100      	movs	r1, #0
 800c950:	f000 f83a 	bl	800c9c8 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
    }
}
 800c954:	e00a      	b.n	800c96c <fsp_gen_cmd_pkt+0x48>
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
 800c956:	79ba      	ldrb	r2, [r7, #6]
 800c958:	1df8      	adds	r0, r7, #7
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	9301      	str	r3, [sp, #4]
 800c95e:	2303      	movs	r3, #3
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	4613      	mov	r3, r2
 800c964:	2200      	movs	r2, #0
 800c966:	2100      	movs	r1, #0
 800c968:	f000 f82e 	bl	800c9c8 <fsp_gen_pkt>
}
 800c96c:	bf00      	nop
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <fsp_gen_cmd_w_data_pkt>:

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af02      	add	r7, sp, #8
 800c97a:	6039      	str	r1, [r7, #0]
 800c97c:	4611      	mov	r1, r2
 800c97e:	461a      	mov	r2, r3
 800c980:	4603      	mov	r3, r0
 800c982:	71fb      	strb	r3, [r7, #7]
 800c984:	460b      	mov	r3, r1
 800c986:	71bb      	strb	r3, [r7, #6]
 800c988:	4613      	mov	r3, r2
 800c98a:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800c98c:	7c3b      	ldrb	r3, [r7, #16]
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d10b      	bne.n	800c9aa <fsp_gen_cmd_w_data_pkt+0x36>
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 800c992:	7979      	ldrb	r1, [r7, #5]
 800c994:	79ba      	ldrb	r2, [r7, #6]
 800c996:	1df8      	adds	r0, r7, #7
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	9301      	str	r3, [sp, #4]
 800c99c:	2308      	movs	r3, #8
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	f000 f810 	bl	800c9c8 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
    }
}
 800c9a8:	e00a      	b.n	800c9c0 <fsp_gen_cmd_w_data_pkt+0x4c>
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 800c9aa:	7979      	ldrb	r1, [r7, #5]
 800c9ac:	79ba      	ldrb	r2, [r7, #6]
 800c9ae:	1df8      	adds	r0, r7, #7
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	9301      	str	r3, [sp, #4]
 800c9b4:	2307      	movs	r3, #7
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	f000 f804 	bl	800c9c8 <fsp_gen_pkt>
}
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <fsp_gen_pkt>:
    fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}


void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	71fb      	strb	r3, [r7, #7]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	71bb      	strb	r3, [r7, #6]
    fsp->sod        = FSP_PKT_SOD;
 800c9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e0:	22ca      	movs	r2, #202	@ 0xca
 800c9e2:	701a      	strb	r2, [r3, #0]
    fsp->src_adr    = fsp_my_adr;
 800c9e4:	4b25      	ldr	r3, [pc, #148]	@ (800ca7c <fsp_gen_pkt+0xb4>)
 800c9e6:	781a      	ldrb	r2, [r3, #0]
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ea:	705a      	strb	r2, [r3, #1]
    fsp->dst_adr    = dst_adr;
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ee:	79ba      	ldrb	r2, [r7, #6]
 800c9f0:	709a      	strb	r2, [r3, #2]
    fsp->length     = payload_len;
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f4:	79fa      	ldrb	r2, [r7, #7]
 800c9f6:	70da      	strb	r2, [r3, #3]
    fsp->type       = type;
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c9fe:	711a      	strb	r2, [r3, #4]

    uint8_t i = 0;
 800ca00:	2300      	movs	r3, #0
 800ca02:	75fb      	strb	r3, [r7, #23]
    uint8_t j = 0;
 800ca04:	2300      	movs	r3, #0
 800ca06:	75bb      	strb	r3, [r7, #22]

    // Copy cmd payload
    if (cmd != NULL) {
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d00e      	beq.n	800ca2c <fsp_gen_pkt+0x64>
        fsp->length++; // length + byte cmd
 800ca0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca10:	78db      	ldrb	r3, [r3, #3]
 800ca12:	3301      	adds	r3, #1
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca18:	70da      	strb	r2, [r3, #3]
        fsp->payload[j++] = *cmd;
 800ca1a:	7dbb      	ldrb	r3, [r7, #22]
 800ca1c:	1c5a      	adds	r2, r3, #1
 800ca1e:	75ba      	strb	r2, [r7, #22]
 800ca20:	4619      	mov	r1, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	781a      	ldrb	r2, [r3, #0]
 800ca26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca28:	440b      	add	r3, r1
 800ca2a:	715a      	strb	r2, [r3, #5]
    }

    // Copy payload fsp->payload
    for(i=0; i<payload_len; i++)
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	75fb      	strb	r3, [r7, #23]
 800ca30:	e00d      	b.n	800ca4e <fsp_gen_pkt+0x86>
    {
        fsp->payload[j++] = payload[i];
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	441a      	add	r2, r3
 800ca38:	7dbb      	ldrb	r3, [r7, #22]
 800ca3a:	1c59      	adds	r1, r3, #1
 800ca3c:	75b9      	strb	r1, [r7, #22]
 800ca3e:	4619      	mov	r1, r3
 800ca40:	7812      	ldrb	r2, [r2, #0]
 800ca42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca44:	440b      	add	r3, r1
 800ca46:	715a      	strb	r2, [r3, #5]
    for(i=0; i<payload_len; i++)
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	75fb      	strb	r3, [r7, #23]
 800ca4e:	7dfa      	ldrb	r2, [r7, #23]
 800ca50:	79fb      	ldrb	r3, [r7, #7]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d3ed      	bcc.n	800ca32 <fsp_gen_pkt+0x6a>
    }

    fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 800ca56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca58:	1c59      	adds	r1, r3, #1
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5c:	78db      	ldrb	r3, [r3, #3]
 800ca5e:	3304      	adds	r3, #4
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	461a      	mov	r2, r3
 800ca64:	2000      	movs	r0, #0
 800ca66:	f7ff ff0b 	bl	800c880 <crc16_CCITT>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca70:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

}
 800ca74:	bf00      	nop
 800ca76:	3718      	adds	r7, #24
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	2000a354 	.word	0x2000a354

0800ca80 <frame_encode>:


void frame_encode(fsp_packet_t *fsp, uint8_t *frame, uint8_t *frame_len)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b0c8      	sub	sp, #288	@ 0x120
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ca8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ca8e:	6018      	str	r0, [r3, #0]
 800ca90:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ca94:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800ca98:	6019      	str	r1, [r3, #0]
 800ca9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ca9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800caa2:	601a      	str	r2, [r3, #0]
    //frame
    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t encoded_length = 0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    encoded_frame[encoded_length++] = fsp->sod;
 800caaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cab4:	461a      	mov	r2, r3
 800cab6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800caba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	7819      	ldrb	r1, [r3, #0]
 800cac2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cac6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800caca:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->src_adr;
 800cacc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cad0:	1c5a      	adds	r2, r3, #1
 800cad2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cad6:	461a      	mov	r2, r3
 800cad8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cadc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	7859      	ldrb	r1, [r3, #1]
 800cae4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cae8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800caec:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->dst_adr;
 800caee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800caf2:	1c5a      	adds	r2, r3, #1
 800caf4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800caf8:	461a      	mov	r2, r3
 800cafa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cafe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	7899      	ldrb	r1, [r3, #2]
 800cb06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cb0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cb0e:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->length;
 800cb10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cb20:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	78d9      	ldrb	r1, [r3, #3]
 800cb28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cb2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cb30:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->type;
 800cb32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cb42:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	7919      	ldrb	r1, [r3, #4]
 800cb4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cb4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cb52:	5499      	strb	r1, [r3, r2]

    for(int i=0; i<fsp->length; i++)
 800cb54:	2300      	movs	r3, #0
 800cb56:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800cb5a:	e088      	b.n	800cc6e <frame_encode+0x1ee>
    {
        if (fsp->payload[i] == FSP_PKT_SOD) {
 800cb5c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cb60:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cb6a:	4413      	add	r3, r2
 800cb6c:	3305      	adds	r3, #5
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2bca      	cmp	r3, #202	@ 0xca
 800cb72:	d118      	bne.n	800cba6 <frame_encode+0x126>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800cb74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cb78:	1c5a      	adds	r2, r3, #1
 800cb7a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cb7e:	461a      	mov	r2, r3
 800cb80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cb84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cb88:	21bd      	movs	r1, #189	@ 0xbd
 800cb8a:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800cb8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cb90:	1c5a      	adds	r2, r3, #1
 800cb92:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cb96:	461a      	mov	r2, r3
 800cb98:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cb9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cba0:	21dc      	movs	r1, #220	@ 0xdc
 800cba2:	5499      	strb	r1, [r3, r2]
 800cba4:	e05e      	b.n	800cc64 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_EOF) {
 800cba6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cbaa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cbb4:	4413      	add	r3, r2
 800cbb6:	3305      	adds	r3, #5
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2bef      	cmp	r3, #239	@ 0xef
 800cbbc:	d118      	bne.n	800cbf0 <frame_encode+0x170>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800cbbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cbc8:	461a      	mov	r2, r3
 800cbca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cbce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cbd2:	21bd      	movs	r1, #189	@ 0xbd
 800cbd4:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800cbd6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cbe6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cbea:	21de      	movs	r1, #222	@ 0xde
 800cbec:	5499      	strb	r1, [r3, r2]
 800cbee:	e039      	b.n	800cc64 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_ESC) {
 800cbf0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cbf4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cbfe:	4413      	add	r3, r2
 800cc00:	3305      	adds	r3, #5
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2bbd      	cmp	r3, #189	@ 0xbd
 800cc06:	d118      	bne.n	800cc3a <frame_encode+0x1ba>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800cc08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc0c:	1c5a      	adds	r2, r3, #1
 800cc0e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cc12:	461a      	mov	r2, r3
 800cc14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cc18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cc1c:	21bd      	movs	r1, #189	@ 0xbd
 800cc1e:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800cc20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cc30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cc34:	21db      	movs	r1, #219	@ 0xdb
 800cc36:	5499      	strb	r1, [r3, r2]
 800cc38:	e014      	b.n	800cc64 <frame_encode+0x1e4>
        } else {
            encoded_frame[encoded_length++] = fsp->payload[i];
 800cc3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc3e:	1c5a      	adds	r2, r3, #1
 800cc40:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cc44:	4619      	mov	r1, r3
 800cc46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cc4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cc54:	4413      	add	r3, r2
 800cc56:	3305      	adds	r3, #5
 800cc58:	781a      	ldrb	r2, [r3, #0]
 800cc5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cc5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cc62:	545a      	strb	r2, [r3, r1]
    for(int i=0; i<fsp->length; i++)
 800cc64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cc68:	3301      	adds	r3, #1
 800cc6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800cc6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cc72:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	78db      	ldrb	r3, [r3, #3]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800cc80:	4293      	cmp	r3, r2
 800cc82:	f6ff af6b 	blt.w	800cb5c <frame_encode+0xdc>
        }
    }

    // CRC16
    uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 800cc86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cc8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800cc94:	0a1b      	lsrs	r3, r3, #8
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 800cc9c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cca0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800ccaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

    if (crc_msb == FSP_PKT_SOD) {
 800ccae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccb2:	2bca      	cmp	r3, #202	@ 0xca
 800ccb4:	d118      	bne.n	800cce8 <frame_encode+0x268>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800ccb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ccba:	1c5a      	adds	r2, r3, #1
 800ccbc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ccc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ccca:	21bd      	movs	r1, #189	@ 0xbd
 800cccc:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800ccce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ccd8:	461a      	mov	r2, r3
 800ccda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ccde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cce2:	21dc      	movs	r1, #220	@ 0xdc
 800cce4:	5499      	strb	r1, [r3, r2]
 800cce6:	e046      	b.n	800cd76 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_EOF) {
 800cce8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccec:	2bef      	cmp	r3, #239	@ 0xef
 800ccee:	d118      	bne.n	800cd22 <frame_encode+0x2a2>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800ccf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ccf4:	1c5a      	adds	r2, r3, #1
 800ccf6:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cd00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cd04:	21bd      	movs	r1, #189	@ 0xbd
 800cd06:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800cd08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cd0c:	1c5a      	adds	r2, r3, #1
 800cd0e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cd12:	461a      	mov	r2, r3
 800cd14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cd18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cd1c:	21de      	movs	r1, #222	@ 0xde
 800cd1e:	5499      	strb	r1, [r3, r2]
 800cd20:	e029      	b.n	800cd76 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_ESC) {
 800cd22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd26:	2bbd      	cmp	r3, #189	@ 0xbd
 800cd28:	d118      	bne.n	800cd5c <frame_encode+0x2dc>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800cd2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cd34:	461a      	mov	r2, r3
 800cd36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cd3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cd3e:	21bd      	movs	r1, #189	@ 0xbd
 800cd40:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800cd42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cd46:	1c5a      	adds	r2, r3, #1
 800cd48:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cd52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cd56:	21db      	movs	r1, #219	@ 0xdb
 800cd58:	5499      	strb	r1, [r3, r2]
 800cd5a:	e00c      	b.n	800cd76 <frame_encode+0x2f6>
    } else {
        encoded_frame[encoded_length++] = crc_msb;
 800cd5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cd60:	1c5a      	adds	r2, r3, #1
 800cd62:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cd66:	4619      	mov	r1, r3
 800cd68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cd6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cd70:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800cd74:	545a      	strb	r2, [r3, r1]
    }

    if (crc_lsb == FSP_PKT_SOD) {
 800cd76:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cd7a:	2bca      	cmp	r3, #202	@ 0xca
 800cd7c:	d118      	bne.n	800cdb0 <frame_encode+0x330>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800cd7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cd88:	461a      	mov	r2, r3
 800cd8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cd8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cd92:	21bd      	movs	r1, #189	@ 0xbd
 800cd94:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800cd96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cd9a:	1c5a      	adds	r2, r3, #1
 800cd9c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cda0:	461a      	mov	r2, r3
 800cda2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cda6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cdaa:	21dc      	movs	r1, #220	@ 0xdc
 800cdac:	5499      	strb	r1, [r3, r2]
 800cdae:	e046      	b.n	800ce3e <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_EOF) {
 800cdb0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cdb4:	2bef      	cmp	r3, #239	@ 0xef
 800cdb6:	d118      	bne.n	800cdea <frame_encode+0x36a>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800cdb8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cdbc:	1c5a      	adds	r2, r3, #1
 800cdbe:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cdc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cdcc:	21bd      	movs	r1, #189	@ 0xbd
 800cdce:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800cdd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cdd4:	1c5a      	adds	r2, r3, #1
 800cdd6:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cdda:	461a      	mov	r2, r3
 800cddc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cde0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800cde4:	21de      	movs	r1, #222	@ 0xde
 800cde6:	5499      	strb	r1, [r3, r2]
 800cde8:	e029      	b.n	800ce3e <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_ESC) {
 800cdea:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cdee:	2bbd      	cmp	r3, #189	@ 0xbd
 800cdf0:	d118      	bne.n	800ce24 <frame_encode+0x3a4>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800cdf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cdf6:	1c5a      	adds	r2, r3, #1
 800cdf8:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ce02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ce06:	21bd      	movs	r1, #189	@ 0xbd
 800ce08:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800ce0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ce0e:	1c5a      	adds	r2, r3, #1
 800ce10:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ce14:	461a      	mov	r2, r3
 800ce16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ce1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ce1e:	21db      	movs	r1, #219	@ 0xdb
 800ce20:	5499      	strb	r1, [r3, r2]
 800ce22:	e00c      	b.n	800ce3e <frame_encode+0x3be>
    } else {
        encoded_frame[encoded_length++] = crc_lsb;
 800ce24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ce2e:	4619      	mov	r1, r3
 800ce30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ce34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ce38:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800ce3c:	545a      	strb	r2, [r3, r1]
    }

    encoded_frame[encoded_length++] = FSP_PKT_EOF;
 800ce3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800ce48:	461a      	mov	r2, r3
 800ce4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ce4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ce52:	21ef      	movs	r1, #239	@ 0xef
 800ce54:	5499      	strb	r1, [r3, r2]

    memcpy(frame, encoded_frame, encoded_length);
 800ce56:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800ce5a:	f107 0114 	add.w	r1, r7, #20
 800ce5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ce62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800ce66:	6818      	ldr	r0, [r3, #0]
 800ce68:	f004 fb77 	bl	801155a <memcpy>
    *frame_len = encoded_length;
 800ce6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ce70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800ce7a:	701a      	strb	r2, [r3, #0]
}
 800ce7c:	bf00      	nop
 800ce7e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
	...

0800ce88 <frame_decode>:
                return FSP_PKT_ERROR;
            }
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ce94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ce98:	6018      	str	r0, [r3, #0]
 800ce9a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ce9e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cea8:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800ceac:	460a      	mov	r2, r1
 800ceae:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];


	if (length < FSP_PKT_MIN_LENGTH - 2) {
 800cec2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cec6:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	2b05      	cmp	r3, #5
 800cece:	d862      	bhi.n	800cf96 <frame_decode+0x10e>
	        return FSP_PKT_INVALID;
 800ced0:	2302      	movs	r3, #2
 800ced2:	e133      	b.n	800d13c <frame_decode+0x2b4>
	}


	while (i < length){
        uint8_t byte = buffer[i++];
 800ced4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800cede:	461a      	mov	r2, r3
 800cee0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cee4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4413      	add	r3, r2
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (escape) {
 800cef2:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d038      	beq.n	800cf6c <frame_decode+0xe4>
            if (byte == FSP_PKT_TSOD) {
 800cefa:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800cefe:	2bdc      	cmp	r3, #220	@ 0xdc
 800cf00:	d10c      	bne.n	800cf1c <frame_decode+0x94>
                decoded_payload[j++] = FSP_PKT_SOD;
 800cf02:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800cf06:	1c5a      	adds	r2, r3, #1
 800cf08:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cf12:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800cf16:	21ca      	movs	r1, #202	@ 0xca
 800cf18:	5499      	strb	r1, [r3, r2]
 800cf1a:	e023      	b.n	800cf64 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TEOF) {
 800cf1c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800cf20:	2bde      	cmp	r3, #222	@ 0xde
 800cf22:	d10c      	bne.n	800cf3e <frame_decode+0xb6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800cf24:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800cf28:	1c5a      	adds	r2, r3, #1
 800cf2a:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cf34:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800cf38:	21ef      	movs	r1, #239	@ 0xef
 800cf3a:	5499      	strb	r1, [r3, r2]
 800cf3c:	e012      	b.n	800cf64 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TESC) {
 800cf3e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800cf42:	2bdb      	cmp	r3, #219	@ 0xdb
 800cf44:	d10c      	bne.n	800cf60 <frame_decode+0xd8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800cf46:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800cf4a:	1c5a      	adds	r2, r3, #1
 800cf4c:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800cf50:	461a      	mov	r2, r3
 800cf52:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cf56:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800cf5a:	21bd      	movs	r1, #189	@ 0xbd
 800cf5c:	5499      	strb	r1, [r3, r2]
 800cf5e:	e001      	b.n	800cf64 <frame_decode+0xdc>
            } else {
            	return FSP_PKT_INVALID;
 800cf60:	2302      	movs	r3, #2
 800cf62:	e0eb      	b.n	800d13c <frame_decode+0x2b4>
            }
            escape = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800cf6a:	e014      	b.n	800cf96 <frame_decode+0x10e>
        } else if (byte == FSP_PKT_ESC) {
 800cf6c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800cf70:	2bbd      	cmp	r3, #189	@ 0xbd
 800cf72:	d103      	bne.n	800cf7c <frame_decode+0xf4>
        	escape = 1;
 800cf74:	2301      	movs	r3, #1
 800cf76:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800cf7a:	e00c      	b.n	800cf96 <frame_decode+0x10e>
        } else {
            decoded_payload[j++] = byte;
 800cf7c:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800cf86:	4619      	mov	r1, r3
 800cf88:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cf8c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800cf90:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800cf94:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800cf96:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cf9a:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800cf9e:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d395      	bcc.n	800ced4 <frame_decode+0x4c>
        }
	}

    i = 0;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800cfae:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800cfb2:	1c5a      	adds	r2, r3, #1
 800cfb4:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800cfb8:	461a      	mov	r2, r3
 800cfba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cfbe:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800cfc2:	5c9a      	ldrb	r2, [r3, r2]
 800cfc4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cfc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfcc:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800cfce:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800cfd2:	1c5a      	adds	r2, r3, #1
 800cfd4:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800cfd8:	461a      	mov	r2, r3
 800cfda:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cfde:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800cfe2:	5c9a      	ldrb	r2, [r3, r2]
 800cfe4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cfe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfec:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800cfee:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800cff8:	461a      	mov	r2, r3
 800cffa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cffe:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800d002:	5c9a      	ldrb	r2, [r3, r2]
 800d004:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d00c:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800d00e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d012:	1c5a      	adds	r2, r3, #1
 800d014:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800d018:	461a      	mov	r2, r3
 800d01a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d01e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800d022:	5c9a      	ldrb	r2, [r3, r2]
 800d024:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d02c:	711a      	strb	r2, [r3, #4]

    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 800d02e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d036:	78db      	ldrb	r3, [r3, #3]
 800d038:	2bf7      	cmp	r3, #247	@ 0xf7
 800d03a:	d80a      	bhi.n	800d052 <frame_decode+0x1ca>
 800d03c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d044:	78db      	ldrb	r3, [r3, #3]
 800d046:	461a      	mov	r2, r3
 800d048:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800d04c:	3b06      	subs	r3, #6
 800d04e:	429a      	cmp	r2, r3
 800d050:	d001      	beq.n	800d056 <frame_decode+0x1ce>
        return FSP_PKT_WRONG_LENGTH;
 800d052:	2306      	movs	r3, #6
 800d054:	e072      	b.n	800d13c <frame_decode+0x2b4>
    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800d056:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d05a:	f107 0210 	add.w	r2, r7, #16
 800d05e:	18d1      	adds	r1, r2, r3
 800d060:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d068:	78db      	ldrb	r3, [r3, #3]
 800d06a:	461a      	mov	r2, r3
 800d06c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d070:	3305      	adds	r3, #5
 800d072:	4618      	mov	r0, r3
 800d074:	f004 fa71 	bl	801155a <memcpy>
    i += fsp_pkt.length;
 800d078:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d07c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d080:	78da      	ldrb	r2, [r3, #3]
 800d082:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d086:	4413      	add	r3, r2
 800d088:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    //CRC
    uint16_t crc_received = (uint16_t)(decoded_payload[i++] << 8);
 800d08c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d090:	1c5a      	adds	r2, r3, #1
 800d092:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800d096:	461a      	mov	r2, r3
 800d098:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d09c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800d0a0:	5c9b      	ldrb	r3, [r3, r2]
 800d0a2:	021b      	lsls	r3, r3, #8
 800d0a4:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
    crc_received |= (uint16_t)(decoded_payload[i++]);
 800d0a8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d0b8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800d0bc:	5c9b      	ldrb	r3, [r3, r2]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a


    // CAL CRC
    uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp_pkt.src_adr, fsp_pkt.length + 4);
 800d0ca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d0ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0d2:	78db      	ldrb	r3, [r3, #3]
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0dc:	3301      	adds	r3, #1
 800d0de:	4619      	mov	r1, r3
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	f7ff fbcd 	bl	800c880 <crc16_CCITT>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208


    // CHECK CRC
    if (crc_received != crc_calculated) {
 800d0ec:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 800d0f0:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d001      	beq.n	800d0fc <frame_decode+0x274>
        return FSP_PKT_CRC_FAIL;
 800d0f8:	2305      	movs	r3, #5
 800d0fa:	e01f      	b.n	800d13c <frame_decode+0x2b4>
    }

    // Address
    if (fsp_pkt.dst_adr != fsp_my_adr) {
 800d0fc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d104:	789a      	ldrb	r2, [r3, #2]
 800d106:	4b10      	ldr	r3, [pc, #64]	@ (800d148 <frame_decode+0x2c0>)
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d001      	beq.n	800d112 <frame_decode+0x28a>
        return FSP_PKT_WRONG_ADR;
 800d10e:	2303      	movs	r3, #3
 800d110:	e014      	b.n	800d13c <frame_decode+0x2b4>
    }

    *pkt = fsp_pkt;
 800d112:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d116:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d124:	4610      	mov	r0, r2
 800d126:	4619      	mov	r1, r3
 800d128:	23fe      	movs	r3, #254	@ 0xfe
 800d12a:	461a      	mov	r2, r3
 800d12c:	f004 fa15 	bl	801155a <memcpy>


    frame_processing(&fsp_pkt);
 800d130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d134:	4618      	mov	r0, r3
 800d136:	f000 f905 	bl	800d344 <frame_processing>


    return 0;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	2000a354 	.word	0x2000a354

0800d14c <frame_decode_rs422>:



int frame_decode_rs422(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800d14c:	b580      	push	{r7, lr}
 800d14e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800d152:	af00      	add	r7, sp, #0
 800d154:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d158:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800d15c:	6018      	str	r0, [r3, #0]
 800d15e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d162:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800d166:	601a      	str	r2, [r3, #0]
 800d168:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d16c:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800d170:	460a      	mov	r2, r1
 800d172:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800d174:	2300      	movs	r3, #0
 800d176:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800d180:	2300      	movs	r3, #0
 800d182:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
//	if (length < FSP_PKT_MIN_LENGTH - 2) {
//	        return FSP_PKT_INVALID;
//	}


	while (i < length){
 800d186:	e060      	b.n	800d24a <frame_decode_rs422+0xfe>
        uint8_t byte = buffer[i++];
 800d188:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d18c:	1c5a      	adds	r2, r3, #1
 800d18e:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800d192:	461a      	mov	r2, r3
 800d194:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d198:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4413      	add	r3, r2
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (escape) {
 800d1a6:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d038      	beq.n	800d220 <frame_decode_rs422+0xd4>
            if (byte == FSP_PKT_TSOD) {
 800d1ae:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800d1b2:	2bdc      	cmp	r3, #220	@ 0xdc
 800d1b4:	d10c      	bne.n	800d1d0 <frame_decode_rs422+0x84>
                decoded_payload[j++] = FSP_PKT_SOD;
 800d1b6:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800d1ba:	1c5a      	adds	r2, r3, #1
 800d1bc:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d1c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800d1ca:	21ca      	movs	r1, #202	@ 0xca
 800d1cc:	5499      	strb	r1, [r3, r2]
 800d1ce:	e023      	b.n	800d218 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TEOF) {
 800d1d0:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800d1d4:	2bde      	cmp	r3, #222	@ 0xde
 800d1d6:	d10c      	bne.n	800d1f2 <frame_decode_rs422+0xa6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800d1d8:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800d1dc:	1c5a      	adds	r2, r3, #1
 800d1de:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d1e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800d1ec:	21ef      	movs	r1, #239	@ 0xef
 800d1ee:	5499      	strb	r1, [r3, r2]
 800d1f0:	e012      	b.n	800d218 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TESC) {
 800d1f2:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800d1f6:	2bdb      	cmp	r3, #219	@ 0xdb
 800d1f8:	d10c      	bne.n	800d214 <frame_decode_rs422+0xc8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800d1fa:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800d1fe:	1c5a      	adds	r2, r3, #1
 800d200:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800d204:	461a      	mov	r2, r3
 800d206:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d20a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800d20e:	21bd      	movs	r1, #189	@ 0xbd
 800d210:	5499      	strb	r1, [r3, r2]
 800d212:	e001      	b.n	800d218 <frame_decode_rs422+0xcc>
            } else {
            	return FSP_PKT_INVALID;
 800d214:	2302      	movs	r3, #2
 800d216:	e08f      	b.n	800d338 <frame_decode_rs422+0x1ec>
            }
            escape = 0;
 800d218:	2300      	movs	r3, #0
 800d21a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800d21e:	e014      	b.n	800d24a <frame_decode_rs422+0xfe>
        } else if (byte == FSP_PKT_ESC) {
 800d220:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800d224:	2bbd      	cmp	r3, #189	@ 0xbd
 800d226:	d103      	bne.n	800d230 <frame_decode_rs422+0xe4>
        	escape = 1;
 800d228:	2301      	movs	r3, #1
 800d22a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800d22e:	e00c      	b.n	800d24a <frame_decode_rs422+0xfe>
        } else {
            decoded_payload[j++] = byte;
 800d230:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800d234:	1c5a      	adds	r2, r3, #1
 800d236:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800d23a:	4619      	mov	r1, r3
 800d23c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d240:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800d244:	f897 220c 	ldrb.w	r2, [r7, #524]	@ 0x20c
 800d248:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800d24a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d24e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800d252:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d395      	bcc.n	800d188 <frame_decode_rs422+0x3c>
        }
	}

    i = 0;
 800d25c:	2300      	movs	r3, #0
 800d25e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800d262:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800d26c:	461a      	mov	r2, r3
 800d26e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800d276:	5c9a      	ldrb	r2, [r3, r2]
 800d278:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d27c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d280:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800d282:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d286:	1c5a      	adds	r2, r3, #1
 800d288:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800d28c:	461a      	mov	r2, r3
 800d28e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d292:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800d296:	5c9a      	ldrb	r2, [r3, r2]
 800d298:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d29c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2a0:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800d2a2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d2a6:	1c5a      	adds	r2, r3, #1
 800d2a8:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d2b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800d2b6:	5c9a      	ldrb	r2, [r3, r2]
 800d2b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d2bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2c0:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800d2c2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d2d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800d2d6:	5c9a      	ldrb	r2, [r3, r2]
 800d2d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d2dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2e0:	711a      	strb	r2, [r3, #4]

//    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
//        return FSP_PKT_WRONG_LENGTH;
//    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800d2e2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d2e6:	f107 0214 	add.w	r2, r7, #20
 800d2ea:	18d1      	adds	r1, r2, r3
 800d2ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d2f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2f4:	78db      	ldrb	r3, [r3, #3]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800d2fc:	3305      	adds	r3, #5
 800d2fe:	4618      	mov	r0, r3
 800d300:	f004 f92b 	bl	801155a <memcpy>
    i += fsp_pkt.length;
 800d304:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d308:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d30c:	78da      	ldrb	r2, [r3, #3]
 800d30e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800d312:	4413      	add	r3, r2
 800d314:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
//    // Address
//    if (fsp_pkt.dst_adr != fsp_my_adr) {
//        return FSP_PKT_WRONG_ADR;
//    }

    *pkt = fsp_pkt;
 800d318:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d31c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800d326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d32a:	4610      	mov	r0, r2
 800d32c:	4619      	mov	r1, r3
 800d32e:	23fe      	movs	r3, #254	@ 0xfe
 800d330:	461a      	mov	r2, r3
 800d332:	f004 f912 	bl	801155a <memcpy>


    return 0;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
	...

0800d344 <frame_processing>:


char pos_str2[10];

int frame_processing(fsp_packet_t *fsp_pkt){
 800d344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d348:	f5ad 6de1 	sub.w	sp, sp, #1800	@ 0x708
 800d34c:	af34      	add	r7, sp, #208	@ 0xd0
 800d34e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d352:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d356:	6018      	str	r0, [r3, #0]


	switch (fsp_pkt->src_adr){
 800d358:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d35c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	785b      	ldrb	r3, [r3, #1]
 800d364:	3b02      	subs	r3, #2
 800d366:	2b03      	cmp	r3, #3
 800d368:	f202 81a6 	bhi.w	800f6b8 <frame_processing+0x2374>
 800d36c:	a201      	add	r2, pc, #4	@ (adr r2, 800d374 <frame_processing+0x30>)
 800d36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d372:	bf00      	nop
 800d374:	0800d385 	.word	0x0800d385
 800d378:	0800df5f 	.word	0x0800df5f
 800d37c:	0800e7f1 	.word	0x0800e7f1
 800d380:	0800e7f9 	.word	0x0800e7f9
		case FSP_ADR_PMU:
			switch (fsp_pkt->type)
 800d384:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d388:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	791b      	ldrb	r3, [r3, #4]
 800d390:	2b05      	cmp	r3, #5
 800d392:	d003      	beq.n	800d39c <frame_processing+0x58>
 800d394:	2b07      	cmp	r3, #7
 800d396:	d010      	beq.n	800d3ba <frame_processing+0x76>
 800d398:	f000 bdd7 	b.w	800df4a <frame_processing+0xc06>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800d39c:	f7f4 ff6e 	bl	800227c <clear_send_flag>

//                    if (uart_choose_uart5) {
//                    	Uart_sendstring(UART5, "\nPMU_ACK\r\n> ");
//                    }
                    if (uart_choose_usart2) {
 800d3a0:	4b9d      	ldr	r3, [pc, #628]	@ (800d618 <frame_processing+0x2d4>)
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <frame_processing+0x6e>
                    	Uart_sendstring(USART2, "\nPMU_ACK\r\n> ");
 800d3aa:	499c      	ldr	r1, [pc, #624]	@ (800d61c <frame_processing+0x2d8>)
 800d3ac:	489c      	ldr	r0, [pc, #624]	@ (800d620 <frame_processing+0x2dc>)
 800d3ae:	f7f4 fe23 	bl	8001ff8 <Uart_sendstring>
                    }
					Uart_sendstring(UART4, "\nPMU_ACK\r\n> ");
 800d3b2:	499a      	ldr	r1, [pc, #616]	@ (800d61c <frame_processing+0x2d8>)
 800d3b4:	489b      	ldr	r0, [pc, #620]	@ (800d624 <frame_processing+0x2e0>)
 800d3b6:	f7f4 fe1f 	bl	8001ff8 <Uart_sendstring>

				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800d3ba:	f7f4 ff5f 	bl	800227c <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800d3be:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d3c2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	795b      	ldrb	r3, [r3, #5]
 800d3ca:	2b08      	cmp	r3, #8
 800d3cc:	dc1a      	bgt.n	800d404 <frame_processing+0xc0>
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f2c0 85c0 	blt.w	800df54 <frame_processing+0xc10>
 800d3d4:	2b08      	cmp	r3, #8
 800d3d6:	f200 85bd 	bhi.w	800df54 <frame_processing+0xc10>
 800d3da:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e0 <frame_processing+0x9c>)
 800d3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e0:	0800d40d 	.word	0x0800d40d
 800d3e4:	0800d48d 	.word	0x0800d48d
 800d3e8:	0800d6df 	.word	0x0800d6df
 800d3ec:	0800d85f 	.word	0x0800d85f
 800d3f0:	0800d951 	.word	0x0800d951
 800d3f4:	0800df55 	.word	0x0800df55
 800d3f8:	0800df55 	.word	0x0800df55
 800d3fc:	0800df55 	.word	0x0800df55
 800d400:	0800da21 	.word	0x0800da21
 800d404:	2bff      	cmp	r3, #255	@ 0xff
 800d406:	d021      	beq.n	800d44c <frame_processing+0x108>

							    }
							    break;
					}

					break;
 800d408:	f000 bda4 	b.w	800df54 <frame_processing+0xc10>
							sprintf(buffer_0x00, "PMU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800d40c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d410:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	799b      	ldrb	r3, [r3, #6]
 800d418:	461a      	mov	r2, r3
 800d41a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d41e:	4982      	ldr	r1, [pc, #520]	@ (800d628 <frame_processing+0x2e4>)
 800d420:	4618      	mov	r0, r3
 800d422:	f003 ff33 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800d426:	4b7c      	ldr	r3, [pc, #496]	@ (800d618 <frame_processing+0x2d4>)
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d005      	beq.n	800d43c <frame_processing+0xf8>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800d430:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d434:	4619      	mov	r1, r3
 800d436:	487a      	ldr	r0, [pc, #488]	@ (800d620 <frame_processing+0x2dc>)
 800d438:	f7f4 fdde 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x00);
 800d43c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d440:	4619      	mov	r1, r3
 800d442:	4878      	ldr	r0, [pc, #480]	@ (800d624 <frame_processing+0x2e0>)
 800d444:	f7f4 fdd8 	bl	8001ff8 <Uart_sendstring>
							break;
 800d448:	f000 bd7e 	b.w	800df48 <frame_processing+0xc04>
							sprintf(buffer_0xFF, "PMU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800d44c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d450:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	799b      	ldrb	r3, [r3, #6]
 800d458:	461a      	mov	r2, r3
 800d45a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d45e:	4973      	ldr	r1, [pc, #460]	@ (800d62c <frame_processing+0x2e8>)
 800d460:	4618      	mov	r0, r3
 800d462:	f003 ff13 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800d466:	4b6c      	ldr	r3, [pc, #432]	@ (800d618 <frame_processing+0x2d4>)
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d005      	beq.n	800d47c <frame_processing+0x138>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800d470:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d474:	4619      	mov	r1, r3
 800d476:	486a      	ldr	r0, [pc, #424]	@ (800d620 <frame_processing+0x2dc>)
 800d478:	f7f4 fdbe 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0xFF);
 800d47c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d480:	4619      	mov	r1, r3
 800d482:	4868      	ldr	r0, [pc, #416]	@ (800d624 <frame_processing+0x2e0>)
 800d484:	f7f4 fdb8 	bl	8001ff8 <Uart_sendstring>
							break;
 800d488:	f000 bd5e 	b.w	800df48 <frame_processing+0xc04>
						    int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800d48c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d490:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	799b      	ldrb	r3, [r3, #6]
 800d498:	021b      	lsls	r3, r3, #8
 800d49a:	b21a      	sxth	r2, r3
 800d49c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d4a0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	79db      	ldrb	r3, [r3, #7]
 800d4a8:	b21b      	sxth	r3, r3
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	f8a7 356e 	strh.w	r3, [r7, #1390]	@ 0x56e
						    int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800d4b0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d4b4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	7a1b      	ldrb	r3, [r3, #8]
 800d4bc:	021b      	lsls	r3, r3, #8
 800d4be:	b21a      	sxth	r2, r3
 800d4c0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d4c4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	7a5b      	ldrb	r3, [r3, #9]
 800d4cc:	b21b      	sxth	r3, r3
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	f8a7 356c 	strh.w	r3, [r7, #1388]	@ 0x56c
						    int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800d4d4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d4d8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	7a9b      	ldrb	r3, [r3, #10]
 800d4e0:	021b      	lsls	r3, r3, #8
 800d4e2:	b21a      	sxth	r2, r3
 800d4e4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d4e8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	7adb      	ldrb	r3, [r3, #11]
 800d4f0:	b21b      	sxth	r3, r3
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	f8a7 356a 	strh.w	r3, [r7, #1386]	@ 0x56a
						    int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800d4f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d4fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	7b1b      	ldrb	r3, [r3, #12]
 800d504:	021b      	lsls	r3, r3, #8
 800d506:	b21a      	sxth	r2, r3
 800d508:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d50c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	7b5b      	ldrb	r3, [r3, #13]
 800d514:	b21b      	sxth	r3, r3
 800d516:	4313      	orrs	r3, r2
 800d518:	f8a7 3568 	strh.w	r3, [r7, #1384]	@ 0x568
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800d51c:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800d520:	2b00      	cmp	r3, #0
 800d522:	da03      	bge.n	800d52c <frame_processing+0x1e8>
 800d524:	4b42      	ldr	r3, [pc, #264]	@ (800d630 <frame_processing+0x2ec>)
 800d526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d52a:	e002      	b.n	800d532 <frame_processing+0x1ee>
 800d52c:	4b41      	ldr	r3, [pc, #260]	@ (800d634 <frame_processing+0x2f0>)
 800d52e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800d532:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800d536:	2b00      	cmp	r3, #0
 800d538:	bfb8      	it	lt
 800d53a:	425b      	neglt	r3, r3
 800d53c:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800d53e:	4a3e      	ldr	r2, [pc, #248]	@ (800d638 <frame_processing+0x2f4>)
 800d540:	fb82 1203 	smull	r1, r2, r2, r3
 800d544:	1152      	asrs	r2, r2, #5
 800d546:	17db      	asrs	r3, r3, #31
 800d548:	eba2 0c03 	sub.w	ip, r2, r3
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800d54c:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800d550:	2b00      	cmp	r3, #0
 800d552:	bfb8      	it	lt
 800d554:	425b      	neglt	r3, r3
 800d556:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800d558:	4a37      	ldr	r2, [pc, #220]	@ (800d638 <frame_processing+0x2f4>)
 800d55a:	fb82 1203 	smull	r1, r2, r2, r3
 800d55e:	1151      	asrs	r1, r2, #5
 800d560:	17da      	asrs	r2, r3, #31
 800d562:	1a8c      	subs	r4, r1, r2
 800d564:	2264      	movs	r2, #100	@ 0x64
 800d566:	fb04 f202 	mul.w	r2, r4, r2
 800d56a:	1a9c      	subs	r4, r3, r2
 800d56c:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800d570:	2b00      	cmp	r3, #0
 800d572:	da01      	bge.n	800d578 <frame_processing+0x234>
 800d574:	4e2e      	ldr	r6, [pc, #184]	@ (800d630 <frame_processing+0x2ec>)
 800d576:	e000      	b.n	800d57a <frame_processing+0x236>
 800d578:	4e2e      	ldr	r6, [pc, #184]	@ (800d634 <frame_processing+0x2f0>)
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800d57a:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	bfb8      	it	lt
 800d582:	425b      	neglt	r3, r3
 800d584:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800d586:	4a2c      	ldr	r2, [pc, #176]	@ (800d638 <frame_processing+0x2f4>)
 800d588:	fb82 1203 	smull	r1, r2, r2, r3
 800d58c:	1152      	asrs	r2, r2, #5
 800d58e:	17db      	asrs	r3, r3, #31
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800d596:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	bfb8      	it	lt
 800d59e:	425b      	neglt	r3, r3
 800d5a0:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800d5a2:	4a25      	ldr	r2, [pc, #148]	@ (800d638 <frame_processing+0x2f4>)
 800d5a4:	fb82 1203 	smull	r1, r2, r2, r3
 800d5a8:	1151      	asrs	r1, r2, #5
 800d5aa:	17da      	asrs	r2, r3, #31
 800d5ac:	1a8d      	subs	r5, r1, r2
 800d5ae:	2264      	movs	r2, #100	@ 0x64
 800d5b0:	fb05 f202 	mul.w	r2, r5, r2
 800d5b4:	1a9d      	subs	r5, r3, r2
 800d5b6:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	da03      	bge.n	800d5c6 <frame_processing+0x282>
 800d5be:	4b1c      	ldr	r3, [pc, #112]	@ (800d630 <frame_processing+0x2ec>)
 800d5c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d5c4:	e002      	b.n	800d5cc <frame_processing+0x288>
 800d5c6:	4b1b      	ldr	r3, [pc, #108]	@ (800d634 <frame_processing+0x2f0>)
 800d5c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800d5cc:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	bfb8      	it	lt
 800d5d4:	425b      	neglt	r3, r3
 800d5d6:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800d5d8:	4a17      	ldr	r2, [pc, #92]	@ (800d638 <frame_processing+0x2f4>)
 800d5da:	fb82 1203 	smull	r1, r2, r2, r3
 800d5de:	1152      	asrs	r2, r2, #5
 800d5e0:	17db      	asrs	r3, r3, #31
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800d5e8:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	bfb8      	it	lt
 800d5f0:	425b      	neglt	r3, r3
 800d5f2:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800d5f4:	4a10      	ldr	r2, [pc, #64]	@ (800d638 <frame_processing+0x2f4>)
 800d5f6:	fb82 1203 	smull	r1, r2, r2, r3
 800d5fa:	1151      	asrs	r1, r2, #5
 800d5fc:	17da      	asrs	r2, r3, #31
 800d5fe:	1a89      	subs	r1, r1, r2
 800d600:	2264      	movs	r2, #100	@ 0x64
 800d602:	fb01 f202 	mul.w	r2, r1, r2
 800d606:	1a99      	subs	r1, r3, r2
 800d608:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	da15      	bge.n	800d63c <frame_processing+0x2f8>
 800d610:	4b07      	ldr	r3, [pc, #28]	@ (800d630 <frame_processing+0x2ec>)
 800d612:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d616:	e014      	b.n	800d642 <frame_processing+0x2fe>
 800d618:	20007994 	.word	0x20007994
 800d61c:	08016638 	.word	0x08016638
 800d620:	40004400 	.word	0x40004400
 800d624:	40004c00 	.word	0x40004c00
 800d628:	08016648 	.word	0x08016648
 800d62c:	08016664 	.word	0x08016664
 800d630:	08016680 	.word	0x08016680
 800d634:	08016684 	.word	0x08016684
 800d638:	51eb851f 	.word	0x51eb851f
 800d63c:	4bbc      	ldr	r3, [pc, #752]	@ (800d930 <frame_processing+0x5ec>)
 800d63e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800d642:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800d646:	2b00      	cmp	r3, #0
 800d648:	bfb8      	it	lt
 800d64a:	425b      	neglt	r3, r3
 800d64c:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800d64e:	4ab9      	ldr	r2, [pc, #740]	@ (800d934 <frame_processing+0x5f0>)
 800d650:	fb82 0203 	smull	r0, r2, r2, r3
 800d654:	1152      	asrs	r2, r2, #5
 800d656:	17db      	asrs	r3, r3, #31
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800d65e:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800d662:	2b00      	cmp	r3, #0
 800d664:	bfb8      	it	lt
 800d666:	425b      	neglt	r3, r3
 800d668:	b29b      	uxth	r3, r3
 800d66a:	4618      	mov	r0, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800d66c:	4bb1      	ldr	r3, [pc, #708]	@ (800d934 <frame_processing+0x5f0>)
 800d66e:	fb83 2300 	smull	r2, r3, r3, r0
 800d672:	115a      	asrs	r2, r3, #5
 800d674:	17c3      	asrs	r3, r0, #31
 800d676:	1ad3      	subs	r3, r2, r3
 800d678:	2264      	movs	r2, #100	@ 0x64
 800d67a:	fb02 f303 	mul.w	r3, r2, r3
 800d67e:	1ac3      	subs	r3, r0, r3
 800d680:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d684:	9309      	str	r3, [sp, #36]	@ 0x24
 800d686:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d68a:	9308      	str	r3, [sp, #32]
 800d68c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d690:	9307      	str	r3, [sp, #28]
 800d692:	9106      	str	r1, [sp, #24]
 800d694:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d698:	9305      	str	r3, [sp, #20]
 800d69a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d69e:	9304      	str	r3, [sp, #16]
 800d6a0:	9503      	str	r5, [sp, #12]
 800d6a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6a6:	9302      	str	r3, [sp, #8]
 800d6a8:	9601      	str	r6, [sp, #4]
 800d6aa:	9400      	str	r4, [sp, #0]
 800d6ac:	4663      	mov	r3, ip
 800d6ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d6b2:	49a1      	ldr	r1, [pc, #644]	@ (800d938 <frame_processing+0x5f4>)
 800d6b4:	f003 fdea 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800d6b8:	4ba0      	ldr	r3, [pc, #640]	@ (800d93c <frame_processing+0x5f8>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d005      	beq.n	800d6ce <frame_processing+0x38a>
		                    	Uart_sendstring(USART2, buffer_0x01);
 800d6c2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	489d      	ldr	r0, [pc, #628]	@ (800d940 <frame_processing+0x5fc>)
 800d6ca:	f7f4 fc95 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x01);
 800d6ce:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	489b      	ldr	r0, [pc, #620]	@ (800d944 <frame_processing+0x600>)
 800d6d6:	f7f4 fc8f 	bl	8001ff8 <Uart_sendstring>
						break;
 800d6da:	f000 bc35 	b.w	800df48 <frame_processing+0xc04>
					        uint16_t bat0 = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800d6de:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d6e2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	799b      	ldrb	r3, [r3, #6]
 800d6ea:	021b      	lsls	r3, r3, #8
 800d6ec:	b21a      	sxth	r2, r3
 800d6ee:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d6f2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	79db      	ldrb	r3, [r3, #7]
 800d6fa:	b21b      	sxth	r3, r3
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	b21b      	sxth	r3, r3
 800d700:	f8a7 3576 	strh.w	r3, [r7, #1398]	@ 0x576
					        uint16_t bat1 = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800d704:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d708:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	7a1b      	ldrb	r3, [r3, #8]
 800d710:	021b      	lsls	r3, r3, #8
 800d712:	b21a      	sxth	r2, r3
 800d714:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d718:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	7a5b      	ldrb	r3, [r3, #9]
 800d720:	b21b      	sxth	r3, r3
 800d722:	4313      	orrs	r3, r2
 800d724:	b21b      	sxth	r3, r3
 800d726:	f8a7 3574 	strh.w	r3, [r7, #1396]	@ 0x574
					        uint16_t bat2 = (uint16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800d72a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d72e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	7a9b      	ldrb	r3, [r3, #10]
 800d736:	021b      	lsls	r3, r3, #8
 800d738:	b21a      	sxth	r2, r3
 800d73a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d73e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	7adb      	ldrb	r3, [r3, #11]
 800d746:	b21b      	sxth	r3, r3
 800d748:	4313      	orrs	r3, r2
 800d74a:	b21b      	sxth	r3, r3
 800d74c:	f8a7 3572 	strh.w	r3, [r7, #1394]	@ 0x572
					        uint16_t bat3 = (uint16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800d750:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d754:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	7b1b      	ldrb	r3, [r3, #12]
 800d75c:	021b      	lsls	r3, r3, #8
 800d75e:	b21a      	sxth	r2, r3
 800d760:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d764:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	7b5b      	ldrb	r3, [r3, #13]
 800d76c:	b21b      	sxth	r3, r3
 800d76e:	4313      	orrs	r3, r2
 800d770:	b21b      	sxth	r3, r3
 800d772:	f8a7 3570 	strh.w	r3, [r7, #1392]	@ 0x570
					        sprintf(buffer_0x02, "PMU_Res: CMDcode 0x02 [BAT0: %d.%02d V, BAT1: %d.%02d V, BAT2: %d.%02d V, BAT3: %d.%02d V]\n",
 800d776:	f8b7 3576 	ldrh.w	r3, [r7, #1398]	@ 0x576
 800d77a:	4a6e      	ldr	r2, [pc, #440]	@ (800d934 <frame_processing+0x5f0>)
 800d77c:	fba2 2303 	umull	r2, r3, r2, r3
 800d780:	095b      	lsrs	r3, r3, #5
 800d782:	b29b      	uxth	r3, r3
 800d784:	469c      	mov	ip, r3
 800d786:	f8b7 3576 	ldrh.w	r3, [r7, #1398]	@ 0x576
 800d78a:	4a6a      	ldr	r2, [pc, #424]	@ (800d934 <frame_processing+0x5f0>)
 800d78c:	fba2 1203 	umull	r1, r2, r2, r3
 800d790:	0952      	lsrs	r2, r2, #5
 800d792:	2164      	movs	r1, #100	@ 0x64
 800d794:	fb01 f202 	mul.w	r2, r1, r2
 800d798:	1a9b      	subs	r3, r3, r2
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	469e      	mov	lr, r3
 800d79e:	f8b7 3574 	ldrh.w	r3, [r7, #1396]	@ 0x574
 800d7a2:	4a64      	ldr	r2, [pc, #400]	@ (800d934 <frame_processing+0x5f0>)
 800d7a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7a8:	095b      	lsrs	r3, r3, #5
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	461c      	mov	r4, r3
 800d7ae:	f8b7 3574 	ldrh.w	r3, [r7, #1396]	@ 0x574
 800d7b2:	4a60      	ldr	r2, [pc, #384]	@ (800d934 <frame_processing+0x5f0>)
 800d7b4:	fba2 1203 	umull	r1, r2, r2, r3
 800d7b8:	0952      	lsrs	r2, r2, #5
 800d7ba:	2164      	movs	r1, #100	@ 0x64
 800d7bc:	fb01 f202 	mul.w	r2, r1, r2
 800d7c0:	1a9b      	subs	r3, r3, r2
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	461d      	mov	r5, r3
 800d7c6:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	@ 0x572
 800d7ca:	4a5a      	ldr	r2, [pc, #360]	@ (800d934 <frame_processing+0x5f0>)
 800d7cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d0:	095b      	lsrs	r3, r3, #5
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	461e      	mov	r6, r3
 800d7d6:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	@ 0x572
 800d7da:	4a56      	ldr	r2, [pc, #344]	@ (800d934 <frame_processing+0x5f0>)
 800d7dc:	fba2 1203 	umull	r1, r2, r2, r3
 800d7e0:	0952      	lsrs	r2, r2, #5
 800d7e2:	2164      	movs	r1, #100	@ 0x64
 800d7e4:	fb01 f202 	mul.w	r2, r1, r2
 800d7e8:	1a9b      	subs	r3, r3, r2
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d7f0:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	@ 0x570
 800d7f4:	4a4f      	ldr	r2, [pc, #316]	@ (800d934 <frame_processing+0x5f0>)
 800d7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d7fa:	095b      	lsrs	r3, r3, #5
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d802:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	@ 0x570
 800d806:	4a4b      	ldr	r2, [pc, #300]	@ (800d934 <frame_processing+0x5f0>)
 800d808:	fba2 1203 	umull	r1, r2, r2, r3
 800d80c:	0952      	lsrs	r2, r2, #5
 800d80e:	2164      	movs	r1, #100	@ 0x64
 800d810:	fb01 f202 	mul.w	r2, r1, r2
 800d814:	1a9b      	subs	r3, r3, r2
 800d816:	b29b      	uxth	r3, r3
 800d818:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d81c:	9305      	str	r3, [sp, #20]
 800d81e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d822:	9204      	str	r2, [sp, #16]
 800d824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d828:	9303      	str	r3, [sp, #12]
 800d82a:	9602      	str	r6, [sp, #8]
 800d82c:	9501      	str	r5, [sp, #4]
 800d82e:	9400      	str	r4, [sp, #0]
 800d830:	4673      	mov	r3, lr
 800d832:	4662      	mov	r2, ip
 800d834:	4944      	ldr	r1, [pc, #272]	@ (800d948 <frame_processing+0x604>)
 800d836:	f003 fd29 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800d83a:	4b40      	ldr	r3, [pc, #256]	@ (800d93c <frame_processing+0x5f8>)
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	2b00      	cmp	r3, #0
 800d842:	d005      	beq.n	800d850 <frame_processing+0x50c>
		                    	Uart_sendstring(USART2, buffer_0x02);
 800d844:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d848:	4619      	mov	r1, r3
 800d84a:	483d      	ldr	r0, [pc, #244]	@ (800d940 <frame_processing+0x5fc>)
 800d84c:	f7f4 fbd4 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x02);
 800d850:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d854:	4619      	mov	r1, r3
 800d856:	483b      	ldr	r0, [pc, #236]	@ (800d944 <frame_processing+0x600>)
 800d858:	f7f4 fbce 	bl	8001ff8 <Uart_sendstring>
							break;
 800d85c:	e374      	b.n	800df48 <frame_processing+0xc04>
						    uint16_t vin = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800d85e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d862:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	799b      	ldrb	r3, [r3, #6]
 800d86a:	021b      	lsls	r3, r3, #8
 800d86c:	b21a      	sxth	r2, r3
 800d86e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d872:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	79db      	ldrb	r3, [r3, #7]
 800d87a:	b21b      	sxth	r3, r3
 800d87c:	4313      	orrs	r3, r2
 800d87e:	b21b      	sxth	r3, r3
 800d880:	f8a7 357a 	strh.w	r3, [r7, #1402]	@ 0x57a
						    uint16_t iin = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800d884:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d888:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	7a1b      	ldrb	r3, [r3, #8]
 800d890:	021b      	lsls	r3, r3, #8
 800d892:	b21a      	sxth	r2, r3
 800d894:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d898:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	7a5b      	ldrb	r3, [r3, #9]
 800d8a0:	b21b      	sxth	r3, r3
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	b21b      	sxth	r3, r3
 800d8a6:	f8a7 3578 	strh.w	r3, [r7, #1400]	@ 0x578
						    sprintf(buffer_0x03, "PMU_Res: CMDcode 0x03 [VIN: %d.%02d V, IIN: %d.%02d A]\n",
 800d8aa:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	@ 0x57a
 800d8ae:	4a21      	ldr	r2, [pc, #132]	@ (800d934 <frame_processing+0x5f0>)
 800d8b0:	fba2 2303 	umull	r2, r3, r2, r3
 800d8b4:	095b      	lsrs	r3, r3, #5
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	461d      	mov	r5, r3
 800d8ba:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	@ 0x57a
 800d8be:	4a1d      	ldr	r2, [pc, #116]	@ (800d934 <frame_processing+0x5f0>)
 800d8c0:	fba2 1203 	umull	r1, r2, r2, r3
 800d8c4:	0952      	lsrs	r2, r2, #5
 800d8c6:	2164      	movs	r1, #100	@ 0x64
 800d8c8:	fb01 f202 	mul.w	r2, r1, r2
 800d8cc:	1a9b      	subs	r3, r3, r2
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	461e      	mov	r6, r3
 800d8d2:	f8b7 3578 	ldrh.w	r3, [r7, #1400]	@ 0x578
 800d8d6:	4a17      	ldr	r2, [pc, #92]	@ (800d934 <frame_processing+0x5f0>)
 800d8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d8dc:	095b      	lsrs	r3, r3, #5
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	461c      	mov	r4, r3
 800d8e2:	f8b7 3578 	ldrh.w	r3, [r7, #1400]	@ 0x578
 800d8e6:	4a13      	ldr	r2, [pc, #76]	@ (800d934 <frame_processing+0x5f0>)
 800d8e8:	fba2 1203 	umull	r1, r2, r2, r3
 800d8ec:	0952      	lsrs	r2, r2, #5
 800d8ee:	2164      	movs	r1, #100	@ 0x64
 800d8f0:	fb01 f202 	mul.w	r2, r1, r2
 800d8f4:	1a9b      	subs	r3, r3, r2
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	9400      	str	r4, [sp, #0]
 800d900:	4633      	mov	r3, r6
 800d902:	462a      	mov	r2, r5
 800d904:	4911      	ldr	r1, [pc, #68]	@ (800d94c <frame_processing+0x608>)
 800d906:	f003 fcc1 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800d90a:	4b0c      	ldr	r3, [pc, #48]	@ (800d93c <frame_processing+0x5f8>)
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	2b00      	cmp	r3, #0
 800d912:	d005      	beq.n	800d920 <frame_processing+0x5dc>
		                    	Uart_sendstring(USART2, buffer_0x03);
 800d914:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d918:	4619      	mov	r1, r3
 800d91a:	4809      	ldr	r0, [pc, #36]	@ (800d940 <frame_processing+0x5fc>)
 800d91c:	f7f4 fb6c 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x03);
 800d920:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d924:	4619      	mov	r1, r3
 800d926:	4807      	ldr	r0, [pc, #28]	@ (800d944 <frame_processing+0x600>)
 800d928:	f7f4 fb66 	bl	8001ff8 <Uart_sendstring>
						    break;
 800d92c:	e30c      	b.n	800df48 <frame_processing+0xc04>
 800d92e:	bf00      	nop
 800d930:	08016684 	.word	0x08016684
 800d934:	51eb851f 	.word	0x51eb851f
 800d938:	08016688 	.word	0x08016688
 800d93c:	20007994 	.word	0x20007994
 800d940:	40004400 	.word	0x40004400
 800d944:	40004c00 	.word	0x40004c00
 800d948:	080166e8 	.word	0x080166e8
 800d94c:	08016744 	.word	0x08016744
						    uint16_t vout = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800d950:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d954:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	799b      	ldrb	r3, [r3, #6]
 800d95c:	021b      	lsls	r3, r3, #8
 800d95e:	b21a      	sxth	r2, r3
 800d960:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d964:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	79db      	ldrb	r3, [r3, #7]
 800d96c:	b21b      	sxth	r3, r3
 800d96e:	4313      	orrs	r3, r2
 800d970:	b21b      	sxth	r3, r3
 800d972:	f8a7 357e 	strh.w	r3, [r7, #1406]	@ 0x57e
						    uint16_t iout = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800d976:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d97a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	7a1b      	ldrb	r3, [r3, #8]
 800d982:	021b      	lsls	r3, r3, #8
 800d984:	b21a      	sxth	r2, r3
 800d986:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d98a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	7a5b      	ldrb	r3, [r3, #9]
 800d992:	b21b      	sxth	r3, r3
 800d994:	4313      	orrs	r3, r2
 800d996:	b21b      	sxth	r3, r3
 800d998:	f8a7 357c 	strh.w	r3, [r7, #1404]	@ 0x57c
						    sprintf(buffer_0x04_pmu, "PMU_Res: CMDcode 0x04 [VOUT: %d.%02d V, IOUT: %d.%02d A]\n",
 800d99c:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 800d9a0:	4abf      	ldr	r2, [pc, #764]	@ (800dca0 <frame_processing+0x95c>)
 800d9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a6:	095b      	lsrs	r3, r3, #5
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	461d      	mov	r5, r3
 800d9ac:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 800d9b0:	4abb      	ldr	r2, [pc, #748]	@ (800dca0 <frame_processing+0x95c>)
 800d9b2:	fba2 1203 	umull	r1, r2, r2, r3
 800d9b6:	0952      	lsrs	r2, r2, #5
 800d9b8:	2164      	movs	r1, #100	@ 0x64
 800d9ba:	fb01 f202 	mul.w	r2, r1, r2
 800d9be:	1a9b      	subs	r3, r3, r2
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	461e      	mov	r6, r3
 800d9c4:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 800d9c8:	4ab5      	ldr	r2, [pc, #724]	@ (800dca0 <frame_processing+0x95c>)
 800d9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ce:	095b      	lsrs	r3, r3, #5
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	461c      	mov	r4, r3
 800d9d4:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 800d9d8:	4ab1      	ldr	r2, [pc, #708]	@ (800dca0 <frame_processing+0x95c>)
 800d9da:	fba2 1203 	umull	r1, r2, r2, r3
 800d9de:	0952      	lsrs	r2, r2, #5
 800d9e0:	2164      	movs	r1, #100	@ 0x64
 800d9e2:	fb01 f202 	mul.w	r2, r1, r2
 800d9e6:	1a9b      	subs	r3, r3, r2
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d9ee:	9301      	str	r3, [sp, #4]
 800d9f0:	9400      	str	r4, [sp, #0]
 800d9f2:	4633      	mov	r3, r6
 800d9f4:	462a      	mov	r2, r5
 800d9f6:	49ab      	ldr	r1, [pc, #684]	@ (800dca4 <frame_processing+0x960>)
 800d9f8:	f003 fc48 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800d9fc:	4baa      	ldr	r3, [pc, #680]	@ (800dca8 <frame_processing+0x964>)
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	b2db      	uxtb	r3, r3
 800da02:	2b00      	cmp	r3, #0
 800da04:	d005      	beq.n	800da12 <frame_processing+0x6ce>
		                    	Uart_sendstring(USART2, buffer_0x04_pmu);
 800da06:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800da0a:	4619      	mov	r1, r3
 800da0c:	48a7      	ldr	r0, [pc, #668]	@ (800dcac <frame_processing+0x968>)
 800da0e:	f7f4 faf3 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x04_pmu);
 800da12:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800da16:	4619      	mov	r1, r3
 800da18:	48a5      	ldr	r0, [pc, #660]	@ (800dcb0 <frame_processing+0x96c>)
 800da1a:	f7f4 faed 	bl	8001ff8 <Uart_sendstring>
							break;
 800da1e:	e293      	b.n	800df48 <frame_processing+0xc04>
							    	int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800da20:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da24:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	799b      	ldrb	r3, [r3, #6]
 800da2c:	021b      	lsls	r3, r3, #8
 800da2e:	b21a      	sxth	r2, r3
 800da30:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da34:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	79db      	ldrb	r3, [r3, #7]
 800da3c:	b21b      	sxth	r3, r3
 800da3e:	4313      	orrs	r3, r2
 800da40:	f8a7 3596 	strh.w	r3, [r7, #1430]	@ 0x596
							    	int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800da44:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da48:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	7a1b      	ldrb	r3, [r3, #8]
 800da50:	021b      	lsls	r3, r3, #8
 800da52:	b21a      	sxth	r2, r3
 800da54:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da58:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	7a5b      	ldrb	r3, [r3, #9]
 800da60:	b21b      	sxth	r3, r3
 800da62:	4313      	orrs	r3, r2
 800da64:	f8a7 3594 	strh.w	r3, [r7, #1428]	@ 0x594
							    	int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800da68:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da6c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	7a9b      	ldrb	r3, [r3, #10]
 800da74:	021b      	lsls	r3, r3, #8
 800da76:	b21a      	sxth	r2, r3
 800da78:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da7c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	7adb      	ldrb	r3, [r3, #11]
 800da84:	b21b      	sxth	r3, r3
 800da86:	4313      	orrs	r3, r2
 800da88:	f8a7 3592 	strh.w	r3, [r7, #1426]	@ 0x592
							    	int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800da8c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da90:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	7b1b      	ldrb	r3, [r3, #12]
 800da98:	021b      	lsls	r3, r3, #8
 800da9a:	b21a      	sxth	r2, r3
 800da9c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800daa0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	7b5b      	ldrb	r3, [r3, #13]
 800daa8:	b21b      	sxth	r3, r3
 800daaa:	4313      	orrs	r3, r2
 800daac:	f8a7 3590 	strh.w	r3, [r7, #1424]	@ 0x590
							    	uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800dab0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dab4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	7b9b      	ldrb	r3, [r3, #14]
 800dabc:	021b      	lsls	r3, r3, #8
 800dabe:	b21a      	sxth	r2, r3
 800dac0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dac4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	7bdb      	ldrb	r3, [r3, #15]
 800dacc:	b21b      	sxth	r3, r3
 800dace:	4313      	orrs	r3, r2
 800dad0:	b21b      	sxth	r3, r3
 800dad2:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e
							    	uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800dad6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dada:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	7c1b      	ldrb	r3, [r3, #16]
 800dae2:	021b      	lsls	r3, r3, #8
 800dae4:	b21a      	sxth	r2, r3
 800dae6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800daea:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	7c5b      	ldrb	r3, [r3, #17]
 800daf2:	b21b      	sxth	r3, r3
 800daf4:	4313      	orrs	r3, r2
 800daf6:	b21b      	sxth	r3, r3
 800daf8:	f8a7 358c 	strh.w	r3, [r7, #1420]	@ 0x58c
							    	uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800dafc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db00:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	7c9b      	ldrb	r3, [r3, #18]
 800db08:	021b      	lsls	r3, r3, #8
 800db0a:	b21a      	sxth	r2, r3
 800db0c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db10:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	7cdb      	ldrb	r3, [r3, #19]
 800db18:	b21b      	sxth	r3, r3
 800db1a:	4313      	orrs	r3, r2
 800db1c:	b21b      	sxth	r3, r3
 800db1e:	f8a7 358a 	strh.w	r3, [r7, #1418]	@ 0x58a
							    	uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800db22:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db26:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	7d1b      	ldrb	r3, [r3, #20]
 800db2e:	021b      	lsls	r3, r3, #8
 800db30:	b21a      	sxth	r2, r3
 800db32:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db36:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	7d5b      	ldrb	r3, [r3, #21]
 800db3e:	b21b      	sxth	r3, r3
 800db40:	4313      	orrs	r3, r2
 800db42:	b21b      	sxth	r3, r3
 800db44:	f8a7 3588 	strh.w	r3, [r7, #1416]	@ 0x588
							    	uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800db48:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db4c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	7d9b      	ldrb	r3, [r3, #22]
 800db54:	021b      	lsls	r3, r3, #8
 800db56:	b21a      	sxth	r2, r3
 800db58:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db5c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	7ddb      	ldrb	r3, [r3, #23]
 800db64:	b21b      	sxth	r3, r3
 800db66:	4313      	orrs	r3, r2
 800db68:	b21b      	sxth	r3, r3
 800db6a:	f8a7 3586 	strh.w	r3, [r7, #1414]	@ 0x586
							    	uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800db6e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db72:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	7e1b      	ldrb	r3, [r3, #24]
 800db7a:	021b      	lsls	r3, r3, #8
 800db7c:	b21a      	sxth	r2, r3
 800db7e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db82:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	7e5b      	ldrb	r3, [r3, #25]
 800db8a:	b21b      	sxth	r3, r3
 800db8c:	4313      	orrs	r3, r2
 800db8e:	b21b      	sxth	r3, r3
 800db90:	f8a7 3584 	strh.w	r3, [r7, #1412]	@ 0x584
							    	uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800db94:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db98:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	7e9b      	ldrb	r3, [r3, #26]
 800dba0:	021b      	lsls	r3, r3, #8
 800dba2:	b21a      	sxth	r2, r3
 800dba4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dba8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	7edb      	ldrb	r3, [r3, #27]
 800dbb0:	b21b      	sxth	r3, r3
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	b21b      	sxth	r3, r3
 800dbb6:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582
							    	uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800dbba:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbbe:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	7f1b      	ldrb	r3, [r3, #28]
 800dbc6:	021b      	lsls	r3, r3, #8
 800dbc8:	b21a      	sxth	r2, r3
 800dbca:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbce:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	7f5b      	ldrb	r3, [r3, #29]
 800dbd6:	b21b      	sxth	r3, r3
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	b21b      	sxth	r3, r3
 800dbdc:	f8a7 3580 	strh.w	r3, [r7, #1408]	@ 0x580
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800dbe0:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	da03      	bge.n	800dbf0 <frame_processing+0x8ac>
 800dbe8:	4b32      	ldr	r3, [pc, #200]	@ (800dcb4 <frame_processing+0x970>)
 800dbea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dbee:	e002      	b.n	800dbf6 <frame_processing+0x8b2>
 800dbf0:	4b31      	ldr	r3, [pc, #196]	@ (800dcb8 <frame_processing+0x974>)
 800dbf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800dbf6:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	bfb8      	it	lt
 800dbfe:	425b      	neglt	r3, r3
 800dc00:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800dc02:	4a27      	ldr	r2, [pc, #156]	@ (800dca0 <frame_processing+0x95c>)
 800dc04:	fb82 1203 	smull	r1, r2, r2, r3
 800dc08:	1152      	asrs	r2, r2, #5
 800dc0a:	17db      	asrs	r3, r3, #31
 800dc0c:	eba2 0c03 	sub.w	ip, r2, r3
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800dc10:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	bfb8      	it	lt
 800dc18:	425b      	neglt	r3, r3
 800dc1a:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800dc1c:	4a20      	ldr	r2, [pc, #128]	@ (800dca0 <frame_processing+0x95c>)
 800dc1e:	fb82 1203 	smull	r1, r2, r2, r3
 800dc22:	1151      	asrs	r1, r2, #5
 800dc24:	17da      	asrs	r2, r3, #31
 800dc26:	1a8a      	subs	r2, r1, r2
 800dc28:	4611      	mov	r1, r2
 800dc2a:	2264      	movs	r2, #100	@ 0x64
 800dc2c:	fb01 f202 	mul.w	r2, r1, r2
 800dc30:	1a9b      	subs	r3, r3, r2
 800dc32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dc36:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	da03      	bge.n	800dc46 <frame_processing+0x902>
 800dc3e:	4b1d      	ldr	r3, [pc, #116]	@ (800dcb4 <frame_processing+0x970>)
 800dc40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dc44:	e002      	b.n	800dc4c <frame_processing+0x908>
 800dc46:	4b1c      	ldr	r3, [pc, #112]	@ (800dcb8 <frame_processing+0x974>)
 800dc48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800dc4c:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	bfb8      	it	lt
 800dc54:	425b      	neglt	r3, r3
 800dc56:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800dc58:	4a11      	ldr	r2, [pc, #68]	@ (800dca0 <frame_processing+0x95c>)
 800dc5a:	fb82 1203 	smull	r1, r2, r2, r3
 800dc5e:	1152      	asrs	r2, r2, #5
 800dc60:	17db      	asrs	r3, r3, #31
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800dc68:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	bfb8      	it	lt
 800dc70:	425b      	neglt	r3, r3
 800dc72:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800dc74:	4a0a      	ldr	r2, [pc, #40]	@ (800dca0 <frame_processing+0x95c>)
 800dc76:	fb82 1203 	smull	r1, r2, r2, r3
 800dc7a:	1151      	asrs	r1, r2, #5
 800dc7c:	17da      	asrs	r2, r3, #31
 800dc7e:	1a8a      	subs	r2, r1, r2
 800dc80:	4611      	mov	r1, r2
 800dc82:	2264      	movs	r2, #100	@ 0x64
 800dc84:	fb01 f202 	mul.w	r2, r1, r2
 800dc88:	1a9b      	subs	r3, r3, r2
 800dc8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dc8e:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	da12      	bge.n	800dcbc <frame_processing+0x978>
 800dc96:	4b07      	ldr	r3, [pc, #28]	@ (800dcb4 <frame_processing+0x970>)
 800dc98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dc9c:	e011      	b.n	800dcc2 <frame_processing+0x97e>
 800dc9e:	bf00      	nop
 800dca0:	51eb851f 	.word	0x51eb851f
 800dca4:	0801677c 	.word	0x0801677c
 800dca8:	20007994 	.word	0x20007994
 800dcac:	40004400 	.word	0x40004400
 800dcb0:	40004c00 	.word	0x40004c00
 800dcb4:	08016680 	.word	0x08016680
 800dcb8:	08016684 	.word	0x08016684
 800dcbc:	4bb6      	ldr	r3, [pc, #728]	@ (800df98 <frame_processing+0xc54>)
 800dcbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800dcc2:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	bfb8      	it	lt
 800dcca:	425b      	neglt	r3, r3
 800dccc:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800dcce:	4ab3      	ldr	r2, [pc, #716]	@ (800df9c <frame_processing+0xc58>)
 800dcd0:	fb82 1203 	smull	r1, r2, r2, r3
 800dcd4:	1152      	asrs	r2, r2, #5
 800dcd6:	17db      	asrs	r3, r3, #31
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800dcde:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	bfb8      	it	lt
 800dce6:	425b      	neglt	r3, r3
 800dce8:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800dcea:	4aac      	ldr	r2, [pc, #688]	@ (800df9c <frame_processing+0xc58>)
 800dcec:	fb82 1203 	smull	r1, r2, r2, r3
 800dcf0:	1151      	asrs	r1, r2, #5
 800dcf2:	17da      	asrs	r2, r3, #31
 800dcf4:	1a8a      	subs	r2, r1, r2
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	2264      	movs	r2, #100	@ 0x64
 800dcfa:	fb01 f202 	mul.w	r2, r1, r2
 800dcfe:	1a9b      	subs	r3, r3, r2
 800dd00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dd04:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	da03      	bge.n	800dd14 <frame_processing+0x9d0>
 800dd0c:	4ba4      	ldr	r3, [pc, #656]	@ (800dfa0 <frame_processing+0xc5c>)
 800dd0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dd12:	e002      	b.n	800dd1a <frame_processing+0x9d6>
 800dd14:	4ba0      	ldr	r3, [pc, #640]	@ (800df98 <frame_processing+0xc54>)
 800dd16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800dd1a:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	bfb8      	it	lt
 800dd22:	425b      	neglt	r3, r3
 800dd24:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800dd26:	4a9d      	ldr	r2, [pc, #628]	@ (800df9c <frame_processing+0xc58>)
 800dd28:	fb82 1203 	smull	r1, r2, r2, r3
 800dd2c:	1152      	asrs	r2, r2, #5
 800dd2e:	17db      	asrs	r3, r3, #31
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800dd36:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	bfb8      	it	lt
 800dd3e:	425b      	neglt	r3, r3
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	4619      	mov	r1, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800dd44:	4b95      	ldr	r3, [pc, #596]	@ (800df9c <frame_processing+0xc58>)
 800dd46:	fb83 2301 	smull	r2, r3, r3, r1
 800dd4a:	115a      	asrs	r2, r3, #5
 800dd4c:	17cb      	asrs	r3, r1, #31
 800dd4e:	1ad6      	subs	r6, r2, r3
 800dd50:	2364      	movs	r3, #100	@ 0x64
 800dd52:	fb06 f303 	mul.w	r3, r6, r3
 800dd56:	1ace      	subs	r6, r1, r3
 800dd58:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 800dd5c:	4a8f      	ldr	r2, [pc, #572]	@ (800df9c <frame_processing+0xc58>)
 800dd5e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd62:	095b      	lsrs	r3, r3, #5
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dd6a:	f8b7 158e 	ldrh.w	r1, [r7, #1422]	@ 0x58e
 800dd6e:	4b8b      	ldr	r3, [pc, #556]	@ (800df9c <frame_processing+0xc58>)
 800dd70:	fba3 2301 	umull	r2, r3, r3, r1
 800dd74:	095a      	lsrs	r2, r3, #5
 800dd76:	2364      	movs	r3, #100	@ 0x64
 800dd78:	fb02 f303 	mul.w	r3, r2, r3
 800dd7c:	1acb      	subs	r3, r1, r3
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dd84:	f8b7 258c 	ldrh.w	r2, [r7, #1420]	@ 0x58c
 800dd88:	4b84      	ldr	r3, [pc, #528]	@ (800df9c <frame_processing+0xc58>)
 800dd8a:	fba3 2302 	umull	r2, r3, r3, r2
 800dd8e:	095b      	lsrs	r3, r3, #5
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dd96:	f8b7 158c 	ldrh.w	r1, [r7, #1420]	@ 0x58c
 800dd9a:	4b80      	ldr	r3, [pc, #512]	@ (800df9c <frame_processing+0xc58>)
 800dd9c:	fba3 2301 	umull	r2, r3, r3, r1
 800dda0:	095a      	lsrs	r2, r3, #5
 800dda2:	2364      	movs	r3, #100	@ 0x64
 800dda4:	fb02 f303 	mul.w	r3, r2, r3
 800dda8:	1acb      	subs	r3, r1, r3
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ddae:	f8b7 258a 	ldrh.w	r2, [r7, #1418]	@ 0x58a
 800ddb2:	4b7a      	ldr	r3, [pc, #488]	@ (800df9c <frame_processing+0xc58>)
 800ddb4:	fba3 2302 	umull	r2, r3, r3, r2
 800ddb8:	095b      	lsrs	r3, r3, #5
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ddbe:	f8b7 158a 	ldrh.w	r1, [r7, #1418]	@ 0x58a
 800ddc2:	4b76      	ldr	r3, [pc, #472]	@ (800df9c <frame_processing+0xc58>)
 800ddc4:	fba3 2301 	umull	r2, r3, r3, r1
 800ddc8:	095a      	lsrs	r2, r3, #5
 800ddca:	2364      	movs	r3, #100	@ 0x64
 800ddcc:	fb02 f303 	mul.w	r3, r2, r3
 800ddd0:	1acb      	subs	r3, r1, r3
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	677b      	str	r3, [r7, #116]	@ 0x74
 800ddd6:	f8b7 2588 	ldrh.w	r2, [r7, #1416]	@ 0x588
 800ddda:	4b70      	ldr	r3, [pc, #448]	@ (800df9c <frame_processing+0xc58>)
 800dddc:	fba3 2302 	umull	r2, r3, r3, r2
 800dde0:	095b      	lsrs	r3, r3, #5
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	673b      	str	r3, [r7, #112]	@ 0x70
 800dde6:	f8b7 1588 	ldrh.w	r1, [r7, #1416]	@ 0x588
 800ddea:	4b6c      	ldr	r3, [pc, #432]	@ (800df9c <frame_processing+0xc58>)
 800ddec:	fba3 2301 	umull	r2, r3, r3, r1
 800ddf0:	095a      	lsrs	r2, r3, #5
 800ddf2:	2364      	movs	r3, #100	@ 0x64
 800ddf4:	fb02 f303 	mul.w	r3, r2, r3
 800ddf8:	1acb      	subs	r3, r1, r3
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ddfe:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	@ 0x586
 800de02:	4b66      	ldr	r3, [pc, #408]	@ (800df9c <frame_processing+0xc58>)
 800de04:	fba3 2302 	umull	r2, r3, r3, r2
 800de08:	095b      	lsrs	r3, r3, #5
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de0e:	f8b7 1586 	ldrh.w	r1, [r7, #1414]	@ 0x586
 800de12:	4b62      	ldr	r3, [pc, #392]	@ (800df9c <frame_processing+0xc58>)
 800de14:	fba3 2301 	umull	r2, r3, r3, r1
 800de18:	095a      	lsrs	r2, r3, #5
 800de1a:	2364      	movs	r3, #100	@ 0x64
 800de1c:	fb02 f303 	mul.w	r3, r2, r3
 800de20:	1acb      	subs	r3, r1, r3
 800de22:	b29b      	uxth	r3, r3
 800de24:	667b      	str	r3, [r7, #100]	@ 0x64
 800de26:	f8b7 2584 	ldrh.w	r2, [r7, #1412]	@ 0x584
 800de2a:	4b5c      	ldr	r3, [pc, #368]	@ (800df9c <frame_processing+0xc58>)
 800de2c:	fba3 2302 	umull	r2, r3, r3, r2
 800de30:	095b      	lsrs	r3, r3, #5
 800de32:	b29b      	uxth	r3, r3
 800de34:	663b      	str	r3, [r7, #96]	@ 0x60
 800de36:	f8b7 1584 	ldrh.w	r1, [r7, #1412]	@ 0x584
 800de3a:	4b58      	ldr	r3, [pc, #352]	@ (800df9c <frame_processing+0xc58>)
 800de3c:	fba3 2301 	umull	r2, r3, r3, r1
 800de40:	095a      	lsrs	r2, r3, #5
 800de42:	2364      	movs	r3, #100	@ 0x64
 800de44:	fb02 f303 	mul.w	r3, r2, r3
 800de48:	1acb      	subs	r3, r1, r3
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de4e:	f8b7 2582 	ldrh.w	r2, [r7, #1410]	@ 0x582
 800de52:	4b52      	ldr	r3, [pc, #328]	@ (800df9c <frame_processing+0xc58>)
 800de54:	fba3 2302 	umull	r2, r3, r3, r2
 800de58:	095b      	lsrs	r3, r3, #5
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de5e:	f8b7 1582 	ldrh.w	r1, [r7, #1410]	@ 0x582
 800de62:	4b4e      	ldr	r3, [pc, #312]	@ (800df9c <frame_processing+0xc58>)
 800de64:	fba3 2301 	umull	r2, r3, r3, r1
 800de68:	095a      	lsrs	r2, r3, #5
 800de6a:	2364      	movs	r3, #100	@ 0x64
 800de6c:	fb02 f303 	mul.w	r3, r2, r3
 800de70:	1acb      	subs	r3, r1, r3
 800de72:	b29b      	uxth	r3, r3
 800de74:	461d      	mov	r5, r3
 800de76:	f8b7 2580 	ldrh.w	r2, [r7, #1408]	@ 0x580
 800de7a:	4b48      	ldr	r3, [pc, #288]	@ (800df9c <frame_processing+0xc58>)
 800de7c:	fba3 2302 	umull	r2, r3, r3, r2
 800de80:	095b      	lsrs	r3, r3, #5
 800de82:	b29b      	uxth	r3, r3
 800de84:	461c      	mov	r4, r3
 800de86:	f8b7 1580 	ldrh.w	r1, [r7, #1408]	@ 0x580
 800de8a:	4b44      	ldr	r3, [pc, #272]	@ (800df9c <frame_processing+0xc58>)
 800de8c:	fba3 2301 	umull	r2, r3, r3, r1
 800de90:	095a      	lsrs	r2, r3, #5
 800de92:	2364      	movs	r3, #100	@ 0x64
 800de94:	fb02 f303 	mul.w	r3, r2, r3
 800de98:	1acb      	subs	r3, r1, r3
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800dea0:	9319      	str	r3, [sp, #100]	@ 0x64
 800dea2:	9418      	str	r4, [sp, #96]	@ 0x60
 800dea4:	9517      	str	r5, [sp, #92]	@ 0x5c
 800dea6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dea8:	9216      	str	r2, [sp, #88]	@ 0x58
 800deaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800deac:	9215      	str	r2, [sp, #84]	@ 0x54
 800deae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800deb0:	9214      	str	r2, [sp, #80]	@ 0x50
 800deb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800deb4:	9213      	str	r2, [sp, #76]	@ 0x4c
 800deb6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800deb8:	9212      	str	r2, [sp, #72]	@ 0x48
 800deba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800debc:	9211      	str	r2, [sp, #68]	@ 0x44
 800debe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800dec0:	9210      	str	r2, [sp, #64]	@ 0x40
 800dec2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800dec4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dec6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800dec8:	920e      	str	r2, [sp, #56]	@ 0x38
 800deca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800decc:	920d      	str	r2, [sp, #52]	@ 0x34
 800dece:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ded2:	920c      	str	r2, [sp, #48]	@ 0x30
 800ded4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ded8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800deda:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dede:	920a      	str	r2, [sp, #40]	@ 0x28
 800dee0:	9609      	str	r6, [sp, #36]	@ 0x24
 800dee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dee6:	9308      	str	r3, [sp, #32]
 800dee8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800deec:	9307      	str	r3, [sp, #28]
 800deee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800def2:	9306      	str	r3, [sp, #24]
 800def4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800def8:	9305      	str	r3, [sp, #20]
 800defa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800defe:	9304      	str	r3, [sp, #16]
 800df00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800df04:	9303      	str	r3, [sp, #12]
 800df06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800df0a:	9302      	str	r3, [sp, #8]
 800df0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df10:	9301      	str	r3, [sp, #4]
 800df12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	4663      	mov	r3, ip
 800df1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800df1e:	4921      	ldr	r1, [pc, #132]	@ (800dfa4 <frame_processing+0xc60>)
 800df20:	f003 f9b4 	bl	801128c <siprintf>
				                    if (uart_choose_usart2) {
 800df24:	4b20      	ldr	r3, [pc, #128]	@ (800dfa8 <frame_processing+0xc64>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d005      	beq.n	800df3a <frame_processing+0xbf6>
				                    	Uart_sendstring(USART2, buffer_0x08);
 800df2e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800df32:	4619      	mov	r1, r3
 800df34:	481d      	ldr	r0, [pc, #116]	@ (800dfac <frame_processing+0xc68>)
 800df36:	f7f4 f85f 	bl	8001ff8 <Uart_sendstring>
									Uart_sendstring(UART4, buffer_0x08);
 800df3a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800df3e:	4619      	mov	r1, r3
 800df40:	481b      	ldr	r0, [pc, #108]	@ (800dfb0 <frame_processing+0xc6c>)
 800df42:	f7f4 f859 	bl	8001ff8 <Uart_sendstring>
							    break;
 800df46:	bf00      	nop
					break;
 800df48:	e004      	b.n	800df54 <frame_processing+0xc10>
				default:
					clear_send_flag();
 800df4a:	f7f4 f997 	bl	800227c <clear_send_flag>
					return FSP_PKT_INVALID;
 800df4e:	2302      	movs	r3, #2
 800df50:	f001 bbb7 	b.w	800f6c2 <frame_processing+0x237e>
					break;
 800df54:	bf00      	nop
					break;
			}
			clear_send_flag();
 800df56:	f7f4 f991 	bl	800227c <clear_send_flag>
			break;
 800df5a:	f001 bbb1 	b.w	800f6c0 <frame_processing+0x237c>
		case FSP_ADR_PDU:
			switch (fsp_pkt->type)
 800df5e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800df62:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	791b      	ldrb	r3, [r3, #4]
 800df6a:	2b05      	cmp	r3, #5
 800df6c:	d003      	beq.n	800df76 <frame_processing+0xc32>
 800df6e:	2b07      	cmp	r3, #7
 800df70:	d022      	beq.n	800dfb8 <frame_processing+0xc74>
 800df72:	f000 bc36 	b.w	800e7e2 <frame_processing+0x149e>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800df76:	f7f4 f981 	bl	800227c <clear_send_flag>
//					if (uart_choose_uart5) {
//						Uart_sendstring(UART5, "\n> PDU_ACK\r\n> ");
//					}
                    if (uart_choose_usart2) {
 800df7a:	4b0b      	ldr	r3, [pc, #44]	@ (800dfa8 <frame_processing+0xc64>)
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	2b00      	cmp	r3, #0
 800df82:	d003      	beq.n	800df8c <frame_processing+0xc48>
                    	Uart_sendstring(USART2, "\n> PDU_ACK\r\n> ");
 800df84:	490b      	ldr	r1, [pc, #44]	@ (800dfb4 <frame_processing+0xc70>)
 800df86:	4809      	ldr	r0, [pc, #36]	@ (800dfac <frame_processing+0xc68>)
 800df88:	f7f4 f836 	bl	8001ff8 <Uart_sendstring>
                    }
					Uart_sendstring(UART4, "\n> PDU_ACK\r\n> ");
 800df8c:	4909      	ldr	r1, [pc, #36]	@ (800dfb4 <frame_processing+0xc70>)
 800df8e:	4808      	ldr	r0, [pc, #32]	@ (800dfb0 <frame_processing+0xc6c>)
 800df90:	f7f4 f832 	bl	8001ff8 <Uart_sendstring>

					break;
 800df94:	f000 bc2a 	b.w	800e7ec <frame_processing+0x14a8>
 800df98:	08016684 	.word	0x08016684
 800df9c:	51eb851f 	.word	0x51eb851f
 800dfa0:	08016680 	.word	0x08016680
 800dfa4:	080167b8 	.word	0x080167b8
 800dfa8:	20007994 	.word	0x20007994
 800dfac:	40004400 	.word	0x40004400
 800dfb0:	40004c00 	.word	0x40004c00
 800dfb4:	080168a8 	.word	0x080168a8
				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800dfb8:	f7f4 f960 	bl	800227c <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800dfbc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dfc0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	795b      	ldrb	r3, [r3, #5]
 800dfc8:	2b06      	cmp	r3, #6
 800dfca:	dc17      	bgt.n	800dffc <frame_processing+0xcb8>
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f2c0 8400 	blt.w	800e7d2 <frame_processing+0x148e>
 800dfd2:	2b06      	cmp	r3, #6
 800dfd4:	f200 83fd 	bhi.w	800e7d2 <frame_processing+0x148e>
 800dfd8:	a201      	add	r2, pc, #4	@ (adr r2, 800dfe0 <frame_processing+0xc9c>)
 800dfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfde:	bf00      	nop
 800dfe0:	0800e003 	.word	0x0800e003
 800dfe4:	0800e7d3 	.word	0x0800e7d3
 800dfe8:	0800e7d3 	.word	0x0800e7d3
 800dfec:	0800e7d3 	.word	0x0800e7d3
 800dff0:	0800e07f 	.word	0x0800e07f
 800dff4:	0800e131 	.word	0x0800e131
 800dff8:	0800e201 	.word	0x0800e201
 800dffc:	2bff      	cmp	r3, #255	@ 0xff
 800dffe:	d01f      	beq.n	800e040 <frame_processing+0xcfc>
 800e000:	e3e7      	b.n	800e7d2 <frame_processing+0x148e>
					{
						case 0x00:
						{
							char buffer_0x00[50];
							sprintf(buffer_0x00, "PDU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800e002:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e006:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	799b      	ldrb	r3, [r3, #6]
 800e00e:	461a      	mov	r2, r3
 800e010:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e014:	4973      	ldr	r1, [pc, #460]	@ (800e1e4 <frame_processing+0xea0>)
 800e016:	4618      	mov	r0, r3
 800e018:	f003 f938 	bl	801128c <siprintf>
//							if (uart_choose_uart5) {
//								Uart_sendstring(UART5, buffer_0x00);
//							}
		                    if (uart_choose_usart2) {
 800e01c:	4b72      	ldr	r3, [pc, #456]	@ (800e1e8 <frame_processing+0xea4>)
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	b2db      	uxtb	r3, r3
 800e022:	2b00      	cmp	r3, #0
 800e024:	d005      	beq.n	800e032 <frame_processing+0xcee>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800e026:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e02a:	4619      	mov	r1, r3
 800e02c:	486f      	ldr	r0, [pc, #444]	@ (800e1ec <frame_processing+0xea8>)
 800e02e:	f7f3 ffe3 	bl	8001ff8 <Uart_sendstring>
		                    }
							Uart_sendstring(UART4, buffer_0x00);
 800e032:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e036:	4619      	mov	r1, r3
 800e038:	486d      	ldr	r0, [pc, #436]	@ (800e1f0 <frame_processing+0xeac>)
 800e03a:	f7f3 ffdd 	bl	8001ff8 <Uart_sendstring>

						}
							break;
 800e03e:	e3cd      	b.n	800e7dc <frame_processing+0x1498>
						case 0xFF:
						{
							char buffer_0xFF[50];
							sprintf(buffer_0xFF, "PDU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800e040:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e044:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	799b      	ldrb	r3, [r3, #6]
 800e04c:	461a      	mov	r2, r3
 800e04e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e052:	4968      	ldr	r1, [pc, #416]	@ (800e1f4 <frame_processing+0xeb0>)
 800e054:	4618      	mov	r0, r3
 800e056:	f003 f919 	bl	801128c <siprintf>
//							if (uart_choose_uart5) {
//								Uart_sendstring(UART5, buffer_0xFF);
//							}
		                    if (uart_choose_usart2) {
 800e05a:	4b63      	ldr	r3, [pc, #396]	@ (800e1e8 <frame_processing+0xea4>)
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	2b00      	cmp	r3, #0
 800e062:	d005      	beq.n	800e070 <frame_processing+0xd2c>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800e064:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e068:	4619      	mov	r1, r3
 800e06a:	4860      	ldr	r0, [pc, #384]	@ (800e1ec <frame_processing+0xea8>)
 800e06c:	f7f3 ffc4 	bl	8001ff8 <Uart_sendstring>
		                    }
							Uart_sendstring(UART4, buffer_0xFF);
 800e070:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e074:	4619      	mov	r1, r3
 800e076:	485e      	ldr	r0, [pc, #376]	@ (800e1f0 <frame_processing+0xeac>)
 800e078:	f7f3 ffbe 	bl	8001ff8 <Uart_sendstring>

						}
							break;
 800e07c:	e3ae      	b.n	800e7dc <frame_processing+0x1498>

						case 0x04:
						{
							        uint8_t channel = fsp_pkt->payload[1];
 800e07e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e082:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	799b      	ldrb	r3, [r3, #6]
 800e08a:	f887 359d 	strb.w	r3, [r7, #1437]	@ 0x59d
							        uint8_t status_0x04 = fsp_pkt->payload[2];
 800e08e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e092:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	79db      	ldrb	r3, [r3, #7]
 800e09a:	f887 359c 	strb.w	r3, [r7, #1436]	@ 0x59c
							        uint16_t voltage_0x04 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800e09e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0a2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	7a1b      	ldrb	r3, [r3, #8]
 800e0aa:	021b      	lsls	r3, r3, #8
 800e0ac:	b21a      	sxth	r2, r3
 800e0ae:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0b2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	7a5b      	ldrb	r3, [r3, #9]
 800e0ba:	b21b      	sxth	r3, r3
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	b21b      	sxth	r3, r3
 800e0c0:	f8a7 359a 	strh.w	r3, [r7, #1434]	@ 0x59a
							        uint16_t current_0x04 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800e0c4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0c8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	7a9b      	ldrb	r3, [r3, #10]
 800e0d0:	021b      	lsls	r3, r3, #8
 800e0d2:	b21a      	sxth	r2, r3
 800e0d4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0d8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	7adb      	ldrb	r3, [r3, #11]
 800e0e0:	b21b      	sxth	r3, r3
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	b21b      	sxth	r3, r3
 800e0e6:	f8a7 3598 	strh.w	r3, [r7, #1432]	@ 0x598

							        char buffer_0x07[100];
							        sprintf(buffer_0x07, "PDU_Res: CMDcode 0x04 [{Channel %u} Status %u, Voltage: %u, Current: %u]\n", channel, status_0x04, voltage_0x04, current_0x04);
 800e0ea:	f897 159d 	ldrb.w	r1, [r7, #1437]	@ 0x59d
 800e0ee:	f897 459c 	ldrb.w	r4, [r7, #1436]	@ 0x59c
 800e0f2:	f8b7 359a 	ldrh.w	r3, [r7, #1434]	@ 0x59a
 800e0f6:	f8b7 2598 	ldrh.w	r2, [r7, #1432]	@ 0x598
 800e0fa:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800e0fe:	9201      	str	r2, [sp, #4]
 800e100:	9300      	str	r3, [sp, #0]
 800e102:	4623      	mov	r3, r4
 800e104:	460a      	mov	r2, r1
 800e106:	493c      	ldr	r1, [pc, #240]	@ (800e1f8 <frame_processing+0xeb4>)
 800e108:	f003 f8c0 	bl	801128c <siprintf>
//									if (uart_choose_uart5) {
//										Uart_sendstring(UART5, buffer_0x07);
//									}
				                    if (uart_choose_usart2) {
 800e10c:	4b36      	ldr	r3, [pc, #216]	@ (800e1e8 <frame_processing+0xea4>)
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	b2db      	uxtb	r3, r3
 800e112:	2b00      	cmp	r3, #0
 800e114:	d005      	beq.n	800e122 <frame_processing+0xdde>
				                    	Uart_sendstring(USART2, buffer_0x07);
 800e116:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e11a:	4619      	mov	r1, r3
 800e11c:	4833      	ldr	r0, [pc, #204]	@ (800e1ec <frame_processing+0xea8>)
 800e11e:	f7f3 ff6b 	bl	8001ff8 <Uart_sendstring>
				                    }
									Uart_sendstring(UART4, buffer_0x07);
 800e122:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e126:	4619      	mov	r1, r3
 800e128:	4831      	ldr	r0, [pc, #196]	@ (800e1f0 <frame_processing+0xeac>)
 800e12a:	f7f3 ff65 	bl	8001ff8 <Uart_sendstring>

						}
									break;
 800e12e:	e355      	b.n	800e7dc <frame_processing+0x1498>
						case 0x05:
						{
						            uint8_t buck = fsp_pkt->payload[1];
 800e130:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e134:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	799b      	ldrb	r3, [r3, #6]
 800e13c:	f887 35a3 	strb.w	r3, [r7, #1443]	@ 0x5a3
						            uint8_t status_0x05 = fsp_pkt->payload[2];
 800e140:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e144:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	79db      	ldrb	r3, [r3, #7]
 800e14c:	f887 35a2 	strb.w	r3, [r7, #1442]	@ 0x5a2
						            uint16_t voltage_0x05 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800e150:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e154:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	7a1b      	ldrb	r3, [r3, #8]
 800e15c:	021b      	lsls	r3, r3, #8
 800e15e:	b21a      	sxth	r2, r3
 800e160:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e164:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	7a5b      	ldrb	r3, [r3, #9]
 800e16c:	b21b      	sxth	r3, r3
 800e16e:	4313      	orrs	r3, r2
 800e170:	b21b      	sxth	r3, r3
 800e172:	f8a7 35a0 	strh.w	r3, [r7, #1440]	@ 0x5a0
						            uint16_t current_0x05 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800e176:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e17a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	7a9b      	ldrb	r3, [r3, #10]
 800e182:	021b      	lsls	r3, r3, #8
 800e184:	b21a      	sxth	r2, r3
 800e186:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e18a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	7adb      	ldrb	r3, [r3, #11]
 800e192:	b21b      	sxth	r3, r3
 800e194:	4313      	orrs	r3, r2
 800e196:	b21b      	sxth	r3, r3
 800e198:	f8a7 359e 	strh.w	r3, [r7, #1438]	@ 0x59e

						            char buffer_0x05[100];
						            sprintf(buffer_0x05, "PDU_Res: CMDcode 0x05 [{Buck %u} Status %u, Voltage: %u, Current: %u]\n", buck, status_0x05, voltage_0x05, current_0x05);
 800e19c:	f897 15a3 	ldrb.w	r1, [r7, #1443]	@ 0x5a3
 800e1a0:	f897 45a2 	ldrb.w	r4, [r7, #1442]	@ 0x5a2
 800e1a4:	f8b7 35a0 	ldrh.w	r3, [r7, #1440]	@ 0x5a0
 800e1a8:	f8b7 259e 	ldrh.w	r2, [r7, #1438]	@ 0x59e
 800e1ac:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800e1b0:	9201      	str	r2, [sp, #4]
 800e1b2:	9300      	str	r3, [sp, #0]
 800e1b4:	4623      	mov	r3, r4
 800e1b6:	460a      	mov	r2, r1
 800e1b8:	4910      	ldr	r1, [pc, #64]	@ (800e1fc <frame_processing+0xeb8>)
 800e1ba:	f003 f867 	bl	801128c <siprintf>
//									if (uart_choose_uart5) {
//										Uart_sendstring(UART5, buffer_0x05);
//									}
				                    if (uart_choose_usart2) {
 800e1be:	4b0a      	ldr	r3, [pc, #40]	@ (800e1e8 <frame_processing+0xea4>)
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d005      	beq.n	800e1d4 <frame_processing+0xe90>
				                    	Uart_sendstring(USART2, buffer_0x05);
 800e1c8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	4807      	ldr	r0, [pc, #28]	@ (800e1ec <frame_processing+0xea8>)
 800e1d0:	f7f3 ff12 	bl	8001ff8 <Uart_sendstring>
				                    }
									Uart_sendstring(UART4, buffer_0x05);
 800e1d4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e1d8:	4619      	mov	r1, r3
 800e1da:	4805      	ldr	r0, [pc, #20]	@ (800e1f0 <frame_processing+0xeac>)
 800e1dc:	f7f3 ff0c 	bl	8001ff8 <Uart_sendstring>

						}
									break;
 800e1e0:	e2fc      	b.n	800e7dc <frame_processing+0x1498>
 800e1e2:	bf00      	nop
 800e1e4:	080168b8 	.word	0x080168b8
 800e1e8:	20007994 	.word	0x20007994
 800e1ec:	40004400 	.word	0x40004400
 800e1f0:	40004c00 	.word	0x40004c00
 800e1f4:	080168d4 	.word	0x080168d4
 800e1f8:	080168f0 	.word	0x080168f0
 800e1fc:	0801693c 	.word	0x0801693c
						case 0x06:
						{
							uint8_t tec1buck_status = fsp_pkt->payload[1];
 800e200:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e204:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	799b      	ldrb	r3, [r3, #6]
 800e20c:	f887 35eb 	strb.w	r3, [r7, #1515]	@ 0x5eb
							uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 800e210:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e214:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	79db      	ldrb	r3, [r3, #7]
 800e21c:	021b      	lsls	r3, r3, #8
 800e21e:	b21a      	sxth	r2, r3
 800e220:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e224:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	7a1b      	ldrb	r3, [r3, #8]
 800e22c:	b21b      	sxth	r3, r3
 800e22e:	4313      	orrs	r3, r2
 800e230:	b21b      	sxth	r3, r3
 800e232:	f8a7 35e8 	strh.w	r3, [r7, #1512]	@ 0x5e8

							uint8_t tec2buck_status = fsp_pkt->payload[4];
 800e236:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e23a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	7a5b      	ldrb	r3, [r3, #9]
 800e242:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
							uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800e246:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e24a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	7a9b      	ldrb	r3, [r3, #10]
 800e252:	021b      	lsls	r3, r3, #8
 800e254:	b21a      	sxth	r2, r3
 800e256:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e25a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	7adb      	ldrb	r3, [r3, #11]
 800e262:	b21b      	sxth	r3, r3
 800e264:	4313      	orrs	r3, r2
 800e266:	b21b      	sxth	r3, r3
 800e268:	f8a7 35e4 	strh.w	r3, [r7, #1508]	@ 0x5e4

							uint8_t tec3buck_status = fsp_pkt->payload[7];
 800e26c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e270:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	7b1b      	ldrb	r3, [r3, #12]
 800e278:	f887 35e3 	strb.w	r3, [r7, #1507]	@ 0x5e3
							uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 800e27c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e280:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	7b5b      	ldrb	r3, [r3, #13]
 800e288:	021b      	lsls	r3, r3, #8
 800e28a:	b21a      	sxth	r2, r3
 800e28c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e290:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	7b9b      	ldrb	r3, [r3, #14]
 800e298:	b21b      	sxth	r3, r3
 800e29a:	4313      	orrs	r3, r2
 800e29c:	b21b      	sxth	r3, r3
 800e29e:	f8a7 35e0 	strh.w	r3, [r7, #1504]	@ 0x5e0

							uint8_t tec4buck_status = fsp_pkt->payload[10];
 800e2a2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2a6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	7bdb      	ldrb	r3, [r3, #15]
 800e2ae:	f887 35df 	strb.w	r3, [r7, #1503]	@ 0x5df
							uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 800e2b2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2b6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	7c1b      	ldrb	r3, [r3, #16]
 800e2be:	021b      	lsls	r3, r3, #8
 800e2c0:	b21a      	sxth	r2, r3
 800e2c2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2c6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	7c5b      	ldrb	r3, [r3, #17]
 800e2ce:	b21b      	sxth	r3, r3
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	b21b      	sxth	r3, r3
 800e2d4:	f8a7 35dc 	strh.w	r3, [r7, #1500]	@ 0x5dc

							uint8_t mcubuck_status = fsp_pkt->payload[13];
 800e2d8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2dc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	7c9b      	ldrb	r3, [r3, #18]
 800e2e4:	f887 35db 	strb.w	r3, [r7, #1499]	@ 0x5db
							uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 800e2e8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2ec:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	7cdb      	ldrb	r3, [r3, #19]
 800e2f4:	021b      	lsls	r3, r3, #8
 800e2f6:	b21a      	sxth	r2, r3
 800e2f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	7d1b      	ldrb	r3, [r3, #20]
 800e304:	b21b      	sxth	r3, r3
 800e306:	4313      	orrs	r3, r2
 800e308:	b21b      	sxth	r3, r3
 800e30a:	f8a7 35d8 	strh.w	r3, [r7, #1496]	@ 0x5d8

							uint8_t ledbuck_status = fsp_pkt->payload[16];
 800e30e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e312:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	7d5b      	ldrb	r3, [r3, #21]
 800e31a:	f887 35d7 	strb.w	r3, [r7, #1495]	@ 0x5d7
							uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 800e31e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e322:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	7d9b      	ldrb	r3, [r3, #22]
 800e32a:	021b      	lsls	r3, r3, #8
 800e32c:	b21a      	sxth	r2, r3
 800e32e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e332:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	7ddb      	ldrb	r3, [r3, #23]
 800e33a:	b21b      	sxth	r3, r3
 800e33c:	4313      	orrs	r3, r2
 800e33e:	b21b      	sxth	r3, r3
 800e340:	f8a7 35d4 	strh.w	r3, [r7, #1492]	@ 0x5d4

							uint8_t cm4buck_status = fsp_pkt->payload[19];
 800e344:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e348:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	7e1b      	ldrb	r3, [r3, #24]
 800e350:	f887 35d3 	strb.w	r3, [r7, #1491]	@ 0x5d3
							uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 800e354:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e358:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	7e5b      	ldrb	r3, [r3, #25]
 800e360:	021b      	lsls	r3, r3, #8
 800e362:	b21a      	sxth	r2, r3
 800e364:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e368:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	7e9b      	ldrb	r3, [r3, #26]
 800e370:	b21b      	sxth	r3, r3
 800e372:	4313      	orrs	r3, r2
 800e374:	b21b      	sxth	r3, r3
 800e376:	f8a7 35d0 	strh.w	r3, [r7, #1488]	@ 0x5d0

							uint8_t tec1_status = fsp_pkt->payload[22];
 800e37a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e37e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	7edb      	ldrb	r3, [r3, #27]
 800e386:	f887 35cf 	strb.w	r3, [r7, #1487]	@ 0x5cf
							uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 800e38a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e38e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	7f1b      	ldrb	r3, [r3, #28]
 800e396:	021b      	lsls	r3, r3, #8
 800e398:	b21a      	sxth	r2, r3
 800e39a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e39e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	7f5b      	ldrb	r3, [r3, #29]
 800e3a6:	b21b      	sxth	r3, r3
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	b21b      	sxth	r3, r3
 800e3ac:	f8a7 35cc 	strh.w	r3, [r7, #1484]	@ 0x5cc

							uint8_t tec2_status = fsp_pkt->payload[25];
 800e3b0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3b4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	7f9b      	ldrb	r3, [r3, #30]
 800e3bc:	f887 35cb 	strb.w	r3, [r7, #1483]	@ 0x5cb
							uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 800e3c0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3c4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	7fdb      	ldrb	r3, [r3, #31]
 800e3cc:	021b      	lsls	r3, r3, #8
 800e3ce:	b21a      	sxth	r2, r3
 800e3d0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3d4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e3de:	b21b      	sxth	r3, r3
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	b21b      	sxth	r3, r3
 800e3e4:	f8a7 35c8 	strh.w	r3, [r7, #1480]	@ 0x5c8

							uint8_t tec3_status = fsp_pkt->payload[28];
 800e3e8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3ec:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800e3f6:	f887 35c7 	strb.w	r3, [r7, #1479]	@ 0x5c7
							uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 800e3fa:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3fe:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800e408:	021b      	lsls	r3, r3, #8
 800e40a:	b21a      	sxth	r2, r3
 800e40c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e410:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800e41a:	b21b      	sxth	r3, r3
 800e41c:	4313      	orrs	r3, r2
 800e41e:	b21b      	sxth	r3, r3
 800e420:	f8a7 35c4 	strh.w	r3, [r7, #1476]	@ 0x5c4

							uint8_t tec4_status = fsp_pkt->payload[31];
 800e424:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e428:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e432:	f887 35c3 	strb.w	r3, [r7, #1475]	@ 0x5c3
							uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 800e436:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e43a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e444:	021b      	lsls	r3, r3, #8
 800e446:	b21a      	sxth	r2, r3
 800e448:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e44c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e456:	b21b      	sxth	r3, r3
 800e458:	4313      	orrs	r3, r2
 800e45a:	b21b      	sxth	r3, r3
 800e45c:	f8a7 35c0 	strh.w	r3, [r7, #1472]	@ 0x5c0

							uint8_t copc_status = fsp_pkt->payload[34];
 800e460:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e464:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e46e:	f887 35bf 	strb.w	r3, [r7, #1471]	@ 0x5bf
							uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 800e472:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e476:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e480:	021b      	lsls	r3, r3, #8
 800e482:	b21a      	sxth	r2, r3
 800e484:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e488:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800e492:	b21b      	sxth	r3, r3
 800e494:	4313      	orrs	r3, r2
 800e496:	b21b      	sxth	r3, r3
 800e498:	f8a7 35bc 	strh.w	r3, [r7, #1468]	@ 0x5bc

							uint8_t iou_status = fsp_pkt->payload[37];
 800e49c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4a0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800e4aa:	f887 35bb 	strb.w	r3, [r7, #1467]	@ 0x5bb
							uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800e4ae:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4b2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800e4bc:	021b      	lsls	r3, r3, #8
 800e4be:	b21a      	sxth	r2, r3
 800e4c0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4c4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e4ce:	b21b      	sxth	r3, r3
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	b21b      	sxth	r3, r3
 800e4d4:	f8a7 35b8 	strh.w	r3, [r7, #1464]	@ 0x5b8

							uint8_t rgb_status = fsp_pkt->payload[40];
 800e4d8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4dc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e4e6:	f887 35b7 	strb.w	r3, [r7, #1463]	@ 0x5b7
							uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 800e4ea:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4ee:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800e4f8:	021b      	lsls	r3, r3, #8
 800e4fa:	b21a      	sxth	r2, r3
 800e4fc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e500:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e50a:	b21b      	sxth	r3, r3
 800e50c:	4313      	orrs	r3, r2
 800e50e:	b21b      	sxth	r3, r3
 800e510:	f8a7 35b4 	strh.w	r3, [r7, #1460]	@ 0x5b4

							uint8_t ir_status = fsp_pkt->payload[43];
 800e514:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e518:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e522:	f887 35b3 	strb.w	r3, [r7, #1459]	@ 0x5b3
							uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 800e526:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e52a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e534:	021b      	lsls	r3, r3, #8
 800e536:	b21a      	sxth	r2, r3
 800e538:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e53c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e546:	b21b      	sxth	r3, r3
 800e548:	4313      	orrs	r3, r2
 800e54a:	b21b      	sxth	r3, r3
 800e54c:	f8a7 35b0 	strh.w	r3, [r7, #1456]	@ 0x5b0

							uint8_t cm4_status = fsp_pkt->payload[46];
 800e550:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e554:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e55e:	f887 35af 	strb.w	r3, [r7, #1455]	@ 0x5af
							uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 800e562:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e566:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e570:	021b      	lsls	r3, r3, #8
 800e572:	b21a      	sxth	r2, r3
 800e574:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e578:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e582:	b21b      	sxth	r3, r3
 800e584:	4313      	orrs	r3, r2
 800e586:	b21b      	sxth	r3, r3
 800e588:	f8a7 35ac 	strh.w	r3, [r7, #1452]	@ 0x5ac

							uint8_t vin_status = fsp_pkt->payload[49];
 800e58c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e590:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e59a:	f887 35ab 	strb.w	r3, [r7, #1451]	@ 0x5ab
							uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 800e59e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5a2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800e5ac:	021b      	lsls	r3, r3, #8
 800e5ae:	b21a      	sxth	r2, r3
 800e5b0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5b4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e5be:	b21b      	sxth	r3, r3
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	b21b      	sxth	r3, r3
 800e5c4:	f8a7 35a8 	strh.w	r3, [r7, #1448]	@ 0x5a8

							uint8_t vbus_status = fsp_pkt->payload[52];
 800e5c8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5cc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e5d6:	f887 35a7 	strb.w	r3, [r7, #1447]	@ 0x5a7
							uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 800e5da:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5de:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e5e8:	021b      	lsls	r3, r3, #8
 800e5ea:	b21a      	sxth	r2, r3
 800e5ec:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5f0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e5fa:	b21b      	sxth	r3, r3
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	b21b      	sxth	r3, r3
 800e600:	f8a7 35a4 	strh.w	r3, [r7, #1444]	@ 0x5a4


						            char buffer_0x06[1000];
						            sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 800e604:	f897 e5eb 	ldrb.w	lr, [r7, #1515]	@ 0x5eb
 800e608:	f8b7 85e8 	ldrh.w	r8, [r7, #1512]	@ 0x5e8
 800e60c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800e610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e614:	f8b7 25e4 	ldrh.w	r2, [r7, #1508]	@ 0x5e4
 800e618:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e61c:	f897 15e3 	ldrb.w	r1, [r7, #1507]	@ 0x5e3
 800e620:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800e624:	f8b7 05e0 	ldrh.w	r0, [r7, #1504]	@ 0x5e0
 800e628:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800e62c:	f897 45df 	ldrb.w	r4, [r7, #1503]	@ 0x5df
 800e630:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 800e634:	f8b7 55dc 	ldrh.w	r5, [r7, #1500]	@ 0x5dc
 800e638:	f8c7 509c 	str.w	r5, [r7, #156]	@ 0x9c
 800e63c:	f897 65db 	ldrb.w	r6, [r7, #1499]	@ 0x5db
 800e640:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 800e644:	f8b7 c5d8 	ldrh.w	ip, [r7, #1496]	@ 0x5d8
 800e648:	4663      	mov	r3, ip
 800e64a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e64e:	f897 c5d7 	ldrb.w	ip, [r7, #1495]	@ 0x5d7
 800e652:	4662      	mov	r2, ip
 800e654:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800e658:	f8b7 c5d4 	ldrh.w	ip, [r7, #1492]	@ 0x5d4
 800e65c:	4661      	mov	r1, ip
 800e65e:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 800e662:	f897 c5d3 	ldrb.w	ip, [r7, #1491]	@ 0x5d3
 800e666:	4660      	mov	r0, ip
 800e668:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 800e66c:	f8b7 c5d0 	ldrh.w	ip, [r7, #1488]	@ 0x5d0
 800e670:	4664      	mov	r4, ip
 800e672:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
 800e676:	f897 c5cf 	ldrb.w	ip, [r7, #1487]	@ 0x5cf
 800e67a:	4665      	mov	r5, ip
 800e67c:	f8c7 5080 	str.w	r5, [r7, #128]	@ 0x80
 800e680:	f8b7 c5cc 	ldrh.w	ip, [r7, #1484]	@ 0x5cc
 800e684:	4666      	mov	r6, ip
 800e686:	67fe      	str	r6, [r7, #124]	@ 0x7c
 800e688:	f897 c5cb 	ldrb.w	ip, [r7, #1483]	@ 0x5cb
 800e68c:	4663      	mov	r3, ip
 800e68e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e690:	f8b7 c5c8 	ldrh.w	ip, [r7, #1480]	@ 0x5c8
 800e694:	4662      	mov	r2, ip
 800e696:	677a      	str	r2, [r7, #116]	@ 0x74
 800e698:	f897 c5c7 	ldrb.w	ip, [r7, #1479]	@ 0x5c7
 800e69c:	4661      	mov	r1, ip
 800e69e:	6739      	str	r1, [r7, #112]	@ 0x70
 800e6a0:	f8b7 c5c4 	ldrh.w	ip, [r7, #1476]	@ 0x5c4
 800e6a4:	4660      	mov	r0, ip
 800e6a6:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800e6a8:	f897 c5c3 	ldrb.w	ip, [r7, #1475]	@ 0x5c3
 800e6ac:	4664      	mov	r4, ip
 800e6ae:	66bc      	str	r4, [r7, #104]	@ 0x68
 800e6b0:	f8b7 c5c0 	ldrh.w	ip, [r7, #1472]	@ 0x5c0
 800e6b4:	4665      	mov	r5, ip
 800e6b6:	667d      	str	r5, [r7, #100]	@ 0x64
 800e6b8:	f897 c5bf 	ldrb.w	ip, [r7, #1471]	@ 0x5bf
 800e6bc:	4666      	mov	r6, ip
 800e6be:	663e      	str	r6, [r7, #96]	@ 0x60
 800e6c0:	f8b7 c5bc 	ldrh.w	ip, [r7, #1468]	@ 0x5bc
 800e6c4:	4663      	mov	r3, ip
 800e6c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e6c8:	f897 c5bb 	ldrb.w	ip, [r7, #1467]	@ 0x5bb
 800e6cc:	4662      	mov	r2, ip
 800e6ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e6d0:	f8b7 c5b8 	ldrh.w	ip, [r7, #1464]	@ 0x5b8
 800e6d4:	4661      	mov	r1, ip
 800e6d6:	6579      	str	r1, [r7, #84]	@ 0x54
 800e6d8:	f897 c5b7 	ldrb.w	ip, [r7, #1463]	@ 0x5b7
 800e6dc:	4660      	mov	r0, ip
 800e6de:	6538      	str	r0, [r7, #80]	@ 0x50
 800e6e0:	f8b7 c5b4 	ldrh.w	ip, [r7, #1460]	@ 0x5b4
 800e6e4:	4664      	mov	r4, ip
 800e6e6:	64fc      	str	r4, [r7, #76]	@ 0x4c
 800e6e8:	f897 c5b3 	ldrb.w	ip, [r7, #1459]	@ 0x5b3
 800e6ec:	4665      	mov	r5, ip
 800e6ee:	64bd      	str	r5, [r7, #72]	@ 0x48
 800e6f0:	f8b7 65b0 	ldrh.w	r6, [r7, #1456]	@ 0x5b0
 800e6f4:	f897 55af 	ldrb.w	r5, [r7, #1455]	@ 0x5af
 800e6f8:	f8b7 45ac 	ldrh.w	r4, [r7, #1452]	@ 0x5ac
 800e6fc:	f897 05ab 	ldrb.w	r0, [r7, #1451]	@ 0x5ab
 800e700:	f8b7 15a8 	ldrh.w	r1, [r7, #1448]	@ 0x5a8
 800e704:	f897 25a7 	ldrb.w	r2, [r7, #1447]	@ 0x5a7
 800e708:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	@ 0x5a4
 800e70c:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 800e710:	9321      	str	r3, [sp, #132]	@ 0x84
 800e712:	9220      	str	r2, [sp, #128]	@ 0x80
 800e714:	911f      	str	r1, [sp, #124]	@ 0x7c
 800e716:	901e      	str	r0, [sp, #120]	@ 0x78
 800e718:	941d      	str	r4, [sp, #116]	@ 0x74
 800e71a:	951c      	str	r5, [sp, #112]	@ 0x70
 800e71c:	961b      	str	r6, [sp, #108]	@ 0x6c
 800e71e:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 800e720:	951a      	str	r5, [sp, #104]	@ 0x68
 800e722:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800e724:	9419      	str	r4, [sp, #100]	@ 0x64
 800e726:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e728:	9018      	str	r0, [sp, #96]	@ 0x60
 800e72a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e72c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e72e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e730:	9216      	str	r2, [sp, #88]	@ 0x58
 800e732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e734:	9315      	str	r3, [sp, #84]	@ 0x54
 800e736:	6e3e      	ldr	r6, [r7, #96]	@ 0x60
 800e738:	9614      	str	r6, [sp, #80]	@ 0x50
 800e73a:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 800e73c:	9513      	str	r5, [sp, #76]	@ 0x4c
 800e73e:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 800e740:	9412      	str	r4, [sp, #72]	@ 0x48
 800e742:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e744:	9011      	str	r0, [sp, #68]	@ 0x44
 800e746:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800e748:	9110      	str	r1, [sp, #64]	@ 0x40
 800e74a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e74c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e74e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e750:	930e      	str	r3, [sp, #56]	@ 0x38
 800e752:	6ffe      	ldr	r6, [r7, #124]	@ 0x7c
 800e754:	960d      	str	r6, [sp, #52]	@ 0x34
 800e756:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 800e75a:	950c      	str	r5, [sp, #48]	@ 0x30
 800e75c:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800e760:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e762:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800e766:	900a      	str	r0, [sp, #40]	@ 0x28
 800e768:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800e76c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e76e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e772:	9208      	str	r2, [sp, #32]
 800e774:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e778:	9307      	str	r3, [sp, #28]
 800e77a:	f8d7 6098 	ldr.w	r6, [r7, #152]	@ 0x98
 800e77e:	9606      	str	r6, [sp, #24]
 800e780:	f8d7 509c 	ldr.w	r5, [r7, #156]	@ 0x9c
 800e784:	9505      	str	r5, [sp, #20]
 800e786:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800e78a:	9404      	str	r4, [sp, #16]
 800e78c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800e790:	9003      	str	r0, [sp, #12]
 800e792:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e796:	9102      	str	r1, [sp, #8]
 800e798:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e79c:	9201      	str	r2, [sp, #4]
 800e79e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e7a2:	9300      	str	r3, [sp, #0]
 800e7a4:	4643      	mov	r3, r8
 800e7a6:	4672      	mov	r2, lr
 800e7a8:	49ba      	ldr	r1, [pc, #744]	@ (800ea94 <frame_processing+0x1750>)
 800e7aa:	4660      	mov	r0, ip
 800e7ac:	f002 fd6e 	bl	801128c <siprintf>
						                vin_status, vin_voltage,
						                vbus_status, vbus_voltage);
//									if (uart_choose_uart5) {
//										Uart_sendstring(UART5, buffer_0x06);
//									}
				                    if (uart_choose_usart2) {
 800e7b0:	4bb9      	ldr	r3, [pc, #740]	@ (800ea98 <frame_processing+0x1754>)
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d005      	beq.n	800e7c6 <frame_processing+0x1482>
				                    	Uart_sendstring(USART2, buffer_0x06);
 800e7ba:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e7be:	4619      	mov	r1, r3
 800e7c0:	48b6      	ldr	r0, [pc, #728]	@ (800ea9c <frame_processing+0x1758>)
 800e7c2:	f7f3 fc19 	bl	8001ff8 <Uart_sendstring>
				                    }
									Uart_sendstring(UART4, buffer_0x06);
 800e7c6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	48b4      	ldr	r0, [pc, #720]	@ (800eaa0 <frame_processing+0x175c>)
 800e7ce:	f7f3 fc13 	bl	8001ff8 <Uart_sendstring>

						}

						default:
							clear_send_flag();
 800e7d2:	f7f3 fd53 	bl	800227c <clear_send_flag>
							return FSP_PKT_INVALID;
 800e7d6:	2302      	movs	r3, #2
 800e7d8:	f000 bf73 	b.w	800f6c2 <frame_processing+0x237e>
//													for (int i = 0; i < fsp_pkt->length; i++) {
//													      sprintf(buffer, "\n{%d}", fsp_pkt->payload[i]);
//													      Uart_sendstring(UART5, buffer);
//													}

					clear_send_flag();
 800e7dc:	f7f3 fd4e 	bl	800227c <clear_send_flag>
					break;
 800e7e0:	e004      	b.n	800e7ec <frame_processing+0x14a8>
				default:
					clear_send_flag();
 800e7e2:	f7f3 fd4b 	bl	800227c <clear_send_flag>
					return FSP_PKT_INVALID;
 800e7e6:	2302      	movs	r3, #2
 800e7e8:	f000 bf6b 	b.w	800f6c2 <frame_processing+0x237e>
					break;
			}

			break;
 800e7ec:	f000 bf68 	b.w	800f6c0 <frame_processing+0x237c>
		case FSP_ADR_CAM:
			clear_send_flag();
 800e7f0:	f7f3 fd44 	bl	800227c <clear_send_flag>

			break;
 800e7f4:	f000 bf64 	b.w	800f6c0 <frame_processing+0x237c>

		case FSP_ADR_IOU:
			switch (fsp_pkt->type)
 800e7f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	791b      	ldrb	r3, [r3, #4]
 800e804:	2b05      	cmp	r3, #5
 800e806:	d003      	beq.n	800e810 <frame_processing+0x14cc>
 800e808:	2b07      	cmp	r3, #7
 800e80a:	d015      	beq.n	800e838 <frame_processing+0x14f4>
 800e80c:	f000 bf50 	b.w	800f6b0 <frame_processing+0x236c>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800e810:	f7f3 fd34 	bl	800227c <clear_send_flag>
//					if (uart_choose_uart5) {
//						Uart_sendstring(UART5, "\nIOU_ACK\r\n> ");
//					}
                    if (uart_choose_usart2) {
 800e814:	4ba0      	ldr	r3, [pc, #640]	@ (800ea98 <frame_processing+0x1754>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d003      	beq.n	800e826 <frame_processing+0x14e2>
                    	Uart_sendstring(USART2, "\nIOU_ACK\r\n> ");
 800e81e:	49a1      	ldr	r1, [pc, #644]	@ (800eaa4 <frame_processing+0x1760>)
 800e820:	489e      	ldr	r0, [pc, #632]	@ (800ea9c <frame_processing+0x1758>)
 800e822:	f7f3 fbe9 	bl	8001ff8 <Uart_sendstring>
                    }
					Uart_sendstring(UART4, "\nIOU_ACK\r\n> ");
 800e826:	499f      	ldr	r1, [pc, #636]	@ (800eaa4 <frame_processing+0x1760>)
 800e828:	489d      	ldr	r0, [pc, #628]	@ (800eaa0 <frame_processing+0x175c>)
 800e82a:	f7f3 fbe5 	bl	8001ff8 <Uart_sendstring>

					break;
 800e82e:	bf00      	nop
				default:
					clear_send_flag();
					return FSP_PKT_INVALID;
					break;
			}
			clear_send_flag();
 800e830:	f7f3 fd24 	bl	800227c <clear_send_flag>
			break;
 800e834:	f000 bf44 	b.w	800f6c0 <frame_processing+0x237c>
					clear_send_flag();
 800e838:	f7f3 fd20 	bl	800227c <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800e83c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e840:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	795b      	ldrb	r3, [r3, #5]
 800e848:	2b13      	cmp	r3, #19
 800e84a:	dc31      	bgt.n	800e8b0 <frame_processing+0x156c>
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f2c0 872c 	blt.w	800f6aa <frame_processing+0x2366>
 800e852:	2b13      	cmp	r3, #19
 800e854:	f200 8729 	bhi.w	800f6aa <frame_processing+0x2366>
 800e858:	a201      	add	r2, pc, #4	@ (adr r2, 800e860 <frame_processing+0x151c>)
 800e85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e85e:	bf00      	nop
 800e860:	0800e8b9 	.word	0x0800e8b9
 800e864:	0800f6ab 	.word	0x0800f6ab
 800e868:	0800e939 	.word	0x0800e939
 800e86c:	0800e9f5 	.word	0x0800e9f5
 800e870:	0800f6ab 	.word	0x0800f6ab
 800e874:	0800f6ab 	.word	0x0800f6ab
 800e878:	0800f6ab 	.word	0x0800f6ab
 800e87c:	0800f6ab 	.word	0x0800f6ab
 800e880:	0800f6ab 	.word	0x0800f6ab
 800e884:	0800f6ab 	.word	0x0800f6ab
 800e888:	0800f6ab 	.word	0x0800f6ab
 800e88c:	0800f6ab 	.word	0x0800f6ab
 800e890:	0800f6ab 	.word	0x0800f6ab
 800e894:	0800f6ab 	.word	0x0800f6ab
 800e898:	0800eabd 	.word	0x0800eabd
 800e89c:	0800f6ab 	.word	0x0800f6ab
 800e8a0:	0800eb45 	.word	0x0800eb45
 800e8a4:	0800eb8b 	.word	0x0800eb8b
 800e8a8:	0800ecb9 	.word	0x0800ecb9
 800e8ac:	0800ed31 	.word	0x0800ed31
 800e8b0:	2bff      	cmp	r3, #255	@ 0xff
 800e8b2:	d021      	beq.n	800e8f8 <frame_processing+0x15b4>
 800e8b4:	f000 bef9 	b.w	800f6aa <frame_processing+0x2366>
							sprintf(buffer_0x00, "IOU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800e8b8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e8bc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	799b      	ldrb	r3, [r3, #6]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e8ca:	4977      	ldr	r1, [pc, #476]	@ (800eaa8 <frame_processing+0x1764>)
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f002 fcdd 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800e8d2:	4b71      	ldr	r3, [pc, #452]	@ (800ea98 <frame_processing+0x1754>)
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d005      	beq.n	800e8e8 <frame_processing+0x15a4>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800e8dc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	486e      	ldr	r0, [pc, #440]	@ (800ea9c <frame_processing+0x1758>)
 800e8e4:	f7f3 fb88 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x00);
 800e8e8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	486c      	ldr	r0, [pc, #432]	@ (800eaa0 <frame_processing+0x175c>)
 800e8f0:	f7f3 fb82 	bl	8001ff8 <Uart_sendstring>
							break;
 800e8f4:	f000 bedc 	b.w	800f6b0 <frame_processing+0x236c>
							sprintf(buffer_0xFF, "IOU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800e8f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e8fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	799b      	ldrb	r3, [r3, #6]
 800e904:	461a      	mov	r2, r3
 800e906:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e90a:	4968      	ldr	r1, [pc, #416]	@ (800eaac <frame_processing+0x1768>)
 800e90c:	4618      	mov	r0, r3
 800e90e:	f002 fcbd 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800e912:	4b61      	ldr	r3, [pc, #388]	@ (800ea98 <frame_processing+0x1754>)
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	b2db      	uxtb	r3, r3
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d005      	beq.n	800e928 <frame_processing+0x15e4>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800e91c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e920:	4619      	mov	r1, r3
 800e922:	485e      	ldr	r0, [pc, #376]	@ (800ea9c <frame_processing+0x1758>)
 800e924:	f7f3 fb68 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0xFF);
 800e928:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e92c:	4619      	mov	r1, r3
 800e92e:	485c      	ldr	r0, [pc, #368]	@ (800eaa0 <frame_processing+0x175c>)
 800e930:	f7f3 fb62 	bl	8001ff8 <Uart_sendstring>
							break;
 800e934:	f000 bebc 	b.w	800f6b0 <frame_processing+0x236c>
						    uint8_t device = fsp_pkt->payload[1];
 800e938:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e93c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	799b      	ldrb	r3, [r3, #6]
 800e944:	f887 35ef 	strb.w	r3, [r7, #1519]	@ 0x5ef
						    uint8_t channel = fsp_pkt->payload[2];
 800e948:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e94c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	79db      	ldrb	r3, [r3, #7]
 800e954:	f887 35ee 	strb.w	r3, [r7, #1518]	@ 0x5ee
						    int16_t temp = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800e958:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e95c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	7a1b      	ldrb	r3, [r3, #8]
 800e964:	021b      	lsls	r3, r3, #8
 800e966:	b21a      	sxth	r2, r3
 800e968:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e96c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	7a5b      	ldrb	r3, [r3, #9]
 800e974:	b21b      	sxth	r3, r3
 800e976:	4313      	orrs	r3, r2
 800e978:	f8a7 35ec 	strh.w	r3, [r7, #1516]	@ 0x5ec
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800e97c:	f897 45ef 	ldrb.w	r4, [r7, #1519]	@ 0x5ef
 800e980:	f897 55ee 	ldrb.w	r5, [r7, #1518]	@ 0x5ee
 800e984:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 800e988:	4a49      	ldr	r2, [pc, #292]	@ (800eab0 <frame_processing+0x176c>)
 800e98a:	fb82 1203 	smull	r1, r2, r2, r3
 800e98e:	1092      	asrs	r2, r2, #2
 800e990:	17db      	asrs	r3, r3, #31
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	b21b      	sxth	r3, r3
 800e996:	461e      	mov	r6, r3
						            device, channel, temp / 10, abs(temp % 10));
 800e998:	f9b7 25ec 	ldrsh.w	r2, [r7, #1516]	@ 0x5ec
 800e99c:	4b44      	ldr	r3, [pc, #272]	@ (800eab0 <frame_processing+0x176c>)
 800e99e:	fb83 1302 	smull	r1, r3, r3, r2
 800e9a2:	1099      	asrs	r1, r3, #2
 800e9a4:	17d3      	asrs	r3, r2, #31
 800e9a6:	1ac9      	subs	r1, r1, r3
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	440b      	add	r3, r1
 800e9ae:	005b      	lsls	r3, r3, #1
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	b21b      	sxth	r3, r3
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	bfb8      	it	lt
 800e9b8:	425b      	neglt	r3, r3
 800e9ba:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800e9bc:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800e9c0:	9301      	str	r3, [sp, #4]
 800e9c2:	9600      	str	r6, [sp, #0]
 800e9c4:	462b      	mov	r3, r5
 800e9c6:	4622      	mov	r2, r4
 800e9c8:	493a      	ldr	r1, [pc, #232]	@ (800eab4 <frame_processing+0x1770>)
 800e9ca:	f002 fc5f 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800e9ce:	4b32      	ldr	r3, [pc, #200]	@ (800ea98 <frame_processing+0x1754>)
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d005      	beq.n	800e9e4 <frame_processing+0x16a0>
		                    	Uart_sendstring(USART2, buffer_0x02);
 800e9d8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e9dc:	4619      	mov	r1, r3
 800e9de:	482f      	ldr	r0, [pc, #188]	@ (800ea9c <frame_processing+0x1758>)
 800e9e0:	f7f3 fb0a 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x02);
 800e9e4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	482d      	ldr	r0, [pc, #180]	@ (800eaa0 <frame_processing+0x175c>)
 800e9ec:	f7f3 fb04 	bl	8001ff8 <Uart_sendstring>
						break;
 800e9f0:	f000 be5e 	b.w	800f6b0 <frame_processing+0x236c>
						    uint8_t channel = fsp_pkt->payload[1];
 800e9f4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e9f8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	799b      	ldrb	r3, [r3, #6]
 800ea00:	f887 35f2 	strb.w	r3, [r7, #1522]	@ 0x5f2
						    int16_t temp = (int16_t)((fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3]);
 800ea04:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ea08:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	79db      	ldrb	r3, [r3, #7]
 800ea10:	021b      	lsls	r3, r3, #8
 800ea12:	b21a      	sxth	r2, r3
 800ea14:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ea18:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	7a1b      	ldrb	r3, [r3, #8]
 800ea20:	b21b      	sxth	r3, r3
 800ea22:	4313      	orrs	r3, r2
 800ea24:	f8a7 35f0 	strh.w	r3, [r7, #1520]	@ 0x5f0
						    sprintf(buffer_0x03, "IOU_Res: CMDcode 0x03 [{Channel: %u} Temp: %d.%d]\n",
 800ea28:	f897 45f2 	ldrb.w	r4, [r7, #1522]	@ 0x5f2
 800ea2c:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 800ea30:	4a1f      	ldr	r2, [pc, #124]	@ (800eab0 <frame_processing+0x176c>)
 800ea32:	fb82 1203 	smull	r1, r2, r2, r3
 800ea36:	1092      	asrs	r2, r2, #2
 800ea38:	17db      	asrs	r3, r3, #31
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	b21b      	sxth	r3, r3
 800ea3e:	461d      	mov	r5, r3
 800ea40:	f9b7 25f0 	ldrsh.w	r2, [r7, #1520]	@ 0x5f0
 800ea44:	4b1a      	ldr	r3, [pc, #104]	@ (800eab0 <frame_processing+0x176c>)
 800ea46:	fb83 1302 	smull	r1, r3, r3, r2
 800ea4a:	1099      	asrs	r1, r3, #2
 800ea4c:	17d3      	asrs	r3, r2, #31
 800ea4e:	1ac9      	subs	r1, r1, r3
 800ea50:	460b      	mov	r3, r1
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	440b      	add	r3, r1
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	1ad3      	subs	r3, r2, r3
 800ea5a:	b21b      	sxth	r3, r3
 800ea5c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800ea60:	9300      	str	r3, [sp, #0]
 800ea62:	462b      	mov	r3, r5
 800ea64:	4622      	mov	r2, r4
 800ea66:	4914      	ldr	r1, [pc, #80]	@ (800eab8 <frame_processing+0x1774>)
 800ea68:	f002 fc10 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800ea6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea98 <frame_processing+0x1754>)
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d005      	beq.n	800ea82 <frame_processing+0x173e>
		                    	Uart_sendstring(USART2, buffer_0x03);
 800ea76:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	4807      	ldr	r0, [pc, #28]	@ (800ea9c <frame_processing+0x1758>)
 800ea7e:	f7f3 fabb 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x03);
 800ea82:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ea86:	4619      	mov	r1, r3
 800ea88:	4805      	ldr	r0, [pc, #20]	@ (800eaa0 <frame_processing+0x175c>)
 800ea8a:	f7f3 fab5 	bl	8001ff8 <Uart_sendstring>
						break;
 800ea8e:	f000 be0f 	b.w	800f6b0 <frame_processing+0x236c>
 800ea92:	bf00      	nop
 800ea94:	08016984 	.word	0x08016984
 800ea98:	20007994 	.word	0x20007994
 800ea9c:	40004400 	.word	0x40004400
 800eaa0:	40004c00 	.word	0x40004c00
 800eaa4:	08016bcc 	.word	0x08016bcc
 800eaa8:	08016bdc 	.word	0x08016bdc
 800eaac:	08016bf8 	.word	0x08016bf8
 800eab0:	66666667 	.word	0x66666667
 800eab4:	08016c14 	.word	0x08016c14
 800eab8:	08016c54 	.word	0x08016c54
						    uint8_t red = fsp_pkt->payload[1];
 800eabc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eac0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	799b      	ldrb	r3, [r3, #6]
 800eac8:	f887 35f6 	strb.w	r3, [r7, #1526]	@ 0x5f6
						    uint8_t blue = fsp_pkt->payload[2];
 800eacc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ead0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	79db      	ldrb	r3, [r3, #7]
 800ead8:	f887 35f5 	strb.w	r3, [r7, #1525]	@ 0x5f5
						    uint8_t green = fsp_pkt->payload[3];
 800eadc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eae0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	7a1b      	ldrb	r3, [r3, #8]
 800eae8:	f887 35f4 	strb.w	r3, [r7, #1524]	@ 0x5f4
						    uint8_t white = fsp_pkt->payload[4];
 800eaec:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eaf0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	7a5b      	ldrb	r3, [r3, #9]
 800eaf8:	f887 35f3 	strb.w	r3, [r7, #1523]	@ 0x5f3
						    sprintf(buffer_0x0E, "IOU_Res: CMDcode 0x0E [Red: %u, Blue: %u, Green: %u, White: %u]\n",
 800eafc:	f897 15f6 	ldrb.w	r1, [r7, #1526]	@ 0x5f6
 800eb00:	f897 45f5 	ldrb.w	r4, [r7, #1525]	@ 0x5f5
 800eb04:	f897 35f4 	ldrb.w	r3, [r7, #1524]	@ 0x5f4
 800eb08:	f897 25f3 	ldrb.w	r2, [r7, #1523]	@ 0x5f3
 800eb0c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800eb10:	9201      	str	r2, [sp, #4]
 800eb12:	9300      	str	r3, [sp, #0]
 800eb14:	4623      	mov	r3, r4
 800eb16:	460a      	mov	r2, r1
 800eb18:	497e      	ldr	r1, [pc, #504]	@ (800ed14 <frame_processing+0x19d0>)
 800eb1a:	f002 fbb7 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800eb1e:	4b7e      	ldr	r3, [pc, #504]	@ (800ed18 <frame_processing+0x19d4>)
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d005      	beq.n	800eb34 <frame_processing+0x17f0>
		                    	Uart_sendstring(USART2, buffer_0x0E);
 800eb28:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	487b      	ldr	r0, [pc, #492]	@ (800ed1c <frame_processing+0x19d8>)
 800eb30:	f7f3 fa62 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x0E);
 800eb34:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800eb38:	4619      	mov	r1, r3
 800eb3a:	4879      	ldr	r0, [pc, #484]	@ (800ed20 <frame_processing+0x19dc>)
 800eb3c:	f7f3 fa5c 	bl	8001ff8 <Uart_sendstring>
						break;
 800eb40:	f000 bdb6 	b.w	800f6b0 <frame_processing+0x236c>
						    uint8_t duty = fsp_pkt->payload[1];
 800eb44:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eb48:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	799b      	ldrb	r3, [r3, #6]
 800eb50:	f887 35f7 	strb.w	r3, [r7, #1527]	@ 0x5f7
						    sprintf(buffer_0x10, "IOU_Res: CMDcode 0x10 [Duty: %u%%]\n", duty);
 800eb54:	f897 25f7 	ldrb.w	r2, [r7, #1527]	@ 0x5f7
 800eb58:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800eb5c:	4971      	ldr	r1, [pc, #452]	@ (800ed24 <frame_processing+0x19e0>)
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f002 fb94 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800eb64:	4b6c      	ldr	r3, [pc, #432]	@ (800ed18 <frame_processing+0x19d4>)
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d005      	beq.n	800eb7a <frame_processing+0x1836>
		                    	Uart_sendstring(USART2, buffer_0x10);
 800eb6e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800eb72:	4619      	mov	r1, r3
 800eb74:	4869      	ldr	r0, [pc, #420]	@ (800ed1c <frame_processing+0x19d8>)
 800eb76:	f7f3 fa3f 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x10);
 800eb7a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800eb7e:	4619      	mov	r1, r3
 800eb80:	4867      	ldr	r0, [pc, #412]	@ (800ed20 <frame_processing+0x19dc>)
 800eb82:	f7f3 fa39 	bl	8001ff8 <Uart_sendstring>
						break;
 800eb86:	f000 bd93 	b.w	800f6b0 <frame_processing+0x236c>
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800eb8a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eb8e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	799b      	ldrb	r3, [r3, #6]
 800eb96:	021b      	lsls	r3, r3, #8
 800eb98:	b21a      	sxth	r2, r3
 800eb9a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eb9e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	79db      	ldrb	r3, [r3, #7]
 800eba6:	b21b      	sxth	r3, r3
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	f8a7 3602 	strh.w	r3, [r7, #1538]	@ 0x602
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800ebae:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ebb2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	7a1b      	ldrb	r3, [r3, #8]
 800ebba:	021b      	lsls	r3, r3, #8
 800ebbc:	b21a      	sxth	r2, r3
 800ebbe:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ebc2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	7a5b      	ldrb	r3, [r3, #9]
 800ebca:	b21b      	sxth	r3, r3
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	f8a7 3600 	strh.w	r3, [r7, #1536]	@ 0x600
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800ebd2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ebd6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	7a9b      	ldrb	r3, [r3, #10]
 800ebde:	021b      	lsls	r3, r3, #8
 800ebe0:	b21a      	sxth	r2, r3
 800ebe2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ebe6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	7adb      	ldrb	r3, [r3, #11]
 800ebee:	b21b      	sxth	r3, r3
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	f8a7 35fe 	strh.w	r3, [r7, #1534]	@ 0x5fe
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800ebf6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ebfa:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	7b1b      	ldrb	r3, [r3, #12]
 800ec02:	021b      	lsls	r3, r3, #8
 800ec04:	b21a      	sxth	r2, r3
 800ec06:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ec0a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	7b5b      	ldrb	r3, [r3, #13]
 800ec12:	b21b      	sxth	r3, r3
 800ec14:	4313      	orrs	r3, r2
 800ec16:	f8a7 35fc 	strh.w	r3, [r7, #1532]	@ 0x5fc
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800ec1a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ec1e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	7b9b      	ldrb	r3, [r3, #14]
 800ec26:	021b      	lsls	r3, r3, #8
 800ec28:	b21a      	sxth	r2, r3
 800ec2a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ec2e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	7bdb      	ldrb	r3, [r3, #15]
 800ec36:	b21b      	sxth	r3, r3
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	f8a7 35fa 	strh.w	r3, [r7, #1530]	@ 0x5fa
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800ec3e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ec42:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	7c1b      	ldrb	r3, [r3, #16]
 800ec4a:	021b      	lsls	r3, r3, #8
 800ec4c:	b21a      	sxth	r2, r3
 800ec4e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ec52:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	7c5b      	ldrb	r3, [r3, #17]
 800ec5a:	b21b      	sxth	r3, r3
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	f8a7 35f8 	strh.w	r3, [r7, #1528]	@ 0x5f8
						    sprintf(buffer_0x11, "IOU_Res: CMDcode 0x11 [Accel: X=%d, Y=%d, Z=%d\nGyro: X=%d, Y=%d, Z=%d]\n",
 800ec62:	f9b7 5602 	ldrsh.w	r5, [r7, #1538]	@ 0x602
 800ec66:	f9b7 6600 	ldrsh.w	r6, [r7, #1536]	@ 0x600
 800ec6a:	f9b7 35fe 	ldrsh.w	r3, [r7, #1534]	@ 0x5fe
 800ec6e:	f9b7 25fc 	ldrsh.w	r2, [r7, #1532]	@ 0x5fc
 800ec72:	f9b7 15fa 	ldrsh.w	r1, [r7, #1530]	@ 0x5fa
 800ec76:	f9b7 05f8 	ldrsh.w	r0, [r7, #1528]	@ 0x5f8
 800ec7a:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 800ec7e:	9003      	str	r0, [sp, #12]
 800ec80:	9102      	str	r1, [sp, #8]
 800ec82:	9201      	str	r2, [sp, #4]
 800ec84:	9300      	str	r3, [sp, #0]
 800ec86:	4633      	mov	r3, r6
 800ec88:	462a      	mov	r2, r5
 800ec8a:	4927      	ldr	r1, [pc, #156]	@ (800ed28 <frame_processing+0x19e4>)
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f002 fafd 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800ec92:	4b21      	ldr	r3, [pc, #132]	@ (800ed18 <frame_processing+0x19d4>)
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d005      	beq.n	800eca8 <frame_processing+0x1964>
		                    	Uart_sendstring(USART2, buffer_0x11);
 800ec9c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800eca0:	4619      	mov	r1, r3
 800eca2:	481e      	ldr	r0, [pc, #120]	@ (800ed1c <frame_processing+0x19d8>)
 800eca4:	f7f3 f9a8 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x11);
 800eca8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ecac:	4619      	mov	r1, r3
 800ecae:	481c      	ldr	r0, [pc, #112]	@ (800ed20 <frame_processing+0x19dc>)
 800ecb0:	f7f3 f9a2 	bl	8001ff8 <Uart_sendstring>
						break;
 800ecb4:	f000 bcfc 	b.w	800f6b0 <frame_processing+0x236c>
						    uint16_t pressure = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800ecb8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ecbc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	799b      	ldrb	r3, [r3, #6]
 800ecc4:	021b      	lsls	r3, r3, #8
 800ecc6:	b21a      	sxth	r2, r3
 800ecc8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eccc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	79db      	ldrb	r3, [r3, #7]
 800ecd4:	b21b      	sxth	r3, r3
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	b21b      	sxth	r3, r3
 800ecda:	f8a7 3604 	strh.w	r3, [r7, #1540]	@ 0x604
						    sprintf(buffer_0x12, "IOU_Res: CMDcode 0x12 [Press: %u]\n", pressure);
 800ecde:	f8b7 2604 	ldrh.w	r2, [r7, #1540]	@ 0x604
 800ece2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ece6:	4911      	ldr	r1, [pc, #68]	@ (800ed2c <frame_processing+0x19e8>)
 800ece8:	4618      	mov	r0, r3
 800ecea:	f002 facf 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800ecee:	4b0a      	ldr	r3, [pc, #40]	@ (800ed18 <frame_processing+0x19d4>)
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d005      	beq.n	800ed04 <frame_processing+0x19c0>
		                    	Uart_sendstring(USART2, buffer_0x12);
 800ecf8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	4807      	ldr	r0, [pc, #28]	@ (800ed1c <frame_processing+0x19d8>)
 800ed00:	f7f3 f97a 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x12);
 800ed04:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ed08:	4619      	mov	r1, r3
 800ed0a:	4805      	ldr	r0, [pc, #20]	@ (800ed20 <frame_processing+0x19dc>)
 800ed0c:	f7f3 f974 	bl	8001ff8 <Uart_sendstring>
						break;
 800ed10:	f000 bcce 	b.w	800f6b0 <frame_processing+0x236c>
 800ed14:	08016c88 	.word	0x08016c88
 800ed18:	20007994 	.word	0x20007994
 800ed1c:	40004400 	.word	0x40004400
 800ed20:	40004c00 	.word	0x40004c00
 800ed24:	08016ccc 	.word	0x08016ccc
 800ed28:	08016cf0 	.word	0x08016cf0
 800ed2c:	08016d38 	.word	0x08016d38
							int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800ed30:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ed34:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	799b      	ldrb	r3, [r3, #6]
 800ed3c:	021b      	lsls	r3, r3, #8
 800ed3e:	b21a      	sxth	r2, r3
 800ed40:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ed44:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	79db      	ldrb	r3, [r3, #7]
 800ed4c:	b21b      	sxth	r3, r3
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	f8a7 3636 	strh.w	r3, [r7, #1590]	@ 0x636
							int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800ed54:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ed58:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	7a1b      	ldrb	r3, [r3, #8]
 800ed60:	021b      	lsls	r3, r3, #8
 800ed62:	b21a      	sxth	r2, r3
 800ed64:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ed68:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	7a5b      	ldrb	r3, [r3, #9]
 800ed70:	b21b      	sxth	r3, r3
 800ed72:	4313      	orrs	r3, r2
 800ed74:	f8a7 3634 	strh.w	r3, [r7, #1588]	@ 0x634
							int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800ed78:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ed7c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	7a9b      	ldrb	r3, [r3, #10]
 800ed84:	021b      	lsls	r3, r3, #8
 800ed86:	b21a      	sxth	r2, r3
 800ed88:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ed8c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	7adb      	ldrb	r3, [r3, #11]
 800ed94:	b21b      	sxth	r3, r3
 800ed96:	4313      	orrs	r3, r2
 800ed98:	f8a7 3632 	strh.w	r3, [r7, #1586]	@ 0x632
							int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800ed9c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eda0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	7b1b      	ldrb	r3, [r3, #12]
 800eda8:	021b      	lsls	r3, r3, #8
 800edaa:	b21a      	sxth	r2, r3
 800edac:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800edb0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	7b5b      	ldrb	r3, [r3, #13]
 800edb8:	b21b      	sxth	r3, r3
 800edba:	4313      	orrs	r3, r2
 800edbc:	f8a7 3630 	strh.w	r3, [r7, #1584]	@ 0x630
							int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800edc0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800edc4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	7b9b      	ldrb	r3, [r3, #14]
 800edcc:	021b      	lsls	r3, r3, #8
 800edce:	b21a      	sxth	r2, r3
 800edd0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800edd4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	7bdb      	ldrb	r3, [r3, #15]
 800eddc:	b21b      	sxth	r3, r3
 800edde:	4313      	orrs	r3, r2
 800ede0:	f8a7 362e 	strh.w	r3, [r7, #1582]	@ 0x62e
							int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800ede4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ede8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	7c1b      	ldrb	r3, [r3, #16]
 800edf0:	021b      	lsls	r3, r3, #8
 800edf2:	b21a      	sxth	r2, r3
 800edf4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800edf8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	7c5b      	ldrb	r3, [r3, #17]
 800ee00:	b21b      	sxth	r3, r3
 800ee02:	4313      	orrs	r3, r2
 800ee04:	f8a7 362c 	strh.w	r3, [r7, #1580]	@ 0x62c
							int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800ee08:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ee0c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	7c9b      	ldrb	r3, [r3, #18]
 800ee14:	021b      	lsls	r3, r3, #8
 800ee16:	b21a      	sxth	r2, r3
 800ee18:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ee1c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	7cdb      	ldrb	r3, [r3, #19]
 800ee24:	b21b      	sxth	r3, r3
 800ee26:	4313      	orrs	r3, r2
 800ee28:	f8a7 362a 	strh.w	r3, [r7, #1578]	@ 0x62a
							int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800ee2c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ee30:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	7d1b      	ldrb	r3, [r3, #20]
 800ee38:	021b      	lsls	r3, r3, #8
 800ee3a:	b21a      	sxth	r2, r3
 800ee3c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ee40:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	7d5b      	ldrb	r3, [r3, #21]
 800ee48:	b21b      	sxth	r3, r3
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	f8a7 3628 	strh.w	r3, [r7, #1576]	@ 0x628
							int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800ee50:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ee54:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	7d9b      	ldrb	r3, [r3, #22]
 800ee5c:	021b      	lsls	r3, r3, #8
 800ee5e:	b21a      	sxth	r2, r3
 800ee60:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ee64:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	7ddb      	ldrb	r3, [r3, #23]
 800ee6c:	b21b      	sxth	r3, r3
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	f8a7 3626 	strh.w	r3, [r7, #1574]	@ 0x626
							int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800ee74:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ee78:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	7e1b      	ldrb	r3, [r3, #24]
 800ee80:	021b      	lsls	r3, r3, #8
 800ee82:	b21a      	sxth	r2, r3
 800ee84:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ee88:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	7e5b      	ldrb	r3, [r3, #25]
 800ee90:	b21b      	sxth	r3, r3
 800ee92:	4313      	orrs	r3, r2
 800ee94:	f8a7 3624 	strh.w	r3, [r7, #1572]	@ 0x624
							int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800ee98:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ee9c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	7e9b      	ldrb	r3, [r3, #26]
 800eea4:	021b      	lsls	r3, r3, #8
 800eea6:	b21a      	sxth	r2, r3
 800eea8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eeac:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	7edb      	ldrb	r3, [r3, #27]
 800eeb4:	b21b      	sxth	r3, r3
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	f8a7 3622 	strh.w	r3, [r7, #1570]	@ 0x622
							uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800eebc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eec0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	7f1b      	ldrb	r3, [r3, #28]
 800eec8:	021b      	lsls	r3, r3, #8
 800eeca:	b21a      	sxth	r2, r3
 800eecc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eed0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	7f5b      	ldrb	r3, [r3, #29]
 800eed8:	b21b      	sxth	r3, r3
 800eeda:	4313      	orrs	r3, r2
 800eedc:	b21b      	sxth	r3, r3
 800eede:	f8a7 3620 	strh.w	r3, [r7, #1568]	@ 0x620
							uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 800eee2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eee6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	7f9b      	ldrb	r3, [r3, #30]
 800eeee:	021b      	lsls	r3, r3, #8
 800eef0:	b21a      	sxth	r2, r3
 800eef2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eef6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	7fdb      	ldrb	r3, [r3, #31]
 800eefe:	b21b      	sxth	r3, r3
 800ef00:	4313      	orrs	r3, r2
 800ef02:	b21b      	sxth	r3, r3
 800ef04:	f8a7 361e 	strh.w	r3, [r7, #1566]	@ 0x61e
							uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 800ef08:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ef0c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef16:	021b      	lsls	r3, r3, #8
 800ef18:	b21a      	sxth	r2, r3
 800ef1a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ef1e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ef28:	b21b      	sxth	r3, r3
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	b21b      	sxth	r3, r3
 800ef2e:	f8a7 361c 	strh.w	r3, [r7, #1564]	@ 0x61c
							uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 800ef32:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ef36:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800ef40:	021b      	lsls	r3, r3, #8
 800ef42:	b21a      	sxth	r2, r3
 800ef44:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ef48:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800ef52:	b21b      	sxth	r3, r3
 800ef54:	4313      	orrs	r3, r2
 800ef56:	b21b      	sxth	r3, r3
 800ef58:	f8a7 361a 	strh.w	r3, [r7, #1562]	@ 0x61a
							uint8_t neo_led_r = fsp_pkt->payload[31];
 800ef5c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ef60:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ef6a:	f887 3619 	strb.w	r3, [r7, #1561]	@ 0x619
							uint8_t neo_led_g = fsp_pkt->payload[32];
 800ef6e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ef72:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ef7c:	f887 3618 	strb.w	r3, [r7, #1560]	@ 0x618
							uint8_t neo_led_b = fsp_pkt->payload[33];
 800ef80:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ef84:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800ef8e:	f887 3617 	strb.w	r3, [r7, #1559]	@ 0x617
							uint8_t neo_led_w = fsp_pkt->payload[34];
 800ef92:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ef96:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800efa0:	f887 3616 	strb.w	r3, [r7, #1558]	@ 0x616
							uint8_t ir_led_duty = fsp_pkt->payload[35];
 800efa4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800efa8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efb2:	f887 3615 	strb.w	r3, [r7, #1557]	@ 0x615
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[36] << 8) | fsp_pkt->payload[37]);
 800efb6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800efba:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800efc4:	021b      	lsls	r3, r3, #8
 800efc6:	b21a      	sxth	r2, r3
 800efc8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800efcc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800efd6:	b21b      	sxth	r3, r3
 800efd8:	4313      	orrs	r3, r2
 800efda:	f8a7 3612 	strh.w	r3, [r7, #1554]	@ 0x612
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39]);
 800efde:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800efe2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800efec:	021b      	lsls	r3, r3, #8
 800efee:	b21a      	sxth	r2, r3
 800eff0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800eff4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800effe:	b21b      	sxth	r3, r3
 800f000:	4313      	orrs	r3, r2
 800f002:	f8a7 3610 	strh.w	r3, [r7, #1552]	@ 0x610
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[40] << 8) | fsp_pkt->payload[41]);
 800f006:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800f00a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f014:	021b      	lsls	r3, r3, #8
 800f016:	b21a      	sxth	r2, r3
 800f018:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800f01c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f026:	b21b      	sxth	r3, r3
 800f028:	4313      	orrs	r3, r2
 800f02a:	f8a7 360e 	strh.w	r3, [r7, #1550]	@ 0x60e
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[42] << 8) | fsp_pkt->payload[43]);
 800f02e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800f032:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f03c:	021b      	lsls	r3, r3, #8
 800f03e:	b21a      	sxth	r2, r3
 800f040:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800f044:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f04e:	b21b      	sxth	r3, r3
 800f050:	4313      	orrs	r3, r2
 800f052:	f8a7 360c 	strh.w	r3, [r7, #1548]	@ 0x60c
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45]);
 800f056:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800f05a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f064:	021b      	lsls	r3, r3, #8
 800f066:	b21a      	sxth	r2, r3
 800f068:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800f06c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f076:	b21b      	sxth	r3, r3
 800f078:	4313      	orrs	r3, r2
 800f07a:	f8a7 360a 	strh.w	r3, [r7, #1546]	@ 0x60a
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[46] << 8) | fsp_pkt->payload[47]);
 800f07e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800f082:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800f08c:	021b      	lsls	r3, r3, #8
 800f08e:	b21a      	sxth	r2, r3
 800f090:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800f094:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f09e:	b21b      	sxth	r3, r3
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	f8a7 3608 	strh.w	r3, [r7, #1544]	@ 0x608
						    int16_t press = (int16_t)((fsp_pkt->payload[48] << 8) | fsp_pkt->payload[49]);
 800f0a6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800f0aa:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f0b4:	021b      	lsls	r3, r3, #8
 800f0b6:	b21a      	sxth	r2, r3
 800f0b8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800f0bc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800f0c6:	b21b      	sxth	r3, r3
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	f8a7 3606 	strh.w	r3, [r7, #1542]	@ 0x606
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f0ce:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	da03      	bge.n	800f0de <frame_processing+0x1d9a>
 800f0d6:	4bb5      	ldr	r3, [pc, #724]	@ (800f3ac <frame_processing+0x2068>)
 800f0d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f0dc:	e002      	b.n	800f0e4 <frame_processing+0x1da0>
 800f0de:	4bb4      	ldr	r3, [pc, #720]	@ (800f3b0 <frame_processing+0x206c>)
 800f0e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800f0e4:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	bfb8      	it	lt
 800f0ec:	425b      	neglt	r3, r3
 800f0ee:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f0f0:	4ab0      	ldr	r2, [pc, #704]	@ (800f3b4 <frame_processing+0x2070>)
 800f0f2:	fb82 1203 	smull	r1, r2, r2, r3
 800f0f6:	1092      	asrs	r2, r2, #2
 800f0f8:	17db      	asrs	r3, r3, #31
 800f0fa:	eba2 0e03 	sub.w	lr, r2, r3
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800f0fe:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800f102:	2b00      	cmp	r3, #0
 800f104:	bfb8      	it	lt
 800f106:	425b      	neglt	r3, r3
 800f108:	b29b      	uxth	r3, r3
 800f10a:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f10c:	4ba9      	ldr	r3, [pc, #676]	@ (800f3b4 <frame_processing+0x2070>)
 800f10e:	fb83 1302 	smull	r1, r3, r3, r2
 800f112:	1099      	asrs	r1, r3, #2
 800f114:	17d3      	asrs	r3, r2, #31
 800f116:	1acb      	subs	r3, r1, r3
 800f118:	4619      	mov	r1, r3
 800f11a:	460b      	mov	r3, r1
 800f11c:	009b      	lsls	r3, r3, #2
 800f11e:	440b      	add	r3, r1
 800f120:	005b      	lsls	r3, r3, #1
 800f122:	1ad3      	subs	r3, r2, r3
 800f124:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f128:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	da03      	bge.n	800f138 <frame_processing+0x1df4>
 800f130:	4b9e      	ldr	r3, [pc, #632]	@ (800f3ac <frame_processing+0x2068>)
 800f132:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f136:	e002      	b.n	800f13e <frame_processing+0x1dfa>
 800f138:	4b9d      	ldr	r3, [pc, #628]	@ (800f3b0 <frame_processing+0x206c>)
 800f13a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800f13e:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800f142:	2b00      	cmp	r3, #0
 800f144:	bfb8      	it	lt
 800f146:	425b      	neglt	r3, r3
 800f148:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f14a:	4a9a      	ldr	r2, [pc, #616]	@ (800f3b4 <frame_processing+0x2070>)
 800f14c:	fb82 1203 	smull	r1, r2, r2, r3
 800f150:	1092      	asrs	r2, r2, #2
 800f152:	17db      	asrs	r3, r3, #31
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800f15a:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800f15e:	2b00      	cmp	r3, #0
 800f160:	bfb8      	it	lt
 800f162:	425b      	neglt	r3, r3
 800f164:	b29b      	uxth	r3, r3
 800f166:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f168:	4b92      	ldr	r3, [pc, #584]	@ (800f3b4 <frame_processing+0x2070>)
 800f16a:	fb83 1302 	smull	r1, r3, r3, r2
 800f16e:	1099      	asrs	r1, r3, #2
 800f170:	17d3      	asrs	r3, r2, #31
 800f172:	1acb      	subs	r3, r1, r3
 800f174:	4619      	mov	r1, r3
 800f176:	460b      	mov	r3, r1
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	440b      	add	r3, r1
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f182:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800f186:	2b00      	cmp	r3, #0
 800f188:	da03      	bge.n	800f192 <frame_processing+0x1e4e>
 800f18a:	4b88      	ldr	r3, [pc, #544]	@ (800f3ac <frame_processing+0x2068>)
 800f18c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f190:	e002      	b.n	800f198 <frame_processing+0x1e54>
 800f192:	4b87      	ldr	r3, [pc, #540]	@ (800f3b0 <frame_processing+0x206c>)
 800f194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800f198:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	bfb8      	it	lt
 800f1a0:	425b      	neglt	r3, r3
 800f1a2:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f1a4:	4a83      	ldr	r2, [pc, #524]	@ (800f3b4 <frame_processing+0x2070>)
 800f1a6:	fb82 1203 	smull	r1, r2, r2, r3
 800f1aa:	1092      	asrs	r2, r2, #2
 800f1ac:	17db      	asrs	r3, r3, #31
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	67bb      	str	r3, [r7, #120]	@ 0x78
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800f1b2:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	bfb8      	it	lt
 800f1ba:	425b      	neglt	r3, r3
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f1c0:	4b7c      	ldr	r3, [pc, #496]	@ (800f3b4 <frame_processing+0x2070>)
 800f1c2:	fb83 1302 	smull	r1, r3, r3, r2
 800f1c6:	1099      	asrs	r1, r3, #2
 800f1c8:	17d3      	asrs	r3, r2, #31
 800f1ca:	1acb      	subs	r3, r1, r3
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	440b      	add	r3, r1
 800f1d4:	005b      	lsls	r3, r3, #1
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	677b      	str	r3, [r7, #116]	@ 0x74
 800f1da:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	da03      	bge.n	800f1ea <frame_processing+0x1ea6>
 800f1e2:	4b72      	ldr	r3, [pc, #456]	@ (800f3ac <frame_processing+0x2068>)
 800f1e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f1e8:	e002      	b.n	800f1f0 <frame_processing+0x1eac>
 800f1ea:	4b71      	ldr	r3, [pc, #452]	@ (800f3b0 <frame_processing+0x206c>)
 800f1ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800f1f0:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	bfb8      	it	lt
 800f1f8:	425b      	neglt	r3, r3
 800f1fa:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f1fc:	4a6d      	ldr	r2, [pc, #436]	@ (800f3b4 <frame_processing+0x2070>)
 800f1fe:	fb82 1203 	smull	r1, r2, r2, r3
 800f202:	1092      	asrs	r2, r2, #2
 800f204:	17db      	asrs	r3, r3, #31
 800f206:	1ad3      	subs	r3, r2, r3
 800f208:	673b      	str	r3, [r7, #112]	@ 0x70
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800f20a:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800f20e:	2b00      	cmp	r3, #0
 800f210:	bfb8      	it	lt
 800f212:	425b      	neglt	r3, r3
 800f214:	b29b      	uxth	r3, r3
 800f216:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f218:	4b66      	ldr	r3, [pc, #408]	@ (800f3b4 <frame_processing+0x2070>)
 800f21a:	fb83 2301 	smull	r2, r3, r3, r1
 800f21e:	109a      	asrs	r2, r3, #2
 800f220:	17cb      	asrs	r3, r1, #31
 800f222:	1ad3      	subs	r3, r2, r3
 800f224:	461a      	mov	r2, r3
 800f226:	4613      	mov	r3, r2
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	4413      	add	r3, r2
 800f22c:	005b      	lsls	r3, r3, #1
 800f22e:	1acb      	subs	r3, r1, r3
 800f230:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f232:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800f236:	2b00      	cmp	r3, #0
 800f238:	da03      	bge.n	800f242 <frame_processing+0x1efe>
 800f23a:	4b5c      	ldr	r3, [pc, #368]	@ (800f3ac <frame_processing+0x2068>)
 800f23c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f240:	e002      	b.n	800f248 <frame_processing+0x1f04>
 800f242:	4b5b      	ldr	r3, [pc, #364]	@ (800f3b0 <frame_processing+0x206c>)
 800f244:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800f248:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	bfb8      	it	lt
 800f250:	425b      	neglt	r3, r3
 800f252:	b29b      	uxth	r3, r3
 800f254:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f256:	4b57      	ldr	r3, [pc, #348]	@ (800f3b4 <frame_processing+0x2070>)
 800f258:	fb83 2301 	smull	r2, r3, r3, r1
 800f25c:	109a      	asrs	r2, r3, #2
 800f25e:	17cb      	asrs	r3, r1, #31
 800f260:	1ad3      	subs	r3, r2, r3
 800f262:	66bb      	str	r3, [r7, #104]	@ 0x68
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800f264:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800f268:	2b00      	cmp	r3, #0
 800f26a:	bfb8      	it	lt
 800f26c:	425b      	neglt	r3, r3
 800f26e:	b29b      	uxth	r3, r3
 800f270:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f272:	4b50      	ldr	r3, [pc, #320]	@ (800f3b4 <frame_processing+0x2070>)
 800f274:	fb83 2301 	smull	r2, r3, r3, r1
 800f278:	109a      	asrs	r2, r3, #2
 800f27a:	17cb      	asrs	r3, r1, #31
 800f27c:	1ad3      	subs	r3, r2, r3
 800f27e:	461a      	mov	r2, r3
 800f280:	4613      	mov	r3, r2
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	4413      	add	r3, r2
 800f286:	005b      	lsls	r3, r3, #1
 800f288:	1acb      	subs	r3, r1, r3
 800f28a:	667b      	str	r3, [r7, #100]	@ 0x64
 800f28c:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800f290:	2b00      	cmp	r3, #0
 800f292:	da03      	bge.n	800f29c <frame_processing+0x1f58>
 800f294:	4b45      	ldr	r3, [pc, #276]	@ (800f3ac <frame_processing+0x2068>)
 800f296:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f29a:	e002      	b.n	800f2a2 <frame_processing+0x1f5e>
 800f29c:	4b44      	ldr	r3, [pc, #272]	@ (800f3b0 <frame_processing+0x206c>)
 800f29e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800f2a2:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	bfb8      	it	lt
 800f2aa:	425b      	neglt	r3, r3
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f2b0:	4b40      	ldr	r3, [pc, #256]	@ (800f3b4 <frame_processing+0x2070>)
 800f2b2:	fb83 2301 	smull	r2, r3, r3, r1
 800f2b6:	109a      	asrs	r2, r3, #2
 800f2b8:	17cb      	asrs	r3, r1, #31
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	663b      	str	r3, [r7, #96]	@ 0x60
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800f2be:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	bfb8      	it	lt
 800f2c6:	425b      	neglt	r3, r3
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f2cc:	4b39      	ldr	r3, [pc, #228]	@ (800f3b4 <frame_processing+0x2070>)
 800f2ce:	fb83 2301 	smull	r2, r3, r3, r1
 800f2d2:	109a      	asrs	r2, r3, #2
 800f2d4:	17cb      	asrs	r3, r1, #31
 800f2d6:	1ad3      	subs	r3, r2, r3
 800f2d8:	461a      	mov	r2, r3
 800f2da:	4613      	mov	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	005b      	lsls	r3, r3, #1
 800f2e2:	1acb      	subs	r3, r1, r3
 800f2e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f2e6:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	da03      	bge.n	800f2f6 <frame_processing+0x1fb2>
 800f2ee:	4b2f      	ldr	r3, [pc, #188]	@ (800f3ac <frame_processing+0x2068>)
 800f2f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f2f4:	e002      	b.n	800f2fc <frame_processing+0x1fb8>
 800f2f6:	4b2e      	ldr	r3, [pc, #184]	@ (800f3b0 <frame_processing+0x206c>)
 800f2f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800f2fc:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800f300:	2b00      	cmp	r3, #0
 800f302:	bfb8      	it	lt
 800f304:	425b      	neglt	r3, r3
 800f306:	b29b      	uxth	r3, r3
 800f308:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f30a:	4b2a      	ldr	r3, [pc, #168]	@ (800f3b4 <frame_processing+0x2070>)
 800f30c:	fb83 2301 	smull	r2, r3, r3, r1
 800f310:	109a      	asrs	r2, r3, #2
 800f312:	17cb      	asrs	r3, r1, #31
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	65bb      	str	r3, [r7, #88]	@ 0x58
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800f318:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	bfb8      	it	lt
 800f320:	425b      	neglt	r3, r3
 800f322:	b29b      	uxth	r3, r3
 800f324:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f326:	4b23      	ldr	r3, [pc, #140]	@ (800f3b4 <frame_processing+0x2070>)
 800f328:	fb83 2301 	smull	r2, r3, r3, r1
 800f32c:	109a      	asrs	r2, r3, #2
 800f32e:	17cb      	asrs	r3, r1, #31
 800f330:	1ad3      	subs	r3, r2, r3
 800f332:	461a      	mov	r2, r3
 800f334:	4613      	mov	r3, r2
 800f336:	009b      	lsls	r3, r3, #2
 800f338:	4413      	add	r3, r2
 800f33a:	005b      	lsls	r3, r3, #1
 800f33c:	1acb      	subs	r3, r1, r3
 800f33e:	657b      	str	r3, [r7, #84]	@ 0x54
 800f340:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800f344:	2b00      	cmp	r3, #0
 800f346:	da03      	bge.n	800f350 <frame_processing+0x200c>
 800f348:	4b18      	ldr	r3, [pc, #96]	@ (800f3ac <frame_processing+0x2068>)
 800f34a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f34e:	e002      	b.n	800f356 <frame_processing+0x2012>
 800f350:	4b17      	ldr	r3, [pc, #92]	@ (800f3b0 <frame_processing+0x206c>)
 800f352:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800f356:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	bfb8      	it	lt
 800f35e:	425b      	neglt	r3, r3
 800f360:	b29b      	uxth	r3, r3
 800f362:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f364:	4b13      	ldr	r3, [pc, #76]	@ (800f3b4 <frame_processing+0x2070>)
 800f366:	fb83 2301 	smull	r2, r3, r3, r1
 800f36a:	109a      	asrs	r2, r3, #2
 800f36c:	17cb      	asrs	r3, r1, #31
 800f36e:	1ad3      	subs	r3, r2, r3
 800f370:	653b      	str	r3, [r7, #80]	@ 0x50
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800f372:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800f376:	2b00      	cmp	r3, #0
 800f378:	bfb8      	it	lt
 800f37a:	425b      	neglt	r3, r3
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f380:	4b0c      	ldr	r3, [pc, #48]	@ (800f3b4 <frame_processing+0x2070>)
 800f382:	fb83 2301 	smull	r2, r3, r3, r1
 800f386:	109a      	asrs	r2, r3, #2
 800f388:	17cb      	asrs	r3, r1, #31
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	461a      	mov	r2, r3
 800f38e:	4613      	mov	r3, r2
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	4413      	add	r3, r2
 800f394:	005b      	lsls	r3, r3, #1
 800f396:	1acb      	subs	r3, r1, r3
 800f398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f39a:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	da0a      	bge.n	800f3b8 <frame_processing+0x2074>
 800f3a2:	4b02      	ldr	r3, [pc, #8]	@ (800f3ac <frame_processing+0x2068>)
 800f3a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f3a8:	e009      	b.n	800f3be <frame_processing+0x207a>
 800f3aa:	bf00      	nop
 800f3ac:	08016680 	.word	0x08016680
 800f3b0:	08016684 	.word	0x08016684
 800f3b4:	66666667 	.word	0x66666667
 800f3b8:	4b2c      	ldr	r3, [pc, #176]	@ (800f46c <frame_processing+0x2128>)
 800f3ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800f3be:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	bfb8      	it	lt
 800f3c6:	425b      	neglt	r3, r3
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f3cc:	4b28      	ldr	r3, [pc, #160]	@ (800f470 <frame_processing+0x212c>)
 800f3ce:	fb83 2301 	smull	r2, r3, r3, r1
 800f3d2:	109a      	asrs	r2, r3, #2
 800f3d4:	17cb      	asrs	r3, r1, #31
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	64bb      	str	r3, [r7, #72]	@ 0x48
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800f3da:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	bfb8      	it	lt
 800f3e2:	425b      	neglt	r3, r3
 800f3e4:	b29b      	uxth	r3, r3
 800f3e6:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f3e8:	4b21      	ldr	r3, [pc, #132]	@ (800f470 <frame_processing+0x212c>)
 800f3ea:	fb83 2301 	smull	r2, r3, r3, r1
 800f3ee:	109a      	asrs	r2, r3, #2
 800f3f0:	17cb      	asrs	r3, r1, #31
 800f3f2:	1ad3      	subs	r3, r2, r3
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	4413      	add	r3, r2
 800f3fc:	005b      	lsls	r3, r3, #1
 800f3fe:	1acb      	subs	r3, r1, r3
 800f400:	647b      	str	r3, [r7, #68]	@ 0x44
 800f402:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800f406:	2b00      	cmp	r3, #0
 800f408:	da03      	bge.n	800f412 <frame_processing+0x20ce>
 800f40a:	4b1a      	ldr	r3, [pc, #104]	@ (800f474 <frame_processing+0x2130>)
 800f40c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f410:	e002      	b.n	800f418 <frame_processing+0x20d4>
 800f412:	4b16      	ldr	r3, [pc, #88]	@ (800f46c <frame_processing+0x2128>)
 800f414:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800f418:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	bfb8      	it	lt
 800f420:	425b      	neglt	r3, r3
 800f422:	b29b      	uxth	r3, r3
 800f424:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f426:	4b12      	ldr	r3, [pc, #72]	@ (800f470 <frame_processing+0x212c>)
 800f428:	fb83 2301 	smull	r2, r3, r3, r1
 800f42c:	109a      	asrs	r2, r3, #2
 800f42e:	17cb      	asrs	r3, r1, #31
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	643b      	str	r3, [r7, #64]	@ 0x40
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800f434:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800f438:	2b00      	cmp	r3, #0
 800f43a:	bfb8      	it	lt
 800f43c:	425b      	neglt	r3, r3
 800f43e:	b29b      	uxth	r3, r3
 800f440:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f442:	4b0b      	ldr	r3, [pc, #44]	@ (800f470 <frame_processing+0x212c>)
 800f444:	fb83 2301 	smull	r2, r3, r3, r1
 800f448:	109a      	asrs	r2, r3, #2
 800f44a:	17cb      	asrs	r3, r1, #31
 800f44c:	1ad3      	subs	r3, r2, r3
 800f44e:	461a      	mov	r2, r3
 800f450:	4613      	mov	r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	4413      	add	r3, r2
 800f456:	005b      	lsls	r3, r3, #1
 800f458:	1acb      	subs	r3, r1, r3
 800f45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f45c:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800f460:	2b00      	cmp	r3, #0
 800f462:	da09      	bge.n	800f478 <frame_processing+0x2134>
 800f464:	4b03      	ldr	r3, [pc, #12]	@ (800f474 <frame_processing+0x2130>)
 800f466:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f46a:	e008      	b.n	800f47e <frame_processing+0x213a>
 800f46c:	08016684 	.word	0x08016684
 800f470:	66666667 	.word	0x66666667
 800f474:	08016680 	.word	0x08016680
 800f478:	4b95      	ldr	r3, [pc, #596]	@ (800f6d0 <frame_processing+0x238c>)
 800f47a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800f47e:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800f482:	2b00      	cmp	r3, #0
 800f484:	bfb8      	it	lt
 800f486:	425b      	neglt	r3, r3
 800f488:	b29b      	uxth	r3, r3
 800f48a:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f48c:	4b91      	ldr	r3, [pc, #580]	@ (800f6d4 <frame_processing+0x2390>)
 800f48e:	fb83 2301 	smull	r2, r3, r3, r1
 800f492:	109a      	asrs	r2, r3, #2
 800f494:	17cb      	asrs	r3, r1, #31
 800f496:	1ad3      	subs	r3, r2, r3
 800f498:	63bb      	str	r3, [r7, #56]	@ 0x38
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800f49a:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	bfb8      	it	lt
 800f4a2:	425b      	neglt	r3, r3
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800f4a8:	4b8a      	ldr	r3, [pc, #552]	@ (800f6d4 <frame_processing+0x2390>)
 800f4aa:	fb83 2301 	smull	r2, r3, r3, r1
 800f4ae:	109a      	asrs	r2, r3, #2
 800f4b0:	17cb      	asrs	r3, r1, #31
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4413      	add	r3, r2
 800f4bc:	005b      	lsls	r3, r3, #1
 800f4be:	1aca      	subs	r2, r1, r3
 800f4c0:	637a      	str	r2, [r7, #52]	@ 0x34
 800f4c2:	f8b7 2620 	ldrh.w	r2, [r7, #1568]	@ 0x620
 800f4c6:	4b84      	ldr	r3, [pc, #528]	@ (800f6d8 <frame_processing+0x2394>)
 800f4c8:	fba3 2302 	umull	r2, r3, r3, r2
 800f4cc:	095b      	lsrs	r3, r3, #5
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800f4d2:	f8b7 1620 	ldrh.w	r1, [r7, #1568]	@ 0x620
 800f4d6:	4b80      	ldr	r3, [pc, #512]	@ (800f6d8 <frame_processing+0x2394>)
 800f4d8:	fba3 2301 	umull	r2, r3, r3, r1
 800f4dc:	095a      	lsrs	r2, r3, #5
 800f4de:	2364      	movs	r3, #100	@ 0x64
 800f4e0:	fb02 f303 	mul.w	r3, r2, r3
 800f4e4:	1acb      	subs	r3, r1, r3
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f4ea:	f8b7 261e 	ldrh.w	r2, [r7, #1566]	@ 0x61e
 800f4ee:	4b7a      	ldr	r3, [pc, #488]	@ (800f6d8 <frame_processing+0x2394>)
 800f4f0:	fba3 2302 	umull	r2, r3, r3, r2
 800f4f4:	095b      	lsrs	r3, r3, #5
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f4fa:	f8b7 161e 	ldrh.w	r1, [r7, #1566]	@ 0x61e
 800f4fe:	4b76      	ldr	r3, [pc, #472]	@ (800f6d8 <frame_processing+0x2394>)
 800f500:	fba3 2301 	umull	r2, r3, r3, r1
 800f504:	095a      	lsrs	r2, r3, #5
 800f506:	2364      	movs	r3, #100	@ 0x64
 800f508:	fb02 f303 	mul.w	r3, r2, r3
 800f50c:	1acb      	subs	r3, r1, r3
 800f50e:	b29b      	uxth	r3, r3
 800f510:	627b      	str	r3, [r7, #36]	@ 0x24
 800f512:	f8b7 261c 	ldrh.w	r2, [r7, #1564]	@ 0x61c
 800f516:	4b70      	ldr	r3, [pc, #448]	@ (800f6d8 <frame_processing+0x2394>)
 800f518:	fba3 2302 	umull	r2, r3, r3, r2
 800f51c:	095b      	lsrs	r3, r3, #5
 800f51e:	b29b      	uxth	r3, r3
 800f520:	623b      	str	r3, [r7, #32]
 800f522:	f8b7 161c 	ldrh.w	r1, [r7, #1564]	@ 0x61c
 800f526:	4b6c      	ldr	r3, [pc, #432]	@ (800f6d8 <frame_processing+0x2394>)
 800f528:	fba3 2301 	umull	r2, r3, r3, r1
 800f52c:	095a      	lsrs	r2, r3, #5
 800f52e:	2364      	movs	r3, #100	@ 0x64
 800f530:	fb02 f303 	mul.w	r3, r2, r3
 800f534:	1acb      	subs	r3, r1, r3
 800f536:	b29b      	uxth	r3, r3
 800f538:	61fb      	str	r3, [r7, #28]
 800f53a:	f8b7 261a 	ldrh.w	r2, [r7, #1562]	@ 0x61a
 800f53e:	4b66      	ldr	r3, [pc, #408]	@ (800f6d8 <frame_processing+0x2394>)
 800f540:	fba3 2302 	umull	r2, r3, r3, r2
 800f544:	095b      	lsrs	r3, r3, #5
 800f546:	b29b      	uxth	r3, r3
 800f548:	61bb      	str	r3, [r7, #24]
 800f54a:	f8b7 161a 	ldrh.w	r1, [r7, #1562]	@ 0x61a
 800f54e:	4b62      	ldr	r3, [pc, #392]	@ (800f6d8 <frame_processing+0x2394>)
 800f550:	fba3 2301 	umull	r2, r3, r3, r1
 800f554:	095a      	lsrs	r2, r3, #5
 800f556:	2364      	movs	r3, #100	@ 0x64
 800f558:	fb02 f303 	mul.w	r3, r2, r3
 800f55c:	1acb      	subs	r3, r1, r3
 800f55e:	b29b      	uxth	r3, r3
 800f560:	617b      	str	r3, [r7, #20]
 800f562:	f897 0619 	ldrb.w	r0, [r7, #1561]	@ 0x619
 800f566:	4601      	mov	r1, r0
 800f568:	6139      	str	r1, [r7, #16]
 800f56a:	f897 0618 	ldrb.w	r0, [r7, #1560]	@ 0x618
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	f897 4617 	ldrb.w	r4, [r7, #1559]	@ 0x617
 800f574:	60bc      	str	r4, [r7, #8]
 800f576:	f897 5616 	ldrb.w	r5, [r7, #1558]	@ 0x616
 800f57a:	607d      	str	r5, [r7, #4]
 800f57c:	f897 6615 	ldrb.w	r6, [r7, #1557]	@ 0x615
 800f580:	603e      	str	r6, [r7, #0]
 800f582:	f9b7 6612 	ldrsh.w	r6, [r7, #1554]	@ 0x612
 800f586:	f9b7 5610 	ldrsh.w	r5, [r7, #1552]	@ 0x610
 800f58a:	f9b7 460e 	ldrsh.w	r4, [r7, #1550]	@ 0x60e
 800f58e:	f9b7 060c 	ldrsh.w	r0, [r7, #1548]	@ 0x60c
 800f592:	f9b7 160a 	ldrsh.w	r1, [r7, #1546]	@ 0x60a
 800f596:	f9b7 2608 	ldrsh.w	r2, [r7, #1544]	@ 0x608
 800f59a:	f9b7 3606 	ldrsh.w	r3, [r7, #1542]	@ 0x606
 800f59e:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 800f5a2:	9332      	str	r3, [sp, #200]	@ 0xc8
 800f5a4:	9231      	str	r2, [sp, #196]	@ 0xc4
 800f5a6:	9130      	str	r1, [sp, #192]	@ 0xc0
 800f5a8:	902f      	str	r0, [sp, #188]	@ 0xbc
 800f5aa:	942e      	str	r4, [sp, #184]	@ 0xb8
 800f5ac:	952d      	str	r5, [sp, #180]	@ 0xb4
 800f5ae:	962c      	str	r6, [sp, #176]	@ 0xb0
 800f5b0:	683e      	ldr	r6, [r7, #0]
 800f5b2:	962b      	str	r6, [sp, #172]	@ 0xac
 800f5b4:	687d      	ldr	r5, [r7, #4]
 800f5b6:	952a      	str	r5, [sp, #168]	@ 0xa8
 800f5b8:	68bc      	ldr	r4, [r7, #8]
 800f5ba:	9429      	str	r4, [sp, #164]	@ 0xa4
 800f5bc:	68f8      	ldr	r0, [r7, #12]
 800f5be:	9028      	str	r0, [sp, #160]	@ 0xa0
 800f5c0:	6939      	ldr	r1, [r7, #16]
 800f5c2:	9127      	str	r1, [sp, #156]	@ 0x9c
 800f5c4:	6979      	ldr	r1, [r7, #20]
 800f5c6:	9126      	str	r1, [sp, #152]	@ 0x98
 800f5c8:	69b9      	ldr	r1, [r7, #24]
 800f5ca:	9125      	str	r1, [sp, #148]	@ 0x94
 800f5cc:	69f9      	ldr	r1, [r7, #28]
 800f5ce:	9124      	str	r1, [sp, #144]	@ 0x90
 800f5d0:	6a39      	ldr	r1, [r7, #32]
 800f5d2:	9123      	str	r1, [sp, #140]	@ 0x8c
 800f5d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f5d6:	9122      	str	r1, [sp, #136]	@ 0x88
 800f5d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5da:	9121      	str	r1, [sp, #132]	@ 0x84
 800f5dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f5de:	9120      	str	r1, [sp, #128]	@ 0x80
 800f5e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f5e2:	911f      	str	r1, [sp, #124]	@ 0x7c
 800f5e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5e6:	921e      	str	r2, [sp, #120]	@ 0x78
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ea:	931d      	str	r3, [sp, #116]	@ 0x74
 800f5ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f5f0:	931c      	str	r3, [sp, #112]	@ 0x70
 800f5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5f4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f5f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f5fe:	9319      	str	r3, [sp, #100]	@ 0x64
 800f600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f602:	9318      	str	r3, [sp, #96]	@ 0x60
 800f604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f606:	9317      	str	r3, [sp, #92]	@ 0x5c
 800f608:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f60c:	9316      	str	r3, [sp, #88]	@ 0x58
 800f60e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f610:	9315      	str	r3, [sp, #84]	@ 0x54
 800f612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f614:	9314      	str	r3, [sp, #80]	@ 0x50
 800f616:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f61a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f61c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f61e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f622:	9311      	str	r3, [sp, #68]	@ 0x44
 800f624:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f628:	9310      	str	r3, [sp, #64]	@ 0x40
 800f62a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f62c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f62e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f630:	930e      	str	r3, [sp, #56]	@ 0x38
 800f632:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f636:	930d      	str	r3, [sp, #52]	@ 0x34
 800f638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f63a:	930c      	str	r3, [sp, #48]	@ 0x30
 800f63c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f63e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f644:	930a      	str	r3, [sp, #40]	@ 0x28
 800f646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f648:	9309      	str	r3, [sp, #36]	@ 0x24
 800f64a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f64c:	9308      	str	r3, [sp, #32]
 800f64e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f652:	9307      	str	r3, [sp, #28]
 800f654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f656:	9306      	str	r3, [sp, #24]
 800f658:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f65a:	9305      	str	r3, [sp, #20]
 800f65c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f660:	9304      	str	r3, [sp, #16]
 800f662:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f664:	9303      	str	r3, [sp, #12]
 800f666:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f66a:	9302      	str	r3, [sp, #8]
 800f66c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f670:	9301      	str	r3, [sp, #4]
 800f672:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	4673      	mov	r3, lr
 800f67a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f67e:	4917      	ldr	r1, [pc, #92]	@ (800f6dc <frame_processing+0x2398>)
 800f680:	4660      	mov	r0, ip
 800f682:	f001 fe03 	bl	801128c <siprintf>
		                    if (uart_choose_usart2) {
 800f686:	4b16      	ldr	r3, [pc, #88]	@ (800f6e0 <frame_processing+0x239c>)
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d005      	beq.n	800f69c <frame_processing+0x2358>
		                    	Uart_sendstring(USART2, buffer_0x13);
 800f690:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800f694:	4619      	mov	r1, r3
 800f696:	4813      	ldr	r0, [pc, #76]	@ (800f6e4 <frame_processing+0x23a0>)
 800f698:	f7f2 fcae 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x13);
 800f69c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	4811      	ldr	r0, [pc, #68]	@ (800f6e8 <frame_processing+0x23a4>)
 800f6a4:	f7f2 fca8 	bl	8001ff8 <Uart_sendstring>
						break;
 800f6a8:	e002      	b.n	800f6b0 <frame_processing+0x236c>
							clear_send_flag();
 800f6aa:	f7f2 fde7 	bl	800227c <clear_send_flag>
							break;
 800f6ae:	bf00      	nop
					clear_send_flag();
 800f6b0:	f7f2 fde4 	bl	800227c <clear_send_flag>
					return FSP_PKT_INVALID;
 800f6b4:	2302      	movs	r3, #2
 800f6b6:	e004      	b.n	800f6c2 <frame_processing+0x237e>
		default:
			clear_send_flag();
 800f6b8:	f7f2 fde0 	bl	800227c <clear_send_flag>
			return FSP_PKT_WRONG_ADR;
 800f6bc:	2303      	movs	r3, #3
 800f6be:	e000      	b.n	800f6c2 <frame_processing+0x237e>
			break;

	}
	return 0;
 800f6c0:	2300      	movs	r3, #0

}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f507 67c7 	add.w	r7, r7, #1592	@ 0x638
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ce:	bf00      	nop
 800f6d0:	08016684 	.word	0x08016684
 800f6d4:	66666667 	.word	0x66666667
 800f6d8:	51eb851f 	.word	0x51eb851f
 800f6dc:	08016d5c 	.word	0x08016d5c
 800f6e0:	20007994 	.word	0x20007994
 800f6e4:	40004400 	.word	0x40004400
 800f6e8:	40004c00 	.word	0x40004c00

0800f6ec <atof>:
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	f000 be0d 	b.w	801030c <strtod>

0800f6f2 <atoi>:
 800f6f2:	220a      	movs	r2, #10
 800f6f4:	2100      	movs	r1, #0
 800f6f6:	f000 be91 	b.w	801041c <strtol>

0800f6fa <sulp>:
 800f6fa:	b570      	push	{r4, r5, r6, lr}
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	460d      	mov	r5, r1
 800f700:	ec45 4b10 	vmov	d0, r4, r5
 800f704:	4616      	mov	r6, r2
 800f706:	f003 fd6f 	bl	80131e8 <__ulp>
 800f70a:	ec51 0b10 	vmov	r0, r1, d0
 800f70e:	b17e      	cbz	r6, 800f730 <sulp+0x36>
 800f710:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f714:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f718:	2b00      	cmp	r3, #0
 800f71a:	dd09      	ble.n	800f730 <sulp+0x36>
 800f71c:	051b      	lsls	r3, r3, #20
 800f71e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f722:	2400      	movs	r4, #0
 800f724:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f728:	4622      	mov	r2, r4
 800f72a:	462b      	mov	r3, r5
 800f72c:	f7f0 ff74 	bl	8000618 <__aeabi_dmul>
 800f730:	ec41 0b10 	vmov	d0, r0, r1
 800f734:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f738 <_strtod_l>:
 800f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73c:	b09f      	sub	sp, #124	@ 0x7c
 800f73e:	460c      	mov	r4, r1
 800f740:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f742:	2200      	movs	r2, #0
 800f744:	921a      	str	r2, [sp, #104]	@ 0x68
 800f746:	9005      	str	r0, [sp, #20]
 800f748:	f04f 0a00 	mov.w	sl, #0
 800f74c:	f04f 0b00 	mov.w	fp, #0
 800f750:	460a      	mov	r2, r1
 800f752:	9219      	str	r2, [sp, #100]	@ 0x64
 800f754:	7811      	ldrb	r1, [r2, #0]
 800f756:	292b      	cmp	r1, #43	@ 0x2b
 800f758:	d04a      	beq.n	800f7f0 <_strtod_l+0xb8>
 800f75a:	d838      	bhi.n	800f7ce <_strtod_l+0x96>
 800f75c:	290d      	cmp	r1, #13
 800f75e:	d832      	bhi.n	800f7c6 <_strtod_l+0x8e>
 800f760:	2908      	cmp	r1, #8
 800f762:	d832      	bhi.n	800f7ca <_strtod_l+0x92>
 800f764:	2900      	cmp	r1, #0
 800f766:	d03b      	beq.n	800f7e0 <_strtod_l+0xa8>
 800f768:	2200      	movs	r2, #0
 800f76a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f76c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f76e:	782a      	ldrb	r2, [r5, #0]
 800f770:	2a30      	cmp	r2, #48	@ 0x30
 800f772:	f040 80b3 	bne.w	800f8dc <_strtod_l+0x1a4>
 800f776:	786a      	ldrb	r2, [r5, #1]
 800f778:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f77c:	2a58      	cmp	r2, #88	@ 0x58
 800f77e:	d16e      	bne.n	800f85e <_strtod_l+0x126>
 800f780:	9302      	str	r3, [sp, #8]
 800f782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f784:	9301      	str	r3, [sp, #4]
 800f786:	ab1a      	add	r3, sp, #104	@ 0x68
 800f788:	9300      	str	r3, [sp, #0]
 800f78a:	4a8e      	ldr	r2, [pc, #568]	@ (800f9c4 <_strtod_l+0x28c>)
 800f78c:	9805      	ldr	r0, [sp, #20]
 800f78e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f790:	a919      	add	r1, sp, #100	@ 0x64
 800f792:	f002 fe1b 	bl	80123cc <__gethex>
 800f796:	f010 060f 	ands.w	r6, r0, #15
 800f79a:	4604      	mov	r4, r0
 800f79c:	d005      	beq.n	800f7aa <_strtod_l+0x72>
 800f79e:	2e06      	cmp	r6, #6
 800f7a0:	d128      	bne.n	800f7f4 <_strtod_l+0xbc>
 800f7a2:	3501      	adds	r5, #1
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800f7a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	f040 858e 	bne.w	80102ce <_strtod_l+0xb96>
 800f7b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7b4:	b1cb      	cbz	r3, 800f7ea <_strtod_l+0xb2>
 800f7b6:	4652      	mov	r2, sl
 800f7b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f7bc:	ec43 2b10 	vmov	d0, r2, r3
 800f7c0:	b01f      	add	sp, #124	@ 0x7c
 800f7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c6:	2920      	cmp	r1, #32
 800f7c8:	d1ce      	bne.n	800f768 <_strtod_l+0x30>
 800f7ca:	3201      	adds	r2, #1
 800f7cc:	e7c1      	b.n	800f752 <_strtod_l+0x1a>
 800f7ce:	292d      	cmp	r1, #45	@ 0x2d
 800f7d0:	d1ca      	bne.n	800f768 <_strtod_l+0x30>
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f7d6:	1c51      	adds	r1, r2, #1
 800f7d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800f7da:	7852      	ldrb	r2, [r2, #1]
 800f7dc:	2a00      	cmp	r2, #0
 800f7de:	d1c5      	bne.n	800f76c <_strtod_l+0x34>
 800f7e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f7e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f040 8570 	bne.w	80102ca <_strtod_l+0xb92>
 800f7ea:	4652      	mov	r2, sl
 800f7ec:	465b      	mov	r3, fp
 800f7ee:	e7e5      	b.n	800f7bc <_strtod_l+0x84>
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	e7ef      	b.n	800f7d4 <_strtod_l+0x9c>
 800f7f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f7f6:	b13a      	cbz	r2, 800f808 <_strtod_l+0xd0>
 800f7f8:	2135      	movs	r1, #53	@ 0x35
 800f7fa:	a81c      	add	r0, sp, #112	@ 0x70
 800f7fc:	f003 fdee 	bl	80133dc <__copybits>
 800f800:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f802:	9805      	ldr	r0, [sp, #20]
 800f804:	f003 f9bc 	bl	8012b80 <_Bfree>
 800f808:	3e01      	subs	r6, #1
 800f80a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f80c:	2e04      	cmp	r6, #4
 800f80e:	d806      	bhi.n	800f81e <_strtod_l+0xe6>
 800f810:	e8df f006 	tbb	[pc, r6]
 800f814:	201d0314 	.word	0x201d0314
 800f818:	14          	.byte	0x14
 800f819:	00          	.byte	0x00
 800f81a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f81e:	05e1      	lsls	r1, r4, #23
 800f820:	bf48      	it	mi
 800f822:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f82a:	0d1b      	lsrs	r3, r3, #20
 800f82c:	051b      	lsls	r3, r3, #20
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1bb      	bne.n	800f7aa <_strtod_l+0x72>
 800f832:	f001 fe65 	bl	8011500 <__errno>
 800f836:	2322      	movs	r3, #34	@ 0x22
 800f838:	6003      	str	r3, [r0, #0]
 800f83a:	e7b6      	b.n	800f7aa <_strtod_l+0x72>
 800f83c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f840:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f844:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f848:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f84c:	e7e7      	b.n	800f81e <_strtod_l+0xe6>
 800f84e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f9cc <_strtod_l+0x294>
 800f852:	e7e4      	b.n	800f81e <_strtod_l+0xe6>
 800f854:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f858:	f04f 3aff 	mov.w	sl, #4294967295
 800f85c:	e7df      	b.n	800f81e <_strtod_l+0xe6>
 800f85e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f860:	1c5a      	adds	r2, r3, #1
 800f862:	9219      	str	r2, [sp, #100]	@ 0x64
 800f864:	785b      	ldrb	r3, [r3, #1]
 800f866:	2b30      	cmp	r3, #48	@ 0x30
 800f868:	d0f9      	beq.n	800f85e <_strtod_l+0x126>
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d09d      	beq.n	800f7aa <_strtod_l+0x72>
 800f86e:	2301      	movs	r3, #1
 800f870:	9309      	str	r3, [sp, #36]	@ 0x24
 800f872:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f874:	930c      	str	r3, [sp, #48]	@ 0x30
 800f876:	2300      	movs	r3, #0
 800f878:	9308      	str	r3, [sp, #32]
 800f87a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f87c:	461f      	mov	r7, r3
 800f87e:	220a      	movs	r2, #10
 800f880:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f882:	7805      	ldrb	r5, [r0, #0]
 800f884:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f888:	b2d9      	uxtb	r1, r3
 800f88a:	2909      	cmp	r1, #9
 800f88c:	d928      	bls.n	800f8e0 <_strtod_l+0x1a8>
 800f88e:	494e      	ldr	r1, [pc, #312]	@ (800f9c8 <_strtod_l+0x290>)
 800f890:	2201      	movs	r2, #1
 800f892:	f001 fd66 	bl	8011362 <strncmp>
 800f896:	2800      	cmp	r0, #0
 800f898:	d032      	beq.n	800f900 <_strtod_l+0x1c8>
 800f89a:	2000      	movs	r0, #0
 800f89c:	462a      	mov	r2, r5
 800f89e:	4681      	mov	r9, r0
 800f8a0:	463d      	mov	r5, r7
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2a65      	cmp	r2, #101	@ 0x65
 800f8a6:	d001      	beq.n	800f8ac <_strtod_l+0x174>
 800f8a8:	2a45      	cmp	r2, #69	@ 0x45
 800f8aa:	d114      	bne.n	800f8d6 <_strtod_l+0x19e>
 800f8ac:	b91d      	cbnz	r5, 800f8b6 <_strtod_l+0x17e>
 800f8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8b0:	4302      	orrs	r2, r0
 800f8b2:	d095      	beq.n	800f7e0 <_strtod_l+0xa8>
 800f8b4:	2500      	movs	r5, #0
 800f8b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f8b8:	1c62      	adds	r2, r4, #1
 800f8ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800f8bc:	7862      	ldrb	r2, [r4, #1]
 800f8be:	2a2b      	cmp	r2, #43	@ 0x2b
 800f8c0:	d077      	beq.n	800f9b2 <_strtod_l+0x27a>
 800f8c2:	2a2d      	cmp	r2, #45	@ 0x2d
 800f8c4:	d07b      	beq.n	800f9be <_strtod_l+0x286>
 800f8c6:	f04f 0c00 	mov.w	ip, #0
 800f8ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f8ce:	2909      	cmp	r1, #9
 800f8d0:	f240 8082 	bls.w	800f9d8 <_strtod_l+0x2a0>
 800f8d4:	9419      	str	r4, [sp, #100]	@ 0x64
 800f8d6:	f04f 0800 	mov.w	r8, #0
 800f8da:	e0a2      	b.n	800fa22 <_strtod_l+0x2ea>
 800f8dc:	2300      	movs	r3, #0
 800f8de:	e7c7      	b.n	800f870 <_strtod_l+0x138>
 800f8e0:	2f08      	cmp	r7, #8
 800f8e2:	bfd5      	itete	le
 800f8e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f8e6:	9908      	ldrgt	r1, [sp, #32]
 800f8e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800f8ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f8f0:	f100 0001 	add.w	r0, r0, #1
 800f8f4:	bfd4      	ite	le
 800f8f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f8f8:	9308      	strgt	r3, [sp, #32]
 800f8fa:	3701      	adds	r7, #1
 800f8fc:	9019      	str	r0, [sp, #100]	@ 0x64
 800f8fe:	e7bf      	b.n	800f880 <_strtod_l+0x148>
 800f900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	9219      	str	r2, [sp, #100]	@ 0x64
 800f906:	785a      	ldrb	r2, [r3, #1]
 800f908:	b37f      	cbz	r7, 800f96a <_strtod_l+0x232>
 800f90a:	4681      	mov	r9, r0
 800f90c:	463d      	mov	r5, r7
 800f90e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f912:	2b09      	cmp	r3, #9
 800f914:	d912      	bls.n	800f93c <_strtod_l+0x204>
 800f916:	2301      	movs	r3, #1
 800f918:	e7c4      	b.n	800f8a4 <_strtod_l+0x16c>
 800f91a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f91c:	1c5a      	adds	r2, r3, #1
 800f91e:	9219      	str	r2, [sp, #100]	@ 0x64
 800f920:	785a      	ldrb	r2, [r3, #1]
 800f922:	3001      	adds	r0, #1
 800f924:	2a30      	cmp	r2, #48	@ 0x30
 800f926:	d0f8      	beq.n	800f91a <_strtod_l+0x1e2>
 800f928:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f92c:	2b08      	cmp	r3, #8
 800f92e:	f200 84d3 	bhi.w	80102d8 <_strtod_l+0xba0>
 800f932:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f934:	930c      	str	r3, [sp, #48]	@ 0x30
 800f936:	4681      	mov	r9, r0
 800f938:	2000      	movs	r0, #0
 800f93a:	4605      	mov	r5, r0
 800f93c:	3a30      	subs	r2, #48	@ 0x30
 800f93e:	f100 0301 	add.w	r3, r0, #1
 800f942:	d02a      	beq.n	800f99a <_strtod_l+0x262>
 800f944:	4499      	add	r9, r3
 800f946:	eb00 0c05 	add.w	ip, r0, r5
 800f94a:	462b      	mov	r3, r5
 800f94c:	210a      	movs	r1, #10
 800f94e:	4563      	cmp	r3, ip
 800f950:	d10d      	bne.n	800f96e <_strtod_l+0x236>
 800f952:	1c69      	adds	r1, r5, #1
 800f954:	4401      	add	r1, r0
 800f956:	4428      	add	r0, r5
 800f958:	2808      	cmp	r0, #8
 800f95a:	dc16      	bgt.n	800f98a <_strtod_l+0x252>
 800f95c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f95e:	230a      	movs	r3, #10
 800f960:	fb03 2300 	mla	r3, r3, r0, r2
 800f964:	930a      	str	r3, [sp, #40]	@ 0x28
 800f966:	2300      	movs	r3, #0
 800f968:	e018      	b.n	800f99c <_strtod_l+0x264>
 800f96a:	4638      	mov	r0, r7
 800f96c:	e7da      	b.n	800f924 <_strtod_l+0x1ec>
 800f96e:	2b08      	cmp	r3, #8
 800f970:	f103 0301 	add.w	r3, r3, #1
 800f974:	dc03      	bgt.n	800f97e <_strtod_l+0x246>
 800f976:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f978:	434e      	muls	r6, r1
 800f97a:	960a      	str	r6, [sp, #40]	@ 0x28
 800f97c:	e7e7      	b.n	800f94e <_strtod_l+0x216>
 800f97e:	2b10      	cmp	r3, #16
 800f980:	bfde      	ittt	le
 800f982:	9e08      	ldrle	r6, [sp, #32]
 800f984:	434e      	mulle	r6, r1
 800f986:	9608      	strle	r6, [sp, #32]
 800f988:	e7e1      	b.n	800f94e <_strtod_l+0x216>
 800f98a:	280f      	cmp	r0, #15
 800f98c:	dceb      	bgt.n	800f966 <_strtod_l+0x22e>
 800f98e:	9808      	ldr	r0, [sp, #32]
 800f990:	230a      	movs	r3, #10
 800f992:	fb03 2300 	mla	r3, r3, r0, r2
 800f996:	9308      	str	r3, [sp, #32]
 800f998:	e7e5      	b.n	800f966 <_strtod_l+0x22e>
 800f99a:	4629      	mov	r1, r5
 800f99c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f99e:	1c50      	adds	r0, r2, #1
 800f9a0:	9019      	str	r0, [sp, #100]	@ 0x64
 800f9a2:	7852      	ldrb	r2, [r2, #1]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	460d      	mov	r5, r1
 800f9a8:	e7b1      	b.n	800f90e <_strtod_l+0x1d6>
 800f9aa:	f04f 0900 	mov.w	r9, #0
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e77d      	b.n	800f8ae <_strtod_l+0x176>
 800f9b2:	f04f 0c00 	mov.w	ip, #0
 800f9b6:	1ca2      	adds	r2, r4, #2
 800f9b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800f9ba:	78a2      	ldrb	r2, [r4, #2]
 800f9bc:	e785      	b.n	800f8ca <_strtod_l+0x192>
 800f9be:	f04f 0c01 	mov.w	ip, #1
 800f9c2:	e7f8      	b.n	800f9b6 <_strtod_l+0x27e>
 800f9c4:	08016f10 	.word	0x08016f10
 800f9c8:	08016ef8 	.word	0x08016ef8
 800f9cc:	7ff00000 	.word	0x7ff00000
 800f9d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f9d2:	1c51      	adds	r1, r2, #1
 800f9d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800f9d6:	7852      	ldrb	r2, [r2, #1]
 800f9d8:	2a30      	cmp	r2, #48	@ 0x30
 800f9da:	d0f9      	beq.n	800f9d0 <_strtod_l+0x298>
 800f9dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f9e0:	2908      	cmp	r1, #8
 800f9e2:	f63f af78 	bhi.w	800f8d6 <_strtod_l+0x19e>
 800f9e6:	3a30      	subs	r2, #48	@ 0x30
 800f9e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f9ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f9ee:	f04f 080a 	mov.w	r8, #10
 800f9f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f9f4:	1c56      	adds	r6, r2, #1
 800f9f6:	9619      	str	r6, [sp, #100]	@ 0x64
 800f9f8:	7852      	ldrb	r2, [r2, #1]
 800f9fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f9fe:	f1be 0f09 	cmp.w	lr, #9
 800fa02:	d939      	bls.n	800fa78 <_strtod_l+0x340>
 800fa04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fa06:	1a76      	subs	r6, r6, r1
 800fa08:	2e08      	cmp	r6, #8
 800fa0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800fa0e:	dc03      	bgt.n	800fa18 <_strtod_l+0x2e0>
 800fa10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fa12:	4588      	cmp	r8, r1
 800fa14:	bfa8      	it	ge
 800fa16:	4688      	movge	r8, r1
 800fa18:	f1bc 0f00 	cmp.w	ip, #0
 800fa1c:	d001      	beq.n	800fa22 <_strtod_l+0x2ea>
 800fa1e:	f1c8 0800 	rsb	r8, r8, #0
 800fa22:	2d00      	cmp	r5, #0
 800fa24:	d14e      	bne.n	800fac4 <_strtod_l+0x38c>
 800fa26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa28:	4308      	orrs	r0, r1
 800fa2a:	f47f aebe 	bne.w	800f7aa <_strtod_l+0x72>
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f47f aed6 	bne.w	800f7e0 <_strtod_l+0xa8>
 800fa34:	2a69      	cmp	r2, #105	@ 0x69
 800fa36:	d028      	beq.n	800fa8a <_strtod_l+0x352>
 800fa38:	dc25      	bgt.n	800fa86 <_strtod_l+0x34e>
 800fa3a:	2a49      	cmp	r2, #73	@ 0x49
 800fa3c:	d025      	beq.n	800fa8a <_strtod_l+0x352>
 800fa3e:	2a4e      	cmp	r2, #78	@ 0x4e
 800fa40:	f47f aece 	bne.w	800f7e0 <_strtod_l+0xa8>
 800fa44:	499b      	ldr	r1, [pc, #620]	@ (800fcb4 <_strtod_l+0x57c>)
 800fa46:	a819      	add	r0, sp, #100	@ 0x64
 800fa48:	f002 fee2 	bl	8012810 <__match>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	f43f aec7 	beq.w	800f7e0 <_strtod_l+0xa8>
 800fa52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	2b28      	cmp	r3, #40	@ 0x28
 800fa58:	d12e      	bne.n	800fab8 <_strtod_l+0x380>
 800fa5a:	4997      	ldr	r1, [pc, #604]	@ (800fcb8 <_strtod_l+0x580>)
 800fa5c:	aa1c      	add	r2, sp, #112	@ 0x70
 800fa5e:	a819      	add	r0, sp, #100	@ 0x64
 800fa60:	f002 feea 	bl	8012838 <__hexnan>
 800fa64:	2805      	cmp	r0, #5
 800fa66:	d127      	bne.n	800fab8 <_strtod_l+0x380>
 800fa68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fa6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fa6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fa72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fa76:	e698      	b.n	800f7aa <_strtod_l+0x72>
 800fa78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fa7a:	fb08 2101 	mla	r1, r8, r1, r2
 800fa7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fa82:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa84:	e7b5      	b.n	800f9f2 <_strtod_l+0x2ba>
 800fa86:	2a6e      	cmp	r2, #110	@ 0x6e
 800fa88:	e7da      	b.n	800fa40 <_strtod_l+0x308>
 800fa8a:	498c      	ldr	r1, [pc, #560]	@ (800fcbc <_strtod_l+0x584>)
 800fa8c:	a819      	add	r0, sp, #100	@ 0x64
 800fa8e:	f002 febf 	bl	8012810 <__match>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	f43f aea4 	beq.w	800f7e0 <_strtod_l+0xa8>
 800fa98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa9a:	4989      	ldr	r1, [pc, #548]	@ (800fcc0 <_strtod_l+0x588>)
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	a819      	add	r0, sp, #100	@ 0x64
 800faa0:	9319      	str	r3, [sp, #100]	@ 0x64
 800faa2:	f002 feb5 	bl	8012810 <__match>
 800faa6:	b910      	cbnz	r0, 800faae <_strtod_l+0x376>
 800faa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800faaa:	3301      	adds	r3, #1
 800faac:	9319      	str	r3, [sp, #100]	@ 0x64
 800faae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fcd0 <_strtod_l+0x598>
 800fab2:	f04f 0a00 	mov.w	sl, #0
 800fab6:	e678      	b.n	800f7aa <_strtod_l+0x72>
 800fab8:	4882      	ldr	r0, [pc, #520]	@ (800fcc4 <_strtod_l+0x58c>)
 800faba:	f001 fd5d 	bl	8011578 <nan>
 800fabe:	ec5b ab10 	vmov	sl, fp, d0
 800fac2:	e672      	b.n	800f7aa <_strtod_l+0x72>
 800fac4:	eba8 0309 	sub.w	r3, r8, r9
 800fac8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800faca:	9309      	str	r3, [sp, #36]	@ 0x24
 800facc:	2f00      	cmp	r7, #0
 800face:	bf08      	it	eq
 800fad0:	462f      	moveq	r7, r5
 800fad2:	2d10      	cmp	r5, #16
 800fad4:	462c      	mov	r4, r5
 800fad6:	bfa8      	it	ge
 800fad8:	2410      	movge	r4, #16
 800fada:	f7f0 fd23 	bl	8000524 <__aeabi_ui2d>
 800fade:	2d09      	cmp	r5, #9
 800fae0:	4682      	mov	sl, r0
 800fae2:	468b      	mov	fp, r1
 800fae4:	dc13      	bgt.n	800fb0e <_strtod_l+0x3d6>
 800fae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f43f ae5e 	beq.w	800f7aa <_strtod_l+0x72>
 800faee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faf0:	dd78      	ble.n	800fbe4 <_strtod_l+0x4ac>
 800faf2:	2b16      	cmp	r3, #22
 800faf4:	dc5f      	bgt.n	800fbb6 <_strtod_l+0x47e>
 800faf6:	4974      	ldr	r1, [pc, #464]	@ (800fcc8 <_strtod_l+0x590>)
 800faf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fafc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb00:	4652      	mov	r2, sl
 800fb02:	465b      	mov	r3, fp
 800fb04:	f7f0 fd88 	bl	8000618 <__aeabi_dmul>
 800fb08:	4682      	mov	sl, r0
 800fb0a:	468b      	mov	fp, r1
 800fb0c:	e64d      	b.n	800f7aa <_strtod_l+0x72>
 800fb0e:	4b6e      	ldr	r3, [pc, #440]	@ (800fcc8 <_strtod_l+0x590>)
 800fb10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fb18:	f7f0 fd7e 	bl	8000618 <__aeabi_dmul>
 800fb1c:	4682      	mov	sl, r0
 800fb1e:	9808      	ldr	r0, [sp, #32]
 800fb20:	468b      	mov	fp, r1
 800fb22:	f7f0 fcff 	bl	8000524 <__aeabi_ui2d>
 800fb26:	4602      	mov	r2, r0
 800fb28:	460b      	mov	r3, r1
 800fb2a:	4650      	mov	r0, sl
 800fb2c:	4659      	mov	r1, fp
 800fb2e:	f7f0 fbbd 	bl	80002ac <__adddf3>
 800fb32:	2d0f      	cmp	r5, #15
 800fb34:	4682      	mov	sl, r0
 800fb36:	468b      	mov	fp, r1
 800fb38:	ddd5      	ble.n	800fae6 <_strtod_l+0x3ae>
 800fb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb3c:	1b2c      	subs	r4, r5, r4
 800fb3e:	441c      	add	r4, r3
 800fb40:	2c00      	cmp	r4, #0
 800fb42:	f340 8096 	ble.w	800fc72 <_strtod_l+0x53a>
 800fb46:	f014 030f 	ands.w	r3, r4, #15
 800fb4a:	d00a      	beq.n	800fb62 <_strtod_l+0x42a>
 800fb4c:	495e      	ldr	r1, [pc, #376]	@ (800fcc8 <_strtod_l+0x590>)
 800fb4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fb52:	4652      	mov	r2, sl
 800fb54:	465b      	mov	r3, fp
 800fb56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb5a:	f7f0 fd5d 	bl	8000618 <__aeabi_dmul>
 800fb5e:	4682      	mov	sl, r0
 800fb60:	468b      	mov	fp, r1
 800fb62:	f034 040f 	bics.w	r4, r4, #15
 800fb66:	d073      	beq.n	800fc50 <_strtod_l+0x518>
 800fb68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fb6c:	dd48      	ble.n	800fc00 <_strtod_l+0x4c8>
 800fb6e:	2400      	movs	r4, #0
 800fb70:	46a0      	mov	r8, r4
 800fb72:	940a      	str	r4, [sp, #40]	@ 0x28
 800fb74:	46a1      	mov	r9, r4
 800fb76:	9a05      	ldr	r2, [sp, #20]
 800fb78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fcd0 <_strtod_l+0x598>
 800fb7c:	2322      	movs	r3, #34	@ 0x22
 800fb7e:	6013      	str	r3, [r2, #0]
 800fb80:	f04f 0a00 	mov.w	sl, #0
 800fb84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f43f ae0f 	beq.w	800f7aa <_strtod_l+0x72>
 800fb8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fb8e:	9805      	ldr	r0, [sp, #20]
 800fb90:	f002 fff6 	bl	8012b80 <_Bfree>
 800fb94:	9805      	ldr	r0, [sp, #20]
 800fb96:	4649      	mov	r1, r9
 800fb98:	f002 fff2 	bl	8012b80 <_Bfree>
 800fb9c:	9805      	ldr	r0, [sp, #20]
 800fb9e:	4641      	mov	r1, r8
 800fba0:	f002 ffee 	bl	8012b80 <_Bfree>
 800fba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fba6:	9805      	ldr	r0, [sp, #20]
 800fba8:	f002 ffea 	bl	8012b80 <_Bfree>
 800fbac:	9805      	ldr	r0, [sp, #20]
 800fbae:	4621      	mov	r1, r4
 800fbb0:	f002 ffe6 	bl	8012b80 <_Bfree>
 800fbb4:	e5f9      	b.n	800f7aa <_strtod_l+0x72>
 800fbb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	dbbc      	blt.n	800fb3a <_strtod_l+0x402>
 800fbc0:	4c41      	ldr	r4, [pc, #260]	@ (800fcc8 <_strtod_l+0x590>)
 800fbc2:	f1c5 050f 	rsb	r5, r5, #15
 800fbc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fbca:	4652      	mov	r2, sl
 800fbcc:	465b      	mov	r3, fp
 800fbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbd2:	f7f0 fd21 	bl	8000618 <__aeabi_dmul>
 800fbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbd8:	1b5d      	subs	r5, r3, r5
 800fbda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fbde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fbe2:	e78f      	b.n	800fb04 <_strtod_l+0x3cc>
 800fbe4:	3316      	adds	r3, #22
 800fbe6:	dba8      	blt.n	800fb3a <_strtod_l+0x402>
 800fbe8:	4b37      	ldr	r3, [pc, #220]	@ (800fcc8 <_strtod_l+0x590>)
 800fbea:	eba9 0808 	sub.w	r8, r9, r8
 800fbee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fbf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fbf6:	4650      	mov	r0, sl
 800fbf8:	4659      	mov	r1, fp
 800fbfa:	f7f0 fe37 	bl	800086c <__aeabi_ddiv>
 800fbfe:	e783      	b.n	800fb08 <_strtod_l+0x3d0>
 800fc00:	4b32      	ldr	r3, [pc, #200]	@ (800fccc <_strtod_l+0x594>)
 800fc02:	9308      	str	r3, [sp, #32]
 800fc04:	2300      	movs	r3, #0
 800fc06:	1124      	asrs	r4, r4, #4
 800fc08:	4650      	mov	r0, sl
 800fc0a:	4659      	mov	r1, fp
 800fc0c:	461e      	mov	r6, r3
 800fc0e:	2c01      	cmp	r4, #1
 800fc10:	dc21      	bgt.n	800fc56 <_strtod_l+0x51e>
 800fc12:	b10b      	cbz	r3, 800fc18 <_strtod_l+0x4e0>
 800fc14:	4682      	mov	sl, r0
 800fc16:	468b      	mov	fp, r1
 800fc18:	492c      	ldr	r1, [pc, #176]	@ (800fccc <_strtod_l+0x594>)
 800fc1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fc1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fc22:	4652      	mov	r2, sl
 800fc24:	465b      	mov	r3, fp
 800fc26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc2a:	f7f0 fcf5 	bl	8000618 <__aeabi_dmul>
 800fc2e:	4b28      	ldr	r3, [pc, #160]	@ (800fcd0 <_strtod_l+0x598>)
 800fc30:	460a      	mov	r2, r1
 800fc32:	400b      	ands	r3, r1
 800fc34:	4927      	ldr	r1, [pc, #156]	@ (800fcd4 <_strtod_l+0x59c>)
 800fc36:	428b      	cmp	r3, r1
 800fc38:	4682      	mov	sl, r0
 800fc3a:	d898      	bhi.n	800fb6e <_strtod_l+0x436>
 800fc3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fc40:	428b      	cmp	r3, r1
 800fc42:	bf86      	itte	hi
 800fc44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fcd8 <_strtod_l+0x5a0>
 800fc48:	f04f 3aff 	movhi.w	sl, #4294967295
 800fc4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fc50:	2300      	movs	r3, #0
 800fc52:	9308      	str	r3, [sp, #32]
 800fc54:	e07a      	b.n	800fd4c <_strtod_l+0x614>
 800fc56:	07e2      	lsls	r2, r4, #31
 800fc58:	d505      	bpl.n	800fc66 <_strtod_l+0x52e>
 800fc5a:	9b08      	ldr	r3, [sp, #32]
 800fc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc60:	f7f0 fcda 	bl	8000618 <__aeabi_dmul>
 800fc64:	2301      	movs	r3, #1
 800fc66:	9a08      	ldr	r2, [sp, #32]
 800fc68:	3208      	adds	r2, #8
 800fc6a:	3601      	adds	r6, #1
 800fc6c:	1064      	asrs	r4, r4, #1
 800fc6e:	9208      	str	r2, [sp, #32]
 800fc70:	e7cd      	b.n	800fc0e <_strtod_l+0x4d6>
 800fc72:	d0ed      	beq.n	800fc50 <_strtod_l+0x518>
 800fc74:	4264      	negs	r4, r4
 800fc76:	f014 020f 	ands.w	r2, r4, #15
 800fc7a:	d00a      	beq.n	800fc92 <_strtod_l+0x55a>
 800fc7c:	4b12      	ldr	r3, [pc, #72]	@ (800fcc8 <_strtod_l+0x590>)
 800fc7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc82:	4650      	mov	r0, sl
 800fc84:	4659      	mov	r1, fp
 800fc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8a:	f7f0 fdef 	bl	800086c <__aeabi_ddiv>
 800fc8e:	4682      	mov	sl, r0
 800fc90:	468b      	mov	fp, r1
 800fc92:	1124      	asrs	r4, r4, #4
 800fc94:	d0dc      	beq.n	800fc50 <_strtod_l+0x518>
 800fc96:	2c1f      	cmp	r4, #31
 800fc98:	dd20      	ble.n	800fcdc <_strtod_l+0x5a4>
 800fc9a:	2400      	movs	r4, #0
 800fc9c:	46a0      	mov	r8, r4
 800fc9e:	940a      	str	r4, [sp, #40]	@ 0x28
 800fca0:	46a1      	mov	r9, r4
 800fca2:	9a05      	ldr	r2, [sp, #20]
 800fca4:	2322      	movs	r3, #34	@ 0x22
 800fca6:	f04f 0a00 	mov.w	sl, #0
 800fcaa:	f04f 0b00 	mov.w	fp, #0
 800fcae:	6013      	str	r3, [r2, #0]
 800fcb0:	e768      	b.n	800fb84 <_strtod_l+0x44c>
 800fcb2:	bf00      	nop
 800fcb4:	0801705e 	.word	0x0801705e
 800fcb8:	08016efc 	.word	0x08016efc
 800fcbc:	08017056 	.word	0x08017056
 800fcc0:	08017142 	.word	0x08017142
 800fcc4:	0801713e 	.word	0x0801713e
 800fcc8:	080172a8 	.word	0x080172a8
 800fccc:	08017280 	.word	0x08017280
 800fcd0:	7ff00000 	.word	0x7ff00000
 800fcd4:	7ca00000 	.word	0x7ca00000
 800fcd8:	7fefffff 	.word	0x7fefffff
 800fcdc:	f014 0310 	ands.w	r3, r4, #16
 800fce0:	bf18      	it	ne
 800fce2:	236a      	movne	r3, #106	@ 0x6a
 800fce4:	4ea9      	ldr	r6, [pc, #676]	@ (800ff8c <_strtod_l+0x854>)
 800fce6:	9308      	str	r3, [sp, #32]
 800fce8:	4650      	mov	r0, sl
 800fcea:	4659      	mov	r1, fp
 800fcec:	2300      	movs	r3, #0
 800fcee:	07e2      	lsls	r2, r4, #31
 800fcf0:	d504      	bpl.n	800fcfc <_strtod_l+0x5c4>
 800fcf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fcf6:	f7f0 fc8f 	bl	8000618 <__aeabi_dmul>
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	1064      	asrs	r4, r4, #1
 800fcfe:	f106 0608 	add.w	r6, r6, #8
 800fd02:	d1f4      	bne.n	800fcee <_strtod_l+0x5b6>
 800fd04:	b10b      	cbz	r3, 800fd0a <_strtod_l+0x5d2>
 800fd06:	4682      	mov	sl, r0
 800fd08:	468b      	mov	fp, r1
 800fd0a:	9b08      	ldr	r3, [sp, #32]
 800fd0c:	b1b3      	cbz	r3, 800fd3c <_strtod_l+0x604>
 800fd0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fd12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	4659      	mov	r1, fp
 800fd1a:	dd0f      	ble.n	800fd3c <_strtod_l+0x604>
 800fd1c:	2b1f      	cmp	r3, #31
 800fd1e:	dd55      	ble.n	800fdcc <_strtod_l+0x694>
 800fd20:	2b34      	cmp	r3, #52	@ 0x34
 800fd22:	bfde      	ittt	le
 800fd24:	f04f 33ff 	movle.w	r3, #4294967295
 800fd28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fd2c:	4093      	lslle	r3, r2
 800fd2e:	f04f 0a00 	mov.w	sl, #0
 800fd32:	bfcc      	ite	gt
 800fd34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fd38:	ea03 0b01 	andle.w	fp, r3, r1
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	2300      	movs	r3, #0
 800fd40:	4650      	mov	r0, sl
 800fd42:	4659      	mov	r1, fp
 800fd44:	f7f0 fed0 	bl	8000ae8 <__aeabi_dcmpeq>
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	d1a6      	bne.n	800fc9a <_strtod_l+0x562>
 800fd4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fd52:	9805      	ldr	r0, [sp, #20]
 800fd54:	462b      	mov	r3, r5
 800fd56:	463a      	mov	r2, r7
 800fd58:	f002 ff7a 	bl	8012c50 <__s2b>
 800fd5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	f43f af05 	beq.w	800fb6e <_strtod_l+0x436>
 800fd64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd66:	2a00      	cmp	r2, #0
 800fd68:	eba9 0308 	sub.w	r3, r9, r8
 800fd6c:	bfa8      	it	ge
 800fd6e:	2300      	movge	r3, #0
 800fd70:	9312      	str	r3, [sp, #72]	@ 0x48
 800fd72:	2400      	movs	r4, #0
 800fd74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fd78:	9316      	str	r3, [sp, #88]	@ 0x58
 800fd7a:	46a0      	mov	r8, r4
 800fd7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd7e:	9805      	ldr	r0, [sp, #20]
 800fd80:	6859      	ldr	r1, [r3, #4]
 800fd82:	f002 febd 	bl	8012b00 <_Balloc>
 800fd86:	4681      	mov	r9, r0
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	f43f aef4 	beq.w	800fb76 <_strtod_l+0x43e>
 800fd8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd90:	691a      	ldr	r2, [r3, #16]
 800fd92:	3202      	adds	r2, #2
 800fd94:	f103 010c 	add.w	r1, r3, #12
 800fd98:	0092      	lsls	r2, r2, #2
 800fd9a:	300c      	adds	r0, #12
 800fd9c:	f001 fbdd 	bl	801155a <memcpy>
 800fda0:	ec4b ab10 	vmov	d0, sl, fp
 800fda4:	9805      	ldr	r0, [sp, #20]
 800fda6:	aa1c      	add	r2, sp, #112	@ 0x70
 800fda8:	a91b      	add	r1, sp, #108	@ 0x6c
 800fdaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fdae:	f003 fa8b 	bl	80132c8 <__d2b>
 800fdb2:	901a      	str	r0, [sp, #104]	@ 0x68
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	f43f aede 	beq.w	800fb76 <_strtod_l+0x43e>
 800fdba:	9805      	ldr	r0, [sp, #20]
 800fdbc:	2101      	movs	r1, #1
 800fdbe:	f002 ffdd 	bl	8012d7c <__i2b>
 800fdc2:	4680      	mov	r8, r0
 800fdc4:	b948      	cbnz	r0, 800fdda <_strtod_l+0x6a2>
 800fdc6:	f04f 0800 	mov.w	r8, #0
 800fdca:	e6d4      	b.n	800fb76 <_strtod_l+0x43e>
 800fdcc:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd0:	fa02 f303 	lsl.w	r3, r2, r3
 800fdd4:	ea03 0a0a 	and.w	sl, r3, sl
 800fdd8:	e7b0      	b.n	800fd3c <_strtod_l+0x604>
 800fdda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fddc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fdde:	2d00      	cmp	r5, #0
 800fde0:	bfab      	itete	ge
 800fde2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fde4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fde6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fde8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fdea:	bfac      	ite	ge
 800fdec:	18ef      	addge	r7, r5, r3
 800fdee:	1b5e      	sublt	r6, r3, r5
 800fdf0:	9b08      	ldr	r3, [sp, #32]
 800fdf2:	1aed      	subs	r5, r5, r3
 800fdf4:	4415      	add	r5, r2
 800fdf6:	4b66      	ldr	r3, [pc, #408]	@ (800ff90 <_strtod_l+0x858>)
 800fdf8:	3d01      	subs	r5, #1
 800fdfa:	429d      	cmp	r5, r3
 800fdfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fe00:	da50      	bge.n	800fea4 <_strtod_l+0x76c>
 800fe02:	1b5b      	subs	r3, r3, r5
 800fe04:	2b1f      	cmp	r3, #31
 800fe06:	eba2 0203 	sub.w	r2, r2, r3
 800fe0a:	f04f 0101 	mov.w	r1, #1
 800fe0e:	dc3d      	bgt.n	800fe8c <_strtod_l+0x754>
 800fe10:	fa01 f303 	lsl.w	r3, r1, r3
 800fe14:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fe16:	2300      	movs	r3, #0
 800fe18:	9310      	str	r3, [sp, #64]	@ 0x40
 800fe1a:	18bd      	adds	r5, r7, r2
 800fe1c:	9b08      	ldr	r3, [sp, #32]
 800fe1e:	42af      	cmp	r7, r5
 800fe20:	4416      	add	r6, r2
 800fe22:	441e      	add	r6, r3
 800fe24:	463b      	mov	r3, r7
 800fe26:	bfa8      	it	ge
 800fe28:	462b      	movge	r3, r5
 800fe2a:	42b3      	cmp	r3, r6
 800fe2c:	bfa8      	it	ge
 800fe2e:	4633      	movge	r3, r6
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	bfc2      	ittt	gt
 800fe34:	1aed      	subgt	r5, r5, r3
 800fe36:	1af6      	subgt	r6, r6, r3
 800fe38:	1aff      	subgt	r7, r7, r3
 800fe3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	dd16      	ble.n	800fe6e <_strtod_l+0x736>
 800fe40:	4641      	mov	r1, r8
 800fe42:	9805      	ldr	r0, [sp, #20]
 800fe44:	461a      	mov	r2, r3
 800fe46:	f003 f859 	bl	8012efc <__pow5mult>
 800fe4a:	4680      	mov	r8, r0
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d0ba      	beq.n	800fdc6 <_strtod_l+0x68e>
 800fe50:	4601      	mov	r1, r0
 800fe52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fe54:	9805      	ldr	r0, [sp, #20]
 800fe56:	f002 ffa7 	bl	8012da8 <__multiply>
 800fe5a:	900e      	str	r0, [sp, #56]	@ 0x38
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	f43f ae8a 	beq.w	800fb76 <_strtod_l+0x43e>
 800fe62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fe64:	9805      	ldr	r0, [sp, #20]
 800fe66:	f002 fe8b 	bl	8012b80 <_Bfree>
 800fe6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe6e:	2d00      	cmp	r5, #0
 800fe70:	dc1d      	bgt.n	800feae <_strtod_l+0x776>
 800fe72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	dd23      	ble.n	800fec0 <_strtod_l+0x788>
 800fe78:	4649      	mov	r1, r9
 800fe7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fe7c:	9805      	ldr	r0, [sp, #20]
 800fe7e:	f003 f83d 	bl	8012efc <__pow5mult>
 800fe82:	4681      	mov	r9, r0
 800fe84:	b9e0      	cbnz	r0, 800fec0 <_strtod_l+0x788>
 800fe86:	f04f 0900 	mov.w	r9, #0
 800fe8a:	e674      	b.n	800fb76 <_strtod_l+0x43e>
 800fe8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fe90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fe94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fe98:	35e2      	adds	r5, #226	@ 0xe2
 800fe9a:	fa01 f305 	lsl.w	r3, r1, r5
 800fe9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800fea0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fea2:	e7ba      	b.n	800fe1a <_strtod_l+0x6e2>
 800fea4:	2300      	movs	r3, #0
 800fea6:	9310      	str	r3, [sp, #64]	@ 0x40
 800fea8:	2301      	movs	r3, #1
 800feaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800feac:	e7b5      	b.n	800fe1a <_strtod_l+0x6e2>
 800feae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800feb0:	9805      	ldr	r0, [sp, #20]
 800feb2:	462a      	mov	r2, r5
 800feb4:	f003 f87c 	bl	8012fb0 <__lshift>
 800feb8:	901a      	str	r0, [sp, #104]	@ 0x68
 800feba:	2800      	cmp	r0, #0
 800febc:	d1d9      	bne.n	800fe72 <_strtod_l+0x73a>
 800febe:	e65a      	b.n	800fb76 <_strtod_l+0x43e>
 800fec0:	2e00      	cmp	r6, #0
 800fec2:	dd07      	ble.n	800fed4 <_strtod_l+0x79c>
 800fec4:	4649      	mov	r1, r9
 800fec6:	9805      	ldr	r0, [sp, #20]
 800fec8:	4632      	mov	r2, r6
 800feca:	f003 f871 	bl	8012fb0 <__lshift>
 800fece:	4681      	mov	r9, r0
 800fed0:	2800      	cmp	r0, #0
 800fed2:	d0d8      	beq.n	800fe86 <_strtod_l+0x74e>
 800fed4:	2f00      	cmp	r7, #0
 800fed6:	dd08      	ble.n	800feea <_strtod_l+0x7b2>
 800fed8:	4641      	mov	r1, r8
 800feda:	9805      	ldr	r0, [sp, #20]
 800fedc:	463a      	mov	r2, r7
 800fede:	f003 f867 	bl	8012fb0 <__lshift>
 800fee2:	4680      	mov	r8, r0
 800fee4:	2800      	cmp	r0, #0
 800fee6:	f43f ae46 	beq.w	800fb76 <_strtod_l+0x43e>
 800feea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800feec:	9805      	ldr	r0, [sp, #20]
 800feee:	464a      	mov	r2, r9
 800fef0:	f003 f8e6 	bl	80130c0 <__mdiff>
 800fef4:	4604      	mov	r4, r0
 800fef6:	2800      	cmp	r0, #0
 800fef8:	f43f ae3d 	beq.w	800fb76 <_strtod_l+0x43e>
 800fefc:	68c3      	ldr	r3, [r0, #12]
 800fefe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff00:	2300      	movs	r3, #0
 800ff02:	60c3      	str	r3, [r0, #12]
 800ff04:	4641      	mov	r1, r8
 800ff06:	f003 f8bf 	bl	8013088 <__mcmp>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	da46      	bge.n	800ff9c <_strtod_l+0x864>
 800ff0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff10:	ea53 030a 	orrs.w	r3, r3, sl
 800ff14:	d16c      	bne.n	800fff0 <_strtod_l+0x8b8>
 800ff16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d168      	bne.n	800fff0 <_strtod_l+0x8b8>
 800ff1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ff22:	0d1b      	lsrs	r3, r3, #20
 800ff24:	051b      	lsls	r3, r3, #20
 800ff26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ff2a:	d961      	bls.n	800fff0 <_strtod_l+0x8b8>
 800ff2c:	6963      	ldr	r3, [r4, #20]
 800ff2e:	b913      	cbnz	r3, 800ff36 <_strtod_l+0x7fe>
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	dd5c      	ble.n	800fff0 <_strtod_l+0x8b8>
 800ff36:	4621      	mov	r1, r4
 800ff38:	2201      	movs	r2, #1
 800ff3a:	9805      	ldr	r0, [sp, #20]
 800ff3c:	f003 f838 	bl	8012fb0 <__lshift>
 800ff40:	4641      	mov	r1, r8
 800ff42:	4604      	mov	r4, r0
 800ff44:	f003 f8a0 	bl	8013088 <__mcmp>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	dd51      	ble.n	800fff0 <_strtod_l+0x8b8>
 800ff4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ff50:	9a08      	ldr	r2, [sp, #32]
 800ff52:	0d1b      	lsrs	r3, r3, #20
 800ff54:	051b      	lsls	r3, r3, #20
 800ff56:	2a00      	cmp	r2, #0
 800ff58:	d06b      	beq.n	8010032 <_strtod_l+0x8fa>
 800ff5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ff5e:	d868      	bhi.n	8010032 <_strtod_l+0x8fa>
 800ff60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ff64:	f67f ae9d 	bls.w	800fca2 <_strtod_l+0x56a>
 800ff68:	4b0a      	ldr	r3, [pc, #40]	@ (800ff94 <_strtod_l+0x85c>)
 800ff6a:	4650      	mov	r0, sl
 800ff6c:	4659      	mov	r1, fp
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f7f0 fb52 	bl	8000618 <__aeabi_dmul>
 800ff74:	4b08      	ldr	r3, [pc, #32]	@ (800ff98 <_strtod_l+0x860>)
 800ff76:	400b      	ands	r3, r1
 800ff78:	4682      	mov	sl, r0
 800ff7a:	468b      	mov	fp, r1
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f47f ae05 	bne.w	800fb8c <_strtod_l+0x454>
 800ff82:	9a05      	ldr	r2, [sp, #20]
 800ff84:	2322      	movs	r3, #34	@ 0x22
 800ff86:	6013      	str	r3, [r2, #0]
 800ff88:	e600      	b.n	800fb8c <_strtod_l+0x454>
 800ff8a:	bf00      	nop
 800ff8c:	08016f28 	.word	0x08016f28
 800ff90:	fffffc02 	.word	0xfffffc02
 800ff94:	39500000 	.word	0x39500000
 800ff98:	7ff00000 	.word	0x7ff00000
 800ff9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ffa0:	d165      	bne.n	801006e <_strtod_l+0x936>
 800ffa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ffa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ffa8:	b35a      	cbz	r2, 8010002 <_strtod_l+0x8ca>
 800ffaa:	4a9f      	ldr	r2, [pc, #636]	@ (8010228 <_strtod_l+0xaf0>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d12b      	bne.n	8010008 <_strtod_l+0x8d0>
 800ffb0:	9b08      	ldr	r3, [sp, #32]
 800ffb2:	4651      	mov	r1, sl
 800ffb4:	b303      	cbz	r3, 800fff8 <_strtod_l+0x8c0>
 800ffb6:	4b9d      	ldr	r3, [pc, #628]	@ (801022c <_strtod_l+0xaf4>)
 800ffb8:	465a      	mov	r2, fp
 800ffba:	4013      	ands	r3, r2
 800ffbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ffc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ffc4:	d81b      	bhi.n	800fffe <_strtod_l+0x8c6>
 800ffc6:	0d1b      	lsrs	r3, r3, #20
 800ffc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ffcc:	fa02 f303 	lsl.w	r3, r2, r3
 800ffd0:	4299      	cmp	r1, r3
 800ffd2:	d119      	bne.n	8010008 <_strtod_l+0x8d0>
 800ffd4:	4b96      	ldr	r3, [pc, #600]	@ (8010230 <_strtod_l+0xaf8>)
 800ffd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d102      	bne.n	800ffe2 <_strtod_l+0x8aa>
 800ffdc:	3101      	adds	r1, #1
 800ffde:	f43f adca 	beq.w	800fb76 <_strtod_l+0x43e>
 800ffe2:	4b92      	ldr	r3, [pc, #584]	@ (801022c <_strtod_l+0xaf4>)
 800ffe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffe6:	401a      	ands	r2, r3
 800ffe8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ffec:	f04f 0a00 	mov.w	sl, #0
 800fff0:	9b08      	ldr	r3, [sp, #32]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1b8      	bne.n	800ff68 <_strtod_l+0x830>
 800fff6:	e5c9      	b.n	800fb8c <_strtod_l+0x454>
 800fff8:	f04f 33ff 	mov.w	r3, #4294967295
 800fffc:	e7e8      	b.n	800ffd0 <_strtod_l+0x898>
 800fffe:	4613      	mov	r3, r2
 8010000:	e7e6      	b.n	800ffd0 <_strtod_l+0x898>
 8010002:	ea53 030a 	orrs.w	r3, r3, sl
 8010006:	d0a1      	beq.n	800ff4c <_strtod_l+0x814>
 8010008:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801000a:	b1db      	cbz	r3, 8010044 <_strtod_l+0x90c>
 801000c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801000e:	4213      	tst	r3, r2
 8010010:	d0ee      	beq.n	800fff0 <_strtod_l+0x8b8>
 8010012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010014:	9a08      	ldr	r2, [sp, #32]
 8010016:	4650      	mov	r0, sl
 8010018:	4659      	mov	r1, fp
 801001a:	b1bb      	cbz	r3, 801004c <_strtod_l+0x914>
 801001c:	f7ff fb6d 	bl	800f6fa <sulp>
 8010020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010024:	ec53 2b10 	vmov	r2, r3, d0
 8010028:	f7f0 f940 	bl	80002ac <__adddf3>
 801002c:	4682      	mov	sl, r0
 801002e:	468b      	mov	fp, r1
 8010030:	e7de      	b.n	800fff0 <_strtod_l+0x8b8>
 8010032:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010036:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801003a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801003e:	f04f 3aff 	mov.w	sl, #4294967295
 8010042:	e7d5      	b.n	800fff0 <_strtod_l+0x8b8>
 8010044:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010046:	ea13 0f0a 	tst.w	r3, sl
 801004a:	e7e1      	b.n	8010010 <_strtod_l+0x8d8>
 801004c:	f7ff fb55 	bl	800f6fa <sulp>
 8010050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010054:	ec53 2b10 	vmov	r2, r3, d0
 8010058:	f7f0 f926 	bl	80002a8 <__aeabi_dsub>
 801005c:	2200      	movs	r2, #0
 801005e:	2300      	movs	r3, #0
 8010060:	4682      	mov	sl, r0
 8010062:	468b      	mov	fp, r1
 8010064:	f7f0 fd40 	bl	8000ae8 <__aeabi_dcmpeq>
 8010068:	2800      	cmp	r0, #0
 801006a:	d0c1      	beq.n	800fff0 <_strtod_l+0x8b8>
 801006c:	e619      	b.n	800fca2 <_strtod_l+0x56a>
 801006e:	4641      	mov	r1, r8
 8010070:	4620      	mov	r0, r4
 8010072:	f003 f981 	bl	8013378 <__ratio>
 8010076:	ec57 6b10 	vmov	r6, r7, d0
 801007a:	2200      	movs	r2, #0
 801007c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010080:	4630      	mov	r0, r6
 8010082:	4639      	mov	r1, r7
 8010084:	f7f0 fd44 	bl	8000b10 <__aeabi_dcmple>
 8010088:	2800      	cmp	r0, #0
 801008a:	d06f      	beq.n	801016c <_strtod_l+0xa34>
 801008c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801008e:	2b00      	cmp	r3, #0
 8010090:	d17a      	bne.n	8010188 <_strtod_l+0xa50>
 8010092:	f1ba 0f00 	cmp.w	sl, #0
 8010096:	d158      	bne.n	801014a <_strtod_l+0xa12>
 8010098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801009a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d15a      	bne.n	8010158 <_strtod_l+0xa20>
 80100a2:	4b64      	ldr	r3, [pc, #400]	@ (8010234 <_strtod_l+0xafc>)
 80100a4:	2200      	movs	r2, #0
 80100a6:	4630      	mov	r0, r6
 80100a8:	4639      	mov	r1, r7
 80100aa:	f7f0 fd27 	bl	8000afc <__aeabi_dcmplt>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	d159      	bne.n	8010166 <_strtod_l+0xa2e>
 80100b2:	4630      	mov	r0, r6
 80100b4:	4639      	mov	r1, r7
 80100b6:	4b60      	ldr	r3, [pc, #384]	@ (8010238 <_strtod_l+0xb00>)
 80100b8:	2200      	movs	r2, #0
 80100ba:	f7f0 faad 	bl	8000618 <__aeabi_dmul>
 80100be:	4606      	mov	r6, r0
 80100c0:	460f      	mov	r7, r1
 80100c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80100c6:	9606      	str	r6, [sp, #24]
 80100c8:	9307      	str	r3, [sp, #28]
 80100ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80100ce:	4d57      	ldr	r5, [pc, #348]	@ (801022c <_strtod_l+0xaf4>)
 80100d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80100d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100d6:	401d      	ands	r5, r3
 80100d8:	4b58      	ldr	r3, [pc, #352]	@ (801023c <_strtod_l+0xb04>)
 80100da:	429d      	cmp	r5, r3
 80100dc:	f040 80b2 	bne.w	8010244 <_strtod_l+0xb0c>
 80100e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80100e6:	ec4b ab10 	vmov	d0, sl, fp
 80100ea:	f003 f87d 	bl	80131e8 <__ulp>
 80100ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80100f2:	ec51 0b10 	vmov	r0, r1, d0
 80100f6:	f7f0 fa8f 	bl	8000618 <__aeabi_dmul>
 80100fa:	4652      	mov	r2, sl
 80100fc:	465b      	mov	r3, fp
 80100fe:	f7f0 f8d5 	bl	80002ac <__adddf3>
 8010102:	460b      	mov	r3, r1
 8010104:	4949      	ldr	r1, [pc, #292]	@ (801022c <_strtod_l+0xaf4>)
 8010106:	4a4e      	ldr	r2, [pc, #312]	@ (8010240 <_strtod_l+0xb08>)
 8010108:	4019      	ands	r1, r3
 801010a:	4291      	cmp	r1, r2
 801010c:	4682      	mov	sl, r0
 801010e:	d942      	bls.n	8010196 <_strtod_l+0xa5e>
 8010110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010112:	4b47      	ldr	r3, [pc, #284]	@ (8010230 <_strtod_l+0xaf8>)
 8010114:	429a      	cmp	r2, r3
 8010116:	d103      	bne.n	8010120 <_strtod_l+0x9e8>
 8010118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801011a:	3301      	adds	r3, #1
 801011c:	f43f ad2b 	beq.w	800fb76 <_strtod_l+0x43e>
 8010120:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010230 <_strtod_l+0xaf8>
 8010124:	f04f 3aff 	mov.w	sl, #4294967295
 8010128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801012a:	9805      	ldr	r0, [sp, #20]
 801012c:	f002 fd28 	bl	8012b80 <_Bfree>
 8010130:	9805      	ldr	r0, [sp, #20]
 8010132:	4649      	mov	r1, r9
 8010134:	f002 fd24 	bl	8012b80 <_Bfree>
 8010138:	9805      	ldr	r0, [sp, #20]
 801013a:	4641      	mov	r1, r8
 801013c:	f002 fd20 	bl	8012b80 <_Bfree>
 8010140:	9805      	ldr	r0, [sp, #20]
 8010142:	4621      	mov	r1, r4
 8010144:	f002 fd1c 	bl	8012b80 <_Bfree>
 8010148:	e618      	b.n	800fd7c <_strtod_l+0x644>
 801014a:	f1ba 0f01 	cmp.w	sl, #1
 801014e:	d103      	bne.n	8010158 <_strtod_l+0xa20>
 8010150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010152:	2b00      	cmp	r3, #0
 8010154:	f43f ada5 	beq.w	800fca2 <_strtod_l+0x56a>
 8010158:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010208 <_strtod_l+0xad0>
 801015c:	4f35      	ldr	r7, [pc, #212]	@ (8010234 <_strtod_l+0xafc>)
 801015e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010162:	2600      	movs	r6, #0
 8010164:	e7b1      	b.n	80100ca <_strtod_l+0x992>
 8010166:	4f34      	ldr	r7, [pc, #208]	@ (8010238 <_strtod_l+0xb00>)
 8010168:	2600      	movs	r6, #0
 801016a:	e7aa      	b.n	80100c2 <_strtod_l+0x98a>
 801016c:	4b32      	ldr	r3, [pc, #200]	@ (8010238 <_strtod_l+0xb00>)
 801016e:	4630      	mov	r0, r6
 8010170:	4639      	mov	r1, r7
 8010172:	2200      	movs	r2, #0
 8010174:	f7f0 fa50 	bl	8000618 <__aeabi_dmul>
 8010178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801017a:	4606      	mov	r6, r0
 801017c:	460f      	mov	r7, r1
 801017e:	2b00      	cmp	r3, #0
 8010180:	d09f      	beq.n	80100c2 <_strtod_l+0x98a>
 8010182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010186:	e7a0      	b.n	80100ca <_strtod_l+0x992>
 8010188:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010210 <_strtod_l+0xad8>
 801018c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010190:	ec57 6b17 	vmov	r6, r7, d7
 8010194:	e799      	b.n	80100ca <_strtod_l+0x992>
 8010196:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801019a:	9b08      	ldr	r3, [sp, #32]
 801019c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d1c1      	bne.n	8010128 <_strtod_l+0x9f0>
 80101a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80101a8:	0d1b      	lsrs	r3, r3, #20
 80101aa:	051b      	lsls	r3, r3, #20
 80101ac:	429d      	cmp	r5, r3
 80101ae:	d1bb      	bne.n	8010128 <_strtod_l+0x9f0>
 80101b0:	4630      	mov	r0, r6
 80101b2:	4639      	mov	r1, r7
 80101b4:	f7f0 fd90 	bl	8000cd8 <__aeabi_d2lz>
 80101b8:	f7f0 fa00 	bl	80005bc <__aeabi_l2d>
 80101bc:	4602      	mov	r2, r0
 80101be:	460b      	mov	r3, r1
 80101c0:	4630      	mov	r0, r6
 80101c2:	4639      	mov	r1, r7
 80101c4:	f7f0 f870 	bl	80002a8 <__aeabi_dsub>
 80101c8:	460b      	mov	r3, r1
 80101ca:	4602      	mov	r2, r0
 80101cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80101d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80101d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101d6:	ea46 060a 	orr.w	r6, r6, sl
 80101da:	431e      	orrs	r6, r3
 80101dc:	d06f      	beq.n	80102be <_strtod_l+0xb86>
 80101de:	a30e      	add	r3, pc, #56	@ (adr r3, 8010218 <_strtod_l+0xae0>)
 80101e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e4:	f7f0 fc8a 	bl	8000afc <__aeabi_dcmplt>
 80101e8:	2800      	cmp	r0, #0
 80101ea:	f47f accf 	bne.w	800fb8c <_strtod_l+0x454>
 80101ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8010220 <_strtod_l+0xae8>)
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101f8:	f7f0 fc9e 	bl	8000b38 <__aeabi_dcmpgt>
 80101fc:	2800      	cmp	r0, #0
 80101fe:	d093      	beq.n	8010128 <_strtod_l+0x9f0>
 8010200:	e4c4      	b.n	800fb8c <_strtod_l+0x454>
 8010202:	bf00      	nop
 8010204:	f3af 8000 	nop.w
 8010208:	00000000 	.word	0x00000000
 801020c:	bff00000 	.word	0xbff00000
 8010210:	00000000 	.word	0x00000000
 8010214:	3ff00000 	.word	0x3ff00000
 8010218:	94a03595 	.word	0x94a03595
 801021c:	3fdfffff 	.word	0x3fdfffff
 8010220:	35afe535 	.word	0x35afe535
 8010224:	3fe00000 	.word	0x3fe00000
 8010228:	000fffff 	.word	0x000fffff
 801022c:	7ff00000 	.word	0x7ff00000
 8010230:	7fefffff 	.word	0x7fefffff
 8010234:	3ff00000 	.word	0x3ff00000
 8010238:	3fe00000 	.word	0x3fe00000
 801023c:	7fe00000 	.word	0x7fe00000
 8010240:	7c9fffff 	.word	0x7c9fffff
 8010244:	9b08      	ldr	r3, [sp, #32]
 8010246:	b323      	cbz	r3, 8010292 <_strtod_l+0xb5a>
 8010248:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801024c:	d821      	bhi.n	8010292 <_strtod_l+0xb5a>
 801024e:	a328      	add	r3, pc, #160	@ (adr r3, 80102f0 <_strtod_l+0xbb8>)
 8010250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010254:	4630      	mov	r0, r6
 8010256:	4639      	mov	r1, r7
 8010258:	f7f0 fc5a 	bl	8000b10 <__aeabi_dcmple>
 801025c:	b1a0      	cbz	r0, 8010288 <_strtod_l+0xb50>
 801025e:	4639      	mov	r1, r7
 8010260:	4630      	mov	r0, r6
 8010262:	f7f0 fcb1 	bl	8000bc8 <__aeabi_d2uiz>
 8010266:	2801      	cmp	r0, #1
 8010268:	bf38      	it	cc
 801026a:	2001      	movcc	r0, #1
 801026c:	f7f0 f95a 	bl	8000524 <__aeabi_ui2d>
 8010270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010272:	4606      	mov	r6, r0
 8010274:	460f      	mov	r7, r1
 8010276:	b9fb      	cbnz	r3, 80102b8 <_strtod_l+0xb80>
 8010278:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801027c:	9014      	str	r0, [sp, #80]	@ 0x50
 801027e:	9315      	str	r3, [sp, #84]	@ 0x54
 8010280:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010284:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010288:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801028a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801028e:	1b5b      	subs	r3, r3, r5
 8010290:	9311      	str	r3, [sp, #68]	@ 0x44
 8010292:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010296:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801029a:	f002 ffa5 	bl	80131e8 <__ulp>
 801029e:	4650      	mov	r0, sl
 80102a0:	ec53 2b10 	vmov	r2, r3, d0
 80102a4:	4659      	mov	r1, fp
 80102a6:	f7f0 f9b7 	bl	8000618 <__aeabi_dmul>
 80102aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80102ae:	f7ef fffd 	bl	80002ac <__adddf3>
 80102b2:	4682      	mov	sl, r0
 80102b4:	468b      	mov	fp, r1
 80102b6:	e770      	b.n	801019a <_strtod_l+0xa62>
 80102b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80102bc:	e7e0      	b.n	8010280 <_strtod_l+0xb48>
 80102be:	a30e      	add	r3, pc, #56	@ (adr r3, 80102f8 <_strtod_l+0xbc0>)
 80102c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c4:	f7f0 fc1a 	bl	8000afc <__aeabi_dcmplt>
 80102c8:	e798      	b.n	80101fc <_strtod_l+0xac4>
 80102ca:	2300      	movs	r3, #0
 80102cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80102d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80102d2:	6013      	str	r3, [r2, #0]
 80102d4:	f7ff ba6d 	b.w	800f7b2 <_strtod_l+0x7a>
 80102d8:	2a65      	cmp	r2, #101	@ 0x65
 80102da:	f43f ab66 	beq.w	800f9aa <_strtod_l+0x272>
 80102de:	2a45      	cmp	r2, #69	@ 0x45
 80102e0:	f43f ab63 	beq.w	800f9aa <_strtod_l+0x272>
 80102e4:	2301      	movs	r3, #1
 80102e6:	f7ff bb9e 	b.w	800fa26 <_strtod_l+0x2ee>
 80102ea:	bf00      	nop
 80102ec:	f3af 8000 	nop.w
 80102f0:	ffc00000 	.word	0xffc00000
 80102f4:	41dfffff 	.word	0x41dfffff
 80102f8:	94a03595 	.word	0x94a03595
 80102fc:	3fcfffff 	.word	0x3fcfffff

08010300 <_strtod_r>:
 8010300:	4b01      	ldr	r3, [pc, #4]	@ (8010308 <_strtod_r+0x8>)
 8010302:	f7ff ba19 	b.w	800f738 <_strtod_l>
 8010306:	bf00      	nop
 8010308:	200021f4 	.word	0x200021f4

0801030c <strtod>:
 801030c:	460a      	mov	r2, r1
 801030e:	4601      	mov	r1, r0
 8010310:	4802      	ldr	r0, [pc, #8]	@ (801031c <strtod+0x10>)
 8010312:	4b03      	ldr	r3, [pc, #12]	@ (8010320 <strtod+0x14>)
 8010314:	6800      	ldr	r0, [r0, #0]
 8010316:	f7ff ba0f 	b.w	800f738 <_strtod_l>
 801031a:	bf00      	nop
 801031c:	20002360 	.word	0x20002360
 8010320:	200021f4 	.word	0x200021f4

08010324 <_strtol_l.constprop.0>:
 8010324:	2b24      	cmp	r3, #36	@ 0x24
 8010326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801032a:	4686      	mov	lr, r0
 801032c:	4690      	mov	r8, r2
 801032e:	d801      	bhi.n	8010334 <_strtol_l.constprop.0+0x10>
 8010330:	2b01      	cmp	r3, #1
 8010332:	d106      	bne.n	8010342 <_strtol_l.constprop.0+0x1e>
 8010334:	f001 f8e4 	bl	8011500 <__errno>
 8010338:	2316      	movs	r3, #22
 801033a:	6003      	str	r3, [r0, #0]
 801033c:	2000      	movs	r0, #0
 801033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010342:	4834      	ldr	r0, [pc, #208]	@ (8010414 <_strtol_l.constprop.0+0xf0>)
 8010344:	460d      	mov	r5, r1
 8010346:	462a      	mov	r2, r5
 8010348:	f815 4b01 	ldrb.w	r4, [r5], #1
 801034c:	5d06      	ldrb	r6, [r0, r4]
 801034e:	f016 0608 	ands.w	r6, r6, #8
 8010352:	d1f8      	bne.n	8010346 <_strtol_l.constprop.0+0x22>
 8010354:	2c2d      	cmp	r4, #45	@ 0x2d
 8010356:	d12d      	bne.n	80103b4 <_strtol_l.constprop.0+0x90>
 8010358:	782c      	ldrb	r4, [r5, #0]
 801035a:	2601      	movs	r6, #1
 801035c:	1c95      	adds	r5, r2, #2
 801035e:	f033 0210 	bics.w	r2, r3, #16
 8010362:	d109      	bne.n	8010378 <_strtol_l.constprop.0+0x54>
 8010364:	2c30      	cmp	r4, #48	@ 0x30
 8010366:	d12a      	bne.n	80103be <_strtol_l.constprop.0+0x9a>
 8010368:	782a      	ldrb	r2, [r5, #0]
 801036a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801036e:	2a58      	cmp	r2, #88	@ 0x58
 8010370:	d125      	bne.n	80103be <_strtol_l.constprop.0+0x9a>
 8010372:	786c      	ldrb	r4, [r5, #1]
 8010374:	2310      	movs	r3, #16
 8010376:	3502      	adds	r5, #2
 8010378:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801037c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010380:	2200      	movs	r2, #0
 8010382:	fbbc f9f3 	udiv	r9, ip, r3
 8010386:	4610      	mov	r0, r2
 8010388:	fb03 ca19 	mls	sl, r3, r9, ip
 801038c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010390:	2f09      	cmp	r7, #9
 8010392:	d81b      	bhi.n	80103cc <_strtol_l.constprop.0+0xa8>
 8010394:	463c      	mov	r4, r7
 8010396:	42a3      	cmp	r3, r4
 8010398:	dd27      	ble.n	80103ea <_strtol_l.constprop.0+0xc6>
 801039a:	1c57      	adds	r7, r2, #1
 801039c:	d007      	beq.n	80103ae <_strtol_l.constprop.0+0x8a>
 801039e:	4581      	cmp	r9, r0
 80103a0:	d320      	bcc.n	80103e4 <_strtol_l.constprop.0+0xc0>
 80103a2:	d101      	bne.n	80103a8 <_strtol_l.constprop.0+0x84>
 80103a4:	45a2      	cmp	sl, r4
 80103a6:	db1d      	blt.n	80103e4 <_strtol_l.constprop.0+0xc0>
 80103a8:	fb00 4003 	mla	r0, r0, r3, r4
 80103ac:	2201      	movs	r2, #1
 80103ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103b2:	e7eb      	b.n	801038c <_strtol_l.constprop.0+0x68>
 80103b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80103b6:	bf04      	itt	eq
 80103b8:	782c      	ldrbeq	r4, [r5, #0]
 80103ba:	1c95      	addeq	r5, r2, #2
 80103bc:	e7cf      	b.n	801035e <_strtol_l.constprop.0+0x3a>
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1da      	bne.n	8010378 <_strtol_l.constprop.0+0x54>
 80103c2:	2c30      	cmp	r4, #48	@ 0x30
 80103c4:	bf0c      	ite	eq
 80103c6:	2308      	moveq	r3, #8
 80103c8:	230a      	movne	r3, #10
 80103ca:	e7d5      	b.n	8010378 <_strtol_l.constprop.0+0x54>
 80103cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80103d0:	2f19      	cmp	r7, #25
 80103d2:	d801      	bhi.n	80103d8 <_strtol_l.constprop.0+0xb4>
 80103d4:	3c37      	subs	r4, #55	@ 0x37
 80103d6:	e7de      	b.n	8010396 <_strtol_l.constprop.0+0x72>
 80103d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80103dc:	2f19      	cmp	r7, #25
 80103de:	d804      	bhi.n	80103ea <_strtol_l.constprop.0+0xc6>
 80103e0:	3c57      	subs	r4, #87	@ 0x57
 80103e2:	e7d8      	b.n	8010396 <_strtol_l.constprop.0+0x72>
 80103e4:	f04f 32ff 	mov.w	r2, #4294967295
 80103e8:	e7e1      	b.n	80103ae <_strtol_l.constprop.0+0x8a>
 80103ea:	1c53      	adds	r3, r2, #1
 80103ec:	d108      	bne.n	8010400 <_strtol_l.constprop.0+0xdc>
 80103ee:	2322      	movs	r3, #34	@ 0x22
 80103f0:	f8ce 3000 	str.w	r3, [lr]
 80103f4:	4660      	mov	r0, ip
 80103f6:	f1b8 0f00 	cmp.w	r8, #0
 80103fa:	d0a0      	beq.n	801033e <_strtol_l.constprop.0+0x1a>
 80103fc:	1e69      	subs	r1, r5, #1
 80103fe:	e006      	b.n	801040e <_strtol_l.constprop.0+0xea>
 8010400:	b106      	cbz	r6, 8010404 <_strtol_l.constprop.0+0xe0>
 8010402:	4240      	negs	r0, r0
 8010404:	f1b8 0f00 	cmp.w	r8, #0
 8010408:	d099      	beq.n	801033e <_strtol_l.constprop.0+0x1a>
 801040a:	2a00      	cmp	r2, #0
 801040c:	d1f6      	bne.n	80103fc <_strtol_l.constprop.0+0xd8>
 801040e:	f8c8 1000 	str.w	r1, [r8]
 8010412:	e794      	b.n	801033e <_strtol_l.constprop.0+0x1a>
 8010414:	08016f51 	.word	0x08016f51

08010418 <_strtol_r>:
 8010418:	f7ff bf84 	b.w	8010324 <_strtol_l.constprop.0>

0801041c <strtol>:
 801041c:	4613      	mov	r3, r2
 801041e:	460a      	mov	r2, r1
 8010420:	4601      	mov	r1, r0
 8010422:	4802      	ldr	r0, [pc, #8]	@ (801042c <strtol+0x10>)
 8010424:	6800      	ldr	r0, [r0, #0]
 8010426:	f7ff bf7d 	b.w	8010324 <_strtol_l.constprop.0>
 801042a:	bf00      	nop
 801042c:	20002360 	.word	0x20002360

08010430 <__cvt>:
 8010430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010434:	ec57 6b10 	vmov	r6, r7, d0
 8010438:	2f00      	cmp	r7, #0
 801043a:	460c      	mov	r4, r1
 801043c:	4619      	mov	r1, r3
 801043e:	463b      	mov	r3, r7
 8010440:	bfbb      	ittet	lt
 8010442:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010446:	461f      	movlt	r7, r3
 8010448:	2300      	movge	r3, #0
 801044a:	232d      	movlt	r3, #45	@ 0x2d
 801044c:	700b      	strb	r3, [r1, #0]
 801044e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010450:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010454:	4691      	mov	r9, r2
 8010456:	f023 0820 	bic.w	r8, r3, #32
 801045a:	bfbc      	itt	lt
 801045c:	4632      	movlt	r2, r6
 801045e:	4616      	movlt	r6, r2
 8010460:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010464:	d005      	beq.n	8010472 <__cvt+0x42>
 8010466:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801046a:	d100      	bne.n	801046e <__cvt+0x3e>
 801046c:	3401      	adds	r4, #1
 801046e:	2102      	movs	r1, #2
 8010470:	e000      	b.n	8010474 <__cvt+0x44>
 8010472:	2103      	movs	r1, #3
 8010474:	ab03      	add	r3, sp, #12
 8010476:	9301      	str	r3, [sp, #4]
 8010478:	ab02      	add	r3, sp, #8
 801047a:	9300      	str	r3, [sp, #0]
 801047c:	ec47 6b10 	vmov	d0, r6, r7
 8010480:	4653      	mov	r3, sl
 8010482:	4622      	mov	r2, r4
 8010484:	f001 f92c 	bl	80116e0 <_dtoa_r>
 8010488:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801048c:	4605      	mov	r5, r0
 801048e:	d119      	bne.n	80104c4 <__cvt+0x94>
 8010490:	f019 0f01 	tst.w	r9, #1
 8010494:	d00e      	beq.n	80104b4 <__cvt+0x84>
 8010496:	eb00 0904 	add.w	r9, r0, r4
 801049a:	2200      	movs	r2, #0
 801049c:	2300      	movs	r3, #0
 801049e:	4630      	mov	r0, r6
 80104a0:	4639      	mov	r1, r7
 80104a2:	f7f0 fb21 	bl	8000ae8 <__aeabi_dcmpeq>
 80104a6:	b108      	cbz	r0, 80104ac <__cvt+0x7c>
 80104a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80104ac:	2230      	movs	r2, #48	@ 0x30
 80104ae:	9b03      	ldr	r3, [sp, #12]
 80104b0:	454b      	cmp	r3, r9
 80104b2:	d31e      	bcc.n	80104f2 <__cvt+0xc2>
 80104b4:	9b03      	ldr	r3, [sp, #12]
 80104b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80104b8:	1b5b      	subs	r3, r3, r5
 80104ba:	4628      	mov	r0, r5
 80104bc:	6013      	str	r3, [r2, #0]
 80104be:	b004      	add	sp, #16
 80104c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80104c8:	eb00 0904 	add.w	r9, r0, r4
 80104cc:	d1e5      	bne.n	801049a <__cvt+0x6a>
 80104ce:	7803      	ldrb	r3, [r0, #0]
 80104d0:	2b30      	cmp	r3, #48	@ 0x30
 80104d2:	d10a      	bne.n	80104ea <__cvt+0xba>
 80104d4:	2200      	movs	r2, #0
 80104d6:	2300      	movs	r3, #0
 80104d8:	4630      	mov	r0, r6
 80104da:	4639      	mov	r1, r7
 80104dc:	f7f0 fb04 	bl	8000ae8 <__aeabi_dcmpeq>
 80104e0:	b918      	cbnz	r0, 80104ea <__cvt+0xba>
 80104e2:	f1c4 0401 	rsb	r4, r4, #1
 80104e6:	f8ca 4000 	str.w	r4, [sl]
 80104ea:	f8da 3000 	ldr.w	r3, [sl]
 80104ee:	4499      	add	r9, r3
 80104f0:	e7d3      	b.n	801049a <__cvt+0x6a>
 80104f2:	1c59      	adds	r1, r3, #1
 80104f4:	9103      	str	r1, [sp, #12]
 80104f6:	701a      	strb	r2, [r3, #0]
 80104f8:	e7d9      	b.n	80104ae <__cvt+0x7e>

080104fa <__exponent>:
 80104fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104fc:	2900      	cmp	r1, #0
 80104fe:	bfba      	itte	lt
 8010500:	4249      	neglt	r1, r1
 8010502:	232d      	movlt	r3, #45	@ 0x2d
 8010504:	232b      	movge	r3, #43	@ 0x2b
 8010506:	2909      	cmp	r1, #9
 8010508:	7002      	strb	r2, [r0, #0]
 801050a:	7043      	strb	r3, [r0, #1]
 801050c:	dd29      	ble.n	8010562 <__exponent+0x68>
 801050e:	f10d 0307 	add.w	r3, sp, #7
 8010512:	461d      	mov	r5, r3
 8010514:	270a      	movs	r7, #10
 8010516:	461a      	mov	r2, r3
 8010518:	fbb1 f6f7 	udiv	r6, r1, r7
 801051c:	fb07 1416 	mls	r4, r7, r6, r1
 8010520:	3430      	adds	r4, #48	@ 0x30
 8010522:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010526:	460c      	mov	r4, r1
 8010528:	2c63      	cmp	r4, #99	@ 0x63
 801052a:	f103 33ff 	add.w	r3, r3, #4294967295
 801052e:	4631      	mov	r1, r6
 8010530:	dcf1      	bgt.n	8010516 <__exponent+0x1c>
 8010532:	3130      	adds	r1, #48	@ 0x30
 8010534:	1e94      	subs	r4, r2, #2
 8010536:	f803 1c01 	strb.w	r1, [r3, #-1]
 801053a:	1c41      	adds	r1, r0, #1
 801053c:	4623      	mov	r3, r4
 801053e:	42ab      	cmp	r3, r5
 8010540:	d30a      	bcc.n	8010558 <__exponent+0x5e>
 8010542:	f10d 0309 	add.w	r3, sp, #9
 8010546:	1a9b      	subs	r3, r3, r2
 8010548:	42ac      	cmp	r4, r5
 801054a:	bf88      	it	hi
 801054c:	2300      	movhi	r3, #0
 801054e:	3302      	adds	r3, #2
 8010550:	4403      	add	r3, r0
 8010552:	1a18      	subs	r0, r3, r0
 8010554:	b003      	add	sp, #12
 8010556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010558:	f813 6b01 	ldrb.w	r6, [r3], #1
 801055c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010560:	e7ed      	b.n	801053e <__exponent+0x44>
 8010562:	2330      	movs	r3, #48	@ 0x30
 8010564:	3130      	adds	r1, #48	@ 0x30
 8010566:	7083      	strb	r3, [r0, #2]
 8010568:	70c1      	strb	r1, [r0, #3]
 801056a:	1d03      	adds	r3, r0, #4
 801056c:	e7f1      	b.n	8010552 <__exponent+0x58>
	...

08010570 <_printf_float>:
 8010570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010574:	b08d      	sub	sp, #52	@ 0x34
 8010576:	460c      	mov	r4, r1
 8010578:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801057c:	4616      	mov	r6, r2
 801057e:	461f      	mov	r7, r3
 8010580:	4605      	mov	r5, r0
 8010582:	f000 ff73 	bl	801146c <_localeconv_r>
 8010586:	6803      	ldr	r3, [r0, #0]
 8010588:	9304      	str	r3, [sp, #16]
 801058a:	4618      	mov	r0, r3
 801058c:	f7ef fe80 	bl	8000290 <strlen>
 8010590:	2300      	movs	r3, #0
 8010592:	930a      	str	r3, [sp, #40]	@ 0x28
 8010594:	f8d8 3000 	ldr.w	r3, [r8]
 8010598:	9005      	str	r0, [sp, #20]
 801059a:	3307      	adds	r3, #7
 801059c:	f023 0307 	bic.w	r3, r3, #7
 80105a0:	f103 0208 	add.w	r2, r3, #8
 80105a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80105a8:	f8d4 b000 	ldr.w	fp, [r4]
 80105ac:	f8c8 2000 	str.w	r2, [r8]
 80105b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80105b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80105b8:	9307      	str	r3, [sp, #28]
 80105ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80105be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80105c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105c6:	4b9c      	ldr	r3, [pc, #624]	@ (8010838 <_printf_float+0x2c8>)
 80105c8:	f04f 32ff 	mov.w	r2, #4294967295
 80105cc:	f7f0 fabe 	bl	8000b4c <__aeabi_dcmpun>
 80105d0:	bb70      	cbnz	r0, 8010630 <_printf_float+0xc0>
 80105d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105d6:	4b98      	ldr	r3, [pc, #608]	@ (8010838 <_printf_float+0x2c8>)
 80105d8:	f04f 32ff 	mov.w	r2, #4294967295
 80105dc:	f7f0 fa98 	bl	8000b10 <__aeabi_dcmple>
 80105e0:	bb30      	cbnz	r0, 8010630 <_printf_float+0xc0>
 80105e2:	2200      	movs	r2, #0
 80105e4:	2300      	movs	r3, #0
 80105e6:	4640      	mov	r0, r8
 80105e8:	4649      	mov	r1, r9
 80105ea:	f7f0 fa87 	bl	8000afc <__aeabi_dcmplt>
 80105ee:	b110      	cbz	r0, 80105f6 <_printf_float+0x86>
 80105f0:	232d      	movs	r3, #45	@ 0x2d
 80105f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105f6:	4a91      	ldr	r2, [pc, #580]	@ (801083c <_printf_float+0x2cc>)
 80105f8:	4b91      	ldr	r3, [pc, #580]	@ (8010840 <_printf_float+0x2d0>)
 80105fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80105fe:	bf94      	ite	ls
 8010600:	4690      	movls	r8, r2
 8010602:	4698      	movhi	r8, r3
 8010604:	2303      	movs	r3, #3
 8010606:	6123      	str	r3, [r4, #16]
 8010608:	f02b 0304 	bic.w	r3, fp, #4
 801060c:	6023      	str	r3, [r4, #0]
 801060e:	f04f 0900 	mov.w	r9, #0
 8010612:	9700      	str	r7, [sp, #0]
 8010614:	4633      	mov	r3, r6
 8010616:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010618:	4621      	mov	r1, r4
 801061a:	4628      	mov	r0, r5
 801061c:	f000 f9d2 	bl	80109c4 <_printf_common>
 8010620:	3001      	adds	r0, #1
 8010622:	f040 808d 	bne.w	8010740 <_printf_float+0x1d0>
 8010626:	f04f 30ff 	mov.w	r0, #4294967295
 801062a:	b00d      	add	sp, #52	@ 0x34
 801062c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010630:	4642      	mov	r2, r8
 8010632:	464b      	mov	r3, r9
 8010634:	4640      	mov	r0, r8
 8010636:	4649      	mov	r1, r9
 8010638:	f7f0 fa88 	bl	8000b4c <__aeabi_dcmpun>
 801063c:	b140      	cbz	r0, 8010650 <_printf_float+0xe0>
 801063e:	464b      	mov	r3, r9
 8010640:	2b00      	cmp	r3, #0
 8010642:	bfbc      	itt	lt
 8010644:	232d      	movlt	r3, #45	@ 0x2d
 8010646:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801064a:	4a7e      	ldr	r2, [pc, #504]	@ (8010844 <_printf_float+0x2d4>)
 801064c:	4b7e      	ldr	r3, [pc, #504]	@ (8010848 <_printf_float+0x2d8>)
 801064e:	e7d4      	b.n	80105fa <_printf_float+0x8a>
 8010650:	6863      	ldr	r3, [r4, #4]
 8010652:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010656:	9206      	str	r2, [sp, #24]
 8010658:	1c5a      	adds	r2, r3, #1
 801065a:	d13b      	bne.n	80106d4 <_printf_float+0x164>
 801065c:	2306      	movs	r3, #6
 801065e:	6063      	str	r3, [r4, #4]
 8010660:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010664:	2300      	movs	r3, #0
 8010666:	6022      	str	r2, [r4, #0]
 8010668:	9303      	str	r3, [sp, #12]
 801066a:	ab0a      	add	r3, sp, #40	@ 0x28
 801066c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010670:	ab09      	add	r3, sp, #36	@ 0x24
 8010672:	9300      	str	r3, [sp, #0]
 8010674:	6861      	ldr	r1, [r4, #4]
 8010676:	ec49 8b10 	vmov	d0, r8, r9
 801067a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801067e:	4628      	mov	r0, r5
 8010680:	f7ff fed6 	bl	8010430 <__cvt>
 8010684:	9b06      	ldr	r3, [sp, #24]
 8010686:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010688:	2b47      	cmp	r3, #71	@ 0x47
 801068a:	4680      	mov	r8, r0
 801068c:	d129      	bne.n	80106e2 <_printf_float+0x172>
 801068e:	1cc8      	adds	r0, r1, #3
 8010690:	db02      	blt.n	8010698 <_printf_float+0x128>
 8010692:	6863      	ldr	r3, [r4, #4]
 8010694:	4299      	cmp	r1, r3
 8010696:	dd41      	ble.n	801071c <_printf_float+0x1ac>
 8010698:	f1aa 0a02 	sub.w	sl, sl, #2
 801069c:	fa5f fa8a 	uxtb.w	sl, sl
 80106a0:	3901      	subs	r1, #1
 80106a2:	4652      	mov	r2, sl
 80106a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80106a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80106aa:	f7ff ff26 	bl	80104fa <__exponent>
 80106ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80106b0:	1813      	adds	r3, r2, r0
 80106b2:	2a01      	cmp	r2, #1
 80106b4:	4681      	mov	r9, r0
 80106b6:	6123      	str	r3, [r4, #16]
 80106b8:	dc02      	bgt.n	80106c0 <_printf_float+0x150>
 80106ba:	6822      	ldr	r2, [r4, #0]
 80106bc:	07d2      	lsls	r2, r2, #31
 80106be:	d501      	bpl.n	80106c4 <_printf_float+0x154>
 80106c0:	3301      	adds	r3, #1
 80106c2:	6123      	str	r3, [r4, #16]
 80106c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d0a2      	beq.n	8010612 <_printf_float+0xa2>
 80106cc:	232d      	movs	r3, #45	@ 0x2d
 80106ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106d2:	e79e      	b.n	8010612 <_printf_float+0xa2>
 80106d4:	9a06      	ldr	r2, [sp, #24]
 80106d6:	2a47      	cmp	r2, #71	@ 0x47
 80106d8:	d1c2      	bne.n	8010660 <_printf_float+0xf0>
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d1c0      	bne.n	8010660 <_printf_float+0xf0>
 80106de:	2301      	movs	r3, #1
 80106e0:	e7bd      	b.n	801065e <_printf_float+0xee>
 80106e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80106e6:	d9db      	bls.n	80106a0 <_printf_float+0x130>
 80106e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80106ec:	d118      	bne.n	8010720 <_printf_float+0x1b0>
 80106ee:	2900      	cmp	r1, #0
 80106f0:	6863      	ldr	r3, [r4, #4]
 80106f2:	dd0b      	ble.n	801070c <_printf_float+0x19c>
 80106f4:	6121      	str	r1, [r4, #16]
 80106f6:	b913      	cbnz	r3, 80106fe <_printf_float+0x18e>
 80106f8:	6822      	ldr	r2, [r4, #0]
 80106fa:	07d0      	lsls	r0, r2, #31
 80106fc:	d502      	bpl.n	8010704 <_printf_float+0x194>
 80106fe:	3301      	adds	r3, #1
 8010700:	440b      	add	r3, r1
 8010702:	6123      	str	r3, [r4, #16]
 8010704:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010706:	f04f 0900 	mov.w	r9, #0
 801070a:	e7db      	b.n	80106c4 <_printf_float+0x154>
 801070c:	b913      	cbnz	r3, 8010714 <_printf_float+0x1a4>
 801070e:	6822      	ldr	r2, [r4, #0]
 8010710:	07d2      	lsls	r2, r2, #31
 8010712:	d501      	bpl.n	8010718 <_printf_float+0x1a8>
 8010714:	3302      	adds	r3, #2
 8010716:	e7f4      	b.n	8010702 <_printf_float+0x192>
 8010718:	2301      	movs	r3, #1
 801071a:	e7f2      	b.n	8010702 <_printf_float+0x192>
 801071c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010722:	4299      	cmp	r1, r3
 8010724:	db05      	blt.n	8010732 <_printf_float+0x1c2>
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	6121      	str	r1, [r4, #16]
 801072a:	07d8      	lsls	r0, r3, #31
 801072c:	d5ea      	bpl.n	8010704 <_printf_float+0x194>
 801072e:	1c4b      	adds	r3, r1, #1
 8010730:	e7e7      	b.n	8010702 <_printf_float+0x192>
 8010732:	2900      	cmp	r1, #0
 8010734:	bfd4      	ite	le
 8010736:	f1c1 0202 	rsble	r2, r1, #2
 801073a:	2201      	movgt	r2, #1
 801073c:	4413      	add	r3, r2
 801073e:	e7e0      	b.n	8010702 <_printf_float+0x192>
 8010740:	6823      	ldr	r3, [r4, #0]
 8010742:	055a      	lsls	r2, r3, #21
 8010744:	d407      	bmi.n	8010756 <_printf_float+0x1e6>
 8010746:	6923      	ldr	r3, [r4, #16]
 8010748:	4642      	mov	r2, r8
 801074a:	4631      	mov	r1, r6
 801074c:	4628      	mov	r0, r5
 801074e:	47b8      	blx	r7
 8010750:	3001      	adds	r0, #1
 8010752:	d12b      	bne.n	80107ac <_printf_float+0x23c>
 8010754:	e767      	b.n	8010626 <_printf_float+0xb6>
 8010756:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801075a:	f240 80dd 	bls.w	8010918 <_printf_float+0x3a8>
 801075e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010762:	2200      	movs	r2, #0
 8010764:	2300      	movs	r3, #0
 8010766:	f7f0 f9bf 	bl	8000ae8 <__aeabi_dcmpeq>
 801076a:	2800      	cmp	r0, #0
 801076c:	d033      	beq.n	80107d6 <_printf_float+0x266>
 801076e:	4a37      	ldr	r2, [pc, #220]	@ (801084c <_printf_float+0x2dc>)
 8010770:	2301      	movs	r3, #1
 8010772:	4631      	mov	r1, r6
 8010774:	4628      	mov	r0, r5
 8010776:	47b8      	blx	r7
 8010778:	3001      	adds	r0, #1
 801077a:	f43f af54 	beq.w	8010626 <_printf_float+0xb6>
 801077e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010782:	4543      	cmp	r3, r8
 8010784:	db02      	blt.n	801078c <_printf_float+0x21c>
 8010786:	6823      	ldr	r3, [r4, #0]
 8010788:	07d8      	lsls	r0, r3, #31
 801078a:	d50f      	bpl.n	80107ac <_printf_float+0x23c>
 801078c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010790:	4631      	mov	r1, r6
 8010792:	4628      	mov	r0, r5
 8010794:	47b8      	blx	r7
 8010796:	3001      	adds	r0, #1
 8010798:	f43f af45 	beq.w	8010626 <_printf_float+0xb6>
 801079c:	f04f 0900 	mov.w	r9, #0
 80107a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80107a4:	f104 0a1a 	add.w	sl, r4, #26
 80107a8:	45c8      	cmp	r8, r9
 80107aa:	dc09      	bgt.n	80107c0 <_printf_float+0x250>
 80107ac:	6823      	ldr	r3, [r4, #0]
 80107ae:	079b      	lsls	r3, r3, #30
 80107b0:	f100 8103 	bmi.w	80109ba <_printf_float+0x44a>
 80107b4:	68e0      	ldr	r0, [r4, #12]
 80107b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107b8:	4298      	cmp	r0, r3
 80107ba:	bfb8      	it	lt
 80107bc:	4618      	movlt	r0, r3
 80107be:	e734      	b.n	801062a <_printf_float+0xba>
 80107c0:	2301      	movs	r3, #1
 80107c2:	4652      	mov	r2, sl
 80107c4:	4631      	mov	r1, r6
 80107c6:	4628      	mov	r0, r5
 80107c8:	47b8      	blx	r7
 80107ca:	3001      	adds	r0, #1
 80107cc:	f43f af2b 	beq.w	8010626 <_printf_float+0xb6>
 80107d0:	f109 0901 	add.w	r9, r9, #1
 80107d4:	e7e8      	b.n	80107a8 <_printf_float+0x238>
 80107d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107d8:	2b00      	cmp	r3, #0
 80107da:	dc39      	bgt.n	8010850 <_printf_float+0x2e0>
 80107dc:	4a1b      	ldr	r2, [pc, #108]	@ (801084c <_printf_float+0x2dc>)
 80107de:	2301      	movs	r3, #1
 80107e0:	4631      	mov	r1, r6
 80107e2:	4628      	mov	r0, r5
 80107e4:	47b8      	blx	r7
 80107e6:	3001      	adds	r0, #1
 80107e8:	f43f af1d 	beq.w	8010626 <_printf_float+0xb6>
 80107ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80107f0:	ea59 0303 	orrs.w	r3, r9, r3
 80107f4:	d102      	bne.n	80107fc <_printf_float+0x28c>
 80107f6:	6823      	ldr	r3, [r4, #0]
 80107f8:	07d9      	lsls	r1, r3, #31
 80107fa:	d5d7      	bpl.n	80107ac <_printf_float+0x23c>
 80107fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010800:	4631      	mov	r1, r6
 8010802:	4628      	mov	r0, r5
 8010804:	47b8      	blx	r7
 8010806:	3001      	adds	r0, #1
 8010808:	f43f af0d 	beq.w	8010626 <_printf_float+0xb6>
 801080c:	f04f 0a00 	mov.w	sl, #0
 8010810:	f104 0b1a 	add.w	fp, r4, #26
 8010814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010816:	425b      	negs	r3, r3
 8010818:	4553      	cmp	r3, sl
 801081a:	dc01      	bgt.n	8010820 <_printf_float+0x2b0>
 801081c:	464b      	mov	r3, r9
 801081e:	e793      	b.n	8010748 <_printf_float+0x1d8>
 8010820:	2301      	movs	r3, #1
 8010822:	465a      	mov	r2, fp
 8010824:	4631      	mov	r1, r6
 8010826:	4628      	mov	r0, r5
 8010828:	47b8      	blx	r7
 801082a:	3001      	adds	r0, #1
 801082c:	f43f aefb 	beq.w	8010626 <_printf_float+0xb6>
 8010830:	f10a 0a01 	add.w	sl, sl, #1
 8010834:	e7ee      	b.n	8010814 <_printf_float+0x2a4>
 8010836:	bf00      	nop
 8010838:	7fefffff 	.word	0x7fefffff
 801083c:	08017051 	.word	0x08017051
 8010840:	08017055 	.word	0x08017055
 8010844:	08017059 	.word	0x08017059
 8010848:	0801705d 	.word	0x0801705d
 801084c:	08017061 	.word	0x08017061
 8010850:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010852:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010856:	4553      	cmp	r3, sl
 8010858:	bfa8      	it	ge
 801085a:	4653      	movge	r3, sl
 801085c:	2b00      	cmp	r3, #0
 801085e:	4699      	mov	r9, r3
 8010860:	dc36      	bgt.n	80108d0 <_printf_float+0x360>
 8010862:	f04f 0b00 	mov.w	fp, #0
 8010866:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801086a:	f104 021a 	add.w	r2, r4, #26
 801086e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010870:	9306      	str	r3, [sp, #24]
 8010872:	eba3 0309 	sub.w	r3, r3, r9
 8010876:	455b      	cmp	r3, fp
 8010878:	dc31      	bgt.n	80108de <_printf_float+0x36e>
 801087a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801087c:	459a      	cmp	sl, r3
 801087e:	dc3a      	bgt.n	80108f6 <_printf_float+0x386>
 8010880:	6823      	ldr	r3, [r4, #0]
 8010882:	07da      	lsls	r2, r3, #31
 8010884:	d437      	bmi.n	80108f6 <_printf_float+0x386>
 8010886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010888:	ebaa 0903 	sub.w	r9, sl, r3
 801088c:	9b06      	ldr	r3, [sp, #24]
 801088e:	ebaa 0303 	sub.w	r3, sl, r3
 8010892:	4599      	cmp	r9, r3
 8010894:	bfa8      	it	ge
 8010896:	4699      	movge	r9, r3
 8010898:	f1b9 0f00 	cmp.w	r9, #0
 801089c:	dc33      	bgt.n	8010906 <_printf_float+0x396>
 801089e:	f04f 0800 	mov.w	r8, #0
 80108a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80108a6:	f104 0b1a 	add.w	fp, r4, #26
 80108aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108ac:	ebaa 0303 	sub.w	r3, sl, r3
 80108b0:	eba3 0309 	sub.w	r3, r3, r9
 80108b4:	4543      	cmp	r3, r8
 80108b6:	f77f af79 	ble.w	80107ac <_printf_float+0x23c>
 80108ba:	2301      	movs	r3, #1
 80108bc:	465a      	mov	r2, fp
 80108be:	4631      	mov	r1, r6
 80108c0:	4628      	mov	r0, r5
 80108c2:	47b8      	blx	r7
 80108c4:	3001      	adds	r0, #1
 80108c6:	f43f aeae 	beq.w	8010626 <_printf_float+0xb6>
 80108ca:	f108 0801 	add.w	r8, r8, #1
 80108ce:	e7ec      	b.n	80108aa <_printf_float+0x33a>
 80108d0:	4642      	mov	r2, r8
 80108d2:	4631      	mov	r1, r6
 80108d4:	4628      	mov	r0, r5
 80108d6:	47b8      	blx	r7
 80108d8:	3001      	adds	r0, #1
 80108da:	d1c2      	bne.n	8010862 <_printf_float+0x2f2>
 80108dc:	e6a3      	b.n	8010626 <_printf_float+0xb6>
 80108de:	2301      	movs	r3, #1
 80108e0:	4631      	mov	r1, r6
 80108e2:	4628      	mov	r0, r5
 80108e4:	9206      	str	r2, [sp, #24]
 80108e6:	47b8      	blx	r7
 80108e8:	3001      	adds	r0, #1
 80108ea:	f43f ae9c 	beq.w	8010626 <_printf_float+0xb6>
 80108ee:	9a06      	ldr	r2, [sp, #24]
 80108f0:	f10b 0b01 	add.w	fp, fp, #1
 80108f4:	e7bb      	b.n	801086e <_printf_float+0x2fe>
 80108f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108fa:	4631      	mov	r1, r6
 80108fc:	4628      	mov	r0, r5
 80108fe:	47b8      	blx	r7
 8010900:	3001      	adds	r0, #1
 8010902:	d1c0      	bne.n	8010886 <_printf_float+0x316>
 8010904:	e68f      	b.n	8010626 <_printf_float+0xb6>
 8010906:	9a06      	ldr	r2, [sp, #24]
 8010908:	464b      	mov	r3, r9
 801090a:	4442      	add	r2, r8
 801090c:	4631      	mov	r1, r6
 801090e:	4628      	mov	r0, r5
 8010910:	47b8      	blx	r7
 8010912:	3001      	adds	r0, #1
 8010914:	d1c3      	bne.n	801089e <_printf_float+0x32e>
 8010916:	e686      	b.n	8010626 <_printf_float+0xb6>
 8010918:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801091c:	f1ba 0f01 	cmp.w	sl, #1
 8010920:	dc01      	bgt.n	8010926 <_printf_float+0x3b6>
 8010922:	07db      	lsls	r3, r3, #31
 8010924:	d536      	bpl.n	8010994 <_printf_float+0x424>
 8010926:	2301      	movs	r3, #1
 8010928:	4642      	mov	r2, r8
 801092a:	4631      	mov	r1, r6
 801092c:	4628      	mov	r0, r5
 801092e:	47b8      	blx	r7
 8010930:	3001      	adds	r0, #1
 8010932:	f43f ae78 	beq.w	8010626 <_printf_float+0xb6>
 8010936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801093a:	4631      	mov	r1, r6
 801093c:	4628      	mov	r0, r5
 801093e:	47b8      	blx	r7
 8010940:	3001      	adds	r0, #1
 8010942:	f43f ae70 	beq.w	8010626 <_printf_float+0xb6>
 8010946:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801094a:	2200      	movs	r2, #0
 801094c:	2300      	movs	r3, #0
 801094e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010952:	f7f0 f8c9 	bl	8000ae8 <__aeabi_dcmpeq>
 8010956:	b9c0      	cbnz	r0, 801098a <_printf_float+0x41a>
 8010958:	4653      	mov	r3, sl
 801095a:	f108 0201 	add.w	r2, r8, #1
 801095e:	4631      	mov	r1, r6
 8010960:	4628      	mov	r0, r5
 8010962:	47b8      	blx	r7
 8010964:	3001      	adds	r0, #1
 8010966:	d10c      	bne.n	8010982 <_printf_float+0x412>
 8010968:	e65d      	b.n	8010626 <_printf_float+0xb6>
 801096a:	2301      	movs	r3, #1
 801096c:	465a      	mov	r2, fp
 801096e:	4631      	mov	r1, r6
 8010970:	4628      	mov	r0, r5
 8010972:	47b8      	blx	r7
 8010974:	3001      	adds	r0, #1
 8010976:	f43f ae56 	beq.w	8010626 <_printf_float+0xb6>
 801097a:	f108 0801 	add.w	r8, r8, #1
 801097e:	45d0      	cmp	r8, sl
 8010980:	dbf3      	blt.n	801096a <_printf_float+0x3fa>
 8010982:	464b      	mov	r3, r9
 8010984:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010988:	e6df      	b.n	801074a <_printf_float+0x1da>
 801098a:	f04f 0800 	mov.w	r8, #0
 801098e:	f104 0b1a 	add.w	fp, r4, #26
 8010992:	e7f4      	b.n	801097e <_printf_float+0x40e>
 8010994:	2301      	movs	r3, #1
 8010996:	4642      	mov	r2, r8
 8010998:	e7e1      	b.n	801095e <_printf_float+0x3ee>
 801099a:	2301      	movs	r3, #1
 801099c:	464a      	mov	r2, r9
 801099e:	4631      	mov	r1, r6
 80109a0:	4628      	mov	r0, r5
 80109a2:	47b8      	blx	r7
 80109a4:	3001      	adds	r0, #1
 80109a6:	f43f ae3e 	beq.w	8010626 <_printf_float+0xb6>
 80109aa:	f108 0801 	add.w	r8, r8, #1
 80109ae:	68e3      	ldr	r3, [r4, #12]
 80109b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80109b2:	1a5b      	subs	r3, r3, r1
 80109b4:	4543      	cmp	r3, r8
 80109b6:	dcf0      	bgt.n	801099a <_printf_float+0x42a>
 80109b8:	e6fc      	b.n	80107b4 <_printf_float+0x244>
 80109ba:	f04f 0800 	mov.w	r8, #0
 80109be:	f104 0919 	add.w	r9, r4, #25
 80109c2:	e7f4      	b.n	80109ae <_printf_float+0x43e>

080109c4 <_printf_common>:
 80109c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109c8:	4616      	mov	r6, r2
 80109ca:	4698      	mov	r8, r3
 80109cc:	688a      	ldr	r2, [r1, #8]
 80109ce:	690b      	ldr	r3, [r1, #16]
 80109d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80109d4:	4293      	cmp	r3, r2
 80109d6:	bfb8      	it	lt
 80109d8:	4613      	movlt	r3, r2
 80109da:	6033      	str	r3, [r6, #0]
 80109dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80109e0:	4607      	mov	r7, r0
 80109e2:	460c      	mov	r4, r1
 80109e4:	b10a      	cbz	r2, 80109ea <_printf_common+0x26>
 80109e6:	3301      	adds	r3, #1
 80109e8:	6033      	str	r3, [r6, #0]
 80109ea:	6823      	ldr	r3, [r4, #0]
 80109ec:	0699      	lsls	r1, r3, #26
 80109ee:	bf42      	ittt	mi
 80109f0:	6833      	ldrmi	r3, [r6, #0]
 80109f2:	3302      	addmi	r3, #2
 80109f4:	6033      	strmi	r3, [r6, #0]
 80109f6:	6825      	ldr	r5, [r4, #0]
 80109f8:	f015 0506 	ands.w	r5, r5, #6
 80109fc:	d106      	bne.n	8010a0c <_printf_common+0x48>
 80109fe:	f104 0a19 	add.w	sl, r4, #25
 8010a02:	68e3      	ldr	r3, [r4, #12]
 8010a04:	6832      	ldr	r2, [r6, #0]
 8010a06:	1a9b      	subs	r3, r3, r2
 8010a08:	42ab      	cmp	r3, r5
 8010a0a:	dc26      	bgt.n	8010a5a <_printf_common+0x96>
 8010a0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010a10:	6822      	ldr	r2, [r4, #0]
 8010a12:	3b00      	subs	r3, #0
 8010a14:	bf18      	it	ne
 8010a16:	2301      	movne	r3, #1
 8010a18:	0692      	lsls	r2, r2, #26
 8010a1a:	d42b      	bmi.n	8010a74 <_printf_common+0xb0>
 8010a1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010a20:	4641      	mov	r1, r8
 8010a22:	4638      	mov	r0, r7
 8010a24:	47c8      	blx	r9
 8010a26:	3001      	adds	r0, #1
 8010a28:	d01e      	beq.n	8010a68 <_printf_common+0xa4>
 8010a2a:	6823      	ldr	r3, [r4, #0]
 8010a2c:	6922      	ldr	r2, [r4, #16]
 8010a2e:	f003 0306 	and.w	r3, r3, #6
 8010a32:	2b04      	cmp	r3, #4
 8010a34:	bf02      	ittt	eq
 8010a36:	68e5      	ldreq	r5, [r4, #12]
 8010a38:	6833      	ldreq	r3, [r6, #0]
 8010a3a:	1aed      	subeq	r5, r5, r3
 8010a3c:	68a3      	ldr	r3, [r4, #8]
 8010a3e:	bf0c      	ite	eq
 8010a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a44:	2500      	movne	r5, #0
 8010a46:	4293      	cmp	r3, r2
 8010a48:	bfc4      	itt	gt
 8010a4a:	1a9b      	subgt	r3, r3, r2
 8010a4c:	18ed      	addgt	r5, r5, r3
 8010a4e:	2600      	movs	r6, #0
 8010a50:	341a      	adds	r4, #26
 8010a52:	42b5      	cmp	r5, r6
 8010a54:	d11a      	bne.n	8010a8c <_printf_common+0xc8>
 8010a56:	2000      	movs	r0, #0
 8010a58:	e008      	b.n	8010a6c <_printf_common+0xa8>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	4652      	mov	r2, sl
 8010a5e:	4641      	mov	r1, r8
 8010a60:	4638      	mov	r0, r7
 8010a62:	47c8      	blx	r9
 8010a64:	3001      	adds	r0, #1
 8010a66:	d103      	bne.n	8010a70 <_printf_common+0xac>
 8010a68:	f04f 30ff 	mov.w	r0, #4294967295
 8010a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a70:	3501      	adds	r5, #1
 8010a72:	e7c6      	b.n	8010a02 <_printf_common+0x3e>
 8010a74:	18e1      	adds	r1, r4, r3
 8010a76:	1c5a      	adds	r2, r3, #1
 8010a78:	2030      	movs	r0, #48	@ 0x30
 8010a7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010a7e:	4422      	add	r2, r4
 8010a80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010a84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010a88:	3302      	adds	r3, #2
 8010a8a:	e7c7      	b.n	8010a1c <_printf_common+0x58>
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	4622      	mov	r2, r4
 8010a90:	4641      	mov	r1, r8
 8010a92:	4638      	mov	r0, r7
 8010a94:	47c8      	blx	r9
 8010a96:	3001      	adds	r0, #1
 8010a98:	d0e6      	beq.n	8010a68 <_printf_common+0xa4>
 8010a9a:	3601      	adds	r6, #1
 8010a9c:	e7d9      	b.n	8010a52 <_printf_common+0x8e>
	...

08010aa0 <_printf_i>:
 8010aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa4:	7e0f      	ldrb	r7, [r1, #24]
 8010aa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010aa8:	2f78      	cmp	r7, #120	@ 0x78
 8010aaa:	4691      	mov	r9, r2
 8010aac:	4680      	mov	r8, r0
 8010aae:	460c      	mov	r4, r1
 8010ab0:	469a      	mov	sl, r3
 8010ab2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010ab6:	d807      	bhi.n	8010ac8 <_printf_i+0x28>
 8010ab8:	2f62      	cmp	r7, #98	@ 0x62
 8010aba:	d80a      	bhi.n	8010ad2 <_printf_i+0x32>
 8010abc:	2f00      	cmp	r7, #0
 8010abe:	f000 80d2 	beq.w	8010c66 <_printf_i+0x1c6>
 8010ac2:	2f58      	cmp	r7, #88	@ 0x58
 8010ac4:	f000 80b9 	beq.w	8010c3a <_printf_i+0x19a>
 8010ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010acc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010ad0:	e03a      	b.n	8010b48 <_printf_i+0xa8>
 8010ad2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010ad6:	2b15      	cmp	r3, #21
 8010ad8:	d8f6      	bhi.n	8010ac8 <_printf_i+0x28>
 8010ada:	a101      	add	r1, pc, #4	@ (adr r1, 8010ae0 <_printf_i+0x40>)
 8010adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ae0:	08010b39 	.word	0x08010b39
 8010ae4:	08010b4d 	.word	0x08010b4d
 8010ae8:	08010ac9 	.word	0x08010ac9
 8010aec:	08010ac9 	.word	0x08010ac9
 8010af0:	08010ac9 	.word	0x08010ac9
 8010af4:	08010ac9 	.word	0x08010ac9
 8010af8:	08010b4d 	.word	0x08010b4d
 8010afc:	08010ac9 	.word	0x08010ac9
 8010b00:	08010ac9 	.word	0x08010ac9
 8010b04:	08010ac9 	.word	0x08010ac9
 8010b08:	08010ac9 	.word	0x08010ac9
 8010b0c:	08010c4d 	.word	0x08010c4d
 8010b10:	08010b77 	.word	0x08010b77
 8010b14:	08010c07 	.word	0x08010c07
 8010b18:	08010ac9 	.word	0x08010ac9
 8010b1c:	08010ac9 	.word	0x08010ac9
 8010b20:	08010c6f 	.word	0x08010c6f
 8010b24:	08010ac9 	.word	0x08010ac9
 8010b28:	08010b77 	.word	0x08010b77
 8010b2c:	08010ac9 	.word	0x08010ac9
 8010b30:	08010ac9 	.word	0x08010ac9
 8010b34:	08010c0f 	.word	0x08010c0f
 8010b38:	6833      	ldr	r3, [r6, #0]
 8010b3a:	1d1a      	adds	r2, r3, #4
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	6032      	str	r2, [r6, #0]
 8010b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010b48:	2301      	movs	r3, #1
 8010b4a:	e09d      	b.n	8010c88 <_printf_i+0x1e8>
 8010b4c:	6833      	ldr	r3, [r6, #0]
 8010b4e:	6820      	ldr	r0, [r4, #0]
 8010b50:	1d19      	adds	r1, r3, #4
 8010b52:	6031      	str	r1, [r6, #0]
 8010b54:	0606      	lsls	r6, r0, #24
 8010b56:	d501      	bpl.n	8010b5c <_printf_i+0xbc>
 8010b58:	681d      	ldr	r5, [r3, #0]
 8010b5a:	e003      	b.n	8010b64 <_printf_i+0xc4>
 8010b5c:	0645      	lsls	r5, r0, #25
 8010b5e:	d5fb      	bpl.n	8010b58 <_printf_i+0xb8>
 8010b60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010b64:	2d00      	cmp	r5, #0
 8010b66:	da03      	bge.n	8010b70 <_printf_i+0xd0>
 8010b68:	232d      	movs	r3, #45	@ 0x2d
 8010b6a:	426d      	negs	r5, r5
 8010b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b70:	4859      	ldr	r0, [pc, #356]	@ (8010cd8 <_printf_i+0x238>)
 8010b72:	230a      	movs	r3, #10
 8010b74:	e011      	b.n	8010b9a <_printf_i+0xfa>
 8010b76:	6821      	ldr	r1, [r4, #0]
 8010b78:	6833      	ldr	r3, [r6, #0]
 8010b7a:	0608      	lsls	r0, r1, #24
 8010b7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010b80:	d402      	bmi.n	8010b88 <_printf_i+0xe8>
 8010b82:	0649      	lsls	r1, r1, #25
 8010b84:	bf48      	it	mi
 8010b86:	b2ad      	uxthmi	r5, r5
 8010b88:	2f6f      	cmp	r7, #111	@ 0x6f
 8010b8a:	4853      	ldr	r0, [pc, #332]	@ (8010cd8 <_printf_i+0x238>)
 8010b8c:	6033      	str	r3, [r6, #0]
 8010b8e:	bf14      	ite	ne
 8010b90:	230a      	movne	r3, #10
 8010b92:	2308      	moveq	r3, #8
 8010b94:	2100      	movs	r1, #0
 8010b96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010b9a:	6866      	ldr	r6, [r4, #4]
 8010b9c:	60a6      	str	r6, [r4, #8]
 8010b9e:	2e00      	cmp	r6, #0
 8010ba0:	bfa2      	ittt	ge
 8010ba2:	6821      	ldrge	r1, [r4, #0]
 8010ba4:	f021 0104 	bicge.w	r1, r1, #4
 8010ba8:	6021      	strge	r1, [r4, #0]
 8010baa:	b90d      	cbnz	r5, 8010bb0 <_printf_i+0x110>
 8010bac:	2e00      	cmp	r6, #0
 8010bae:	d04b      	beq.n	8010c48 <_printf_i+0x1a8>
 8010bb0:	4616      	mov	r6, r2
 8010bb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8010bb6:	fb03 5711 	mls	r7, r3, r1, r5
 8010bba:	5dc7      	ldrb	r7, [r0, r7]
 8010bbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010bc0:	462f      	mov	r7, r5
 8010bc2:	42bb      	cmp	r3, r7
 8010bc4:	460d      	mov	r5, r1
 8010bc6:	d9f4      	bls.n	8010bb2 <_printf_i+0x112>
 8010bc8:	2b08      	cmp	r3, #8
 8010bca:	d10b      	bne.n	8010be4 <_printf_i+0x144>
 8010bcc:	6823      	ldr	r3, [r4, #0]
 8010bce:	07df      	lsls	r7, r3, #31
 8010bd0:	d508      	bpl.n	8010be4 <_printf_i+0x144>
 8010bd2:	6923      	ldr	r3, [r4, #16]
 8010bd4:	6861      	ldr	r1, [r4, #4]
 8010bd6:	4299      	cmp	r1, r3
 8010bd8:	bfde      	ittt	le
 8010bda:	2330      	movle	r3, #48	@ 0x30
 8010bdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010be0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010be4:	1b92      	subs	r2, r2, r6
 8010be6:	6122      	str	r2, [r4, #16]
 8010be8:	f8cd a000 	str.w	sl, [sp]
 8010bec:	464b      	mov	r3, r9
 8010bee:	aa03      	add	r2, sp, #12
 8010bf0:	4621      	mov	r1, r4
 8010bf2:	4640      	mov	r0, r8
 8010bf4:	f7ff fee6 	bl	80109c4 <_printf_common>
 8010bf8:	3001      	adds	r0, #1
 8010bfa:	d14a      	bne.n	8010c92 <_printf_i+0x1f2>
 8010bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8010c00:	b004      	add	sp, #16
 8010c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c06:	6823      	ldr	r3, [r4, #0]
 8010c08:	f043 0320 	orr.w	r3, r3, #32
 8010c0c:	6023      	str	r3, [r4, #0]
 8010c0e:	4833      	ldr	r0, [pc, #204]	@ (8010cdc <_printf_i+0x23c>)
 8010c10:	2778      	movs	r7, #120	@ 0x78
 8010c12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010c16:	6823      	ldr	r3, [r4, #0]
 8010c18:	6831      	ldr	r1, [r6, #0]
 8010c1a:	061f      	lsls	r7, r3, #24
 8010c1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010c20:	d402      	bmi.n	8010c28 <_printf_i+0x188>
 8010c22:	065f      	lsls	r7, r3, #25
 8010c24:	bf48      	it	mi
 8010c26:	b2ad      	uxthmi	r5, r5
 8010c28:	6031      	str	r1, [r6, #0]
 8010c2a:	07d9      	lsls	r1, r3, #31
 8010c2c:	bf44      	itt	mi
 8010c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8010c32:	6023      	strmi	r3, [r4, #0]
 8010c34:	b11d      	cbz	r5, 8010c3e <_printf_i+0x19e>
 8010c36:	2310      	movs	r3, #16
 8010c38:	e7ac      	b.n	8010b94 <_printf_i+0xf4>
 8010c3a:	4827      	ldr	r0, [pc, #156]	@ (8010cd8 <_printf_i+0x238>)
 8010c3c:	e7e9      	b.n	8010c12 <_printf_i+0x172>
 8010c3e:	6823      	ldr	r3, [r4, #0]
 8010c40:	f023 0320 	bic.w	r3, r3, #32
 8010c44:	6023      	str	r3, [r4, #0]
 8010c46:	e7f6      	b.n	8010c36 <_printf_i+0x196>
 8010c48:	4616      	mov	r6, r2
 8010c4a:	e7bd      	b.n	8010bc8 <_printf_i+0x128>
 8010c4c:	6833      	ldr	r3, [r6, #0]
 8010c4e:	6825      	ldr	r5, [r4, #0]
 8010c50:	6961      	ldr	r1, [r4, #20]
 8010c52:	1d18      	adds	r0, r3, #4
 8010c54:	6030      	str	r0, [r6, #0]
 8010c56:	062e      	lsls	r6, r5, #24
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	d501      	bpl.n	8010c60 <_printf_i+0x1c0>
 8010c5c:	6019      	str	r1, [r3, #0]
 8010c5e:	e002      	b.n	8010c66 <_printf_i+0x1c6>
 8010c60:	0668      	lsls	r0, r5, #25
 8010c62:	d5fb      	bpl.n	8010c5c <_printf_i+0x1bc>
 8010c64:	8019      	strh	r1, [r3, #0]
 8010c66:	2300      	movs	r3, #0
 8010c68:	6123      	str	r3, [r4, #16]
 8010c6a:	4616      	mov	r6, r2
 8010c6c:	e7bc      	b.n	8010be8 <_printf_i+0x148>
 8010c6e:	6833      	ldr	r3, [r6, #0]
 8010c70:	1d1a      	adds	r2, r3, #4
 8010c72:	6032      	str	r2, [r6, #0]
 8010c74:	681e      	ldr	r6, [r3, #0]
 8010c76:	6862      	ldr	r2, [r4, #4]
 8010c78:	2100      	movs	r1, #0
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	f7ef fab8 	bl	80001f0 <memchr>
 8010c80:	b108      	cbz	r0, 8010c86 <_printf_i+0x1e6>
 8010c82:	1b80      	subs	r0, r0, r6
 8010c84:	6060      	str	r0, [r4, #4]
 8010c86:	6863      	ldr	r3, [r4, #4]
 8010c88:	6123      	str	r3, [r4, #16]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c90:	e7aa      	b.n	8010be8 <_printf_i+0x148>
 8010c92:	6923      	ldr	r3, [r4, #16]
 8010c94:	4632      	mov	r2, r6
 8010c96:	4649      	mov	r1, r9
 8010c98:	4640      	mov	r0, r8
 8010c9a:	47d0      	blx	sl
 8010c9c:	3001      	adds	r0, #1
 8010c9e:	d0ad      	beq.n	8010bfc <_printf_i+0x15c>
 8010ca0:	6823      	ldr	r3, [r4, #0]
 8010ca2:	079b      	lsls	r3, r3, #30
 8010ca4:	d413      	bmi.n	8010cce <_printf_i+0x22e>
 8010ca6:	68e0      	ldr	r0, [r4, #12]
 8010ca8:	9b03      	ldr	r3, [sp, #12]
 8010caa:	4298      	cmp	r0, r3
 8010cac:	bfb8      	it	lt
 8010cae:	4618      	movlt	r0, r3
 8010cb0:	e7a6      	b.n	8010c00 <_printf_i+0x160>
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	4632      	mov	r2, r6
 8010cb6:	4649      	mov	r1, r9
 8010cb8:	4640      	mov	r0, r8
 8010cba:	47d0      	blx	sl
 8010cbc:	3001      	adds	r0, #1
 8010cbe:	d09d      	beq.n	8010bfc <_printf_i+0x15c>
 8010cc0:	3501      	adds	r5, #1
 8010cc2:	68e3      	ldr	r3, [r4, #12]
 8010cc4:	9903      	ldr	r1, [sp, #12]
 8010cc6:	1a5b      	subs	r3, r3, r1
 8010cc8:	42ab      	cmp	r3, r5
 8010cca:	dcf2      	bgt.n	8010cb2 <_printf_i+0x212>
 8010ccc:	e7eb      	b.n	8010ca6 <_printf_i+0x206>
 8010cce:	2500      	movs	r5, #0
 8010cd0:	f104 0619 	add.w	r6, r4, #25
 8010cd4:	e7f5      	b.n	8010cc2 <_printf_i+0x222>
 8010cd6:	bf00      	nop
 8010cd8:	08017063 	.word	0x08017063
 8010cdc:	08017074 	.word	0x08017074

08010ce0 <_scanf_float>:
 8010ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce4:	b087      	sub	sp, #28
 8010ce6:	4617      	mov	r7, r2
 8010ce8:	9303      	str	r3, [sp, #12]
 8010cea:	688b      	ldr	r3, [r1, #8]
 8010cec:	1e5a      	subs	r2, r3, #1
 8010cee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010cf2:	bf81      	itttt	hi
 8010cf4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010cf8:	eb03 0b05 	addhi.w	fp, r3, r5
 8010cfc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010d00:	608b      	strhi	r3, [r1, #8]
 8010d02:	680b      	ldr	r3, [r1, #0]
 8010d04:	460a      	mov	r2, r1
 8010d06:	f04f 0500 	mov.w	r5, #0
 8010d0a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010d0e:	f842 3b1c 	str.w	r3, [r2], #28
 8010d12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010d16:	4680      	mov	r8, r0
 8010d18:	460c      	mov	r4, r1
 8010d1a:	bf98      	it	ls
 8010d1c:	f04f 0b00 	movls.w	fp, #0
 8010d20:	9201      	str	r2, [sp, #4]
 8010d22:	4616      	mov	r6, r2
 8010d24:	46aa      	mov	sl, r5
 8010d26:	46a9      	mov	r9, r5
 8010d28:	9502      	str	r5, [sp, #8]
 8010d2a:	68a2      	ldr	r2, [r4, #8]
 8010d2c:	b152      	cbz	r2, 8010d44 <_scanf_float+0x64>
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	2b4e      	cmp	r3, #78	@ 0x4e
 8010d34:	d864      	bhi.n	8010e00 <_scanf_float+0x120>
 8010d36:	2b40      	cmp	r3, #64	@ 0x40
 8010d38:	d83c      	bhi.n	8010db4 <_scanf_float+0xd4>
 8010d3a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010d3e:	b2c8      	uxtb	r0, r1
 8010d40:	280e      	cmp	r0, #14
 8010d42:	d93a      	bls.n	8010dba <_scanf_float+0xda>
 8010d44:	f1b9 0f00 	cmp.w	r9, #0
 8010d48:	d003      	beq.n	8010d52 <_scanf_float+0x72>
 8010d4a:	6823      	ldr	r3, [r4, #0]
 8010d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d50:	6023      	str	r3, [r4, #0]
 8010d52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d56:	f1ba 0f01 	cmp.w	sl, #1
 8010d5a:	f200 8117 	bhi.w	8010f8c <_scanf_float+0x2ac>
 8010d5e:	9b01      	ldr	r3, [sp, #4]
 8010d60:	429e      	cmp	r6, r3
 8010d62:	f200 8108 	bhi.w	8010f76 <_scanf_float+0x296>
 8010d66:	2001      	movs	r0, #1
 8010d68:	b007      	add	sp, #28
 8010d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d6e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010d72:	2a0d      	cmp	r2, #13
 8010d74:	d8e6      	bhi.n	8010d44 <_scanf_float+0x64>
 8010d76:	a101      	add	r1, pc, #4	@ (adr r1, 8010d7c <_scanf_float+0x9c>)
 8010d78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010d7c:	08010ec3 	.word	0x08010ec3
 8010d80:	08010d45 	.word	0x08010d45
 8010d84:	08010d45 	.word	0x08010d45
 8010d88:	08010d45 	.word	0x08010d45
 8010d8c:	08010f23 	.word	0x08010f23
 8010d90:	08010efb 	.word	0x08010efb
 8010d94:	08010d45 	.word	0x08010d45
 8010d98:	08010d45 	.word	0x08010d45
 8010d9c:	08010ed1 	.word	0x08010ed1
 8010da0:	08010d45 	.word	0x08010d45
 8010da4:	08010d45 	.word	0x08010d45
 8010da8:	08010d45 	.word	0x08010d45
 8010dac:	08010d45 	.word	0x08010d45
 8010db0:	08010e89 	.word	0x08010e89
 8010db4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010db8:	e7db      	b.n	8010d72 <_scanf_float+0x92>
 8010dba:	290e      	cmp	r1, #14
 8010dbc:	d8c2      	bhi.n	8010d44 <_scanf_float+0x64>
 8010dbe:	a001      	add	r0, pc, #4	@ (adr r0, 8010dc4 <_scanf_float+0xe4>)
 8010dc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010dc4:	08010e79 	.word	0x08010e79
 8010dc8:	08010d45 	.word	0x08010d45
 8010dcc:	08010e79 	.word	0x08010e79
 8010dd0:	08010f0f 	.word	0x08010f0f
 8010dd4:	08010d45 	.word	0x08010d45
 8010dd8:	08010e21 	.word	0x08010e21
 8010ddc:	08010e5f 	.word	0x08010e5f
 8010de0:	08010e5f 	.word	0x08010e5f
 8010de4:	08010e5f 	.word	0x08010e5f
 8010de8:	08010e5f 	.word	0x08010e5f
 8010dec:	08010e5f 	.word	0x08010e5f
 8010df0:	08010e5f 	.word	0x08010e5f
 8010df4:	08010e5f 	.word	0x08010e5f
 8010df8:	08010e5f 	.word	0x08010e5f
 8010dfc:	08010e5f 	.word	0x08010e5f
 8010e00:	2b6e      	cmp	r3, #110	@ 0x6e
 8010e02:	d809      	bhi.n	8010e18 <_scanf_float+0x138>
 8010e04:	2b60      	cmp	r3, #96	@ 0x60
 8010e06:	d8b2      	bhi.n	8010d6e <_scanf_float+0x8e>
 8010e08:	2b54      	cmp	r3, #84	@ 0x54
 8010e0a:	d07b      	beq.n	8010f04 <_scanf_float+0x224>
 8010e0c:	2b59      	cmp	r3, #89	@ 0x59
 8010e0e:	d199      	bne.n	8010d44 <_scanf_float+0x64>
 8010e10:	2d07      	cmp	r5, #7
 8010e12:	d197      	bne.n	8010d44 <_scanf_float+0x64>
 8010e14:	2508      	movs	r5, #8
 8010e16:	e02c      	b.n	8010e72 <_scanf_float+0x192>
 8010e18:	2b74      	cmp	r3, #116	@ 0x74
 8010e1a:	d073      	beq.n	8010f04 <_scanf_float+0x224>
 8010e1c:	2b79      	cmp	r3, #121	@ 0x79
 8010e1e:	e7f6      	b.n	8010e0e <_scanf_float+0x12e>
 8010e20:	6821      	ldr	r1, [r4, #0]
 8010e22:	05c8      	lsls	r0, r1, #23
 8010e24:	d51b      	bpl.n	8010e5e <_scanf_float+0x17e>
 8010e26:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010e2a:	6021      	str	r1, [r4, #0]
 8010e2c:	f109 0901 	add.w	r9, r9, #1
 8010e30:	f1bb 0f00 	cmp.w	fp, #0
 8010e34:	d003      	beq.n	8010e3e <_scanf_float+0x15e>
 8010e36:	3201      	adds	r2, #1
 8010e38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010e3c:	60a2      	str	r2, [r4, #8]
 8010e3e:	68a3      	ldr	r3, [r4, #8]
 8010e40:	3b01      	subs	r3, #1
 8010e42:	60a3      	str	r3, [r4, #8]
 8010e44:	6923      	ldr	r3, [r4, #16]
 8010e46:	3301      	adds	r3, #1
 8010e48:	6123      	str	r3, [r4, #16]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	607b      	str	r3, [r7, #4]
 8010e52:	f340 8087 	ble.w	8010f64 <_scanf_float+0x284>
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	3301      	adds	r3, #1
 8010e5a:	603b      	str	r3, [r7, #0]
 8010e5c:	e765      	b.n	8010d2a <_scanf_float+0x4a>
 8010e5e:	eb1a 0105 	adds.w	r1, sl, r5
 8010e62:	f47f af6f 	bne.w	8010d44 <_scanf_float+0x64>
 8010e66:	6822      	ldr	r2, [r4, #0]
 8010e68:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010e6c:	6022      	str	r2, [r4, #0]
 8010e6e:	460d      	mov	r5, r1
 8010e70:	468a      	mov	sl, r1
 8010e72:	f806 3b01 	strb.w	r3, [r6], #1
 8010e76:	e7e2      	b.n	8010e3e <_scanf_float+0x15e>
 8010e78:	6822      	ldr	r2, [r4, #0]
 8010e7a:	0610      	lsls	r0, r2, #24
 8010e7c:	f57f af62 	bpl.w	8010d44 <_scanf_float+0x64>
 8010e80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010e84:	6022      	str	r2, [r4, #0]
 8010e86:	e7f4      	b.n	8010e72 <_scanf_float+0x192>
 8010e88:	f1ba 0f00 	cmp.w	sl, #0
 8010e8c:	d10e      	bne.n	8010eac <_scanf_float+0x1cc>
 8010e8e:	f1b9 0f00 	cmp.w	r9, #0
 8010e92:	d10e      	bne.n	8010eb2 <_scanf_float+0x1d2>
 8010e94:	6822      	ldr	r2, [r4, #0]
 8010e96:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010e9a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010e9e:	d108      	bne.n	8010eb2 <_scanf_float+0x1d2>
 8010ea0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010ea4:	6022      	str	r2, [r4, #0]
 8010ea6:	f04f 0a01 	mov.w	sl, #1
 8010eaa:	e7e2      	b.n	8010e72 <_scanf_float+0x192>
 8010eac:	f1ba 0f02 	cmp.w	sl, #2
 8010eb0:	d055      	beq.n	8010f5e <_scanf_float+0x27e>
 8010eb2:	2d01      	cmp	r5, #1
 8010eb4:	d002      	beq.n	8010ebc <_scanf_float+0x1dc>
 8010eb6:	2d04      	cmp	r5, #4
 8010eb8:	f47f af44 	bne.w	8010d44 <_scanf_float+0x64>
 8010ebc:	3501      	adds	r5, #1
 8010ebe:	b2ed      	uxtb	r5, r5
 8010ec0:	e7d7      	b.n	8010e72 <_scanf_float+0x192>
 8010ec2:	f1ba 0f01 	cmp.w	sl, #1
 8010ec6:	f47f af3d 	bne.w	8010d44 <_scanf_float+0x64>
 8010eca:	f04f 0a02 	mov.w	sl, #2
 8010ece:	e7d0      	b.n	8010e72 <_scanf_float+0x192>
 8010ed0:	b97d      	cbnz	r5, 8010ef2 <_scanf_float+0x212>
 8010ed2:	f1b9 0f00 	cmp.w	r9, #0
 8010ed6:	f47f af38 	bne.w	8010d4a <_scanf_float+0x6a>
 8010eda:	6822      	ldr	r2, [r4, #0]
 8010edc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010ee0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010ee4:	f040 8108 	bne.w	80110f8 <_scanf_float+0x418>
 8010ee8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010eec:	6022      	str	r2, [r4, #0]
 8010eee:	2501      	movs	r5, #1
 8010ef0:	e7bf      	b.n	8010e72 <_scanf_float+0x192>
 8010ef2:	2d03      	cmp	r5, #3
 8010ef4:	d0e2      	beq.n	8010ebc <_scanf_float+0x1dc>
 8010ef6:	2d05      	cmp	r5, #5
 8010ef8:	e7de      	b.n	8010eb8 <_scanf_float+0x1d8>
 8010efa:	2d02      	cmp	r5, #2
 8010efc:	f47f af22 	bne.w	8010d44 <_scanf_float+0x64>
 8010f00:	2503      	movs	r5, #3
 8010f02:	e7b6      	b.n	8010e72 <_scanf_float+0x192>
 8010f04:	2d06      	cmp	r5, #6
 8010f06:	f47f af1d 	bne.w	8010d44 <_scanf_float+0x64>
 8010f0a:	2507      	movs	r5, #7
 8010f0c:	e7b1      	b.n	8010e72 <_scanf_float+0x192>
 8010f0e:	6822      	ldr	r2, [r4, #0]
 8010f10:	0591      	lsls	r1, r2, #22
 8010f12:	f57f af17 	bpl.w	8010d44 <_scanf_float+0x64>
 8010f16:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010f1a:	6022      	str	r2, [r4, #0]
 8010f1c:	f8cd 9008 	str.w	r9, [sp, #8]
 8010f20:	e7a7      	b.n	8010e72 <_scanf_float+0x192>
 8010f22:	6822      	ldr	r2, [r4, #0]
 8010f24:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010f28:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010f2c:	d006      	beq.n	8010f3c <_scanf_float+0x25c>
 8010f2e:	0550      	lsls	r0, r2, #21
 8010f30:	f57f af08 	bpl.w	8010d44 <_scanf_float+0x64>
 8010f34:	f1b9 0f00 	cmp.w	r9, #0
 8010f38:	f000 80de 	beq.w	80110f8 <_scanf_float+0x418>
 8010f3c:	0591      	lsls	r1, r2, #22
 8010f3e:	bf58      	it	pl
 8010f40:	9902      	ldrpl	r1, [sp, #8]
 8010f42:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010f46:	bf58      	it	pl
 8010f48:	eba9 0101 	subpl.w	r1, r9, r1
 8010f4c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010f50:	bf58      	it	pl
 8010f52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010f56:	6022      	str	r2, [r4, #0]
 8010f58:	f04f 0900 	mov.w	r9, #0
 8010f5c:	e789      	b.n	8010e72 <_scanf_float+0x192>
 8010f5e:	f04f 0a03 	mov.w	sl, #3
 8010f62:	e786      	b.n	8010e72 <_scanf_float+0x192>
 8010f64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010f68:	4639      	mov	r1, r7
 8010f6a:	4640      	mov	r0, r8
 8010f6c:	4798      	blx	r3
 8010f6e:	2800      	cmp	r0, #0
 8010f70:	f43f aedb 	beq.w	8010d2a <_scanf_float+0x4a>
 8010f74:	e6e6      	b.n	8010d44 <_scanf_float+0x64>
 8010f76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010f7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010f7e:	463a      	mov	r2, r7
 8010f80:	4640      	mov	r0, r8
 8010f82:	4798      	blx	r3
 8010f84:	6923      	ldr	r3, [r4, #16]
 8010f86:	3b01      	subs	r3, #1
 8010f88:	6123      	str	r3, [r4, #16]
 8010f8a:	e6e8      	b.n	8010d5e <_scanf_float+0x7e>
 8010f8c:	1e6b      	subs	r3, r5, #1
 8010f8e:	2b06      	cmp	r3, #6
 8010f90:	d824      	bhi.n	8010fdc <_scanf_float+0x2fc>
 8010f92:	2d02      	cmp	r5, #2
 8010f94:	d836      	bhi.n	8011004 <_scanf_float+0x324>
 8010f96:	9b01      	ldr	r3, [sp, #4]
 8010f98:	429e      	cmp	r6, r3
 8010f9a:	f67f aee4 	bls.w	8010d66 <_scanf_float+0x86>
 8010f9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010fa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010fa6:	463a      	mov	r2, r7
 8010fa8:	4640      	mov	r0, r8
 8010faa:	4798      	blx	r3
 8010fac:	6923      	ldr	r3, [r4, #16]
 8010fae:	3b01      	subs	r3, #1
 8010fb0:	6123      	str	r3, [r4, #16]
 8010fb2:	e7f0      	b.n	8010f96 <_scanf_float+0x2b6>
 8010fb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010fb8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010fbc:	463a      	mov	r2, r7
 8010fbe:	4640      	mov	r0, r8
 8010fc0:	4798      	blx	r3
 8010fc2:	6923      	ldr	r3, [r4, #16]
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	6123      	str	r3, [r4, #16]
 8010fc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010fcc:	fa5f fa8a 	uxtb.w	sl, sl
 8010fd0:	f1ba 0f02 	cmp.w	sl, #2
 8010fd4:	d1ee      	bne.n	8010fb4 <_scanf_float+0x2d4>
 8010fd6:	3d03      	subs	r5, #3
 8010fd8:	b2ed      	uxtb	r5, r5
 8010fda:	1b76      	subs	r6, r6, r5
 8010fdc:	6823      	ldr	r3, [r4, #0]
 8010fde:	05da      	lsls	r2, r3, #23
 8010fe0:	d530      	bpl.n	8011044 <_scanf_float+0x364>
 8010fe2:	055b      	lsls	r3, r3, #21
 8010fe4:	d511      	bpl.n	801100a <_scanf_float+0x32a>
 8010fe6:	9b01      	ldr	r3, [sp, #4]
 8010fe8:	429e      	cmp	r6, r3
 8010fea:	f67f aebc 	bls.w	8010d66 <_scanf_float+0x86>
 8010fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010ff2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010ff6:	463a      	mov	r2, r7
 8010ff8:	4640      	mov	r0, r8
 8010ffa:	4798      	blx	r3
 8010ffc:	6923      	ldr	r3, [r4, #16]
 8010ffe:	3b01      	subs	r3, #1
 8011000:	6123      	str	r3, [r4, #16]
 8011002:	e7f0      	b.n	8010fe6 <_scanf_float+0x306>
 8011004:	46aa      	mov	sl, r5
 8011006:	46b3      	mov	fp, r6
 8011008:	e7de      	b.n	8010fc8 <_scanf_float+0x2e8>
 801100a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801100e:	6923      	ldr	r3, [r4, #16]
 8011010:	2965      	cmp	r1, #101	@ 0x65
 8011012:	f103 33ff 	add.w	r3, r3, #4294967295
 8011016:	f106 35ff 	add.w	r5, r6, #4294967295
 801101a:	6123      	str	r3, [r4, #16]
 801101c:	d00c      	beq.n	8011038 <_scanf_float+0x358>
 801101e:	2945      	cmp	r1, #69	@ 0x45
 8011020:	d00a      	beq.n	8011038 <_scanf_float+0x358>
 8011022:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011026:	463a      	mov	r2, r7
 8011028:	4640      	mov	r0, r8
 801102a:	4798      	blx	r3
 801102c:	6923      	ldr	r3, [r4, #16]
 801102e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011032:	3b01      	subs	r3, #1
 8011034:	1eb5      	subs	r5, r6, #2
 8011036:	6123      	str	r3, [r4, #16]
 8011038:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801103c:	463a      	mov	r2, r7
 801103e:	4640      	mov	r0, r8
 8011040:	4798      	blx	r3
 8011042:	462e      	mov	r6, r5
 8011044:	6822      	ldr	r2, [r4, #0]
 8011046:	f012 0210 	ands.w	r2, r2, #16
 801104a:	d001      	beq.n	8011050 <_scanf_float+0x370>
 801104c:	2000      	movs	r0, #0
 801104e:	e68b      	b.n	8010d68 <_scanf_float+0x88>
 8011050:	7032      	strb	r2, [r6, #0]
 8011052:	6823      	ldr	r3, [r4, #0]
 8011054:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801105c:	d11c      	bne.n	8011098 <_scanf_float+0x3b8>
 801105e:	9b02      	ldr	r3, [sp, #8]
 8011060:	454b      	cmp	r3, r9
 8011062:	eba3 0209 	sub.w	r2, r3, r9
 8011066:	d123      	bne.n	80110b0 <_scanf_float+0x3d0>
 8011068:	9901      	ldr	r1, [sp, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	4640      	mov	r0, r8
 801106e:	f7ff f947 	bl	8010300 <_strtod_r>
 8011072:	9b03      	ldr	r3, [sp, #12]
 8011074:	6821      	ldr	r1, [r4, #0]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f011 0f02 	tst.w	r1, #2
 801107c:	ec57 6b10 	vmov	r6, r7, d0
 8011080:	f103 0204 	add.w	r2, r3, #4
 8011084:	d01f      	beq.n	80110c6 <_scanf_float+0x3e6>
 8011086:	9903      	ldr	r1, [sp, #12]
 8011088:	600a      	str	r2, [r1, #0]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	e9c3 6700 	strd	r6, r7, [r3]
 8011090:	68e3      	ldr	r3, [r4, #12]
 8011092:	3301      	adds	r3, #1
 8011094:	60e3      	str	r3, [r4, #12]
 8011096:	e7d9      	b.n	801104c <_scanf_float+0x36c>
 8011098:	9b04      	ldr	r3, [sp, #16]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d0e4      	beq.n	8011068 <_scanf_float+0x388>
 801109e:	9905      	ldr	r1, [sp, #20]
 80110a0:	230a      	movs	r3, #10
 80110a2:	3101      	adds	r1, #1
 80110a4:	4640      	mov	r0, r8
 80110a6:	f7ff f9b7 	bl	8010418 <_strtol_r>
 80110aa:	9b04      	ldr	r3, [sp, #16]
 80110ac:	9e05      	ldr	r6, [sp, #20]
 80110ae:	1ac2      	subs	r2, r0, r3
 80110b0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80110b4:	429e      	cmp	r6, r3
 80110b6:	bf28      	it	cs
 80110b8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80110bc:	4910      	ldr	r1, [pc, #64]	@ (8011100 <_scanf_float+0x420>)
 80110be:	4630      	mov	r0, r6
 80110c0:	f000 f8e4 	bl	801128c <siprintf>
 80110c4:	e7d0      	b.n	8011068 <_scanf_float+0x388>
 80110c6:	f011 0f04 	tst.w	r1, #4
 80110ca:	9903      	ldr	r1, [sp, #12]
 80110cc:	600a      	str	r2, [r1, #0]
 80110ce:	d1dc      	bne.n	801108a <_scanf_float+0x3aa>
 80110d0:	681d      	ldr	r5, [r3, #0]
 80110d2:	4632      	mov	r2, r6
 80110d4:	463b      	mov	r3, r7
 80110d6:	4630      	mov	r0, r6
 80110d8:	4639      	mov	r1, r7
 80110da:	f7ef fd37 	bl	8000b4c <__aeabi_dcmpun>
 80110de:	b128      	cbz	r0, 80110ec <_scanf_float+0x40c>
 80110e0:	4808      	ldr	r0, [pc, #32]	@ (8011104 <_scanf_float+0x424>)
 80110e2:	f000 fa51 	bl	8011588 <nanf>
 80110e6:	ed85 0a00 	vstr	s0, [r5]
 80110ea:	e7d1      	b.n	8011090 <_scanf_float+0x3b0>
 80110ec:	4630      	mov	r0, r6
 80110ee:	4639      	mov	r1, r7
 80110f0:	f7ef fd8a 	bl	8000c08 <__aeabi_d2f>
 80110f4:	6028      	str	r0, [r5, #0]
 80110f6:	e7cb      	b.n	8011090 <_scanf_float+0x3b0>
 80110f8:	f04f 0900 	mov.w	r9, #0
 80110fc:	e629      	b.n	8010d52 <_scanf_float+0x72>
 80110fe:	bf00      	nop
 8011100:	08017085 	.word	0x08017085
 8011104:	0801713e 	.word	0x0801713e

08011108 <std>:
 8011108:	2300      	movs	r3, #0
 801110a:	b510      	push	{r4, lr}
 801110c:	4604      	mov	r4, r0
 801110e:	e9c0 3300 	strd	r3, r3, [r0]
 8011112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011116:	6083      	str	r3, [r0, #8]
 8011118:	8181      	strh	r1, [r0, #12]
 801111a:	6643      	str	r3, [r0, #100]	@ 0x64
 801111c:	81c2      	strh	r2, [r0, #14]
 801111e:	6183      	str	r3, [r0, #24]
 8011120:	4619      	mov	r1, r3
 8011122:	2208      	movs	r2, #8
 8011124:	305c      	adds	r0, #92	@ 0x5c
 8011126:	f000 f914 	bl	8011352 <memset>
 801112a:	4b0d      	ldr	r3, [pc, #52]	@ (8011160 <std+0x58>)
 801112c:	6263      	str	r3, [r4, #36]	@ 0x24
 801112e:	4b0d      	ldr	r3, [pc, #52]	@ (8011164 <std+0x5c>)
 8011130:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011132:	4b0d      	ldr	r3, [pc, #52]	@ (8011168 <std+0x60>)
 8011134:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011136:	4b0d      	ldr	r3, [pc, #52]	@ (801116c <std+0x64>)
 8011138:	6323      	str	r3, [r4, #48]	@ 0x30
 801113a:	4b0d      	ldr	r3, [pc, #52]	@ (8011170 <std+0x68>)
 801113c:	6224      	str	r4, [r4, #32]
 801113e:	429c      	cmp	r4, r3
 8011140:	d006      	beq.n	8011150 <std+0x48>
 8011142:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011146:	4294      	cmp	r4, r2
 8011148:	d002      	beq.n	8011150 <std+0x48>
 801114a:	33d0      	adds	r3, #208	@ 0xd0
 801114c:	429c      	cmp	r4, r3
 801114e:	d105      	bne.n	801115c <std+0x54>
 8011150:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011158:	f000 b9fc 	b.w	8011554 <__retarget_lock_init_recursive>
 801115c:	bd10      	pop	{r4, pc}
 801115e:	bf00      	nop
 8011160:	080112cd 	.word	0x080112cd
 8011164:	080112ef 	.word	0x080112ef
 8011168:	08011327 	.word	0x08011327
 801116c:	0801134b 	.word	0x0801134b
 8011170:	2000a358 	.word	0x2000a358

08011174 <stdio_exit_handler>:
 8011174:	4a02      	ldr	r2, [pc, #8]	@ (8011180 <stdio_exit_handler+0xc>)
 8011176:	4903      	ldr	r1, [pc, #12]	@ (8011184 <stdio_exit_handler+0x10>)
 8011178:	4803      	ldr	r0, [pc, #12]	@ (8011188 <stdio_exit_handler+0x14>)
 801117a:	f000 b869 	b.w	8011250 <_fwalk_sglue>
 801117e:	bf00      	nop
 8011180:	200021e8 	.word	0x200021e8
 8011184:	08013835 	.word	0x08013835
 8011188:	20002364 	.word	0x20002364

0801118c <cleanup_stdio>:
 801118c:	6841      	ldr	r1, [r0, #4]
 801118e:	4b0c      	ldr	r3, [pc, #48]	@ (80111c0 <cleanup_stdio+0x34>)
 8011190:	4299      	cmp	r1, r3
 8011192:	b510      	push	{r4, lr}
 8011194:	4604      	mov	r4, r0
 8011196:	d001      	beq.n	801119c <cleanup_stdio+0x10>
 8011198:	f002 fb4c 	bl	8013834 <_fflush_r>
 801119c:	68a1      	ldr	r1, [r4, #8]
 801119e:	4b09      	ldr	r3, [pc, #36]	@ (80111c4 <cleanup_stdio+0x38>)
 80111a0:	4299      	cmp	r1, r3
 80111a2:	d002      	beq.n	80111aa <cleanup_stdio+0x1e>
 80111a4:	4620      	mov	r0, r4
 80111a6:	f002 fb45 	bl	8013834 <_fflush_r>
 80111aa:	68e1      	ldr	r1, [r4, #12]
 80111ac:	4b06      	ldr	r3, [pc, #24]	@ (80111c8 <cleanup_stdio+0x3c>)
 80111ae:	4299      	cmp	r1, r3
 80111b0:	d004      	beq.n	80111bc <cleanup_stdio+0x30>
 80111b2:	4620      	mov	r0, r4
 80111b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111b8:	f002 bb3c 	b.w	8013834 <_fflush_r>
 80111bc:	bd10      	pop	{r4, pc}
 80111be:	bf00      	nop
 80111c0:	2000a358 	.word	0x2000a358
 80111c4:	2000a3c0 	.word	0x2000a3c0
 80111c8:	2000a428 	.word	0x2000a428

080111cc <global_stdio_init.part.0>:
 80111cc:	b510      	push	{r4, lr}
 80111ce:	4b0b      	ldr	r3, [pc, #44]	@ (80111fc <global_stdio_init.part.0+0x30>)
 80111d0:	4c0b      	ldr	r4, [pc, #44]	@ (8011200 <global_stdio_init.part.0+0x34>)
 80111d2:	4a0c      	ldr	r2, [pc, #48]	@ (8011204 <global_stdio_init.part.0+0x38>)
 80111d4:	601a      	str	r2, [r3, #0]
 80111d6:	4620      	mov	r0, r4
 80111d8:	2200      	movs	r2, #0
 80111da:	2104      	movs	r1, #4
 80111dc:	f7ff ff94 	bl	8011108 <std>
 80111e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80111e4:	2201      	movs	r2, #1
 80111e6:	2109      	movs	r1, #9
 80111e8:	f7ff ff8e 	bl	8011108 <std>
 80111ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80111f0:	2202      	movs	r2, #2
 80111f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111f6:	2112      	movs	r1, #18
 80111f8:	f7ff bf86 	b.w	8011108 <std>
 80111fc:	2000a490 	.word	0x2000a490
 8011200:	2000a358 	.word	0x2000a358
 8011204:	08011175 	.word	0x08011175

08011208 <__sfp_lock_acquire>:
 8011208:	4801      	ldr	r0, [pc, #4]	@ (8011210 <__sfp_lock_acquire+0x8>)
 801120a:	f000 b9a4 	b.w	8011556 <__retarget_lock_acquire_recursive>
 801120e:	bf00      	nop
 8011210:	2000a499 	.word	0x2000a499

08011214 <__sfp_lock_release>:
 8011214:	4801      	ldr	r0, [pc, #4]	@ (801121c <__sfp_lock_release+0x8>)
 8011216:	f000 b99f 	b.w	8011558 <__retarget_lock_release_recursive>
 801121a:	bf00      	nop
 801121c:	2000a499 	.word	0x2000a499

08011220 <__sinit>:
 8011220:	b510      	push	{r4, lr}
 8011222:	4604      	mov	r4, r0
 8011224:	f7ff fff0 	bl	8011208 <__sfp_lock_acquire>
 8011228:	6a23      	ldr	r3, [r4, #32]
 801122a:	b11b      	cbz	r3, 8011234 <__sinit+0x14>
 801122c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011230:	f7ff bff0 	b.w	8011214 <__sfp_lock_release>
 8011234:	4b04      	ldr	r3, [pc, #16]	@ (8011248 <__sinit+0x28>)
 8011236:	6223      	str	r3, [r4, #32]
 8011238:	4b04      	ldr	r3, [pc, #16]	@ (801124c <__sinit+0x2c>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1f5      	bne.n	801122c <__sinit+0xc>
 8011240:	f7ff ffc4 	bl	80111cc <global_stdio_init.part.0>
 8011244:	e7f2      	b.n	801122c <__sinit+0xc>
 8011246:	bf00      	nop
 8011248:	0801118d 	.word	0x0801118d
 801124c:	2000a490 	.word	0x2000a490

08011250 <_fwalk_sglue>:
 8011250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011254:	4607      	mov	r7, r0
 8011256:	4688      	mov	r8, r1
 8011258:	4614      	mov	r4, r2
 801125a:	2600      	movs	r6, #0
 801125c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011260:	f1b9 0901 	subs.w	r9, r9, #1
 8011264:	d505      	bpl.n	8011272 <_fwalk_sglue+0x22>
 8011266:	6824      	ldr	r4, [r4, #0]
 8011268:	2c00      	cmp	r4, #0
 801126a:	d1f7      	bne.n	801125c <_fwalk_sglue+0xc>
 801126c:	4630      	mov	r0, r6
 801126e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011272:	89ab      	ldrh	r3, [r5, #12]
 8011274:	2b01      	cmp	r3, #1
 8011276:	d907      	bls.n	8011288 <_fwalk_sglue+0x38>
 8011278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801127c:	3301      	adds	r3, #1
 801127e:	d003      	beq.n	8011288 <_fwalk_sglue+0x38>
 8011280:	4629      	mov	r1, r5
 8011282:	4638      	mov	r0, r7
 8011284:	47c0      	blx	r8
 8011286:	4306      	orrs	r6, r0
 8011288:	3568      	adds	r5, #104	@ 0x68
 801128a:	e7e9      	b.n	8011260 <_fwalk_sglue+0x10>

0801128c <siprintf>:
 801128c:	b40e      	push	{r1, r2, r3}
 801128e:	b500      	push	{lr}
 8011290:	b09c      	sub	sp, #112	@ 0x70
 8011292:	ab1d      	add	r3, sp, #116	@ 0x74
 8011294:	9002      	str	r0, [sp, #8]
 8011296:	9006      	str	r0, [sp, #24]
 8011298:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801129c:	4809      	ldr	r0, [pc, #36]	@ (80112c4 <siprintf+0x38>)
 801129e:	9107      	str	r1, [sp, #28]
 80112a0:	9104      	str	r1, [sp, #16]
 80112a2:	4909      	ldr	r1, [pc, #36]	@ (80112c8 <siprintf+0x3c>)
 80112a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80112a8:	9105      	str	r1, [sp, #20]
 80112aa:	6800      	ldr	r0, [r0, #0]
 80112ac:	9301      	str	r3, [sp, #4]
 80112ae:	a902      	add	r1, sp, #8
 80112b0:	f002 f940 	bl	8013534 <_svfiprintf_r>
 80112b4:	9b02      	ldr	r3, [sp, #8]
 80112b6:	2200      	movs	r2, #0
 80112b8:	701a      	strb	r2, [r3, #0]
 80112ba:	b01c      	add	sp, #112	@ 0x70
 80112bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80112c0:	b003      	add	sp, #12
 80112c2:	4770      	bx	lr
 80112c4:	20002360 	.word	0x20002360
 80112c8:	ffff0208 	.word	0xffff0208

080112cc <__sread>:
 80112cc:	b510      	push	{r4, lr}
 80112ce:	460c      	mov	r4, r1
 80112d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112d4:	f000 f8f0 	bl	80114b8 <_read_r>
 80112d8:	2800      	cmp	r0, #0
 80112da:	bfab      	itete	ge
 80112dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80112de:	89a3      	ldrhlt	r3, [r4, #12]
 80112e0:	181b      	addge	r3, r3, r0
 80112e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80112e6:	bfac      	ite	ge
 80112e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80112ea:	81a3      	strhlt	r3, [r4, #12]
 80112ec:	bd10      	pop	{r4, pc}

080112ee <__swrite>:
 80112ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f2:	461f      	mov	r7, r3
 80112f4:	898b      	ldrh	r3, [r1, #12]
 80112f6:	05db      	lsls	r3, r3, #23
 80112f8:	4605      	mov	r5, r0
 80112fa:	460c      	mov	r4, r1
 80112fc:	4616      	mov	r6, r2
 80112fe:	d505      	bpl.n	801130c <__swrite+0x1e>
 8011300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011304:	2302      	movs	r3, #2
 8011306:	2200      	movs	r2, #0
 8011308:	f000 f8c4 	bl	8011494 <_lseek_r>
 801130c:	89a3      	ldrh	r3, [r4, #12]
 801130e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011312:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011316:	81a3      	strh	r3, [r4, #12]
 8011318:	4632      	mov	r2, r6
 801131a:	463b      	mov	r3, r7
 801131c:	4628      	mov	r0, r5
 801131e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011322:	f000 b8db 	b.w	80114dc <_write_r>

08011326 <__sseek>:
 8011326:	b510      	push	{r4, lr}
 8011328:	460c      	mov	r4, r1
 801132a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801132e:	f000 f8b1 	bl	8011494 <_lseek_r>
 8011332:	1c43      	adds	r3, r0, #1
 8011334:	89a3      	ldrh	r3, [r4, #12]
 8011336:	bf15      	itete	ne
 8011338:	6560      	strne	r0, [r4, #84]	@ 0x54
 801133a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801133e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011342:	81a3      	strheq	r3, [r4, #12]
 8011344:	bf18      	it	ne
 8011346:	81a3      	strhne	r3, [r4, #12]
 8011348:	bd10      	pop	{r4, pc}

0801134a <__sclose>:
 801134a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801134e:	f000 b891 	b.w	8011474 <_close_r>

08011352 <memset>:
 8011352:	4402      	add	r2, r0
 8011354:	4603      	mov	r3, r0
 8011356:	4293      	cmp	r3, r2
 8011358:	d100      	bne.n	801135c <memset+0xa>
 801135a:	4770      	bx	lr
 801135c:	f803 1b01 	strb.w	r1, [r3], #1
 8011360:	e7f9      	b.n	8011356 <memset+0x4>

08011362 <strncmp>:
 8011362:	b510      	push	{r4, lr}
 8011364:	b16a      	cbz	r2, 8011382 <strncmp+0x20>
 8011366:	3901      	subs	r1, #1
 8011368:	1884      	adds	r4, r0, r2
 801136a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801136e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011372:	429a      	cmp	r2, r3
 8011374:	d103      	bne.n	801137e <strncmp+0x1c>
 8011376:	42a0      	cmp	r0, r4
 8011378:	d001      	beq.n	801137e <strncmp+0x1c>
 801137a:	2a00      	cmp	r2, #0
 801137c:	d1f5      	bne.n	801136a <strncmp+0x8>
 801137e:	1ad0      	subs	r0, r2, r3
 8011380:	bd10      	pop	{r4, pc}
 8011382:	4610      	mov	r0, r2
 8011384:	e7fc      	b.n	8011380 <strncmp+0x1e>
	...

08011388 <strtok>:
 8011388:	4b16      	ldr	r3, [pc, #88]	@ (80113e4 <strtok+0x5c>)
 801138a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801138e:	681f      	ldr	r7, [r3, #0]
 8011390:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8011392:	4605      	mov	r5, r0
 8011394:	460e      	mov	r6, r1
 8011396:	b9ec      	cbnz	r4, 80113d4 <strtok+0x4c>
 8011398:	2050      	movs	r0, #80	@ 0x50
 801139a:	f001 fae9 	bl	8012970 <malloc>
 801139e:	4602      	mov	r2, r0
 80113a0:	6478      	str	r0, [r7, #68]	@ 0x44
 80113a2:	b920      	cbnz	r0, 80113ae <strtok+0x26>
 80113a4:	4b10      	ldr	r3, [pc, #64]	@ (80113e8 <strtok+0x60>)
 80113a6:	4811      	ldr	r0, [pc, #68]	@ (80113ec <strtok+0x64>)
 80113a8:	215b      	movs	r1, #91	@ 0x5b
 80113aa:	f000 f8f3 	bl	8011594 <__assert_func>
 80113ae:	e9c0 4400 	strd	r4, r4, [r0]
 80113b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80113b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80113ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80113be:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80113c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80113c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80113ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80113ce:	6184      	str	r4, [r0, #24]
 80113d0:	7704      	strb	r4, [r0, #28]
 80113d2:	6244      	str	r4, [r0, #36]	@ 0x24
 80113d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80113d6:	4631      	mov	r1, r6
 80113d8:	4628      	mov	r0, r5
 80113da:	2301      	movs	r3, #1
 80113dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113e0:	f000 b806 	b.w	80113f0 <__strtok_r>
 80113e4:	20002360 	.word	0x20002360
 80113e8:	0801708a 	.word	0x0801708a
 80113ec:	080170a1 	.word	0x080170a1

080113f0 <__strtok_r>:
 80113f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113f2:	4604      	mov	r4, r0
 80113f4:	b908      	cbnz	r0, 80113fa <__strtok_r+0xa>
 80113f6:	6814      	ldr	r4, [r2, #0]
 80113f8:	b144      	cbz	r4, 801140c <__strtok_r+0x1c>
 80113fa:	4620      	mov	r0, r4
 80113fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011400:	460f      	mov	r7, r1
 8011402:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011406:	b91e      	cbnz	r6, 8011410 <__strtok_r+0x20>
 8011408:	b965      	cbnz	r5, 8011424 <__strtok_r+0x34>
 801140a:	6015      	str	r5, [r2, #0]
 801140c:	2000      	movs	r0, #0
 801140e:	e005      	b.n	801141c <__strtok_r+0x2c>
 8011410:	42b5      	cmp	r5, r6
 8011412:	d1f6      	bne.n	8011402 <__strtok_r+0x12>
 8011414:	2b00      	cmp	r3, #0
 8011416:	d1f0      	bne.n	80113fa <__strtok_r+0xa>
 8011418:	6014      	str	r4, [r2, #0]
 801141a:	7003      	strb	r3, [r0, #0]
 801141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801141e:	461c      	mov	r4, r3
 8011420:	e00c      	b.n	801143c <__strtok_r+0x4c>
 8011422:	b915      	cbnz	r5, 801142a <__strtok_r+0x3a>
 8011424:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011428:	460e      	mov	r6, r1
 801142a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801142e:	42ab      	cmp	r3, r5
 8011430:	d1f7      	bne.n	8011422 <__strtok_r+0x32>
 8011432:	2b00      	cmp	r3, #0
 8011434:	d0f3      	beq.n	801141e <__strtok_r+0x2e>
 8011436:	2300      	movs	r3, #0
 8011438:	f804 3c01 	strb.w	r3, [r4, #-1]
 801143c:	6014      	str	r4, [r2, #0]
 801143e:	e7ed      	b.n	801141c <__strtok_r+0x2c>

08011440 <strstr>:
 8011440:	780a      	ldrb	r2, [r1, #0]
 8011442:	b570      	push	{r4, r5, r6, lr}
 8011444:	b96a      	cbnz	r2, 8011462 <strstr+0x22>
 8011446:	bd70      	pop	{r4, r5, r6, pc}
 8011448:	429a      	cmp	r2, r3
 801144a:	d109      	bne.n	8011460 <strstr+0x20>
 801144c:	460c      	mov	r4, r1
 801144e:	4605      	mov	r5, r0
 8011450:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011454:	2b00      	cmp	r3, #0
 8011456:	d0f6      	beq.n	8011446 <strstr+0x6>
 8011458:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801145c:	429e      	cmp	r6, r3
 801145e:	d0f7      	beq.n	8011450 <strstr+0x10>
 8011460:	3001      	adds	r0, #1
 8011462:	7803      	ldrb	r3, [r0, #0]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d1ef      	bne.n	8011448 <strstr+0x8>
 8011468:	4618      	mov	r0, r3
 801146a:	e7ec      	b.n	8011446 <strstr+0x6>

0801146c <_localeconv_r>:
 801146c:	4800      	ldr	r0, [pc, #0]	@ (8011470 <_localeconv_r+0x4>)
 801146e:	4770      	bx	lr
 8011470:	200022e4 	.word	0x200022e4

08011474 <_close_r>:
 8011474:	b538      	push	{r3, r4, r5, lr}
 8011476:	4d06      	ldr	r5, [pc, #24]	@ (8011490 <_close_r+0x1c>)
 8011478:	2300      	movs	r3, #0
 801147a:	4604      	mov	r4, r0
 801147c:	4608      	mov	r0, r1
 801147e:	602b      	str	r3, [r5, #0]
 8011480:	f7fa f81b 	bl	800b4ba <_close>
 8011484:	1c43      	adds	r3, r0, #1
 8011486:	d102      	bne.n	801148e <_close_r+0x1a>
 8011488:	682b      	ldr	r3, [r5, #0]
 801148a:	b103      	cbz	r3, 801148e <_close_r+0x1a>
 801148c:	6023      	str	r3, [r4, #0]
 801148e:	bd38      	pop	{r3, r4, r5, pc}
 8011490:	2000a494 	.word	0x2000a494

08011494 <_lseek_r>:
 8011494:	b538      	push	{r3, r4, r5, lr}
 8011496:	4d07      	ldr	r5, [pc, #28]	@ (80114b4 <_lseek_r+0x20>)
 8011498:	4604      	mov	r4, r0
 801149a:	4608      	mov	r0, r1
 801149c:	4611      	mov	r1, r2
 801149e:	2200      	movs	r2, #0
 80114a0:	602a      	str	r2, [r5, #0]
 80114a2:	461a      	mov	r2, r3
 80114a4:	f7fa f830 	bl	800b508 <_lseek>
 80114a8:	1c43      	adds	r3, r0, #1
 80114aa:	d102      	bne.n	80114b2 <_lseek_r+0x1e>
 80114ac:	682b      	ldr	r3, [r5, #0]
 80114ae:	b103      	cbz	r3, 80114b2 <_lseek_r+0x1e>
 80114b0:	6023      	str	r3, [r4, #0]
 80114b2:	bd38      	pop	{r3, r4, r5, pc}
 80114b4:	2000a494 	.word	0x2000a494

080114b8 <_read_r>:
 80114b8:	b538      	push	{r3, r4, r5, lr}
 80114ba:	4d07      	ldr	r5, [pc, #28]	@ (80114d8 <_read_r+0x20>)
 80114bc:	4604      	mov	r4, r0
 80114be:	4608      	mov	r0, r1
 80114c0:	4611      	mov	r1, r2
 80114c2:	2200      	movs	r2, #0
 80114c4:	602a      	str	r2, [r5, #0]
 80114c6:	461a      	mov	r2, r3
 80114c8:	f7f9 ffbe 	bl	800b448 <_read>
 80114cc:	1c43      	adds	r3, r0, #1
 80114ce:	d102      	bne.n	80114d6 <_read_r+0x1e>
 80114d0:	682b      	ldr	r3, [r5, #0]
 80114d2:	b103      	cbz	r3, 80114d6 <_read_r+0x1e>
 80114d4:	6023      	str	r3, [r4, #0]
 80114d6:	bd38      	pop	{r3, r4, r5, pc}
 80114d8:	2000a494 	.word	0x2000a494

080114dc <_write_r>:
 80114dc:	b538      	push	{r3, r4, r5, lr}
 80114de:	4d07      	ldr	r5, [pc, #28]	@ (80114fc <_write_r+0x20>)
 80114e0:	4604      	mov	r4, r0
 80114e2:	4608      	mov	r0, r1
 80114e4:	4611      	mov	r1, r2
 80114e6:	2200      	movs	r2, #0
 80114e8:	602a      	str	r2, [r5, #0]
 80114ea:	461a      	mov	r2, r3
 80114ec:	f7f9 ffc9 	bl	800b482 <_write>
 80114f0:	1c43      	adds	r3, r0, #1
 80114f2:	d102      	bne.n	80114fa <_write_r+0x1e>
 80114f4:	682b      	ldr	r3, [r5, #0]
 80114f6:	b103      	cbz	r3, 80114fa <_write_r+0x1e>
 80114f8:	6023      	str	r3, [r4, #0]
 80114fa:	bd38      	pop	{r3, r4, r5, pc}
 80114fc:	2000a494 	.word	0x2000a494

08011500 <__errno>:
 8011500:	4b01      	ldr	r3, [pc, #4]	@ (8011508 <__errno+0x8>)
 8011502:	6818      	ldr	r0, [r3, #0]
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop
 8011508:	20002360 	.word	0x20002360

0801150c <__libc_init_array>:
 801150c:	b570      	push	{r4, r5, r6, lr}
 801150e:	4d0d      	ldr	r5, [pc, #52]	@ (8011544 <__libc_init_array+0x38>)
 8011510:	4c0d      	ldr	r4, [pc, #52]	@ (8011548 <__libc_init_array+0x3c>)
 8011512:	1b64      	subs	r4, r4, r5
 8011514:	10a4      	asrs	r4, r4, #2
 8011516:	2600      	movs	r6, #0
 8011518:	42a6      	cmp	r6, r4
 801151a:	d109      	bne.n	8011530 <__libc_init_array+0x24>
 801151c:	4d0b      	ldr	r5, [pc, #44]	@ (801154c <__libc_init_array+0x40>)
 801151e:	4c0c      	ldr	r4, [pc, #48]	@ (8011550 <__libc_init_array+0x44>)
 8011520:	f002 fcda 	bl	8013ed8 <_init>
 8011524:	1b64      	subs	r4, r4, r5
 8011526:	10a4      	asrs	r4, r4, #2
 8011528:	2600      	movs	r6, #0
 801152a:	42a6      	cmp	r6, r4
 801152c:	d105      	bne.n	801153a <__libc_init_array+0x2e>
 801152e:	bd70      	pop	{r4, r5, r6, pc}
 8011530:	f855 3b04 	ldr.w	r3, [r5], #4
 8011534:	4798      	blx	r3
 8011536:	3601      	adds	r6, #1
 8011538:	e7ee      	b.n	8011518 <__libc_init_array+0xc>
 801153a:	f855 3b04 	ldr.w	r3, [r5], #4
 801153e:	4798      	blx	r3
 8011540:	3601      	adds	r6, #1
 8011542:	e7f2      	b.n	801152a <__libc_init_array+0x1e>
 8011544:	0801738c 	.word	0x0801738c
 8011548:	0801738c 	.word	0x0801738c
 801154c:	0801738c 	.word	0x0801738c
 8011550:	08017390 	.word	0x08017390

08011554 <__retarget_lock_init_recursive>:
 8011554:	4770      	bx	lr

08011556 <__retarget_lock_acquire_recursive>:
 8011556:	4770      	bx	lr

08011558 <__retarget_lock_release_recursive>:
 8011558:	4770      	bx	lr

0801155a <memcpy>:
 801155a:	440a      	add	r2, r1
 801155c:	4291      	cmp	r1, r2
 801155e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011562:	d100      	bne.n	8011566 <memcpy+0xc>
 8011564:	4770      	bx	lr
 8011566:	b510      	push	{r4, lr}
 8011568:	f811 4b01 	ldrb.w	r4, [r1], #1
 801156c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011570:	4291      	cmp	r1, r2
 8011572:	d1f9      	bne.n	8011568 <memcpy+0xe>
 8011574:	bd10      	pop	{r4, pc}
	...

08011578 <nan>:
 8011578:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011580 <nan+0x8>
 801157c:	4770      	bx	lr
 801157e:	bf00      	nop
 8011580:	00000000 	.word	0x00000000
 8011584:	7ff80000 	.word	0x7ff80000

08011588 <nanf>:
 8011588:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011590 <nanf+0x8>
 801158c:	4770      	bx	lr
 801158e:	bf00      	nop
 8011590:	7fc00000 	.word	0x7fc00000

08011594 <__assert_func>:
 8011594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011596:	4614      	mov	r4, r2
 8011598:	461a      	mov	r2, r3
 801159a:	4b09      	ldr	r3, [pc, #36]	@ (80115c0 <__assert_func+0x2c>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	4605      	mov	r5, r0
 80115a0:	68d8      	ldr	r0, [r3, #12]
 80115a2:	b954      	cbnz	r4, 80115ba <__assert_func+0x26>
 80115a4:	4b07      	ldr	r3, [pc, #28]	@ (80115c4 <__assert_func+0x30>)
 80115a6:	461c      	mov	r4, r3
 80115a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80115ac:	9100      	str	r1, [sp, #0]
 80115ae:	462b      	mov	r3, r5
 80115b0:	4905      	ldr	r1, [pc, #20]	@ (80115c8 <__assert_func+0x34>)
 80115b2:	f002 f967 	bl	8013884 <fiprintf>
 80115b6:	f002 f9a1 	bl	80138fc <abort>
 80115ba:	4b04      	ldr	r3, [pc, #16]	@ (80115cc <__assert_func+0x38>)
 80115bc:	e7f4      	b.n	80115a8 <__assert_func+0x14>
 80115be:	bf00      	nop
 80115c0:	20002360 	.word	0x20002360
 80115c4:	0801713e 	.word	0x0801713e
 80115c8:	08017110 	.word	0x08017110
 80115cc:	08017103 	.word	0x08017103

080115d0 <quorem>:
 80115d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d4:	6903      	ldr	r3, [r0, #16]
 80115d6:	690c      	ldr	r4, [r1, #16]
 80115d8:	42a3      	cmp	r3, r4
 80115da:	4607      	mov	r7, r0
 80115dc:	db7e      	blt.n	80116dc <quorem+0x10c>
 80115de:	3c01      	subs	r4, #1
 80115e0:	f101 0814 	add.w	r8, r1, #20
 80115e4:	00a3      	lsls	r3, r4, #2
 80115e6:	f100 0514 	add.w	r5, r0, #20
 80115ea:	9300      	str	r3, [sp, #0]
 80115ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115f0:	9301      	str	r3, [sp, #4]
 80115f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80115f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115fa:	3301      	adds	r3, #1
 80115fc:	429a      	cmp	r2, r3
 80115fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011602:	fbb2 f6f3 	udiv	r6, r2, r3
 8011606:	d32e      	bcc.n	8011666 <quorem+0x96>
 8011608:	f04f 0a00 	mov.w	sl, #0
 801160c:	46c4      	mov	ip, r8
 801160e:	46ae      	mov	lr, r5
 8011610:	46d3      	mov	fp, sl
 8011612:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011616:	b298      	uxth	r0, r3
 8011618:	fb06 a000 	mla	r0, r6, r0, sl
 801161c:	0c02      	lsrs	r2, r0, #16
 801161e:	0c1b      	lsrs	r3, r3, #16
 8011620:	fb06 2303 	mla	r3, r6, r3, r2
 8011624:	f8de 2000 	ldr.w	r2, [lr]
 8011628:	b280      	uxth	r0, r0
 801162a:	b292      	uxth	r2, r2
 801162c:	1a12      	subs	r2, r2, r0
 801162e:	445a      	add	r2, fp
 8011630:	f8de 0000 	ldr.w	r0, [lr]
 8011634:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011638:	b29b      	uxth	r3, r3
 801163a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801163e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011642:	b292      	uxth	r2, r2
 8011644:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011648:	45e1      	cmp	r9, ip
 801164a:	f84e 2b04 	str.w	r2, [lr], #4
 801164e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011652:	d2de      	bcs.n	8011612 <quorem+0x42>
 8011654:	9b00      	ldr	r3, [sp, #0]
 8011656:	58eb      	ldr	r3, [r5, r3]
 8011658:	b92b      	cbnz	r3, 8011666 <quorem+0x96>
 801165a:	9b01      	ldr	r3, [sp, #4]
 801165c:	3b04      	subs	r3, #4
 801165e:	429d      	cmp	r5, r3
 8011660:	461a      	mov	r2, r3
 8011662:	d32f      	bcc.n	80116c4 <quorem+0xf4>
 8011664:	613c      	str	r4, [r7, #16]
 8011666:	4638      	mov	r0, r7
 8011668:	f001 fd0e 	bl	8013088 <__mcmp>
 801166c:	2800      	cmp	r0, #0
 801166e:	db25      	blt.n	80116bc <quorem+0xec>
 8011670:	4629      	mov	r1, r5
 8011672:	2000      	movs	r0, #0
 8011674:	f858 2b04 	ldr.w	r2, [r8], #4
 8011678:	f8d1 c000 	ldr.w	ip, [r1]
 801167c:	fa1f fe82 	uxth.w	lr, r2
 8011680:	fa1f f38c 	uxth.w	r3, ip
 8011684:	eba3 030e 	sub.w	r3, r3, lr
 8011688:	4403      	add	r3, r0
 801168a:	0c12      	lsrs	r2, r2, #16
 801168c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011690:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011694:	b29b      	uxth	r3, r3
 8011696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801169a:	45c1      	cmp	r9, r8
 801169c:	f841 3b04 	str.w	r3, [r1], #4
 80116a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80116a4:	d2e6      	bcs.n	8011674 <quorem+0xa4>
 80116a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116ae:	b922      	cbnz	r2, 80116ba <quorem+0xea>
 80116b0:	3b04      	subs	r3, #4
 80116b2:	429d      	cmp	r5, r3
 80116b4:	461a      	mov	r2, r3
 80116b6:	d30b      	bcc.n	80116d0 <quorem+0x100>
 80116b8:	613c      	str	r4, [r7, #16]
 80116ba:	3601      	adds	r6, #1
 80116bc:	4630      	mov	r0, r6
 80116be:	b003      	add	sp, #12
 80116c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c4:	6812      	ldr	r2, [r2, #0]
 80116c6:	3b04      	subs	r3, #4
 80116c8:	2a00      	cmp	r2, #0
 80116ca:	d1cb      	bne.n	8011664 <quorem+0x94>
 80116cc:	3c01      	subs	r4, #1
 80116ce:	e7c6      	b.n	801165e <quorem+0x8e>
 80116d0:	6812      	ldr	r2, [r2, #0]
 80116d2:	3b04      	subs	r3, #4
 80116d4:	2a00      	cmp	r2, #0
 80116d6:	d1ef      	bne.n	80116b8 <quorem+0xe8>
 80116d8:	3c01      	subs	r4, #1
 80116da:	e7ea      	b.n	80116b2 <quorem+0xe2>
 80116dc:	2000      	movs	r0, #0
 80116de:	e7ee      	b.n	80116be <quorem+0xee>

080116e0 <_dtoa_r>:
 80116e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e4:	69c7      	ldr	r7, [r0, #28]
 80116e6:	b099      	sub	sp, #100	@ 0x64
 80116e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80116ec:	ec55 4b10 	vmov	r4, r5, d0
 80116f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80116f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80116f4:	4683      	mov	fp, r0
 80116f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80116f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80116fa:	b97f      	cbnz	r7, 801171c <_dtoa_r+0x3c>
 80116fc:	2010      	movs	r0, #16
 80116fe:	f001 f937 	bl	8012970 <malloc>
 8011702:	4602      	mov	r2, r0
 8011704:	f8cb 001c 	str.w	r0, [fp, #28]
 8011708:	b920      	cbnz	r0, 8011714 <_dtoa_r+0x34>
 801170a:	4ba7      	ldr	r3, [pc, #668]	@ (80119a8 <_dtoa_r+0x2c8>)
 801170c:	21ef      	movs	r1, #239	@ 0xef
 801170e:	48a7      	ldr	r0, [pc, #668]	@ (80119ac <_dtoa_r+0x2cc>)
 8011710:	f7ff ff40 	bl	8011594 <__assert_func>
 8011714:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011718:	6007      	str	r7, [r0, #0]
 801171a:	60c7      	str	r7, [r0, #12]
 801171c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011720:	6819      	ldr	r1, [r3, #0]
 8011722:	b159      	cbz	r1, 801173c <_dtoa_r+0x5c>
 8011724:	685a      	ldr	r2, [r3, #4]
 8011726:	604a      	str	r2, [r1, #4]
 8011728:	2301      	movs	r3, #1
 801172a:	4093      	lsls	r3, r2
 801172c:	608b      	str	r3, [r1, #8]
 801172e:	4658      	mov	r0, fp
 8011730:	f001 fa26 	bl	8012b80 <_Bfree>
 8011734:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011738:	2200      	movs	r2, #0
 801173a:	601a      	str	r2, [r3, #0]
 801173c:	1e2b      	subs	r3, r5, #0
 801173e:	bfb9      	ittee	lt
 8011740:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011744:	9303      	strlt	r3, [sp, #12]
 8011746:	2300      	movge	r3, #0
 8011748:	6033      	strge	r3, [r6, #0]
 801174a:	9f03      	ldr	r7, [sp, #12]
 801174c:	4b98      	ldr	r3, [pc, #608]	@ (80119b0 <_dtoa_r+0x2d0>)
 801174e:	bfbc      	itt	lt
 8011750:	2201      	movlt	r2, #1
 8011752:	6032      	strlt	r2, [r6, #0]
 8011754:	43bb      	bics	r3, r7
 8011756:	d112      	bne.n	801177e <_dtoa_r+0x9e>
 8011758:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801175a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801175e:	6013      	str	r3, [r2, #0]
 8011760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011764:	4323      	orrs	r3, r4
 8011766:	f000 854d 	beq.w	8012204 <_dtoa_r+0xb24>
 801176a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801176c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80119c4 <_dtoa_r+0x2e4>
 8011770:	2b00      	cmp	r3, #0
 8011772:	f000 854f 	beq.w	8012214 <_dtoa_r+0xb34>
 8011776:	f10a 0303 	add.w	r3, sl, #3
 801177a:	f000 bd49 	b.w	8012210 <_dtoa_r+0xb30>
 801177e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011782:	2200      	movs	r2, #0
 8011784:	ec51 0b17 	vmov	r0, r1, d7
 8011788:	2300      	movs	r3, #0
 801178a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801178e:	f7ef f9ab 	bl	8000ae8 <__aeabi_dcmpeq>
 8011792:	4680      	mov	r8, r0
 8011794:	b158      	cbz	r0, 80117ae <_dtoa_r+0xce>
 8011796:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011798:	2301      	movs	r3, #1
 801179a:	6013      	str	r3, [r2, #0]
 801179c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801179e:	b113      	cbz	r3, 80117a6 <_dtoa_r+0xc6>
 80117a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80117a2:	4b84      	ldr	r3, [pc, #528]	@ (80119b4 <_dtoa_r+0x2d4>)
 80117a4:	6013      	str	r3, [r2, #0]
 80117a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80119c8 <_dtoa_r+0x2e8>
 80117aa:	f000 bd33 	b.w	8012214 <_dtoa_r+0xb34>
 80117ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80117b2:	aa16      	add	r2, sp, #88	@ 0x58
 80117b4:	a917      	add	r1, sp, #92	@ 0x5c
 80117b6:	4658      	mov	r0, fp
 80117b8:	f001 fd86 	bl	80132c8 <__d2b>
 80117bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80117c0:	4681      	mov	r9, r0
 80117c2:	2e00      	cmp	r6, #0
 80117c4:	d077      	beq.n	80118b6 <_dtoa_r+0x1d6>
 80117c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80117c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80117cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80117d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80117d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80117dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80117e0:	4619      	mov	r1, r3
 80117e2:	2200      	movs	r2, #0
 80117e4:	4b74      	ldr	r3, [pc, #464]	@ (80119b8 <_dtoa_r+0x2d8>)
 80117e6:	f7ee fd5f 	bl	80002a8 <__aeabi_dsub>
 80117ea:	a369      	add	r3, pc, #420	@ (adr r3, 8011990 <_dtoa_r+0x2b0>)
 80117ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f0:	f7ee ff12 	bl	8000618 <__aeabi_dmul>
 80117f4:	a368      	add	r3, pc, #416	@ (adr r3, 8011998 <_dtoa_r+0x2b8>)
 80117f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fa:	f7ee fd57 	bl	80002ac <__adddf3>
 80117fe:	4604      	mov	r4, r0
 8011800:	4630      	mov	r0, r6
 8011802:	460d      	mov	r5, r1
 8011804:	f7ee fe9e 	bl	8000544 <__aeabi_i2d>
 8011808:	a365      	add	r3, pc, #404	@ (adr r3, 80119a0 <_dtoa_r+0x2c0>)
 801180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180e:	f7ee ff03 	bl	8000618 <__aeabi_dmul>
 8011812:	4602      	mov	r2, r0
 8011814:	460b      	mov	r3, r1
 8011816:	4620      	mov	r0, r4
 8011818:	4629      	mov	r1, r5
 801181a:	f7ee fd47 	bl	80002ac <__adddf3>
 801181e:	4604      	mov	r4, r0
 8011820:	460d      	mov	r5, r1
 8011822:	f7ef f9a9 	bl	8000b78 <__aeabi_d2iz>
 8011826:	2200      	movs	r2, #0
 8011828:	4607      	mov	r7, r0
 801182a:	2300      	movs	r3, #0
 801182c:	4620      	mov	r0, r4
 801182e:	4629      	mov	r1, r5
 8011830:	f7ef f964 	bl	8000afc <__aeabi_dcmplt>
 8011834:	b140      	cbz	r0, 8011848 <_dtoa_r+0x168>
 8011836:	4638      	mov	r0, r7
 8011838:	f7ee fe84 	bl	8000544 <__aeabi_i2d>
 801183c:	4622      	mov	r2, r4
 801183e:	462b      	mov	r3, r5
 8011840:	f7ef f952 	bl	8000ae8 <__aeabi_dcmpeq>
 8011844:	b900      	cbnz	r0, 8011848 <_dtoa_r+0x168>
 8011846:	3f01      	subs	r7, #1
 8011848:	2f16      	cmp	r7, #22
 801184a:	d851      	bhi.n	80118f0 <_dtoa_r+0x210>
 801184c:	4b5b      	ldr	r3, [pc, #364]	@ (80119bc <_dtoa_r+0x2dc>)
 801184e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801185a:	f7ef f94f 	bl	8000afc <__aeabi_dcmplt>
 801185e:	2800      	cmp	r0, #0
 8011860:	d048      	beq.n	80118f4 <_dtoa_r+0x214>
 8011862:	3f01      	subs	r7, #1
 8011864:	2300      	movs	r3, #0
 8011866:	9312      	str	r3, [sp, #72]	@ 0x48
 8011868:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801186a:	1b9b      	subs	r3, r3, r6
 801186c:	1e5a      	subs	r2, r3, #1
 801186e:	bf44      	itt	mi
 8011870:	f1c3 0801 	rsbmi	r8, r3, #1
 8011874:	2300      	movmi	r3, #0
 8011876:	9208      	str	r2, [sp, #32]
 8011878:	bf54      	ite	pl
 801187a:	f04f 0800 	movpl.w	r8, #0
 801187e:	9308      	strmi	r3, [sp, #32]
 8011880:	2f00      	cmp	r7, #0
 8011882:	db39      	blt.n	80118f8 <_dtoa_r+0x218>
 8011884:	9b08      	ldr	r3, [sp, #32]
 8011886:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011888:	443b      	add	r3, r7
 801188a:	9308      	str	r3, [sp, #32]
 801188c:	2300      	movs	r3, #0
 801188e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011892:	2b09      	cmp	r3, #9
 8011894:	d864      	bhi.n	8011960 <_dtoa_r+0x280>
 8011896:	2b05      	cmp	r3, #5
 8011898:	bfc4      	itt	gt
 801189a:	3b04      	subgt	r3, #4
 801189c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801189e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118a0:	f1a3 0302 	sub.w	r3, r3, #2
 80118a4:	bfcc      	ite	gt
 80118a6:	2400      	movgt	r4, #0
 80118a8:	2401      	movle	r4, #1
 80118aa:	2b03      	cmp	r3, #3
 80118ac:	d863      	bhi.n	8011976 <_dtoa_r+0x296>
 80118ae:	e8df f003 	tbb	[pc, r3]
 80118b2:	372a      	.short	0x372a
 80118b4:	5535      	.short	0x5535
 80118b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80118ba:	441e      	add	r6, r3
 80118bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80118c0:	2b20      	cmp	r3, #32
 80118c2:	bfc1      	itttt	gt
 80118c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80118c8:	409f      	lslgt	r7, r3
 80118ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80118ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80118d2:	bfd6      	itet	le
 80118d4:	f1c3 0320 	rsble	r3, r3, #32
 80118d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80118dc:	fa04 f003 	lslle.w	r0, r4, r3
 80118e0:	f7ee fe20 	bl	8000524 <__aeabi_ui2d>
 80118e4:	2201      	movs	r2, #1
 80118e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80118ea:	3e01      	subs	r6, #1
 80118ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80118ee:	e777      	b.n	80117e0 <_dtoa_r+0x100>
 80118f0:	2301      	movs	r3, #1
 80118f2:	e7b8      	b.n	8011866 <_dtoa_r+0x186>
 80118f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80118f6:	e7b7      	b.n	8011868 <_dtoa_r+0x188>
 80118f8:	427b      	negs	r3, r7
 80118fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80118fc:	2300      	movs	r3, #0
 80118fe:	eba8 0807 	sub.w	r8, r8, r7
 8011902:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011904:	e7c4      	b.n	8011890 <_dtoa_r+0x1b0>
 8011906:	2300      	movs	r3, #0
 8011908:	930b      	str	r3, [sp, #44]	@ 0x2c
 801190a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801190c:	2b00      	cmp	r3, #0
 801190e:	dc35      	bgt.n	801197c <_dtoa_r+0x29c>
 8011910:	2301      	movs	r3, #1
 8011912:	9300      	str	r3, [sp, #0]
 8011914:	9307      	str	r3, [sp, #28]
 8011916:	461a      	mov	r2, r3
 8011918:	920e      	str	r2, [sp, #56]	@ 0x38
 801191a:	e00b      	b.n	8011934 <_dtoa_r+0x254>
 801191c:	2301      	movs	r3, #1
 801191e:	e7f3      	b.n	8011908 <_dtoa_r+0x228>
 8011920:	2300      	movs	r3, #0
 8011922:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011926:	18fb      	adds	r3, r7, r3
 8011928:	9300      	str	r3, [sp, #0]
 801192a:	3301      	adds	r3, #1
 801192c:	2b01      	cmp	r3, #1
 801192e:	9307      	str	r3, [sp, #28]
 8011930:	bfb8      	it	lt
 8011932:	2301      	movlt	r3, #1
 8011934:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011938:	2100      	movs	r1, #0
 801193a:	2204      	movs	r2, #4
 801193c:	f102 0514 	add.w	r5, r2, #20
 8011940:	429d      	cmp	r5, r3
 8011942:	d91f      	bls.n	8011984 <_dtoa_r+0x2a4>
 8011944:	6041      	str	r1, [r0, #4]
 8011946:	4658      	mov	r0, fp
 8011948:	f001 f8da 	bl	8012b00 <_Balloc>
 801194c:	4682      	mov	sl, r0
 801194e:	2800      	cmp	r0, #0
 8011950:	d13c      	bne.n	80119cc <_dtoa_r+0x2ec>
 8011952:	4b1b      	ldr	r3, [pc, #108]	@ (80119c0 <_dtoa_r+0x2e0>)
 8011954:	4602      	mov	r2, r0
 8011956:	f240 11af 	movw	r1, #431	@ 0x1af
 801195a:	e6d8      	b.n	801170e <_dtoa_r+0x2e>
 801195c:	2301      	movs	r3, #1
 801195e:	e7e0      	b.n	8011922 <_dtoa_r+0x242>
 8011960:	2401      	movs	r4, #1
 8011962:	2300      	movs	r3, #0
 8011964:	9309      	str	r3, [sp, #36]	@ 0x24
 8011966:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011968:	f04f 33ff 	mov.w	r3, #4294967295
 801196c:	9300      	str	r3, [sp, #0]
 801196e:	9307      	str	r3, [sp, #28]
 8011970:	2200      	movs	r2, #0
 8011972:	2312      	movs	r3, #18
 8011974:	e7d0      	b.n	8011918 <_dtoa_r+0x238>
 8011976:	2301      	movs	r3, #1
 8011978:	930b      	str	r3, [sp, #44]	@ 0x2c
 801197a:	e7f5      	b.n	8011968 <_dtoa_r+0x288>
 801197c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	9307      	str	r3, [sp, #28]
 8011982:	e7d7      	b.n	8011934 <_dtoa_r+0x254>
 8011984:	3101      	adds	r1, #1
 8011986:	0052      	lsls	r2, r2, #1
 8011988:	e7d8      	b.n	801193c <_dtoa_r+0x25c>
 801198a:	bf00      	nop
 801198c:	f3af 8000 	nop.w
 8011990:	636f4361 	.word	0x636f4361
 8011994:	3fd287a7 	.word	0x3fd287a7
 8011998:	8b60c8b3 	.word	0x8b60c8b3
 801199c:	3fc68a28 	.word	0x3fc68a28
 80119a0:	509f79fb 	.word	0x509f79fb
 80119a4:	3fd34413 	.word	0x3fd34413
 80119a8:	0801708a 	.word	0x0801708a
 80119ac:	0801714c 	.word	0x0801714c
 80119b0:	7ff00000 	.word	0x7ff00000
 80119b4:	08017062 	.word	0x08017062
 80119b8:	3ff80000 	.word	0x3ff80000
 80119bc:	080172a8 	.word	0x080172a8
 80119c0:	080171a4 	.word	0x080171a4
 80119c4:	08017148 	.word	0x08017148
 80119c8:	08017061 	.word	0x08017061
 80119cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80119d0:	6018      	str	r0, [r3, #0]
 80119d2:	9b07      	ldr	r3, [sp, #28]
 80119d4:	2b0e      	cmp	r3, #14
 80119d6:	f200 80a4 	bhi.w	8011b22 <_dtoa_r+0x442>
 80119da:	2c00      	cmp	r4, #0
 80119dc:	f000 80a1 	beq.w	8011b22 <_dtoa_r+0x442>
 80119e0:	2f00      	cmp	r7, #0
 80119e2:	dd33      	ble.n	8011a4c <_dtoa_r+0x36c>
 80119e4:	4bad      	ldr	r3, [pc, #692]	@ (8011c9c <_dtoa_r+0x5bc>)
 80119e6:	f007 020f 	and.w	r2, r7, #15
 80119ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119ee:	ed93 7b00 	vldr	d7, [r3]
 80119f2:	05f8      	lsls	r0, r7, #23
 80119f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80119f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80119fc:	d516      	bpl.n	8011a2c <_dtoa_r+0x34c>
 80119fe:	4ba8      	ldr	r3, [pc, #672]	@ (8011ca0 <_dtoa_r+0x5c0>)
 8011a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011a04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011a08:	f7ee ff30 	bl	800086c <__aeabi_ddiv>
 8011a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a10:	f004 040f 	and.w	r4, r4, #15
 8011a14:	2603      	movs	r6, #3
 8011a16:	4da2      	ldr	r5, [pc, #648]	@ (8011ca0 <_dtoa_r+0x5c0>)
 8011a18:	b954      	cbnz	r4, 8011a30 <_dtoa_r+0x350>
 8011a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a22:	f7ee ff23 	bl	800086c <__aeabi_ddiv>
 8011a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a2a:	e028      	b.n	8011a7e <_dtoa_r+0x39e>
 8011a2c:	2602      	movs	r6, #2
 8011a2e:	e7f2      	b.n	8011a16 <_dtoa_r+0x336>
 8011a30:	07e1      	lsls	r1, r4, #31
 8011a32:	d508      	bpl.n	8011a46 <_dtoa_r+0x366>
 8011a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a3c:	f7ee fdec 	bl	8000618 <__aeabi_dmul>
 8011a40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a44:	3601      	adds	r6, #1
 8011a46:	1064      	asrs	r4, r4, #1
 8011a48:	3508      	adds	r5, #8
 8011a4a:	e7e5      	b.n	8011a18 <_dtoa_r+0x338>
 8011a4c:	f000 80d2 	beq.w	8011bf4 <_dtoa_r+0x514>
 8011a50:	427c      	negs	r4, r7
 8011a52:	4b92      	ldr	r3, [pc, #584]	@ (8011c9c <_dtoa_r+0x5bc>)
 8011a54:	4d92      	ldr	r5, [pc, #584]	@ (8011ca0 <_dtoa_r+0x5c0>)
 8011a56:	f004 020f 	and.w	r2, r4, #15
 8011a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011a66:	f7ee fdd7 	bl	8000618 <__aeabi_dmul>
 8011a6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a6e:	1124      	asrs	r4, r4, #4
 8011a70:	2300      	movs	r3, #0
 8011a72:	2602      	movs	r6, #2
 8011a74:	2c00      	cmp	r4, #0
 8011a76:	f040 80b2 	bne.w	8011bde <_dtoa_r+0x4fe>
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d1d3      	bne.n	8011a26 <_dtoa_r+0x346>
 8011a7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011a80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f000 80b7 	beq.w	8011bf8 <_dtoa_r+0x518>
 8011a8a:	4b86      	ldr	r3, [pc, #536]	@ (8011ca4 <_dtoa_r+0x5c4>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	4620      	mov	r0, r4
 8011a90:	4629      	mov	r1, r5
 8011a92:	f7ef f833 	bl	8000afc <__aeabi_dcmplt>
 8011a96:	2800      	cmp	r0, #0
 8011a98:	f000 80ae 	beq.w	8011bf8 <_dtoa_r+0x518>
 8011a9c:	9b07      	ldr	r3, [sp, #28]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	f000 80aa 	beq.w	8011bf8 <_dtoa_r+0x518>
 8011aa4:	9b00      	ldr	r3, [sp, #0]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	dd37      	ble.n	8011b1a <_dtoa_r+0x43a>
 8011aaa:	1e7b      	subs	r3, r7, #1
 8011aac:	9304      	str	r3, [sp, #16]
 8011aae:	4620      	mov	r0, r4
 8011ab0:	4b7d      	ldr	r3, [pc, #500]	@ (8011ca8 <_dtoa_r+0x5c8>)
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	4629      	mov	r1, r5
 8011ab6:	f7ee fdaf 	bl	8000618 <__aeabi_dmul>
 8011aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011abe:	9c00      	ldr	r4, [sp, #0]
 8011ac0:	3601      	adds	r6, #1
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	f7ee fd3e 	bl	8000544 <__aeabi_i2d>
 8011ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011acc:	f7ee fda4 	bl	8000618 <__aeabi_dmul>
 8011ad0:	4b76      	ldr	r3, [pc, #472]	@ (8011cac <_dtoa_r+0x5cc>)
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	f7ee fbea 	bl	80002ac <__adddf3>
 8011ad8:	4605      	mov	r5, r0
 8011ada:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011ade:	2c00      	cmp	r4, #0
 8011ae0:	f040 808d 	bne.w	8011bfe <_dtoa_r+0x51e>
 8011ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ae8:	4b71      	ldr	r3, [pc, #452]	@ (8011cb0 <_dtoa_r+0x5d0>)
 8011aea:	2200      	movs	r2, #0
 8011aec:	f7ee fbdc 	bl	80002a8 <__aeabi_dsub>
 8011af0:	4602      	mov	r2, r0
 8011af2:	460b      	mov	r3, r1
 8011af4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011af8:	462a      	mov	r2, r5
 8011afa:	4633      	mov	r3, r6
 8011afc:	f7ef f81c 	bl	8000b38 <__aeabi_dcmpgt>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	f040 828b 	bne.w	801201c <_dtoa_r+0x93c>
 8011b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b0a:	462a      	mov	r2, r5
 8011b0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011b10:	f7ee fff4 	bl	8000afc <__aeabi_dcmplt>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	f040 8128 	bne.w	8011d6a <_dtoa_r+0x68a>
 8011b1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011b1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011b22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	f2c0 815a 	blt.w	8011dde <_dtoa_r+0x6fe>
 8011b2a:	2f0e      	cmp	r7, #14
 8011b2c:	f300 8157 	bgt.w	8011dde <_dtoa_r+0x6fe>
 8011b30:	4b5a      	ldr	r3, [pc, #360]	@ (8011c9c <_dtoa_r+0x5bc>)
 8011b32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011b36:	ed93 7b00 	vldr	d7, [r3]
 8011b3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	ed8d 7b00 	vstr	d7, [sp]
 8011b42:	da03      	bge.n	8011b4c <_dtoa_r+0x46c>
 8011b44:	9b07      	ldr	r3, [sp, #28]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	f340 8101 	ble.w	8011d4e <_dtoa_r+0x66e>
 8011b4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011b50:	4656      	mov	r6, sl
 8011b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b56:	4620      	mov	r0, r4
 8011b58:	4629      	mov	r1, r5
 8011b5a:	f7ee fe87 	bl	800086c <__aeabi_ddiv>
 8011b5e:	f7ef f80b 	bl	8000b78 <__aeabi_d2iz>
 8011b62:	4680      	mov	r8, r0
 8011b64:	f7ee fcee 	bl	8000544 <__aeabi_i2d>
 8011b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b6c:	f7ee fd54 	bl	8000618 <__aeabi_dmul>
 8011b70:	4602      	mov	r2, r0
 8011b72:	460b      	mov	r3, r1
 8011b74:	4620      	mov	r0, r4
 8011b76:	4629      	mov	r1, r5
 8011b78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011b7c:	f7ee fb94 	bl	80002a8 <__aeabi_dsub>
 8011b80:	f806 4b01 	strb.w	r4, [r6], #1
 8011b84:	9d07      	ldr	r5, [sp, #28]
 8011b86:	eba6 040a 	sub.w	r4, r6, sl
 8011b8a:	42a5      	cmp	r5, r4
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	f040 8117 	bne.w	8011dc2 <_dtoa_r+0x6e2>
 8011b94:	f7ee fb8a 	bl	80002ac <__adddf3>
 8011b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b9c:	4604      	mov	r4, r0
 8011b9e:	460d      	mov	r5, r1
 8011ba0:	f7ee ffca 	bl	8000b38 <__aeabi_dcmpgt>
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	f040 80f9 	bne.w	8011d9c <_dtoa_r+0x6bc>
 8011baa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011bae:	4620      	mov	r0, r4
 8011bb0:	4629      	mov	r1, r5
 8011bb2:	f7ee ff99 	bl	8000ae8 <__aeabi_dcmpeq>
 8011bb6:	b118      	cbz	r0, 8011bc0 <_dtoa_r+0x4e0>
 8011bb8:	f018 0f01 	tst.w	r8, #1
 8011bbc:	f040 80ee 	bne.w	8011d9c <_dtoa_r+0x6bc>
 8011bc0:	4649      	mov	r1, r9
 8011bc2:	4658      	mov	r0, fp
 8011bc4:	f000 ffdc 	bl	8012b80 <_Bfree>
 8011bc8:	2300      	movs	r3, #0
 8011bca:	7033      	strb	r3, [r6, #0]
 8011bcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011bce:	3701      	adds	r7, #1
 8011bd0:	601f      	str	r7, [r3, #0]
 8011bd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	f000 831d 	beq.w	8012214 <_dtoa_r+0xb34>
 8011bda:	601e      	str	r6, [r3, #0]
 8011bdc:	e31a      	b.n	8012214 <_dtoa_r+0xb34>
 8011bde:	07e2      	lsls	r2, r4, #31
 8011be0:	d505      	bpl.n	8011bee <_dtoa_r+0x50e>
 8011be2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011be6:	f7ee fd17 	bl	8000618 <__aeabi_dmul>
 8011bea:	3601      	adds	r6, #1
 8011bec:	2301      	movs	r3, #1
 8011bee:	1064      	asrs	r4, r4, #1
 8011bf0:	3508      	adds	r5, #8
 8011bf2:	e73f      	b.n	8011a74 <_dtoa_r+0x394>
 8011bf4:	2602      	movs	r6, #2
 8011bf6:	e742      	b.n	8011a7e <_dtoa_r+0x39e>
 8011bf8:	9c07      	ldr	r4, [sp, #28]
 8011bfa:	9704      	str	r7, [sp, #16]
 8011bfc:	e761      	b.n	8011ac2 <_dtoa_r+0x3e2>
 8011bfe:	4b27      	ldr	r3, [pc, #156]	@ (8011c9c <_dtoa_r+0x5bc>)
 8011c00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011c02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011c06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011c0a:	4454      	add	r4, sl
 8011c0c:	2900      	cmp	r1, #0
 8011c0e:	d053      	beq.n	8011cb8 <_dtoa_r+0x5d8>
 8011c10:	4928      	ldr	r1, [pc, #160]	@ (8011cb4 <_dtoa_r+0x5d4>)
 8011c12:	2000      	movs	r0, #0
 8011c14:	f7ee fe2a 	bl	800086c <__aeabi_ddiv>
 8011c18:	4633      	mov	r3, r6
 8011c1a:	462a      	mov	r2, r5
 8011c1c:	f7ee fb44 	bl	80002a8 <__aeabi_dsub>
 8011c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011c24:	4656      	mov	r6, sl
 8011c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c2a:	f7ee ffa5 	bl	8000b78 <__aeabi_d2iz>
 8011c2e:	4605      	mov	r5, r0
 8011c30:	f7ee fc88 	bl	8000544 <__aeabi_i2d>
 8011c34:	4602      	mov	r2, r0
 8011c36:	460b      	mov	r3, r1
 8011c38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c3c:	f7ee fb34 	bl	80002a8 <__aeabi_dsub>
 8011c40:	3530      	adds	r5, #48	@ 0x30
 8011c42:	4602      	mov	r2, r0
 8011c44:	460b      	mov	r3, r1
 8011c46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011c4a:	f806 5b01 	strb.w	r5, [r6], #1
 8011c4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011c52:	f7ee ff53 	bl	8000afc <__aeabi_dcmplt>
 8011c56:	2800      	cmp	r0, #0
 8011c58:	d171      	bne.n	8011d3e <_dtoa_r+0x65e>
 8011c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c5e:	4911      	ldr	r1, [pc, #68]	@ (8011ca4 <_dtoa_r+0x5c4>)
 8011c60:	2000      	movs	r0, #0
 8011c62:	f7ee fb21 	bl	80002a8 <__aeabi_dsub>
 8011c66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011c6a:	f7ee ff47 	bl	8000afc <__aeabi_dcmplt>
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	f040 8095 	bne.w	8011d9e <_dtoa_r+0x6be>
 8011c74:	42a6      	cmp	r6, r4
 8011c76:	f43f af50 	beq.w	8011b1a <_dtoa_r+0x43a>
 8011c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8011ca8 <_dtoa_r+0x5c8>)
 8011c80:	2200      	movs	r2, #0
 8011c82:	f7ee fcc9 	bl	8000618 <__aeabi_dmul>
 8011c86:	4b08      	ldr	r3, [pc, #32]	@ (8011ca8 <_dtoa_r+0x5c8>)
 8011c88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c92:	f7ee fcc1 	bl	8000618 <__aeabi_dmul>
 8011c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c9a:	e7c4      	b.n	8011c26 <_dtoa_r+0x546>
 8011c9c:	080172a8 	.word	0x080172a8
 8011ca0:	08017280 	.word	0x08017280
 8011ca4:	3ff00000 	.word	0x3ff00000
 8011ca8:	40240000 	.word	0x40240000
 8011cac:	401c0000 	.word	0x401c0000
 8011cb0:	40140000 	.word	0x40140000
 8011cb4:	3fe00000 	.word	0x3fe00000
 8011cb8:	4631      	mov	r1, r6
 8011cba:	4628      	mov	r0, r5
 8011cbc:	f7ee fcac 	bl	8000618 <__aeabi_dmul>
 8011cc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011cc4:	9415      	str	r4, [sp, #84]	@ 0x54
 8011cc6:	4656      	mov	r6, sl
 8011cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ccc:	f7ee ff54 	bl	8000b78 <__aeabi_d2iz>
 8011cd0:	4605      	mov	r5, r0
 8011cd2:	f7ee fc37 	bl	8000544 <__aeabi_i2d>
 8011cd6:	4602      	mov	r2, r0
 8011cd8:	460b      	mov	r3, r1
 8011cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011cde:	f7ee fae3 	bl	80002a8 <__aeabi_dsub>
 8011ce2:	3530      	adds	r5, #48	@ 0x30
 8011ce4:	f806 5b01 	strb.w	r5, [r6], #1
 8011ce8:	4602      	mov	r2, r0
 8011cea:	460b      	mov	r3, r1
 8011cec:	42a6      	cmp	r6, r4
 8011cee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011cf2:	f04f 0200 	mov.w	r2, #0
 8011cf6:	d124      	bne.n	8011d42 <_dtoa_r+0x662>
 8011cf8:	4bac      	ldr	r3, [pc, #688]	@ (8011fac <_dtoa_r+0x8cc>)
 8011cfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011cfe:	f7ee fad5 	bl	80002ac <__adddf3>
 8011d02:	4602      	mov	r2, r0
 8011d04:	460b      	mov	r3, r1
 8011d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d0a:	f7ee ff15 	bl	8000b38 <__aeabi_dcmpgt>
 8011d0e:	2800      	cmp	r0, #0
 8011d10:	d145      	bne.n	8011d9e <_dtoa_r+0x6be>
 8011d12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011d16:	49a5      	ldr	r1, [pc, #660]	@ (8011fac <_dtoa_r+0x8cc>)
 8011d18:	2000      	movs	r0, #0
 8011d1a:	f7ee fac5 	bl	80002a8 <__aeabi_dsub>
 8011d1e:	4602      	mov	r2, r0
 8011d20:	460b      	mov	r3, r1
 8011d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d26:	f7ee fee9 	bl	8000afc <__aeabi_dcmplt>
 8011d2a:	2800      	cmp	r0, #0
 8011d2c:	f43f aef5 	beq.w	8011b1a <_dtoa_r+0x43a>
 8011d30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011d32:	1e73      	subs	r3, r6, #1
 8011d34:	9315      	str	r3, [sp, #84]	@ 0x54
 8011d36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011d3a:	2b30      	cmp	r3, #48	@ 0x30
 8011d3c:	d0f8      	beq.n	8011d30 <_dtoa_r+0x650>
 8011d3e:	9f04      	ldr	r7, [sp, #16]
 8011d40:	e73e      	b.n	8011bc0 <_dtoa_r+0x4e0>
 8011d42:	4b9b      	ldr	r3, [pc, #620]	@ (8011fb0 <_dtoa_r+0x8d0>)
 8011d44:	f7ee fc68 	bl	8000618 <__aeabi_dmul>
 8011d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d4c:	e7bc      	b.n	8011cc8 <_dtoa_r+0x5e8>
 8011d4e:	d10c      	bne.n	8011d6a <_dtoa_r+0x68a>
 8011d50:	4b98      	ldr	r3, [pc, #608]	@ (8011fb4 <_dtoa_r+0x8d4>)
 8011d52:	2200      	movs	r2, #0
 8011d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d58:	f7ee fc5e 	bl	8000618 <__aeabi_dmul>
 8011d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011d60:	f7ee fee0 	bl	8000b24 <__aeabi_dcmpge>
 8011d64:	2800      	cmp	r0, #0
 8011d66:	f000 8157 	beq.w	8012018 <_dtoa_r+0x938>
 8011d6a:	2400      	movs	r4, #0
 8011d6c:	4625      	mov	r5, r4
 8011d6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d70:	43db      	mvns	r3, r3
 8011d72:	9304      	str	r3, [sp, #16]
 8011d74:	4656      	mov	r6, sl
 8011d76:	2700      	movs	r7, #0
 8011d78:	4621      	mov	r1, r4
 8011d7a:	4658      	mov	r0, fp
 8011d7c:	f000 ff00 	bl	8012b80 <_Bfree>
 8011d80:	2d00      	cmp	r5, #0
 8011d82:	d0dc      	beq.n	8011d3e <_dtoa_r+0x65e>
 8011d84:	b12f      	cbz	r7, 8011d92 <_dtoa_r+0x6b2>
 8011d86:	42af      	cmp	r7, r5
 8011d88:	d003      	beq.n	8011d92 <_dtoa_r+0x6b2>
 8011d8a:	4639      	mov	r1, r7
 8011d8c:	4658      	mov	r0, fp
 8011d8e:	f000 fef7 	bl	8012b80 <_Bfree>
 8011d92:	4629      	mov	r1, r5
 8011d94:	4658      	mov	r0, fp
 8011d96:	f000 fef3 	bl	8012b80 <_Bfree>
 8011d9a:	e7d0      	b.n	8011d3e <_dtoa_r+0x65e>
 8011d9c:	9704      	str	r7, [sp, #16]
 8011d9e:	4633      	mov	r3, r6
 8011da0:	461e      	mov	r6, r3
 8011da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011da6:	2a39      	cmp	r2, #57	@ 0x39
 8011da8:	d107      	bne.n	8011dba <_dtoa_r+0x6da>
 8011daa:	459a      	cmp	sl, r3
 8011dac:	d1f8      	bne.n	8011da0 <_dtoa_r+0x6c0>
 8011dae:	9a04      	ldr	r2, [sp, #16]
 8011db0:	3201      	adds	r2, #1
 8011db2:	9204      	str	r2, [sp, #16]
 8011db4:	2230      	movs	r2, #48	@ 0x30
 8011db6:	f88a 2000 	strb.w	r2, [sl]
 8011dba:	781a      	ldrb	r2, [r3, #0]
 8011dbc:	3201      	adds	r2, #1
 8011dbe:	701a      	strb	r2, [r3, #0]
 8011dc0:	e7bd      	b.n	8011d3e <_dtoa_r+0x65e>
 8011dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8011fb0 <_dtoa_r+0x8d0>)
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	f7ee fc27 	bl	8000618 <__aeabi_dmul>
 8011dca:	2200      	movs	r2, #0
 8011dcc:	2300      	movs	r3, #0
 8011dce:	4604      	mov	r4, r0
 8011dd0:	460d      	mov	r5, r1
 8011dd2:	f7ee fe89 	bl	8000ae8 <__aeabi_dcmpeq>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	f43f aebb 	beq.w	8011b52 <_dtoa_r+0x472>
 8011ddc:	e6f0      	b.n	8011bc0 <_dtoa_r+0x4e0>
 8011dde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011de0:	2a00      	cmp	r2, #0
 8011de2:	f000 80db 	beq.w	8011f9c <_dtoa_r+0x8bc>
 8011de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011de8:	2a01      	cmp	r2, #1
 8011dea:	f300 80bf 	bgt.w	8011f6c <_dtoa_r+0x88c>
 8011dee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011df0:	2a00      	cmp	r2, #0
 8011df2:	f000 80b7 	beq.w	8011f64 <_dtoa_r+0x884>
 8011df6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011dfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011dfc:	4646      	mov	r6, r8
 8011dfe:	9a08      	ldr	r2, [sp, #32]
 8011e00:	2101      	movs	r1, #1
 8011e02:	441a      	add	r2, r3
 8011e04:	4658      	mov	r0, fp
 8011e06:	4498      	add	r8, r3
 8011e08:	9208      	str	r2, [sp, #32]
 8011e0a:	f000 ffb7 	bl	8012d7c <__i2b>
 8011e0e:	4605      	mov	r5, r0
 8011e10:	b15e      	cbz	r6, 8011e2a <_dtoa_r+0x74a>
 8011e12:	9b08      	ldr	r3, [sp, #32]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	dd08      	ble.n	8011e2a <_dtoa_r+0x74a>
 8011e18:	42b3      	cmp	r3, r6
 8011e1a:	9a08      	ldr	r2, [sp, #32]
 8011e1c:	bfa8      	it	ge
 8011e1e:	4633      	movge	r3, r6
 8011e20:	eba8 0803 	sub.w	r8, r8, r3
 8011e24:	1af6      	subs	r6, r6, r3
 8011e26:	1ad3      	subs	r3, r2, r3
 8011e28:	9308      	str	r3, [sp, #32]
 8011e2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e2c:	b1f3      	cbz	r3, 8011e6c <_dtoa_r+0x78c>
 8011e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	f000 80b7 	beq.w	8011fa4 <_dtoa_r+0x8c4>
 8011e36:	b18c      	cbz	r4, 8011e5c <_dtoa_r+0x77c>
 8011e38:	4629      	mov	r1, r5
 8011e3a:	4622      	mov	r2, r4
 8011e3c:	4658      	mov	r0, fp
 8011e3e:	f001 f85d 	bl	8012efc <__pow5mult>
 8011e42:	464a      	mov	r2, r9
 8011e44:	4601      	mov	r1, r0
 8011e46:	4605      	mov	r5, r0
 8011e48:	4658      	mov	r0, fp
 8011e4a:	f000 ffad 	bl	8012da8 <__multiply>
 8011e4e:	4649      	mov	r1, r9
 8011e50:	9004      	str	r0, [sp, #16]
 8011e52:	4658      	mov	r0, fp
 8011e54:	f000 fe94 	bl	8012b80 <_Bfree>
 8011e58:	9b04      	ldr	r3, [sp, #16]
 8011e5a:	4699      	mov	r9, r3
 8011e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e5e:	1b1a      	subs	r2, r3, r4
 8011e60:	d004      	beq.n	8011e6c <_dtoa_r+0x78c>
 8011e62:	4649      	mov	r1, r9
 8011e64:	4658      	mov	r0, fp
 8011e66:	f001 f849 	bl	8012efc <__pow5mult>
 8011e6a:	4681      	mov	r9, r0
 8011e6c:	2101      	movs	r1, #1
 8011e6e:	4658      	mov	r0, fp
 8011e70:	f000 ff84 	bl	8012d7c <__i2b>
 8011e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e76:	4604      	mov	r4, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f000 81cf 	beq.w	801221c <_dtoa_r+0xb3c>
 8011e7e:	461a      	mov	r2, r3
 8011e80:	4601      	mov	r1, r0
 8011e82:	4658      	mov	r0, fp
 8011e84:	f001 f83a 	bl	8012efc <__pow5mult>
 8011e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	4604      	mov	r4, r0
 8011e8e:	f300 8095 	bgt.w	8011fbc <_dtoa_r+0x8dc>
 8011e92:	9b02      	ldr	r3, [sp, #8]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	f040 8087 	bne.w	8011fa8 <_dtoa_r+0x8c8>
 8011e9a:	9b03      	ldr	r3, [sp, #12]
 8011e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	f040 8089 	bne.w	8011fb8 <_dtoa_r+0x8d8>
 8011ea6:	9b03      	ldr	r3, [sp, #12]
 8011ea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011eac:	0d1b      	lsrs	r3, r3, #20
 8011eae:	051b      	lsls	r3, r3, #20
 8011eb0:	b12b      	cbz	r3, 8011ebe <_dtoa_r+0x7de>
 8011eb2:	9b08      	ldr	r3, [sp, #32]
 8011eb4:	3301      	adds	r3, #1
 8011eb6:	9308      	str	r3, [sp, #32]
 8011eb8:	f108 0801 	add.w	r8, r8, #1
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	f000 81b0 	beq.w	8012228 <_dtoa_r+0xb48>
 8011ec8:	6923      	ldr	r3, [r4, #16]
 8011eca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ece:	6918      	ldr	r0, [r3, #16]
 8011ed0:	f000 ff08 	bl	8012ce4 <__hi0bits>
 8011ed4:	f1c0 0020 	rsb	r0, r0, #32
 8011ed8:	9b08      	ldr	r3, [sp, #32]
 8011eda:	4418      	add	r0, r3
 8011edc:	f010 001f 	ands.w	r0, r0, #31
 8011ee0:	d077      	beq.n	8011fd2 <_dtoa_r+0x8f2>
 8011ee2:	f1c0 0320 	rsb	r3, r0, #32
 8011ee6:	2b04      	cmp	r3, #4
 8011ee8:	dd6b      	ble.n	8011fc2 <_dtoa_r+0x8e2>
 8011eea:	9b08      	ldr	r3, [sp, #32]
 8011eec:	f1c0 001c 	rsb	r0, r0, #28
 8011ef0:	4403      	add	r3, r0
 8011ef2:	4480      	add	r8, r0
 8011ef4:	4406      	add	r6, r0
 8011ef6:	9308      	str	r3, [sp, #32]
 8011ef8:	f1b8 0f00 	cmp.w	r8, #0
 8011efc:	dd05      	ble.n	8011f0a <_dtoa_r+0x82a>
 8011efe:	4649      	mov	r1, r9
 8011f00:	4642      	mov	r2, r8
 8011f02:	4658      	mov	r0, fp
 8011f04:	f001 f854 	bl	8012fb0 <__lshift>
 8011f08:	4681      	mov	r9, r0
 8011f0a:	9b08      	ldr	r3, [sp, #32]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	dd05      	ble.n	8011f1c <_dtoa_r+0x83c>
 8011f10:	4621      	mov	r1, r4
 8011f12:	461a      	mov	r2, r3
 8011f14:	4658      	mov	r0, fp
 8011f16:	f001 f84b 	bl	8012fb0 <__lshift>
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d059      	beq.n	8011fd6 <_dtoa_r+0x8f6>
 8011f22:	4621      	mov	r1, r4
 8011f24:	4648      	mov	r0, r9
 8011f26:	f001 f8af 	bl	8013088 <__mcmp>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	da53      	bge.n	8011fd6 <_dtoa_r+0x8f6>
 8011f2e:	1e7b      	subs	r3, r7, #1
 8011f30:	9304      	str	r3, [sp, #16]
 8011f32:	4649      	mov	r1, r9
 8011f34:	2300      	movs	r3, #0
 8011f36:	220a      	movs	r2, #10
 8011f38:	4658      	mov	r0, fp
 8011f3a:	f000 fe43 	bl	8012bc4 <__multadd>
 8011f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f40:	4681      	mov	r9, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f000 8172 	beq.w	801222c <_dtoa_r+0xb4c>
 8011f48:	2300      	movs	r3, #0
 8011f4a:	4629      	mov	r1, r5
 8011f4c:	220a      	movs	r2, #10
 8011f4e:	4658      	mov	r0, fp
 8011f50:	f000 fe38 	bl	8012bc4 <__multadd>
 8011f54:	9b00      	ldr	r3, [sp, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	4605      	mov	r5, r0
 8011f5a:	dc67      	bgt.n	801202c <_dtoa_r+0x94c>
 8011f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f5e:	2b02      	cmp	r3, #2
 8011f60:	dc41      	bgt.n	8011fe6 <_dtoa_r+0x906>
 8011f62:	e063      	b.n	801202c <_dtoa_r+0x94c>
 8011f64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011f66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011f6a:	e746      	b.n	8011dfa <_dtoa_r+0x71a>
 8011f6c:	9b07      	ldr	r3, [sp, #28]
 8011f6e:	1e5c      	subs	r4, r3, #1
 8011f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f72:	42a3      	cmp	r3, r4
 8011f74:	bfbf      	itttt	lt
 8011f76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011f78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011f7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011f7c:	1ae3      	sublt	r3, r4, r3
 8011f7e:	bfb4      	ite	lt
 8011f80:	18d2      	addlt	r2, r2, r3
 8011f82:	1b1c      	subge	r4, r3, r4
 8011f84:	9b07      	ldr	r3, [sp, #28]
 8011f86:	bfbc      	itt	lt
 8011f88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011f8a:	2400      	movlt	r4, #0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	bfb5      	itete	lt
 8011f90:	eba8 0603 	sublt.w	r6, r8, r3
 8011f94:	9b07      	ldrge	r3, [sp, #28]
 8011f96:	2300      	movlt	r3, #0
 8011f98:	4646      	movge	r6, r8
 8011f9a:	e730      	b.n	8011dfe <_dtoa_r+0x71e>
 8011f9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011f9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011fa0:	4646      	mov	r6, r8
 8011fa2:	e735      	b.n	8011e10 <_dtoa_r+0x730>
 8011fa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011fa6:	e75c      	b.n	8011e62 <_dtoa_r+0x782>
 8011fa8:	2300      	movs	r3, #0
 8011faa:	e788      	b.n	8011ebe <_dtoa_r+0x7de>
 8011fac:	3fe00000 	.word	0x3fe00000
 8011fb0:	40240000 	.word	0x40240000
 8011fb4:	40140000 	.word	0x40140000
 8011fb8:	9b02      	ldr	r3, [sp, #8]
 8011fba:	e780      	b.n	8011ebe <_dtoa_r+0x7de>
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011fc0:	e782      	b.n	8011ec8 <_dtoa_r+0x7e8>
 8011fc2:	d099      	beq.n	8011ef8 <_dtoa_r+0x818>
 8011fc4:	9a08      	ldr	r2, [sp, #32]
 8011fc6:	331c      	adds	r3, #28
 8011fc8:	441a      	add	r2, r3
 8011fca:	4498      	add	r8, r3
 8011fcc:	441e      	add	r6, r3
 8011fce:	9208      	str	r2, [sp, #32]
 8011fd0:	e792      	b.n	8011ef8 <_dtoa_r+0x818>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	e7f6      	b.n	8011fc4 <_dtoa_r+0x8e4>
 8011fd6:	9b07      	ldr	r3, [sp, #28]
 8011fd8:	9704      	str	r7, [sp, #16]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	dc20      	bgt.n	8012020 <_dtoa_r+0x940>
 8011fde:	9300      	str	r3, [sp, #0]
 8011fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fe2:	2b02      	cmp	r3, #2
 8011fe4:	dd1e      	ble.n	8012024 <_dtoa_r+0x944>
 8011fe6:	9b00      	ldr	r3, [sp, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	f47f aec0 	bne.w	8011d6e <_dtoa_r+0x68e>
 8011fee:	4621      	mov	r1, r4
 8011ff0:	2205      	movs	r2, #5
 8011ff2:	4658      	mov	r0, fp
 8011ff4:	f000 fde6 	bl	8012bc4 <__multadd>
 8011ff8:	4601      	mov	r1, r0
 8011ffa:	4604      	mov	r4, r0
 8011ffc:	4648      	mov	r0, r9
 8011ffe:	f001 f843 	bl	8013088 <__mcmp>
 8012002:	2800      	cmp	r0, #0
 8012004:	f77f aeb3 	ble.w	8011d6e <_dtoa_r+0x68e>
 8012008:	4656      	mov	r6, sl
 801200a:	2331      	movs	r3, #49	@ 0x31
 801200c:	f806 3b01 	strb.w	r3, [r6], #1
 8012010:	9b04      	ldr	r3, [sp, #16]
 8012012:	3301      	adds	r3, #1
 8012014:	9304      	str	r3, [sp, #16]
 8012016:	e6ae      	b.n	8011d76 <_dtoa_r+0x696>
 8012018:	9c07      	ldr	r4, [sp, #28]
 801201a:	9704      	str	r7, [sp, #16]
 801201c:	4625      	mov	r5, r4
 801201e:	e7f3      	b.n	8012008 <_dtoa_r+0x928>
 8012020:	9b07      	ldr	r3, [sp, #28]
 8012022:	9300      	str	r3, [sp, #0]
 8012024:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012026:	2b00      	cmp	r3, #0
 8012028:	f000 8104 	beq.w	8012234 <_dtoa_r+0xb54>
 801202c:	2e00      	cmp	r6, #0
 801202e:	dd05      	ble.n	801203c <_dtoa_r+0x95c>
 8012030:	4629      	mov	r1, r5
 8012032:	4632      	mov	r2, r6
 8012034:	4658      	mov	r0, fp
 8012036:	f000 ffbb 	bl	8012fb0 <__lshift>
 801203a:	4605      	mov	r5, r0
 801203c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801203e:	2b00      	cmp	r3, #0
 8012040:	d05a      	beq.n	80120f8 <_dtoa_r+0xa18>
 8012042:	6869      	ldr	r1, [r5, #4]
 8012044:	4658      	mov	r0, fp
 8012046:	f000 fd5b 	bl	8012b00 <_Balloc>
 801204a:	4606      	mov	r6, r0
 801204c:	b928      	cbnz	r0, 801205a <_dtoa_r+0x97a>
 801204e:	4b84      	ldr	r3, [pc, #528]	@ (8012260 <_dtoa_r+0xb80>)
 8012050:	4602      	mov	r2, r0
 8012052:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012056:	f7ff bb5a 	b.w	801170e <_dtoa_r+0x2e>
 801205a:	692a      	ldr	r2, [r5, #16]
 801205c:	3202      	adds	r2, #2
 801205e:	0092      	lsls	r2, r2, #2
 8012060:	f105 010c 	add.w	r1, r5, #12
 8012064:	300c      	adds	r0, #12
 8012066:	f7ff fa78 	bl	801155a <memcpy>
 801206a:	2201      	movs	r2, #1
 801206c:	4631      	mov	r1, r6
 801206e:	4658      	mov	r0, fp
 8012070:	f000 ff9e 	bl	8012fb0 <__lshift>
 8012074:	f10a 0301 	add.w	r3, sl, #1
 8012078:	9307      	str	r3, [sp, #28]
 801207a:	9b00      	ldr	r3, [sp, #0]
 801207c:	4453      	add	r3, sl
 801207e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012080:	9b02      	ldr	r3, [sp, #8]
 8012082:	f003 0301 	and.w	r3, r3, #1
 8012086:	462f      	mov	r7, r5
 8012088:	930a      	str	r3, [sp, #40]	@ 0x28
 801208a:	4605      	mov	r5, r0
 801208c:	9b07      	ldr	r3, [sp, #28]
 801208e:	4621      	mov	r1, r4
 8012090:	3b01      	subs	r3, #1
 8012092:	4648      	mov	r0, r9
 8012094:	9300      	str	r3, [sp, #0]
 8012096:	f7ff fa9b 	bl	80115d0 <quorem>
 801209a:	4639      	mov	r1, r7
 801209c:	9002      	str	r0, [sp, #8]
 801209e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80120a2:	4648      	mov	r0, r9
 80120a4:	f000 fff0 	bl	8013088 <__mcmp>
 80120a8:	462a      	mov	r2, r5
 80120aa:	9008      	str	r0, [sp, #32]
 80120ac:	4621      	mov	r1, r4
 80120ae:	4658      	mov	r0, fp
 80120b0:	f001 f806 	bl	80130c0 <__mdiff>
 80120b4:	68c2      	ldr	r2, [r0, #12]
 80120b6:	4606      	mov	r6, r0
 80120b8:	bb02      	cbnz	r2, 80120fc <_dtoa_r+0xa1c>
 80120ba:	4601      	mov	r1, r0
 80120bc:	4648      	mov	r0, r9
 80120be:	f000 ffe3 	bl	8013088 <__mcmp>
 80120c2:	4602      	mov	r2, r0
 80120c4:	4631      	mov	r1, r6
 80120c6:	4658      	mov	r0, fp
 80120c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80120ca:	f000 fd59 	bl	8012b80 <_Bfree>
 80120ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80120d2:	9e07      	ldr	r6, [sp, #28]
 80120d4:	ea43 0102 	orr.w	r1, r3, r2
 80120d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120da:	4319      	orrs	r1, r3
 80120dc:	d110      	bne.n	8012100 <_dtoa_r+0xa20>
 80120de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80120e2:	d029      	beq.n	8012138 <_dtoa_r+0xa58>
 80120e4:	9b08      	ldr	r3, [sp, #32]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	dd02      	ble.n	80120f0 <_dtoa_r+0xa10>
 80120ea:	9b02      	ldr	r3, [sp, #8]
 80120ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80120f0:	9b00      	ldr	r3, [sp, #0]
 80120f2:	f883 8000 	strb.w	r8, [r3]
 80120f6:	e63f      	b.n	8011d78 <_dtoa_r+0x698>
 80120f8:	4628      	mov	r0, r5
 80120fa:	e7bb      	b.n	8012074 <_dtoa_r+0x994>
 80120fc:	2201      	movs	r2, #1
 80120fe:	e7e1      	b.n	80120c4 <_dtoa_r+0x9e4>
 8012100:	9b08      	ldr	r3, [sp, #32]
 8012102:	2b00      	cmp	r3, #0
 8012104:	db04      	blt.n	8012110 <_dtoa_r+0xa30>
 8012106:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012108:	430b      	orrs	r3, r1
 801210a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801210c:	430b      	orrs	r3, r1
 801210e:	d120      	bne.n	8012152 <_dtoa_r+0xa72>
 8012110:	2a00      	cmp	r2, #0
 8012112:	dded      	ble.n	80120f0 <_dtoa_r+0xa10>
 8012114:	4649      	mov	r1, r9
 8012116:	2201      	movs	r2, #1
 8012118:	4658      	mov	r0, fp
 801211a:	f000 ff49 	bl	8012fb0 <__lshift>
 801211e:	4621      	mov	r1, r4
 8012120:	4681      	mov	r9, r0
 8012122:	f000 ffb1 	bl	8013088 <__mcmp>
 8012126:	2800      	cmp	r0, #0
 8012128:	dc03      	bgt.n	8012132 <_dtoa_r+0xa52>
 801212a:	d1e1      	bne.n	80120f0 <_dtoa_r+0xa10>
 801212c:	f018 0f01 	tst.w	r8, #1
 8012130:	d0de      	beq.n	80120f0 <_dtoa_r+0xa10>
 8012132:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012136:	d1d8      	bne.n	80120ea <_dtoa_r+0xa0a>
 8012138:	9a00      	ldr	r2, [sp, #0]
 801213a:	2339      	movs	r3, #57	@ 0x39
 801213c:	7013      	strb	r3, [r2, #0]
 801213e:	4633      	mov	r3, r6
 8012140:	461e      	mov	r6, r3
 8012142:	3b01      	subs	r3, #1
 8012144:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012148:	2a39      	cmp	r2, #57	@ 0x39
 801214a:	d052      	beq.n	80121f2 <_dtoa_r+0xb12>
 801214c:	3201      	adds	r2, #1
 801214e:	701a      	strb	r2, [r3, #0]
 8012150:	e612      	b.n	8011d78 <_dtoa_r+0x698>
 8012152:	2a00      	cmp	r2, #0
 8012154:	dd07      	ble.n	8012166 <_dtoa_r+0xa86>
 8012156:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801215a:	d0ed      	beq.n	8012138 <_dtoa_r+0xa58>
 801215c:	9a00      	ldr	r2, [sp, #0]
 801215e:	f108 0301 	add.w	r3, r8, #1
 8012162:	7013      	strb	r3, [r2, #0]
 8012164:	e608      	b.n	8011d78 <_dtoa_r+0x698>
 8012166:	9b07      	ldr	r3, [sp, #28]
 8012168:	9a07      	ldr	r2, [sp, #28]
 801216a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801216e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012170:	4293      	cmp	r3, r2
 8012172:	d028      	beq.n	80121c6 <_dtoa_r+0xae6>
 8012174:	4649      	mov	r1, r9
 8012176:	2300      	movs	r3, #0
 8012178:	220a      	movs	r2, #10
 801217a:	4658      	mov	r0, fp
 801217c:	f000 fd22 	bl	8012bc4 <__multadd>
 8012180:	42af      	cmp	r7, r5
 8012182:	4681      	mov	r9, r0
 8012184:	f04f 0300 	mov.w	r3, #0
 8012188:	f04f 020a 	mov.w	r2, #10
 801218c:	4639      	mov	r1, r7
 801218e:	4658      	mov	r0, fp
 8012190:	d107      	bne.n	80121a2 <_dtoa_r+0xac2>
 8012192:	f000 fd17 	bl	8012bc4 <__multadd>
 8012196:	4607      	mov	r7, r0
 8012198:	4605      	mov	r5, r0
 801219a:	9b07      	ldr	r3, [sp, #28]
 801219c:	3301      	adds	r3, #1
 801219e:	9307      	str	r3, [sp, #28]
 80121a0:	e774      	b.n	801208c <_dtoa_r+0x9ac>
 80121a2:	f000 fd0f 	bl	8012bc4 <__multadd>
 80121a6:	4629      	mov	r1, r5
 80121a8:	4607      	mov	r7, r0
 80121aa:	2300      	movs	r3, #0
 80121ac:	220a      	movs	r2, #10
 80121ae:	4658      	mov	r0, fp
 80121b0:	f000 fd08 	bl	8012bc4 <__multadd>
 80121b4:	4605      	mov	r5, r0
 80121b6:	e7f0      	b.n	801219a <_dtoa_r+0xaba>
 80121b8:	9b00      	ldr	r3, [sp, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	bfcc      	ite	gt
 80121be:	461e      	movgt	r6, r3
 80121c0:	2601      	movle	r6, #1
 80121c2:	4456      	add	r6, sl
 80121c4:	2700      	movs	r7, #0
 80121c6:	4649      	mov	r1, r9
 80121c8:	2201      	movs	r2, #1
 80121ca:	4658      	mov	r0, fp
 80121cc:	f000 fef0 	bl	8012fb0 <__lshift>
 80121d0:	4621      	mov	r1, r4
 80121d2:	4681      	mov	r9, r0
 80121d4:	f000 ff58 	bl	8013088 <__mcmp>
 80121d8:	2800      	cmp	r0, #0
 80121da:	dcb0      	bgt.n	801213e <_dtoa_r+0xa5e>
 80121dc:	d102      	bne.n	80121e4 <_dtoa_r+0xb04>
 80121de:	f018 0f01 	tst.w	r8, #1
 80121e2:	d1ac      	bne.n	801213e <_dtoa_r+0xa5e>
 80121e4:	4633      	mov	r3, r6
 80121e6:	461e      	mov	r6, r3
 80121e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121ec:	2a30      	cmp	r2, #48	@ 0x30
 80121ee:	d0fa      	beq.n	80121e6 <_dtoa_r+0xb06>
 80121f0:	e5c2      	b.n	8011d78 <_dtoa_r+0x698>
 80121f2:	459a      	cmp	sl, r3
 80121f4:	d1a4      	bne.n	8012140 <_dtoa_r+0xa60>
 80121f6:	9b04      	ldr	r3, [sp, #16]
 80121f8:	3301      	adds	r3, #1
 80121fa:	9304      	str	r3, [sp, #16]
 80121fc:	2331      	movs	r3, #49	@ 0x31
 80121fe:	f88a 3000 	strb.w	r3, [sl]
 8012202:	e5b9      	b.n	8011d78 <_dtoa_r+0x698>
 8012204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012206:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012264 <_dtoa_r+0xb84>
 801220a:	b11b      	cbz	r3, 8012214 <_dtoa_r+0xb34>
 801220c:	f10a 0308 	add.w	r3, sl, #8
 8012210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012212:	6013      	str	r3, [r2, #0]
 8012214:	4650      	mov	r0, sl
 8012216:	b019      	add	sp, #100	@ 0x64
 8012218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801221e:	2b01      	cmp	r3, #1
 8012220:	f77f ae37 	ble.w	8011e92 <_dtoa_r+0x7b2>
 8012224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012226:	930a      	str	r3, [sp, #40]	@ 0x28
 8012228:	2001      	movs	r0, #1
 801222a:	e655      	b.n	8011ed8 <_dtoa_r+0x7f8>
 801222c:	9b00      	ldr	r3, [sp, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	f77f aed6 	ble.w	8011fe0 <_dtoa_r+0x900>
 8012234:	4656      	mov	r6, sl
 8012236:	4621      	mov	r1, r4
 8012238:	4648      	mov	r0, r9
 801223a:	f7ff f9c9 	bl	80115d0 <quorem>
 801223e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012242:	f806 8b01 	strb.w	r8, [r6], #1
 8012246:	9b00      	ldr	r3, [sp, #0]
 8012248:	eba6 020a 	sub.w	r2, r6, sl
 801224c:	4293      	cmp	r3, r2
 801224e:	ddb3      	ble.n	80121b8 <_dtoa_r+0xad8>
 8012250:	4649      	mov	r1, r9
 8012252:	2300      	movs	r3, #0
 8012254:	220a      	movs	r2, #10
 8012256:	4658      	mov	r0, fp
 8012258:	f000 fcb4 	bl	8012bc4 <__multadd>
 801225c:	4681      	mov	r9, r0
 801225e:	e7ea      	b.n	8012236 <_dtoa_r+0xb56>
 8012260:	080171a4 	.word	0x080171a4
 8012264:	0801713f 	.word	0x0801713f

08012268 <_free_r>:
 8012268:	b538      	push	{r3, r4, r5, lr}
 801226a:	4605      	mov	r5, r0
 801226c:	2900      	cmp	r1, #0
 801226e:	d041      	beq.n	80122f4 <_free_r+0x8c>
 8012270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012274:	1f0c      	subs	r4, r1, #4
 8012276:	2b00      	cmp	r3, #0
 8012278:	bfb8      	it	lt
 801227a:	18e4      	addlt	r4, r4, r3
 801227c:	f000 fc34 	bl	8012ae8 <__malloc_lock>
 8012280:	4a1d      	ldr	r2, [pc, #116]	@ (80122f8 <_free_r+0x90>)
 8012282:	6813      	ldr	r3, [r2, #0]
 8012284:	b933      	cbnz	r3, 8012294 <_free_r+0x2c>
 8012286:	6063      	str	r3, [r4, #4]
 8012288:	6014      	str	r4, [r2, #0]
 801228a:	4628      	mov	r0, r5
 801228c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012290:	f000 bc30 	b.w	8012af4 <__malloc_unlock>
 8012294:	42a3      	cmp	r3, r4
 8012296:	d908      	bls.n	80122aa <_free_r+0x42>
 8012298:	6820      	ldr	r0, [r4, #0]
 801229a:	1821      	adds	r1, r4, r0
 801229c:	428b      	cmp	r3, r1
 801229e:	bf01      	itttt	eq
 80122a0:	6819      	ldreq	r1, [r3, #0]
 80122a2:	685b      	ldreq	r3, [r3, #4]
 80122a4:	1809      	addeq	r1, r1, r0
 80122a6:	6021      	streq	r1, [r4, #0]
 80122a8:	e7ed      	b.n	8012286 <_free_r+0x1e>
 80122aa:	461a      	mov	r2, r3
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	b10b      	cbz	r3, 80122b4 <_free_r+0x4c>
 80122b0:	42a3      	cmp	r3, r4
 80122b2:	d9fa      	bls.n	80122aa <_free_r+0x42>
 80122b4:	6811      	ldr	r1, [r2, #0]
 80122b6:	1850      	adds	r0, r2, r1
 80122b8:	42a0      	cmp	r0, r4
 80122ba:	d10b      	bne.n	80122d4 <_free_r+0x6c>
 80122bc:	6820      	ldr	r0, [r4, #0]
 80122be:	4401      	add	r1, r0
 80122c0:	1850      	adds	r0, r2, r1
 80122c2:	4283      	cmp	r3, r0
 80122c4:	6011      	str	r1, [r2, #0]
 80122c6:	d1e0      	bne.n	801228a <_free_r+0x22>
 80122c8:	6818      	ldr	r0, [r3, #0]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	6053      	str	r3, [r2, #4]
 80122ce:	4408      	add	r0, r1
 80122d0:	6010      	str	r0, [r2, #0]
 80122d2:	e7da      	b.n	801228a <_free_r+0x22>
 80122d4:	d902      	bls.n	80122dc <_free_r+0x74>
 80122d6:	230c      	movs	r3, #12
 80122d8:	602b      	str	r3, [r5, #0]
 80122da:	e7d6      	b.n	801228a <_free_r+0x22>
 80122dc:	6820      	ldr	r0, [r4, #0]
 80122de:	1821      	adds	r1, r4, r0
 80122e0:	428b      	cmp	r3, r1
 80122e2:	bf04      	itt	eq
 80122e4:	6819      	ldreq	r1, [r3, #0]
 80122e6:	685b      	ldreq	r3, [r3, #4]
 80122e8:	6063      	str	r3, [r4, #4]
 80122ea:	bf04      	itt	eq
 80122ec:	1809      	addeq	r1, r1, r0
 80122ee:	6021      	streq	r1, [r4, #0]
 80122f0:	6054      	str	r4, [r2, #4]
 80122f2:	e7ca      	b.n	801228a <_free_r+0x22>
 80122f4:	bd38      	pop	{r3, r4, r5, pc}
 80122f6:	bf00      	nop
 80122f8:	2000a4a0 	.word	0x2000a4a0

080122fc <rshift>:
 80122fc:	6903      	ldr	r3, [r0, #16]
 80122fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012306:	ea4f 1261 	mov.w	r2, r1, asr #5
 801230a:	f100 0414 	add.w	r4, r0, #20
 801230e:	dd45      	ble.n	801239c <rshift+0xa0>
 8012310:	f011 011f 	ands.w	r1, r1, #31
 8012314:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012318:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801231c:	d10c      	bne.n	8012338 <rshift+0x3c>
 801231e:	f100 0710 	add.w	r7, r0, #16
 8012322:	4629      	mov	r1, r5
 8012324:	42b1      	cmp	r1, r6
 8012326:	d334      	bcc.n	8012392 <rshift+0x96>
 8012328:	1a9b      	subs	r3, r3, r2
 801232a:	009b      	lsls	r3, r3, #2
 801232c:	1eea      	subs	r2, r5, #3
 801232e:	4296      	cmp	r6, r2
 8012330:	bf38      	it	cc
 8012332:	2300      	movcc	r3, #0
 8012334:	4423      	add	r3, r4
 8012336:	e015      	b.n	8012364 <rshift+0x68>
 8012338:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801233c:	f1c1 0820 	rsb	r8, r1, #32
 8012340:	40cf      	lsrs	r7, r1
 8012342:	f105 0e04 	add.w	lr, r5, #4
 8012346:	46a1      	mov	r9, r4
 8012348:	4576      	cmp	r6, lr
 801234a:	46f4      	mov	ip, lr
 801234c:	d815      	bhi.n	801237a <rshift+0x7e>
 801234e:	1a9a      	subs	r2, r3, r2
 8012350:	0092      	lsls	r2, r2, #2
 8012352:	3a04      	subs	r2, #4
 8012354:	3501      	adds	r5, #1
 8012356:	42ae      	cmp	r6, r5
 8012358:	bf38      	it	cc
 801235a:	2200      	movcc	r2, #0
 801235c:	18a3      	adds	r3, r4, r2
 801235e:	50a7      	str	r7, [r4, r2]
 8012360:	b107      	cbz	r7, 8012364 <rshift+0x68>
 8012362:	3304      	adds	r3, #4
 8012364:	1b1a      	subs	r2, r3, r4
 8012366:	42a3      	cmp	r3, r4
 8012368:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801236c:	bf08      	it	eq
 801236e:	2300      	moveq	r3, #0
 8012370:	6102      	str	r2, [r0, #16]
 8012372:	bf08      	it	eq
 8012374:	6143      	streq	r3, [r0, #20]
 8012376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801237a:	f8dc c000 	ldr.w	ip, [ip]
 801237e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012382:	ea4c 0707 	orr.w	r7, ip, r7
 8012386:	f849 7b04 	str.w	r7, [r9], #4
 801238a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801238e:	40cf      	lsrs	r7, r1
 8012390:	e7da      	b.n	8012348 <rshift+0x4c>
 8012392:	f851 cb04 	ldr.w	ip, [r1], #4
 8012396:	f847 cf04 	str.w	ip, [r7, #4]!
 801239a:	e7c3      	b.n	8012324 <rshift+0x28>
 801239c:	4623      	mov	r3, r4
 801239e:	e7e1      	b.n	8012364 <rshift+0x68>

080123a0 <__hexdig_fun>:
 80123a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80123a4:	2b09      	cmp	r3, #9
 80123a6:	d802      	bhi.n	80123ae <__hexdig_fun+0xe>
 80123a8:	3820      	subs	r0, #32
 80123aa:	b2c0      	uxtb	r0, r0
 80123ac:	4770      	bx	lr
 80123ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80123b2:	2b05      	cmp	r3, #5
 80123b4:	d801      	bhi.n	80123ba <__hexdig_fun+0x1a>
 80123b6:	3847      	subs	r0, #71	@ 0x47
 80123b8:	e7f7      	b.n	80123aa <__hexdig_fun+0xa>
 80123ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80123be:	2b05      	cmp	r3, #5
 80123c0:	d801      	bhi.n	80123c6 <__hexdig_fun+0x26>
 80123c2:	3827      	subs	r0, #39	@ 0x27
 80123c4:	e7f1      	b.n	80123aa <__hexdig_fun+0xa>
 80123c6:	2000      	movs	r0, #0
 80123c8:	4770      	bx	lr
	...

080123cc <__gethex>:
 80123cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d0:	b085      	sub	sp, #20
 80123d2:	468a      	mov	sl, r1
 80123d4:	9302      	str	r3, [sp, #8]
 80123d6:	680b      	ldr	r3, [r1, #0]
 80123d8:	9001      	str	r0, [sp, #4]
 80123da:	4690      	mov	r8, r2
 80123dc:	1c9c      	adds	r4, r3, #2
 80123de:	46a1      	mov	r9, r4
 80123e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80123e4:	2830      	cmp	r0, #48	@ 0x30
 80123e6:	d0fa      	beq.n	80123de <__gethex+0x12>
 80123e8:	eba9 0303 	sub.w	r3, r9, r3
 80123ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80123f0:	f7ff ffd6 	bl	80123a0 <__hexdig_fun>
 80123f4:	4605      	mov	r5, r0
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d168      	bne.n	80124cc <__gethex+0x100>
 80123fa:	49a0      	ldr	r1, [pc, #640]	@ (801267c <__gethex+0x2b0>)
 80123fc:	2201      	movs	r2, #1
 80123fe:	4648      	mov	r0, r9
 8012400:	f7fe ffaf 	bl	8011362 <strncmp>
 8012404:	4607      	mov	r7, r0
 8012406:	2800      	cmp	r0, #0
 8012408:	d167      	bne.n	80124da <__gethex+0x10e>
 801240a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801240e:	4626      	mov	r6, r4
 8012410:	f7ff ffc6 	bl	80123a0 <__hexdig_fun>
 8012414:	2800      	cmp	r0, #0
 8012416:	d062      	beq.n	80124de <__gethex+0x112>
 8012418:	4623      	mov	r3, r4
 801241a:	7818      	ldrb	r0, [r3, #0]
 801241c:	2830      	cmp	r0, #48	@ 0x30
 801241e:	4699      	mov	r9, r3
 8012420:	f103 0301 	add.w	r3, r3, #1
 8012424:	d0f9      	beq.n	801241a <__gethex+0x4e>
 8012426:	f7ff ffbb 	bl	80123a0 <__hexdig_fun>
 801242a:	fab0 f580 	clz	r5, r0
 801242e:	096d      	lsrs	r5, r5, #5
 8012430:	f04f 0b01 	mov.w	fp, #1
 8012434:	464a      	mov	r2, r9
 8012436:	4616      	mov	r6, r2
 8012438:	3201      	adds	r2, #1
 801243a:	7830      	ldrb	r0, [r6, #0]
 801243c:	f7ff ffb0 	bl	80123a0 <__hexdig_fun>
 8012440:	2800      	cmp	r0, #0
 8012442:	d1f8      	bne.n	8012436 <__gethex+0x6a>
 8012444:	498d      	ldr	r1, [pc, #564]	@ (801267c <__gethex+0x2b0>)
 8012446:	2201      	movs	r2, #1
 8012448:	4630      	mov	r0, r6
 801244a:	f7fe ff8a 	bl	8011362 <strncmp>
 801244e:	2800      	cmp	r0, #0
 8012450:	d13f      	bne.n	80124d2 <__gethex+0x106>
 8012452:	b944      	cbnz	r4, 8012466 <__gethex+0x9a>
 8012454:	1c74      	adds	r4, r6, #1
 8012456:	4622      	mov	r2, r4
 8012458:	4616      	mov	r6, r2
 801245a:	3201      	adds	r2, #1
 801245c:	7830      	ldrb	r0, [r6, #0]
 801245e:	f7ff ff9f 	bl	80123a0 <__hexdig_fun>
 8012462:	2800      	cmp	r0, #0
 8012464:	d1f8      	bne.n	8012458 <__gethex+0x8c>
 8012466:	1ba4      	subs	r4, r4, r6
 8012468:	00a7      	lsls	r7, r4, #2
 801246a:	7833      	ldrb	r3, [r6, #0]
 801246c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012470:	2b50      	cmp	r3, #80	@ 0x50
 8012472:	d13e      	bne.n	80124f2 <__gethex+0x126>
 8012474:	7873      	ldrb	r3, [r6, #1]
 8012476:	2b2b      	cmp	r3, #43	@ 0x2b
 8012478:	d033      	beq.n	80124e2 <__gethex+0x116>
 801247a:	2b2d      	cmp	r3, #45	@ 0x2d
 801247c:	d034      	beq.n	80124e8 <__gethex+0x11c>
 801247e:	1c71      	adds	r1, r6, #1
 8012480:	2400      	movs	r4, #0
 8012482:	7808      	ldrb	r0, [r1, #0]
 8012484:	f7ff ff8c 	bl	80123a0 <__hexdig_fun>
 8012488:	1e43      	subs	r3, r0, #1
 801248a:	b2db      	uxtb	r3, r3
 801248c:	2b18      	cmp	r3, #24
 801248e:	d830      	bhi.n	80124f2 <__gethex+0x126>
 8012490:	f1a0 0210 	sub.w	r2, r0, #16
 8012494:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012498:	f7ff ff82 	bl	80123a0 <__hexdig_fun>
 801249c:	f100 3cff 	add.w	ip, r0, #4294967295
 80124a0:	fa5f fc8c 	uxtb.w	ip, ip
 80124a4:	f1bc 0f18 	cmp.w	ip, #24
 80124a8:	f04f 030a 	mov.w	r3, #10
 80124ac:	d91e      	bls.n	80124ec <__gethex+0x120>
 80124ae:	b104      	cbz	r4, 80124b2 <__gethex+0xe6>
 80124b0:	4252      	negs	r2, r2
 80124b2:	4417      	add	r7, r2
 80124b4:	f8ca 1000 	str.w	r1, [sl]
 80124b8:	b1ed      	cbz	r5, 80124f6 <__gethex+0x12a>
 80124ba:	f1bb 0f00 	cmp.w	fp, #0
 80124be:	bf0c      	ite	eq
 80124c0:	2506      	moveq	r5, #6
 80124c2:	2500      	movne	r5, #0
 80124c4:	4628      	mov	r0, r5
 80124c6:	b005      	add	sp, #20
 80124c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124cc:	2500      	movs	r5, #0
 80124ce:	462c      	mov	r4, r5
 80124d0:	e7b0      	b.n	8012434 <__gethex+0x68>
 80124d2:	2c00      	cmp	r4, #0
 80124d4:	d1c7      	bne.n	8012466 <__gethex+0x9a>
 80124d6:	4627      	mov	r7, r4
 80124d8:	e7c7      	b.n	801246a <__gethex+0x9e>
 80124da:	464e      	mov	r6, r9
 80124dc:	462f      	mov	r7, r5
 80124de:	2501      	movs	r5, #1
 80124e0:	e7c3      	b.n	801246a <__gethex+0x9e>
 80124e2:	2400      	movs	r4, #0
 80124e4:	1cb1      	adds	r1, r6, #2
 80124e6:	e7cc      	b.n	8012482 <__gethex+0xb6>
 80124e8:	2401      	movs	r4, #1
 80124ea:	e7fb      	b.n	80124e4 <__gethex+0x118>
 80124ec:	fb03 0002 	mla	r0, r3, r2, r0
 80124f0:	e7ce      	b.n	8012490 <__gethex+0xc4>
 80124f2:	4631      	mov	r1, r6
 80124f4:	e7de      	b.n	80124b4 <__gethex+0xe8>
 80124f6:	eba6 0309 	sub.w	r3, r6, r9
 80124fa:	3b01      	subs	r3, #1
 80124fc:	4629      	mov	r1, r5
 80124fe:	2b07      	cmp	r3, #7
 8012500:	dc0a      	bgt.n	8012518 <__gethex+0x14c>
 8012502:	9801      	ldr	r0, [sp, #4]
 8012504:	f000 fafc 	bl	8012b00 <_Balloc>
 8012508:	4604      	mov	r4, r0
 801250a:	b940      	cbnz	r0, 801251e <__gethex+0x152>
 801250c:	4b5c      	ldr	r3, [pc, #368]	@ (8012680 <__gethex+0x2b4>)
 801250e:	4602      	mov	r2, r0
 8012510:	21e4      	movs	r1, #228	@ 0xe4
 8012512:	485c      	ldr	r0, [pc, #368]	@ (8012684 <__gethex+0x2b8>)
 8012514:	f7ff f83e 	bl	8011594 <__assert_func>
 8012518:	3101      	adds	r1, #1
 801251a:	105b      	asrs	r3, r3, #1
 801251c:	e7ef      	b.n	80124fe <__gethex+0x132>
 801251e:	f100 0a14 	add.w	sl, r0, #20
 8012522:	2300      	movs	r3, #0
 8012524:	4655      	mov	r5, sl
 8012526:	469b      	mov	fp, r3
 8012528:	45b1      	cmp	r9, r6
 801252a:	d337      	bcc.n	801259c <__gethex+0x1d0>
 801252c:	f845 bb04 	str.w	fp, [r5], #4
 8012530:	eba5 050a 	sub.w	r5, r5, sl
 8012534:	10ad      	asrs	r5, r5, #2
 8012536:	6125      	str	r5, [r4, #16]
 8012538:	4658      	mov	r0, fp
 801253a:	f000 fbd3 	bl	8012ce4 <__hi0bits>
 801253e:	016d      	lsls	r5, r5, #5
 8012540:	f8d8 6000 	ldr.w	r6, [r8]
 8012544:	1a2d      	subs	r5, r5, r0
 8012546:	42b5      	cmp	r5, r6
 8012548:	dd54      	ble.n	80125f4 <__gethex+0x228>
 801254a:	1bad      	subs	r5, r5, r6
 801254c:	4629      	mov	r1, r5
 801254e:	4620      	mov	r0, r4
 8012550:	f000 ff67 	bl	8013422 <__any_on>
 8012554:	4681      	mov	r9, r0
 8012556:	b178      	cbz	r0, 8012578 <__gethex+0x1ac>
 8012558:	1e6b      	subs	r3, r5, #1
 801255a:	1159      	asrs	r1, r3, #5
 801255c:	f003 021f 	and.w	r2, r3, #31
 8012560:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012564:	f04f 0901 	mov.w	r9, #1
 8012568:	fa09 f202 	lsl.w	r2, r9, r2
 801256c:	420a      	tst	r2, r1
 801256e:	d003      	beq.n	8012578 <__gethex+0x1ac>
 8012570:	454b      	cmp	r3, r9
 8012572:	dc36      	bgt.n	80125e2 <__gethex+0x216>
 8012574:	f04f 0902 	mov.w	r9, #2
 8012578:	4629      	mov	r1, r5
 801257a:	4620      	mov	r0, r4
 801257c:	f7ff febe 	bl	80122fc <rshift>
 8012580:	442f      	add	r7, r5
 8012582:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012586:	42bb      	cmp	r3, r7
 8012588:	da42      	bge.n	8012610 <__gethex+0x244>
 801258a:	9801      	ldr	r0, [sp, #4]
 801258c:	4621      	mov	r1, r4
 801258e:	f000 faf7 	bl	8012b80 <_Bfree>
 8012592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012594:	2300      	movs	r3, #0
 8012596:	6013      	str	r3, [r2, #0]
 8012598:	25a3      	movs	r5, #163	@ 0xa3
 801259a:	e793      	b.n	80124c4 <__gethex+0xf8>
 801259c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80125a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80125a2:	d012      	beq.n	80125ca <__gethex+0x1fe>
 80125a4:	2b20      	cmp	r3, #32
 80125a6:	d104      	bne.n	80125b2 <__gethex+0x1e6>
 80125a8:	f845 bb04 	str.w	fp, [r5], #4
 80125ac:	f04f 0b00 	mov.w	fp, #0
 80125b0:	465b      	mov	r3, fp
 80125b2:	7830      	ldrb	r0, [r6, #0]
 80125b4:	9303      	str	r3, [sp, #12]
 80125b6:	f7ff fef3 	bl	80123a0 <__hexdig_fun>
 80125ba:	9b03      	ldr	r3, [sp, #12]
 80125bc:	f000 000f 	and.w	r0, r0, #15
 80125c0:	4098      	lsls	r0, r3
 80125c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80125c6:	3304      	adds	r3, #4
 80125c8:	e7ae      	b.n	8012528 <__gethex+0x15c>
 80125ca:	45b1      	cmp	r9, r6
 80125cc:	d8ea      	bhi.n	80125a4 <__gethex+0x1d8>
 80125ce:	492b      	ldr	r1, [pc, #172]	@ (801267c <__gethex+0x2b0>)
 80125d0:	9303      	str	r3, [sp, #12]
 80125d2:	2201      	movs	r2, #1
 80125d4:	4630      	mov	r0, r6
 80125d6:	f7fe fec4 	bl	8011362 <strncmp>
 80125da:	9b03      	ldr	r3, [sp, #12]
 80125dc:	2800      	cmp	r0, #0
 80125de:	d1e1      	bne.n	80125a4 <__gethex+0x1d8>
 80125e0:	e7a2      	b.n	8012528 <__gethex+0x15c>
 80125e2:	1ea9      	subs	r1, r5, #2
 80125e4:	4620      	mov	r0, r4
 80125e6:	f000 ff1c 	bl	8013422 <__any_on>
 80125ea:	2800      	cmp	r0, #0
 80125ec:	d0c2      	beq.n	8012574 <__gethex+0x1a8>
 80125ee:	f04f 0903 	mov.w	r9, #3
 80125f2:	e7c1      	b.n	8012578 <__gethex+0x1ac>
 80125f4:	da09      	bge.n	801260a <__gethex+0x23e>
 80125f6:	1b75      	subs	r5, r6, r5
 80125f8:	4621      	mov	r1, r4
 80125fa:	9801      	ldr	r0, [sp, #4]
 80125fc:	462a      	mov	r2, r5
 80125fe:	f000 fcd7 	bl	8012fb0 <__lshift>
 8012602:	1b7f      	subs	r7, r7, r5
 8012604:	4604      	mov	r4, r0
 8012606:	f100 0a14 	add.w	sl, r0, #20
 801260a:	f04f 0900 	mov.w	r9, #0
 801260e:	e7b8      	b.n	8012582 <__gethex+0x1b6>
 8012610:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012614:	42bd      	cmp	r5, r7
 8012616:	dd6f      	ble.n	80126f8 <__gethex+0x32c>
 8012618:	1bed      	subs	r5, r5, r7
 801261a:	42ae      	cmp	r6, r5
 801261c:	dc34      	bgt.n	8012688 <__gethex+0x2bc>
 801261e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012622:	2b02      	cmp	r3, #2
 8012624:	d022      	beq.n	801266c <__gethex+0x2a0>
 8012626:	2b03      	cmp	r3, #3
 8012628:	d024      	beq.n	8012674 <__gethex+0x2a8>
 801262a:	2b01      	cmp	r3, #1
 801262c:	d115      	bne.n	801265a <__gethex+0x28e>
 801262e:	42ae      	cmp	r6, r5
 8012630:	d113      	bne.n	801265a <__gethex+0x28e>
 8012632:	2e01      	cmp	r6, #1
 8012634:	d10b      	bne.n	801264e <__gethex+0x282>
 8012636:	9a02      	ldr	r2, [sp, #8]
 8012638:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801263c:	6013      	str	r3, [r2, #0]
 801263e:	2301      	movs	r3, #1
 8012640:	6123      	str	r3, [r4, #16]
 8012642:	f8ca 3000 	str.w	r3, [sl]
 8012646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012648:	2562      	movs	r5, #98	@ 0x62
 801264a:	601c      	str	r4, [r3, #0]
 801264c:	e73a      	b.n	80124c4 <__gethex+0xf8>
 801264e:	1e71      	subs	r1, r6, #1
 8012650:	4620      	mov	r0, r4
 8012652:	f000 fee6 	bl	8013422 <__any_on>
 8012656:	2800      	cmp	r0, #0
 8012658:	d1ed      	bne.n	8012636 <__gethex+0x26a>
 801265a:	9801      	ldr	r0, [sp, #4]
 801265c:	4621      	mov	r1, r4
 801265e:	f000 fa8f 	bl	8012b80 <_Bfree>
 8012662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012664:	2300      	movs	r3, #0
 8012666:	6013      	str	r3, [r2, #0]
 8012668:	2550      	movs	r5, #80	@ 0x50
 801266a:	e72b      	b.n	80124c4 <__gethex+0xf8>
 801266c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1f3      	bne.n	801265a <__gethex+0x28e>
 8012672:	e7e0      	b.n	8012636 <__gethex+0x26a>
 8012674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012676:	2b00      	cmp	r3, #0
 8012678:	d1dd      	bne.n	8012636 <__gethex+0x26a>
 801267a:	e7ee      	b.n	801265a <__gethex+0x28e>
 801267c:	08016ef8 	.word	0x08016ef8
 8012680:	080171a4 	.word	0x080171a4
 8012684:	080171b5 	.word	0x080171b5
 8012688:	1e6f      	subs	r7, r5, #1
 801268a:	f1b9 0f00 	cmp.w	r9, #0
 801268e:	d130      	bne.n	80126f2 <__gethex+0x326>
 8012690:	b127      	cbz	r7, 801269c <__gethex+0x2d0>
 8012692:	4639      	mov	r1, r7
 8012694:	4620      	mov	r0, r4
 8012696:	f000 fec4 	bl	8013422 <__any_on>
 801269a:	4681      	mov	r9, r0
 801269c:	117a      	asrs	r2, r7, #5
 801269e:	2301      	movs	r3, #1
 80126a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80126a4:	f007 071f 	and.w	r7, r7, #31
 80126a8:	40bb      	lsls	r3, r7
 80126aa:	4213      	tst	r3, r2
 80126ac:	4629      	mov	r1, r5
 80126ae:	4620      	mov	r0, r4
 80126b0:	bf18      	it	ne
 80126b2:	f049 0902 	orrne.w	r9, r9, #2
 80126b6:	f7ff fe21 	bl	80122fc <rshift>
 80126ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80126be:	1b76      	subs	r6, r6, r5
 80126c0:	2502      	movs	r5, #2
 80126c2:	f1b9 0f00 	cmp.w	r9, #0
 80126c6:	d047      	beq.n	8012758 <__gethex+0x38c>
 80126c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80126cc:	2b02      	cmp	r3, #2
 80126ce:	d015      	beq.n	80126fc <__gethex+0x330>
 80126d0:	2b03      	cmp	r3, #3
 80126d2:	d017      	beq.n	8012704 <__gethex+0x338>
 80126d4:	2b01      	cmp	r3, #1
 80126d6:	d109      	bne.n	80126ec <__gethex+0x320>
 80126d8:	f019 0f02 	tst.w	r9, #2
 80126dc:	d006      	beq.n	80126ec <__gethex+0x320>
 80126de:	f8da 3000 	ldr.w	r3, [sl]
 80126e2:	ea49 0903 	orr.w	r9, r9, r3
 80126e6:	f019 0f01 	tst.w	r9, #1
 80126ea:	d10e      	bne.n	801270a <__gethex+0x33e>
 80126ec:	f045 0510 	orr.w	r5, r5, #16
 80126f0:	e032      	b.n	8012758 <__gethex+0x38c>
 80126f2:	f04f 0901 	mov.w	r9, #1
 80126f6:	e7d1      	b.n	801269c <__gethex+0x2d0>
 80126f8:	2501      	movs	r5, #1
 80126fa:	e7e2      	b.n	80126c2 <__gethex+0x2f6>
 80126fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126fe:	f1c3 0301 	rsb	r3, r3, #1
 8012702:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012706:	2b00      	cmp	r3, #0
 8012708:	d0f0      	beq.n	80126ec <__gethex+0x320>
 801270a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801270e:	f104 0314 	add.w	r3, r4, #20
 8012712:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012716:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801271a:	f04f 0c00 	mov.w	ip, #0
 801271e:	4618      	mov	r0, r3
 8012720:	f853 2b04 	ldr.w	r2, [r3], #4
 8012724:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012728:	d01b      	beq.n	8012762 <__gethex+0x396>
 801272a:	3201      	adds	r2, #1
 801272c:	6002      	str	r2, [r0, #0]
 801272e:	2d02      	cmp	r5, #2
 8012730:	f104 0314 	add.w	r3, r4, #20
 8012734:	d13c      	bne.n	80127b0 <__gethex+0x3e4>
 8012736:	f8d8 2000 	ldr.w	r2, [r8]
 801273a:	3a01      	subs	r2, #1
 801273c:	42b2      	cmp	r2, r6
 801273e:	d109      	bne.n	8012754 <__gethex+0x388>
 8012740:	1171      	asrs	r1, r6, #5
 8012742:	2201      	movs	r2, #1
 8012744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012748:	f006 061f 	and.w	r6, r6, #31
 801274c:	fa02 f606 	lsl.w	r6, r2, r6
 8012750:	421e      	tst	r6, r3
 8012752:	d13a      	bne.n	80127ca <__gethex+0x3fe>
 8012754:	f045 0520 	orr.w	r5, r5, #32
 8012758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801275a:	601c      	str	r4, [r3, #0]
 801275c:	9b02      	ldr	r3, [sp, #8]
 801275e:	601f      	str	r7, [r3, #0]
 8012760:	e6b0      	b.n	80124c4 <__gethex+0xf8>
 8012762:	4299      	cmp	r1, r3
 8012764:	f843 cc04 	str.w	ip, [r3, #-4]
 8012768:	d8d9      	bhi.n	801271e <__gethex+0x352>
 801276a:	68a3      	ldr	r3, [r4, #8]
 801276c:	459b      	cmp	fp, r3
 801276e:	db17      	blt.n	80127a0 <__gethex+0x3d4>
 8012770:	6861      	ldr	r1, [r4, #4]
 8012772:	9801      	ldr	r0, [sp, #4]
 8012774:	3101      	adds	r1, #1
 8012776:	f000 f9c3 	bl	8012b00 <_Balloc>
 801277a:	4681      	mov	r9, r0
 801277c:	b918      	cbnz	r0, 8012786 <__gethex+0x3ba>
 801277e:	4b1a      	ldr	r3, [pc, #104]	@ (80127e8 <__gethex+0x41c>)
 8012780:	4602      	mov	r2, r0
 8012782:	2184      	movs	r1, #132	@ 0x84
 8012784:	e6c5      	b.n	8012512 <__gethex+0x146>
 8012786:	6922      	ldr	r2, [r4, #16]
 8012788:	3202      	adds	r2, #2
 801278a:	f104 010c 	add.w	r1, r4, #12
 801278e:	0092      	lsls	r2, r2, #2
 8012790:	300c      	adds	r0, #12
 8012792:	f7fe fee2 	bl	801155a <memcpy>
 8012796:	4621      	mov	r1, r4
 8012798:	9801      	ldr	r0, [sp, #4]
 801279a:	f000 f9f1 	bl	8012b80 <_Bfree>
 801279e:	464c      	mov	r4, r9
 80127a0:	6923      	ldr	r3, [r4, #16]
 80127a2:	1c5a      	adds	r2, r3, #1
 80127a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80127a8:	6122      	str	r2, [r4, #16]
 80127aa:	2201      	movs	r2, #1
 80127ac:	615a      	str	r2, [r3, #20]
 80127ae:	e7be      	b.n	801272e <__gethex+0x362>
 80127b0:	6922      	ldr	r2, [r4, #16]
 80127b2:	455a      	cmp	r2, fp
 80127b4:	dd0b      	ble.n	80127ce <__gethex+0x402>
 80127b6:	2101      	movs	r1, #1
 80127b8:	4620      	mov	r0, r4
 80127ba:	f7ff fd9f 	bl	80122fc <rshift>
 80127be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80127c2:	3701      	adds	r7, #1
 80127c4:	42bb      	cmp	r3, r7
 80127c6:	f6ff aee0 	blt.w	801258a <__gethex+0x1be>
 80127ca:	2501      	movs	r5, #1
 80127cc:	e7c2      	b.n	8012754 <__gethex+0x388>
 80127ce:	f016 061f 	ands.w	r6, r6, #31
 80127d2:	d0fa      	beq.n	80127ca <__gethex+0x3fe>
 80127d4:	4453      	add	r3, sl
 80127d6:	f1c6 0620 	rsb	r6, r6, #32
 80127da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80127de:	f000 fa81 	bl	8012ce4 <__hi0bits>
 80127e2:	42b0      	cmp	r0, r6
 80127e4:	dbe7      	blt.n	80127b6 <__gethex+0x3ea>
 80127e6:	e7f0      	b.n	80127ca <__gethex+0x3fe>
 80127e8:	080171a4 	.word	0x080171a4

080127ec <L_shift>:
 80127ec:	f1c2 0208 	rsb	r2, r2, #8
 80127f0:	0092      	lsls	r2, r2, #2
 80127f2:	b570      	push	{r4, r5, r6, lr}
 80127f4:	f1c2 0620 	rsb	r6, r2, #32
 80127f8:	6843      	ldr	r3, [r0, #4]
 80127fa:	6804      	ldr	r4, [r0, #0]
 80127fc:	fa03 f506 	lsl.w	r5, r3, r6
 8012800:	432c      	orrs	r4, r5
 8012802:	40d3      	lsrs	r3, r2
 8012804:	6004      	str	r4, [r0, #0]
 8012806:	f840 3f04 	str.w	r3, [r0, #4]!
 801280a:	4288      	cmp	r0, r1
 801280c:	d3f4      	bcc.n	80127f8 <L_shift+0xc>
 801280e:	bd70      	pop	{r4, r5, r6, pc}

08012810 <__match>:
 8012810:	b530      	push	{r4, r5, lr}
 8012812:	6803      	ldr	r3, [r0, #0]
 8012814:	3301      	adds	r3, #1
 8012816:	f811 4b01 	ldrb.w	r4, [r1], #1
 801281a:	b914      	cbnz	r4, 8012822 <__match+0x12>
 801281c:	6003      	str	r3, [r0, #0]
 801281e:	2001      	movs	r0, #1
 8012820:	bd30      	pop	{r4, r5, pc}
 8012822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012826:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801282a:	2d19      	cmp	r5, #25
 801282c:	bf98      	it	ls
 801282e:	3220      	addls	r2, #32
 8012830:	42a2      	cmp	r2, r4
 8012832:	d0f0      	beq.n	8012816 <__match+0x6>
 8012834:	2000      	movs	r0, #0
 8012836:	e7f3      	b.n	8012820 <__match+0x10>

08012838 <__hexnan>:
 8012838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283c:	680b      	ldr	r3, [r1, #0]
 801283e:	6801      	ldr	r1, [r0, #0]
 8012840:	115e      	asrs	r6, r3, #5
 8012842:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012846:	f013 031f 	ands.w	r3, r3, #31
 801284a:	b087      	sub	sp, #28
 801284c:	bf18      	it	ne
 801284e:	3604      	addne	r6, #4
 8012850:	2500      	movs	r5, #0
 8012852:	1f37      	subs	r7, r6, #4
 8012854:	4682      	mov	sl, r0
 8012856:	4690      	mov	r8, r2
 8012858:	9301      	str	r3, [sp, #4]
 801285a:	f846 5c04 	str.w	r5, [r6, #-4]
 801285e:	46b9      	mov	r9, r7
 8012860:	463c      	mov	r4, r7
 8012862:	9502      	str	r5, [sp, #8]
 8012864:	46ab      	mov	fp, r5
 8012866:	784a      	ldrb	r2, [r1, #1]
 8012868:	1c4b      	adds	r3, r1, #1
 801286a:	9303      	str	r3, [sp, #12]
 801286c:	b342      	cbz	r2, 80128c0 <__hexnan+0x88>
 801286e:	4610      	mov	r0, r2
 8012870:	9105      	str	r1, [sp, #20]
 8012872:	9204      	str	r2, [sp, #16]
 8012874:	f7ff fd94 	bl	80123a0 <__hexdig_fun>
 8012878:	2800      	cmp	r0, #0
 801287a:	d151      	bne.n	8012920 <__hexnan+0xe8>
 801287c:	9a04      	ldr	r2, [sp, #16]
 801287e:	9905      	ldr	r1, [sp, #20]
 8012880:	2a20      	cmp	r2, #32
 8012882:	d818      	bhi.n	80128b6 <__hexnan+0x7e>
 8012884:	9b02      	ldr	r3, [sp, #8]
 8012886:	459b      	cmp	fp, r3
 8012888:	dd13      	ble.n	80128b2 <__hexnan+0x7a>
 801288a:	454c      	cmp	r4, r9
 801288c:	d206      	bcs.n	801289c <__hexnan+0x64>
 801288e:	2d07      	cmp	r5, #7
 8012890:	dc04      	bgt.n	801289c <__hexnan+0x64>
 8012892:	462a      	mov	r2, r5
 8012894:	4649      	mov	r1, r9
 8012896:	4620      	mov	r0, r4
 8012898:	f7ff ffa8 	bl	80127ec <L_shift>
 801289c:	4544      	cmp	r4, r8
 801289e:	d952      	bls.n	8012946 <__hexnan+0x10e>
 80128a0:	2300      	movs	r3, #0
 80128a2:	f1a4 0904 	sub.w	r9, r4, #4
 80128a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80128aa:	f8cd b008 	str.w	fp, [sp, #8]
 80128ae:	464c      	mov	r4, r9
 80128b0:	461d      	mov	r5, r3
 80128b2:	9903      	ldr	r1, [sp, #12]
 80128b4:	e7d7      	b.n	8012866 <__hexnan+0x2e>
 80128b6:	2a29      	cmp	r2, #41	@ 0x29
 80128b8:	d157      	bne.n	801296a <__hexnan+0x132>
 80128ba:	3102      	adds	r1, #2
 80128bc:	f8ca 1000 	str.w	r1, [sl]
 80128c0:	f1bb 0f00 	cmp.w	fp, #0
 80128c4:	d051      	beq.n	801296a <__hexnan+0x132>
 80128c6:	454c      	cmp	r4, r9
 80128c8:	d206      	bcs.n	80128d8 <__hexnan+0xa0>
 80128ca:	2d07      	cmp	r5, #7
 80128cc:	dc04      	bgt.n	80128d8 <__hexnan+0xa0>
 80128ce:	462a      	mov	r2, r5
 80128d0:	4649      	mov	r1, r9
 80128d2:	4620      	mov	r0, r4
 80128d4:	f7ff ff8a 	bl	80127ec <L_shift>
 80128d8:	4544      	cmp	r4, r8
 80128da:	d936      	bls.n	801294a <__hexnan+0x112>
 80128dc:	f1a8 0204 	sub.w	r2, r8, #4
 80128e0:	4623      	mov	r3, r4
 80128e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80128e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80128ea:	429f      	cmp	r7, r3
 80128ec:	d2f9      	bcs.n	80128e2 <__hexnan+0xaa>
 80128ee:	1b3b      	subs	r3, r7, r4
 80128f0:	f023 0303 	bic.w	r3, r3, #3
 80128f4:	3304      	adds	r3, #4
 80128f6:	3401      	adds	r4, #1
 80128f8:	3e03      	subs	r6, #3
 80128fa:	42b4      	cmp	r4, r6
 80128fc:	bf88      	it	hi
 80128fe:	2304      	movhi	r3, #4
 8012900:	4443      	add	r3, r8
 8012902:	2200      	movs	r2, #0
 8012904:	f843 2b04 	str.w	r2, [r3], #4
 8012908:	429f      	cmp	r7, r3
 801290a:	d2fb      	bcs.n	8012904 <__hexnan+0xcc>
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	b91b      	cbnz	r3, 8012918 <__hexnan+0xe0>
 8012910:	4547      	cmp	r7, r8
 8012912:	d128      	bne.n	8012966 <__hexnan+0x12e>
 8012914:	2301      	movs	r3, #1
 8012916:	603b      	str	r3, [r7, #0]
 8012918:	2005      	movs	r0, #5
 801291a:	b007      	add	sp, #28
 801291c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012920:	3501      	adds	r5, #1
 8012922:	2d08      	cmp	r5, #8
 8012924:	f10b 0b01 	add.w	fp, fp, #1
 8012928:	dd06      	ble.n	8012938 <__hexnan+0x100>
 801292a:	4544      	cmp	r4, r8
 801292c:	d9c1      	bls.n	80128b2 <__hexnan+0x7a>
 801292e:	2300      	movs	r3, #0
 8012930:	f844 3c04 	str.w	r3, [r4, #-4]
 8012934:	2501      	movs	r5, #1
 8012936:	3c04      	subs	r4, #4
 8012938:	6822      	ldr	r2, [r4, #0]
 801293a:	f000 000f 	and.w	r0, r0, #15
 801293e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012942:	6020      	str	r0, [r4, #0]
 8012944:	e7b5      	b.n	80128b2 <__hexnan+0x7a>
 8012946:	2508      	movs	r5, #8
 8012948:	e7b3      	b.n	80128b2 <__hexnan+0x7a>
 801294a:	9b01      	ldr	r3, [sp, #4]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d0dd      	beq.n	801290c <__hexnan+0xd4>
 8012950:	f1c3 0320 	rsb	r3, r3, #32
 8012954:	f04f 32ff 	mov.w	r2, #4294967295
 8012958:	40da      	lsrs	r2, r3
 801295a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801295e:	4013      	ands	r3, r2
 8012960:	f846 3c04 	str.w	r3, [r6, #-4]
 8012964:	e7d2      	b.n	801290c <__hexnan+0xd4>
 8012966:	3f04      	subs	r7, #4
 8012968:	e7d0      	b.n	801290c <__hexnan+0xd4>
 801296a:	2004      	movs	r0, #4
 801296c:	e7d5      	b.n	801291a <__hexnan+0xe2>
	...

08012970 <malloc>:
 8012970:	4b02      	ldr	r3, [pc, #8]	@ (801297c <malloc+0xc>)
 8012972:	4601      	mov	r1, r0
 8012974:	6818      	ldr	r0, [r3, #0]
 8012976:	f000 b825 	b.w	80129c4 <_malloc_r>
 801297a:	bf00      	nop
 801297c:	20002360 	.word	0x20002360

08012980 <sbrk_aligned>:
 8012980:	b570      	push	{r4, r5, r6, lr}
 8012982:	4e0f      	ldr	r6, [pc, #60]	@ (80129c0 <sbrk_aligned+0x40>)
 8012984:	460c      	mov	r4, r1
 8012986:	6831      	ldr	r1, [r6, #0]
 8012988:	4605      	mov	r5, r0
 801298a:	b911      	cbnz	r1, 8012992 <sbrk_aligned+0x12>
 801298c:	f000 ffa6 	bl	80138dc <_sbrk_r>
 8012990:	6030      	str	r0, [r6, #0]
 8012992:	4621      	mov	r1, r4
 8012994:	4628      	mov	r0, r5
 8012996:	f000 ffa1 	bl	80138dc <_sbrk_r>
 801299a:	1c43      	adds	r3, r0, #1
 801299c:	d103      	bne.n	80129a6 <sbrk_aligned+0x26>
 801299e:	f04f 34ff 	mov.w	r4, #4294967295
 80129a2:	4620      	mov	r0, r4
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
 80129a6:	1cc4      	adds	r4, r0, #3
 80129a8:	f024 0403 	bic.w	r4, r4, #3
 80129ac:	42a0      	cmp	r0, r4
 80129ae:	d0f8      	beq.n	80129a2 <sbrk_aligned+0x22>
 80129b0:	1a21      	subs	r1, r4, r0
 80129b2:	4628      	mov	r0, r5
 80129b4:	f000 ff92 	bl	80138dc <_sbrk_r>
 80129b8:	3001      	adds	r0, #1
 80129ba:	d1f2      	bne.n	80129a2 <sbrk_aligned+0x22>
 80129bc:	e7ef      	b.n	801299e <sbrk_aligned+0x1e>
 80129be:	bf00      	nop
 80129c0:	2000a49c 	.word	0x2000a49c

080129c4 <_malloc_r>:
 80129c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129c8:	1ccd      	adds	r5, r1, #3
 80129ca:	f025 0503 	bic.w	r5, r5, #3
 80129ce:	3508      	adds	r5, #8
 80129d0:	2d0c      	cmp	r5, #12
 80129d2:	bf38      	it	cc
 80129d4:	250c      	movcc	r5, #12
 80129d6:	2d00      	cmp	r5, #0
 80129d8:	4606      	mov	r6, r0
 80129da:	db01      	blt.n	80129e0 <_malloc_r+0x1c>
 80129dc:	42a9      	cmp	r1, r5
 80129de:	d904      	bls.n	80129ea <_malloc_r+0x26>
 80129e0:	230c      	movs	r3, #12
 80129e2:	6033      	str	r3, [r6, #0]
 80129e4:	2000      	movs	r0, #0
 80129e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ac0 <_malloc_r+0xfc>
 80129ee:	f000 f87b 	bl	8012ae8 <__malloc_lock>
 80129f2:	f8d8 3000 	ldr.w	r3, [r8]
 80129f6:	461c      	mov	r4, r3
 80129f8:	bb44      	cbnz	r4, 8012a4c <_malloc_r+0x88>
 80129fa:	4629      	mov	r1, r5
 80129fc:	4630      	mov	r0, r6
 80129fe:	f7ff ffbf 	bl	8012980 <sbrk_aligned>
 8012a02:	1c43      	adds	r3, r0, #1
 8012a04:	4604      	mov	r4, r0
 8012a06:	d158      	bne.n	8012aba <_malloc_r+0xf6>
 8012a08:	f8d8 4000 	ldr.w	r4, [r8]
 8012a0c:	4627      	mov	r7, r4
 8012a0e:	2f00      	cmp	r7, #0
 8012a10:	d143      	bne.n	8012a9a <_malloc_r+0xd6>
 8012a12:	2c00      	cmp	r4, #0
 8012a14:	d04b      	beq.n	8012aae <_malloc_r+0xea>
 8012a16:	6823      	ldr	r3, [r4, #0]
 8012a18:	4639      	mov	r1, r7
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	eb04 0903 	add.w	r9, r4, r3
 8012a20:	f000 ff5c 	bl	80138dc <_sbrk_r>
 8012a24:	4581      	cmp	r9, r0
 8012a26:	d142      	bne.n	8012aae <_malloc_r+0xea>
 8012a28:	6821      	ldr	r1, [r4, #0]
 8012a2a:	1a6d      	subs	r5, r5, r1
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7ff ffa6 	bl	8012980 <sbrk_aligned>
 8012a34:	3001      	adds	r0, #1
 8012a36:	d03a      	beq.n	8012aae <_malloc_r+0xea>
 8012a38:	6823      	ldr	r3, [r4, #0]
 8012a3a:	442b      	add	r3, r5
 8012a3c:	6023      	str	r3, [r4, #0]
 8012a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8012a42:	685a      	ldr	r2, [r3, #4]
 8012a44:	bb62      	cbnz	r2, 8012aa0 <_malloc_r+0xdc>
 8012a46:	f8c8 7000 	str.w	r7, [r8]
 8012a4a:	e00f      	b.n	8012a6c <_malloc_r+0xa8>
 8012a4c:	6822      	ldr	r2, [r4, #0]
 8012a4e:	1b52      	subs	r2, r2, r5
 8012a50:	d420      	bmi.n	8012a94 <_malloc_r+0xd0>
 8012a52:	2a0b      	cmp	r2, #11
 8012a54:	d917      	bls.n	8012a86 <_malloc_r+0xc2>
 8012a56:	1961      	adds	r1, r4, r5
 8012a58:	42a3      	cmp	r3, r4
 8012a5a:	6025      	str	r5, [r4, #0]
 8012a5c:	bf18      	it	ne
 8012a5e:	6059      	strne	r1, [r3, #4]
 8012a60:	6863      	ldr	r3, [r4, #4]
 8012a62:	bf08      	it	eq
 8012a64:	f8c8 1000 	streq.w	r1, [r8]
 8012a68:	5162      	str	r2, [r4, r5]
 8012a6a:	604b      	str	r3, [r1, #4]
 8012a6c:	4630      	mov	r0, r6
 8012a6e:	f000 f841 	bl	8012af4 <__malloc_unlock>
 8012a72:	f104 000b 	add.w	r0, r4, #11
 8012a76:	1d23      	adds	r3, r4, #4
 8012a78:	f020 0007 	bic.w	r0, r0, #7
 8012a7c:	1ac2      	subs	r2, r0, r3
 8012a7e:	bf1c      	itt	ne
 8012a80:	1a1b      	subne	r3, r3, r0
 8012a82:	50a3      	strne	r3, [r4, r2]
 8012a84:	e7af      	b.n	80129e6 <_malloc_r+0x22>
 8012a86:	6862      	ldr	r2, [r4, #4]
 8012a88:	42a3      	cmp	r3, r4
 8012a8a:	bf0c      	ite	eq
 8012a8c:	f8c8 2000 	streq.w	r2, [r8]
 8012a90:	605a      	strne	r2, [r3, #4]
 8012a92:	e7eb      	b.n	8012a6c <_malloc_r+0xa8>
 8012a94:	4623      	mov	r3, r4
 8012a96:	6864      	ldr	r4, [r4, #4]
 8012a98:	e7ae      	b.n	80129f8 <_malloc_r+0x34>
 8012a9a:	463c      	mov	r4, r7
 8012a9c:	687f      	ldr	r7, [r7, #4]
 8012a9e:	e7b6      	b.n	8012a0e <_malloc_r+0x4a>
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	685b      	ldr	r3, [r3, #4]
 8012aa4:	42a3      	cmp	r3, r4
 8012aa6:	d1fb      	bne.n	8012aa0 <_malloc_r+0xdc>
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	6053      	str	r3, [r2, #4]
 8012aac:	e7de      	b.n	8012a6c <_malloc_r+0xa8>
 8012aae:	230c      	movs	r3, #12
 8012ab0:	6033      	str	r3, [r6, #0]
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f000 f81e 	bl	8012af4 <__malloc_unlock>
 8012ab8:	e794      	b.n	80129e4 <_malloc_r+0x20>
 8012aba:	6005      	str	r5, [r0, #0]
 8012abc:	e7d6      	b.n	8012a6c <_malloc_r+0xa8>
 8012abe:	bf00      	nop
 8012ac0:	2000a4a0 	.word	0x2000a4a0

08012ac4 <__ascii_mbtowc>:
 8012ac4:	b082      	sub	sp, #8
 8012ac6:	b901      	cbnz	r1, 8012aca <__ascii_mbtowc+0x6>
 8012ac8:	a901      	add	r1, sp, #4
 8012aca:	b142      	cbz	r2, 8012ade <__ascii_mbtowc+0x1a>
 8012acc:	b14b      	cbz	r3, 8012ae2 <__ascii_mbtowc+0x1e>
 8012ace:	7813      	ldrb	r3, [r2, #0]
 8012ad0:	600b      	str	r3, [r1, #0]
 8012ad2:	7812      	ldrb	r2, [r2, #0]
 8012ad4:	1e10      	subs	r0, r2, #0
 8012ad6:	bf18      	it	ne
 8012ad8:	2001      	movne	r0, #1
 8012ada:	b002      	add	sp, #8
 8012adc:	4770      	bx	lr
 8012ade:	4610      	mov	r0, r2
 8012ae0:	e7fb      	b.n	8012ada <__ascii_mbtowc+0x16>
 8012ae2:	f06f 0001 	mvn.w	r0, #1
 8012ae6:	e7f8      	b.n	8012ada <__ascii_mbtowc+0x16>

08012ae8 <__malloc_lock>:
 8012ae8:	4801      	ldr	r0, [pc, #4]	@ (8012af0 <__malloc_lock+0x8>)
 8012aea:	f7fe bd34 	b.w	8011556 <__retarget_lock_acquire_recursive>
 8012aee:	bf00      	nop
 8012af0:	2000a498 	.word	0x2000a498

08012af4 <__malloc_unlock>:
 8012af4:	4801      	ldr	r0, [pc, #4]	@ (8012afc <__malloc_unlock+0x8>)
 8012af6:	f7fe bd2f 	b.w	8011558 <__retarget_lock_release_recursive>
 8012afa:	bf00      	nop
 8012afc:	2000a498 	.word	0x2000a498

08012b00 <_Balloc>:
 8012b00:	b570      	push	{r4, r5, r6, lr}
 8012b02:	69c6      	ldr	r6, [r0, #28]
 8012b04:	4604      	mov	r4, r0
 8012b06:	460d      	mov	r5, r1
 8012b08:	b976      	cbnz	r6, 8012b28 <_Balloc+0x28>
 8012b0a:	2010      	movs	r0, #16
 8012b0c:	f7ff ff30 	bl	8012970 <malloc>
 8012b10:	4602      	mov	r2, r0
 8012b12:	61e0      	str	r0, [r4, #28]
 8012b14:	b920      	cbnz	r0, 8012b20 <_Balloc+0x20>
 8012b16:	4b18      	ldr	r3, [pc, #96]	@ (8012b78 <_Balloc+0x78>)
 8012b18:	4818      	ldr	r0, [pc, #96]	@ (8012b7c <_Balloc+0x7c>)
 8012b1a:	216b      	movs	r1, #107	@ 0x6b
 8012b1c:	f7fe fd3a 	bl	8011594 <__assert_func>
 8012b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b24:	6006      	str	r6, [r0, #0]
 8012b26:	60c6      	str	r6, [r0, #12]
 8012b28:	69e6      	ldr	r6, [r4, #28]
 8012b2a:	68f3      	ldr	r3, [r6, #12]
 8012b2c:	b183      	cbz	r3, 8012b50 <_Balloc+0x50>
 8012b2e:	69e3      	ldr	r3, [r4, #28]
 8012b30:	68db      	ldr	r3, [r3, #12]
 8012b32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012b36:	b9b8      	cbnz	r0, 8012b68 <_Balloc+0x68>
 8012b38:	2101      	movs	r1, #1
 8012b3a:	fa01 f605 	lsl.w	r6, r1, r5
 8012b3e:	1d72      	adds	r2, r6, #5
 8012b40:	0092      	lsls	r2, r2, #2
 8012b42:	4620      	mov	r0, r4
 8012b44:	f000 fee1 	bl	801390a <_calloc_r>
 8012b48:	b160      	cbz	r0, 8012b64 <_Balloc+0x64>
 8012b4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012b4e:	e00e      	b.n	8012b6e <_Balloc+0x6e>
 8012b50:	2221      	movs	r2, #33	@ 0x21
 8012b52:	2104      	movs	r1, #4
 8012b54:	4620      	mov	r0, r4
 8012b56:	f000 fed8 	bl	801390a <_calloc_r>
 8012b5a:	69e3      	ldr	r3, [r4, #28]
 8012b5c:	60f0      	str	r0, [r6, #12]
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d1e4      	bne.n	8012b2e <_Balloc+0x2e>
 8012b64:	2000      	movs	r0, #0
 8012b66:	bd70      	pop	{r4, r5, r6, pc}
 8012b68:	6802      	ldr	r2, [r0, #0]
 8012b6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012b6e:	2300      	movs	r3, #0
 8012b70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012b74:	e7f7      	b.n	8012b66 <_Balloc+0x66>
 8012b76:	bf00      	nop
 8012b78:	0801708a 	.word	0x0801708a
 8012b7c:	08017215 	.word	0x08017215

08012b80 <_Bfree>:
 8012b80:	b570      	push	{r4, r5, r6, lr}
 8012b82:	69c6      	ldr	r6, [r0, #28]
 8012b84:	4605      	mov	r5, r0
 8012b86:	460c      	mov	r4, r1
 8012b88:	b976      	cbnz	r6, 8012ba8 <_Bfree+0x28>
 8012b8a:	2010      	movs	r0, #16
 8012b8c:	f7ff fef0 	bl	8012970 <malloc>
 8012b90:	4602      	mov	r2, r0
 8012b92:	61e8      	str	r0, [r5, #28]
 8012b94:	b920      	cbnz	r0, 8012ba0 <_Bfree+0x20>
 8012b96:	4b09      	ldr	r3, [pc, #36]	@ (8012bbc <_Bfree+0x3c>)
 8012b98:	4809      	ldr	r0, [pc, #36]	@ (8012bc0 <_Bfree+0x40>)
 8012b9a:	218f      	movs	r1, #143	@ 0x8f
 8012b9c:	f7fe fcfa 	bl	8011594 <__assert_func>
 8012ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ba4:	6006      	str	r6, [r0, #0]
 8012ba6:	60c6      	str	r6, [r0, #12]
 8012ba8:	b13c      	cbz	r4, 8012bba <_Bfree+0x3a>
 8012baa:	69eb      	ldr	r3, [r5, #28]
 8012bac:	6862      	ldr	r2, [r4, #4]
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012bb4:	6021      	str	r1, [r4, #0]
 8012bb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012bba:	bd70      	pop	{r4, r5, r6, pc}
 8012bbc:	0801708a 	.word	0x0801708a
 8012bc0:	08017215 	.word	0x08017215

08012bc4 <__multadd>:
 8012bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bc8:	690d      	ldr	r5, [r1, #16]
 8012bca:	4607      	mov	r7, r0
 8012bcc:	460c      	mov	r4, r1
 8012bce:	461e      	mov	r6, r3
 8012bd0:	f101 0c14 	add.w	ip, r1, #20
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8012bda:	b299      	uxth	r1, r3
 8012bdc:	fb02 6101 	mla	r1, r2, r1, r6
 8012be0:	0c1e      	lsrs	r6, r3, #16
 8012be2:	0c0b      	lsrs	r3, r1, #16
 8012be4:	fb02 3306 	mla	r3, r2, r6, r3
 8012be8:	b289      	uxth	r1, r1
 8012bea:	3001      	adds	r0, #1
 8012bec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012bf0:	4285      	cmp	r5, r0
 8012bf2:	f84c 1b04 	str.w	r1, [ip], #4
 8012bf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012bfa:	dcec      	bgt.n	8012bd6 <__multadd+0x12>
 8012bfc:	b30e      	cbz	r6, 8012c42 <__multadd+0x7e>
 8012bfe:	68a3      	ldr	r3, [r4, #8]
 8012c00:	42ab      	cmp	r3, r5
 8012c02:	dc19      	bgt.n	8012c38 <__multadd+0x74>
 8012c04:	6861      	ldr	r1, [r4, #4]
 8012c06:	4638      	mov	r0, r7
 8012c08:	3101      	adds	r1, #1
 8012c0a:	f7ff ff79 	bl	8012b00 <_Balloc>
 8012c0e:	4680      	mov	r8, r0
 8012c10:	b928      	cbnz	r0, 8012c1e <__multadd+0x5a>
 8012c12:	4602      	mov	r2, r0
 8012c14:	4b0c      	ldr	r3, [pc, #48]	@ (8012c48 <__multadd+0x84>)
 8012c16:	480d      	ldr	r0, [pc, #52]	@ (8012c4c <__multadd+0x88>)
 8012c18:	21ba      	movs	r1, #186	@ 0xba
 8012c1a:	f7fe fcbb 	bl	8011594 <__assert_func>
 8012c1e:	6922      	ldr	r2, [r4, #16]
 8012c20:	3202      	adds	r2, #2
 8012c22:	f104 010c 	add.w	r1, r4, #12
 8012c26:	0092      	lsls	r2, r2, #2
 8012c28:	300c      	adds	r0, #12
 8012c2a:	f7fe fc96 	bl	801155a <memcpy>
 8012c2e:	4621      	mov	r1, r4
 8012c30:	4638      	mov	r0, r7
 8012c32:	f7ff ffa5 	bl	8012b80 <_Bfree>
 8012c36:	4644      	mov	r4, r8
 8012c38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012c3c:	3501      	adds	r5, #1
 8012c3e:	615e      	str	r6, [r3, #20]
 8012c40:	6125      	str	r5, [r4, #16]
 8012c42:	4620      	mov	r0, r4
 8012c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c48:	080171a4 	.word	0x080171a4
 8012c4c:	08017215 	.word	0x08017215

08012c50 <__s2b>:
 8012c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c54:	460c      	mov	r4, r1
 8012c56:	4615      	mov	r5, r2
 8012c58:	461f      	mov	r7, r3
 8012c5a:	2209      	movs	r2, #9
 8012c5c:	3308      	adds	r3, #8
 8012c5e:	4606      	mov	r6, r0
 8012c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8012c64:	2100      	movs	r1, #0
 8012c66:	2201      	movs	r2, #1
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	db09      	blt.n	8012c80 <__s2b+0x30>
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	f7ff ff47 	bl	8012b00 <_Balloc>
 8012c72:	b940      	cbnz	r0, 8012c86 <__s2b+0x36>
 8012c74:	4602      	mov	r2, r0
 8012c76:	4b19      	ldr	r3, [pc, #100]	@ (8012cdc <__s2b+0x8c>)
 8012c78:	4819      	ldr	r0, [pc, #100]	@ (8012ce0 <__s2b+0x90>)
 8012c7a:	21d3      	movs	r1, #211	@ 0xd3
 8012c7c:	f7fe fc8a 	bl	8011594 <__assert_func>
 8012c80:	0052      	lsls	r2, r2, #1
 8012c82:	3101      	adds	r1, #1
 8012c84:	e7f0      	b.n	8012c68 <__s2b+0x18>
 8012c86:	9b08      	ldr	r3, [sp, #32]
 8012c88:	6143      	str	r3, [r0, #20]
 8012c8a:	2d09      	cmp	r5, #9
 8012c8c:	f04f 0301 	mov.w	r3, #1
 8012c90:	6103      	str	r3, [r0, #16]
 8012c92:	dd16      	ble.n	8012cc2 <__s2b+0x72>
 8012c94:	f104 0909 	add.w	r9, r4, #9
 8012c98:	46c8      	mov	r8, r9
 8012c9a:	442c      	add	r4, r5
 8012c9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012ca0:	4601      	mov	r1, r0
 8012ca2:	3b30      	subs	r3, #48	@ 0x30
 8012ca4:	220a      	movs	r2, #10
 8012ca6:	4630      	mov	r0, r6
 8012ca8:	f7ff ff8c 	bl	8012bc4 <__multadd>
 8012cac:	45a0      	cmp	r8, r4
 8012cae:	d1f5      	bne.n	8012c9c <__s2b+0x4c>
 8012cb0:	f1a5 0408 	sub.w	r4, r5, #8
 8012cb4:	444c      	add	r4, r9
 8012cb6:	1b2d      	subs	r5, r5, r4
 8012cb8:	1963      	adds	r3, r4, r5
 8012cba:	42bb      	cmp	r3, r7
 8012cbc:	db04      	blt.n	8012cc8 <__s2b+0x78>
 8012cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cc2:	340a      	adds	r4, #10
 8012cc4:	2509      	movs	r5, #9
 8012cc6:	e7f6      	b.n	8012cb6 <__s2b+0x66>
 8012cc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012ccc:	4601      	mov	r1, r0
 8012cce:	3b30      	subs	r3, #48	@ 0x30
 8012cd0:	220a      	movs	r2, #10
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	f7ff ff76 	bl	8012bc4 <__multadd>
 8012cd8:	e7ee      	b.n	8012cb8 <__s2b+0x68>
 8012cda:	bf00      	nop
 8012cdc:	080171a4 	.word	0x080171a4
 8012ce0:	08017215 	.word	0x08017215

08012ce4 <__hi0bits>:
 8012ce4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012ce8:	4603      	mov	r3, r0
 8012cea:	bf36      	itet	cc
 8012cec:	0403      	lslcc	r3, r0, #16
 8012cee:	2000      	movcs	r0, #0
 8012cf0:	2010      	movcc	r0, #16
 8012cf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012cf6:	bf3c      	itt	cc
 8012cf8:	021b      	lslcc	r3, r3, #8
 8012cfa:	3008      	addcc	r0, #8
 8012cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012d00:	bf3c      	itt	cc
 8012d02:	011b      	lslcc	r3, r3, #4
 8012d04:	3004      	addcc	r0, #4
 8012d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012d0a:	bf3c      	itt	cc
 8012d0c:	009b      	lslcc	r3, r3, #2
 8012d0e:	3002      	addcc	r0, #2
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	db05      	blt.n	8012d20 <__hi0bits+0x3c>
 8012d14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012d18:	f100 0001 	add.w	r0, r0, #1
 8012d1c:	bf08      	it	eq
 8012d1e:	2020      	moveq	r0, #32
 8012d20:	4770      	bx	lr

08012d22 <__lo0bits>:
 8012d22:	6803      	ldr	r3, [r0, #0]
 8012d24:	4602      	mov	r2, r0
 8012d26:	f013 0007 	ands.w	r0, r3, #7
 8012d2a:	d00b      	beq.n	8012d44 <__lo0bits+0x22>
 8012d2c:	07d9      	lsls	r1, r3, #31
 8012d2e:	d421      	bmi.n	8012d74 <__lo0bits+0x52>
 8012d30:	0798      	lsls	r0, r3, #30
 8012d32:	bf49      	itett	mi
 8012d34:	085b      	lsrmi	r3, r3, #1
 8012d36:	089b      	lsrpl	r3, r3, #2
 8012d38:	2001      	movmi	r0, #1
 8012d3a:	6013      	strmi	r3, [r2, #0]
 8012d3c:	bf5c      	itt	pl
 8012d3e:	6013      	strpl	r3, [r2, #0]
 8012d40:	2002      	movpl	r0, #2
 8012d42:	4770      	bx	lr
 8012d44:	b299      	uxth	r1, r3
 8012d46:	b909      	cbnz	r1, 8012d4c <__lo0bits+0x2a>
 8012d48:	0c1b      	lsrs	r3, r3, #16
 8012d4a:	2010      	movs	r0, #16
 8012d4c:	b2d9      	uxtb	r1, r3
 8012d4e:	b909      	cbnz	r1, 8012d54 <__lo0bits+0x32>
 8012d50:	3008      	adds	r0, #8
 8012d52:	0a1b      	lsrs	r3, r3, #8
 8012d54:	0719      	lsls	r1, r3, #28
 8012d56:	bf04      	itt	eq
 8012d58:	091b      	lsreq	r3, r3, #4
 8012d5a:	3004      	addeq	r0, #4
 8012d5c:	0799      	lsls	r1, r3, #30
 8012d5e:	bf04      	itt	eq
 8012d60:	089b      	lsreq	r3, r3, #2
 8012d62:	3002      	addeq	r0, #2
 8012d64:	07d9      	lsls	r1, r3, #31
 8012d66:	d403      	bmi.n	8012d70 <__lo0bits+0x4e>
 8012d68:	085b      	lsrs	r3, r3, #1
 8012d6a:	f100 0001 	add.w	r0, r0, #1
 8012d6e:	d003      	beq.n	8012d78 <__lo0bits+0x56>
 8012d70:	6013      	str	r3, [r2, #0]
 8012d72:	4770      	bx	lr
 8012d74:	2000      	movs	r0, #0
 8012d76:	4770      	bx	lr
 8012d78:	2020      	movs	r0, #32
 8012d7a:	4770      	bx	lr

08012d7c <__i2b>:
 8012d7c:	b510      	push	{r4, lr}
 8012d7e:	460c      	mov	r4, r1
 8012d80:	2101      	movs	r1, #1
 8012d82:	f7ff febd 	bl	8012b00 <_Balloc>
 8012d86:	4602      	mov	r2, r0
 8012d88:	b928      	cbnz	r0, 8012d96 <__i2b+0x1a>
 8012d8a:	4b05      	ldr	r3, [pc, #20]	@ (8012da0 <__i2b+0x24>)
 8012d8c:	4805      	ldr	r0, [pc, #20]	@ (8012da4 <__i2b+0x28>)
 8012d8e:	f240 1145 	movw	r1, #325	@ 0x145
 8012d92:	f7fe fbff 	bl	8011594 <__assert_func>
 8012d96:	2301      	movs	r3, #1
 8012d98:	6144      	str	r4, [r0, #20]
 8012d9a:	6103      	str	r3, [r0, #16]
 8012d9c:	bd10      	pop	{r4, pc}
 8012d9e:	bf00      	nop
 8012da0:	080171a4 	.word	0x080171a4
 8012da4:	08017215 	.word	0x08017215

08012da8 <__multiply>:
 8012da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dac:	4614      	mov	r4, r2
 8012dae:	690a      	ldr	r2, [r1, #16]
 8012db0:	6923      	ldr	r3, [r4, #16]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	bfa8      	it	ge
 8012db6:	4623      	movge	r3, r4
 8012db8:	460f      	mov	r7, r1
 8012dba:	bfa4      	itt	ge
 8012dbc:	460c      	movge	r4, r1
 8012dbe:	461f      	movge	r7, r3
 8012dc0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012dc4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012dc8:	68a3      	ldr	r3, [r4, #8]
 8012dca:	6861      	ldr	r1, [r4, #4]
 8012dcc:	eb0a 0609 	add.w	r6, sl, r9
 8012dd0:	42b3      	cmp	r3, r6
 8012dd2:	b085      	sub	sp, #20
 8012dd4:	bfb8      	it	lt
 8012dd6:	3101      	addlt	r1, #1
 8012dd8:	f7ff fe92 	bl	8012b00 <_Balloc>
 8012ddc:	b930      	cbnz	r0, 8012dec <__multiply+0x44>
 8012dde:	4602      	mov	r2, r0
 8012de0:	4b44      	ldr	r3, [pc, #272]	@ (8012ef4 <__multiply+0x14c>)
 8012de2:	4845      	ldr	r0, [pc, #276]	@ (8012ef8 <__multiply+0x150>)
 8012de4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012de8:	f7fe fbd4 	bl	8011594 <__assert_func>
 8012dec:	f100 0514 	add.w	r5, r0, #20
 8012df0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012df4:	462b      	mov	r3, r5
 8012df6:	2200      	movs	r2, #0
 8012df8:	4543      	cmp	r3, r8
 8012dfa:	d321      	bcc.n	8012e40 <__multiply+0x98>
 8012dfc:	f107 0114 	add.w	r1, r7, #20
 8012e00:	f104 0214 	add.w	r2, r4, #20
 8012e04:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012e08:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012e0c:	9302      	str	r3, [sp, #8]
 8012e0e:	1b13      	subs	r3, r2, r4
 8012e10:	3b15      	subs	r3, #21
 8012e12:	f023 0303 	bic.w	r3, r3, #3
 8012e16:	3304      	adds	r3, #4
 8012e18:	f104 0715 	add.w	r7, r4, #21
 8012e1c:	42ba      	cmp	r2, r7
 8012e1e:	bf38      	it	cc
 8012e20:	2304      	movcc	r3, #4
 8012e22:	9301      	str	r3, [sp, #4]
 8012e24:	9b02      	ldr	r3, [sp, #8]
 8012e26:	9103      	str	r1, [sp, #12]
 8012e28:	428b      	cmp	r3, r1
 8012e2a:	d80c      	bhi.n	8012e46 <__multiply+0x9e>
 8012e2c:	2e00      	cmp	r6, #0
 8012e2e:	dd03      	ble.n	8012e38 <__multiply+0x90>
 8012e30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d05b      	beq.n	8012ef0 <__multiply+0x148>
 8012e38:	6106      	str	r6, [r0, #16]
 8012e3a:	b005      	add	sp, #20
 8012e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e40:	f843 2b04 	str.w	r2, [r3], #4
 8012e44:	e7d8      	b.n	8012df8 <__multiply+0x50>
 8012e46:	f8b1 a000 	ldrh.w	sl, [r1]
 8012e4a:	f1ba 0f00 	cmp.w	sl, #0
 8012e4e:	d024      	beq.n	8012e9a <__multiply+0xf2>
 8012e50:	f104 0e14 	add.w	lr, r4, #20
 8012e54:	46a9      	mov	r9, r5
 8012e56:	f04f 0c00 	mov.w	ip, #0
 8012e5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012e5e:	f8d9 3000 	ldr.w	r3, [r9]
 8012e62:	fa1f fb87 	uxth.w	fp, r7
 8012e66:	b29b      	uxth	r3, r3
 8012e68:	fb0a 330b 	mla	r3, sl, fp, r3
 8012e6c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012e70:	f8d9 7000 	ldr.w	r7, [r9]
 8012e74:	4463      	add	r3, ip
 8012e76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012e7a:	fb0a c70b 	mla	r7, sl, fp, ip
 8012e7e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012e88:	4572      	cmp	r2, lr
 8012e8a:	f849 3b04 	str.w	r3, [r9], #4
 8012e8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012e92:	d8e2      	bhi.n	8012e5a <__multiply+0xb2>
 8012e94:	9b01      	ldr	r3, [sp, #4]
 8012e96:	f845 c003 	str.w	ip, [r5, r3]
 8012e9a:	9b03      	ldr	r3, [sp, #12]
 8012e9c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012ea0:	3104      	adds	r1, #4
 8012ea2:	f1b9 0f00 	cmp.w	r9, #0
 8012ea6:	d021      	beq.n	8012eec <__multiply+0x144>
 8012ea8:	682b      	ldr	r3, [r5, #0]
 8012eaa:	f104 0c14 	add.w	ip, r4, #20
 8012eae:	46ae      	mov	lr, r5
 8012eb0:	f04f 0a00 	mov.w	sl, #0
 8012eb4:	f8bc b000 	ldrh.w	fp, [ip]
 8012eb8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012ebc:	fb09 770b 	mla	r7, r9, fp, r7
 8012ec0:	4457      	add	r7, sl
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012ec8:	f84e 3b04 	str.w	r3, [lr], #4
 8012ecc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012ed0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012ed4:	f8be 3000 	ldrh.w	r3, [lr]
 8012ed8:	fb09 330a 	mla	r3, r9, sl, r3
 8012edc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012ee0:	4562      	cmp	r2, ip
 8012ee2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012ee6:	d8e5      	bhi.n	8012eb4 <__multiply+0x10c>
 8012ee8:	9f01      	ldr	r7, [sp, #4]
 8012eea:	51eb      	str	r3, [r5, r7]
 8012eec:	3504      	adds	r5, #4
 8012eee:	e799      	b.n	8012e24 <__multiply+0x7c>
 8012ef0:	3e01      	subs	r6, #1
 8012ef2:	e79b      	b.n	8012e2c <__multiply+0x84>
 8012ef4:	080171a4 	.word	0x080171a4
 8012ef8:	08017215 	.word	0x08017215

08012efc <__pow5mult>:
 8012efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f00:	4615      	mov	r5, r2
 8012f02:	f012 0203 	ands.w	r2, r2, #3
 8012f06:	4607      	mov	r7, r0
 8012f08:	460e      	mov	r6, r1
 8012f0a:	d007      	beq.n	8012f1c <__pow5mult+0x20>
 8012f0c:	4c25      	ldr	r4, [pc, #148]	@ (8012fa4 <__pow5mult+0xa8>)
 8012f0e:	3a01      	subs	r2, #1
 8012f10:	2300      	movs	r3, #0
 8012f12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012f16:	f7ff fe55 	bl	8012bc4 <__multadd>
 8012f1a:	4606      	mov	r6, r0
 8012f1c:	10ad      	asrs	r5, r5, #2
 8012f1e:	d03d      	beq.n	8012f9c <__pow5mult+0xa0>
 8012f20:	69fc      	ldr	r4, [r7, #28]
 8012f22:	b97c      	cbnz	r4, 8012f44 <__pow5mult+0x48>
 8012f24:	2010      	movs	r0, #16
 8012f26:	f7ff fd23 	bl	8012970 <malloc>
 8012f2a:	4602      	mov	r2, r0
 8012f2c:	61f8      	str	r0, [r7, #28]
 8012f2e:	b928      	cbnz	r0, 8012f3c <__pow5mult+0x40>
 8012f30:	4b1d      	ldr	r3, [pc, #116]	@ (8012fa8 <__pow5mult+0xac>)
 8012f32:	481e      	ldr	r0, [pc, #120]	@ (8012fac <__pow5mult+0xb0>)
 8012f34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012f38:	f7fe fb2c 	bl	8011594 <__assert_func>
 8012f3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012f40:	6004      	str	r4, [r0, #0]
 8012f42:	60c4      	str	r4, [r0, #12]
 8012f44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012f48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012f4c:	b94c      	cbnz	r4, 8012f62 <__pow5mult+0x66>
 8012f4e:	f240 2171 	movw	r1, #625	@ 0x271
 8012f52:	4638      	mov	r0, r7
 8012f54:	f7ff ff12 	bl	8012d7c <__i2b>
 8012f58:	2300      	movs	r3, #0
 8012f5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012f5e:	4604      	mov	r4, r0
 8012f60:	6003      	str	r3, [r0, #0]
 8012f62:	f04f 0900 	mov.w	r9, #0
 8012f66:	07eb      	lsls	r3, r5, #31
 8012f68:	d50a      	bpl.n	8012f80 <__pow5mult+0x84>
 8012f6a:	4631      	mov	r1, r6
 8012f6c:	4622      	mov	r2, r4
 8012f6e:	4638      	mov	r0, r7
 8012f70:	f7ff ff1a 	bl	8012da8 <__multiply>
 8012f74:	4631      	mov	r1, r6
 8012f76:	4680      	mov	r8, r0
 8012f78:	4638      	mov	r0, r7
 8012f7a:	f7ff fe01 	bl	8012b80 <_Bfree>
 8012f7e:	4646      	mov	r6, r8
 8012f80:	106d      	asrs	r5, r5, #1
 8012f82:	d00b      	beq.n	8012f9c <__pow5mult+0xa0>
 8012f84:	6820      	ldr	r0, [r4, #0]
 8012f86:	b938      	cbnz	r0, 8012f98 <__pow5mult+0x9c>
 8012f88:	4622      	mov	r2, r4
 8012f8a:	4621      	mov	r1, r4
 8012f8c:	4638      	mov	r0, r7
 8012f8e:	f7ff ff0b 	bl	8012da8 <__multiply>
 8012f92:	6020      	str	r0, [r4, #0]
 8012f94:	f8c0 9000 	str.w	r9, [r0]
 8012f98:	4604      	mov	r4, r0
 8012f9a:	e7e4      	b.n	8012f66 <__pow5mult+0x6a>
 8012f9c:	4630      	mov	r0, r6
 8012f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fa2:	bf00      	nop
 8012fa4:	08017270 	.word	0x08017270
 8012fa8:	0801708a 	.word	0x0801708a
 8012fac:	08017215 	.word	0x08017215

08012fb0 <__lshift>:
 8012fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fb4:	460c      	mov	r4, r1
 8012fb6:	6849      	ldr	r1, [r1, #4]
 8012fb8:	6923      	ldr	r3, [r4, #16]
 8012fba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012fbe:	68a3      	ldr	r3, [r4, #8]
 8012fc0:	4607      	mov	r7, r0
 8012fc2:	4691      	mov	r9, r2
 8012fc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012fc8:	f108 0601 	add.w	r6, r8, #1
 8012fcc:	42b3      	cmp	r3, r6
 8012fce:	db0b      	blt.n	8012fe8 <__lshift+0x38>
 8012fd0:	4638      	mov	r0, r7
 8012fd2:	f7ff fd95 	bl	8012b00 <_Balloc>
 8012fd6:	4605      	mov	r5, r0
 8012fd8:	b948      	cbnz	r0, 8012fee <__lshift+0x3e>
 8012fda:	4602      	mov	r2, r0
 8012fdc:	4b28      	ldr	r3, [pc, #160]	@ (8013080 <__lshift+0xd0>)
 8012fde:	4829      	ldr	r0, [pc, #164]	@ (8013084 <__lshift+0xd4>)
 8012fe0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012fe4:	f7fe fad6 	bl	8011594 <__assert_func>
 8012fe8:	3101      	adds	r1, #1
 8012fea:	005b      	lsls	r3, r3, #1
 8012fec:	e7ee      	b.n	8012fcc <__lshift+0x1c>
 8012fee:	2300      	movs	r3, #0
 8012ff0:	f100 0114 	add.w	r1, r0, #20
 8012ff4:	f100 0210 	add.w	r2, r0, #16
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	4553      	cmp	r3, sl
 8012ffc:	db33      	blt.n	8013066 <__lshift+0xb6>
 8012ffe:	6920      	ldr	r0, [r4, #16]
 8013000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013004:	f104 0314 	add.w	r3, r4, #20
 8013008:	f019 091f 	ands.w	r9, r9, #31
 801300c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013010:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013014:	d02b      	beq.n	801306e <__lshift+0xbe>
 8013016:	f1c9 0e20 	rsb	lr, r9, #32
 801301a:	468a      	mov	sl, r1
 801301c:	2200      	movs	r2, #0
 801301e:	6818      	ldr	r0, [r3, #0]
 8013020:	fa00 f009 	lsl.w	r0, r0, r9
 8013024:	4310      	orrs	r0, r2
 8013026:	f84a 0b04 	str.w	r0, [sl], #4
 801302a:	f853 2b04 	ldr.w	r2, [r3], #4
 801302e:	459c      	cmp	ip, r3
 8013030:	fa22 f20e 	lsr.w	r2, r2, lr
 8013034:	d8f3      	bhi.n	801301e <__lshift+0x6e>
 8013036:	ebac 0304 	sub.w	r3, ip, r4
 801303a:	3b15      	subs	r3, #21
 801303c:	f023 0303 	bic.w	r3, r3, #3
 8013040:	3304      	adds	r3, #4
 8013042:	f104 0015 	add.w	r0, r4, #21
 8013046:	4584      	cmp	ip, r0
 8013048:	bf38      	it	cc
 801304a:	2304      	movcc	r3, #4
 801304c:	50ca      	str	r2, [r1, r3]
 801304e:	b10a      	cbz	r2, 8013054 <__lshift+0xa4>
 8013050:	f108 0602 	add.w	r6, r8, #2
 8013054:	3e01      	subs	r6, #1
 8013056:	4638      	mov	r0, r7
 8013058:	612e      	str	r6, [r5, #16]
 801305a:	4621      	mov	r1, r4
 801305c:	f7ff fd90 	bl	8012b80 <_Bfree>
 8013060:	4628      	mov	r0, r5
 8013062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013066:	f842 0f04 	str.w	r0, [r2, #4]!
 801306a:	3301      	adds	r3, #1
 801306c:	e7c5      	b.n	8012ffa <__lshift+0x4a>
 801306e:	3904      	subs	r1, #4
 8013070:	f853 2b04 	ldr.w	r2, [r3], #4
 8013074:	f841 2f04 	str.w	r2, [r1, #4]!
 8013078:	459c      	cmp	ip, r3
 801307a:	d8f9      	bhi.n	8013070 <__lshift+0xc0>
 801307c:	e7ea      	b.n	8013054 <__lshift+0xa4>
 801307e:	bf00      	nop
 8013080:	080171a4 	.word	0x080171a4
 8013084:	08017215 	.word	0x08017215

08013088 <__mcmp>:
 8013088:	690a      	ldr	r2, [r1, #16]
 801308a:	4603      	mov	r3, r0
 801308c:	6900      	ldr	r0, [r0, #16]
 801308e:	1a80      	subs	r0, r0, r2
 8013090:	b530      	push	{r4, r5, lr}
 8013092:	d10e      	bne.n	80130b2 <__mcmp+0x2a>
 8013094:	3314      	adds	r3, #20
 8013096:	3114      	adds	r1, #20
 8013098:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801309c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80130a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80130a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80130a8:	4295      	cmp	r5, r2
 80130aa:	d003      	beq.n	80130b4 <__mcmp+0x2c>
 80130ac:	d205      	bcs.n	80130ba <__mcmp+0x32>
 80130ae:	f04f 30ff 	mov.w	r0, #4294967295
 80130b2:	bd30      	pop	{r4, r5, pc}
 80130b4:	42a3      	cmp	r3, r4
 80130b6:	d3f3      	bcc.n	80130a0 <__mcmp+0x18>
 80130b8:	e7fb      	b.n	80130b2 <__mcmp+0x2a>
 80130ba:	2001      	movs	r0, #1
 80130bc:	e7f9      	b.n	80130b2 <__mcmp+0x2a>
	...

080130c0 <__mdiff>:
 80130c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c4:	4689      	mov	r9, r1
 80130c6:	4606      	mov	r6, r0
 80130c8:	4611      	mov	r1, r2
 80130ca:	4648      	mov	r0, r9
 80130cc:	4614      	mov	r4, r2
 80130ce:	f7ff ffdb 	bl	8013088 <__mcmp>
 80130d2:	1e05      	subs	r5, r0, #0
 80130d4:	d112      	bne.n	80130fc <__mdiff+0x3c>
 80130d6:	4629      	mov	r1, r5
 80130d8:	4630      	mov	r0, r6
 80130da:	f7ff fd11 	bl	8012b00 <_Balloc>
 80130de:	4602      	mov	r2, r0
 80130e0:	b928      	cbnz	r0, 80130ee <__mdiff+0x2e>
 80130e2:	4b3f      	ldr	r3, [pc, #252]	@ (80131e0 <__mdiff+0x120>)
 80130e4:	f240 2137 	movw	r1, #567	@ 0x237
 80130e8:	483e      	ldr	r0, [pc, #248]	@ (80131e4 <__mdiff+0x124>)
 80130ea:	f7fe fa53 	bl	8011594 <__assert_func>
 80130ee:	2301      	movs	r3, #1
 80130f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80130f4:	4610      	mov	r0, r2
 80130f6:	b003      	add	sp, #12
 80130f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fc:	bfbc      	itt	lt
 80130fe:	464b      	movlt	r3, r9
 8013100:	46a1      	movlt	r9, r4
 8013102:	4630      	mov	r0, r6
 8013104:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013108:	bfba      	itte	lt
 801310a:	461c      	movlt	r4, r3
 801310c:	2501      	movlt	r5, #1
 801310e:	2500      	movge	r5, #0
 8013110:	f7ff fcf6 	bl	8012b00 <_Balloc>
 8013114:	4602      	mov	r2, r0
 8013116:	b918      	cbnz	r0, 8013120 <__mdiff+0x60>
 8013118:	4b31      	ldr	r3, [pc, #196]	@ (80131e0 <__mdiff+0x120>)
 801311a:	f240 2145 	movw	r1, #581	@ 0x245
 801311e:	e7e3      	b.n	80130e8 <__mdiff+0x28>
 8013120:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013124:	6926      	ldr	r6, [r4, #16]
 8013126:	60c5      	str	r5, [r0, #12]
 8013128:	f109 0310 	add.w	r3, r9, #16
 801312c:	f109 0514 	add.w	r5, r9, #20
 8013130:	f104 0e14 	add.w	lr, r4, #20
 8013134:	f100 0b14 	add.w	fp, r0, #20
 8013138:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801313c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013140:	9301      	str	r3, [sp, #4]
 8013142:	46d9      	mov	r9, fp
 8013144:	f04f 0c00 	mov.w	ip, #0
 8013148:	9b01      	ldr	r3, [sp, #4]
 801314a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801314e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013152:	9301      	str	r3, [sp, #4]
 8013154:	fa1f f38a 	uxth.w	r3, sl
 8013158:	4619      	mov	r1, r3
 801315a:	b283      	uxth	r3, r0
 801315c:	1acb      	subs	r3, r1, r3
 801315e:	0c00      	lsrs	r0, r0, #16
 8013160:	4463      	add	r3, ip
 8013162:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013166:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801316a:	b29b      	uxth	r3, r3
 801316c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013170:	4576      	cmp	r6, lr
 8013172:	f849 3b04 	str.w	r3, [r9], #4
 8013176:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801317a:	d8e5      	bhi.n	8013148 <__mdiff+0x88>
 801317c:	1b33      	subs	r3, r6, r4
 801317e:	3b15      	subs	r3, #21
 8013180:	f023 0303 	bic.w	r3, r3, #3
 8013184:	3415      	adds	r4, #21
 8013186:	3304      	adds	r3, #4
 8013188:	42a6      	cmp	r6, r4
 801318a:	bf38      	it	cc
 801318c:	2304      	movcc	r3, #4
 801318e:	441d      	add	r5, r3
 8013190:	445b      	add	r3, fp
 8013192:	461e      	mov	r6, r3
 8013194:	462c      	mov	r4, r5
 8013196:	4544      	cmp	r4, r8
 8013198:	d30e      	bcc.n	80131b8 <__mdiff+0xf8>
 801319a:	f108 0103 	add.w	r1, r8, #3
 801319e:	1b49      	subs	r1, r1, r5
 80131a0:	f021 0103 	bic.w	r1, r1, #3
 80131a4:	3d03      	subs	r5, #3
 80131a6:	45a8      	cmp	r8, r5
 80131a8:	bf38      	it	cc
 80131aa:	2100      	movcc	r1, #0
 80131ac:	440b      	add	r3, r1
 80131ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80131b2:	b191      	cbz	r1, 80131da <__mdiff+0x11a>
 80131b4:	6117      	str	r7, [r2, #16]
 80131b6:	e79d      	b.n	80130f4 <__mdiff+0x34>
 80131b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80131bc:	46e6      	mov	lr, ip
 80131be:	0c08      	lsrs	r0, r1, #16
 80131c0:	fa1c fc81 	uxtah	ip, ip, r1
 80131c4:	4471      	add	r1, lr
 80131c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80131ca:	b289      	uxth	r1, r1
 80131cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80131d0:	f846 1b04 	str.w	r1, [r6], #4
 80131d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80131d8:	e7dd      	b.n	8013196 <__mdiff+0xd6>
 80131da:	3f01      	subs	r7, #1
 80131dc:	e7e7      	b.n	80131ae <__mdiff+0xee>
 80131de:	bf00      	nop
 80131e0:	080171a4 	.word	0x080171a4
 80131e4:	08017215 	.word	0x08017215

080131e8 <__ulp>:
 80131e8:	b082      	sub	sp, #8
 80131ea:	ed8d 0b00 	vstr	d0, [sp]
 80131ee:	9a01      	ldr	r2, [sp, #4]
 80131f0:	4b0f      	ldr	r3, [pc, #60]	@ (8013230 <__ulp+0x48>)
 80131f2:	4013      	ands	r3, r2
 80131f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	dc08      	bgt.n	801320e <__ulp+0x26>
 80131fc:	425b      	negs	r3, r3
 80131fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013202:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013206:	da04      	bge.n	8013212 <__ulp+0x2a>
 8013208:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801320c:	4113      	asrs	r3, r2
 801320e:	2200      	movs	r2, #0
 8013210:	e008      	b.n	8013224 <__ulp+0x3c>
 8013212:	f1a2 0314 	sub.w	r3, r2, #20
 8013216:	2b1e      	cmp	r3, #30
 8013218:	bfda      	itte	le
 801321a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801321e:	40da      	lsrle	r2, r3
 8013220:	2201      	movgt	r2, #1
 8013222:	2300      	movs	r3, #0
 8013224:	4619      	mov	r1, r3
 8013226:	4610      	mov	r0, r2
 8013228:	ec41 0b10 	vmov	d0, r0, r1
 801322c:	b002      	add	sp, #8
 801322e:	4770      	bx	lr
 8013230:	7ff00000 	.word	0x7ff00000

08013234 <__b2d>:
 8013234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013238:	6906      	ldr	r6, [r0, #16]
 801323a:	f100 0814 	add.w	r8, r0, #20
 801323e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013242:	1f37      	subs	r7, r6, #4
 8013244:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013248:	4610      	mov	r0, r2
 801324a:	f7ff fd4b 	bl	8012ce4 <__hi0bits>
 801324e:	f1c0 0320 	rsb	r3, r0, #32
 8013252:	280a      	cmp	r0, #10
 8013254:	600b      	str	r3, [r1, #0]
 8013256:	491b      	ldr	r1, [pc, #108]	@ (80132c4 <__b2d+0x90>)
 8013258:	dc15      	bgt.n	8013286 <__b2d+0x52>
 801325a:	f1c0 0c0b 	rsb	ip, r0, #11
 801325e:	fa22 f30c 	lsr.w	r3, r2, ip
 8013262:	45b8      	cmp	r8, r7
 8013264:	ea43 0501 	orr.w	r5, r3, r1
 8013268:	bf34      	ite	cc
 801326a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801326e:	2300      	movcs	r3, #0
 8013270:	3015      	adds	r0, #21
 8013272:	fa02 f000 	lsl.w	r0, r2, r0
 8013276:	fa23 f30c 	lsr.w	r3, r3, ip
 801327a:	4303      	orrs	r3, r0
 801327c:	461c      	mov	r4, r3
 801327e:	ec45 4b10 	vmov	d0, r4, r5
 8013282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013286:	45b8      	cmp	r8, r7
 8013288:	bf3a      	itte	cc
 801328a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801328e:	f1a6 0708 	subcc.w	r7, r6, #8
 8013292:	2300      	movcs	r3, #0
 8013294:	380b      	subs	r0, #11
 8013296:	d012      	beq.n	80132be <__b2d+0x8a>
 8013298:	f1c0 0120 	rsb	r1, r0, #32
 801329c:	fa23 f401 	lsr.w	r4, r3, r1
 80132a0:	4082      	lsls	r2, r0
 80132a2:	4322      	orrs	r2, r4
 80132a4:	4547      	cmp	r7, r8
 80132a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80132aa:	bf8c      	ite	hi
 80132ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80132b0:	2200      	movls	r2, #0
 80132b2:	4083      	lsls	r3, r0
 80132b4:	40ca      	lsrs	r2, r1
 80132b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80132ba:	4313      	orrs	r3, r2
 80132bc:	e7de      	b.n	801327c <__b2d+0x48>
 80132be:	ea42 0501 	orr.w	r5, r2, r1
 80132c2:	e7db      	b.n	801327c <__b2d+0x48>
 80132c4:	3ff00000 	.word	0x3ff00000

080132c8 <__d2b>:
 80132c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80132cc:	460f      	mov	r7, r1
 80132ce:	2101      	movs	r1, #1
 80132d0:	ec59 8b10 	vmov	r8, r9, d0
 80132d4:	4616      	mov	r6, r2
 80132d6:	f7ff fc13 	bl	8012b00 <_Balloc>
 80132da:	4604      	mov	r4, r0
 80132dc:	b930      	cbnz	r0, 80132ec <__d2b+0x24>
 80132de:	4602      	mov	r2, r0
 80132e0:	4b23      	ldr	r3, [pc, #140]	@ (8013370 <__d2b+0xa8>)
 80132e2:	4824      	ldr	r0, [pc, #144]	@ (8013374 <__d2b+0xac>)
 80132e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80132e8:	f7fe f954 	bl	8011594 <__assert_func>
 80132ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80132f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80132f4:	b10d      	cbz	r5, 80132fa <__d2b+0x32>
 80132f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80132fa:	9301      	str	r3, [sp, #4]
 80132fc:	f1b8 0300 	subs.w	r3, r8, #0
 8013300:	d023      	beq.n	801334a <__d2b+0x82>
 8013302:	4668      	mov	r0, sp
 8013304:	9300      	str	r3, [sp, #0]
 8013306:	f7ff fd0c 	bl	8012d22 <__lo0bits>
 801330a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801330e:	b1d0      	cbz	r0, 8013346 <__d2b+0x7e>
 8013310:	f1c0 0320 	rsb	r3, r0, #32
 8013314:	fa02 f303 	lsl.w	r3, r2, r3
 8013318:	430b      	orrs	r3, r1
 801331a:	40c2      	lsrs	r2, r0
 801331c:	6163      	str	r3, [r4, #20]
 801331e:	9201      	str	r2, [sp, #4]
 8013320:	9b01      	ldr	r3, [sp, #4]
 8013322:	61a3      	str	r3, [r4, #24]
 8013324:	2b00      	cmp	r3, #0
 8013326:	bf0c      	ite	eq
 8013328:	2201      	moveq	r2, #1
 801332a:	2202      	movne	r2, #2
 801332c:	6122      	str	r2, [r4, #16]
 801332e:	b1a5      	cbz	r5, 801335a <__d2b+0x92>
 8013330:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013334:	4405      	add	r5, r0
 8013336:	603d      	str	r5, [r7, #0]
 8013338:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801333c:	6030      	str	r0, [r6, #0]
 801333e:	4620      	mov	r0, r4
 8013340:	b003      	add	sp, #12
 8013342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013346:	6161      	str	r1, [r4, #20]
 8013348:	e7ea      	b.n	8013320 <__d2b+0x58>
 801334a:	a801      	add	r0, sp, #4
 801334c:	f7ff fce9 	bl	8012d22 <__lo0bits>
 8013350:	9b01      	ldr	r3, [sp, #4]
 8013352:	6163      	str	r3, [r4, #20]
 8013354:	3020      	adds	r0, #32
 8013356:	2201      	movs	r2, #1
 8013358:	e7e8      	b.n	801332c <__d2b+0x64>
 801335a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801335e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013362:	6038      	str	r0, [r7, #0]
 8013364:	6918      	ldr	r0, [r3, #16]
 8013366:	f7ff fcbd 	bl	8012ce4 <__hi0bits>
 801336a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801336e:	e7e5      	b.n	801333c <__d2b+0x74>
 8013370:	080171a4 	.word	0x080171a4
 8013374:	08017215 	.word	0x08017215

08013378 <__ratio>:
 8013378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801337c:	b085      	sub	sp, #20
 801337e:	e9cd 1000 	strd	r1, r0, [sp]
 8013382:	a902      	add	r1, sp, #8
 8013384:	f7ff ff56 	bl	8013234 <__b2d>
 8013388:	9800      	ldr	r0, [sp, #0]
 801338a:	a903      	add	r1, sp, #12
 801338c:	ec55 4b10 	vmov	r4, r5, d0
 8013390:	f7ff ff50 	bl	8013234 <__b2d>
 8013394:	9b01      	ldr	r3, [sp, #4]
 8013396:	6919      	ldr	r1, [r3, #16]
 8013398:	9b00      	ldr	r3, [sp, #0]
 801339a:	691b      	ldr	r3, [r3, #16]
 801339c:	1ac9      	subs	r1, r1, r3
 801339e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80133a2:	1a9b      	subs	r3, r3, r2
 80133a4:	ec5b ab10 	vmov	sl, fp, d0
 80133a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	bfce      	itee	gt
 80133b0:	462a      	movgt	r2, r5
 80133b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80133b6:	465a      	movle	r2, fp
 80133b8:	462f      	mov	r7, r5
 80133ba:	46d9      	mov	r9, fp
 80133bc:	bfcc      	ite	gt
 80133be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80133c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80133c6:	464b      	mov	r3, r9
 80133c8:	4652      	mov	r2, sl
 80133ca:	4620      	mov	r0, r4
 80133cc:	4639      	mov	r1, r7
 80133ce:	f7ed fa4d 	bl	800086c <__aeabi_ddiv>
 80133d2:	ec41 0b10 	vmov	d0, r0, r1
 80133d6:	b005      	add	sp, #20
 80133d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080133dc <__copybits>:
 80133dc:	3901      	subs	r1, #1
 80133de:	b570      	push	{r4, r5, r6, lr}
 80133e0:	1149      	asrs	r1, r1, #5
 80133e2:	6914      	ldr	r4, [r2, #16]
 80133e4:	3101      	adds	r1, #1
 80133e6:	f102 0314 	add.w	r3, r2, #20
 80133ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80133ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80133f2:	1f05      	subs	r5, r0, #4
 80133f4:	42a3      	cmp	r3, r4
 80133f6:	d30c      	bcc.n	8013412 <__copybits+0x36>
 80133f8:	1aa3      	subs	r3, r4, r2
 80133fa:	3b11      	subs	r3, #17
 80133fc:	f023 0303 	bic.w	r3, r3, #3
 8013400:	3211      	adds	r2, #17
 8013402:	42a2      	cmp	r2, r4
 8013404:	bf88      	it	hi
 8013406:	2300      	movhi	r3, #0
 8013408:	4418      	add	r0, r3
 801340a:	2300      	movs	r3, #0
 801340c:	4288      	cmp	r0, r1
 801340e:	d305      	bcc.n	801341c <__copybits+0x40>
 8013410:	bd70      	pop	{r4, r5, r6, pc}
 8013412:	f853 6b04 	ldr.w	r6, [r3], #4
 8013416:	f845 6f04 	str.w	r6, [r5, #4]!
 801341a:	e7eb      	b.n	80133f4 <__copybits+0x18>
 801341c:	f840 3b04 	str.w	r3, [r0], #4
 8013420:	e7f4      	b.n	801340c <__copybits+0x30>

08013422 <__any_on>:
 8013422:	f100 0214 	add.w	r2, r0, #20
 8013426:	6900      	ldr	r0, [r0, #16]
 8013428:	114b      	asrs	r3, r1, #5
 801342a:	4298      	cmp	r0, r3
 801342c:	b510      	push	{r4, lr}
 801342e:	db11      	blt.n	8013454 <__any_on+0x32>
 8013430:	dd0a      	ble.n	8013448 <__any_on+0x26>
 8013432:	f011 011f 	ands.w	r1, r1, #31
 8013436:	d007      	beq.n	8013448 <__any_on+0x26>
 8013438:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801343c:	fa24 f001 	lsr.w	r0, r4, r1
 8013440:	fa00 f101 	lsl.w	r1, r0, r1
 8013444:	428c      	cmp	r4, r1
 8013446:	d10b      	bne.n	8013460 <__any_on+0x3e>
 8013448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801344c:	4293      	cmp	r3, r2
 801344e:	d803      	bhi.n	8013458 <__any_on+0x36>
 8013450:	2000      	movs	r0, #0
 8013452:	bd10      	pop	{r4, pc}
 8013454:	4603      	mov	r3, r0
 8013456:	e7f7      	b.n	8013448 <__any_on+0x26>
 8013458:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801345c:	2900      	cmp	r1, #0
 801345e:	d0f5      	beq.n	801344c <__any_on+0x2a>
 8013460:	2001      	movs	r0, #1
 8013462:	e7f6      	b.n	8013452 <__any_on+0x30>

08013464 <__ascii_wctomb>:
 8013464:	4603      	mov	r3, r0
 8013466:	4608      	mov	r0, r1
 8013468:	b141      	cbz	r1, 801347c <__ascii_wctomb+0x18>
 801346a:	2aff      	cmp	r2, #255	@ 0xff
 801346c:	d904      	bls.n	8013478 <__ascii_wctomb+0x14>
 801346e:	228a      	movs	r2, #138	@ 0x8a
 8013470:	601a      	str	r2, [r3, #0]
 8013472:	f04f 30ff 	mov.w	r0, #4294967295
 8013476:	4770      	bx	lr
 8013478:	700a      	strb	r2, [r1, #0]
 801347a:	2001      	movs	r0, #1
 801347c:	4770      	bx	lr

0801347e <__ssputs_r>:
 801347e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013482:	688e      	ldr	r6, [r1, #8]
 8013484:	461f      	mov	r7, r3
 8013486:	42be      	cmp	r6, r7
 8013488:	680b      	ldr	r3, [r1, #0]
 801348a:	4682      	mov	sl, r0
 801348c:	460c      	mov	r4, r1
 801348e:	4690      	mov	r8, r2
 8013490:	d82d      	bhi.n	80134ee <__ssputs_r+0x70>
 8013492:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013496:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801349a:	d026      	beq.n	80134ea <__ssputs_r+0x6c>
 801349c:	6965      	ldr	r5, [r4, #20]
 801349e:	6909      	ldr	r1, [r1, #16]
 80134a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80134a4:	eba3 0901 	sub.w	r9, r3, r1
 80134a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80134ac:	1c7b      	adds	r3, r7, #1
 80134ae:	444b      	add	r3, r9
 80134b0:	106d      	asrs	r5, r5, #1
 80134b2:	429d      	cmp	r5, r3
 80134b4:	bf38      	it	cc
 80134b6:	461d      	movcc	r5, r3
 80134b8:	0553      	lsls	r3, r2, #21
 80134ba:	d527      	bpl.n	801350c <__ssputs_r+0x8e>
 80134bc:	4629      	mov	r1, r5
 80134be:	f7ff fa81 	bl	80129c4 <_malloc_r>
 80134c2:	4606      	mov	r6, r0
 80134c4:	b360      	cbz	r0, 8013520 <__ssputs_r+0xa2>
 80134c6:	6921      	ldr	r1, [r4, #16]
 80134c8:	464a      	mov	r2, r9
 80134ca:	f7fe f846 	bl	801155a <memcpy>
 80134ce:	89a3      	ldrh	r3, [r4, #12]
 80134d0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80134d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134d8:	81a3      	strh	r3, [r4, #12]
 80134da:	6126      	str	r6, [r4, #16]
 80134dc:	6165      	str	r5, [r4, #20]
 80134de:	444e      	add	r6, r9
 80134e0:	eba5 0509 	sub.w	r5, r5, r9
 80134e4:	6026      	str	r6, [r4, #0]
 80134e6:	60a5      	str	r5, [r4, #8]
 80134e8:	463e      	mov	r6, r7
 80134ea:	42be      	cmp	r6, r7
 80134ec:	d900      	bls.n	80134f0 <__ssputs_r+0x72>
 80134ee:	463e      	mov	r6, r7
 80134f0:	6820      	ldr	r0, [r4, #0]
 80134f2:	4632      	mov	r2, r6
 80134f4:	4641      	mov	r1, r8
 80134f6:	f000 f9d7 	bl	80138a8 <memmove>
 80134fa:	68a3      	ldr	r3, [r4, #8]
 80134fc:	1b9b      	subs	r3, r3, r6
 80134fe:	60a3      	str	r3, [r4, #8]
 8013500:	6823      	ldr	r3, [r4, #0]
 8013502:	4433      	add	r3, r6
 8013504:	6023      	str	r3, [r4, #0]
 8013506:	2000      	movs	r0, #0
 8013508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801350c:	462a      	mov	r2, r5
 801350e:	f000 fa10 	bl	8013932 <_realloc_r>
 8013512:	4606      	mov	r6, r0
 8013514:	2800      	cmp	r0, #0
 8013516:	d1e0      	bne.n	80134da <__ssputs_r+0x5c>
 8013518:	6921      	ldr	r1, [r4, #16]
 801351a:	4650      	mov	r0, sl
 801351c:	f7fe fea4 	bl	8012268 <_free_r>
 8013520:	230c      	movs	r3, #12
 8013522:	f8ca 3000 	str.w	r3, [sl]
 8013526:	89a3      	ldrh	r3, [r4, #12]
 8013528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801352c:	81a3      	strh	r3, [r4, #12]
 801352e:	f04f 30ff 	mov.w	r0, #4294967295
 8013532:	e7e9      	b.n	8013508 <__ssputs_r+0x8a>

08013534 <_svfiprintf_r>:
 8013534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013538:	4698      	mov	r8, r3
 801353a:	898b      	ldrh	r3, [r1, #12]
 801353c:	061b      	lsls	r3, r3, #24
 801353e:	b09d      	sub	sp, #116	@ 0x74
 8013540:	4607      	mov	r7, r0
 8013542:	460d      	mov	r5, r1
 8013544:	4614      	mov	r4, r2
 8013546:	d510      	bpl.n	801356a <_svfiprintf_r+0x36>
 8013548:	690b      	ldr	r3, [r1, #16]
 801354a:	b973      	cbnz	r3, 801356a <_svfiprintf_r+0x36>
 801354c:	2140      	movs	r1, #64	@ 0x40
 801354e:	f7ff fa39 	bl	80129c4 <_malloc_r>
 8013552:	6028      	str	r0, [r5, #0]
 8013554:	6128      	str	r0, [r5, #16]
 8013556:	b930      	cbnz	r0, 8013566 <_svfiprintf_r+0x32>
 8013558:	230c      	movs	r3, #12
 801355a:	603b      	str	r3, [r7, #0]
 801355c:	f04f 30ff 	mov.w	r0, #4294967295
 8013560:	b01d      	add	sp, #116	@ 0x74
 8013562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013566:	2340      	movs	r3, #64	@ 0x40
 8013568:	616b      	str	r3, [r5, #20]
 801356a:	2300      	movs	r3, #0
 801356c:	9309      	str	r3, [sp, #36]	@ 0x24
 801356e:	2320      	movs	r3, #32
 8013570:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013574:	f8cd 800c 	str.w	r8, [sp, #12]
 8013578:	2330      	movs	r3, #48	@ 0x30
 801357a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013718 <_svfiprintf_r+0x1e4>
 801357e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013582:	f04f 0901 	mov.w	r9, #1
 8013586:	4623      	mov	r3, r4
 8013588:	469a      	mov	sl, r3
 801358a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801358e:	b10a      	cbz	r2, 8013594 <_svfiprintf_r+0x60>
 8013590:	2a25      	cmp	r2, #37	@ 0x25
 8013592:	d1f9      	bne.n	8013588 <_svfiprintf_r+0x54>
 8013594:	ebba 0b04 	subs.w	fp, sl, r4
 8013598:	d00b      	beq.n	80135b2 <_svfiprintf_r+0x7e>
 801359a:	465b      	mov	r3, fp
 801359c:	4622      	mov	r2, r4
 801359e:	4629      	mov	r1, r5
 80135a0:	4638      	mov	r0, r7
 80135a2:	f7ff ff6c 	bl	801347e <__ssputs_r>
 80135a6:	3001      	adds	r0, #1
 80135a8:	f000 80a7 	beq.w	80136fa <_svfiprintf_r+0x1c6>
 80135ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135ae:	445a      	add	r2, fp
 80135b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80135b2:	f89a 3000 	ldrb.w	r3, [sl]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	f000 809f 	beq.w	80136fa <_svfiprintf_r+0x1c6>
 80135bc:	2300      	movs	r3, #0
 80135be:	f04f 32ff 	mov.w	r2, #4294967295
 80135c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135c6:	f10a 0a01 	add.w	sl, sl, #1
 80135ca:	9304      	str	r3, [sp, #16]
 80135cc:	9307      	str	r3, [sp, #28]
 80135ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80135d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80135d4:	4654      	mov	r4, sl
 80135d6:	2205      	movs	r2, #5
 80135d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135dc:	484e      	ldr	r0, [pc, #312]	@ (8013718 <_svfiprintf_r+0x1e4>)
 80135de:	f7ec fe07 	bl	80001f0 <memchr>
 80135e2:	9a04      	ldr	r2, [sp, #16]
 80135e4:	b9d8      	cbnz	r0, 801361e <_svfiprintf_r+0xea>
 80135e6:	06d0      	lsls	r0, r2, #27
 80135e8:	bf44      	itt	mi
 80135ea:	2320      	movmi	r3, #32
 80135ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135f0:	0711      	lsls	r1, r2, #28
 80135f2:	bf44      	itt	mi
 80135f4:	232b      	movmi	r3, #43	@ 0x2b
 80135f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135fa:	f89a 3000 	ldrb.w	r3, [sl]
 80135fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8013600:	d015      	beq.n	801362e <_svfiprintf_r+0xfa>
 8013602:	9a07      	ldr	r2, [sp, #28]
 8013604:	4654      	mov	r4, sl
 8013606:	2000      	movs	r0, #0
 8013608:	f04f 0c0a 	mov.w	ip, #10
 801360c:	4621      	mov	r1, r4
 801360e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013612:	3b30      	subs	r3, #48	@ 0x30
 8013614:	2b09      	cmp	r3, #9
 8013616:	d94b      	bls.n	80136b0 <_svfiprintf_r+0x17c>
 8013618:	b1b0      	cbz	r0, 8013648 <_svfiprintf_r+0x114>
 801361a:	9207      	str	r2, [sp, #28]
 801361c:	e014      	b.n	8013648 <_svfiprintf_r+0x114>
 801361e:	eba0 0308 	sub.w	r3, r0, r8
 8013622:	fa09 f303 	lsl.w	r3, r9, r3
 8013626:	4313      	orrs	r3, r2
 8013628:	9304      	str	r3, [sp, #16]
 801362a:	46a2      	mov	sl, r4
 801362c:	e7d2      	b.n	80135d4 <_svfiprintf_r+0xa0>
 801362e:	9b03      	ldr	r3, [sp, #12]
 8013630:	1d19      	adds	r1, r3, #4
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	9103      	str	r1, [sp, #12]
 8013636:	2b00      	cmp	r3, #0
 8013638:	bfbb      	ittet	lt
 801363a:	425b      	neglt	r3, r3
 801363c:	f042 0202 	orrlt.w	r2, r2, #2
 8013640:	9307      	strge	r3, [sp, #28]
 8013642:	9307      	strlt	r3, [sp, #28]
 8013644:	bfb8      	it	lt
 8013646:	9204      	strlt	r2, [sp, #16]
 8013648:	7823      	ldrb	r3, [r4, #0]
 801364a:	2b2e      	cmp	r3, #46	@ 0x2e
 801364c:	d10a      	bne.n	8013664 <_svfiprintf_r+0x130>
 801364e:	7863      	ldrb	r3, [r4, #1]
 8013650:	2b2a      	cmp	r3, #42	@ 0x2a
 8013652:	d132      	bne.n	80136ba <_svfiprintf_r+0x186>
 8013654:	9b03      	ldr	r3, [sp, #12]
 8013656:	1d1a      	adds	r2, r3, #4
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	9203      	str	r2, [sp, #12]
 801365c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013660:	3402      	adds	r4, #2
 8013662:	9305      	str	r3, [sp, #20]
 8013664:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013728 <_svfiprintf_r+0x1f4>
 8013668:	7821      	ldrb	r1, [r4, #0]
 801366a:	2203      	movs	r2, #3
 801366c:	4650      	mov	r0, sl
 801366e:	f7ec fdbf 	bl	80001f0 <memchr>
 8013672:	b138      	cbz	r0, 8013684 <_svfiprintf_r+0x150>
 8013674:	9b04      	ldr	r3, [sp, #16]
 8013676:	eba0 000a 	sub.w	r0, r0, sl
 801367a:	2240      	movs	r2, #64	@ 0x40
 801367c:	4082      	lsls	r2, r0
 801367e:	4313      	orrs	r3, r2
 8013680:	3401      	adds	r4, #1
 8013682:	9304      	str	r3, [sp, #16]
 8013684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013688:	4824      	ldr	r0, [pc, #144]	@ (801371c <_svfiprintf_r+0x1e8>)
 801368a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801368e:	2206      	movs	r2, #6
 8013690:	f7ec fdae 	bl	80001f0 <memchr>
 8013694:	2800      	cmp	r0, #0
 8013696:	d036      	beq.n	8013706 <_svfiprintf_r+0x1d2>
 8013698:	4b21      	ldr	r3, [pc, #132]	@ (8013720 <_svfiprintf_r+0x1ec>)
 801369a:	bb1b      	cbnz	r3, 80136e4 <_svfiprintf_r+0x1b0>
 801369c:	9b03      	ldr	r3, [sp, #12]
 801369e:	3307      	adds	r3, #7
 80136a0:	f023 0307 	bic.w	r3, r3, #7
 80136a4:	3308      	adds	r3, #8
 80136a6:	9303      	str	r3, [sp, #12]
 80136a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136aa:	4433      	add	r3, r6
 80136ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80136ae:	e76a      	b.n	8013586 <_svfiprintf_r+0x52>
 80136b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80136b4:	460c      	mov	r4, r1
 80136b6:	2001      	movs	r0, #1
 80136b8:	e7a8      	b.n	801360c <_svfiprintf_r+0xd8>
 80136ba:	2300      	movs	r3, #0
 80136bc:	3401      	adds	r4, #1
 80136be:	9305      	str	r3, [sp, #20]
 80136c0:	4619      	mov	r1, r3
 80136c2:	f04f 0c0a 	mov.w	ip, #10
 80136c6:	4620      	mov	r0, r4
 80136c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136cc:	3a30      	subs	r2, #48	@ 0x30
 80136ce:	2a09      	cmp	r2, #9
 80136d0:	d903      	bls.n	80136da <_svfiprintf_r+0x1a6>
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d0c6      	beq.n	8013664 <_svfiprintf_r+0x130>
 80136d6:	9105      	str	r1, [sp, #20]
 80136d8:	e7c4      	b.n	8013664 <_svfiprintf_r+0x130>
 80136da:	fb0c 2101 	mla	r1, ip, r1, r2
 80136de:	4604      	mov	r4, r0
 80136e0:	2301      	movs	r3, #1
 80136e2:	e7f0      	b.n	80136c6 <_svfiprintf_r+0x192>
 80136e4:	ab03      	add	r3, sp, #12
 80136e6:	9300      	str	r3, [sp, #0]
 80136e8:	462a      	mov	r2, r5
 80136ea:	4b0e      	ldr	r3, [pc, #56]	@ (8013724 <_svfiprintf_r+0x1f0>)
 80136ec:	a904      	add	r1, sp, #16
 80136ee:	4638      	mov	r0, r7
 80136f0:	f7fc ff3e 	bl	8010570 <_printf_float>
 80136f4:	1c42      	adds	r2, r0, #1
 80136f6:	4606      	mov	r6, r0
 80136f8:	d1d6      	bne.n	80136a8 <_svfiprintf_r+0x174>
 80136fa:	89ab      	ldrh	r3, [r5, #12]
 80136fc:	065b      	lsls	r3, r3, #25
 80136fe:	f53f af2d 	bmi.w	801355c <_svfiprintf_r+0x28>
 8013702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013704:	e72c      	b.n	8013560 <_svfiprintf_r+0x2c>
 8013706:	ab03      	add	r3, sp, #12
 8013708:	9300      	str	r3, [sp, #0]
 801370a:	462a      	mov	r2, r5
 801370c:	4b05      	ldr	r3, [pc, #20]	@ (8013724 <_svfiprintf_r+0x1f0>)
 801370e:	a904      	add	r1, sp, #16
 8013710:	4638      	mov	r0, r7
 8013712:	f7fd f9c5 	bl	8010aa0 <_printf_i>
 8013716:	e7ed      	b.n	80136f4 <_svfiprintf_r+0x1c0>
 8013718:	08017370 	.word	0x08017370
 801371c:	0801737a 	.word	0x0801737a
 8013720:	08010571 	.word	0x08010571
 8013724:	0801347f 	.word	0x0801347f
 8013728:	08017376 	.word	0x08017376

0801372c <__sflush_r>:
 801372c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013734:	0716      	lsls	r6, r2, #28
 8013736:	4605      	mov	r5, r0
 8013738:	460c      	mov	r4, r1
 801373a:	d454      	bmi.n	80137e6 <__sflush_r+0xba>
 801373c:	684b      	ldr	r3, [r1, #4]
 801373e:	2b00      	cmp	r3, #0
 8013740:	dc02      	bgt.n	8013748 <__sflush_r+0x1c>
 8013742:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013744:	2b00      	cmp	r3, #0
 8013746:	dd48      	ble.n	80137da <__sflush_r+0xae>
 8013748:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801374a:	2e00      	cmp	r6, #0
 801374c:	d045      	beq.n	80137da <__sflush_r+0xae>
 801374e:	2300      	movs	r3, #0
 8013750:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013754:	682f      	ldr	r7, [r5, #0]
 8013756:	6a21      	ldr	r1, [r4, #32]
 8013758:	602b      	str	r3, [r5, #0]
 801375a:	d030      	beq.n	80137be <__sflush_r+0x92>
 801375c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801375e:	89a3      	ldrh	r3, [r4, #12]
 8013760:	0759      	lsls	r1, r3, #29
 8013762:	d505      	bpl.n	8013770 <__sflush_r+0x44>
 8013764:	6863      	ldr	r3, [r4, #4]
 8013766:	1ad2      	subs	r2, r2, r3
 8013768:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801376a:	b10b      	cbz	r3, 8013770 <__sflush_r+0x44>
 801376c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801376e:	1ad2      	subs	r2, r2, r3
 8013770:	2300      	movs	r3, #0
 8013772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013774:	6a21      	ldr	r1, [r4, #32]
 8013776:	4628      	mov	r0, r5
 8013778:	47b0      	blx	r6
 801377a:	1c43      	adds	r3, r0, #1
 801377c:	89a3      	ldrh	r3, [r4, #12]
 801377e:	d106      	bne.n	801378e <__sflush_r+0x62>
 8013780:	6829      	ldr	r1, [r5, #0]
 8013782:	291d      	cmp	r1, #29
 8013784:	d82b      	bhi.n	80137de <__sflush_r+0xb2>
 8013786:	4a2a      	ldr	r2, [pc, #168]	@ (8013830 <__sflush_r+0x104>)
 8013788:	410a      	asrs	r2, r1
 801378a:	07d6      	lsls	r6, r2, #31
 801378c:	d427      	bmi.n	80137de <__sflush_r+0xb2>
 801378e:	2200      	movs	r2, #0
 8013790:	6062      	str	r2, [r4, #4]
 8013792:	04d9      	lsls	r1, r3, #19
 8013794:	6922      	ldr	r2, [r4, #16]
 8013796:	6022      	str	r2, [r4, #0]
 8013798:	d504      	bpl.n	80137a4 <__sflush_r+0x78>
 801379a:	1c42      	adds	r2, r0, #1
 801379c:	d101      	bne.n	80137a2 <__sflush_r+0x76>
 801379e:	682b      	ldr	r3, [r5, #0]
 80137a0:	b903      	cbnz	r3, 80137a4 <__sflush_r+0x78>
 80137a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80137a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137a6:	602f      	str	r7, [r5, #0]
 80137a8:	b1b9      	cbz	r1, 80137da <__sflush_r+0xae>
 80137aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137ae:	4299      	cmp	r1, r3
 80137b0:	d002      	beq.n	80137b8 <__sflush_r+0x8c>
 80137b2:	4628      	mov	r0, r5
 80137b4:	f7fe fd58 	bl	8012268 <_free_r>
 80137b8:	2300      	movs	r3, #0
 80137ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80137bc:	e00d      	b.n	80137da <__sflush_r+0xae>
 80137be:	2301      	movs	r3, #1
 80137c0:	4628      	mov	r0, r5
 80137c2:	47b0      	blx	r6
 80137c4:	4602      	mov	r2, r0
 80137c6:	1c50      	adds	r0, r2, #1
 80137c8:	d1c9      	bne.n	801375e <__sflush_r+0x32>
 80137ca:	682b      	ldr	r3, [r5, #0]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d0c6      	beq.n	801375e <__sflush_r+0x32>
 80137d0:	2b1d      	cmp	r3, #29
 80137d2:	d001      	beq.n	80137d8 <__sflush_r+0xac>
 80137d4:	2b16      	cmp	r3, #22
 80137d6:	d11e      	bne.n	8013816 <__sflush_r+0xea>
 80137d8:	602f      	str	r7, [r5, #0]
 80137da:	2000      	movs	r0, #0
 80137dc:	e022      	b.n	8013824 <__sflush_r+0xf8>
 80137de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137e2:	b21b      	sxth	r3, r3
 80137e4:	e01b      	b.n	801381e <__sflush_r+0xf2>
 80137e6:	690f      	ldr	r7, [r1, #16]
 80137e8:	2f00      	cmp	r7, #0
 80137ea:	d0f6      	beq.n	80137da <__sflush_r+0xae>
 80137ec:	0793      	lsls	r3, r2, #30
 80137ee:	680e      	ldr	r6, [r1, #0]
 80137f0:	bf08      	it	eq
 80137f2:	694b      	ldreq	r3, [r1, #20]
 80137f4:	600f      	str	r7, [r1, #0]
 80137f6:	bf18      	it	ne
 80137f8:	2300      	movne	r3, #0
 80137fa:	eba6 0807 	sub.w	r8, r6, r7
 80137fe:	608b      	str	r3, [r1, #8]
 8013800:	f1b8 0f00 	cmp.w	r8, #0
 8013804:	dde9      	ble.n	80137da <__sflush_r+0xae>
 8013806:	6a21      	ldr	r1, [r4, #32]
 8013808:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801380a:	4643      	mov	r3, r8
 801380c:	463a      	mov	r2, r7
 801380e:	4628      	mov	r0, r5
 8013810:	47b0      	blx	r6
 8013812:	2800      	cmp	r0, #0
 8013814:	dc08      	bgt.n	8013828 <__sflush_r+0xfc>
 8013816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801381a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801381e:	81a3      	strh	r3, [r4, #12]
 8013820:	f04f 30ff 	mov.w	r0, #4294967295
 8013824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013828:	4407      	add	r7, r0
 801382a:	eba8 0800 	sub.w	r8, r8, r0
 801382e:	e7e7      	b.n	8013800 <__sflush_r+0xd4>
 8013830:	dfbffffe 	.word	0xdfbffffe

08013834 <_fflush_r>:
 8013834:	b538      	push	{r3, r4, r5, lr}
 8013836:	690b      	ldr	r3, [r1, #16]
 8013838:	4605      	mov	r5, r0
 801383a:	460c      	mov	r4, r1
 801383c:	b913      	cbnz	r3, 8013844 <_fflush_r+0x10>
 801383e:	2500      	movs	r5, #0
 8013840:	4628      	mov	r0, r5
 8013842:	bd38      	pop	{r3, r4, r5, pc}
 8013844:	b118      	cbz	r0, 801384e <_fflush_r+0x1a>
 8013846:	6a03      	ldr	r3, [r0, #32]
 8013848:	b90b      	cbnz	r3, 801384e <_fflush_r+0x1a>
 801384a:	f7fd fce9 	bl	8011220 <__sinit>
 801384e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d0f3      	beq.n	801383e <_fflush_r+0xa>
 8013856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013858:	07d0      	lsls	r0, r2, #31
 801385a:	d404      	bmi.n	8013866 <_fflush_r+0x32>
 801385c:	0599      	lsls	r1, r3, #22
 801385e:	d402      	bmi.n	8013866 <_fflush_r+0x32>
 8013860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013862:	f7fd fe78 	bl	8011556 <__retarget_lock_acquire_recursive>
 8013866:	4628      	mov	r0, r5
 8013868:	4621      	mov	r1, r4
 801386a:	f7ff ff5f 	bl	801372c <__sflush_r>
 801386e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013870:	07da      	lsls	r2, r3, #31
 8013872:	4605      	mov	r5, r0
 8013874:	d4e4      	bmi.n	8013840 <_fflush_r+0xc>
 8013876:	89a3      	ldrh	r3, [r4, #12]
 8013878:	059b      	lsls	r3, r3, #22
 801387a:	d4e1      	bmi.n	8013840 <_fflush_r+0xc>
 801387c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801387e:	f7fd fe6b 	bl	8011558 <__retarget_lock_release_recursive>
 8013882:	e7dd      	b.n	8013840 <_fflush_r+0xc>

08013884 <fiprintf>:
 8013884:	b40e      	push	{r1, r2, r3}
 8013886:	b503      	push	{r0, r1, lr}
 8013888:	4601      	mov	r1, r0
 801388a:	ab03      	add	r3, sp, #12
 801388c:	4805      	ldr	r0, [pc, #20]	@ (80138a4 <fiprintf+0x20>)
 801388e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013892:	6800      	ldr	r0, [r0, #0]
 8013894:	9301      	str	r3, [sp, #4]
 8013896:	f000 f8a3 	bl	80139e0 <_vfiprintf_r>
 801389a:	b002      	add	sp, #8
 801389c:	f85d eb04 	ldr.w	lr, [sp], #4
 80138a0:	b003      	add	sp, #12
 80138a2:	4770      	bx	lr
 80138a4:	20002360 	.word	0x20002360

080138a8 <memmove>:
 80138a8:	4288      	cmp	r0, r1
 80138aa:	b510      	push	{r4, lr}
 80138ac:	eb01 0402 	add.w	r4, r1, r2
 80138b0:	d902      	bls.n	80138b8 <memmove+0x10>
 80138b2:	4284      	cmp	r4, r0
 80138b4:	4623      	mov	r3, r4
 80138b6:	d807      	bhi.n	80138c8 <memmove+0x20>
 80138b8:	1e43      	subs	r3, r0, #1
 80138ba:	42a1      	cmp	r1, r4
 80138bc:	d008      	beq.n	80138d0 <memmove+0x28>
 80138be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80138c6:	e7f8      	b.n	80138ba <memmove+0x12>
 80138c8:	4402      	add	r2, r0
 80138ca:	4601      	mov	r1, r0
 80138cc:	428a      	cmp	r2, r1
 80138ce:	d100      	bne.n	80138d2 <memmove+0x2a>
 80138d0:	bd10      	pop	{r4, pc}
 80138d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80138d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80138da:	e7f7      	b.n	80138cc <memmove+0x24>

080138dc <_sbrk_r>:
 80138dc:	b538      	push	{r3, r4, r5, lr}
 80138de:	4d06      	ldr	r5, [pc, #24]	@ (80138f8 <_sbrk_r+0x1c>)
 80138e0:	2300      	movs	r3, #0
 80138e2:	4604      	mov	r4, r0
 80138e4:	4608      	mov	r0, r1
 80138e6:	602b      	str	r3, [r5, #0]
 80138e8:	f7f7 fe1c 	bl	800b524 <_sbrk>
 80138ec:	1c43      	adds	r3, r0, #1
 80138ee:	d102      	bne.n	80138f6 <_sbrk_r+0x1a>
 80138f0:	682b      	ldr	r3, [r5, #0]
 80138f2:	b103      	cbz	r3, 80138f6 <_sbrk_r+0x1a>
 80138f4:	6023      	str	r3, [r4, #0]
 80138f6:	bd38      	pop	{r3, r4, r5, pc}
 80138f8:	2000a494 	.word	0x2000a494

080138fc <abort>:
 80138fc:	b508      	push	{r3, lr}
 80138fe:	2006      	movs	r0, #6
 8013900:	f000 fa42 	bl	8013d88 <raise>
 8013904:	2001      	movs	r0, #1
 8013906:	f7f7 fd94 	bl	800b432 <_exit>

0801390a <_calloc_r>:
 801390a:	b570      	push	{r4, r5, r6, lr}
 801390c:	fba1 5402 	umull	r5, r4, r1, r2
 8013910:	b93c      	cbnz	r4, 8013922 <_calloc_r+0x18>
 8013912:	4629      	mov	r1, r5
 8013914:	f7ff f856 	bl	80129c4 <_malloc_r>
 8013918:	4606      	mov	r6, r0
 801391a:	b928      	cbnz	r0, 8013928 <_calloc_r+0x1e>
 801391c:	2600      	movs	r6, #0
 801391e:	4630      	mov	r0, r6
 8013920:	bd70      	pop	{r4, r5, r6, pc}
 8013922:	220c      	movs	r2, #12
 8013924:	6002      	str	r2, [r0, #0]
 8013926:	e7f9      	b.n	801391c <_calloc_r+0x12>
 8013928:	462a      	mov	r2, r5
 801392a:	4621      	mov	r1, r4
 801392c:	f7fd fd11 	bl	8011352 <memset>
 8013930:	e7f5      	b.n	801391e <_calloc_r+0x14>

08013932 <_realloc_r>:
 8013932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013936:	4680      	mov	r8, r0
 8013938:	4615      	mov	r5, r2
 801393a:	460c      	mov	r4, r1
 801393c:	b921      	cbnz	r1, 8013948 <_realloc_r+0x16>
 801393e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013942:	4611      	mov	r1, r2
 8013944:	f7ff b83e 	b.w	80129c4 <_malloc_r>
 8013948:	b92a      	cbnz	r2, 8013956 <_realloc_r+0x24>
 801394a:	f7fe fc8d 	bl	8012268 <_free_r>
 801394e:	2400      	movs	r4, #0
 8013950:	4620      	mov	r0, r4
 8013952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013956:	f000 fa33 	bl	8013dc0 <_malloc_usable_size_r>
 801395a:	4285      	cmp	r5, r0
 801395c:	4606      	mov	r6, r0
 801395e:	d802      	bhi.n	8013966 <_realloc_r+0x34>
 8013960:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013964:	d8f4      	bhi.n	8013950 <_realloc_r+0x1e>
 8013966:	4629      	mov	r1, r5
 8013968:	4640      	mov	r0, r8
 801396a:	f7ff f82b 	bl	80129c4 <_malloc_r>
 801396e:	4607      	mov	r7, r0
 8013970:	2800      	cmp	r0, #0
 8013972:	d0ec      	beq.n	801394e <_realloc_r+0x1c>
 8013974:	42b5      	cmp	r5, r6
 8013976:	462a      	mov	r2, r5
 8013978:	4621      	mov	r1, r4
 801397a:	bf28      	it	cs
 801397c:	4632      	movcs	r2, r6
 801397e:	f7fd fdec 	bl	801155a <memcpy>
 8013982:	4621      	mov	r1, r4
 8013984:	4640      	mov	r0, r8
 8013986:	f7fe fc6f 	bl	8012268 <_free_r>
 801398a:	463c      	mov	r4, r7
 801398c:	e7e0      	b.n	8013950 <_realloc_r+0x1e>

0801398e <__sfputc_r>:
 801398e:	6893      	ldr	r3, [r2, #8]
 8013990:	3b01      	subs	r3, #1
 8013992:	2b00      	cmp	r3, #0
 8013994:	b410      	push	{r4}
 8013996:	6093      	str	r3, [r2, #8]
 8013998:	da08      	bge.n	80139ac <__sfputc_r+0x1e>
 801399a:	6994      	ldr	r4, [r2, #24]
 801399c:	42a3      	cmp	r3, r4
 801399e:	db01      	blt.n	80139a4 <__sfputc_r+0x16>
 80139a0:	290a      	cmp	r1, #10
 80139a2:	d103      	bne.n	80139ac <__sfputc_r+0x1e>
 80139a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139a8:	f000 b932 	b.w	8013c10 <__swbuf_r>
 80139ac:	6813      	ldr	r3, [r2, #0]
 80139ae:	1c58      	adds	r0, r3, #1
 80139b0:	6010      	str	r0, [r2, #0]
 80139b2:	7019      	strb	r1, [r3, #0]
 80139b4:	4608      	mov	r0, r1
 80139b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139ba:	4770      	bx	lr

080139bc <__sfputs_r>:
 80139bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139be:	4606      	mov	r6, r0
 80139c0:	460f      	mov	r7, r1
 80139c2:	4614      	mov	r4, r2
 80139c4:	18d5      	adds	r5, r2, r3
 80139c6:	42ac      	cmp	r4, r5
 80139c8:	d101      	bne.n	80139ce <__sfputs_r+0x12>
 80139ca:	2000      	movs	r0, #0
 80139cc:	e007      	b.n	80139de <__sfputs_r+0x22>
 80139ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139d2:	463a      	mov	r2, r7
 80139d4:	4630      	mov	r0, r6
 80139d6:	f7ff ffda 	bl	801398e <__sfputc_r>
 80139da:	1c43      	adds	r3, r0, #1
 80139dc:	d1f3      	bne.n	80139c6 <__sfputs_r+0xa>
 80139de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080139e0 <_vfiprintf_r>:
 80139e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139e4:	460d      	mov	r5, r1
 80139e6:	b09d      	sub	sp, #116	@ 0x74
 80139e8:	4614      	mov	r4, r2
 80139ea:	4698      	mov	r8, r3
 80139ec:	4606      	mov	r6, r0
 80139ee:	b118      	cbz	r0, 80139f8 <_vfiprintf_r+0x18>
 80139f0:	6a03      	ldr	r3, [r0, #32]
 80139f2:	b90b      	cbnz	r3, 80139f8 <_vfiprintf_r+0x18>
 80139f4:	f7fd fc14 	bl	8011220 <__sinit>
 80139f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80139fa:	07d9      	lsls	r1, r3, #31
 80139fc:	d405      	bmi.n	8013a0a <_vfiprintf_r+0x2a>
 80139fe:	89ab      	ldrh	r3, [r5, #12]
 8013a00:	059a      	lsls	r2, r3, #22
 8013a02:	d402      	bmi.n	8013a0a <_vfiprintf_r+0x2a>
 8013a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a06:	f7fd fda6 	bl	8011556 <__retarget_lock_acquire_recursive>
 8013a0a:	89ab      	ldrh	r3, [r5, #12]
 8013a0c:	071b      	lsls	r3, r3, #28
 8013a0e:	d501      	bpl.n	8013a14 <_vfiprintf_r+0x34>
 8013a10:	692b      	ldr	r3, [r5, #16]
 8013a12:	b99b      	cbnz	r3, 8013a3c <_vfiprintf_r+0x5c>
 8013a14:	4629      	mov	r1, r5
 8013a16:	4630      	mov	r0, r6
 8013a18:	f000 f938 	bl	8013c8c <__swsetup_r>
 8013a1c:	b170      	cbz	r0, 8013a3c <_vfiprintf_r+0x5c>
 8013a1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a20:	07dc      	lsls	r4, r3, #31
 8013a22:	d504      	bpl.n	8013a2e <_vfiprintf_r+0x4e>
 8013a24:	f04f 30ff 	mov.w	r0, #4294967295
 8013a28:	b01d      	add	sp, #116	@ 0x74
 8013a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a2e:	89ab      	ldrh	r3, [r5, #12]
 8013a30:	0598      	lsls	r0, r3, #22
 8013a32:	d4f7      	bmi.n	8013a24 <_vfiprintf_r+0x44>
 8013a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a36:	f7fd fd8f 	bl	8011558 <__retarget_lock_release_recursive>
 8013a3a:	e7f3      	b.n	8013a24 <_vfiprintf_r+0x44>
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a40:	2320      	movs	r3, #32
 8013a42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a4a:	2330      	movs	r3, #48	@ 0x30
 8013a4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013bfc <_vfiprintf_r+0x21c>
 8013a50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a54:	f04f 0901 	mov.w	r9, #1
 8013a58:	4623      	mov	r3, r4
 8013a5a:	469a      	mov	sl, r3
 8013a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a60:	b10a      	cbz	r2, 8013a66 <_vfiprintf_r+0x86>
 8013a62:	2a25      	cmp	r2, #37	@ 0x25
 8013a64:	d1f9      	bne.n	8013a5a <_vfiprintf_r+0x7a>
 8013a66:	ebba 0b04 	subs.w	fp, sl, r4
 8013a6a:	d00b      	beq.n	8013a84 <_vfiprintf_r+0xa4>
 8013a6c:	465b      	mov	r3, fp
 8013a6e:	4622      	mov	r2, r4
 8013a70:	4629      	mov	r1, r5
 8013a72:	4630      	mov	r0, r6
 8013a74:	f7ff ffa2 	bl	80139bc <__sfputs_r>
 8013a78:	3001      	adds	r0, #1
 8013a7a:	f000 80a7 	beq.w	8013bcc <_vfiprintf_r+0x1ec>
 8013a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a80:	445a      	add	r2, fp
 8013a82:	9209      	str	r2, [sp, #36]	@ 0x24
 8013a84:	f89a 3000 	ldrb.w	r3, [sl]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	f000 809f 	beq.w	8013bcc <_vfiprintf_r+0x1ec>
 8013a8e:	2300      	movs	r3, #0
 8013a90:	f04f 32ff 	mov.w	r2, #4294967295
 8013a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a98:	f10a 0a01 	add.w	sl, sl, #1
 8013a9c:	9304      	str	r3, [sp, #16]
 8013a9e:	9307      	str	r3, [sp, #28]
 8013aa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013aa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8013aa6:	4654      	mov	r4, sl
 8013aa8:	2205      	movs	r2, #5
 8013aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013aae:	4853      	ldr	r0, [pc, #332]	@ (8013bfc <_vfiprintf_r+0x21c>)
 8013ab0:	f7ec fb9e 	bl	80001f0 <memchr>
 8013ab4:	9a04      	ldr	r2, [sp, #16]
 8013ab6:	b9d8      	cbnz	r0, 8013af0 <_vfiprintf_r+0x110>
 8013ab8:	06d1      	lsls	r1, r2, #27
 8013aba:	bf44      	itt	mi
 8013abc:	2320      	movmi	r3, #32
 8013abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ac2:	0713      	lsls	r3, r2, #28
 8013ac4:	bf44      	itt	mi
 8013ac6:	232b      	movmi	r3, #43	@ 0x2b
 8013ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013acc:	f89a 3000 	ldrb.w	r3, [sl]
 8013ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ad2:	d015      	beq.n	8013b00 <_vfiprintf_r+0x120>
 8013ad4:	9a07      	ldr	r2, [sp, #28]
 8013ad6:	4654      	mov	r4, sl
 8013ad8:	2000      	movs	r0, #0
 8013ada:	f04f 0c0a 	mov.w	ip, #10
 8013ade:	4621      	mov	r1, r4
 8013ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ae4:	3b30      	subs	r3, #48	@ 0x30
 8013ae6:	2b09      	cmp	r3, #9
 8013ae8:	d94b      	bls.n	8013b82 <_vfiprintf_r+0x1a2>
 8013aea:	b1b0      	cbz	r0, 8013b1a <_vfiprintf_r+0x13a>
 8013aec:	9207      	str	r2, [sp, #28]
 8013aee:	e014      	b.n	8013b1a <_vfiprintf_r+0x13a>
 8013af0:	eba0 0308 	sub.w	r3, r0, r8
 8013af4:	fa09 f303 	lsl.w	r3, r9, r3
 8013af8:	4313      	orrs	r3, r2
 8013afa:	9304      	str	r3, [sp, #16]
 8013afc:	46a2      	mov	sl, r4
 8013afe:	e7d2      	b.n	8013aa6 <_vfiprintf_r+0xc6>
 8013b00:	9b03      	ldr	r3, [sp, #12]
 8013b02:	1d19      	adds	r1, r3, #4
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	9103      	str	r1, [sp, #12]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	bfbb      	ittet	lt
 8013b0c:	425b      	neglt	r3, r3
 8013b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8013b12:	9307      	strge	r3, [sp, #28]
 8013b14:	9307      	strlt	r3, [sp, #28]
 8013b16:	bfb8      	it	lt
 8013b18:	9204      	strlt	r2, [sp, #16]
 8013b1a:	7823      	ldrb	r3, [r4, #0]
 8013b1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8013b1e:	d10a      	bne.n	8013b36 <_vfiprintf_r+0x156>
 8013b20:	7863      	ldrb	r3, [r4, #1]
 8013b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b24:	d132      	bne.n	8013b8c <_vfiprintf_r+0x1ac>
 8013b26:	9b03      	ldr	r3, [sp, #12]
 8013b28:	1d1a      	adds	r2, r3, #4
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	9203      	str	r2, [sp, #12]
 8013b2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013b32:	3402      	adds	r4, #2
 8013b34:	9305      	str	r3, [sp, #20]
 8013b36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013c0c <_vfiprintf_r+0x22c>
 8013b3a:	7821      	ldrb	r1, [r4, #0]
 8013b3c:	2203      	movs	r2, #3
 8013b3e:	4650      	mov	r0, sl
 8013b40:	f7ec fb56 	bl	80001f0 <memchr>
 8013b44:	b138      	cbz	r0, 8013b56 <_vfiprintf_r+0x176>
 8013b46:	9b04      	ldr	r3, [sp, #16]
 8013b48:	eba0 000a 	sub.w	r0, r0, sl
 8013b4c:	2240      	movs	r2, #64	@ 0x40
 8013b4e:	4082      	lsls	r2, r0
 8013b50:	4313      	orrs	r3, r2
 8013b52:	3401      	adds	r4, #1
 8013b54:	9304      	str	r3, [sp, #16]
 8013b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b5a:	4829      	ldr	r0, [pc, #164]	@ (8013c00 <_vfiprintf_r+0x220>)
 8013b5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013b60:	2206      	movs	r2, #6
 8013b62:	f7ec fb45 	bl	80001f0 <memchr>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	d03f      	beq.n	8013bea <_vfiprintf_r+0x20a>
 8013b6a:	4b26      	ldr	r3, [pc, #152]	@ (8013c04 <_vfiprintf_r+0x224>)
 8013b6c:	bb1b      	cbnz	r3, 8013bb6 <_vfiprintf_r+0x1d6>
 8013b6e:	9b03      	ldr	r3, [sp, #12]
 8013b70:	3307      	adds	r3, #7
 8013b72:	f023 0307 	bic.w	r3, r3, #7
 8013b76:	3308      	adds	r3, #8
 8013b78:	9303      	str	r3, [sp, #12]
 8013b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b7c:	443b      	add	r3, r7
 8013b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b80:	e76a      	b.n	8013a58 <_vfiprintf_r+0x78>
 8013b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b86:	460c      	mov	r4, r1
 8013b88:	2001      	movs	r0, #1
 8013b8a:	e7a8      	b.n	8013ade <_vfiprintf_r+0xfe>
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	3401      	adds	r4, #1
 8013b90:	9305      	str	r3, [sp, #20]
 8013b92:	4619      	mov	r1, r3
 8013b94:	f04f 0c0a 	mov.w	ip, #10
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b9e:	3a30      	subs	r2, #48	@ 0x30
 8013ba0:	2a09      	cmp	r2, #9
 8013ba2:	d903      	bls.n	8013bac <_vfiprintf_r+0x1cc>
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d0c6      	beq.n	8013b36 <_vfiprintf_r+0x156>
 8013ba8:	9105      	str	r1, [sp, #20]
 8013baa:	e7c4      	b.n	8013b36 <_vfiprintf_r+0x156>
 8013bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8013bb0:	4604      	mov	r4, r0
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	e7f0      	b.n	8013b98 <_vfiprintf_r+0x1b8>
 8013bb6:	ab03      	add	r3, sp, #12
 8013bb8:	9300      	str	r3, [sp, #0]
 8013bba:	462a      	mov	r2, r5
 8013bbc:	4b12      	ldr	r3, [pc, #72]	@ (8013c08 <_vfiprintf_r+0x228>)
 8013bbe:	a904      	add	r1, sp, #16
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	f7fc fcd5 	bl	8010570 <_printf_float>
 8013bc6:	4607      	mov	r7, r0
 8013bc8:	1c78      	adds	r0, r7, #1
 8013bca:	d1d6      	bne.n	8013b7a <_vfiprintf_r+0x19a>
 8013bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013bce:	07d9      	lsls	r1, r3, #31
 8013bd0:	d405      	bmi.n	8013bde <_vfiprintf_r+0x1fe>
 8013bd2:	89ab      	ldrh	r3, [r5, #12]
 8013bd4:	059a      	lsls	r2, r3, #22
 8013bd6:	d402      	bmi.n	8013bde <_vfiprintf_r+0x1fe>
 8013bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013bda:	f7fd fcbd 	bl	8011558 <__retarget_lock_release_recursive>
 8013bde:	89ab      	ldrh	r3, [r5, #12]
 8013be0:	065b      	lsls	r3, r3, #25
 8013be2:	f53f af1f 	bmi.w	8013a24 <_vfiprintf_r+0x44>
 8013be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013be8:	e71e      	b.n	8013a28 <_vfiprintf_r+0x48>
 8013bea:	ab03      	add	r3, sp, #12
 8013bec:	9300      	str	r3, [sp, #0]
 8013bee:	462a      	mov	r2, r5
 8013bf0:	4b05      	ldr	r3, [pc, #20]	@ (8013c08 <_vfiprintf_r+0x228>)
 8013bf2:	a904      	add	r1, sp, #16
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	f7fc ff53 	bl	8010aa0 <_printf_i>
 8013bfa:	e7e4      	b.n	8013bc6 <_vfiprintf_r+0x1e6>
 8013bfc:	08017370 	.word	0x08017370
 8013c00:	0801737a 	.word	0x0801737a
 8013c04:	08010571 	.word	0x08010571
 8013c08:	080139bd 	.word	0x080139bd
 8013c0c:	08017376 	.word	0x08017376

08013c10 <__swbuf_r>:
 8013c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c12:	460e      	mov	r6, r1
 8013c14:	4614      	mov	r4, r2
 8013c16:	4605      	mov	r5, r0
 8013c18:	b118      	cbz	r0, 8013c22 <__swbuf_r+0x12>
 8013c1a:	6a03      	ldr	r3, [r0, #32]
 8013c1c:	b90b      	cbnz	r3, 8013c22 <__swbuf_r+0x12>
 8013c1e:	f7fd faff 	bl	8011220 <__sinit>
 8013c22:	69a3      	ldr	r3, [r4, #24]
 8013c24:	60a3      	str	r3, [r4, #8]
 8013c26:	89a3      	ldrh	r3, [r4, #12]
 8013c28:	071a      	lsls	r2, r3, #28
 8013c2a:	d501      	bpl.n	8013c30 <__swbuf_r+0x20>
 8013c2c:	6923      	ldr	r3, [r4, #16]
 8013c2e:	b943      	cbnz	r3, 8013c42 <__swbuf_r+0x32>
 8013c30:	4621      	mov	r1, r4
 8013c32:	4628      	mov	r0, r5
 8013c34:	f000 f82a 	bl	8013c8c <__swsetup_r>
 8013c38:	b118      	cbz	r0, 8013c42 <__swbuf_r+0x32>
 8013c3a:	f04f 37ff 	mov.w	r7, #4294967295
 8013c3e:	4638      	mov	r0, r7
 8013c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c42:	6823      	ldr	r3, [r4, #0]
 8013c44:	6922      	ldr	r2, [r4, #16]
 8013c46:	1a98      	subs	r0, r3, r2
 8013c48:	6963      	ldr	r3, [r4, #20]
 8013c4a:	b2f6      	uxtb	r6, r6
 8013c4c:	4283      	cmp	r3, r0
 8013c4e:	4637      	mov	r7, r6
 8013c50:	dc05      	bgt.n	8013c5e <__swbuf_r+0x4e>
 8013c52:	4621      	mov	r1, r4
 8013c54:	4628      	mov	r0, r5
 8013c56:	f7ff fded 	bl	8013834 <_fflush_r>
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	d1ed      	bne.n	8013c3a <__swbuf_r+0x2a>
 8013c5e:	68a3      	ldr	r3, [r4, #8]
 8013c60:	3b01      	subs	r3, #1
 8013c62:	60a3      	str	r3, [r4, #8]
 8013c64:	6823      	ldr	r3, [r4, #0]
 8013c66:	1c5a      	adds	r2, r3, #1
 8013c68:	6022      	str	r2, [r4, #0]
 8013c6a:	701e      	strb	r6, [r3, #0]
 8013c6c:	6962      	ldr	r2, [r4, #20]
 8013c6e:	1c43      	adds	r3, r0, #1
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d004      	beq.n	8013c7e <__swbuf_r+0x6e>
 8013c74:	89a3      	ldrh	r3, [r4, #12]
 8013c76:	07db      	lsls	r3, r3, #31
 8013c78:	d5e1      	bpl.n	8013c3e <__swbuf_r+0x2e>
 8013c7a:	2e0a      	cmp	r6, #10
 8013c7c:	d1df      	bne.n	8013c3e <__swbuf_r+0x2e>
 8013c7e:	4621      	mov	r1, r4
 8013c80:	4628      	mov	r0, r5
 8013c82:	f7ff fdd7 	bl	8013834 <_fflush_r>
 8013c86:	2800      	cmp	r0, #0
 8013c88:	d0d9      	beq.n	8013c3e <__swbuf_r+0x2e>
 8013c8a:	e7d6      	b.n	8013c3a <__swbuf_r+0x2a>

08013c8c <__swsetup_r>:
 8013c8c:	b538      	push	{r3, r4, r5, lr}
 8013c8e:	4b29      	ldr	r3, [pc, #164]	@ (8013d34 <__swsetup_r+0xa8>)
 8013c90:	4605      	mov	r5, r0
 8013c92:	6818      	ldr	r0, [r3, #0]
 8013c94:	460c      	mov	r4, r1
 8013c96:	b118      	cbz	r0, 8013ca0 <__swsetup_r+0x14>
 8013c98:	6a03      	ldr	r3, [r0, #32]
 8013c9a:	b90b      	cbnz	r3, 8013ca0 <__swsetup_r+0x14>
 8013c9c:	f7fd fac0 	bl	8011220 <__sinit>
 8013ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ca4:	0719      	lsls	r1, r3, #28
 8013ca6:	d422      	bmi.n	8013cee <__swsetup_r+0x62>
 8013ca8:	06da      	lsls	r2, r3, #27
 8013caa:	d407      	bmi.n	8013cbc <__swsetup_r+0x30>
 8013cac:	2209      	movs	r2, #9
 8013cae:	602a      	str	r2, [r5, #0]
 8013cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cb4:	81a3      	strh	r3, [r4, #12]
 8013cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8013cba:	e033      	b.n	8013d24 <__swsetup_r+0x98>
 8013cbc:	0758      	lsls	r0, r3, #29
 8013cbe:	d512      	bpl.n	8013ce6 <__swsetup_r+0x5a>
 8013cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013cc2:	b141      	cbz	r1, 8013cd6 <__swsetup_r+0x4a>
 8013cc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013cc8:	4299      	cmp	r1, r3
 8013cca:	d002      	beq.n	8013cd2 <__swsetup_r+0x46>
 8013ccc:	4628      	mov	r0, r5
 8013cce:	f7fe facb 	bl	8012268 <_free_r>
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8013cd6:	89a3      	ldrh	r3, [r4, #12]
 8013cd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013cdc:	81a3      	strh	r3, [r4, #12]
 8013cde:	2300      	movs	r3, #0
 8013ce0:	6063      	str	r3, [r4, #4]
 8013ce2:	6923      	ldr	r3, [r4, #16]
 8013ce4:	6023      	str	r3, [r4, #0]
 8013ce6:	89a3      	ldrh	r3, [r4, #12]
 8013ce8:	f043 0308 	orr.w	r3, r3, #8
 8013cec:	81a3      	strh	r3, [r4, #12]
 8013cee:	6923      	ldr	r3, [r4, #16]
 8013cf0:	b94b      	cbnz	r3, 8013d06 <__swsetup_r+0x7a>
 8013cf2:	89a3      	ldrh	r3, [r4, #12]
 8013cf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013cfc:	d003      	beq.n	8013d06 <__swsetup_r+0x7a>
 8013cfe:	4621      	mov	r1, r4
 8013d00:	4628      	mov	r0, r5
 8013d02:	f000 f88b 	bl	8013e1c <__smakebuf_r>
 8013d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d0a:	f013 0201 	ands.w	r2, r3, #1
 8013d0e:	d00a      	beq.n	8013d26 <__swsetup_r+0x9a>
 8013d10:	2200      	movs	r2, #0
 8013d12:	60a2      	str	r2, [r4, #8]
 8013d14:	6962      	ldr	r2, [r4, #20]
 8013d16:	4252      	negs	r2, r2
 8013d18:	61a2      	str	r2, [r4, #24]
 8013d1a:	6922      	ldr	r2, [r4, #16]
 8013d1c:	b942      	cbnz	r2, 8013d30 <__swsetup_r+0xa4>
 8013d1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013d22:	d1c5      	bne.n	8013cb0 <__swsetup_r+0x24>
 8013d24:	bd38      	pop	{r3, r4, r5, pc}
 8013d26:	0799      	lsls	r1, r3, #30
 8013d28:	bf58      	it	pl
 8013d2a:	6962      	ldrpl	r2, [r4, #20]
 8013d2c:	60a2      	str	r2, [r4, #8]
 8013d2e:	e7f4      	b.n	8013d1a <__swsetup_r+0x8e>
 8013d30:	2000      	movs	r0, #0
 8013d32:	e7f7      	b.n	8013d24 <__swsetup_r+0x98>
 8013d34:	20002360 	.word	0x20002360

08013d38 <_raise_r>:
 8013d38:	291f      	cmp	r1, #31
 8013d3a:	b538      	push	{r3, r4, r5, lr}
 8013d3c:	4605      	mov	r5, r0
 8013d3e:	460c      	mov	r4, r1
 8013d40:	d904      	bls.n	8013d4c <_raise_r+0x14>
 8013d42:	2316      	movs	r3, #22
 8013d44:	6003      	str	r3, [r0, #0]
 8013d46:	f04f 30ff 	mov.w	r0, #4294967295
 8013d4a:	bd38      	pop	{r3, r4, r5, pc}
 8013d4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013d4e:	b112      	cbz	r2, 8013d56 <_raise_r+0x1e>
 8013d50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013d54:	b94b      	cbnz	r3, 8013d6a <_raise_r+0x32>
 8013d56:	4628      	mov	r0, r5
 8013d58:	f000 f830 	bl	8013dbc <_getpid_r>
 8013d5c:	4622      	mov	r2, r4
 8013d5e:	4601      	mov	r1, r0
 8013d60:	4628      	mov	r0, r5
 8013d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d66:	f000 b817 	b.w	8013d98 <_kill_r>
 8013d6a:	2b01      	cmp	r3, #1
 8013d6c:	d00a      	beq.n	8013d84 <_raise_r+0x4c>
 8013d6e:	1c59      	adds	r1, r3, #1
 8013d70:	d103      	bne.n	8013d7a <_raise_r+0x42>
 8013d72:	2316      	movs	r3, #22
 8013d74:	6003      	str	r3, [r0, #0]
 8013d76:	2001      	movs	r0, #1
 8013d78:	e7e7      	b.n	8013d4a <_raise_r+0x12>
 8013d7a:	2100      	movs	r1, #0
 8013d7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013d80:	4620      	mov	r0, r4
 8013d82:	4798      	blx	r3
 8013d84:	2000      	movs	r0, #0
 8013d86:	e7e0      	b.n	8013d4a <_raise_r+0x12>

08013d88 <raise>:
 8013d88:	4b02      	ldr	r3, [pc, #8]	@ (8013d94 <raise+0xc>)
 8013d8a:	4601      	mov	r1, r0
 8013d8c:	6818      	ldr	r0, [r3, #0]
 8013d8e:	f7ff bfd3 	b.w	8013d38 <_raise_r>
 8013d92:	bf00      	nop
 8013d94:	20002360 	.word	0x20002360

08013d98 <_kill_r>:
 8013d98:	b538      	push	{r3, r4, r5, lr}
 8013d9a:	4d07      	ldr	r5, [pc, #28]	@ (8013db8 <_kill_r+0x20>)
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	4604      	mov	r4, r0
 8013da0:	4608      	mov	r0, r1
 8013da2:	4611      	mov	r1, r2
 8013da4:	602b      	str	r3, [r5, #0]
 8013da6:	f7f7 fb34 	bl	800b412 <_kill>
 8013daa:	1c43      	adds	r3, r0, #1
 8013dac:	d102      	bne.n	8013db4 <_kill_r+0x1c>
 8013dae:	682b      	ldr	r3, [r5, #0]
 8013db0:	b103      	cbz	r3, 8013db4 <_kill_r+0x1c>
 8013db2:	6023      	str	r3, [r4, #0]
 8013db4:	bd38      	pop	{r3, r4, r5, pc}
 8013db6:	bf00      	nop
 8013db8:	2000a494 	.word	0x2000a494

08013dbc <_getpid_r>:
 8013dbc:	f7f7 bb21 	b.w	800b402 <_getpid>

08013dc0 <_malloc_usable_size_r>:
 8013dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013dc4:	1f18      	subs	r0, r3, #4
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	bfbc      	itt	lt
 8013dca:	580b      	ldrlt	r3, [r1, r0]
 8013dcc:	18c0      	addlt	r0, r0, r3
 8013dce:	4770      	bx	lr

08013dd0 <__swhatbuf_r>:
 8013dd0:	b570      	push	{r4, r5, r6, lr}
 8013dd2:	460c      	mov	r4, r1
 8013dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dd8:	2900      	cmp	r1, #0
 8013dda:	b096      	sub	sp, #88	@ 0x58
 8013ddc:	4615      	mov	r5, r2
 8013dde:	461e      	mov	r6, r3
 8013de0:	da0d      	bge.n	8013dfe <__swhatbuf_r+0x2e>
 8013de2:	89a3      	ldrh	r3, [r4, #12]
 8013de4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013de8:	f04f 0100 	mov.w	r1, #0
 8013dec:	bf14      	ite	ne
 8013dee:	2340      	movne	r3, #64	@ 0x40
 8013df0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013df4:	2000      	movs	r0, #0
 8013df6:	6031      	str	r1, [r6, #0]
 8013df8:	602b      	str	r3, [r5, #0]
 8013dfa:	b016      	add	sp, #88	@ 0x58
 8013dfc:	bd70      	pop	{r4, r5, r6, pc}
 8013dfe:	466a      	mov	r2, sp
 8013e00:	f000 f848 	bl	8013e94 <_fstat_r>
 8013e04:	2800      	cmp	r0, #0
 8013e06:	dbec      	blt.n	8013de2 <__swhatbuf_r+0x12>
 8013e08:	9901      	ldr	r1, [sp, #4]
 8013e0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013e0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013e12:	4259      	negs	r1, r3
 8013e14:	4159      	adcs	r1, r3
 8013e16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013e1a:	e7eb      	b.n	8013df4 <__swhatbuf_r+0x24>

08013e1c <__smakebuf_r>:
 8013e1c:	898b      	ldrh	r3, [r1, #12]
 8013e1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e20:	079d      	lsls	r5, r3, #30
 8013e22:	4606      	mov	r6, r0
 8013e24:	460c      	mov	r4, r1
 8013e26:	d507      	bpl.n	8013e38 <__smakebuf_r+0x1c>
 8013e28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013e2c:	6023      	str	r3, [r4, #0]
 8013e2e:	6123      	str	r3, [r4, #16]
 8013e30:	2301      	movs	r3, #1
 8013e32:	6163      	str	r3, [r4, #20]
 8013e34:	b003      	add	sp, #12
 8013e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e38:	ab01      	add	r3, sp, #4
 8013e3a:	466a      	mov	r2, sp
 8013e3c:	f7ff ffc8 	bl	8013dd0 <__swhatbuf_r>
 8013e40:	9f00      	ldr	r7, [sp, #0]
 8013e42:	4605      	mov	r5, r0
 8013e44:	4639      	mov	r1, r7
 8013e46:	4630      	mov	r0, r6
 8013e48:	f7fe fdbc 	bl	80129c4 <_malloc_r>
 8013e4c:	b948      	cbnz	r0, 8013e62 <__smakebuf_r+0x46>
 8013e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e52:	059a      	lsls	r2, r3, #22
 8013e54:	d4ee      	bmi.n	8013e34 <__smakebuf_r+0x18>
 8013e56:	f023 0303 	bic.w	r3, r3, #3
 8013e5a:	f043 0302 	orr.w	r3, r3, #2
 8013e5e:	81a3      	strh	r3, [r4, #12]
 8013e60:	e7e2      	b.n	8013e28 <__smakebuf_r+0xc>
 8013e62:	89a3      	ldrh	r3, [r4, #12]
 8013e64:	6020      	str	r0, [r4, #0]
 8013e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e6a:	81a3      	strh	r3, [r4, #12]
 8013e6c:	9b01      	ldr	r3, [sp, #4]
 8013e6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013e72:	b15b      	cbz	r3, 8013e8c <__smakebuf_r+0x70>
 8013e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e78:	4630      	mov	r0, r6
 8013e7a:	f000 f81d 	bl	8013eb8 <_isatty_r>
 8013e7e:	b128      	cbz	r0, 8013e8c <__smakebuf_r+0x70>
 8013e80:	89a3      	ldrh	r3, [r4, #12]
 8013e82:	f023 0303 	bic.w	r3, r3, #3
 8013e86:	f043 0301 	orr.w	r3, r3, #1
 8013e8a:	81a3      	strh	r3, [r4, #12]
 8013e8c:	89a3      	ldrh	r3, [r4, #12]
 8013e8e:	431d      	orrs	r5, r3
 8013e90:	81a5      	strh	r5, [r4, #12]
 8013e92:	e7cf      	b.n	8013e34 <__smakebuf_r+0x18>

08013e94 <_fstat_r>:
 8013e94:	b538      	push	{r3, r4, r5, lr}
 8013e96:	4d07      	ldr	r5, [pc, #28]	@ (8013eb4 <_fstat_r+0x20>)
 8013e98:	2300      	movs	r3, #0
 8013e9a:	4604      	mov	r4, r0
 8013e9c:	4608      	mov	r0, r1
 8013e9e:	4611      	mov	r1, r2
 8013ea0:	602b      	str	r3, [r5, #0]
 8013ea2:	f7f7 fb16 	bl	800b4d2 <_fstat>
 8013ea6:	1c43      	adds	r3, r0, #1
 8013ea8:	d102      	bne.n	8013eb0 <_fstat_r+0x1c>
 8013eaa:	682b      	ldr	r3, [r5, #0]
 8013eac:	b103      	cbz	r3, 8013eb0 <_fstat_r+0x1c>
 8013eae:	6023      	str	r3, [r4, #0]
 8013eb0:	bd38      	pop	{r3, r4, r5, pc}
 8013eb2:	bf00      	nop
 8013eb4:	2000a494 	.word	0x2000a494

08013eb8 <_isatty_r>:
 8013eb8:	b538      	push	{r3, r4, r5, lr}
 8013eba:	4d06      	ldr	r5, [pc, #24]	@ (8013ed4 <_isatty_r+0x1c>)
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	4608      	mov	r0, r1
 8013ec2:	602b      	str	r3, [r5, #0]
 8013ec4:	f7f7 fb15 	bl	800b4f2 <_isatty>
 8013ec8:	1c43      	adds	r3, r0, #1
 8013eca:	d102      	bne.n	8013ed2 <_isatty_r+0x1a>
 8013ecc:	682b      	ldr	r3, [r5, #0]
 8013ece:	b103      	cbz	r3, 8013ed2 <_isatty_r+0x1a>
 8013ed0:	6023      	str	r3, [r4, #0]
 8013ed2:	bd38      	pop	{r3, r4, r5, pc}
 8013ed4:	2000a494 	.word	0x2000a494

08013ed8 <_init>:
 8013ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eda:	bf00      	nop
 8013edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ede:	bc08      	pop	{r3}
 8013ee0:	469e      	mov	lr, r3
 8013ee2:	4770      	bx	lr

08013ee4 <_fini>:
 8013ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ee6:	bf00      	nop
 8013ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013eea:	bc08      	pop	{r3}
 8013eec:	469e      	mov	lr, r3
 8013eee:	4770      	bx	lr
