
cpoc_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ea8  08010e00  08010e00  00011e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ca8  08013ca8  0001558c  2**0
                  CONTENTS
  4 .ARM          00000008  08013ca8  08013ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013cb0  08013cb0  0001558c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013cb0  08013cb0  00014cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013cb4  08013cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000058c  20000000  08013cb8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001558c  2**0
                  CONTENTS
 10 .bss          00004850  2000058c  2000058c  0001558c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004ddc  20004ddc  0001558c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001558c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d518  00000000  00000000  000155bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b5  00000000  00000000  00022ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00025d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a03  00000000  00000000  00026b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d571  00000000  00000000  00027513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117a5  00000000  00000000  00044a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000953d7  00000000  00000000  00056229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eb600  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049f4  00000000  00000000  000eb644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000f0038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000058c 	.word	0x2000058c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010de4 	.word	0x08010de4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000590 	.word	0x20000590
 80001cc:	08010de4 	.word	0x08010de4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001014:	2b80      	cmp	r3, #128	@ 0x80
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103a:	2b40      	cmp	r3, #64	@ 0x40
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <DS3231_Write>:
#include "ds3231.h"

#define DS3231_ADDRESS 0xD0

void DS3231_Write(uint8_t reg, uint8_t data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 80011a0:	bf00      	nop
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <DS3231_Write+0x8c>)
 80011a4:	f7ff ff7a 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <DS3231_Write+0x12>
    LL_I2C_GenerateStartCondition(I2C1);
 80011ae:	481b      	ldr	r0, [pc, #108]	@ (800121c <DS3231_Write+0x8c>)
 80011b0:	f7ff ffac 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 80011b4:	bf00      	nop
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <DS3231_Write+0x8c>)
 80011b8:	f7ff ff4a 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <DS3231_Write+0x26>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 80011c2:	21d0      	movs	r1, #208	@ 0xd0
 80011c4:	4815      	ldr	r0, [pc, #84]	@ (800121c <DS3231_Write+0x8c>)
 80011c6:	f7ff ffce 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80011ca:	bf00      	nop
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <DS3231_Write+0x8c>)
 80011ce:	f7ff ff52 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <DS3231_Write+0x3c>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <DS3231_Write+0x8c>)
 80011da:	f7ff ff72 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <DS3231_Write+0x8c>)
 80011e4:	f7ff ffbf 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011e8:	bf00      	nop
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <DS3231_Write+0x8c>)
 80011ec:	f7ff ff0a 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f9      	beq.n	80011ea <DS3231_Write+0x5a>
    LL_I2C_TransmitData8(I2C1, data);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <DS3231_Write+0x8c>)
 80011fc:	f7ff ffb3 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001200:	bf00      	nop
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <DS3231_Write+0x8c>)
 8001204:	f7ff fefe 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <DS3231_Write+0x72>
    LL_I2C_GenerateStopCondition(I2C1);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <DS3231_Write+0x8c>)
 8001210:	f7ff ff8c 	bl	800112c <LL_I2C_GenerateStopCondition>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400

08001220 <DS3231_Read>:

uint8_t DS3231_Read(uint8_t reg)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 800122e:	bf00      	nop
 8001230:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <DS3231_Read+0xc4>)
 8001232:	f7ff ff33 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <DS3231_Read+0x10>
    LL_I2C_GenerateStartCondition(I2C1);
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <DS3231_Read+0xc4>)
 800123e:	f7ff ff65 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001242:	bf00      	nop
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <DS3231_Read+0xc4>)
 8001246:	f7ff ff03 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <DS3231_Read+0x24>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 8001250:	21d0      	movs	r1, #208	@ 0xd0
 8001252:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <DS3231_Read+0xc4>)
 8001254:	f7ff ff87 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001258:	bf00      	nop
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <DS3231_Read+0xc4>)
 800125c:	f7ff ff0b 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <DS3231_Read+0x3a>
    LL_I2C_ClearFlag_ADDR(I2C1);
 8001266:	481f      	ldr	r0, [pc, #124]	@ (80012e4 <DS3231_Read+0xc4>)
 8001268:	f7ff ff2b 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <DS3231_Read+0xc4>)
 8001272:	f7ff ff78 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001276:	bf00      	nop
 8001278:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <DS3231_Read+0xc4>)
 800127a:	f7ff fec3 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <DS3231_Read+0x58>
    LL_I2C_GenerateStartCondition(I2C1);
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <DS3231_Read+0xc4>)
 8001286:	f7ff ff41 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800128a:	bf00      	nop
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <DS3231_Read+0xc4>)
 800128e:	f7ff fedf 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <DS3231_Read+0x6c>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS | 1);
 8001298:	21d1      	movs	r1, #209	@ 0xd1
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <DS3231_Read+0xc4>)
 800129c:	f7ff ff63 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80012a0:	bf00      	nop
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <DS3231_Read+0xc4>)
 80012a4:	f7ff fee7 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f9      	beq.n	80012a2 <DS3231_Read+0x82>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b0:	f7ff ff07 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80012b4:	2100      	movs	r1, #0
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b8:	f7ff ff15 	bl	80010e6 <LL_I2C_AcknowledgeNextData>
    while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80012bc:	bf00      	nop
 80012be:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <DS3231_Read+0xc4>)
 80012c0:	f7ff feb3 	bl	800102a <LL_I2C_IsActiveFlag_RXNE>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <DS3231_Read+0x9e>
    data = LL_I2C_ReceiveData8(I2C1);
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <DS3231_Read+0xc4>)
 80012cc:	f7ff ff3e 	bl	800114c <LL_I2C_ReceiveData8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
    LL_I2C_GenerateStopCondition(I2C1);
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <DS3231_Read+0xc4>)
 80012d6:	f7ff ff29 	bl	800112c <LL_I2C_GenerateStopCondition>
    return data;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400

080012e8 <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t hour, uint8_t min, uint8_t sec)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	460b      	mov	r3, r1
 8001300:	717b      	strb	r3, [r7, #5]
 8001302:	4613      	mov	r3, r2
 8001304:	713b      	strb	r3, [r7, #4]
    DS3231_Write(0x00, ((sec / 10) << 4) | (sec % 10));
 8001306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130a:	4a55      	ldr	r2, [pc, #340]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b258      	sxtb	r0, r3
 8001318:	f897 2020 	ldrb.w	r2, [r7, #32]
 800131c:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4303      	orrs	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff28 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x01, ((min / 10) << 4) | (min % 10));
 8001340:	7f3b      	ldrb	r3, [r7, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	b258      	sxtb	r0, r3
 8001350:	7f3a      	ldrb	r2, [r7, #28]
 8001352:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001354:	fba3 1302 	umull	r1, r3, r3, r2
 8001358:	08d9      	lsrs	r1, r3, #3
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4303      	orrs	r3, r0
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff0d 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x02, ((hour / 10) << 4) | (hour % 10));
 8001376:	7e3b      	ldrb	r3, [r7, #24]
 8001378:	4a39      	ldr	r2, [pc, #228]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b258      	sxtb	r0, r3
 8001386:	7e3a      	ldrb	r2, [r7, #24]
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800138a:	fba3 1302 	umull	r1, r3, r3, r2
 800138e:	08d9      	lsrs	r1, r3, #3
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4303      	orrs	r3, r0
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fef2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x03, day);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2003      	movs	r0, #3
 80013b2:	f7ff feed 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x04, ((date / 10) << 4) | (date % 10));
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b258      	sxtb	r0, r3
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4303      	orrs	r3, r0
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff fed2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x05, ((month / 10) << 4) | (month % 10));
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b258      	sxtb	r0, r3
 80013fc:	797a      	ldrb	r2, [r7, #5]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001400:	fba3 1302 	umull	r1, r3, r3, r2
 8001404:	08d9      	lsrs	r1, r3, #3
 8001406:	460b      	mov	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4303      	orrs	r3, r0
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff feb7 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x06, ((year / 10) << 4) | (year % 10));
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b258      	sxtb	r0, r3
 8001432:	793a      	ldrb	r2, [r7, #4]
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001436:	fba3 1302 	umull	r1, r3, r3, r2
 800143a:	08d9      	lsrs	r1, r3, #3
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4303      	orrs	r3, r0
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2006      	movs	r0, #6
 8001454:	f7ff fe9c 	bl	8001190 <DS3231_Write>
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	cccccccd 	.word	0xcccccccd

08001464 <DS3231_GetDateTime>:

void DS3231_GetDateTime(uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year, uint8_t *hour, uint8_t *min, uint8_t *sec)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    *sec = DS3231_Read(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fed4 	bl	8001220 <DS3231_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	701a      	strb	r2, [r3, #0]
    *min = DS3231_Read(0x01);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fecd 	bl	8001220 <DS3231_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	701a      	strb	r2, [r3, #0]
    *hour = DS3231_Read(0x02);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fec6 	bl	8001220 <DS3231_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	701a      	strb	r2, [r3, #0]
    *day = DS3231_Read(0x03);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff febf 	bl	8001220 <DS3231_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
    *date = DS3231_Read(0x04);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff feb8 	bl	8001220 <DS3231_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	701a      	strb	r2, [r3, #0]
    *month = DS3231_Read(0x05);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f7ff feb1 	bl	8001220 <DS3231_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	701a      	strb	r2, [r3, #0]
    *year = DS3231_Read(0x06);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff feaa 	bl	8001220 <DS3231_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]

    *sec = ((*sec >> 4) * 10) + (*sec & 0x0F);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	701a      	strb	r2, [r3, #0]
    *min = ((*min >> 4) * 10) + (*min & 0x0F);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	701a      	strb	r2, [r3, #0]
    *hour = ((*hour >> 4) * 10) + (*hour & 0x0F);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	701a      	strb	r2, [r3, #0]
    *date = ((*date >> 4) * 10) + (*date & 0x0F);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	701a      	strb	r2, [r3, #0]
    *month = ((*month >> 4) * 10) + (*month & 0x0F);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	701a      	strb	r2, [r3, #0]
    *year = ((*year >> 4) * 10) + (*year & 0x0F);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <DS3231_GetTemperature>:

float DS3231_GetTemperature(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
    uint8_t temp_msb = DS3231_Read(0x11);
 80015ba:	2011      	movs	r0, #17
 80015bc:	f7ff fe30 	bl	8001220 <DS3231_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_lsb = DS3231_Read(0x12);
 80015c4:	2012      	movs	r0, #18
 80015c6:	f7ff fe2b 	bl	8001220 <DS3231_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71bb      	strb	r3, [r7, #6]
    int16_t temp = (temp_msb << 8) | temp_lsb;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
    float temperature = temp / 256.0;
 80015dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffaf 	bl	8000544 <__aeabi_i2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <DS3231_GetTemperature+0x5c>)
 80015ec:	f7ff f93e 	bl	800086c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb06 	bl	8000c08 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	603b      	str	r3, [r7, #0]
    return temperature;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40700000 	.word	0x40700000

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	@ (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ffc2 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <systick_timer_init+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <systick_timer_init+0x20>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffc3 	bl	8001668 <SysTick_Config>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003b0 	.word	0x200003b0
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b02      	cmp	r3, #2
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b20      	cmp	r3, #32
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001798:	2b80      	cmp	r3, #128	@ 0x80
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001804:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800181a:	b480      	push	{r7}
 800181c:	b089      	sub	sp, #36	@ 0x24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	e853 3f00 	ldrex	r3, [r3]
 800182e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	330c      	adds	r3, #12
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	61ba      	str	r2, [r7, #24]
 8001840:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001842:	6979      	ldr	r1, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	e841 2300 	strex	r3, r2, [r1]
 800184a:	613b      	str	r3, [r7, #16]
   return(result);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e7      	bne.n	8001822 <LL_USART_EnableIT_RXNE+0x8>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3724      	adds	r7, #36	@ 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	330c      	adds	r3, #12
 800186c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	e853 3f00 	ldrex	r3, [r3]
 8001874:	60bb      	str	r3, [r7, #8]
   return(result);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	330c      	adds	r3, #12
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	61ba      	str	r2, [r7, #24]
 8001886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	e841 2300 	strex	r3, r2, [r1]
 8001890:	613b      	str	r3, [r7, #16]
   return(result);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e7      	bne.n	8001868 <LL_USART_EnableIT_TXE+0x8>
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b089      	sub	sp, #36	@ 0x24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3314      	adds	r3, #20
 80018b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	e853 3f00 	ldrex	r3, [r3]
 80018ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3314      	adds	r3, #20
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	61ba      	str	r2, [r7, #24]
 80018cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	e841 2300 	strex	r3, r2, [r1]
 80018d6:	613b      	str	r3, [r7, #16]
   return(result);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e7      	bne.n	80018ae <LL_USART_EnableIT_ERROR+0x8>
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	@ 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	330c      	adds	r3, #12
 80018f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	e853 3f00 	ldrex	r3, [r3]
 8001900:	60bb      	str	r3, [r7, #8]
   return(result);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f023 0320 	bic.w	r3, r3, #32
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	61ba      	str	r2, [r7, #24]
 8001912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	e841 2300 	strex	r3, r2, [r1]
 800191c:	613b      	str	r3, [r7, #16]
   return(result);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e7      	bne.n	80018f4 <LL_USART_DisableIT_RXNE+0x8>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001932:	b480      	push	{r7}
 8001934:	b089      	sub	sp, #36	@ 0x24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330c      	adds	r3, #12
 800193e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	e853 3f00 	ldrex	r3, [r3]
 8001946:	60bb      	str	r3, [r7, #8]
   return(result);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	330c      	adds	r3, #12
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	61ba      	str	r2, [r7, #24]
 8001958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195a:	6979      	ldr	r1, [r7, #20]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	e841 2300 	strex	r3, r2, [r1]
 8001962:	613b      	str	r3, [r7, #16]
   return(result);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e7      	bne.n	800193a <LL_USART_DisableIT_TXE+0x8>
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3724      	adds	r7, #36	@ 0x24
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b20      	cmp	r3, #32
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b80      	cmp	r3, #128	@ 0x80
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	b2db      	uxtb	r3, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <Ringbuf_init>:


void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001a00:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <Ringbuf_init+0x88>)
 8001a02:	4a21      	ldr	r2, [pc, #132]	@ (8001a88 <Ringbuf_init+0x8c>)
 8001a04:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8001a06:	4b21      	ldr	r3, [pc, #132]	@ (8001a8c <Ringbuf_init+0x90>)
 8001a08:	4a21      	ldr	r2, [pc, #132]	@ (8001a90 <Ringbuf_init+0x94>)
 8001a0a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <Ringbuf_init+0x98>)
 8001a0e:	4a22      	ldr	r2, [pc, #136]	@ (8001a98 <Ringbuf_init+0x9c>)
 8001a10:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <Ringbuf_init+0xa0>)
 8001a14:	4a22      	ldr	r2, [pc, #136]	@ (8001aa0 <Ringbuf_init+0xa4>)
 8001a16:	601a      	str	r2, [r3, #0]
  _rx_buffer5 = &rx_buffer5;
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <Ringbuf_init+0xa8>)
 8001a1a:	4a23      	ldr	r2, [pc, #140]	@ (8001aa8 <Ringbuf_init+0xac>)
 8001a1c:	601a      	str	r2, [r3, #0]
  _tx_buffer5 = &tx_buffer5;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <Ringbuf_init+0xb0>)
 8001a20:	4a23      	ldr	r2, [pc, #140]	@ (8001ab0 <Ringbuf_init+0xb4>)
 8001a22:	601a      	str	r2, [r3, #0]
  _rx_buffer6 = &rx_buffer6;
 8001a24:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <Ringbuf_init+0xb8>)
 8001a26:	4a24      	ldr	r2, [pc, #144]	@ (8001ab8 <Ringbuf_init+0xbc>)
 8001a28:	601a      	str	r2, [r3, #0]
  _tx_buffer6 = &tx_buffer6;
 8001a2a:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <Ringbuf_init+0xc0>)
 8001a2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <Ringbuf_init+0xc4>)
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  LL_USART_EnableIT_ERROR(uart1);
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff36 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart2);
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff31 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart5);
 8001a44:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff2c 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart6);
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff27 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart1);
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fedc 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart2);
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fed7 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart5);
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fed2 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart6);
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fecd 	bl	800181a <LL_USART_EnableIT_RXNE>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200045e8 	.word	0x200045e8
 8001a88:	200005a8 	.word	0x200005a8
 8001a8c:	200045ec 	.word	0x200045ec
 8001a90:	20000db0 	.word	0x20000db0
 8001a94:	200045f0 	.word	0x200045f0
 8001a98:	200015b8 	.word	0x200015b8
 8001a9c:	200045f4 	.word	0x200045f4
 8001aa0:	20001dc0 	.word	0x20001dc0
 8001aa4:	200045f8 	.word	0x200045f8
 8001aa8:	200025c8 	.word	0x200025c8
 8001aac:	200045fc 	.word	0x200045fc
 8001ab0:	20002dd0 	.word	0x20002dd0
 8001ab4:	20004600 	.word	0x20004600
 8001ab8:	200035d8 	.word	0x200035d8
 8001abc:	20004604 	.word	0x20004604
 8001ac0:	20003de0 	.word	0x20003de0
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	2000000c 	.word	0x2000000c

08001ad4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aec:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d031      	beq.n	8001b5e <store_char+0x8a>
	ATOMIC_BLOCK_START(USART1)
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <store_char+0x94>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fef4 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(USART2)
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <store_char+0x98>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff feef 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(UART5)
 8001b0e:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <store_char+0x9c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff feea 	bl	80018ec <LL_USART_DisableIT_RXNE>
	ATOMIC_BLOCK_START(USART6)
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <store_char+0xa0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fee5 	bl	80018ec <LL_USART_DisableIT_RXNE>
    buffer->buffer[buffer->head] = c;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	79f9      	ldrb	r1, [r7, #7]
 8001b2c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
    ATOMIC_BLOCK_END(USART1)
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <store_char+0x94>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe6d 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART2)
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <store_char+0x98>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fe68 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART5)
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <store_char+0x9c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fe63 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART6)
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <store_char+0xa0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe5e 	bl	800181a <LL_USART_EnableIT_RXNE>
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	20000008 	.word	0x20000008
 8001b74:	2000000c 	.word	0x2000000c

08001b78 <Uart_read>:
//	else return -1;
//}
//

int Uart_read(USART_TypeDef *uart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  ring_buffer *_rx_buffer;

  switch ((uint32_t)uart) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a41      	ldr	r2, [pc, #260]	@ (8001c88 <Uart_read+0x110>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d009      	beq.n	8001b9c <Uart_read+0x24>
 8001b88:	4a3f      	ldr	r2, [pc, #252]	@ (8001c88 <Uart_read+0x110>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d812      	bhi.n	8001bb4 <Uart_read+0x3c>
 8001b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c8c <Uart_read+0x114>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <Uart_read+0x2c>
 8001b94:	4a3e      	ldr	r2, [pc, #248]	@ (8001c90 <Uart_read+0x118>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d008      	beq.n	8001bac <Uart_read+0x34>
 8001b9a:	e00b      	b.n	8001bb4 <Uart_read+0x3c>
    case (uint32_t)USART1:
      _rx_buffer = _rx_buffer1;
 8001b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <Uart_read+0x11c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
      break;
 8001ba2:	e00b      	b.n	8001bbc <Uart_read+0x44>
    case (uint32_t)USART2:
      _rx_buffer = _rx_buffer2;
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8001c98 <Uart_read+0x120>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
      break;
 8001baa:	e007      	b.n	8001bbc <Uart_read+0x44>
    case (uint32_t)UART5:
      _rx_buffer = _rx_buffer5;
 8001bac:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <Uart_read+0x124>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
      break;
 8001bb2:	e003      	b.n	8001bbc <Uart_read+0x44>
    default:
      _rx_buffer = _rx_buffer6;
 8001bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca0 <Uart_read+0x128>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
      break;
 8001bba:	bf00      	nop
  }

  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d102      	bne.n	8001bd2 <Uart_read+0x5a>
  {
    return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e055      	b.n	8001c7e <Uart_read+0x106>
  }
  else
  {
    ATOMIC_BLOCK_START(uart)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8001c88 <Uart_read+0x110>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d105      	bne.n	8001be6 <Uart_read+0x6e>
 8001bda:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <Uart_read+0x12c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fe84 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001be4:	e018      	b.n	8001c18 <Uart_read+0xa0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a28      	ldr	r2, [pc, #160]	@ (8001c8c <Uart_read+0x114>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d105      	bne.n	8001bfa <Uart_read+0x82>
 8001bee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <Uart_read+0x130>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fe7a 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001bf8:	e00e      	b.n	8001c18 <Uart_read+0xa0>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a24      	ldr	r2, [pc, #144]	@ (8001c90 <Uart_read+0x118>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d105      	bne.n	8001c0e <Uart_read+0x96>
 8001c02:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <Uart_read+0x134>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fe70 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c0c:	e004      	b.n	8001c18 <Uart_read+0xa0>
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <Uart_read+0x138>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fe6a 	bl	80018ec <LL_USART_DisableIT_RXNE>
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	72fb      	strb	r3, [r7, #11]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    ATOMIC_BLOCK_END(uart)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <Uart_read+0x110>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d105      	bne.n	8001c4a <Uart_read+0xd2>
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <Uart_read+0x12c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fde9 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c48:	e018      	b.n	8001c7c <Uart_read+0x104>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c8c <Uart_read+0x114>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d105      	bne.n	8001c5e <Uart_read+0xe6>
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <Uart_read+0x130>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fddf 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c5c:	e00e      	b.n	8001c7c <Uart_read+0x104>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0b      	ldr	r2, [pc, #44]	@ (8001c90 <Uart_read+0x118>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d105      	bne.n	8001c72 <Uart_read+0xfa>
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <Uart_read+0x134>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fdd5 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001c70:	e004      	b.n	8001c7c <Uart_read+0x104>
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <Uart_read+0x138>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fdcf 	bl	800181a <LL_USART_EnableIT_RXNE>
    return c;
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	40004400 	.word	0x40004400
 8001c90:	40005000 	.word	0x40005000
 8001c94:	200045e8 	.word	0x200045e8
 8001c98:	200045f0 	.word	0x200045f0
 8001c9c:	200045f8 	.word	0x200045f8
 8001ca0:	20004600 	.word	0x20004600
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	2000000c 	.word	0x2000000c

08001cb4 <Uart_write>:

void Uart_write(USART_TypeDef *uart, int c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  ring_buffer *_tx_buffer;
  switch ((uint32_t)uart) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a54      	ldr	r2, [pc, #336]	@ (8001e14 <Uart_write+0x160>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d009      	beq.n	8001cda <Uart_write+0x26>
 8001cc6:	4a53      	ldr	r2, [pc, #332]	@ (8001e14 <Uart_write+0x160>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d812      	bhi.n	8001cf2 <Uart_write+0x3e>
 8001ccc:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <Uart_write+0x164>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <Uart_write+0x2e>
 8001cd2:	4a52      	ldr	r2, [pc, #328]	@ (8001e1c <Uart_write+0x168>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d008      	beq.n	8001cea <Uart_write+0x36>
 8001cd8:	e00b      	b.n	8001cf2 <Uart_write+0x3e>
    case (uint32_t)USART1:
      _tx_buffer = _tx_buffer1;
 8001cda:	4b51      	ldr	r3, [pc, #324]	@ (8001e20 <Uart_write+0x16c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]
      break;
 8001ce0:	e00b      	b.n	8001cfa <Uart_write+0x46>
    case (uint32_t)USART2:
      _tx_buffer = _tx_buffer2;
 8001ce2:	4b50      	ldr	r3, [pc, #320]	@ (8001e24 <Uart_write+0x170>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]
      break;
 8001ce8:	e007      	b.n	8001cfa <Uart_write+0x46>
    case (uint32_t)UART5:
      _tx_buffer = _tx_buffer5;
 8001cea:	4b4f      	ldr	r3, [pc, #316]	@ (8001e28 <Uart_write+0x174>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60fb      	str	r3, [r7, #12]
      break;
 8001cf0:	e003      	b.n	8001cfa <Uart_write+0x46>
    default:
      _tx_buffer = _tx_buffer6;
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001e2c <Uart_write+0x178>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
      break;
 8001cf8:	bf00      	nop
  }

	if (c>=0)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f2c0 8085 	blt.w	8001e0c <Uart_write+0x158>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0e:	60bb      	str	r3, [r7, #8]

		ATOMIC_BLOCK_START(uart)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <Uart_write+0x160>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d105      	bne.n	8001d24 <Uart_write+0x70>
 8001d18:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <Uart_write+0x17c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fde5 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d22:	e018      	b.n	8001d56 <Uart_write+0xa2>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3c      	ldr	r2, [pc, #240]	@ (8001e18 <Uart_write+0x164>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d105      	bne.n	8001d38 <Uart_write+0x84>
 8001d2c:	4b41      	ldr	r3, [pc, #260]	@ (8001e34 <Uart_write+0x180>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fddb 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d36:	e00e      	b.n	8001d56 <Uart_write+0xa2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a38      	ldr	r2, [pc, #224]	@ (8001e1c <Uart_write+0x168>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d105      	bne.n	8001d4c <Uart_write+0x98>
 8001d40:	4b3d      	ldr	r3, [pc, #244]	@ (8001e38 <Uart_write+0x184>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fdd1 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001d4a:	e004      	b.n	8001d56 <Uart_write+0xa2>
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e3c <Uart_write+0x188>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fdcb 	bl	80018ec <LL_USART_DisableIT_RXNE>
		while (i == _tx_buffer->tail);
 8001d56:	bf00      	nop
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d0f9      	beq.n	8001d58 <Uart_write+0xa4>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	b2d1      	uxtb	r1, r2
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
		ATOMIC_BLOCK_END(uart)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	@ (8001e14 <Uart_write+0x160>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d105      	bne.n	8001d8e <Uart_write+0xda>
 8001d82:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <Uart_write+0x17c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fd47 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001d8c:	e018      	b.n	8001dc0 <Uart_write+0x10c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <Uart_write+0x164>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d105      	bne.n	8001da2 <Uart_write+0xee>
 8001d96:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <Uart_write+0x180>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fd3d 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001da0:	e00e      	b.n	8001dc0 <Uart_write+0x10c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <Uart_write+0x168>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d105      	bne.n	8001db6 <Uart_write+0x102>
 8001daa:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <Uart_write+0x184>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fd33 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001db4:	e004      	b.n	8001dc0 <Uart_write+0x10c>
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <Uart_write+0x188>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fd2d 	bl	800181a <LL_USART_EnableIT_RXNE>

		  switch ((uint32_t)uart) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <Uart_write+0x160>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <Uart_write+0x128>
 8001dc8:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <Uart_write+0x160>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d818      	bhi.n	8001e00 <Uart_write+0x14c>
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <Uart_write+0x164>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <Uart_write+0x134>
 8001dd4:	4a11      	ldr	r2, [pc, #68]	@ (8001e1c <Uart_write+0x168>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00c      	beq.n	8001df4 <Uart_write+0x140>
 8001dda:	e011      	b.n	8001e00 <Uart_write+0x14c>
		    case (uint32_t)USART1:
		      LL_USART_EnableIT_TXE(uart1);
 8001ddc:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <Uart_write+0x17c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fd3d 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001de6:	e011      	b.n	8001e0c <Uart_write+0x158>
		    case (uint32_t)USART2:
		      LL_USART_EnableIT_TXE(uart2);
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <Uart_write+0x180>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fd37 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001df2:	e00b      	b.n	8001e0c <Uart_write+0x158>
		    case (uint32_t)UART5:
		      LL_USART_EnableIT_TXE(uart5);
 8001df4:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <Uart_write+0x184>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fd31 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001dfe:	e005      	b.n	8001e0c <Uart_write+0x158>
		    default:
		      LL_USART_EnableIT_TXE(uart6);
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <Uart_write+0x188>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fd2b 	bl	8001860 <LL_USART_EnableIT_TXE>
		      break;
 8001e0a:	bf00      	nop
		  }
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40004400 	.word	0x40004400
 8001e1c:	40005000 	.word	0x40005000
 8001e20:	200045ec 	.word	0x200045ec
 8001e24:	200045f4 	.word	0x200045f4
 8001e28:	200045fc 	.word	0x200045fc
 8001e2c:	20004604 	.word	0x20004604
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	2000000c 	.word	0x2000000c

08001e40 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;
	  switch ((uint32_t)uart) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <IsDataAvailable+0x70>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <IsDataAvailable+0x24>
 8001e50:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <IsDataAvailable+0x70>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d812      	bhi.n	8001e7c <IsDataAvailable+0x3c>
 8001e56:	4a17      	ldr	r2, [pc, #92]	@ (8001eb4 <IsDataAvailable+0x74>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <IsDataAvailable+0x2c>
 8001e5c:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <IsDataAvailable+0x78>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d008      	beq.n	8001e74 <IsDataAvailable+0x34>
 8001e62:	e00b      	b.n	8001e7c <IsDataAvailable+0x3c>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001e64:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <IsDataAvailable+0x7c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
	      break;
 8001e6a:	e00b      	b.n	8001e84 <IsDataAvailable+0x44>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <IsDataAvailable+0x80>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
	      break;
 8001e72:	e007      	b.n	8001e84 <IsDataAvailable+0x44>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <IsDataAvailable+0x84>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
	      break;
 8001e7a:	e003      	b.n	8001e84 <IsDataAvailable+0x44>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <IsDataAvailable+0x88>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
	      break;
 8001e82:	bf00      	nop
	  }

  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40004400 	.word	0x40004400
 8001eb8:	40005000 	.word	0x40005000
 8001ebc:	200045e8 	.word	0x200045e8
 8001ec0:	200045f0 	.word	0x200045f0
 8001ec4:	200045f8 	.word	0x200045f8
 8001ec8:	20004600 	.word	0x20004600

08001ecc <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (USART_TypeDef *uart, const char *s)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	while(*s) Uart_write(uart, *s++);
 8001ed6:	e007      	b.n	8001ee8 <Uart_sendstring+0x1c>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	603a      	str	r2, [r7, #0]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fee6 	bl	8001cb4 <Uart_write>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f3      	bne.n	8001ed8 <Uart_sendstring+0xc>
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <Uart_flush>:


}

void Uart_flush (USART_TypeDef *uart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;

	  switch ((uint32_t)uart) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a18      	ldr	r2, [pc, #96]	@ (8001f68 <Uart_flush+0x6c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d009      	beq.n	8001f20 <Uart_flush+0x24>
 8001f0c:	4a16      	ldr	r2, [pc, #88]	@ (8001f68 <Uart_flush+0x6c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d812      	bhi.n	8001f38 <Uart_flush+0x3c>
 8001f12:	4a16      	ldr	r2, [pc, #88]	@ (8001f6c <Uart_flush+0x70>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <Uart_flush+0x2c>
 8001f18:	4a15      	ldr	r2, [pc, #84]	@ (8001f70 <Uart_flush+0x74>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d008      	beq.n	8001f30 <Uart_flush+0x34>
 8001f1e:	e00b      	b.n	8001f38 <Uart_flush+0x3c>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <Uart_flush+0x78>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
	      break;
 8001f26:	e00b      	b.n	8001f40 <Uart_flush+0x44>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <Uart_flush+0x7c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
	      break;
 8001f2e:	e007      	b.n	8001f40 <Uart_flush+0x44>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <Uart_flush+0x80>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
	      break;
 8001f36:	e003      	b.n	8001f40 <Uart_flush+0x44>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <Uart_flush+0x84>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
	      break;
 8001f3e:	bf00      	nop
	  }

	  memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00b fc83 	bl	800d854 <memset>
	  _rx_buffer->head = 0;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	  _rx_buffer->tail = 0;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	40005000 	.word	0x40005000
 8001f74:	200045e8 	.word	0x200045e8
 8001f78:	200045f0 	.word	0x200045f0
 8001f7c:	200045f8 	.word	0x200045f8
 8001f80:	20004600 	.word	0x20004600

08001f84 <Uart_isr>:
	if (so_far == len) return 1;
	else return 0;
}

void Uart_isr (USART_TypeDef *uart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  //  uint32_t isrflags   = LL_USART_ReadReg(uart, SR);
    ring_buffer *_rx_buffer;
    ring_buffer *_tx_buffer;

    switch ((uint32_t)uart) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a46      	ldr	r2, [pc, #280]	@ (80020a8 <Uart_isr+0x124>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <Uart_isr+0x24>
 8001f94:	4a44      	ldr	r2, [pc, #272]	@ (80020a8 <Uart_isr+0x124>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d81b      	bhi.n	8001fd2 <Uart_isr+0x4e>
 8001f9a:	4a44      	ldr	r2, [pc, #272]	@ (80020ac <Uart_isr+0x128>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00a      	beq.n	8001fb6 <Uart_isr+0x32>
 8001fa0:	4a43      	ldr	r2, [pc, #268]	@ (80020b0 <Uart_isr+0x12c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <Uart_isr+0x40>
 8001fa6:	e014      	b.n	8001fd2 <Uart_isr+0x4e>
      case (uint32_t)USART1:
        _rx_buffer = _rx_buffer1;
 8001fa8:	4b42      	ldr	r3, [pc, #264]	@ (80020b4 <Uart_isr+0x130>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer1;
 8001fae:	4b42      	ldr	r3, [pc, #264]	@ (80020b8 <Uart_isr+0x134>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
        break;
 8001fb4:	e014      	b.n	8001fe0 <Uart_isr+0x5c>
      case (uint32_t)USART2:
        _rx_buffer = _rx_buffer2;
 8001fb6:	4b41      	ldr	r3, [pc, #260]	@ (80020bc <Uart_isr+0x138>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer2;
 8001fbc:	4b40      	ldr	r3, [pc, #256]	@ (80020c0 <Uart_isr+0x13c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	613b      	str	r3, [r7, #16]
        break;
 8001fc2:	e00d      	b.n	8001fe0 <Uart_isr+0x5c>
      case (uint32_t)UART5:
        _rx_buffer = _rx_buffer5;
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80020c4 <Uart_isr+0x140>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer5;
 8001fca:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <Uart_isr+0x144>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	613b      	str	r3, [r7, #16]
        break;
 8001fd0:	e006      	b.n	8001fe0 <Uart_isr+0x5c>
      default:
        _rx_buffer = _rx_buffer6;
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80020cc <Uart_isr+0x148>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer6;
 8001fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80020d0 <Uart_isr+0x14c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	613b      	str	r3, [r7, #16]
        break;
 8001fde:	bf00      	nop
    }

    /* if DR is not empty and the Rx Int is enabled */
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff fbbe 	bl	8001762 <LL_USART_IsActiveFlag_RXNE>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02c      	beq.n	8002046 <Uart_isr+0xc2>
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fcc3 	bl	8001978 <LL_USART_IsEnabledIT_RXNE>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d026      	beq.n	8002046 <Uart_isr+0xc2>
//        LL_USART_ReceiveData8(uart);                /* Read status register */
//        unsigned char c = LL_USART_ReceiveData8(uart);    /* Read data register */
//        store_char (c, _rx_buffer);  // store data in buffer
//        return;

        unsigned char data = LL_USART_ReceiveData8(uart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fce3 	bl	80019c4 <LL_USART_ReceiveData8>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fb9a 	bl	800173c <LL_USART_IsActiveFlag_ORE>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10b      	bne.n	8002026 <Uart_isr+0xa2>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fb6e 	bl	80016f0 <LL_USART_IsActiveFlag_FE>
 8002014:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <Uart_isr+0xa2>
            (LL_USART_IsActiveFlag_NE(uart) != RESET))
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fb7b 	bl	8001716 <LL_USART_IsActiveFlag_NE>
 8002020:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <Uart_isr+0xb6>
        {
          // if error, del flag
          LL_USART_ClearFlag_ORE(uart);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fbe5 	bl	80017f6 <LL_USART_ClearFlag_ORE>
          LL_USART_ClearFlag_FE(uart);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fbbe 	bl	80017ae <LL_USART_ClearFlag_FE>
          LL_USART_ClearFlag_NE(uart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fbcd 	bl	80017d2 <LL_USART_ClearFlag_NE>
        }
        else
        {
          store_char(data, _rx_buffer); // store data in buffer
        }
        return;
 8002038:	e032      	b.n	80020a0 <Uart_isr+0x11c>
          store_char(data, _rx_buffer); // store data in buffer
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	6979      	ldr	r1, [r7, #20]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fd48 	bl	8001ad4 <store_char>
        return;
 8002044:	e02c      	b.n	80020a0 <Uart_isr+0x11c>


    }
    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fb9e 	bl	8001788 <LL_USART_IsActiveFlag_TXE>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d026      	beq.n	80020a0 <Uart_isr+0x11c>
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fca3 	bl	800199e <LL_USART_IsEnabledIT_TXE>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d020      	beq.n	80020a0 <Uart_isr+0x11c>
    {
        if(_tx_buffer->head == _tx_buffer->tail)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800206a:	429a      	cmp	r2, r3
 800206c:	d103      	bne.n	8002076 <Uart_isr+0xf2>
        {
          // Buffer empty, so disable interrupts
          LL_USART_DisableIT_TXE(uart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fc5f 	bl	8001932 <LL_USART_DisableIT_TXE>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;

          LL_USART_TransmitData8(uart, c);
        }
        return;
 8002074:	e013      	b.n	800209e <Uart_isr+0x11a>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	73bb      	strb	r3, [r7, #14]
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8002088:	3301      	adds	r3, #1
 800208a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
          LL_USART_TransmitData8(uart, c);
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fca0 	bl	80019de <LL_USART_TransmitData8>
        return;
 800209e:	bf00      	nop
    }
}
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40004400 	.word	0x40004400
 80020b0:	40005000 	.word	0x40005000
 80020b4:	200045e8 	.word	0x200045e8
 80020b8:	200045ec 	.word	0x200045ec
 80020bc:	200045f0 	.word	0x200045f0
 80020c0:	200045f4 	.word	0x200045f4
 80020c4:	200045f8 	.word	0x200045f8
 80020c8:	200045fc 	.word	0x200045fc
 80020cc:	20004600 	.word	0x20004600
 80020d0:	20004604 	.word	0x20004604

080020d4 <send_packet_init>:
		status_ACKsend_update					// taskFunction;
	}
};

void send_packet_init(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
    sendFlag = 0;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <send_packet_init+0x1c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
    retryCount = 0;
 80020de:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <send_packet_init+0x20>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20004709 	.word	0x20004709
 80020f4:	2000470a 	.word	0x2000470a

080020f8 <set_send_flag>:

void set_send_flag(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
    sendFlag = 1;
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <set_send_flag+0x14>)
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	20004709 	.word	0x20004709

08002110 <clear_send_flag>:

void clear_send_flag(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <clear_send_flag+0x14>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20004709 	.word	0x20004709

08002128 <set_fsp_packet>:


void set_fsp_packet(uint8_t *encoded_pkt, uint8_t encoded_len)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	70fb      	strb	r3, [r7, #3]
	while (g_pkt_lock);
 8002134:	bf00      	nop
 8002136:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <set_fsp_packet+0x58>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1fa      	bne.n	8002136 <set_fsp_packet+0xe>
	g_pkt_lock = 1;
 8002140:	4b0f      	ldr	r3, [pc, #60]	@ (8002180 <set_fsp_packet+0x58>)
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
	memset((void *)g_encoded_pkt, 0, sizeof(g_encoded_pkt));
 8002146:	22ff      	movs	r2, #255	@ 0xff
 8002148:	2100      	movs	r1, #0
 800214a:	480e      	ldr	r0, [pc, #56]	@ (8002184 <set_fsp_packet+0x5c>)
 800214c:	f00b fb82 	bl	800d854 <memset>
    memcpy((void *)g_encoded_pkt, encoded_pkt, encoded_len);
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	461a      	mov	r2, r3
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	480b      	ldr	r0, [pc, #44]	@ (8002184 <set_fsp_packet+0x5c>)
 8002158:	f00b fbfb 	bl	800d952 <memcpy>
    g_encoded_len = encoded_len;
 800215c:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <set_fsp_packet+0x60>)
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	7013      	strb	r3, [r2, #0]
    g_pkt_lock = 0;
 8002162:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <set_fsp_packet+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
    sendFlag = 1;
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <set_fsp_packet+0x64>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);
 800216e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002172:	2003      	movs	r0, #3
 8002174:	f007 fbbc 	bl	80098f0 <SCH_TIM_Start>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20004708 	.word	0x20004708
 8002184:	20004608 	.word	0x20004608
 8002188:	20004707 	.word	0x20004707
 800218c:	20004709 	.word	0x20004709

08002190 <send_packet_create_task>:

void send_packet_create_task(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&ACKsend_task_context.taskHandle, &ACKsend_task_context.taskProperty);
 8002194:	4902      	ldr	r1, [pc, #8]	@ (80021a0 <send_packet_create_task+0x10>)
 8002196:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <send_packet_create_task+0x14>)
 8002198:	f007 fbd6 	bl	8009948 <SCH_TASK_CreateTask>
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000014 	.word	0x20000014
 80021a4:	20000010 	.word	0x20000010

080021a8 <status_ACKsend_update>:


uint8_t sendBuffer[FSP_PKT_MAX_LENGTH];

void	status_ACKsend_update(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0

			if (SCH_TIM_HasCompleted(SCH_TIM_ACK))
 80021ae:	2003      	movs	r0, #3
 80021b0:	f007 fbb4 	bl	800991c <SCH_TIM_HasCompleted>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d04f      	beq.n	800225a <status_ACKsend_update+0xb2>
			{

			    if (sendFlag)
 80021ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <status_ACKsend_update+0xbc>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d045      	beq.n	8002250 <status_ACKsend_update+0xa8>
			    {
			    	if(retryCount < MAX_RETRIES){
 80021c4:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <status_ACKsend_update+0xc0>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d833      	bhi.n	8002236 <status_ACKsend_update+0x8e>
			    		while (g_pkt_lock);
 80021ce:	bf00      	nop
 80021d0:	4b26      	ldr	r3, [pc, #152]	@ (800226c <status_ACKsend_update+0xc4>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1fa      	bne.n	80021d0 <status_ACKsend_update+0x28>
			    		g_pkt_lock = 1;
 80021da:	4b24      	ldr	r3, [pc, #144]	@ (800226c <status_ACKsend_update+0xc4>)
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
			            memcpy(sendBuffer, (const void *)g_encoded_pkt, g_encoded_len);
 80021e0:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <status_ACKsend_update+0xc8>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	4922      	ldr	r1, [pc, #136]	@ (8002274 <status_ACKsend_update+0xcc>)
 80021ea:	4823      	ldr	r0, [pc, #140]	@ (8002278 <status_ACKsend_update+0xd0>)
 80021ec:	f00b fbb1 	bl	800d952 <memcpy>
			            for (int i = 0; i < g_encoded_len; i++) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	e00a      	b.n	800220c <status_ACKsend_update+0x64>
			                Uart_write(USART1, sendBuffer[i]);
 80021f6:	4a20      	ldr	r2, [pc, #128]	@ (8002278 <status_ACKsend_update+0xd0>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	481e      	ldr	r0, [pc, #120]	@ (800227c <status_ACKsend_update+0xd4>)
 8002202:	f7ff fd57 	bl	8001cb4 <Uart_write>
			            for (int i = 0; i < g_encoded_len; i++) {
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3301      	adds	r3, #1
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <status_ACKsend_update+0xc8>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4293      	cmp	r3, r2
 8002218:	dbed      	blt.n	80021f6 <status_ACKsend_update+0x4e>
			            }
						retryCount++;
 800221a:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <status_ACKsend_update+0xc0>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	b2da      	uxtb	r2, r3
 8002224:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <status_ACKsend_update+0xc0>)
 8002226:	701a      	strb	r2, [r3, #0]
						sendFlag = 1;
 8002228:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <status_ACKsend_update+0xbc>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
						g_pkt_lock = 0;
 800222e:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <status_ACKsend_update+0xc4>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e00c      	b.n	8002250 <status_ACKsend_update+0xa8>
			    	}
			    	else {
			    		retryCount = 0;
 8002236:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <status_ACKsend_update+0xc0>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
			    		clear_send_flag();
 800223c:	f7ff ff68 	bl	8002110 <clear_send_flag>
			    		Uart_sendstring(UART5, "TIMEOUT_NORESPONE");
 8002240:	490f      	ldr	r1, [pc, #60]	@ (8002280 <status_ACKsend_update+0xd8>)
 8002242:	4810      	ldr	r0, [pc, #64]	@ (8002284 <status_ACKsend_update+0xdc>)
 8002244:	f7ff fe42 	bl	8001ecc <Uart_sendstring>
			    		Uart_sendstring(UART5, "\r\n> ");
 8002248:	490f      	ldr	r1, [pc, #60]	@ (8002288 <status_ACKsend_update+0xe0>)
 800224a:	480e      	ldr	r0, [pc, #56]	@ (8002284 <status_ACKsend_update+0xdc>)
 800224c:	f7ff fe3e 	bl	8001ecc <Uart_sendstring>
			        }


			    }

				SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);	//restart
 8002250:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002254:	2003      	movs	r0, #3
 8002256:	f007 fb4b 	bl	80098f0 <SCH_TIM_Start>

			}


		//	[set trang thai]
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20004709 	.word	0x20004709
 8002268:	2000470a 	.word	0x2000470a
 800226c:	20004708 	.word	0x20004708
 8002270:	20004707 	.word	0x20004707
 8002274:	20004608 	.word	0x20004608
 8002278:	2000470c 	.word	0x2000470c
 800227c:	40011000 	.word	0x40011000
 8002280:	08010e00 	.word	0x08010e00
 8002284:	40005000 	.word	0x40005000
 8002288:	08010e14 	.word	0x08010e14

0800228c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	619a      	str	r2, [r3, #24]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <Cmd_iou_set_temp>:
//
//    return CMDLINE_PENDING;
//}

int Cmd_iou_set_temp(int argc, char *argv[])
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80022ae:	af02      	add	r7, sp, #8
 80022b0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80022b4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80022b8:	6018      	str	r0, [r3, #0]
 80022ba:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80022be:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80022c2:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 80022c4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80022c8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	dc01      	bgt.n	80022d6 <Cmd_iou_set_temp+0x2e>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0ba      	b.n	800244c <Cmd_iou_set_temp+0x1a4>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 80022d6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80022da:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	dd01      	ble.n	80022e8 <Cmd_iou_set_temp+0x40>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e0b1      	b.n	800244c <Cmd_iou_set_temp+0x1a4>

    uint8_t channel = atoi(argv[1]);
 80022e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80022ec:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3304      	adds	r3, #4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f00a f99e 	bl	800c638 <atoi>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002302:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002306:	2b03      	cmp	r3, #3
 8002308:	d901      	bls.n	800230e <Cmd_iou_set_temp+0x66>
 800230a:	2304      	movs	r3, #4
 800230c:	e09e      	b.n	800244c <Cmd_iou_set_temp+0x1a4>

    uint16_t temp = atoi(argv[2]);
 800230e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002312:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3308      	adds	r3, #8
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f00a f98b 	bl	800c638 <atoi>
 8002322:	4603      	mov	r3, r0
 8002324:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
    if (temp > 500)    return CMDLINE_INVALID_ARG;
 8002328:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 800232c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002330:	d901      	bls.n	8002336 <Cmd_iou_set_temp+0x8e>
 8002332:	2304      	movs	r3, #4
 8002334:	e08a      	b.n	800244c <Cmd_iou_set_temp+0x1a4>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002336:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800233a:	4847      	ldr	r0, [pc, #284]	@ (8002458 <Cmd_iou_set_temp+0x1b0>)
 800233c:	f7ff ffa6 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002340:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002344:	4844      	ldr	r0, [pc, #272]	@ (8002458 <Cmd_iou_set_temp+0x1b0>)
 8002346:	f7ff ffa1 	bl	800228c <LL_GPIO_SetOutputPin>


    // Create the command payload
    uint8_t cmd  = CMD_CODE_SET_TEMP;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t payload[3];
    payload[0]  = channel;
 8002350:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002354:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = (uint8_t)(temp >> 8);   //high
 8002358:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	b29b      	uxth	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(temp & 0xFF); //low
 8002366:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    fsp_packet_t  fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002370:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002374:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8002378:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	2301      	movs	r3, #1
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2305      	movs	r3, #5
 8002384:	2203      	movs	r2, #3
 8002386:	f007 fc9f 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800238a:	f107 020b 	add.w	r2, r7, #11
 800238e:	f107 010c 	add.w	r1, r7, #12
 8002392:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002396:	4618      	mov	r0, r3
 8002398:	f007 fd1c 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 800239c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80023a0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d02c      	beq.n	8002404 <Cmd_iou_set_temp+0x15c>
        for (int i = 0; i < frame_len; i++) {
 80023aa:	2300      	movs	r3, #0
 80023ac:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80023b0:	e010      	b.n	80023d4 <Cmd_iou_set_temp+0x12c>
            Uart_write(USART1, encoded_frame[i]);
 80023b2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80023b6:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 80023ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4825      	ldr	r0, [pc, #148]	@ (800245c <Cmd_iou_set_temp+0x1b4>)
 80023c6:	f7ff fc75 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80023ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80023ce:	3301      	adds	r3, #1
 80023d0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80023d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80023d8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80023e4:	4293      	cmp	r3, r2
 80023e6:	dbe4      	blt.n	80023b2 <Cmd_iou_set_temp+0x10a>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80023e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80023ec:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fe95 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80023fe:	f7ff fe7b 	bl	80020f8 <set_send_flag>
 8002402:	e022      	b.n	800244a <Cmd_iou_set_temp+0x1a2>
    }else{
    	fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002404:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002408:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800240c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	2301      	movs	r3, #1
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2305      	movs	r3, #5
 8002418:	2203      	movs	r2, #3
 800241a:	f007 fc55 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
    	frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800241e:	f107 020b 	add.w	r2, r7, #11
 8002422:	f107 010c 	add.w	r1, r7, #12
 8002426:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800242a:	4618      	mov	r0, r3
 800242c:	f007 fcd2 	bl	8009dd4 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8002430:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002434:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe71 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8002446:	f7ff fe57 	bl	80020f8 <set_send_flag>
//  ==>>>> khi gui thi mo cong ra, + delay vai ms -> Set co`
//	==>>>> Neu vay thi luon luon mo cong, khi mà nhắn bên 1 2 3 4, nhắn bên 1 thì mở luôn bên 1
//	==>>>> Nhắn bên 2 thì mở luôn bên 2 nếu mà chưa nhận được ack -> busy please wait (processing...)
//  ==>>>> Đoạn đấy bỏ vào trong timeout -> Sau đó mới hiện ok, hoặc done gì đó

    return CMDLINE_PENDING;
 800244a:	2305      	movs	r3, #5
}
 800244c:	4618      	mov	r0, r3
 800244e:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40020000 	.word	0x40020000
 800245c:	40011000 	.word	0x40011000

08002460 <Cmd_iou_get_temp>:


int Cmd_iou_get_temp(int argc, char *argv[])
{
 8002460:	b580      	push	{r7, lr}
 8002462:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8002466:	af02      	add	r7, sp, #8
 8002468:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800246c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002470:	6018      	str	r0, [r3, #0]
 8002472:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002476:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800247a:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 800247c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002480:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b02      	cmp	r3, #2
 8002488:	dc01      	bgt.n	800248e <Cmd_iou_get_temp+0x2e>
 800248a:	2303      	movs	r3, #3
 800248c:	e0b1      	b.n	80025f2 <Cmd_iou_get_temp+0x192>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 800248e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002492:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b03      	cmp	r3, #3
 800249a:	dd01      	ble.n	80024a0 <Cmd_iou_get_temp+0x40>
 800249c:	2302      	movs	r3, #2
 800249e:	e0a8      	b.n	80025f2 <Cmd_iou_get_temp+0x192>


    uint8_t sensor = atoi(argv[1]);
 80024a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80024a4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3304      	adds	r3, #4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f00a f8c2 	bl	800c638 <atoi>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (sensor > 1)    return CMDLINE_INVALID_ARG;
 80024ba:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d901      	bls.n	80024c6 <Cmd_iou_get_temp+0x66>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e095      	b.n	80025f2 <Cmd_iou_get_temp+0x192>

    uint8_t channel = atoi(argv[2]);
 80024c6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80024ca:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3308      	adds	r3, #8
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f00a f8af 	bl	800c638 <atoi>
 80024da:	4603      	mov	r3, r0
 80024dc:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80024e0:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d901      	bls.n	80024ec <Cmd_iou_get_temp+0x8c>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e082      	b.n	80025f2 <Cmd_iou_get_temp+0x192>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80024ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024f0:	4842      	ldr	r0, [pc, #264]	@ (80025fc <Cmd_iou_get_temp+0x19c>)
 80024f2:	f7ff fecb 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80024f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024fa:	4840      	ldr	r0, [pc, #256]	@ (80025fc <Cmd_iou_get_temp+0x19c>)
 80024fc:	f7ff fec6 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_GET_TEMP;
 8002500:	2302      	movs	r3, #2
 8002502:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    uint8_t payload[2];


    payload[0] = sensor;
 8002506:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800250a:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1] = channel;
 800250e:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8002512:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002516:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800251a:	f897 0211 	ldrb.w	r0, [r7, #529]	@ 0x211
 800251e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	2301      	movs	r3, #1
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2305      	movs	r3, #5
 800252a:	2202      	movs	r2, #2
 800252c:	f007 fbcc 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002530:	f107 020b 	add.w	r2, r7, #11
 8002534:	f107 010c 	add.w	r1, r7, #12
 8002538:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800253c:	4618      	mov	r0, r3
 800253e:	f007 fc49 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 8002542:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002546:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d02c      	beq.n	80025aa <Cmd_iou_get_temp+0x14a>
        for (int i = 0; i < frame_len; i++) {
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002556:	e010      	b.n	800257a <Cmd_iou_get_temp+0x11a>
            Uart_write(USART1, encoded_frame[i]);
 8002558:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800255c:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 8002560:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002564:	4413      	add	r3, r2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	4825      	ldr	r0, [pc, #148]	@ (8002600 <Cmd_iou_get_temp+0x1a0>)
 800256c:	f7ff fba2 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002570:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002574:	3301      	adds	r3, #1
 8002576:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800257a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800257e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800258a:	4293      	cmp	r3, r2
 800258c:	dbe4      	blt.n	8002558 <Cmd_iou_get_temp+0xf8>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800258e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002592:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fdc2 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80025a4:	f7ff fda8 	bl	80020f8 <set_send_flag>
 80025a8:	e022      	b.n	80025f0 <Cmd_iou_get_temp+0x190>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80025aa:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80025ae:	f897 0211 	ldrb.w	r0, [r7, #529]	@ 0x211
 80025b2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	2301      	movs	r3, #1
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2305      	movs	r3, #5
 80025be:	2202      	movs	r2, #2
 80025c0:	f007 fb82 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80025c4:	f107 020b 	add.w	r2, r7, #11
 80025c8:	f107 010c 	add.w	r1, r7, #12
 80025cc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80025d0:	4618      	mov	r0, r3
 80025d2:	f007 fbff 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80025d6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80025da:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fd9e 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80025ec:	f7ff fd84 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80025f0:	2305      	movs	r3, #5
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40020000 	.word	0x40020000
 8002600:	40011000 	.word	0x40011000

08002604 <Cmd_iou_temp_setpoint>:

int Cmd_iou_temp_setpoint(int argc, char *argv[])
{
 8002604:	b580      	push	{r7, lr}
 8002606:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800260a:	af02      	add	r7, sp, #8
 800260c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002610:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002614:	6018      	str	r0, [r3, #0]
 8002616:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800261a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800261e:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8002620:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002624:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	dc01      	bgt.n	8002632 <Cmd_iou_temp_setpoint+0x2e>
 800262e:	2303      	movs	r3, #3
 8002630:	e09a      	b.n	8002768 <Cmd_iou_temp_setpoint+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8002632:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002636:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b02      	cmp	r3, #2
 800263e:	dd01      	ble.n	8002644 <Cmd_iou_temp_setpoint+0x40>
 8002640:	2302      	movs	r3, #2
 8002642:	e091      	b.n	8002768 <Cmd_iou_temp_setpoint+0x164>
    uint8_t channel = atoi(argv[1]);
 8002644:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002648:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3304      	adds	r3, #4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f009 fff0 	bl	800c638 <atoi>
 8002658:	4603      	mov	r3, r0
 800265a:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800265e:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002662:	2b03      	cmp	r3, #3
 8002664:	d901      	bls.n	800266a <Cmd_iou_temp_setpoint+0x66>
 8002666:	2304      	movs	r3, #4
 8002668:	e07e      	b.n	8002768 <Cmd_iou_temp_setpoint+0x164>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800266a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800266e:	4841      	ldr	r0, [pc, #260]	@ (8002774 <Cmd_iou_temp_setpoint+0x170>)
 8002670:	f7ff fe0c 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002674:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002678:	483e      	ldr	r0, [pc, #248]	@ (8002774 <Cmd_iou_temp_setpoint+0x170>)
 800267a:	f7ff fe07 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_TEMP_SETPOINT;
 800267e:	2303      	movs	r3, #3
 8002680:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    uint8_t payload[1];
    payload[0] = channel;
 8002684:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002688:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800268c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002690:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8002694:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2301      	movs	r3, #1
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2305      	movs	r3, #5
 80026a0:	2201      	movs	r2, #1
 80026a2:	f007 fb11 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80026a6:	f107 020f 	add.w	r2, r7, #15
 80026aa:	f107 0110 	add.w	r1, r7, #16
 80026ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026b2:	4618      	mov	r0, r3
 80026b4:	f007 fb8e 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 80026b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80026bc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02c      	beq.n	8002720 <Cmd_iou_temp_setpoint+0x11c>
        for (int i = 0; i < frame_len; i++) {
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80026cc:	e010      	b.n	80026f0 <Cmd_iou_temp_setpoint+0xec>
            Uart_write(USART1, encoded_frame[i]);
 80026ce:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80026d2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80026d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4825      	ldr	r0, [pc, #148]	@ (8002778 <Cmd_iou_temp_setpoint+0x174>)
 80026e2:	f7ff fae7 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80026e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80026ea:	3301      	adds	r3, #1
 80026ec:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80026f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80026f4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002700:	4293      	cmp	r3, r2
 8002702:	dbe4      	blt.n	80026ce <Cmd_iou_temp_setpoint+0xca>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002704:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002708:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fd07 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800271a:	f7ff fced 	bl	80020f8 <set_send_flag>
 800271e:	e022      	b.n	8002766 <Cmd_iou_temp_setpoint+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002720:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002724:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8002728:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	2301      	movs	r3, #1
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2305      	movs	r3, #5
 8002734:	2201      	movs	r2, #1
 8002736:	f007 fac7 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800273a:	f107 020f 	add.w	r2, r7, #15
 800273e:	f107 0110 	add.w	r1, r7, #16
 8002742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002746:	4618      	mov	r0, r3
 8002748:	f007 fb44 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800274c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002750:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fce3 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002762:	f7ff fcc9 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002766:	2305      	movs	r3, #5
}
 8002768:	4618      	mov	r0, r3
 800276a:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40020000 	.word	0x40020000
 8002778:	40011000 	.word	0x40011000

0800277c <Cmd_iou_tec_ena>:

int Cmd_iou_tec_ena(int argc, char *argv[])
{
 800277c:	b580      	push	{r7, lr}
 800277e:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8002782:	af02      	add	r7, sp, #8
 8002784:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002788:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800278c:	6018      	str	r0, [r3, #0]
 800278e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002792:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002796:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8002798:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800279c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	dc01      	bgt.n	80027aa <Cmd_iou_tec_ena+0x2e>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e09a      	b.n	80028e0 <Cmd_iou_tec_ena+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80027aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80027ae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	dd01      	ble.n	80027bc <Cmd_iou_tec_ena+0x40>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e091      	b.n	80028e0 <Cmd_iou_tec_ena+0x164>
    uint8_t channel = atoi(argv[1]);
 80027bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80027c0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3304      	adds	r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f009 ff34 	bl	800c638 <atoi>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80027d6:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d901      	bls.n	80027e2 <Cmd_iou_tec_ena+0x66>
 80027de:	2304      	movs	r3, #4
 80027e0:	e07e      	b.n	80028e0 <Cmd_iou_tec_ena+0x164>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80027e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027e6:	4841      	ldr	r0, [pc, #260]	@ (80028ec <Cmd_iou_tec_ena+0x170>)
 80027e8:	f7ff fd50 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80027ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027f0:	483e      	ldr	r0, [pc, #248]	@ (80028ec <Cmd_iou_tec_ena+0x170>)
 80027f2:	f7ff fd4b 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_TEC_ENA;
 80027f6:	2304      	movs	r3, #4
 80027f8:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    uint8_t payload[1];
    payload[0] = channel;
 80027fc:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002800:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002804:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002808:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 800280c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	2301      	movs	r3, #1
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2305      	movs	r3, #5
 8002818:	2201      	movs	r2, #1
 800281a:	f007 fa55 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800281e:	f107 020f 	add.w	r2, r7, #15
 8002822:	f107 0110 	add.w	r1, r7, #16
 8002826:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800282a:	4618      	mov	r0, r3
 800282c:	f007 fad2 	bl	8009dd4 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002830:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002834:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d02c      	beq.n	8002898 <Cmd_iou_tec_ena+0x11c>
        for (int i = 0; i < frame_len; i++) {
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002844:	e010      	b.n	8002868 <Cmd_iou_tec_ena+0xec>
            Uart_write(USART1, encoded_frame[i]);
 8002846:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800284a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800284e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002852:	4413      	add	r3, r2
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	4825      	ldr	r0, [pc, #148]	@ (80028f0 <Cmd_iou_tec_ena+0x174>)
 800285a:	f7ff fa2b 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800285e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002862:	3301      	adds	r3, #1
 8002864:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002868:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800286c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002878:	4293      	cmp	r3, r2
 800287a:	dbe4      	blt.n	8002846 <Cmd_iou_tec_ena+0xca>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800287c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002880:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002884:	781a      	ldrb	r2, [r3, #0]
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fc4b 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002892:	f7ff fc31 	bl	80020f8 <set_send_flag>
 8002896:	e022      	b.n	80028de <Cmd_iou_tec_ena+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002898:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800289c:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 80028a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2301      	movs	r3, #1
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2305      	movs	r3, #5
 80028ac:	2201      	movs	r2, #1
 80028ae:	f007 fa0b 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80028b2:	f107 020f 	add.w	r2, r7, #15
 80028b6:	f107 0110 	add.w	r1, r7, #16
 80028ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028be:	4618      	mov	r0, r3
 80028c0:	f007 fa88 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80028c4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80028c8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	f107 0310 	add.w	r3, r7, #16
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fc27 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80028da:	f7ff fc0d 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80028de:	2305      	movs	r3, #5
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40011000 	.word	0x40011000

080028f4 <Cmd_iou_tec_dis>:

int Cmd_iou_tec_dis(int argc, char *argv[])
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80028fa:	af02      	add	r7, sp, #8
 80028fc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002900:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002904:	6018      	str	r0, [r3, #0]
 8002906:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800290a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800290e:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8002910:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002914:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	dc01      	bgt.n	8002922 <Cmd_iou_tec_dis+0x2e>
 800291e:	2303      	movs	r3, #3
 8002920:	e09a      	b.n	8002a58 <Cmd_iou_tec_dis+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8002922:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002926:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b02      	cmp	r3, #2
 800292e:	dd01      	ble.n	8002934 <Cmd_iou_tec_dis+0x40>
 8002930:	2302      	movs	r3, #2
 8002932:	e091      	b.n	8002a58 <Cmd_iou_tec_dis+0x164>
    uint8_t channel = atoi(argv[1]);
 8002934:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002938:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3304      	adds	r3, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f009 fe78 	bl	800c638 <atoi>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800294e:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002952:	2b03      	cmp	r3, #3
 8002954:	d901      	bls.n	800295a <Cmd_iou_tec_dis+0x66>
 8002956:	2304      	movs	r3, #4
 8002958:	e07e      	b.n	8002a58 <Cmd_iou_tec_dis+0x164>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800295a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800295e:	4841      	ldr	r0, [pc, #260]	@ (8002a64 <Cmd_iou_tec_dis+0x170>)
 8002960:	f7ff fc94 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002964:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002968:	483e      	ldr	r0, [pc, #248]	@ (8002a64 <Cmd_iou_tec_dis+0x170>)
 800296a:	f7ff fc8f 	bl	800228c <LL_GPIO_SetOutputPin>


    uint8_t cmd  = CMD_CODE_TEC_DIS;
 800296e:	2305      	movs	r3, #5
 8002970:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    uint8_t payload[1];
    payload[0] = channel;
 8002974:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002978:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800297c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002980:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8002984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2301      	movs	r3, #1
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2305      	movs	r3, #5
 8002990:	2201      	movs	r2, #1
 8002992:	f007 f999 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002996:	f107 020f 	add.w	r2, r7, #15
 800299a:	f107 0110 	add.w	r1, r7, #16
 800299e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029a2:	4618      	mov	r0, r3
 80029a4:	f007 fa16 	bl	8009dd4 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80029a8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80029ac:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d02c      	beq.n	8002a10 <Cmd_iou_tec_dis+0x11c>
        for (int i = 0; i < frame_len; i++) {
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80029bc:	e010      	b.n	80029e0 <Cmd_iou_tec_dis+0xec>
            Uart_write(USART1, encoded_frame[i]);
 80029be:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80029c2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80029c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80029ca:	4413      	add	r3, r2
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4619      	mov	r1, r3
 80029d0:	4825      	ldr	r0, [pc, #148]	@ (8002a68 <Cmd_iou_tec_dis+0x174>)
 80029d2:	f7ff f96f 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80029d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80029da:	3301      	adds	r3, #1
 80029dc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80029e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80029e4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80029f0:	4293      	cmp	r3, r2
 80029f2:	dbe4      	blt.n	80029be <Cmd_iou_tec_dis+0xca>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80029f4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80029f8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fb8f 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002a0a:	f7ff fb75 	bl	80020f8 <set_send_flag>
 8002a0e:	e022      	b.n	8002a56 <Cmd_iou_tec_dis+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002a10:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002a14:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8002a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	2301      	movs	r3, #1
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2305      	movs	r3, #5
 8002a24:	2201      	movs	r2, #1
 8002a26:	f007 f94f 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002a2a:	f107 020f 	add.w	r2, r7, #15
 8002a2e:	f107 0110 	add.w	r1, r7, #16
 8002a32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a36:	4618      	mov	r0, r3
 8002a38:	f007 f9cc 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002a3c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002a40:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fb6b 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002a52:	f7ff fb51 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002a56:	2305      	movs	r3, #5
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40011000 	.word	0x40011000

08002a6c <Cmd_iou_tec_ena_auto>:

int Cmd_iou_tec_ena_auto(int argc, char *argv[])
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8002a72:	af02      	add	r7, sp, #8
 8002a74:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002a78:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002a7c:	6018      	str	r0, [r3, #0]
 8002a7e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002a82:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002a86:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8002a88:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002a8c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	dc01      	bgt.n	8002a9a <Cmd_iou_tec_ena_auto+0x2e>
 8002a96:	2303      	movs	r3, #3
 8002a98:	e09a      	b.n	8002bd0 <Cmd_iou_tec_ena_auto+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8002a9a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002a9e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	dd01      	ble.n	8002aac <Cmd_iou_tec_ena_auto+0x40>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e091      	b.n	8002bd0 <Cmd_iou_tec_ena_auto+0x164>
    uint8_t channel = atoi(argv[1]);
 8002aac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002ab0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f009 fdbc 	bl	800c638 <atoi>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002ac6:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d901      	bls.n	8002ad2 <Cmd_iou_tec_ena_auto+0x66>
 8002ace:	2304      	movs	r3, #4
 8002ad0:	e07e      	b.n	8002bd0 <Cmd_iou_tec_ena_auto+0x164>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002ad2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ad6:	4841      	ldr	r0, [pc, #260]	@ (8002bdc <Cmd_iou_tec_ena_auto+0x170>)
 8002ad8:	f7ff fbd8 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002adc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ae0:	483e      	ldr	r0, [pc, #248]	@ (8002bdc <Cmd_iou_tec_ena_auto+0x170>)
 8002ae2:	f7ff fbd3 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_TEC_ENA_AUTO;
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    uint8_t payload[1];
    payload[0] = channel;
 8002aec:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002af0:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002af4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002af8:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8002afc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	2301      	movs	r3, #1
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2305      	movs	r3, #5
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f007 f8dd 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002b0e:	f107 020f 	add.w	r2, r7, #15
 8002b12:	f107 0110 	add.w	r1, r7, #16
 8002b16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f007 f95a 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 8002b20:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002b24:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d02c      	beq.n	8002b88 <Cmd_iou_tec_ena_auto+0x11c>
        for (int i = 0; i < frame_len; i++) {
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002b34:	e010      	b.n	8002b58 <Cmd_iou_tec_ena_auto+0xec>
            Uart_write(USART1, encoded_frame[i]);
 8002b36:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002b3a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8002b3e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
 8002b48:	4825      	ldr	r0, [pc, #148]	@ (8002be0 <Cmd_iou_tec_ena_auto+0x174>)
 8002b4a:	f7ff f8b3 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002b4e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002b52:	3301      	adds	r3, #1
 8002b54:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002b58:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002b5c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	dbe4      	blt.n	8002b36 <Cmd_iou_tec_ena_auto+0xca>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002b6c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002b70:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	f107 0310 	add.w	r3, r7, #16
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fad3 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002b82:	f7ff fab9 	bl	80020f8 <set_send_flag>
 8002b86:	e022      	b.n	8002bce <Cmd_iou_tec_ena_auto+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002b88:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002b8c:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8002b90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	2301      	movs	r3, #1
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f007 f893 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002ba2:	f107 020f 	add.w	r2, r7, #15
 8002ba6:	f107 0110 	add.w	r1, r7, #16
 8002baa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f007 f910 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002bb4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002bb8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002bbc:	781a      	ldrb	r2, [r3, #0]
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff faaf 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002bca:	f7ff fa95 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002bce:	2305      	movs	r3, #5
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	40011000 	.word	0x40011000

08002be4 <Cmd_iou_tec_dis_auto>:

int Cmd_iou_tec_dis_auto(int argc, char *argv[])
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002bf0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002bf4:	6018      	str	r0, [r3, #0]
 8002bf6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002bfa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002bfe:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8002c00:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c04:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	dc01      	bgt.n	8002c12 <Cmd_iou_tec_dis_auto+0x2e>
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e09a      	b.n	8002d48 <Cmd_iou_tec_dis_auto+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8002c12:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c16:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	dd01      	ble.n	8002c24 <Cmd_iou_tec_dis_auto+0x40>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e091      	b.n	8002d48 <Cmd_iou_tec_dis_auto+0x164>
    uint8_t channel = atoi(argv[1]);
 8002c24:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c28:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f009 fd00 	bl	800c638 <atoi>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002c3e:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d901      	bls.n	8002c4a <Cmd_iou_tec_dis_auto+0x66>
 8002c46:	2304      	movs	r3, #4
 8002c48:	e07e      	b.n	8002d48 <Cmd_iou_tec_dis_auto+0x164>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002c4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c4e:	4841      	ldr	r0, [pc, #260]	@ (8002d54 <Cmd_iou_tec_dis_auto+0x170>)
 8002c50:	f7ff fb1c 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002c54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c58:	483e      	ldr	r0, [pc, #248]	@ (8002d54 <Cmd_iou_tec_dis_auto+0x170>)
 8002c5a:	f7ff fb17 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_TEC_DIS_AUTO;
 8002c5e:	2307      	movs	r3, #7
 8002c60:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    uint8_t payload[1];
    payload[0] = channel;
 8002c64:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002c68:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002c6c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002c70:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8002c74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2305      	movs	r3, #5
 8002c80:	2201      	movs	r2, #1
 8002c82:	f007 f821 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002c86:	f107 020f 	add.w	r2, r7, #15
 8002c8a:	f107 0110 	add.w	r1, r7, #16
 8002c8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c92:	4618      	mov	r0, r3
 8002c94:	f007 f89e 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 8002c98:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c9c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d02c      	beq.n	8002d00 <Cmd_iou_tec_dis_auto+0x11c>
        for (int i = 0; i < frame_len; i++) {
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002cac:	e010      	b.n	8002cd0 <Cmd_iou_tec_dis_auto+0xec>
            Uart_write(USART1, encoded_frame[i]);
 8002cae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002cb2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8002cb6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4825      	ldr	r0, [pc, #148]	@ (8002d58 <Cmd_iou_tec_dis_auto+0x174>)
 8002cc2:	f7fe fff7 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002cc6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002cd0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002cd4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	dbe4      	blt.n	8002cae <Cmd_iou_tec_dis_auto+0xca>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002ce4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002ce8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	f107 0310 	add.w	r3, r7, #16
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fa17 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002cfa:	f7ff f9fd 	bl	80020f8 <set_send_flag>
 8002cfe:	e022      	b.n	8002d46 <Cmd_iou_tec_dis_auto+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002d00:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002d04:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8002d08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	2301      	movs	r3, #1
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2305      	movs	r3, #5
 8002d14:	2201      	movs	r2, #1
 8002d16:	f006 ffd7 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002d1a:	f107 020f 	add.w	r2, r7, #15
 8002d1e:	f107 0110 	add.w	r1, r7, #16
 8002d22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d26:	4618      	mov	r0, r3
 8002d28:	f007 f854 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002d2c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002d30:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	f107 0310 	add.w	r3, r7, #16
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f9f3 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002d42:	f7ff f9d9 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002d46:	2305      	movs	r3, #5
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40020000 	.word	0x40020000
 8002d58:	40011000 	.word	0x40011000

08002d5c <Cmd_iou_tec_set_output>:


int Cmd_iou_tec_set_output(int argc, char *argv[])
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002d62:	af02      	add	r7, sp, #8
 8002d64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d68:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d6c:	6018      	str	r0, [r3, #0]
 8002d6e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d72:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002d76:	6019      	str	r1, [r3, #0]
    if (argc < 4) return CMDLINE_TOO_FEW_ARGS;
 8002d78:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d7c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	dc01      	bgt.n	8002d8a <Cmd_iou_tec_set_output+0x2e>
 8002d86:	2303      	movs	r3, #3
 8002d88:	e0d1      	b.n	8002f2e <Cmd_iou_tec_set_output+0x1d2>
    if (argc > 4) return CMDLINE_TOO_MANY_ARGS;
 8002d8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d8e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	dd01      	ble.n	8002d9c <Cmd_iou_tec_set_output+0x40>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e0c8      	b.n	8002f2e <Cmd_iou_tec_set_output+0x1d2>
    uint8_t channel = atoi(argv[1]);
 8002d9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002da0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3304      	adds	r3, #4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f009 fc44 	bl	800c638 <atoi>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002db6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d901      	bls.n	8002dc2 <Cmd_iou_tec_set_output+0x66>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e0b5      	b.n	8002f2e <Cmd_iou_tec_set_output+0x1d2>

    uint8_t mode = atoi(argv[2]);
 8002dc2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002dc6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3308      	adds	r3, #8
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f009 fc31 	bl	800c638 <atoi>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (mode > 1)    return CMDLINE_INVALID_ARG;
 8002ddc:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d901      	bls.n	8002de8 <Cmd_iou_tec_set_output+0x8c>
 8002de4:	2304      	movs	r3, #4
 8002de6:	e0a2      	b.n	8002f2e <Cmd_iou_tec_set_output+0x1d2>

    uint16_t vol = atoi(argv[3]);
 8002de8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002dec:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f009 fc1e 	bl	800c638 <atoi>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 8002e02:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8002e06:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002e0a:	d901      	bls.n	8002e10 <Cmd_iou_tec_set_output+0xb4>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	e08e      	b.n	8002f2e <Cmd_iou_tec_set_output+0x1d2>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002e10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e14:	4848      	ldr	r0, [pc, #288]	@ (8002f38 <Cmd_iou_tec_set_output+0x1dc>)
 8002e16:	f7ff fa39 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002e1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e1e:	4846      	ldr	r0, [pc, #280]	@ (8002f38 <Cmd_iou_tec_set_output+0x1dc>)
 8002e20:	f7ff fa34 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_TEC_SET_OUTPUT;
 8002e24:	2308      	movs	r3, #8
 8002e26:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    uint8_t payload[4];
    payload[0] = channel;
 8002e2a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002e2e:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1] = mode;
 8002e32:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002e36:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(vol >> 8);   //high
 8002e3a:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    payload[3]  = (uint8_t)(vol & 0xFF); //low
 8002e48:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002e52:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002e56:	f897 0217 	ldrb.w	r0, [r7, #535]	@ 0x217
 8002e5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2301      	movs	r3, #1
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2305      	movs	r3, #5
 8002e66:	2204      	movs	r2, #4
 8002e68:	f006 ff2e 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002e6c:	f107 020f 	add.w	r2, r7, #15
 8002e70:	f107 0110 	add.w	r1, r7, #16
 8002e74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f006 ffab 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 8002e7e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e82:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d02c      	beq.n	8002ee6 <Cmd_iou_tec_set_output+0x18a>
        for (int i = 0; i < frame_len; i++) {
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002e92:	e010      	b.n	8002eb6 <Cmd_iou_tec_set_output+0x15a>
            Uart_write(USART1, encoded_frame[i]);
 8002e94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e98:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002e9c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ea0:	4413      	add	r3, r2
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4825      	ldr	r0, [pc, #148]	@ (8002f3c <Cmd_iou_tec_set_output+0x1e0>)
 8002ea8:	f7fe ff04 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002eac:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002eb6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002eba:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	dbe4      	blt.n	8002e94 <Cmd_iou_tec_set_output+0x138>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002eca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ece:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	f107 0310 	add.w	r3, r7, #16
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f924 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002ee0:	f7ff f90a 	bl	80020f8 <set_send_flag>
 8002ee4:	e022      	b.n	8002f2c <Cmd_iou_tec_set_output+0x1d0>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002ee6:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002eea:	f897 0217 	ldrb.w	r0, [r7, #535]	@ 0x217
 8002eee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2305      	movs	r3, #5
 8002efa:	2204      	movs	r2, #4
 8002efc:	f006 fee4 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002f00:	f107 020f 	add.w	r2, r7, #15
 8002f04:	f107 0110 	add.w	r1, r7, #16
 8002f08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f006 ff61 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002f12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f16:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	f107 0310 	add.w	r3, r7, #16
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f900 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8002f28:	f7ff f8e6 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002f2c:	2305      	movs	r3, #5
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40011000 	.word	0x40011000

08002f40 <Cmd_iou_tec_auto_vol>:

int Cmd_iou_tec_auto_vol(int argc, char *argv[])
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8002f46:	af02      	add	r7, sp, #8
 8002f48:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002f4c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002f50:	6018      	str	r0, [r3, #0]
 8002f52:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002f56:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002f5a:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8002f5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002f60:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	dc01      	bgt.n	8002f6e <Cmd_iou_tec_auto_vol+0x2e>
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0ba      	b.n	80030e4 <Cmd_iou_tec_auto_vol+0x1a4>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8002f6e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002f72:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	dd01      	ble.n	8002f80 <Cmd_iou_tec_auto_vol+0x40>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e0b1      	b.n	80030e4 <Cmd_iou_tec_auto_vol+0x1a4>
    uint8_t channel = atoi(argv[1]);
 8002f80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002f84:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f009 fb52 	bl	800c638 <atoi>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002f9a:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d901      	bls.n	8002fa6 <Cmd_iou_tec_auto_vol+0x66>
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	e09e      	b.n	80030e4 <Cmd_iou_tec_auto_vol+0x1a4>

    uint16_t vol = atoi(argv[2]);
 8002fa6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002faa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f009 fb3f 	bl	800c638 <atoi>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 8002fc0:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 8002fc4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002fc8:	d901      	bls.n	8002fce <Cmd_iou_tec_auto_vol+0x8e>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	e08a      	b.n	80030e4 <Cmd_iou_tec_auto_vol+0x1a4>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002fce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fd2:	4847      	ldr	r0, [pc, #284]	@ (80030f0 <Cmd_iou_tec_auto_vol+0x1b0>)
 8002fd4:	f7ff f95a 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002fd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fdc:	4844      	ldr	r0, [pc, #272]	@ (80030f0 <Cmd_iou_tec_auto_vol+0x1b0>)
 8002fde:	f7ff f955 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_TEC_AUTO_VOL;
 8002fe2:	2309      	movs	r3, #9
 8002fe4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t payload[3];
    payload[0] = channel;
 8002fe8:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8002fec:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = (uint8_t)(vol >> 8);   //high
 8002ff0:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(vol & 0xFF); //low
 8002ffe:	f8b7 3210 	ldrh.w	r3, [r7, #528]	@ 0x210
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003008:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800300c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003010:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	2301      	movs	r3, #1
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	2305      	movs	r3, #5
 800301c:	2203      	movs	r2, #3
 800301e:	f006 fe53 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003022:	f107 020b 	add.w	r2, r7, #11
 8003026:	f107 010c 	add.w	r1, r7, #12
 800302a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800302e:	4618      	mov	r0, r3
 8003030:	f006 fed0 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 8003034:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003038:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d02c      	beq.n	800309c <Cmd_iou_tec_auto_vol+0x15c>
        for (int i = 0; i < frame_len; i++) {
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003048:	e010      	b.n	800306c <Cmd_iou_tec_auto_vol+0x12c>
            Uart_write(USART1, encoded_frame[i]);
 800304a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800304e:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 8003052:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	4619      	mov	r1, r3
 800305c:	4825      	ldr	r0, [pc, #148]	@ (80030f4 <Cmd_iou_tec_auto_vol+0x1b4>)
 800305e:	f7fe fe29 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003062:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003066:	3301      	adds	r3, #1
 8003068:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800306c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003070:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800307c:	4293      	cmp	r3, r2
 800307e:	dbe4      	blt.n	800304a <Cmd_iou_tec_auto_vol+0x10a>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003080:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003084:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff f849 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003096:	f7ff f82f 	bl	80020f8 <set_send_flag>
 800309a:	e022      	b.n	80030e2 <Cmd_iou_tec_auto_vol+0x1a2>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800309c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80030a0:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80030a4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2305      	movs	r3, #5
 80030b0:	2203      	movs	r2, #3
 80030b2:	f006 fe09 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80030b6:	f107 020b 	add.w	r2, r7, #11
 80030ba:	f107 010c 	add.w	r1, r7, #12
 80030be:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80030c2:	4618      	mov	r0, r3
 80030c4:	f006 fe86 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80030c8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80030cc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	f107 030c 	add.w	r3, r7, #12
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff f825 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80030de:	f7ff f80b 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80030e2:	2305      	movs	r3, #5
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40020000 	.word	0x40020000
 80030f4:	40011000 	.word	0x40011000

080030f8 <Cmd_iou_tec_status>:

int Cmd_iou_tec_status(int argc, char *argv[])
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80030fe:	af00      	add	r7, sp, #0
 8003100:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003104:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003108:	6018      	str	r0, [r3, #0]
 800310a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800310e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003112:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003114:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003118:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	dc01      	bgt.n	8003126 <Cmd_iou_tec_status+0x2e>
 8003122:	2303      	movs	r3, #3
 8003124:	e079      	b.n	800321a <Cmd_iou_tec_status+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003126:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800312a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	dd01      	ble.n	8003138 <Cmd_iou_tec_status+0x40>
 8003134:	2302      	movs	r3, #2
 8003136:	e070      	b.n	800321a <Cmd_iou_tec_status+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003138:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800313c:	4839      	ldr	r0, [pc, #228]	@ (8003224 <Cmd_iou_tec_status+0x12c>)
 800313e:	f7ff f8a5 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003142:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003146:	4837      	ldr	r0, [pc, #220]	@ (8003224 <Cmd_iou_tec_status+0x12c>)
 8003148:	f7ff f8a0 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_TEC_STATUS;
 800314c:	230a      	movs	r3, #10
 800314e:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003152:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003156:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 800315a:	2201      	movs	r2, #1
 800315c:	2105      	movs	r1, #5
 800315e:	f006 fd8b 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003162:	f107 020b 	add.w	r2, r7, #11
 8003166:	f107 010c 	add.w	r1, r7, #12
 800316a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800316e:	4618      	mov	r0, r3
 8003170:	f006 fe30 	bl	8009dd4 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003174:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003178:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d02c      	beq.n	80031dc <Cmd_iou_tec_status+0xe4>
        for (int i = 0; i < frame_len; i++) {
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8003188:	e010      	b.n	80031ac <Cmd_iou_tec_status+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 800318a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800318e:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 8003192:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003196:	4413      	add	r3, r2
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	4822      	ldr	r0, [pc, #136]	@ (8003228 <Cmd_iou_tec_status+0x130>)
 800319e:	f7fe fd89 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80031a2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80031a6:	3301      	adds	r3, #1
 80031a8:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80031ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80031b0:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80031bc:	4293      	cmp	r3, r2
 80031be:	dbe4      	blt.n	800318a <Cmd_iou_tec_status+0x92>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80031c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80031c4:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	f107 030c 	add.w	r3, r7, #12
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe ffa9 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80031d6:	f7fe ff8f 	bl	80020f8 <set_send_flag>
 80031da:	e01d      	b.n	8003218 <Cmd_iou_tec_status+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80031dc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80031e0:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 80031e4:	2201      	movs	r2, #1
 80031e6:	2105      	movs	r1, #5
 80031e8:	f006 fd46 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80031ec:	f107 020b 	add.w	r2, r7, #11
 80031f0:	f107 010c 	add.w	r1, r7, #12
 80031f4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80031f8:	4618      	mov	r0, r3
 80031fa:	f006 fdeb 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80031fe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003202:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe ff8a 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003214:	f7fe ff70 	bl	80020f8 <set_send_flag>
    }
    return CMDLINE_PENDING;
 8003218:	2305      	movs	r3, #5
}
 800321a:	4618      	mov	r0, r3
 800321c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40020000 	.word	0x40020000
 8003228:	40011000 	.word	0x40011000

0800322c <Cmd_iou_tec_log_ena>:

int Cmd_iou_tec_log_ena(int argc, char *argv[])
{
 800322c:	b580      	push	{r7, lr}
 800322e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8003232:	af00      	add	r7, sp, #0
 8003234:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003238:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800323c:	6018      	str	r0, [r3, #0]
 800323e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003242:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003246:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003248:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800324c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	dc01      	bgt.n	800325a <Cmd_iou_tec_log_ena+0x2e>
 8003256:	2303      	movs	r3, #3
 8003258:	e079      	b.n	800334e <Cmd_iou_tec_log_ena+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 800325a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800325e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	dd01      	ble.n	800326c <Cmd_iou_tec_log_ena+0x40>
 8003268:	2302      	movs	r3, #2
 800326a:	e070      	b.n	800334e <Cmd_iou_tec_log_ena+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800326c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003270:	4839      	ldr	r0, [pc, #228]	@ (8003358 <Cmd_iou_tec_log_ena+0x12c>)
 8003272:	f7ff f80b 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003276:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800327a:	4837      	ldr	r0, [pc, #220]	@ (8003358 <Cmd_iou_tec_log_ena+0x12c>)
 800327c:	f7ff f806 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_TEC_LOG_ENA;
 8003280:	230b      	movs	r3, #11
 8003282:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003286:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800328a:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 800328e:	2201      	movs	r2, #1
 8003290:	2105      	movs	r1, #5
 8003292:	f006 fcf1 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003296:	f107 020b 	add.w	r2, r7, #11
 800329a:	f107 010c 	add.w	r1, r7, #12
 800329e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80032a2:	4618      	mov	r0, r3
 80032a4:	f006 fd96 	bl	8009dd4 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80032a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80032ac:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d02c      	beq.n	8003310 <Cmd_iou_tec_log_ena+0xe4>
        for (int i = 0; i < frame_len; i++) {
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80032bc:	e010      	b.n	80032e0 <Cmd_iou_tec_log_ena+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 80032be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80032c2:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80032c6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	4619      	mov	r1, r3
 80032d0:	4822      	ldr	r0, [pc, #136]	@ (800335c <Cmd_iou_tec_log_ena+0x130>)
 80032d2:	f7fe fcef 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80032d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80032da:	3301      	adds	r3, #1
 80032dc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80032e0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80032e4:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80032f0:	4293      	cmp	r3, r2
 80032f2:	dbe4      	blt.n	80032be <Cmd_iou_tec_log_ena+0x92>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80032f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80032f8:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	f107 030c 	add.w	r3, r7, #12
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe ff0f 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800330a:	f7fe fef5 	bl	80020f8 <set_send_flag>
 800330e:	e01d      	b.n	800334c <Cmd_iou_tec_log_ena+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003310:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003314:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8003318:	2201      	movs	r2, #1
 800331a:	2105      	movs	r1, #5
 800331c:	f006 fcac 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003320:	f107 020b 	add.w	r2, r7, #11
 8003324:	f107 010c 	add.w	r1, r7, #12
 8003328:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800332c:	4618      	mov	r0, r3
 800332e:	f006 fd51 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003332:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003336:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fef0 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003348:	f7fe fed6 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800334c:	2305      	movs	r3, #5
}
 800334e:	4618      	mov	r0, r3
 8003350:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40020000 	.word	0x40020000
 800335c:	40011000 	.word	0x40011000

08003360 <Cmd_iou_tec_log_dis>:

int Cmd_iou_tec_log_dis(int argc, char *argv[])
{
 8003360:	b580      	push	{r7, lr}
 8003362:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8003366:	af00      	add	r7, sp, #0
 8003368:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800336c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003370:	6018      	str	r0, [r3, #0]
 8003372:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003376:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800337a:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 800337c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003380:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	dc01      	bgt.n	800338e <Cmd_iou_tec_log_dis+0x2e>
 800338a:	2303      	movs	r3, #3
 800338c:	e079      	b.n	8003482 <Cmd_iou_tec_log_dis+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 800338e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003392:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	dd01      	ble.n	80033a0 <Cmd_iou_tec_log_dis+0x40>
 800339c:	2302      	movs	r3, #2
 800339e:	e070      	b.n	8003482 <Cmd_iou_tec_log_dis+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80033a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80033a4:	4839      	ldr	r0, [pc, #228]	@ (800348c <Cmd_iou_tec_log_dis+0x12c>)
 80033a6:	f7fe ff71 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80033aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033ae:	4837      	ldr	r0, [pc, #220]	@ (800348c <Cmd_iou_tec_log_dis+0x12c>)
 80033b0:	f7fe ff6c 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_TEC_LOG_DIS;
 80033b4:	230c      	movs	r3, #12
 80033b6:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80033ba:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80033be:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 80033c2:	2201      	movs	r2, #1
 80033c4:	2105      	movs	r1, #5
 80033c6:	f006 fc57 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80033ca:	f107 020b 	add.w	r2, r7, #11
 80033ce:	f107 010c 	add.w	r1, r7, #12
 80033d2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80033d6:	4618      	mov	r0, r3
 80033d8:	f006 fcfc 	bl	8009dd4 <frame_encode>

//    SCH_Delay(5);
    if (frame_len > 0) {
 80033dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80033e0:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d02c      	beq.n	8003444 <Cmd_iou_tec_log_dis+0xe4>
        for (int i = 0; i < frame_len; i++) {
 80033ea:	2300      	movs	r3, #0
 80033ec:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80033f0:	e010      	b.n	8003414 <Cmd_iou_tec_log_dis+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 80033f2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80033f6:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80033fa:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	4619      	mov	r1, r3
 8003404:	4822      	ldr	r0, [pc, #136]	@ (8003490 <Cmd_iou_tec_log_dis+0x130>)
 8003406:	f7fe fc55 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800340a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800340e:	3301      	adds	r3, #1
 8003410:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8003414:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003418:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003424:	4293      	cmp	r3, r2
 8003426:	dbe4      	blt.n	80033f2 <Cmd_iou_tec_log_dis+0x92>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003428:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800342c:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fe75 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800343e:	f7fe fe5b 	bl	80020f8 <set_send_flag>
 8003442:	e01d      	b.n	8003480 <Cmd_iou_tec_log_dis+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003444:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003448:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 800344c:	2201      	movs	r2, #1
 800344e:	2105      	movs	r1, #5
 8003450:	f006 fc12 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003454:	f107 020b 	add.w	r2, r7, #11
 8003458:	f107 010c 	add.w	r1, r7, #12
 800345c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003460:	4618      	mov	r0, r3
 8003462:	f006 fcb7 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003466:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800346a:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	f107 030c 	add.w	r3, r7, #12
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fe56 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800347c:	f7fe fe3c 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8003480:	2305      	movs	r3, #5
}
 8003482:	4618      	mov	r0, r3
 8003484:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40020000 	.word	0x40020000
 8003490:	40011000 	.word	0x40011000

08003494 <Cmd_iou_ringled_setRGB>:

int Cmd_iou_ringled_setRGB(int argc, char *argv[])
{
 8003494:	b580      	push	{r7, lr}
 8003496:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800349a:	af02      	add	r7, sp, #8
 800349c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034a0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80034a4:	6018      	str	r0, [r3, #0]
 80034a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034aa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80034ae:	6019      	str	r1, [r3, #0]
    if (argc < 5) return CMDLINE_TOO_FEW_ARGS;
 80034b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	dc01      	bgt.n	80034c2 <Cmd_iou_ringled_setRGB+0x2e>
 80034be:	2303      	movs	r3, #3
 80034c0:	e0c7      	b.n	8003652 <Cmd_iou_ringled_setRGB+0x1be>
    if (argc > 5) return CMDLINE_TOO_MANY_ARGS;
 80034c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034c6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	dd01      	ble.n	80034d4 <Cmd_iou_ringled_setRGB+0x40>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e0be      	b.n	8003652 <Cmd_iou_ringled_setRGB+0x1be>
    uint8_t red = atoi(argv[1]);
 80034d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034d8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3304      	adds	r3, #4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f009 f8a8 	bl	800c638 <atoi>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (red > 255)    return CMDLINE_INVALID_ARG;
    uint8_t green = atoi(argv[2]);
 80034ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034f2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3308      	adds	r3, #8
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f009 f89b 	bl	800c638 <atoi>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (green > 255)    return CMDLINE_INVALID_ARG;
    uint8_t blue = atoi(argv[3]);
 8003508:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800350c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f009 f88e 	bl	800c638 <atoi>
 800351c:	4603      	mov	r3, r0
 800351e:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
    if (blue > 255)    return CMDLINE_INVALID_ARG;
    uint8_t white = atoi(argv[3]);
 8003522:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003526:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f009 f881 	bl	800c638 <atoi>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800353c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003540:	4846      	ldr	r0, [pc, #280]	@ (800365c <Cmd_iou_ringled_setRGB+0x1c8>)
 8003542:	f7fe fea3 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003546:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800354a:	4844      	ldr	r0, [pc, #272]	@ (800365c <Cmd_iou_ringled_setRGB+0x1c8>)
 800354c:	f7fe fe9e 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_RINGLED_SETRGB;
 8003550:	230d      	movs	r3, #13
 8003552:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    uint8_t payload[4];

    payload[0]  = red; //low
 8003556:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800355a:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = green; //low
 800355e:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003562:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = blue; //low
 8003566:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 800356a:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    payload[3]  = white; //low
 800356e:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8003572:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003576:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800357a:	f897 0217 	ldrb.w	r0, [r7, #535]	@ 0x217
 800357e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2301      	movs	r3, #1
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2305      	movs	r3, #5
 800358a:	2204      	movs	r2, #4
 800358c:	f006 fb9c 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003590:	f107 020f 	add.w	r2, r7, #15
 8003594:	f107 0110 	add.w	r1, r7, #16
 8003598:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800359c:	4618      	mov	r0, r3
 800359e:	f006 fc19 	bl	8009dd4 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80035a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035a6:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d02c      	beq.n	800360a <Cmd_iou_ringled_setRGB+0x176>
        for (int i = 0; i < frame_len; i++) {
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80035b6:	e010      	b.n	80035da <Cmd_iou_ringled_setRGB+0x146>
            Uart_write(USART1, encoded_frame[i]);
 80035b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035bc:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80035c0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80035c4:	4413      	add	r3, r2
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	4619      	mov	r1, r3
 80035ca:	4825      	ldr	r0, [pc, #148]	@ (8003660 <Cmd_iou_ringled_setRGB+0x1cc>)
 80035cc:	f7fe fb72 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80035d0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80035d4:	3301      	adds	r3, #1
 80035d6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80035da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035de:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80035ea:	4293      	cmp	r3, r2
 80035ec:	dbe4      	blt.n	80035b8 <Cmd_iou_ringled_setRGB+0x124>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80035ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035f2:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	f107 0310 	add.w	r3, r7, #16
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe fd92 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003604:	f7fe fd78 	bl	80020f8 <set_send_flag>
 8003608:	e022      	b.n	8003650 <Cmd_iou_ringled_setRGB+0x1bc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800360a:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800360e:	f897 0217 	ldrb.w	r0, [r7, #535]	@ 0x217
 8003612:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2301      	movs	r3, #1
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2305      	movs	r3, #5
 800361e:	2204      	movs	r2, #4
 8003620:	f006 fb52 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003624:	f107 020f 	add.w	r2, r7, #15
 8003628:	f107 0110 	add.w	r1, r7, #16
 800362c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003630:	4618      	mov	r0, r3
 8003632:	f006 fbcf 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003636:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800363a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	f107 0310 	add.w	r3, r7, #16
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe fd6e 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800364c:	f7fe fd54 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003650:	2305      	movs	r3, #5
}
 8003652:	4618      	mov	r0, r3
 8003654:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40020000 	.word	0x40020000
 8003660:	40011000 	.word	0x40011000

08003664 <Cmd_iou_ringled_getRGB>:

int Cmd_iou_ringled_getRGB(int argc, char *argv[])
{
 8003664:	b580      	push	{r7, lr}
 8003666:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800366a:	af00      	add	r7, sp, #0
 800366c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003670:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003674:	6018      	str	r0, [r3, #0]
 8003676:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800367a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800367e:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003680:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003684:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	dc01      	bgt.n	8003692 <Cmd_iou_ringled_getRGB+0x2e>
 800368e:	2303      	movs	r3, #3
 8003690:	e079      	b.n	8003786 <Cmd_iou_ringled_getRGB+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003692:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003696:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	dd01      	ble.n	80036a4 <Cmd_iou_ringled_getRGB+0x40>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e070      	b.n	8003786 <Cmd_iou_ringled_getRGB+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80036a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80036a8:	4839      	ldr	r0, [pc, #228]	@ (8003790 <Cmd_iou_ringled_getRGB+0x12c>)
 80036aa:	f7fe fdef 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80036ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036b2:	4837      	ldr	r0, [pc, #220]	@ (8003790 <Cmd_iou_ringled_getRGB+0x12c>)
 80036b4:	f7fe fdea 	bl	800228c <LL_GPIO_SetOutputPin>


    uint8_t cmd  = CMD_CODE_RINGLED_GETRGB;
 80036b8:	230e      	movs	r3, #14
 80036ba:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80036be:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80036c2:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 80036c6:	2201      	movs	r2, #1
 80036c8:	2105      	movs	r1, #5
 80036ca:	f006 fad5 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80036ce:	f107 020b 	add.w	r2, r7, #11
 80036d2:	f107 010c 	add.w	r1, r7, #12
 80036d6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80036da:	4618      	mov	r0, r3
 80036dc:	f006 fb7a 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 80036e0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80036e4:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d02c      	beq.n	8003748 <Cmd_iou_ringled_getRGB+0xe4>
        for (int i = 0; i < frame_len; i++) {
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80036f4:	e010      	b.n	8003718 <Cmd_iou_ringled_getRGB+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 80036f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80036fa:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80036fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003702:	4413      	add	r3, r2
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	4822      	ldr	r0, [pc, #136]	@ (8003794 <Cmd_iou_ringled_getRGB+0x130>)
 800370a:	f7fe fad3 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800370e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003712:	3301      	adds	r3, #1
 8003714:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8003718:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800371c:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003728:	4293      	cmp	r3, r2
 800372a:	dbe4      	blt.n	80036f6 <Cmd_iou_ringled_getRGB+0x92>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800372c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003730:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	f107 030c 	add.w	r3, r7, #12
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fcf3 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003742:	f7fe fcd9 	bl	80020f8 <set_send_flag>
 8003746:	e01d      	b.n	8003784 <Cmd_iou_ringled_getRGB+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003748:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800374c:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8003750:	2201      	movs	r2, #1
 8003752:	2105      	movs	r1, #5
 8003754:	f006 fa90 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003758:	f107 020b 	add.w	r2, r7, #11
 800375c:	f107 010c 	add.w	r1, r7, #12
 8003760:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003764:	4618      	mov	r0, r3
 8003766:	f006 fb35 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800376a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800376e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003772:	781a      	ldrb	r2, [r3, #0]
 8003774:	f107 030c 	add.w	r3, r7, #12
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fcd4 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003780:	f7fe fcba 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003784:	2305      	movs	r3, #5
}
 8003786:	4618      	mov	r0, r3
 8003788:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40020000 	.word	0x40020000
 8003794:	40011000 	.word	0x40011000

08003798 <Cmd_iou_irled_set_bright>:

int Cmd_iou_irled_set_bright(int argc, char *argv[])
{
 8003798:	b580      	push	{r7, lr}
 800379a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800379e:	af02      	add	r7, sp, #8
 80037a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037a4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037a8:	6018      	str	r0, [r3, #0]
 80037aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037ae:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80037b2:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80037b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037b8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	dc01      	bgt.n	80037c6 <Cmd_iou_irled_set_bright+0x2e>
 80037c2:	2303      	movs	r3, #3
 80037c4:	e09a      	b.n	80038fc <Cmd_iou_irled_set_bright+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80037c6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037ca:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	dd01      	ble.n	80037d8 <Cmd_iou_irled_set_bright+0x40>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e091      	b.n	80038fc <Cmd_iou_irled_set_bright+0x164>
    uint8_t percent = atoi(argv[1]);
 80037d8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037dc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3304      	adds	r3, #4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f008 ff26 	bl	800c638 <atoi>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (percent > 100)    return CMDLINE_INVALID_ARG;
 80037f2:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80037f6:	2b64      	cmp	r3, #100	@ 0x64
 80037f8:	d901      	bls.n	80037fe <Cmd_iou_irled_set_bright+0x66>
 80037fa:	2304      	movs	r3, #4
 80037fc:	e07e      	b.n	80038fc <Cmd_iou_irled_set_bright+0x164>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80037fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003802:	4841      	ldr	r0, [pc, #260]	@ (8003908 <Cmd_iou_irled_set_bright+0x170>)
 8003804:	f7fe fd42 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003808:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800380c:	483e      	ldr	r0, [pc, #248]	@ (8003908 <Cmd_iou_irled_set_bright+0x170>)
 800380e:	f7fe fd3d 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_IRLED_SET_BRIGHT;
 8003812:	230f      	movs	r3, #15
 8003814:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    uint8_t payload[1];

    payload[0]  = percent; //low
 8003818:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800381c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003820:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003824:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8003828:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	2301      	movs	r3, #1
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	2305      	movs	r3, #5
 8003834:	2201      	movs	r2, #1
 8003836:	f006 fa47 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800383a:	f107 020f 	add.w	r2, r7, #15
 800383e:	f107 0110 	add.w	r1, r7, #16
 8003842:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003846:	4618      	mov	r0, r3
 8003848:	f006 fac4 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 800384c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003850:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02c      	beq.n	80038b4 <Cmd_iou_irled_set_bright+0x11c>
        for (int i = 0; i < frame_len; i++) {
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003860:	e010      	b.n	8003884 <Cmd_iou_irled_set_bright+0xec>
            Uart_write(USART1, encoded_frame[i]);
 8003862:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003866:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800386a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800386e:	4413      	add	r3, r2
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	4619      	mov	r1, r3
 8003874:	4825      	ldr	r0, [pc, #148]	@ (800390c <Cmd_iou_irled_set_bright+0x174>)
 8003876:	f7fe fa1d 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800387a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800387e:	3301      	adds	r3, #1
 8003880:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003884:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003888:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003894:	4293      	cmp	r3, r2
 8003896:	dbe4      	blt.n	8003862 <Cmd_iou_irled_set_bright+0xca>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003898:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800389c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	f107 0310 	add.w	r3, r7, #16
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe fc3d 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80038ae:	f7fe fc23 	bl	80020f8 <set_send_flag>
 80038b2:	e022      	b.n	80038fa <Cmd_iou_irled_set_bright+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80038b4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80038b8:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 80038bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	2301      	movs	r3, #1
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	2305      	movs	r3, #5
 80038c8:	2201      	movs	r2, #1
 80038ca:	f006 f9fd 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80038ce:	f107 020f 	add.w	r2, r7, #15
 80038d2:	f107 0110 	add.w	r1, r7, #16
 80038d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038da:	4618      	mov	r0, r3
 80038dc:	f006 fa7a 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80038e0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038e4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	f107 0310 	add.w	r3, r7, #16
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe fc19 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80038f6:	f7fe fbff 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80038fa:	2305      	movs	r3, #5
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40020000 	.word	0x40020000
 800390c:	40011000 	.word	0x40011000

08003910 <Cmd_iou_irled_get_bright>:

int Cmd_iou_irled_get_bright(int argc, char *argv[])
{
 8003910:	b580      	push	{r7, lr}
 8003912:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8003916:	af00      	add	r7, sp, #0
 8003918:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800391c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003920:	6018      	str	r0, [r3, #0]
 8003922:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003926:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800392a:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 800392c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003930:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	dc01      	bgt.n	800393e <Cmd_iou_irled_get_bright+0x2e>
 800393a:	2303      	movs	r3, #3
 800393c:	e079      	b.n	8003a32 <Cmd_iou_irled_get_bright+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 800393e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003942:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	dd01      	ble.n	8003950 <Cmd_iou_irled_get_bright+0x40>
 800394c:	2302      	movs	r3, #2
 800394e:	e070      	b.n	8003a32 <Cmd_iou_irled_get_bright+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003950:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003954:	4839      	ldr	r0, [pc, #228]	@ (8003a3c <Cmd_iou_irled_get_bright+0x12c>)
 8003956:	f7fe fc99 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800395a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800395e:	4837      	ldr	r0, [pc, #220]	@ (8003a3c <Cmd_iou_irled_get_bright+0x12c>)
 8003960:	f7fe fc94 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_IRLED_GET_BRIGHT;
 8003964:	2310      	movs	r3, #16
 8003966:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800396a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800396e:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8003972:	2201      	movs	r2, #1
 8003974:	2105      	movs	r1, #5
 8003976:	f006 f97f 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800397a:	f107 020b 	add.w	r2, r7, #11
 800397e:	f107 010c 	add.w	r1, r7, #12
 8003982:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003986:	4618      	mov	r0, r3
 8003988:	f006 fa24 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 800398c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003990:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d02c      	beq.n	80039f4 <Cmd_iou_irled_get_bright+0xe4>
        for (int i = 0; i < frame_len; i++) {
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80039a0:	e010      	b.n	80039c4 <Cmd_iou_irled_get_bright+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 80039a2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80039a6:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80039aa:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80039ae:	4413      	add	r3, r2
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	4619      	mov	r1, r3
 80039b4:	4822      	ldr	r0, [pc, #136]	@ (8003a40 <Cmd_iou_irled_get_bright+0x130>)
 80039b6:	f7fe f97d 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80039ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80039be:	3301      	adds	r3, #1
 80039c0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80039c4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80039c8:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80039d4:	4293      	cmp	r3, r2
 80039d6:	dbe4      	blt.n	80039a2 <Cmd_iou_irled_get_bright+0x92>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80039d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80039dc:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	f107 030c 	add.w	r3, r7, #12
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fb9d 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80039ee:	f7fe fb83 	bl	80020f8 <set_send_flag>
 80039f2:	e01d      	b.n	8003a30 <Cmd_iou_irled_get_bright+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80039f4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80039f8:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 80039fc:	2201      	movs	r2, #1
 80039fe:	2105      	movs	r1, #5
 8003a00:	f006 f93a 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003a04:	f107 020b 	add.w	r2, r7, #11
 8003a08:	f107 010c 	add.w	r1, r7, #12
 8003a0c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003a10:	4618      	mov	r0, r3
 8003a12:	f006 f9df 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003a16:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003a1a:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	f107 030c 	add.w	r3, r7, #12
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fb7e 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003a2c:	f7fe fb64 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003a30:	2305      	movs	r3, #5
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40020000 	.word	0x40020000
 8003a40:	40011000 	.word	0x40011000

08003a44 <Cmd_iou_get_accel>:



int Cmd_iou_get_accel(int argc, char *argv[])
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003a50:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003a54:	6018      	str	r0, [r3, #0]
 8003a56:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003a5a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003a5e:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003a60:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003a64:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	dc01      	bgt.n	8003a72 <Cmd_iou_get_accel+0x2e>
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e079      	b.n	8003b66 <Cmd_iou_get_accel+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003a72:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003a76:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	dd01      	ble.n	8003a84 <Cmd_iou_get_accel+0x40>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e070      	b.n	8003b66 <Cmd_iou_get_accel+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003a84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a88:	4839      	ldr	r0, [pc, #228]	@ (8003b70 <Cmd_iou_get_accel+0x12c>)
 8003a8a:	f7fe fbff 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003a8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a92:	4837      	ldr	r0, [pc, #220]	@ (8003b70 <Cmd_iou_get_accel+0x12c>)
 8003a94:	f7fe fbfa 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_GET_ACCEL_GYRO;
 8003a98:	2311      	movs	r3, #17
 8003a9a:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003a9e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003aa2:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	2105      	movs	r1, #5
 8003aaa:	f006 f8e5 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003aae:	f107 020b 	add.w	r2, r7, #11
 8003ab2:	f107 010c 	add.w	r1, r7, #12
 8003ab6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003aba:	4618      	mov	r0, r3
 8003abc:	f006 f98a 	bl	8009dd4 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8003ac0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003ac4:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d02c      	beq.n	8003b28 <Cmd_iou_get_accel+0xe4>
        for (int i = 0; i < frame_len; i++) {
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8003ad4:	e010      	b.n	8003af8 <Cmd_iou_get_accel+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 8003ad6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003ada:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 8003ade:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003ae2:	4413      	add	r3, r2
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4822      	ldr	r0, [pc, #136]	@ (8003b74 <Cmd_iou_get_accel+0x130>)
 8003aea:	f7fe f8e3 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003aee:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003af2:	3301      	adds	r3, #1
 8003af4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8003af8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003afc:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	dbe4      	blt.n	8003ad6 <Cmd_iou_get_accel+0x92>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003b0c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b10:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	f107 030c 	add.w	r3, r7, #12
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fb03 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003b22:	f7fe fae9 	bl	80020f8 <set_send_flag>
 8003b26:	e01d      	b.n	8003b64 <Cmd_iou_get_accel+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003b28:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003b2c:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8003b30:	2201      	movs	r2, #1
 8003b32:	2105      	movs	r1, #5
 8003b34:	f006 f8a0 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003b38:	f107 020b 	add.w	r2, r7, #11
 8003b3c:	f107 010c 	add.w	r1, r7, #12
 8003b40:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003b44:	4618      	mov	r0, r3
 8003b46:	f006 f945 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003b4a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b4e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fae4 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003b60:	f7fe faca 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003b64:	2305      	movs	r3, #5
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40020000 	.word	0x40020000
 8003b74:	40011000 	.word	0x40011000

08003b78 <Cmd_iou_get_press>:

int Cmd_iou_get_press(int argc, char *argv[])
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b84:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003b88:	6018      	str	r0, [r3, #0]
 8003b8a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b8e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003b92:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003b94:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b98:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	dc01      	bgt.n	8003ba6 <Cmd_iou_get_press+0x2e>
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e079      	b.n	8003c9a <Cmd_iou_get_press+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003ba6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003baa:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	dd01      	ble.n	8003bb8 <Cmd_iou_get_press+0x40>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e070      	b.n	8003c9a <Cmd_iou_get_press+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003bb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003bbc:	4839      	ldr	r0, [pc, #228]	@ (8003ca4 <Cmd_iou_get_press+0x12c>)
 8003bbe:	f7fe fb65 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003bc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bc6:	4837      	ldr	r0, [pc, #220]	@ (8003ca4 <Cmd_iou_get_press+0x12c>)
 8003bc8:	f7fe fb60 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_GET_PRESS;
 8003bcc:	2312      	movs	r3, #18
 8003bce:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003bd2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003bd6:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8003bda:	2201      	movs	r2, #1
 8003bdc:	2105      	movs	r1, #5
 8003bde:	f006 f84b 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003be2:	f107 020b 	add.w	r2, r7, #11
 8003be6:	f107 010c 	add.w	r1, r7, #12
 8003bea:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f006 f8f0 	bl	8009dd4 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8003bf4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003bf8:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d02c      	beq.n	8003c5c <Cmd_iou_get_press+0xe4>
        for (int i = 0; i < frame_len; i++) {
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8003c08:	e010      	b.n	8003c2c <Cmd_iou_get_press+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 8003c0a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003c0e:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 8003c12:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003c16:	4413      	add	r3, r2
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4822      	ldr	r0, [pc, #136]	@ (8003ca8 <Cmd_iou_get_press+0x130>)
 8003c1e:	f7fe f849 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003c22:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003c26:	3301      	adds	r3, #1
 8003c28:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8003c2c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003c30:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	dbe4      	blt.n	8003c0a <Cmd_iou_get_press+0x92>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003c40:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003c44:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	f107 030c 	add.w	r3, r7, #12
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe fa69 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003c56:	f7fe fa4f 	bl	80020f8 <set_send_flag>
 8003c5a:	e01d      	b.n	8003c98 <Cmd_iou_get_press+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003c5c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003c60:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8003c64:	2201      	movs	r2, #1
 8003c66:	2105      	movs	r1, #5
 8003c68:	f006 f806 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003c6c:	f107 020b 	add.w	r2, r7, #11
 8003c70:	f107 010c 	add.w	r1, r7, #12
 8003c74:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f006 f8ab 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003c7e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003c82:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	f107 030c 	add.w	r3, r7, #12
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fa4a 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003c94:	f7fe fa30 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003c98:	2305      	movs	r3, #5
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	40011000 	.word	0x40011000

08003cac <Cmd_iou_get_parameters>:


int Cmd_iou_get_parameters(int argc, char *argv[])
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003cb8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003cbc:	6018      	str	r0, [r3, #0]
 8003cbe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003cc2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003cc6:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003cc8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003ccc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	dc01      	bgt.n	8003cda <Cmd_iou_get_parameters+0x2e>
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e079      	b.n	8003dce <Cmd_iou_get_parameters+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003cda:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003cde:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	dd01      	ble.n	8003cec <Cmd_iou_get_parameters+0x40>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e070      	b.n	8003dce <Cmd_iou_get_parameters+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003cec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003cf0:	4839      	ldr	r0, [pc, #228]	@ (8003dd8 <Cmd_iou_get_parameters+0x12c>)
 8003cf2:	f7fe facb 	bl	800228c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003cf6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cfa:	4837      	ldr	r0, [pc, #220]	@ (8003dd8 <Cmd_iou_get_parameters+0x12c>)
 8003cfc:	f7fe fac6 	bl	800228c <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_GET_PARAMETERS;
 8003d00:	2313      	movs	r3, #19
 8003d02:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003d06:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d0a:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8003d0e:	2201      	movs	r2, #1
 8003d10:	2105      	movs	r1, #5
 8003d12:	f005 ffb1 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003d16:	f107 020b 	add.w	r2, r7, #11
 8003d1a:	f107 010c 	add.w	r1, r7, #12
 8003d1e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d22:	4618      	mov	r0, r3
 8003d24:	f006 f856 	bl	8009dd4 <frame_encode>

  //  SCH_Delay(5);.
    if (frame_len > 0) {
 8003d28:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003d2c:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d02c      	beq.n	8003d90 <Cmd_iou_get_parameters+0xe4>
        for (int i = 0; i < frame_len; i++) {
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8003d3c:	e010      	b.n	8003d60 <Cmd_iou_get_parameters+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 8003d3e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003d42:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 8003d46:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003d4a:	4413      	add	r3, r2
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4822      	ldr	r0, [pc, #136]	@ (8003ddc <Cmd_iou_get_parameters+0x130>)
 8003d52:	f7fd ffaf 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003d56:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8003d60:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003d64:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8003d70:	4293      	cmp	r3, r2
 8003d72:	dbe4      	blt.n	8003d3e <Cmd_iou_get_parameters+0x92>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003d74:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003d78:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	f107 030c 	add.w	r3, r7, #12
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe f9cf 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003d8a:	f7fe f9b5 	bl	80020f8 <set_send_flag>
 8003d8e:	e01d      	b.n	8003dcc <Cmd_iou_get_parameters+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003d90:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d94:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8003d98:	2201      	movs	r2, #1
 8003d9a:	2105      	movs	r1, #5
 8003d9c:	f005 ff6c 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003da0:	f107 020b 	add.w	r2, r7, #11
 8003da4:	f107 010c 	add.w	r1, r7, #12
 8003da8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003dac:	4618      	mov	r0, r3
 8003dae:	f006 f811 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003db2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003db6:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	f107 030c 	add.w	r3, r7, #12
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe f9b0 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003dc8:	f7fe f996 	bl	80020f8 <set_send_flag>

    }

    return CMDLINE_PENDING;
 8003dcc:	2305      	movs	r3, #5
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40020000 	.word	0x40020000
 8003ddc:	40011000 	.word	0x40011000

08003de0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	041a      	lsls	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	619a      	str	r2, [r3, #24]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <Cmd_pdu_set_channel>:
#include "../global_vars.h"

#define DEST_ADDR FSP_ADR_PDU

int Cmd_pdu_set_channel(int argc, char *argv[])
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8003e06:	af02      	add	r7, sp, #8
 8003e08:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e0c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e10:	6018      	str	r0, [r3, #0]
 8003e12:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e16:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003e1a:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8003e1c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e20:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	dc01      	bgt.n	8003e2e <Cmd_pdu_set_channel+0x2e>
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0b1      	b.n	8003f92 <Cmd_pdu_set_channel+0x192>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8003e2e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e32:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	dd01      	ble.n	8003e40 <Cmd_pdu_set_channel+0x40>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e0a8      	b.n	8003f92 <Cmd_pdu_set_channel+0x192>
    uint8_t channel = atoi(argv[1]);
 8003e40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e44:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f008 fbf2 	bl	800c638 <atoi>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8003e5a:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8003e5e:	2b09      	cmp	r3, #9
 8003e60:	d901      	bls.n	8003e66 <Cmd_pdu_set_channel+0x66>
 8003e62:	2304      	movs	r3, #4
 8003e64:	e095      	b.n	8003f92 <Cmd_pdu_set_channel+0x192>

    uint8_t state = atoi(argv[2]);
 8003e66:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e6a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f008 fbdf 	bl	800c638 <atoi>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    if (state > 1) return CMDLINE_INVALID_ARG;
 8003e80:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d901      	bls.n	8003e8c <Cmd_pdu_set_channel+0x8c>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	e082      	b.n	8003f92 <Cmd_pdu_set_channel+0x192>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003e8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e90:	4842      	ldr	r0, [pc, #264]	@ (8003f9c <Cmd_pdu_set_channel+0x19c>)
 8003e92:	f7ff ffa5 	bl	8003de0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003e96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e9a:	4840      	ldr	r0, [pc, #256]	@ (8003f9c <Cmd_pdu_set_channel+0x19c>)
 8003e9c:	f7ff ffa0 	bl	8003de0 <LL_GPIO_ResetOutputPin>

    uint8_t cmd  = CMD_CODE_PDU_SET_CHANNEL;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    uint8_t payload[2];
    payload[0]  = channel;
 8003ea6:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8003eaa:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = state;
 8003eae:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8003eb2:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003eb6:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003eba:	f897 0211 	ldrb.w	r0, [r7, #529]	@ 0x211
 8003ebe:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	2303      	movs	r3, #3
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f005 fefc 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003ed0:	f107 020b 	add.w	r2, r7, #11
 8003ed4:	f107 010c 	add.w	r1, r7, #12
 8003ed8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003edc:	4618      	mov	r0, r3
 8003ede:	f005 ff79 	bl	8009dd4 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003ee2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ee6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02c      	beq.n	8003f4a <Cmd_pdu_set_channel+0x14a>
        for (int i = 0; i < frame_len; i++) {
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003ef6:	e010      	b.n	8003f1a <Cmd_pdu_set_channel+0x11a>
            Uart_write(USART1, encoded_frame[i]);
 8003ef8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003efc:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 8003f00:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f04:	4413      	add	r3, r2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4825      	ldr	r0, [pc, #148]	@ (8003fa0 <Cmd_pdu_set_channel+0x1a0>)
 8003f0c:	f7fd fed2 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003f10:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f14:	3301      	adds	r3, #1
 8003f16:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003f1a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f1e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	dbe4      	blt.n	8003ef8 <Cmd_pdu_set_channel+0xf8>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8003f2e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f32:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	f107 030c 	add.w	r3, r7, #12
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe f8f2 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8003f44:	f7fe f8d8 	bl	80020f8 <set_send_flag>
 8003f48:	e022      	b.n	8003f90 <Cmd_pdu_set_channel+0x190>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003f4a:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003f4e:	f897 0211 	ldrb.w	r0, [r7, #529]	@ 0x211
 8003f52:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	2301      	movs	r3, #1
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f005 feb2 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003f64:	f107 020b 	add.w	r2, r7, #11
 8003f68:	f107 010c 	add.w	r1, r7, #12
 8003f6c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003f70:	4618      	mov	r0, r3
 8003f72:	f005 ff2f 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003f76:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f7a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	f107 030c 	add.w	r3, r7, #12
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe f8ce 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8003f8c:	f7fe f8b4 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003f90:	2305      	movs	r3, #5
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40020000 	.word	0x40020000
 8003fa0:	40011000 	.word	0x40011000

08003fa4 <Cmd_pdu_set_buck>:

int Cmd_pdu_set_buck(int argc, char *argv[])
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8003faa:	af02      	add	r7, sp, #8
 8003fac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003fb0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003fb4:	6018      	str	r0, [r3, #0]
 8003fb6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003fba:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003fbe:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8003fc0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003fc4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	dc01      	bgt.n	8003fd2 <Cmd_pdu_set_buck+0x2e>
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0b1      	b.n	8004136 <Cmd_pdu_set_buck+0x192>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8003fd2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003fd6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	dd01      	ble.n	8003fe4 <Cmd_pdu_set_buck+0x40>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e0a8      	b.n	8004136 <Cmd_pdu_set_buck+0x192>
    uint8_t buck = atoi(argv[1]);
 8003fe4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003fe8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f008 fb20 	bl	800c638 <atoi>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8003ffe:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8004002:	2b06      	cmp	r3, #6
 8004004:	d901      	bls.n	800400a <Cmd_pdu_set_buck+0x66>
 8004006:	2304      	movs	r3, #4
 8004008:	e095      	b.n	8004136 <Cmd_pdu_set_buck+0x192>

    uint8_t state = atoi(argv[2]);
 800400a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800400e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f008 fb0d 	bl	800c638 <atoi>
 800401e:	4603      	mov	r3, r0
 8004020:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004024:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8004028:	2b01      	cmp	r3, #1
 800402a:	d901      	bls.n	8004030 <Cmd_pdu_set_buck+0x8c>
 800402c:	2304      	movs	r3, #4
 800402e:	e082      	b.n	8004136 <Cmd_pdu_set_buck+0x192>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004030:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004034:	4842      	ldr	r0, [pc, #264]	@ (8004140 <Cmd_pdu_set_buck+0x19c>)
 8004036:	f7ff fed3 	bl	8003de0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800403a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800403e:	4840      	ldr	r0, [pc, #256]	@ (8004140 <Cmd_pdu_set_buck+0x19c>)
 8004040:	f7ff fece 	bl	8003de0 <LL_GPIO_ResetOutputPin>

    uint8_t cmd  = CMD_CODE_PDU_SET_BUCK;
 8004044:	2302      	movs	r3, #2
 8004046:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    uint8_t payload[2];
    payload[0]  = buck;
 800404a:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800404e:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = state;
 8004052:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8004056:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800405a:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800405e:	f897 0211 	ldrb.w	r0, [r7, #529]	@ 0x211
 8004062:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	2301      	movs	r3, #1
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2303      	movs	r3, #3
 800406e:	2202      	movs	r2, #2
 8004070:	f005 fe2a 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004074:	f107 020b 	add.w	r2, r7, #11
 8004078:	f107 010c 	add.w	r1, r7, #12
 800407c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004080:	4618      	mov	r0, r3
 8004082:	f005 fea7 	bl	8009dd4 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004086:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800408a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d02c      	beq.n	80040ee <Cmd_pdu_set_buck+0x14a>
        for (int i = 0; i < frame_len; i++) {
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800409a:	e010      	b.n	80040be <Cmd_pdu_set_buck+0x11a>
            Uart_write(USART1, encoded_frame[i]);
 800409c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80040a0:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 80040a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80040a8:	4413      	add	r3, r2
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	4619      	mov	r1, r3
 80040ae:	4825      	ldr	r0, [pc, #148]	@ (8004144 <Cmd_pdu_set_buck+0x1a0>)
 80040b0:	f7fd fe00 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80040b4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80040b8:	3301      	adds	r3, #1
 80040ba:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80040be:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80040c2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80040ce:	4293      	cmp	r3, r2
 80040d0:	dbe4      	blt.n	800409c <Cmd_pdu_set_buck+0xf8>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80040d2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80040d6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80040da:	781a      	ldrb	r2, [r3, #0]
 80040dc:	f107 030c 	add.w	r3, r7, #12
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe f820 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80040e8:	f7fe f806 	bl	80020f8 <set_send_flag>
 80040ec:	e022      	b.n	8004134 <Cmd_pdu_set_buck+0x190>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80040ee:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80040f2:	f897 0211 	ldrb.w	r0, [r7, #529]	@ 0x211
 80040f6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	2301      	movs	r3, #1
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2303      	movs	r3, #3
 8004102:	2202      	movs	r2, #2
 8004104:	f005 fde0 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004108:	f107 020b 	add.w	r2, r7, #11
 800410c:	f107 010c 	add.w	r1, r7, #12
 8004110:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004114:	4618      	mov	r0, r3
 8004116:	f005 fe5d 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800411a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800411e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8004122:	781a      	ldrb	r2, [r3, #0]
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd fffc 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004130:	f7fd ffe2 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004134:	2305      	movs	r3, #5
}
 8004136:	4618      	mov	r0, r3
 8004138:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40020000 	.word	0x40020000
 8004144:	40011000 	.word	0x40011000

08004148 <Cmd_pdu_set_all>:

int Cmd_pdu_set_all(int argc, char *argv[])
{
 8004148:	b580      	push	{r7, lr}
 800414a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800414e:	af02      	add	r7, sp, #8
 8004150:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004154:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004158:	6018      	str	r0, [r3, #0]
 800415a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800415e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004162:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004164:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004168:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	dc01      	bgt.n	8004176 <Cmd_pdu_set_all+0x2e>
 8004172:	2303      	movs	r3, #3
 8004174:	e09a      	b.n	80042ac <Cmd_pdu_set_all+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004176:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800417a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b02      	cmp	r3, #2
 8004182:	dd01      	ble.n	8004188 <Cmd_pdu_set_all+0x40>
 8004184:	2302      	movs	r3, #2
 8004186:	e091      	b.n	80042ac <Cmd_pdu_set_all+0x164>

    uint8_t state = atoi(argv[1]);
 8004188:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800418c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3304      	adds	r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f008 fa4e 	bl	800c638 <atoi>
 800419c:	4603      	mov	r3, r0
 800419e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (state > 1) return CMDLINE_INVALID_ARG;
 80041a2:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d901      	bls.n	80041ae <Cmd_pdu_set_all+0x66>
 80041aa:	2304      	movs	r3, #4
 80041ac:	e07e      	b.n	80042ac <Cmd_pdu_set_all+0x164>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80041ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041b2:	4841      	ldr	r0, [pc, #260]	@ (80042b8 <Cmd_pdu_set_all+0x170>)
 80041b4:	f7ff fe14 	bl	8003de0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80041b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80041bc:	483e      	ldr	r0, [pc, #248]	@ (80042b8 <Cmd_pdu_set_all+0x170>)
 80041be:	f7ff fe0f 	bl	8003de0 <LL_GPIO_ResetOutputPin>

    uint8_t cmd  = CMD_CODE_PDU_SET_ALL;
 80041c2:	2303      	movs	r3, #3
 80041c4:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    uint8_t payload[1];
    payload[0]  = state;
 80041c8:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80041cc:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80041d0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80041d4:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 80041d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	2301      	movs	r3, #1
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2303      	movs	r3, #3
 80041e4:	2201      	movs	r2, #1
 80041e6:	f005 fd6f 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80041ea:	f107 020f 	add.w	r2, r7, #15
 80041ee:	f107 0110 	add.w	r1, r7, #16
 80041f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80041f6:	4618      	mov	r0, r3
 80041f8:	f005 fdec 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 80041fc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004200:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d02c      	beq.n	8004264 <Cmd_pdu_set_all+0x11c>
        for (int i = 0; i < frame_len; i++) {
 800420a:	2300      	movs	r3, #0
 800420c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004210:	e010      	b.n	8004234 <Cmd_pdu_set_all+0xec>
            Uart_write(USART1, encoded_frame[i]);
 8004212:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004216:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800421a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800421e:	4413      	add	r3, r2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	4619      	mov	r1, r3
 8004224:	4825      	ldr	r0, [pc, #148]	@ (80042bc <Cmd_pdu_set_all+0x174>)
 8004226:	f7fd fd45 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800422a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800422e:	3301      	adds	r3, #1
 8004230:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004234:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004238:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004244:	4293      	cmp	r3, r2
 8004246:	dbe4      	blt.n	8004212 <Cmd_pdu_set_all+0xca>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004248:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800424c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	f107 0310 	add.w	r3, r7, #16
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f7fd ff65 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 800425e:	f7fd ff4b 	bl	80020f8 <set_send_flag>
 8004262:	e022      	b.n	80042aa <Cmd_pdu_set_all+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004264:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004268:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 800426c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	2301      	movs	r3, #1
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2303      	movs	r3, #3
 8004278:	2201      	movs	r2, #1
 800427a:	f005 fd25 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800427e:	f107 020f 	add.w	r2, r7, #15
 8004282:	f107 0110 	add.w	r1, r7, #16
 8004286:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800428a:	4618      	mov	r0, r3
 800428c:	f005 fda2 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004290:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004294:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	f107 0310 	add.w	r3, r7, #16
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd ff41 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80042a6:	f7fd ff27 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 80042aa:	2305      	movs	r3, #5
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40020000 	.word	0x40020000
 80042bc:	40011000 	.word	0x40011000

080042c0 <Cmd_pdu_get_channel>:

int Cmd_pdu_get_channel(int argc, char *argv[])
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80042c6:	af02      	add	r7, sp, #8
 80042c8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042cc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80042d0:	6018      	str	r0, [r3, #0]
 80042d2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042d6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80042da:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80042dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042e0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	dc01      	bgt.n	80042ee <Cmd_pdu_get_channel+0x2e>
 80042ea:	2303      	movs	r3, #3
 80042ec:	e09a      	b.n	8004424 <Cmd_pdu_get_channel+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80042ee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042f2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	dd01      	ble.n	8004300 <Cmd_pdu_get_channel+0x40>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e091      	b.n	8004424 <Cmd_pdu_get_channel+0x164>
    uint8_t channel = atoi(argv[1]);
 8004300:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004304:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3304      	adds	r3, #4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f008 f992 	bl	800c638 <atoi>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 800431a:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800431e:	2b09      	cmp	r3, #9
 8004320:	d901      	bls.n	8004326 <Cmd_pdu_get_channel+0x66>
 8004322:	2304      	movs	r3, #4
 8004324:	e07e      	b.n	8004424 <Cmd_pdu_get_channel+0x164>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004326:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800432a:	4841      	ldr	r0, [pc, #260]	@ (8004430 <Cmd_pdu_get_channel+0x170>)
 800432c:	f7ff fd58 	bl	8003de0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004330:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004334:	483e      	ldr	r0, [pc, #248]	@ (8004430 <Cmd_pdu_get_channel+0x170>)
 8004336:	f7ff fd53 	bl	8003de0 <LL_GPIO_ResetOutputPin>


    uint8_t cmd  = CMD_CODE_PDU_GET_CHANNEL;
 800433a:	2304      	movs	r3, #4
 800433c:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    uint8_t payload[1];
    payload[0]  = channel;
 8004340:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8004344:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004348:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800434c:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8004350:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	2301      	movs	r3, #1
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	2303      	movs	r3, #3
 800435c:	2201      	movs	r2, #1
 800435e:	f005 fcb3 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004362:	f107 020f 	add.w	r2, r7, #15
 8004366:	f107 0110 	add.w	r1, r7, #16
 800436a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800436e:	4618      	mov	r0, r3
 8004370:	f005 fd30 	bl	8009dd4 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004374:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004378:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d02c      	beq.n	80043dc <Cmd_pdu_get_channel+0x11c>
        for (int i = 0; i < frame_len; i++) {
 8004382:	2300      	movs	r3, #0
 8004384:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004388:	e010      	b.n	80043ac <Cmd_pdu_get_channel+0xec>
            Uart_write(USART1, encoded_frame[i]);
 800438a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800438e:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8004392:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004396:	4413      	add	r3, r2
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	4619      	mov	r1, r3
 800439c:	4825      	ldr	r0, [pc, #148]	@ (8004434 <Cmd_pdu_get_channel+0x174>)
 800439e:	f7fd fc89 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80043a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80043a6:	3301      	adds	r3, #1
 80043a8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80043ac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80043b0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80043bc:	4293      	cmp	r3, r2
 80043be:	dbe4      	blt.n	800438a <Cmd_pdu_get_channel+0xca>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80043c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80043c4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	f107 0310 	add.w	r3, r7, #16
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fd fea9 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80043d6:	f7fd fe8f 	bl	80020f8 <set_send_flag>
 80043da:	e022      	b.n	8004422 <Cmd_pdu_get_channel+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80043dc:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80043e0:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 80043e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	2301      	movs	r3, #1
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	2303      	movs	r3, #3
 80043f0:	2201      	movs	r2, #1
 80043f2:	f005 fc69 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80043f6:	f107 020f 	add.w	r2, r7, #15
 80043fa:	f107 0110 	add.w	r1, r7, #16
 80043fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004402:	4618      	mov	r0, r3
 8004404:	f005 fce6 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004408:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800440c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	f107 0310 	add.w	r3, r7, #16
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f7fd fe85 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800441e:	f7fd fe6b 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004422:	2305      	movs	r3, #5
}
 8004424:	4618      	mov	r0, r3
 8004426:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40020000 	.word	0x40020000
 8004434:	40011000 	.word	0x40011000

08004438 <Cmd_pdu_get_buck>:

int Cmd_pdu_get_buck(int argc, char *argv[])
{
 8004438:	b580      	push	{r7, lr}
 800443a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800443e:	af02      	add	r7, sp, #8
 8004440:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004444:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004448:	6018      	str	r0, [r3, #0]
 800444a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800444e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004452:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004454:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004458:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	dc01      	bgt.n	8004466 <Cmd_pdu_get_buck+0x2e>
 8004462:	2303      	movs	r3, #3
 8004464:	e09a      	b.n	800459c <Cmd_pdu_get_buck+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004466:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800446a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b02      	cmp	r3, #2
 8004472:	dd01      	ble.n	8004478 <Cmd_pdu_get_buck+0x40>
 8004474:	2302      	movs	r3, #2
 8004476:	e091      	b.n	800459c <Cmd_pdu_get_buck+0x164>
    uint8_t buck = atoi(argv[1]);
 8004478:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800447c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3304      	adds	r3, #4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f008 f8d6 	bl	800c638 <atoi>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8004492:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8004496:	2b06      	cmp	r3, #6
 8004498:	d901      	bls.n	800449e <Cmd_pdu_get_buck+0x66>
 800449a:	2304      	movs	r3, #4
 800449c:	e07e      	b.n	800459c <Cmd_pdu_get_buck+0x164>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800449e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80044a2:	4841      	ldr	r0, [pc, #260]	@ (80045a8 <Cmd_pdu_get_buck+0x170>)
 80044a4:	f7ff fc9c 	bl	8003de0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80044a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044ac:	483e      	ldr	r0, [pc, #248]	@ (80045a8 <Cmd_pdu_get_buck+0x170>)
 80044ae:	f7ff fc97 	bl	8003de0 <LL_GPIO_ResetOutputPin>

    uint8_t cmd  = CMD_CODE_PDU_GET_BUCK;
 80044b2:	2305      	movs	r3, #5
 80044b4:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    uint8_t payload[1];
    payload[0]  = buck;
 80044b8:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80044bc:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80044c0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80044c4:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 80044c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	2301      	movs	r3, #1
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2303      	movs	r3, #3
 80044d4:	2201      	movs	r2, #1
 80044d6:	f005 fbf7 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80044da:	f107 020f 	add.w	r2, r7, #15
 80044de:	f107 0110 	add.w	r1, r7, #16
 80044e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80044e6:	4618      	mov	r0, r3
 80044e8:	f005 fc74 	bl	8009dd4 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80044ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80044f0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d02c      	beq.n	8004554 <Cmd_pdu_get_buck+0x11c>
        for (int i = 0; i < frame_len; i++) {
 80044fa:	2300      	movs	r3, #0
 80044fc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004500:	e010      	b.n	8004524 <Cmd_pdu_get_buck+0xec>
            Uart_write(USART1, encoded_frame[i]);
 8004502:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004506:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800450a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800450e:	4413      	add	r3, r2
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	4619      	mov	r1, r3
 8004514:	4825      	ldr	r0, [pc, #148]	@ (80045ac <Cmd_pdu_get_buck+0x174>)
 8004516:	f7fd fbcd 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800451a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800451e:	3301      	adds	r3, #1
 8004520:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004524:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004528:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004534:	4293      	cmp	r3, r2
 8004536:	dbe4      	blt.n	8004502 <Cmd_pdu_get_buck+0xca>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004538:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800453c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	f107 0310 	add.w	r3, r7, #16
 8004546:	4611      	mov	r1, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f7fd fded 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 800454e:	f7fd fdd3 	bl	80020f8 <set_send_flag>
 8004552:	e022      	b.n	800459a <Cmd_pdu_get_buck+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004554:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004558:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 800455c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	2301      	movs	r3, #1
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	2303      	movs	r3, #3
 8004568:	2201      	movs	r2, #1
 800456a:	f005 fbad 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800456e:	f107 020f 	add.w	r2, r7, #15
 8004572:	f107 0110 	add.w	r1, r7, #16
 8004576:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800457a:	4618      	mov	r0, r3
 800457c:	f005 fc2a 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004580:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004584:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	f107 0310 	add.w	r3, r7, #16
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f7fd fdc9 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004596:	f7fd fdaf 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 800459a:	2305      	movs	r3, #5
}
 800459c:	4618      	mov	r0, r3
 800459e:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40020000 	.word	0x40020000
 80045ac:	40011000 	.word	0x40011000

080045b0 <Cmd_pdu_get_all>:

int Cmd_pdu_get_all(int argc, char *argv[])
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80045bc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80045c0:	6018      	str	r0, [r3, #0]
 80045c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80045c6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80045ca:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 80045cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80045d0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dc01      	bgt.n	80045de <Cmd_pdu_get_all+0x2e>
 80045da:	2303      	movs	r3, #3
 80045dc:	e079      	b.n	80046d2 <Cmd_pdu_get_all+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80045de:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80045e2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	dd01      	ble.n	80045f0 <Cmd_pdu_get_all+0x40>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e070      	b.n	80046d2 <Cmd_pdu_get_all+0x122>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80045f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80045f4:	4839      	ldr	r0, [pc, #228]	@ (80046dc <Cmd_pdu_get_all+0x12c>)
 80045f6:	f7ff fbf3 	bl	8003de0 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80045fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045fe:	4837      	ldr	r0, [pc, #220]	@ (80046dc <Cmd_pdu_get_all+0x12c>)
 8004600:	f7ff fbee 	bl	8003de0 <LL_GPIO_ResetOutputPin>

    uint8_t cmd  = CMD_CODE_PDU_GET_ALL;
 8004604:	2306      	movs	r3, #6
 8004606:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800460a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800460e:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8004612:	2201      	movs	r2, #1
 8004614:	2103      	movs	r1, #3
 8004616:	f005 fb2f 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800461a:	f107 020b 	add.w	r2, r7, #11
 800461e:	f107 010c 	add.w	r1, r7, #12
 8004622:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004626:	4618      	mov	r0, r3
 8004628:	f005 fbd4 	bl	8009dd4 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 800462c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004630:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d02c      	beq.n	8004694 <Cmd_pdu_get_all+0xe4>
        for (int i = 0; i < frame_len; i++) {
 800463a:	2300      	movs	r3, #0
 800463c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8004640:	e010      	b.n	8004664 <Cmd_pdu_get_all+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 8004642:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004646:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 800464a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800464e:	4413      	add	r3, r2
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	4619      	mov	r1, r3
 8004654:	4822      	ldr	r0, [pc, #136]	@ (80046e0 <Cmd_pdu_get_all+0x130>)
 8004656:	f7fd fb2d 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800465a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800465e:	3301      	adds	r3, #1
 8004660:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8004664:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004668:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004674:	4293      	cmp	r3, r2
 8004676:	dbe4      	blt.n	8004642 <Cmd_pdu_get_all+0x92>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004678:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800467c:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004680:	781a      	ldrb	r2, [r3, #0]
 8004682:	f107 030c 	add.w	r3, r7, #12
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7fd fd4d 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 800468e:	f7fd fd33 	bl	80020f8 <set_send_flag>
 8004692:	e01d      	b.n	80046d0 <Cmd_pdu_get_all+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004694:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004698:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 800469c:	2201      	movs	r2, #1
 800469e:	2103      	movs	r1, #3
 80046a0:	f005 faea 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80046a4:	f107 020b 	add.w	r2, r7, #11
 80046a8:	f107 010c 	add.w	r1, r7, #12
 80046ac:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80046b0:	4618      	mov	r0, r3
 80046b2:	f005 fb8f 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80046b6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80046ba:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80046be:	781a      	ldrb	r2, [r3, #0]
 80046c0:	f107 030c 	add.w	r3, r7, #12
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fd fd2e 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80046cc:	f7fd fd14 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80046d0:	2305      	movs	r3, #5
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40020000 	.word	0x40020000
 80046e0:	40011000 	.word	0x40011000

080046e4 <LL_GPIO_SetOutputPin>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	619a      	str	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <LL_GPIO_ResetOutputPin>:
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	041a      	lsls	r2, r3, #16
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	619a      	str	r2, [r3, #24]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <Cmd_pmu_get_temp>:
#include "../global_vars.h"

#define DEST_ADDR FSP_ADR_PMU

int Cmd_pmu_get_temp(int argc, char *argv[])
{
 8004720:	b580      	push	{r7, lr}
 8004722:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8004726:	af00      	add	r7, sp, #0
 8004728:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800472c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8004730:	6018      	str	r0, [r3, #0]
 8004732:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004736:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800473a:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 800473c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004740:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	dc01      	bgt.n	800474e <Cmd_pmu_get_temp+0x2e>
 800474a:	2303      	movs	r3, #3
 800474c:	e079      	b.n	8004842 <Cmd_pmu_get_temp+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 800474e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004752:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	dd01      	ble.n	8004760 <Cmd_pmu_get_temp+0x40>
 800475c:	2302      	movs	r3, #2
 800475e:	e070      	b.n	8004842 <Cmd_pmu_get_temp+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004760:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004764:	4839      	ldr	r0, [pc, #228]	@ (800484c <Cmd_pmu_get_temp+0x12c>)
 8004766:	f7ff ffcb 	bl	8004700 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800476a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800476e:	4837      	ldr	r0, [pc, #220]	@ (800484c <Cmd_pmu_get_temp+0x12c>)
 8004770:	f7ff ffb8 	bl	80046e4 <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_PMU_GET_TEMP;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800477a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800477e:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8004782:	2201      	movs	r2, #1
 8004784:	2102      	movs	r1, #2
 8004786:	f005 fa77 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800478a:	f107 020b 	add.w	r2, r7, #11
 800478e:	f107 010c 	add.w	r1, r7, #12
 8004792:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004796:	4618      	mov	r0, r3
 8004798:	f005 fb1c 	bl	8009dd4 <frame_encode>

    if (frame_len > 0) {
 800479c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80047a0:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d02c      	beq.n	8004804 <Cmd_pmu_get_temp+0xe4>
        for (int i = 0; i < frame_len; i++) {
 80047aa:	2300      	movs	r3, #0
 80047ac:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80047b0:	e010      	b.n	80047d4 <Cmd_pmu_get_temp+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 80047b2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80047b6:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80047ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80047be:	4413      	add	r3, r2
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	4619      	mov	r1, r3
 80047c4:	4822      	ldr	r0, [pc, #136]	@ (8004850 <Cmd_pmu_get_temp+0x130>)
 80047c6:	f7fd fa75 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80047ca:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80047ce:	3301      	adds	r3, #1
 80047d0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80047d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80047d8:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80047e4:	4293      	cmp	r3, r2
 80047e6:	dbe4      	blt.n	80047b2 <Cmd_pmu_get_temp+0x92>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80047e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80047ec:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	f107 030c 	add.w	r3, r7, #12
 80047f6:	4611      	mov	r1, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fd fc95 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 80047fe:	f7fd fc7b 	bl	80020f8 <set_send_flag>
 8004802:	e01d      	b.n	8004840 <Cmd_pmu_get_temp+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004804:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004808:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 800480c:	2201      	movs	r2, #1
 800480e:	2102      	movs	r1, #2
 8004810:	f005 fa32 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004814:	f107 020b 	add.w	r2, r7, #11
 8004818:	f107 010c 	add.w	r1, r7, #12
 800481c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004820:	4618      	mov	r0, r3
 8004822:	f005 fad7 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004826:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800482a:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f7fd fc76 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 800483c:	f7fd fc5c 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004840:	2305      	movs	r3, #5
}
 8004842:	4618      	mov	r0, r3
 8004844:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40020000 	.word	0x40020000
 8004850:	40011000 	.word	0x40011000

08004854 <Cmd_pmu_bat_vol>:

int Cmd_pmu_bat_vol(int argc, char *argv[])
{
 8004854:	b580      	push	{r7, lr}
 8004856:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800485a:	af00      	add	r7, sp, #0
 800485c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004860:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8004864:	6018      	str	r0, [r3, #0]
 8004866:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800486a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800486e:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8004870:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004874:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	dc01      	bgt.n	8004882 <Cmd_pmu_bat_vol+0x2e>
 800487e:	2303      	movs	r3, #3
 8004880:	e079      	b.n	8004976 <Cmd_pmu_bat_vol+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8004882:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004886:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	dd01      	ble.n	8004894 <Cmd_pmu_bat_vol+0x40>
 8004890:	2302      	movs	r3, #2
 8004892:	e070      	b.n	8004976 <Cmd_pmu_bat_vol+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004894:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004898:	4839      	ldr	r0, [pc, #228]	@ (8004980 <Cmd_pmu_bat_vol+0x12c>)
 800489a:	f7ff ff31 	bl	8004700 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800489e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80048a2:	4837      	ldr	r0, [pc, #220]	@ (8004980 <Cmd_pmu_bat_vol+0x12c>)
 80048a4:	f7ff ff1e 	bl	80046e4 <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_BAT_VOL;
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80048ae:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80048b2:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 80048b6:	2201      	movs	r2, #1
 80048b8:	2102      	movs	r1, #2
 80048ba:	f005 f9dd 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80048be:	f107 020b 	add.w	r2, r7, #11
 80048c2:	f107 010c 	add.w	r1, r7, #12
 80048c6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80048ca:	4618      	mov	r0, r3
 80048cc:	f005 fa82 	bl	8009dd4 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80048d0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80048d4:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02c      	beq.n	8004938 <Cmd_pmu_bat_vol+0xe4>
        for (int i = 0; i < frame_len; i++) {
 80048de:	2300      	movs	r3, #0
 80048e0:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80048e4:	e010      	b.n	8004908 <Cmd_pmu_bat_vol+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 80048e6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80048ea:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80048ee:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80048f2:	4413      	add	r3, r2
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	4619      	mov	r1, r3
 80048f8:	4822      	ldr	r0, [pc, #136]	@ (8004984 <Cmd_pmu_bat_vol+0x130>)
 80048fa:	f7fd f9db 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80048fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004902:	3301      	adds	r3, #1
 8004904:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8004908:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800490c:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004918:	4293      	cmp	r3, r2
 800491a:	dbe4      	blt.n	80048e6 <Cmd_pmu_bat_vol+0x92>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800491c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004920:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004924:	781a      	ldrb	r2, [r3, #0]
 8004926:	f107 030c 	add.w	r3, r7, #12
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f7fd fbfb 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004932:	f7fd fbe1 	bl	80020f8 <set_send_flag>
 8004936:	e01d      	b.n	8004974 <Cmd_pmu_bat_vol+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004938:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800493c:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8004940:	2201      	movs	r2, #1
 8004942:	2102      	movs	r1, #2
 8004944:	f005 f998 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004948:	f107 020b 	add.w	r2, r7, #11
 800494c:	f107 010c 	add.w	r1, r7, #12
 8004950:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004954:	4618      	mov	r0, r3
 8004956:	f005 fa3d 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800495a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800495e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	f107 030c 	add.w	r3, r7, #12
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f7fd fbdc 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004970:	f7fd fbc2 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004974:	2305      	movs	r3, #5
}
 8004976:	4618      	mov	r0, r3
 8004978:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40020000 	.word	0x40020000
 8004984:	40011000 	.word	0x40011000

08004988 <Cmd_pmu_parag_in>:

int Cmd_pmu_parag_in(int argc, char *argv[])
{
 8004988:	b580      	push	{r7, lr}
 800498a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800498e:	af00      	add	r7, sp, #0
 8004990:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004994:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8004998:	6018      	str	r0, [r3, #0]
 800499a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800499e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80049a2:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 80049a4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80049a8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dc01      	bgt.n	80049b6 <Cmd_pmu_parag_in+0x2e>
 80049b2:	2303      	movs	r3, #3
 80049b4:	e079      	b.n	8004aaa <Cmd_pmu_parag_in+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80049b6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80049ba:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	dd01      	ble.n	80049c8 <Cmd_pmu_parag_in+0x40>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e070      	b.n	8004aaa <Cmd_pmu_parag_in+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80049c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049cc:	4839      	ldr	r0, [pc, #228]	@ (8004ab4 <Cmd_pmu_parag_in+0x12c>)
 80049ce:	f7ff fe97 	bl	8004700 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80049d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80049d6:	4837      	ldr	r0, [pc, #220]	@ (8004ab4 <Cmd_pmu_parag_in+0x12c>)
 80049d8:	f7ff fe84 	bl	80046e4 <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_PARAG_IN;
 80049dc:	2303      	movs	r3, #3
 80049de:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80049e2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80049e6:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 80049ea:	2201      	movs	r2, #1
 80049ec:	2102      	movs	r1, #2
 80049ee:	f005 f943 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80049f2:	f107 020b 	add.w	r2, r7, #11
 80049f6:	f107 010c 	add.w	r1, r7, #12
 80049fa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80049fe:	4618      	mov	r0, r3
 8004a00:	f005 f9e8 	bl	8009dd4 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8004a04:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004a08:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d02c      	beq.n	8004a6c <Cmd_pmu_parag_in+0xe4>
        for (int i = 0; i < frame_len; i++) {
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8004a18:	e010      	b.n	8004a3c <Cmd_pmu_parag_in+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 8004a1a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004a1e:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 8004a22:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4822      	ldr	r0, [pc, #136]	@ (8004ab8 <Cmd_pmu_parag_in+0x130>)
 8004a2e:	f7fd f941 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004a32:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004a36:	3301      	adds	r3, #1
 8004a38:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8004a3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004a40:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	dbe4      	blt.n	8004a1a <Cmd_pmu_parag_in+0x92>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004a50:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004a54:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	f107 030c 	add.w	r3, r7, #12
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fd fb61 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004a66:	f7fd fb47 	bl	80020f8 <set_send_flag>
 8004a6a:	e01d      	b.n	8004aa8 <Cmd_pmu_parag_in+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004a6c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004a70:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8004a74:	2201      	movs	r2, #1
 8004a76:	2102      	movs	r1, #2
 8004a78:	f005 f8fe 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004a7c:	f107 020b 	add.w	r2, r7, #11
 8004a80:	f107 010c 	add.w	r1, r7, #12
 8004a84:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f005 f9a3 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004a8e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004a92:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004a96:	781a      	ldrb	r2, [r3, #0]
 8004a98:	f107 030c 	add.w	r3, r7, #12
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fd fb42 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004aa4:	f7fd fb28 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004aa8:	2305      	movs	r3, #5
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40020000 	.word	0x40020000
 8004ab8:	40011000 	.word	0x40011000

08004abc <Cmd_pmu_parag_out>:

int Cmd_pmu_parag_out(int argc, char *argv[])
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004ac8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8004acc:	6018      	str	r0, [r3, #0]
 8004ace:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004ad2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8004ad6:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8004ad8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004adc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	dc01      	bgt.n	8004aea <Cmd_pmu_parag_out+0x2e>
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e079      	b.n	8004bde <Cmd_pmu_parag_out+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8004aea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004aee:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	dd01      	ble.n	8004afc <Cmd_pmu_parag_out+0x40>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e070      	b.n	8004bde <Cmd_pmu_parag_out+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004afc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b00:	4839      	ldr	r0, [pc, #228]	@ (8004be8 <Cmd_pmu_parag_out+0x12c>)
 8004b02:	f7ff fdfd 	bl	8004700 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004b06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004b0a:	4837      	ldr	r0, [pc, #220]	@ (8004be8 <Cmd_pmu_parag_out+0x12c>)
 8004b0c:	f7ff fdea 	bl	80046e4 <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_PARAG_OUT;
 8004b10:	2304      	movs	r3, #4
 8004b12:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004b16:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004b1a:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8004b1e:	2201      	movs	r2, #1
 8004b20:	2102      	movs	r1, #2
 8004b22:	f005 f8a9 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004b26:	f107 020b 	add.w	r2, r7, #11
 8004b2a:	f107 010c 	add.w	r1, r7, #12
 8004b2e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004b32:	4618      	mov	r0, r3
 8004b34:	f005 f94e 	bl	8009dd4 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8004b38:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004b3c:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d02c      	beq.n	8004ba0 <Cmd_pmu_parag_out+0xe4>
        for (int i = 0; i < frame_len; i++) {
 8004b46:	2300      	movs	r3, #0
 8004b48:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8004b4c:	e010      	b.n	8004b70 <Cmd_pmu_parag_out+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 8004b4e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004b52:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 8004b56:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004b5a:	4413      	add	r3, r2
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4822      	ldr	r0, [pc, #136]	@ (8004bec <Cmd_pmu_parag_out+0x130>)
 8004b62:	f7fd f8a7 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004b66:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8004b70:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004b74:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8004b80:	4293      	cmp	r3, r2
 8004b82:	dbe4      	blt.n	8004b4e <Cmd_pmu_parag_out+0x92>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004b84:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004b88:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	f107 030c 	add.w	r3, r7, #12
 8004b92:	4611      	mov	r1, r2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fd fac7 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004b9a:	f7fd faad 	bl	80020f8 <set_send_flag>
 8004b9e:	e01d      	b.n	8004bdc <Cmd_pmu_parag_out+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004ba0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004ba4:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8004ba8:	2201      	movs	r2, #1
 8004baa:	2102      	movs	r1, #2
 8004bac:	f005 f864 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004bb0:	f107 020b 	add.w	r2, r7, #11
 8004bb4:	f107 010c 	add.w	r1, r7, #12
 8004bb8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f005 f909 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004bc2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004bc6:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	f107 030c 	add.w	r3, r7, #12
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fd faa8 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004bd8:	f7fd fa8e 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004bdc:	2305      	movs	r3, #5
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40020000 	.word	0x40020000
 8004bec:	40011000 	.word	0x40011000

08004bf0 <Cmd_pmu_set_temppoint>:

int Cmd_pmu_set_temppoint(int argc, char *argv[])
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004bf6:	af02      	add	r7, sp, #8
 8004bf8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bfc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004c00:	6018      	str	r0, [r3, #0]
 8004c02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c06:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004c0a:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8004c0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c10:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	dc01      	bgt.n	8004c1e <Cmd_pmu_set_temppoint+0x2e>
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0bd      	b.n	8004d9a <Cmd_pmu_set_temppoint+0x1aa>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8004c1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c22:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	dd01      	ble.n	8004c30 <Cmd_pmu_set_temppoint+0x40>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e0b4      	b.n	8004d9a <Cmd_pmu_set_temppoint+0x1aa>
    uint16_t lowpoint = atoi(argv[1]);
 8004c30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c34:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f007 fcfa 	bl	800c638 <atoi>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
   // if (lowpoint > 6)   return CMDLINE_INVALID_ARG;
    uint16_t highpoint = atoi(argv[2]);
 8004c4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c4e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f007 fced 	bl	800c638 <atoi>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
   // if (highpoint > 6)   return CMDLINE_INVALID_ARG;
    if (highpoint < lowpoint)   return CMDLINE_INVALID_ARG;
 8004c64:	f8b7 2218 	ldrh.w	r2, [r7, #536]	@ 0x218
 8004c68:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d201      	bcs.n	8004c74 <Cmd_pmu_set_temppoint+0x84>
 8004c70:	2304      	movs	r3, #4
 8004c72:	e092      	b.n	8004d9a <Cmd_pmu_set_temppoint+0x1aa>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004c74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c78:	484a      	ldr	r0, [pc, #296]	@ (8004da4 <Cmd_pmu_set_temppoint+0x1b4>)
 8004c7a:	f7ff fd41 	bl	8004700 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004c7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004c82:	4848      	ldr	r0, [pc, #288]	@ (8004da4 <Cmd_pmu_set_temppoint+0x1b4>)
 8004c84:	f7ff fd2e 	bl	80046e4 <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_PMU_TEMP_POINT;
 8004c88:	2305      	movs	r3, #5
 8004c8a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217

    uint8_t payload[4];
    payload[0]  = (uint8_t)(lowpoint >> 8);
 8004c8e:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(lowpoint & 0xFF);
 8004c9c:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(highpoint >> 8);
 8004ca6:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    payload[3]  = (uint8_t)(highpoint & 0xFF);
 8004cb4:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004cbe:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004cc2:	f897 0217 	ldrb.w	r0, [r7, #535]	@ 0x217
 8004cc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	2301      	movs	r3, #1
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	f004 fff8 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004cd8:	f107 020f 	add.w	r2, r7, #15
 8004cdc:	f107 0110 	add.w	r1, r7, #16
 8004ce0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f005 f875 	bl	8009dd4 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8004cea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cee:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02c      	beq.n	8004d52 <Cmd_pmu_set_temppoint+0x162>
        for (int i = 0; i < frame_len; i++) {
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004cfe:	e010      	b.n	8004d22 <Cmd_pmu_set_temppoint+0x132>
            Uart_write(USART1, encoded_frame[i]);
 8004d00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d04:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004d08:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d0c:	4413      	add	r3, r2
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	4619      	mov	r1, r3
 8004d12:	4825      	ldr	r0, [pc, #148]	@ (8004da8 <Cmd_pmu_set_temppoint+0x1b8>)
 8004d14:	f7fc ffce 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004d18:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004d22:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d26:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d32:	4293      	cmp	r3, r2
 8004d34:	dbe4      	blt.n	8004d00 <Cmd_pmu_set_temppoint+0x110>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004d36:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d3a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d3e:	781a      	ldrb	r2, [r3, #0]
 8004d40:	f107 0310 	add.w	r3, r7, #16
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fd f9ee 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004d4c:	f7fd f9d4 	bl	80020f8 <set_send_flag>
 8004d50:	e022      	b.n	8004d98 <Cmd_pmu_set_temppoint+0x1a8>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004d52:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004d56:	f897 0217 	ldrb.w	r0, [r7, #535]	@ 0x217
 8004d5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	2301      	movs	r3, #1
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	2302      	movs	r3, #2
 8004d66:	2204      	movs	r2, #4
 8004d68:	f004 ffae 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004d6c:	f107 020f 	add.w	r2, r7, #15
 8004d70:	f107 0110 	add.w	r1, r7, #16
 8004d74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f005 f82b 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004d7e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d82:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d86:	781a      	ldrb	r2, [r3, #0]
 8004d88:	f107 0310 	add.w	r3, r7, #16
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fd f9ca 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 8004d94:	f7fd f9b0 	bl	80020f8 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004d98:	2305      	movs	r3, #5
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40020000 	.word	0x40020000
 8004da8:	40011000 	.word	0x40011000

08004dac <Cmd_pmu_set_output>:

int Cmd_pmu_set_output(int argc, char *argv[])
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004db2:	af02      	add	r7, sp, #8
 8004db4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004db8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004dbc:	6018      	str	r0, [r3, #0]
 8004dbe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004dc2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004dc6:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004dc8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004dcc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	dc01      	bgt.n	8004dda <Cmd_pmu_set_output+0x2e>
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e09a      	b.n	8004f10 <Cmd_pmu_set_output+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004dda:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004dde:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	dd01      	ble.n	8004dec <Cmd_pmu_set_output+0x40>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e091      	b.n	8004f10 <Cmd_pmu_set_output+0x164>
    uint8_t state = atoi(argv[1]);
 8004dec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004df0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3304      	adds	r3, #4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f007 fc1c 	bl	800c638 <atoi>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (state > 1)   return CMDLINE_INVALID_ARG;
 8004e06:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d901      	bls.n	8004e12 <Cmd_pmu_set_output+0x66>
 8004e0e:	2304      	movs	r3, #4
 8004e10:	e07e      	b.n	8004f10 <Cmd_pmu_set_output+0x164>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004e12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e16:	4841      	ldr	r0, [pc, #260]	@ (8004f1c <Cmd_pmu_set_output+0x170>)
 8004e18:	f7ff fc72 	bl	8004700 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004e1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e20:	483e      	ldr	r0, [pc, #248]	@ (8004f1c <Cmd_pmu_set_output+0x170>)
 8004e22:	f7ff fc5f 	bl	80046e4 <LL_GPIO_SetOutputPin>


    uint8_t cmd  = CMD_CODE_PMU_OUTPUT;
 8004e26:	2306      	movs	r3, #6
 8004e28:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212

    uint8_t payload[4];
    payload[0]  = state;
 8004e2c:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8004e30:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004e34:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8004e38:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8004e3c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	2301      	movs	r3, #1
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2302      	movs	r3, #2
 8004e48:	2204      	movs	r2, #4
 8004e4a:	f004 ff3d 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004e4e:	f107 020b 	add.w	r2, r7, #11
 8004e52:	f107 010c 	add.w	r1, r7, #12
 8004e56:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f004 ffba 	bl	8009dd4 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8004e60:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004e64:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d02c      	beq.n	8004ec8 <Cmd_pmu_set_output+0x11c>
        for (int i = 0; i < frame_len; i++) {
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004e74:	e010      	b.n	8004e98 <Cmd_pmu_set_output+0xec>
            Uart_write(USART1, encoded_frame[i]);
 8004e76:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004e7a:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 8004e7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004e82:	4413      	add	r3, r2
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	4619      	mov	r1, r3
 8004e88:	4825      	ldr	r0, [pc, #148]	@ (8004f20 <Cmd_pmu_set_output+0x174>)
 8004e8a:	f7fc ff13 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004e8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004e92:	3301      	adds	r3, #1
 8004e94:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004e98:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004e9c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	dbe4      	blt.n	8004e76 <Cmd_pmu_set_output+0xca>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004eac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004eb0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	f107 030c 	add.w	r3, r7, #12
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fd f933 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004ec2:	f7fd f919 	bl	80020f8 <set_send_flag>
 8004ec6:	e022      	b.n	8004f0e <Cmd_pmu_set_output+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004ec8:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8004ecc:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8004ed0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2302      	movs	r3, #2
 8004edc:	2204      	movs	r2, #4
 8004ede:	f004 fef3 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004ee2:	f107 020b 	add.w	r2, r7, #11
 8004ee6:	f107 010c 	add.w	r1, r7, #12
 8004eea:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f004 ff70 	bl	8009dd4 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8004ef4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004ef8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	f107 030c 	add.w	r3, r7, #12
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fd f90f 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8004f0a:	f7fd f8f5 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8004f0e:	2305      	movs	r3, #5
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40020000 	.word	0x40020000
 8004f20:	40011000 	.word	0x40011000

08004f24 <Cmd_pmu_set_pwm>:

int Cmd_pmu_set_pwm(int argc, char *argv[])
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8004f2a:	af02      	add	r7, sp, #8
 8004f2c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004f30:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004f34:	6018      	str	r0, [r3, #0]
 8004f36:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004f3a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004f3e:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8004f40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004f44:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	dc01      	bgt.n	8004f52 <Cmd_pmu_set_pwm+0x2e>
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e09a      	b.n	8005088 <Cmd_pmu_set_pwm+0x164>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8004f52:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004f56:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	dd01      	ble.n	8004f64 <Cmd_pmu_set_pwm+0x40>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e091      	b.n	8005088 <Cmd_pmu_set_pwm+0x164>
    uint8_t duty = atoi(argv[1]);
 8004f64:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004f68:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f007 fb60 	bl	800c638 <atoi>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    if (duty > 100)   return CMDLINE_INVALID_ARG;
 8004f7e:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8004f82:	2b64      	cmp	r3, #100	@ 0x64
 8004f84:	d901      	bls.n	8004f8a <Cmd_pmu_set_pwm+0x66>
 8004f86:	2304      	movs	r3, #4
 8004f88:	e07e      	b.n	8005088 <Cmd_pmu_set_pwm+0x164>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004f8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f8e:	4841      	ldr	r0, [pc, #260]	@ (8005094 <Cmd_pmu_set_pwm+0x170>)
 8004f90:	f7ff fbb6 	bl	8004700 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004f94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f98:	483e      	ldr	r0, [pc, #248]	@ (8005094 <Cmd_pmu_set_pwm+0x170>)
 8004f9a:	f7ff fba3 	bl	80046e4 <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_PMU_PWM;
 8004f9e:	2307      	movs	r3, #7
 8004fa0:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212

    uint8_t payload[4];
    payload[0]  = duty;
 8004fa4:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8004fa8:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004fac:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8004fb0:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8004fb4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	2301      	movs	r3, #1
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	f004 fe81 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004fc6:	f107 020b 	add.w	r2, r7, #11
 8004fca:	f107 010c 	add.w	r1, r7, #12
 8004fce:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f004 fefe 	bl	8009dd4 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8004fd8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004fdc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d02c      	beq.n	8005040 <Cmd_pmu_set_pwm+0x11c>
        for (int i = 0; i < frame_len; i++) {
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004fec:	e010      	b.n	8005010 <Cmd_pmu_set_pwm+0xec>
            Uart_write(USART1, encoded_frame[i]);
 8004fee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004ff2:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 8004ff6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004ffa:	4413      	add	r3, r2
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	4619      	mov	r1, r3
 8005000:	4825      	ldr	r0, [pc, #148]	@ (8005098 <Cmd_pmu_set_pwm+0x174>)
 8005002:	f7fc fe57 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005006:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800500a:	3301      	adds	r3, #1
 800500c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005010:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005014:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005020:	4293      	cmp	r3, r2
 8005022:	dbe4      	blt.n	8004fee <Cmd_pmu_set_pwm+0xca>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005024:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005028:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	f107 030c 	add.w	r3, r7, #12
 8005032:	4611      	mov	r1, r2
 8005034:	4618      	mov	r0, r3
 8005036:	f7fd f877 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 800503a:	f7fd f85d 	bl	80020f8 <set_send_flag>
 800503e:	e022      	b.n	8005086 <Cmd_pmu_set_pwm+0x162>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005040:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005044:	f897 0212 	ldrb.w	r0, [r7, #530]	@ 0x212
 8005048:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	2301      	movs	r3, #1
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	2302      	movs	r3, #2
 8005054:	2204      	movs	r2, #4
 8005056:	f004 fe37 	bl	8009cc8 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800505a:	f107 020b 	add.w	r2, r7, #11
 800505e:	f107 010c 	add.w	r1, r7, #12
 8005062:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005066:	4618      	mov	r0, r3
 8005068:	f004 feb4 	bl	8009dd4 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 800506c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005070:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8005074:	781a      	ldrb	r2, [r3, #0]
 8005076:	f107 030c 	add.w	r3, r7, #12
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f7fd f853 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 8005082:	f7fd f839 	bl	80020f8 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8005086:	2305      	movs	r3, #5
}
 8005088:	4618      	mov	r0, r3
 800508a:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40020000 	.word	0x40020000
 8005098:	40011000 	.word	0x40011000

0800509c <Cmd_pmu_get_all>:

int Cmd_pmu_get_all(int argc, char *argv[])
{
 800509c:	b580      	push	{r7, lr}
 800509e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80050a8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80050ac:	6018      	str	r0, [r3, #0]
 80050ae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80050b2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80050b6:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 80050b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80050bc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	dc01      	bgt.n	80050ca <Cmd_pmu_get_all+0x2e>
 80050c6:	2303      	movs	r3, #3
 80050c8:	e079      	b.n	80051be <Cmd_pmu_get_all+0x122>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80050ca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80050ce:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	dd01      	ble.n	80050dc <Cmd_pmu_get_all+0x40>
 80050d8:	2302      	movs	r3, #2
 80050da:	e070      	b.n	80051be <Cmd_pmu_get_all+0x122>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80050dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80050e0:	4839      	ldr	r0, [pc, #228]	@ (80051c8 <Cmd_pmu_get_all+0x12c>)
 80050e2:	f7ff fb0d 	bl	8004700 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80050e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80050ea:	4837      	ldr	r0, [pc, #220]	@ (80051c8 <Cmd_pmu_get_all+0x12c>)
 80050ec:	f7ff fafa 	bl	80046e4 <LL_GPIO_SetOutputPin>

    uint8_t cmd  = CMD_CODE_PMU_ALL;
 80050f0:	2308      	movs	r3, #8
 80050f2:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80050f6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80050fa:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 80050fe:	2201      	movs	r2, #1
 8005100:	2102      	movs	r1, #2
 8005102:	f004 fdb9 	bl	8009c78 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005106:	f107 020b 	add.w	r2, r7, #11
 800510a:	f107 010c 	add.w	r1, r7, #12
 800510e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005112:	4618      	mov	r0, r3
 8005114:	f004 fe5e 	bl	8009dd4 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005118:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800511c:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d02c      	beq.n	8005180 <Cmd_pmu_get_all+0xe4>
        for (int i = 0; i < frame_len; i++) {
 8005126:	2300      	movs	r3, #0
 8005128:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 800512c:	e010      	b.n	8005150 <Cmd_pmu_get_all+0xb4>
            Uart_write(USART1, encoded_frame[i]);
 800512e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8005132:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 8005136:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800513a:	4413      	add	r3, r2
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	4619      	mov	r1, r3
 8005140:	4822      	ldr	r0, [pc, #136]	@ (80051cc <Cmd_pmu_get_all+0x130>)
 8005142:	f7fc fdb7 	bl	8001cb4 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005146:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800514a:	3301      	adds	r3, #1
 800514c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8005150:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8005154:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8005160:	4293      	cmp	r3, r2
 8005162:	dbe4      	blt.n	800512e <Cmd_pmu_get_all+0x92>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005164:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8005168:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800516c:	781a      	ldrb	r2, [r3, #0]
 800516e:	f107 030c 	add.w	r3, r7, #12
 8005172:	4611      	mov	r1, r2
 8005174:	4618      	mov	r0, r3
 8005176:	f7fc ffd7 	bl	8002128 <set_fsp_packet>
        set_send_flag();
 800517a:	f7fc ffbd 	bl	80020f8 <set_send_flag>
 800517e:	e01d      	b.n	80051bc <Cmd_pmu_get_all+0x120>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005180:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005184:	f897 020b 	ldrb.w	r0, [r7, #523]	@ 0x20b
 8005188:	2201      	movs	r2, #1
 800518a:	2102      	movs	r1, #2
 800518c:	f004 fd74 	bl	8009c78 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005190:	f107 020b 	add.w	r2, r7, #11
 8005194:	f107 010c 	add.w	r1, r7, #12
 8005198:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800519c:	4618      	mov	r0, r3
 800519e:	f004 fe19 	bl	8009dd4 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80051a2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80051a6:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	f107 030c 	add.w	r3, r7, #12
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fc ffb8 	bl	8002128 <set_fsp_packet>
		set_send_flag();
 80051b8:	f7fc ff9e 	bl	80020f8 <set_send_flag>
    }
    return CMDLINE_PENDING;
 80051bc:	2305      	movs	r3, #5
}
 80051be:	4618      	mov	r0, r3
 80051c0:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40020000 	.word	0x40020000
 80051cc:	40011000 	.word	0x40011000

080051d0 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 80051e4:	e01f      	b.n	8005226 <CmdLineProcess+0x56>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d105      	bne.n	80051fa <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
 80051f8:	e012      	b.n	8005220 <CmdLineProcess+0x50>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00f      	beq.n	8005220 <CmdLineProcess+0x50>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b07      	cmp	r3, #7
 8005204:	d80a      	bhi.n	800521c <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8005206:	491d      	ldr	r1, [pc, #116]	@ (800527c <CmdLineProcess+0xac>)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	3301      	adds	r3, #1
 8005214:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]
 800521a:	e001      	b.n	8005220 <CmdLineProcess+0x50>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 800521c:	2302      	movs	r3, #2
 800521e:	e028      	b.n	8005272 <CmdLineProcess+0xa2>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3301      	adds	r3, #1
 8005224:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1db      	bne.n	80051e6 <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01d      	beq.n	8005270 <CmdLineProcess+0xa0>
    {
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 8005234:	4b12      	ldr	r3, [pc, #72]	@ (8005280 <CmdLineProcess+0xb0>)
 8005236:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8005238:	e016      	b.n	8005268 <CmdLineProcess+0x98>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800523a:	4b10      	ldr	r3, [pc, #64]	@ (800527c <CmdLineProcess+0xac>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4619      	mov	r1, r3
 8005244:	4610      	mov	r0, r2
 8005246:	f7fa ffc3 	bl	80001d0 <strcmp>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d108      	bne.n	8005262 <CmdLineProcess+0x92>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4909      	ldr	r1, [pc, #36]	@ (800527c <CmdLineProcess+0xac>)
 8005258:	4610      	mov	r0, r2
 800525a:	4798      	blx	r3
 800525c:	4603      	mov	r3, r0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e007      	b.n	8005272 <CmdLineProcess+0xa2>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	330c      	adds	r3, #12
 8005266:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e4      	bne.n	800523a <CmdLineProcess+0x6a>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8005270:	2301      	movs	r3, #1
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	2000480c 	.word	0x2000480c
 8005280:	20000038 	.word	0x20000038

08005284 <__NVIC_SystemReset>:
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005288:	f3bf 8f4f 	dsb	sy
}
 800528c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800528e:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <__NVIC_SystemReset+0x24>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005296:	4904      	ldr	r1, [pc, #16]	@ (80052a8 <__NVIC_SystemReset+0x24>)
 8005298:	4b04      	ldr	r3, [pc, #16]	@ (80052ac <__NVIC_SystemReset+0x28>)
 800529a:	4313      	orrs	r3, r2
 800529c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800529e:	f3bf 8f4f 	dsb	sy
}
 80052a2:	bf00      	nop
    __NOP();
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <__NVIC_SystemReset+0x20>
 80052a8:	e000ed00 	.word	0xe000ed00
 80052ac:	05fa0004 	.word	0x05fa0004

080052b0 <LL_GPIO_IsOutputPinSet>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695a      	ldr	r2, [r3, #20]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	4013      	ands	r3, r2
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	bf0c      	ite	eq
 80052c8:	2301      	moveq	r3, #1
 80052ca:	2300      	movne	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_GPIO_SetOutputPin>:
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	619a      	str	r2, [r3, #24]
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <LL_GPIO_ResetOutputPin>:
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	041a      	lsls	r2, r3, #16
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	619a      	str	r2, [r3, #24]
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <command_init>:
		command_task_update                // taskFunction;
	}
};

void	command_init(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
	Ringbuf_init();
 800531a:	f7fc fb6f 	bl	80019fc <Ringbuf_init>

//	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 800531e:	22ff      	movs	r2, #255	@ 0xff
 8005320:	2100      	movs	r1, #0
 8005322:	4824      	ldr	r0, [pc, #144]	@ (80053b4 <command_init+0xa0>)
 8005324:	f008 fa96 	bl	800d854 <memset>
	s_commandBufferIndex = 0;
 8005328:	4b23      	ldr	r3, [pc, #140]	@ (80053b8 <command_init+0xa4>)
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
	Uart_sendstring(UART5,"\r\n");
 800532e:	4923      	ldr	r1, [pc, #140]	@ (80053bc <command_init+0xa8>)
 8005330:	4823      	ldr	r0, [pc, #140]	@ (80053c0 <command_init+0xac>)
 8005332:	f7fc fdcb 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5,"\r\n");
 8005336:	4921      	ldr	r1, [pc, #132]	@ (80053bc <command_init+0xa8>)
 8005338:	4821      	ldr	r0, [pc, #132]	@ (80053c0 <command_init+0xac>)
 800533a:	f7fc fdc7 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5,"> CPOC FIRMWARE V1.2.0 \r\n");
 800533e:	4921      	ldr	r1, [pc, #132]	@ (80053c4 <command_init+0xb0>)
 8005340:	481f      	ldr	r0, [pc, #124]	@ (80053c0 <command_init+0xac>)
 8005342:	f7fc fdc3 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5,"\r\n");
 8005346:	491d      	ldr	r1, [pc, #116]	@ (80053bc <command_init+0xa8>)
 8005348:	481d      	ldr	r0, [pc, #116]	@ (80053c0 <command_init+0xac>)
 800534a:	f7fc fdbf 	bl	8001ecc <Uart_sendstring>
	command_send_splash();
 800534e:	f000 fd59 	bl	8005e04 <command_send_splash>

	tCmdLineEntry *pEntry;


	Uart_sendstring(UART5, "\nStart with <help_xxxx> command\r\n");
 8005352:	491d      	ldr	r1, [pc, #116]	@ (80053c8 <command_init+0xb4>)
 8005354:	481a      	ldr	r0, [pc, #104]	@ (80053c0 <command_init+0xac>)
 8005356:	f7fc fdb9 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "-------------------------------------\r\n");
 800535a:	491c      	ldr	r1, [pc, #112]	@ (80053cc <command_init+0xb8>)
 800535c:	4818      	ldr	r0, [pc, #96]	@ (80053c0 <command_init+0xac>)
 800535e:	f7fc fdb5 	bl	8001ecc <Uart_sendstring>
	pEntry = &g_psCmdTable[0];
 8005362:	4b1b      	ldr	r3, [pc, #108]	@ (80053d0 <command_init+0xbc>)
 8005364:	607b      	str	r3, [r7, #4]

	while (pEntry->pcCmd) {
 8005366:	e016      	b.n	8005396 <command_init+0x82>
		Uart_sendstring(UART5, pEntry->pcCmd);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4619      	mov	r1, r3
 800536e:	4814      	ldr	r0, [pc, #80]	@ (80053c0 <command_init+0xac>)
 8005370:	f7fc fdac 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	4619      	mov	r1, r3
 800537a:	4811      	ldr	r0, [pc, #68]	@ (80053c0 <command_init+0xac>)
 800537c:	f7fc fda6 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 8005380:	490e      	ldr	r1, [pc, #56]	@ (80053bc <command_init+0xa8>)
 8005382:	480f      	ldr	r0, [pc, #60]	@ (80053c0 <command_init+0xac>)
 8005384:	f7fc fda2 	bl	8001ecc <Uart_sendstring>
	    if (pEntry == &g_psCmdTable[11]) {
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a12      	ldr	r2, [pc, #72]	@ (80053d4 <command_init+0xc0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <command_init+0x8c>
	        break;
	    }
	    pEntry++;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	330c      	adds	r3, #12
 8005394:	607b      	str	r3, [r7, #4]
	while (pEntry->pcCmd) {
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e4      	bne.n	8005368 <command_init+0x54>
 800539e:	e000      	b.n	80053a2 <command_init+0x8e>
	        break;
 80053a0:	bf00      	nop
	}



	Uart_sendstring(UART5, "\r\n> ");
 80053a2:	490d      	ldr	r1, [pc, #52]	@ (80053d8 <command_init+0xc4>)
 80053a4:	4806      	ldr	r0, [pc, #24]	@ (80053c0 <command_init+0xac>)
 80053a6:	f7fc fd91 	bl	8001ecc <Uart_sendstring>


}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20004830 	.word	0x20004830
 80053b8:	2000492f 	.word	0x2000492f
 80053bc:	08012198 	.word	0x08012198
 80053c0:	40005000 	.word	0x40005000
 80053c4:	0801219c 	.word	0x0801219c
 80053c8:	080121b8 	.word	0x080121b8
 80053cc:	080121dc 	.word	0x080121dc
 80053d0:	20000038 	.word	0x20000038
 80053d4:	200000bc 	.word	0x200000bc
 80053d8:	08012204 	.word	0x08012204

080053dc <command_task_update>:

static void command_task_update(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
    char rxData;
    int8_t ret_val;

    while (IsDataAvailable(UART5))
 80053e2:	e05b      	b.n	800549c <command_task_update+0xc0>
    {

        rxData = Uart_read(UART5);
 80053e4:	4833      	ldr	r0, [pc, #204]	@ (80054b4 <command_task_update+0xd8>)
 80053e6:	f7fc fbc7 	bl	8001b78 <Uart_read>
 80053ea:	4603      	mov	r3, r0
 80053ec:	71fb      	strb	r3, [r7, #7]
        Uart_write(UART5, rxData);
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	4619      	mov	r1, r3
 80053f2:	4830      	ldr	r0, [pc, #192]	@ (80054b4 <command_task_update+0xd8>)
 80053f4:	f7fc fc5e 	bl	8001cb4 <Uart_write>
        if ((rxData == '\r') || (rxData == '\n'))
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	2b0d      	cmp	r3, #13
 80053fc:	d002      	beq.n	8005404 <command_task_update+0x28>
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	2b0a      	cmp	r3, #10
 8005402:	d12e      	bne.n	8005462 <command_task_update+0x86>
        {
            if (s_commandBufferIndex > 0)
 8005404:	4b2c      	ldr	r3, [pc, #176]	@ (80054b8 <command_task_update+0xdc>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d025      	beq.n	8005458 <command_task_update+0x7c>
            {
                s_commandBuffer[s_commandBufferIndex] = 0;
 800540c:	4b2a      	ldr	r3, [pc, #168]	@ (80054b8 <command_task_update+0xdc>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	4b2a      	ldr	r3, [pc, #168]	@ (80054bc <command_task_update+0xe0>)
 8005414:	2100      	movs	r1, #0
 8005416:	5499      	strb	r1, [r3, r2]
                s_commandBufferIndex++;
 8005418:	4b27      	ldr	r3, [pc, #156]	@ (80054b8 <command_task_update+0xdc>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	b2da      	uxtb	r2, r3
 8005420:	4b25      	ldr	r3, [pc, #148]	@ (80054b8 <command_task_update+0xdc>)
 8005422:	701a      	strb	r2, [r3, #0]
                ret_val = CmdLineProcess(s_commandBuffer);
 8005424:	4825      	ldr	r0, [pc, #148]	@ (80054bc <command_task_update+0xe0>)
 8005426:	f7ff fed3 	bl	80051d0 <CmdLineProcess>
 800542a:	4603      	mov	r3, r0
 800542c:	71bb      	strb	r3, [r7, #6]
                s_commandBufferIndex = 0;
 800542e:	4b22      	ldr	r3, [pc, #136]	@ (80054b8 <command_task_update+0xdc>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
                Uart_sendstring(UART5, "\r\n> ");
 8005434:	4922      	ldr	r1, [pc, #136]	@ (80054c0 <command_task_update+0xe4>)
 8005436:	481f      	ldr	r0, [pc, #124]	@ (80054b4 <command_task_update+0xd8>)
 8005438:	f7fc fd48 	bl	8001ecc <Uart_sendstring>
                Uart_sendstring(UART5, ErrorCode[ret_val]);
 800543c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005440:	4a20      	ldr	r2, [pc, #128]	@ (80054c4 <command_task_update+0xe8>)
 8005442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005446:	4619      	mov	r1, r3
 8005448:	481a      	ldr	r0, [pc, #104]	@ (80054b4 <command_task_update+0xd8>)
 800544a:	f7fc fd3f 	bl	8001ecc <Uart_sendstring>
                Uart_sendstring(UART5, "> ");
 800544e:	491e      	ldr	r1, [pc, #120]	@ (80054c8 <command_task_update+0xec>)
 8005450:	4818      	ldr	r0, [pc, #96]	@ (80054b4 <command_task_update+0xd8>)
 8005452:	f7fc fd3b 	bl	8001ecc <Uart_sendstring>
            if (s_commandBufferIndex > 0)
 8005456:	e021      	b.n	800549c <command_task_update+0xc0>
            }
            else
            {
                Uart_sendstring(UART5, "\r\n> ");
 8005458:	4919      	ldr	r1, [pc, #100]	@ (80054c0 <command_task_update+0xe4>)
 800545a:	4816      	ldr	r0, [pc, #88]	@ (80054b4 <command_task_update+0xd8>)
 800545c:	f7fc fd36 	bl	8001ecc <Uart_sendstring>
            if (s_commandBufferIndex > 0)
 8005460:	e01c      	b.n	800549c <command_task_update+0xc0>
            }
        }
        else if ((rxData == 8) || (rxData == 127))
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d002      	beq.n	800546e <command_task_update+0x92>
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	2b7f      	cmp	r3, #127	@ 0x7f
 800546c:	d10a      	bne.n	8005484 <command_task_update+0xa8>
        {
            if (s_commandBufferIndex > 0)
 800546e:	4b12      	ldr	r3, [pc, #72]	@ (80054b8 <command_task_update+0xdc>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d012      	beq.n	800549c <command_task_update+0xc0>
            {
                s_commandBufferIndex--;
 8005476:	4b10      	ldr	r3, [pc, #64]	@ (80054b8 <command_task_update+0xdc>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	3b01      	subs	r3, #1
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4b0e      	ldr	r3, [pc, #56]	@ (80054b8 <command_task_update+0xdc>)
 8005480:	701a      	strb	r2, [r3, #0]
            if (s_commandBufferIndex > 0)
 8005482:	e00b      	b.n	800549c <command_task_update+0xc0>
            }
        }
        else
        {
            s_commandBuffer[s_commandBufferIndex] = rxData;
 8005484:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <command_task_update+0xdc>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	4a0c      	ldr	r2, [pc, #48]	@ (80054bc <command_task_update+0xe0>)
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	5453      	strb	r3, [r2, r1]
            s_commandBufferIndex++;
 8005490:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <command_task_update+0xdc>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	3301      	adds	r3, #1
 8005496:	b2da      	uxtb	r2, r3
 8005498:	4b07      	ldr	r3, [pc, #28]	@ (80054b8 <command_task_update+0xdc>)
 800549a:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(UART5))
 800549c:	4805      	ldr	r0, [pc, #20]	@ (80054b4 <command_task_update+0xd8>)
 800549e:	f7fc fccf 	bl	8001e40 <IsDataAvailable>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d19d      	bne.n	80053e4 <command_task_update+0x8>
            {
                s_commandBufferIndex = 0;
            }
        }
    }
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40005000 	.word	0x40005000
 80054b8:	2000492f 	.word	0x2000492f
 80054bc:	20004830 	.word	0x20004830
 80054c0:	08012204 	.word	0x08012204
 80054c4:	20000020 	.word	0x20000020
 80054c8:	0801220c 	.word	0x0801220c

080054cc <Cmd_help>:


int Cmd_help(int argc, char *argv[]) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	Uart_sendstring(UART5, "\nSimple commands\r\n");
 80054d6:	4916      	ldr	r1, [pc, #88]	@ (8005530 <Cmd_help+0x64>)
 80054d8:	4816      	ldr	r0, [pc, #88]	@ (8005534 <Cmd_help+0x68>)
 80054da:	f7fc fcf7 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "------------------\r\n");
 80054de:	4916      	ldr	r1, [pc, #88]	@ (8005538 <Cmd_help+0x6c>)
 80054e0:	4814      	ldr	r0, [pc, #80]	@ (8005534 <Cmd_help+0x68>)
 80054e2:	f7fc fcf3 	bl	8001ecc <Uart_sendstring>
	pEntry = &g_psCmdTable[0];
 80054e6:	4b15      	ldr	r3, [pc, #84]	@ (800553c <Cmd_help+0x70>)
 80054e8:	60fb      	str	r3, [r7, #12]


	while (pEntry->pcCmd) {
 80054ea:	e016      	b.n	800551a <Cmd_help+0x4e>
		Uart_sendstring(UART5, pEntry->pcCmd);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4619      	mov	r1, r3
 80054f2:	4810      	ldr	r0, [pc, #64]	@ (8005534 <Cmd_help+0x68>)
 80054f4:	f7fc fcea 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	4619      	mov	r1, r3
 80054fe:	480d      	ldr	r0, [pc, #52]	@ (8005534 <Cmd_help+0x68>)
 8005500:	f7fc fce4 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 8005504:	490e      	ldr	r1, [pc, #56]	@ (8005540 <Cmd_help+0x74>)
 8005506:	480b      	ldr	r0, [pc, #44]	@ (8005534 <Cmd_help+0x68>)
 8005508:	f7fc fce0 	bl	8001ecc <Uart_sendstring>
	    if (pEntry == &g_psCmdTable[11]) {
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4a0d      	ldr	r2, [pc, #52]	@ (8005544 <Cmd_help+0x78>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <Cmd_help+0x58>
	        break;
	    }
	    pEntry++;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	330c      	adds	r3, #12
 8005518:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e4      	bne.n	80054ec <Cmd_help+0x20>
 8005522:	e000      	b.n	8005526 <Cmd_help+0x5a>
	        break;
 8005524:	bf00      	nop
	}

	// Return success.
	return (CMDLINE_OK);
 8005526:	2300      	movs	r3, #0

}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	08012210 	.word	0x08012210
 8005534:	40005000 	.word	0x40005000
 8005538:	08012224 	.word	0x08012224
 800553c:	20000038 	.word	0x20000038
 8005540:	08012198 	.word	0x08012198
 8005544:	200000bc 	.word	0x200000bc

08005548 <Cmd_help_all>:

// 9table <-> 8 o day
int Cmd_help_all(int argc, char *argv[]) {
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;

	Uart_sendstring(UART5, "\nAvailable commands\r\n");
 8005552:	492b      	ldr	r1, [pc, #172]	@ (8005600 <Cmd_help_all+0xb8>)
 8005554:	482b      	ldr	r0, [pc, #172]	@ (8005604 <Cmd_help_all+0xbc>)
 8005556:	f7fc fcb9 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "------------------\r\n");
 800555a:	492b      	ldr	r1, [pc, #172]	@ (8005608 <Cmd_help_all+0xc0>)
 800555c:	4829      	ldr	r0, [pc, #164]	@ (8005604 <Cmd_help_all+0xbc>)
 800555e:	f7fc fcb5 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
 8005562:	4b2a      	ldr	r3, [pc, #168]	@ (800560c <Cmd_help_all+0xc4>)
 8005564:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8005566:	e03e      	b.n	80055e6 <Cmd_help_all+0x9e>
		// Print the command name and the brief description.
		Uart_sendstring(UART5, pEntry->pcCmd);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4619      	mov	r1, r3
 800556e:	4825      	ldr	r0, [pc, #148]	@ (8005604 <Cmd_help_all+0xbc>)
 8005570:	f7fc fcac 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4619      	mov	r1, r3
 800557a:	4822      	ldr	r0, [pc, #136]	@ (8005604 <Cmd_help_all+0xbc>)
 800557c:	f7fc fca6 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 8005580:	4923      	ldr	r1, [pc, #140]	@ (8005610 <Cmd_help_all+0xc8>)
 8005582:	4820      	ldr	r0, [pc, #128]	@ (8005604 <Cmd_help_all+0xbc>)
 8005584:	f7fc fca2 	bl	8001ecc <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[11]) {
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a22      	ldr	r2, [pc, #136]	@ (8005614 <Cmd_help_all+0xcc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d104      	bne.n	800559a <Cmd_help_all+0x52>
	        Uart_sendstring(UART5, "\n--------------CPOC Command List-------------\r\n");
 8005590:	4921      	ldr	r1, [pc, #132]	@ (8005618 <Cmd_help_all+0xd0>)
 8005592:	481c      	ldr	r0, [pc, #112]	@ (8005604 <Cmd_help_all+0xbc>)
 8005594:	f7fc fc9a 	bl	8001ecc <Uart_sendstring>
 8005598:	e022      	b.n	80055e0 <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[27]) {
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a1f      	ldr	r2, [pc, #124]	@ (800561c <Cmd_help_all+0xd4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d104      	bne.n	80055ac <Cmd_help_all+0x64>
	        Uart_sendstring(UART5, "\n--------------PMU Command List-------------\r\n");
 80055a2:	491f      	ldr	r1, [pc, #124]	@ (8005620 <Cmd_help_all+0xd8>)
 80055a4:	4817      	ldr	r0, [pc, #92]	@ (8005604 <Cmd_help_all+0xbc>)
 80055a6:	f7fc fc91 	bl	8001ecc <Uart_sendstring>
 80055aa:	e019      	b.n	80055e0 <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[34]) {
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005624 <Cmd_help_all+0xdc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d104      	bne.n	80055be <Cmd_help_all+0x76>
	        Uart_sendstring(UART5, "\n--------------PDU Command List-------------\r\n");
 80055b4:	491c      	ldr	r1, [pc, #112]	@ (8005628 <Cmd_help_all+0xe0>)
 80055b6:	4813      	ldr	r0, [pc, #76]	@ (8005604 <Cmd_help_all+0xbc>)
 80055b8:	f7fc fc88 	bl	8001ecc <Uart_sendstring>
 80055bc:	e010      	b.n	80055e0 <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[40]) {
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4a1a      	ldr	r2, [pc, #104]	@ (800562c <Cmd_help_all+0xe4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d104      	bne.n	80055d0 <Cmd_help_all+0x88>
	        Uart_sendstring(UART5, "\n--------------CAM Command List-------------\r\n");
 80055c6:	491a      	ldr	r1, [pc, #104]	@ (8005630 <Cmd_help_all+0xe8>)
 80055c8:	480e      	ldr	r0, [pc, #56]	@ (8005604 <Cmd_help_all+0xbc>)
 80055ca:	f7fc fc7f 	bl	8001ecc <Uart_sendstring>
 80055ce:	e007      	b.n	80055e0 <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[41]) {
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a18      	ldr	r2, [pc, #96]	@ (8005634 <Cmd_help_all+0xec>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d103      	bne.n	80055e0 <Cmd_help_all+0x98>
	        Uart_sendstring(UART5, "\n--------------IOU Command List-------------\r\n");
 80055d8:	4917      	ldr	r1, [pc, #92]	@ (8005638 <Cmd_help_all+0xf0>)
 80055da:	480a      	ldr	r0, [pc, #40]	@ (8005604 <Cmd_help_all+0xbc>)
 80055dc:	f7fc fc76 	bl	8001ecc <Uart_sendstring>
	    }


		// Advance to the next entry in the table.
		pEntry++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	330c      	adds	r3, #12
 80055e4:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1bc      	bne.n	8005568 <Cmd_help_all+0x20>

	}
	Uart_sendstring(UART5, "--------------    END    -------------\r\n");
 80055ee:	4913      	ldr	r1, [pc, #76]	@ (800563c <Cmd_help_all+0xf4>)
 80055f0:	4804      	ldr	r0, [pc, #16]	@ (8005604 <Cmd_help_all+0xbc>)
 80055f2:	f7fc fc6b 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	0801223c 	.word	0x0801223c
 8005604:	40005000 	.word	0x40005000
 8005608:	08012224 	.word	0x08012224
 800560c:	20000038 	.word	0x20000038
 8005610:	08012198 	.word	0x08012198
 8005614:	200000bc 	.word	0x200000bc
 8005618:	08012254 	.word	0x08012254
 800561c:	2000017c 	.word	0x2000017c
 8005620:	08012284 	.word	0x08012284
 8005624:	200001d0 	.word	0x200001d0
 8005628:	080122b4 	.word	0x080122b4
 800562c:	20000218 	.word	0x20000218
 8005630:	080122e4 	.word	0x080122e4
 8005634:	20000224 	.word	0x20000224
 8005638:	08012314 	.word	0x08012314
 800563c:	08012344 	.word	0x08012344

08005640 <Cmd_help_cpoc>:

int Cmd_help_cpoc(int argc, char *argv[]) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(UART5, "--------------CPOC Command List-------------\r\n");
 800564a:	4914      	ldr	r1, [pc, #80]	@ (800569c <Cmd_help_cpoc+0x5c>)
 800564c:	4814      	ldr	r0, [pc, #80]	@ (80056a0 <Cmd_help_cpoc+0x60>)
 800564e:	f7fc fc3d 	bl	8001ecc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[12];
 8005652:	4b14      	ldr	r3, [pc, #80]	@ (80056a4 <Cmd_help_cpoc+0x64>)
 8005654:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8005656:	e016      	b.n	8005686 <Cmd_help_cpoc+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(UART5, pEntry->pcCmd);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4619      	mov	r1, r3
 800565e:	4810      	ldr	r0, [pc, #64]	@ (80056a0 <Cmd_help_cpoc+0x60>)
 8005660:	f7fc fc34 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	4619      	mov	r1, r3
 800566a:	480d      	ldr	r0, [pc, #52]	@ (80056a0 <Cmd_help_cpoc+0x60>)
 800566c:	f7fc fc2e 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 8005670:	490d      	ldr	r1, [pc, #52]	@ (80056a8 <Cmd_help_cpoc+0x68>)
 8005672:	480b      	ldr	r0, [pc, #44]	@ (80056a0 <Cmd_help_cpoc+0x60>)
 8005674:	f7fc fc2a 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[27]) {
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a0c      	ldr	r2, [pc, #48]	@ (80056ac <Cmd_help_cpoc+0x6c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <Cmd_help_cpoc+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	330c      	adds	r3, #12
 8005684:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e4      	bne.n	8005658 <Cmd_help_cpoc+0x18>
 800568e:	e000      	b.n	8005692 <Cmd_help_cpoc+0x52>
	        break;
 8005690:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8005692:	2300      	movs	r3, #0

}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	08012370 	.word	0x08012370
 80056a0:	40005000 	.word	0x40005000
 80056a4:	200000c8 	.word	0x200000c8
 80056a8:	08012198 	.word	0x08012198
 80056ac:	2000017c 	.word	0x2000017c

080056b0 <Cmd_help_pmu>:
int Cmd_help_pmu(int argc, char *argv[]) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(UART5, "--------------PMU Command List-------------\r\n");
 80056ba:	4914      	ldr	r1, [pc, #80]	@ (800570c <Cmd_help_pmu+0x5c>)
 80056bc:	4814      	ldr	r0, [pc, #80]	@ (8005710 <Cmd_help_pmu+0x60>)
 80056be:	f7fc fc05 	bl	8001ecc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[28];
 80056c2:	4b14      	ldr	r3, [pc, #80]	@ (8005714 <Cmd_help_pmu+0x64>)
 80056c4:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80056c6:	e016      	b.n	80056f6 <Cmd_help_pmu+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(UART5, pEntry->pcCmd);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4619      	mov	r1, r3
 80056ce:	4810      	ldr	r0, [pc, #64]	@ (8005710 <Cmd_help_pmu+0x60>)
 80056d0:	f7fc fbfc 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	4619      	mov	r1, r3
 80056da:	480d      	ldr	r0, [pc, #52]	@ (8005710 <Cmd_help_pmu+0x60>)
 80056dc:	f7fc fbf6 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 80056e0:	490d      	ldr	r1, [pc, #52]	@ (8005718 <Cmd_help_pmu+0x68>)
 80056e2:	480b      	ldr	r0, [pc, #44]	@ (8005710 <Cmd_help_pmu+0x60>)
 80056e4:	f7fc fbf2 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[34]) {
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4a0c      	ldr	r2, [pc, #48]	@ (800571c <Cmd_help_pmu+0x6c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d007      	beq.n	8005700 <Cmd_help_pmu+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	330c      	adds	r3, #12
 80056f4:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e4      	bne.n	80056c8 <Cmd_help_pmu+0x18>
 80056fe:	e000      	b.n	8005702 <Cmd_help_pmu+0x52>
	        break;
 8005700:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	080123a0 	.word	0x080123a0
 8005710:	40005000 	.word	0x40005000
 8005714:	20000188 	.word	0x20000188
 8005718:	08012198 	.word	0x08012198
 800571c:	200001d0 	.word	0x200001d0

08005720 <Cmd_help_pdu>:
int Cmd_help_pdu(int argc, char *argv[]) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(UART5, "--------------PDU Command List-------------\r\n");
 800572a:	4914      	ldr	r1, [pc, #80]	@ (800577c <Cmd_help_pdu+0x5c>)
 800572c:	4814      	ldr	r0, [pc, #80]	@ (8005780 <Cmd_help_pdu+0x60>)
 800572e:	f7fc fbcd 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[35];
 8005732:	4b14      	ldr	r3, [pc, #80]	@ (8005784 <Cmd_help_pdu+0x64>)
 8005734:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8005736:	e016      	b.n	8005766 <Cmd_help_pdu+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(UART5, pEntry->pcCmd);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4619      	mov	r1, r3
 800573e:	4810      	ldr	r0, [pc, #64]	@ (8005780 <Cmd_help_pdu+0x60>)
 8005740:	f7fc fbc4 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4619      	mov	r1, r3
 800574a:	480d      	ldr	r0, [pc, #52]	@ (8005780 <Cmd_help_pdu+0x60>)
 800574c:	f7fc fbbe 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 8005750:	490d      	ldr	r1, [pc, #52]	@ (8005788 <Cmd_help_pdu+0x68>)
 8005752:	480b      	ldr	r0, [pc, #44]	@ (8005780 <Cmd_help_pdu+0x60>)
 8005754:	f7fc fbba 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[40]) {
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a0c      	ldr	r2, [pc, #48]	@ (800578c <Cmd_help_pdu+0x6c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d007      	beq.n	8005770 <Cmd_help_pdu+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	330c      	adds	r3, #12
 8005764:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e4      	bne.n	8005738 <Cmd_help_pdu+0x18>
 800576e:	e000      	b.n	8005772 <Cmd_help_pdu+0x52>
	        break;
 8005770:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	080123d0 	.word	0x080123d0
 8005780:	40005000 	.word	0x40005000
 8005784:	200001dc 	.word	0x200001dc
 8005788:	08012198 	.word	0x08012198
 800578c:	20000218 	.word	0x20000218

08005790 <Cmd_help_cam>:
int Cmd_help_cam(int argc, char *argv[]) {
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(UART5, "--------------CAM Command List-------------\r\n");
 800579a:	4914      	ldr	r1, [pc, #80]	@ (80057ec <Cmd_help_cam+0x5c>)
 800579c:	4814      	ldr	r0, [pc, #80]	@ (80057f0 <Cmd_help_cam+0x60>)
 800579e:	f7fc fb95 	bl	8001ecc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[41];
 80057a2:	4b14      	ldr	r3, [pc, #80]	@ (80057f4 <Cmd_help_cam+0x64>)
 80057a4:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80057a6:	e016      	b.n	80057d6 <Cmd_help_cam+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(UART5, pEntry->pcCmd);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4619      	mov	r1, r3
 80057ae:	4810      	ldr	r0, [pc, #64]	@ (80057f0 <Cmd_help_cam+0x60>)
 80057b0:	f7fc fb8c 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	4619      	mov	r1, r3
 80057ba:	480d      	ldr	r0, [pc, #52]	@ (80057f0 <Cmd_help_cam+0x60>)
 80057bc:	f7fc fb86 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 80057c0:	490d      	ldr	r1, [pc, #52]	@ (80057f8 <Cmd_help_cam+0x68>)
 80057c2:	480b      	ldr	r0, [pc, #44]	@ (80057f0 <Cmd_help_cam+0x60>)
 80057c4:	f7fc fb82 	bl	8001ecc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[41]) {
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4a0a      	ldr	r2, [pc, #40]	@ (80057f4 <Cmd_help_cam+0x64>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d007      	beq.n	80057e0 <Cmd_help_cam+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	330c      	adds	r3, #12
 80057d4:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e4      	bne.n	80057a8 <Cmd_help_cam+0x18>
 80057de:	e000      	b.n	80057e2 <Cmd_help_cam+0x52>
	        break;
 80057e0:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	08012400 	.word	0x08012400
 80057f0:	40005000 	.word	0x40005000
 80057f4:	20000224 	.word	0x20000224
 80057f8:	08012198 	.word	0x08012198

080057fc <Cmd_help_iou>:
int Cmd_help_iou(int argc, char *argv[]) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(UART5, "--------------IOU Command List-------------\r\n");
 8005806:	4914      	ldr	r1, [pc, #80]	@ (8005858 <Cmd_help_iou+0x5c>)
 8005808:	4814      	ldr	r0, [pc, #80]	@ (800585c <Cmd_help_iou+0x60>)
 800580a:	f7fc fb5f 	bl	8001ecc <Uart_sendstring>


	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[42];
 800580e:	4b14      	ldr	r3, [pc, #80]	@ (8005860 <Cmd_help_iou+0x64>)
 8005810:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8005812:	e016      	b.n	8005842 <Cmd_help_iou+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(UART5, pEntry->pcCmd);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4619      	mov	r1, r3
 800581a:	4810      	ldr	r0, [pc, #64]	@ (800585c <Cmd_help_iou+0x60>)
 800581c:	f7fc fb56 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	4619      	mov	r1, r3
 8005826:	480d      	ldr	r0, [pc, #52]	@ (800585c <Cmd_help_iou+0x60>)
 8005828:	f7fc fb50 	bl	8001ecc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 800582c:	490d      	ldr	r1, [pc, #52]	@ (8005864 <Cmd_help_iou+0x68>)
 800582e:	480b      	ldr	r0, [pc, #44]	@ (800585c <Cmd_help_iou+0x60>)
 8005830:	f7fc fb4c 	bl	8001ecc <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[23]) {
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4a0c      	ldr	r2, [pc, #48]	@ (8005868 <Cmd_help_iou+0x6c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <Cmd_help_iou+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	330c      	adds	r3, #12
 8005840:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e4      	bne.n	8005814 <Cmd_help_iou+0x18>
 800584a:	e000      	b.n	800584e <Cmd_help_iou+0x52>
	        break;
 800584c:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	08012430 	.word	0x08012430
 800585c:	40005000 	.word	0x40005000
 8005860:	20000230 	.word	0x20000230
 8005864:	08012198 	.word	0x08012198
 8005868:	2000014c 	.word	0x2000014c

0800586c <NotYetDefine>:





int NotYetDefine(int argc, char *argv[]) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	Uart_sendstring(UART5, "\nThis function is not defined yet \r\n");
 8005876:	4904      	ldr	r1, [pc, #16]	@ (8005888 <NotYetDefine+0x1c>)
 8005878:	4804      	ldr	r0, [pc, #16]	@ (800588c <NotYetDefine+0x20>)
 800587a:	f7fc fb27 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	08012460 	.word	0x08012460
 800588c:	40005000 	.word	0x40005000

08005890 <Cmd_splash>:

int Cmd_splash(int argc, char *argv[]) {
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	command_send_splash();
 800589a:	f000 fab3 	bl	8005e04 <command_send_splash>
	// Return success.
	return (CMDLINE_OK);
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <Cmd_status_now>:

int Cmd_status_now(int argc, char *argv[]){
 80058a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058aa:	b0a3      	sub	sp, #140	@ 0x8c
 80058ac:	af04      	add	r7, sp, #16
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    float temp;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 80058b2:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80058b6:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 80058ba:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 80058be:	f107 0073 	add.w	r0, r7, #115	@ 0x73
 80058c2:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 80058c6:	9302      	str	r3, [sp, #8]
 80058c8:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	f107 036f 	add.w	r3, r7, #111	@ 0x6f
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	4623      	mov	r3, r4
 80058d6:	f7fb fdc5 	bl	8001464 <DS3231_GetDateTime>

    // Get current temperature from DS3231
    temp = DS3231_GetTemperature();
 80058da:	f7fb fe6b 	bl	80015b4 <DS3231_GetTemperature>
 80058de:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74

    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 80058e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80058e6:	461d      	mov	r5, r3
 80058e8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80058ec:	461e      	mov	r6, r3
 80058ee:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80058f2:	461a      	mov	r2, r3
 80058f4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80058f8:	4619      	mov	r1, r3
 80058fa:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80058fe:	461c      	mov	r4, r3
 8005900:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8005904:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005908:	f107 0008 	add.w	r0, r7, #8
 800590c:	9303      	str	r3, [sp, #12]
 800590e:	9402      	str	r4, [sp, #8]
 8005910:	9101      	str	r1, [sp, #4]
 8005912:	9200      	str	r2, [sp, #0]
 8005914:	4633      	mov	r3, r6
 8005916:	462a      	mov	r2, r5
 8005918:	4931      	ldr	r1, [pc, #196]	@ (80059e0 <Cmd_status_now+0x138>)
 800591a:	f007 fea3 	bl	800d664 <siprintf>
    Uart_sendstring(UART5, buffer);
 800591e:	f107 0308 	add.w	r3, r7, #8
 8005922:	4619      	mov	r1, r3
 8005924:	482f      	ldr	r0, [pc, #188]	@ (80059e4 <Cmd_status_now+0x13c>)
 8005926:	f7fc fad1 	bl	8001ecc <Uart_sendstring>

    sprintf(buffer, "Temperature: %.2f *C\r\n", temp);
 800592a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800592c:	f7fa fe1c 	bl	8000568 <__aeabi_f2d>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	f107 0008 	add.w	r0, r7, #8
 8005938:	492b      	ldr	r1, [pc, #172]	@ (80059e8 <Cmd_status_now+0x140>)
 800593a:	f007 fe93 	bl	800d664 <siprintf>
    Uart_sendstring(UART5, buffer);
 800593e:	f107 0308 	add.w	r3, r7, #8
 8005942:	4619      	mov	r1, r3
 8005944:	4827      	ldr	r0, [pc, #156]	@ (80059e4 <Cmd_status_now+0x13c>)
 8005946:	f7fc fac1 	bl	8001ecc <Uart_sendstring>
    sprintf(buffer, "HardwareVer: CPOC Hardware 1.2.0\r\n");
 800594a:	f107 0308 	add.w	r3, r7, #8
 800594e:	4927      	ldr	r1, [pc, #156]	@ (80059ec <Cmd_status_now+0x144>)
 8005950:	4618      	mov	r0, r3
 8005952:	f007 fe87 	bl	800d664 <siprintf>
    Uart_sendstring(UART5, buffer);
 8005956:	f107 0308 	add.w	r3, r7, #8
 800595a:	4619      	mov	r1, r3
 800595c:	4821      	ldr	r0, [pc, #132]	@ (80059e4 <Cmd_status_now+0x13c>)
 800595e:	f7fc fab5 	bl	8001ecc <Uart_sendstring>
    sprintf(buffer, "FirmwareVer: CPOC Firmware 1.2.0\r\n");
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	4922      	ldr	r1, [pc, #136]	@ (80059f0 <Cmd_status_now+0x148>)
 8005968:	4618      	mov	r0, r3
 800596a:	f007 fe7b 	bl	800d664 <siprintf>
    Uart_sendstring(UART5, buffer);
 800596e:	f107 0308 	add.w	r3, r7, #8
 8005972:	4619      	mov	r1, r3
 8005974:	481b      	ldr	r0, [pc, #108]	@ (80059e4 <Cmd_status_now+0x13c>)
 8005976:	f7fc faa9 	bl	8001ecc <Uart_sendstring>

    if (LL_GPIO_IsOutputPinSet(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin)) {
 800597a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800597e:	481d      	ldr	r0, [pc, #116]	@ (80059f4 <Cmd_status_now+0x14c>)
 8005980:	f7ff fc96 	bl	80052b0 <LL_GPIO_IsOutputPinSet>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00c      	beq.n	80059a4 <Cmd_status_now+0xfc>
        sprintf(buffer, "Enable: RF[OFF]\r\n");
 800598a:	f107 0308 	add.w	r3, r7, #8
 800598e:	491a      	ldr	r1, [pc, #104]	@ (80059f8 <Cmd_status_now+0x150>)
 8005990:	4618      	mov	r0, r3
 8005992:	f007 fe67 	bl	800d664 <siprintf>
        Uart_sendstring(UART5, buffer);
 8005996:	f107 0308 	add.w	r3, r7, #8
 800599a:	4619      	mov	r1, r3
 800599c:	4811      	ldr	r0, [pc, #68]	@ (80059e4 <Cmd_status_now+0x13c>)
 800599e:	f7fc fa95 	bl	8001ecc <Uart_sendstring>
 80059a2:	e00b      	b.n	80059bc <Cmd_status_now+0x114>
    } else {
        sprintf(buffer, "Enable: RF[ON]\r\n");
 80059a4:	f107 0308 	add.w	r3, r7, #8
 80059a8:	4914      	ldr	r1, [pc, #80]	@ (80059fc <Cmd_status_now+0x154>)
 80059aa:	4618      	mov	r0, r3
 80059ac:	f007 fe5a 	bl	800d664 <siprintf>
        Uart_sendstring(UART5, buffer);
 80059b0:	f107 0308 	add.w	r3, r7, #8
 80059b4:	4619      	mov	r1, r3
 80059b6:	480b      	ldr	r0, [pc, #44]	@ (80059e4 <Cmd_status_now+0x13c>)
 80059b8:	f7fc fa88 	bl	8001ecc <Uart_sendstring>
    }

    sprintf(buffer, "MuxMode: Auto\r\n");
 80059bc:	f107 0308 	add.w	r3, r7, #8
 80059c0:	490f      	ldr	r1, [pc, #60]	@ (8005a00 <Cmd_status_now+0x158>)
 80059c2:	4618      	mov	r0, r3
 80059c4:	f007 fe4e 	bl	800d664 <siprintf>
    Uart_sendstring(UART5, buffer);
 80059c8:	f107 0308 	add.w	r3, r7, #8
 80059cc:	4619      	mov	r1, r3
 80059ce:	4805      	ldr	r0, [pc, #20]	@ (80059e4 <Cmd_status_now+0x13c>)
 80059d0:	f7fc fa7c 	bl	8001ecc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	377c      	adds	r7, #124	@ 0x7c
 80059da:	46bd      	mov	sp, r7
 80059dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059de:	bf00      	nop
 80059e0:	08012488 	.word	0x08012488
 80059e4:	40005000 	.word	0x40005000
 80059e8:	080124ac 	.word	0x080124ac
 80059ec:	080124c4 	.word	0x080124c4
 80059f0:	080124e8 	.word	0x080124e8
 80059f4:	40020400 	.word	0x40020400
 80059f8:	0801250c 	.word	0x0801250c
 80059fc:	08012520 	.word	0x08012520
 8005a00:	08012534 	.word	0x08012534

08005a04 <Cmd_auto_report_ena>:
uint8_t auto_report_enabled = 0;
uint32_t RS422_PERIOD = 3000;


int Cmd_auto_report_ena(int argc, char *argv[])
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b090      	sub	sp, #64	@ 0x40
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	dc01      	bgt.n	8005a18 <Cmd_auto_report_ena+0x14>
 8005a14:	2303      	movs	r3, #3
 8005a16:	e036      	b.n	8005a86 <Cmd_auto_report_ena+0x82>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	dd01      	ble.n	8005a22 <Cmd_auto_report_ena+0x1e>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e031      	b.n	8005a86 <Cmd_auto_report_ena+0x82>

    int sec = atoi(argv[1]);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	3304      	adds	r3, #4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f006 fe05 	bl	800c638 <atoi>
 8005a2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (sec <= 0) {
 8005a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	dc05      	bgt.n	8005a42 <Cmd_auto_report_ena+0x3e>
        Uart_sendstring(UART5,"\nPlease provide a positive integer.\n");
 8005a36:	4916      	ldr	r1, [pc, #88]	@ (8005a90 <Cmd_auto_report_ena+0x8c>)
 8005a38:	4816      	ldr	r0, [pc, #88]	@ (8005a94 <Cmd_auto_report_ena+0x90>)
 8005a3a:	f7fc fa47 	bl	8001ecc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 8005a3e:	2304      	movs	r3, #4
 8005a40:	e021      	b.n	8005a86 <Cmd_auto_report_ena+0x82>
    }

    if (sec > 20)
 8005a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a44:	2b14      	cmp	r3, #20
 8005a46:	dd05      	ble.n	8005a54 <Cmd_auto_report_ena+0x50>
    	{
    	Uart_sendstring(UART5,"Arg < 20\n");
 8005a48:	4913      	ldr	r1, [pc, #76]	@ (8005a98 <Cmd_auto_report_ena+0x94>)
 8005a4a:	4812      	ldr	r0, [pc, #72]	@ (8005a94 <Cmd_auto_report_ena+0x90>)
 8005a4c:	f7fc fa3e 	bl	8001ecc <Uart_sendstring>
    	return CMDLINE_INVALID_ARG;
 8005a50:	2304      	movs	r3, #4
 8005a52:	e018      	b.n	8005a86 <Cmd_auto_report_ena+0x82>
    	}

    auto_report_enabled = 1;
 8005a54:	4b11      	ldr	r3, [pc, #68]	@ (8005a9c <Cmd_auto_report_ena+0x98>)
 8005a56:	2201      	movs	r2, #1
 8005a58:	701a      	strb	r2, [r3, #0]
    RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a60:	fb02 f303 	mul.w	r3, r2, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	4b0e      	ldr	r3, [pc, #56]	@ (8005aa0 <Cmd_auto_report_ena+0x9c>)
 8005a68:	601a      	str	r2, [r3, #0]

    char msg[50];
    sprintf(msg, "\nAuto report %d seconds.\n", sec);
 8005a6a:	f107 0308 	add.w	r3, r7, #8
 8005a6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a70:	490c      	ldr	r1, [pc, #48]	@ (8005aa4 <Cmd_auto_report_ena+0xa0>)
 8005a72:	4618      	mov	r0, r3
 8005a74:	f007 fdf6 	bl	800d664 <siprintf>
    Uart_sendstring(UART5, msg);
 8005a78:	f107 0308 	add.w	r3, r7, #8
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4805      	ldr	r0, [pc, #20]	@ (8005a94 <Cmd_auto_report_ena+0x90>)
 8005a80:	f7fc fa24 	bl	8001ecc <Uart_sendstring>
    return CMDLINE_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3740      	adds	r7, #64	@ 0x40
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	08012544 	.word	0x08012544
 8005a94:	40005000 	.word	0x40005000
 8005a98:	0801256c 	.word	0x0801256c
 8005a9c:	20004930 	.word	0x20004930
 8005aa0:	2000033c 	.word	0x2000033c
 8005aa4:	08012578 	.word	0x08012578

08005aa8 <Cmd_auto_report_dis>:


int Cmd_auto_report_dis(int argc, char *argv[])
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	dc01      	bgt.n	8005abc <Cmd_auto_report_dis+0x14>
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e00b      	b.n	8005ad4 <Cmd_auto_report_dis+0x2c>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	dd01      	ble.n	8005ac6 <Cmd_auto_report_dis+0x1e>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e006      	b.n	8005ad4 <Cmd_auto_report_dis+0x2c>

    auto_report_enabled = 0;
 8005ac6:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <Cmd_auto_report_dis+0x34>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]

    printf("Auto report disabled.\n");
 8005acc:	4804      	ldr	r0, [pc, #16]	@ (8005ae0 <Cmd_auto_report_dis+0x38>)
 8005ace:	f007 fdc1 	bl	800d654 <puts>
    return CMDLINE_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20004930 	.word	0x20004930
 8005ae0:	08012594 	.word	0x08012594

08005ae4 <Cmd_memory_usage>:

int Cmd_memory_usage(int argc, char *argv[]) {
 8005ae4:	b5b0      	push	{r4, r5, r7, lr}
 8005ae6:	b0a4      	sub	sp, #144	@ 0x90
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	4674      	mov	r4, lr
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
    // STM32F405RGT7 có 192KB SRAM [[5]]
    uint32_t totalRAM = 192 * 1024;
 8005af0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8005af4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8005af8:	f3ef 8308 	mrs	r3, MSP
 8005afc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return(result);
 8005afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    uint32_t usedRAM = SRAM1_BASE + totalRAM - __get_MSP();
 8005b00:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005b0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float ramUsage = (float)usedRAM / totalRAM * 100;
 8005b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b2a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8005ba4 <Cmd_memory_usage+0xc0>
 8005b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b32:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    // STM32F405RGT7 có 1MB Flash [[1]] [[4]]
    uint32_t totalFlash = 1 * 1024 * 1024;
 8005b36:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t usedFlash = (uint32_t)__builtin_return_address(0) - FLASH_BASE;
 8005b3c:	4623      	mov	r3, r4
 8005b3e:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8005b42:	677b      	str	r3, [r7, #116]	@ 0x74
    float flashUsage = (float)usedFlash / totalFlash * 100;
 8005b44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b5c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8005ba4 <Cmd_memory_usage+0xc0>
 8005b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b64:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70


    char buffer[100];
    sprintf(buffer, "\nRAM: %.2f%% used\r\nFlash: %.2f%% used\r\n", ramUsage, flashUsage);
 8005b68:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8005b6a:	f7fa fcfd 	bl	8000568 <__aeabi_f2d>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8005b74:	f7fa fcf8 	bl	8000568 <__aeabi_f2d>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	f107 0008 	add.w	r0, r7, #8
 8005b80:	e9cd 2300 	strd	r2, r3, [sp]
 8005b84:	4622      	mov	r2, r4
 8005b86:	462b      	mov	r3, r5
 8005b88:	4907      	ldr	r1, [pc, #28]	@ (8005ba8 <Cmd_memory_usage+0xc4>)
 8005b8a:	f007 fd6b 	bl	800d664 <siprintf>
    Uart_sendstring(UART5, buffer);
 8005b8e:	f107 0308 	add.w	r3, r7, #8
 8005b92:	4619      	mov	r1, r3
 8005b94:	4805      	ldr	r0, [pc, #20]	@ (8005bac <Cmd_memory_usage+0xc8>)
 8005b96:	f7fc f999 	bl	8001ecc <Uart_sendstring>

    return CMDLINE_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3788      	adds	r7, #136	@ 0x88
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba4:	42c80000 	.word	0x42c80000
 8005ba8:	080125ac 	.word	0x080125ac
 8005bac:	40005000 	.word	0x40005000

08005bb0 <Cmd_time_get>:


int Cmd_time_get(int argc, char *argv[]){
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb2:	b0a3      	sub	sp, #140	@ 0x8c
 8005bb4:	af04      	add	r7, sp, #16
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8005bba:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8005bbe:	f107 0275 	add.w	r2, r7, #117	@ 0x75
 8005bc2:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 8005bc6:	f107 0077 	add.w	r0, r7, #119	@ 0x77
 8005bca:	f107 0371 	add.w	r3, r7, #113	@ 0x71
 8005bce:	9302      	str	r3, [sp, #8]
 8005bd0:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	4623      	mov	r3, r4
 8005bde:	f7fb fc41 	bl	8001464 <DS3231_GetDateTime>
    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);    Uart_sendstring(UART5, buffer);
 8005be2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8005be6:	461d      	mov	r5, r3
 8005be8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8005bec:	461e      	mov	r6, r3
 8005bee:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8005bfe:	461c      	mov	r4, r3
 8005c00:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8005c04:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005c08:	f107 000c 	add.w	r0, r7, #12
 8005c0c:	9303      	str	r3, [sp, #12]
 8005c0e:	9402      	str	r4, [sp, #8]
 8005c10:	9101      	str	r1, [sp, #4]
 8005c12:	9200      	str	r2, [sp, #0]
 8005c14:	4633      	mov	r3, r6
 8005c16:	462a      	mov	r2, r5
 8005c18:	4906      	ldr	r1, [pc, #24]	@ (8005c34 <Cmd_time_get+0x84>)
 8005c1a:	f007 fd23 	bl	800d664 <siprintf>
 8005c1e:	f107 030c 	add.w	r3, r7, #12
 8005c22:	4619      	mov	r1, r3
 8005c24:	4804      	ldr	r0, [pc, #16]	@ (8005c38 <Cmd_time_get+0x88>)
 8005c26:	f7fc f951 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	377c      	adds	r7, #124	@ 0x7c
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c34:	08012488 	.word	0x08012488
 8005c38:	40005000 	.word	0x40005000

08005c3c <Cmd_time_set>:

int Cmd_time_set(int argc, char *argv[]){
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	b0a3      	sub	sp, #140	@ 0x8c
 8005c40:	af04      	add	r7, sp, #16
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
    if (argc < 7) return CMDLINE_TOO_FEW_ARGS;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	dc01      	bgt.n	8005c50 <Cmd_time_set+0x14>
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e088      	b.n	8005d62 <Cmd_time_set+0x126>
    if (argc > 7) return CMDLINE_TOO_MANY_ARGS;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b07      	cmp	r3, #7
 8005c54:	dd01      	ble.n	8005c5a <Cmd_time_set+0x1e>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e083      	b.n	8005d62 <Cmd_time_set+0x126>

    uint8_t hour = atoi(argv[1]);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f006 fce9 	bl	800c638 <atoi>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    uint8_t min = atoi(argv[2]);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f006 fce0 	bl	800c638 <atoi>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    uint8_t sec = atoi(argv[3]);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f006 fcd7 	bl	800c638 <atoi>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
    uint8_t date = atoi(argv[4]);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	3310      	adds	r3, #16
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f006 fcce 	bl	800c638 <atoi>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    uint8_t month = atoi(argv[5]);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f006 fcc5 	bl	800c638 <atoi>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    uint8_t year = atoi(argv[6]);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	3318      	adds	r3, #24
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f006 fcbc 	bl	800c638 <atoi>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

    if (hour > 23 || min > 59 || sec > 59 || date > 31 || month > 12 || year > 99)
 8005cc6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8005cca:	2b17      	cmp	r3, #23
 8005ccc:	d813      	bhi.n	8005cf6 <Cmd_time_set+0xba>
 8005cce:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8005cd2:	2b3b      	cmp	r3, #59	@ 0x3b
 8005cd4:	d80f      	bhi.n	8005cf6 <Cmd_time_set+0xba>
 8005cd6:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8005cda:	2b3b      	cmp	r3, #59	@ 0x3b
 8005cdc:	d80b      	bhi.n	8005cf6 <Cmd_time_set+0xba>
 8005cde:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8005ce2:	2b1f      	cmp	r3, #31
 8005ce4:	d807      	bhi.n	8005cf6 <Cmd_time_set+0xba>
 8005ce6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8005cea:	2b0c      	cmp	r3, #12
 8005cec:	d803      	bhi.n	8005cf6 <Cmd_time_set+0xba>
 8005cee:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8005cf2:	2b63      	cmp	r3, #99	@ 0x63
 8005cf4:	d901      	bls.n	8005cfa <Cmd_time_set+0xbe>
        return CMDLINE_INVALID_ARG;
 8005cf6:	2304      	movs	r3, #4
 8005cf8:	e033      	b.n	8005d62 <Cmd_time_set+0x126>

    DS3231_SetDateTime(1, date, month, year, hour, min, sec);
 8005cfa:	f897 0072 	ldrb.w	r0, [r7, #114]	@ 0x72
 8005cfe:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8005d02:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 8005d06:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8005d0a:	9302      	str	r3, [sp, #8]
 8005d0c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8005d10:	9301      	str	r3, [sp, #4]
 8005d12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2001      	movs	r0, #1
 8005d1c:	f7fb fae4 	bl	80012e8 <DS3231_SetDateTime>

    char buffer[100];
    sprintf(buffer, "Time set to: %02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8005d20:	f897 5077 	ldrb.w	r5, [r7, #119]	@ 0x77
 8005d24:	f897 6076 	ldrb.w	r6, [r7, #118]	@ 0x76
 8005d28:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8005d2c:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8005d30:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8005d34:	f897 0072 	ldrb.w	r0, [r7, #114]	@ 0x72
 8005d38:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8005d3c:	f107 040c 	add.w	r4, r7, #12
 8005d40:	9003      	str	r0, [sp, #12]
 8005d42:	9102      	str	r1, [sp, #8]
 8005d44:	9201      	str	r2, [sp, #4]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	4633      	mov	r3, r6
 8005d4a:	462a      	mov	r2, r5
 8005d4c:	4907      	ldr	r1, [pc, #28]	@ (8005d6c <Cmd_time_set+0x130>)
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f007 fc88 	bl	800d664 <siprintf>
    Uart_sendstring(UART5, buffer);
 8005d54:	f107 030c 	add.w	r3, r7, #12
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4805      	ldr	r0, [pc, #20]	@ (8005d70 <Cmd_time_set+0x134>)
 8005d5c:	f7fc f8b6 	bl	8001ecc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	377c      	adds	r7, #124	@ 0x7c
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	080125d4 	.word	0x080125d4
 8005d70:	40005000 	.word	0x40005000

08005d74 <Cmd_cpoc_reset>:

int Cmd_cpoc_reset(int argc, char *argv[]){
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 8005d7e:	f7ff fa81 	bl	8005284 <__NVIC_SystemReset>
	...

08005d84 <Cmd_rf_ena>:
//	Cmd_pmu_board_alive();
//	Cmd_pmu_board_alive();
//
//}

int Cmd_rf_ena(int argc, char *argv[]){
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8005d8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005d92:	4806      	ldr	r0, [pc, #24]	@ (8005dac <Cmd_rf_ena+0x28>)
 8005d94:	f7ff faaf 	bl	80052f6 <LL_GPIO_ResetOutputPin>
	 Uart_sendstring(UART5, "\nRF Set to Enable\r\n");
 8005d98:	4905      	ldr	r1, [pc, #20]	@ (8005db0 <Cmd_rf_ena+0x2c>)
 8005d9a:	4806      	ldr	r0, [pc, #24]	@ (8005db4 <Cmd_rf_ena+0x30>)
 8005d9c:	f7fc f896 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40020400 	.word	0x40020400
 8005db0:	08012604 	.word	0x08012604
 8005db4:	40005000 	.word	0x40005000

08005db8 <Cmd_rf_dis>:

int Cmd_rf_dis(int argc, char *argv[]){
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8005dc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005dc6:	4806      	ldr	r0, [pc, #24]	@ (8005de0 <Cmd_rf_dis+0x28>)
 8005dc8:	f7ff fa87 	bl	80052da <LL_GPIO_SetOutputPin>
	Uart_sendstring(UART5, "\nRF Disable\r\n");
 8005dcc:	4905      	ldr	r1, [pc, #20]	@ (8005de4 <Cmd_rf_dis+0x2c>)
 8005dce:	4806      	ldr	r0, [pc, #24]	@ (8005de8 <Cmd_rf_dis+0x30>)
 8005dd0:	f7fc f87c 	bl	8001ecc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40020400 	.word	0x40020400
 8005de4:	08012618 	.word	0x08012618
 8005de8:	40005000 	.word	0x40005000

08005dec <command_create_task>:




void	command_create_task(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8005df0:	4902      	ldr	r1, [pc, #8]	@ (8005dfc <command_create_task+0x10>)
 8005df2:	4803      	ldr	r0, [pc, #12]	@ (8005e00 <command_create_task+0x14>)
 8005df4:	f003 fda8 	bl	8009948 <SCH_TASK_CreateTask>
}
 8005df8:	bf00      	nop
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000330 	.word	0x20000330
 8005e00:	2000032c 	.word	0x2000032c

08005e04 <command_send_splash>:

void	command_send_splash(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
	Uart_sendstring(UART5, "------------------------------------------------\r\n");
 8005e08:	4932      	ldr	r1, [pc, #200]	@ (8005ed4 <command_send_splash+0xd0>)
 8005e0a:	4833      	ldr	r0, [pc, #204]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e0c:	f7fc f85e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--        ____                                --\r\n");
 8005e10:	4932      	ldr	r1, [pc, #200]	@ (8005edc <command_send_splash+0xd8>)
 8005e12:	4831      	ldr	r0, [pc, #196]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e14:	f7fc f85a 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--       / ___| _ __   __ _  ___ ___          --\r\n");
 8005e18:	4931      	ldr	r1, [pc, #196]	@ (8005ee0 <command_send_splash+0xdc>)
 8005e1a:	482f      	ldr	r0, [pc, #188]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e1c:	f7fc f856 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--       \\___ \\| '_ \\ / _` |/ __/ _ \\         --  \r\n");
 8005e20:	4930      	ldr	r1, [pc, #192]	@ (8005ee4 <command_send_splash+0xe0>)
 8005e22:	482d      	ldr	r0, [pc, #180]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e24:	f7fc f852 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--        ___) | |_) | (_| | (_|  __/         --\r\n");
 8005e28:	492f      	ldr	r1, [pc, #188]	@ (8005ee8 <command_send_splash+0xe4>)
 8005e2a:	482b      	ldr	r0, [pc, #172]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e2c:	f7fc f84e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--       |____/| -__/ \\__,_|\\___\\___|         --  \r\n");
 8005e30:	492e      	ldr	r1, [pc, #184]	@ (8005eec <command_send_splash+0xe8>)
 8005e32:	4829      	ldr	r0, [pc, #164]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e34:	f7fc f84a 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--             |_|                            --\r\n");
 8005e38:	492d      	ldr	r1, [pc, #180]	@ (8005ef0 <command_send_splash+0xec>)
 8005e3a:	4827      	ldr	r0, [pc, #156]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e3c:	f7fc f846 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--     _     _ _     _____         _          --\r\n");
 8005e40:	492c      	ldr	r1, [pc, #176]	@ (8005ef4 <command_send_splash+0xf0>)
 8005e42:	4825      	ldr	r0, [pc, #148]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e44:	f7fc f842 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--    | |   (_|_)_ _|_   _|__  ___| |__       --\r\n");
 8005e48:	492b      	ldr	r1, [pc, #172]	@ (8005ef8 <command_send_splash+0xf4>)
 8005e4a:	4823      	ldr	r0, [pc, #140]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e4c:	f7fc f83e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--    | |   | | | '_ \\| |/ _ \\/ __| '_ \\      --\r\n");
 8005e50:	492a      	ldr	r1, [pc, #168]	@ (8005efc <command_send_splash+0xf8>)
 8005e52:	4821      	ldr	r0, [pc, #132]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e54:	f7fc f83a 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--    | |___| | | | | | |  __/ (__| | | |     --\r\n");
 8005e58:	4929      	ldr	r1, [pc, #164]	@ (8005f00 <command_send_splash+0xfc>)
 8005e5a:	481f      	ldr	r0, [pc, #124]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e5c:	f7fc f836 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--    |_____|_|_|_| |_|_|\\___|\\___| |_|_|     --\r\n");
 8005e60:	4928      	ldr	r1, [pc, #160]	@ (8005f04 <command_send_splash+0x100>)
 8005e62:	481d      	ldr	r0, [pc, #116]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e64:	f7fc f832 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "------------------------------------------------\r\n");
 8005e68:	491a      	ldr	r1, [pc, #104]	@ (8005ed4 <command_send_splash+0xd0>)
 8005e6a:	481b      	ldr	r0, [pc, #108]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e6c:	f7fc f82e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--           ____ ____   ___   ____           --\r\n");
 8005e70:	4925      	ldr	r1, [pc, #148]	@ (8005f08 <command_send_splash+0x104>)
 8005e72:	4819      	ldr	r0, [pc, #100]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e74:	f7fc f82a 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--          / ___|  _ \\ / _ \\ / ___|          --\r\n");
 8005e78:	4924      	ldr	r1, [pc, #144]	@ (8005f0c <command_send_splash+0x108>)
 8005e7a:	4817      	ldr	r0, [pc, #92]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e7c:	f7fc f826 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--         | |   | |_) | | | | |              --\r\n");
 8005e80:	4923      	ldr	r1, [pc, #140]	@ (8005f10 <command_send_splash+0x10c>)
 8005e82:	4815      	ldr	r0, [pc, #84]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e84:	f7fc f822 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--         | |___|  __/| |_| | |___           --\r\n");
 8005e88:	4922      	ldr	r1, [pc, #136]	@ (8005f14 <command_send_splash+0x110>)
 8005e8a:	4813      	ldr	r0, [pc, #76]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e8c:	f7fc f81e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--          \\____|_|    \\___/ \\____|          -- \r\n");
 8005e90:	4921      	ldr	r1, [pc, #132]	@ (8005f18 <command_send_splash+0x114>)
 8005e92:	4811      	ldr	r0, [pc, #68]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e94:	f7fc f81a 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--                  _   ___   ___             --\r\n");
 8005e98:	4920      	ldr	r1, [pc, #128]	@ (8005f1c <command_send_splash+0x118>)
 8005e9a:	480f      	ldr	r0, [pc, #60]	@ (8005ed8 <command_send_splash+0xd4>)
 8005e9c:	f7fc f816 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--          __   __/ | / _ \\ / _ \\            -- \r\n");
 8005ea0:	491f      	ldr	r1, [pc, #124]	@ (8005f20 <command_send_splash+0x11c>)
 8005ea2:	480d      	ldr	r0, [pc, #52]	@ (8005ed8 <command_send_splash+0xd4>)
 8005ea4:	f7fc f812 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--          \\ \\ / /| || | | | | | |           --  \r\n");
 8005ea8:	491e      	ldr	r1, [pc, #120]	@ (8005f24 <command_send_splash+0x120>)
 8005eaa:	480b      	ldr	r0, [pc, #44]	@ (8005ed8 <command_send_splash+0xd4>)
 8005eac:	f7fc f80e 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--           \\ V / | || |_| | |_| |           -- \r\n");
 8005eb0:	491d      	ldr	r1, [pc, #116]	@ (8005f28 <command_send_splash+0x124>)
 8005eb2:	4809      	ldr	r0, [pc, #36]	@ (8005ed8 <command_send_splash+0xd4>)
 8005eb4:	f7fc f80a 	bl	8001ecc <Uart_sendstring>
	Uart_sendstring(UART5, "--            \\_/  |_(_)___(_)___/            -- \r\n");
 8005eb8:	491c      	ldr	r1, [pc, #112]	@ (8005f2c <command_send_splash+0x128>)
 8005eba:	4807      	ldr	r0, [pc, #28]	@ (8005ed8 <command_send_splash+0xd4>)
 8005ebc:	f7fc f806 	bl	8001ecc <Uart_sendstring>
    Uart_sendstring(UART5, "------------------------------------------------\r\n");
 8005ec0:	4904      	ldr	r1, [pc, #16]	@ (8005ed4 <command_send_splash+0xd0>)
 8005ec2:	4805      	ldr	r0, [pc, #20]	@ (8005ed8 <command_send_splash+0xd4>)
 8005ec4:	f7fc f802 	bl	8001ecc <Uart_sendstring>

	Uart_sendstring(UART5, "> ");
 8005ec8:	4919      	ldr	r1, [pc, #100]	@ (8005f30 <command_send_splash+0x12c>)
 8005eca:	4803      	ldr	r0, [pc, #12]	@ (8005ed8 <command_send_splash+0xd4>)
 8005ecc:	f7fb fffe 	bl	8001ecc <Uart_sendstring>
}
 8005ed0:	bf00      	nop
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	08012628 	.word	0x08012628
 8005ed8:	40005000 	.word	0x40005000
 8005edc:	0801265c 	.word	0x0801265c
 8005ee0:	08012690 	.word	0x08012690
 8005ee4:	080126c4 	.word	0x080126c4
 8005ee8:	080126fc 	.word	0x080126fc
 8005eec:	08012730 	.word	0x08012730
 8005ef0:	08012768 	.word	0x08012768
 8005ef4:	0801279c 	.word	0x0801279c
 8005ef8:	080127d0 	.word	0x080127d0
 8005efc:	08012804 	.word	0x08012804
 8005f00:	08012838 	.word	0x08012838
 8005f04:	0801286c 	.word	0x0801286c
 8005f08:	080128a0 	.word	0x080128a0
 8005f0c:	080128d4 	.word	0x080128d4
 8005f10:	08012908 	.word	0x08012908
 8005f14:	0801293c 	.word	0x0801293c
 8005f18:	08012970 	.word	0x08012970
 8005f1c:	080129a4 	.word	0x080129a4
 8005f20:	080129d8 	.word	0x080129d8
 8005f24:	08012a0c 	.word	0x08012a0c
 8005f28:	08012a44 	.word	0x08012a44
 8005f2c:	08012a78 	.word	0x08012a78
 8005f30:	0801220c 	.word	0x0801220c

08005f34 <LL_GPIO_SetOutputPin>:
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	619a      	str	r2, [r3, #24]
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <LL_GPIO_ResetOutputPin>:
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	041a      	lsls	r2, r3, #16
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	619a      	str	r2, [r3, #24]
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <switch_board>:
	}
};



void switch_board(uint8_t board_id) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
    switch (board_id) {
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d837      	bhi.n	8005ff0 <switch_board+0x80>
 8005f80:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <switch_board+0x18>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005faf 	.word	0x08005faf
 8005f90:	08005fc5 	.word	0x08005fc5
 8005f94:	08005fdb 	.word	0x08005fdb
        case 0: // PDU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005f98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f9c:	4816      	ldr	r0, [pc, #88]	@ (8005ff8 <switch_board+0x88>)
 8005f9e:	f7ff ffd7 	bl	8005f50 <LL_GPIO_ResetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005fa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005fa6:	4814      	ldr	r0, [pc, #80]	@ (8005ff8 <switch_board+0x88>)
 8005fa8:	f7ff ffd2 	bl	8005f50 <LL_GPIO_ResetOutputPin>
            break;
 8005fac:	e020      	b.n	8005ff0 <switch_board+0x80>
        case 1: // PMU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005fae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005fb2:	4811      	ldr	r0, [pc, #68]	@ (8005ff8 <switch_board+0x88>)
 8005fb4:	f7ff ffcc 	bl	8005f50 <LL_GPIO_ResetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005fb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005fbc:	480e      	ldr	r0, [pc, #56]	@ (8005ff8 <switch_board+0x88>)
 8005fbe:	f7ff ffb9 	bl	8005f34 <LL_GPIO_SetOutputPin>
            break;
 8005fc2:	e015      	b.n	8005ff0 <switch_board+0x80>
        case 2: // CAM
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005fc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005fc8:	480b      	ldr	r0, [pc, #44]	@ (8005ff8 <switch_board+0x88>)
 8005fca:	f7ff ffb3 	bl	8005f34 <LL_GPIO_SetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005fce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005fd2:	4809      	ldr	r0, [pc, #36]	@ (8005ff8 <switch_board+0x88>)
 8005fd4:	f7ff ffbc 	bl	8005f50 <LL_GPIO_ResetOutputPin>
            break;
 8005fd8:	e00a      	b.n	8005ff0 <switch_board+0x80>
        case 3: // IOU
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005fda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005fde:	4806      	ldr	r0, [pc, #24]	@ (8005ff8 <switch_board+0x88>)
 8005fe0:	f7ff ffa8 	bl	8005f34 <LL_GPIO_SetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005fe4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005fe8:	4803      	ldr	r0, [pc, #12]	@ (8005ff8 <switch_board+0x88>)
 8005fea:	f7ff ffa3 	bl	8005f34 <LL_GPIO_SetOutputPin>
            break;
 8005fee:	bf00      	nop
    }
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40020000 	.word	0x40020000

08005ffc <RS422_periodic_task>:





void RS422_periodic_task(void) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8006002:	af00      	add	r7, sp, #0
	if (auto_report_enabled) {
 8006004:	4bbf      	ldr	r3, [pc, #764]	@ (8006304 <RS422_periodic_task+0x308>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 8175 	beq.w	80062f8 <RS422_periodic_task+0x2fc>

//	if  not in send and wait
		uint8_t receiving = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		uint8_t receive_buffer[FSP_PKT_MAX_LENGTH];
		uint8_t receive_index = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_RS422))
 800601a:	2004      	movs	r0, #4
 800601c:	f003 fc7e 	bl	800991c <SCH_TIM_HasCompleted>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8168 	beq.w	80062f8 <RS422_periodic_task+0x2fc>
		{

			if(!sendFlag){
 8006028:	4bb7      	ldr	r3, [pc, #732]	@ (8006308 <RS422_periodic_task+0x30c>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	f040 8162 	bne.w	80062f8 <RS422_periodic_task+0x2fc>
				switch_board(0);
 8006034:	2000      	movs	r0, #0
 8006036:	f7ff ff9b 	bl	8005f70 <switch_board>
				Uart_flush(USART1);
 800603a:	48b4      	ldr	r0, [pc, #720]	@ (800630c <RS422_periodic_task+0x310>)
 800603c:	f7fb ff5e 	bl	8001efc <Uart_flush>

				frame = pdu_frame;
 8006040:	4bb3      	ldr	r3, [pc, #716]	@ (8006310 <RS422_periodic_task+0x314>)
 8006042:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
				frame_len = sizeof(pdu_frame);
 8006046:	2309      	movs	r3, #9
 8006048:	f887 3203 	strb.w	r3, [r7, #515]	@ 0x203
				for (int i = 0; i < frame_len; i++) {
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8006052:	e00e      	b.n	8006072 <RS422_periodic_task+0x76>
					Uart_write(USART1, frame[i]);
 8006054:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8006058:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800605c:	4413      	add	r3, r2
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	4619      	mov	r1, r3
 8006062:	48aa      	ldr	r0, [pc, #680]	@ (800630c <RS422_periodic_task+0x310>)
 8006064:	f7fb fe26 	bl	8001cb4 <Uart_write>
				for (int i = 0; i < frame_len; i++) {
 8006068:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800606c:	3301      	adds	r3, #1
 800606e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8006072:	f897 3203 	ldrb.w	r3, [r7, #515]	@ 0x203
 8006076:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 800607a:	429a      	cmp	r2, r3
 800607c:	dbea      	blt.n	8006054 <RS422_periodic_task+0x58>
				}

				uint8_t rxData;
				SCH_Delay(300);
 800607e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006082:	f003 fd93 	bl	8009bac <SCH_Delay>
				receiving = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				receive_buffer[FSP_PKT_MAX_LENGTH];
				receive_index = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216

				while (IsDataAvailable(USART1))
 8006092:	e03c      	b.n	800610e <RS422_periodic_task+0x112>
				{
					rxData = Uart_read(USART1);
 8006094:	489d      	ldr	r0, [pc, #628]	@ (800630c <RS422_periodic_task+0x310>)
 8006096:	f7fb fd6f 	bl	8001b78 <Uart_read>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 3202 	strb.w	r3, [r7, #514]	@ 0x202

					if (!receiving) {
 80060a0:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <RS422_periodic_task+0xc2>
						if (rxData == FSP_PKT_SOD) {
 80060a8:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 80060ac:	2bca      	cmp	r3, #202	@ 0xca
 80060ae:	d12e      	bne.n	800610e <RS422_periodic_task+0x112>
							receiving = 1;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
							receive_index = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 80060bc:	e027      	b.n	800610e <RS422_periodic_task+0x112>
						}
					} else {

						if (rxData == FSP_PKT_EOF) {
 80060be:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 80060c2:	2bef      	cmp	r3, #239	@ 0xef
 80060c4:	d10f      	bne.n	80060e6 <RS422_periodic_task+0xea>
							receiving = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
							fsp_packet_t fsp_pkt;

							frame_decode_rs422((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 80060cc:	463a      	mov	r2, r7
 80060ce:	f897 1216 	ldrb.w	r1, [r7, #534]	@ 0x216
 80060d2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80060d6:	4618      	mov	r0, r3
 80060d8:	f004 f9e2 	bl	800a4a0 <frame_decode_rs422>

							frame_processing_rs422(&fsp_pkt);
 80060dc:	463b      	mov	r3, r7
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 f91e 	bl	8006320 <frame_processing_rs422>
 80060e4:	e00c      	b.n	8006100 <RS422_periodic_task+0x104>


						}else{
							receive_buffer[receive_index++] = rxData;
 80060e6:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	f887 2216 	strb.w	r2, [r7, #534]	@ 0x216
 80060f0:	4619      	mov	r1, r3
 80060f2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80060f6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80060fa:	f897 2202 	ldrb.w	r2, [r7, #514]	@ 0x202
 80060fe:	545a      	strb	r2, [r3, r1]
						}

						if (receive_index >= FSP_PKT_MAX_LENGTH) {
 8006100:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8006104:	2bff      	cmp	r3, #255	@ 0xff
 8006106:	d102      	bne.n	800610e <RS422_periodic_task+0x112>
							// Frame quá dài, reset lại

							receiving = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				while (IsDataAvailable(USART1))
 800610e:	487f      	ldr	r0, [pc, #508]	@ (800630c <RS422_periodic_task+0x310>)
 8006110:	f7fb fe96 	bl	8001e40 <IsDataAvailable>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1bc      	bne.n	8006094 <RS422_periodic_task+0x98>
						}
					}
			   }

				Uart_flush(USART1);
 800611a:	487c      	ldr	r0, [pc, #496]	@ (800630c <RS422_periodic_task+0x310>)
 800611c:	f7fb feee 	bl	8001efc <Uart_flush>
			//decode xiu?
				switch_board(1);
 8006120:	2001      	movs	r0, #1
 8006122:	f7ff ff25 	bl	8005f70 <switch_board>
			//gio moi decode?
				frame = pmu_frame;
 8006126:	4b7b      	ldr	r3, [pc, #492]	@ (8006314 <RS422_periodic_task+0x318>)
 8006128:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
				frame_len = sizeof(pdu_frame);
 800612c:	2309      	movs	r3, #9
 800612e:	f887 3203 	strb.w	r3, [r7, #515]	@ 0x203
				for (int i = 0; i < frame_len; i++) {
 8006132:	2300      	movs	r3, #0
 8006134:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8006138:	e00e      	b.n	8006158 <RS422_periodic_task+0x15c>
					Uart_write(USART1, frame[i]);
 800613a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800613e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8006142:	4413      	add	r3, r2
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	4619      	mov	r1, r3
 8006148:	4870      	ldr	r0, [pc, #448]	@ (800630c <RS422_periodic_task+0x310>)
 800614a:	f7fb fdb3 	bl	8001cb4 <Uart_write>
				for (int i = 0; i < frame_len; i++) {
 800614e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8006152:	3301      	adds	r3, #1
 8006154:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8006158:	f897 3203 	ldrb.w	r3, [r7, #515]	@ 0x203
 800615c:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8006160:	429a      	cmp	r2, r3
 8006162:	dbea      	blt.n	800613a <RS422_periodic_task+0x13e>
				}
				SCH_Delay(300);
 8006164:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006168:	f003 fd20 	bl	8009bac <SCH_Delay>
				receiving = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				receive_buffer[FSP_PKT_MAX_LENGTH];
				receive_index = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
				while (IsDataAvailable(USART1))
 8006178:	e03c      	b.n	80061f4 <RS422_periodic_task+0x1f8>
				{
					rxData = Uart_read(USART1);
 800617a:	4864      	ldr	r0, [pc, #400]	@ (800630c <RS422_periodic_task+0x310>)
 800617c:	f7fb fcfc 	bl	8001b78 <Uart_read>
 8006180:	4603      	mov	r3, r0
 8006182:	f887 3202 	strb.w	r3, [r7, #514]	@ 0x202

					if (!receiving) {
 8006186:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <RS422_periodic_task+0x1a8>
						if (rxData == FSP_PKT_SOD) {
 800618e:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 8006192:	2bca      	cmp	r3, #202	@ 0xca
 8006194:	d12e      	bne.n	80061f4 <RS422_periodic_task+0x1f8>
							receiving = 1;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
							receive_index = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 80061a2:	e027      	b.n	80061f4 <RS422_periodic_task+0x1f8>
						}
					} else {

						if (rxData == FSP_PKT_EOF) {
 80061a4:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 80061a8:	2bef      	cmp	r3, #239	@ 0xef
 80061aa:	d10f      	bne.n	80061cc <RS422_periodic_task+0x1d0>
							receiving = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
							fsp_packet_t fsp_pkt;
							//set lệnh, nếu là lệnh abc, xyz thì abcxyz từ từ đây in ra cái gì gì
							frame_decode_rs422((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 80061b2:	463a      	mov	r2, r7
 80061b4:	f897 1216 	ldrb.w	r1, [r7, #534]	@ 0x216
 80061b8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80061bc:	4618      	mov	r0, r3
 80061be:	f004 f96f 	bl	800a4a0 <frame_decode_rs422>

							frame_processing_rs422(&fsp_pkt);
 80061c2:	463b      	mov	r3, r7
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 f8ab 	bl	8006320 <frame_processing_rs422>
 80061ca:	e00c      	b.n	80061e6 <RS422_periodic_task+0x1ea>


							}

						else{
							receive_buffer[receive_index++] = rxData;
 80061cc:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	f887 2216 	strb.w	r2, [r7, #534]	@ 0x216
 80061d6:	4619      	mov	r1, r3
 80061d8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80061dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80061e0:	f897 2202 	ldrb.w	r2, [r7, #514]	@ 0x202
 80061e4:	545a      	strb	r2, [r3, r1]
						}

						if (receive_index >= FSP_PKT_MAX_LENGTH) {
 80061e6:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80061ea:	2bff      	cmp	r3, #255	@ 0xff
 80061ec:	d102      	bne.n	80061f4 <RS422_periodic_task+0x1f8>
							// Frame quá dài, reset lại

							receiving = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				while (IsDataAvailable(USART1))
 80061f4:	4845      	ldr	r0, [pc, #276]	@ (800630c <RS422_periodic_task+0x310>)
 80061f6:	f7fb fe23 	bl	8001e40 <IsDataAvailable>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1bc      	bne.n	800617a <RS422_periodic_task+0x17e>
						}
					}
			   }

				Uart_flush(USART1);
 8006200:	4842      	ldr	r0, [pc, #264]	@ (800630c <RS422_periodic_task+0x310>)
 8006202:	f7fb fe7b 	bl	8001efc <Uart_flush>

				switch_board(3);
 8006206:	2003      	movs	r0, #3
 8006208:	f7ff feb2 	bl	8005f70 <switch_board>
				//gio moi de code
				frame = iou_frame;
 800620c:	4b42      	ldr	r3, [pc, #264]	@ (8006318 <RS422_periodic_task+0x31c>)
 800620e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
				frame_len = sizeof(pdu_frame);
 8006212:	2309      	movs	r3, #9
 8006214:	f887 3203 	strb.w	r3, [r7, #515]	@ 0x203
				for (int i = 0; i < frame_len; i++) {
 8006218:	2300      	movs	r3, #0
 800621a:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 800621e:	e00e      	b.n	800623e <RS422_periodic_task+0x242>
					Uart_write(USART1, frame[i]);
 8006220:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8006224:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8006228:	4413      	add	r3, r2
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	4619      	mov	r1, r3
 800622e:	4837      	ldr	r0, [pc, #220]	@ (800630c <RS422_periodic_task+0x310>)
 8006230:	f7fb fd40 	bl	8001cb4 <Uart_write>
				for (int i = 0; i < frame_len; i++) {
 8006234:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8006238:	3301      	adds	r3, #1
 800623a:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 800623e:	f897 3203 	ldrb.w	r3, [r7, #515]	@ 0x203
 8006242:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8006246:	429a      	cmp	r2, r3
 8006248:	dbea      	blt.n	8006220 <RS422_periodic_task+0x224>
				}
				SCH_Delay(300);
 800624a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800624e:	f003 fcad 	bl	8009bac <SCH_Delay>
				receiving = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				receive_buffer[FSP_PKT_MAX_LENGTH];
				receive_index = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
				while (IsDataAvailable(USART1))
 800625e:	e03c      	b.n	80062da <RS422_periodic_task+0x2de>
				{
					rxData = Uart_read(USART1);
 8006260:	482a      	ldr	r0, [pc, #168]	@ (800630c <RS422_periodic_task+0x310>)
 8006262:	f7fb fc89 	bl	8001b78 <Uart_read>
 8006266:	4603      	mov	r3, r0
 8006268:	f887 3202 	strb.w	r3, [r7, #514]	@ 0x202

					if (!receiving) {
 800626c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10a      	bne.n	800628a <RS422_periodic_task+0x28e>
						if (rxData == FSP_PKT_SOD) {
 8006274:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 8006278:	2bca      	cmp	r3, #202	@ 0xca
 800627a:	d12e      	bne.n	80062da <RS422_periodic_task+0x2de>
							receiving = 1;
 800627c:	2301      	movs	r3, #1
 800627e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
							receive_index = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 8006288:	e027      	b.n	80062da <RS422_periodic_task+0x2de>
						}
					} else {

						if (rxData == FSP_PKT_EOF) {
 800628a:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 800628e:	2bef      	cmp	r3, #239	@ 0xef
 8006290:	d10f      	bne.n	80062b2 <RS422_periodic_task+0x2b6>
							receiving = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
							fsp_packet_t fsp_pkt;
							//set lệnh, nếu là lệnh abc, xyz thì abcxyz từ từ đây in ra cái gì gì
							frame_decode_rs422((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 8006298:	463a      	mov	r2, r7
 800629a:	f897 1216 	ldrb.w	r1, [r7, #534]	@ 0x216
 800629e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80062a2:	4618      	mov	r0, r3
 80062a4:	f004 f8fc 	bl	800a4a0 <frame_decode_rs422>

							frame_processing_rs422(&fsp_pkt);
 80062a8:	463b      	mov	r3, r7
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f838 	bl	8006320 <frame_processing_rs422>
 80062b0:	e00c      	b.n	80062cc <RS422_periodic_task+0x2d0>



						}else{
							receive_buffer[receive_index++] = rxData;
 80062b2:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	f887 2216 	strb.w	r2, [r7, #534]	@ 0x216
 80062bc:	4619      	mov	r1, r3
 80062be:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80062c6:	f897 2202 	ldrb.w	r2, [r7, #514]	@ 0x202
 80062ca:	545a      	strb	r2, [r3, r1]
						}

						if (receive_index >= FSP_PKT_MAX_LENGTH) {
 80062cc:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80062d0:	2bff      	cmp	r3, #255	@ 0xff
 80062d2:	d102      	bne.n	80062da <RS422_periodic_task+0x2de>
							// Frame quá dài, reset lại

							receiving = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				while (IsDataAvailable(USART1))
 80062da:	480c      	ldr	r0, [pc, #48]	@ (800630c <RS422_periodic_task+0x310>)
 80062dc:	f7fb fdb0 	bl	8001e40 <IsDataAvailable>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1bc      	bne.n	8006260 <RS422_periodic_task+0x264>
						}
					}
			   }
				Uart_flush(USART1);
 80062e6:	4809      	ldr	r0, [pc, #36]	@ (800630c <RS422_periodic_task+0x310>)
 80062e8:	f7fb fe08 	bl	8001efc <Uart_flush>
				SCH_TIM_Start(SCH_TIM_RS422, RS422_PERIOD);	//restart
 80062ec:	4b0b      	ldr	r3, [pc, #44]	@ (800631c <RS422_periodic_task+0x320>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4619      	mov	r1, r3
 80062f2:	2004      	movs	r0, #4
 80062f4:	f003 fafc 	bl	80098f0 <SCH_TIM_Start>

		}else{

		}
	}
}
 80062f8:	bf00      	nop
 80062fa:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20004930 	.word	0x20004930
 8006308:	20004709 	.word	0x20004709
 800630c:	40011000 	.word	0x40011000
 8006310:	20000350 	.word	0x20000350
 8006314:	2000035c 	.word	0x2000035c
 8006318:	20000368 	.word	0x20000368
 800631c:	2000033c 	.word	0x2000033c

08006320 <frame_processing_rs422>:

void frame_processing_rs422(fsp_packet_t *fsp_pkt){
 8006320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006324:	f5ad 6db8 	sub.w	sp, sp, #1472	@ 0x5c0
 8006328:	af2c      	add	r7, sp, #176	@ 0xb0
 800632a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800632e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006332:	6018      	str	r0, [r3, #0]
	switch(fsp_pkt->payload[0])
 8006334:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006338:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	795b      	ldrb	r3, [r3, #5]
 8006340:	2b13      	cmp	r3, #19
 8006342:	f000 856c 	beq.w	8006e1e <frame_processing_rs422+0xafe>
 8006346:	2b13      	cmp	r3, #19
 8006348:	f301 8164 	bgt.w	8007614 <frame_processing_rs422+0x12f4>
 800634c:	2b06      	cmp	r3, #6
 800634e:	f000 8289 	beq.w	8006864 <frame_processing_rs422+0x544>
 8006352:	2b08      	cmp	r3, #8
 8006354:	f041 815e 	bne.w	8007614 <frame_processing_rs422+0x12f4>
	{
		case 0x08:
	    {
	    	Uart_sendstring(UART5, "\nPMU:\n");
 8006358:	49b6      	ldr	r1, [pc, #728]	@ (8006634 <frame_processing_rs422+0x314>)
 800635a:	48b7      	ldr	r0, [pc, #732]	@ (8006638 <frame_processing_rs422+0x318>)
 800635c:	f7fb fdb6 	bl	8001ecc <Uart_sendstring>
	    	int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8006360:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006364:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	799b      	ldrb	r3, [r3, #6]
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	b21a      	sxth	r2, r3
 8006370:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006374:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	79db      	ldrb	r3, [r3, #7]
 800637c:	b21b      	sxth	r3, r3
 800637e:	4313      	orrs	r3, r2
 8006380:	f8a7 34ea 	strh.w	r3, [r7, #1258]	@ 0x4ea
	    	int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8006384:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006388:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	7a1b      	ldrb	r3, [r3, #8]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	b21a      	sxth	r2, r3
 8006394:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006398:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	7a5b      	ldrb	r3, [r3, #9]
 80063a0:	b21b      	sxth	r3, r3
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8a7 34e8 	strh.w	r3, [r7, #1256]	@ 0x4e8
	    	int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 80063a8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80063ac:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	7a9b      	ldrb	r3, [r3, #10]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	b21a      	sxth	r2, r3
 80063b8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80063bc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	7adb      	ldrb	r3, [r3, #11]
 80063c4:	b21b      	sxth	r3, r3
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
	    	int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 80063cc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80063d0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	7b1b      	ldrb	r3, [r3, #12]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	b21a      	sxth	r2, r3
 80063dc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80063e0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	7b5b      	ldrb	r3, [r3, #13]
 80063e8:	b21b      	sxth	r3, r3
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8a7 34e4 	strh.w	r3, [r7, #1252]	@ 0x4e4

	    	uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 80063f0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80063f4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	7b9b      	ldrb	r3, [r3, #14]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	b21a      	sxth	r2, r3
 8006400:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006404:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	7bdb      	ldrb	r3, [r3, #15]
 800640c:	b21b      	sxth	r3, r3
 800640e:	4313      	orrs	r3, r2
 8006410:	b21b      	sxth	r3, r3
 8006412:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2
	    	uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8006416:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800641a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	7c1b      	ldrb	r3, [r3, #16]
 8006422:	021b      	lsls	r3, r3, #8
 8006424:	b21a      	sxth	r2, r3
 8006426:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800642a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	7c5b      	ldrb	r3, [r3, #17]
 8006432:	b21b      	sxth	r3, r3
 8006434:	4313      	orrs	r3, r2
 8006436:	b21b      	sxth	r3, r3
 8006438:	f8a7 34e0 	strh.w	r3, [r7, #1248]	@ 0x4e0
	    	uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800643c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006440:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	7c9b      	ldrb	r3, [r3, #18]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	b21a      	sxth	r2, r3
 800644c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006450:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	7cdb      	ldrb	r3, [r3, #19]
 8006458:	b21b      	sxth	r3, r3
 800645a:	4313      	orrs	r3, r2
 800645c:	b21b      	sxth	r3, r3
 800645e:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
	    	uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8006462:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006466:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	7d1b      	ldrb	r3, [r3, #20]
 800646e:	021b      	lsls	r3, r3, #8
 8006470:	b21a      	sxth	r2, r3
 8006472:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006476:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	7d5b      	ldrb	r3, [r3, #21]
 800647e:	b21b      	sxth	r3, r3
 8006480:	4313      	orrs	r3, r2
 8006482:	b21b      	sxth	r3, r3
 8006484:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc

	    	uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 8006488:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800648c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	7d9b      	ldrb	r3, [r3, #22]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	b21a      	sxth	r2, r3
 8006498:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800649c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	7ddb      	ldrb	r3, [r3, #23]
 80064a4:	b21b      	sxth	r3, r3
 80064a6:	4313      	orrs	r3, r2
 80064a8:	b21b      	sxth	r3, r3
 80064aa:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da
	    	uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 80064ae:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80064b2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	7e1b      	ldrb	r3, [r3, #24]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	b21a      	sxth	r2, r3
 80064be:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80064c2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	7e5b      	ldrb	r3, [r3, #25]
 80064ca:	b21b      	sxth	r3, r3
 80064cc:	4313      	orrs	r3, r2
 80064ce:	b21b      	sxth	r3, r3
 80064d0:	f8a7 34d8 	strh.w	r3, [r7, #1240]	@ 0x4d8

	    	uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 80064d4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80064d8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	7e9b      	ldrb	r3, [r3, #26]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	b21a      	sxth	r2, r3
 80064e4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80064e8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	7edb      	ldrb	r3, [r3, #27]
 80064f0:	b21b      	sxth	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b21b      	sxth	r3, r3
 80064f6:	f8a7 34d6 	strh.w	r3, [r7, #1238]	@ 0x4d6
	    	uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 80064fa:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80064fe:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	7f1b      	ldrb	r3, [r3, #28]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	b21a      	sxth	r2, r3
 800650a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800650e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	7f5b      	ldrb	r3, [r3, #29]
 8006516:	b21b      	sxth	r3, r3
 8006518:	4313      	orrs	r3, r2
 800651a:	b21b      	sxth	r3, r3
 800651c:	f8a7 34d4 	strh.w	r3, [r7, #1236]	@ 0x4d4

	    	char buffer_0x08[500];
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8006520:	f9b7 34ea 	ldrsh.w	r3, [r7, #1258]	@ 0x4ea
 8006524:	2b00      	cmp	r3, #0
 8006526:	da03      	bge.n	8006530 <frame_processing_rs422+0x210>
 8006528:	4b44      	ldr	r3, [pc, #272]	@ (800663c <frame_processing_rs422+0x31c>)
 800652a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800652e:	e002      	b.n	8006536 <frame_processing_rs422+0x216>
 8006530:	4b43      	ldr	r3, [pc, #268]	@ (8006640 <frame_processing_rs422+0x320>)
 8006532:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 8006536:	f9b7 34ea 	ldrsh.w	r3, [r7, #1258]	@ 0x4ea
 800653a:	2b00      	cmp	r3, #0
 800653c:	bfb8      	it	lt
 800653e:	425b      	neglt	r3, r3
 8006540:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8006542:	4a40      	ldr	r2, [pc, #256]	@ (8006644 <frame_processing_rs422+0x324>)
 8006544:	fb82 1203 	smull	r1, r2, r2, r3
 8006548:	1152      	asrs	r2, r2, #5
 800654a:	17db      	asrs	r3, r3, #31
 800654c:	eba2 0c03 	sub.w	ip, r2, r3
	    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 8006550:	f9b7 34ea 	ldrsh.w	r3, [r7, #1258]	@ 0x4ea
 8006554:	2b00      	cmp	r3, #0
 8006556:	bfb8      	it	lt
 8006558:	425b      	neglt	r3, r3
 800655a:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800655c:	4a39      	ldr	r2, [pc, #228]	@ (8006644 <frame_processing_rs422+0x324>)
 800655e:	fb82 1203 	smull	r1, r2, r2, r3
 8006562:	1151      	asrs	r1, r2, #5
 8006564:	17da      	asrs	r2, r3, #31
 8006566:	1a8a      	subs	r2, r1, r2
 8006568:	4611      	mov	r1, r2
 800656a:	2264      	movs	r2, #100	@ 0x64
 800656c:	fb01 f202 	mul.w	r2, r1, r2
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006576:	f9b7 34e8 	ldrsh.w	r3, [r7, #1256]	@ 0x4e8
 800657a:	2b00      	cmp	r3, #0
 800657c:	da03      	bge.n	8006586 <frame_processing_rs422+0x266>
 800657e:	4b2f      	ldr	r3, [pc, #188]	@ (800663c <frame_processing_rs422+0x31c>)
 8006580:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006584:	e002      	b.n	800658c <frame_processing_rs422+0x26c>
 8006586:	4b2e      	ldr	r3, [pc, #184]	@ (8006640 <frame_processing_rs422+0x320>)
 8006588:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800658c:	f9b7 34e8 	ldrsh.w	r3, [r7, #1256]	@ 0x4e8
 8006590:	2b00      	cmp	r3, #0
 8006592:	bfb8      	it	lt
 8006594:	425b      	neglt	r3, r3
 8006596:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8006598:	4a2a      	ldr	r2, [pc, #168]	@ (8006644 <frame_processing_rs422+0x324>)
 800659a:	fb82 1203 	smull	r1, r2, r2, r3
 800659e:	1152      	asrs	r2, r2, #5
 80065a0:	17db      	asrs	r3, r3, #31
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 80065a8:	f9b7 34e8 	ldrsh.w	r3, [r7, #1256]	@ 0x4e8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bfb8      	it	lt
 80065b0:	425b      	neglt	r3, r3
 80065b2:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80065b4:	4a23      	ldr	r2, [pc, #140]	@ (8006644 <frame_processing_rs422+0x324>)
 80065b6:	fb82 1203 	smull	r1, r2, r2, r3
 80065ba:	1151      	asrs	r1, r2, #5
 80065bc:	17da      	asrs	r2, r3, #31
 80065be:	1a8a      	subs	r2, r1, r2
 80065c0:	4611      	mov	r1, r2
 80065c2:	2264      	movs	r2, #100	@ 0x64
 80065c4:	fb01 f202 	mul.w	r2, r1, r2
 80065c8:	1a9b      	subs	r3, r3, r2
 80065ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065ce:	f9b7 34e6 	ldrsh.w	r3, [r7, #1254]	@ 0x4e6
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	da03      	bge.n	80065de <frame_processing_rs422+0x2be>
 80065d6:	4b19      	ldr	r3, [pc, #100]	@ (800663c <frame_processing_rs422+0x31c>)
 80065d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065dc:	e002      	b.n	80065e4 <frame_processing_rs422+0x2c4>
 80065de:	4b18      	ldr	r3, [pc, #96]	@ (8006640 <frame_processing_rs422+0x320>)
 80065e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 80065e4:	f9b7 34e6 	ldrsh.w	r3, [r7, #1254]	@ 0x4e6
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfb8      	it	lt
 80065ec:	425b      	neglt	r3, r3
 80065ee:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80065f0:	4a14      	ldr	r2, [pc, #80]	@ (8006644 <frame_processing_rs422+0x324>)
 80065f2:	fb82 1203 	smull	r1, r2, r2, r3
 80065f6:	1152      	asrs	r2, r2, #5
 80065f8:	17db      	asrs	r3, r3, #31
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
	    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 80065fe:	f9b7 34e6 	ldrsh.w	r3, [r7, #1254]	@ 0x4e6
 8006602:	2b00      	cmp	r3, #0
 8006604:	bfb8      	it	lt
 8006606:	425b      	neglt	r3, r3
 8006608:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800660a:	4a0e      	ldr	r2, [pc, #56]	@ (8006644 <frame_processing_rs422+0x324>)
 800660c:	fb82 1203 	smull	r1, r2, r2, r3
 8006610:	1151      	asrs	r1, r2, #5
 8006612:	17da      	asrs	r2, r3, #31
 8006614:	1a8a      	subs	r2, r1, r2
 8006616:	4611      	mov	r1, r2
 8006618:	2264      	movs	r2, #100	@ 0x64
 800661a:	fb01 f202 	mul.w	r2, r1, r2
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006622:	f9b7 34e4 	ldrsh.w	r3, [r7, #1252]	@ 0x4e4
 8006626:	2b00      	cmp	r3, #0
 8006628:	da0e      	bge.n	8006648 <frame_processing_rs422+0x328>
 800662a:	4b04      	ldr	r3, [pc, #16]	@ (800663c <frame_processing_rs422+0x31c>)
 800662c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006630:	e00d      	b.n	800664e <frame_processing_rs422+0x32e>
 8006632:	bf00      	nop
 8006634:	08012aac 	.word	0x08012aac
 8006638:	40005000 	.word	0x40005000
 800663c:	08012ab4 	.word	0x08012ab4
 8006640:	08012ab8 	.word	0x08012ab8
 8006644:	51eb851f 	.word	0x51eb851f
 8006648:	4b82      	ldr	r3, [pc, #520]	@ (8006854 <frame_processing_rs422+0x534>)
 800664a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800664e:	f9b7 34e4 	ldrsh.w	r3, [r7, #1252]	@ 0x4e4
 8006652:	2b00      	cmp	r3, #0
 8006654:	bfb8      	it	lt
 8006656:	425b      	neglt	r3, r3
 8006658:	b29b      	uxth	r3, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800665a:	4a7f      	ldr	r2, [pc, #508]	@ (8006858 <frame_processing_rs422+0x538>)
 800665c:	fb82 1203 	smull	r1, r2, r2, r3
 8006660:	1152      	asrs	r2, r2, #5
 8006662:	17db      	asrs	r3, r3, #31
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	677b      	str	r3, [r7, #116]	@ 0x74
	    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 8006668:	f9b7 34e4 	ldrsh.w	r3, [r7, #1252]	@ 0x4e4
 800666c:	2b00      	cmp	r3, #0
 800666e:	bfb8      	it	lt
 8006670:	425b      	neglt	r3, r3
 8006672:	b29b      	uxth	r3, r3
 8006674:	4619      	mov	r1, r3
	    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8006676:	4b78      	ldr	r3, [pc, #480]	@ (8006858 <frame_processing_rs422+0x538>)
 8006678:	fb83 2301 	smull	r2, r3, r3, r1
 800667c:	115a      	asrs	r2, r3, #5
 800667e:	17cb      	asrs	r3, r1, #31
 8006680:	1ad6      	subs	r6, r2, r3
 8006682:	2364      	movs	r3, #100	@ 0x64
 8006684:	fb06 f303 	mul.w	r3, r6, r3
 8006688:	1ace      	subs	r6, r1, r3
 800668a:	f8b7 34e2 	ldrh.w	r3, [r7, #1250]	@ 0x4e2
 800668e:	4a72      	ldr	r2, [pc, #456]	@ (8006858 <frame_processing_rs422+0x538>)
 8006690:	fba2 2303 	umull	r2, r3, r2, r3
 8006694:	095b      	lsrs	r3, r3, #5
 8006696:	b29b      	uxth	r3, r3
 8006698:	673b      	str	r3, [r7, #112]	@ 0x70
 800669a:	f8b7 14e2 	ldrh.w	r1, [r7, #1250]	@ 0x4e2
 800669e:	4b6e      	ldr	r3, [pc, #440]	@ (8006858 <frame_processing_rs422+0x538>)
 80066a0:	fba3 2301 	umull	r2, r3, r3, r1
 80066a4:	095a      	lsrs	r2, r3, #5
 80066a6:	2364      	movs	r3, #100	@ 0x64
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
 80066ac:	1acb      	subs	r3, r1, r3
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066b2:	f8b7 24e0 	ldrh.w	r2, [r7, #1248]	@ 0x4e0
 80066b6:	4b68      	ldr	r3, [pc, #416]	@ (8006858 <frame_processing_rs422+0x538>)
 80066b8:	fba3 2302 	umull	r2, r3, r3, r2
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	b29b      	uxth	r3, r3
 80066c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066c2:	f8b7 14e0 	ldrh.w	r1, [r7, #1248]	@ 0x4e0
 80066c6:	4b64      	ldr	r3, [pc, #400]	@ (8006858 <frame_processing_rs422+0x538>)
 80066c8:	fba3 2301 	umull	r2, r3, r3, r1
 80066cc:	095a      	lsrs	r2, r3, #5
 80066ce:	2364      	movs	r3, #100	@ 0x64
 80066d0:	fb02 f303 	mul.w	r3, r2, r3
 80066d4:	1acb      	subs	r3, r1, r3
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80066da:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 80066de:	4b5e      	ldr	r3, [pc, #376]	@ (8006858 <frame_processing_rs422+0x538>)
 80066e0:	fba3 2302 	umull	r2, r3, r3, r2
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80066ea:	f8b7 14de 	ldrh.w	r1, [r7, #1246]	@ 0x4de
 80066ee:	4b5a      	ldr	r3, [pc, #360]	@ (8006858 <frame_processing_rs422+0x538>)
 80066f0:	fba3 2301 	umull	r2, r3, r3, r1
 80066f4:	095a      	lsrs	r2, r3, #5
 80066f6:	2364      	movs	r3, #100	@ 0x64
 80066f8:	fb02 f303 	mul.w	r3, r2, r3
 80066fc:	1acb      	subs	r3, r1, r3
 80066fe:	b29b      	uxth	r3, r3
 8006700:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006702:	f8b7 24dc 	ldrh.w	r2, [r7, #1244]	@ 0x4dc
 8006706:	4b54      	ldr	r3, [pc, #336]	@ (8006858 <frame_processing_rs422+0x538>)
 8006708:	fba3 2302 	umull	r2, r3, r3, r2
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	b29b      	uxth	r3, r3
 8006710:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006712:	f8b7 14dc 	ldrh.w	r1, [r7, #1244]	@ 0x4dc
 8006716:	4b50      	ldr	r3, [pc, #320]	@ (8006858 <frame_processing_rs422+0x538>)
 8006718:	fba3 2301 	umull	r2, r3, r3, r1
 800671c:	095a      	lsrs	r2, r3, #5
 800671e:	2364      	movs	r3, #100	@ 0x64
 8006720:	fb02 f303 	mul.w	r3, r2, r3
 8006724:	1acb      	subs	r3, r1, r3
 8006726:	b29b      	uxth	r3, r3
 8006728:	657b      	str	r3, [r7, #84]	@ 0x54
 800672a:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 800672e:	4b4a      	ldr	r3, [pc, #296]	@ (8006858 <frame_processing_rs422+0x538>)
 8006730:	fba3 2302 	umull	r2, r3, r3, r2
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	b29b      	uxth	r3, r3
 8006738:	653b      	str	r3, [r7, #80]	@ 0x50
 800673a:	f8b7 14da 	ldrh.w	r1, [r7, #1242]	@ 0x4da
 800673e:	4b46      	ldr	r3, [pc, #280]	@ (8006858 <frame_processing_rs422+0x538>)
 8006740:	fba3 2301 	umull	r2, r3, r3, r1
 8006744:	095a      	lsrs	r2, r3, #5
 8006746:	2364      	movs	r3, #100	@ 0x64
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	1acb      	subs	r3, r1, r3
 800674e:	b29b      	uxth	r3, r3
 8006750:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006752:	f8b7 24d8 	ldrh.w	r2, [r7, #1240]	@ 0x4d8
 8006756:	4b40      	ldr	r3, [pc, #256]	@ (8006858 <frame_processing_rs422+0x538>)
 8006758:	fba3 2302 	umull	r2, r3, r3, r2
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	b29b      	uxth	r3, r3
 8006760:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006762:	f8b7 14d8 	ldrh.w	r1, [r7, #1240]	@ 0x4d8
 8006766:	4b3c      	ldr	r3, [pc, #240]	@ (8006858 <frame_processing_rs422+0x538>)
 8006768:	fba3 2301 	umull	r2, r3, r3, r1
 800676c:	095a      	lsrs	r2, r3, #5
 800676e:	2364      	movs	r3, #100	@ 0x64
 8006770:	fb02 f303 	mul.w	r3, r2, r3
 8006774:	1acb      	subs	r3, r1, r3
 8006776:	b29b      	uxth	r3, r3
 8006778:	647b      	str	r3, [r7, #68]	@ 0x44
 800677a:	f8b7 24d6 	ldrh.w	r2, [r7, #1238]	@ 0x4d6
 800677e:	4b36      	ldr	r3, [pc, #216]	@ (8006858 <frame_processing_rs422+0x538>)
 8006780:	fba3 2302 	umull	r2, r3, r3, r2
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	b29b      	uxth	r3, r3
 8006788:	643b      	str	r3, [r7, #64]	@ 0x40
 800678a:	f8b7 14d6 	ldrh.w	r1, [r7, #1238]	@ 0x4d6
 800678e:	4b32      	ldr	r3, [pc, #200]	@ (8006858 <frame_processing_rs422+0x538>)
 8006790:	fba3 2301 	umull	r2, r3, r3, r1
 8006794:	095a      	lsrs	r2, r3, #5
 8006796:	2364      	movs	r3, #100	@ 0x64
 8006798:	fb02 f303 	mul.w	r3, r2, r3
 800679c:	1acb      	subs	r3, r1, r3
 800679e:	b29b      	uxth	r3, r3
 80067a0:	461d      	mov	r5, r3
 80067a2:	f8b7 24d4 	ldrh.w	r2, [r7, #1236]	@ 0x4d4
 80067a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006858 <frame_processing_rs422+0x538>)
 80067a8:	fba3 2302 	umull	r2, r3, r3, r2
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	461c      	mov	r4, r3
 80067b2:	f8b7 14d4 	ldrh.w	r1, [r7, #1236]	@ 0x4d4
 80067b6:	4b28      	ldr	r3, [pc, #160]	@ (8006858 <frame_processing_rs422+0x538>)
 80067b8:	fba3 2301 	umull	r2, r3, r3, r1
 80067bc:	095a      	lsrs	r2, r3, #5
 80067be:	2364      	movs	r3, #100	@ 0x64
 80067c0:	fb02 f303 	mul.w	r3, r2, r3
 80067c4:	1acb      	subs	r3, r1, r3
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 80067cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80067ce:	9418      	str	r4, [sp, #96]	@ 0x60
 80067d0:	9517      	str	r5, [sp, #92]	@ 0x5c
 80067d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067d4:	9216      	str	r2, [sp, #88]	@ 0x58
 80067d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067d8:	9215      	str	r2, [sp, #84]	@ 0x54
 80067da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80067de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067e0:	9213      	str	r2, [sp, #76]	@ 0x4c
 80067e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80067e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80067e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067e8:	9211      	str	r2, [sp, #68]	@ 0x44
 80067ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067ec:	9210      	str	r2, [sp, #64]	@ 0x40
 80067ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80067f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80067f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067f4:	920e      	str	r2, [sp, #56]	@ 0x38
 80067f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80067f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80067fa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80067fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80067fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006800:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006802:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006804:	920a      	str	r2, [sp, #40]	@ 0x28
 8006806:	9609      	str	r6, [sp, #36]	@ 0x24
 8006808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800680a:	9308      	str	r3, [sp, #32]
 800680c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006810:	9307      	str	r3, [sp, #28]
 8006812:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006814:	9306      	str	r3, [sp, #24]
 8006816:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006818:	9305      	str	r3, [sp, #20]
 800681a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800681e:	9304      	str	r3, [sp, #16]
 8006820:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006824:	9303      	str	r3, [sp, #12]
 8006826:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800682a:	9302      	str	r3, [sp, #8]
 800682c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	4663      	mov	r3, ip
 800683a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800683e:	4907      	ldr	r1, [pc, #28]	@ (800685c <frame_processing_rs422+0x53c>)
 8006840:	f006 ff10 	bl	800d664 <siprintf>
	    	        bat0 / 100, bat0 % 100, bat1 / 100, bat1 % 100,
	    	        bat2 / 100, bat2 % 100, bat3 / 100, bat3 % 100,
	    	        vin / 100, vin % 100, iin / 100, iin % 100,
	    	        vout / 100, vout % 100, iout / 100, iout % 100);
	    	Uart_sendstring(UART5, buffer_0x08);
 8006844:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8006848:	4619      	mov	r1, r3
 800684a:	4805      	ldr	r0, [pc, #20]	@ (8006860 <frame_processing_rs422+0x540>)
 800684c:	f7fb fb3e 	bl	8001ecc <Uart_sendstring>
	    }
	    break;
 8006850:	f000 bee5 	b.w	800761e <frame_processing_rs422+0x12fe>
 8006854:	08012ab8 	.word	0x08012ab8
 8006858:	51eb851f 	.word	0x51eb851f
 800685c:	08012abc 	.word	0x08012abc
 8006860:	40005000 	.word	0x40005000

		case 0x06:
		{

			Uart_sendstring(UART5, "\nPDU:\n");
 8006864:	49c9      	ldr	r1, [pc, #804]	@ (8006b8c <frame_processing_rs422+0x86c>)
 8006866:	48ca      	ldr	r0, [pc, #808]	@ (8006b90 <frame_processing_rs422+0x870>)
 8006868:	f7fb fb30 	bl	8001ecc <Uart_sendstring>
			uint8_t tec1buck_status = fsp_pkt->payload[1];
 800686c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006870:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	799b      	ldrb	r3, [r3, #6]
 8006878:	f887 34d3 	strb.w	r3, [r7, #1235]	@ 0x4d3
			uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 800687c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006880:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	79db      	ldrb	r3, [r3, #7]
 8006888:	021b      	lsls	r3, r3, #8
 800688a:	b21a      	sxth	r2, r3
 800688c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006890:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	7a1b      	ldrb	r3, [r3, #8]
 8006898:	b21b      	sxth	r3, r3
 800689a:	4313      	orrs	r3, r2
 800689c:	b21b      	sxth	r3, r3
 800689e:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0

			uint8_t tec2buck_status = fsp_pkt->payload[4];
 80068a2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80068a6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	7a5b      	ldrb	r3, [r3, #9]
 80068ae:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
			uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 80068b2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80068b6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	7a9b      	ldrb	r3, [r3, #10]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	b21a      	sxth	r2, r3
 80068c2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80068c6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	7adb      	ldrb	r3, [r3, #11]
 80068ce:	b21b      	sxth	r3, r3
 80068d0:	4313      	orrs	r3, r2
 80068d2:	b21b      	sxth	r3, r3
 80068d4:	f8a7 34cc 	strh.w	r3, [r7, #1228]	@ 0x4cc

			uint8_t tec3buck_status = fsp_pkt->payload[7];
 80068d8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80068dc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	7b1b      	ldrb	r3, [r3, #12]
 80068e4:	f887 34cb 	strb.w	r3, [r7, #1227]	@ 0x4cb
			uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 80068e8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80068ec:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	7b5b      	ldrb	r3, [r3, #13]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	b21a      	sxth	r2, r3
 80068f8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80068fc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	7b9b      	ldrb	r3, [r3, #14]
 8006904:	b21b      	sxth	r3, r3
 8006906:	4313      	orrs	r3, r2
 8006908:	b21b      	sxth	r3, r3
 800690a:	f8a7 34c8 	strh.w	r3, [r7, #1224]	@ 0x4c8

			uint8_t tec4buck_status = fsp_pkt->payload[10];
 800690e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006912:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	7bdb      	ldrb	r3, [r3, #15]
 800691a:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
			uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 800691e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006922:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	7c1b      	ldrb	r3, [r3, #16]
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	b21a      	sxth	r2, r3
 800692e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006932:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	7c5b      	ldrb	r3, [r3, #17]
 800693a:	b21b      	sxth	r3, r3
 800693c:	4313      	orrs	r3, r2
 800693e:	b21b      	sxth	r3, r3
 8006940:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4

			uint8_t mcubuck_status = fsp_pkt->payload[13];
 8006944:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006948:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	7c9b      	ldrb	r3, [r3, #18]
 8006950:	f887 34c3 	strb.w	r3, [r7, #1219]	@ 0x4c3
			uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 8006954:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006958:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	7cdb      	ldrb	r3, [r3, #19]
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	b21a      	sxth	r2, r3
 8006964:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006968:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	7d1b      	ldrb	r3, [r3, #20]
 8006970:	b21b      	sxth	r3, r3
 8006972:	4313      	orrs	r3, r2
 8006974:	b21b      	sxth	r3, r3
 8006976:	f8a7 34c0 	strh.w	r3, [r7, #1216]	@ 0x4c0

			uint8_t ledbuck_status = fsp_pkt->payload[16];
 800697a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800697e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	7d5b      	ldrb	r3, [r3, #21]
 8006986:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
			uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 800698a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800698e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	7d9b      	ldrb	r3, [r3, #22]
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	b21a      	sxth	r2, r3
 800699a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800699e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	7ddb      	ldrb	r3, [r3, #23]
 80069a6:	b21b      	sxth	r3, r3
 80069a8:	4313      	orrs	r3, r2
 80069aa:	b21b      	sxth	r3, r3
 80069ac:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc

			uint8_t cm4buck_status = fsp_pkt->payload[19];
 80069b0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80069b4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	7e1b      	ldrb	r3, [r3, #24]
 80069bc:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
			uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 80069c0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80069c4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	7e5b      	ldrb	r3, [r3, #25]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	b21a      	sxth	r2, r3
 80069d0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80069d4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	7e9b      	ldrb	r3, [r3, #26]
 80069dc:	b21b      	sxth	r3, r3
 80069de:	4313      	orrs	r3, r2
 80069e0:	b21b      	sxth	r3, r3
 80069e2:	f8a7 34b8 	strh.w	r3, [r7, #1208]	@ 0x4b8

			uint8_t tec1_status = fsp_pkt->payload[22];
 80069e6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80069ea:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	7edb      	ldrb	r3, [r3, #27]
 80069f2:	f887 34b7 	strb.w	r3, [r7, #1207]	@ 0x4b7
			uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 80069f6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80069fa:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	7f1b      	ldrb	r3, [r3, #28]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	b21a      	sxth	r2, r3
 8006a06:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006a0a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	7f5b      	ldrb	r3, [r3, #29]
 8006a12:	b21b      	sxth	r3, r3
 8006a14:	4313      	orrs	r3, r2
 8006a16:	b21b      	sxth	r3, r3
 8006a18:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4

			uint8_t tec2_status = fsp_pkt->payload[25];
 8006a1c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006a20:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	7f9b      	ldrb	r3, [r3, #30]
 8006a28:	f887 34b3 	strb.w	r3, [r7, #1203]	@ 0x4b3
			uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 8006a2c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006a30:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	7fdb      	ldrb	r3, [r3, #31]
 8006a38:	021b      	lsls	r3, r3, #8
 8006a3a:	b21a      	sxth	r2, r3
 8006a3c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006a40:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a4a:	b21b      	sxth	r3, r3
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	b21b      	sxth	r3, r3
 8006a50:	f8a7 34b0 	strh.w	r3, [r7, #1200]	@ 0x4b0

			uint8_t tec3_status = fsp_pkt->payload[28];
 8006a54:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006a58:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006a62:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
			uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 8006a66:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006a6a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	b21a      	sxth	r2, r3
 8006a78:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006a7c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006a86:	b21b      	sxth	r3, r3
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	b21b      	sxth	r3, r3
 8006a8c:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac

			uint8_t tec4_status = fsp_pkt->payload[31];
 8006a90:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006a94:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a9e:	f887 34ab 	strb.w	r3, [r7, #1195]	@ 0x4ab
			uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 8006aa2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006aa6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	b21a      	sxth	r2, r3
 8006ab4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ab8:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006ac2:	b21b      	sxth	r3, r3
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b21b      	sxth	r3, r3
 8006ac8:	f8a7 34a8 	strh.w	r3, [r7, #1192]	@ 0x4a8

			uint8_t copc_status = fsp_pkt->payload[34];
 8006acc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ad0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006ada:	f887 34a7 	strb.w	r3, [r7, #1191]	@ 0x4a7
			uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 8006ade:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ae2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	b21a      	sxth	r2, r3
 8006af0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006af4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8006afe:	b21b      	sxth	r3, r3
 8006b00:	4313      	orrs	r3, r2
 8006b02:	b21b      	sxth	r3, r3
 8006b04:	f8a7 34a4 	strh.w	r3, [r7, #1188]	@ 0x4a4

			uint8_t iou_status = fsp_pkt->payload[37];
 8006b08:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006b0c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8006b16:	f887 34a3 	strb.w	r3, [r7, #1187]	@ 0x4a3
			uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 8006b1a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006b1e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	b21a      	sxth	r2, r3
 8006b2c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006b30:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b3a:	b21b      	sxth	r3, r3
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	b21b      	sxth	r3, r3
 8006b40:	f8a7 34a0 	strh.w	r3, [r7, #1184]	@ 0x4a0

			uint8_t rgb_status = fsp_pkt->payload[40];
 8006b44:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006b48:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006b52:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
			uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 8006b56:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006b5a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	b21a      	sxth	r2, r3
 8006b68:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006b6c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006b76:	b21b      	sxth	r3, r3
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	b21b      	sxth	r3, r3
 8006b7c:	f8a7 349c 	strh.w	r3, [r7, #1180]	@ 0x49c

			uint8_t ir_status = fsp_pkt->payload[43];
 8006b80:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006b84:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	e003      	b.n	8006b94 <frame_processing_rs422+0x874>
 8006b8c:	08012bac 	.word	0x08012bac
 8006b90:	40005000 	.word	0x40005000
 8006b94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b98:	f887 349b 	strb.w	r3, [r7, #1179]	@ 0x49b
			uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 8006b9c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ba0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	b21a      	sxth	r2, r3
 8006bae:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006bb2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006bbc:	b21b      	sxth	r3, r3
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	b21b      	sxth	r3, r3
 8006bc2:	f8a7 3498 	strh.w	r3, [r7, #1176]	@ 0x498

			uint8_t cm4_status = fsp_pkt->payload[46];
 8006bc6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006bca:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006bd4:	f887 3497 	strb.w	r3, [r7, #1175]	@ 0x497
			uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 8006bd8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006bdc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	b21a      	sxth	r2, r3
 8006bea:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006bee:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bf8:	b21b      	sxth	r3, r3
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	b21b      	sxth	r3, r3
 8006bfe:	f8a7 3494 	strh.w	r3, [r7, #1172]	@ 0x494

			uint8_t vin_status = fsp_pkt->payload[49];
 8006c02:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006c06:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006c10:	f887 3493 	strb.w	r3, [r7, #1171]	@ 0x493
			uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 8006c14:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006c18:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	b21a      	sxth	r2, r3
 8006c26:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006c2a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c34:	b21b      	sxth	r3, r3
 8006c36:	4313      	orrs	r3, r2
 8006c38:	b21b      	sxth	r3, r3
 8006c3a:	f8a7 3490 	strh.w	r3, [r7, #1168]	@ 0x490

			uint8_t vbus_status = fsp_pkt->payload[52];
 8006c3e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006c42:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006c4c:	f887 348f 	strb.w	r3, [r7, #1167]	@ 0x48f
			uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 8006c50:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006c54:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	b21a      	sxth	r2, r3
 8006c62:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006c66:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006c70:	b21b      	sxth	r3, r3
 8006c72:	4313      	orrs	r3, r2
 8006c74:	b21b      	sxth	r3, r3
 8006c76:	f8a7 348c 	strh.w	r3, [r7, #1164]	@ 0x48c


		            char buffer_0x06[1000];
		            sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 8006c7a:	f897 e4d3 	ldrb.w	lr, [r7, #1235]	@ 0x4d3
 8006c7e:	f8b7 84d0 	ldrh.w	r8, [r7, #1232]	@ 0x4d0
 8006c82:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 8006c86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c8a:	f8b7 24cc 	ldrh.w	r2, [r7, #1228]	@ 0x4cc
 8006c8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c92:	f897 14cb 	ldrb.w	r1, [r7, #1227]	@ 0x4cb
 8006c96:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8006c9a:	f8b7 04c8 	ldrh.w	r0, [r7, #1224]	@ 0x4c8
 8006c9e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8006ca2:	f897 44c7 	ldrb.w	r4, [r7, #1223]	@ 0x4c7
 8006ca6:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8006caa:	f8b7 54c4 	ldrh.w	r5, [r7, #1220]	@ 0x4c4
 8006cae:	f8c7 5084 	str.w	r5, [r7, #132]	@ 0x84
 8006cb2:	f897 64c3 	ldrb.w	r6, [r7, #1219]	@ 0x4c3
 8006cb6:	f8c7 6080 	str.w	r6, [r7, #128]	@ 0x80
 8006cba:	f8b7 c4c0 	ldrh.w	ip, [r7, #1216]	@ 0x4c0
 8006cbe:	4663      	mov	r3, ip
 8006cc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cc2:	f897 c4bf 	ldrb.w	ip, [r7, #1215]	@ 0x4bf
 8006cc6:	4662      	mov	r2, ip
 8006cc8:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006cca:	f8b7 c4bc 	ldrh.w	ip, [r7, #1212]	@ 0x4bc
 8006cce:	4661      	mov	r1, ip
 8006cd0:	6779      	str	r1, [r7, #116]	@ 0x74
 8006cd2:	f897 c4bb 	ldrb.w	ip, [r7, #1211]	@ 0x4bb
 8006cd6:	4660      	mov	r0, ip
 8006cd8:	6738      	str	r0, [r7, #112]	@ 0x70
 8006cda:	f8b7 c4b8 	ldrh.w	ip, [r7, #1208]	@ 0x4b8
 8006cde:	4664      	mov	r4, ip
 8006ce0:	66fc      	str	r4, [r7, #108]	@ 0x6c
 8006ce2:	f897 c4b7 	ldrb.w	ip, [r7, #1207]	@ 0x4b7
 8006ce6:	4665      	mov	r5, ip
 8006ce8:	66bd      	str	r5, [r7, #104]	@ 0x68
 8006cea:	f8b7 c4b4 	ldrh.w	ip, [r7, #1204]	@ 0x4b4
 8006cee:	4666      	mov	r6, ip
 8006cf0:	667e      	str	r6, [r7, #100]	@ 0x64
 8006cf2:	f897 c4b3 	ldrb.w	ip, [r7, #1203]	@ 0x4b3
 8006cf6:	4663      	mov	r3, ip
 8006cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cfa:	f8b7 c4b0 	ldrh.w	ip, [r7, #1200]	@ 0x4b0
 8006cfe:	4662      	mov	r2, ip
 8006d00:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006d02:	f897 c4af 	ldrb.w	ip, [r7, #1199]	@ 0x4af
 8006d06:	4661      	mov	r1, ip
 8006d08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d0a:	f8b7 c4ac 	ldrh.w	ip, [r7, #1196]	@ 0x4ac
 8006d0e:	4660      	mov	r0, ip
 8006d10:	6578      	str	r0, [r7, #84]	@ 0x54
 8006d12:	f897 c4ab 	ldrb.w	ip, [r7, #1195]	@ 0x4ab
 8006d16:	4664      	mov	r4, ip
 8006d18:	653c      	str	r4, [r7, #80]	@ 0x50
 8006d1a:	f8b7 c4a8 	ldrh.w	ip, [r7, #1192]	@ 0x4a8
 8006d1e:	4665      	mov	r5, ip
 8006d20:	64fd      	str	r5, [r7, #76]	@ 0x4c
 8006d22:	f897 c4a7 	ldrb.w	ip, [r7, #1191]	@ 0x4a7
 8006d26:	4666      	mov	r6, ip
 8006d28:	64be      	str	r6, [r7, #72]	@ 0x48
 8006d2a:	f8b7 c4a4 	ldrh.w	ip, [r7, #1188]	@ 0x4a4
 8006d2e:	4663      	mov	r3, ip
 8006d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d32:	f897 c4a3 	ldrb.w	ip, [r7, #1187]	@ 0x4a3
 8006d36:	4662      	mov	r2, ip
 8006d38:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d3a:	f8b7 c4a0 	ldrh.w	ip, [r7, #1184]	@ 0x4a0
 8006d3e:	4661      	mov	r1, ip
 8006d40:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006d42:	f897 c49f 	ldrb.w	ip, [r7, #1183]	@ 0x49f
 8006d46:	4660      	mov	r0, ip
 8006d48:	63b8      	str	r0, [r7, #56]	@ 0x38
 8006d4a:	f8b7 c49c 	ldrh.w	ip, [r7, #1180]	@ 0x49c
 8006d4e:	4664      	mov	r4, ip
 8006d50:	637c      	str	r4, [r7, #52]	@ 0x34
 8006d52:	f897 c49b 	ldrb.w	ip, [r7, #1179]	@ 0x49b
 8006d56:	4665      	mov	r5, ip
 8006d58:	633d      	str	r5, [r7, #48]	@ 0x30
 8006d5a:	f8b7 6498 	ldrh.w	r6, [r7, #1176]	@ 0x498
 8006d5e:	f897 5497 	ldrb.w	r5, [r7, #1175]	@ 0x497
 8006d62:	f8b7 4494 	ldrh.w	r4, [r7, #1172]	@ 0x494
 8006d66:	f897 0493 	ldrb.w	r0, [r7, #1171]	@ 0x493
 8006d6a:	f8b7 1490 	ldrh.w	r1, [r7, #1168]	@ 0x490
 8006d6e:	f897 248f 	ldrb.w	r2, [r7, #1167]	@ 0x48f
 8006d72:	f8b7 348c 	ldrh.w	r3, [r7, #1164]	@ 0x48c
 8006d76:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 8006d7a:	9321      	str	r3, [sp, #132]	@ 0x84
 8006d7c:	9220      	str	r2, [sp, #128]	@ 0x80
 8006d7e:	911f      	str	r1, [sp, #124]	@ 0x7c
 8006d80:	901e      	str	r0, [sp, #120]	@ 0x78
 8006d82:	941d      	str	r4, [sp, #116]	@ 0x74
 8006d84:	951c      	str	r5, [sp, #112]	@ 0x70
 8006d86:	961b      	str	r6, [sp, #108]	@ 0x6c
 8006d88:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8006d8a:	951a      	str	r5, [sp, #104]	@ 0x68
 8006d8c:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8006d8e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d92:	9018      	str	r0, [sp, #96]	@ 0x60
 8006d94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d96:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006d98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d9a:	9216      	str	r2, [sp, #88]	@ 0x58
 8006d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006da0:	6cbe      	ldr	r6, [r7, #72]	@ 0x48
 8006da2:	9614      	str	r6, [sp, #80]	@ 0x50
 8006da4:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8006da6:	9513      	str	r5, [sp, #76]	@ 0x4c
 8006da8:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8006daa:	9412      	str	r4, [sp, #72]	@ 0x48
 8006dac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006dae:	9011      	str	r0, [sp, #68]	@ 0x44
 8006db0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006db2:	9110      	str	r1, [sp, #64]	@ 0x40
 8006db4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006db6:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006db8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dba:	930e      	str	r3, [sp, #56]	@ 0x38
 8006dbc:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 8006dbe:	960d      	str	r6, [sp, #52]	@ 0x34
 8006dc0:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 8006dc2:	950c      	str	r5, [sp, #48]	@ 0x30
 8006dc4:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8006dc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006dc8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8006dca:	900a      	str	r0, [sp, #40]	@ 0x28
 8006dcc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8006dce:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dd0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006dd2:	9208      	str	r2, [sp, #32]
 8006dd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006dd6:	9307      	str	r3, [sp, #28]
 8006dd8:	f8d7 6080 	ldr.w	r6, [r7, #128]	@ 0x80
 8006ddc:	9606      	str	r6, [sp, #24]
 8006dde:	f8d7 5084 	ldr.w	r5, [r7, #132]	@ 0x84
 8006de2:	9505      	str	r5, [sp, #20]
 8006de4:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 8006de8:	9404      	str	r4, [sp, #16]
 8006dea:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8006dee:	9003      	str	r0, [sp, #12]
 8006df0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006df4:	9102      	str	r1, [sp, #8]
 8006df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006dfa:	9201      	str	r2, [sp, #4]
 8006dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	4643      	mov	r3, r8
 8006e04:	4672      	mov	r2, lr
 8006e06:	49c3      	ldr	r1, [pc, #780]	@ (8007114 <frame_processing_rs422+0xdf4>)
 8006e08:	4660      	mov	r0, ip
 8006e0a:	f006 fc2b 	bl	800d664 <siprintf>
		                ir_status, ir_current,
		                cm4_status, cm4_current,
		                vin_status, vin_voltage,
		                vbus_status, vbus_voltage);

		            Uart_sendstring(UART5, buffer_0x06);
 8006e0e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8006e12:	4619      	mov	r1, r3
 8006e14:	48c0      	ldr	r0, [pc, #768]	@ (8007118 <frame_processing_rs422+0xdf8>)
 8006e16:	f7fb f859 	bl	8001ecc <Uart_sendstring>

		}
		break;
 8006e1a:	f000 bc00 	b.w	800761e <frame_processing_rs422+0x12fe>


		case 0x13:
		{
			Uart_sendstring(UART5, "\nIOU:\n");
 8006e1e:	49bf      	ldr	r1, [pc, #764]	@ (800711c <frame_processing_rs422+0xdfc>)
 8006e20:	48bd      	ldr	r0, [pc, #756]	@ (8007118 <frame_processing_rs422+0xdf8>)
 8006e22:	f7fb f853 	bl	8001ecc <Uart_sendstring>
			int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8006e26:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e2a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	799b      	ldrb	r3, [r3, #6]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	b21a      	sxth	r2, r3
 8006e36:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e3a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	79db      	ldrb	r3, [r3, #7]
 8006e42:	b21b      	sxth	r3, r3
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f8a7 350e 	strh.w	r3, [r7, #1294]	@ 0x50e
			int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8006e4a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e4e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	7a1b      	ldrb	r3, [r3, #8]
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	b21a      	sxth	r2, r3
 8006e5a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e5e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	7a5b      	ldrb	r3, [r3, #9]
 8006e66:	b21b      	sxth	r3, r3
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8a7 350c 	strh.w	r3, [r7, #1292]	@ 0x50c
			int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 8006e6e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e72:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	7a9b      	ldrb	r3, [r3, #10]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	b21a      	sxth	r2, r3
 8006e7e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e82:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	7adb      	ldrb	r3, [r3, #11]
 8006e8a:	b21b      	sxth	r3, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f8a7 350a 	strh.w	r3, [r7, #1290]	@ 0x50a
			int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 8006e92:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006e96:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	7b1b      	ldrb	r3, [r3, #12]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	b21a      	sxth	r2, r3
 8006ea2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ea6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	7b5b      	ldrb	r3, [r3, #13]
 8006eae:	b21b      	sxth	r3, r3
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f8a7 3508 	strh.w	r3, [r7, #1288]	@ 0x508

			int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 8006eb6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006eba:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	7b9b      	ldrb	r3, [r3, #14]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	b21a      	sxth	r2, r3
 8006ec6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006eca:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	7bdb      	ldrb	r3, [r3, #15]
 8006ed2:	b21b      	sxth	r3, r3
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8a7 3506 	strh.w	r3, [r7, #1286]	@ 0x506
			int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8006eda:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006ede:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	7c1b      	ldrb	r3, [r3, #16]
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	b21a      	sxth	r2, r3
 8006eea:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006eee:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	7c5b      	ldrb	r3, [r3, #17]
 8006ef6:	b21b      	sxth	r3, r3
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8a7 3504 	strh.w	r3, [r7, #1284]	@ 0x504

			int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 8006efe:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f02:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	7c9b      	ldrb	r3, [r3, #18]
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	b21a      	sxth	r2, r3
 8006f0e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f12:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	7cdb      	ldrb	r3, [r3, #19]
 8006f1a:	b21b      	sxth	r3, r3
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f8a7 3502 	strh.w	r3, [r7, #1282]	@ 0x502

			int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8006f22:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f26:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	7d1b      	ldrb	r3, [r3, #20]
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	b21a      	sxth	r2, r3
 8006f32:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f36:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	7d5b      	ldrb	r3, [r3, #21]
 8006f3e:	b21b      	sxth	r3, r3
 8006f40:	4313      	orrs	r3, r2
 8006f42:	f8a7 3500 	strh.w	r3, [r7, #1280]	@ 0x500
			int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 8006f46:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f4a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	7d9b      	ldrb	r3, [r3, #22]
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	b21a      	sxth	r2, r3
 8006f56:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f5a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	7ddb      	ldrb	r3, [r3, #23]
 8006f62:	b21b      	sxth	r3, r3
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8a7 34fe 	strh.w	r3, [r7, #1278]	@ 0x4fe
			int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 8006f6a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f6e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	7e1b      	ldrb	r3, [r3, #24]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	b21a      	sxth	r2, r3
 8006f7a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f7e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	7e5b      	ldrb	r3, [r3, #25]
 8006f86:	b21b      	sxth	r3, r3
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f8a7 34fc 	strh.w	r3, [r7, #1276]	@ 0x4fc
			int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 8006f8e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006f92:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	7e9b      	ldrb	r3, [r3, #26]
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	b21a      	sxth	r2, r3
 8006f9e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006fa2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	7edb      	ldrb	r3, [r3, #27]
 8006faa:	b21b      	sxth	r3, r3
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f8a7 34fa 	strh.w	r3, [r7, #1274]	@ 0x4fa

			uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 8006fb2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006fb6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	7f1b      	ldrb	r3, [r3, #28]
 8006fbe:	021b      	lsls	r3, r3, #8
 8006fc0:	b21a      	sxth	r2, r3
 8006fc2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006fc6:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	7f5b      	ldrb	r3, [r3, #29]
 8006fce:	b21b      	sxth	r3, r3
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	b21b      	sxth	r3, r3
 8006fd4:	f8a7 34f8 	strh.w	r3, [r7, #1272]	@ 0x4f8
			uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 8006fd8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006fdc:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	7f9b      	ldrb	r3, [r3, #30]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	b21a      	sxth	r2, r3
 8006fe8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8006fec:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	7fdb      	ldrb	r3, [r3, #31]
 8006ff4:	b21b      	sxth	r3, r3
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	b21b      	sxth	r3, r3
 8006ffa:	f8a7 34f6 	strh.w	r3, [r7, #1270]	@ 0x4f6
			uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 8006ffe:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007002:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	b21a      	sxth	r2, r3
 8007010:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007014:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800701e:	b21b      	sxth	r3, r3
 8007020:	4313      	orrs	r3, r2
 8007022:	b21b      	sxth	r3, r3
 8007024:	f8a7 34f4 	strh.w	r3, [r7, #1268]	@ 0x4f4
			uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 8007028:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800702c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	b21a      	sxth	r2, r3
 800703a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800703e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007048:	b21b      	sxth	r3, r3
 800704a:	4313      	orrs	r3, r2
 800704c:	b21b      	sxth	r3, r3
 800704e:	f8a7 34f2 	strh.w	r3, [r7, #1266]	@ 0x4f2

			uint8_t neo_led_r = fsp_pkt->payload[31];
 8007052:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007056:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007060:	f887 34f1 	strb.w	r3, [r7, #1265]	@ 0x4f1
			uint8_t neo_led_g = fsp_pkt->payload[32];
 8007064:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8007068:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007072:	f887 34f0 	strb.w	r3, [r7, #1264]	@ 0x4f0
			uint8_t neo_led_b = fsp_pkt->payload[33];
 8007076:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800707a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8007084:	f887 34ef 	strb.w	r3, [r7, #1263]	@ 0x4ef
			uint8_t neo_led_w = fsp_pkt->payload[34];
 8007088:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800708c:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007096:	f887 34ee 	strb.w	r3, [r7, #1262]	@ 0x4ee

			uint8_t ir_led_duty = fsp_pkt->payload[35];
 800709a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800709e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070a8:	f887 34ed 	strb.w	r3, [r7, #1261]	@ 0x4ed

			char buffer_0x13[1000];
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80070ac:	f9b7 350e 	ldrsh.w	r3, [r7, #1294]	@ 0x50e
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da03      	bge.n	80070bc <frame_processing_rs422+0xd9c>
 80070b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007120 <frame_processing_rs422+0xe00>)
 80070b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070ba:	e002      	b.n	80070c2 <frame_processing_rs422+0xda2>
 80070bc:	4b19      	ldr	r3, [pc, #100]	@ (8007124 <frame_processing_rs422+0xe04>)
 80070be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			                     "Sensor Temp: %s%d.%d\n"
			                     "Setpoint Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
			                     "TEC Voltage: Ch0=%d.%02d, Ch1=%d.%02d, Ch2=%d.%02d, Ch3=%d.%02d\n"
			                     "Neo LED: R=%u, G=%u, B=%u, W=%u\n"
			                     "IR LED Duty: %u%%]\n",
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 80070c2:	f9b7 350e 	ldrsh.w	r3, [r7, #1294]	@ 0x50e
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfb8      	it	lt
 80070ca:	425b      	neglt	r3, r3
 80070cc:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80070ce:	4a16      	ldr	r2, [pc, #88]	@ (8007128 <frame_processing_rs422+0xe08>)
 80070d0:	fb82 1203 	smull	r1, r2, r2, r3
 80070d4:	1092      	asrs	r2, r2, #2
 80070d6:	17db      	asrs	r3, r3, #31
 80070d8:	eba2 0e03 	sub.w	lr, r2, r3
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 80070dc:	f9b7 350e 	ldrsh.w	r3, [r7, #1294]	@ 0x50e
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bfb8      	it	lt
 80070e4:	425b      	neglt	r3, r3
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80070ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007128 <frame_processing_rs422+0xe08>)
 80070ec:	fb83 1302 	smull	r1, r3, r3, r2
 80070f0:	1099      	asrs	r1, r3, #2
 80070f2:	17d3      	asrs	r3, r2, #31
 80070f4:	1acb      	subs	r3, r1, r3
 80070f6:	4619      	mov	r1, r3
 80070f8:	460b      	mov	r3, r1
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	440b      	add	r3, r1
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007104:	f9b7 350c 	ldrsh.w	r3, [r7, #1292]	@ 0x50c
 8007108:	2b00      	cmp	r3, #0
 800710a:	da0f      	bge.n	800712c <frame_processing_rs422+0xe0c>
 800710c:	4b04      	ldr	r3, [pc, #16]	@ (8007120 <frame_processing_rs422+0xe00>)
 800710e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007112:	e00e      	b.n	8007132 <frame_processing_rs422+0xe12>
 8007114:	08012bb4 	.word	0x08012bb4
 8007118:	40005000 	.word	0x40005000
 800711c:	08012dfc 	.word	0x08012dfc
 8007120:	08012ab4 	.word	0x08012ab4
 8007124:	08012ab8 	.word	0x08012ab8
 8007128:	66666667 	.word	0x66666667
 800712c:	4baf      	ldr	r3, [pc, #700]	@ (80073ec <frame_processing_rs422+0x10cc>)
 800712e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 8007132:	f9b7 350c 	ldrsh.w	r3, [r7, #1292]	@ 0x50c
 8007136:	2b00      	cmp	r3, #0
 8007138:	bfb8      	it	lt
 800713a:	425b      	neglt	r3, r3
 800713c:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800713e:	4aac      	ldr	r2, [pc, #688]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 8007140:	fb82 1203 	smull	r1, r2, r2, r3
 8007144:	1092      	asrs	r2, r2, #2
 8007146:	17db      	asrs	r3, r3, #31
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	66bb      	str	r3, [r7, #104]	@ 0x68
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800714c:	f9b7 350c 	ldrsh.w	r3, [r7, #1292]	@ 0x50c
 8007150:	2b00      	cmp	r3, #0
 8007152:	bfb8      	it	lt
 8007154:	425b      	neglt	r3, r3
 8007156:	b29b      	uxth	r3, r3
 8007158:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800715a:	4ba5      	ldr	r3, [pc, #660]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 800715c:	fb83 1302 	smull	r1, r3, r3, r2
 8007160:	1099      	asrs	r1, r3, #2
 8007162:	17d3      	asrs	r3, r2, #31
 8007164:	1acb      	subs	r3, r1, r3
 8007166:	4619      	mov	r1, r3
 8007168:	460b      	mov	r3, r1
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	667b      	str	r3, [r7, #100]	@ 0x64
 8007174:	f9b7 350a 	ldrsh.w	r3, [r7, #1290]	@ 0x50a
 8007178:	2b00      	cmp	r3, #0
 800717a:	da03      	bge.n	8007184 <frame_processing_rs422+0xe64>
 800717c:	4b9d      	ldr	r3, [pc, #628]	@ (80073f4 <frame_processing_rs422+0x10d4>)
 800717e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007182:	e002      	b.n	800718a <frame_processing_rs422+0xe6a>
 8007184:	4b99      	ldr	r3, [pc, #612]	@ (80073ec <frame_processing_rs422+0x10cc>)
 8007186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800718a:	f9b7 350a 	ldrsh.w	r3, [r7, #1290]	@ 0x50a
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb8      	it	lt
 8007192:	425b      	neglt	r3, r3
 8007194:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007196:	4a96      	ldr	r2, [pc, #600]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 8007198:	fb82 1203 	smull	r1, r2, r2, r3
 800719c:	1092      	asrs	r2, r2, #2
 800719e:	17db      	asrs	r3, r3, #31
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	663b      	str	r3, [r7, #96]	@ 0x60
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 80071a4:	f9b7 350a 	ldrsh.w	r3, [r7, #1290]	@ 0x50a
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	bfb8      	it	lt
 80071ac:	425b      	neglt	r3, r3
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80071b2:	4b8f      	ldr	r3, [pc, #572]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 80071b4:	fb83 1302 	smull	r1, r3, r3, r2
 80071b8:	1099      	asrs	r1, r3, #2
 80071ba:	17d3      	asrs	r3, r2, #31
 80071bc:	1acb      	subs	r3, r1, r3
 80071be:	4619      	mov	r1, r3
 80071c0:	460b      	mov	r3, r1
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	440b      	add	r3, r1
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071cc:	f9b7 3508 	ldrsh.w	r3, [r7, #1288]	@ 0x508
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da03      	bge.n	80071dc <frame_processing_rs422+0xebc>
 80071d4:	4b87      	ldr	r3, [pc, #540]	@ (80073f4 <frame_processing_rs422+0x10d4>)
 80071d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80071da:	e002      	b.n	80071e2 <frame_processing_rs422+0xec2>
 80071dc:	4b83      	ldr	r3, [pc, #524]	@ (80073ec <frame_processing_rs422+0x10cc>)
 80071de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 80071e2:	f9b7 3508 	ldrsh.w	r3, [r7, #1288]	@ 0x508
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bfb8      	it	lt
 80071ea:	425b      	neglt	r3, r3
 80071ec:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80071ee:	4a80      	ldr	r2, [pc, #512]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 80071f0:	fb82 1203 	smull	r1, r2, r2, r3
 80071f4:	1092      	asrs	r2, r2, #2
 80071f6:	17db      	asrs	r3, r3, #31
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	65bb      	str	r3, [r7, #88]	@ 0x58
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 80071fc:	f9b7 3508 	ldrsh.w	r3, [r7, #1288]	@ 0x508
 8007200:	2b00      	cmp	r3, #0
 8007202:	bfb8      	it	lt
 8007204:	425b      	neglt	r3, r3
 8007206:	b29b      	uxth	r3, r3
 8007208:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800720a:	4b79      	ldr	r3, [pc, #484]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 800720c:	fb83 2301 	smull	r2, r3, r3, r1
 8007210:	109a      	asrs	r2, r3, #2
 8007212:	17cb      	asrs	r3, r1, #31
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	461a      	mov	r2, r3
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	1acb      	subs	r3, r1, r3
 8007222:	657b      	str	r3, [r7, #84]	@ 0x54
 8007224:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	@ 0x506
 8007228:	2b00      	cmp	r3, #0
 800722a:	da03      	bge.n	8007234 <frame_processing_rs422+0xf14>
 800722c:	4b71      	ldr	r3, [pc, #452]	@ (80073f4 <frame_processing_rs422+0x10d4>)
 800722e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007232:	e002      	b.n	800723a <frame_processing_rs422+0xf1a>
 8007234:	4b6d      	ldr	r3, [pc, #436]	@ (80073ec <frame_processing_rs422+0x10cc>)
 8007236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800723a:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	@ 0x506
 800723e:	2b00      	cmp	r3, #0
 8007240:	bfb8      	it	lt
 8007242:	425b      	neglt	r3, r3
 8007244:	b29b      	uxth	r3, r3
 8007246:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007248:	4b69      	ldr	r3, [pc, #420]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 800724a:	fb83 2301 	smull	r2, r3, r3, r1
 800724e:	109a      	asrs	r2, r3, #2
 8007250:	17cb      	asrs	r3, r1, #31
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	653b      	str	r3, [r7, #80]	@ 0x50
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 8007256:	f9b7 3506 	ldrsh.w	r3, [r7, #1286]	@ 0x506
 800725a:	2b00      	cmp	r3, #0
 800725c:	bfb8      	it	lt
 800725e:	425b      	neglt	r3, r3
 8007260:	b29b      	uxth	r3, r3
 8007262:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007264:	4b62      	ldr	r3, [pc, #392]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 8007266:	fb83 2301 	smull	r2, r3, r3, r1
 800726a:	109a      	asrs	r2, r3, #2
 800726c:	17cb      	asrs	r3, r1, #31
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	461a      	mov	r2, r3
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	1acb      	subs	r3, r1, r3
 800727c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800727e:	f9b7 3504 	ldrsh.w	r3, [r7, #1284]	@ 0x504
 8007282:	2b00      	cmp	r3, #0
 8007284:	da03      	bge.n	800728e <frame_processing_rs422+0xf6e>
 8007286:	4b5b      	ldr	r3, [pc, #364]	@ (80073f4 <frame_processing_rs422+0x10d4>)
 8007288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800728c:	e002      	b.n	8007294 <frame_processing_rs422+0xf74>
 800728e:	4b57      	ldr	r3, [pc, #348]	@ (80073ec <frame_processing_rs422+0x10cc>)
 8007290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 8007294:	f9b7 3504 	ldrsh.w	r3, [r7, #1284]	@ 0x504
 8007298:	2b00      	cmp	r3, #0
 800729a:	bfb8      	it	lt
 800729c:	425b      	neglt	r3, r3
 800729e:	b29b      	uxth	r3, r3
 80072a0:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80072a2:	4b53      	ldr	r3, [pc, #332]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 80072a4:	fb83 2301 	smull	r2, r3, r3, r1
 80072a8:	109a      	asrs	r2, r3, #2
 80072aa:	17cb      	asrs	r3, r1, #31
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	64bb      	str	r3, [r7, #72]	@ 0x48
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 80072b0:	f9b7 3504 	ldrsh.w	r3, [r7, #1284]	@ 0x504
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bfb8      	it	lt
 80072b8:	425b      	neglt	r3, r3
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80072be:	4b4c      	ldr	r3, [pc, #304]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 80072c0:	fb83 2301 	smull	r2, r3, r3, r1
 80072c4:	109a      	asrs	r2, r3, #2
 80072c6:	17cb      	asrs	r3, r1, #31
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	1acb      	subs	r3, r1, r3
 80072d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80072d8:	f9b7 3502 	ldrsh.w	r3, [r7, #1282]	@ 0x502
 80072dc:	2b00      	cmp	r3, #0
 80072de:	da03      	bge.n	80072e8 <frame_processing_rs422+0xfc8>
 80072e0:	4b44      	ldr	r3, [pc, #272]	@ (80073f4 <frame_processing_rs422+0x10d4>)
 80072e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072e6:	e002      	b.n	80072ee <frame_processing_rs422+0xfce>
 80072e8:	4b40      	ldr	r3, [pc, #256]	@ (80073ec <frame_processing_rs422+0x10cc>)
 80072ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 80072ee:	f9b7 3502 	ldrsh.w	r3, [r7, #1282]	@ 0x502
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bfb8      	it	lt
 80072f6:	425b      	neglt	r3, r3
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80072fc:	4b3c      	ldr	r3, [pc, #240]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 80072fe:	fb83 2301 	smull	r2, r3, r3, r1
 8007302:	109a      	asrs	r2, r3, #2
 8007304:	17cb      	asrs	r3, r1, #31
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	643b      	str	r3, [r7, #64]	@ 0x40
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800730a:	f9b7 3502 	ldrsh.w	r3, [r7, #1282]	@ 0x502
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfb8      	it	lt
 8007312:	425b      	neglt	r3, r3
 8007314:	b29b      	uxth	r3, r3
 8007316:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007318:	4b35      	ldr	r3, [pc, #212]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 800731a:	fb83 2301 	smull	r2, r3, r3, r1
 800731e:	109a      	asrs	r2, r3, #2
 8007320:	17cb      	asrs	r3, r1, #31
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	461a      	mov	r2, r3
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	1acb      	subs	r3, r1, r3
 8007330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007332:	f9b7 3500 	ldrsh.w	r3, [r7, #1280]	@ 0x500
 8007336:	2b00      	cmp	r3, #0
 8007338:	da02      	bge.n	8007340 <frame_processing_rs422+0x1020>
 800733a:	4b2e      	ldr	r3, [pc, #184]	@ (80073f4 <frame_processing_rs422+0x10d4>)
 800733c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800733e:	e001      	b.n	8007344 <frame_processing_rs422+0x1024>
 8007340:	4b2a      	ldr	r3, [pc, #168]	@ (80073ec <frame_processing_rs422+0x10cc>)
 8007342:	67fb      	str	r3, [r7, #124]	@ 0x7c
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 8007344:	f9b7 3500 	ldrsh.w	r3, [r7, #1280]	@ 0x500
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfb8      	it	lt
 800734c:	425b      	neglt	r3, r3
 800734e:	b29b      	uxth	r3, r3
 8007350:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007352:	4b27      	ldr	r3, [pc, #156]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 8007354:	fb83 2301 	smull	r2, r3, r3, r1
 8007358:	109a      	asrs	r2, r3, #2
 800735a:	17cb      	asrs	r3, r1, #31
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	63bb      	str	r3, [r7, #56]	@ 0x38
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 8007360:	f9b7 3500 	ldrsh.w	r3, [r7, #1280]	@ 0x500
 8007364:	2b00      	cmp	r3, #0
 8007366:	bfb8      	it	lt
 8007368:	425b      	neglt	r3, r3
 800736a:	b29b      	uxth	r3, r3
 800736c:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800736e:	4b20      	ldr	r3, [pc, #128]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 8007370:	fb83 2301 	smull	r2, r3, r3, r1
 8007374:	109a      	asrs	r2, r3, #2
 8007376:	17cb      	asrs	r3, r1, #31
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	461a      	mov	r2, r3
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	1acb      	subs	r3, r1, r3
 8007386:	637b      	str	r3, [r7, #52]	@ 0x34
 8007388:	f9b7 34fe 	ldrsh.w	r3, [r7, #1278]	@ 0x4fe
 800738c:	2b00      	cmp	r3, #0
 800738e:	da02      	bge.n	8007396 <frame_processing_rs422+0x1076>
 8007390:	4b18      	ldr	r3, [pc, #96]	@ (80073f4 <frame_processing_rs422+0x10d4>)
 8007392:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007394:	e001      	b.n	800739a <frame_processing_rs422+0x107a>
 8007396:	4b15      	ldr	r3, [pc, #84]	@ (80073ec <frame_processing_rs422+0x10cc>)
 8007398:	67bb      	str	r3, [r7, #120]	@ 0x78
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800739a:	f9b7 34fe 	ldrsh.w	r3, [r7, #1278]	@ 0x4fe
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfb8      	it	lt
 80073a2:	425b      	neglt	r3, r3
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80073a8:	4b11      	ldr	r3, [pc, #68]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 80073aa:	fb83 2301 	smull	r2, r3, r3, r1
 80073ae:	109a      	asrs	r2, r3, #2
 80073b0:	17cb      	asrs	r3, r1, #31
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	633b      	str	r3, [r7, #48]	@ 0x30
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 80073b6:	f9b7 34fe 	ldrsh.w	r3, [r7, #1278]	@ 0x4fe
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bfb8      	it	lt
 80073be:	425b      	neglt	r3, r3
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80073c4:	4b0a      	ldr	r3, [pc, #40]	@ (80073f0 <frame_processing_rs422+0x10d0>)
 80073c6:	fb83 2301 	smull	r2, r3, r3, r1
 80073ca:	109a      	asrs	r2, r3, #2
 80073cc:	17cb      	asrs	r3, r1, #31
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	4613      	mov	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	1acb      	subs	r3, r1, r3
 80073dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073de:	f9b7 34fc 	ldrsh.w	r3, [r7, #1276]	@ 0x4fc
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	da08      	bge.n	80073f8 <frame_processing_rs422+0x10d8>
 80073e6:	4b03      	ldr	r3, [pc, #12]	@ (80073f4 <frame_processing_rs422+0x10d4>)
 80073e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80073ea:	e007      	b.n	80073fc <frame_processing_rs422+0x10dc>
 80073ec:	08012ab8 	.word	0x08012ab8
 80073f0:	66666667 	.word	0x66666667
 80073f4:	08012ab4 	.word	0x08012ab4
 80073f8:	4b8c      	ldr	r3, [pc, #560]	@ (800762c <frame_processing_rs422+0x130c>)
 80073fa:	677b      	str	r3, [r7, #116]	@ 0x74
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 80073fc:	f9b7 34fc 	ldrsh.w	r3, [r7, #1276]	@ 0x4fc
 8007400:	2b00      	cmp	r3, #0
 8007402:	bfb8      	it	lt
 8007404:	425b      	neglt	r3, r3
 8007406:	b29b      	uxth	r3, r3
 8007408:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800740a:	4b89      	ldr	r3, [pc, #548]	@ (8007630 <frame_processing_rs422+0x1310>)
 800740c:	fb83 2301 	smull	r2, r3, r3, r1
 8007410:	109a      	asrs	r2, r3, #2
 8007412:	17cb      	asrs	r3, r1, #31
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	62bb      	str	r3, [r7, #40]	@ 0x28
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 8007418:	f9b7 34fc 	ldrsh.w	r3, [r7, #1276]	@ 0x4fc
 800741c:	2b00      	cmp	r3, #0
 800741e:	bfb8      	it	lt
 8007420:	425b      	neglt	r3, r3
 8007422:	b29b      	uxth	r3, r3
 8007424:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007426:	4b82      	ldr	r3, [pc, #520]	@ (8007630 <frame_processing_rs422+0x1310>)
 8007428:	fb83 2301 	smull	r2, r3, r3, r1
 800742c:	109a      	asrs	r2, r3, #2
 800742e:	17cb      	asrs	r3, r1, #31
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	461a      	mov	r2, r3
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	1acb      	subs	r3, r1, r3
 800743e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007440:	f9b7 34fa 	ldrsh.w	r3, [r7, #1274]	@ 0x4fa
 8007444:	2b00      	cmp	r3, #0
 8007446:	da02      	bge.n	800744e <frame_processing_rs422+0x112e>
 8007448:	4b7a      	ldr	r3, [pc, #488]	@ (8007634 <frame_processing_rs422+0x1314>)
 800744a:	673b      	str	r3, [r7, #112]	@ 0x70
 800744c:	e001      	b.n	8007452 <frame_processing_rs422+0x1132>
 800744e:	4b77      	ldr	r3, [pc, #476]	@ (800762c <frame_processing_rs422+0x130c>)
 8007450:	673b      	str	r3, [r7, #112]	@ 0x70
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 8007452:	f9b7 34fa 	ldrsh.w	r3, [r7, #1274]	@ 0x4fa
 8007456:	2b00      	cmp	r3, #0
 8007458:	bfb8      	it	lt
 800745a:	425b      	neglt	r3, r3
 800745c:	b29b      	uxth	r3, r3
 800745e:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8007460:	4b73      	ldr	r3, [pc, #460]	@ (8007630 <frame_processing_rs422+0x1310>)
 8007462:	fb83 2301 	smull	r2, r3, r3, r1
 8007466:	109a      	asrs	r2, r3, #2
 8007468:	17cb      	asrs	r3, r1, #31
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	623b      	str	r3, [r7, #32]
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800746e:	f9b7 34fa 	ldrsh.w	r3, [r7, #1274]	@ 0x4fa
 8007472:	2b00      	cmp	r3, #0
 8007474:	bfb8      	it	lt
 8007476:	425b      	neglt	r3, r3
 8007478:	b29b      	uxth	r3, r3
 800747a:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800747c:	4b6c      	ldr	r3, [pc, #432]	@ (8007630 <frame_processing_rs422+0x1310>)
 800747e:	fb83 2301 	smull	r2, r3, r3, r1
 8007482:	109a      	asrs	r2, r3, #2
 8007484:	17cb      	asrs	r3, r1, #31
 8007486:	1ad6      	subs	r6, r2, r3
 8007488:	4633      	mov	r3, r6
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4433      	add	r3, r6
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	1ace      	subs	r6, r1, r3
 8007492:	f8b7 24f8 	ldrh.w	r2, [r7, #1272]	@ 0x4f8
 8007496:	4b68      	ldr	r3, [pc, #416]	@ (8007638 <frame_processing_rs422+0x1318>)
 8007498:	fba3 2302 	umull	r2, r3, r3, r2
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	b29b      	uxth	r3, r3
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	f8b7 14f8 	ldrh.w	r1, [r7, #1272]	@ 0x4f8
 80074a6:	4b64      	ldr	r3, [pc, #400]	@ (8007638 <frame_processing_rs422+0x1318>)
 80074a8:	fba3 2301 	umull	r2, r3, r3, r1
 80074ac:	095a      	lsrs	r2, r3, #5
 80074ae:	2364      	movs	r3, #100	@ 0x64
 80074b0:	fb02 f303 	mul.w	r3, r2, r3
 80074b4:	1acb      	subs	r3, r1, r3
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	f8b7 24f6 	ldrh.w	r2, [r7, #1270]	@ 0x4f6
 80074be:	4b5e      	ldr	r3, [pc, #376]	@ (8007638 <frame_processing_rs422+0x1318>)
 80074c0:	fba3 2302 	umull	r2, r3, r3, r2
 80074c4:	095b      	lsrs	r3, r3, #5
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	f8b7 14f6 	ldrh.w	r1, [r7, #1270]	@ 0x4f6
 80074ce:	4b5a      	ldr	r3, [pc, #360]	@ (8007638 <frame_processing_rs422+0x1318>)
 80074d0:	fba3 2301 	umull	r2, r3, r3, r1
 80074d4:	095a      	lsrs	r2, r3, #5
 80074d6:	2364      	movs	r3, #100	@ 0x64
 80074d8:	fb02 f303 	mul.w	r3, r2, r3
 80074dc:	1acb      	subs	r3, r1, r3
 80074de:	b29b      	uxth	r3, r3
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	@ 0x4f4
 80074e6:	4b54      	ldr	r3, [pc, #336]	@ (8007638 <frame_processing_rs422+0x1318>)
 80074e8:	fba3 2302 	umull	r2, r3, r3, r2
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	f8b7 14f4 	ldrh.w	r1, [r7, #1268]	@ 0x4f4
 80074f6:	4b50      	ldr	r3, [pc, #320]	@ (8007638 <frame_processing_rs422+0x1318>)
 80074f8:	fba3 2301 	umull	r2, r3, r3, r1
 80074fc:	095a      	lsrs	r2, r3, #5
 80074fe:	2364      	movs	r3, #100	@ 0x64
 8007500:	fb02 f303 	mul.w	r3, r2, r3
 8007504:	1acb      	subs	r3, r1, r3
 8007506:	b29b      	uxth	r3, r3
 8007508:	60bb      	str	r3, [r7, #8]
 800750a:	f8b7 24f2 	ldrh.w	r2, [r7, #1266]	@ 0x4f2
 800750e:	4b4a      	ldr	r3, [pc, #296]	@ (8007638 <frame_processing_rs422+0x1318>)
 8007510:	fba3 2302 	umull	r2, r3, r3, r2
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	b29b      	uxth	r3, r3
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	f8b7 14f2 	ldrh.w	r1, [r7, #1266]	@ 0x4f2
 800751e:	4b46      	ldr	r3, [pc, #280]	@ (8007638 <frame_processing_rs422+0x1318>)
 8007520:	fba3 2301 	umull	r2, r3, r3, r1
 8007524:	095a      	lsrs	r2, r3, #5
 8007526:	2364      	movs	r3, #100	@ 0x64
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	1acb      	subs	r3, r1, r3
 800752e:	b29b      	uxth	r3, r3
 8007530:	461d      	mov	r5, r3
 8007532:	f897 44f1 	ldrb.w	r4, [r7, #1265]	@ 0x4f1
 8007536:	f897 04f0 	ldrb.w	r0, [r7, #1264]	@ 0x4f0
 800753a:	f897 14ef 	ldrb.w	r1, [r7, #1263]	@ 0x4ef
 800753e:	f897 24ee 	ldrb.w	r2, [r7, #1262]	@ 0x4ee
 8007542:	f897 34ed 	ldrb.w	r3, [r7, #1261]	@ 0x4ed
 8007546:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 800754a:	932b      	str	r3, [sp, #172]	@ 0xac
 800754c:	922a      	str	r2, [sp, #168]	@ 0xa8
 800754e:	9129      	str	r1, [sp, #164]	@ 0xa4
 8007550:	9028      	str	r0, [sp, #160]	@ 0xa0
 8007552:	9427      	str	r4, [sp, #156]	@ 0x9c
 8007554:	9526      	str	r5, [sp, #152]	@ 0x98
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	9225      	str	r2, [sp, #148]	@ 0x94
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	9224      	str	r2, [sp, #144]	@ 0x90
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	9222      	str	r2, [sp, #136]	@ 0x88
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	9221      	str	r2, [sp, #132]	@ 0x84
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	9220      	str	r2, [sp, #128]	@ 0x80
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	921f      	str	r2, [sp, #124]	@ 0x7c
 8007572:	961e      	str	r6, [sp, #120]	@ 0x78
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	931d      	str	r3, [sp, #116]	@ 0x74
 8007578:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800757a:	931c      	str	r3, [sp, #112]	@ 0x70
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007582:	931a      	str	r3, [sp, #104]	@ 0x68
 8007584:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007586:	9319      	str	r3, [sp, #100]	@ 0x64
 8007588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758a:	9318      	str	r3, [sp, #96]	@ 0x60
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8007590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007592:	9316      	str	r3, [sp, #88]	@ 0x58
 8007594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007596:	9315      	str	r3, [sp, #84]	@ 0x54
 8007598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759a:	9314      	str	r3, [sp, #80]	@ 0x50
 800759c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800759e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a2:	9312      	str	r3, [sp, #72]	@ 0x48
 80075a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075a6:	9311      	str	r3, [sp, #68]	@ 0x44
 80075a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80075ac:	9310      	str	r3, [sp, #64]	@ 0x40
 80075ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80075b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80075bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075be:	930c      	str	r3, [sp, #48]	@ 0x30
 80075c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80075ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075d0:	9308      	str	r3, [sp, #32]
 80075d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075d6:	9307      	str	r3, [sp, #28]
 80075d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075da:	9306      	str	r3, [sp, #24]
 80075dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075de:	9305      	str	r3, [sp, #20]
 80075e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075e4:	9304      	str	r3, [sp, #16]
 80075e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075e8:	9303      	str	r3, [sp, #12]
 80075ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075ec:	9302      	str	r3, [sp, #8]
 80075ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	4673      	mov	r3, lr
 80075fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80075fe:	490f      	ldr	r1, [pc, #60]	@ (800763c <frame_processing_rs422+0x131c>)
 8007600:	4660      	mov	r0, ip
 8007602:	f006 f82f 	bl	800d664 <siprintf>
			        voltage_out_tec_channel2 / 100, voltage_out_tec_channel2 % 100,
			        voltage_out_tec_channel3 / 100, voltage_out_tec_channel3 % 100,
			        neo_led_r, neo_led_g, neo_led_b, neo_led_w,
			        ir_led_duty);

			Uart_sendstring(UART5, buffer_0x13);
 8007606:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800760a:	4619      	mov	r1, r3
 800760c:	480c      	ldr	r0, [pc, #48]	@ (8007640 <frame_processing_rs422+0x1320>)
 800760e:	f7fa fc5d 	bl	8001ecc <Uart_sendstring>



		}
		break;
 8007612:	e004      	b.n	800761e <frame_processing_rs422+0x12fe>


		default:
			Uart_sendstring(UART5, "Failed to get all");
 8007614:	490b      	ldr	r1, [pc, #44]	@ (8007644 <frame_processing_rs422+0x1324>)
 8007616:	480a      	ldr	r0, [pc, #40]	@ (8007640 <frame_processing_rs422+0x1320>)
 8007618:	f7fa fc58 	bl	8001ecc <Uart_sendstring>
			break;
 800761c:	bf00      	nop
	}

}
 800761e:	bf00      	nop
 8007620:	f507 67a2 	add.w	r7, r7, #1296	@ 0x510
 8007624:	46bd      	mov	sp, r7
 8007626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800762a:	bf00      	nop
 800762c:	08012ab8 	.word	0x08012ab8
 8007630:	66666667 	.word	0x66666667
 8007634:	08012ab4 	.word	0x08012ab4
 8007638:	51eb851f 	.word	0x51eb851f
 800763c:	08012e04 	.word	0x08012e04
 8007640:	40005000 	.word	0x40005000
 8007644:	08012f4c 	.word	0x08012f4c

08007648 <rs422_create_task>:

void	rs422_create_task(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&RS422_task_context.taskHandle, &RS422_task_context.taskProperty);
 800764c:	4903      	ldr	r1, [pc, #12]	@ (800765c <rs422_create_task+0x14>)
 800764e:	4804      	ldr	r0, [pc, #16]	@ (8007660 <rs422_create_task+0x18>)
 8007650:	f002 f97a 	bl	8009948 <SCH_TASK_CreateTask>
	Ringbuf_init();
 8007654:	f7fa f9d2 	bl	80019fc <Ringbuf_init>
}
 8007658:	bf00      	nop
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20000344 	.word	0x20000344
 8007660:	20000340 	.word	0x20000340

08007664 <COPC_init>:
		COPC_task_update                // taskFunction;
	}
};

void	COPC_init(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8007668:	f7fa f9c8 	bl	80019fc <Ringbuf_init>
	fsp_init(FSP_ADR_CPOC);
 800766c:	2001      	movs	r0, #1
 800766e:	f002 faed 	bl	8009c4c <fsp_init>
	s_pCOPC_Sfp_Payload = (COPC_Sfp_Payload_t *)(&s_COPC_FspPacket.payload);
 8007672:	4b02      	ldr	r3, [pc, #8]	@ (800767c <COPC_init+0x18>)
 8007674:	4a02      	ldr	r2, [pc, #8]	@ (8007680 <COPC_init+0x1c>)
 8007676:	601a      	str	r2, [r3, #0]
}
 8007678:	bf00      	nop
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20004a34 	.word	0x20004a34
 8007680:	20004939 	.word	0x20004939

08007684 <COPC_task_update>:
volatile uint8_t receiving = 0;
volatile uint8_t receive_buffer[FSP_PKT_MAX_LENGTH];
volatile uint8_t receive_index = 0;

static void COPC_task_update(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b0d0      	sub	sp, #320	@ 0x140
 8007688:	af00      	add	r7, sp, #0
	uint8_t rxData;


    while (IsDataAvailable(USART1))
 800768a:	e04f      	b.n	800772c <COPC_task_update+0xa8>
    {
        rxData = Uart_read(USART1);
 800768c:	482d      	ldr	r0, [pc, #180]	@ (8007744 <COPC_task_update+0xc0>)
 800768e:	f7fa fa73 	bl	8001b78 <Uart_read>
 8007692:	4603      	mov	r3, r0
 8007694:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

//		char pos_str2[10];
//		sprintf(pos_str2, "%d", rxData);
//		Uart_sendstring(UART5, pos_str2);

        if (!receiving) {
 8007698:	4b2b      	ldr	r3, [pc, #172]	@ (8007748 <COPC_task_update+0xc4>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <COPC_task_update+0x34>
            if (rxData == FSP_PKT_SOD) {
 80076a2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80076a6:	2bca      	cmp	r3, #202	@ 0xca
 80076a8:	d140      	bne.n	800772c <COPC_task_update+0xa8>
                receiving = 1;
 80076aa:	4b27      	ldr	r3, [pc, #156]	@ (8007748 <COPC_task_update+0xc4>)
 80076ac:	2201      	movs	r2, #1
 80076ae:	701a      	strb	r2, [r3, #0]
                receive_index = 0;
 80076b0:	4b26      	ldr	r3, [pc, #152]	@ (800774c <COPC_task_update+0xc8>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	e039      	b.n	800772c <COPC_task_update+0xa8>
            }
        } else {

            if (rxData == FSP_PKT_EOF) {
 80076b8:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80076bc:	2bef      	cmp	r3, #239	@ 0xef
 80076be:	d121      	bne.n	8007704 <COPC_task_update+0x80>
                receiving = 0;
 80076c0:	4b21      	ldr	r3, [pc, #132]	@ (8007748 <COPC_task_update+0xc4>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	701a      	strb	r2, [r3, #0]
                fsp_packet_t fsp_pkt;
                int ret = frame_decode((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 80076c6:	4b21      	ldr	r3, [pc, #132]	@ (800774c <COPC_task_update+0xc8>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80076d0:	4619      	mov	r1, r3
 80076d2:	481f      	ldr	r0, [pc, #124]	@ (8007750 <COPC_task_update+0xcc>)
 80076d4:	f002 fd82 	bl	800a1dc <frame_decode>
 80076d8:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138

                if (ret > 0) {
 80076dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dd1b      	ble.n	800771c <COPC_task_update+0x98>
                    char error_msg[50];
                    sprintf(error_msg, "Error: %s\r\n", decode_error_msgs[ret]);
 80076e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007754 <COPC_task_update+0xd0>)
 80076e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80076ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076ee:	1d3b      	adds	r3, r7, #4
 80076f0:	4919      	ldr	r1, [pc, #100]	@ (8007758 <COPC_task_update+0xd4>)
 80076f2:	4618      	mov	r0, r3
 80076f4:	f005 ffb6 	bl	800d664 <siprintf>
                    Uart_sendstring(UART5, error_msg);
 80076f8:	1d3b      	adds	r3, r7, #4
 80076fa:	4619      	mov	r1, r3
 80076fc:	4817      	ldr	r0, [pc, #92]	@ (800775c <COPC_task_update+0xd8>)
 80076fe:	f7fa fbe5 	bl	8001ecc <Uart_sendstring>
 8007702:	e00b      	b.n	800771c <COPC_task_update+0x98>
                }


            }else{
            	receive_buffer[receive_index++] = rxData;
 8007704:	4b11      	ldr	r3, [pc, #68]	@ (800774c <COPC_task_update+0xc8>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	b2d1      	uxtb	r1, r2
 800770e:	4a0f      	ldr	r2, [pc, #60]	@ (800774c <COPC_task_update+0xc8>)
 8007710:	7011      	strb	r1, [r2, #0]
 8007712:	4619      	mov	r1, r3
 8007714:	4a0e      	ldr	r2, [pc, #56]	@ (8007750 <COPC_task_update+0xcc>)
 8007716:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800771a:	5453      	strb	r3, [r2, r1]
            }

            if (receive_index >= FSP_PKT_MAX_LENGTH) {
 800771c:	4b0b      	ldr	r3, [pc, #44]	@ (800774c <COPC_task_update+0xc8>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2bff      	cmp	r3, #255	@ 0xff
 8007724:	d102      	bne.n	800772c <COPC_task_update+0xa8>
                // Frame quá dài, reset lại

                receiving = 0;
 8007726:	4b08      	ldr	r3, [pc, #32]	@ (8007748 <COPC_task_update+0xc4>)
 8007728:	2200      	movs	r2, #0
 800772a:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART1))
 800772c:	4805      	ldr	r0, [pc, #20]	@ (8007744 <COPC_task_update+0xc0>)
 800772e:	f7fa fb87 	bl	8001e40 <IsDataAvailable>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1a9      	bne.n	800768c <COPC_task_update+0x8>
            }
    }
}

}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	40011000 	.word	0x40011000
 8007748:	20004a38 	.word	0x20004a38
 800774c:	20004b3b 	.word	0x20004b3b
 8007750:	20004a3c 	.word	0x20004a3c
 8007754:	20000374 	.word	0x20000374
 8007758:	08012fec 	.word	0x08012fec
 800775c:	40005000 	.word	0x40005000

08007760 <COPC_create_task>:
void	COPC_create_task(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
	COPC_init();
 8007764:	f7ff ff7e 	bl	8007664 <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
 8007768:	4902      	ldr	r1, [pc, #8]	@ (8007774 <COPC_create_task+0x14>)
 800776a:	4803      	ldr	r0, [pc, #12]	@ (8007778 <COPC_create_task+0x18>)
 800776c:	f002 f8ec 	bl	8009948 <SCH_TASK_CreateTask>
}
 8007770:	bf00      	nop
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20000394 	.word	0x20000394
 8007778:	20000390 	.word	0x20000390

0800777c <LL_GPIO_SetOutputPin>:
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	619a      	str	r2, [r3, #24]
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <LL_GPIO_ResetOutputPin>:
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	041a      	lsls	r2, r3, #16
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	619a      	str	r2, [r3, #24]
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
	...

080077b8 <status_led_init>:
{
	s_led_display_status.state = status;
}

void status_led_init(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
    // Initialize LED status variable
    s_led_display_status.led = 0;
 80077bc:	4a06      	ldr	r2, [pc, #24]	@ (80077d8 <status_led_init+0x20>)
 80077be:	7813      	ldrb	r3, [r2, #0]
 80077c0:	f36f 0300 	bfc	r3, #0, #1
 80077c4:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 80077c6:	4a04      	ldr	r2, [pc, #16]	@ (80077d8 <status_led_init+0x20>)
 80077c8:	7813      	ldrb	r3, [r2, #0]
 80077ca:	f36f 0347 	bfc	r3, #1, #7
 80077ce:	7013      	strb	r3, [r2, #0]

    // Turn off LED initially
    status_led_off();
 80077d0:	f000 f804 	bl	80077dc <status_led_off>
}
 80077d4:	bf00      	nop
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20004b3c 	.word	0x20004b3c

080077dc <status_led_off>:

static void status_led_off(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 80077e0:	2120      	movs	r1, #32
 80077e2:	4802      	ldr	r0, [pc, #8]	@ (80077ec <status_led_off+0x10>)
 80077e4:	f7ff ffd8 	bl	8007798 <LL_GPIO_ResetOutputPin>
}
 80077e8:	bf00      	nop
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	40020800 	.word	0x40020800

080077f0 <status_led_on>:

static void status_led_on(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 80077f4:	2120      	movs	r1, #32
 80077f6:	4802      	ldr	r0, [pc, #8]	@ (8007800 <status_led_on+0x10>)
 80077f8:	f7ff ffc0 	bl	800777c <LL_GPIO_SetOutputPin>
}
 80077fc:	bf00      	nop
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40020800 	.word	0x40020800

08007804 <status_led_update>:

void	status_led_update(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
	switch (s_led_display_status.state) {
 8007808:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <status_led_update+0x3c>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b03      	cmp	r3, #3
 8007814:	d811      	bhi.n	800783a <status_led_update+0x36>
 8007816:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <status_led_update+0x18>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	0800782d 	.word	0x0800782d
 8007820:	08007833 	.word	0x08007833
 8007824:	08007839 	.word	0x08007839
 8007828:	08007839 	.word	0x08007839
	case POWERUP:
		status_led_powerup();
 800782c:	f000 f80a 	bl	8007844 <status_led_powerup>
		break;
 8007830:	e003      	b.n	800783a <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 8007832:	f000 f841 	bl	80078b8 <status_led_normal>
		break;
 8007836:	e000      	b.n	800783a <status_led_update+0x36>
	case POWERING_SUB:
		break;
 8007838:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20004b3c 	.word	0x20004b3c

08007844 <status_led_powerup>:

static void status_led_powerup(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 8007848:	4b1a      	ldr	r3, [pc, #104]	@ (80078b4 <status_led_powerup+0x70>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d012      	beq.n	800787c <status_led_powerup+0x38>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8007856:	2000      	movs	r0, #0
 8007858:	f002 f860 	bl	800991c <SCH_TIM_HasCompleted>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d025      	beq.n	80078ae <status_led_powerup+0x6a>
        {
            s_led_display_status.led = 0;
 8007862:	4a14      	ldr	r2, [pc, #80]	@ (80078b4 <status_led_powerup+0x70>)
 8007864:	7813      	ldrb	r3, [r2, #0]
 8007866:	f36f 0300 	bfc	r3, #0, #1
 800786a:	7013      	strb	r3, [r2, #0]
//            char buffered[100];
//            sprintf(buffered, "PMU_INT: %d, PDU_INT: %d, IOU_INT: %d, CAM_INT: %d\r\n",
//                    pmu_int_value, pdu_int_value, iou_int_value, cam_int_value);
//            Uart_sendstring(USART6, buffered);

            status_led_off();
 800786c:	f7ff ffb6 	bl	80077dc <status_led_off>
//            command_send_splash();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8007870:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007874:	2000      	movs	r0, #0
 8007876:	f002 f83b 	bl	80098f0 <SCH_TIM_Start>
            s_led_display_status.led = 1;
            status_led_on();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
        }
    }
}
 800787a:	e018      	b.n	80078ae <status_led_powerup+0x6a>
    else if (s_led_display_status.led == 0) // LED is OFF
 800787c:	4b0d      	ldr	r3, [pc, #52]	@ (80078b4 <status_led_powerup+0x70>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d111      	bne.n	80078ae <status_led_powerup+0x6a>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 800788a:	2000      	movs	r0, #0
 800788c:	f002 f846 	bl	800991c <SCH_TIM_HasCompleted>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00b      	beq.n	80078ae <status_led_powerup+0x6a>
            s_led_display_status.led = 1;
 8007896:	4a07      	ldr	r2, [pc, #28]	@ (80078b4 <status_led_powerup+0x70>)
 8007898:	7813      	ldrb	r3, [r2, #0]
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	7013      	strb	r3, [r2, #0]
            status_led_on();
 80078a0:	f7ff ffa6 	bl	80077f0 <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 80078a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80078a8:	2000      	movs	r0, #0
 80078aa:	f002 f821 	bl	80098f0 <SCH_TIM_Start>
}
 80078ae:	bf00      	nop
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20004b3c 	.word	0x20004b3c

080078b8 <status_led_normal>:
//}
//


static void status_led_normal(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
//			s_led_display_status.led = 1;
//			status_led_on();
//			SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_ON_PERIOD);	//restart
//		}
//	}
}
 80078bc:	bf00      	nop
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
	...

080078c8 <status_led_create_task>:

void	status_led_create_task(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 80078cc:	4902      	ldr	r1, [pc, #8]	@ (80078d8 <status_led_create_task+0x10>)
 80078ce:	4803      	ldr	r0, [pc, #12]	@ (80078dc <status_led_create_task+0x14>)
 80078d0:	f002 f83a 	bl	8009948 <SCH_TASK_CreateTask>
}
 80078d4:	bf00      	nop
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	200003a4 	.word	0x200003a4
 80078dc:	200003a0 	.word	0x200003a0

080078e0 <__NVIC_SetPriorityGrouping>:
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007924 <__NVIC_SetPriorityGrouping+0x44>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80078fc:	4013      	ands	r3, r2
 80078fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800790c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007912:	4a04      	ldr	r2, [pc, #16]	@ (8007924 <__NVIC_SetPriorityGrouping+0x44>)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	60d3      	str	r3, [r2, #12]
}
 8007918:	bf00      	nop
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	e000ed00 	.word	0xe000ed00

08007928 <__NVIC_GetPriorityGrouping>:
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800792c:	4b04      	ldr	r3, [pc, #16]	@ (8007940 <__NVIC_GetPriorityGrouping+0x18>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	0a1b      	lsrs	r3, r3, #8
 8007932:	f003 0307 	and.w	r3, r3, #7
}
 8007936:	4618      	mov	r0, r3
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	e000ed00 	.word	0xe000ed00

08007944 <__NVIC_EnableIRQ>:
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800794e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007952:	2b00      	cmp	r3, #0
 8007954:	db0b      	blt.n	800796e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	f003 021f 	and.w	r2, r3, #31
 800795c:	4907      	ldr	r1, [pc, #28]	@ (800797c <__NVIC_EnableIRQ+0x38>)
 800795e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	2001      	movs	r0, #1
 8007966:	fa00 f202 	lsl.w	r2, r0, r2
 800796a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	e000e100 	.word	0xe000e100

08007980 <__NVIC_SetPriority>:
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	6039      	str	r1, [r7, #0]
 800798a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800798c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007990:	2b00      	cmp	r3, #0
 8007992:	db0a      	blt.n	80079aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	b2da      	uxtb	r2, r3
 8007998:	490c      	ldr	r1, [pc, #48]	@ (80079cc <__NVIC_SetPriority+0x4c>)
 800799a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800799e:	0112      	lsls	r2, r2, #4
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	440b      	add	r3, r1
 80079a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80079a8:	e00a      	b.n	80079c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	4908      	ldr	r1, [pc, #32]	@ (80079d0 <__NVIC_SetPriority+0x50>)
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	3b04      	subs	r3, #4
 80079b8:	0112      	lsls	r2, r2, #4
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	440b      	add	r3, r1
 80079be:	761a      	strb	r2, [r3, #24]
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	e000e100 	.word	0xe000e100
 80079d0:	e000ed00 	.word	0xe000ed00

080079d4 <NVIC_EncodePriority>:
{
 80079d4:	b480      	push	{r7}
 80079d6:	b089      	sub	sp, #36	@ 0x24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f1c3 0307 	rsb	r3, r3, #7
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	bf28      	it	cs
 80079f2:	2304      	movcs	r3, #4
 80079f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	3304      	adds	r3, #4
 80079fa:	2b06      	cmp	r3, #6
 80079fc:	d902      	bls.n	8007a04 <NVIC_EncodePriority+0x30>
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	3b03      	subs	r3, #3
 8007a02:	e000      	b.n	8007a06 <NVIC_EncodePriority+0x32>
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a08:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	43da      	mvns	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	401a      	ands	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	fa01 f303 	lsl.w	r3, r1, r3
 8007a26:	43d9      	mvns	r1, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a2c:	4313      	orrs	r3, r2
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3724      	adds	r7, #36	@ 0x24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <LL_I2C_EnableClockStretching>:
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <LL_I2C_DisableGeneralCall>:
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	601a      	str	r2, [r3, #0]
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <LL_I2C_SetOwnAddress2>:
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60da      	str	r2, [r3, #12]
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <LL_I2C_DisableOwnAddress2>:
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f023 0201 	bic.w	r2, r3, #1
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	60da      	str	r2, [r3, #12]
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007ac4:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <LL_RCC_HSE_Enable+0x1c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a04      	ldr	r2, [pc, #16]	@ (8007adc <LL_RCC_HSE_Enable+0x1c>)
 8007aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ace:	6013      	str	r3, [r2, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40023800 	.word	0x40023800

08007ae0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8007ae4:	4b07      	ldr	r3, [pc, #28]	@ (8007b04 <LL_RCC_HSE_IsReady+0x24>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007af0:	bf0c      	ite	eq
 8007af2:	2301      	moveq	r3, #1
 8007af4:	2300      	movne	r3, #0
 8007af6:	b2db      	uxtb	r3, r3
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	40023800 	.word	0x40023800

08007b08 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007b10:	4b06      	ldr	r3, [pc, #24]	@ (8007b2c <LL_RCC_SetSysClkSource+0x24>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f023 0203 	bic.w	r2, r3, #3
 8007b18:	4904      	ldr	r1, [pc, #16]	@ (8007b2c <LL_RCC_SetSysClkSource+0x24>)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	608b      	str	r3, [r1, #8]
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40023800 	.word	0x40023800

08007b30 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007b34:	4b04      	ldr	r3, [pc, #16]	@ (8007b48 <LL_RCC_GetSysClkSource+0x18>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 030c 	and.w	r3, r3, #12
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	40023800 	.word	0x40023800

08007b4c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007b54:	4b06      	ldr	r3, [pc, #24]	@ (8007b70 <LL_RCC_SetAHBPrescaler+0x24>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b5c:	4904      	ldr	r1, [pc, #16]	@ (8007b70 <LL_RCC_SetAHBPrescaler+0x24>)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	608b      	str	r3, [r1, #8]
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	40023800 	.word	0x40023800

08007b74 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007b7c:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <LL_RCC_SetAPB1Prescaler+0x24>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b84:	4904      	ldr	r1, [pc, #16]	@ (8007b98 <LL_RCC_SetAPB1Prescaler+0x24>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	608b      	str	r3, [r1, #8]
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	40023800 	.word	0x40023800

08007b9c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007ba4:	4b06      	ldr	r3, [pc, #24]	@ (8007bc0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007bac:	4904      	ldr	r1, [pc, #16]	@ (8007bc0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	608b      	str	r3, [r1, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	40023800 	.word	0x40023800

08007bc4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007bc8:	4b05      	ldr	r3, [pc, #20]	@ (8007be0 <LL_RCC_PLL_Enable+0x1c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a04      	ldr	r2, [pc, #16]	@ (8007be0 <LL_RCC_PLL_Enable+0x1c>)
 8007bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bd2:	6013      	str	r3, [r2, #0]
}
 8007bd4:	bf00      	nop
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	40023800 	.word	0x40023800

08007be4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007be4:	b480      	push	{r7}
 8007be6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8007be8:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <LL_RCC_PLL_IsReady+0x24>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bf4:	bf0c      	ite	eq
 8007bf6:	2301      	moveq	r3, #1
 8007bf8:	2300      	movne	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	40023800 	.word	0x40023800

08007c0c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c50 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c54 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	68f9      	ldr	r1, [r7, #12]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	4311      	orrs	r1, r2
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	0192      	lsls	r2, r2, #6
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	4908      	ldr	r1, [pc, #32]	@ (8007c50 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8007c34:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c3c:	4904      	ldr	r1, [pc, #16]	@ (8007c50 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8007c44:	bf00      	nop
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	40023800 	.word	0x40023800
 8007c54:	ffbf8000 	.word	0xffbf8000

08007c58 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007c60:	4b08      	ldr	r3, [pc, #32]	@ (8007c84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c64:	4907      	ldr	r1, [pc, #28]	@ (8007c84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007c6c:	4b05      	ldr	r3, [pc, #20]	@ (8007c84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4013      	ands	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c76:	68fb      	ldr	r3, [r7, #12]
}
 8007c78:	bf00      	nop
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	40023800 	.word	0x40023800

08007c88 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8007c90:	4b08      	ldr	r3, [pc, #32]	@ (8007cb4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c94:	4907      	ldr	r1, [pc, #28]	@ (8007cb4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007c9c:	4b05      	ldr	r3, [pc, #20]	@ (8007cb4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
}
 8007ca8:	bf00      	nop
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	40023800 	.word	0x40023800

08007cb8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007cc0:	4b08      	ldr	r3, [pc, #32]	@ (8007ce4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007cc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cc4:	4907      	ldr	r1, [pc, #28]	@ (8007ce4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007ccc:	4b05      	ldr	r3, [pc, #20]	@ (8007ce4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007cce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	40023800 	.word	0x40023800

08007ce8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8007cf0:	4b06      	ldr	r3, [pc, #24]	@ (8007d0c <LL_FLASH_SetLatency+0x24>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f023 0207 	bic.w	r2, r3, #7
 8007cf8:	4904      	ldr	r1, [pc, #16]	@ (8007d0c <LL_FLASH_SetLatency+0x24>)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	600b      	str	r3, [r1, #0]
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	40023c00 	.word	0x40023c00

08007d10 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8007d14:	4b04      	ldr	r3, [pc, #16]	@ (8007d28 <LL_FLASH_GetLatency+0x18>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0307 	and.w	r3, r3, #7
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40023c00 	.word	0x40023c00

08007d2c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8007d34:	4b06      	ldr	r3, [pc, #24]	@ (8007d50 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007d3c:	4904      	ldr	r1, [pc, #16]	@ (8007d50 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	600b      	str	r3, [r1, #0]
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	40007000 	.word	0x40007000

08007d54 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8007d58:	4b07      	ldr	r3, [pc, #28]	@ (8007d78 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d64:	bf0c      	ite	eq
 8007d66:	2301      	moveq	r3, #1
 8007d68:	2300      	movne	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40007000 	.word	0x40007000

08007d7c <LL_USART_Enable>:
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <LL_USART_ConfigAsyncMode>:
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	615a      	str	r2, [r3, #20]
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <LL_GPIO_ResetOutputPin>:
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	041a      	lsls	r2, r3, #16
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	619a      	str	r2, [r3, #24]
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
	...

08007de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8007dec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007df0:	f7ff ff62 	bl	8007cb8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8007df4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8007df8:	f7ff ff46 	bl	8007c88 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007dfc:	2003      	movs	r0, #3
 8007dfe:	f7ff fd6f 	bl	80078e0 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8007e02:	f7ff fd91 	bl	8007928 <__NVIC_GetPriorityGrouping>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2200      	movs	r2, #0
 8007e0a:	210f      	movs	r1, #15
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff fde1 	bl	80079d4 <NVIC_EncodePriority>
 8007e12:	4603      	mov	r3, r0
 8007e14:	4619      	mov	r1, r3
 8007e16:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1a:	f7ff fdb1 	bl	8007980 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e1e:	f000 f837 	bl	8007e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e22:	f000 fba3 	bl	800856c <MX_GPIO_Init>
  MX_I2C1_Init();
 8007e26:	f000 f87d 	bl	8007f24 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8007e2a:	f000 fb3f 	bl	80084ac <MX_USART6_UART_Init>
  MX_UART5_Init();
 8007e2e:	f000 f9a3 	bl	8008178 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8007e32:	f000 fa19 	bl	8008268 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8007e36:	f000 f93d 	bl	80080b4 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8007e3a:	f000 fad5 	bl	80083e8 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 8007e3e:	f000 f8c9 	bl	8007fd4 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8007e42:	f000 fa71 	bl	8008328 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  command_init();
 8007e46:	f7fd fa65 	bl	8005314 <command_init>

  fsp_init(FSP_ADR_CPOC);
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	f001 fefe 	bl	8009c4c <fsp_init>
  LL_GPIO_ResetOutputPin(GPIOC, ENABLE_MUX_Pin);
 8007e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007e54:	480d      	ldr	r0, [pc, #52]	@ (8007e8c <main+0xa4>)
 8007e56:	f7ff ffb7 	bl	8007dc8 <LL_GPIO_ResetOutputPin>

  status_led_init();
 8007e5a:	f7ff fcad 	bl	80077b8 <status_led_init>



  WDT_init();
 8007e5e:	f000 fd87 	bl	8008970 <WDT_init>

  SCH_Initialize();
 8007e62:	f001 fd1b 	bl	800989c <SCH_Initialize>

  status_led_create_task();
 8007e66:	f7ff fd2f 	bl	80078c8 <status_led_create_task>

  send_packet_init();
 8007e6a:	f7fa f933 	bl	80020d4 <send_packet_init>
  send_packet_create_task();
 8007e6e:	f7fa f98f 	bl	8002190 <send_packet_create_task>


  command_create_task();
 8007e72:	f7fd ffbb 	bl	8005dec <command_create_task>

  COPC_create_task();
 8007e76:	f7ff fc73 	bl	8007760 <COPC_create_task>

  WDT_create_task();
 8007e7a:	f000 fd85 	bl	8008988 <WDT_create_task>

  rs422_create_task();
 8007e7e:	f7ff fbe3 	bl	8007648 <rs422_create_task>

  SCH_StartSchedular();
 8007e82:	f001 fe33 	bl	8009aec <SCH_StartSchedular>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 8007e86:	f001 fe37 	bl	8009af8 <SCH_HandleScheduledTask>
 8007e8a:	e7fc      	b.n	8007e86 <main+0x9e>
 8007e8c:	40020800 	.word	0x40020800

08007e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8007e94:	2001      	movs	r0, #1
 8007e96:	f7ff ff27 	bl	8007ce8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8007e9a:	bf00      	nop
 8007e9c:	f7ff ff38 	bl	8007d10 <LL_FLASH_GetLatency>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d1fa      	bne.n	8007e9c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8007ea6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007eaa:	f7ff ff3f 	bl	8007d2c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8007eae:	f7ff fe07 	bl	8007ac0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8007eb2:	bf00      	nop
 8007eb4:	f7ff fe14 	bl	8007ae0 <LL_RCC_HSE_IsReady>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d1fa      	bne.n	8007eb4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 192, LL_RCC_PLLP_DIV_4);
 8007ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007ec2:	22c0      	movs	r2, #192	@ 0xc0
 8007ec4:	2104      	movs	r1, #4
 8007ec6:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8007eca:	f7ff fe9f 	bl	8007c0c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8007ece:	f7ff fe79 	bl	8007bc4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8007ed2:	bf00      	nop
 8007ed4:	f7ff fe86 	bl	8007be4 <LL_RCC_PLL_IsReady>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d1fa      	bne.n	8007ed4 <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8007ede:	bf00      	nop
 8007ee0:	f7ff ff38 	bl	8007d54 <LL_PWR_IsActiveFlag_VOS>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0fa      	beq.n	8007ee0 <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8007eea:	2080      	movs	r0, #128	@ 0x80
 8007eec:	f7ff fe2e 	bl	8007b4c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8007ef0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007ef4:	f7ff fe3e 	bl	8007b74 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8007ef8:	2000      	movs	r0, #0
 8007efa:	f7ff fe4f 	bl	8007b9c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8007efe:	2002      	movs	r0, #2
 8007f00:	f7ff fe02 	bl	8007b08 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007f04:	bf00      	nop
 8007f06:	f7ff fe13 	bl	8007b30 <LL_RCC_GetSysClkSource>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d1fa      	bne.n	8007f06 <SystemClock_Config+0x76>
  {

  }
  LL_Init1msTick(48000000);
 8007f10:	4803      	ldr	r0, [pc, #12]	@ (8007f20 <SystemClock_Config+0x90>)
 8007f12:	f001 fca5 	bl	8009860 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8007f16:	4802      	ldr	r0, [pc, #8]	@ (8007f20 <SystemClock_Config+0x90>)
 8007f18:	f001 fcb0 	bl	800987c <LL_SetSystemCoreClock>
}
 8007f1c:	bf00      	nop
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	02dc6c00 	.word	0x02dc6c00

08007f24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08c      	sub	sp, #48	@ 0x30
 8007f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8007f2a:	f107 0318 	add.w	r3, r7, #24
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	605a      	str	r2, [r3, #4]
 8007f34:	609a      	str	r2, [r3, #8]
 8007f36:	60da      	str	r2, [r3, #12]
 8007f38:	611a      	str	r2, [r3, #16]
 8007f3a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f3c:	463b      	mov	r3, r7
 8007f3e:	2200      	movs	r2, #0
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	605a      	str	r2, [r3, #4]
 8007f44:	609a      	str	r2, [r3, #8]
 8007f46:	60da      	str	r2, [r3, #12]
 8007f48:	611a      	str	r2, [r3, #16]
 8007f4a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8007f4c:	2002      	movs	r0, #2
 8007f4e:	f7ff fe83 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8007f52:	23c0      	movs	r3, #192	@ 0xc0
 8007f54:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007f56:	2302      	movs	r3, #2
 8007f58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f62:	2300      	movs	r3, #0
 8007f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8007f66:	2304      	movs	r3, #4
 8007f68:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4816      	ldr	r0, [pc, #88]	@ (8007fc8 <MX_I2C1_Init+0xa4>)
 8007f70:	f000 fe91 	bl	8008c96 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8007f74:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007f78:	f7ff fe86 	bl	8007c88 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8007f7c:	4813      	ldr	r0, [pc, #76]	@ (8007fcc <MX_I2C1_Init+0xa8>)
 8007f7e:	f7ff fd8f 	bl	8007aa0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8007f82:	4812      	ldr	r0, [pc, #72]	@ (8007fcc <MX_I2C1_Init+0xa8>)
 8007f84:	f7ff fd69 	bl	8007a5a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8007f88:	4810      	ldr	r0, [pc, #64]	@ (8007fcc <MX_I2C1_Init+0xa8>)
 8007f8a:	f7ff fd56 	bl	8007a3a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8007f92:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd0 <MX_I2C1_Init+0xac>)
 8007f94:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8007f96:	2300      	movs	r3, #0
 8007f98:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8007f9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8007fa4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8007faa:	f107 0318 	add.w	r3, r7, #24
 8007fae:	4619      	mov	r1, r3
 8007fb0:	4806      	ldr	r0, [pc, #24]	@ (8007fcc <MX_I2C1_Init+0xa8>)
 8007fb2:	f000 ffe7 	bl	8008f84 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4804      	ldr	r0, [pc, #16]	@ (8007fcc <MX_I2C1_Init+0xa8>)
 8007fba:	f7ff fd5e 	bl	8007a7a <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007fbe:	bf00      	nop
 8007fc0:	3730      	adds	r7, #48	@ 0x30
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	40020400 	.word	0x40020400
 8007fcc:	40005400 	.word	0x40005400
 8007fd0:	000186a0 	.word	0x000186a0

08007fd4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08c      	sub	sp, #48	@ 0x30
 8007fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8007fda:	f107 0318 	add.w	r3, r7, #24
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	605a      	str	r2, [r3, #4]
 8007fe4:	609a      	str	r2, [r3, #8]
 8007fe6:	60da      	str	r2, [r3, #12]
 8007fe8:	611a      	str	r2, [r3, #16]
 8007fea:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fec:	463b      	mov	r3, r7
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	605a      	str	r2, [r3, #4]
 8007ff4:	609a      	str	r2, [r3, #8]
 8007ff6:	60da      	str	r2, [r3, #12]
 8007ff8:	611a      	str	r2, [r3, #16]
 8007ffa:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007ffc:	2004      	movs	r0, #4
 8007ffe:	f7ff fe2b 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008002:	2001      	movs	r0, #1
 8008004:	f7ff fe28 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8008008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800800c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800800e:	2302      	movs	r3, #2
 8008010:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008012:	2303      	movs	r3, #3
 8008014:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8008016:	2301      	movs	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800801e:	2304      	movs	r3, #4
 8008020:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008022:	463b      	mov	r3, r7
 8008024:	4619      	mov	r1, r3
 8008026:	481f      	ldr	r0, [pc, #124]	@ (80080a4 <MX_I2C3_Init+0xd0>)
 8008028:	f000 fe35 	bl	8008c96 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800802c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008030:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008032:	2302      	movs	r3, #2
 8008034:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008036:	2303      	movs	r3, #3
 8008038:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800803a:	2301      	movs	r3, #1
 800803c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800803e:	2300      	movs	r3, #0
 8008040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8008042:	2304      	movs	r3, #4
 8008044:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008046:	463b      	mov	r3, r7
 8008048:	4619      	mov	r1, r3
 800804a:	4817      	ldr	r0, [pc, #92]	@ (80080a8 <MX_I2C3_Init+0xd4>)
 800804c:	f000 fe23 	bl	8008c96 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8008050:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8008054:	f7ff fe18 	bl	8007c88 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8008058:	4814      	ldr	r0, [pc, #80]	@ (80080ac <MX_I2C3_Init+0xd8>)
 800805a:	f7ff fd21 	bl	8007aa0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 800805e:	4813      	ldr	r0, [pc, #76]	@ (80080ac <MX_I2C3_Init+0xd8>)
 8008060:	f7ff fcfb 	bl	8007a5a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 8008064:	4811      	ldr	r0, [pc, #68]	@ (80080ac <MX_I2C3_Init+0xd8>)
 8008066:	f7ff fce8 	bl	8007a3a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800806a:	2300      	movs	r3, #0
 800806c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800806e:	4b10      	ldr	r3, [pc, #64]	@ (80080b0 <MX_I2C3_Init+0xdc>)
 8008070:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8008072:	2300      	movs	r3, #0
 8008074:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800807a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800807e:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8008080:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 8008086:	f107 0318 	add.w	r3, r7, #24
 800808a:	4619      	mov	r1, r3
 800808c:	4807      	ldr	r0, [pc, #28]	@ (80080ac <MX_I2C3_Init+0xd8>)
 800808e:	f000 ff79 	bl	8008f84 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 8008092:	2100      	movs	r1, #0
 8008094:	4805      	ldr	r0, [pc, #20]	@ (80080ac <MX_I2C3_Init+0xd8>)
 8008096:	f7ff fcf0 	bl	8007a7a <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800809a:	bf00      	nop
 800809c:	3730      	adds	r7, #48	@ 0x30
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40020800 	.word	0x40020800
 80080a8:	40020000 	.word	0x40020000
 80080ac:	40005c00 	.word	0x40005c00
 80080b0:	000186a0 	.word	0x000186a0

080080b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08e      	sub	sp, #56	@ 0x38
 80080b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80080ba:	f107 031c 	add.w	r3, r7, #28
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	605a      	str	r2, [r3, #4]
 80080c4:	609a      	str	r2, [r3, #8]
 80080c6:	60da      	str	r2, [r3, #12]
 80080c8:	611a      	str	r2, [r3, #16]
 80080ca:	615a      	str	r2, [r3, #20]
 80080cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080ce:	1d3b      	adds	r3, r7, #4
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	605a      	str	r2, [r3, #4]
 80080d6:	609a      	str	r2, [r3, #8]
 80080d8:	60da      	str	r2, [r3, #12]
 80080da:	611a      	str	r2, [r3, #16]
 80080dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80080de:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80080e2:	f7ff fdd1 	bl	8007c88 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80080e6:	2004      	movs	r0, #4
 80080e8:	f7ff fdb6 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80080ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80080f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80080f2:	2302      	movs	r3, #2
 80080f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80080f6:	2303      	movs	r3, #3
 80080f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80080fe:	2300      	movs	r3, #0
 8008100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8008102:	2308      	movs	r3, #8
 8008104:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008106:	1d3b      	adds	r3, r7, #4
 8008108:	4619      	mov	r1, r3
 800810a:	4819      	ldr	r0, [pc, #100]	@ (8008170 <MX_UART4_Init+0xbc>)
 800810c:	f000 fdc3 	bl	8008c96 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008110:	f7ff fc0a 	bl	8007928 <__NVIC_GetPriorityGrouping>
 8008114:	4603      	mov	r3, r0
 8008116:	2200      	movs	r2, #0
 8008118:	2100      	movs	r1, #0
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff fc5a 	bl	80079d4 <NVIC_EncodePriority>
 8008120:	4603      	mov	r3, r0
 8008122:	4619      	mov	r1, r3
 8008124:	2034      	movs	r0, #52	@ 0x34
 8008126:	f7ff fc2b 	bl	8007980 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800812a:	2034      	movs	r0, #52	@ 0x34
 800812c:	f7ff fc0a 	bl	8007944 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8008130:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8008134:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008136:	2300      	movs	r3, #0
 8008138:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800813a:	2300      	movs	r3, #0
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800813e:	2300      	movs	r3, #0
 8008140:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008142:	230c      	movs	r3, #12
 8008144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008146:	2300      	movs	r3, #0
 8008148:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800814a:	2300      	movs	r3, #0
 800814c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800814e:	f107 031c 	add.w	r3, r7, #28
 8008152:	4619      	mov	r1, r3
 8008154:	4807      	ldr	r0, [pc, #28]	@ (8008174 <MX_UART4_Init+0xc0>)
 8008156:	f001 fae9 	bl	800972c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800815a:	4806      	ldr	r0, [pc, #24]	@ (8008174 <MX_UART4_Init+0xc0>)
 800815c:	f7ff fe1e 	bl	8007d9c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8008160:	4804      	ldr	r0, [pc, #16]	@ (8008174 <MX_UART4_Init+0xc0>)
 8008162:	f7ff fe0b 	bl	8007d7c <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8008166:	bf00      	nop
 8008168:	3738      	adds	r7, #56	@ 0x38
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	40020800 	.word	0x40020800
 8008174:	40004c00 	.word	0x40004c00

08008178 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08e      	sub	sp, #56	@ 0x38
 800817c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800817e:	f107 031c 	add.w	r3, r7, #28
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	605a      	str	r2, [r3, #4]
 8008188:	609a      	str	r2, [r3, #8]
 800818a:	60da      	str	r2, [r3, #12]
 800818c:	611a      	str	r2, [r3, #16]
 800818e:	615a      	str	r2, [r3, #20]
 8008190:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008192:	1d3b      	adds	r3, r7, #4
 8008194:	2200      	movs	r2, #0
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	605a      	str	r2, [r3, #4]
 800819a:	609a      	str	r2, [r3, #8]
 800819c:	60da      	str	r2, [r3, #12]
 800819e:	611a      	str	r2, [r3, #16]
 80081a0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80081a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80081a6:	f7ff fd6f 	bl	8007c88 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80081aa:	2004      	movs	r0, #4
 80081ac:	f7ff fd54 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80081b0:	2008      	movs	r0, #8
 80081b2:	f7ff fd51 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80081b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80081ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80081bc:	2302      	movs	r3, #2
 80081be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80081c0:	2303      	movs	r3, #3
 80081c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80081c4:	2300      	movs	r3, #0
 80081c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80081cc:	2308      	movs	r3, #8
 80081ce:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081d0:	1d3b      	adds	r3, r7, #4
 80081d2:	4619      	mov	r1, r3
 80081d4:	4821      	ldr	r0, [pc, #132]	@ (800825c <MX_UART5_Init+0xe4>)
 80081d6:	f000 fd5e 	bl	8008c96 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80081da:	2304      	movs	r3, #4
 80081dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80081de:	2302      	movs	r3, #2
 80081e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80081e2:	2303      	movs	r3, #3
 80081e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80081ee:	2308      	movs	r3, #8
 80081f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80081f2:	1d3b      	adds	r3, r7, #4
 80081f4:	4619      	mov	r1, r3
 80081f6:	481a      	ldr	r0, [pc, #104]	@ (8008260 <MX_UART5_Init+0xe8>)
 80081f8:	f000 fd4d 	bl	8008c96 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80081fc:	f7ff fb94 	bl	8007928 <__NVIC_GetPriorityGrouping>
 8008200:	4603      	mov	r3, r0
 8008202:	2200      	movs	r2, #0
 8008204:	2100      	movs	r1, #0
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff fbe4 	bl	80079d4 <NVIC_EncodePriority>
 800820c:	4603      	mov	r3, r0
 800820e:	4619      	mov	r1, r3
 8008210:	2035      	movs	r0, #53	@ 0x35
 8008212:	f7ff fbb5 	bl	8007980 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8008216:	2035      	movs	r0, #53	@ 0x35
 8008218:	f7ff fb94 	bl	8007944 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800821c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8008220:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8008222:	2300      	movs	r3, #0
 8008224:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8008226:	2300      	movs	r3, #0
 8008228:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800822a:	2300      	movs	r3, #0
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800822e:	230c      	movs	r3, #12
 8008230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8008232:	2300      	movs	r3, #0
 8008234:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8008236:	2300      	movs	r3, #0
 8008238:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800823a:	f107 031c 	add.w	r3, r7, #28
 800823e:	4619      	mov	r1, r3
 8008240:	4808      	ldr	r0, [pc, #32]	@ (8008264 <MX_UART5_Init+0xec>)
 8008242:	f001 fa73 	bl	800972c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8008246:	4807      	ldr	r0, [pc, #28]	@ (8008264 <MX_UART5_Init+0xec>)
 8008248:	f7ff fda8 	bl	8007d9c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800824c:	4805      	ldr	r0, [pc, #20]	@ (8008264 <MX_UART5_Init+0xec>)
 800824e:	f7ff fd95 	bl	8007d7c <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8008252:	bf00      	nop
 8008254:	3738      	adds	r7, #56	@ 0x38
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	40020800 	.word	0x40020800
 8008260:	40020c00 	.word	0x40020c00
 8008264:	40005000 	.word	0x40005000

08008268 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08e      	sub	sp, #56	@ 0x38
 800826c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800826e:	f107 031c 	add.w	r3, r7, #28
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	605a      	str	r2, [r3, #4]
 8008278:	609a      	str	r2, [r3, #8]
 800827a:	60da      	str	r2, [r3, #12]
 800827c:	611a      	str	r2, [r3, #16]
 800827e:	615a      	str	r2, [r3, #20]
 8008280:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008282:	1d3b      	adds	r3, r7, #4
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	605a      	str	r2, [r3, #4]
 800828a:	609a      	str	r2, [r3, #8]
 800828c:	60da      	str	r2, [r3, #12]
 800828e:	611a      	str	r2, [r3, #16]
 8008290:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8008292:	2010      	movs	r0, #16
 8008294:	f7ff fd10 	bl	8007cb8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008298:	2001      	movs	r0, #1
 800829a:	f7ff fcdd 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800829e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80082a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80082a4:	2302      	movs	r3, #2
 80082a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80082a8:	2303      	movs	r3, #3
 80082aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80082ac:	2300      	movs	r3, #0
 80082ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80082b0:	2300      	movs	r3, #0
 80082b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80082b4:	2307      	movs	r3, #7
 80082b6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b8:	1d3b      	adds	r3, r7, #4
 80082ba:	4619      	mov	r1, r3
 80082bc:	4818      	ldr	r0, [pc, #96]	@ (8008320 <MX_USART1_UART_Init+0xb8>)
 80082be:	f000 fcea 	bl	8008c96 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80082c2:	f7ff fb31 	bl	8007928 <__NVIC_GetPriorityGrouping>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2200      	movs	r2, #0
 80082ca:	2100      	movs	r1, #0
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fb81 	bl	80079d4 <NVIC_EncodePriority>
 80082d2:	4603      	mov	r3, r0
 80082d4:	4619      	mov	r1, r3
 80082d6:	2025      	movs	r0, #37	@ 0x25
 80082d8:	f7ff fb52 	bl	8007980 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80082dc:	2025      	movs	r0, #37	@ 0x25
 80082de:	f7ff fb31 	bl	8007944 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 80082e2:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 80082e6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80082e8:	2300      	movs	r3, #0
 80082ea:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80082ec:	2300      	movs	r3, #0
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80082f4:	230c      	movs	r3, #12
 80082f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80082fc:	2300      	movs	r3, #0
 80082fe:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8008300:	f107 031c 	add.w	r3, r7, #28
 8008304:	4619      	mov	r1, r3
 8008306:	4807      	ldr	r0, [pc, #28]	@ (8008324 <MX_USART1_UART_Init+0xbc>)
 8008308:	f001 fa10 	bl	800972c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800830c:	4805      	ldr	r0, [pc, #20]	@ (8008324 <MX_USART1_UART_Init+0xbc>)
 800830e:	f7ff fd45 	bl	8007d9c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8008312:	4804      	ldr	r0, [pc, #16]	@ (8008324 <MX_USART1_UART_Init+0xbc>)
 8008314:	f7ff fd32 	bl	8007d7c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008318:	bf00      	nop
 800831a:	3738      	adds	r7, #56	@ 0x38
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	40020000 	.word	0x40020000
 8008324:	40011000 	.word	0x40011000

08008328 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08e      	sub	sp, #56	@ 0x38
 800832c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800832e:	f107 031c 	add.w	r3, r7, #28
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	605a      	str	r2, [r3, #4]
 8008338:	609a      	str	r2, [r3, #8]
 800833a:	60da      	str	r2, [r3, #12]
 800833c:	611a      	str	r2, [r3, #16]
 800833e:	615a      	str	r2, [r3, #20]
 8008340:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008342:	1d3b      	adds	r3, r7, #4
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	605a      	str	r2, [r3, #4]
 800834a:	609a      	str	r2, [r3, #8]
 800834c:	60da      	str	r2, [r3, #12]
 800834e:	611a      	str	r2, [r3, #16]
 8008350:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8008352:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008356:	f7ff fc97 	bl	8007c88 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800835a:	2001      	movs	r0, #1
 800835c:	f7ff fc7c 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8008360:	230c      	movs	r3, #12
 8008362:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008364:	2302      	movs	r3, #2
 8008366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008368:	2303      	movs	r3, #3
 800836a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800836c:	2300      	movs	r3, #0
 800836e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008370:	2300      	movs	r3, #0
 8008372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008374:	2307      	movs	r3, #7
 8008376:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008378:	1d3b      	adds	r3, r7, #4
 800837a:	4619      	mov	r1, r3
 800837c:	4818      	ldr	r0, [pc, #96]	@ (80083e0 <MX_USART2_UART_Init+0xb8>)
 800837e:	f000 fc8a 	bl	8008c96 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008382:	f7ff fad1 	bl	8007928 <__NVIC_GetPriorityGrouping>
 8008386:	4603      	mov	r3, r0
 8008388:	2200      	movs	r2, #0
 800838a:	2100      	movs	r1, #0
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff fb21 	bl	80079d4 <NVIC_EncodePriority>
 8008392:	4603      	mov	r3, r0
 8008394:	4619      	mov	r1, r3
 8008396:	2026      	movs	r0, #38	@ 0x26
 8008398:	f7ff faf2 	bl	8007980 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800839c:	2026      	movs	r0, #38	@ 0x26
 800839e:	f7ff fad1 	bl	8007944 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80083a2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80083a6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80083a8:	2300      	movs	r3, #0
 80083aa:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80083ac:	2300      	movs	r3, #0
 80083ae:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80083b4:	230c      	movs	r3, #12
 80083b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80083bc:	2300      	movs	r3, #0
 80083be:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80083c0:	f107 031c 	add.w	r3, r7, #28
 80083c4:	4619      	mov	r1, r3
 80083c6:	4807      	ldr	r0, [pc, #28]	@ (80083e4 <MX_USART2_UART_Init+0xbc>)
 80083c8:	f001 f9b0 	bl	800972c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80083cc:	4805      	ldr	r0, [pc, #20]	@ (80083e4 <MX_USART2_UART_Init+0xbc>)
 80083ce:	f7ff fce5 	bl	8007d9c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80083d2:	4804      	ldr	r0, [pc, #16]	@ (80083e4 <MX_USART2_UART_Init+0xbc>)
 80083d4:	f7ff fcd2 	bl	8007d7c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80083d8:	bf00      	nop
 80083da:	3738      	adds	r7, #56	@ 0x38
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	40020000 	.word	0x40020000
 80083e4:	40004400 	.word	0x40004400

080083e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	@ 0x38
 80083ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80083ee:	f107 031c 	add.w	r3, r7, #28
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	605a      	str	r2, [r3, #4]
 80083f8:	609a      	str	r2, [r3, #8]
 80083fa:	60da      	str	r2, [r3, #12]
 80083fc:	611a      	str	r2, [r3, #16]
 80083fe:	615a      	str	r2, [r3, #20]
 8008400:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008402:	1d3b      	adds	r3, r7, #4
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	605a      	str	r2, [r3, #4]
 800840a:	609a      	str	r2, [r3, #8]
 800840c:	60da      	str	r2, [r3, #12]
 800840e:	611a      	str	r2, [r3, #16]
 8008410:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8008412:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8008416:	f7ff fc37 	bl	8007c88 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800841a:	2002      	movs	r0, #2
 800841c:	f7ff fc1c 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8008420:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008424:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008426:	2302      	movs	r3, #2
 8008428:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800842a:	2303      	movs	r3, #3
 800842c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800842e:	2300      	movs	r3, #0
 8008430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008432:	2300      	movs	r3, #0
 8008434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8008436:	2307      	movs	r3, #7
 8008438:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800843a:	1d3b      	adds	r3, r7, #4
 800843c:	4619      	mov	r1, r3
 800843e:	4819      	ldr	r0, [pc, #100]	@ (80084a4 <MX_USART3_UART_Init+0xbc>)
 8008440:	f000 fc29 	bl	8008c96 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008444:	f7ff fa70 	bl	8007928 <__NVIC_GetPriorityGrouping>
 8008448:	4603      	mov	r3, r0
 800844a:	2200      	movs	r2, #0
 800844c:	2100      	movs	r1, #0
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fac0 	bl	80079d4 <NVIC_EncodePriority>
 8008454:	4603      	mov	r3, r0
 8008456:	4619      	mov	r1, r3
 8008458:	2027      	movs	r0, #39	@ 0x27
 800845a:	f7ff fa91 	bl	8007980 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800845e:	2027      	movs	r0, #39	@ 0x27
 8008460:	f7ff fa70 	bl	8007944 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8008464:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8008468:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800846a:	2300      	movs	r3, #0
 800846c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800846e:	2300      	movs	r3, #0
 8008470:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008472:	2300      	movs	r3, #0
 8008474:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008476:	230c      	movs	r3, #12
 8008478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800847a:	2300      	movs	r3, #0
 800847c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800847e:	2300      	movs	r3, #0
 8008480:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8008482:	f107 031c 	add.w	r3, r7, #28
 8008486:	4619      	mov	r1, r3
 8008488:	4807      	ldr	r0, [pc, #28]	@ (80084a8 <MX_USART3_UART_Init+0xc0>)
 800848a:	f001 f94f 	bl	800972c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800848e:	4806      	ldr	r0, [pc, #24]	@ (80084a8 <MX_USART3_UART_Init+0xc0>)
 8008490:	f7ff fc84 	bl	8007d9c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8008494:	4804      	ldr	r0, [pc, #16]	@ (80084a8 <MX_USART3_UART_Init+0xc0>)
 8008496:	f7ff fc71 	bl	8007d7c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800849a:	bf00      	nop
 800849c:	3738      	adds	r7, #56	@ 0x38
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	40020400 	.word	0x40020400
 80084a8:	40004800 	.word	0x40004800

080084ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08e      	sub	sp, #56	@ 0x38
 80084b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80084b2:	f107 031c 	add.w	r3, r7, #28
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	605a      	str	r2, [r3, #4]
 80084bc:	609a      	str	r2, [r3, #8]
 80084be:	60da      	str	r2, [r3, #12]
 80084c0:	611a      	str	r2, [r3, #16]
 80084c2:	615a      	str	r2, [r3, #20]
 80084c4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c6:	1d3b      	adds	r3, r7, #4
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	605a      	str	r2, [r3, #4]
 80084ce:	609a      	str	r2, [r3, #8]
 80084d0:	60da      	str	r2, [r3, #12]
 80084d2:	611a      	str	r2, [r3, #16]
 80084d4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80084d6:	2020      	movs	r0, #32
 80084d8:	f7ff fbee 	bl	8007cb8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80084dc:	2004      	movs	r0, #4
 80084de:	f7ff fbbb 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80084e2:	23c0      	movs	r3, #192	@ 0xc0
 80084e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80084e6:	2302      	movs	r3, #2
 80084e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80084ea:	2303      	movs	r3, #3
 80084ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80084f6:	2308      	movs	r3, #8
 80084f8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084fa:	1d3b      	adds	r3, r7, #4
 80084fc:	4619      	mov	r1, r3
 80084fe:	4819      	ldr	r0, [pc, #100]	@ (8008564 <MX_USART6_UART_Init+0xb8>)
 8008500:	f000 fbc9 	bl	8008c96 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008504:	f7ff fa10 	bl	8007928 <__NVIC_GetPriorityGrouping>
 8008508:	4603      	mov	r3, r0
 800850a:	2200      	movs	r2, #0
 800850c:	2100      	movs	r1, #0
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fa60 	bl	80079d4 <NVIC_EncodePriority>
 8008514:	4603      	mov	r3, r0
 8008516:	4619      	mov	r1, r3
 8008518:	2047      	movs	r0, #71	@ 0x47
 800851a:	f7ff fa31 	bl	8007980 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800851e:	2047      	movs	r0, #71	@ 0x47
 8008520:	f7ff fa10 	bl	8007944 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8008524:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8008528:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800852a:	2300      	movs	r3, #0
 800852c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800852e:	2300      	movs	r3, #0
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8008532:	2300      	movs	r3, #0
 8008534:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8008536:	230c      	movs	r3, #12
 8008538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800853a:	2300      	movs	r3, #0
 800853c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800853e:	2300      	movs	r3, #0
 8008540:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8008542:	f107 031c 	add.w	r3, r7, #28
 8008546:	4619      	mov	r1, r3
 8008548:	4807      	ldr	r0, [pc, #28]	@ (8008568 <MX_USART6_UART_Init+0xbc>)
 800854a:	f001 f8ef 	bl	800972c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800854e:	4806      	ldr	r0, [pc, #24]	@ (8008568 <MX_USART6_UART_Init+0xbc>)
 8008550:	f7ff fc24 	bl	8007d9c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8008554:	4804      	ldr	r0, [pc, #16]	@ (8008568 <MX_USART6_UART_Init+0xbc>)
 8008556:	f7ff fc11 	bl	8007d7c <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800855a:	bf00      	nop
 800855c:	3738      	adds	r7, #56	@ 0x38
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	40020800 	.word	0x40020800
 8008568:	40011400 	.word	0x40011400

0800856c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008572:	463b      	mov	r3, r7
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	605a      	str	r2, [r3, #4]
 800857a:	609a      	str	r2, [r3, #8]
 800857c:	60da      	str	r2, [r3, #12]
 800857e:	611a      	str	r2, [r3, #16]
 8008580:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008582:	2004      	movs	r0, #4
 8008584:	f7ff fb68 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8008588:	2080      	movs	r0, #128	@ 0x80
 800858a:	f7ff fb65 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800858e:	2001      	movs	r0, #1
 8008590:	f7ff fb62 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008594:	2002      	movs	r0, #2
 8008596:	f7ff fb5f 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800859a:	2008      	movs	r0, #8
 800859c:	f7ff fb5c 	bl	8007c58 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, WD_DONE_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin);
 80085a0:	f641 0102 	movw	r1, #6146	@ 0x1802
 80085a4:	4826      	ldr	r0, [pc, #152]	@ (8008640 <MX_GPIO_Init+0xd4>)
 80085a6:	f7ff fc0f 	bl	8007dc8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_busy_Pin|ENABLE_MUX_Pin);
 80085aa:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80085ae:	4825      	ldr	r0, [pc, #148]	@ (8008644 <MX_GPIO_Init+0xd8>)
 80085b0:	f7ff fc0a 	bl	8007dc8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 80085b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80085b8:	4823      	ldr	r0, [pc, #140]	@ (8008648 <MX_GPIO_Init+0xdc>)
 80085ba:	f7ff fc05 	bl	8007dc8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = PMU_INT_MCU_Pin|PDU_INT_MCU_Pin|IOU_INT_MCU_Pin|EJECT_Pin
 80085be:	f24e 030c 	movw	r3, #57356	@ 0xe00c
 80085c2:	603b      	str	r3, [r7, #0]
                          |CAM_INT_MCU_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80085c4:	2300      	movs	r3, #0
 80085c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80085c8:	2300      	movs	r3, #0
 80085ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085cc:	463b      	mov	r3, r7
 80085ce:	4619      	mov	r1, r3
 80085d0:	481c      	ldr	r0, [pc, #112]	@ (8008644 <MX_GPIO_Init+0xd8>)
 80085d2:	f000 fb60 	bl	8008c96 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin;
 80085d6:	f641 0302 	movw	r3, #6146	@ 0x1802
 80085da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80085dc:	2301      	movs	r3, #1
 80085de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80085e0:	2300      	movs	r3, #0
 80085e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80085e4:	2300      	movs	r3, #0
 80085e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80085e8:	2300      	movs	r3, #0
 80085ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ec:	463b      	mov	r3, r7
 80085ee:	4619      	mov	r1, r3
 80085f0:	4813      	ldr	r0, [pc, #76]	@ (8008640 <MX_GPIO_Init+0xd4>)
 80085f2:	f000 fb50 	bl	8008c96 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_busy_Pin|ENABLE_MUX_Pin;
 80085f6:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80085fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80085fc:	2301      	movs	r3, #1
 80085fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008600:	2300      	movs	r3, #0
 8008602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008604:	2300      	movs	r3, #0
 8008606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008608:	2300      	movs	r3, #0
 800860a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800860c:	463b      	mov	r3, r7
 800860e:	4619      	mov	r1, r3
 8008610:	480c      	ldr	r0, [pc, #48]	@ (8008644 <MX_GPIO_Init+0xd8>)
 8008612:	f000 fb40 	bl	8008c96 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_RF_Pin;
 8008616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800861a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800861c:	2301      	movs	r3, #1
 800861e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008620:	2300      	movs	r3, #0
 8008622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008628:	2300      	movs	r3, #0
 800862a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENABLE_RF_GPIO_Port, &GPIO_InitStruct);
 800862c:	463b      	mov	r3, r7
 800862e:	4619      	mov	r1, r3
 8008630:	4805      	ldr	r0, [pc, #20]	@ (8008648 <MX_GPIO_Init+0xdc>)
 8008632:	f000 fb30 	bl	8008c96 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008636:	bf00      	nop
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	40020000 	.word	0x40020000
 8008644:	40020800 	.word	0x40020800
 8008648:	40020400 	.word	0x40020400

0800864c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008650:	bf00      	nop
 8008652:	e7fd      	b.n	8008650 <NMI_Handler+0x4>

08008654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008658:	bf00      	nop
 800865a:	e7fd      	b.n	8008658 <HardFault_Handler+0x4>

0800865c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008660:	bf00      	nop
 8008662:	e7fd      	b.n	8008660 <MemManage_Handler+0x4>

08008664 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008668:	bf00      	nop
 800866a:	e7fd      	b.n	8008668 <BusFault_Handler+0x4>

0800866c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008670:	bf00      	nop
 8008672:	e7fd      	b.n	8008670 <UsageFault_Handler+0x4>

08008674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008678:	bf00      	nop
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008682:	b480      	push	{r7}
 8008684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008686:	bf00      	nop
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008694:	bf00      	nop
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
	...

080086a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    g_systick_count++;
 80086a4:	4b04      	ldr	r3, [pc, #16]	@ (80086b8 <SysTick_Handler+0x18>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3301      	adds	r3, #1
 80086aa:	4a03      	ldr	r2, [pc, #12]	@ (80086b8 <SysTick_Handler+0x18>)
 80086ac:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 80086ae:	f001 f989 	bl	80099c4 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80086b2:	bf00      	nop
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20004b40 	.word	0x20004b40

080086bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (USART1);
 80086c0:	4802      	ldr	r0, [pc, #8]	@ (80086cc <USART1_IRQHandler+0x10>)
 80086c2:	f7f9 fc5f 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80086c6:	bf00      	nop
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	40011000 	.word	0x40011000

080086d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (USART2);
 80086d4:	4802      	ldr	r0, [pc, #8]	@ (80086e0 <USART2_IRQHandler+0x10>)
 80086d6:	f7f9 fc55 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80086da:	bf00      	nop
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	40004400 	.word	0x40004400

080086e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (USART3);
 80086e8:	4802      	ldr	r0, [pc, #8]	@ (80086f4 <USART3_IRQHandler+0x10>)
 80086ea:	f7f9 fc4b 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80086ee:	bf00      	nop
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	40004800 	.word	0x40004800

080086f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Uart_isr (UART4);
 80086fc:	4802      	ldr	r0, [pc, #8]	@ (8008708 <UART4_IRQHandler+0x10>)
 80086fe:	f7f9 fc41 	bl	8001f84 <Uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8008702:	bf00      	nop
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	40004c00 	.word	0x40004c00

0800870c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr (UART5);
 8008710:	4802      	ldr	r0, [pc, #8]	@ (800871c <UART5_IRQHandler+0x10>)
 8008712:	f7f9 fc37 	bl	8001f84 <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8008716:	bf00      	nop
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	40005000 	.word	0x40005000

08008720 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr (USART6);
 8008724:	4802      	ldr	r0, [pc, #8]	@ (8008730 <USART6_IRQHandler+0x10>)
 8008726:	f7f9 fc2d 	bl	8001f84 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800872a:	bf00      	nop
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	40011400 	.word	0x40011400

08008734 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  return 1;
 8008738:	2301      	movs	r3, #1
}
 800873a:	4618      	mov	r0, r3
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <_kill>:

int _kill(int pid, int sig)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800874e:	f005 f8d3 	bl	800d8f8 <__errno>
 8008752:	4603      	mov	r3, r0
 8008754:	2216      	movs	r2, #22
 8008756:	601a      	str	r2, [r3, #0]
  return -1;
 8008758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <_exit>:

void _exit (int status)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800876c:	f04f 31ff 	mov.w	r1, #4294967295
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff ffe7 	bl	8008744 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008776:	bf00      	nop
 8008778:	e7fd      	b.n	8008776 <_exit+0x12>

0800877a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b086      	sub	sp, #24
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008786:	2300      	movs	r3, #0
 8008788:	617b      	str	r3, [r7, #20]
 800878a:	e00a      	b.n	80087a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800878c:	f3af 8000 	nop.w
 8008790:	4601      	mov	r1, r0
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	60ba      	str	r2, [r7, #8]
 8008798:	b2ca      	uxtb	r2, r1
 800879a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	3301      	adds	r3, #1
 80087a0:	617b      	str	r3, [r7, #20]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	dbf0      	blt.n	800878c <_read+0x12>
  }

  return len;
 80087aa:	687b      	ldr	r3, [r7, #4]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087c0:	2300      	movs	r3, #0
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	e009      	b.n	80087da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	60ba      	str	r2, [r7, #8]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	3301      	adds	r3, #1
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	429a      	cmp	r2, r3
 80087e0:	dbf1      	blt.n	80087c6 <_write+0x12>
  }
  return len;
 80087e2:	687b      	ldr	r3, [r7, #4]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <_close>:

int _close(int file)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80087f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008814:	605a      	str	r2, [r3, #4]
  return 0;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <_isatty>:

int _isatty(int file)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800882c:	2301      	movs	r3, #1
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800883a:	b480      	push	{r7}
 800883c:	b085      	sub	sp, #20
 800883e:	af00      	add	r7, sp, #0
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800885c:	4a14      	ldr	r2, [pc, #80]	@ (80088b0 <_sbrk+0x5c>)
 800885e:	4b15      	ldr	r3, [pc, #84]	@ (80088b4 <_sbrk+0x60>)
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008868:	4b13      	ldr	r3, [pc, #76]	@ (80088b8 <_sbrk+0x64>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008870:	4b11      	ldr	r3, [pc, #68]	@ (80088b8 <_sbrk+0x64>)
 8008872:	4a12      	ldr	r2, [pc, #72]	@ (80088bc <_sbrk+0x68>)
 8008874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008876:	4b10      	ldr	r3, [pc, #64]	@ (80088b8 <_sbrk+0x64>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4413      	add	r3, r2
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	429a      	cmp	r2, r3
 8008882:	d207      	bcs.n	8008894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008884:	f005 f838 	bl	800d8f8 <__errno>
 8008888:	4603      	mov	r3, r0
 800888a:	220c      	movs	r2, #12
 800888c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800888e:	f04f 33ff 	mov.w	r3, #4294967295
 8008892:	e009      	b.n	80088a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008894:	4b08      	ldr	r3, [pc, #32]	@ (80088b8 <_sbrk+0x64>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800889a:	4b07      	ldr	r3, [pc, #28]	@ (80088b8 <_sbrk+0x64>)
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4413      	add	r3, r2
 80088a2:	4a05      	ldr	r2, [pc, #20]	@ (80088b8 <_sbrk+0x64>)
 80088a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80088a6:	68fb      	ldr	r3, [r7, #12]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	20020000 	.word	0x20020000
 80088b4:	00000400 	.word	0x00000400
 80088b8:	20004b44 	.word	0x20004b44
 80088bc:	20004de0 	.word	0x20004de0

080088c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80088c0:	b480      	push	{r7}
 80088c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088c4:	4b06      	ldr	r3, [pc, #24]	@ (80088e0 <SystemInit+0x20>)
 80088c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ca:	4a05      	ldr	r2, [pc, #20]	@ (80088e0 <SystemInit+0x20>)
 80088cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80088d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80088d4:	bf00      	nop
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	e000ed00 	.word	0xe000ed00

080088e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80088e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800891c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80088e8:	f7ff ffea 	bl	80088c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80088ec:	480c      	ldr	r0, [pc, #48]	@ (8008920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80088ee:	490d      	ldr	r1, [pc, #52]	@ (8008924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80088f0:	4a0d      	ldr	r2, [pc, #52]	@ (8008928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80088f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80088f4:	e002      	b.n	80088fc <LoopCopyDataInit>

080088f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80088f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80088f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80088fa:	3304      	adds	r3, #4

080088fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80088fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80088fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008900:	d3f9      	bcc.n	80088f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008902:	4a0a      	ldr	r2, [pc, #40]	@ (800892c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008904:	4c0a      	ldr	r4, [pc, #40]	@ (8008930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008908:	e001      	b.n	800890e <LoopFillZerobss>

0800890a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800890a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800890c:	3204      	adds	r2, #4

0800890e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800890e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008910:	d3fb      	bcc.n	800890a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8008912:	f004 fff7 	bl	800d904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008916:	f7ff fa67 	bl	8007de8 <main>
  bx  lr    
 800891a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800891c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008924:	2000058c 	.word	0x2000058c
  ldr r2, =_sidata
 8008928:	08013cb8 	.word	0x08013cb8
  ldr r2, =_sbss
 800892c:	2000058c 	.word	0x2000058c
  ldr r4, =_ebss
 8008930:	20004ddc 	.word	0x20004ddc

08008934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008934:	e7fe      	b.n	8008934 <ADC_IRQHandler>

08008936 <LL_GPIO_SetOutputPin>:
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	619a      	str	r2, [r3, #24]
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <LL_GPIO_ResetOutputPin>:
{
 8008952:	b480      	push	{r7}
 8008954:	b083      	sub	sp, #12
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	041a      	lsls	r2, r3, #16
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	619a      	str	r2, [r3, #24]
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <WDT_init>:




void WDT_init(void)
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 8008974:	4b03      	ldr	r3, [pc, #12]	@ (8008984 <WDT_init+0x14>)
 8008976:	2200      	movs	r2, #0
 8008978:	701a      	strb	r2, [r3, #0]

}
 800897a:	bf00      	nop
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	20004b48 	.word	0x20004b48

08008988 <WDT_create_task>:

void WDT_create_task(void)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800898c:	4902      	ldr	r1, [pc, #8]	@ (8008998 <WDT_create_task+0x10>)
 800898e:	4803      	ldr	r0, [pc, #12]	@ (800899c <WDT_create_task+0x14>)
 8008990:	f000 ffda 	bl	8009948 <SCH_TASK_CreateTask>

}
 8008994:	bf00      	nop
 8008996:	bd80      	pop	{r7, pc}
 8008998:	200003b8 	.word	0x200003b8
 800899c:	200003b4 	.word	0x200003b4

080089a0 <status_wdt_update>:

void	status_wdt_update(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0

		if (WDT_Current){
 80089a4:	4b14      	ldr	r3, [pc, #80]	@ (80089f8 <status_wdt_update+0x58>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d012      	beq.n	80089d2 <status_wdt_update+0x32>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 80089ac:	2001      	movs	r0, #1
 80089ae:	f000 ffb5 	bl	800991c <SCH_TIM_HasCompleted>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d01d      	beq.n	80089f4 <status_wdt_update+0x54>
			{
				WDT_Current = 0;
 80089b8:	4b0f      	ldr	r3, [pc, #60]	@ (80089f8 <status_wdt_update+0x58>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	701a      	strb	r2, [r3, #0]
				LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 80089be:	2102      	movs	r1, #2
 80089c0:	480e      	ldr	r0, [pc, #56]	@ (80089fc <status_wdt_update+0x5c>)
 80089c2:	f7ff ffc6 	bl	8008952 <LL_GPIO_ResetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 80089c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80089ca:	2001      	movs	r0, #1
 80089cc:	f000 ff90 	bl	80098f0 <SCH_TIM_Start>
				WDT_Current = 1;
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
			}
	}
}
 80089d0:	e010      	b.n	80089f4 <status_wdt_update+0x54>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 80089d2:	2001      	movs	r0, #1
 80089d4:	f000 ffa2 	bl	800991c <SCH_TIM_HasCompleted>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <status_wdt_update+0x54>
				WDT_Current = 1;
 80089de:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <status_wdt_update+0x58>)
 80089e0:	2201      	movs	r2, #1
 80089e2:	701a      	strb	r2, [r3, #0]
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 80089e4:	2102      	movs	r1, #2
 80089e6:	4805      	ldr	r0, [pc, #20]	@ (80089fc <status_wdt_update+0x5c>)
 80089e8:	f7ff ffa5 	bl	8008936 <LL_GPIO_SetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 80089ec:	21c8      	movs	r1, #200	@ 0xc8
 80089ee:	2001      	movs	r0, #1
 80089f0:	f000 ff7e 	bl	80098f0 <SCH_TIM_Start>
}
 80089f4:	bf00      	nop
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20004b48 	.word	0x20004b48
 80089fc:	40020000 	.word	0x40020000

08008a00 <LL_GPIO_SetPinMode>:
{
 8008a00:	b480      	push	{r7}
 8008a02:	b08b      	sub	sp, #44	@ 0x2c
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	fa93 f3a3 	rbit	r3, r3
 8008a1a:	613b      	str	r3, [r7, #16]
  return result;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008a26:	2320      	movs	r3, #32
 8008a28:	e003      	b.n	8008a32 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	fab3 f383 	clz	r3, r3
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	2103      	movs	r1, #3
 8008a36:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3a:	43db      	mvns	r3, r3
 8008a3c:	401a      	ands	r2, r3
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	fa93 f3a3 	rbit	r3, r3
 8008a48:	61fb      	str	r3, [r7, #28]
  return result;
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008a54:	2320      	movs	r3, #32
 8008a56:	e003      	b.n	8008a60 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5a:	fab3 f383 	clz	r3, r3
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	fa01 f303 	lsl.w	r3, r1, r3
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	601a      	str	r2, [r3, #0]
}
 8008a6e:	bf00      	nop
 8008a70:	372c      	adds	r7, #44	@ 0x2c
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <LL_GPIO_SetPinOutputType>:
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	401a      	ands	r2, r3
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	fb01 f303 	mul.w	r3, r1, r3
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	605a      	str	r2, [r3, #4]
}
 8008a9e:	bf00      	nop
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <LL_GPIO_SetPinSpeed>:
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b08b      	sub	sp, #44	@ 0x2c
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	fa93 f3a3 	rbit	r3, r3
 8008ac4:	613b      	str	r3, [r7, #16]
  return result;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008ad0:	2320      	movs	r3, #32
 8008ad2:	e003      	b.n	8008adc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	fab3 f383 	clz	r3, r3
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	2103      	movs	r1, #3
 8008ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ae4:	43db      	mvns	r3, r3
 8008ae6:	401a      	ands	r2, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	fa93 f3a3 	rbit	r3, r3
 8008af2:	61fb      	str	r3, [r7, #28]
  return result;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008afe:	2320      	movs	r3, #32
 8008b00:	e003      	b.n	8008b0a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b04:	fab3 f383 	clz	r3, r3
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b12:	431a      	orrs	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	609a      	str	r2, [r3, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	372c      	adds	r7, #44	@ 0x2c
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <LL_GPIO_SetPinPull>:
{
 8008b24:	b480      	push	{r7}
 8008b26:	b08b      	sub	sp, #44	@ 0x2c
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	fa93 f3a3 	rbit	r3, r3
 8008b3e:	613b      	str	r3, [r7, #16]
  return result;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008b4a:	2320      	movs	r3, #32
 8008b4c:	e003      	b.n	8008b56 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	fab3 f383 	clz	r3, r3
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	2103      	movs	r1, #3
 8008b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5e:	43db      	mvns	r3, r3
 8008b60:	401a      	ands	r2, r3
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	fa93 f3a3 	rbit	r3, r3
 8008b6c:	61fb      	str	r3, [r7, #28]
  return result;
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008b78:	2320      	movs	r3, #32
 8008b7a:	e003      	b.n	8008b84 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7e:	fab3 f383 	clz	r3, r3
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	fa01 f303 	lsl.w	r3, r1, r3
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	60da      	str	r2, [r3, #12]
}
 8008b92:	bf00      	nop
 8008b94:	372c      	adds	r7, #44	@ 0x2c
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <LL_GPIO_SetAFPin_0_7>:
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b08b      	sub	sp, #44	@ 0x2c
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6a1a      	ldr	r2, [r3, #32]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	fa93 f3a3 	rbit	r3, r3
 8008bb8:	613b      	str	r3, [r7, #16]
  return result;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	e003      	b.n	8008bd0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	fab3 f383 	clz	r3, r3
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	210f      	movs	r1, #15
 8008bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd8:	43db      	mvns	r3, r3
 8008bda:	401a      	ands	r2, r3
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	fa93 f3a3 	rbit	r3, r3
 8008be6:	61fb      	str	r3, [r7, #28]
  return result;
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	e003      	b.n	8008bfe <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf8:	fab3 f383 	clz	r3, r3
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	6879      	ldr	r1, [r7, #4]
 8008c02:	fa01 f303 	lsl.w	r3, r1, r3
 8008c06:	431a      	orrs	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	621a      	str	r2, [r3, #32]
}
 8008c0c:	bf00      	nop
 8008c0e:	372c      	adds	r7, #44	@ 0x2c
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <LL_GPIO_SetAFPin_8_15>:
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b08b      	sub	sp, #44	@ 0x2c
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	fa93 f3a3 	rbit	r3, r3
 8008c34:	613b      	str	r3, [r7, #16]
  return result;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008c40:	2320      	movs	r3, #32
 8008c42:	e003      	b.n	8008c4c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	fab3 f383 	clz	r3, r3
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	210f      	movs	r1, #15
 8008c50:	fa01 f303 	lsl.w	r3, r1, r3
 8008c54:	43db      	mvns	r3, r3
 8008c56:	401a      	ands	r2, r3
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	0a1b      	lsrs	r3, r3, #8
 8008c5c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	fa93 f3a3 	rbit	r3, r3
 8008c64:	61fb      	str	r3, [r7, #28]
  return result;
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008c70:	2320      	movs	r3, #32
 8008c72:	e003      	b.n	8008c7c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c76:	fab3 f383 	clz	r3, r3
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	fa01 f303 	lsl.w	r3, r1, r3
 8008c84:	431a      	orrs	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008c8a:	bf00      	nop
 8008c8c:	372c      	adds	r7, #44	@ 0x2c
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b08a      	sub	sp, #40	@ 0x28
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	fa93 f3a3 	rbit	r3, r3
 8008cb4:	617b      	str	r3, [r7, #20]
  return result;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <LL_GPIO_Init+0x2e>
    return 32U;
 8008cc0:	2320      	movs	r3, #32
 8008cc2:	e003      	b.n	8008ccc <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	fab3 f383 	clz	r3, r3
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008cce:	e057      	b.n	8008d80 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cdc:	4013      	ands	r3, r2
 8008cde:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d049      	beq.n	8008d7a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d003      	beq.n	8008cf6 <LL_GPIO_Init+0x60>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d10d      	bne.n	8008d12 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	6a39      	ldr	r1, [r7, #32]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff fed3 	bl	8008aaa <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6a39      	ldr	r1, [r7, #32]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff feb4 	bl	8008a7a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	461a      	mov	r2, r3
 8008d18:	6a39      	ldr	r1, [r7, #32]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7ff ff02 	bl	8008b24 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d121      	bne.n	8008d6c <LL_GPIO_Init+0xd6>
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	fa93 f3a3 	rbit	r3, r3
 8008d32:	60bb      	str	r3, [r7, #8]
  return result;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <LL_GPIO_Init+0xac>
    return 32U;
 8008d3e:	2320      	movs	r3, #32
 8008d40:	e003      	b.n	8008d4a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	fab3 f383 	clz	r3, r3
 8008d48:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008d4a:	2b07      	cmp	r3, #7
 8008d4c:	d807      	bhi.n	8008d5e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	461a      	mov	r2, r3
 8008d54:	6a39      	ldr	r1, [r7, #32]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff ff21 	bl	8008b9e <LL_GPIO_SetAFPin_0_7>
 8008d5c:	e006      	b.n	8008d6c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	461a      	mov	r2, r3
 8008d64:	6a39      	ldr	r1, [r7, #32]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff ff56 	bl	8008c18 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	461a      	mov	r2, r3
 8008d72:	6a39      	ldr	r1, [r7, #32]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff fe43 	bl	8008a00 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d86:	fa22 f303 	lsr.w	r3, r2, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1a0      	bne.n	8008cd0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3728      	adds	r7, #40	@ 0x28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <LL_I2C_Enable>:
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f043 0201 	orr.w	r2, r3, #1
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	601a      	str	r2, [r3, #0]
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <LL_I2C_Disable>:
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f023 0201 	bic.w	r2, r3, #1
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	601a      	str	r2, [r3, #0]
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <LL_I2C_SetOwnAddress1>:
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008dec:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008df0:	68b9      	ldr	r1, [r7, #8]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	431a      	orrs	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	609a      	str	r2, [r3, #8]
}
 8008dfc:	bf00      	nop
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <LL_I2C_ConfigSpeed>:
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	4a42      	ldr	r2, [pc, #264]	@ (8008f2c <LL_I2C_ConfigSpeed+0x124>)
 8008e22:	fba2 2303 	umull	r2, r3, r2, r3
 8008e26:	0c9b      	lsrs	r3, r3, #18
 8008e28:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	493a      	ldr	r1, [pc, #232]	@ (8008f30 <LL_I2C_ConfigSpeed+0x128>)
 8008e46:	428b      	cmp	r3, r1
 8008e48:	d802      	bhi.n	8008e50 <LL_I2C_ConfigSpeed+0x48>
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	e009      	b.n	8008e64 <LL_I2C_ConfigSpeed+0x5c>
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8008e56:	fb01 f303 	mul.w	r3, r1, r3
 8008e5a:	4936      	ldr	r1, [pc, #216]	@ (8008f34 <LL_I2C_ConfigSpeed+0x12c>)
 8008e5c:	fba1 1303 	umull	r1, r3, r1, r3
 8008e60:	099b      	lsrs	r3, r3, #6
 8008e62:	3301      	adds	r3, #1
 8008e64:	431a      	orrs	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a30      	ldr	r2, [pc, #192]	@ (8008f30 <LL_I2C_ConfigSpeed+0x128>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d939      	bls.n	8008ee6 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d117      	bne.n	8008ea8 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	4413      	add	r3, r2
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	4613      	mov	r3, r2
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	4413      	add	r3, r2
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8008e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ea0:	e01d      	b.n	8008ede <LL_I2C_ConfigSpeed+0xd6>
 8008ea2:	f248 0301 	movw	r3, #32769	@ 0x8001
 8008ea6:	e01a      	b.n	8008ede <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009a      	lsls	r2, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	009a      	lsls	r2, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8008ed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ed8:	e001      	b.n	8008ede <LL_I2C_ConfigSpeed+0xd6>
 8008eda:	f248 0301 	movw	r3, #32769	@ 0x8001
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	e011      	b.n	8008f0a <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ef0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008ef4:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d005      	beq.n	8008f06 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f04:	e000      	b.n	8008f08 <LL_I2C_ConfigSpeed+0x100>
 8008f06:	2304      	movs	r3, #4
 8008f08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8008f12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	61da      	str	r2, [r3, #28]
}
 8008f1e:	bf00      	nop
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	431bde83 	.word	0x431bde83
 8008f30:	000186a0 	.word	0x000186a0
 8008f34:	10624dd3 	.word	0x10624dd3

08008f38 <LL_I2C_SetMode>:
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f023 021a 	bic.w	r2, r3, #26
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	601a      	str	r2, [r3, #0]
}
 8008f52:	bf00      	nop
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <LL_I2C_AcknowledgeNextData>:
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	601a      	str	r2, [r3, #0]
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff ff12 	bl	8008db8 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8008f94:	f107 0308 	add.w	r3, r7, #8
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 f895 	bl	80090c8 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8008f9e:	6939      	ldr	r1, [r7, #16]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff ff2d 	bl	8008e08 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68d9      	ldr	r1, [r3, #12]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7ff ff0d 	bl	8008dd8 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff ffb7 	bl	8008f38 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff fee4 	bl	8008d98 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff ffc1 	bl	8008f5e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <LL_RCC_GetSysClkSource>:
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008fec:	4b04      	ldr	r3, [pc, #16]	@ (8009000 <LL_RCC_GetSysClkSource+0x18>)
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f003 030c 	and.w	r3, r3, #12
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	40023800 	.word	0x40023800

08009004 <LL_RCC_GetAHBPrescaler>:
{
 8009004:	b480      	push	{r7}
 8009006:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009008:	4b04      	ldr	r3, [pc, #16]	@ (800901c <LL_RCC_GetAHBPrescaler+0x18>)
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8009010:	4618      	mov	r0, r3
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	40023800 	.word	0x40023800

08009020 <LL_RCC_GetAPB1Prescaler>:
{
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009024:	4b04      	ldr	r3, [pc, #16]	@ (8009038 <LL_RCC_GetAPB1Prescaler+0x18>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800902c:	4618      	mov	r0, r3
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	40023800 	.word	0x40023800

0800903c <LL_RCC_GetAPB2Prescaler>:
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009040:	4b04      	ldr	r3, [pc, #16]	@ (8009054 <LL_RCC_GetAPB2Prescaler+0x18>)
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8009048:	4618      	mov	r0, r3
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	40023800 	.word	0x40023800

08009058 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009058:	b480      	push	{r7}
 800905a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800905c:	4b04      	ldr	r3, [pc, #16]	@ (8009070 <LL_RCC_PLL_GetMainSource+0x18>)
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8009064:	4618      	mov	r0, r3
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	40023800 	.word	0x40023800

08009074 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009074:	b480      	push	{r7}
 8009076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009078:	4b04      	ldr	r3, [pc, #16]	@ (800908c <LL_RCC_PLL_GetN+0x18>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	099b      	lsrs	r3, r3, #6
 800907e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8009082:	4618      	mov	r0, r3
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	40023800 	.word	0x40023800

08009090 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8009090:	b480      	push	{r7}
 8009092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8009094:	4b04      	ldr	r3, [pc, #16]	@ (80090a8 <LL_RCC_PLL_GetP+0x18>)
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800909c:	4618      	mov	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	40023800 	.word	0x40023800

080090ac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80090b0:	4b04      	ldr	r3, [pc, #16]	@ (80090c4 <LL_RCC_PLL_GetDivider+0x18>)
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	40023800 	.word	0x40023800

080090c8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80090d0:	f000 f820 	bl	8009114 <RCC_GetSystemClockFreq>
 80090d4:	4602      	mov	r2, r0
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f840 	bl	8009164 <RCC_GetHCLKClockFreq>
 80090e4:	4602      	mov	r2, r0
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f84e 	bl	8009190 <RCC_GetPCLK1ClockFreq>
 80090f4:	4602      	mov	r2, r0
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f85a 	bl	80091b8 <RCC_GetPCLK2ClockFreq>
 8009104:	4602      	mov	r2, r0
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60da      	str	r2, [r3, #12]
}
 800910a:	bf00      	nop
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800911e:	f7ff ff63 	bl	8008fe8 <LL_RCC_GetSysClkSource>
 8009122:	4603      	mov	r3, r0
 8009124:	2b08      	cmp	r3, #8
 8009126:	d00c      	beq.n	8009142 <RCC_GetSystemClockFreq+0x2e>
 8009128:	2b08      	cmp	r3, #8
 800912a:	d80f      	bhi.n	800914c <RCC_GetSystemClockFreq+0x38>
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <RCC_GetSystemClockFreq+0x22>
 8009130:	2b04      	cmp	r3, #4
 8009132:	d003      	beq.n	800913c <RCC_GetSystemClockFreq+0x28>
 8009134:	e00a      	b.n	800914c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8009136:	4b09      	ldr	r3, [pc, #36]	@ (800915c <RCC_GetSystemClockFreq+0x48>)
 8009138:	607b      	str	r3, [r7, #4]
      break;
 800913a:	e00a      	b.n	8009152 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800913c:	4b08      	ldr	r3, [pc, #32]	@ (8009160 <RCC_GetSystemClockFreq+0x4c>)
 800913e:	607b      	str	r3, [r7, #4]
      break;
 8009140:	e007      	b.n	8009152 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8009142:	2008      	movs	r0, #8
 8009144:	f000 f84c 	bl	80091e0 <RCC_PLL_GetFreqDomain_SYS>
 8009148:	6078      	str	r0, [r7, #4]
      break;
 800914a:	e002      	b.n	8009152 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800914c:	4b03      	ldr	r3, [pc, #12]	@ (800915c <RCC_GetSystemClockFreq+0x48>)
 800914e:	607b      	str	r3, [r7, #4]
      break;
 8009150:	bf00      	nop
  }

  return frequency;
 8009152:	687b      	ldr	r3, [r7, #4]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	00f42400 	.word	0x00f42400
 8009160:	007a1200 	.word	0x007a1200

08009164 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800916c:	f7ff ff4a 	bl	8009004 <LL_RCC_GetAHBPrescaler>
 8009170:	4603      	mov	r3, r0
 8009172:	091b      	lsrs	r3, r3, #4
 8009174:	f003 030f 	and.w	r3, r3, #15
 8009178:	4a04      	ldr	r2, [pc, #16]	@ (800918c <RCC_GetHCLKClockFreq+0x28>)
 800917a:	5cd3      	ldrb	r3, [r2, r3]
 800917c:	461a      	mov	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	40d3      	lsrs	r3, r2
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	08013864 	.word	0x08013864

08009190 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009198:	f7ff ff42 	bl	8009020 <LL_RCC_GetAPB1Prescaler>
 800919c:	4603      	mov	r3, r0
 800919e:	0a9b      	lsrs	r3, r3, #10
 80091a0:	4a04      	ldr	r2, [pc, #16]	@ (80091b4 <RCC_GetPCLK1ClockFreq+0x24>)
 80091a2:	5cd3      	ldrb	r3, [r2, r3]
 80091a4:	461a      	mov	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	40d3      	lsrs	r3, r2
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	08013874 	.word	0x08013874

080091b8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80091c0:	f7ff ff3c 	bl	800903c <LL_RCC_GetAPB2Prescaler>
 80091c4:	4603      	mov	r3, r0
 80091c6:	0b5b      	lsrs	r3, r3, #13
 80091c8:	4a04      	ldr	r2, [pc, #16]	@ (80091dc <RCC_GetPCLK2ClockFreq+0x24>)
 80091ca:	5cd3      	ldrb	r3, [r2, r3]
 80091cc:	461a      	mov	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	40d3      	lsrs	r3, r2
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	08013874 	.word	0x08013874

080091e0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80091e0:	b590      	push	{r4, r7, lr}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	2300      	movs	r3, #0
 80091f2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80091f4:	f7ff ff30 	bl	8009058 <LL_RCC_PLL_GetMainSource>
 80091f8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d004      	beq.n	800920a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009206:	d003      	beq.n	8009210 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8009208:	e005      	b.n	8009216 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800920a:	4b12      	ldr	r3, [pc, #72]	@ (8009254 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800920c:	617b      	str	r3, [r7, #20]
      break;
 800920e:	e005      	b.n	800921c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8009210:	4b11      	ldr	r3, [pc, #68]	@ (8009258 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8009212:	617b      	str	r3, [r7, #20]
      break;
 8009214:	e002      	b.n	800921c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8009216:	4b0f      	ldr	r3, [pc, #60]	@ (8009254 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8009218:	617b      	str	r3, [r7, #20]
      break;
 800921a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b08      	cmp	r3, #8
 8009220:	d113      	bne.n	800924a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009222:	f7ff ff43 	bl	80090ac <LL_RCC_PLL_GetDivider>
 8009226:	4602      	mov	r2, r0
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	fbb3 f4f2 	udiv	r4, r3, r2
 800922e:	f7ff ff21 	bl	8009074 <LL_RCC_PLL_GetN>
 8009232:	4603      	mov	r3, r0
 8009234:	fb03 f404 	mul.w	r4, r3, r4
 8009238:	f7ff ff2a 	bl	8009090 <LL_RCC_PLL_GetP>
 800923c:	4603      	mov	r3, r0
 800923e:	0c1b      	lsrs	r3, r3, #16
 8009240:	3301      	adds	r3, #1
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	fbb4 f3f3 	udiv	r3, r4, r3
 8009248:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800924a:	693b      	ldr	r3, [r7, #16]
}
 800924c:	4618      	mov	r0, r3
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	bd90      	pop	{r4, r7, pc}
 8009254:	00f42400 	.word	0x00f42400
 8009258:	007a1200 	.word	0x007a1200

0800925c <LL_USART_IsEnabled>:
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800926c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009270:	bf0c      	ite	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	2300      	movne	r3, #0
 8009276:	b2db      	uxtb	r3, r3
}
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <LL_USART_SetStopBitsLength>:
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	431a      	orrs	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	611a      	str	r2, [r3, #16]
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <LL_USART_SetHWFlowCtrl>:
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	615a      	str	r2, [r3, #20]
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <LL_USART_SetBaudRate>:
{
 80092d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092d4:	b0c0      	sub	sp, #256	@ 0x100
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80092dc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80092e0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80092e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80092e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092f0:	f040 810c 	bne.w	800950c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80092f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80092f8:	2200      	movs	r2, #0
 80092fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009306:	4622      	mov	r2, r4
 8009308:	462b      	mov	r3, r5
 800930a:	1891      	adds	r1, r2, r2
 800930c:	6639      	str	r1, [r7, #96]	@ 0x60
 800930e:	415b      	adcs	r3, r3
 8009310:	667b      	str	r3, [r7, #100]	@ 0x64
 8009312:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009316:	4621      	mov	r1, r4
 8009318:	eb12 0801 	adds.w	r8, r2, r1
 800931c:	4629      	mov	r1, r5
 800931e:	eb43 0901 	adc.w	r9, r3, r1
 8009322:	f04f 0200 	mov.w	r2, #0
 8009326:	f04f 0300 	mov.w	r3, #0
 800932a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800932e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009336:	4690      	mov	r8, r2
 8009338:	4699      	mov	r9, r3
 800933a:	4623      	mov	r3, r4
 800933c:	eb18 0303 	adds.w	r3, r8, r3
 8009340:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009344:	462b      	mov	r3, r5
 8009346:	eb49 0303 	adc.w	r3, r9, r3
 800934a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800934e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009352:	2200      	movs	r2, #0
 8009354:	469a      	mov	sl, r3
 8009356:	4693      	mov	fp, r2
 8009358:	eb1a 030a 	adds.w	r3, sl, sl
 800935c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800935e:	eb4b 030b 	adc.w	r3, fp, fp
 8009362:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009364:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009368:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800936c:	f7f7 fc9c 	bl	8000ca8 <__aeabi_uldivmod>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4b64      	ldr	r3, [pc, #400]	@ (8009508 <LL_USART_SetBaudRate+0x238>)
 8009376:	fba3 2302 	umull	r2, r3, r3, r2
 800937a:	095b      	lsrs	r3, r3, #5
 800937c:	b29b      	uxth	r3, r3
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	b29c      	uxth	r4, r3
 8009382:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009386:	2200      	movs	r2, #0
 8009388:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800938c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009390:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8009394:	4642      	mov	r2, r8
 8009396:	464b      	mov	r3, r9
 8009398:	1891      	adds	r1, r2, r2
 800939a:	6539      	str	r1, [r7, #80]	@ 0x50
 800939c:	415b      	adcs	r3, r3
 800939e:	657b      	str	r3, [r7, #84]	@ 0x54
 80093a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80093a4:	4641      	mov	r1, r8
 80093a6:	1851      	adds	r1, r2, r1
 80093a8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80093aa:	4649      	mov	r1, r9
 80093ac:	414b      	adcs	r3, r1
 80093ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	f04f 0300 	mov.w	r3, #0
 80093b8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80093bc:	4659      	mov	r1, fp
 80093be:	00cb      	lsls	r3, r1, #3
 80093c0:	4651      	mov	r1, sl
 80093c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093c6:	4651      	mov	r1, sl
 80093c8:	00ca      	lsls	r2, r1, #3
 80093ca:	4610      	mov	r0, r2
 80093cc:	4619      	mov	r1, r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	4642      	mov	r2, r8
 80093d2:	189b      	adds	r3, r3, r2
 80093d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093d8:	464b      	mov	r3, r9
 80093da:	460a      	mov	r2, r1
 80093dc:	eb42 0303 	adc.w	r3, r2, r3
 80093e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80093e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80093e8:	2200      	movs	r2, #0
 80093ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093ee:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80093f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80093f6:	460b      	mov	r3, r1
 80093f8:	18db      	adds	r3, r3, r3
 80093fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80093fc:	4613      	mov	r3, r2
 80093fe:	eb42 0303 	adc.w	r3, r2, r3
 8009402:	647b      	str	r3, [r7, #68]	@ 0x44
 8009404:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009408:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800940c:	f7f7 fc4c 	bl	8000ca8 <__aeabi_uldivmod>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4611      	mov	r1, r2
 8009416:	4b3c      	ldr	r3, [pc, #240]	@ (8009508 <LL_USART_SetBaudRate+0x238>)
 8009418:	fba3 2301 	umull	r2, r3, r3, r1
 800941c:	095b      	lsrs	r3, r3, #5
 800941e:	2264      	movs	r2, #100	@ 0x64
 8009420:	fb02 f303 	mul.w	r3, r2, r3
 8009424:	1acb      	subs	r3, r1, r3
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800942c:	4b36      	ldr	r3, [pc, #216]	@ (8009508 <LL_USART_SetBaudRate+0x238>)
 800942e:	fba3 2302 	umull	r2, r3, r3, r2
 8009432:	095b      	lsrs	r3, r3, #5
 8009434:	b29b      	uxth	r3, r3
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	b29b      	uxth	r3, r3
 800943a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800943e:	b29b      	uxth	r3, r3
 8009440:	4423      	add	r3, r4
 8009442:	b29c      	uxth	r4, r3
 8009444:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009448:	2200      	movs	r2, #0
 800944a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800944e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009452:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8009456:	4642      	mov	r2, r8
 8009458:	464b      	mov	r3, r9
 800945a:	1891      	adds	r1, r2, r2
 800945c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800945e:	415b      	adcs	r3, r3
 8009460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009462:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009466:	4641      	mov	r1, r8
 8009468:	1851      	adds	r1, r2, r1
 800946a:	6339      	str	r1, [r7, #48]	@ 0x30
 800946c:	4649      	mov	r1, r9
 800946e:	414b      	adcs	r3, r1
 8009470:	637b      	str	r3, [r7, #52]	@ 0x34
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	f04f 0300 	mov.w	r3, #0
 800947a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800947e:	4659      	mov	r1, fp
 8009480:	00cb      	lsls	r3, r1, #3
 8009482:	4651      	mov	r1, sl
 8009484:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009488:	4651      	mov	r1, sl
 800948a:	00ca      	lsls	r2, r1, #3
 800948c:	4610      	mov	r0, r2
 800948e:	4619      	mov	r1, r3
 8009490:	4603      	mov	r3, r0
 8009492:	4642      	mov	r2, r8
 8009494:	189b      	adds	r3, r3, r2
 8009496:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800949a:	464b      	mov	r3, r9
 800949c:	460a      	mov	r2, r1
 800949e:	eb42 0303 	adc.w	r3, r2, r3
 80094a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80094a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094b0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80094b4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80094b8:	460b      	mov	r3, r1
 80094ba:	18db      	adds	r3, r3, r3
 80094bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094be:	4613      	mov	r3, r2
 80094c0:	eb42 0303 	adc.w	r3, r2, r3
 80094c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80094ca:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80094ce:	f7f7 fbeb 	bl	8000ca8 <__aeabi_uldivmod>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009508 <LL_USART_SetBaudRate+0x238>)
 80094d8:	fba3 1302 	umull	r1, r3, r3, r2
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	2164      	movs	r1, #100	@ 0x64
 80094e0:	fb01 f303 	mul.w	r3, r1, r3
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	3332      	adds	r3, #50	@ 0x32
 80094ea:	4a07      	ldr	r2, [pc, #28]	@ (8009508 <LL_USART_SetBaudRate+0x238>)
 80094ec:	fba2 2303 	umull	r2, r3, r2, r3
 80094f0:	095b      	lsrs	r3, r3, #5
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	f003 0307 	and.w	r3, r3, #7
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	4423      	add	r3, r4
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	461a      	mov	r2, r3
 8009500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009504:	609a      	str	r2, [r3, #8]
}
 8009506:	e108      	b.n	800971a <LL_USART_SetBaudRate+0x44a>
 8009508:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800950c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009510:	2200      	movs	r2, #0
 8009512:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009516:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800951a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800951e:	4642      	mov	r2, r8
 8009520:	464b      	mov	r3, r9
 8009522:	1891      	adds	r1, r2, r2
 8009524:	6239      	str	r1, [r7, #32]
 8009526:	415b      	adcs	r3, r3
 8009528:	627b      	str	r3, [r7, #36]	@ 0x24
 800952a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800952e:	4641      	mov	r1, r8
 8009530:	1854      	adds	r4, r2, r1
 8009532:	4649      	mov	r1, r9
 8009534:	eb43 0501 	adc.w	r5, r3, r1
 8009538:	f04f 0200 	mov.w	r2, #0
 800953c:	f04f 0300 	mov.w	r3, #0
 8009540:	00eb      	lsls	r3, r5, #3
 8009542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009546:	00e2      	lsls	r2, r4, #3
 8009548:	4614      	mov	r4, r2
 800954a:	461d      	mov	r5, r3
 800954c:	4643      	mov	r3, r8
 800954e:	18e3      	adds	r3, r4, r3
 8009550:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009554:	464b      	mov	r3, r9
 8009556:	eb45 0303 	adc.w	r3, r5, r3
 800955a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800955e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009562:	2200      	movs	r2, #0
 8009564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009568:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800956c:	f04f 0200 	mov.w	r2, #0
 8009570:	f04f 0300 	mov.w	r3, #0
 8009574:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8009578:	4629      	mov	r1, r5
 800957a:	008b      	lsls	r3, r1, #2
 800957c:	4621      	mov	r1, r4
 800957e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009582:	4621      	mov	r1, r4
 8009584:	008a      	lsls	r2, r1, #2
 8009586:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800958a:	f7f7 fb8d 	bl	8000ca8 <__aeabi_uldivmod>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4b65      	ldr	r3, [pc, #404]	@ (8009728 <LL_USART_SetBaudRate+0x458>)
 8009594:	fba3 2302 	umull	r2, r3, r3, r2
 8009598:	095b      	lsrs	r3, r3, #5
 800959a:	b29b      	uxth	r3, r3
 800959c:	011b      	lsls	r3, r3, #4
 800959e:	b29c      	uxth	r4, r3
 80095a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80095ae:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80095b2:	4642      	mov	r2, r8
 80095b4:	464b      	mov	r3, r9
 80095b6:	1891      	adds	r1, r2, r2
 80095b8:	61b9      	str	r1, [r7, #24]
 80095ba:	415b      	adcs	r3, r3
 80095bc:	61fb      	str	r3, [r7, #28]
 80095be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095c2:	4641      	mov	r1, r8
 80095c4:	1851      	adds	r1, r2, r1
 80095c6:	6139      	str	r1, [r7, #16]
 80095c8:	4649      	mov	r1, r9
 80095ca:	414b      	adcs	r3, r1
 80095cc:	617b      	str	r3, [r7, #20]
 80095ce:	f04f 0200 	mov.w	r2, #0
 80095d2:	f04f 0300 	mov.w	r3, #0
 80095d6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095da:	4659      	mov	r1, fp
 80095dc:	00cb      	lsls	r3, r1, #3
 80095de:	4651      	mov	r1, sl
 80095e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095e4:	4651      	mov	r1, sl
 80095e6:	00ca      	lsls	r2, r1, #3
 80095e8:	4610      	mov	r0, r2
 80095ea:	4619      	mov	r1, r3
 80095ec:	4603      	mov	r3, r0
 80095ee:	4642      	mov	r2, r8
 80095f0:	189b      	adds	r3, r3, r2
 80095f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095f6:	464b      	mov	r3, r9
 80095f8:	460a      	mov	r2, r1
 80095fa:	eb42 0303 	adc.w	r3, r2, r3
 80095fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009602:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009606:	2200      	movs	r2, #0
 8009608:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800960c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009610:	f04f 0200 	mov.w	r2, #0
 8009614:	f04f 0300 	mov.w	r3, #0
 8009618:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800961c:	4649      	mov	r1, r9
 800961e:	008b      	lsls	r3, r1, #2
 8009620:	4641      	mov	r1, r8
 8009622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009626:	4641      	mov	r1, r8
 8009628:	008a      	lsls	r2, r1, #2
 800962a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800962e:	f7f7 fb3b 	bl	8000ca8 <__aeabi_uldivmod>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	4611      	mov	r1, r2
 8009638:	4b3b      	ldr	r3, [pc, #236]	@ (8009728 <LL_USART_SetBaudRate+0x458>)
 800963a:	fba3 2301 	umull	r2, r3, r3, r1
 800963e:	095b      	lsrs	r3, r3, #5
 8009640:	2264      	movs	r2, #100	@ 0x64
 8009642:	fb02 f303 	mul.w	r3, r2, r3
 8009646:	1acb      	subs	r3, r1, r3
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	3332      	adds	r3, #50	@ 0x32
 800964c:	4a36      	ldr	r2, [pc, #216]	@ (8009728 <LL_USART_SetBaudRate+0x458>)
 800964e:	fba2 2303 	umull	r2, r3, r2, r3
 8009652:	095b      	lsrs	r3, r3, #5
 8009654:	b29b      	uxth	r3, r3
 8009656:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800965a:	b29b      	uxth	r3, r3
 800965c:	4423      	add	r3, r4
 800965e:	b29c      	uxth	r4, r3
 8009660:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009664:	2200      	movs	r2, #0
 8009666:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009668:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800966a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800966e:	4642      	mov	r2, r8
 8009670:	464b      	mov	r3, r9
 8009672:	1891      	adds	r1, r2, r2
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	415b      	adcs	r3, r3
 8009678:	60fb      	str	r3, [r7, #12]
 800967a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800967e:	4641      	mov	r1, r8
 8009680:	1851      	adds	r1, r2, r1
 8009682:	6039      	str	r1, [r7, #0]
 8009684:	4649      	mov	r1, r9
 8009686:	414b      	adcs	r3, r1
 8009688:	607b      	str	r3, [r7, #4]
 800968a:	f04f 0200 	mov.w	r2, #0
 800968e:	f04f 0300 	mov.w	r3, #0
 8009692:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009696:	4659      	mov	r1, fp
 8009698:	00cb      	lsls	r3, r1, #3
 800969a:	4651      	mov	r1, sl
 800969c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096a0:	4651      	mov	r1, sl
 80096a2:	00ca      	lsls	r2, r1, #3
 80096a4:	4610      	mov	r0, r2
 80096a6:	4619      	mov	r1, r3
 80096a8:	4603      	mov	r3, r0
 80096aa:	4642      	mov	r2, r8
 80096ac:	189b      	adds	r3, r3, r2
 80096ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80096b0:	464b      	mov	r3, r9
 80096b2:	460a      	mov	r2, r1
 80096b4:	eb42 0303 	adc.w	r3, r2, r3
 80096b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80096ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80096be:	2200      	movs	r2, #0
 80096c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80096d0:	4649      	mov	r1, r9
 80096d2:	008b      	lsls	r3, r1, #2
 80096d4:	4641      	mov	r1, r8
 80096d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096da:	4641      	mov	r1, r8
 80096dc:	008a      	lsls	r2, r1, #2
 80096de:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80096e2:	f7f7 fae1 	bl	8000ca8 <__aeabi_uldivmod>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009728 <LL_USART_SetBaudRate+0x458>)
 80096ec:	fba3 1302 	umull	r1, r3, r3, r2
 80096f0:	095b      	lsrs	r3, r3, #5
 80096f2:	2164      	movs	r1, #100	@ 0x64
 80096f4:	fb01 f303 	mul.w	r3, r1, r3
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	011b      	lsls	r3, r3, #4
 80096fc:	3332      	adds	r3, #50	@ 0x32
 80096fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009728 <LL_USART_SetBaudRate+0x458>)
 8009700:	fba2 2303 	umull	r2, r3, r2, r3
 8009704:	095b      	lsrs	r3, r3, #5
 8009706:	b29b      	uxth	r3, r3
 8009708:	f003 030f 	and.w	r3, r3, #15
 800970c:	b29b      	uxth	r3, r3
 800970e:	4423      	add	r3, r4
 8009710:	b29b      	uxth	r3, r3
 8009712:	461a      	mov	r2, r3
 8009714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009718:	609a      	str	r2, [r3, #8]
}
 800971a:	bf00      	nop
 800971c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009720:	46bd      	mov	sp, r7
 8009722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009726:	bf00      	nop
 8009728:	51eb851f 	.word	0x51eb851f

0800972c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800973a:	2300      	movs	r3, #0
 800973c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff fd8c 	bl	800925c <LL_USART_IsEnabled>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d15e      	bne.n	8009808 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8009752:	f023 030c 	bic.w	r3, r3, #12
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	6851      	ldr	r1, [r2, #4]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	68d2      	ldr	r2, [r2, #12]
 800975e:	4311      	orrs	r1, r2
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	6912      	ldr	r2, [r2, #16]
 8009764:	4311      	orrs	r1, r2
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	6992      	ldr	r2, [r2, #24]
 800976a:	430a      	orrs	r2, r1
 800976c:	431a      	orrs	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fd83 	bl	8009284 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fd90 	bl	80092aa <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800978a:	f107 0308 	add.w	r3, r7, #8
 800978e:	4618      	mov	r0, r3
 8009790:	f7ff fc9a 	bl	80090c8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a1f      	ldr	r2, [pc, #124]	@ (8009814 <LL_USART_Init+0xe8>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d102      	bne.n	80097a2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	61bb      	str	r3, [r7, #24]
 80097a0:	e021      	b.n	80097e6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009818 <LL_USART_Init+0xec>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d102      	bne.n	80097b0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	61bb      	str	r3, [r7, #24]
 80097ae:	e01a      	b.n	80097e6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a1a      	ldr	r2, [pc, #104]	@ (800981c <LL_USART_Init+0xf0>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d102      	bne.n	80097be <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	61bb      	str	r3, [r7, #24]
 80097bc:	e013      	b.n	80097e6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a17      	ldr	r2, [pc, #92]	@ (8009820 <LL_USART_Init+0xf4>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d102      	bne.n	80097cc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	61bb      	str	r3, [r7, #24]
 80097ca:	e00c      	b.n	80097e6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a15      	ldr	r2, [pc, #84]	@ (8009824 <LL_USART_Init+0xf8>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d102      	bne.n	80097da <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	61bb      	str	r3, [r7, #24]
 80097d8:	e005      	b.n	80097e6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a12      	ldr	r2, [pc, #72]	@ (8009828 <LL_USART_Init+0xfc>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d101      	bne.n	80097e6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00d      	beq.n	8009808 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d009      	beq.n	8009808 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80097f4:	2300      	movs	r3, #0
 80097f6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8009800:	69b9      	ldr	r1, [r7, #24]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7ff fd64 	bl	80092d0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009808:	7ffb      	ldrb	r3, [r7, #31]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3720      	adds	r7, #32
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	40011000 	.word	0x40011000
 8009818:	40004400 	.word	0x40004400
 800981c:	40004800 	.word	0x40004800
 8009820:	40011400 	.word	0x40011400
 8009824:	40004c00 	.word	0x40004c00
 8009828:	40005000 	.word	0x40005000

0800982c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	fbb2 f3f3 	udiv	r3, r2, r3
 800983e:	4a07      	ldr	r2, [pc, #28]	@ (800985c <LL_InitTick+0x30>)
 8009840:	3b01      	subs	r3, #1
 8009842:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8009844:	4b05      	ldr	r3, [pc, #20]	@ (800985c <LL_InitTick+0x30>)
 8009846:	2200      	movs	r2, #0
 8009848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800984a:	4b04      	ldr	r3, [pc, #16]	@ (800985c <LL_InitTick+0x30>)
 800984c:	2205      	movs	r2, #5
 800984e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	e000e010 	.word	0xe000e010

08009860 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8009868:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff ffdd 	bl	800982c <LL_InitTick>
}
 8009872:	bf00      	nop
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
	...

0800987c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8009884:	4a04      	ldr	r2, [pc, #16]	@ (8009898 <LL_SetSystemCoreClock+0x1c>)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6013      	str	r3, [r2, #0]
}
 800988a:	bf00      	nop
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	200003b0 	.word	0x200003b0

0800989c <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 80098a0:	4b0d      	ldr	r3, [pc, #52]	@ (80098d8 <SCH_Initialize+0x3c>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 80098a6:	4b0d      	ldr	r3, [pc, #52]	@ (80098dc <SCH_Initialize+0x40>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 80098ac:	4b0c      	ldr	r3, [pc, #48]	@ (80098e0 <SCH_Initialize+0x44>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 80098b2:	2290      	movs	r2, #144	@ 0x90
 80098b4:	2100      	movs	r1, #0
 80098b6:	480b      	ldr	r0, [pc, #44]	@ (80098e4 <SCH_Initialize+0x48>)
 80098b8:	f003 ffcc 	bl	800d854 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 80098bc:	2290      	movs	r2, #144	@ 0x90
 80098be:	2100      	movs	r1, #0
 80098c0:	4809      	ldr	r0, [pc, #36]	@ (80098e8 <SCH_Initialize+0x4c>)
 80098c2:	f003 ffc7 	bl	800d854 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 80098c6:	2214      	movs	r2, #20
 80098c8:	2100      	movs	r1, #0
 80098ca:	4808      	ldr	r0, [pc, #32]	@ (80098ec <SCH_Initialize+0x50>)
 80098cc:	f003 ffc2 	bl	800d854 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 80098d0:	f7f7 fefc 	bl	80016cc <systick_timer_init>
}
 80098d4:	bf00      	nop
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20004c74 	.word	0x20004c74
 80098dc:	20004bdc 	.word	0x20004bdc
 80098e0:	20004c70 	.word	0x20004c70
 80098e4:	20004b4c 	.word	0x20004b4c
 80098e8:	20004be0 	.word	0x20004be0
 80098ec:	20004c78 	.word	0x20004c78

080098f0 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	6039      	str	r1, [r7, #0]
 80098fa:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d804      	bhi.n	800990c <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	4904      	ldr	r1, [pc, #16]	@ (8009918 <SCH_TIM_Start+0x28>)
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	20004c78 	.word	0x20004c78

0800991c <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	4603      	mov	r3, r0
 8009924:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 8009926:	79fb      	ldrb	r3, [r7, #7]
 8009928:	4a06      	ldr	r2, [pc, #24]	@ (8009944 <SCH_TIM_HasCompleted+0x28>)
 800992a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800992e:	2b00      	cmp	r3, #0
 8009930:	bf0c      	ite	eq
 8009932:	2301      	moveq	r3, #1
 8009934:	2300      	movne	r3, #0
 8009936:	b2db      	uxtb	r3, r3
}
 8009938:	4618      	mov	r0, r3
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	20004c78 	.word	0x20004c78

08009948 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d028      	beq.n	80099ae <SCH_TASK_CreateTask+0x66>
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d025      	beq.n	80099ae <SCH_TASK_CreateTask+0x66>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 8009962:	4b16      	ldr	r3, [pc, #88]	@ (80099bc <SCH_TASK_CreateTask+0x74>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b0a      	cmp	r3, #10
 8009968:	d821      	bhi.n	80099ae <SCH_TASK_CreateTask+0x66>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 800996a:	4b14      	ldr	r3, [pc, #80]	@ (80099bc <SCH_TASK_CreateTask+0x74>)
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	4613      	mov	r3, r2
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	4413      	add	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4a11      	ldr	r2, [pc, #68]	@ (80099c0 <SCH_TASK_CreateTask+0x78>)
 800997a:	4413      	add	r3, r2
 800997c:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2200      	movs	r2, #0
 8009988:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = RESET;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2200      	movs	r2, #0
 800998e:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2201      	movs	r2, #1
 8009994:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 8009996:	4b09      	ldr	r3, [pc, #36]	@ (80099bc <SCH_TASK_CreateTask+0x74>)
 8009998:	781a      	ldrb	r2, [r3, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800999e:	4b07      	ldr	r3, [pc, #28]	@ (80099bc <SCH_TASK_CreateTask+0x74>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	3301      	adds	r3, #1
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	4b05      	ldr	r3, [pc, #20]	@ (80099bc <SCH_TASK_CreateTask+0x74>)
 80099a8:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	20004bdc 	.word	0x20004bdc
 80099c0:	20004b4c 	.word	0x20004b4c

080099c4 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 80099ca:	4b42      	ldr	r3, [pc, #264]	@ (8009ad4 <SCH_RunSystemTickTimer+0x110>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	3301      	adds	r3, #1
 80099d0:	4a40      	ldr	r2, [pc, #256]	@ (8009ad4 <SCH_RunSystemTickTimer+0x110>)
 80099d2:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
 80099d8:	e025      	b.n	8009a26 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 80099da:	7bfa      	ldrb	r2, [r7, #15]
 80099dc:	4613      	mov	r3, r2
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	4413      	add	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4a3c      	ldr	r2, [pc, #240]	@ (8009ad8 <SCH_RunSystemTickTimer+0x114>)
 80099e6:	4413      	add	r3, r2
 80099e8:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d115      	bne.n	8009a20 <SCH_RunSystemTickTimer+0x5c>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d111      	bne.n	8009a20 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d305      	bcc.n	8009a20 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	3301      	adds	r3, #1
 8009a24:	73fb      	strb	r3, [r7, #15]
 8009a26:	4b2d      	ldr	r3, [pc, #180]	@ (8009adc <SCH_RunSystemTickTimer+0x118>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	7bfa      	ldrb	r2, [r7, #15]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d3d4      	bcc.n	80099da <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8009a30:	2300      	movs	r3, #0
 8009a32:	73bb      	strb	r3, [r7, #14]
 8009a34:	e02b      	b.n	8009a8e <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 8009a36:	7bba      	ldrb	r2, [r7, #14]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	005b      	lsls	r3, r3, #1
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4a27      	ldr	r2, [pc, #156]	@ (8009ae0 <SCH_RunSystemTickTimer+0x11c>)
 8009a42:	4413      	add	r3, r2
 8009a44:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d11c      	bne.n	8009a88 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d310      	bcc.n	8009a88 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	bf0c      	ite	eq
 8009a7c:	2301      	moveq	r3, #1
 8009a7e:	2300      	movne	r3, #0
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	461a      	mov	r2, r3
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	73bb      	strb	r3, [r7, #14]
 8009a8e:	4b15      	ldr	r3, [pc, #84]	@ (8009ae4 <SCH_RunSystemTickTimer+0x120>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	7bba      	ldrb	r2, [r7, #14]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d3ce      	bcc.n	8009a36 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73bb      	strb	r3, [r7, #14]
 8009a9c:	e010      	b.n	8009ac0 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
 8009aa0:	4a11      	ldr	r2, [pc, #68]	@ (8009ae8 <SCH_RunSystemTickTimer+0x124>)
 8009aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d007      	beq.n	8009aba <SCH_RunSystemTickTimer+0xf6>
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	4a0e      	ldr	r2, [pc, #56]	@ (8009ae8 <SCH_RunSystemTickTimer+0x124>)
 8009aae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009ab2:	3a01      	subs	r2, #1
 8009ab4:	490c      	ldr	r1, [pc, #48]	@ (8009ae8 <SCH_RunSystemTickTimer+0x124>)
 8009ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	3301      	adds	r3, #1
 8009abe:	73bb      	strb	r3, [r7, #14]
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d9eb      	bls.n	8009a9e <SCH_RunSystemTickTimer+0xda>
}
 8009ac6:	bf00      	nop
 8009ac8:	bf00      	nop
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr
 8009ad4:	20004c74 	.word	0x20004c74
 8009ad8:	20004b4c 	.word	0x20004b4c
 8009adc:	20004bdc 	.word	0x20004bdc
 8009ae0:	20004be0 	.word	0x20004be0
 8009ae4:	20004c70 	.word	0x20004c70
 8009ae8:	20004c78 	.word	0x20004c78

08009aec <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8009af0:	f7f7 fddc 	bl	80016ac <systick_timer_start>
}
 8009af4:	bf00      	nop
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
 8009b02:	e01e      	b.n	8009b42 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8009b04:	7bfa      	ldrb	r2, [r7, #15]
 8009b06:	4613      	mov	r3, r2
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4a23      	ldr	r2, [pc, #140]	@ (8009b9c <SCH_HandleScheduledTask+0xa4>)
 8009b10:	4413      	add	r3, r2
 8009b12:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	885b      	ldrh	r3, [r3, #2]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d10f      	bne.n	8009b3c <SCH_HandleScheduledTask+0x44>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d10b      	bne.n	8009b3c <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	73fb      	strb	r3, [r7, #15]
 8009b42:	4b17      	ldr	r3, [pc, #92]	@ (8009ba0 <SCH_HandleScheduledTask+0xa8>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	7bfa      	ldrb	r2, [r7, #15]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d3db      	bcc.n	8009b04 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73bb      	strb	r3, [r7, #14]
 8009b50:	e01a      	b.n	8009b88 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 8009b52:	7bba      	ldrb	r2, [r7, #14]
 8009b54:	4613      	mov	r3, r2
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	4413      	add	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4a11      	ldr	r2, [pc, #68]	@ (8009ba4 <SCH_HandleScheduledTask+0xac>)
 8009b5e:	4413      	add	r3, r2
 8009b60:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	885b      	ldrh	r3, [r3, #2]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d10b      	bne.n	8009b82 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	3301      	adds	r3, #1
 8009b86:	73bb      	strb	r3, [r7, #14]
 8009b88:	4b07      	ldr	r3, [pc, #28]	@ (8009ba8 <SCH_HandleScheduledTask+0xb0>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	7bba      	ldrb	r2, [r7, #14]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d3df      	bcc.n	8009b52 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8009b92:	bf00      	nop
 8009b94:	bf00      	nop
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20004b4c 	.word	0x20004b4c
 8009ba0:	20004bdc 	.word	0x20004bdc
 8009ba4:	20004be0 	.word	0x20004be0
 8009ba8:	20004c70 	.word	0x20004c70

08009bac <SCH_Delay>:
  * @brief  Function to create a delay without affecting other tasks
  * @param  uint32_t delayInMs - delay time in milliseconds
  * @retval None
  *****************************************************************************/
void SCH_Delay(uint32_t delayInMs)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
    // Start the delay timer
    SCH_TIM_Start(SCH_TIM_DELAY, delayInMs);
 8009bb4:	6879      	ldr	r1, [r7, #4]
 8009bb6:	2002      	movs	r0, #2
 8009bb8:	f7ff fe9a 	bl	80098f0 <SCH_TIM_Start>

    // Wait until the delay timer completes
    while(!SCH_TIM_HasCompleted(SCH_TIM_DELAY));
 8009bbc:	bf00      	nop
 8009bbe:	2002      	movs	r0, #2
 8009bc0:	f7ff feac 	bl	800991c <SCH_TIM_HasCompleted>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d0f9      	beq.n	8009bbe <SCH_Delay+0x12>
}
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint8_t size)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	6039      	str	r1, [r7, #0]
 8009bde:	80fb      	strh	r3, [r7, #6]
 8009be0:	4613      	mov	r3, r2
 8009be2:	717b      	strb	r3, [r7, #5]
    uint8_t x;
    uint16_t crc = initial_value;
 8009be4:	88fb      	ldrh	r3, [r7, #6]
 8009be6:	81fb      	strh	r3, [r7, #14]

    while(size--)
 8009be8:	e023      	b.n	8009c32 <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 8009bea:	89fb      	ldrh	r3, [r7, #14]
 8009bec:	0a1b      	lsrs	r3, r3, #8
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	1c59      	adds	r1, r3, #1
 8009bf6:	6039      	str	r1, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	4053      	eors	r3, r2
 8009bfc:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 8009bfe:	7b7b      	ldrb	r3, [r7, #13]
 8009c00:	091b      	lsrs	r3, r3, #4
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	7b7b      	ldrb	r3, [r7, #13]
 8009c06:	4053      	eors	r3, r2
 8009c08:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 8009c0a:	89fb      	ldrh	r3, [r7, #14]
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	b21a      	sxth	r2, r3
 8009c10:	7b7b      	ldrb	r3, [r7, #13]
 8009c12:	b21b      	sxth	r3, r3
 8009c14:	031b      	lsls	r3, r3, #12
 8009c16:	b21b      	sxth	r3, r3
 8009c18:	4053      	eors	r3, r2
 8009c1a:	b21a      	sxth	r2, r3
 8009c1c:	7b7b      	ldrb	r3, [r7, #13]
 8009c1e:	b21b      	sxth	r3, r3
 8009c20:	015b      	lsls	r3, r3, #5
 8009c22:	b21b      	sxth	r3, r3
 8009c24:	4053      	eors	r3, r2
 8009c26:	b21a      	sxth	r2, r3
 8009c28:	7b7b      	ldrb	r3, [r7, #13]
 8009c2a:	b21b      	sxth	r3, r3
 8009c2c:	4053      	eors	r3, r2
 8009c2e:	b21b      	sxth	r3, r3
 8009c30:	81fb      	strh	r3, [r7, #14]
    while(size--)
 8009c32:	797b      	ldrb	r3, [r7, #5]
 8009c34:	1e5a      	subs	r2, r3, #1
 8009c36:	717a      	strb	r2, [r7, #5]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1d6      	bne.n	8009bea <crc16_CCITT+0x16>
    }

    return crc;
 8009c3c:	89fb      	ldrh	r3, [r7, #14]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
	...

08009c4c <fsp_init>:
uint8_t fsp_my_adr;

volatile uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 8009c56:	4a06      	ldr	r2, [pc, #24]	@ (8009c70 <fsp_init+0x24>)
 8009c58:	79fb      	ldrb	r3, [r7, #7]
 8009c5a:	7013      	strb	r3, [r2, #0]

    fsp_decode_pos = 0;
 8009c5c:	4b05      	ldr	r3, [pc, #20]	@ (8009c74 <fsp_init+0x28>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	701a      	strb	r2, [r3, #0]
}
 8009c62:	bf00      	nop
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	20004c8c 	.word	0x20004c8c
 8009c74:	20004c8d 	.word	0x20004c8d

08009c78 <fsp_gen_cmd_pkt>:
        fsp_gen_pkt((void*)0, data, data_len, dst_adr, FSP_PKT_TYPE_DATA, fsp);
    }
}

void fsp_gen_cmd_pkt(uint8_t cmd, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	4603      	mov	r3, r0
 8009c82:	71fb      	strb	r3, [r7, #7]
 8009c84:	460b      	mov	r3, r1
 8009c86:	71bb      	strb	r3, [r7, #6]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 8009c8c:	797b      	ldrb	r3, [r7, #5]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d10b      	bne.n	8009caa <fsp_gen_cmd_pkt+0x32>
    {
        fsp_gen_pkt(&cmd,(void*)0, 0, dst_adr, FSP_PKT_TYPE_CMD_WITH_ACK, fsp);
 8009c92:	79ba      	ldrb	r2, [r7, #6]
 8009c94:	1df8      	adds	r0, r7, #7
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	2304      	movs	r3, #4
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	f000 f83a 	bl	8009d1c <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
    }
}
 8009ca8:	e00a      	b.n	8009cc0 <fsp_gen_cmd_pkt+0x48>
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
 8009caa:	79ba      	ldrb	r2, [r7, #6]
 8009cac:	1df8      	adds	r0, r7, #7
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2100      	movs	r1, #0
 8009cbc:	f000 f82e 	bl	8009d1c <fsp_gen_pkt>
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <fsp_gen_cmd_w_data_pkt>:

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af02      	add	r7, sp, #8
 8009cce:	6039      	str	r1, [r7, #0]
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	71fb      	strb	r3, [r7, #7]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	71bb      	strb	r3, [r7, #6]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 8009ce0:	7c3b      	ldrb	r3, [r7, #16]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d10b      	bne.n	8009cfe <fsp_gen_cmd_w_data_pkt+0x36>
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 8009ce6:	7979      	ldrb	r1, [r7, #5]
 8009ce8:	79ba      	ldrb	r2, [r7, #6]
 8009cea:	1df8      	adds	r0, r7, #7
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	9301      	str	r3, [sp, #4]
 8009cf0:	2308      	movs	r3, #8
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	f000 f810 	bl	8009d1c <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
    }
}
 8009cfc:	e00a      	b.n	8009d14 <fsp_gen_cmd_w_data_pkt+0x4c>
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 8009cfe:	7979      	ldrb	r1, [r7, #5]
 8009d00:	79ba      	ldrb	r2, [r7, #6]
 8009d02:	1df8      	adds	r0, r7, #7
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	2307      	movs	r3, #7
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	f000 f804 	bl	8009d1c <fsp_gen_pkt>
}
 8009d14:	bf00      	nop
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <fsp_gen_pkt>:
    fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}


void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	4611      	mov	r1, r2
 8009d28:	461a      	mov	r2, r3
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	71fb      	strb	r3, [r7, #7]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	71bb      	strb	r3, [r7, #6]
    fsp->sod        = FSP_PKT_SOD;
 8009d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d34:	22ca      	movs	r2, #202	@ 0xca
 8009d36:	701a      	strb	r2, [r3, #0]
    fsp->src_adr    = fsp_my_adr;
 8009d38:	4b25      	ldr	r3, [pc, #148]	@ (8009dd0 <fsp_gen_pkt+0xb4>)
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3e:	705a      	strb	r2, [r3, #1]
    fsp->dst_adr    = dst_adr;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d42:	79ba      	ldrb	r2, [r7, #6]
 8009d44:	709a      	strb	r2, [r3, #2]
    fsp->length     = payload_len;
 8009d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d48:	79fa      	ldrb	r2, [r7, #7]
 8009d4a:	70da      	strb	r2, [r3, #3]
    fsp->type       = type;
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009d52:	711a      	strb	r2, [r3, #4]

    uint8_t i = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	75fb      	strb	r3, [r7, #23]
    uint8_t j = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	75bb      	strb	r3, [r7, #22]

    // Copy cmd payload
    if (cmd != NULL) {
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00e      	beq.n	8009d80 <fsp_gen_pkt+0x64>
        fsp->length++; // length + byte cmd
 8009d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d64:	78db      	ldrb	r3, [r3, #3]
 8009d66:	3301      	adds	r3, #1
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6c:	70da      	strb	r2, [r3, #3]
        fsp->payload[j++] = *cmd;
 8009d6e:	7dbb      	ldrb	r3, [r7, #22]
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	75ba      	strb	r2, [r7, #22]
 8009d74:	4619      	mov	r1, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	781a      	ldrb	r2, [r3, #0]
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	440b      	add	r3, r1
 8009d7e:	715a      	strb	r2, [r3, #5]
    }

    // Copy payload fsp->payload
    for(i=0; i<payload_len; i++)
 8009d80:	2300      	movs	r3, #0
 8009d82:	75fb      	strb	r3, [r7, #23]
 8009d84:	e00d      	b.n	8009da2 <fsp_gen_pkt+0x86>
    {
        fsp->payload[j++] = payload[i];
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	441a      	add	r2, r3
 8009d8c:	7dbb      	ldrb	r3, [r7, #22]
 8009d8e:	1c59      	adds	r1, r3, #1
 8009d90:	75b9      	strb	r1, [r7, #22]
 8009d92:	4619      	mov	r1, r3
 8009d94:	7812      	ldrb	r2, [r2, #0]
 8009d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d98:	440b      	add	r3, r1
 8009d9a:	715a      	strb	r2, [r3, #5]
    for(i=0; i<payload_len; i++)
 8009d9c:	7dfb      	ldrb	r3, [r7, #23]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	75fb      	strb	r3, [r7, #23]
 8009da2:	7dfa      	ldrb	r2, [r7, #23]
 8009da4:	79fb      	ldrb	r3, [r7, #7]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d3ed      	bcc.n	8009d86 <fsp_gen_pkt+0x6a>
    }

    fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 8009daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dac:	1c59      	adds	r1, r3, #1
 8009dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db0:	78db      	ldrb	r3, [r3, #3]
 8009db2:	3304      	adds	r3, #4
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	461a      	mov	r2, r3
 8009db8:	2000      	movs	r0, #0
 8009dba:	f7ff ff0b 	bl	8009bd4 <crc16_CCITT>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc4:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

}
 8009dc8:	bf00      	nop
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	20004c8c 	.word	0x20004c8c

08009dd4 <frame_encode>:


void frame_encode(fsp_packet_t *fsp, uint8_t *frame, uint8_t *frame_len)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b0c8      	sub	sp, #288	@ 0x120
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009dde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009de2:	6018      	str	r0, [r3, #0]
 8009de4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009de8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009dec:	6019      	str	r1, [r3, #0]
 8009dee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009df2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009df6:	601a      	str	r2, [r3, #0]
    //frame
    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t encoded_length = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    encoded_frame[encoded_length++] = fsp->sod;
 8009dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009e08:	461a      	mov	r2, r3
 8009e0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009e0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	7819      	ldrb	r1, [r3, #0]
 8009e16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009e1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e1e:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->src_adr;
 8009e20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009e30:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	7859      	ldrb	r1, [r3, #1]
 8009e38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009e3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e40:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->dst_adr;
 8009e42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009e52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	7899      	ldrb	r1, [r3, #2]
 8009e5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009e5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e62:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->length;
 8009e64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009e74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	78d9      	ldrb	r1, [r3, #3]
 8009e7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009e80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009e84:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->type;
 8009e86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009e90:	461a      	mov	r2, r3
 8009e92:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009e96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	7919      	ldrb	r1, [r3, #4]
 8009e9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009ea2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ea6:	5499      	strb	r1, [r3, r2]

    for(int i=0; i<fsp->length; i++)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8009eae:	e088      	b.n	8009fc2 <frame_encode+0x1ee>
    {
        if (fsp->payload[i] == FSP_PKT_SOD) {
 8009eb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009eb4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009ebe:	4413      	add	r3, r2
 8009ec0:	3305      	adds	r3, #5
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2bca      	cmp	r3, #202	@ 0xca
 8009ec6:	d118      	bne.n	8009efa <frame_encode+0x126>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8009ec8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009ed8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009edc:	21bd      	movs	r1, #189	@ 0xbd
 8009ede:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 8009ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009eea:	461a      	mov	r2, r3
 8009eec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009ef0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009ef4:	21dc      	movs	r1, #220	@ 0xdc
 8009ef6:	5499      	strb	r1, [r3, r2]
 8009ef8:	e05e      	b.n	8009fb8 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_EOF) {
 8009efa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009efe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009f08:	4413      	add	r3, r2
 8009f0a:	3305      	adds	r3, #5
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	2bef      	cmp	r3, #239	@ 0xef
 8009f10:	d118      	bne.n	8009f44 <frame_encode+0x170>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8009f12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f16:	1c5a      	adds	r2, r3, #1
 8009f18:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009f22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f26:	21bd      	movs	r1, #189	@ 0xbd
 8009f28:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 8009f2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009f34:	461a      	mov	r2, r3
 8009f36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009f3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f3e:	21de      	movs	r1, #222	@ 0xde
 8009f40:	5499      	strb	r1, [r3, r2]
 8009f42:	e039      	b.n	8009fb8 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_ESC) {
 8009f44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009f48:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009f52:	4413      	add	r3, r2
 8009f54:	3305      	adds	r3, #5
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2bbd      	cmp	r3, #189	@ 0xbd
 8009f5a:	d118      	bne.n	8009f8e <frame_encode+0x1ba>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8009f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009f66:	461a      	mov	r2, r3
 8009f68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009f6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f70:	21bd      	movs	r1, #189	@ 0xbd
 8009f72:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TESC;
 8009f74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009f84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f88:	21db      	movs	r1, #219	@ 0xdb
 8009f8a:	5499      	strb	r1, [r3, r2]
 8009f8c:	e014      	b.n	8009fb8 <frame_encode+0x1e4>
        } else {
            encoded_frame[encoded_length++] = fsp->payload[i];
 8009f8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8009f98:	4619      	mov	r1, r3
 8009f9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009f9e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009fa8:	4413      	add	r3, r2
 8009faa:	3305      	adds	r3, #5
 8009fac:	781a      	ldrb	r2, [r3, #0]
 8009fae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009fb2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fb6:	545a      	strb	r2, [r3, r1]
    for(int i=0; i<fsp->length; i++)
 8009fb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8009fc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009fc6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	78db      	ldrb	r3, [r3, #3]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	f6ff af6b 	blt.w	8009eb0 <frame_encode+0xdc>
        }
    }

    // CRC16
    uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 8009fda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009fde:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8009fe8:	0a1b      	lsrs	r3, r3, #8
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 8009ff0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009ff4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8009ffe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

    if (crc_msb == FSP_PKT_SOD) {
 800a002:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a006:	2bca      	cmp	r3, #202	@ 0xca
 800a008:	d118      	bne.n	800a03c <frame_encode+0x268>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800a00a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a014:	461a      	mov	r2, r3
 800a016:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a01a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a01e:	21bd      	movs	r1, #189	@ 0xbd
 800a020:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800a022:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a02c:	461a      	mov	r2, r3
 800a02e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a032:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a036:	21dc      	movs	r1, #220	@ 0xdc
 800a038:	5499      	strb	r1, [r3, r2]
 800a03a:	e046      	b.n	800a0ca <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_EOF) {
 800a03c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a040:	2bef      	cmp	r3, #239	@ 0xef
 800a042:	d118      	bne.n	800a076 <frame_encode+0x2a2>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800a044:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a04e:	461a      	mov	r2, r3
 800a050:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a054:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a058:	21bd      	movs	r1, #189	@ 0xbd
 800a05a:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800a05c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a066:	461a      	mov	r2, r3
 800a068:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a06c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a070:	21de      	movs	r1, #222	@ 0xde
 800a072:	5499      	strb	r1, [r3, r2]
 800a074:	e029      	b.n	800a0ca <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_ESC) {
 800a076:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a07a:	2bbd      	cmp	r3, #189	@ 0xbd
 800a07c:	d118      	bne.n	800a0b0 <frame_encode+0x2dc>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800a07e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a082:	1c5a      	adds	r2, r3, #1
 800a084:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a088:	461a      	mov	r2, r3
 800a08a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a08e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a092:	21bd      	movs	r1, #189	@ 0xbd
 800a094:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800a096:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a0a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0aa:	21db      	movs	r1, #219	@ 0xdb
 800a0ac:	5499      	strb	r1, [r3, r2]
 800a0ae:	e00c      	b.n	800a0ca <frame_encode+0x2f6>
    } else {
        encoded_frame[encoded_length++] = crc_msb;
 800a0b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a0c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0c4:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800a0c8:	545a      	strb	r2, [r3, r1]
    }

    if (crc_lsb == FSP_PKT_SOD) {
 800a0ca:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a0ce:	2bca      	cmp	r3, #202	@ 0xca
 800a0d0:	d118      	bne.n	800a104 <frame_encode+0x330>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800a0d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a0dc:	461a      	mov	r2, r3
 800a0de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a0e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0e6:	21bd      	movs	r1, #189	@ 0xbd
 800a0e8:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800a0ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a0fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0fe:	21dc      	movs	r1, #220	@ 0xdc
 800a100:	5499      	strb	r1, [r3, r2]
 800a102:	e046      	b.n	800a192 <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_EOF) {
 800a104:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a108:	2bef      	cmp	r3, #239	@ 0xef
 800a10a:	d118      	bne.n	800a13e <frame_encode+0x36a>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800a10c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a116:	461a      	mov	r2, r3
 800a118:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a11c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a120:	21bd      	movs	r1, #189	@ 0xbd
 800a122:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800a124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a12e:	461a      	mov	r2, r3
 800a130:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a134:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a138:	21de      	movs	r1, #222	@ 0xde
 800a13a:	5499      	strb	r1, [r3, r2]
 800a13c:	e029      	b.n	800a192 <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_ESC) {
 800a13e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a142:	2bbd      	cmp	r3, #189	@ 0xbd
 800a144:	d118      	bne.n	800a178 <frame_encode+0x3a4>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800a146:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a14a:	1c5a      	adds	r2, r3, #1
 800a14c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a150:	461a      	mov	r2, r3
 800a152:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a156:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a15a:	21bd      	movs	r1, #189	@ 0xbd
 800a15c:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800a15e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a168:	461a      	mov	r2, r3
 800a16a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a16e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a172:	21db      	movs	r1, #219	@ 0xdb
 800a174:	5499      	strb	r1, [r3, r2]
 800a176:	e00c      	b.n	800a192 <frame_encode+0x3be>
    } else {
        encoded_frame[encoded_length++] = crc_lsb;
 800a178:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a182:	4619      	mov	r1, r3
 800a184:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a188:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a18c:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800a190:	545a      	strb	r2, [r3, r1]
    }

    encoded_frame[encoded_length++] = FSP_PKT_EOF;
 800a192:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800a19c:	461a      	mov	r2, r3
 800a19e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a1a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a1a6:	21ef      	movs	r1, #239	@ 0xef
 800a1a8:	5499      	strb	r1, [r3, r2]

    memcpy(frame, encoded_frame, encoded_length);
 800a1aa:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800a1ae:	f107 0114 	add.w	r1, r7, #20
 800a1b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a1b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800a1ba:	6818      	ldr	r0, [r3, #0]
 800a1bc:	f003 fbc9 	bl	800d952 <memcpy>
    *frame_len = encoded_length;
 800a1c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800a1c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800a1ce:	701a      	strb	r2, [r3, #0]
}
 800a1d0:	bf00      	nop
 800a1d2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <frame_decode>:
                return FSP_PKT_ERROR;
            }
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a1e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a1ec:	6018      	str	r0, [r3, #0]
 800a1ee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a1f2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a1fc:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800a200:	460a      	mov	r2, r1
 800a202:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];


	if (length < FSP_PKT_MIN_LENGTH - 2) {
 800a216:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a21a:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b05      	cmp	r3, #5
 800a222:	d862      	bhi.n	800a2ea <frame_decode+0x10e>
	        return FSP_PKT_INVALID;
 800a224:	2302      	movs	r3, #2
 800a226:	e133      	b.n	800a490 <frame_decode+0x2b4>
	}


	while (i < length){
        uint8_t byte = buffer[i++];
 800a228:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a232:	461a      	mov	r2, r3
 800a234:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a238:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4413      	add	r3, r2
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (escape) {
 800a246:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d038      	beq.n	800a2c0 <frame_decode+0xe4>
            if (byte == FSP_PKT_TSOD) {
 800a24e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800a252:	2bdc      	cmp	r3, #220	@ 0xdc
 800a254:	d10c      	bne.n	800a270 <frame_decode+0x94>
                decoded_payload[j++] = FSP_PKT_SOD;
 800a256:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800a260:	461a      	mov	r2, r3
 800a262:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a266:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800a26a:	21ca      	movs	r1, #202	@ 0xca
 800a26c:	5499      	strb	r1, [r3, r2]
 800a26e:	e023      	b.n	800a2b8 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TEOF) {
 800a270:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800a274:	2bde      	cmp	r3, #222	@ 0xde
 800a276:	d10c      	bne.n	800a292 <frame_decode+0xb6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800a278:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800a27c:	1c5a      	adds	r2, r3, #1
 800a27e:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800a282:	461a      	mov	r2, r3
 800a284:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a288:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800a28c:	21ef      	movs	r1, #239	@ 0xef
 800a28e:	5499      	strb	r1, [r3, r2]
 800a290:	e012      	b.n	800a2b8 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TESC) {
 800a292:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800a296:	2bdb      	cmp	r3, #219	@ 0xdb
 800a298:	d10c      	bne.n	800a2b4 <frame_decode+0xd8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800a29a:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800a29e:	1c5a      	adds	r2, r3, #1
 800a2a0:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a2aa:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800a2ae:	21bd      	movs	r1, #189	@ 0xbd
 800a2b0:	5499      	strb	r1, [r3, r2]
 800a2b2:	e001      	b.n	800a2b8 <frame_decode+0xdc>
            } else {
            	return FSP_PKT_INVALID;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e0eb      	b.n	800a490 <frame_decode+0x2b4>
            }
            escape = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800a2be:	e014      	b.n	800a2ea <frame_decode+0x10e>
        } else if (byte == FSP_PKT_ESC) {
 800a2c0:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800a2c4:	2bbd      	cmp	r3, #189	@ 0xbd
 800a2c6:	d103      	bne.n	800a2d0 <frame_decode+0xf4>
        	escape = 1;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800a2ce:	e00c      	b.n	800a2ea <frame_decode+0x10e>
        } else {
            decoded_payload[j++] = byte;
 800a2d0:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800a2d4:	1c5a      	adds	r2, r3, #1
 800a2d6:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800a2da:	4619      	mov	r1, r3
 800a2dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a2e0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800a2e4:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800a2e8:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800a2ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a2ee:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800a2f2:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d395      	bcc.n	800a228 <frame_decode+0x4c>
        }
	}

    i = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800a302:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a30c:	461a      	mov	r2, r3
 800a30e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a312:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800a316:	5c9a      	ldrb	r2, [r3, r2]
 800a318:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a31c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a320:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800a322:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a32c:	461a      	mov	r2, r3
 800a32e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a332:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800a336:	5c9a      	ldrb	r2, [r3, r2]
 800a338:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a33c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a340:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800a342:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a346:	1c5a      	adds	r2, r3, #1
 800a348:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a34c:	461a      	mov	r2, r3
 800a34e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a352:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800a356:	5c9a      	ldrb	r2, [r3, r2]
 800a358:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a35c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a360:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800a362:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a366:	1c5a      	adds	r2, r3, #1
 800a368:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a36c:	461a      	mov	r2, r3
 800a36e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a372:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800a376:	5c9a      	ldrb	r2, [r3, r2]
 800a378:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a37c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a380:	711a      	strb	r2, [r3, #4]

    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 800a382:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a38a:	78db      	ldrb	r3, [r3, #3]
 800a38c:	2bf7      	cmp	r3, #247	@ 0xf7
 800a38e:	d80a      	bhi.n	800a3a6 <frame_decode+0x1ca>
 800a390:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a398:	78db      	ldrb	r3, [r3, #3]
 800a39a:	461a      	mov	r2, r3
 800a39c:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800a3a0:	3b06      	subs	r3, #6
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d001      	beq.n	800a3aa <frame_decode+0x1ce>
        return FSP_PKT_WRONG_LENGTH;
 800a3a6:	2306      	movs	r3, #6
 800a3a8:	e072      	b.n	800a490 <frame_decode+0x2b4>
    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800a3aa:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a3ae:	f107 0210 	add.w	r2, r7, #16
 800a3b2:	18d1      	adds	r1, r2, r3
 800a3b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a3b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3bc:	78db      	ldrb	r3, [r3, #3]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c4:	3305      	adds	r3, #5
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f003 fac3 	bl	800d952 <memcpy>
    i += fsp_pkt.length;
 800a3cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a3d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d4:	78da      	ldrb	r2, [r3, #3]
 800a3d6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a3da:	4413      	add	r3, r2
 800a3dc:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    //CRC
    uint16_t crc_received = (uint16_t)(decoded_payload[i++] << 8);
 800a3e0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a3e4:	1c5a      	adds	r2, r3, #1
 800a3e6:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a3f0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800a3f4:	5c9b      	ldrb	r3, [r3, r2]
 800a3f6:	021b      	lsls	r3, r3, #8
 800a3f8:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
    crc_received |= (uint16_t)(decoded_payload[i++]);
 800a3fc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a406:	461a      	mov	r2, r3
 800a408:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a40c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800a410:	5c9b      	ldrb	r3, [r3, r2]
 800a412:	461a      	mov	r2, r3
 800a414:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 800a418:	4313      	orrs	r3, r2
 800a41a:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a


    // CAL CRC
    uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp_pkt.src_adr, fsp_pkt.length + 4);
 800a41e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a426:	78db      	ldrb	r3, [r3, #3]
 800a428:	3304      	adds	r3, #4
 800a42a:	b2da      	uxtb	r2, r3
 800a42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a430:	3301      	adds	r3, #1
 800a432:	4619      	mov	r1, r3
 800a434:	2000      	movs	r0, #0
 800a436:	f7ff fbcd 	bl	8009bd4 <crc16_CCITT>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208


    // CHECK CRC
    if (crc_received != crc_calculated) {
 800a440:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 800a444:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 800a448:	429a      	cmp	r2, r3
 800a44a:	d001      	beq.n	800a450 <frame_decode+0x274>
        return FSP_PKT_CRC_FAIL;
 800a44c:	2305      	movs	r3, #5
 800a44e:	e01f      	b.n	800a490 <frame_decode+0x2b4>
    }

    // Address
    if (fsp_pkt.dst_adr != fsp_my_adr) {
 800a450:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a458:	789a      	ldrb	r2, [r3, #2]
 800a45a:	4b10      	ldr	r3, [pc, #64]	@ (800a49c <frame_decode+0x2c0>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d001      	beq.n	800a466 <frame_decode+0x28a>
        return FSP_PKT_WRONG_ADR;
 800a462:	2303      	movs	r3, #3
 800a464:	e014      	b.n	800a490 <frame_decode+0x2b4>
    }

    *pkt = fsp_pkt;
 800a466:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a46a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a478:	4610      	mov	r0, r2
 800a47a:	4619      	mov	r1, r3
 800a47c:	23fe      	movs	r3, #254	@ 0xfe
 800a47e:	461a      	mov	r2, r3
 800a480:	f003 fa67 	bl	800d952 <memcpy>


    frame_processing(&fsp_pkt);
 800a484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 f905 	bl	800a698 <frame_processing>


    return 0;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	20004c8c 	.word	0x20004c8c

0800a4a0 <frame_decode_rs422>:



int frame_decode_rs422(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a4ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a4b0:	6018      	str	r0, [r3, #0]
 800a4b2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a4b6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a4ba:	601a      	str	r2, [r3, #0]
 800a4bc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a4c0:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800a4c4:	460a      	mov	r2, r1
 800a4c6:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
//	if (length < FSP_PKT_MIN_LENGTH - 2) {
//	        return FSP_PKT_INVALID;
//	}


	while (i < length){
 800a4da:	e060      	b.n	800a59e <frame_decode_rs422+0xfe>
        uint8_t byte = buffer[i++];
 800a4dc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a4ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (escape) {
 800a4fa:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d038      	beq.n	800a574 <frame_decode_rs422+0xd4>
            if (byte == FSP_PKT_TSOD) {
 800a502:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800a506:	2bdc      	cmp	r3, #220	@ 0xdc
 800a508:	d10c      	bne.n	800a524 <frame_decode_rs422+0x84>
                decoded_payload[j++] = FSP_PKT_SOD;
 800a50a:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800a514:	461a      	mov	r2, r3
 800a516:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a51a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800a51e:	21ca      	movs	r1, #202	@ 0xca
 800a520:	5499      	strb	r1, [r3, r2]
 800a522:	e023      	b.n	800a56c <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TEOF) {
 800a524:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800a528:	2bde      	cmp	r3, #222	@ 0xde
 800a52a:	d10c      	bne.n	800a546 <frame_decode_rs422+0xa6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800a52c:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800a536:	461a      	mov	r2, r3
 800a538:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a53c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800a540:	21ef      	movs	r1, #239	@ 0xef
 800a542:	5499      	strb	r1, [r3, r2]
 800a544:	e012      	b.n	800a56c <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TESC) {
 800a546:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800a54a:	2bdb      	cmp	r3, #219	@ 0xdb
 800a54c:	d10c      	bne.n	800a568 <frame_decode_rs422+0xc8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800a54e:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800a558:	461a      	mov	r2, r3
 800a55a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a55e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800a562:	21bd      	movs	r1, #189	@ 0xbd
 800a564:	5499      	strb	r1, [r3, r2]
 800a566:	e001      	b.n	800a56c <frame_decode_rs422+0xcc>
            } else {
            	return FSP_PKT_INVALID;
 800a568:	2302      	movs	r3, #2
 800a56a:	e08f      	b.n	800a68c <frame_decode_rs422+0x1ec>
            }
            escape = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800a572:	e014      	b.n	800a59e <frame_decode_rs422+0xfe>
        } else if (byte == FSP_PKT_ESC) {
 800a574:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800a578:	2bbd      	cmp	r3, #189	@ 0xbd
 800a57a:	d103      	bne.n	800a584 <frame_decode_rs422+0xe4>
        	escape = 1;
 800a57c:	2301      	movs	r3, #1
 800a57e:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800a582:	e00c      	b.n	800a59e <frame_decode_rs422+0xfe>
        } else {
            decoded_payload[j++] = byte;
 800a584:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800a58e:	4619      	mov	r1, r3
 800a590:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a594:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800a598:	f897 220c 	ldrb.w	r2, [r7, #524]	@ 0x20c
 800a59c:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800a59e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a5a2:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800a5a6:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d395      	bcc.n	800a4dc <frame_decode_rs422+0x3c>
        }
	}

    i = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800a5b6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a5c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800a5ca:	5c9a      	ldrb	r2, [r3, r2]
 800a5cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a5d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5d4:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800a5d6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a5e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800a5ea:	5c9a      	ldrb	r2, [r3, r2]
 800a5ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a5f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5f4:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800a5f6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a5fa:	1c5a      	adds	r2, r3, #1
 800a5fc:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a600:	461a      	mov	r2, r3
 800a602:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a606:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800a60a:	5c9a      	ldrb	r2, [r3, r2]
 800a60c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a610:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a614:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800a616:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800a620:	461a      	mov	r2, r3
 800a622:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800a62a:	5c9a      	ldrb	r2, [r3, r2]
 800a62c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a634:	711a      	strb	r2, [r3, #4]

//    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
//        return FSP_PKT_WRONG_LENGTH;
//    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800a636:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a63a:	f107 0214 	add.w	r2, r7, #20
 800a63e:	18d1      	adds	r1, r2, r3
 800a640:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a648:	78db      	ldrb	r3, [r3, #3]
 800a64a:	461a      	mov	r2, r3
 800a64c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800a650:	3305      	adds	r3, #5
 800a652:	4618      	mov	r0, r3
 800a654:	f003 f97d 	bl	800d952 <memcpy>
    i += fsp_pkt.length;
 800a658:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a65c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a660:	78da      	ldrb	r2, [r3, #3]
 800a662:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a666:	4413      	add	r3, r2
 800a668:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
//    // Address
//    if (fsp_pkt.dst_adr != fsp_my_adr) {
//        return FSP_PKT_WRONG_ADR;
//    }

    *pkt = fsp_pkt;
 800a66c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a670:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a67a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a67e:	4610      	mov	r0, r2
 800a680:	4619      	mov	r1, r3
 800a682:	23fe      	movs	r3, #254	@ 0xfe
 800a684:	461a      	mov	r2, r3
 800a686:	f003 f964 	bl	800d952 <memcpy>


    return 0;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <frame_processing>:


char pos_str2[10];

int frame_processing(fsp_packet_t *fsp_pkt){
 800a698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a69c:	f5ad 6dc0 	sub.w	sp, sp, #1536	@ 0x600
 800a6a0:	af2c      	add	r7, sp, #176	@ 0xb0
 800a6a2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a6a6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a6aa:	6018      	str	r0, [r3, #0]


	switch (fsp_pkt->src_adr){
 800a6ac:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a6b0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	785b      	ldrb	r3, [r3, #1]
 800a6b8:	3b02      	subs	r3, #2
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	f201 87a4 	bhi.w	800c608 <frame_processing+0x1f70>
 800a6c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c8 <frame_processing+0x30>)
 800a6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c6:	bf00      	nop
 800a6c8:	0800a6d9 	.word	0x0800a6d9
 800a6cc:	0800b1d1 	.word	0x0800b1d1
 800a6d0:	0800b9b3 	.word	0x0800b9b3
 800a6d4:	0800b9bb 	.word	0x0800b9bb
		case FSP_ADR_PMU:
			switch (fsp_pkt->type)
 800a6d8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a6dc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	791b      	ldrb	r3, [r3, #4]
 800a6e4:	2b05      	cmp	r3, #5
 800a6e6:	d003      	beq.n	800a6f0 <frame_processing+0x58>
 800a6e8:	2b07      	cmp	r3, #7
 800a6ea:	d007      	beq.n	800a6fc <frame_processing+0x64>
 800a6ec:	f000 bd66 	b.w	800b1bc <frame_processing+0xb24>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800a6f0:	f7f7 fd0e 	bl	8002110 <clear_send_flag>
					Uart_sendstring(UART5, "\nPMU_ACK\r\n> ");
 800a6f4:	49b1      	ldr	r1, [pc, #708]	@ (800a9bc <frame_processing+0x324>)
 800a6f6:	48b2      	ldr	r0, [pc, #712]	@ (800a9c0 <frame_processing+0x328>)
 800a6f8:	f7f7 fbe8 	bl	8001ecc <Uart_sendstring>

				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800a6fc:	f7f7 fd08 	bl	8002110 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800a700:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a704:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	795b      	ldrb	r3, [r3, #5]
 800a70c:	2b08      	cmp	r3, #8
 800a70e:	dc1b      	bgt.n	800a748 <frame_processing+0xb0>
 800a710:	2b00      	cmp	r3, #0
 800a712:	f2c0 8558 	blt.w	800b1c6 <frame_processing+0xb2e>
 800a716:	2b08      	cmp	r3, #8
 800a718:	f200 8555 	bhi.w	800b1c6 <frame_processing+0xb2e>
 800a71c:	a201      	add	r2, pc, #4	@ (adr r2, 800a724 <frame_processing+0x8c>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a751 	.word	0x0800a751
 800a728:	0800a7a5 	.word	0x0800a7a5
 800a72c:	0800a9dd 	.word	0x0800a9dd
 800a730:	0800ab47 	.word	0x0800ab47
 800a734:	0800ac01 	.word	0x0800ac01
 800a738:	0800b1c7 	.word	0x0800b1c7
 800a73c:	0800b1c7 	.word	0x0800b1c7
 800a740:	0800b1c7 	.word	0x0800b1c7
 800a744:	0800acd1 	.word	0x0800acd1
 800a748:	2bff      	cmp	r3, #255	@ 0xff
 800a74a:	d016      	beq.n	800a77a <frame_processing+0xe2>
							    	Uart_sendstring(UART5, buffer_0x08);
							    }
							    break;
					}

					break;
 800a74c:	f000 bd3b 	b.w	800b1c6 <frame_processing+0xb2e>
							sprintf(buffer_0x00, "PMU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800a750:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a754:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	799b      	ldrb	r3, [r3, #6]
 800a75c:	461a      	mov	r2, r3
 800a75e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a762:	4998      	ldr	r1, [pc, #608]	@ (800a9c4 <frame_processing+0x32c>)
 800a764:	4618      	mov	r0, r3
 800a766:	f002 ff7d 	bl	800d664 <siprintf>
							Uart_sendstring(UART5, buffer_0x00);
 800a76a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a76e:	4619      	mov	r1, r3
 800a770:	4893      	ldr	r0, [pc, #588]	@ (800a9c0 <frame_processing+0x328>)
 800a772:	f7f7 fbab 	bl	8001ecc <Uart_sendstring>
							break;
 800a776:	f000 bd20 	b.w	800b1ba <frame_processing+0xb22>
							sprintf(buffer_0xFF, "PMU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800a77a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a77e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	799b      	ldrb	r3, [r3, #6]
 800a786:	461a      	mov	r2, r3
 800a788:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a78c:	498e      	ldr	r1, [pc, #568]	@ (800a9c8 <frame_processing+0x330>)
 800a78e:	4618      	mov	r0, r3
 800a790:	f002 ff68 	bl	800d664 <siprintf>
							Uart_sendstring(UART5, buffer_0xFF);
 800a794:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a798:	4619      	mov	r1, r3
 800a79a:	4889      	ldr	r0, [pc, #548]	@ (800a9c0 <frame_processing+0x328>)
 800a79c:	f7f7 fb96 	bl	8001ecc <Uart_sendstring>
							break;
 800a7a0:	f000 bd0b 	b.w	800b1ba <frame_processing+0xb22>
						    int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800a7a4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a7a8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	799b      	ldrb	r3, [r3, #6]
 800a7b0:	021b      	lsls	r3, r3, #8
 800a7b2:	b21a      	sxth	r2, r3
 800a7b4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a7b8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	79db      	ldrb	r3, [r3, #7]
 800a7c0:	b21b      	sxth	r3, r3
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	f8a7 3494 	strh.w	r3, [r7, #1172]	@ 0x494
						    int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800a7c8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a7cc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	7a1b      	ldrb	r3, [r3, #8]
 800a7d4:	021b      	lsls	r3, r3, #8
 800a7d6:	b21a      	sxth	r2, r3
 800a7d8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a7dc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	7a5b      	ldrb	r3, [r3, #9]
 800a7e4:	b21b      	sxth	r3, r3
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	f8a7 3492 	strh.w	r3, [r7, #1170]	@ 0x492
						    int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800a7ec:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a7f0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	7a9b      	ldrb	r3, [r3, #10]
 800a7f8:	021b      	lsls	r3, r3, #8
 800a7fa:	b21a      	sxth	r2, r3
 800a7fc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a800:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	7adb      	ldrb	r3, [r3, #11]
 800a808:	b21b      	sxth	r3, r3
 800a80a:	4313      	orrs	r3, r2
 800a80c:	f8a7 3490 	strh.w	r3, [r7, #1168]	@ 0x490
						    int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800a810:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a814:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	7b1b      	ldrb	r3, [r3, #12]
 800a81c:	021b      	lsls	r3, r3, #8
 800a81e:	b21a      	sxth	r2, r3
 800a820:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a824:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	7b5b      	ldrb	r3, [r3, #13]
 800a82c:	b21b      	sxth	r3, r3
 800a82e:	4313      	orrs	r3, r2
 800a830:	f8a7 348e 	strh.w	r3, [r7, #1166]	@ 0x48e
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800a834:	f9b7 3494 	ldrsh.w	r3, [r7, #1172]	@ 0x494
 800a838:	2b00      	cmp	r3, #0
 800a83a:	da03      	bge.n	800a844 <frame_processing+0x1ac>
 800a83c:	4b63      	ldr	r3, [pc, #396]	@ (800a9cc <frame_processing+0x334>)
 800a83e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a842:	e002      	b.n	800a84a <frame_processing+0x1b2>
 800a844:	4b62      	ldr	r3, [pc, #392]	@ (800a9d0 <frame_processing+0x338>)
 800a846:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800a84a:	f9b7 3494 	ldrsh.w	r3, [r7, #1172]	@ 0x494
 800a84e:	2b00      	cmp	r3, #0
 800a850:	bfb8      	it	lt
 800a852:	425b      	neglt	r3, r3
 800a854:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800a856:	4a5f      	ldr	r2, [pc, #380]	@ (800a9d4 <frame_processing+0x33c>)
 800a858:	fb82 1203 	smull	r1, r2, r2, r3
 800a85c:	1152      	asrs	r2, r2, #5
 800a85e:	17db      	asrs	r3, r3, #31
 800a860:	eba2 0c03 	sub.w	ip, r2, r3
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800a864:	f9b7 3494 	ldrsh.w	r3, [r7, #1172]	@ 0x494
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfb8      	it	lt
 800a86c:	425b      	neglt	r3, r3
 800a86e:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800a870:	4a58      	ldr	r2, [pc, #352]	@ (800a9d4 <frame_processing+0x33c>)
 800a872:	fb82 1203 	smull	r1, r2, r2, r3
 800a876:	1151      	asrs	r1, r2, #5
 800a878:	17da      	asrs	r2, r3, #31
 800a87a:	1a8c      	subs	r4, r1, r2
 800a87c:	2264      	movs	r2, #100	@ 0x64
 800a87e:	fb04 f202 	mul.w	r2, r4, r2
 800a882:	1a9c      	subs	r4, r3, r2
 800a884:	f9b7 3492 	ldrsh.w	r3, [r7, #1170]	@ 0x492
 800a888:	2b00      	cmp	r3, #0
 800a88a:	da01      	bge.n	800a890 <frame_processing+0x1f8>
 800a88c:	4e4f      	ldr	r6, [pc, #316]	@ (800a9cc <frame_processing+0x334>)
 800a88e:	e000      	b.n	800a892 <frame_processing+0x1fa>
 800a890:	4e4f      	ldr	r6, [pc, #316]	@ (800a9d0 <frame_processing+0x338>)
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800a892:	f9b7 3492 	ldrsh.w	r3, [r7, #1170]	@ 0x492
 800a896:	2b00      	cmp	r3, #0
 800a898:	bfb8      	it	lt
 800a89a:	425b      	neglt	r3, r3
 800a89c:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800a89e:	4a4d      	ldr	r2, [pc, #308]	@ (800a9d4 <frame_processing+0x33c>)
 800a8a0:	fb82 1203 	smull	r1, r2, r2, r3
 800a8a4:	1152      	asrs	r2, r2, #5
 800a8a6:	17db      	asrs	r3, r3, #31
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800a8ae:	f9b7 3492 	ldrsh.w	r3, [r7, #1170]	@ 0x492
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bfb8      	it	lt
 800a8b6:	425b      	neglt	r3, r3
 800a8b8:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800a8ba:	4a46      	ldr	r2, [pc, #280]	@ (800a9d4 <frame_processing+0x33c>)
 800a8bc:	fb82 1203 	smull	r1, r2, r2, r3
 800a8c0:	1151      	asrs	r1, r2, #5
 800a8c2:	17da      	asrs	r2, r3, #31
 800a8c4:	1a8d      	subs	r5, r1, r2
 800a8c6:	2264      	movs	r2, #100	@ 0x64
 800a8c8:	fb05 f202 	mul.w	r2, r5, r2
 800a8cc:	1a9d      	subs	r5, r3, r2
 800a8ce:	f9b7 3490 	ldrsh.w	r3, [r7, #1168]	@ 0x490
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	da03      	bge.n	800a8de <frame_processing+0x246>
 800a8d6:	4b3d      	ldr	r3, [pc, #244]	@ (800a9cc <frame_processing+0x334>)
 800a8d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a8dc:	e002      	b.n	800a8e4 <frame_processing+0x24c>
 800a8de:	4b3c      	ldr	r3, [pc, #240]	@ (800a9d0 <frame_processing+0x338>)
 800a8e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800a8e4:	f9b7 3490 	ldrsh.w	r3, [r7, #1168]	@ 0x490
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	bfb8      	it	lt
 800a8ec:	425b      	neglt	r3, r3
 800a8ee:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800a8f0:	4a38      	ldr	r2, [pc, #224]	@ (800a9d4 <frame_processing+0x33c>)
 800a8f2:	fb82 1203 	smull	r1, r2, r2, r3
 800a8f6:	1152      	asrs	r2, r2, #5
 800a8f8:	17db      	asrs	r3, r3, #31
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800a900:	f9b7 3490 	ldrsh.w	r3, [r7, #1168]	@ 0x490
 800a904:	2b00      	cmp	r3, #0
 800a906:	bfb8      	it	lt
 800a908:	425b      	neglt	r3, r3
 800a90a:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800a90c:	4a31      	ldr	r2, [pc, #196]	@ (800a9d4 <frame_processing+0x33c>)
 800a90e:	fb82 1203 	smull	r1, r2, r2, r3
 800a912:	1151      	asrs	r1, r2, #5
 800a914:	17da      	asrs	r2, r3, #31
 800a916:	1a89      	subs	r1, r1, r2
 800a918:	2264      	movs	r2, #100	@ 0x64
 800a91a:	fb01 f202 	mul.w	r2, r1, r2
 800a91e:	1a99      	subs	r1, r3, r2
 800a920:	f9b7 348e 	ldrsh.w	r3, [r7, #1166]	@ 0x48e
 800a924:	2b00      	cmp	r3, #0
 800a926:	da03      	bge.n	800a930 <frame_processing+0x298>
 800a928:	4b28      	ldr	r3, [pc, #160]	@ (800a9cc <frame_processing+0x334>)
 800a92a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a92e:	e002      	b.n	800a936 <frame_processing+0x29e>
 800a930:	4b27      	ldr	r3, [pc, #156]	@ (800a9d0 <frame_processing+0x338>)
 800a932:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800a936:	f9b7 348e 	ldrsh.w	r3, [r7, #1166]	@ 0x48e
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	bfb8      	it	lt
 800a93e:	425b      	neglt	r3, r3
 800a940:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800a942:	4a24      	ldr	r2, [pc, #144]	@ (800a9d4 <frame_processing+0x33c>)
 800a944:	fb82 0203 	smull	r0, r2, r2, r3
 800a948:	1152      	asrs	r2, r2, #5
 800a94a:	17db      	asrs	r3, r3, #31
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800a952:	f9b7 348e 	ldrsh.w	r3, [r7, #1166]	@ 0x48e
 800a956:	2b00      	cmp	r3, #0
 800a958:	bfb8      	it	lt
 800a95a:	425b      	neglt	r3, r3
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	4618      	mov	r0, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800a960:	4b1c      	ldr	r3, [pc, #112]	@ (800a9d4 <frame_processing+0x33c>)
 800a962:	fb83 2300 	smull	r2, r3, r3, r0
 800a966:	115a      	asrs	r2, r3, #5
 800a968:	17c3      	asrs	r3, r0, #31
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	2264      	movs	r2, #100	@ 0x64
 800a96e:	fb02 f303 	mul.w	r3, r2, r3
 800a972:	1ac3      	subs	r3, r0, r3
 800a974:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800a978:	9309      	str	r3, [sp, #36]	@ 0x24
 800a97a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a97e:	9308      	str	r3, [sp, #32]
 800a980:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a984:	9307      	str	r3, [sp, #28]
 800a986:	9106      	str	r1, [sp, #24]
 800a988:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a98c:	9305      	str	r3, [sp, #20]
 800a98e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	9503      	str	r5, [sp, #12]
 800a996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a99a:	9302      	str	r3, [sp, #8]
 800a99c:	9601      	str	r6, [sp, #4]
 800a99e:	9400      	str	r4, [sp, #0]
 800a9a0:	4663      	mov	r3, ip
 800a9a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a9a6:	490c      	ldr	r1, [pc, #48]	@ (800a9d8 <frame_processing+0x340>)
 800a9a8:	f002 fe5c 	bl	800d664 <siprintf>
						    Uart_sendstring(UART5, buffer_0x01);
 800a9ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4803      	ldr	r0, [pc, #12]	@ (800a9c0 <frame_processing+0x328>)
 800a9b4:	f7f7 fa8a 	bl	8001ecc <Uart_sendstring>
						break;
 800a9b8:	e3ff      	b.n	800b1ba <frame_processing+0xb22>
 800a9ba:	bf00      	nop
 800a9bc:	08012ff8 	.word	0x08012ff8
 800a9c0:	40005000 	.word	0x40005000
 800a9c4:	08013008 	.word	0x08013008
 800a9c8:	08013024 	.word	0x08013024
 800a9cc:	08013040 	.word	0x08013040
 800a9d0:	08013044 	.word	0x08013044
 800a9d4:	51eb851f 	.word	0x51eb851f
 800a9d8:	08013048 	.word	0x08013048
					        uint16_t bat0 = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800a9dc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a9e0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	799b      	ldrb	r3, [r3, #6]
 800a9e8:	021b      	lsls	r3, r3, #8
 800a9ea:	b21a      	sxth	r2, r3
 800a9ec:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800a9f0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	79db      	ldrb	r3, [r3, #7]
 800a9f8:	b21b      	sxth	r3, r3
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	b21b      	sxth	r3, r3
 800a9fe:	f8a7 349c 	strh.w	r3, [r7, #1180]	@ 0x49c
					        uint16_t bat1 = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800aa02:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800aa06:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	7a1b      	ldrb	r3, [r3, #8]
 800aa0e:	021b      	lsls	r3, r3, #8
 800aa10:	b21a      	sxth	r2, r3
 800aa12:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800aa16:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	7a5b      	ldrb	r3, [r3, #9]
 800aa1e:	b21b      	sxth	r3, r3
 800aa20:	4313      	orrs	r3, r2
 800aa22:	b21b      	sxth	r3, r3
 800aa24:	f8a7 349a 	strh.w	r3, [r7, #1178]	@ 0x49a
					        uint16_t bat2 = (uint16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800aa28:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800aa2c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	7a9b      	ldrb	r3, [r3, #10]
 800aa34:	021b      	lsls	r3, r3, #8
 800aa36:	b21a      	sxth	r2, r3
 800aa38:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800aa3c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	7adb      	ldrb	r3, [r3, #11]
 800aa44:	b21b      	sxth	r3, r3
 800aa46:	4313      	orrs	r3, r2
 800aa48:	b21b      	sxth	r3, r3
 800aa4a:	f8a7 3498 	strh.w	r3, [r7, #1176]	@ 0x498
					        uint16_t bat3 = (uint16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800aa4e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800aa52:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	7b1b      	ldrb	r3, [r3, #12]
 800aa5a:	021b      	lsls	r3, r3, #8
 800aa5c:	b21a      	sxth	r2, r3
 800aa5e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800aa62:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	7b5b      	ldrb	r3, [r3, #13]
 800aa6a:	b21b      	sxth	r3, r3
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	b21b      	sxth	r3, r3
 800aa70:	f8a7 3496 	strh.w	r3, [r7, #1174]	@ 0x496
					        sprintf(buffer_0x02, "PMU_Res: CMDcode 0x02 [BAT0: %d.%02d V, BAT1: %d.%02d V, BAT2: %d.%02d V, BAT3: %d.%02d V]\n",
 800aa74:	f8b7 349c 	ldrh.w	r3, [r7, #1180]	@ 0x49c
 800aa78:	4a90      	ldr	r2, [pc, #576]	@ (800acbc <frame_processing+0x624>)
 800aa7a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa7e:	095b      	lsrs	r3, r3, #5
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	469c      	mov	ip, r3
 800aa84:	f8b7 349c 	ldrh.w	r3, [r7, #1180]	@ 0x49c
 800aa88:	4a8c      	ldr	r2, [pc, #560]	@ (800acbc <frame_processing+0x624>)
 800aa8a:	fba2 1203 	umull	r1, r2, r2, r3
 800aa8e:	0952      	lsrs	r2, r2, #5
 800aa90:	2164      	movs	r1, #100	@ 0x64
 800aa92:	fb01 f202 	mul.w	r2, r1, r2
 800aa96:	1a9b      	subs	r3, r3, r2
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	469e      	mov	lr, r3
 800aa9c:	f8b7 349a 	ldrh.w	r3, [r7, #1178]	@ 0x49a
 800aaa0:	4a86      	ldr	r2, [pc, #536]	@ (800acbc <frame_processing+0x624>)
 800aaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa6:	095b      	lsrs	r3, r3, #5
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	461c      	mov	r4, r3
 800aaac:	f8b7 349a 	ldrh.w	r3, [r7, #1178]	@ 0x49a
 800aab0:	4a82      	ldr	r2, [pc, #520]	@ (800acbc <frame_processing+0x624>)
 800aab2:	fba2 1203 	umull	r1, r2, r2, r3
 800aab6:	0952      	lsrs	r2, r2, #5
 800aab8:	2164      	movs	r1, #100	@ 0x64
 800aaba:	fb01 f202 	mul.w	r2, r1, r2
 800aabe:	1a9b      	subs	r3, r3, r2
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	461d      	mov	r5, r3
 800aac4:	f8b7 3498 	ldrh.w	r3, [r7, #1176]	@ 0x498
 800aac8:	4a7c      	ldr	r2, [pc, #496]	@ (800acbc <frame_processing+0x624>)
 800aaca:	fba2 2303 	umull	r2, r3, r2, r3
 800aace:	095b      	lsrs	r3, r3, #5
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	461e      	mov	r6, r3
 800aad4:	f8b7 3498 	ldrh.w	r3, [r7, #1176]	@ 0x498
 800aad8:	4a78      	ldr	r2, [pc, #480]	@ (800acbc <frame_processing+0x624>)
 800aada:	fba2 1203 	umull	r1, r2, r2, r3
 800aade:	0952      	lsrs	r2, r2, #5
 800aae0:	2164      	movs	r1, #100	@ 0x64
 800aae2:	fb01 f202 	mul.w	r2, r1, r2
 800aae6:	1a9b      	subs	r3, r3, r2
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aaee:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	@ 0x496
 800aaf2:	4a72      	ldr	r2, [pc, #456]	@ (800acbc <frame_processing+0x624>)
 800aaf4:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf8:	095b      	lsrs	r3, r3, #5
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab00:	f8b7 3496 	ldrh.w	r3, [r7, #1174]	@ 0x496
 800ab04:	4a6d      	ldr	r2, [pc, #436]	@ (800acbc <frame_processing+0x624>)
 800ab06:	fba2 1203 	umull	r1, r2, r2, r3
 800ab0a:	0952      	lsrs	r2, r2, #5
 800ab0c:	2164      	movs	r1, #100	@ 0x64
 800ab0e:	fb01 f202 	mul.w	r2, r1, r2
 800ab12:	1a9b      	subs	r3, r3, r2
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800ab1a:	9305      	str	r3, [sp, #20]
 800ab1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ab20:	9204      	str	r2, [sp, #16]
 800ab22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab26:	9303      	str	r3, [sp, #12]
 800ab28:	9602      	str	r6, [sp, #8]
 800ab2a:	9501      	str	r5, [sp, #4]
 800ab2c:	9400      	str	r4, [sp, #0]
 800ab2e:	4673      	mov	r3, lr
 800ab30:	4662      	mov	r2, ip
 800ab32:	4963      	ldr	r1, [pc, #396]	@ (800acc0 <frame_processing+0x628>)
 800ab34:	f002 fd96 	bl	800d664 <siprintf>
					        Uart_sendstring(UART5, buffer_0x02);
 800ab38:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4861      	ldr	r0, [pc, #388]	@ (800acc4 <frame_processing+0x62c>)
 800ab40:	f7f7 f9c4 	bl	8001ecc <Uart_sendstring>
							break;
 800ab44:	e339      	b.n	800b1ba <frame_processing+0xb22>
						    uint16_t vin = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800ab46:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ab4a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	799b      	ldrb	r3, [r3, #6]
 800ab52:	021b      	lsls	r3, r3, #8
 800ab54:	b21a      	sxth	r2, r3
 800ab56:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ab5a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	79db      	ldrb	r3, [r3, #7]
 800ab62:	b21b      	sxth	r3, r3
 800ab64:	4313      	orrs	r3, r2
 800ab66:	b21b      	sxth	r3, r3
 800ab68:	f8a7 34a0 	strh.w	r3, [r7, #1184]	@ 0x4a0
						    uint16_t iin = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800ab6c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ab70:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	7a1b      	ldrb	r3, [r3, #8]
 800ab78:	021b      	lsls	r3, r3, #8
 800ab7a:	b21a      	sxth	r2, r3
 800ab7c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ab80:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	7a5b      	ldrb	r3, [r3, #9]
 800ab88:	b21b      	sxth	r3, r3
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	b21b      	sxth	r3, r3
 800ab8e:	f8a7 349e 	strh.w	r3, [r7, #1182]	@ 0x49e
						    sprintf(buffer_0x03, "PMU_Res: CMDcode 0x03 [VIN: %d.%02d V, IIN: %d.%02d A]\n",
 800ab92:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 800ab96:	4a49      	ldr	r2, [pc, #292]	@ (800acbc <frame_processing+0x624>)
 800ab98:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9c:	095b      	lsrs	r3, r3, #5
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	461d      	mov	r5, r3
 800aba2:	f8b7 34a0 	ldrh.w	r3, [r7, #1184]	@ 0x4a0
 800aba6:	4a45      	ldr	r2, [pc, #276]	@ (800acbc <frame_processing+0x624>)
 800aba8:	fba2 1203 	umull	r1, r2, r2, r3
 800abac:	0952      	lsrs	r2, r2, #5
 800abae:	2164      	movs	r1, #100	@ 0x64
 800abb0:	fb01 f202 	mul.w	r2, r1, r2
 800abb4:	1a9b      	subs	r3, r3, r2
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	461e      	mov	r6, r3
 800abba:	f8b7 349e 	ldrh.w	r3, [r7, #1182]	@ 0x49e
 800abbe:	4a3f      	ldr	r2, [pc, #252]	@ (800acbc <frame_processing+0x624>)
 800abc0:	fba2 2303 	umull	r2, r3, r2, r3
 800abc4:	095b      	lsrs	r3, r3, #5
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	461c      	mov	r4, r3
 800abca:	f8b7 349e 	ldrh.w	r3, [r7, #1182]	@ 0x49e
 800abce:	4a3b      	ldr	r2, [pc, #236]	@ (800acbc <frame_processing+0x624>)
 800abd0:	fba2 1203 	umull	r1, r2, r2, r3
 800abd4:	0952      	lsrs	r2, r2, #5
 800abd6:	2164      	movs	r1, #100	@ 0x64
 800abd8:	fb01 f202 	mul.w	r2, r1, r2
 800abdc:	1a9b      	subs	r3, r3, r2
 800abde:	b29b      	uxth	r3, r3
 800abe0:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800abe4:	9301      	str	r3, [sp, #4]
 800abe6:	9400      	str	r4, [sp, #0]
 800abe8:	4633      	mov	r3, r6
 800abea:	462a      	mov	r2, r5
 800abec:	4936      	ldr	r1, [pc, #216]	@ (800acc8 <frame_processing+0x630>)
 800abee:	f002 fd39 	bl	800d664 <siprintf>
						    Uart_sendstring(UART5, buffer_0x03);
 800abf2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800abf6:	4619      	mov	r1, r3
 800abf8:	4832      	ldr	r0, [pc, #200]	@ (800acc4 <frame_processing+0x62c>)
 800abfa:	f7f7 f967 	bl	8001ecc <Uart_sendstring>
						    break;
 800abfe:	e2dc      	b.n	800b1ba <frame_processing+0xb22>
						    uint16_t vout = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800ac00:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ac04:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	799b      	ldrb	r3, [r3, #6]
 800ac0c:	021b      	lsls	r3, r3, #8
 800ac0e:	b21a      	sxth	r2, r3
 800ac10:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ac14:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	79db      	ldrb	r3, [r3, #7]
 800ac1c:	b21b      	sxth	r3, r3
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	b21b      	sxth	r3, r3
 800ac22:	f8a7 34a4 	strh.w	r3, [r7, #1188]	@ 0x4a4
						    uint16_t iout = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800ac26:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ac2a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	7a1b      	ldrb	r3, [r3, #8]
 800ac32:	021b      	lsls	r3, r3, #8
 800ac34:	b21a      	sxth	r2, r3
 800ac36:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ac3a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	7a5b      	ldrb	r3, [r3, #9]
 800ac42:	b21b      	sxth	r3, r3
 800ac44:	4313      	orrs	r3, r2
 800ac46:	b21b      	sxth	r3, r3
 800ac48:	f8a7 34a2 	strh.w	r3, [r7, #1186]	@ 0x4a2
						    sprintf(buffer_0x04_pmu, "PMU_Res: CMDcode 0x04 [VOUT: %d.%02d V, IOUT: %d.%02d A]\n",
 800ac4c:	f8b7 34a4 	ldrh.w	r3, [r7, #1188]	@ 0x4a4
 800ac50:	4a1a      	ldr	r2, [pc, #104]	@ (800acbc <frame_processing+0x624>)
 800ac52:	fba2 2303 	umull	r2, r3, r2, r3
 800ac56:	095b      	lsrs	r3, r3, #5
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	461d      	mov	r5, r3
 800ac5c:	f8b7 34a4 	ldrh.w	r3, [r7, #1188]	@ 0x4a4
 800ac60:	4a16      	ldr	r2, [pc, #88]	@ (800acbc <frame_processing+0x624>)
 800ac62:	fba2 1203 	umull	r1, r2, r2, r3
 800ac66:	0952      	lsrs	r2, r2, #5
 800ac68:	2164      	movs	r1, #100	@ 0x64
 800ac6a:	fb01 f202 	mul.w	r2, r1, r2
 800ac6e:	1a9b      	subs	r3, r3, r2
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	461e      	mov	r6, r3
 800ac74:	f8b7 34a2 	ldrh.w	r3, [r7, #1186]	@ 0x4a2
 800ac78:	4a10      	ldr	r2, [pc, #64]	@ (800acbc <frame_processing+0x624>)
 800ac7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac7e:	095b      	lsrs	r3, r3, #5
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	461c      	mov	r4, r3
 800ac84:	f8b7 34a2 	ldrh.w	r3, [r7, #1186]	@ 0x4a2
 800ac88:	4a0c      	ldr	r2, [pc, #48]	@ (800acbc <frame_processing+0x624>)
 800ac8a:	fba2 1203 	umull	r1, r2, r2, r3
 800ac8e:	0952      	lsrs	r2, r2, #5
 800ac90:	2164      	movs	r1, #100	@ 0x64
 800ac92:	fb01 f202 	mul.w	r2, r1, r2
 800ac96:	1a9b      	subs	r3, r3, r2
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	9400      	str	r4, [sp, #0]
 800aca2:	4633      	mov	r3, r6
 800aca4:	462a      	mov	r2, r5
 800aca6:	4909      	ldr	r1, [pc, #36]	@ (800accc <frame_processing+0x634>)
 800aca8:	f002 fcdc 	bl	800d664 <siprintf>
						    Uart_sendstring(UART5, buffer_0x04_pmu);
 800acac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800acb0:	4619      	mov	r1, r3
 800acb2:	4804      	ldr	r0, [pc, #16]	@ (800acc4 <frame_processing+0x62c>)
 800acb4:	f7f7 f90a 	bl	8001ecc <Uart_sendstring>
							break;
 800acb8:	e27f      	b.n	800b1ba <frame_processing+0xb22>
 800acba:	bf00      	nop
 800acbc:	51eb851f 	.word	0x51eb851f
 800acc0:	080130a8 	.word	0x080130a8
 800acc4:	40005000 	.word	0x40005000
 800acc8:	08013104 	.word	0x08013104
 800accc:	0801313c 	.word	0x0801313c
							    	int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800acd0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800acd4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	799b      	ldrb	r3, [r3, #6]
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	b21a      	sxth	r2, r3
 800ace0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ace4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	79db      	ldrb	r3, [r3, #7]
 800acec:	b21b      	sxth	r3, r3
 800acee:	4313      	orrs	r3, r2
 800acf0:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc
							    	int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800acf4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800acf8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	7a1b      	ldrb	r3, [r3, #8]
 800ad00:	021b      	lsls	r3, r3, #8
 800ad02:	b21a      	sxth	r2, r3
 800ad04:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ad08:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	7a5b      	ldrb	r3, [r3, #9]
 800ad10:	b21b      	sxth	r3, r3
 800ad12:	4313      	orrs	r3, r2
 800ad14:	f8a7 34ba 	strh.w	r3, [r7, #1210]	@ 0x4ba
							    	int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800ad18:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ad1c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	7a9b      	ldrb	r3, [r3, #10]
 800ad24:	021b      	lsls	r3, r3, #8
 800ad26:	b21a      	sxth	r2, r3
 800ad28:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ad2c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	7adb      	ldrb	r3, [r3, #11]
 800ad34:	b21b      	sxth	r3, r3
 800ad36:	4313      	orrs	r3, r2
 800ad38:	f8a7 34b8 	strh.w	r3, [r7, #1208]	@ 0x4b8
							    	int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800ad3c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ad40:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	7b1b      	ldrb	r3, [r3, #12]
 800ad48:	021b      	lsls	r3, r3, #8
 800ad4a:	b21a      	sxth	r2, r3
 800ad4c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ad50:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	7b5b      	ldrb	r3, [r3, #13]
 800ad58:	b21b      	sxth	r3, r3
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
							    	uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800ad60:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ad64:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	7b9b      	ldrb	r3, [r3, #14]
 800ad6c:	021b      	lsls	r3, r3, #8
 800ad6e:	b21a      	sxth	r2, r3
 800ad70:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ad74:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	7bdb      	ldrb	r3, [r3, #15]
 800ad7c:	b21b      	sxth	r3, r3
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	b21b      	sxth	r3, r3
 800ad82:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
							    	uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800ad86:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ad8a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	7c1b      	ldrb	r3, [r3, #16]
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	b21a      	sxth	r2, r3
 800ad96:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ad9a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	7c5b      	ldrb	r3, [r3, #17]
 800ada2:	b21b      	sxth	r3, r3
 800ada4:	4313      	orrs	r3, r2
 800ada6:	b21b      	sxth	r3, r3
 800ada8:	f8a7 34b2 	strh.w	r3, [r7, #1202]	@ 0x4b2
							    	uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800adac:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800adb0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	7c9b      	ldrb	r3, [r3, #18]
 800adb8:	021b      	lsls	r3, r3, #8
 800adba:	b21a      	sxth	r2, r3
 800adbc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800adc0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	7cdb      	ldrb	r3, [r3, #19]
 800adc8:	b21b      	sxth	r3, r3
 800adca:	4313      	orrs	r3, r2
 800adcc:	b21b      	sxth	r3, r3
 800adce:	f8a7 34b0 	strh.w	r3, [r7, #1200]	@ 0x4b0
							    	uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800add2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800add6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	7d1b      	ldrb	r3, [r3, #20]
 800adde:	021b      	lsls	r3, r3, #8
 800ade0:	b21a      	sxth	r2, r3
 800ade2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ade6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	7d5b      	ldrb	r3, [r3, #21]
 800adee:	b21b      	sxth	r3, r3
 800adf0:	4313      	orrs	r3, r2
 800adf2:	b21b      	sxth	r3, r3
 800adf4:	f8a7 34ae 	strh.w	r3, [r7, #1198]	@ 0x4ae
							    	uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800adf8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800adfc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	7d9b      	ldrb	r3, [r3, #22]
 800ae04:	021b      	lsls	r3, r3, #8
 800ae06:	b21a      	sxth	r2, r3
 800ae08:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ae0c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	7ddb      	ldrb	r3, [r3, #23]
 800ae14:	b21b      	sxth	r3, r3
 800ae16:	4313      	orrs	r3, r2
 800ae18:	b21b      	sxth	r3, r3
 800ae1a:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac
							    	uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800ae1e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ae22:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	7e1b      	ldrb	r3, [r3, #24]
 800ae2a:	021b      	lsls	r3, r3, #8
 800ae2c:	b21a      	sxth	r2, r3
 800ae2e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ae32:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	7e5b      	ldrb	r3, [r3, #25]
 800ae3a:	b21b      	sxth	r3, r3
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	b21b      	sxth	r3, r3
 800ae40:	f8a7 34aa 	strh.w	r3, [r7, #1194]	@ 0x4aa
							    	uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800ae44:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ae48:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	7e9b      	ldrb	r3, [r3, #26]
 800ae50:	021b      	lsls	r3, r3, #8
 800ae52:	b21a      	sxth	r2, r3
 800ae54:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ae58:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	7edb      	ldrb	r3, [r3, #27]
 800ae60:	b21b      	sxth	r3, r3
 800ae62:	4313      	orrs	r3, r2
 800ae64:	b21b      	sxth	r3, r3
 800ae66:	f8a7 34a8 	strh.w	r3, [r7, #1192]	@ 0x4a8
							    	uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800ae6a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ae6e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	7f1b      	ldrb	r3, [r3, #28]
 800ae76:	021b      	lsls	r3, r3, #8
 800ae78:	b21a      	sxth	r2, r3
 800ae7a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ae7e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	7f5b      	ldrb	r3, [r3, #29]
 800ae86:	b21b      	sxth	r3, r3
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	b21b      	sxth	r3, r3
 800ae8c:	f8a7 34a6 	strh.w	r3, [r7, #1190]	@ 0x4a6
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800ae90:	f9b7 34bc 	ldrsh.w	r3, [r7, #1212]	@ 0x4bc
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	da03      	bge.n	800aea0 <frame_processing+0x808>
 800ae98:	4b42      	ldr	r3, [pc, #264]	@ (800afa4 <frame_processing+0x90c>)
 800ae9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae9e:	e002      	b.n	800aea6 <frame_processing+0x80e>
 800aea0:	4b41      	ldr	r3, [pc, #260]	@ (800afa8 <frame_processing+0x910>)
 800aea2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800aea6:	f9b7 34bc 	ldrsh.w	r3, [r7, #1212]	@ 0x4bc
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	bfb8      	it	lt
 800aeae:	425b      	neglt	r3, r3
 800aeb0:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800aeb2:	4a3e      	ldr	r2, [pc, #248]	@ (800afac <frame_processing+0x914>)
 800aeb4:	fb82 1203 	smull	r1, r2, r2, r3
 800aeb8:	1152      	asrs	r2, r2, #5
 800aeba:	17db      	asrs	r3, r3, #31
 800aebc:	eba2 0c03 	sub.w	ip, r2, r3
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800aec0:	f9b7 34bc 	ldrsh.w	r3, [r7, #1212]	@ 0x4bc
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	bfb8      	it	lt
 800aec8:	425b      	neglt	r3, r3
 800aeca:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800aecc:	4a37      	ldr	r2, [pc, #220]	@ (800afac <frame_processing+0x914>)
 800aece:	fb82 1203 	smull	r1, r2, r2, r3
 800aed2:	1151      	asrs	r1, r2, #5
 800aed4:	17da      	asrs	r2, r3, #31
 800aed6:	1a8a      	subs	r2, r1, r2
 800aed8:	4611      	mov	r1, r2
 800aeda:	2264      	movs	r2, #100	@ 0x64
 800aedc:	fb01 f202 	mul.w	r2, r1, r2
 800aee0:	1a9b      	subs	r3, r3, r2
 800aee2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aee6:	f9b7 34ba 	ldrsh.w	r3, [r7, #1210]	@ 0x4ba
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	da03      	bge.n	800aef6 <frame_processing+0x85e>
 800aeee:	4b2d      	ldr	r3, [pc, #180]	@ (800afa4 <frame_processing+0x90c>)
 800aef0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aef4:	e002      	b.n	800aefc <frame_processing+0x864>
 800aef6:	4b2c      	ldr	r3, [pc, #176]	@ (800afa8 <frame_processing+0x910>)
 800aef8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800aefc:	f9b7 34ba 	ldrsh.w	r3, [r7, #1210]	@ 0x4ba
 800af00:	2b00      	cmp	r3, #0
 800af02:	bfb8      	it	lt
 800af04:	425b      	neglt	r3, r3
 800af06:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800af08:	4a28      	ldr	r2, [pc, #160]	@ (800afac <frame_processing+0x914>)
 800af0a:	fb82 1203 	smull	r1, r2, r2, r3
 800af0e:	1152      	asrs	r2, r2, #5
 800af10:	17db      	asrs	r3, r3, #31
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800af18:	f9b7 34ba 	ldrsh.w	r3, [r7, #1210]	@ 0x4ba
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	bfb8      	it	lt
 800af20:	425b      	neglt	r3, r3
 800af22:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800af24:	4a21      	ldr	r2, [pc, #132]	@ (800afac <frame_processing+0x914>)
 800af26:	fb82 1203 	smull	r1, r2, r2, r3
 800af2a:	1151      	asrs	r1, r2, #5
 800af2c:	17da      	asrs	r2, r3, #31
 800af2e:	1a8a      	subs	r2, r1, r2
 800af30:	4611      	mov	r1, r2
 800af32:	2264      	movs	r2, #100	@ 0x64
 800af34:	fb01 f202 	mul.w	r2, r1, r2
 800af38:	1a9b      	subs	r3, r3, r2
 800af3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af3e:	f9b7 34b8 	ldrsh.w	r3, [r7, #1208]	@ 0x4b8
 800af42:	2b00      	cmp	r3, #0
 800af44:	da03      	bge.n	800af4e <frame_processing+0x8b6>
 800af46:	4b17      	ldr	r3, [pc, #92]	@ (800afa4 <frame_processing+0x90c>)
 800af48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af4c:	e002      	b.n	800af54 <frame_processing+0x8bc>
 800af4e:	4b16      	ldr	r3, [pc, #88]	@ (800afa8 <frame_processing+0x910>)
 800af50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800af54:	f9b7 34b8 	ldrsh.w	r3, [r7, #1208]	@ 0x4b8
 800af58:	2b00      	cmp	r3, #0
 800af5a:	bfb8      	it	lt
 800af5c:	425b      	neglt	r3, r3
 800af5e:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800af60:	4a12      	ldr	r2, [pc, #72]	@ (800afac <frame_processing+0x914>)
 800af62:	fb82 1203 	smull	r1, r2, r2, r3
 800af66:	1152      	asrs	r2, r2, #5
 800af68:	17db      	asrs	r3, r3, #31
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800af6e:	f9b7 34b8 	ldrsh.w	r3, [r7, #1208]	@ 0x4b8
 800af72:	2b00      	cmp	r3, #0
 800af74:	bfb8      	it	lt
 800af76:	425b      	neglt	r3, r3
 800af78:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800af7a:	4a0c      	ldr	r2, [pc, #48]	@ (800afac <frame_processing+0x914>)
 800af7c:	fb82 1203 	smull	r1, r2, r2, r3
 800af80:	1151      	asrs	r1, r2, #5
 800af82:	17da      	asrs	r2, r3, #31
 800af84:	1a8a      	subs	r2, r1, r2
 800af86:	4611      	mov	r1, r2
 800af88:	2264      	movs	r2, #100	@ 0x64
 800af8a:	fb01 f202 	mul.w	r2, r1, r2
 800af8e:	1a9b      	subs	r3, r3, r2
 800af90:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af92:	f9b7 34b6 	ldrsh.w	r3, [r7, #1206]	@ 0x4b6
 800af96:	2b00      	cmp	r3, #0
 800af98:	da0a      	bge.n	800afb0 <frame_processing+0x918>
 800af9a:	4b02      	ldr	r3, [pc, #8]	@ (800afa4 <frame_processing+0x90c>)
 800af9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800afa0:	e009      	b.n	800afb6 <frame_processing+0x91e>
 800afa2:	bf00      	nop
 800afa4:	08013040 	.word	0x08013040
 800afa8:	08013044 	.word	0x08013044
 800afac:	51eb851f 	.word	0x51eb851f
 800afb0:	4bb7      	ldr	r3, [pc, #732]	@ (800b290 <frame_processing+0xbf8>)
 800afb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800afb6:	f9b7 34b6 	ldrsh.w	r3, [r7, #1206]	@ 0x4b6
 800afba:	2b00      	cmp	r3, #0
 800afbc:	bfb8      	it	lt
 800afbe:	425b      	neglt	r3, r3
 800afc0:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800afc2:	4ab4      	ldr	r2, [pc, #720]	@ (800b294 <frame_processing+0xbfc>)
 800afc4:	fb82 1203 	smull	r1, r2, r2, r3
 800afc8:	1152      	asrs	r2, r2, #5
 800afca:	17db      	asrs	r3, r3, #31
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	677b      	str	r3, [r7, #116]	@ 0x74
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800afd0:	f9b7 34b6 	ldrsh.w	r3, [r7, #1206]	@ 0x4b6
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bfb8      	it	lt
 800afd8:	425b      	neglt	r3, r3
 800afda:	b29b      	uxth	r3, r3
 800afdc:	4619      	mov	r1, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800afde:	4bad      	ldr	r3, [pc, #692]	@ (800b294 <frame_processing+0xbfc>)
 800afe0:	fb83 2301 	smull	r2, r3, r3, r1
 800afe4:	115a      	asrs	r2, r3, #5
 800afe6:	17cb      	asrs	r3, r1, #31
 800afe8:	1ad6      	subs	r6, r2, r3
 800afea:	2364      	movs	r3, #100	@ 0x64
 800afec:	fb06 f303 	mul.w	r3, r6, r3
 800aff0:	1ace      	subs	r6, r1, r3
 800aff2:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800aff6:	4aa7      	ldr	r2, [pc, #668]	@ (800b294 <frame_processing+0xbfc>)
 800aff8:	fba2 2303 	umull	r2, r3, r2, r3
 800affc:	095b      	lsrs	r3, r3, #5
 800affe:	b29b      	uxth	r3, r3
 800b000:	673b      	str	r3, [r7, #112]	@ 0x70
 800b002:	f8b7 14b4 	ldrh.w	r1, [r7, #1204]	@ 0x4b4
 800b006:	4ba3      	ldr	r3, [pc, #652]	@ (800b294 <frame_processing+0xbfc>)
 800b008:	fba3 2301 	umull	r2, r3, r3, r1
 800b00c:	095a      	lsrs	r2, r3, #5
 800b00e:	2364      	movs	r3, #100	@ 0x64
 800b010:	fb02 f303 	mul.w	r3, r2, r3
 800b014:	1acb      	subs	r3, r1, r3
 800b016:	b29b      	uxth	r3, r3
 800b018:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b01a:	f8b7 24b2 	ldrh.w	r2, [r7, #1202]	@ 0x4b2
 800b01e:	4b9d      	ldr	r3, [pc, #628]	@ (800b294 <frame_processing+0xbfc>)
 800b020:	fba3 2302 	umull	r2, r3, r3, r2
 800b024:	095b      	lsrs	r3, r3, #5
 800b026:	b29b      	uxth	r3, r3
 800b028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b02a:	f8b7 14b2 	ldrh.w	r1, [r7, #1202]	@ 0x4b2
 800b02e:	4b99      	ldr	r3, [pc, #612]	@ (800b294 <frame_processing+0xbfc>)
 800b030:	fba3 2301 	umull	r2, r3, r3, r1
 800b034:	095a      	lsrs	r2, r3, #5
 800b036:	2364      	movs	r3, #100	@ 0x64
 800b038:	fb02 f303 	mul.w	r3, r2, r3
 800b03c:	1acb      	subs	r3, r1, r3
 800b03e:	b29b      	uxth	r3, r3
 800b040:	667b      	str	r3, [r7, #100]	@ 0x64
 800b042:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	@ 0x4b0
 800b046:	4b93      	ldr	r3, [pc, #588]	@ (800b294 <frame_processing+0xbfc>)
 800b048:	fba3 2302 	umull	r2, r3, r3, r2
 800b04c:	095b      	lsrs	r3, r3, #5
 800b04e:	b29b      	uxth	r3, r3
 800b050:	663b      	str	r3, [r7, #96]	@ 0x60
 800b052:	f8b7 14b0 	ldrh.w	r1, [r7, #1200]	@ 0x4b0
 800b056:	4b8f      	ldr	r3, [pc, #572]	@ (800b294 <frame_processing+0xbfc>)
 800b058:	fba3 2301 	umull	r2, r3, r3, r1
 800b05c:	095a      	lsrs	r2, r3, #5
 800b05e:	2364      	movs	r3, #100	@ 0x64
 800b060:	fb02 f303 	mul.w	r3, r2, r3
 800b064:	1acb      	subs	r3, r1, r3
 800b066:	b29b      	uxth	r3, r3
 800b068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b06a:	f8b7 24ae 	ldrh.w	r2, [r7, #1198]	@ 0x4ae
 800b06e:	4b89      	ldr	r3, [pc, #548]	@ (800b294 <frame_processing+0xbfc>)
 800b070:	fba3 2302 	umull	r2, r3, r3, r2
 800b074:	095b      	lsrs	r3, r3, #5
 800b076:	b29b      	uxth	r3, r3
 800b078:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b07a:	f8b7 14ae 	ldrh.w	r1, [r7, #1198]	@ 0x4ae
 800b07e:	4b85      	ldr	r3, [pc, #532]	@ (800b294 <frame_processing+0xbfc>)
 800b080:	fba3 2301 	umull	r2, r3, r3, r1
 800b084:	095a      	lsrs	r2, r3, #5
 800b086:	2364      	movs	r3, #100	@ 0x64
 800b088:	fb02 f303 	mul.w	r3, r2, r3
 800b08c:	1acb      	subs	r3, r1, r3
 800b08e:	b29b      	uxth	r3, r3
 800b090:	657b      	str	r3, [r7, #84]	@ 0x54
 800b092:	f8b7 24ac 	ldrh.w	r2, [r7, #1196]	@ 0x4ac
 800b096:	4b7f      	ldr	r3, [pc, #508]	@ (800b294 <frame_processing+0xbfc>)
 800b098:	fba3 2302 	umull	r2, r3, r3, r2
 800b09c:	095b      	lsrs	r3, r3, #5
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0a2:	f8b7 14ac 	ldrh.w	r1, [r7, #1196]	@ 0x4ac
 800b0a6:	4b7b      	ldr	r3, [pc, #492]	@ (800b294 <frame_processing+0xbfc>)
 800b0a8:	fba3 2301 	umull	r2, r3, r3, r1
 800b0ac:	095a      	lsrs	r2, r3, #5
 800b0ae:	2364      	movs	r3, #100	@ 0x64
 800b0b0:	fb02 f303 	mul.w	r3, r2, r3
 800b0b4:	1acb      	subs	r3, r1, r3
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0ba:	f8b7 24aa 	ldrh.w	r2, [r7, #1194]	@ 0x4aa
 800b0be:	4b75      	ldr	r3, [pc, #468]	@ (800b294 <frame_processing+0xbfc>)
 800b0c0:	fba3 2302 	umull	r2, r3, r3, r2
 800b0c4:	095b      	lsrs	r3, r3, #5
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0ca:	f8b7 14aa 	ldrh.w	r1, [r7, #1194]	@ 0x4aa
 800b0ce:	4b71      	ldr	r3, [pc, #452]	@ (800b294 <frame_processing+0xbfc>)
 800b0d0:	fba3 2301 	umull	r2, r3, r3, r1
 800b0d4:	095a      	lsrs	r2, r3, #5
 800b0d6:	2364      	movs	r3, #100	@ 0x64
 800b0d8:	fb02 f303 	mul.w	r3, r2, r3
 800b0dc:	1acb      	subs	r3, r1, r3
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0e2:	f8b7 24a8 	ldrh.w	r2, [r7, #1192]	@ 0x4a8
 800b0e6:	4b6b      	ldr	r3, [pc, #428]	@ (800b294 <frame_processing+0xbfc>)
 800b0e8:	fba3 2302 	umull	r2, r3, r3, r2
 800b0ec:	095b      	lsrs	r3, r3, #5
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0f2:	f8b7 14a8 	ldrh.w	r1, [r7, #1192]	@ 0x4a8
 800b0f6:	4b67      	ldr	r3, [pc, #412]	@ (800b294 <frame_processing+0xbfc>)
 800b0f8:	fba3 2301 	umull	r2, r3, r3, r1
 800b0fc:	095a      	lsrs	r2, r3, #5
 800b0fe:	2364      	movs	r3, #100	@ 0x64
 800b100:	fb02 f303 	mul.w	r3, r2, r3
 800b104:	1acb      	subs	r3, r1, r3
 800b106:	b29b      	uxth	r3, r3
 800b108:	461d      	mov	r5, r3
 800b10a:	f8b7 24a6 	ldrh.w	r2, [r7, #1190]	@ 0x4a6
 800b10e:	4b61      	ldr	r3, [pc, #388]	@ (800b294 <frame_processing+0xbfc>)
 800b110:	fba3 2302 	umull	r2, r3, r3, r2
 800b114:	095b      	lsrs	r3, r3, #5
 800b116:	b29b      	uxth	r3, r3
 800b118:	461c      	mov	r4, r3
 800b11a:	f8b7 14a6 	ldrh.w	r1, [r7, #1190]	@ 0x4a6
 800b11e:	4b5d      	ldr	r3, [pc, #372]	@ (800b294 <frame_processing+0xbfc>)
 800b120:	fba3 2301 	umull	r2, r3, r3, r1
 800b124:	095a      	lsrs	r2, r3, #5
 800b126:	2364      	movs	r3, #100	@ 0x64
 800b128:	fb02 f303 	mul.w	r3, r2, r3
 800b12c:	1acb      	subs	r3, r1, r3
 800b12e:	b29b      	uxth	r3, r3
 800b130:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800b134:	9319      	str	r3, [sp, #100]	@ 0x64
 800b136:	9418      	str	r4, [sp, #96]	@ 0x60
 800b138:	9517      	str	r5, [sp, #92]	@ 0x5c
 800b13a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b13c:	9216      	str	r2, [sp, #88]	@ 0x58
 800b13e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b140:	9215      	str	r2, [sp, #84]	@ 0x54
 800b142:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b144:	9214      	str	r2, [sp, #80]	@ 0x50
 800b146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b148:	9213      	str	r2, [sp, #76]	@ 0x4c
 800b14a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b14c:	9212      	str	r2, [sp, #72]	@ 0x48
 800b14e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b150:	9211      	str	r2, [sp, #68]	@ 0x44
 800b152:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b154:	9210      	str	r2, [sp, #64]	@ 0x40
 800b156:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b158:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b15a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b15c:	920e      	str	r2, [sp, #56]	@ 0x38
 800b15e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b160:	920d      	str	r2, [sp, #52]	@ 0x34
 800b162:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b164:	920c      	str	r2, [sp, #48]	@ 0x30
 800b166:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b168:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b16a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b16c:	920a      	str	r2, [sp, #40]	@ 0x28
 800b16e:	9609      	str	r6, [sp, #36]	@ 0x24
 800b170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b172:	9308      	str	r3, [sp, #32]
 800b174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b178:	9307      	str	r3, [sp, #28]
 800b17a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b17c:	9306      	str	r3, [sp, #24]
 800b17e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b180:	9305      	str	r3, [sp, #20]
 800b182:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b186:	9304      	str	r3, [sp, #16]
 800b188:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b18c:	9303      	str	r3, [sp, #12]
 800b18e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b192:	9302      	str	r3, [sp, #8]
 800b194:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b198:	9301      	str	r3, [sp, #4]
 800b19a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	4663      	mov	r3, ip
 800b1a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b1a6:	493c      	ldr	r1, [pc, #240]	@ (800b298 <frame_processing+0xc00>)
 800b1a8:	f002 fa5c 	bl	800d664 <siprintf>
							    	Uart_sendstring(UART5, buffer_0x08);
 800b1ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	483a      	ldr	r0, [pc, #232]	@ (800b29c <frame_processing+0xc04>)
 800b1b4:	f7f6 fe8a 	bl	8001ecc <Uart_sendstring>
							    break;
 800b1b8:	bf00      	nop
					break;
 800b1ba:	e004      	b.n	800b1c6 <frame_processing+0xb2e>
				default:
					clear_send_flag();
 800b1bc:	f7f6 ffa8 	bl	8002110 <clear_send_flag>
					return FSP_PKT_INVALID;
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	f001 ba26 	b.w	800c612 <frame_processing+0x1f7a>
					break;
 800b1c6:	bf00      	nop
					break;
			}
			clear_send_flag();
 800b1c8:	f7f6 ffa2 	bl	8002110 <clear_send_flag>
			break;
 800b1cc:	f001 ba20 	b.w	800c610 <frame_processing+0x1f78>
		case FSP_ADR_PDU:
			switch (fsp_pkt->type)
 800b1d0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b1d4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	791b      	ldrb	r3, [r3, #4]
 800b1dc:	2b05      	cmp	r3, #5
 800b1de:	d002      	beq.n	800b1e6 <frame_processing+0xb4e>
 800b1e0:	2b07      	cmp	r3, #7
 800b1e2:	d007      	beq.n	800b1f4 <frame_processing+0xb5c>
 800b1e4:	e3de      	b.n	800b9a4 <frame_processing+0x130c>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800b1e6:	f7f6 ff93 	bl	8002110 <clear_send_flag>
					Uart_sendstring(UART5, "\n> PDU_ACK\r\n> ");
 800b1ea:	492d      	ldr	r1, [pc, #180]	@ (800b2a0 <frame_processing+0xc08>)
 800b1ec:	482b      	ldr	r0, [pc, #172]	@ (800b29c <frame_processing+0xc04>)
 800b1ee:	f7f6 fe6d 	bl	8001ecc <Uart_sendstring>
					break;
 800b1f2:	e3dc      	b.n	800b9ae <frame_processing+0x1316>
				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800b1f4:	f7f6 ff8c 	bl	8002110 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800b1f8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b1fc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	795b      	ldrb	r3, [r3, #5]
 800b204:	2b06      	cmp	r3, #6
 800b206:	dc17      	bgt.n	800b238 <frame_processing+0xba0>
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f2c0 83c3 	blt.w	800b994 <frame_processing+0x12fc>
 800b20e:	2b06      	cmp	r3, #6
 800b210:	f200 83c0 	bhi.w	800b994 <frame_processing+0x12fc>
 800b214:	a201      	add	r2, pc, #4	@ (adr r2, 800b21c <frame_processing+0xb84>)
 800b216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21a:	bf00      	nop
 800b21c:	0800b23f 	.word	0x0800b23f
 800b220:	0800b995 	.word	0x0800b995
 800b224:	0800b995 	.word	0x0800b995
 800b228:	0800b995 	.word	0x0800b995
 800b22c:	0800b2ad 	.word	0x0800b2ad
 800b230:	0800b349 	.word	0x0800b349
 800b234:	0800b3f1 	.word	0x0800b3f1
 800b238:	2bff      	cmp	r3, #255	@ 0xff
 800b23a:	d014      	beq.n	800b266 <frame_processing+0xbce>
 800b23c:	e3aa      	b.n	800b994 <frame_processing+0x12fc>
					{
						case 0x00:
						{
							char buffer_0x00[50];
							sprintf(buffer_0x00, "PDU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800b23e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b242:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	799b      	ldrb	r3, [r3, #6]
 800b24a:	461a      	mov	r2, r3
 800b24c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b250:	4914      	ldr	r1, [pc, #80]	@ (800b2a4 <frame_processing+0xc0c>)
 800b252:	4618      	mov	r0, r3
 800b254:	f002 fa06 	bl	800d664 <siprintf>
							Uart_sendstring(UART5, buffer_0x00);
 800b258:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b25c:	4619      	mov	r1, r3
 800b25e:	480f      	ldr	r0, [pc, #60]	@ (800b29c <frame_processing+0xc04>)
 800b260:	f7f6 fe34 	bl	8001ecc <Uart_sendstring>
						}
							break;
 800b264:	e39b      	b.n	800b99e <frame_processing+0x1306>
						case 0xFF:
						{
							char buffer_0xFF[50];
							sprintf(buffer_0xFF, "PDU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800b266:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b26a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	799b      	ldrb	r3, [r3, #6]
 800b272:	461a      	mov	r2, r3
 800b274:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b278:	490b      	ldr	r1, [pc, #44]	@ (800b2a8 <frame_processing+0xc10>)
 800b27a:	4618      	mov	r0, r3
 800b27c:	f002 f9f2 	bl	800d664 <siprintf>
							Uart_sendstring(UART5, buffer_0xFF);
 800b280:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b284:	4619      	mov	r1, r3
 800b286:	4805      	ldr	r0, [pc, #20]	@ (800b29c <frame_processing+0xc04>)
 800b288:	f7f6 fe20 	bl	8001ecc <Uart_sendstring>
						}
							break;
 800b28c:	e387      	b.n	800b99e <frame_processing+0x1306>
 800b28e:	bf00      	nop
 800b290:	08013044 	.word	0x08013044
 800b294:	51eb851f 	.word	0x51eb851f
 800b298:	08013178 	.word	0x08013178
 800b29c:	40005000 	.word	0x40005000
 800b2a0:	08013268 	.word	0x08013268
 800b2a4:	08013278 	.word	0x08013278
 800b2a8:	08013294 	.word	0x08013294

						case 0x04:
						{
							        uint8_t channel = fsp_pkt->payload[1];
 800b2ac:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b2b0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	799b      	ldrb	r3, [r3, #6]
 800b2b8:	f887 34c3 	strb.w	r3, [r7, #1219]	@ 0x4c3
							        uint8_t status_0x04 = fsp_pkt->payload[2];
 800b2bc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b2c0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	79db      	ldrb	r3, [r3, #7]
 800b2c8:	f887 34c2 	strb.w	r3, [r7, #1218]	@ 0x4c2
							        uint16_t voltage_0x04 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800b2cc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b2d0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	7a1b      	ldrb	r3, [r3, #8]
 800b2d8:	021b      	lsls	r3, r3, #8
 800b2da:	b21a      	sxth	r2, r3
 800b2dc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b2e0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	7a5b      	ldrb	r3, [r3, #9]
 800b2e8:	b21b      	sxth	r3, r3
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	b21b      	sxth	r3, r3
 800b2ee:	f8a7 34c0 	strh.w	r3, [r7, #1216]	@ 0x4c0
							        uint16_t current_0x04 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800b2f2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b2f6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	7a9b      	ldrb	r3, [r3, #10]
 800b2fe:	021b      	lsls	r3, r3, #8
 800b300:	b21a      	sxth	r2, r3
 800b302:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b306:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	7adb      	ldrb	r3, [r3, #11]
 800b30e:	b21b      	sxth	r3, r3
 800b310:	4313      	orrs	r3, r2
 800b312:	b21b      	sxth	r3, r3
 800b314:	f8a7 34be 	strh.w	r3, [r7, #1214]	@ 0x4be

							        char buffer_0x07[100];
							        sprintf(buffer_0x07, "PDU_Res: CMDcode 0x04 [{Channel %u} Status %u, Voltage: %u, Current: %u]\n", channel, status_0x04, voltage_0x04, current_0x04);
 800b318:	f897 14c3 	ldrb.w	r1, [r7, #1219]	@ 0x4c3
 800b31c:	f897 44c2 	ldrb.w	r4, [r7, #1218]	@ 0x4c2
 800b320:	f8b7 34c0 	ldrh.w	r3, [r7, #1216]	@ 0x4c0
 800b324:	f8b7 24be 	ldrh.w	r2, [r7, #1214]	@ 0x4be
 800b328:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800b32c:	9201      	str	r2, [sp, #4]
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	4623      	mov	r3, r4
 800b332:	460a      	mov	r2, r1
 800b334:	492b      	ldr	r1, [pc, #172]	@ (800b3e4 <frame_processing+0xd4c>)
 800b336:	f002 f995 	bl	800d664 <siprintf>
							        Uart_sendstring(UART5, buffer_0x07);
 800b33a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b33e:	4619      	mov	r1, r3
 800b340:	4829      	ldr	r0, [pc, #164]	@ (800b3e8 <frame_processing+0xd50>)
 800b342:	f7f6 fdc3 	bl	8001ecc <Uart_sendstring>
						}
									break;
 800b346:	e32a      	b.n	800b99e <frame_processing+0x1306>
						case 0x05:
						{
						            uint8_t buck = fsp_pkt->payload[1];
 800b348:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b34c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	799b      	ldrb	r3, [r3, #6]
 800b354:	f887 34c9 	strb.w	r3, [r7, #1225]	@ 0x4c9
						            uint8_t status_0x05 = fsp_pkt->payload[2];
 800b358:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b35c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	79db      	ldrb	r3, [r3, #7]
 800b364:	f887 34c8 	strb.w	r3, [r7, #1224]	@ 0x4c8
						            uint16_t voltage_0x05 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800b368:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b36c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	7a1b      	ldrb	r3, [r3, #8]
 800b374:	021b      	lsls	r3, r3, #8
 800b376:	b21a      	sxth	r2, r3
 800b378:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b37c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	7a5b      	ldrb	r3, [r3, #9]
 800b384:	b21b      	sxth	r3, r3
 800b386:	4313      	orrs	r3, r2
 800b388:	b21b      	sxth	r3, r3
 800b38a:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
						            uint16_t current_0x05 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800b38e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b392:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	7a9b      	ldrb	r3, [r3, #10]
 800b39a:	021b      	lsls	r3, r3, #8
 800b39c:	b21a      	sxth	r2, r3
 800b39e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b3a2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	7adb      	ldrb	r3, [r3, #11]
 800b3aa:	b21b      	sxth	r3, r3
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	b21b      	sxth	r3, r3
 800b3b0:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4

						            char buffer_0x05[100];
						            sprintf(buffer_0x05, "PDU_Res: CMDcode 0x05 [{Buck %u} Status %u, Voltage: %u, Current: %u]\n", buck, status_0x05, voltage_0x05, current_0x05);
 800b3b4:	f897 14c9 	ldrb.w	r1, [r7, #1225]	@ 0x4c9
 800b3b8:	f897 44c8 	ldrb.w	r4, [r7, #1224]	@ 0x4c8
 800b3bc:	f8b7 34c6 	ldrh.w	r3, [r7, #1222]	@ 0x4c6
 800b3c0:	f8b7 24c4 	ldrh.w	r2, [r7, #1220]	@ 0x4c4
 800b3c4:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800b3c8:	9201      	str	r2, [sp, #4]
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	4623      	mov	r3, r4
 800b3ce:	460a      	mov	r2, r1
 800b3d0:	4906      	ldr	r1, [pc, #24]	@ (800b3ec <frame_processing+0xd54>)
 800b3d2:	f002 f947 	bl	800d664 <siprintf>
						            Uart_sendstring(UART5, buffer_0x05);
 800b3d6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4802      	ldr	r0, [pc, #8]	@ (800b3e8 <frame_processing+0xd50>)
 800b3de:	f7f6 fd75 	bl	8001ecc <Uart_sendstring>
						}
									break;
 800b3e2:	e2dc      	b.n	800b99e <frame_processing+0x1306>
 800b3e4:	080132b0 	.word	0x080132b0
 800b3e8:	40005000 	.word	0x40005000
 800b3ec:	080132fc 	.word	0x080132fc
						case 0x06:
						{
							uint8_t tec1buck_status = fsp_pkt->payload[1];
 800b3f0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b3f4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	799b      	ldrb	r3, [r3, #6]
 800b3fc:	f887 3511 	strb.w	r3, [r7, #1297]	@ 0x511
							uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 800b400:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b404:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	79db      	ldrb	r3, [r3, #7]
 800b40c:	021b      	lsls	r3, r3, #8
 800b40e:	b21a      	sxth	r2, r3
 800b410:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b414:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	7a1b      	ldrb	r3, [r3, #8]
 800b41c:	b21b      	sxth	r3, r3
 800b41e:	4313      	orrs	r3, r2
 800b420:	b21b      	sxth	r3, r3
 800b422:	f8a7 350e 	strh.w	r3, [r7, #1294]	@ 0x50e

							uint8_t tec2buck_status = fsp_pkt->payload[4];
 800b426:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b42a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	7a5b      	ldrb	r3, [r3, #9]
 800b432:	f887 350d 	strb.w	r3, [r7, #1293]	@ 0x50d
							uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800b436:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b43a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	7a9b      	ldrb	r3, [r3, #10]
 800b442:	021b      	lsls	r3, r3, #8
 800b444:	b21a      	sxth	r2, r3
 800b446:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b44a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	7adb      	ldrb	r3, [r3, #11]
 800b452:	b21b      	sxth	r3, r3
 800b454:	4313      	orrs	r3, r2
 800b456:	b21b      	sxth	r3, r3
 800b458:	f8a7 350a 	strh.w	r3, [r7, #1290]	@ 0x50a

							uint8_t tec3buck_status = fsp_pkt->payload[7];
 800b45c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b460:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	7b1b      	ldrb	r3, [r3, #12]
 800b468:	f887 3509 	strb.w	r3, [r7, #1289]	@ 0x509
							uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 800b46c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b470:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	7b5b      	ldrb	r3, [r3, #13]
 800b478:	021b      	lsls	r3, r3, #8
 800b47a:	b21a      	sxth	r2, r3
 800b47c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b480:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	7b9b      	ldrb	r3, [r3, #14]
 800b488:	b21b      	sxth	r3, r3
 800b48a:	4313      	orrs	r3, r2
 800b48c:	b21b      	sxth	r3, r3
 800b48e:	f8a7 3506 	strh.w	r3, [r7, #1286]	@ 0x506

							uint8_t tec4buck_status = fsp_pkt->payload[10];
 800b492:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b496:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	7bdb      	ldrb	r3, [r3, #15]
 800b49e:	f887 3505 	strb.w	r3, [r7, #1285]	@ 0x505
							uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 800b4a2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b4a6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	7c1b      	ldrb	r3, [r3, #16]
 800b4ae:	021b      	lsls	r3, r3, #8
 800b4b0:	b21a      	sxth	r2, r3
 800b4b2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b4b6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	7c5b      	ldrb	r3, [r3, #17]
 800b4be:	b21b      	sxth	r3, r3
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	b21b      	sxth	r3, r3
 800b4c4:	f8a7 3502 	strh.w	r3, [r7, #1282]	@ 0x502

							uint8_t mcubuck_status = fsp_pkt->payload[13];
 800b4c8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b4cc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	7c9b      	ldrb	r3, [r3, #18]
 800b4d4:	f887 3501 	strb.w	r3, [r7, #1281]	@ 0x501
							uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 800b4d8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b4dc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	7cdb      	ldrb	r3, [r3, #19]
 800b4e4:	021b      	lsls	r3, r3, #8
 800b4e6:	b21a      	sxth	r2, r3
 800b4e8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b4ec:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	7d1b      	ldrb	r3, [r3, #20]
 800b4f4:	b21b      	sxth	r3, r3
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	b21b      	sxth	r3, r3
 800b4fa:	f8a7 34fe 	strh.w	r3, [r7, #1278]	@ 0x4fe

							uint8_t ledbuck_status = fsp_pkt->payload[16];
 800b4fe:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b502:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	7d5b      	ldrb	r3, [r3, #21]
 800b50a:	f887 34fd 	strb.w	r3, [r7, #1277]	@ 0x4fd
							uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 800b50e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b512:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	7d9b      	ldrb	r3, [r3, #22]
 800b51a:	021b      	lsls	r3, r3, #8
 800b51c:	b21a      	sxth	r2, r3
 800b51e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b522:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	7ddb      	ldrb	r3, [r3, #23]
 800b52a:	b21b      	sxth	r3, r3
 800b52c:	4313      	orrs	r3, r2
 800b52e:	b21b      	sxth	r3, r3
 800b530:	f8a7 34fa 	strh.w	r3, [r7, #1274]	@ 0x4fa

							uint8_t cm4buck_status = fsp_pkt->payload[19];
 800b534:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b538:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	7e1b      	ldrb	r3, [r3, #24]
 800b540:	f887 34f9 	strb.w	r3, [r7, #1273]	@ 0x4f9
							uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 800b544:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b548:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	7e5b      	ldrb	r3, [r3, #25]
 800b550:	021b      	lsls	r3, r3, #8
 800b552:	b21a      	sxth	r2, r3
 800b554:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b558:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	7e9b      	ldrb	r3, [r3, #26]
 800b560:	b21b      	sxth	r3, r3
 800b562:	4313      	orrs	r3, r2
 800b564:	b21b      	sxth	r3, r3
 800b566:	f8a7 34f6 	strh.w	r3, [r7, #1270]	@ 0x4f6

							uint8_t tec1_status = fsp_pkt->payload[22];
 800b56a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b56e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	7edb      	ldrb	r3, [r3, #27]
 800b576:	f887 34f5 	strb.w	r3, [r7, #1269]	@ 0x4f5
							uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 800b57a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b57e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	7f1b      	ldrb	r3, [r3, #28]
 800b586:	021b      	lsls	r3, r3, #8
 800b588:	b21a      	sxth	r2, r3
 800b58a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b58e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	7f5b      	ldrb	r3, [r3, #29]
 800b596:	b21b      	sxth	r3, r3
 800b598:	4313      	orrs	r3, r2
 800b59a:	b21b      	sxth	r3, r3
 800b59c:	f8a7 34f2 	strh.w	r3, [r7, #1266]	@ 0x4f2

							uint8_t tec2_status = fsp_pkt->payload[25];
 800b5a0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b5a4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	7f9b      	ldrb	r3, [r3, #30]
 800b5ac:	f887 34f1 	strb.w	r3, [r7, #1265]	@ 0x4f1
							uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 800b5b0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b5b4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	7fdb      	ldrb	r3, [r3, #31]
 800b5bc:	021b      	lsls	r3, r3, #8
 800b5be:	b21a      	sxth	r2, r3
 800b5c0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b5c4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b5ce:	b21b      	sxth	r3, r3
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	b21b      	sxth	r3, r3
 800b5d4:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee

							uint8_t tec3_status = fsp_pkt->payload[28];
 800b5d8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b5dc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b5e6:	f887 34ed 	strb.w	r3, [r7, #1261]	@ 0x4ed
							uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 800b5ea:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b5ee:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800b5f8:	021b      	lsls	r3, r3, #8
 800b5fa:	b21a      	sxth	r2, r3
 800b5fc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b600:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800b60a:	b21b      	sxth	r3, r3
 800b60c:	4313      	orrs	r3, r2
 800b60e:	b21b      	sxth	r3, r3
 800b610:	f8a7 34ea 	strh.w	r3, [r7, #1258]	@ 0x4ea

							uint8_t tec4_status = fsp_pkt->payload[31];
 800b614:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b618:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b622:	f887 34e9 	strb.w	r3, [r7, #1257]	@ 0x4e9
							uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 800b626:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b62a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b634:	021b      	lsls	r3, r3, #8
 800b636:	b21a      	sxth	r2, r3
 800b638:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b63c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800b646:	b21b      	sxth	r3, r3
 800b648:	4313      	orrs	r3, r2
 800b64a:	b21b      	sxth	r3, r3
 800b64c:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6

							uint8_t copc_status = fsp_pkt->payload[34];
 800b650:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b654:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800b65e:	f887 34e5 	strb.w	r3, [r7, #1253]	@ 0x4e5
							uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 800b662:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b666:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b670:	021b      	lsls	r3, r3, #8
 800b672:	b21a      	sxth	r2, r3
 800b674:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b678:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800b682:	b21b      	sxth	r3, r3
 800b684:	4313      	orrs	r3, r2
 800b686:	b21b      	sxth	r3, r3
 800b688:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2

							uint8_t iou_status = fsp_pkt->payload[37];
 800b68c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b690:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800b69a:	f887 34e1 	strb.w	r3, [r7, #1249]	@ 0x4e1
							uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800b69e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b6a2:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800b6ac:	021b      	lsls	r3, r3, #8
 800b6ae:	b21a      	sxth	r2, r3
 800b6b0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b6b4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b6be:	b21b      	sxth	r3, r3
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	b21b      	sxth	r3, r3
 800b6c4:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de

							uint8_t rgb_status = fsp_pkt->payload[40];
 800b6c8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b6cc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b6d6:	f887 34dd 	strb.w	r3, [r7, #1245]	@ 0x4dd
							uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 800b6da:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b6de:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	b21a      	sxth	r2, r3
 800b6ec:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b6f0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b6fa:	b21b      	sxth	r3, r3
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	b21b      	sxth	r3, r3
 800b700:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da

							uint8_t ir_status = fsp_pkt->payload[43];
 800b704:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b708:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b712:	f887 34d9 	strb.w	r3, [r7, #1241]	@ 0x4d9
							uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 800b716:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b71a:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b724:	021b      	lsls	r3, r3, #8
 800b726:	b21a      	sxth	r2, r3
 800b728:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b72c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b736:	b21b      	sxth	r3, r3
 800b738:	4313      	orrs	r3, r2
 800b73a:	b21b      	sxth	r3, r3
 800b73c:	f8a7 34d6 	strh.w	r3, [r7, #1238]	@ 0x4d6

							uint8_t cm4_status = fsp_pkt->payload[46];
 800b740:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b744:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800b74e:	f887 34d5 	strb.w	r3, [r7, #1237]	@ 0x4d5
							uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 800b752:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b756:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b760:	021b      	lsls	r3, r3, #8
 800b762:	b21a      	sxth	r2, r3
 800b764:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b768:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b772:	b21b      	sxth	r3, r3
 800b774:	4313      	orrs	r3, r2
 800b776:	b21b      	sxth	r3, r3
 800b778:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2

							uint8_t vin_status = fsp_pkt->payload[49];
 800b77c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b780:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800b78a:	f887 34d1 	strb.w	r3, [r7, #1233]	@ 0x4d1
							uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 800b78e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b792:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800b79c:	021b      	lsls	r3, r3, #8
 800b79e:	b21a      	sxth	r2, r3
 800b7a0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b7a4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b7ae:	b21b      	sxth	r3, r3
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	b21b      	sxth	r3, r3
 800b7b4:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce

							uint8_t vbus_status = fsp_pkt->payload[52];
 800b7b8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b7bc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b7c6:	f887 34cd 	strb.w	r3, [r7, #1229]	@ 0x4cd
							uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 800b7ca:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b7ce:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b7d8:	021b      	lsls	r3, r3, #8
 800b7da:	b21a      	sxth	r2, r3
 800b7dc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b7e0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b7ea:	b21b      	sxth	r3, r3
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	b21b      	sxth	r3, r3
 800b7f0:	f8a7 34ca 	strh.w	r3, [r7, #1226]	@ 0x4ca


						            char buffer_0x06[1000];
						            sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 800b7f4:	f897 e511 	ldrb.w	lr, [r7, #1297]	@ 0x511
 800b7f8:	f8b7 850e 	ldrh.w	r8, [r7, #1294]	@ 0x50e
 800b7fc:	f897 350d 	ldrb.w	r3, [r7, #1293]	@ 0x50d
 800b800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b804:	f8b7 250a 	ldrh.w	r2, [r7, #1290]	@ 0x50a
 800b808:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b80c:	f897 1509 	ldrb.w	r1, [r7, #1289]	@ 0x509
 800b810:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800b814:	f8b7 0506 	ldrh.w	r0, [r7, #1286]	@ 0x506
 800b818:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800b81c:	f897 4505 	ldrb.w	r4, [r7, #1285]	@ 0x505
 800b820:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800b824:	f8b7 5502 	ldrh.w	r5, [r7, #1282]	@ 0x502
 800b828:	f8c7 5084 	str.w	r5, [r7, #132]	@ 0x84
 800b82c:	f897 6501 	ldrb.w	r6, [r7, #1281]	@ 0x501
 800b830:	f8c7 6080 	str.w	r6, [r7, #128]	@ 0x80
 800b834:	f8b7 c4fe 	ldrh.w	ip, [r7, #1278]	@ 0x4fe
 800b838:	4663      	mov	r3, ip
 800b83a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b83c:	f897 c4fd 	ldrb.w	ip, [r7, #1277]	@ 0x4fd
 800b840:	4662      	mov	r2, ip
 800b842:	67ba      	str	r2, [r7, #120]	@ 0x78
 800b844:	f8b7 c4fa 	ldrh.w	ip, [r7, #1274]	@ 0x4fa
 800b848:	4661      	mov	r1, ip
 800b84a:	6779      	str	r1, [r7, #116]	@ 0x74
 800b84c:	f897 c4f9 	ldrb.w	ip, [r7, #1273]	@ 0x4f9
 800b850:	4660      	mov	r0, ip
 800b852:	6738      	str	r0, [r7, #112]	@ 0x70
 800b854:	f8b7 c4f6 	ldrh.w	ip, [r7, #1270]	@ 0x4f6
 800b858:	4664      	mov	r4, ip
 800b85a:	66fc      	str	r4, [r7, #108]	@ 0x6c
 800b85c:	f897 c4f5 	ldrb.w	ip, [r7, #1269]	@ 0x4f5
 800b860:	4665      	mov	r5, ip
 800b862:	66bd      	str	r5, [r7, #104]	@ 0x68
 800b864:	f8b7 c4f2 	ldrh.w	ip, [r7, #1266]	@ 0x4f2
 800b868:	4666      	mov	r6, ip
 800b86a:	667e      	str	r6, [r7, #100]	@ 0x64
 800b86c:	f897 c4f1 	ldrb.w	ip, [r7, #1265]	@ 0x4f1
 800b870:	4663      	mov	r3, ip
 800b872:	663b      	str	r3, [r7, #96]	@ 0x60
 800b874:	f8b7 c4ee 	ldrh.w	ip, [r7, #1262]	@ 0x4ee
 800b878:	4662      	mov	r2, ip
 800b87a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b87c:	f897 c4ed 	ldrb.w	ip, [r7, #1261]	@ 0x4ed
 800b880:	4661      	mov	r1, ip
 800b882:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b884:	f8b7 c4ea 	ldrh.w	ip, [r7, #1258]	@ 0x4ea
 800b888:	4660      	mov	r0, ip
 800b88a:	6578      	str	r0, [r7, #84]	@ 0x54
 800b88c:	f897 c4e9 	ldrb.w	ip, [r7, #1257]	@ 0x4e9
 800b890:	4664      	mov	r4, ip
 800b892:	653c      	str	r4, [r7, #80]	@ 0x50
 800b894:	f8b7 c4e6 	ldrh.w	ip, [r7, #1254]	@ 0x4e6
 800b898:	4665      	mov	r5, ip
 800b89a:	64fd      	str	r5, [r7, #76]	@ 0x4c
 800b89c:	f897 c4e5 	ldrb.w	ip, [r7, #1253]	@ 0x4e5
 800b8a0:	4666      	mov	r6, ip
 800b8a2:	64be      	str	r6, [r7, #72]	@ 0x48
 800b8a4:	f8b7 c4e2 	ldrh.w	ip, [r7, #1250]	@ 0x4e2
 800b8a8:	4663      	mov	r3, ip
 800b8aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8ac:	f897 c4e1 	ldrb.w	ip, [r7, #1249]	@ 0x4e1
 800b8b0:	4662      	mov	r2, ip
 800b8b2:	643a      	str	r2, [r7, #64]	@ 0x40
 800b8b4:	f8b7 c4de 	ldrh.w	ip, [r7, #1246]	@ 0x4de
 800b8b8:	4661      	mov	r1, ip
 800b8ba:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800b8bc:	f897 c4dd 	ldrb.w	ip, [r7, #1245]	@ 0x4dd
 800b8c0:	4660      	mov	r0, ip
 800b8c2:	63b8      	str	r0, [r7, #56]	@ 0x38
 800b8c4:	f8b7 c4da 	ldrh.w	ip, [r7, #1242]	@ 0x4da
 800b8c8:	4664      	mov	r4, ip
 800b8ca:	637c      	str	r4, [r7, #52]	@ 0x34
 800b8cc:	f897 c4d9 	ldrb.w	ip, [r7, #1241]	@ 0x4d9
 800b8d0:	4665      	mov	r5, ip
 800b8d2:	633d      	str	r5, [r7, #48]	@ 0x30
 800b8d4:	f8b7 64d6 	ldrh.w	r6, [r7, #1238]	@ 0x4d6
 800b8d8:	f897 54d5 	ldrb.w	r5, [r7, #1237]	@ 0x4d5
 800b8dc:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 800b8e0:	f897 04d1 	ldrb.w	r0, [r7, #1233]	@ 0x4d1
 800b8e4:	f8b7 14ce 	ldrh.w	r1, [r7, #1230]	@ 0x4ce
 800b8e8:	f897 24cd 	ldrb.w	r2, [r7, #1229]	@ 0x4cd
 800b8ec:	f8b7 34ca 	ldrh.w	r3, [r7, #1226]	@ 0x4ca
 800b8f0:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 800b8f4:	9321      	str	r3, [sp, #132]	@ 0x84
 800b8f6:	9220      	str	r2, [sp, #128]	@ 0x80
 800b8f8:	911f      	str	r1, [sp, #124]	@ 0x7c
 800b8fa:	901e      	str	r0, [sp, #120]	@ 0x78
 800b8fc:	941d      	str	r4, [sp, #116]	@ 0x74
 800b8fe:	951c      	str	r5, [sp, #112]	@ 0x70
 800b900:	961b      	str	r6, [sp, #108]	@ 0x6c
 800b902:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 800b904:	951a      	str	r5, [sp, #104]	@ 0x68
 800b906:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800b908:	9419      	str	r4, [sp, #100]	@ 0x64
 800b90a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b90c:	9018      	str	r0, [sp, #96]	@ 0x60
 800b90e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b910:	9117      	str	r1, [sp, #92]	@ 0x5c
 800b912:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b914:	9216      	str	r2, [sp, #88]	@ 0x58
 800b916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b918:	9315      	str	r3, [sp, #84]	@ 0x54
 800b91a:	6cbe      	ldr	r6, [r7, #72]	@ 0x48
 800b91c:	9614      	str	r6, [sp, #80]	@ 0x50
 800b91e:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 800b920:	9513      	str	r5, [sp, #76]	@ 0x4c
 800b922:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 800b924:	9412      	str	r4, [sp, #72]	@ 0x48
 800b926:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b928:	9011      	str	r0, [sp, #68]	@ 0x44
 800b92a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b92c:	9110      	str	r1, [sp, #64]	@ 0x40
 800b92e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b930:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b934:	930e      	str	r3, [sp, #56]	@ 0x38
 800b936:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 800b938:	960d      	str	r6, [sp, #52]	@ 0x34
 800b93a:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 800b93c:	950c      	str	r5, [sp, #48]	@ 0x30
 800b93e:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 800b940:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b942:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800b944:	900a      	str	r0, [sp, #40]	@ 0x28
 800b946:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800b948:	9109      	str	r1, [sp, #36]	@ 0x24
 800b94a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b94c:	9208      	str	r2, [sp, #32]
 800b94e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b950:	9307      	str	r3, [sp, #28]
 800b952:	f8d7 6080 	ldr.w	r6, [r7, #128]	@ 0x80
 800b956:	9606      	str	r6, [sp, #24]
 800b958:	f8d7 5084 	ldr.w	r5, [r7, #132]	@ 0x84
 800b95c:	9505      	str	r5, [sp, #20]
 800b95e:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 800b962:	9404      	str	r4, [sp, #16]
 800b964:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800b968:	9003      	str	r0, [sp, #12]
 800b96a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b96e:	9102      	str	r1, [sp, #8]
 800b970:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b974:	9201      	str	r2, [sp, #4]
 800b976:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	4643      	mov	r3, r8
 800b97e:	4672      	mov	r2, lr
 800b980:	49c2      	ldr	r1, [pc, #776]	@ (800bc8c <frame_processing+0x15f4>)
 800b982:	4660      	mov	r0, ip
 800b984:	f001 fe6e 	bl	800d664 <siprintf>
						                ir_status, ir_current,
						                cm4_status, cm4_current,
						                vin_status, vin_voltage,
						                vbus_status, vbus_voltage);

						            Uart_sendstring(UART5, buffer_0x06);
 800b988:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b98c:	4619      	mov	r1, r3
 800b98e:	48c0      	ldr	r0, [pc, #768]	@ (800bc90 <frame_processing+0x15f8>)
 800b990:	f7f6 fa9c 	bl	8001ecc <Uart_sendstring>
						}

						default:
							clear_send_flag();
 800b994:	f7f6 fbbc 	bl	8002110 <clear_send_flag>
							return FSP_PKT_INVALID;
 800b998:	2302      	movs	r3, #2
 800b99a:	f000 be3a 	b.w	800c612 <frame_processing+0x1f7a>
//													for (int i = 0; i < fsp_pkt->length; i++) {
//													      sprintf(buffer, "\n{%d}", fsp_pkt->payload[i]);
//													      Uart_sendstring(UART5, buffer);
//													}

					clear_send_flag();
 800b99e:	f7f6 fbb7 	bl	8002110 <clear_send_flag>
					break;
 800b9a2:	e004      	b.n	800b9ae <frame_processing+0x1316>
				default:
					clear_send_flag();
 800b9a4:	f7f6 fbb4 	bl	8002110 <clear_send_flag>
					return FSP_PKT_INVALID;
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	f000 be32 	b.w	800c612 <frame_processing+0x1f7a>
					break;
			}

			break;
 800b9ae:	f000 be2f 	b.w	800c610 <frame_processing+0x1f78>
		case FSP_ADR_CAM:
			clear_send_flag();
 800b9b2:	f7f6 fbad 	bl	8002110 <clear_send_flag>

			break;
 800b9b6:	f000 be2b 	b.w	800c610 <frame_processing+0x1f78>

		case FSP_ADR_IOU:
			switch (fsp_pkt->type)
 800b9ba:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b9be:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	791b      	ldrb	r3, [r3, #4]
 800b9c6:	2b05      	cmp	r3, #5
 800b9c8:	d003      	beq.n	800b9d2 <frame_processing+0x133a>
 800b9ca:	2b07      	cmp	r3, #7
 800b9cc:	d00c      	beq.n	800b9e8 <frame_processing+0x1350>
 800b9ce:	f000 be17 	b.w	800c600 <frame_processing+0x1f68>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800b9d2:	f7f6 fb9d 	bl	8002110 <clear_send_flag>
					Uart_sendstring(UART5, "\nIOU_ACK\r\n> ");
 800b9d6:	49af      	ldr	r1, [pc, #700]	@ (800bc94 <frame_processing+0x15fc>)
 800b9d8:	48ad      	ldr	r0, [pc, #692]	@ (800bc90 <frame_processing+0x15f8>)
 800b9da:	f7f6 fa77 	bl	8001ecc <Uart_sendstring>
					break;
 800b9de:	bf00      	nop
				default:
					clear_send_flag();
					return FSP_PKT_INVALID;
					break;
			}
			clear_send_flag();
 800b9e0:	f7f6 fb96 	bl	8002110 <clear_send_flag>
			break;
 800b9e4:	f000 be14 	b.w	800c610 <frame_processing+0x1f78>
					clear_send_flag();
 800b9e8:	f7f6 fb92 	bl	8002110 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800b9ec:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800b9f0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	795b      	ldrb	r3, [r3, #5]
 800b9f8:	2b13      	cmp	r3, #19
 800b9fa:	dc31      	bgt.n	800ba60 <frame_processing+0x13c8>
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f2c0 85fc 	blt.w	800c5fa <frame_processing+0x1f62>
 800ba02:	2b13      	cmp	r3, #19
 800ba04:	f200 85f9 	bhi.w	800c5fa <frame_processing+0x1f62>
 800ba08:	a201      	add	r2, pc, #4	@ (adr r2, 800ba10 <frame_processing+0x1378>)
 800ba0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0e:	bf00      	nop
 800ba10:	0800ba69 	.word	0x0800ba69
 800ba14:	0800c5fb 	.word	0x0800c5fb
 800ba18:	0800babd 	.word	0x0800babd
 800ba1c:	0800bb63 	.word	0x0800bb63
 800ba20:	0800c5fb 	.word	0x0800c5fb
 800ba24:	0800c5fb 	.word	0x0800c5fb
 800ba28:	0800c5fb 	.word	0x0800c5fb
 800ba2c:	0800c5fb 	.word	0x0800c5fb
 800ba30:	0800c5fb 	.word	0x0800c5fb
 800ba34:	0800c5fb 	.word	0x0800c5fb
 800ba38:	0800c5fb 	.word	0x0800c5fb
 800ba3c:	0800c5fb 	.word	0x0800c5fb
 800ba40:	0800c5fb 	.word	0x0800c5fb
 800ba44:	0800c5fb 	.word	0x0800c5fb
 800ba48:	0800bbeb 	.word	0x0800bbeb
 800ba4c:	0800c5fb 	.word	0x0800c5fb
 800ba50:	0800bc5d 	.word	0x0800bc5d
 800ba54:	0800bcb5 	.word	0x0800bcb5
 800ba58:	0800bdcd 	.word	0x0800bdcd
 800ba5c:	0800be11 	.word	0x0800be11
 800ba60:	2bff      	cmp	r3, #255	@ 0xff
 800ba62:	d016      	beq.n	800ba92 <frame_processing+0x13fa>
 800ba64:	f000 bdc9 	b.w	800c5fa <frame_processing+0x1f62>
							sprintf(buffer_0x00, "IOU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800ba68:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ba6c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	799b      	ldrb	r3, [r3, #6]
 800ba74:	461a      	mov	r2, r3
 800ba76:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ba7a:	4987      	ldr	r1, [pc, #540]	@ (800bc98 <frame_processing+0x1600>)
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f001 fdf1 	bl	800d664 <siprintf>
							Uart_sendstring(UART5, buffer_0x00);
 800ba82:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ba86:	4619      	mov	r1, r3
 800ba88:	4881      	ldr	r0, [pc, #516]	@ (800bc90 <frame_processing+0x15f8>)
 800ba8a:	f7f6 fa1f 	bl	8001ecc <Uart_sendstring>
							break;
 800ba8e:	f000 bdb7 	b.w	800c600 <frame_processing+0x1f68>
							sprintf(buffer_0xFF, "IOU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800ba92:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800ba96:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	799b      	ldrb	r3, [r3, #6]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800baa4:	497d      	ldr	r1, [pc, #500]	@ (800bc9c <frame_processing+0x1604>)
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 fddc 	bl	800d664 <siprintf>
							Uart_sendstring(UART5, buffer_0xFF);
 800baac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bab0:	4619      	mov	r1, r3
 800bab2:	4877      	ldr	r0, [pc, #476]	@ (800bc90 <frame_processing+0x15f8>)
 800bab4:	f7f6 fa0a 	bl	8001ecc <Uart_sendstring>
							break;
 800bab8:	f000 bda2 	b.w	800c600 <frame_processing+0x1f68>
						    uint8_t device = fsp_pkt->payload[1];
 800babc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bac0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	799b      	ldrb	r3, [r3, #6]
 800bac8:	f887 3515 	strb.w	r3, [r7, #1301]	@ 0x515
						    uint8_t channel = fsp_pkt->payload[2];
 800bacc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bad0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	79db      	ldrb	r3, [r3, #7]
 800bad8:	f887 3514 	strb.w	r3, [r7, #1300]	@ 0x514
						    int16_t temp = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800badc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bae0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	7a1b      	ldrb	r3, [r3, #8]
 800bae8:	021b      	lsls	r3, r3, #8
 800baea:	b21a      	sxth	r2, r3
 800baec:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800baf0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	7a5b      	ldrb	r3, [r3, #9]
 800baf8:	b21b      	sxth	r3, r3
 800bafa:	4313      	orrs	r3, r2
 800bafc:	f8a7 3512 	strh.w	r3, [r7, #1298]	@ 0x512
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800bb00:	f897 4515 	ldrb.w	r4, [r7, #1301]	@ 0x515
 800bb04:	f897 5514 	ldrb.w	r5, [r7, #1300]	@ 0x514
 800bb08:	f9b7 3512 	ldrsh.w	r3, [r7, #1298]	@ 0x512
 800bb0c:	4a64      	ldr	r2, [pc, #400]	@ (800bca0 <frame_processing+0x1608>)
 800bb0e:	fb82 1203 	smull	r1, r2, r2, r3
 800bb12:	1092      	asrs	r2, r2, #2
 800bb14:	17db      	asrs	r3, r3, #31
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	b21b      	sxth	r3, r3
 800bb1a:	461e      	mov	r6, r3
						            device, channel, temp / 10, abs(temp % 10));
 800bb1c:	f9b7 2512 	ldrsh.w	r2, [r7, #1298]	@ 0x512
 800bb20:	4b5f      	ldr	r3, [pc, #380]	@ (800bca0 <frame_processing+0x1608>)
 800bb22:	fb83 1302 	smull	r1, r3, r3, r2
 800bb26:	1099      	asrs	r1, r3, #2
 800bb28:	17d3      	asrs	r3, r2, #31
 800bb2a:	1ac9      	subs	r1, r1, r3
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	440b      	add	r3, r1
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	b21b      	sxth	r3, r3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	bfb8      	it	lt
 800bb3c:	425b      	neglt	r3, r3
 800bb3e:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800bb40:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800bb44:	9301      	str	r3, [sp, #4]
 800bb46:	9600      	str	r6, [sp, #0]
 800bb48:	462b      	mov	r3, r5
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	4955      	ldr	r1, [pc, #340]	@ (800bca4 <frame_processing+0x160c>)
 800bb4e:	f001 fd89 	bl	800d664 <siprintf>
						    Uart_sendstring(UART5, buffer_0x02);
 800bb52:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bb56:	4619      	mov	r1, r3
 800bb58:	484d      	ldr	r0, [pc, #308]	@ (800bc90 <frame_processing+0x15f8>)
 800bb5a:	f7f6 f9b7 	bl	8001ecc <Uart_sendstring>
						break;
 800bb5e:	f000 bd4f 	b.w	800c600 <frame_processing+0x1f68>
						    uint8_t channel = fsp_pkt->payload[1];
 800bb62:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bb66:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	799b      	ldrb	r3, [r3, #6]
 800bb6e:	f887 3518 	strb.w	r3, [r7, #1304]	@ 0x518
						    int16_t temp = (int16_t)((fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3]);
 800bb72:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bb76:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	79db      	ldrb	r3, [r3, #7]
 800bb7e:	021b      	lsls	r3, r3, #8
 800bb80:	b21a      	sxth	r2, r3
 800bb82:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bb86:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	7a1b      	ldrb	r3, [r3, #8]
 800bb8e:	b21b      	sxth	r3, r3
 800bb90:	4313      	orrs	r3, r2
 800bb92:	f8a7 3516 	strh.w	r3, [r7, #1302]	@ 0x516
						    sprintf(buffer_0x03, "IOU_Res: CMDcode 0x03 [{Channel: %u} Temp: %d.%d]\n",
 800bb96:	f897 4518 	ldrb.w	r4, [r7, #1304]	@ 0x518
 800bb9a:	f9b7 3516 	ldrsh.w	r3, [r7, #1302]	@ 0x516
 800bb9e:	4a40      	ldr	r2, [pc, #256]	@ (800bca0 <frame_processing+0x1608>)
 800bba0:	fb82 1203 	smull	r1, r2, r2, r3
 800bba4:	1092      	asrs	r2, r2, #2
 800bba6:	17db      	asrs	r3, r3, #31
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	b21b      	sxth	r3, r3
 800bbac:	461d      	mov	r5, r3
 800bbae:	f9b7 2516 	ldrsh.w	r2, [r7, #1302]	@ 0x516
 800bbb2:	4b3b      	ldr	r3, [pc, #236]	@ (800bca0 <frame_processing+0x1608>)
 800bbb4:	fb83 1302 	smull	r1, r3, r3, r2
 800bbb8:	1099      	asrs	r1, r3, #2
 800bbba:	17d3      	asrs	r3, r2, #31
 800bbbc:	1ac9      	subs	r1, r1, r3
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	440b      	add	r3, r1
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	b21b      	sxth	r3, r3
 800bbca:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	462b      	mov	r3, r5
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	4934      	ldr	r1, [pc, #208]	@ (800bca8 <frame_processing+0x1610>)
 800bbd6:	f001 fd45 	bl	800d664 <siprintf>
						    Uart_sendstring(UART5, buffer_0x03);
 800bbda:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bbde:	4619      	mov	r1, r3
 800bbe0:	482b      	ldr	r0, [pc, #172]	@ (800bc90 <frame_processing+0x15f8>)
 800bbe2:	f7f6 f973 	bl	8001ecc <Uart_sendstring>
						break;
 800bbe6:	f000 bd0b 	b.w	800c600 <frame_processing+0x1f68>
						    uint8_t red = fsp_pkt->payload[1];
 800bbea:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bbee:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	799b      	ldrb	r3, [r3, #6]
 800bbf6:	f887 351c 	strb.w	r3, [r7, #1308]	@ 0x51c
						    uint8_t blue = fsp_pkt->payload[2];
 800bbfa:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bbfe:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	79db      	ldrb	r3, [r3, #7]
 800bc06:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
						    uint8_t green = fsp_pkt->payload[3];
 800bc0a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bc0e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	7a1b      	ldrb	r3, [r3, #8]
 800bc16:	f887 351a 	strb.w	r3, [r7, #1306]	@ 0x51a
						    uint8_t white = fsp_pkt->payload[4];
 800bc1a:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bc1e:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	7a5b      	ldrb	r3, [r3, #9]
 800bc26:	f887 3519 	strb.w	r3, [r7, #1305]	@ 0x519
						    sprintf(buffer_0x0E, "IOU_Res: CMDcode 0x0E [Red: %u, Blue: %u, Green: %u, White: %u]\n",
 800bc2a:	f897 151c 	ldrb.w	r1, [r7, #1308]	@ 0x51c
 800bc2e:	f897 451b 	ldrb.w	r4, [r7, #1307]	@ 0x51b
 800bc32:	f897 351a 	ldrb.w	r3, [r7, #1306]	@ 0x51a
 800bc36:	f897 2519 	ldrb.w	r2, [r7, #1305]	@ 0x519
 800bc3a:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800bc3e:	9201      	str	r2, [sp, #4]
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	4623      	mov	r3, r4
 800bc44:	460a      	mov	r2, r1
 800bc46:	4919      	ldr	r1, [pc, #100]	@ (800bcac <frame_processing+0x1614>)
 800bc48:	f001 fd0c 	bl	800d664 <siprintf>
						    Uart_sendstring(UART5, buffer_0x0E);
 800bc4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bc50:	4619      	mov	r1, r3
 800bc52:	480f      	ldr	r0, [pc, #60]	@ (800bc90 <frame_processing+0x15f8>)
 800bc54:	f7f6 f93a 	bl	8001ecc <Uart_sendstring>
						break;
 800bc58:	f000 bcd2 	b.w	800c600 <frame_processing+0x1f68>
						    uint8_t duty = fsp_pkt->payload[1];
 800bc5c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bc60:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	799b      	ldrb	r3, [r3, #6]
 800bc68:	f887 351d 	strb.w	r3, [r7, #1309]	@ 0x51d
						    sprintf(buffer_0x10, "IOU_Res: CMDcode 0x10 [Duty: %u%%]\n", duty);
 800bc6c:	f897 251d 	ldrb.w	r2, [r7, #1309]	@ 0x51d
 800bc70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bc74:	490e      	ldr	r1, [pc, #56]	@ (800bcb0 <frame_processing+0x1618>)
 800bc76:	4618      	mov	r0, r3
 800bc78:	f001 fcf4 	bl	800d664 <siprintf>
						    Uart_sendstring(UART5, buffer_0x10);
 800bc7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bc80:	4619      	mov	r1, r3
 800bc82:	4803      	ldr	r0, [pc, #12]	@ (800bc90 <frame_processing+0x15f8>)
 800bc84:	f7f6 f922 	bl	8001ecc <Uart_sendstring>
						break;
 800bc88:	f000 bcba 	b.w	800c600 <frame_processing+0x1f68>
 800bc8c:	08013344 	.word	0x08013344
 800bc90:	40005000 	.word	0x40005000
 800bc94:	0801358c 	.word	0x0801358c
 800bc98:	0801359c 	.word	0x0801359c
 800bc9c:	080135b8 	.word	0x080135b8
 800bca0:	66666667 	.word	0x66666667
 800bca4:	080135d4 	.word	0x080135d4
 800bca8:	08013614 	.word	0x08013614
 800bcac:	08013648 	.word	0x08013648
 800bcb0:	0801368c 	.word	0x0801368c
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800bcb4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bcb8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	799b      	ldrb	r3, [r3, #6]
 800bcc0:	021b      	lsls	r3, r3, #8
 800bcc2:	b21a      	sxth	r2, r3
 800bcc4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bcc8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	79db      	ldrb	r3, [r3, #7]
 800bcd0:	b21b      	sxth	r3, r3
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	f8a7 3528 	strh.w	r3, [r7, #1320]	@ 0x528
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800bcd8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bcdc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	7a1b      	ldrb	r3, [r3, #8]
 800bce4:	021b      	lsls	r3, r3, #8
 800bce6:	b21a      	sxth	r2, r3
 800bce8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bcec:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	7a5b      	ldrb	r3, [r3, #9]
 800bcf4:	b21b      	sxth	r3, r3
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	f8a7 3526 	strh.w	r3, [r7, #1318]	@ 0x526
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800bcfc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd00:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	7a9b      	ldrb	r3, [r3, #10]
 800bd08:	021b      	lsls	r3, r3, #8
 800bd0a:	b21a      	sxth	r2, r3
 800bd0c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd10:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	7adb      	ldrb	r3, [r3, #11]
 800bd18:	b21b      	sxth	r3, r3
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	f8a7 3524 	strh.w	r3, [r7, #1316]	@ 0x524
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800bd20:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd24:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	7b1b      	ldrb	r3, [r3, #12]
 800bd2c:	021b      	lsls	r3, r3, #8
 800bd2e:	b21a      	sxth	r2, r3
 800bd30:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd34:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	7b5b      	ldrb	r3, [r3, #13]
 800bd3c:	b21b      	sxth	r3, r3
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	f8a7 3522 	strh.w	r3, [r7, #1314]	@ 0x522
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800bd44:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd48:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	7b9b      	ldrb	r3, [r3, #14]
 800bd50:	021b      	lsls	r3, r3, #8
 800bd52:	b21a      	sxth	r2, r3
 800bd54:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd58:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	7bdb      	ldrb	r3, [r3, #15]
 800bd60:	b21b      	sxth	r3, r3
 800bd62:	4313      	orrs	r3, r2
 800bd64:	f8a7 3520 	strh.w	r3, [r7, #1312]	@ 0x520
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800bd68:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd6c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	7c1b      	ldrb	r3, [r3, #16]
 800bd74:	021b      	lsls	r3, r3, #8
 800bd76:	b21a      	sxth	r2, r3
 800bd78:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bd7c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	7c5b      	ldrb	r3, [r3, #17]
 800bd84:	b21b      	sxth	r3, r3
 800bd86:	4313      	orrs	r3, r2
 800bd88:	f8a7 351e 	strh.w	r3, [r7, #1310]	@ 0x51e
						    sprintf(buffer_0x11, "IOU_Res: CMDcode 0x11 [Accel: X=%d, Y=%d, Z=%d\nGyro: X=%d, Y=%d, Z=%d]\n",
 800bd8c:	f9b7 5528 	ldrsh.w	r5, [r7, #1320]	@ 0x528
 800bd90:	f9b7 6526 	ldrsh.w	r6, [r7, #1318]	@ 0x526
 800bd94:	f9b7 3524 	ldrsh.w	r3, [r7, #1316]	@ 0x524
 800bd98:	f9b7 2522 	ldrsh.w	r2, [r7, #1314]	@ 0x522
 800bd9c:	f9b7 1520 	ldrsh.w	r1, [r7, #1312]	@ 0x520
 800bda0:	f9b7 051e 	ldrsh.w	r0, [r7, #1310]	@ 0x51e
 800bda4:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 800bda8:	9003      	str	r0, [sp, #12]
 800bdaa:	9102      	str	r1, [sp, #8]
 800bdac:	9201      	str	r2, [sp, #4]
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	4633      	mov	r3, r6
 800bdb2:	462a      	mov	r2, r5
 800bdb4:	49bc      	ldr	r1, [pc, #752]	@ (800c0a8 <frame_processing+0x1a10>)
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f001 fc54 	bl	800d664 <siprintf>
						    Uart_sendstring(UART5, buffer_0x11);
 800bdbc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	48ba      	ldr	r0, [pc, #744]	@ (800c0ac <frame_processing+0x1a14>)
 800bdc4:	f7f6 f882 	bl	8001ecc <Uart_sendstring>
						break;
 800bdc8:	f000 bc1a 	b.w	800c600 <frame_processing+0x1f68>
						    uint16_t pressure = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800bdcc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bdd0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	799b      	ldrb	r3, [r3, #6]
 800bdd8:	021b      	lsls	r3, r3, #8
 800bdda:	b21a      	sxth	r2, r3
 800bddc:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bde0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	79db      	ldrb	r3, [r3, #7]
 800bde8:	b21b      	sxth	r3, r3
 800bdea:	4313      	orrs	r3, r2
 800bdec:	b21b      	sxth	r3, r3
 800bdee:	f8a7 352a 	strh.w	r3, [r7, #1322]	@ 0x52a
						    sprintf(buffer_0x12, "IOU_Res: CMDcode 0x12 [Press: %u]\n", pressure);
 800bdf2:	f8b7 252a 	ldrh.w	r2, [r7, #1322]	@ 0x52a
 800bdf6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bdfa:	49ad      	ldr	r1, [pc, #692]	@ (800c0b0 <frame_processing+0x1a18>)
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f001 fc31 	bl	800d664 <siprintf>
						    Uart_sendstring(UART5, buffer_0x12);
 800be02:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800be06:	4619      	mov	r1, r3
 800be08:	48a8      	ldr	r0, [pc, #672]	@ (800c0ac <frame_processing+0x1a14>)
 800be0a:	f7f6 f85f 	bl	8001ecc <Uart_sendstring>
						break;
 800be0e:	e3f7      	b.n	800c600 <frame_processing+0x1f68>
							int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800be10:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be14:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	799b      	ldrb	r3, [r3, #6]
 800be1c:	021b      	lsls	r3, r3, #8
 800be1e:	b21a      	sxth	r2, r3
 800be20:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be24:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	79db      	ldrb	r3, [r3, #7]
 800be2c:	b21b      	sxth	r3, r3
 800be2e:	4313      	orrs	r3, r2
 800be30:	f8a7 354e 	strh.w	r3, [r7, #1358]	@ 0x54e
							int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800be34:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be38:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	7a1b      	ldrb	r3, [r3, #8]
 800be40:	021b      	lsls	r3, r3, #8
 800be42:	b21a      	sxth	r2, r3
 800be44:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be48:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	7a5b      	ldrb	r3, [r3, #9]
 800be50:	b21b      	sxth	r3, r3
 800be52:	4313      	orrs	r3, r2
 800be54:	f8a7 354c 	strh.w	r3, [r7, #1356]	@ 0x54c
							int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800be58:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be5c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	7a9b      	ldrb	r3, [r3, #10]
 800be64:	021b      	lsls	r3, r3, #8
 800be66:	b21a      	sxth	r2, r3
 800be68:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be6c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	7adb      	ldrb	r3, [r3, #11]
 800be74:	b21b      	sxth	r3, r3
 800be76:	4313      	orrs	r3, r2
 800be78:	f8a7 354a 	strh.w	r3, [r7, #1354]	@ 0x54a
							int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800be7c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be80:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	7b1b      	ldrb	r3, [r3, #12]
 800be88:	021b      	lsls	r3, r3, #8
 800be8a:	b21a      	sxth	r2, r3
 800be8c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800be90:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	7b5b      	ldrb	r3, [r3, #13]
 800be98:	b21b      	sxth	r3, r3
 800be9a:	4313      	orrs	r3, r2
 800be9c:	f8a7 3548 	strh.w	r3, [r7, #1352]	@ 0x548
							int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800bea0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bea4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	7b9b      	ldrb	r3, [r3, #14]
 800beac:	021b      	lsls	r3, r3, #8
 800beae:	b21a      	sxth	r2, r3
 800beb0:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800beb4:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	7bdb      	ldrb	r3, [r3, #15]
 800bebc:	b21b      	sxth	r3, r3
 800bebe:	4313      	orrs	r3, r2
 800bec0:	f8a7 3546 	strh.w	r3, [r7, #1350]	@ 0x546
							int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800bec4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bec8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	7c1b      	ldrb	r3, [r3, #16]
 800bed0:	021b      	lsls	r3, r3, #8
 800bed2:	b21a      	sxth	r2, r3
 800bed4:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bed8:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	7c5b      	ldrb	r3, [r3, #17]
 800bee0:	b21b      	sxth	r3, r3
 800bee2:	4313      	orrs	r3, r2
 800bee4:	f8a7 3544 	strh.w	r3, [r7, #1348]	@ 0x544
							int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800bee8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800beec:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	7c9b      	ldrb	r3, [r3, #18]
 800bef4:	021b      	lsls	r3, r3, #8
 800bef6:	b21a      	sxth	r2, r3
 800bef8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800befc:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	7cdb      	ldrb	r3, [r3, #19]
 800bf04:	b21b      	sxth	r3, r3
 800bf06:	4313      	orrs	r3, r2
 800bf08:	f8a7 3542 	strh.w	r3, [r7, #1346]	@ 0x542
							int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800bf0c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf10:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	7d1b      	ldrb	r3, [r3, #20]
 800bf18:	021b      	lsls	r3, r3, #8
 800bf1a:	b21a      	sxth	r2, r3
 800bf1c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf20:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	7d5b      	ldrb	r3, [r3, #21]
 800bf28:	b21b      	sxth	r3, r3
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	f8a7 3540 	strh.w	r3, [r7, #1344]	@ 0x540
							int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800bf30:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf34:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	7d9b      	ldrb	r3, [r3, #22]
 800bf3c:	021b      	lsls	r3, r3, #8
 800bf3e:	b21a      	sxth	r2, r3
 800bf40:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf44:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	7ddb      	ldrb	r3, [r3, #23]
 800bf4c:	b21b      	sxth	r3, r3
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	f8a7 353e 	strh.w	r3, [r7, #1342]	@ 0x53e
							int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800bf54:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf58:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	7e1b      	ldrb	r3, [r3, #24]
 800bf60:	021b      	lsls	r3, r3, #8
 800bf62:	b21a      	sxth	r2, r3
 800bf64:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf68:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	7e5b      	ldrb	r3, [r3, #25]
 800bf70:	b21b      	sxth	r3, r3
 800bf72:	4313      	orrs	r3, r2
 800bf74:	f8a7 353c 	strh.w	r3, [r7, #1340]	@ 0x53c
							int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800bf78:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf7c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	7e9b      	ldrb	r3, [r3, #26]
 800bf84:	021b      	lsls	r3, r3, #8
 800bf86:	b21a      	sxth	r2, r3
 800bf88:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bf8c:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	7edb      	ldrb	r3, [r3, #27]
 800bf94:	b21b      	sxth	r3, r3
 800bf96:	4313      	orrs	r3, r2
 800bf98:	f8a7 353a 	strh.w	r3, [r7, #1338]	@ 0x53a
							uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800bf9c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bfa0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	7f1b      	ldrb	r3, [r3, #28]
 800bfa8:	021b      	lsls	r3, r3, #8
 800bfaa:	b21a      	sxth	r2, r3
 800bfac:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bfb0:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	7f5b      	ldrb	r3, [r3, #29]
 800bfb8:	b21b      	sxth	r3, r3
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	b21b      	sxth	r3, r3
 800bfbe:	f8a7 3538 	strh.w	r3, [r7, #1336]	@ 0x538
							uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 800bfc2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bfc6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	7f9b      	ldrb	r3, [r3, #30]
 800bfce:	021b      	lsls	r3, r3, #8
 800bfd0:	b21a      	sxth	r2, r3
 800bfd2:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bfd6:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	7fdb      	ldrb	r3, [r3, #31]
 800bfde:	b21b      	sxth	r3, r3
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	b21b      	sxth	r3, r3
 800bfe4:	f8a7 3536 	strh.w	r3, [r7, #1334]	@ 0x536
							uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 800bfe8:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bfec:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bff6:	021b      	lsls	r3, r3, #8
 800bff8:	b21a      	sxth	r2, r3
 800bffa:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800bffe:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c008:	b21b      	sxth	r3, r3
 800c00a:	4313      	orrs	r3, r2
 800c00c:	b21b      	sxth	r3, r3
 800c00e:	f8a7 3534 	strh.w	r3, [r7, #1332]	@ 0x534
							uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 800c012:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c016:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c020:	021b      	lsls	r3, r3, #8
 800c022:	b21a      	sxth	r2, r3
 800c024:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c028:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c032:	b21b      	sxth	r3, r3
 800c034:	4313      	orrs	r3, r2
 800c036:	b21b      	sxth	r3, r3
 800c038:	f8a7 3532 	strh.w	r3, [r7, #1330]	@ 0x532
							uint8_t neo_led_r = fsp_pkt->payload[31];
 800c03c:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c040:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c04a:	f887 3531 	strb.w	r3, [r7, #1329]	@ 0x531
							uint8_t neo_led_g = fsp_pkt->payload[32];
 800c04e:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c052:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c05c:	f887 3530 	strb.w	r3, [r7, #1328]	@ 0x530
							uint8_t neo_led_b = fsp_pkt->payload[33];
 800c060:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c064:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800c06e:	f887 352f 	strb.w	r3, [r7, #1327]	@ 0x52f
							uint8_t neo_led_w = fsp_pkt->payload[34];
 800c072:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c076:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800c080:	f887 352e 	strb.w	r3, [r7, #1326]	@ 0x52e
							uint8_t ir_led_duty = fsp_pkt->payload[35];
 800c084:	f507 63aa 	add.w	r3, r7, #1360	@ 0x550
 800c088:	f2a3 43b4 	subw	r3, r3, #1204	@ 0x4b4
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c092:	f887 352d 	strb.w	r3, [r7, #1325]	@ 0x52d
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c096:	f9b7 354e 	ldrsh.w	r3, [r7, #1358]	@ 0x54e
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	da0c      	bge.n	800c0b8 <frame_processing+0x1a20>
 800c09e:	4b05      	ldr	r3, [pc, #20]	@ (800c0b4 <frame_processing+0x1a1c>)
 800c0a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c0a4:	e00b      	b.n	800c0be <frame_processing+0x1a26>
 800c0a6:	bf00      	nop
 800c0a8:	080136b0 	.word	0x080136b0
 800c0ac:	40005000 	.word	0x40005000
 800c0b0:	080136f8 	.word	0x080136f8
 800c0b4:	08013040 	.word	0x08013040
 800c0b8:	4bb0      	ldr	r3, [pc, #704]	@ (800c37c <frame_processing+0x1ce4>)
 800c0ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800c0be:	f9b7 354e 	ldrsh.w	r3, [r7, #1358]	@ 0x54e
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	bfb8      	it	lt
 800c0c6:	425b      	neglt	r3, r3
 800c0c8:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c0ca:	4aad      	ldr	r2, [pc, #692]	@ (800c380 <frame_processing+0x1ce8>)
 800c0cc:	fb82 1203 	smull	r1, r2, r2, r3
 800c0d0:	1092      	asrs	r2, r2, #2
 800c0d2:	17db      	asrs	r3, r3, #31
 800c0d4:	eba2 0e03 	sub.w	lr, r2, r3
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800c0d8:	f9b7 354e 	ldrsh.w	r3, [r7, #1358]	@ 0x54e
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	bfb8      	it	lt
 800c0e0:	425b      	neglt	r3, r3
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c0e6:	4ba6      	ldr	r3, [pc, #664]	@ (800c380 <frame_processing+0x1ce8>)
 800c0e8:	fb83 1302 	smull	r1, r3, r3, r2
 800c0ec:	1099      	asrs	r1, r3, #2
 800c0ee:	17d3      	asrs	r3, r2, #31
 800c0f0:	1acb      	subs	r3, r1, r3
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	440b      	add	r3, r1
 800c0fa:	005b      	lsls	r3, r3, #1
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c100:	f9b7 354c 	ldrsh.w	r3, [r7, #1356]	@ 0x54c
 800c104:	2b00      	cmp	r3, #0
 800c106:	da03      	bge.n	800c110 <frame_processing+0x1a78>
 800c108:	4b9e      	ldr	r3, [pc, #632]	@ (800c384 <frame_processing+0x1cec>)
 800c10a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c10e:	e002      	b.n	800c116 <frame_processing+0x1a7e>
 800c110:	4b9a      	ldr	r3, [pc, #616]	@ (800c37c <frame_processing+0x1ce4>)
 800c112:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800c116:	f9b7 354c 	ldrsh.w	r3, [r7, #1356]	@ 0x54c
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	bfb8      	it	lt
 800c11e:	425b      	neglt	r3, r3
 800c120:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c122:	4a97      	ldr	r2, [pc, #604]	@ (800c380 <frame_processing+0x1ce8>)
 800c124:	fb82 1203 	smull	r1, r2, r2, r3
 800c128:	1092      	asrs	r2, r2, #2
 800c12a:	17db      	asrs	r3, r3, #31
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	66bb      	str	r3, [r7, #104]	@ 0x68
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800c130:	f9b7 354c 	ldrsh.w	r3, [r7, #1356]	@ 0x54c
 800c134:	2b00      	cmp	r3, #0
 800c136:	bfb8      	it	lt
 800c138:	425b      	neglt	r3, r3
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c13e:	4b90      	ldr	r3, [pc, #576]	@ (800c380 <frame_processing+0x1ce8>)
 800c140:	fb83 1302 	smull	r1, r3, r3, r2
 800c144:	1099      	asrs	r1, r3, #2
 800c146:	17d3      	asrs	r3, r2, #31
 800c148:	1acb      	subs	r3, r1, r3
 800c14a:	4619      	mov	r1, r3
 800c14c:	460b      	mov	r3, r1
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	440b      	add	r3, r1
 800c152:	005b      	lsls	r3, r3, #1
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	667b      	str	r3, [r7, #100]	@ 0x64
 800c158:	f9b7 354a 	ldrsh.w	r3, [r7, #1354]	@ 0x54a
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	da03      	bge.n	800c168 <frame_processing+0x1ad0>
 800c160:	4b88      	ldr	r3, [pc, #544]	@ (800c384 <frame_processing+0x1cec>)
 800c162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c166:	e002      	b.n	800c16e <frame_processing+0x1ad6>
 800c168:	4b84      	ldr	r3, [pc, #528]	@ (800c37c <frame_processing+0x1ce4>)
 800c16a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800c16e:	f9b7 354a 	ldrsh.w	r3, [r7, #1354]	@ 0x54a
 800c172:	2b00      	cmp	r3, #0
 800c174:	bfb8      	it	lt
 800c176:	425b      	neglt	r3, r3
 800c178:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c17a:	4a81      	ldr	r2, [pc, #516]	@ (800c380 <frame_processing+0x1ce8>)
 800c17c:	fb82 1203 	smull	r1, r2, r2, r3
 800c180:	1092      	asrs	r2, r2, #2
 800c182:	17db      	asrs	r3, r3, #31
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	663b      	str	r3, [r7, #96]	@ 0x60
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800c188:	f9b7 354a 	ldrsh.w	r3, [r7, #1354]	@ 0x54a
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	bfb8      	it	lt
 800c190:	425b      	neglt	r3, r3
 800c192:	b29b      	uxth	r3, r3
 800c194:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c196:	4b7a      	ldr	r3, [pc, #488]	@ (800c380 <frame_processing+0x1ce8>)
 800c198:	fb83 1302 	smull	r1, r3, r3, r2
 800c19c:	1099      	asrs	r1, r3, #2
 800c19e:	17d3      	asrs	r3, r2, #31
 800c1a0:	1acb      	subs	r3, r1, r3
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	440b      	add	r3, r1
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1b0:	f9b7 3548 	ldrsh.w	r3, [r7, #1352]	@ 0x548
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	da03      	bge.n	800c1c0 <frame_processing+0x1b28>
 800c1b8:	4b72      	ldr	r3, [pc, #456]	@ (800c384 <frame_processing+0x1cec>)
 800c1ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c1be:	e002      	b.n	800c1c6 <frame_processing+0x1b2e>
 800c1c0:	4b6e      	ldr	r3, [pc, #440]	@ (800c37c <frame_processing+0x1ce4>)
 800c1c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800c1c6:	f9b7 3548 	ldrsh.w	r3, [r7, #1352]	@ 0x548
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bfb8      	it	lt
 800c1ce:	425b      	neglt	r3, r3
 800c1d0:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c1d2:	4a6b      	ldr	r2, [pc, #428]	@ (800c380 <frame_processing+0x1ce8>)
 800c1d4:	fb82 1203 	smull	r1, r2, r2, r3
 800c1d8:	1092      	asrs	r2, r2, #2
 800c1da:	17db      	asrs	r3, r3, #31
 800c1dc:	1ad3      	subs	r3, r2, r3
 800c1de:	65bb      	str	r3, [r7, #88]	@ 0x58
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800c1e0:	f9b7 3548 	ldrsh.w	r3, [r7, #1352]	@ 0x548
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	bfb8      	it	lt
 800c1e8:	425b      	neglt	r3, r3
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c1ee:	4b64      	ldr	r3, [pc, #400]	@ (800c380 <frame_processing+0x1ce8>)
 800c1f0:	fb83 2301 	smull	r2, r3, r3, r1
 800c1f4:	109a      	asrs	r2, r3, #2
 800c1f6:	17cb      	asrs	r3, r1, #31
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	1acb      	subs	r3, r1, r3
 800c206:	657b      	str	r3, [r7, #84]	@ 0x54
 800c208:	f9b7 3546 	ldrsh.w	r3, [r7, #1350]	@ 0x546
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	da03      	bge.n	800c218 <frame_processing+0x1b80>
 800c210:	4b5c      	ldr	r3, [pc, #368]	@ (800c384 <frame_processing+0x1cec>)
 800c212:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c216:	e002      	b.n	800c21e <frame_processing+0x1b86>
 800c218:	4b58      	ldr	r3, [pc, #352]	@ (800c37c <frame_processing+0x1ce4>)
 800c21a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800c21e:	f9b7 3546 	ldrsh.w	r3, [r7, #1350]	@ 0x546
 800c222:	2b00      	cmp	r3, #0
 800c224:	bfb8      	it	lt
 800c226:	425b      	neglt	r3, r3
 800c228:	b29b      	uxth	r3, r3
 800c22a:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c22c:	4b54      	ldr	r3, [pc, #336]	@ (800c380 <frame_processing+0x1ce8>)
 800c22e:	fb83 2301 	smull	r2, r3, r3, r1
 800c232:	109a      	asrs	r2, r3, #2
 800c234:	17cb      	asrs	r3, r1, #31
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	653b      	str	r3, [r7, #80]	@ 0x50
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800c23a:	f9b7 3546 	ldrsh.w	r3, [r7, #1350]	@ 0x546
 800c23e:	2b00      	cmp	r3, #0
 800c240:	bfb8      	it	lt
 800c242:	425b      	neglt	r3, r3
 800c244:	b29b      	uxth	r3, r3
 800c246:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c248:	4b4d      	ldr	r3, [pc, #308]	@ (800c380 <frame_processing+0x1ce8>)
 800c24a:	fb83 2301 	smull	r2, r3, r3, r1
 800c24e:	109a      	asrs	r2, r3, #2
 800c250:	17cb      	asrs	r3, r1, #31
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	461a      	mov	r2, r3
 800c256:	4613      	mov	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	4413      	add	r3, r2
 800c25c:	005b      	lsls	r3, r3, #1
 800c25e:	1acb      	subs	r3, r1, r3
 800c260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c262:	f9b7 3544 	ldrsh.w	r3, [r7, #1348]	@ 0x544
 800c266:	2b00      	cmp	r3, #0
 800c268:	da03      	bge.n	800c272 <frame_processing+0x1bda>
 800c26a:	4b46      	ldr	r3, [pc, #280]	@ (800c384 <frame_processing+0x1cec>)
 800c26c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c270:	e002      	b.n	800c278 <frame_processing+0x1be0>
 800c272:	4b42      	ldr	r3, [pc, #264]	@ (800c37c <frame_processing+0x1ce4>)
 800c274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800c278:	f9b7 3544 	ldrsh.w	r3, [r7, #1348]	@ 0x544
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	bfb8      	it	lt
 800c280:	425b      	neglt	r3, r3
 800c282:	b29b      	uxth	r3, r3
 800c284:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c286:	4b3e      	ldr	r3, [pc, #248]	@ (800c380 <frame_processing+0x1ce8>)
 800c288:	fb83 2301 	smull	r2, r3, r3, r1
 800c28c:	109a      	asrs	r2, r3, #2
 800c28e:	17cb      	asrs	r3, r1, #31
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	64bb      	str	r3, [r7, #72]	@ 0x48
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800c294:	f9b7 3544 	ldrsh.w	r3, [r7, #1348]	@ 0x544
 800c298:	2b00      	cmp	r3, #0
 800c29a:	bfb8      	it	lt
 800c29c:	425b      	neglt	r3, r3
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c2a2:	4b37      	ldr	r3, [pc, #220]	@ (800c380 <frame_processing+0x1ce8>)
 800c2a4:	fb83 2301 	smull	r2, r3, r3, r1
 800c2a8:	109a      	asrs	r2, r3, #2
 800c2aa:	17cb      	asrs	r3, r1, #31
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	1acb      	subs	r3, r1, r3
 800c2ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2bc:	f9b7 3542 	ldrsh.w	r3, [r7, #1346]	@ 0x542
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	da03      	bge.n	800c2cc <frame_processing+0x1c34>
 800c2c4:	4b2f      	ldr	r3, [pc, #188]	@ (800c384 <frame_processing+0x1cec>)
 800c2c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c2ca:	e002      	b.n	800c2d2 <frame_processing+0x1c3a>
 800c2cc:	4b2b      	ldr	r3, [pc, #172]	@ (800c37c <frame_processing+0x1ce4>)
 800c2ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800c2d2:	f9b7 3542 	ldrsh.w	r3, [r7, #1346]	@ 0x542
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	bfb8      	it	lt
 800c2da:	425b      	neglt	r3, r3
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c2e0:	4b27      	ldr	r3, [pc, #156]	@ (800c380 <frame_processing+0x1ce8>)
 800c2e2:	fb83 2301 	smull	r2, r3, r3, r1
 800c2e6:	109a      	asrs	r2, r3, #2
 800c2e8:	17cb      	asrs	r3, r1, #31
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	643b      	str	r3, [r7, #64]	@ 0x40
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800c2ee:	f9b7 3542 	ldrsh.w	r3, [r7, #1346]	@ 0x542
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	bfb8      	it	lt
 800c2f6:	425b      	neglt	r3, r3
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c2fc:	4b20      	ldr	r3, [pc, #128]	@ (800c380 <frame_processing+0x1ce8>)
 800c2fe:	fb83 2301 	smull	r2, r3, r3, r1
 800c302:	109a      	asrs	r2, r3, #2
 800c304:	17cb      	asrs	r3, r1, #31
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	461a      	mov	r2, r3
 800c30a:	4613      	mov	r3, r2
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4413      	add	r3, r2
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	1acb      	subs	r3, r1, r3
 800c314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c316:	f9b7 3540 	ldrsh.w	r3, [r7, #1344]	@ 0x540
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	da02      	bge.n	800c324 <frame_processing+0x1c8c>
 800c31e:	4b19      	ldr	r3, [pc, #100]	@ (800c384 <frame_processing+0x1cec>)
 800c320:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c322:	e001      	b.n	800c328 <frame_processing+0x1c90>
 800c324:	4b15      	ldr	r3, [pc, #84]	@ (800c37c <frame_processing+0x1ce4>)
 800c326:	67fb      	str	r3, [r7, #124]	@ 0x7c
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800c328:	f9b7 3540 	ldrsh.w	r3, [r7, #1344]	@ 0x540
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	bfb8      	it	lt
 800c330:	425b      	neglt	r3, r3
 800c332:	b29b      	uxth	r3, r3
 800c334:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c336:	4b12      	ldr	r3, [pc, #72]	@ (800c380 <frame_processing+0x1ce8>)
 800c338:	fb83 2301 	smull	r2, r3, r3, r1
 800c33c:	109a      	asrs	r2, r3, #2
 800c33e:	17cb      	asrs	r3, r1, #31
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	63bb      	str	r3, [r7, #56]	@ 0x38
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800c344:	f9b7 3540 	ldrsh.w	r3, [r7, #1344]	@ 0x540
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bfb8      	it	lt
 800c34c:	425b      	neglt	r3, r3
 800c34e:	b29b      	uxth	r3, r3
 800c350:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c352:	4b0b      	ldr	r3, [pc, #44]	@ (800c380 <frame_processing+0x1ce8>)
 800c354:	fb83 2301 	smull	r2, r3, r3, r1
 800c358:	109a      	asrs	r2, r3, #2
 800c35a:	17cb      	asrs	r3, r1, #31
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	461a      	mov	r2, r3
 800c360:	4613      	mov	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	005b      	lsls	r3, r3, #1
 800c368:	1acb      	subs	r3, r1, r3
 800c36a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c36c:	f9b7 353e 	ldrsh.w	r3, [r7, #1342]	@ 0x53e
 800c370:	2b00      	cmp	r3, #0
 800c372:	da09      	bge.n	800c388 <frame_processing+0x1cf0>
 800c374:	4b03      	ldr	r3, [pc, #12]	@ (800c384 <frame_processing+0x1cec>)
 800c376:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c378:	e008      	b.n	800c38c <frame_processing+0x1cf4>
 800c37a:	bf00      	nop
 800c37c:	08013044 	.word	0x08013044
 800c380:	66666667 	.word	0x66666667
 800c384:	08013040 	.word	0x08013040
 800c388:	4ba5      	ldr	r3, [pc, #660]	@ (800c620 <frame_processing+0x1f88>)
 800c38a:	67bb      	str	r3, [r7, #120]	@ 0x78
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800c38c:	f9b7 353e 	ldrsh.w	r3, [r7, #1342]	@ 0x53e
 800c390:	2b00      	cmp	r3, #0
 800c392:	bfb8      	it	lt
 800c394:	425b      	neglt	r3, r3
 800c396:	b29b      	uxth	r3, r3
 800c398:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c39a:	4ba2      	ldr	r3, [pc, #648]	@ (800c624 <frame_processing+0x1f8c>)
 800c39c:	fb83 2301 	smull	r2, r3, r3, r1
 800c3a0:	109a      	asrs	r2, r3, #2
 800c3a2:	17cb      	asrs	r3, r1, #31
 800c3a4:	1ad3      	subs	r3, r2, r3
 800c3a6:	633b      	str	r3, [r7, #48]	@ 0x30
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800c3a8:	f9b7 353e 	ldrsh.w	r3, [r7, #1342]	@ 0x53e
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	bfb8      	it	lt
 800c3b0:	425b      	neglt	r3, r3
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c3b6:	4b9b      	ldr	r3, [pc, #620]	@ (800c624 <frame_processing+0x1f8c>)
 800c3b8:	fb83 2301 	smull	r2, r3, r3, r1
 800c3bc:	109a      	asrs	r2, r3, #2
 800c3be:	17cb      	asrs	r3, r1, #31
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	1acb      	subs	r3, r1, r3
 800c3ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3d0:	f9b7 353c 	ldrsh.w	r3, [r7, #1340]	@ 0x53c
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	da02      	bge.n	800c3de <frame_processing+0x1d46>
 800c3d8:	4b93      	ldr	r3, [pc, #588]	@ (800c628 <frame_processing+0x1f90>)
 800c3da:	677b      	str	r3, [r7, #116]	@ 0x74
 800c3dc:	e001      	b.n	800c3e2 <frame_processing+0x1d4a>
 800c3de:	4b90      	ldr	r3, [pc, #576]	@ (800c620 <frame_processing+0x1f88>)
 800c3e0:	677b      	str	r3, [r7, #116]	@ 0x74
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800c3e2:	f9b7 353c 	ldrsh.w	r3, [r7, #1340]	@ 0x53c
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	bfb8      	it	lt
 800c3ea:	425b      	neglt	r3, r3
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c3f0:	4b8c      	ldr	r3, [pc, #560]	@ (800c624 <frame_processing+0x1f8c>)
 800c3f2:	fb83 2301 	smull	r2, r3, r3, r1
 800c3f6:	109a      	asrs	r2, r3, #2
 800c3f8:	17cb      	asrs	r3, r1, #31
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800c3fe:	f9b7 353c 	ldrsh.w	r3, [r7, #1340]	@ 0x53c
 800c402:	2b00      	cmp	r3, #0
 800c404:	bfb8      	it	lt
 800c406:	425b      	neglt	r3, r3
 800c408:	b29b      	uxth	r3, r3
 800c40a:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c40c:	4b85      	ldr	r3, [pc, #532]	@ (800c624 <frame_processing+0x1f8c>)
 800c40e:	fb83 2301 	smull	r2, r3, r3, r1
 800c412:	109a      	asrs	r2, r3, #2
 800c414:	17cb      	asrs	r3, r1, #31
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	461a      	mov	r2, r3
 800c41a:	4613      	mov	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	005b      	lsls	r3, r3, #1
 800c422:	1acb      	subs	r3, r1, r3
 800c424:	627b      	str	r3, [r7, #36]	@ 0x24
 800c426:	f9b7 353a 	ldrsh.w	r3, [r7, #1338]	@ 0x53a
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	da02      	bge.n	800c434 <frame_processing+0x1d9c>
 800c42e:	4b7e      	ldr	r3, [pc, #504]	@ (800c628 <frame_processing+0x1f90>)
 800c430:	673b      	str	r3, [r7, #112]	@ 0x70
 800c432:	e001      	b.n	800c438 <frame_processing+0x1da0>
 800c434:	4b7a      	ldr	r3, [pc, #488]	@ (800c620 <frame_processing+0x1f88>)
 800c436:	673b      	str	r3, [r7, #112]	@ 0x70
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800c438:	f9b7 353a 	ldrsh.w	r3, [r7, #1338]	@ 0x53a
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	bfb8      	it	lt
 800c440:	425b      	neglt	r3, r3
 800c442:	b29b      	uxth	r3, r3
 800c444:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c446:	4b77      	ldr	r3, [pc, #476]	@ (800c624 <frame_processing+0x1f8c>)
 800c448:	fb83 2301 	smull	r2, r3, r3, r1
 800c44c:	109a      	asrs	r2, r3, #2
 800c44e:	17cb      	asrs	r3, r1, #31
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	623b      	str	r3, [r7, #32]
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800c454:	f9b7 353a 	ldrsh.w	r3, [r7, #1338]	@ 0x53a
 800c458:	2b00      	cmp	r3, #0
 800c45a:	bfb8      	it	lt
 800c45c:	425b      	neglt	r3, r3
 800c45e:	b29b      	uxth	r3, r3
 800c460:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800c462:	4b70      	ldr	r3, [pc, #448]	@ (800c624 <frame_processing+0x1f8c>)
 800c464:	fb83 2301 	smull	r2, r3, r3, r1
 800c468:	109a      	asrs	r2, r3, #2
 800c46a:	17cb      	asrs	r3, r1, #31
 800c46c:	1ad6      	subs	r6, r2, r3
 800c46e:	4633      	mov	r3, r6
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4433      	add	r3, r6
 800c474:	005b      	lsls	r3, r3, #1
 800c476:	1ace      	subs	r6, r1, r3
 800c478:	f8b7 2538 	ldrh.w	r2, [r7, #1336]	@ 0x538
 800c47c:	4b6b      	ldr	r3, [pc, #428]	@ (800c62c <frame_processing+0x1f94>)
 800c47e:	fba3 2302 	umull	r2, r3, r3, r2
 800c482:	095b      	lsrs	r3, r3, #5
 800c484:	b29b      	uxth	r3, r3
 800c486:	61fb      	str	r3, [r7, #28]
 800c488:	f8b7 1538 	ldrh.w	r1, [r7, #1336]	@ 0x538
 800c48c:	4b67      	ldr	r3, [pc, #412]	@ (800c62c <frame_processing+0x1f94>)
 800c48e:	fba3 2301 	umull	r2, r3, r3, r1
 800c492:	095a      	lsrs	r2, r3, #5
 800c494:	2364      	movs	r3, #100	@ 0x64
 800c496:	fb02 f303 	mul.w	r3, r2, r3
 800c49a:	1acb      	subs	r3, r1, r3
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	61bb      	str	r3, [r7, #24]
 800c4a0:	f8b7 2536 	ldrh.w	r2, [r7, #1334]	@ 0x536
 800c4a4:	4b61      	ldr	r3, [pc, #388]	@ (800c62c <frame_processing+0x1f94>)
 800c4a6:	fba3 2302 	umull	r2, r3, r3, r2
 800c4aa:	095b      	lsrs	r3, r3, #5
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	f8b7 1536 	ldrh.w	r1, [r7, #1334]	@ 0x536
 800c4b4:	4b5d      	ldr	r3, [pc, #372]	@ (800c62c <frame_processing+0x1f94>)
 800c4b6:	fba3 2301 	umull	r2, r3, r3, r1
 800c4ba:	095a      	lsrs	r2, r3, #5
 800c4bc:	2364      	movs	r3, #100	@ 0x64
 800c4be:	fb02 f303 	mul.w	r3, r2, r3
 800c4c2:	1acb      	subs	r3, r1, r3
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	613b      	str	r3, [r7, #16]
 800c4c8:	f8b7 2534 	ldrh.w	r2, [r7, #1332]	@ 0x534
 800c4cc:	4b57      	ldr	r3, [pc, #348]	@ (800c62c <frame_processing+0x1f94>)
 800c4ce:	fba3 2302 	umull	r2, r3, r3, r2
 800c4d2:	095b      	lsrs	r3, r3, #5
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	60fb      	str	r3, [r7, #12]
 800c4d8:	f8b7 1534 	ldrh.w	r1, [r7, #1332]	@ 0x534
 800c4dc:	4b53      	ldr	r3, [pc, #332]	@ (800c62c <frame_processing+0x1f94>)
 800c4de:	fba3 2301 	umull	r2, r3, r3, r1
 800c4e2:	095a      	lsrs	r2, r3, #5
 800c4e4:	2364      	movs	r3, #100	@ 0x64
 800c4e6:	fb02 f303 	mul.w	r3, r2, r3
 800c4ea:	1acb      	subs	r3, r1, r3
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	60bb      	str	r3, [r7, #8]
 800c4f0:	f8b7 2532 	ldrh.w	r2, [r7, #1330]	@ 0x532
 800c4f4:	4b4d      	ldr	r3, [pc, #308]	@ (800c62c <frame_processing+0x1f94>)
 800c4f6:	fba3 2302 	umull	r2, r3, r3, r2
 800c4fa:	095b      	lsrs	r3, r3, #5
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	607b      	str	r3, [r7, #4]
 800c500:	f8b7 1532 	ldrh.w	r1, [r7, #1330]	@ 0x532
 800c504:	4b49      	ldr	r3, [pc, #292]	@ (800c62c <frame_processing+0x1f94>)
 800c506:	fba3 2301 	umull	r2, r3, r3, r1
 800c50a:	095a      	lsrs	r2, r3, #5
 800c50c:	2364      	movs	r3, #100	@ 0x64
 800c50e:	fb02 f303 	mul.w	r3, r2, r3
 800c512:	1acb      	subs	r3, r1, r3
 800c514:	b29b      	uxth	r3, r3
 800c516:	461d      	mov	r5, r3
 800c518:	f897 4531 	ldrb.w	r4, [r7, #1329]	@ 0x531
 800c51c:	f897 0530 	ldrb.w	r0, [r7, #1328]	@ 0x530
 800c520:	f897 152f 	ldrb.w	r1, [r7, #1327]	@ 0x52f
 800c524:	f897 252e 	ldrb.w	r2, [r7, #1326]	@ 0x52e
 800c528:	f897 352d 	ldrb.w	r3, [r7, #1325]	@ 0x52d
 800c52c:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 800c530:	932b      	str	r3, [sp, #172]	@ 0xac
 800c532:	922a      	str	r2, [sp, #168]	@ 0xa8
 800c534:	9129      	str	r1, [sp, #164]	@ 0xa4
 800c536:	9028      	str	r0, [sp, #160]	@ 0xa0
 800c538:	9427      	str	r4, [sp, #156]	@ 0x9c
 800c53a:	9526      	str	r5, [sp, #152]	@ 0x98
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	9225      	str	r2, [sp, #148]	@ 0x94
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	9224      	str	r2, [sp, #144]	@ 0x90
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	9223      	str	r2, [sp, #140]	@ 0x8c
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	9222      	str	r2, [sp, #136]	@ 0x88
 800c54c:	697a      	ldr	r2, [r7, #20]
 800c54e:	9221      	str	r2, [sp, #132]	@ 0x84
 800c550:	69ba      	ldr	r2, [r7, #24]
 800c552:	9220      	str	r2, [sp, #128]	@ 0x80
 800c554:	69fa      	ldr	r2, [r7, #28]
 800c556:	921f      	str	r2, [sp, #124]	@ 0x7c
 800c558:	961e      	str	r6, [sp, #120]	@ 0x78
 800c55a:	6a3b      	ldr	r3, [r7, #32]
 800c55c:	931d      	str	r3, [sp, #116]	@ 0x74
 800c55e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c560:	931c      	str	r3, [sp, #112]	@ 0x70
 800c562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c564:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c568:	931a      	str	r3, [sp, #104]	@ 0x68
 800c56a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c56c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c570:	9318      	str	r3, [sp, #96]	@ 0x60
 800c572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c574:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c578:	9316      	str	r3, [sp, #88]	@ 0x58
 800c57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c57c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c580:	9314      	str	r3, [sp, #80]	@ 0x50
 800c582:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c584:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c588:	9312      	str	r3, [sp, #72]	@ 0x48
 800c58a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c58c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c58e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c592:	9310      	str	r3, [sp, #64]	@ 0x40
 800c594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c596:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c59a:	930e      	str	r3, [sp, #56]	@ 0x38
 800c59c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5a0:	930d      	str	r3, [sp, #52]	@ 0x34
 800c5a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c5a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c5b6:	9308      	str	r3, [sp, #32]
 800c5b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5bc:	9307      	str	r3, [sp, #28]
 800c5be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5c0:	9306      	str	r3, [sp, #24]
 800c5c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5c4:	9305      	str	r3, [sp, #20]
 800c5c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c5ca:	9304      	str	r3, [sp, #16]
 800c5cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5ce:	9303      	str	r3, [sp, #12]
 800c5d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5d2:	9302      	str	r3, [sp, #8]
 800c5d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	4673      	mov	r3, lr
 800c5e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c5e4:	4912      	ldr	r1, [pc, #72]	@ (800c630 <frame_processing+0x1f98>)
 800c5e6:	4660      	mov	r0, ip
 800c5e8:	f001 f83c 	bl	800d664 <siprintf>
							Uart_sendstring(UART5, buffer_0x13);
 800c5ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	4810      	ldr	r0, [pc, #64]	@ (800c634 <frame_processing+0x1f9c>)
 800c5f4:	f7f5 fc6a 	bl	8001ecc <Uart_sendstring>
						break;
 800c5f8:	e002      	b.n	800c600 <frame_processing+0x1f68>
							clear_send_flag();
 800c5fa:	f7f5 fd89 	bl	8002110 <clear_send_flag>
							break;
 800c5fe:	bf00      	nop
					clear_send_flag();
 800c600:	f7f5 fd86 	bl	8002110 <clear_send_flag>
					return FSP_PKT_INVALID;
 800c604:	2302      	movs	r3, #2
 800c606:	e004      	b.n	800c612 <frame_processing+0x1f7a>
		default:
			clear_send_flag();
 800c608:	f7f5 fd82 	bl	8002110 <clear_send_flag>
			return FSP_PKT_WRONG_ADR;
 800c60c:	2303      	movs	r3, #3
 800c60e:	e000      	b.n	800c612 <frame_processing+0x1f7a>
			break;

	}
	return 0;
 800c610:	2300      	movs	r3, #0

}
 800c612:	4618      	mov	r0, r3
 800c614:	f507 67aa 	add.w	r7, r7, #1360	@ 0x550
 800c618:	46bd      	mov	sp, r7
 800c61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c61e:	bf00      	nop
 800c620:	08013044 	.word	0x08013044
 800c624:	66666667 	.word	0x66666667
 800c628:	08013040 	.word	0x08013040
 800c62c:	51eb851f 	.word	0x51eb851f
 800c630:	0801371c 	.word	0x0801371c
 800c634:	40005000 	.word	0x40005000

0800c638 <atoi>:
 800c638:	220a      	movs	r2, #10
 800c63a:	2100      	movs	r1, #0
 800c63c:	f000 b87c 	b.w	800c738 <strtol>

0800c640 <_strtol_l.constprop.0>:
 800c640:	2b24      	cmp	r3, #36	@ 0x24
 800c642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c646:	4686      	mov	lr, r0
 800c648:	4690      	mov	r8, r2
 800c64a:	d801      	bhi.n	800c650 <_strtol_l.constprop.0+0x10>
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d106      	bne.n	800c65e <_strtol_l.constprop.0+0x1e>
 800c650:	f001 f952 	bl	800d8f8 <__errno>
 800c654:	2316      	movs	r3, #22
 800c656:	6003      	str	r3, [r0, #0]
 800c658:	2000      	movs	r0, #0
 800c65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c65e:	4834      	ldr	r0, [pc, #208]	@ (800c730 <_strtol_l.constprop.0+0xf0>)
 800c660:	460d      	mov	r5, r1
 800c662:	462a      	mov	r2, r5
 800c664:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c668:	5d06      	ldrb	r6, [r0, r4]
 800c66a:	f016 0608 	ands.w	r6, r6, #8
 800c66e:	d1f8      	bne.n	800c662 <_strtol_l.constprop.0+0x22>
 800c670:	2c2d      	cmp	r4, #45	@ 0x2d
 800c672:	d12d      	bne.n	800c6d0 <_strtol_l.constprop.0+0x90>
 800c674:	782c      	ldrb	r4, [r5, #0]
 800c676:	2601      	movs	r6, #1
 800c678:	1c95      	adds	r5, r2, #2
 800c67a:	f033 0210 	bics.w	r2, r3, #16
 800c67e:	d109      	bne.n	800c694 <_strtol_l.constprop.0+0x54>
 800c680:	2c30      	cmp	r4, #48	@ 0x30
 800c682:	d12a      	bne.n	800c6da <_strtol_l.constprop.0+0x9a>
 800c684:	782a      	ldrb	r2, [r5, #0]
 800c686:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c68a:	2a58      	cmp	r2, #88	@ 0x58
 800c68c:	d125      	bne.n	800c6da <_strtol_l.constprop.0+0x9a>
 800c68e:	786c      	ldrb	r4, [r5, #1]
 800c690:	2310      	movs	r3, #16
 800c692:	3502      	adds	r5, #2
 800c694:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c698:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c69c:	2200      	movs	r2, #0
 800c69e:	fbbc f9f3 	udiv	r9, ip, r3
 800c6a2:	4610      	mov	r0, r2
 800c6a4:	fb03 ca19 	mls	sl, r3, r9, ip
 800c6a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c6ac:	2f09      	cmp	r7, #9
 800c6ae:	d81b      	bhi.n	800c6e8 <_strtol_l.constprop.0+0xa8>
 800c6b0:	463c      	mov	r4, r7
 800c6b2:	42a3      	cmp	r3, r4
 800c6b4:	dd27      	ble.n	800c706 <_strtol_l.constprop.0+0xc6>
 800c6b6:	1c57      	adds	r7, r2, #1
 800c6b8:	d007      	beq.n	800c6ca <_strtol_l.constprop.0+0x8a>
 800c6ba:	4581      	cmp	r9, r0
 800c6bc:	d320      	bcc.n	800c700 <_strtol_l.constprop.0+0xc0>
 800c6be:	d101      	bne.n	800c6c4 <_strtol_l.constprop.0+0x84>
 800c6c0:	45a2      	cmp	sl, r4
 800c6c2:	db1d      	blt.n	800c700 <_strtol_l.constprop.0+0xc0>
 800c6c4:	fb00 4003 	mla	r0, r0, r3, r4
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6ce:	e7eb      	b.n	800c6a8 <_strtol_l.constprop.0+0x68>
 800c6d0:	2c2b      	cmp	r4, #43	@ 0x2b
 800c6d2:	bf04      	itt	eq
 800c6d4:	782c      	ldrbeq	r4, [r5, #0]
 800c6d6:	1c95      	addeq	r5, r2, #2
 800c6d8:	e7cf      	b.n	800c67a <_strtol_l.constprop.0+0x3a>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1da      	bne.n	800c694 <_strtol_l.constprop.0+0x54>
 800c6de:	2c30      	cmp	r4, #48	@ 0x30
 800c6e0:	bf0c      	ite	eq
 800c6e2:	2308      	moveq	r3, #8
 800c6e4:	230a      	movne	r3, #10
 800c6e6:	e7d5      	b.n	800c694 <_strtol_l.constprop.0+0x54>
 800c6e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c6ec:	2f19      	cmp	r7, #25
 800c6ee:	d801      	bhi.n	800c6f4 <_strtol_l.constprop.0+0xb4>
 800c6f0:	3c37      	subs	r4, #55	@ 0x37
 800c6f2:	e7de      	b.n	800c6b2 <_strtol_l.constprop.0+0x72>
 800c6f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c6f8:	2f19      	cmp	r7, #25
 800c6fa:	d804      	bhi.n	800c706 <_strtol_l.constprop.0+0xc6>
 800c6fc:	3c57      	subs	r4, #87	@ 0x57
 800c6fe:	e7d8      	b.n	800c6b2 <_strtol_l.constprop.0+0x72>
 800c700:	f04f 32ff 	mov.w	r2, #4294967295
 800c704:	e7e1      	b.n	800c6ca <_strtol_l.constprop.0+0x8a>
 800c706:	1c53      	adds	r3, r2, #1
 800c708:	d108      	bne.n	800c71c <_strtol_l.constprop.0+0xdc>
 800c70a:	2322      	movs	r3, #34	@ 0x22
 800c70c:	f8ce 3000 	str.w	r3, [lr]
 800c710:	4660      	mov	r0, ip
 800c712:	f1b8 0f00 	cmp.w	r8, #0
 800c716:	d0a0      	beq.n	800c65a <_strtol_l.constprop.0+0x1a>
 800c718:	1e69      	subs	r1, r5, #1
 800c71a:	e006      	b.n	800c72a <_strtol_l.constprop.0+0xea>
 800c71c:	b106      	cbz	r6, 800c720 <_strtol_l.constprop.0+0xe0>
 800c71e:	4240      	negs	r0, r0
 800c720:	f1b8 0f00 	cmp.w	r8, #0
 800c724:	d099      	beq.n	800c65a <_strtol_l.constprop.0+0x1a>
 800c726:	2a00      	cmp	r2, #0
 800c728:	d1f6      	bne.n	800c718 <_strtol_l.constprop.0+0xd8>
 800c72a:	f8c8 1000 	str.w	r1, [r8]
 800c72e:	e794      	b.n	800c65a <_strtol_l.constprop.0+0x1a>
 800c730:	0801387d 	.word	0x0801387d

0800c734 <_strtol_r>:
 800c734:	f7ff bf84 	b.w	800c640 <_strtol_l.constprop.0>

0800c738 <strtol>:
 800c738:	4613      	mov	r3, r2
 800c73a:	460a      	mov	r2, r1
 800c73c:	4601      	mov	r1, r0
 800c73e:	4802      	ldr	r0, [pc, #8]	@ (800c748 <strtol+0x10>)
 800c740:	6800      	ldr	r0, [r0, #0]
 800c742:	f7ff bf7d 	b.w	800c640 <_strtol_l.constprop.0>
 800c746:	bf00      	nop
 800c748:	200003d0 	.word	0x200003d0

0800c74c <__cvt>:
 800c74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c750:	ec57 6b10 	vmov	r6, r7, d0
 800c754:	2f00      	cmp	r7, #0
 800c756:	460c      	mov	r4, r1
 800c758:	4619      	mov	r1, r3
 800c75a:	463b      	mov	r3, r7
 800c75c:	bfbb      	ittet	lt
 800c75e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c762:	461f      	movlt	r7, r3
 800c764:	2300      	movge	r3, #0
 800c766:	232d      	movlt	r3, #45	@ 0x2d
 800c768:	700b      	strb	r3, [r1, #0]
 800c76a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c76c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c770:	4691      	mov	r9, r2
 800c772:	f023 0820 	bic.w	r8, r3, #32
 800c776:	bfbc      	itt	lt
 800c778:	4632      	movlt	r2, r6
 800c77a:	4616      	movlt	r6, r2
 800c77c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c780:	d005      	beq.n	800c78e <__cvt+0x42>
 800c782:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c786:	d100      	bne.n	800c78a <__cvt+0x3e>
 800c788:	3401      	adds	r4, #1
 800c78a:	2102      	movs	r1, #2
 800c78c:	e000      	b.n	800c790 <__cvt+0x44>
 800c78e:	2103      	movs	r1, #3
 800c790:	ab03      	add	r3, sp, #12
 800c792:	9301      	str	r3, [sp, #4]
 800c794:	ab02      	add	r3, sp, #8
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	ec47 6b10 	vmov	d0, r6, r7
 800c79c:	4653      	mov	r3, sl
 800c79e:	4622      	mov	r2, r4
 800c7a0:	f001 f976 	bl	800da90 <_dtoa_r>
 800c7a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	d119      	bne.n	800c7e0 <__cvt+0x94>
 800c7ac:	f019 0f01 	tst.w	r9, #1
 800c7b0:	d00e      	beq.n	800c7d0 <__cvt+0x84>
 800c7b2:	eb00 0904 	add.w	r9, r0, r4
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	4639      	mov	r1, r7
 800c7be:	f7f4 f993 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7c2:	b108      	cbz	r0, 800c7c8 <__cvt+0x7c>
 800c7c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c7c8:	2230      	movs	r2, #48	@ 0x30
 800c7ca:	9b03      	ldr	r3, [sp, #12]
 800c7cc:	454b      	cmp	r3, r9
 800c7ce:	d31e      	bcc.n	800c80e <__cvt+0xc2>
 800c7d0:	9b03      	ldr	r3, [sp, #12]
 800c7d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7d4:	1b5b      	subs	r3, r3, r5
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	6013      	str	r3, [r2, #0]
 800c7da:	b004      	add	sp, #16
 800c7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c7e4:	eb00 0904 	add.w	r9, r0, r4
 800c7e8:	d1e5      	bne.n	800c7b6 <__cvt+0x6a>
 800c7ea:	7803      	ldrb	r3, [r0, #0]
 800c7ec:	2b30      	cmp	r3, #48	@ 0x30
 800c7ee:	d10a      	bne.n	800c806 <__cvt+0xba>
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	f7f4 f976 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7fc:	b918      	cbnz	r0, 800c806 <__cvt+0xba>
 800c7fe:	f1c4 0401 	rsb	r4, r4, #1
 800c802:	f8ca 4000 	str.w	r4, [sl]
 800c806:	f8da 3000 	ldr.w	r3, [sl]
 800c80a:	4499      	add	r9, r3
 800c80c:	e7d3      	b.n	800c7b6 <__cvt+0x6a>
 800c80e:	1c59      	adds	r1, r3, #1
 800c810:	9103      	str	r1, [sp, #12]
 800c812:	701a      	strb	r2, [r3, #0]
 800c814:	e7d9      	b.n	800c7ca <__cvt+0x7e>

0800c816 <__exponent>:
 800c816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c818:	2900      	cmp	r1, #0
 800c81a:	bfba      	itte	lt
 800c81c:	4249      	neglt	r1, r1
 800c81e:	232d      	movlt	r3, #45	@ 0x2d
 800c820:	232b      	movge	r3, #43	@ 0x2b
 800c822:	2909      	cmp	r1, #9
 800c824:	7002      	strb	r2, [r0, #0]
 800c826:	7043      	strb	r3, [r0, #1]
 800c828:	dd29      	ble.n	800c87e <__exponent+0x68>
 800c82a:	f10d 0307 	add.w	r3, sp, #7
 800c82e:	461d      	mov	r5, r3
 800c830:	270a      	movs	r7, #10
 800c832:	461a      	mov	r2, r3
 800c834:	fbb1 f6f7 	udiv	r6, r1, r7
 800c838:	fb07 1416 	mls	r4, r7, r6, r1
 800c83c:	3430      	adds	r4, #48	@ 0x30
 800c83e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c842:	460c      	mov	r4, r1
 800c844:	2c63      	cmp	r4, #99	@ 0x63
 800c846:	f103 33ff 	add.w	r3, r3, #4294967295
 800c84a:	4631      	mov	r1, r6
 800c84c:	dcf1      	bgt.n	800c832 <__exponent+0x1c>
 800c84e:	3130      	adds	r1, #48	@ 0x30
 800c850:	1e94      	subs	r4, r2, #2
 800c852:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c856:	1c41      	adds	r1, r0, #1
 800c858:	4623      	mov	r3, r4
 800c85a:	42ab      	cmp	r3, r5
 800c85c:	d30a      	bcc.n	800c874 <__exponent+0x5e>
 800c85e:	f10d 0309 	add.w	r3, sp, #9
 800c862:	1a9b      	subs	r3, r3, r2
 800c864:	42ac      	cmp	r4, r5
 800c866:	bf88      	it	hi
 800c868:	2300      	movhi	r3, #0
 800c86a:	3302      	adds	r3, #2
 800c86c:	4403      	add	r3, r0
 800c86e:	1a18      	subs	r0, r3, r0
 800c870:	b003      	add	sp, #12
 800c872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c874:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c878:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c87c:	e7ed      	b.n	800c85a <__exponent+0x44>
 800c87e:	2330      	movs	r3, #48	@ 0x30
 800c880:	3130      	adds	r1, #48	@ 0x30
 800c882:	7083      	strb	r3, [r0, #2]
 800c884:	70c1      	strb	r1, [r0, #3]
 800c886:	1d03      	adds	r3, r0, #4
 800c888:	e7f1      	b.n	800c86e <__exponent+0x58>
	...

0800c88c <_printf_float>:
 800c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c890:	b08d      	sub	sp, #52	@ 0x34
 800c892:	460c      	mov	r4, r1
 800c894:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c898:	4616      	mov	r6, r2
 800c89a:	461f      	mov	r7, r3
 800c89c:	4605      	mov	r5, r0
 800c89e:	f000 ffe1 	bl	800d864 <_localeconv_r>
 800c8a2:	6803      	ldr	r3, [r0, #0]
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7f3 fcf2 	bl	8000290 <strlen>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b4:	9005      	str	r0, [sp, #20]
 800c8b6:	3307      	adds	r3, #7
 800c8b8:	f023 0307 	bic.w	r3, r3, #7
 800c8bc:	f103 0208 	add.w	r2, r3, #8
 800c8c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c8c4:	f8d4 b000 	ldr.w	fp, [r4]
 800c8c8:	f8c8 2000 	str.w	r2, [r8]
 800c8cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c8d4:	9307      	str	r3, [sp, #28]
 800c8d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c8de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8e2:	4b9c      	ldr	r3, [pc, #624]	@ (800cb54 <_printf_float+0x2c8>)
 800c8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e8:	f7f4 f930 	bl	8000b4c <__aeabi_dcmpun>
 800c8ec:	bb70      	cbnz	r0, 800c94c <_printf_float+0xc0>
 800c8ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8f2:	4b98      	ldr	r3, [pc, #608]	@ (800cb54 <_printf_float+0x2c8>)
 800c8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f8:	f7f4 f90a 	bl	8000b10 <__aeabi_dcmple>
 800c8fc:	bb30      	cbnz	r0, 800c94c <_printf_float+0xc0>
 800c8fe:	2200      	movs	r2, #0
 800c900:	2300      	movs	r3, #0
 800c902:	4640      	mov	r0, r8
 800c904:	4649      	mov	r1, r9
 800c906:	f7f4 f8f9 	bl	8000afc <__aeabi_dcmplt>
 800c90a:	b110      	cbz	r0, 800c912 <_printf_float+0x86>
 800c90c:	232d      	movs	r3, #45	@ 0x2d
 800c90e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c912:	4a91      	ldr	r2, [pc, #580]	@ (800cb58 <_printf_float+0x2cc>)
 800c914:	4b91      	ldr	r3, [pc, #580]	@ (800cb5c <_printf_float+0x2d0>)
 800c916:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c91a:	bf94      	ite	ls
 800c91c:	4690      	movls	r8, r2
 800c91e:	4698      	movhi	r8, r3
 800c920:	2303      	movs	r3, #3
 800c922:	6123      	str	r3, [r4, #16]
 800c924:	f02b 0304 	bic.w	r3, fp, #4
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	f04f 0900 	mov.w	r9, #0
 800c92e:	9700      	str	r7, [sp, #0]
 800c930:	4633      	mov	r3, r6
 800c932:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c934:	4621      	mov	r1, r4
 800c936:	4628      	mov	r0, r5
 800c938:	f000 f9d2 	bl	800cce0 <_printf_common>
 800c93c:	3001      	adds	r0, #1
 800c93e:	f040 808d 	bne.w	800ca5c <_printf_float+0x1d0>
 800c942:	f04f 30ff 	mov.w	r0, #4294967295
 800c946:	b00d      	add	sp, #52	@ 0x34
 800c948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94c:	4642      	mov	r2, r8
 800c94e:	464b      	mov	r3, r9
 800c950:	4640      	mov	r0, r8
 800c952:	4649      	mov	r1, r9
 800c954:	f7f4 f8fa 	bl	8000b4c <__aeabi_dcmpun>
 800c958:	b140      	cbz	r0, 800c96c <_printf_float+0xe0>
 800c95a:	464b      	mov	r3, r9
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	bfbc      	itt	lt
 800c960:	232d      	movlt	r3, #45	@ 0x2d
 800c962:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c966:	4a7e      	ldr	r2, [pc, #504]	@ (800cb60 <_printf_float+0x2d4>)
 800c968:	4b7e      	ldr	r3, [pc, #504]	@ (800cb64 <_printf_float+0x2d8>)
 800c96a:	e7d4      	b.n	800c916 <_printf_float+0x8a>
 800c96c:	6863      	ldr	r3, [r4, #4]
 800c96e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c972:	9206      	str	r2, [sp, #24]
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	d13b      	bne.n	800c9f0 <_printf_float+0x164>
 800c978:	2306      	movs	r3, #6
 800c97a:	6063      	str	r3, [r4, #4]
 800c97c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c980:	2300      	movs	r3, #0
 800c982:	6022      	str	r2, [r4, #0]
 800c984:	9303      	str	r3, [sp, #12]
 800c986:	ab0a      	add	r3, sp, #40	@ 0x28
 800c988:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c98c:	ab09      	add	r3, sp, #36	@ 0x24
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	6861      	ldr	r1, [r4, #4]
 800c992:	ec49 8b10 	vmov	d0, r8, r9
 800c996:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c99a:	4628      	mov	r0, r5
 800c99c:	f7ff fed6 	bl	800c74c <__cvt>
 800c9a0:	9b06      	ldr	r3, [sp, #24]
 800c9a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9a4:	2b47      	cmp	r3, #71	@ 0x47
 800c9a6:	4680      	mov	r8, r0
 800c9a8:	d129      	bne.n	800c9fe <_printf_float+0x172>
 800c9aa:	1cc8      	adds	r0, r1, #3
 800c9ac:	db02      	blt.n	800c9b4 <_printf_float+0x128>
 800c9ae:	6863      	ldr	r3, [r4, #4]
 800c9b0:	4299      	cmp	r1, r3
 800c9b2:	dd41      	ble.n	800ca38 <_printf_float+0x1ac>
 800c9b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c9b8:	fa5f fa8a 	uxtb.w	sl, sl
 800c9bc:	3901      	subs	r1, #1
 800c9be:	4652      	mov	r2, sl
 800c9c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c9c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c9c6:	f7ff ff26 	bl	800c816 <__exponent>
 800c9ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9cc:	1813      	adds	r3, r2, r0
 800c9ce:	2a01      	cmp	r2, #1
 800c9d0:	4681      	mov	r9, r0
 800c9d2:	6123      	str	r3, [r4, #16]
 800c9d4:	dc02      	bgt.n	800c9dc <_printf_float+0x150>
 800c9d6:	6822      	ldr	r2, [r4, #0]
 800c9d8:	07d2      	lsls	r2, r2, #31
 800c9da:	d501      	bpl.n	800c9e0 <_printf_float+0x154>
 800c9dc:	3301      	adds	r3, #1
 800c9de:	6123      	str	r3, [r4, #16]
 800c9e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d0a2      	beq.n	800c92e <_printf_float+0xa2>
 800c9e8:	232d      	movs	r3, #45	@ 0x2d
 800c9ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9ee:	e79e      	b.n	800c92e <_printf_float+0xa2>
 800c9f0:	9a06      	ldr	r2, [sp, #24]
 800c9f2:	2a47      	cmp	r2, #71	@ 0x47
 800c9f4:	d1c2      	bne.n	800c97c <_printf_float+0xf0>
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1c0      	bne.n	800c97c <_printf_float+0xf0>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e7bd      	b.n	800c97a <_printf_float+0xee>
 800c9fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ca02:	d9db      	bls.n	800c9bc <_printf_float+0x130>
 800ca04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ca08:	d118      	bne.n	800ca3c <_printf_float+0x1b0>
 800ca0a:	2900      	cmp	r1, #0
 800ca0c:	6863      	ldr	r3, [r4, #4]
 800ca0e:	dd0b      	ble.n	800ca28 <_printf_float+0x19c>
 800ca10:	6121      	str	r1, [r4, #16]
 800ca12:	b913      	cbnz	r3, 800ca1a <_printf_float+0x18e>
 800ca14:	6822      	ldr	r2, [r4, #0]
 800ca16:	07d0      	lsls	r0, r2, #31
 800ca18:	d502      	bpl.n	800ca20 <_printf_float+0x194>
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	440b      	add	r3, r1
 800ca1e:	6123      	str	r3, [r4, #16]
 800ca20:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ca22:	f04f 0900 	mov.w	r9, #0
 800ca26:	e7db      	b.n	800c9e0 <_printf_float+0x154>
 800ca28:	b913      	cbnz	r3, 800ca30 <_printf_float+0x1a4>
 800ca2a:	6822      	ldr	r2, [r4, #0]
 800ca2c:	07d2      	lsls	r2, r2, #31
 800ca2e:	d501      	bpl.n	800ca34 <_printf_float+0x1a8>
 800ca30:	3302      	adds	r3, #2
 800ca32:	e7f4      	b.n	800ca1e <_printf_float+0x192>
 800ca34:	2301      	movs	r3, #1
 800ca36:	e7f2      	b.n	800ca1e <_printf_float+0x192>
 800ca38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ca3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca3e:	4299      	cmp	r1, r3
 800ca40:	db05      	blt.n	800ca4e <_printf_float+0x1c2>
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	6121      	str	r1, [r4, #16]
 800ca46:	07d8      	lsls	r0, r3, #31
 800ca48:	d5ea      	bpl.n	800ca20 <_printf_float+0x194>
 800ca4a:	1c4b      	adds	r3, r1, #1
 800ca4c:	e7e7      	b.n	800ca1e <_printf_float+0x192>
 800ca4e:	2900      	cmp	r1, #0
 800ca50:	bfd4      	ite	le
 800ca52:	f1c1 0202 	rsble	r2, r1, #2
 800ca56:	2201      	movgt	r2, #1
 800ca58:	4413      	add	r3, r2
 800ca5a:	e7e0      	b.n	800ca1e <_printf_float+0x192>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	055a      	lsls	r2, r3, #21
 800ca60:	d407      	bmi.n	800ca72 <_printf_float+0x1e6>
 800ca62:	6923      	ldr	r3, [r4, #16]
 800ca64:	4642      	mov	r2, r8
 800ca66:	4631      	mov	r1, r6
 800ca68:	4628      	mov	r0, r5
 800ca6a:	47b8      	blx	r7
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d12b      	bne.n	800cac8 <_printf_float+0x23c>
 800ca70:	e767      	b.n	800c942 <_printf_float+0xb6>
 800ca72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ca76:	f240 80dd 	bls.w	800cc34 <_printf_float+0x3a8>
 800ca7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ca7e:	2200      	movs	r2, #0
 800ca80:	2300      	movs	r3, #0
 800ca82:	f7f4 f831 	bl	8000ae8 <__aeabi_dcmpeq>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d033      	beq.n	800caf2 <_printf_float+0x266>
 800ca8a:	4a37      	ldr	r2, [pc, #220]	@ (800cb68 <_printf_float+0x2dc>)
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	4631      	mov	r1, r6
 800ca90:	4628      	mov	r0, r5
 800ca92:	47b8      	blx	r7
 800ca94:	3001      	adds	r0, #1
 800ca96:	f43f af54 	beq.w	800c942 <_printf_float+0xb6>
 800ca9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ca9e:	4543      	cmp	r3, r8
 800caa0:	db02      	blt.n	800caa8 <_printf_float+0x21c>
 800caa2:	6823      	ldr	r3, [r4, #0]
 800caa4:	07d8      	lsls	r0, r3, #31
 800caa6:	d50f      	bpl.n	800cac8 <_printf_float+0x23c>
 800caa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800caac:	4631      	mov	r1, r6
 800caae:	4628      	mov	r0, r5
 800cab0:	47b8      	blx	r7
 800cab2:	3001      	adds	r0, #1
 800cab4:	f43f af45 	beq.w	800c942 <_printf_float+0xb6>
 800cab8:	f04f 0900 	mov.w	r9, #0
 800cabc:	f108 38ff 	add.w	r8, r8, #4294967295
 800cac0:	f104 0a1a 	add.w	sl, r4, #26
 800cac4:	45c8      	cmp	r8, r9
 800cac6:	dc09      	bgt.n	800cadc <_printf_float+0x250>
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	079b      	lsls	r3, r3, #30
 800cacc:	f100 8103 	bmi.w	800ccd6 <_printf_float+0x44a>
 800cad0:	68e0      	ldr	r0, [r4, #12]
 800cad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cad4:	4298      	cmp	r0, r3
 800cad6:	bfb8      	it	lt
 800cad8:	4618      	movlt	r0, r3
 800cada:	e734      	b.n	800c946 <_printf_float+0xba>
 800cadc:	2301      	movs	r3, #1
 800cade:	4652      	mov	r2, sl
 800cae0:	4631      	mov	r1, r6
 800cae2:	4628      	mov	r0, r5
 800cae4:	47b8      	blx	r7
 800cae6:	3001      	adds	r0, #1
 800cae8:	f43f af2b 	beq.w	800c942 <_printf_float+0xb6>
 800caec:	f109 0901 	add.w	r9, r9, #1
 800caf0:	e7e8      	b.n	800cac4 <_printf_float+0x238>
 800caf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	dc39      	bgt.n	800cb6c <_printf_float+0x2e0>
 800caf8:	4a1b      	ldr	r2, [pc, #108]	@ (800cb68 <_printf_float+0x2dc>)
 800cafa:	2301      	movs	r3, #1
 800cafc:	4631      	mov	r1, r6
 800cafe:	4628      	mov	r0, r5
 800cb00:	47b8      	blx	r7
 800cb02:	3001      	adds	r0, #1
 800cb04:	f43f af1d 	beq.w	800c942 <_printf_float+0xb6>
 800cb08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cb0c:	ea59 0303 	orrs.w	r3, r9, r3
 800cb10:	d102      	bne.n	800cb18 <_printf_float+0x28c>
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	07d9      	lsls	r1, r3, #31
 800cb16:	d5d7      	bpl.n	800cac8 <_printf_float+0x23c>
 800cb18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb1c:	4631      	mov	r1, r6
 800cb1e:	4628      	mov	r0, r5
 800cb20:	47b8      	blx	r7
 800cb22:	3001      	adds	r0, #1
 800cb24:	f43f af0d 	beq.w	800c942 <_printf_float+0xb6>
 800cb28:	f04f 0a00 	mov.w	sl, #0
 800cb2c:	f104 0b1a 	add.w	fp, r4, #26
 800cb30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb32:	425b      	negs	r3, r3
 800cb34:	4553      	cmp	r3, sl
 800cb36:	dc01      	bgt.n	800cb3c <_printf_float+0x2b0>
 800cb38:	464b      	mov	r3, r9
 800cb3a:	e793      	b.n	800ca64 <_printf_float+0x1d8>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	465a      	mov	r2, fp
 800cb40:	4631      	mov	r1, r6
 800cb42:	4628      	mov	r0, r5
 800cb44:	47b8      	blx	r7
 800cb46:	3001      	adds	r0, #1
 800cb48:	f43f aefb 	beq.w	800c942 <_printf_float+0xb6>
 800cb4c:	f10a 0a01 	add.w	sl, sl, #1
 800cb50:	e7ee      	b.n	800cb30 <_printf_float+0x2a4>
 800cb52:	bf00      	nop
 800cb54:	7fefffff 	.word	0x7fefffff
 800cb58:	0801397d 	.word	0x0801397d
 800cb5c:	08013981 	.word	0x08013981
 800cb60:	08013985 	.word	0x08013985
 800cb64:	08013989 	.word	0x08013989
 800cb68:	0801398d 	.word	0x0801398d
 800cb6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cb6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cb72:	4553      	cmp	r3, sl
 800cb74:	bfa8      	it	ge
 800cb76:	4653      	movge	r3, sl
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	4699      	mov	r9, r3
 800cb7c:	dc36      	bgt.n	800cbec <_printf_float+0x360>
 800cb7e:	f04f 0b00 	mov.w	fp, #0
 800cb82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb86:	f104 021a 	add.w	r2, r4, #26
 800cb8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cb8c:	9306      	str	r3, [sp, #24]
 800cb8e:	eba3 0309 	sub.w	r3, r3, r9
 800cb92:	455b      	cmp	r3, fp
 800cb94:	dc31      	bgt.n	800cbfa <_printf_float+0x36e>
 800cb96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb98:	459a      	cmp	sl, r3
 800cb9a:	dc3a      	bgt.n	800cc12 <_printf_float+0x386>
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	07da      	lsls	r2, r3, #31
 800cba0:	d437      	bmi.n	800cc12 <_printf_float+0x386>
 800cba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cba4:	ebaa 0903 	sub.w	r9, sl, r3
 800cba8:	9b06      	ldr	r3, [sp, #24]
 800cbaa:	ebaa 0303 	sub.w	r3, sl, r3
 800cbae:	4599      	cmp	r9, r3
 800cbb0:	bfa8      	it	ge
 800cbb2:	4699      	movge	r9, r3
 800cbb4:	f1b9 0f00 	cmp.w	r9, #0
 800cbb8:	dc33      	bgt.n	800cc22 <_printf_float+0x396>
 800cbba:	f04f 0800 	mov.w	r8, #0
 800cbbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbc2:	f104 0b1a 	add.w	fp, r4, #26
 800cbc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbc8:	ebaa 0303 	sub.w	r3, sl, r3
 800cbcc:	eba3 0309 	sub.w	r3, r3, r9
 800cbd0:	4543      	cmp	r3, r8
 800cbd2:	f77f af79 	ble.w	800cac8 <_printf_float+0x23c>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	465a      	mov	r2, fp
 800cbda:	4631      	mov	r1, r6
 800cbdc:	4628      	mov	r0, r5
 800cbde:	47b8      	blx	r7
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	f43f aeae 	beq.w	800c942 <_printf_float+0xb6>
 800cbe6:	f108 0801 	add.w	r8, r8, #1
 800cbea:	e7ec      	b.n	800cbc6 <_printf_float+0x33a>
 800cbec:	4642      	mov	r2, r8
 800cbee:	4631      	mov	r1, r6
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b8      	blx	r7
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d1c2      	bne.n	800cb7e <_printf_float+0x2f2>
 800cbf8:	e6a3      	b.n	800c942 <_printf_float+0xb6>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	4631      	mov	r1, r6
 800cbfe:	4628      	mov	r0, r5
 800cc00:	9206      	str	r2, [sp, #24]
 800cc02:	47b8      	blx	r7
 800cc04:	3001      	adds	r0, #1
 800cc06:	f43f ae9c 	beq.w	800c942 <_printf_float+0xb6>
 800cc0a:	9a06      	ldr	r2, [sp, #24]
 800cc0c:	f10b 0b01 	add.w	fp, fp, #1
 800cc10:	e7bb      	b.n	800cb8a <_printf_float+0x2fe>
 800cc12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc16:	4631      	mov	r1, r6
 800cc18:	4628      	mov	r0, r5
 800cc1a:	47b8      	blx	r7
 800cc1c:	3001      	adds	r0, #1
 800cc1e:	d1c0      	bne.n	800cba2 <_printf_float+0x316>
 800cc20:	e68f      	b.n	800c942 <_printf_float+0xb6>
 800cc22:	9a06      	ldr	r2, [sp, #24]
 800cc24:	464b      	mov	r3, r9
 800cc26:	4442      	add	r2, r8
 800cc28:	4631      	mov	r1, r6
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	47b8      	blx	r7
 800cc2e:	3001      	adds	r0, #1
 800cc30:	d1c3      	bne.n	800cbba <_printf_float+0x32e>
 800cc32:	e686      	b.n	800c942 <_printf_float+0xb6>
 800cc34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cc38:	f1ba 0f01 	cmp.w	sl, #1
 800cc3c:	dc01      	bgt.n	800cc42 <_printf_float+0x3b6>
 800cc3e:	07db      	lsls	r3, r3, #31
 800cc40:	d536      	bpl.n	800ccb0 <_printf_float+0x424>
 800cc42:	2301      	movs	r3, #1
 800cc44:	4642      	mov	r2, r8
 800cc46:	4631      	mov	r1, r6
 800cc48:	4628      	mov	r0, r5
 800cc4a:	47b8      	blx	r7
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	f43f ae78 	beq.w	800c942 <_printf_float+0xb6>
 800cc52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc56:	4631      	mov	r1, r6
 800cc58:	4628      	mov	r0, r5
 800cc5a:	47b8      	blx	r7
 800cc5c:	3001      	adds	r0, #1
 800cc5e:	f43f ae70 	beq.w	800c942 <_printf_float+0xb6>
 800cc62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cc66:	2200      	movs	r2, #0
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc6e:	f7f3 ff3b 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc72:	b9c0      	cbnz	r0, 800cca6 <_printf_float+0x41a>
 800cc74:	4653      	mov	r3, sl
 800cc76:	f108 0201 	add.w	r2, r8, #1
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b8      	blx	r7
 800cc80:	3001      	adds	r0, #1
 800cc82:	d10c      	bne.n	800cc9e <_printf_float+0x412>
 800cc84:	e65d      	b.n	800c942 <_printf_float+0xb6>
 800cc86:	2301      	movs	r3, #1
 800cc88:	465a      	mov	r2, fp
 800cc8a:	4631      	mov	r1, r6
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	47b8      	blx	r7
 800cc90:	3001      	adds	r0, #1
 800cc92:	f43f ae56 	beq.w	800c942 <_printf_float+0xb6>
 800cc96:	f108 0801 	add.w	r8, r8, #1
 800cc9a:	45d0      	cmp	r8, sl
 800cc9c:	dbf3      	blt.n	800cc86 <_printf_float+0x3fa>
 800cc9e:	464b      	mov	r3, r9
 800cca0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cca4:	e6df      	b.n	800ca66 <_printf_float+0x1da>
 800cca6:	f04f 0800 	mov.w	r8, #0
 800ccaa:	f104 0b1a 	add.w	fp, r4, #26
 800ccae:	e7f4      	b.n	800cc9a <_printf_float+0x40e>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	4642      	mov	r2, r8
 800ccb4:	e7e1      	b.n	800cc7a <_printf_float+0x3ee>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	464a      	mov	r2, r9
 800ccba:	4631      	mov	r1, r6
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	47b8      	blx	r7
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	f43f ae3e 	beq.w	800c942 <_printf_float+0xb6>
 800ccc6:	f108 0801 	add.w	r8, r8, #1
 800ccca:	68e3      	ldr	r3, [r4, #12]
 800cccc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ccce:	1a5b      	subs	r3, r3, r1
 800ccd0:	4543      	cmp	r3, r8
 800ccd2:	dcf0      	bgt.n	800ccb6 <_printf_float+0x42a>
 800ccd4:	e6fc      	b.n	800cad0 <_printf_float+0x244>
 800ccd6:	f04f 0800 	mov.w	r8, #0
 800ccda:	f104 0919 	add.w	r9, r4, #25
 800ccde:	e7f4      	b.n	800ccca <_printf_float+0x43e>

0800cce0 <_printf_common>:
 800cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce4:	4616      	mov	r6, r2
 800cce6:	4698      	mov	r8, r3
 800cce8:	688a      	ldr	r2, [r1, #8]
 800ccea:	690b      	ldr	r3, [r1, #16]
 800ccec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	bfb8      	it	lt
 800ccf4:	4613      	movlt	r3, r2
 800ccf6:	6033      	str	r3, [r6, #0]
 800ccf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ccfc:	4607      	mov	r7, r0
 800ccfe:	460c      	mov	r4, r1
 800cd00:	b10a      	cbz	r2, 800cd06 <_printf_common+0x26>
 800cd02:	3301      	adds	r3, #1
 800cd04:	6033      	str	r3, [r6, #0]
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	0699      	lsls	r1, r3, #26
 800cd0a:	bf42      	ittt	mi
 800cd0c:	6833      	ldrmi	r3, [r6, #0]
 800cd0e:	3302      	addmi	r3, #2
 800cd10:	6033      	strmi	r3, [r6, #0]
 800cd12:	6825      	ldr	r5, [r4, #0]
 800cd14:	f015 0506 	ands.w	r5, r5, #6
 800cd18:	d106      	bne.n	800cd28 <_printf_common+0x48>
 800cd1a:	f104 0a19 	add.w	sl, r4, #25
 800cd1e:	68e3      	ldr	r3, [r4, #12]
 800cd20:	6832      	ldr	r2, [r6, #0]
 800cd22:	1a9b      	subs	r3, r3, r2
 800cd24:	42ab      	cmp	r3, r5
 800cd26:	dc26      	bgt.n	800cd76 <_printf_common+0x96>
 800cd28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd2c:	6822      	ldr	r2, [r4, #0]
 800cd2e:	3b00      	subs	r3, #0
 800cd30:	bf18      	it	ne
 800cd32:	2301      	movne	r3, #1
 800cd34:	0692      	lsls	r2, r2, #26
 800cd36:	d42b      	bmi.n	800cd90 <_printf_common+0xb0>
 800cd38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd3c:	4641      	mov	r1, r8
 800cd3e:	4638      	mov	r0, r7
 800cd40:	47c8      	blx	r9
 800cd42:	3001      	adds	r0, #1
 800cd44:	d01e      	beq.n	800cd84 <_printf_common+0xa4>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	6922      	ldr	r2, [r4, #16]
 800cd4a:	f003 0306 	and.w	r3, r3, #6
 800cd4e:	2b04      	cmp	r3, #4
 800cd50:	bf02      	ittt	eq
 800cd52:	68e5      	ldreq	r5, [r4, #12]
 800cd54:	6833      	ldreq	r3, [r6, #0]
 800cd56:	1aed      	subeq	r5, r5, r3
 800cd58:	68a3      	ldr	r3, [r4, #8]
 800cd5a:	bf0c      	ite	eq
 800cd5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd60:	2500      	movne	r5, #0
 800cd62:	4293      	cmp	r3, r2
 800cd64:	bfc4      	itt	gt
 800cd66:	1a9b      	subgt	r3, r3, r2
 800cd68:	18ed      	addgt	r5, r5, r3
 800cd6a:	2600      	movs	r6, #0
 800cd6c:	341a      	adds	r4, #26
 800cd6e:	42b5      	cmp	r5, r6
 800cd70:	d11a      	bne.n	800cda8 <_printf_common+0xc8>
 800cd72:	2000      	movs	r0, #0
 800cd74:	e008      	b.n	800cd88 <_printf_common+0xa8>
 800cd76:	2301      	movs	r3, #1
 800cd78:	4652      	mov	r2, sl
 800cd7a:	4641      	mov	r1, r8
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	47c8      	blx	r9
 800cd80:	3001      	adds	r0, #1
 800cd82:	d103      	bne.n	800cd8c <_printf_common+0xac>
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8c:	3501      	adds	r5, #1
 800cd8e:	e7c6      	b.n	800cd1e <_printf_common+0x3e>
 800cd90:	18e1      	adds	r1, r4, r3
 800cd92:	1c5a      	adds	r2, r3, #1
 800cd94:	2030      	movs	r0, #48	@ 0x30
 800cd96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd9a:	4422      	add	r2, r4
 800cd9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cda0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cda4:	3302      	adds	r3, #2
 800cda6:	e7c7      	b.n	800cd38 <_printf_common+0x58>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	4622      	mov	r2, r4
 800cdac:	4641      	mov	r1, r8
 800cdae:	4638      	mov	r0, r7
 800cdb0:	47c8      	blx	r9
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	d0e6      	beq.n	800cd84 <_printf_common+0xa4>
 800cdb6:	3601      	adds	r6, #1
 800cdb8:	e7d9      	b.n	800cd6e <_printf_common+0x8e>
	...

0800cdbc <_printf_i>:
 800cdbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc0:	7e0f      	ldrb	r7, [r1, #24]
 800cdc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cdc4:	2f78      	cmp	r7, #120	@ 0x78
 800cdc6:	4691      	mov	r9, r2
 800cdc8:	4680      	mov	r8, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	469a      	mov	sl, r3
 800cdce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cdd2:	d807      	bhi.n	800cde4 <_printf_i+0x28>
 800cdd4:	2f62      	cmp	r7, #98	@ 0x62
 800cdd6:	d80a      	bhi.n	800cdee <_printf_i+0x32>
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	f000 80d2 	beq.w	800cf82 <_printf_i+0x1c6>
 800cdde:	2f58      	cmp	r7, #88	@ 0x58
 800cde0:	f000 80b9 	beq.w	800cf56 <_printf_i+0x19a>
 800cde4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cde8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdec:	e03a      	b.n	800ce64 <_printf_i+0xa8>
 800cdee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdf2:	2b15      	cmp	r3, #21
 800cdf4:	d8f6      	bhi.n	800cde4 <_printf_i+0x28>
 800cdf6:	a101      	add	r1, pc, #4	@ (adr r1, 800cdfc <_printf_i+0x40>)
 800cdf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdfc:	0800ce55 	.word	0x0800ce55
 800ce00:	0800ce69 	.word	0x0800ce69
 800ce04:	0800cde5 	.word	0x0800cde5
 800ce08:	0800cde5 	.word	0x0800cde5
 800ce0c:	0800cde5 	.word	0x0800cde5
 800ce10:	0800cde5 	.word	0x0800cde5
 800ce14:	0800ce69 	.word	0x0800ce69
 800ce18:	0800cde5 	.word	0x0800cde5
 800ce1c:	0800cde5 	.word	0x0800cde5
 800ce20:	0800cde5 	.word	0x0800cde5
 800ce24:	0800cde5 	.word	0x0800cde5
 800ce28:	0800cf69 	.word	0x0800cf69
 800ce2c:	0800ce93 	.word	0x0800ce93
 800ce30:	0800cf23 	.word	0x0800cf23
 800ce34:	0800cde5 	.word	0x0800cde5
 800ce38:	0800cde5 	.word	0x0800cde5
 800ce3c:	0800cf8b 	.word	0x0800cf8b
 800ce40:	0800cde5 	.word	0x0800cde5
 800ce44:	0800ce93 	.word	0x0800ce93
 800ce48:	0800cde5 	.word	0x0800cde5
 800ce4c:	0800cde5 	.word	0x0800cde5
 800ce50:	0800cf2b 	.word	0x0800cf2b
 800ce54:	6833      	ldr	r3, [r6, #0]
 800ce56:	1d1a      	adds	r2, r3, #4
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6032      	str	r2, [r6, #0]
 800ce5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce64:	2301      	movs	r3, #1
 800ce66:	e09d      	b.n	800cfa4 <_printf_i+0x1e8>
 800ce68:	6833      	ldr	r3, [r6, #0]
 800ce6a:	6820      	ldr	r0, [r4, #0]
 800ce6c:	1d19      	adds	r1, r3, #4
 800ce6e:	6031      	str	r1, [r6, #0]
 800ce70:	0606      	lsls	r6, r0, #24
 800ce72:	d501      	bpl.n	800ce78 <_printf_i+0xbc>
 800ce74:	681d      	ldr	r5, [r3, #0]
 800ce76:	e003      	b.n	800ce80 <_printf_i+0xc4>
 800ce78:	0645      	lsls	r5, r0, #25
 800ce7a:	d5fb      	bpl.n	800ce74 <_printf_i+0xb8>
 800ce7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce80:	2d00      	cmp	r5, #0
 800ce82:	da03      	bge.n	800ce8c <_printf_i+0xd0>
 800ce84:	232d      	movs	r3, #45	@ 0x2d
 800ce86:	426d      	negs	r5, r5
 800ce88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce8c:	4859      	ldr	r0, [pc, #356]	@ (800cff4 <_printf_i+0x238>)
 800ce8e:	230a      	movs	r3, #10
 800ce90:	e011      	b.n	800ceb6 <_printf_i+0xfa>
 800ce92:	6821      	ldr	r1, [r4, #0]
 800ce94:	6833      	ldr	r3, [r6, #0]
 800ce96:	0608      	lsls	r0, r1, #24
 800ce98:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce9c:	d402      	bmi.n	800cea4 <_printf_i+0xe8>
 800ce9e:	0649      	lsls	r1, r1, #25
 800cea0:	bf48      	it	mi
 800cea2:	b2ad      	uxthmi	r5, r5
 800cea4:	2f6f      	cmp	r7, #111	@ 0x6f
 800cea6:	4853      	ldr	r0, [pc, #332]	@ (800cff4 <_printf_i+0x238>)
 800cea8:	6033      	str	r3, [r6, #0]
 800ceaa:	bf14      	ite	ne
 800ceac:	230a      	movne	r3, #10
 800ceae:	2308      	moveq	r3, #8
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ceb6:	6866      	ldr	r6, [r4, #4]
 800ceb8:	60a6      	str	r6, [r4, #8]
 800ceba:	2e00      	cmp	r6, #0
 800cebc:	bfa2      	ittt	ge
 800cebe:	6821      	ldrge	r1, [r4, #0]
 800cec0:	f021 0104 	bicge.w	r1, r1, #4
 800cec4:	6021      	strge	r1, [r4, #0]
 800cec6:	b90d      	cbnz	r5, 800cecc <_printf_i+0x110>
 800cec8:	2e00      	cmp	r6, #0
 800ceca:	d04b      	beq.n	800cf64 <_printf_i+0x1a8>
 800cecc:	4616      	mov	r6, r2
 800cece:	fbb5 f1f3 	udiv	r1, r5, r3
 800ced2:	fb03 5711 	mls	r7, r3, r1, r5
 800ced6:	5dc7      	ldrb	r7, [r0, r7]
 800ced8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cedc:	462f      	mov	r7, r5
 800cede:	42bb      	cmp	r3, r7
 800cee0:	460d      	mov	r5, r1
 800cee2:	d9f4      	bls.n	800cece <_printf_i+0x112>
 800cee4:	2b08      	cmp	r3, #8
 800cee6:	d10b      	bne.n	800cf00 <_printf_i+0x144>
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	07df      	lsls	r7, r3, #31
 800ceec:	d508      	bpl.n	800cf00 <_printf_i+0x144>
 800ceee:	6923      	ldr	r3, [r4, #16]
 800cef0:	6861      	ldr	r1, [r4, #4]
 800cef2:	4299      	cmp	r1, r3
 800cef4:	bfde      	ittt	le
 800cef6:	2330      	movle	r3, #48	@ 0x30
 800cef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cefc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf00:	1b92      	subs	r2, r2, r6
 800cf02:	6122      	str	r2, [r4, #16]
 800cf04:	f8cd a000 	str.w	sl, [sp]
 800cf08:	464b      	mov	r3, r9
 800cf0a:	aa03      	add	r2, sp, #12
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	4640      	mov	r0, r8
 800cf10:	f7ff fee6 	bl	800cce0 <_printf_common>
 800cf14:	3001      	adds	r0, #1
 800cf16:	d14a      	bne.n	800cfae <_printf_i+0x1f2>
 800cf18:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1c:	b004      	add	sp, #16
 800cf1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	f043 0320 	orr.w	r3, r3, #32
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	4833      	ldr	r0, [pc, #204]	@ (800cff8 <_printf_i+0x23c>)
 800cf2c:	2778      	movs	r7, #120	@ 0x78
 800cf2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	6831      	ldr	r1, [r6, #0]
 800cf36:	061f      	lsls	r7, r3, #24
 800cf38:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf3c:	d402      	bmi.n	800cf44 <_printf_i+0x188>
 800cf3e:	065f      	lsls	r7, r3, #25
 800cf40:	bf48      	it	mi
 800cf42:	b2ad      	uxthmi	r5, r5
 800cf44:	6031      	str	r1, [r6, #0]
 800cf46:	07d9      	lsls	r1, r3, #31
 800cf48:	bf44      	itt	mi
 800cf4a:	f043 0320 	orrmi.w	r3, r3, #32
 800cf4e:	6023      	strmi	r3, [r4, #0]
 800cf50:	b11d      	cbz	r5, 800cf5a <_printf_i+0x19e>
 800cf52:	2310      	movs	r3, #16
 800cf54:	e7ac      	b.n	800ceb0 <_printf_i+0xf4>
 800cf56:	4827      	ldr	r0, [pc, #156]	@ (800cff4 <_printf_i+0x238>)
 800cf58:	e7e9      	b.n	800cf2e <_printf_i+0x172>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	f023 0320 	bic.w	r3, r3, #32
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	e7f6      	b.n	800cf52 <_printf_i+0x196>
 800cf64:	4616      	mov	r6, r2
 800cf66:	e7bd      	b.n	800cee4 <_printf_i+0x128>
 800cf68:	6833      	ldr	r3, [r6, #0]
 800cf6a:	6825      	ldr	r5, [r4, #0]
 800cf6c:	6961      	ldr	r1, [r4, #20]
 800cf6e:	1d18      	adds	r0, r3, #4
 800cf70:	6030      	str	r0, [r6, #0]
 800cf72:	062e      	lsls	r6, r5, #24
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	d501      	bpl.n	800cf7c <_printf_i+0x1c0>
 800cf78:	6019      	str	r1, [r3, #0]
 800cf7a:	e002      	b.n	800cf82 <_printf_i+0x1c6>
 800cf7c:	0668      	lsls	r0, r5, #25
 800cf7e:	d5fb      	bpl.n	800cf78 <_printf_i+0x1bc>
 800cf80:	8019      	strh	r1, [r3, #0]
 800cf82:	2300      	movs	r3, #0
 800cf84:	6123      	str	r3, [r4, #16]
 800cf86:	4616      	mov	r6, r2
 800cf88:	e7bc      	b.n	800cf04 <_printf_i+0x148>
 800cf8a:	6833      	ldr	r3, [r6, #0]
 800cf8c:	1d1a      	adds	r2, r3, #4
 800cf8e:	6032      	str	r2, [r6, #0]
 800cf90:	681e      	ldr	r6, [r3, #0]
 800cf92:	6862      	ldr	r2, [r4, #4]
 800cf94:	2100      	movs	r1, #0
 800cf96:	4630      	mov	r0, r6
 800cf98:	f7f3 f92a 	bl	80001f0 <memchr>
 800cf9c:	b108      	cbz	r0, 800cfa2 <_printf_i+0x1e6>
 800cf9e:	1b80      	subs	r0, r0, r6
 800cfa0:	6060      	str	r0, [r4, #4]
 800cfa2:	6863      	ldr	r3, [r4, #4]
 800cfa4:	6123      	str	r3, [r4, #16]
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfac:	e7aa      	b.n	800cf04 <_printf_i+0x148>
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	4632      	mov	r2, r6
 800cfb2:	4649      	mov	r1, r9
 800cfb4:	4640      	mov	r0, r8
 800cfb6:	47d0      	blx	sl
 800cfb8:	3001      	adds	r0, #1
 800cfba:	d0ad      	beq.n	800cf18 <_printf_i+0x15c>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	079b      	lsls	r3, r3, #30
 800cfc0:	d413      	bmi.n	800cfea <_printf_i+0x22e>
 800cfc2:	68e0      	ldr	r0, [r4, #12]
 800cfc4:	9b03      	ldr	r3, [sp, #12]
 800cfc6:	4298      	cmp	r0, r3
 800cfc8:	bfb8      	it	lt
 800cfca:	4618      	movlt	r0, r3
 800cfcc:	e7a6      	b.n	800cf1c <_printf_i+0x160>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	4632      	mov	r2, r6
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	47d0      	blx	sl
 800cfd8:	3001      	adds	r0, #1
 800cfda:	d09d      	beq.n	800cf18 <_printf_i+0x15c>
 800cfdc:	3501      	adds	r5, #1
 800cfde:	68e3      	ldr	r3, [r4, #12]
 800cfe0:	9903      	ldr	r1, [sp, #12]
 800cfe2:	1a5b      	subs	r3, r3, r1
 800cfe4:	42ab      	cmp	r3, r5
 800cfe6:	dcf2      	bgt.n	800cfce <_printf_i+0x212>
 800cfe8:	e7eb      	b.n	800cfc2 <_printf_i+0x206>
 800cfea:	2500      	movs	r5, #0
 800cfec:	f104 0619 	add.w	r6, r4, #25
 800cff0:	e7f5      	b.n	800cfde <_printf_i+0x222>
 800cff2:	bf00      	nop
 800cff4:	0801398f 	.word	0x0801398f
 800cff8:	080139a0 	.word	0x080139a0

0800cffc <_scanf_float>:
 800cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d000:	b087      	sub	sp, #28
 800d002:	4617      	mov	r7, r2
 800d004:	9303      	str	r3, [sp, #12]
 800d006:	688b      	ldr	r3, [r1, #8]
 800d008:	1e5a      	subs	r2, r3, #1
 800d00a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d00e:	bf81      	itttt	hi
 800d010:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d014:	eb03 0b05 	addhi.w	fp, r3, r5
 800d018:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d01c:	608b      	strhi	r3, [r1, #8]
 800d01e:	680b      	ldr	r3, [r1, #0]
 800d020:	460a      	mov	r2, r1
 800d022:	f04f 0500 	mov.w	r5, #0
 800d026:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d02a:	f842 3b1c 	str.w	r3, [r2], #28
 800d02e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d032:	4680      	mov	r8, r0
 800d034:	460c      	mov	r4, r1
 800d036:	bf98      	it	ls
 800d038:	f04f 0b00 	movls.w	fp, #0
 800d03c:	9201      	str	r2, [sp, #4]
 800d03e:	4616      	mov	r6, r2
 800d040:	46aa      	mov	sl, r5
 800d042:	46a9      	mov	r9, r5
 800d044:	9502      	str	r5, [sp, #8]
 800d046:	68a2      	ldr	r2, [r4, #8]
 800d048:	b152      	cbz	r2, 800d060 <_scanf_float+0x64>
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b4e      	cmp	r3, #78	@ 0x4e
 800d050:	d864      	bhi.n	800d11c <_scanf_float+0x120>
 800d052:	2b40      	cmp	r3, #64	@ 0x40
 800d054:	d83c      	bhi.n	800d0d0 <_scanf_float+0xd4>
 800d056:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d05a:	b2c8      	uxtb	r0, r1
 800d05c:	280e      	cmp	r0, #14
 800d05e:	d93a      	bls.n	800d0d6 <_scanf_float+0xda>
 800d060:	f1b9 0f00 	cmp.w	r9, #0
 800d064:	d003      	beq.n	800d06e <_scanf_float+0x72>
 800d066:	6823      	ldr	r3, [r4, #0]
 800d068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d06c:	6023      	str	r3, [r4, #0]
 800d06e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d072:	f1ba 0f01 	cmp.w	sl, #1
 800d076:	f200 8117 	bhi.w	800d2a8 <_scanf_float+0x2ac>
 800d07a:	9b01      	ldr	r3, [sp, #4]
 800d07c:	429e      	cmp	r6, r3
 800d07e:	f200 8108 	bhi.w	800d292 <_scanf_float+0x296>
 800d082:	2001      	movs	r0, #1
 800d084:	b007      	add	sp, #28
 800d086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d08e:	2a0d      	cmp	r2, #13
 800d090:	d8e6      	bhi.n	800d060 <_scanf_float+0x64>
 800d092:	a101      	add	r1, pc, #4	@ (adr r1, 800d098 <_scanf_float+0x9c>)
 800d094:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d098:	0800d1df 	.word	0x0800d1df
 800d09c:	0800d061 	.word	0x0800d061
 800d0a0:	0800d061 	.word	0x0800d061
 800d0a4:	0800d061 	.word	0x0800d061
 800d0a8:	0800d23f 	.word	0x0800d23f
 800d0ac:	0800d217 	.word	0x0800d217
 800d0b0:	0800d061 	.word	0x0800d061
 800d0b4:	0800d061 	.word	0x0800d061
 800d0b8:	0800d1ed 	.word	0x0800d1ed
 800d0bc:	0800d061 	.word	0x0800d061
 800d0c0:	0800d061 	.word	0x0800d061
 800d0c4:	0800d061 	.word	0x0800d061
 800d0c8:	0800d061 	.word	0x0800d061
 800d0cc:	0800d1a5 	.word	0x0800d1a5
 800d0d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d0d4:	e7db      	b.n	800d08e <_scanf_float+0x92>
 800d0d6:	290e      	cmp	r1, #14
 800d0d8:	d8c2      	bhi.n	800d060 <_scanf_float+0x64>
 800d0da:	a001      	add	r0, pc, #4	@ (adr r0, 800d0e0 <_scanf_float+0xe4>)
 800d0dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d0e0:	0800d195 	.word	0x0800d195
 800d0e4:	0800d061 	.word	0x0800d061
 800d0e8:	0800d195 	.word	0x0800d195
 800d0ec:	0800d22b 	.word	0x0800d22b
 800d0f0:	0800d061 	.word	0x0800d061
 800d0f4:	0800d13d 	.word	0x0800d13d
 800d0f8:	0800d17b 	.word	0x0800d17b
 800d0fc:	0800d17b 	.word	0x0800d17b
 800d100:	0800d17b 	.word	0x0800d17b
 800d104:	0800d17b 	.word	0x0800d17b
 800d108:	0800d17b 	.word	0x0800d17b
 800d10c:	0800d17b 	.word	0x0800d17b
 800d110:	0800d17b 	.word	0x0800d17b
 800d114:	0800d17b 	.word	0x0800d17b
 800d118:	0800d17b 	.word	0x0800d17b
 800d11c:	2b6e      	cmp	r3, #110	@ 0x6e
 800d11e:	d809      	bhi.n	800d134 <_scanf_float+0x138>
 800d120:	2b60      	cmp	r3, #96	@ 0x60
 800d122:	d8b2      	bhi.n	800d08a <_scanf_float+0x8e>
 800d124:	2b54      	cmp	r3, #84	@ 0x54
 800d126:	d07b      	beq.n	800d220 <_scanf_float+0x224>
 800d128:	2b59      	cmp	r3, #89	@ 0x59
 800d12a:	d199      	bne.n	800d060 <_scanf_float+0x64>
 800d12c:	2d07      	cmp	r5, #7
 800d12e:	d197      	bne.n	800d060 <_scanf_float+0x64>
 800d130:	2508      	movs	r5, #8
 800d132:	e02c      	b.n	800d18e <_scanf_float+0x192>
 800d134:	2b74      	cmp	r3, #116	@ 0x74
 800d136:	d073      	beq.n	800d220 <_scanf_float+0x224>
 800d138:	2b79      	cmp	r3, #121	@ 0x79
 800d13a:	e7f6      	b.n	800d12a <_scanf_float+0x12e>
 800d13c:	6821      	ldr	r1, [r4, #0]
 800d13e:	05c8      	lsls	r0, r1, #23
 800d140:	d51b      	bpl.n	800d17a <_scanf_float+0x17e>
 800d142:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d146:	6021      	str	r1, [r4, #0]
 800d148:	f109 0901 	add.w	r9, r9, #1
 800d14c:	f1bb 0f00 	cmp.w	fp, #0
 800d150:	d003      	beq.n	800d15a <_scanf_float+0x15e>
 800d152:	3201      	adds	r2, #1
 800d154:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d158:	60a2      	str	r2, [r4, #8]
 800d15a:	68a3      	ldr	r3, [r4, #8]
 800d15c:	3b01      	subs	r3, #1
 800d15e:	60a3      	str	r3, [r4, #8]
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	3301      	adds	r3, #1
 800d164:	6123      	str	r3, [r4, #16]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	3b01      	subs	r3, #1
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	607b      	str	r3, [r7, #4]
 800d16e:	f340 8087 	ble.w	800d280 <_scanf_float+0x284>
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	3301      	adds	r3, #1
 800d176:	603b      	str	r3, [r7, #0]
 800d178:	e765      	b.n	800d046 <_scanf_float+0x4a>
 800d17a:	eb1a 0105 	adds.w	r1, sl, r5
 800d17e:	f47f af6f 	bne.w	800d060 <_scanf_float+0x64>
 800d182:	6822      	ldr	r2, [r4, #0]
 800d184:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d188:	6022      	str	r2, [r4, #0]
 800d18a:	460d      	mov	r5, r1
 800d18c:	468a      	mov	sl, r1
 800d18e:	f806 3b01 	strb.w	r3, [r6], #1
 800d192:	e7e2      	b.n	800d15a <_scanf_float+0x15e>
 800d194:	6822      	ldr	r2, [r4, #0]
 800d196:	0610      	lsls	r0, r2, #24
 800d198:	f57f af62 	bpl.w	800d060 <_scanf_float+0x64>
 800d19c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d1a0:	6022      	str	r2, [r4, #0]
 800d1a2:	e7f4      	b.n	800d18e <_scanf_float+0x192>
 800d1a4:	f1ba 0f00 	cmp.w	sl, #0
 800d1a8:	d10e      	bne.n	800d1c8 <_scanf_float+0x1cc>
 800d1aa:	f1b9 0f00 	cmp.w	r9, #0
 800d1ae:	d10e      	bne.n	800d1ce <_scanf_float+0x1d2>
 800d1b0:	6822      	ldr	r2, [r4, #0]
 800d1b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d1b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d1ba:	d108      	bne.n	800d1ce <_scanf_float+0x1d2>
 800d1bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d1c0:	6022      	str	r2, [r4, #0]
 800d1c2:	f04f 0a01 	mov.w	sl, #1
 800d1c6:	e7e2      	b.n	800d18e <_scanf_float+0x192>
 800d1c8:	f1ba 0f02 	cmp.w	sl, #2
 800d1cc:	d055      	beq.n	800d27a <_scanf_float+0x27e>
 800d1ce:	2d01      	cmp	r5, #1
 800d1d0:	d002      	beq.n	800d1d8 <_scanf_float+0x1dc>
 800d1d2:	2d04      	cmp	r5, #4
 800d1d4:	f47f af44 	bne.w	800d060 <_scanf_float+0x64>
 800d1d8:	3501      	adds	r5, #1
 800d1da:	b2ed      	uxtb	r5, r5
 800d1dc:	e7d7      	b.n	800d18e <_scanf_float+0x192>
 800d1de:	f1ba 0f01 	cmp.w	sl, #1
 800d1e2:	f47f af3d 	bne.w	800d060 <_scanf_float+0x64>
 800d1e6:	f04f 0a02 	mov.w	sl, #2
 800d1ea:	e7d0      	b.n	800d18e <_scanf_float+0x192>
 800d1ec:	b97d      	cbnz	r5, 800d20e <_scanf_float+0x212>
 800d1ee:	f1b9 0f00 	cmp.w	r9, #0
 800d1f2:	f47f af38 	bne.w	800d066 <_scanf_float+0x6a>
 800d1f6:	6822      	ldr	r2, [r4, #0]
 800d1f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d1fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d200:	f040 8108 	bne.w	800d414 <_scanf_float+0x418>
 800d204:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d208:	6022      	str	r2, [r4, #0]
 800d20a:	2501      	movs	r5, #1
 800d20c:	e7bf      	b.n	800d18e <_scanf_float+0x192>
 800d20e:	2d03      	cmp	r5, #3
 800d210:	d0e2      	beq.n	800d1d8 <_scanf_float+0x1dc>
 800d212:	2d05      	cmp	r5, #5
 800d214:	e7de      	b.n	800d1d4 <_scanf_float+0x1d8>
 800d216:	2d02      	cmp	r5, #2
 800d218:	f47f af22 	bne.w	800d060 <_scanf_float+0x64>
 800d21c:	2503      	movs	r5, #3
 800d21e:	e7b6      	b.n	800d18e <_scanf_float+0x192>
 800d220:	2d06      	cmp	r5, #6
 800d222:	f47f af1d 	bne.w	800d060 <_scanf_float+0x64>
 800d226:	2507      	movs	r5, #7
 800d228:	e7b1      	b.n	800d18e <_scanf_float+0x192>
 800d22a:	6822      	ldr	r2, [r4, #0]
 800d22c:	0591      	lsls	r1, r2, #22
 800d22e:	f57f af17 	bpl.w	800d060 <_scanf_float+0x64>
 800d232:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d236:	6022      	str	r2, [r4, #0]
 800d238:	f8cd 9008 	str.w	r9, [sp, #8]
 800d23c:	e7a7      	b.n	800d18e <_scanf_float+0x192>
 800d23e:	6822      	ldr	r2, [r4, #0]
 800d240:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d244:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d248:	d006      	beq.n	800d258 <_scanf_float+0x25c>
 800d24a:	0550      	lsls	r0, r2, #21
 800d24c:	f57f af08 	bpl.w	800d060 <_scanf_float+0x64>
 800d250:	f1b9 0f00 	cmp.w	r9, #0
 800d254:	f000 80de 	beq.w	800d414 <_scanf_float+0x418>
 800d258:	0591      	lsls	r1, r2, #22
 800d25a:	bf58      	it	pl
 800d25c:	9902      	ldrpl	r1, [sp, #8]
 800d25e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d262:	bf58      	it	pl
 800d264:	eba9 0101 	subpl.w	r1, r9, r1
 800d268:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d26c:	bf58      	it	pl
 800d26e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d272:	6022      	str	r2, [r4, #0]
 800d274:	f04f 0900 	mov.w	r9, #0
 800d278:	e789      	b.n	800d18e <_scanf_float+0x192>
 800d27a:	f04f 0a03 	mov.w	sl, #3
 800d27e:	e786      	b.n	800d18e <_scanf_float+0x192>
 800d280:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d284:	4639      	mov	r1, r7
 800d286:	4640      	mov	r0, r8
 800d288:	4798      	blx	r3
 800d28a:	2800      	cmp	r0, #0
 800d28c:	f43f aedb 	beq.w	800d046 <_scanf_float+0x4a>
 800d290:	e6e6      	b.n	800d060 <_scanf_float+0x64>
 800d292:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d29a:	463a      	mov	r2, r7
 800d29c:	4640      	mov	r0, r8
 800d29e:	4798      	blx	r3
 800d2a0:	6923      	ldr	r3, [r4, #16]
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	6123      	str	r3, [r4, #16]
 800d2a6:	e6e8      	b.n	800d07a <_scanf_float+0x7e>
 800d2a8:	1e6b      	subs	r3, r5, #1
 800d2aa:	2b06      	cmp	r3, #6
 800d2ac:	d824      	bhi.n	800d2f8 <_scanf_float+0x2fc>
 800d2ae:	2d02      	cmp	r5, #2
 800d2b0:	d836      	bhi.n	800d320 <_scanf_float+0x324>
 800d2b2:	9b01      	ldr	r3, [sp, #4]
 800d2b4:	429e      	cmp	r6, r3
 800d2b6:	f67f aee4 	bls.w	800d082 <_scanf_float+0x86>
 800d2ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d2be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d2c2:	463a      	mov	r2, r7
 800d2c4:	4640      	mov	r0, r8
 800d2c6:	4798      	blx	r3
 800d2c8:	6923      	ldr	r3, [r4, #16]
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	6123      	str	r3, [r4, #16]
 800d2ce:	e7f0      	b.n	800d2b2 <_scanf_float+0x2b6>
 800d2d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d2d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d2d8:	463a      	mov	r2, r7
 800d2da:	4640      	mov	r0, r8
 800d2dc:	4798      	blx	r3
 800d2de:	6923      	ldr	r3, [r4, #16]
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	6123      	str	r3, [r4, #16]
 800d2e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2e8:	fa5f fa8a 	uxtb.w	sl, sl
 800d2ec:	f1ba 0f02 	cmp.w	sl, #2
 800d2f0:	d1ee      	bne.n	800d2d0 <_scanf_float+0x2d4>
 800d2f2:	3d03      	subs	r5, #3
 800d2f4:	b2ed      	uxtb	r5, r5
 800d2f6:	1b76      	subs	r6, r6, r5
 800d2f8:	6823      	ldr	r3, [r4, #0]
 800d2fa:	05da      	lsls	r2, r3, #23
 800d2fc:	d530      	bpl.n	800d360 <_scanf_float+0x364>
 800d2fe:	055b      	lsls	r3, r3, #21
 800d300:	d511      	bpl.n	800d326 <_scanf_float+0x32a>
 800d302:	9b01      	ldr	r3, [sp, #4]
 800d304:	429e      	cmp	r6, r3
 800d306:	f67f aebc 	bls.w	800d082 <_scanf_float+0x86>
 800d30a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d30e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d312:	463a      	mov	r2, r7
 800d314:	4640      	mov	r0, r8
 800d316:	4798      	blx	r3
 800d318:	6923      	ldr	r3, [r4, #16]
 800d31a:	3b01      	subs	r3, #1
 800d31c:	6123      	str	r3, [r4, #16]
 800d31e:	e7f0      	b.n	800d302 <_scanf_float+0x306>
 800d320:	46aa      	mov	sl, r5
 800d322:	46b3      	mov	fp, r6
 800d324:	e7de      	b.n	800d2e4 <_scanf_float+0x2e8>
 800d326:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d32a:	6923      	ldr	r3, [r4, #16]
 800d32c:	2965      	cmp	r1, #101	@ 0x65
 800d32e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d332:	f106 35ff 	add.w	r5, r6, #4294967295
 800d336:	6123      	str	r3, [r4, #16]
 800d338:	d00c      	beq.n	800d354 <_scanf_float+0x358>
 800d33a:	2945      	cmp	r1, #69	@ 0x45
 800d33c:	d00a      	beq.n	800d354 <_scanf_float+0x358>
 800d33e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d342:	463a      	mov	r2, r7
 800d344:	4640      	mov	r0, r8
 800d346:	4798      	blx	r3
 800d348:	6923      	ldr	r3, [r4, #16]
 800d34a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d34e:	3b01      	subs	r3, #1
 800d350:	1eb5      	subs	r5, r6, #2
 800d352:	6123      	str	r3, [r4, #16]
 800d354:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d358:	463a      	mov	r2, r7
 800d35a:	4640      	mov	r0, r8
 800d35c:	4798      	blx	r3
 800d35e:	462e      	mov	r6, r5
 800d360:	6822      	ldr	r2, [r4, #0]
 800d362:	f012 0210 	ands.w	r2, r2, #16
 800d366:	d001      	beq.n	800d36c <_scanf_float+0x370>
 800d368:	2000      	movs	r0, #0
 800d36a:	e68b      	b.n	800d084 <_scanf_float+0x88>
 800d36c:	7032      	strb	r2, [r6, #0]
 800d36e:	6823      	ldr	r3, [r4, #0]
 800d370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d378:	d11c      	bne.n	800d3b4 <_scanf_float+0x3b8>
 800d37a:	9b02      	ldr	r3, [sp, #8]
 800d37c:	454b      	cmp	r3, r9
 800d37e:	eba3 0209 	sub.w	r2, r3, r9
 800d382:	d123      	bne.n	800d3cc <_scanf_float+0x3d0>
 800d384:	9901      	ldr	r1, [sp, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	4640      	mov	r0, r8
 800d38a:	f002 fcf9 	bl	800fd80 <_strtod_r>
 800d38e:	9b03      	ldr	r3, [sp, #12]
 800d390:	6821      	ldr	r1, [r4, #0]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f011 0f02 	tst.w	r1, #2
 800d398:	ec57 6b10 	vmov	r6, r7, d0
 800d39c:	f103 0204 	add.w	r2, r3, #4
 800d3a0:	d01f      	beq.n	800d3e2 <_scanf_float+0x3e6>
 800d3a2:	9903      	ldr	r1, [sp, #12]
 800d3a4:	600a      	str	r2, [r1, #0]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	e9c3 6700 	strd	r6, r7, [r3]
 800d3ac:	68e3      	ldr	r3, [r4, #12]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	60e3      	str	r3, [r4, #12]
 800d3b2:	e7d9      	b.n	800d368 <_scanf_float+0x36c>
 800d3b4:	9b04      	ldr	r3, [sp, #16]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d0e4      	beq.n	800d384 <_scanf_float+0x388>
 800d3ba:	9905      	ldr	r1, [sp, #20]
 800d3bc:	230a      	movs	r3, #10
 800d3be:	3101      	adds	r1, #1
 800d3c0:	4640      	mov	r0, r8
 800d3c2:	f7ff f9b7 	bl	800c734 <_strtol_r>
 800d3c6:	9b04      	ldr	r3, [sp, #16]
 800d3c8:	9e05      	ldr	r6, [sp, #20]
 800d3ca:	1ac2      	subs	r2, r0, r3
 800d3cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d3d0:	429e      	cmp	r6, r3
 800d3d2:	bf28      	it	cs
 800d3d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d3d8:	4910      	ldr	r1, [pc, #64]	@ (800d41c <_scanf_float+0x420>)
 800d3da:	4630      	mov	r0, r6
 800d3dc:	f000 f942 	bl	800d664 <siprintf>
 800d3e0:	e7d0      	b.n	800d384 <_scanf_float+0x388>
 800d3e2:	f011 0f04 	tst.w	r1, #4
 800d3e6:	9903      	ldr	r1, [sp, #12]
 800d3e8:	600a      	str	r2, [r1, #0]
 800d3ea:	d1dc      	bne.n	800d3a6 <_scanf_float+0x3aa>
 800d3ec:	681d      	ldr	r5, [r3, #0]
 800d3ee:	4632      	mov	r2, r6
 800d3f0:	463b      	mov	r3, r7
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	4639      	mov	r1, r7
 800d3f6:	f7f3 fba9 	bl	8000b4c <__aeabi_dcmpun>
 800d3fa:	b128      	cbz	r0, 800d408 <_scanf_float+0x40c>
 800d3fc:	4808      	ldr	r0, [pc, #32]	@ (800d420 <_scanf_float+0x424>)
 800d3fe:	f000 fab7 	bl	800d970 <nanf>
 800d402:	ed85 0a00 	vstr	s0, [r5]
 800d406:	e7d1      	b.n	800d3ac <_scanf_float+0x3b0>
 800d408:	4630      	mov	r0, r6
 800d40a:	4639      	mov	r1, r7
 800d40c:	f7f3 fbfc 	bl	8000c08 <__aeabi_d2f>
 800d410:	6028      	str	r0, [r5, #0]
 800d412:	e7cb      	b.n	800d3ac <_scanf_float+0x3b0>
 800d414:	f04f 0900 	mov.w	r9, #0
 800d418:	e629      	b.n	800d06e <_scanf_float+0x72>
 800d41a:	bf00      	nop
 800d41c:	080139b1 	.word	0x080139b1
 800d420:	08013c44 	.word	0x08013c44

0800d424 <std>:
 800d424:	2300      	movs	r3, #0
 800d426:	b510      	push	{r4, lr}
 800d428:	4604      	mov	r4, r0
 800d42a:	e9c0 3300 	strd	r3, r3, [r0]
 800d42e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d432:	6083      	str	r3, [r0, #8]
 800d434:	8181      	strh	r1, [r0, #12]
 800d436:	6643      	str	r3, [r0, #100]	@ 0x64
 800d438:	81c2      	strh	r2, [r0, #14]
 800d43a:	6183      	str	r3, [r0, #24]
 800d43c:	4619      	mov	r1, r3
 800d43e:	2208      	movs	r2, #8
 800d440:	305c      	adds	r0, #92	@ 0x5c
 800d442:	f000 fa07 	bl	800d854 <memset>
 800d446:	4b0d      	ldr	r3, [pc, #52]	@ (800d47c <std+0x58>)
 800d448:	6263      	str	r3, [r4, #36]	@ 0x24
 800d44a:	4b0d      	ldr	r3, [pc, #52]	@ (800d480 <std+0x5c>)
 800d44c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d44e:	4b0d      	ldr	r3, [pc, #52]	@ (800d484 <std+0x60>)
 800d450:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d452:	4b0d      	ldr	r3, [pc, #52]	@ (800d488 <std+0x64>)
 800d454:	6323      	str	r3, [r4, #48]	@ 0x30
 800d456:	4b0d      	ldr	r3, [pc, #52]	@ (800d48c <std+0x68>)
 800d458:	6224      	str	r4, [r4, #32]
 800d45a:	429c      	cmp	r4, r3
 800d45c:	d006      	beq.n	800d46c <std+0x48>
 800d45e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d462:	4294      	cmp	r4, r2
 800d464:	d002      	beq.n	800d46c <std+0x48>
 800d466:	33d0      	adds	r3, #208	@ 0xd0
 800d468:	429c      	cmp	r4, r3
 800d46a:	d105      	bne.n	800d478 <std+0x54>
 800d46c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d474:	f000 ba6a 	b.w	800d94c <__retarget_lock_init_recursive>
 800d478:	bd10      	pop	{r4, pc}
 800d47a:	bf00      	nop
 800d47c:	0800d6a5 	.word	0x0800d6a5
 800d480:	0800d6c7 	.word	0x0800d6c7
 800d484:	0800d6ff 	.word	0x0800d6ff
 800d488:	0800d723 	.word	0x0800d723
 800d48c:	20004c90 	.word	0x20004c90

0800d490 <stdio_exit_handler>:
 800d490:	4a02      	ldr	r2, [pc, #8]	@ (800d49c <stdio_exit_handler+0xc>)
 800d492:	4903      	ldr	r1, [pc, #12]	@ (800d4a0 <stdio_exit_handler+0x10>)
 800d494:	4803      	ldr	r0, [pc, #12]	@ (800d4a4 <stdio_exit_handler+0x14>)
 800d496:	f000 b869 	b.w	800d56c <_fwalk_sglue>
 800d49a:	bf00      	nop
 800d49c:	200003c4 	.word	0x200003c4
 800d4a0:	08010145 	.word	0x08010145
 800d4a4:	200003d4 	.word	0x200003d4

0800d4a8 <cleanup_stdio>:
 800d4a8:	6841      	ldr	r1, [r0, #4]
 800d4aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d4dc <cleanup_stdio+0x34>)
 800d4ac:	4299      	cmp	r1, r3
 800d4ae:	b510      	push	{r4, lr}
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	d001      	beq.n	800d4b8 <cleanup_stdio+0x10>
 800d4b4:	f002 fe46 	bl	8010144 <_fflush_r>
 800d4b8:	68a1      	ldr	r1, [r4, #8]
 800d4ba:	4b09      	ldr	r3, [pc, #36]	@ (800d4e0 <cleanup_stdio+0x38>)
 800d4bc:	4299      	cmp	r1, r3
 800d4be:	d002      	beq.n	800d4c6 <cleanup_stdio+0x1e>
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f002 fe3f 	bl	8010144 <_fflush_r>
 800d4c6:	68e1      	ldr	r1, [r4, #12]
 800d4c8:	4b06      	ldr	r3, [pc, #24]	@ (800d4e4 <cleanup_stdio+0x3c>)
 800d4ca:	4299      	cmp	r1, r3
 800d4cc:	d004      	beq.n	800d4d8 <cleanup_stdio+0x30>
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4d4:	f002 be36 	b.w	8010144 <_fflush_r>
 800d4d8:	bd10      	pop	{r4, pc}
 800d4da:	bf00      	nop
 800d4dc:	20004c90 	.word	0x20004c90
 800d4e0:	20004cf8 	.word	0x20004cf8
 800d4e4:	20004d60 	.word	0x20004d60

0800d4e8 <global_stdio_init.part.0>:
 800d4e8:	b510      	push	{r4, lr}
 800d4ea:	4b0b      	ldr	r3, [pc, #44]	@ (800d518 <global_stdio_init.part.0+0x30>)
 800d4ec:	4c0b      	ldr	r4, [pc, #44]	@ (800d51c <global_stdio_init.part.0+0x34>)
 800d4ee:	4a0c      	ldr	r2, [pc, #48]	@ (800d520 <global_stdio_init.part.0+0x38>)
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2104      	movs	r1, #4
 800d4f8:	f7ff ff94 	bl	800d424 <std>
 800d4fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d500:	2201      	movs	r2, #1
 800d502:	2109      	movs	r1, #9
 800d504:	f7ff ff8e 	bl	800d424 <std>
 800d508:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d50c:	2202      	movs	r2, #2
 800d50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d512:	2112      	movs	r1, #18
 800d514:	f7ff bf86 	b.w	800d424 <std>
 800d518:	20004dc8 	.word	0x20004dc8
 800d51c:	20004c90 	.word	0x20004c90
 800d520:	0800d491 	.word	0x0800d491

0800d524 <__sfp_lock_acquire>:
 800d524:	4801      	ldr	r0, [pc, #4]	@ (800d52c <__sfp_lock_acquire+0x8>)
 800d526:	f000 ba12 	b.w	800d94e <__retarget_lock_acquire_recursive>
 800d52a:	bf00      	nop
 800d52c:	20004dd1 	.word	0x20004dd1

0800d530 <__sfp_lock_release>:
 800d530:	4801      	ldr	r0, [pc, #4]	@ (800d538 <__sfp_lock_release+0x8>)
 800d532:	f000 ba0d 	b.w	800d950 <__retarget_lock_release_recursive>
 800d536:	bf00      	nop
 800d538:	20004dd1 	.word	0x20004dd1

0800d53c <__sinit>:
 800d53c:	b510      	push	{r4, lr}
 800d53e:	4604      	mov	r4, r0
 800d540:	f7ff fff0 	bl	800d524 <__sfp_lock_acquire>
 800d544:	6a23      	ldr	r3, [r4, #32]
 800d546:	b11b      	cbz	r3, 800d550 <__sinit+0x14>
 800d548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d54c:	f7ff bff0 	b.w	800d530 <__sfp_lock_release>
 800d550:	4b04      	ldr	r3, [pc, #16]	@ (800d564 <__sinit+0x28>)
 800d552:	6223      	str	r3, [r4, #32]
 800d554:	4b04      	ldr	r3, [pc, #16]	@ (800d568 <__sinit+0x2c>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1f5      	bne.n	800d548 <__sinit+0xc>
 800d55c:	f7ff ffc4 	bl	800d4e8 <global_stdio_init.part.0>
 800d560:	e7f2      	b.n	800d548 <__sinit+0xc>
 800d562:	bf00      	nop
 800d564:	0800d4a9 	.word	0x0800d4a9
 800d568:	20004dc8 	.word	0x20004dc8

0800d56c <_fwalk_sglue>:
 800d56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d570:	4607      	mov	r7, r0
 800d572:	4688      	mov	r8, r1
 800d574:	4614      	mov	r4, r2
 800d576:	2600      	movs	r6, #0
 800d578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d57c:	f1b9 0901 	subs.w	r9, r9, #1
 800d580:	d505      	bpl.n	800d58e <_fwalk_sglue+0x22>
 800d582:	6824      	ldr	r4, [r4, #0]
 800d584:	2c00      	cmp	r4, #0
 800d586:	d1f7      	bne.n	800d578 <_fwalk_sglue+0xc>
 800d588:	4630      	mov	r0, r6
 800d58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d58e:	89ab      	ldrh	r3, [r5, #12]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d907      	bls.n	800d5a4 <_fwalk_sglue+0x38>
 800d594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d598:	3301      	adds	r3, #1
 800d59a:	d003      	beq.n	800d5a4 <_fwalk_sglue+0x38>
 800d59c:	4629      	mov	r1, r5
 800d59e:	4638      	mov	r0, r7
 800d5a0:	47c0      	blx	r8
 800d5a2:	4306      	orrs	r6, r0
 800d5a4:	3568      	adds	r5, #104	@ 0x68
 800d5a6:	e7e9      	b.n	800d57c <_fwalk_sglue+0x10>

0800d5a8 <_puts_r>:
 800d5a8:	6a03      	ldr	r3, [r0, #32]
 800d5aa:	b570      	push	{r4, r5, r6, lr}
 800d5ac:	6884      	ldr	r4, [r0, #8]
 800d5ae:	4605      	mov	r5, r0
 800d5b0:	460e      	mov	r6, r1
 800d5b2:	b90b      	cbnz	r3, 800d5b8 <_puts_r+0x10>
 800d5b4:	f7ff ffc2 	bl	800d53c <__sinit>
 800d5b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5ba:	07db      	lsls	r3, r3, #31
 800d5bc:	d405      	bmi.n	800d5ca <_puts_r+0x22>
 800d5be:	89a3      	ldrh	r3, [r4, #12]
 800d5c0:	0598      	lsls	r0, r3, #22
 800d5c2:	d402      	bmi.n	800d5ca <_puts_r+0x22>
 800d5c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5c6:	f000 f9c2 	bl	800d94e <__retarget_lock_acquire_recursive>
 800d5ca:	89a3      	ldrh	r3, [r4, #12]
 800d5cc:	0719      	lsls	r1, r3, #28
 800d5ce:	d502      	bpl.n	800d5d6 <_puts_r+0x2e>
 800d5d0:	6923      	ldr	r3, [r4, #16]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d135      	bne.n	800d642 <_puts_r+0x9a>
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4628      	mov	r0, r5
 800d5da:	f000 f8e5 	bl	800d7a8 <__swsetup_r>
 800d5de:	b380      	cbz	r0, 800d642 <_puts_r+0x9a>
 800d5e0:	f04f 35ff 	mov.w	r5, #4294967295
 800d5e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5e6:	07da      	lsls	r2, r3, #31
 800d5e8:	d405      	bmi.n	800d5f6 <_puts_r+0x4e>
 800d5ea:	89a3      	ldrh	r3, [r4, #12]
 800d5ec:	059b      	lsls	r3, r3, #22
 800d5ee:	d402      	bmi.n	800d5f6 <_puts_r+0x4e>
 800d5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5f2:	f000 f9ad 	bl	800d950 <__retarget_lock_release_recursive>
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	bd70      	pop	{r4, r5, r6, pc}
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	da04      	bge.n	800d608 <_puts_r+0x60>
 800d5fe:	69a2      	ldr	r2, [r4, #24]
 800d600:	429a      	cmp	r2, r3
 800d602:	dc17      	bgt.n	800d634 <_puts_r+0x8c>
 800d604:	290a      	cmp	r1, #10
 800d606:	d015      	beq.n	800d634 <_puts_r+0x8c>
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	6022      	str	r2, [r4, #0]
 800d60e:	7019      	strb	r1, [r3, #0]
 800d610:	68a3      	ldr	r3, [r4, #8]
 800d612:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d616:	3b01      	subs	r3, #1
 800d618:	60a3      	str	r3, [r4, #8]
 800d61a:	2900      	cmp	r1, #0
 800d61c:	d1ed      	bne.n	800d5fa <_puts_r+0x52>
 800d61e:	2b00      	cmp	r3, #0
 800d620:	da11      	bge.n	800d646 <_puts_r+0x9e>
 800d622:	4622      	mov	r2, r4
 800d624:	210a      	movs	r1, #10
 800d626:	4628      	mov	r0, r5
 800d628:	f000 f87f 	bl	800d72a <__swbuf_r>
 800d62c:	3001      	adds	r0, #1
 800d62e:	d0d7      	beq.n	800d5e0 <_puts_r+0x38>
 800d630:	250a      	movs	r5, #10
 800d632:	e7d7      	b.n	800d5e4 <_puts_r+0x3c>
 800d634:	4622      	mov	r2, r4
 800d636:	4628      	mov	r0, r5
 800d638:	f000 f877 	bl	800d72a <__swbuf_r>
 800d63c:	3001      	adds	r0, #1
 800d63e:	d1e7      	bne.n	800d610 <_puts_r+0x68>
 800d640:	e7ce      	b.n	800d5e0 <_puts_r+0x38>
 800d642:	3e01      	subs	r6, #1
 800d644:	e7e4      	b.n	800d610 <_puts_r+0x68>
 800d646:	6823      	ldr	r3, [r4, #0]
 800d648:	1c5a      	adds	r2, r3, #1
 800d64a:	6022      	str	r2, [r4, #0]
 800d64c:	220a      	movs	r2, #10
 800d64e:	701a      	strb	r2, [r3, #0]
 800d650:	e7ee      	b.n	800d630 <_puts_r+0x88>
	...

0800d654 <puts>:
 800d654:	4b02      	ldr	r3, [pc, #8]	@ (800d660 <puts+0xc>)
 800d656:	4601      	mov	r1, r0
 800d658:	6818      	ldr	r0, [r3, #0]
 800d65a:	f7ff bfa5 	b.w	800d5a8 <_puts_r>
 800d65e:	bf00      	nop
 800d660:	200003d0 	.word	0x200003d0

0800d664 <siprintf>:
 800d664:	b40e      	push	{r1, r2, r3}
 800d666:	b500      	push	{lr}
 800d668:	b09c      	sub	sp, #112	@ 0x70
 800d66a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d66c:	9002      	str	r0, [sp, #8]
 800d66e:	9006      	str	r0, [sp, #24]
 800d670:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d674:	4809      	ldr	r0, [pc, #36]	@ (800d69c <siprintf+0x38>)
 800d676:	9107      	str	r1, [sp, #28]
 800d678:	9104      	str	r1, [sp, #16]
 800d67a:	4909      	ldr	r1, [pc, #36]	@ (800d6a0 <siprintf+0x3c>)
 800d67c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d680:	9105      	str	r1, [sp, #20]
 800d682:	6800      	ldr	r0, [r0, #0]
 800d684:	9301      	str	r3, [sp, #4]
 800d686:	a902      	add	r1, sp, #8
 800d688:	f002 fbdc 	bl	800fe44 <_svfiprintf_r>
 800d68c:	9b02      	ldr	r3, [sp, #8]
 800d68e:	2200      	movs	r2, #0
 800d690:	701a      	strb	r2, [r3, #0]
 800d692:	b01c      	add	sp, #112	@ 0x70
 800d694:	f85d eb04 	ldr.w	lr, [sp], #4
 800d698:	b003      	add	sp, #12
 800d69a:	4770      	bx	lr
 800d69c:	200003d0 	.word	0x200003d0
 800d6a0:	ffff0208 	.word	0xffff0208

0800d6a4 <__sread>:
 800d6a4:	b510      	push	{r4, lr}
 800d6a6:	460c      	mov	r4, r1
 800d6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ac:	f000 f900 	bl	800d8b0 <_read_r>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	bfab      	itete	ge
 800d6b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d6b6:	89a3      	ldrhlt	r3, [r4, #12]
 800d6b8:	181b      	addge	r3, r3, r0
 800d6ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d6be:	bfac      	ite	ge
 800d6c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d6c2:	81a3      	strhlt	r3, [r4, #12]
 800d6c4:	bd10      	pop	{r4, pc}

0800d6c6 <__swrite>:
 800d6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ca:	461f      	mov	r7, r3
 800d6cc:	898b      	ldrh	r3, [r1, #12]
 800d6ce:	05db      	lsls	r3, r3, #23
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	4616      	mov	r6, r2
 800d6d6:	d505      	bpl.n	800d6e4 <__swrite+0x1e>
 800d6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6dc:	2302      	movs	r3, #2
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f000 f8d4 	bl	800d88c <_lseek_r>
 800d6e4:	89a3      	ldrh	r3, [r4, #12]
 800d6e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6ee:	81a3      	strh	r3, [r4, #12]
 800d6f0:	4632      	mov	r2, r6
 800d6f2:	463b      	mov	r3, r7
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6fa:	f000 b8eb 	b.w	800d8d4 <_write_r>

0800d6fe <__sseek>:
 800d6fe:	b510      	push	{r4, lr}
 800d700:	460c      	mov	r4, r1
 800d702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d706:	f000 f8c1 	bl	800d88c <_lseek_r>
 800d70a:	1c43      	adds	r3, r0, #1
 800d70c:	89a3      	ldrh	r3, [r4, #12]
 800d70e:	bf15      	itete	ne
 800d710:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d71a:	81a3      	strheq	r3, [r4, #12]
 800d71c:	bf18      	it	ne
 800d71e:	81a3      	strhne	r3, [r4, #12]
 800d720:	bd10      	pop	{r4, pc}

0800d722 <__sclose>:
 800d722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d726:	f000 b8a1 	b.w	800d86c <_close_r>

0800d72a <__swbuf_r>:
 800d72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72c:	460e      	mov	r6, r1
 800d72e:	4614      	mov	r4, r2
 800d730:	4605      	mov	r5, r0
 800d732:	b118      	cbz	r0, 800d73c <__swbuf_r+0x12>
 800d734:	6a03      	ldr	r3, [r0, #32]
 800d736:	b90b      	cbnz	r3, 800d73c <__swbuf_r+0x12>
 800d738:	f7ff ff00 	bl	800d53c <__sinit>
 800d73c:	69a3      	ldr	r3, [r4, #24]
 800d73e:	60a3      	str	r3, [r4, #8]
 800d740:	89a3      	ldrh	r3, [r4, #12]
 800d742:	071a      	lsls	r2, r3, #28
 800d744:	d501      	bpl.n	800d74a <__swbuf_r+0x20>
 800d746:	6923      	ldr	r3, [r4, #16]
 800d748:	b943      	cbnz	r3, 800d75c <__swbuf_r+0x32>
 800d74a:	4621      	mov	r1, r4
 800d74c:	4628      	mov	r0, r5
 800d74e:	f000 f82b 	bl	800d7a8 <__swsetup_r>
 800d752:	b118      	cbz	r0, 800d75c <__swbuf_r+0x32>
 800d754:	f04f 37ff 	mov.w	r7, #4294967295
 800d758:	4638      	mov	r0, r7
 800d75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d75c:	6823      	ldr	r3, [r4, #0]
 800d75e:	6922      	ldr	r2, [r4, #16]
 800d760:	1a98      	subs	r0, r3, r2
 800d762:	6963      	ldr	r3, [r4, #20]
 800d764:	b2f6      	uxtb	r6, r6
 800d766:	4283      	cmp	r3, r0
 800d768:	4637      	mov	r7, r6
 800d76a:	dc05      	bgt.n	800d778 <__swbuf_r+0x4e>
 800d76c:	4621      	mov	r1, r4
 800d76e:	4628      	mov	r0, r5
 800d770:	f002 fce8 	bl	8010144 <_fflush_r>
 800d774:	2800      	cmp	r0, #0
 800d776:	d1ed      	bne.n	800d754 <__swbuf_r+0x2a>
 800d778:	68a3      	ldr	r3, [r4, #8]
 800d77a:	3b01      	subs	r3, #1
 800d77c:	60a3      	str	r3, [r4, #8]
 800d77e:	6823      	ldr	r3, [r4, #0]
 800d780:	1c5a      	adds	r2, r3, #1
 800d782:	6022      	str	r2, [r4, #0]
 800d784:	701e      	strb	r6, [r3, #0]
 800d786:	6962      	ldr	r2, [r4, #20]
 800d788:	1c43      	adds	r3, r0, #1
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d004      	beq.n	800d798 <__swbuf_r+0x6e>
 800d78e:	89a3      	ldrh	r3, [r4, #12]
 800d790:	07db      	lsls	r3, r3, #31
 800d792:	d5e1      	bpl.n	800d758 <__swbuf_r+0x2e>
 800d794:	2e0a      	cmp	r6, #10
 800d796:	d1df      	bne.n	800d758 <__swbuf_r+0x2e>
 800d798:	4621      	mov	r1, r4
 800d79a:	4628      	mov	r0, r5
 800d79c:	f002 fcd2 	bl	8010144 <_fflush_r>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d0d9      	beq.n	800d758 <__swbuf_r+0x2e>
 800d7a4:	e7d6      	b.n	800d754 <__swbuf_r+0x2a>
	...

0800d7a8 <__swsetup_r>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	4b29      	ldr	r3, [pc, #164]	@ (800d850 <__swsetup_r+0xa8>)
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	6818      	ldr	r0, [r3, #0]
 800d7b0:	460c      	mov	r4, r1
 800d7b2:	b118      	cbz	r0, 800d7bc <__swsetup_r+0x14>
 800d7b4:	6a03      	ldr	r3, [r0, #32]
 800d7b6:	b90b      	cbnz	r3, 800d7bc <__swsetup_r+0x14>
 800d7b8:	f7ff fec0 	bl	800d53c <__sinit>
 800d7bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7c0:	0719      	lsls	r1, r3, #28
 800d7c2:	d422      	bmi.n	800d80a <__swsetup_r+0x62>
 800d7c4:	06da      	lsls	r2, r3, #27
 800d7c6:	d407      	bmi.n	800d7d8 <__swsetup_r+0x30>
 800d7c8:	2209      	movs	r2, #9
 800d7ca:	602a      	str	r2, [r5, #0]
 800d7cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7d0:	81a3      	strh	r3, [r4, #12]
 800d7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d6:	e033      	b.n	800d840 <__swsetup_r+0x98>
 800d7d8:	0758      	lsls	r0, r3, #29
 800d7da:	d512      	bpl.n	800d802 <__swsetup_r+0x5a>
 800d7dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7de:	b141      	cbz	r1, 800d7f2 <__swsetup_r+0x4a>
 800d7e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7e4:	4299      	cmp	r1, r3
 800d7e6:	d002      	beq.n	800d7ee <__swsetup_r+0x46>
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f000 ff15 	bl	800e618 <_free_r>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d7f8:	81a3      	strh	r3, [r4, #12]
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	6063      	str	r3, [r4, #4]
 800d7fe:	6923      	ldr	r3, [r4, #16]
 800d800:	6023      	str	r3, [r4, #0]
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	f043 0308 	orr.w	r3, r3, #8
 800d808:	81a3      	strh	r3, [r4, #12]
 800d80a:	6923      	ldr	r3, [r4, #16]
 800d80c:	b94b      	cbnz	r3, 800d822 <__swsetup_r+0x7a>
 800d80e:	89a3      	ldrh	r3, [r4, #12]
 800d810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d818:	d003      	beq.n	800d822 <__swsetup_r+0x7a>
 800d81a:	4621      	mov	r1, r4
 800d81c:	4628      	mov	r0, r5
 800d81e:	f002 fcdf 	bl	80101e0 <__smakebuf_r>
 800d822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d826:	f013 0201 	ands.w	r2, r3, #1
 800d82a:	d00a      	beq.n	800d842 <__swsetup_r+0x9a>
 800d82c:	2200      	movs	r2, #0
 800d82e:	60a2      	str	r2, [r4, #8]
 800d830:	6962      	ldr	r2, [r4, #20]
 800d832:	4252      	negs	r2, r2
 800d834:	61a2      	str	r2, [r4, #24]
 800d836:	6922      	ldr	r2, [r4, #16]
 800d838:	b942      	cbnz	r2, 800d84c <__swsetup_r+0xa4>
 800d83a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d83e:	d1c5      	bne.n	800d7cc <__swsetup_r+0x24>
 800d840:	bd38      	pop	{r3, r4, r5, pc}
 800d842:	0799      	lsls	r1, r3, #30
 800d844:	bf58      	it	pl
 800d846:	6962      	ldrpl	r2, [r4, #20]
 800d848:	60a2      	str	r2, [r4, #8]
 800d84a:	e7f4      	b.n	800d836 <__swsetup_r+0x8e>
 800d84c:	2000      	movs	r0, #0
 800d84e:	e7f7      	b.n	800d840 <__swsetup_r+0x98>
 800d850:	200003d0 	.word	0x200003d0

0800d854 <memset>:
 800d854:	4402      	add	r2, r0
 800d856:	4603      	mov	r3, r0
 800d858:	4293      	cmp	r3, r2
 800d85a:	d100      	bne.n	800d85e <memset+0xa>
 800d85c:	4770      	bx	lr
 800d85e:	f803 1b01 	strb.w	r1, [r3], #1
 800d862:	e7f9      	b.n	800d858 <memset+0x4>

0800d864 <_localeconv_r>:
 800d864:	4800      	ldr	r0, [pc, #0]	@ (800d868 <_localeconv_r+0x4>)
 800d866:	4770      	bx	lr
 800d868:	20000510 	.word	0x20000510

0800d86c <_close_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	4d06      	ldr	r5, [pc, #24]	@ (800d888 <_close_r+0x1c>)
 800d870:	2300      	movs	r3, #0
 800d872:	4604      	mov	r4, r0
 800d874:	4608      	mov	r0, r1
 800d876:	602b      	str	r3, [r5, #0]
 800d878:	f7fa ffb8 	bl	80087ec <_close>
 800d87c:	1c43      	adds	r3, r0, #1
 800d87e:	d102      	bne.n	800d886 <_close_r+0x1a>
 800d880:	682b      	ldr	r3, [r5, #0]
 800d882:	b103      	cbz	r3, 800d886 <_close_r+0x1a>
 800d884:	6023      	str	r3, [r4, #0]
 800d886:	bd38      	pop	{r3, r4, r5, pc}
 800d888:	20004dcc 	.word	0x20004dcc

0800d88c <_lseek_r>:
 800d88c:	b538      	push	{r3, r4, r5, lr}
 800d88e:	4d07      	ldr	r5, [pc, #28]	@ (800d8ac <_lseek_r+0x20>)
 800d890:	4604      	mov	r4, r0
 800d892:	4608      	mov	r0, r1
 800d894:	4611      	mov	r1, r2
 800d896:	2200      	movs	r2, #0
 800d898:	602a      	str	r2, [r5, #0]
 800d89a:	461a      	mov	r2, r3
 800d89c:	f7fa ffcd 	bl	800883a <_lseek>
 800d8a0:	1c43      	adds	r3, r0, #1
 800d8a2:	d102      	bne.n	800d8aa <_lseek_r+0x1e>
 800d8a4:	682b      	ldr	r3, [r5, #0]
 800d8a6:	b103      	cbz	r3, 800d8aa <_lseek_r+0x1e>
 800d8a8:	6023      	str	r3, [r4, #0]
 800d8aa:	bd38      	pop	{r3, r4, r5, pc}
 800d8ac:	20004dcc 	.word	0x20004dcc

0800d8b0 <_read_r>:
 800d8b0:	b538      	push	{r3, r4, r5, lr}
 800d8b2:	4d07      	ldr	r5, [pc, #28]	@ (800d8d0 <_read_r+0x20>)
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	4608      	mov	r0, r1
 800d8b8:	4611      	mov	r1, r2
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	602a      	str	r2, [r5, #0]
 800d8be:	461a      	mov	r2, r3
 800d8c0:	f7fa ff5b 	bl	800877a <_read>
 800d8c4:	1c43      	adds	r3, r0, #1
 800d8c6:	d102      	bne.n	800d8ce <_read_r+0x1e>
 800d8c8:	682b      	ldr	r3, [r5, #0]
 800d8ca:	b103      	cbz	r3, 800d8ce <_read_r+0x1e>
 800d8cc:	6023      	str	r3, [r4, #0]
 800d8ce:	bd38      	pop	{r3, r4, r5, pc}
 800d8d0:	20004dcc 	.word	0x20004dcc

0800d8d4 <_write_r>:
 800d8d4:	b538      	push	{r3, r4, r5, lr}
 800d8d6:	4d07      	ldr	r5, [pc, #28]	@ (800d8f4 <_write_r+0x20>)
 800d8d8:	4604      	mov	r4, r0
 800d8da:	4608      	mov	r0, r1
 800d8dc:	4611      	mov	r1, r2
 800d8de:	2200      	movs	r2, #0
 800d8e0:	602a      	str	r2, [r5, #0]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	f7fa ff66 	bl	80087b4 <_write>
 800d8e8:	1c43      	adds	r3, r0, #1
 800d8ea:	d102      	bne.n	800d8f2 <_write_r+0x1e>
 800d8ec:	682b      	ldr	r3, [r5, #0]
 800d8ee:	b103      	cbz	r3, 800d8f2 <_write_r+0x1e>
 800d8f0:	6023      	str	r3, [r4, #0]
 800d8f2:	bd38      	pop	{r3, r4, r5, pc}
 800d8f4:	20004dcc 	.word	0x20004dcc

0800d8f8 <__errno>:
 800d8f8:	4b01      	ldr	r3, [pc, #4]	@ (800d900 <__errno+0x8>)
 800d8fa:	6818      	ldr	r0, [r3, #0]
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	200003d0 	.word	0x200003d0

0800d904 <__libc_init_array>:
 800d904:	b570      	push	{r4, r5, r6, lr}
 800d906:	4d0d      	ldr	r5, [pc, #52]	@ (800d93c <__libc_init_array+0x38>)
 800d908:	4c0d      	ldr	r4, [pc, #52]	@ (800d940 <__libc_init_array+0x3c>)
 800d90a:	1b64      	subs	r4, r4, r5
 800d90c:	10a4      	asrs	r4, r4, #2
 800d90e:	2600      	movs	r6, #0
 800d910:	42a6      	cmp	r6, r4
 800d912:	d109      	bne.n	800d928 <__libc_init_array+0x24>
 800d914:	4d0b      	ldr	r5, [pc, #44]	@ (800d944 <__libc_init_array+0x40>)
 800d916:	4c0c      	ldr	r4, [pc, #48]	@ (800d948 <__libc_init_array+0x44>)
 800d918:	f003 fa64 	bl	8010de4 <_init>
 800d91c:	1b64      	subs	r4, r4, r5
 800d91e:	10a4      	asrs	r4, r4, #2
 800d920:	2600      	movs	r6, #0
 800d922:	42a6      	cmp	r6, r4
 800d924:	d105      	bne.n	800d932 <__libc_init_array+0x2e>
 800d926:	bd70      	pop	{r4, r5, r6, pc}
 800d928:	f855 3b04 	ldr.w	r3, [r5], #4
 800d92c:	4798      	blx	r3
 800d92e:	3601      	adds	r6, #1
 800d930:	e7ee      	b.n	800d910 <__libc_init_array+0xc>
 800d932:	f855 3b04 	ldr.w	r3, [r5], #4
 800d936:	4798      	blx	r3
 800d938:	3601      	adds	r6, #1
 800d93a:	e7f2      	b.n	800d922 <__libc_init_array+0x1e>
 800d93c:	08013cb0 	.word	0x08013cb0
 800d940:	08013cb0 	.word	0x08013cb0
 800d944:	08013cb0 	.word	0x08013cb0
 800d948:	08013cb4 	.word	0x08013cb4

0800d94c <__retarget_lock_init_recursive>:
 800d94c:	4770      	bx	lr

0800d94e <__retarget_lock_acquire_recursive>:
 800d94e:	4770      	bx	lr

0800d950 <__retarget_lock_release_recursive>:
 800d950:	4770      	bx	lr

0800d952 <memcpy>:
 800d952:	440a      	add	r2, r1
 800d954:	4291      	cmp	r1, r2
 800d956:	f100 33ff 	add.w	r3, r0, #4294967295
 800d95a:	d100      	bne.n	800d95e <memcpy+0xc>
 800d95c:	4770      	bx	lr
 800d95e:	b510      	push	{r4, lr}
 800d960:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d964:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d968:	4291      	cmp	r1, r2
 800d96a:	d1f9      	bne.n	800d960 <memcpy+0xe>
 800d96c:	bd10      	pop	{r4, pc}
	...

0800d970 <nanf>:
 800d970:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d978 <nanf+0x8>
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	7fc00000 	.word	0x7fc00000

0800d97c <quorem>:
 800d97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d980:	6903      	ldr	r3, [r0, #16]
 800d982:	690c      	ldr	r4, [r1, #16]
 800d984:	42a3      	cmp	r3, r4
 800d986:	4607      	mov	r7, r0
 800d988:	db7e      	blt.n	800da88 <quorem+0x10c>
 800d98a:	3c01      	subs	r4, #1
 800d98c:	f101 0814 	add.w	r8, r1, #20
 800d990:	00a3      	lsls	r3, r4, #2
 800d992:	f100 0514 	add.w	r5, r0, #20
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d99c:	9301      	str	r3, [sp, #4]
 800d99e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d9a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d9ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800d9b2:	d32e      	bcc.n	800da12 <quorem+0x96>
 800d9b4:	f04f 0a00 	mov.w	sl, #0
 800d9b8:	46c4      	mov	ip, r8
 800d9ba:	46ae      	mov	lr, r5
 800d9bc:	46d3      	mov	fp, sl
 800d9be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9c2:	b298      	uxth	r0, r3
 800d9c4:	fb06 a000 	mla	r0, r6, r0, sl
 800d9c8:	0c02      	lsrs	r2, r0, #16
 800d9ca:	0c1b      	lsrs	r3, r3, #16
 800d9cc:	fb06 2303 	mla	r3, r6, r3, r2
 800d9d0:	f8de 2000 	ldr.w	r2, [lr]
 800d9d4:	b280      	uxth	r0, r0
 800d9d6:	b292      	uxth	r2, r2
 800d9d8:	1a12      	subs	r2, r2, r0
 800d9da:	445a      	add	r2, fp
 800d9dc:	f8de 0000 	ldr.w	r0, [lr]
 800d9e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d9ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d9ee:	b292      	uxth	r2, r2
 800d9f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d9f4:	45e1      	cmp	r9, ip
 800d9f6:	f84e 2b04 	str.w	r2, [lr], #4
 800d9fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d9fe:	d2de      	bcs.n	800d9be <quorem+0x42>
 800da00:	9b00      	ldr	r3, [sp, #0]
 800da02:	58eb      	ldr	r3, [r5, r3]
 800da04:	b92b      	cbnz	r3, 800da12 <quorem+0x96>
 800da06:	9b01      	ldr	r3, [sp, #4]
 800da08:	3b04      	subs	r3, #4
 800da0a:	429d      	cmp	r5, r3
 800da0c:	461a      	mov	r2, r3
 800da0e:	d32f      	bcc.n	800da70 <quorem+0xf4>
 800da10:	613c      	str	r4, [r7, #16]
 800da12:	4638      	mov	r0, r7
 800da14:	f001 f9c4 	bl	800eda0 <__mcmp>
 800da18:	2800      	cmp	r0, #0
 800da1a:	db25      	blt.n	800da68 <quorem+0xec>
 800da1c:	4629      	mov	r1, r5
 800da1e:	2000      	movs	r0, #0
 800da20:	f858 2b04 	ldr.w	r2, [r8], #4
 800da24:	f8d1 c000 	ldr.w	ip, [r1]
 800da28:	fa1f fe82 	uxth.w	lr, r2
 800da2c:	fa1f f38c 	uxth.w	r3, ip
 800da30:	eba3 030e 	sub.w	r3, r3, lr
 800da34:	4403      	add	r3, r0
 800da36:	0c12      	lsrs	r2, r2, #16
 800da38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800da3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800da40:	b29b      	uxth	r3, r3
 800da42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da46:	45c1      	cmp	r9, r8
 800da48:	f841 3b04 	str.w	r3, [r1], #4
 800da4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800da50:	d2e6      	bcs.n	800da20 <quorem+0xa4>
 800da52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da5a:	b922      	cbnz	r2, 800da66 <quorem+0xea>
 800da5c:	3b04      	subs	r3, #4
 800da5e:	429d      	cmp	r5, r3
 800da60:	461a      	mov	r2, r3
 800da62:	d30b      	bcc.n	800da7c <quorem+0x100>
 800da64:	613c      	str	r4, [r7, #16]
 800da66:	3601      	adds	r6, #1
 800da68:	4630      	mov	r0, r6
 800da6a:	b003      	add	sp, #12
 800da6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da70:	6812      	ldr	r2, [r2, #0]
 800da72:	3b04      	subs	r3, #4
 800da74:	2a00      	cmp	r2, #0
 800da76:	d1cb      	bne.n	800da10 <quorem+0x94>
 800da78:	3c01      	subs	r4, #1
 800da7a:	e7c6      	b.n	800da0a <quorem+0x8e>
 800da7c:	6812      	ldr	r2, [r2, #0]
 800da7e:	3b04      	subs	r3, #4
 800da80:	2a00      	cmp	r2, #0
 800da82:	d1ef      	bne.n	800da64 <quorem+0xe8>
 800da84:	3c01      	subs	r4, #1
 800da86:	e7ea      	b.n	800da5e <quorem+0xe2>
 800da88:	2000      	movs	r0, #0
 800da8a:	e7ee      	b.n	800da6a <quorem+0xee>
 800da8c:	0000      	movs	r0, r0
	...

0800da90 <_dtoa_r>:
 800da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da94:	69c7      	ldr	r7, [r0, #28]
 800da96:	b099      	sub	sp, #100	@ 0x64
 800da98:	ed8d 0b02 	vstr	d0, [sp, #8]
 800da9c:	ec55 4b10 	vmov	r4, r5, d0
 800daa0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800daa2:	9109      	str	r1, [sp, #36]	@ 0x24
 800daa4:	4683      	mov	fp, r0
 800daa6:	920e      	str	r2, [sp, #56]	@ 0x38
 800daa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800daaa:	b97f      	cbnz	r7, 800dacc <_dtoa_r+0x3c>
 800daac:	2010      	movs	r0, #16
 800daae:	f000 fdfd 	bl	800e6ac <malloc>
 800dab2:	4602      	mov	r2, r0
 800dab4:	f8cb 001c 	str.w	r0, [fp, #28]
 800dab8:	b920      	cbnz	r0, 800dac4 <_dtoa_r+0x34>
 800daba:	4ba7      	ldr	r3, [pc, #668]	@ (800dd58 <_dtoa_r+0x2c8>)
 800dabc:	21ef      	movs	r1, #239	@ 0xef
 800dabe:	48a7      	ldr	r0, [pc, #668]	@ (800dd5c <_dtoa_r+0x2cc>)
 800dac0:	f002 fc32 	bl	8010328 <__assert_func>
 800dac4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dac8:	6007      	str	r7, [r0, #0]
 800daca:	60c7      	str	r7, [r0, #12]
 800dacc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dad0:	6819      	ldr	r1, [r3, #0]
 800dad2:	b159      	cbz	r1, 800daec <_dtoa_r+0x5c>
 800dad4:	685a      	ldr	r2, [r3, #4]
 800dad6:	604a      	str	r2, [r1, #4]
 800dad8:	2301      	movs	r3, #1
 800dada:	4093      	lsls	r3, r2
 800dadc:	608b      	str	r3, [r1, #8]
 800dade:	4658      	mov	r0, fp
 800dae0:	f000 feda 	bl	800e898 <_Bfree>
 800dae4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dae8:	2200      	movs	r2, #0
 800daea:	601a      	str	r2, [r3, #0]
 800daec:	1e2b      	subs	r3, r5, #0
 800daee:	bfb9      	ittee	lt
 800daf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800daf4:	9303      	strlt	r3, [sp, #12]
 800daf6:	2300      	movge	r3, #0
 800daf8:	6033      	strge	r3, [r6, #0]
 800dafa:	9f03      	ldr	r7, [sp, #12]
 800dafc:	4b98      	ldr	r3, [pc, #608]	@ (800dd60 <_dtoa_r+0x2d0>)
 800dafe:	bfbc      	itt	lt
 800db00:	2201      	movlt	r2, #1
 800db02:	6032      	strlt	r2, [r6, #0]
 800db04:	43bb      	bics	r3, r7
 800db06:	d112      	bne.n	800db2e <_dtoa_r+0x9e>
 800db08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800db0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800db0e:	6013      	str	r3, [r2, #0]
 800db10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db14:	4323      	orrs	r3, r4
 800db16:	f000 854d 	beq.w	800e5b4 <_dtoa_r+0xb24>
 800db1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dd74 <_dtoa_r+0x2e4>
 800db20:	2b00      	cmp	r3, #0
 800db22:	f000 854f 	beq.w	800e5c4 <_dtoa_r+0xb34>
 800db26:	f10a 0303 	add.w	r3, sl, #3
 800db2a:	f000 bd49 	b.w	800e5c0 <_dtoa_r+0xb30>
 800db2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db32:	2200      	movs	r2, #0
 800db34:	ec51 0b17 	vmov	r0, r1, d7
 800db38:	2300      	movs	r3, #0
 800db3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800db3e:	f7f2 ffd3 	bl	8000ae8 <__aeabi_dcmpeq>
 800db42:	4680      	mov	r8, r0
 800db44:	b158      	cbz	r0, 800db5e <_dtoa_r+0xce>
 800db46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800db48:	2301      	movs	r3, #1
 800db4a:	6013      	str	r3, [r2, #0]
 800db4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800db4e:	b113      	cbz	r3, 800db56 <_dtoa_r+0xc6>
 800db50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800db52:	4b84      	ldr	r3, [pc, #528]	@ (800dd64 <_dtoa_r+0x2d4>)
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dd78 <_dtoa_r+0x2e8>
 800db5a:	f000 bd33 	b.w	800e5c4 <_dtoa_r+0xb34>
 800db5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800db62:	aa16      	add	r2, sp, #88	@ 0x58
 800db64:	a917      	add	r1, sp, #92	@ 0x5c
 800db66:	4658      	mov	r0, fp
 800db68:	f001 fa3a 	bl	800efe0 <__d2b>
 800db6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800db70:	4681      	mov	r9, r0
 800db72:	2e00      	cmp	r6, #0
 800db74:	d077      	beq.n	800dc66 <_dtoa_r+0x1d6>
 800db76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800db7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800db88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800db8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800db90:	4619      	mov	r1, r3
 800db92:	2200      	movs	r2, #0
 800db94:	4b74      	ldr	r3, [pc, #464]	@ (800dd68 <_dtoa_r+0x2d8>)
 800db96:	f7f2 fb87 	bl	80002a8 <__aeabi_dsub>
 800db9a:	a369      	add	r3, pc, #420	@ (adr r3, 800dd40 <_dtoa_r+0x2b0>)
 800db9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba0:	f7f2 fd3a 	bl	8000618 <__aeabi_dmul>
 800dba4:	a368      	add	r3, pc, #416	@ (adr r3, 800dd48 <_dtoa_r+0x2b8>)
 800dba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbaa:	f7f2 fb7f 	bl	80002ac <__adddf3>
 800dbae:	4604      	mov	r4, r0
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	460d      	mov	r5, r1
 800dbb4:	f7f2 fcc6 	bl	8000544 <__aeabi_i2d>
 800dbb8:	a365      	add	r3, pc, #404	@ (adr r3, 800dd50 <_dtoa_r+0x2c0>)
 800dbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbe:	f7f2 fd2b 	bl	8000618 <__aeabi_dmul>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	4629      	mov	r1, r5
 800dbca:	f7f2 fb6f 	bl	80002ac <__adddf3>
 800dbce:	4604      	mov	r4, r0
 800dbd0:	460d      	mov	r5, r1
 800dbd2:	f7f2 ffd1 	bl	8000b78 <__aeabi_d2iz>
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	4607      	mov	r7, r0
 800dbda:	2300      	movs	r3, #0
 800dbdc:	4620      	mov	r0, r4
 800dbde:	4629      	mov	r1, r5
 800dbe0:	f7f2 ff8c 	bl	8000afc <__aeabi_dcmplt>
 800dbe4:	b140      	cbz	r0, 800dbf8 <_dtoa_r+0x168>
 800dbe6:	4638      	mov	r0, r7
 800dbe8:	f7f2 fcac 	bl	8000544 <__aeabi_i2d>
 800dbec:	4622      	mov	r2, r4
 800dbee:	462b      	mov	r3, r5
 800dbf0:	f7f2 ff7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800dbf4:	b900      	cbnz	r0, 800dbf8 <_dtoa_r+0x168>
 800dbf6:	3f01      	subs	r7, #1
 800dbf8:	2f16      	cmp	r7, #22
 800dbfa:	d851      	bhi.n	800dca0 <_dtoa_r+0x210>
 800dbfc:	4b5b      	ldr	r3, [pc, #364]	@ (800dd6c <_dtoa_r+0x2dc>)
 800dbfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc0a:	f7f2 ff77 	bl	8000afc <__aeabi_dcmplt>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d048      	beq.n	800dca4 <_dtoa_r+0x214>
 800dc12:	3f01      	subs	r7, #1
 800dc14:	2300      	movs	r3, #0
 800dc16:	9312      	str	r3, [sp, #72]	@ 0x48
 800dc18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dc1a:	1b9b      	subs	r3, r3, r6
 800dc1c:	1e5a      	subs	r2, r3, #1
 800dc1e:	bf44      	itt	mi
 800dc20:	f1c3 0801 	rsbmi	r8, r3, #1
 800dc24:	2300      	movmi	r3, #0
 800dc26:	9208      	str	r2, [sp, #32]
 800dc28:	bf54      	ite	pl
 800dc2a:	f04f 0800 	movpl.w	r8, #0
 800dc2e:	9308      	strmi	r3, [sp, #32]
 800dc30:	2f00      	cmp	r7, #0
 800dc32:	db39      	blt.n	800dca8 <_dtoa_r+0x218>
 800dc34:	9b08      	ldr	r3, [sp, #32]
 800dc36:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dc38:	443b      	add	r3, r7
 800dc3a:	9308      	str	r3, [sp, #32]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc42:	2b09      	cmp	r3, #9
 800dc44:	d864      	bhi.n	800dd10 <_dtoa_r+0x280>
 800dc46:	2b05      	cmp	r3, #5
 800dc48:	bfc4      	itt	gt
 800dc4a:	3b04      	subgt	r3, #4
 800dc4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800dc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc50:	f1a3 0302 	sub.w	r3, r3, #2
 800dc54:	bfcc      	ite	gt
 800dc56:	2400      	movgt	r4, #0
 800dc58:	2401      	movle	r4, #1
 800dc5a:	2b03      	cmp	r3, #3
 800dc5c:	d863      	bhi.n	800dd26 <_dtoa_r+0x296>
 800dc5e:	e8df f003 	tbb	[pc, r3]
 800dc62:	372a      	.short	0x372a
 800dc64:	5535      	.short	0x5535
 800dc66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800dc6a:	441e      	add	r6, r3
 800dc6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dc70:	2b20      	cmp	r3, #32
 800dc72:	bfc1      	itttt	gt
 800dc74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dc78:	409f      	lslgt	r7, r3
 800dc7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dc7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dc82:	bfd6      	itet	le
 800dc84:	f1c3 0320 	rsble	r3, r3, #32
 800dc88:	ea47 0003 	orrgt.w	r0, r7, r3
 800dc8c:	fa04 f003 	lslle.w	r0, r4, r3
 800dc90:	f7f2 fc48 	bl	8000524 <__aeabi_ui2d>
 800dc94:	2201      	movs	r2, #1
 800dc96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dc9a:	3e01      	subs	r6, #1
 800dc9c:	9214      	str	r2, [sp, #80]	@ 0x50
 800dc9e:	e777      	b.n	800db90 <_dtoa_r+0x100>
 800dca0:	2301      	movs	r3, #1
 800dca2:	e7b8      	b.n	800dc16 <_dtoa_r+0x186>
 800dca4:	9012      	str	r0, [sp, #72]	@ 0x48
 800dca6:	e7b7      	b.n	800dc18 <_dtoa_r+0x188>
 800dca8:	427b      	negs	r3, r7
 800dcaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcac:	2300      	movs	r3, #0
 800dcae:	eba8 0807 	sub.w	r8, r8, r7
 800dcb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dcb4:	e7c4      	b.n	800dc40 <_dtoa_r+0x1b0>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dc35      	bgt.n	800dd2c <_dtoa_r+0x29c>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	9307      	str	r3, [sp, #28]
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800dcca:	e00b      	b.n	800dce4 <_dtoa_r+0x254>
 800dccc:	2301      	movs	r3, #1
 800dcce:	e7f3      	b.n	800dcb8 <_dtoa_r+0x228>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcd6:	18fb      	adds	r3, r7, r3
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	9307      	str	r3, [sp, #28]
 800dce0:	bfb8      	it	lt
 800dce2:	2301      	movlt	r3, #1
 800dce4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dce8:	2100      	movs	r1, #0
 800dcea:	2204      	movs	r2, #4
 800dcec:	f102 0514 	add.w	r5, r2, #20
 800dcf0:	429d      	cmp	r5, r3
 800dcf2:	d91f      	bls.n	800dd34 <_dtoa_r+0x2a4>
 800dcf4:	6041      	str	r1, [r0, #4]
 800dcf6:	4658      	mov	r0, fp
 800dcf8:	f000 fd8e 	bl	800e818 <_Balloc>
 800dcfc:	4682      	mov	sl, r0
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d13c      	bne.n	800dd7c <_dtoa_r+0x2ec>
 800dd02:	4b1b      	ldr	r3, [pc, #108]	@ (800dd70 <_dtoa_r+0x2e0>)
 800dd04:	4602      	mov	r2, r0
 800dd06:	f240 11af 	movw	r1, #431	@ 0x1af
 800dd0a:	e6d8      	b.n	800dabe <_dtoa_r+0x2e>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	e7e0      	b.n	800dcd2 <_dtoa_r+0x242>
 800dd10:	2401      	movs	r4, #1
 800dd12:	2300      	movs	r3, #0
 800dd14:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dd18:	f04f 33ff 	mov.w	r3, #4294967295
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	9307      	str	r3, [sp, #28]
 800dd20:	2200      	movs	r2, #0
 800dd22:	2312      	movs	r3, #18
 800dd24:	e7d0      	b.n	800dcc8 <_dtoa_r+0x238>
 800dd26:	2301      	movs	r3, #1
 800dd28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd2a:	e7f5      	b.n	800dd18 <_dtoa_r+0x288>
 800dd2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	9307      	str	r3, [sp, #28]
 800dd32:	e7d7      	b.n	800dce4 <_dtoa_r+0x254>
 800dd34:	3101      	adds	r1, #1
 800dd36:	0052      	lsls	r2, r2, #1
 800dd38:	e7d8      	b.n	800dcec <_dtoa_r+0x25c>
 800dd3a:	bf00      	nop
 800dd3c:	f3af 8000 	nop.w
 800dd40:	636f4361 	.word	0x636f4361
 800dd44:	3fd287a7 	.word	0x3fd287a7
 800dd48:	8b60c8b3 	.word	0x8b60c8b3
 800dd4c:	3fc68a28 	.word	0x3fc68a28
 800dd50:	509f79fb 	.word	0x509f79fb
 800dd54:	3fd34413 	.word	0x3fd34413
 800dd58:	080139c3 	.word	0x080139c3
 800dd5c:	080139da 	.word	0x080139da
 800dd60:	7ff00000 	.word	0x7ff00000
 800dd64:	0801398e 	.word	0x0801398e
 800dd68:	3ff80000 	.word	0x3ff80000
 800dd6c:	08013ad0 	.word	0x08013ad0
 800dd70:	08013a32 	.word	0x08013a32
 800dd74:	080139bf 	.word	0x080139bf
 800dd78:	0801398d 	.word	0x0801398d
 800dd7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd80:	6018      	str	r0, [r3, #0]
 800dd82:	9b07      	ldr	r3, [sp, #28]
 800dd84:	2b0e      	cmp	r3, #14
 800dd86:	f200 80a4 	bhi.w	800ded2 <_dtoa_r+0x442>
 800dd8a:	2c00      	cmp	r4, #0
 800dd8c:	f000 80a1 	beq.w	800ded2 <_dtoa_r+0x442>
 800dd90:	2f00      	cmp	r7, #0
 800dd92:	dd33      	ble.n	800ddfc <_dtoa_r+0x36c>
 800dd94:	4bad      	ldr	r3, [pc, #692]	@ (800e04c <_dtoa_r+0x5bc>)
 800dd96:	f007 020f 	and.w	r2, r7, #15
 800dd9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd9e:	ed93 7b00 	vldr	d7, [r3]
 800dda2:	05f8      	lsls	r0, r7, #23
 800dda4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dda8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ddac:	d516      	bpl.n	800dddc <_dtoa_r+0x34c>
 800ddae:	4ba8      	ldr	r3, [pc, #672]	@ (800e050 <_dtoa_r+0x5c0>)
 800ddb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddb8:	f7f2 fd58 	bl	800086c <__aeabi_ddiv>
 800ddbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddc0:	f004 040f 	and.w	r4, r4, #15
 800ddc4:	2603      	movs	r6, #3
 800ddc6:	4da2      	ldr	r5, [pc, #648]	@ (800e050 <_dtoa_r+0x5c0>)
 800ddc8:	b954      	cbnz	r4, 800dde0 <_dtoa_r+0x350>
 800ddca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddd2:	f7f2 fd4b 	bl	800086c <__aeabi_ddiv>
 800ddd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddda:	e028      	b.n	800de2e <_dtoa_r+0x39e>
 800dddc:	2602      	movs	r6, #2
 800ddde:	e7f2      	b.n	800ddc6 <_dtoa_r+0x336>
 800dde0:	07e1      	lsls	r1, r4, #31
 800dde2:	d508      	bpl.n	800ddf6 <_dtoa_r+0x366>
 800dde4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dde8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ddec:	f7f2 fc14 	bl	8000618 <__aeabi_dmul>
 800ddf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ddf4:	3601      	adds	r6, #1
 800ddf6:	1064      	asrs	r4, r4, #1
 800ddf8:	3508      	adds	r5, #8
 800ddfa:	e7e5      	b.n	800ddc8 <_dtoa_r+0x338>
 800ddfc:	f000 80d2 	beq.w	800dfa4 <_dtoa_r+0x514>
 800de00:	427c      	negs	r4, r7
 800de02:	4b92      	ldr	r3, [pc, #584]	@ (800e04c <_dtoa_r+0x5bc>)
 800de04:	4d92      	ldr	r5, [pc, #584]	@ (800e050 <_dtoa_r+0x5c0>)
 800de06:	f004 020f 	and.w	r2, r4, #15
 800de0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de16:	f7f2 fbff 	bl	8000618 <__aeabi_dmul>
 800de1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de1e:	1124      	asrs	r4, r4, #4
 800de20:	2300      	movs	r3, #0
 800de22:	2602      	movs	r6, #2
 800de24:	2c00      	cmp	r4, #0
 800de26:	f040 80b2 	bne.w	800df8e <_dtoa_r+0x4fe>
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1d3      	bne.n	800ddd6 <_dtoa_r+0x346>
 800de2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800de34:	2b00      	cmp	r3, #0
 800de36:	f000 80b7 	beq.w	800dfa8 <_dtoa_r+0x518>
 800de3a:	4b86      	ldr	r3, [pc, #536]	@ (800e054 <_dtoa_r+0x5c4>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	4620      	mov	r0, r4
 800de40:	4629      	mov	r1, r5
 800de42:	f7f2 fe5b 	bl	8000afc <__aeabi_dcmplt>
 800de46:	2800      	cmp	r0, #0
 800de48:	f000 80ae 	beq.w	800dfa8 <_dtoa_r+0x518>
 800de4c:	9b07      	ldr	r3, [sp, #28]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	f000 80aa 	beq.w	800dfa8 <_dtoa_r+0x518>
 800de54:	9b00      	ldr	r3, [sp, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	dd37      	ble.n	800deca <_dtoa_r+0x43a>
 800de5a:	1e7b      	subs	r3, r7, #1
 800de5c:	9304      	str	r3, [sp, #16]
 800de5e:	4620      	mov	r0, r4
 800de60:	4b7d      	ldr	r3, [pc, #500]	@ (800e058 <_dtoa_r+0x5c8>)
 800de62:	2200      	movs	r2, #0
 800de64:	4629      	mov	r1, r5
 800de66:	f7f2 fbd7 	bl	8000618 <__aeabi_dmul>
 800de6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de6e:	9c00      	ldr	r4, [sp, #0]
 800de70:	3601      	adds	r6, #1
 800de72:	4630      	mov	r0, r6
 800de74:	f7f2 fb66 	bl	8000544 <__aeabi_i2d>
 800de78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de7c:	f7f2 fbcc 	bl	8000618 <__aeabi_dmul>
 800de80:	4b76      	ldr	r3, [pc, #472]	@ (800e05c <_dtoa_r+0x5cc>)
 800de82:	2200      	movs	r2, #0
 800de84:	f7f2 fa12 	bl	80002ac <__adddf3>
 800de88:	4605      	mov	r5, r0
 800de8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800de8e:	2c00      	cmp	r4, #0
 800de90:	f040 808d 	bne.w	800dfae <_dtoa_r+0x51e>
 800de94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de98:	4b71      	ldr	r3, [pc, #452]	@ (800e060 <_dtoa_r+0x5d0>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	f7f2 fa04 	bl	80002a8 <__aeabi_dsub>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dea8:	462a      	mov	r2, r5
 800deaa:	4633      	mov	r3, r6
 800deac:	f7f2 fe44 	bl	8000b38 <__aeabi_dcmpgt>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	f040 828b 	bne.w	800e3cc <_dtoa_r+0x93c>
 800deb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deba:	462a      	mov	r2, r5
 800debc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dec0:	f7f2 fe1c 	bl	8000afc <__aeabi_dcmplt>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	f040 8128 	bne.w	800e11a <_dtoa_r+0x68a>
 800deca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800dece:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ded2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f2c0 815a 	blt.w	800e18e <_dtoa_r+0x6fe>
 800deda:	2f0e      	cmp	r7, #14
 800dedc:	f300 8157 	bgt.w	800e18e <_dtoa_r+0x6fe>
 800dee0:	4b5a      	ldr	r3, [pc, #360]	@ (800e04c <_dtoa_r+0x5bc>)
 800dee2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dee6:	ed93 7b00 	vldr	d7, [r3]
 800deea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800deec:	2b00      	cmp	r3, #0
 800deee:	ed8d 7b00 	vstr	d7, [sp]
 800def2:	da03      	bge.n	800defc <_dtoa_r+0x46c>
 800def4:	9b07      	ldr	r3, [sp, #28]
 800def6:	2b00      	cmp	r3, #0
 800def8:	f340 8101 	ble.w	800e0fe <_dtoa_r+0x66e>
 800defc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800df00:	4656      	mov	r6, sl
 800df02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df06:	4620      	mov	r0, r4
 800df08:	4629      	mov	r1, r5
 800df0a:	f7f2 fcaf 	bl	800086c <__aeabi_ddiv>
 800df0e:	f7f2 fe33 	bl	8000b78 <__aeabi_d2iz>
 800df12:	4680      	mov	r8, r0
 800df14:	f7f2 fb16 	bl	8000544 <__aeabi_i2d>
 800df18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df1c:	f7f2 fb7c 	bl	8000618 <__aeabi_dmul>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	4620      	mov	r0, r4
 800df26:	4629      	mov	r1, r5
 800df28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800df2c:	f7f2 f9bc 	bl	80002a8 <__aeabi_dsub>
 800df30:	f806 4b01 	strb.w	r4, [r6], #1
 800df34:	9d07      	ldr	r5, [sp, #28]
 800df36:	eba6 040a 	sub.w	r4, r6, sl
 800df3a:	42a5      	cmp	r5, r4
 800df3c:	4602      	mov	r2, r0
 800df3e:	460b      	mov	r3, r1
 800df40:	f040 8117 	bne.w	800e172 <_dtoa_r+0x6e2>
 800df44:	f7f2 f9b2 	bl	80002ac <__adddf3>
 800df48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df4c:	4604      	mov	r4, r0
 800df4e:	460d      	mov	r5, r1
 800df50:	f7f2 fdf2 	bl	8000b38 <__aeabi_dcmpgt>
 800df54:	2800      	cmp	r0, #0
 800df56:	f040 80f9 	bne.w	800e14c <_dtoa_r+0x6bc>
 800df5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df5e:	4620      	mov	r0, r4
 800df60:	4629      	mov	r1, r5
 800df62:	f7f2 fdc1 	bl	8000ae8 <__aeabi_dcmpeq>
 800df66:	b118      	cbz	r0, 800df70 <_dtoa_r+0x4e0>
 800df68:	f018 0f01 	tst.w	r8, #1
 800df6c:	f040 80ee 	bne.w	800e14c <_dtoa_r+0x6bc>
 800df70:	4649      	mov	r1, r9
 800df72:	4658      	mov	r0, fp
 800df74:	f000 fc90 	bl	800e898 <_Bfree>
 800df78:	2300      	movs	r3, #0
 800df7a:	7033      	strb	r3, [r6, #0]
 800df7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800df7e:	3701      	adds	r7, #1
 800df80:	601f      	str	r7, [r3, #0]
 800df82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df84:	2b00      	cmp	r3, #0
 800df86:	f000 831d 	beq.w	800e5c4 <_dtoa_r+0xb34>
 800df8a:	601e      	str	r6, [r3, #0]
 800df8c:	e31a      	b.n	800e5c4 <_dtoa_r+0xb34>
 800df8e:	07e2      	lsls	r2, r4, #31
 800df90:	d505      	bpl.n	800df9e <_dtoa_r+0x50e>
 800df92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df96:	f7f2 fb3f 	bl	8000618 <__aeabi_dmul>
 800df9a:	3601      	adds	r6, #1
 800df9c:	2301      	movs	r3, #1
 800df9e:	1064      	asrs	r4, r4, #1
 800dfa0:	3508      	adds	r5, #8
 800dfa2:	e73f      	b.n	800de24 <_dtoa_r+0x394>
 800dfa4:	2602      	movs	r6, #2
 800dfa6:	e742      	b.n	800de2e <_dtoa_r+0x39e>
 800dfa8:	9c07      	ldr	r4, [sp, #28]
 800dfaa:	9704      	str	r7, [sp, #16]
 800dfac:	e761      	b.n	800de72 <_dtoa_r+0x3e2>
 800dfae:	4b27      	ldr	r3, [pc, #156]	@ (800e04c <_dtoa_r+0x5bc>)
 800dfb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dfb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dfba:	4454      	add	r4, sl
 800dfbc:	2900      	cmp	r1, #0
 800dfbe:	d053      	beq.n	800e068 <_dtoa_r+0x5d8>
 800dfc0:	4928      	ldr	r1, [pc, #160]	@ (800e064 <_dtoa_r+0x5d4>)
 800dfc2:	2000      	movs	r0, #0
 800dfc4:	f7f2 fc52 	bl	800086c <__aeabi_ddiv>
 800dfc8:	4633      	mov	r3, r6
 800dfca:	462a      	mov	r2, r5
 800dfcc:	f7f2 f96c 	bl	80002a8 <__aeabi_dsub>
 800dfd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dfd4:	4656      	mov	r6, sl
 800dfd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfda:	f7f2 fdcd 	bl	8000b78 <__aeabi_d2iz>
 800dfde:	4605      	mov	r5, r0
 800dfe0:	f7f2 fab0 	bl	8000544 <__aeabi_i2d>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfec:	f7f2 f95c 	bl	80002a8 <__aeabi_dsub>
 800dff0:	3530      	adds	r5, #48	@ 0x30
 800dff2:	4602      	mov	r2, r0
 800dff4:	460b      	mov	r3, r1
 800dff6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dffa:	f806 5b01 	strb.w	r5, [r6], #1
 800dffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e002:	f7f2 fd7b 	bl	8000afc <__aeabi_dcmplt>
 800e006:	2800      	cmp	r0, #0
 800e008:	d171      	bne.n	800e0ee <_dtoa_r+0x65e>
 800e00a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e00e:	4911      	ldr	r1, [pc, #68]	@ (800e054 <_dtoa_r+0x5c4>)
 800e010:	2000      	movs	r0, #0
 800e012:	f7f2 f949 	bl	80002a8 <__aeabi_dsub>
 800e016:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e01a:	f7f2 fd6f 	bl	8000afc <__aeabi_dcmplt>
 800e01e:	2800      	cmp	r0, #0
 800e020:	f040 8095 	bne.w	800e14e <_dtoa_r+0x6be>
 800e024:	42a6      	cmp	r6, r4
 800e026:	f43f af50 	beq.w	800deca <_dtoa_r+0x43a>
 800e02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e02e:	4b0a      	ldr	r3, [pc, #40]	@ (800e058 <_dtoa_r+0x5c8>)
 800e030:	2200      	movs	r2, #0
 800e032:	f7f2 faf1 	bl	8000618 <__aeabi_dmul>
 800e036:	4b08      	ldr	r3, [pc, #32]	@ (800e058 <_dtoa_r+0x5c8>)
 800e038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e03c:	2200      	movs	r2, #0
 800e03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e042:	f7f2 fae9 	bl	8000618 <__aeabi_dmul>
 800e046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e04a:	e7c4      	b.n	800dfd6 <_dtoa_r+0x546>
 800e04c:	08013ad0 	.word	0x08013ad0
 800e050:	08013aa8 	.word	0x08013aa8
 800e054:	3ff00000 	.word	0x3ff00000
 800e058:	40240000 	.word	0x40240000
 800e05c:	401c0000 	.word	0x401c0000
 800e060:	40140000 	.word	0x40140000
 800e064:	3fe00000 	.word	0x3fe00000
 800e068:	4631      	mov	r1, r6
 800e06a:	4628      	mov	r0, r5
 800e06c:	f7f2 fad4 	bl	8000618 <__aeabi_dmul>
 800e070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e074:	9415      	str	r4, [sp, #84]	@ 0x54
 800e076:	4656      	mov	r6, sl
 800e078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e07c:	f7f2 fd7c 	bl	8000b78 <__aeabi_d2iz>
 800e080:	4605      	mov	r5, r0
 800e082:	f7f2 fa5f 	bl	8000544 <__aeabi_i2d>
 800e086:	4602      	mov	r2, r0
 800e088:	460b      	mov	r3, r1
 800e08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e08e:	f7f2 f90b 	bl	80002a8 <__aeabi_dsub>
 800e092:	3530      	adds	r5, #48	@ 0x30
 800e094:	f806 5b01 	strb.w	r5, [r6], #1
 800e098:	4602      	mov	r2, r0
 800e09a:	460b      	mov	r3, r1
 800e09c:	42a6      	cmp	r6, r4
 800e09e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0a2:	f04f 0200 	mov.w	r2, #0
 800e0a6:	d124      	bne.n	800e0f2 <_dtoa_r+0x662>
 800e0a8:	4bac      	ldr	r3, [pc, #688]	@ (800e35c <_dtoa_r+0x8cc>)
 800e0aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e0ae:	f7f2 f8fd 	bl	80002ac <__adddf3>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ba:	f7f2 fd3d 	bl	8000b38 <__aeabi_dcmpgt>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d145      	bne.n	800e14e <_dtoa_r+0x6be>
 800e0c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e0c6:	49a5      	ldr	r1, [pc, #660]	@ (800e35c <_dtoa_r+0x8cc>)
 800e0c8:	2000      	movs	r0, #0
 800e0ca:	f7f2 f8ed 	bl	80002a8 <__aeabi_dsub>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0d6:	f7f2 fd11 	bl	8000afc <__aeabi_dcmplt>
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	f43f aef5 	beq.w	800deca <_dtoa_r+0x43a>
 800e0e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e0e2:	1e73      	subs	r3, r6, #1
 800e0e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e0e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e0ea:	2b30      	cmp	r3, #48	@ 0x30
 800e0ec:	d0f8      	beq.n	800e0e0 <_dtoa_r+0x650>
 800e0ee:	9f04      	ldr	r7, [sp, #16]
 800e0f0:	e73e      	b.n	800df70 <_dtoa_r+0x4e0>
 800e0f2:	4b9b      	ldr	r3, [pc, #620]	@ (800e360 <_dtoa_r+0x8d0>)
 800e0f4:	f7f2 fa90 	bl	8000618 <__aeabi_dmul>
 800e0f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0fc:	e7bc      	b.n	800e078 <_dtoa_r+0x5e8>
 800e0fe:	d10c      	bne.n	800e11a <_dtoa_r+0x68a>
 800e100:	4b98      	ldr	r3, [pc, #608]	@ (800e364 <_dtoa_r+0x8d4>)
 800e102:	2200      	movs	r2, #0
 800e104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e108:	f7f2 fa86 	bl	8000618 <__aeabi_dmul>
 800e10c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e110:	f7f2 fd08 	bl	8000b24 <__aeabi_dcmpge>
 800e114:	2800      	cmp	r0, #0
 800e116:	f000 8157 	beq.w	800e3c8 <_dtoa_r+0x938>
 800e11a:	2400      	movs	r4, #0
 800e11c:	4625      	mov	r5, r4
 800e11e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e120:	43db      	mvns	r3, r3
 800e122:	9304      	str	r3, [sp, #16]
 800e124:	4656      	mov	r6, sl
 800e126:	2700      	movs	r7, #0
 800e128:	4621      	mov	r1, r4
 800e12a:	4658      	mov	r0, fp
 800e12c:	f000 fbb4 	bl	800e898 <_Bfree>
 800e130:	2d00      	cmp	r5, #0
 800e132:	d0dc      	beq.n	800e0ee <_dtoa_r+0x65e>
 800e134:	b12f      	cbz	r7, 800e142 <_dtoa_r+0x6b2>
 800e136:	42af      	cmp	r7, r5
 800e138:	d003      	beq.n	800e142 <_dtoa_r+0x6b2>
 800e13a:	4639      	mov	r1, r7
 800e13c:	4658      	mov	r0, fp
 800e13e:	f000 fbab 	bl	800e898 <_Bfree>
 800e142:	4629      	mov	r1, r5
 800e144:	4658      	mov	r0, fp
 800e146:	f000 fba7 	bl	800e898 <_Bfree>
 800e14a:	e7d0      	b.n	800e0ee <_dtoa_r+0x65e>
 800e14c:	9704      	str	r7, [sp, #16]
 800e14e:	4633      	mov	r3, r6
 800e150:	461e      	mov	r6, r3
 800e152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e156:	2a39      	cmp	r2, #57	@ 0x39
 800e158:	d107      	bne.n	800e16a <_dtoa_r+0x6da>
 800e15a:	459a      	cmp	sl, r3
 800e15c:	d1f8      	bne.n	800e150 <_dtoa_r+0x6c0>
 800e15e:	9a04      	ldr	r2, [sp, #16]
 800e160:	3201      	adds	r2, #1
 800e162:	9204      	str	r2, [sp, #16]
 800e164:	2230      	movs	r2, #48	@ 0x30
 800e166:	f88a 2000 	strb.w	r2, [sl]
 800e16a:	781a      	ldrb	r2, [r3, #0]
 800e16c:	3201      	adds	r2, #1
 800e16e:	701a      	strb	r2, [r3, #0]
 800e170:	e7bd      	b.n	800e0ee <_dtoa_r+0x65e>
 800e172:	4b7b      	ldr	r3, [pc, #492]	@ (800e360 <_dtoa_r+0x8d0>)
 800e174:	2200      	movs	r2, #0
 800e176:	f7f2 fa4f 	bl	8000618 <__aeabi_dmul>
 800e17a:	2200      	movs	r2, #0
 800e17c:	2300      	movs	r3, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	460d      	mov	r5, r1
 800e182:	f7f2 fcb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800e186:	2800      	cmp	r0, #0
 800e188:	f43f aebb 	beq.w	800df02 <_dtoa_r+0x472>
 800e18c:	e6f0      	b.n	800df70 <_dtoa_r+0x4e0>
 800e18e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e190:	2a00      	cmp	r2, #0
 800e192:	f000 80db 	beq.w	800e34c <_dtoa_r+0x8bc>
 800e196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e198:	2a01      	cmp	r2, #1
 800e19a:	f300 80bf 	bgt.w	800e31c <_dtoa_r+0x88c>
 800e19e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e1a0:	2a00      	cmp	r2, #0
 800e1a2:	f000 80b7 	beq.w	800e314 <_dtoa_r+0x884>
 800e1a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e1aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e1ac:	4646      	mov	r6, r8
 800e1ae:	9a08      	ldr	r2, [sp, #32]
 800e1b0:	2101      	movs	r1, #1
 800e1b2:	441a      	add	r2, r3
 800e1b4:	4658      	mov	r0, fp
 800e1b6:	4498      	add	r8, r3
 800e1b8:	9208      	str	r2, [sp, #32]
 800e1ba:	f000 fc6b 	bl	800ea94 <__i2b>
 800e1be:	4605      	mov	r5, r0
 800e1c0:	b15e      	cbz	r6, 800e1da <_dtoa_r+0x74a>
 800e1c2:	9b08      	ldr	r3, [sp, #32]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	dd08      	ble.n	800e1da <_dtoa_r+0x74a>
 800e1c8:	42b3      	cmp	r3, r6
 800e1ca:	9a08      	ldr	r2, [sp, #32]
 800e1cc:	bfa8      	it	ge
 800e1ce:	4633      	movge	r3, r6
 800e1d0:	eba8 0803 	sub.w	r8, r8, r3
 800e1d4:	1af6      	subs	r6, r6, r3
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	9308      	str	r3, [sp, #32]
 800e1da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1dc:	b1f3      	cbz	r3, 800e21c <_dtoa_r+0x78c>
 800e1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 80b7 	beq.w	800e354 <_dtoa_r+0x8c4>
 800e1e6:	b18c      	cbz	r4, 800e20c <_dtoa_r+0x77c>
 800e1e8:	4629      	mov	r1, r5
 800e1ea:	4622      	mov	r2, r4
 800e1ec:	4658      	mov	r0, fp
 800e1ee:	f000 fd11 	bl	800ec14 <__pow5mult>
 800e1f2:	464a      	mov	r2, r9
 800e1f4:	4601      	mov	r1, r0
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	4658      	mov	r0, fp
 800e1fa:	f000 fc61 	bl	800eac0 <__multiply>
 800e1fe:	4649      	mov	r1, r9
 800e200:	9004      	str	r0, [sp, #16]
 800e202:	4658      	mov	r0, fp
 800e204:	f000 fb48 	bl	800e898 <_Bfree>
 800e208:	9b04      	ldr	r3, [sp, #16]
 800e20a:	4699      	mov	r9, r3
 800e20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e20e:	1b1a      	subs	r2, r3, r4
 800e210:	d004      	beq.n	800e21c <_dtoa_r+0x78c>
 800e212:	4649      	mov	r1, r9
 800e214:	4658      	mov	r0, fp
 800e216:	f000 fcfd 	bl	800ec14 <__pow5mult>
 800e21a:	4681      	mov	r9, r0
 800e21c:	2101      	movs	r1, #1
 800e21e:	4658      	mov	r0, fp
 800e220:	f000 fc38 	bl	800ea94 <__i2b>
 800e224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e226:	4604      	mov	r4, r0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f000 81cf 	beq.w	800e5cc <_dtoa_r+0xb3c>
 800e22e:	461a      	mov	r2, r3
 800e230:	4601      	mov	r1, r0
 800e232:	4658      	mov	r0, fp
 800e234:	f000 fcee 	bl	800ec14 <__pow5mult>
 800e238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	4604      	mov	r4, r0
 800e23e:	f300 8095 	bgt.w	800e36c <_dtoa_r+0x8dc>
 800e242:	9b02      	ldr	r3, [sp, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f040 8087 	bne.w	800e358 <_dtoa_r+0x8c8>
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e250:	2b00      	cmp	r3, #0
 800e252:	f040 8089 	bne.w	800e368 <_dtoa_r+0x8d8>
 800e256:	9b03      	ldr	r3, [sp, #12]
 800e258:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e25c:	0d1b      	lsrs	r3, r3, #20
 800e25e:	051b      	lsls	r3, r3, #20
 800e260:	b12b      	cbz	r3, 800e26e <_dtoa_r+0x7de>
 800e262:	9b08      	ldr	r3, [sp, #32]
 800e264:	3301      	adds	r3, #1
 800e266:	9308      	str	r3, [sp, #32]
 800e268:	f108 0801 	add.w	r8, r8, #1
 800e26c:	2301      	movs	r3, #1
 800e26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e272:	2b00      	cmp	r3, #0
 800e274:	f000 81b0 	beq.w	800e5d8 <_dtoa_r+0xb48>
 800e278:	6923      	ldr	r3, [r4, #16]
 800e27a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e27e:	6918      	ldr	r0, [r3, #16]
 800e280:	f000 fbbc 	bl	800e9fc <__hi0bits>
 800e284:	f1c0 0020 	rsb	r0, r0, #32
 800e288:	9b08      	ldr	r3, [sp, #32]
 800e28a:	4418      	add	r0, r3
 800e28c:	f010 001f 	ands.w	r0, r0, #31
 800e290:	d077      	beq.n	800e382 <_dtoa_r+0x8f2>
 800e292:	f1c0 0320 	rsb	r3, r0, #32
 800e296:	2b04      	cmp	r3, #4
 800e298:	dd6b      	ble.n	800e372 <_dtoa_r+0x8e2>
 800e29a:	9b08      	ldr	r3, [sp, #32]
 800e29c:	f1c0 001c 	rsb	r0, r0, #28
 800e2a0:	4403      	add	r3, r0
 800e2a2:	4480      	add	r8, r0
 800e2a4:	4406      	add	r6, r0
 800e2a6:	9308      	str	r3, [sp, #32]
 800e2a8:	f1b8 0f00 	cmp.w	r8, #0
 800e2ac:	dd05      	ble.n	800e2ba <_dtoa_r+0x82a>
 800e2ae:	4649      	mov	r1, r9
 800e2b0:	4642      	mov	r2, r8
 800e2b2:	4658      	mov	r0, fp
 800e2b4:	f000 fd08 	bl	800ecc8 <__lshift>
 800e2b8:	4681      	mov	r9, r0
 800e2ba:	9b08      	ldr	r3, [sp, #32]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	dd05      	ble.n	800e2cc <_dtoa_r+0x83c>
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	4658      	mov	r0, fp
 800e2c6:	f000 fcff 	bl	800ecc8 <__lshift>
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d059      	beq.n	800e386 <_dtoa_r+0x8f6>
 800e2d2:	4621      	mov	r1, r4
 800e2d4:	4648      	mov	r0, r9
 800e2d6:	f000 fd63 	bl	800eda0 <__mcmp>
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	da53      	bge.n	800e386 <_dtoa_r+0x8f6>
 800e2de:	1e7b      	subs	r3, r7, #1
 800e2e0:	9304      	str	r3, [sp, #16]
 800e2e2:	4649      	mov	r1, r9
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	220a      	movs	r2, #10
 800e2e8:	4658      	mov	r0, fp
 800e2ea:	f000 faf7 	bl	800e8dc <__multadd>
 800e2ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2f0:	4681      	mov	r9, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f000 8172 	beq.w	800e5dc <_dtoa_r+0xb4c>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	220a      	movs	r2, #10
 800e2fe:	4658      	mov	r0, fp
 800e300:	f000 faec 	bl	800e8dc <__multadd>
 800e304:	9b00      	ldr	r3, [sp, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	4605      	mov	r5, r0
 800e30a:	dc67      	bgt.n	800e3dc <_dtoa_r+0x94c>
 800e30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e30e:	2b02      	cmp	r3, #2
 800e310:	dc41      	bgt.n	800e396 <_dtoa_r+0x906>
 800e312:	e063      	b.n	800e3dc <_dtoa_r+0x94c>
 800e314:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e316:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e31a:	e746      	b.n	800e1aa <_dtoa_r+0x71a>
 800e31c:	9b07      	ldr	r3, [sp, #28]
 800e31e:	1e5c      	subs	r4, r3, #1
 800e320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e322:	42a3      	cmp	r3, r4
 800e324:	bfbf      	itttt	lt
 800e326:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e328:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e32a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e32c:	1ae3      	sublt	r3, r4, r3
 800e32e:	bfb4      	ite	lt
 800e330:	18d2      	addlt	r2, r2, r3
 800e332:	1b1c      	subge	r4, r3, r4
 800e334:	9b07      	ldr	r3, [sp, #28]
 800e336:	bfbc      	itt	lt
 800e338:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e33a:	2400      	movlt	r4, #0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	bfb5      	itete	lt
 800e340:	eba8 0603 	sublt.w	r6, r8, r3
 800e344:	9b07      	ldrge	r3, [sp, #28]
 800e346:	2300      	movlt	r3, #0
 800e348:	4646      	movge	r6, r8
 800e34a:	e730      	b.n	800e1ae <_dtoa_r+0x71e>
 800e34c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e34e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e350:	4646      	mov	r6, r8
 800e352:	e735      	b.n	800e1c0 <_dtoa_r+0x730>
 800e354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e356:	e75c      	b.n	800e212 <_dtoa_r+0x782>
 800e358:	2300      	movs	r3, #0
 800e35a:	e788      	b.n	800e26e <_dtoa_r+0x7de>
 800e35c:	3fe00000 	.word	0x3fe00000
 800e360:	40240000 	.word	0x40240000
 800e364:	40140000 	.word	0x40140000
 800e368:	9b02      	ldr	r3, [sp, #8]
 800e36a:	e780      	b.n	800e26e <_dtoa_r+0x7de>
 800e36c:	2300      	movs	r3, #0
 800e36e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e370:	e782      	b.n	800e278 <_dtoa_r+0x7e8>
 800e372:	d099      	beq.n	800e2a8 <_dtoa_r+0x818>
 800e374:	9a08      	ldr	r2, [sp, #32]
 800e376:	331c      	adds	r3, #28
 800e378:	441a      	add	r2, r3
 800e37a:	4498      	add	r8, r3
 800e37c:	441e      	add	r6, r3
 800e37e:	9208      	str	r2, [sp, #32]
 800e380:	e792      	b.n	800e2a8 <_dtoa_r+0x818>
 800e382:	4603      	mov	r3, r0
 800e384:	e7f6      	b.n	800e374 <_dtoa_r+0x8e4>
 800e386:	9b07      	ldr	r3, [sp, #28]
 800e388:	9704      	str	r7, [sp, #16]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	dc20      	bgt.n	800e3d0 <_dtoa_r+0x940>
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e392:	2b02      	cmp	r3, #2
 800e394:	dd1e      	ble.n	800e3d4 <_dtoa_r+0x944>
 800e396:	9b00      	ldr	r3, [sp, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f47f aec0 	bne.w	800e11e <_dtoa_r+0x68e>
 800e39e:	4621      	mov	r1, r4
 800e3a0:	2205      	movs	r2, #5
 800e3a2:	4658      	mov	r0, fp
 800e3a4:	f000 fa9a 	bl	800e8dc <__multadd>
 800e3a8:	4601      	mov	r1, r0
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	4648      	mov	r0, r9
 800e3ae:	f000 fcf7 	bl	800eda0 <__mcmp>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	f77f aeb3 	ble.w	800e11e <_dtoa_r+0x68e>
 800e3b8:	4656      	mov	r6, sl
 800e3ba:	2331      	movs	r3, #49	@ 0x31
 800e3bc:	f806 3b01 	strb.w	r3, [r6], #1
 800e3c0:	9b04      	ldr	r3, [sp, #16]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	9304      	str	r3, [sp, #16]
 800e3c6:	e6ae      	b.n	800e126 <_dtoa_r+0x696>
 800e3c8:	9c07      	ldr	r4, [sp, #28]
 800e3ca:	9704      	str	r7, [sp, #16]
 800e3cc:	4625      	mov	r5, r4
 800e3ce:	e7f3      	b.n	800e3b8 <_dtoa_r+0x928>
 800e3d0:	9b07      	ldr	r3, [sp, #28]
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	f000 8104 	beq.w	800e5e4 <_dtoa_r+0xb54>
 800e3dc:	2e00      	cmp	r6, #0
 800e3de:	dd05      	ble.n	800e3ec <_dtoa_r+0x95c>
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	4632      	mov	r2, r6
 800e3e4:	4658      	mov	r0, fp
 800e3e6:	f000 fc6f 	bl	800ecc8 <__lshift>
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d05a      	beq.n	800e4a8 <_dtoa_r+0xa18>
 800e3f2:	6869      	ldr	r1, [r5, #4]
 800e3f4:	4658      	mov	r0, fp
 800e3f6:	f000 fa0f 	bl	800e818 <_Balloc>
 800e3fa:	4606      	mov	r6, r0
 800e3fc:	b928      	cbnz	r0, 800e40a <_dtoa_r+0x97a>
 800e3fe:	4b84      	ldr	r3, [pc, #528]	@ (800e610 <_dtoa_r+0xb80>)
 800e400:	4602      	mov	r2, r0
 800e402:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e406:	f7ff bb5a 	b.w	800dabe <_dtoa_r+0x2e>
 800e40a:	692a      	ldr	r2, [r5, #16]
 800e40c:	3202      	adds	r2, #2
 800e40e:	0092      	lsls	r2, r2, #2
 800e410:	f105 010c 	add.w	r1, r5, #12
 800e414:	300c      	adds	r0, #12
 800e416:	f7ff fa9c 	bl	800d952 <memcpy>
 800e41a:	2201      	movs	r2, #1
 800e41c:	4631      	mov	r1, r6
 800e41e:	4658      	mov	r0, fp
 800e420:	f000 fc52 	bl	800ecc8 <__lshift>
 800e424:	f10a 0301 	add.w	r3, sl, #1
 800e428:	9307      	str	r3, [sp, #28]
 800e42a:	9b00      	ldr	r3, [sp, #0]
 800e42c:	4453      	add	r3, sl
 800e42e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e430:	9b02      	ldr	r3, [sp, #8]
 800e432:	f003 0301 	and.w	r3, r3, #1
 800e436:	462f      	mov	r7, r5
 800e438:	930a      	str	r3, [sp, #40]	@ 0x28
 800e43a:	4605      	mov	r5, r0
 800e43c:	9b07      	ldr	r3, [sp, #28]
 800e43e:	4621      	mov	r1, r4
 800e440:	3b01      	subs	r3, #1
 800e442:	4648      	mov	r0, r9
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	f7ff fa99 	bl	800d97c <quorem>
 800e44a:	4639      	mov	r1, r7
 800e44c:	9002      	str	r0, [sp, #8]
 800e44e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e452:	4648      	mov	r0, r9
 800e454:	f000 fca4 	bl	800eda0 <__mcmp>
 800e458:	462a      	mov	r2, r5
 800e45a:	9008      	str	r0, [sp, #32]
 800e45c:	4621      	mov	r1, r4
 800e45e:	4658      	mov	r0, fp
 800e460:	f000 fcba 	bl	800edd8 <__mdiff>
 800e464:	68c2      	ldr	r2, [r0, #12]
 800e466:	4606      	mov	r6, r0
 800e468:	bb02      	cbnz	r2, 800e4ac <_dtoa_r+0xa1c>
 800e46a:	4601      	mov	r1, r0
 800e46c:	4648      	mov	r0, r9
 800e46e:	f000 fc97 	bl	800eda0 <__mcmp>
 800e472:	4602      	mov	r2, r0
 800e474:	4631      	mov	r1, r6
 800e476:	4658      	mov	r0, fp
 800e478:	920e      	str	r2, [sp, #56]	@ 0x38
 800e47a:	f000 fa0d 	bl	800e898 <_Bfree>
 800e47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e480:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e482:	9e07      	ldr	r6, [sp, #28]
 800e484:	ea43 0102 	orr.w	r1, r3, r2
 800e488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e48a:	4319      	orrs	r1, r3
 800e48c:	d110      	bne.n	800e4b0 <_dtoa_r+0xa20>
 800e48e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e492:	d029      	beq.n	800e4e8 <_dtoa_r+0xa58>
 800e494:	9b08      	ldr	r3, [sp, #32]
 800e496:	2b00      	cmp	r3, #0
 800e498:	dd02      	ble.n	800e4a0 <_dtoa_r+0xa10>
 800e49a:	9b02      	ldr	r3, [sp, #8]
 800e49c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e4a0:	9b00      	ldr	r3, [sp, #0]
 800e4a2:	f883 8000 	strb.w	r8, [r3]
 800e4a6:	e63f      	b.n	800e128 <_dtoa_r+0x698>
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	e7bb      	b.n	800e424 <_dtoa_r+0x994>
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	e7e1      	b.n	800e474 <_dtoa_r+0x9e4>
 800e4b0:	9b08      	ldr	r3, [sp, #32]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	db04      	blt.n	800e4c0 <_dtoa_r+0xa30>
 800e4b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e4b8:	430b      	orrs	r3, r1
 800e4ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4bc:	430b      	orrs	r3, r1
 800e4be:	d120      	bne.n	800e502 <_dtoa_r+0xa72>
 800e4c0:	2a00      	cmp	r2, #0
 800e4c2:	dded      	ble.n	800e4a0 <_dtoa_r+0xa10>
 800e4c4:	4649      	mov	r1, r9
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	4658      	mov	r0, fp
 800e4ca:	f000 fbfd 	bl	800ecc8 <__lshift>
 800e4ce:	4621      	mov	r1, r4
 800e4d0:	4681      	mov	r9, r0
 800e4d2:	f000 fc65 	bl	800eda0 <__mcmp>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	dc03      	bgt.n	800e4e2 <_dtoa_r+0xa52>
 800e4da:	d1e1      	bne.n	800e4a0 <_dtoa_r+0xa10>
 800e4dc:	f018 0f01 	tst.w	r8, #1
 800e4e0:	d0de      	beq.n	800e4a0 <_dtoa_r+0xa10>
 800e4e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e4e6:	d1d8      	bne.n	800e49a <_dtoa_r+0xa0a>
 800e4e8:	9a00      	ldr	r2, [sp, #0]
 800e4ea:	2339      	movs	r3, #57	@ 0x39
 800e4ec:	7013      	strb	r3, [r2, #0]
 800e4ee:	4633      	mov	r3, r6
 800e4f0:	461e      	mov	r6, r3
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e4f8:	2a39      	cmp	r2, #57	@ 0x39
 800e4fa:	d052      	beq.n	800e5a2 <_dtoa_r+0xb12>
 800e4fc:	3201      	adds	r2, #1
 800e4fe:	701a      	strb	r2, [r3, #0]
 800e500:	e612      	b.n	800e128 <_dtoa_r+0x698>
 800e502:	2a00      	cmp	r2, #0
 800e504:	dd07      	ble.n	800e516 <_dtoa_r+0xa86>
 800e506:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e50a:	d0ed      	beq.n	800e4e8 <_dtoa_r+0xa58>
 800e50c:	9a00      	ldr	r2, [sp, #0]
 800e50e:	f108 0301 	add.w	r3, r8, #1
 800e512:	7013      	strb	r3, [r2, #0]
 800e514:	e608      	b.n	800e128 <_dtoa_r+0x698>
 800e516:	9b07      	ldr	r3, [sp, #28]
 800e518:	9a07      	ldr	r2, [sp, #28]
 800e51a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e51e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e520:	4293      	cmp	r3, r2
 800e522:	d028      	beq.n	800e576 <_dtoa_r+0xae6>
 800e524:	4649      	mov	r1, r9
 800e526:	2300      	movs	r3, #0
 800e528:	220a      	movs	r2, #10
 800e52a:	4658      	mov	r0, fp
 800e52c:	f000 f9d6 	bl	800e8dc <__multadd>
 800e530:	42af      	cmp	r7, r5
 800e532:	4681      	mov	r9, r0
 800e534:	f04f 0300 	mov.w	r3, #0
 800e538:	f04f 020a 	mov.w	r2, #10
 800e53c:	4639      	mov	r1, r7
 800e53e:	4658      	mov	r0, fp
 800e540:	d107      	bne.n	800e552 <_dtoa_r+0xac2>
 800e542:	f000 f9cb 	bl	800e8dc <__multadd>
 800e546:	4607      	mov	r7, r0
 800e548:	4605      	mov	r5, r0
 800e54a:	9b07      	ldr	r3, [sp, #28]
 800e54c:	3301      	adds	r3, #1
 800e54e:	9307      	str	r3, [sp, #28]
 800e550:	e774      	b.n	800e43c <_dtoa_r+0x9ac>
 800e552:	f000 f9c3 	bl	800e8dc <__multadd>
 800e556:	4629      	mov	r1, r5
 800e558:	4607      	mov	r7, r0
 800e55a:	2300      	movs	r3, #0
 800e55c:	220a      	movs	r2, #10
 800e55e:	4658      	mov	r0, fp
 800e560:	f000 f9bc 	bl	800e8dc <__multadd>
 800e564:	4605      	mov	r5, r0
 800e566:	e7f0      	b.n	800e54a <_dtoa_r+0xaba>
 800e568:	9b00      	ldr	r3, [sp, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	bfcc      	ite	gt
 800e56e:	461e      	movgt	r6, r3
 800e570:	2601      	movle	r6, #1
 800e572:	4456      	add	r6, sl
 800e574:	2700      	movs	r7, #0
 800e576:	4649      	mov	r1, r9
 800e578:	2201      	movs	r2, #1
 800e57a:	4658      	mov	r0, fp
 800e57c:	f000 fba4 	bl	800ecc8 <__lshift>
 800e580:	4621      	mov	r1, r4
 800e582:	4681      	mov	r9, r0
 800e584:	f000 fc0c 	bl	800eda0 <__mcmp>
 800e588:	2800      	cmp	r0, #0
 800e58a:	dcb0      	bgt.n	800e4ee <_dtoa_r+0xa5e>
 800e58c:	d102      	bne.n	800e594 <_dtoa_r+0xb04>
 800e58e:	f018 0f01 	tst.w	r8, #1
 800e592:	d1ac      	bne.n	800e4ee <_dtoa_r+0xa5e>
 800e594:	4633      	mov	r3, r6
 800e596:	461e      	mov	r6, r3
 800e598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e59c:	2a30      	cmp	r2, #48	@ 0x30
 800e59e:	d0fa      	beq.n	800e596 <_dtoa_r+0xb06>
 800e5a0:	e5c2      	b.n	800e128 <_dtoa_r+0x698>
 800e5a2:	459a      	cmp	sl, r3
 800e5a4:	d1a4      	bne.n	800e4f0 <_dtoa_r+0xa60>
 800e5a6:	9b04      	ldr	r3, [sp, #16]
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	9304      	str	r3, [sp, #16]
 800e5ac:	2331      	movs	r3, #49	@ 0x31
 800e5ae:	f88a 3000 	strb.w	r3, [sl]
 800e5b2:	e5b9      	b.n	800e128 <_dtoa_r+0x698>
 800e5b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e5b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e614 <_dtoa_r+0xb84>
 800e5ba:	b11b      	cbz	r3, 800e5c4 <_dtoa_r+0xb34>
 800e5bc:	f10a 0308 	add.w	r3, sl, #8
 800e5c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e5c2:	6013      	str	r3, [r2, #0]
 800e5c4:	4650      	mov	r0, sl
 800e5c6:	b019      	add	sp, #100	@ 0x64
 800e5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	f77f ae37 	ble.w	800e242 <_dtoa_r+0x7b2>
 800e5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5d8:	2001      	movs	r0, #1
 800e5da:	e655      	b.n	800e288 <_dtoa_r+0x7f8>
 800e5dc:	9b00      	ldr	r3, [sp, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	f77f aed6 	ble.w	800e390 <_dtoa_r+0x900>
 800e5e4:	4656      	mov	r6, sl
 800e5e6:	4621      	mov	r1, r4
 800e5e8:	4648      	mov	r0, r9
 800e5ea:	f7ff f9c7 	bl	800d97c <quorem>
 800e5ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e5f2:	f806 8b01 	strb.w	r8, [r6], #1
 800e5f6:	9b00      	ldr	r3, [sp, #0]
 800e5f8:	eba6 020a 	sub.w	r2, r6, sl
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	ddb3      	ble.n	800e568 <_dtoa_r+0xad8>
 800e600:	4649      	mov	r1, r9
 800e602:	2300      	movs	r3, #0
 800e604:	220a      	movs	r2, #10
 800e606:	4658      	mov	r0, fp
 800e608:	f000 f968 	bl	800e8dc <__multadd>
 800e60c:	4681      	mov	r9, r0
 800e60e:	e7ea      	b.n	800e5e6 <_dtoa_r+0xb56>
 800e610:	08013a32 	.word	0x08013a32
 800e614:	080139b6 	.word	0x080139b6

0800e618 <_free_r>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	4605      	mov	r5, r0
 800e61c:	2900      	cmp	r1, #0
 800e61e:	d041      	beq.n	800e6a4 <_free_r+0x8c>
 800e620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e624:	1f0c      	subs	r4, r1, #4
 800e626:	2b00      	cmp	r3, #0
 800e628:	bfb8      	it	lt
 800e62a:	18e4      	addlt	r4, r4, r3
 800e62c:	f000 f8e8 	bl	800e800 <__malloc_lock>
 800e630:	4a1d      	ldr	r2, [pc, #116]	@ (800e6a8 <_free_r+0x90>)
 800e632:	6813      	ldr	r3, [r2, #0]
 800e634:	b933      	cbnz	r3, 800e644 <_free_r+0x2c>
 800e636:	6063      	str	r3, [r4, #4]
 800e638:	6014      	str	r4, [r2, #0]
 800e63a:	4628      	mov	r0, r5
 800e63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e640:	f000 b8e4 	b.w	800e80c <__malloc_unlock>
 800e644:	42a3      	cmp	r3, r4
 800e646:	d908      	bls.n	800e65a <_free_r+0x42>
 800e648:	6820      	ldr	r0, [r4, #0]
 800e64a:	1821      	adds	r1, r4, r0
 800e64c:	428b      	cmp	r3, r1
 800e64e:	bf01      	itttt	eq
 800e650:	6819      	ldreq	r1, [r3, #0]
 800e652:	685b      	ldreq	r3, [r3, #4]
 800e654:	1809      	addeq	r1, r1, r0
 800e656:	6021      	streq	r1, [r4, #0]
 800e658:	e7ed      	b.n	800e636 <_free_r+0x1e>
 800e65a:	461a      	mov	r2, r3
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	b10b      	cbz	r3, 800e664 <_free_r+0x4c>
 800e660:	42a3      	cmp	r3, r4
 800e662:	d9fa      	bls.n	800e65a <_free_r+0x42>
 800e664:	6811      	ldr	r1, [r2, #0]
 800e666:	1850      	adds	r0, r2, r1
 800e668:	42a0      	cmp	r0, r4
 800e66a:	d10b      	bne.n	800e684 <_free_r+0x6c>
 800e66c:	6820      	ldr	r0, [r4, #0]
 800e66e:	4401      	add	r1, r0
 800e670:	1850      	adds	r0, r2, r1
 800e672:	4283      	cmp	r3, r0
 800e674:	6011      	str	r1, [r2, #0]
 800e676:	d1e0      	bne.n	800e63a <_free_r+0x22>
 800e678:	6818      	ldr	r0, [r3, #0]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	6053      	str	r3, [r2, #4]
 800e67e:	4408      	add	r0, r1
 800e680:	6010      	str	r0, [r2, #0]
 800e682:	e7da      	b.n	800e63a <_free_r+0x22>
 800e684:	d902      	bls.n	800e68c <_free_r+0x74>
 800e686:	230c      	movs	r3, #12
 800e688:	602b      	str	r3, [r5, #0]
 800e68a:	e7d6      	b.n	800e63a <_free_r+0x22>
 800e68c:	6820      	ldr	r0, [r4, #0]
 800e68e:	1821      	adds	r1, r4, r0
 800e690:	428b      	cmp	r3, r1
 800e692:	bf04      	itt	eq
 800e694:	6819      	ldreq	r1, [r3, #0]
 800e696:	685b      	ldreq	r3, [r3, #4]
 800e698:	6063      	str	r3, [r4, #4]
 800e69a:	bf04      	itt	eq
 800e69c:	1809      	addeq	r1, r1, r0
 800e69e:	6021      	streq	r1, [r4, #0]
 800e6a0:	6054      	str	r4, [r2, #4]
 800e6a2:	e7ca      	b.n	800e63a <_free_r+0x22>
 800e6a4:	bd38      	pop	{r3, r4, r5, pc}
 800e6a6:	bf00      	nop
 800e6a8:	20004dd8 	.word	0x20004dd8

0800e6ac <malloc>:
 800e6ac:	4b02      	ldr	r3, [pc, #8]	@ (800e6b8 <malloc+0xc>)
 800e6ae:	4601      	mov	r1, r0
 800e6b0:	6818      	ldr	r0, [r3, #0]
 800e6b2:	f000 b825 	b.w	800e700 <_malloc_r>
 800e6b6:	bf00      	nop
 800e6b8:	200003d0 	.word	0x200003d0

0800e6bc <sbrk_aligned>:
 800e6bc:	b570      	push	{r4, r5, r6, lr}
 800e6be:	4e0f      	ldr	r6, [pc, #60]	@ (800e6fc <sbrk_aligned+0x40>)
 800e6c0:	460c      	mov	r4, r1
 800e6c2:	6831      	ldr	r1, [r6, #0]
 800e6c4:	4605      	mov	r5, r0
 800e6c6:	b911      	cbnz	r1, 800e6ce <sbrk_aligned+0x12>
 800e6c8:	f001 fe14 	bl	80102f4 <_sbrk_r>
 800e6cc:	6030      	str	r0, [r6, #0]
 800e6ce:	4621      	mov	r1, r4
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f001 fe0f 	bl	80102f4 <_sbrk_r>
 800e6d6:	1c43      	adds	r3, r0, #1
 800e6d8:	d103      	bne.n	800e6e2 <sbrk_aligned+0x26>
 800e6da:	f04f 34ff 	mov.w	r4, #4294967295
 800e6de:	4620      	mov	r0, r4
 800e6e0:	bd70      	pop	{r4, r5, r6, pc}
 800e6e2:	1cc4      	adds	r4, r0, #3
 800e6e4:	f024 0403 	bic.w	r4, r4, #3
 800e6e8:	42a0      	cmp	r0, r4
 800e6ea:	d0f8      	beq.n	800e6de <sbrk_aligned+0x22>
 800e6ec:	1a21      	subs	r1, r4, r0
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f001 fe00 	bl	80102f4 <_sbrk_r>
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	d1f2      	bne.n	800e6de <sbrk_aligned+0x22>
 800e6f8:	e7ef      	b.n	800e6da <sbrk_aligned+0x1e>
 800e6fa:	bf00      	nop
 800e6fc:	20004dd4 	.word	0x20004dd4

0800e700 <_malloc_r>:
 800e700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e704:	1ccd      	adds	r5, r1, #3
 800e706:	f025 0503 	bic.w	r5, r5, #3
 800e70a:	3508      	adds	r5, #8
 800e70c:	2d0c      	cmp	r5, #12
 800e70e:	bf38      	it	cc
 800e710:	250c      	movcc	r5, #12
 800e712:	2d00      	cmp	r5, #0
 800e714:	4606      	mov	r6, r0
 800e716:	db01      	blt.n	800e71c <_malloc_r+0x1c>
 800e718:	42a9      	cmp	r1, r5
 800e71a:	d904      	bls.n	800e726 <_malloc_r+0x26>
 800e71c:	230c      	movs	r3, #12
 800e71e:	6033      	str	r3, [r6, #0]
 800e720:	2000      	movs	r0, #0
 800e722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e7fc <_malloc_r+0xfc>
 800e72a:	f000 f869 	bl	800e800 <__malloc_lock>
 800e72e:	f8d8 3000 	ldr.w	r3, [r8]
 800e732:	461c      	mov	r4, r3
 800e734:	bb44      	cbnz	r4, 800e788 <_malloc_r+0x88>
 800e736:	4629      	mov	r1, r5
 800e738:	4630      	mov	r0, r6
 800e73a:	f7ff ffbf 	bl	800e6bc <sbrk_aligned>
 800e73e:	1c43      	adds	r3, r0, #1
 800e740:	4604      	mov	r4, r0
 800e742:	d158      	bne.n	800e7f6 <_malloc_r+0xf6>
 800e744:	f8d8 4000 	ldr.w	r4, [r8]
 800e748:	4627      	mov	r7, r4
 800e74a:	2f00      	cmp	r7, #0
 800e74c:	d143      	bne.n	800e7d6 <_malloc_r+0xd6>
 800e74e:	2c00      	cmp	r4, #0
 800e750:	d04b      	beq.n	800e7ea <_malloc_r+0xea>
 800e752:	6823      	ldr	r3, [r4, #0]
 800e754:	4639      	mov	r1, r7
 800e756:	4630      	mov	r0, r6
 800e758:	eb04 0903 	add.w	r9, r4, r3
 800e75c:	f001 fdca 	bl	80102f4 <_sbrk_r>
 800e760:	4581      	cmp	r9, r0
 800e762:	d142      	bne.n	800e7ea <_malloc_r+0xea>
 800e764:	6821      	ldr	r1, [r4, #0]
 800e766:	1a6d      	subs	r5, r5, r1
 800e768:	4629      	mov	r1, r5
 800e76a:	4630      	mov	r0, r6
 800e76c:	f7ff ffa6 	bl	800e6bc <sbrk_aligned>
 800e770:	3001      	adds	r0, #1
 800e772:	d03a      	beq.n	800e7ea <_malloc_r+0xea>
 800e774:	6823      	ldr	r3, [r4, #0]
 800e776:	442b      	add	r3, r5
 800e778:	6023      	str	r3, [r4, #0]
 800e77a:	f8d8 3000 	ldr.w	r3, [r8]
 800e77e:	685a      	ldr	r2, [r3, #4]
 800e780:	bb62      	cbnz	r2, 800e7dc <_malloc_r+0xdc>
 800e782:	f8c8 7000 	str.w	r7, [r8]
 800e786:	e00f      	b.n	800e7a8 <_malloc_r+0xa8>
 800e788:	6822      	ldr	r2, [r4, #0]
 800e78a:	1b52      	subs	r2, r2, r5
 800e78c:	d420      	bmi.n	800e7d0 <_malloc_r+0xd0>
 800e78e:	2a0b      	cmp	r2, #11
 800e790:	d917      	bls.n	800e7c2 <_malloc_r+0xc2>
 800e792:	1961      	adds	r1, r4, r5
 800e794:	42a3      	cmp	r3, r4
 800e796:	6025      	str	r5, [r4, #0]
 800e798:	bf18      	it	ne
 800e79a:	6059      	strne	r1, [r3, #4]
 800e79c:	6863      	ldr	r3, [r4, #4]
 800e79e:	bf08      	it	eq
 800e7a0:	f8c8 1000 	streq.w	r1, [r8]
 800e7a4:	5162      	str	r2, [r4, r5]
 800e7a6:	604b      	str	r3, [r1, #4]
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	f000 f82f 	bl	800e80c <__malloc_unlock>
 800e7ae:	f104 000b 	add.w	r0, r4, #11
 800e7b2:	1d23      	adds	r3, r4, #4
 800e7b4:	f020 0007 	bic.w	r0, r0, #7
 800e7b8:	1ac2      	subs	r2, r0, r3
 800e7ba:	bf1c      	itt	ne
 800e7bc:	1a1b      	subne	r3, r3, r0
 800e7be:	50a3      	strne	r3, [r4, r2]
 800e7c0:	e7af      	b.n	800e722 <_malloc_r+0x22>
 800e7c2:	6862      	ldr	r2, [r4, #4]
 800e7c4:	42a3      	cmp	r3, r4
 800e7c6:	bf0c      	ite	eq
 800e7c8:	f8c8 2000 	streq.w	r2, [r8]
 800e7cc:	605a      	strne	r2, [r3, #4]
 800e7ce:	e7eb      	b.n	800e7a8 <_malloc_r+0xa8>
 800e7d0:	4623      	mov	r3, r4
 800e7d2:	6864      	ldr	r4, [r4, #4]
 800e7d4:	e7ae      	b.n	800e734 <_malloc_r+0x34>
 800e7d6:	463c      	mov	r4, r7
 800e7d8:	687f      	ldr	r7, [r7, #4]
 800e7da:	e7b6      	b.n	800e74a <_malloc_r+0x4a>
 800e7dc:	461a      	mov	r2, r3
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	42a3      	cmp	r3, r4
 800e7e2:	d1fb      	bne.n	800e7dc <_malloc_r+0xdc>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	6053      	str	r3, [r2, #4]
 800e7e8:	e7de      	b.n	800e7a8 <_malloc_r+0xa8>
 800e7ea:	230c      	movs	r3, #12
 800e7ec:	6033      	str	r3, [r6, #0]
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f000 f80c 	bl	800e80c <__malloc_unlock>
 800e7f4:	e794      	b.n	800e720 <_malloc_r+0x20>
 800e7f6:	6005      	str	r5, [r0, #0]
 800e7f8:	e7d6      	b.n	800e7a8 <_malloc_r+0xa8>
 800e7fa:	bf00      	nop
 800e7fc:	20004dd8 	.word	0x20004dd8

0800e800 <__malloc_lock>:
 800e800:	4801      	ldr	r0, [pc, #4]	@ (800e808 <__malloc_lock+0x8>)
 800e802:	f7ff b8a4 	b.w	800d94e <__retarget_lock_acquire_recursive>
 800e806:	bf00      	nop
 800e808:	20004dd0 	.word	0x20004dd0

0800e80c <__malloc_unlock>:
 800e80c:	4801      	ldr	r0, [pc, #4]	@ (800e814 <__malloc_unlock+0x8>)
 800e80e:	f7ff b89f 	b.w	800d950 <__retarget_lock_release_recursive>
 800e812:	bf00      	nop
 800e814:	20004dd0 	.word	0x20004dd0

0800e818 <_Balloc>:
 800e818:	b570      	push	{r4, r5, r6, lr}
 800e81a:	69c6      	ldr	r6, [r0, #28]
 800e81c:	4604      	mov	r4, r0
 800e81e:	460d      	mov	r5, r1
 800e820:	b976      	cbnz	r6, 800e840 <_Balloc+0x28>
 800e822:	2010      	movs	r0, #16
 800e824:	f7ff ff42 	bl	800e6ac <malloc>
 800e828:	4602      	mov	r2, r0
 800e82a:	61e0      	str	r0, [r4, #28]
 800e82c:	b920      	cbnz	r0, 800e838 <_Balloc+0x20>
 800e82e:	4b18      	ldr	r3, [pc, #96]	@ (800e890 <_Balloc+0x78>)
 800e830:	4818      	ldr	r0, [pc, #96]	@ (800e894 <_Balloc+0x7c>)
 800e832:	216b      	movs	r1, #107	@ 0x6b
 800e834:	f001 fd78 	bl	8010328 <__assert_func>
 800e838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e83c:	6006      	str	r6, [r0, #0]
 800e83e:	60c6      	str	r6, [r0, #12]
 800e840:	69e6      	ldr	r6, [r4, #28]
 800e842:	68f3      	ldr	r3, [r6, #12]
 800e844:	b183      	cbz	r3, 800e868 <_Balloc+0x50>
 800e846:	69e3      	ldr	r3, [r4, #28]
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e84e:	b9b8      	cbnz	r0, 800e880 <_Balloc+0x68>
 800e850:	2101      	movs	r1, #1
 800e852:	fa01 f605 	lsl.w	r6, r1, r5
 800e856:	1d72      	adds	r2, r6, #5
 800e858:	0092      	lsls	r2, r2, #2
 800e85a:	4620      	mov	r0, r4
 800e85c:	f001 fd82 	bl	8010364 <_calloc_r>
 800e860:	b160      	cbz	r0, 800e87c <_Balloc+0x64>
 800e862:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e866:	e00e      	b.n	800e886 <_Balloc+0x6e>
 800e868:	2221      	movs	r2, #33	@ 0x21
 800e86a:	2104      	movs	r1, #4
 800e86c:	4620      	mov	r0, r4
 800e86e:	f001 fd79 	bl	8010364 <_calloc_r>
 800e872:	69e3      	ldr	r3, [r4, #28]
 800e874:	60f0      	str	r0, [r6, #12]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1e4      	bne.n	800e846 <_Balloc+0x2e>
 800e87c:	2000      	movs	r0, #0
 800e87e:	bd70      	pop	{r4, r5, r6, pc}
 800e880:	6802      	ldr	r2, [r0, #0]
 800e882:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e886:	2300      	movs	r3, #0
 800e888:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e88c:	e7f7      	b.n	800e87e <_Balloc+0x66>
 800e88e:	bf00      	nop
 800e890:	080139c3 	.word	0x080139c3
 800e894:	08013a43 	.word	0x08013a43

0800e898 <_Bfree>:
 800e898:	b570      	push	{r4, r5, r6, lr}
 800e89a:	69c6      	ldr	r6, [r0, #28]
 800e89c:	4605      	mov	r5, r0
 800e89e:	460c      	mov	r4, r1
 800e8a0:	b976      	cbnz	r6, 800e8c0 <_Bfree+0x28>
 800e8a2:	2010      	movs	r0, #16
 800e8a4:	f7ff ff02 	bl	800e6ac <malloc>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	61e8      	str	r0, [r5, #28]
 800e8ac:	b920      	cbnz	r0, 800e8b8 <_Bfree+0x20>
 800e8ae:	4b09      	ldr	r3, [pc, #36]	@ (800e8d4 <_Bfree+0x3c>)
 800e8b0:	4809      	ldr	r0, [pc, #36]	@ (800e8d8 <_Bfree+0x40>)
 800e8b2:	218f      	movs	r1, #143	@ 0x8f
 800e8b4:	f001 fd38 	bl	8010328 <__assert_func>
 800e8b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8bc:	6006      	str	r6, [r0, #0]
 800e8be:	60c6      	str	r6, [r0, #12]
 800e8c0:	b13c      	cbz	r4, 800e8d2 <_Bfree+0x3a>
 800e8c2:	69eb      	ldr	r3, [r5, #28]
 800e8c4:	6862      	ldr	r2, [r4, #4]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8cc:	6021      	str	r1, [r4, #0]
 800e8ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8d2:	bd70      	pop	{r4, r5, r6, pc}
 800e8d4:	080139c3 	.word	0x080139c3
 800e8d8:	08013a43 	.word	0x08013a43

0800e8dc <__multadd>:
 800e8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e0:	690d      	ldr	r5, [r1, #16]
 800e8e2:	4607      	mov	r7, r0
 800e8e4:	460c      	mov	r4, r1
 800e8e6:	461e      	mov	r6, r3
 800e8e8:	f101 0c14 	add.w	ip, r1, #20
 800e8ec:	2000      	movs	r0, #0
 800e8ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e8f2:	b299      	uxth	r1, r3
 800e8f4:	fb02 6101 	mla	r1, r2, r1, r6
 800e8f8:	0c1e      	lsrs	r6, r3, #16
 800e8fa:	0c0b      	lsrs	r3, r1, #16
 800e8fc:	fb02 3306 	mla	r3, r2, r6, r3
 800e900:	b289      	uxth	r1, r1
 800e902:	3001      	adds	r0, #1
 800e904:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e908:	4285      	cmp	r5, r0
 800e90a:	f84c 1b04 	str.w	r1, [ip], #4
 800e90e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e912:	dcec      	bgt.n	800e8ee <__multadd+0x12>
 800e914:	b30e      	cbz	r6, 800e95a <__multadd+0x7e>
 800e916:	68a3      	ldr	r3, [r4, #8]
 800e918:	42ab      	cmp	r3, r5
 800e91a:	dc19      	bgt.n	800e950 <__multadd+0x74>
 800e91c:	6861      	ldr	r1, [r4, #4]
 800e91e:	4638      	mov	r0, r7
 800e920:	3101      	adds	r1, #1
 800e922:	f7ff ff79 	bl	800e818 <_Balloc>
 800e926:	4680      	mov	r8, r0
 800e928:	b928      	cbnz	r0, 800e936 <__multadd+0x5a>
 800e92a:	4602      	mov	r2, r0
 800e92c:	4b0c      	ldr	r3, [pc, #48]	@ (800e960 <__multadd+0x84>)
 800e92e:	480d      	ldr	r0, [pc, #52]	@ (800e964 <__multadd+0x88>)
 800e930:	21ba      	movs	r1, #186	@ 0xba
 800e932:	f001 fcf9 	bl	8010328 <__assert_func>
 800e936:	6922      	ldr	r2, [r4, #16]
 800e938:	3202      	adds	r2, #2
 800e93a:	f104 010c 	add.w	r1, r4, #12
 800e93e:	0092      	lsls	r2, r2, #2
 800e940:	300c      	adds	r0, #12
 800e942:	f7ff f806 	bl	800d952 <memcpy>
 800e946:	4621      	mov	r1, r4
 800e948:	4638      	mov	r0, r7
 800e94a:	f7ff ffa5 	bl	800e898 <_Bfree>
 800e94e:	4644      	mov	r4, r8
 800e950:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e954:	3501      	adds	r5, #1
 800e956:	615e      	str	r6, [r3, #20]
 800e958:	6125      	str	r5, [r4, #16]
 800e95a:	4620      	mov	r0, r4
 800e95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e960:	08013a32 	.word	0x08013a32
 800e964:	08013a43 	.word	0x08013a43

0800e968 <__s2b>:
 800e968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e96c:	460c      	mov	r4, r1
 800e96e:	4615      	mov	r5, r2
 800e970:	461f      	mov	r7, r3
 800e972:	2209      	movs	r2, #9
 800e974:	3308      	adds	r3, #8
 800e976:	4606      	mov	r6, r0
 800e978:	fb93 f3f2 	sdiv	r3, r3, r2
 800e97c:	2100      	movs	r1, #0
 800e97e:	2201      	movs	r2, #1
 800e980:	429a      	cmp	r2, r3
 800e982:	db09      	blt.n	800e998 <__s2b+0x30>
 800e984:	4630      	mov	r0, r6
 800e986:	f7ff ff47 	bl	800e818 <_Balloc>
 800e98a:	b940      	cbnz	r0, 800e99e <__s2b+0x36>
 800e98c:	4602      	mov	r2, r0
 800e98e:	4b19      	ldr	r3, [pc, #100]	@ (800e9f4 <__s2b+0x8c>)
 800e990:	4819      	ldr	r0, [pc, #100]	@ (800e9f8 <__s2b+0x90>)
 800e992:	21d3      	movs	r1, #211	@ 0xd3
 800e994:	f001 fcc8 	bl	8010328 <__assert_func>
 800e998:	0052      	lsls	r2, r2, #1
 800e99a:	3101      	adds	r1, #1
 800e99c:	e7f0      	b.n	800e980 <__s2b+0x18>
 800e99e:	9b08      	ldr	r3, [sp, #32]
 800e9a0:	6143      	str	r3, [r0, #20]
 800e9a2:	2d09      	cmp	r5, #9
 800e9a4:	f04f 0301 	mov.w	r3, #1
 800e9a8:	6103      	str	r3, [r0, #16]
 800e9aa:	dd16      	ble.n	800e9da <__s2b+0x72>
 800e9ac:	f104 0909 	add.w	r9, r4, #9
 800e9b0:	46c8      	mov	r8, r9
 800e9b2:	442c      	add	r4, r5
 800e9b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e9b8:	4601      	mov	r1, r0
 800e9ba:	3b30      	subs	r3, #48	@ 0x30
 800e9bc:	220a      	movs	r2, #10
 800e9be:	4630      	mov	r0, r6
 800e9c0:	f7ff ff8c 	bl	800e8dc <__multadd>
 800e9c4:	45a0      	cmp	r8, r4
 800e9c6:	d1f5      	bne.n	800e9b4 <__s2b+0x4c>
 800e9c8:	f1a5 0408 	sub.w	r4, r5, #8
 800e9cc:	444c      	add	r4, r9
 800e9ce:	1b2d      	subs	r5, r5, r4
 800e9d0:	1963      	adds	r3, r4, r5
 800e9d2:	42bb      	cmp	r3, r7
 800e9d4:	db04      	blt.n	800e9e0 <__s2b+0x78>
 800e9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9da:	340a      	adds	r4, #10
 800e9dc:	2509      	movs	r5, #9
 800e9de:	e7f6      	b.n	800e9ce <__s2b+0x66>
 800e9e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e9e4:	4601      	mov	r1, r0
 800e9e6:	3b30      	subs	r3, #48	@ 0x30
 800e9e8:	220a      	movs	r2, #10
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f7ff ff76 	bl	800e8dc <__multadd>
 800e9f0:	e7ee      	b.n	800e9d0 <__s2b+0x68>
 800e9f2:	bf00      	nop
 800e9f4:	08013a32 	.word	0x08013a32
 800e9f8:	08013a43 	.word	0x08013a43

0800e9fc <__hi0bits>:
 800e9fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ea00:	4603      	mov	r3, r0
 800ea02:	bf36      	itet	cc
 800ea04:	0403      	lslcc	r3, r0, #16
 800ea06:	2000      	movcs	r0, #0
 800ea08:	2010      	movcc	r0, #16
 800ea0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea0e:	bf3c      	itt	cc
 800ea10:	021b      	lslcc	r3, r3, #8
 800ea12:	3008      	addcc	r0, #8
 800ea14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea18:	bf3c      	itt	cc
 800ea1a:	011b      	lslcc	r3, r3, #4
 800ea1c:	3004      	addcc	r0, #4
 800ea1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea22:	bf3c      	itt	cc
 800ea24:	009b      	lslcc	r3, r3, #2
 800ea26:	3002      	addcc	r0, #2
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	db05      	blt.n	800ea38 <__hi0bits+0x3c>
 800ea2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ea30:	f100 0001 	add.w	r0, r0, #1
 800ea34:	bf08      	it	eq
 800ea36:	2020      	moveq	r0, #32
 800ea38:	4770      	bx	lr

0800ea3a <__lo0bits>:
 800ea3a:	6803      	ldr	r3, [r0, #0]
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	f013 0007 	ands.w	r0, r3, #7
 800ea42:	d00b      	beq.n	800ea5c <__lo0bits+0x22>
 800ea44:	07d9      	lsls	r1, r3, #31
 800ea46:	d421      	bmi.n	800ea8c <__lo0bits+0x52>
 800ea48:	0798      	lsls	r0, r3, #30
 800ea4a:	bf49      	itett	mi
 800ea4c:	085b      	lsrmi	r3, r3, #1
 800ea4e:	089b      	lsrpl	r3, r3, #2
 800ea50:	2001      	movmi	r0, #1
 800ea52:	6013      	strmi	r3, [r2, #0]
 800ea54:	bf5c      	itt	pl
 800ea56:	6013      	strpl	r3, [r2, #0]
 800ea58:	2002      	movpl	r0, #2
 800ea5a:	4770      	bx	lr
 800ea5c:	b299      	uxth	r1, r3
 800ea5e:	b909      	cbnz	r1, 800ea64 <__lo0bits+0x2a>
 800ea60:	0c1b      	lsrs	r3, r3, #16
 800ea62:	2010      	movs	r0, #16
 800ea64:	b2d9      	uxtb	r1, r3
 800ea66:	b909      	cbnz	r1, 800ea6c <__lo0bits+0x32>
 800ea68:	3008      	adds	r0, #8
 800ea6a:	0a1b      	lsrs	r3, r3, #8
 800ea6c:	0719      	lsls	r1, r3, #28
 800ea6e:	bf04      	itt	eq
 800ea70:	091b      	lsreq	r3, r3, #4
 800ea72:	3004      	addeq	r0, #4
 800ea74:	0799      	lsls	r1, r3, #30
 800ea76:	bf04      	itt	eq
 800ea78:	089b      	lsreq	r3, r3, #2
 800ea7a:	3002      	addeq	r0, #2
 800ea7c:	07d9      	lsls	r1, r3, #31
 800ea7e:	d403      	bmi.n	800ea88 <__lo0bits+0x4e>
 800ea80:	085b      	lsrs	r3, r3, #1
 800ea82:	f100 0001 	add.w	r0, r0, #1
 800ea86:	d003      	beq.n	800ea90 <__lo0bits+0x56>
 800ea88:	6013      	str	r3, [r2, #0]
 800ea8a:	4770      	bx	lr
 800ea8c:	2000      	movs	r0, #0
 800ea8e:	4770      	bx	lr
 800ea90:	2020      	movs	r0, #32
 800ea92:	4770      	bx	lr

0800ea94 <__i2b>:
 800ea94:	b510      	push	{r4, lr}
 800ea96:	460c      	mov	r4, r1
 800ea98:	2101      	movs	r1, #1
 800ea9a:	f7ff febd 	bl	800e818 <_Balloc>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	b928      	cbnz	r0, 800eaae <__i2b+0x1a>
 800eaa2:	4b05      	ldr	r3, [pc, #20]	@ (800eab8 <__i2b+0x24>)
 800eaa4:	4805      	ldr	r0, [pc, #20]	@ (800eabc <__i2b+0x28>)
 800eaa6:	f240 1145 	movw	r1, #325	@ 0x145
 800eaaa:	f001 fc3d 	bl	8010328 <__assert_func>
 800eaae:	2301      	movs	r3, #1
 800eab0:	6144      	str	r4, [r0, #20]
 800eab2:	6103      	str	r3, [r0, #16]
 800eab4:	bd10      	pop	{r4, pc}
 800eab6:	bf00      	nop
 800eab8:	08013a32 	.word	0x08013a32
 800eabc:	08013a43 	.word	0x08013a43

0800eac0 <__multiply>:
 800eac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac4:	4614      	mov	r4, r2
 800eac6:	690a      	ldr	r2, [r1, #16]
 800eac8:	6923      	ldr	r3, [r4, #16]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	bfa8      	it	ge
 800eace:	4623      	movge	r3, r4
 800ead0:	460f      	mov	r7, r1
 800ead2:	bfa4      	itt	ge
 800ead4:	460c      	movge	r4, r1
 800ead6:	461f      	movge	r7, r3
 800ead8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eadc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eae0:	68a3      	ldr	r3, [r4, #8]
 800eae2:	6861      	ldr	r1, [r4, #4]
 800eae4:	eb0a 0609 	add.w	r6, sl, r9
 800eae8:	42b3      	cmp	r3, r6
 800eaea:	b085      	sub	sp, #20
 800eaec:	bfb8      	it	lt
 800eaee:	3101      	addlt	r1, #1
 800eaf0:	f7ff fe92 	bl	800e818 <_Balloc>
 800eaf4:	b930      	cbnz	r0, 800eb04 <__multiply+0x44>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	4b44      	ldr	r3, [pc, #272]	@ (800ec0c <__multiply+0x14c>)
 800eafa:	4845      	ldr	r0, [pc, #276]	@ (800ec10 <__multiply+0x150>)
 800eafc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eb00:	f001 fc12 	bl	8010328 <__assert_func>
 800eb04:	f100 0514 	add.w	r5, r0, #20
 800eb08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eb0c:	462b      	mov	r3, r5
 800eb0e:	2200      	movs	r2, #0
 800eb10:	4543      	cmp	r3, r8
 800eb12:	d321      	bcc.n	800eb58 <__multiply+0x98>
 800eb14:	f107 0114 	add.w	r1, r7, #20
 800eb18:	f104 0214 	add.w	r2, r4, #20
 800eb1c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800eb20:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800eb24:	9302      	str	r3, [sp, #8]
 800eb26:	1b13      	subs	r3, r2, r4
 800eb28:	3b15      	subs	r3, #21
 800eb2a:	f023 0303 	bic.w	r3, r3, #3
 800eb2e:	3304      	adds	r3, #4
 800eb30:	f104 0715 	add.w	r7, r4, #21
 800eb34:	42ba      	cmp	r2, r7
 800eb36:	bf38      	it	cc
 800eb38:	2304      	movcc	r3, #4
 800eb3a:	9301      	str	r3, [sp, #4]
 800eb3c:	9b02      	ldr	r3, [sp, #8]
 800eb3e:	9103      	str	r1, [sp, #12]
 800eb40:	428b      	cmp	r3, r1
 800eb42:	d80c      	bhi.n	800eb5e <__multiply+0x9e>
 800eb44:	2e00      	cmp	r6, #0
 800eb46:	dd03      	ble.n	800eb50 <__multiply+0x90>
 800eb48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d05b      	beq.n	800ec08 <__multiply+0x148>
 800eb50:	6106      	str	r6, [r0, #16]
 800eb52:	b005      	add	sp, #20
 800eb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb58:	f843 2b04 	str.w	r2, [r3], #4
 800eb5c:	e7d8      	b.n	800eb10 <__multiply+0x50>
 800eb5e:	f8b1 a000 	ldrh.w	sl, [r1]
 800eb62:	f1ba 0f00 	cmp.w	sl, #0
 800eb66:	d024      	beq.n	800ebb2 <__multiply+0xf2>
 800eb68:	f104 0e14 	add.w	lr, r4, #20
 800eb6c:	46a9      	mov	r9, r5
 800eb6e:	f04f 0c00 	mov.w	ip, #0
 800eb72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb76:	f8d9 3000 	ldr.w	r3, [r9]
 800eb7a:	fa1f fb87 	uxth.w	fp, r7
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	fb0a 330b 	mla	r3, sl, fp, r3
 800eb84:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800eb88:	f8d9 7000 	ldr.w	r7, [r9]
 800eb8c:	4463      	add	r3, ip
 800eb8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eb92:	fb0a c70b 	mla	r7, sl, fp, ip
 800eb96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eba0:	4572      	cmp	r2, lr
 800eba2:	f849 3b04 	str.w	r3, [r9], #4
 800eba6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ebaa:	d8e2      	bhi.n	800eb72 <__multiply+0xb2>
 800ebac:	9b01      	ldr	r3, [sp, #4]
 800ebae:	f845 c003 	str.w	ip, [r5, r3]
 800ebb2:	9b03      	ldr	r3, [sp, #12]
 800ebb4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ebb8:	3104      	adds	r1, #4
 800ebba:	f1b9 0f00 	cmp.w	r9, #0
 800ebbe:	d021      	beq.n	800ec04 <__multiply+0x144>
 800ebc0:	682b      	ldr	r3, [r5, #0]
 800ebc2:	f104 0c14 	add.w	ip, r4, #20
 800ebc6:	46ae      	mov	lr, r5
 800ebc8:	f04f 0a00 	mov.w	sl, #0
 800ebcc:	f8bc b000 	ldrh.w	fp, [ip]
 800ebd0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ebd4:	fb09 770b 	mla	r7, r9, fp, r7
 800ebd8:	4457      	add	r7, sl
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ebe0:	f84e 3b04 	str.w	r3, [lr], #4
 800ebe4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ebe8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebec:	f8be 3000 	ldrh.w	r3, [lr]
 800ebf0:	fb09 330a 	mla	r3, r9, sl, r3
 800ebf4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ebf8:	4562      	cmp	r2, ip
 800ebfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebfe:	d8e5      	bhi.n	800ebcc <__multiply+0x10c>
 800ec00:	9f01      	ldr	r7, [sp, #4]
 800ec02:	51eb      	str	r3, [r5, r7]
 800ec04:	3504      	adds	r5, #4
 800ec06:	e799      	b.n	800eb3c <__multiply+0x7c>
 800ec08:	3e01      	subs	r6, #1
 800ec0a:	e79b      	b.n	800eb44 <__multiply+0x84>
 800ec0c:	08013a32 	.word	0x08013a32
 800ec10:	08013a43 	.word	0x08013a43

0800ec14 <__pow5mult>:
 800ec14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec18:	4615      	mov	r5, r2
 800ec1a:	f012 0203 	ands.w	r2, r2, #3
 800ec1e:	4607      	mov	r7, r0
 800ec20:	460e      	mov	r6, r1
 800ec22:	d007      	beq.n	800ec34 <__pow5mult+0x20>
 800ec24:	4c25      	ldr	r4, [pc, #148]	@ (800ecbc <__pow5mult+0xa8>)
 800ec26:	3a01      	subs	r2, #1
 800ec28:	2300      	movs	r3, #0
 800ec2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec2e:	f7ff fe55 	bl	800e8dc <__multadd>
 800ec32:	4606      	mov	r6, r0
 800ec34:	10ad      	asrs	r5, r5, #2
 800ec36:	d03d      	beq.n	800ecb4 <__pow5mult+0xa0>
 800ec38:	69fc      	ldr	r4, [r7, #28]
 800ec3a:	b97c      	cbnz	r4, 800ec5c <__pow5mult+0x48>
 800ec3c:	2010      	movs	r0, #16
 800ec3e:	f7ff fd35 	bl	800e6ac <malloc>
 800ec42:	4602      	mov	r2, r0
 800ec44:	61f8      	str	r0, [r7, #28]
 800ec46:	b928      	cbnz	r0, 800ec54 <__pow5mult+0x40>
 800ec48:	4b1d      	ldr	r3, [pc, #116]	@ (800ecc0 <__pow5mult+0xac>)
 800ec4a:	481e      	ldr	r0, [pc, #120]	@ (800ecc4 <__pow5mult+0xb0>)
 800ec4c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ec50:	f001 fb6a 	bl	8010328 <__assert_func>
 800ec54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec58:	6004      	str	r4, [r0, #0]
 800ec5a:	60c4      	str	r4, [r0, #12]
 800ec5c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ec60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec64:	b94c      	cbnz	r4, 800ec7a <__pow5mult+0x66>
 800ec66:	f240 2171 	movw	r1, #625	@ 0x271
 800ec6a:	4638      	mov	r0, r7
 800ec6c:	f7ff ff12 	bl	800ea94 <__i2b>
 800ec70:	2300      	movs	r3, #0
 800ec72:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec76:	4604      	mov	r4, r0
 800ec78:	6003      	str	r3, [r0, #0]
 800ec7a:	f04f 0900 	mov.w	r9, #0
 800ec7e:	07eb      	lsls	r3, r5, #31
 800ec80:	d50a      	bpl.n	800ec98 <__pow5mult+0x84>
 800ec82:	4631      	mov	r1, r6
 800ec84:	4622      	mov	r2, r4
 800ec86:	4638      	mov	r0, r7
 800ec88:	f7ff ff1a 	bl	800eac0 <__multiply>
 800ec8c:	4631      	mov	r1, r6
 800ec8e:	4680      	mov	r8, r0
 800ec90:	4638      	mov	r0, r7
 800ec92:	f7ff fe01 	bl	800e898 <_Bfree>
 800ec96:	4646      	mov	r6, r8
 800ec98:	106d      	asrs	r5, r5, #1
 800ec9a:	d00b      	beq.n	800ecb4 <__pow5mult+0xa0>
 800ec9c:	6820      	ldr	r0, [r4, #0]
 800ec9e:	b938      	cbnz	r0, 800ecb0 <__pow5mult+0x9c>
 800eca0:	4622      	mov	r2, r4
 800eca2:	4621      	mov	r1, r4
 800eca4:	4638      	mov	r0, r7
 800eca6:	f7ff ff0b 	bl	800eac0 <__multiply>
 800ecaa:	6020      	str	r0, [r4, #0]
 800ecac:	f8c0 9000 	str.w	r9, [r0]
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	e7e4      	b.n	800ec7e <__pow5mult+0x6a>
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecba:	bf00      	nop
 800ecbc:	08013a9c 	.word	0x08013a9c
 800ecc0:	080139c3 	.word	0x080139c3
 800ecc4:	08013a43 	.word	0x08013a43

0800ecc8 <__lshift>:
 800ecc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eccc:	460c      	mov	r4, r1
 800ecce:	6849      	ldr	r1, [r1, #4]
 800ecd0:	6923      	ldr	r3, [r4, #16]
 800ecd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ecd6:	68a3      	ldr	r3, [r4, #8]
 800ecd8:	4607      	mov	r7, r0
 800ecda:	4691      	mov	r9, r2
 800ecdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ece0:	f108 0601 	add.w	r6, r8, #1
 800ece4:	42b3      	cmp	r3, r6
 800ece6:	db0b      	blt.n	800ed00 <__lshift+0x38>
 800ece8:	4638      	mov	r0, r7
 800ecea:	f7ff fd95 	bl	800e818 <_Balloc>
 800ecee:	4605      	mov	r5, r0
 800ecf0:	b948      	cbnz	r0, 800ed06 <__lshift+0x3e>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	4b28      	ldr	r3, [pc, #160]	@ (800ed98 <__lshift+0xd0>)
 800ecf6:	4829      	ldr	r0, [pc, #164]	@ (800ed9c <__lshift+0xd4>)
 800ecf8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ecfc:	f001 fb14 	bl	8010328 <__assert_func>
 800ed00:	3101      	adds	r1, #1
 800ed02:	005b      	lsls	r3, r3, #1
 800ed04:	e7ee      	b.n	800ece4 <__lshift+0x1c>
 800ed06:	2300      	movs	r3, #0
 800ed08:	f100 0114 	add.w	r1, r0, #20
 800ed0c:	f100 0210 	add.w	r2, r0, #16
 800ed10:	4618      	mov	r0, r3
 800ed12:	4553      	cmp	r3, sl
 800ed14:	db33      	blt.n	800ed7e <__lshift+0xb6>
 800ed16:	6920      	ldr	r0, [r4, #16]
 800ed18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed1c:	f104 0314 	add.w	r3, r4, #20
 800ed20:	f019 091f 	ands.w	r9, r9, #31
 800ed24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed2c:	d02b      	beq.n	800ed86 <__lshift+0xbe>
 800ed2e:	f1c9 0e20 	rsb	lr, r9, #32
 800ed32:	468a      	mov	sl, r1
 800ed34:	2200      	movs	r2, #0
 800ed36:	6818      	ldr	r0, [r3, #0]
 800ed38:	fa00 f009 	lsl.w	r0, r0, r9
 800ed3c:	4310      	orrs	r0, r2
 800ed3e:	f84a 0b04 	str.w	r0, [sl], #4
 800ed42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed46:	459c      	cmp	ip, r3
 800ed48:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed4c:	d8f3      	bhi.n	800ed36 <__lshift+0x6e>
 800ed4e:	ebac 0304 	sub.w	r3, ip, r4
 800ed52:	3b15      	subs	r3, #21
 800ed54:	f023 0303 	bic.w	r3, r3, #3
 800ed58:	3304      	adds	r3, #4
 800ed5a:	f104 0015 	add.w	r0, r4, #21
 800ed5e:	4584      	cmp	ip, r0
 800ed60:	bf38      	it	cc
 800ed62:	2304      	movcc	r3, #4
 800ed64:	50ca      	str	r2, [r1, r3]
 800ed66:	b10a      	cbz	r2, 800ed6c <__lshift+0xa4>
 800ed68:	f108 0602 	add.w	r6, r8, #2
 800ed6c:	3e01      	subs	r6, #1
 800ed6e:	4638      	mov	r0, r7
 800ed70:	612e      	str	r6, [r5, #16]
 800ed72:	4621      	mov	r1, r4
 800ed74:	f7ff fd90 	bl	800e898 <_Bfree>
 800ed78:	4628      	mov	r0, r5
 800ed7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed82:	3301      	adds	r3, #1
 800ed84:	e7c5      	b.n	800ed12 <__lshift+0x4a>
 800ed86:	3904      	subs	r1, #4
 800ed88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed90:	459c      	cmp	ip, r3
 800ed92:	d8f9      	bhi.n	800ed88 <__lshift+0xc0>
 800ed94:	e7ea      	b.n	800ed6c <__lshift+0xa4>
 800ed96:	bf00      	nop
 800ed98:	08013a32 	.word	0x08013a32
 800ed9c:	08013a43 	.word	0x08013a43

0800eda0 <__mcmp>:
 800eda0:	690a      	ldr	r2, [r1, #16]
 800eda2:	4603      	mov	r3, r0
 800eda4:	6900      	ldr	r0, [r0, #16]
 800eda6:	1a80      	subs	r0, r0, r2
 800eda8:	b530      	push	{r4, r5, lr}
 800edaa:	d10e      	bne.n	800edca <__mcmp+0x2a>
 800edac:	3314      	adds	r3, #20
 800edae:	3114      	adds	r1, #20
 800edb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800edb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800edb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800edbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800edc0:	4295      	cmp	r5, r2
 800edc2:	d003      	beq.n	800edcc <__mcmp+0x2c>
 800edc4:	d205      	bcs.n	800edd2 <__mcmp+0x32>
 800edc6:	f04f 30ff 	mov.w	r0, #4294967295
 800edca:	bd30      	pop	{r4, r5, pc}
 800edcc:	42a3      	cmp	r3, r4
 800edce:	d3f3      	bcc.n	800edb8 <__mcmp+0x18>
 800edd0:	e7fb      	b.n	800edca <__mcmp+0x2a>
 800edd2:	2001      	movs	r0, #1
 800edd4:	e7f9      	b.n	800edca <__mcmp+0x2a>
	...

0800edd8 <__mdiff>:
 800edd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eddc:	4689      	mov	r9, r1
 800edde:	4606      	mov	r6, r0
 800ede0:	4611      	mov	r1, r2
 800ede2:	4648      	mov	r0, r9
 800ede4:	4614      	mov	r4, r2
 800ede6:	f7ff ffdb 	bl	800eda0 <__mcmp>
 800edea:	1e05      	subs	r5, r0, #0
 800edec:	d112      	bne.n	800ee14 <__mdiff+0x3c>
 800edee:	4629      	mov	r1, r5
 800edf0:	4630      	mov	r0, r6
 800edf2:	f7ff fd11 	bl	800e818 <_Balloc>
 800edf6:	4602      	mov	r2, r0
 800edf8:	b928      	cbnz	r0, 800ee06 <__mdiff+0x2e>
 800edfa:	4b3f      	ldr	r3, [pc, #252]	@ (800eef8 <__mdiff+0x120>)
 800edfc:	f240 2137 	movw	r1, #567	@ 0x237
 800ee00:	483e      	ldr	r0, [pc, #248]	@ (800eefc <__mdiff+0x124>)
 800ee02:	f001 fa91 	bl	8010328 <__assert_func>
 800ee06:	2301      	movs	r3, #1
 800ee08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee0c:	4610      	mov	r0, r2
 800ee0e:	b003      	add	sp, #12
 800ee10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee14:	bfbc      	itt	lt
 800ee16:	464b      	movlt	r3, r9
 800ee18:	46a1      	movlt	r9, r4
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ee20:	bfba      	itte	lt
 800ee22:	461c      	movlt	r4, r3
 800ee24:	2501      	movlt	r5, #1
 800ee26:	2500      	movge	r5, #0
 800ee28:	f7ff fcf6 	bl	800e818 <_Balloc>
 800ee2c:	4602      	mov	r2, r0
 800ee2e:	b918      	cbnz	r0, 800ee38 <__mdiff+0x60>
 800ee30:	4b31      	ldr	r3, [pc, #196]	@ (800eef8 <__mdiff+0x120>)
 800ee32:	f240 2145 	movw	r1, #581	@ 0x245
 800ee36:	e7e3      	b.n	800ee00 <__mdiff+0x28>
 800ee38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ee3c:	6926      	ldr	r6, [r4, #16]
 800ee3e:	60c5      	str	r5, [r0, #12]
 800ee40:	f109 0310 	add.w	r3, r9, #16
 800ee44:	f109 0514 	add.w	r5, r9, #20
 800ee48:	f104 0e14 	add.w	lr, r4, #20
 800ee4c:	f100 0b14 	add.w	fp, r0, #20
 800ee50:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ee54:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ee58:	9301      	str	r3, [sp, #4]
 800ee5a:	46d9      	mov	r9, fp
 800ee5c:	f04f 0c00 	mov.w	ip, #0
 800ee60:	9b01      	ldr	r3, [sp, #4]
 800ee62:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ee66:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ee6a:	9301      	str	r3, [sp, #4]
 800ee6c:	fa1f f38a 	uxth.w	r3, sl
 800ee70:	4619      	mov	r1, r3
 800ee72:	b283      	uxth	r3, r0
 800ee74:	1acb      	subs	r3, r1, r3
 800ee76:	0c00      	lsrs	r0, r0, #16
 800ee78:	4463      	add	r3, ip
 800ee7a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ee7e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ee88:	4576      	cmp	r6, lr
 800ee8a:	f849 3b04 	str.w	r3, [r9], #4
 800ee8e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee92:	d8e5      	bhi.n	800ee60 <__mdiff+0x88>
 800ee94:	1b33      	subs	r3, r6, r4
 800ee96:	3b15      	subs	r3, #21
 800ee98:	f023 0303 	bic.w	r3, r3, #3
 800ee9c:	3415      	adds	r4, #21
 800ee9e:	3304      	adds	r3, #4
 800eea0:	42a6      	cmp	r6, r4
 800eea2:	bf38      	it	cc
 800eea4:	2304      	movcc	r3, #4
 800eea6:	441d      	add	r5, r3
 800eea8:	445b      	add	r3, fp
 800eeaa:	461e      	mov	r6, r3
 800eeac:	462c      	mov	r4, r5
 800eeae:	4544      	cmp	r4, r8
 800eeb0:	d30e      	bcc.n	800eed0 <__mdiff+0xf8>
 800eeb2:	f108 0103 	add.w	r1, r8, #3
 800eeb6:	1b49      	subs	r1, r1, r5
 800eeb8:	f021 0103 	bic.w	r1, r1, #3
 800eebc:	3d03      	subs	r5, #3
 800eebe:	45a8      	cmp	r8, r5
 800eec0:	bf38      	it	cc
 800eec2:	2100      	movcc	r1, #0
 800eec4:	440b      	add	r3, r1
 800eec6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eeca:	b191      	cbz	r1, 800eef2 <__mdiff+0x11a>
 800eecc:	6117      	str	r7, [r2, #16]
 800eece:	e79d      	b.n	800ee0c <__mdiff+0x34>
 800eed0:	f854 1b04 	ldr.w	r1, [r4], #4
 800eed4:	46e6      	mov	lr, ip
 800eed6:	0c08      	lsrs	r0, r1, #16
 800eed8:	fa1c fc81 	uxtah	ip, ip, r1
 800eedc:	4471      	add	r1, lr
 800eede:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eee2:	b289      	uxth	r1, r1
 800eee4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eee8:	f846 1b04 	str.w	r1, [r6], #4
 800eeec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eef0:	e7dd      	b.n	800eeae <__mdiff+0xd6>
 800eef2:	3f01      	subs	r7, #1
 800eef4:	e7e7      	b.n	800eec6 <__mdiff+0xee>
 800eef6:	bf00      	nop
 800eef8:	08013a32 	.word	0x08013a32
 800eefc:	08013a43 	.word	0x08013a43

0800ef00 <__ulp>:
 800ef00:	b082      	sub	sp, #8
 800ef02:	ed8d 0b00 	vstr	d0, [sp]
 800ef06:	9a01      	ldr	r2, [sp, #4]
 800ef08:	4b0f      	ldr	r3, [pc, #60]	@ (800ef48 <__ulp+0x48>)
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	dc08      	bgt.n	800ef26 <__ulp+0x26>
 800ef14:	425b      	negs	r3, r3
 800ef16:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ef1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ef1e:	da04      	bge.n	800ef2a <__ulp+0x2a>
 800ef20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ef24:	4113      	asrs	r3, r2
 800ef26:	2200      	movs	r2, #0
 800ef28:	e008      	b.n	800ef3c <__ulp+0x3c>
 800ef2a:	f1a2 0314 	sub.w	r3, r2, #20
 800ef2e:	2b1e      	cmp	r3, #30
 800ef30:	bfda      	itte	le
 800ef32:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ef36:	40da      	lsrle	r2, r3
 800ef38:	2201      	movgt	r2, #1
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	4610      	mov	r0, r2
 800ef40:	ec41 0b10 	vmov	d0, r0, r1
 800ef44:	b002      	add	sp, #8
 800ef46:	4770      	bx	lr
 800ef48:	7ff00000 	.word	0x7ff00000

0800ef4c <__b2d>:
 800ef4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef50:	6906      	ldr	r6, [r0, #16]
 800ef52:	f100 0814 	add.w	r8, r0, #20
 800ef56:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ef5a:	1f37      	subs	r7, r6, #4
 800ef5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ef60:	4610      	mov	r0, r2
 800ef62:	f7ff fd4b 	bl	800e9fc <__hi0bits>
 800ef66:	f1c0 0320 	rsb	r3, r0, #32
 800ef6a:	280a      	cmp	r0, #10
 800ef6c:	600b      	str	r3, [r1, #0]
 800ef6e:	491b      	ldr	r1, [pc, #108]	@ (800efdc <__b2d+0x90>)
 800ef70:	dc15      	bgt.n	800ef9e <__b2d+0x52>
 800ef72:	f1c0 0c0b 	rsb	ip, r0, #11
 800ef76:	fa22 f30c 	lsr.w	r3, r2, ip
 800ef7a:	45b8      	cmp	r8, r7
 800ef7c:	ea43 0501 	orr.w	r5, r3, r1
 800ef80:	bf34      	ite	cc
 800ef82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef86:	2300      	movcs	r3, #0
 800ef88:	3015      	adds	r0, #21
 800ef8a:	fa02 f000 	lsl.w	r0, r2, r0
 800ef8e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ef92:	4303      	orrs	r3, r0
 800ef94:	461c      	mov	r4, r3
 800ef96:	ec45 4b10 	vmov	d0, r4, r5
 800ef9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef9e:	45b8      	cmp	r8, r7
 800efa0:	bf3a      	itte	cc
 800efa2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800efa6:	f1a6 0708 	subcc.w	r7, r6, #8
 800efaa:	2300      	movcs	r3, #0
 800efac:	380b      	subs	r0, #11
 800efae:	d012      	beq.n	800efd6 <__b2d+0x8a>
 800efb0:	f1c0 0120 	rsb	r1, r0, #32
 800efb4:	fa23 f401 	lsr.w	r4, r3, r1
 800efb8:	4082      	lsls	r2, r0
 800efba:	4322      	orrs	r2, r4
 800efbc:	4547      	cmp	r7, r8
 800efbe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800efc2:	bf8c      	ite	hi
 800efc4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800efc8:	2200      	movls	r2, #0
 800efca:	4083      	lsls	r3, r0
 800efcc:	40ca      	lsrs	r2, r1
 800efce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800efd2:	4313      	orrs	r3, r2
 800efd4:	e7de      	b.n	800ef94 <__b2d+0x48>
 800efd6:	ea42 0501 	orr.w	r5, r2, r1
 800efda:	e7db      	b.n	800ef94 <__b2d+0x48>
 800efdc:	3ff00000 	.word	0x3ff00000

0800efe0 <__d2b>:
 800efe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efe4:	460f      	mov	r7, r1
 800efe6:	2101      	movs	r1, #1
 800efe8:	ec59 8b10 	vmov	r8, r9, d0
 800efec:	4616      	mov	r6, r2
 800efee:	f7ff fc13 	bl	800e818 <_Balloc>
 800eff2:	4604      	mov	r4, r0
 800eff4:	b930      	cbnz	r0, 800f004 <__d2b+0x24>
 800eff6:	4602      	mov	r2, r0
 800eff8:	4b23      	ldr	r3, [pc, #140]	@ (800f088 <__d2b+0xa8>)
 800effa:	4824      	ldr	r0, [pc, #144]	@ (800f08c <__d2b+0xac>)
 800effc:	f240 310f 	movw	r1, #783	@ 0x30f
 800f000:	f001 f992 	bl	8010328 <__assert_func>
 800f004:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f00c:	b10d      	cbz	r5, 800f012 <__d2b+0x32>
 800f00e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f012:	9301      	str	r3, [sp, #4]
 800f014:	f1b8 0300 	subs.w	r3, r8, #0
 800f018:	d023      	beq.n	800f062 <__d2b+0x82>
 800f01a:	4668      	mov	r0, sp
 800f01c:	9300      	str	r3, [sp, #0]
 800f01e:	f7ff fd0c 	bl	800ea3a <__lo0bits>
 800f022:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f026:	b1d0      	cbz	r0, 800f05e <__d2b+0x7e>
 800f028:	f1c0 0320 	rsb	r3, r0, #32
 800f02c:	fa02 f303 	lsl.w	r3, r2, r3
 800f030:	430b      	orrs	r3, r1
 800f032:	40c2      	lsrs	r2, r0
 800f034:	6163      	str	r3, [r4, #20]
 800f036:	9201      	str	r2, [sp, #4]
 800f038:	9b01      	ldr	r3, [sp, #4]
 800f03a:	61a3      	str	r3, [r4, #24]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	bf0c      	ite	eq
 800f040:	2201      	moveq	r2, #1
 800f042:	2202      	movne	r2, #2
 800f044:	6122      	str	r2, [r4, #16]
 800f046:	b1a5      	cbz	r5, 800f072 <__d2b+0x92>
 800f048:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f04c:	4405      	add	r5, r0
 800f04e:	603d      	str	r5, [r7, #0]
 800f050:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f054:	6030      	str	r0, [r6, #0]
 800f056:	4620      	mov	r0, r4
 800f058:	b003      	add	sp, #12
 800f05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f05e:	6161      	str	r1, [r4, #20]
 800f060:	e7ea      	b.n	800f038 <__d2b+0x58>
 800f062:	a801      	add	r0, sp, #4
 800f064:	f7ff fce9 	bl	800ea3a <__lo0bits>
 800f068:	9b01      	ldr	r3, [sp, #4]
 800f06a:	6163      	str	r3, [r4, #20]
 800f06c:	3020      	adds	r0, #32
 800f06e:	2201      	movs	r2, #1
 800f070:	e7e8      	b.n	800f044 <__d2b+0x64>
 800f072:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f076:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f07a:	6038      	str	r0, [r7, #0]
 800f07c:	6918      	ldr	r0, [r3, #16]
 800f07e:	f7ff fcbd 	bl	800e9fc <__hi0bits>
 800f082:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f086:	e7e5      	b.n	800f054 <__d2b+0x74>
 800f088:	08013a32 	.word	0x08013a32
 800f08c:	08013a43 	.word	0x08013a43

0800f090 <__ratio>:
 800f090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f094:	b085      	sub	sp, #20
 800f096:	e9cd 1000 	strd	r1, r0, [sp]
 800f09a:	a902      	add	r1, sp, #8
 800f09c:	f7ff ff56 	bl	800ef4c <__b2d>
 800f0a0:	9800      	ldr	r0, [sp, #0]
 800f0a2:	a903      	add	r1, sp, #12
 800f0a4:	ec55 4b10 	vmov	r4, r5, d0
 800f0a8:	f7ff ff50 	bl	800ef4c <__b2d>
 800f0ac:	9b01      	ldr	r3, [sp, #4]
 800f0ae:	6919      	ldr	r1, [r3, #16]
 800f0b0:	9b00      	ldr	r3, [sp, #0]
 800f0b2:	691b      	ldr	r3, [r3, #16]
 800f0b4:	1ac9      	subs	r1, r1, r3
 800f0b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f0ba:	1a9b      	subs	r3, r3, r2
 800f0bc:	ec5b ab10 	vmov	sl, fp, d0
 800f0c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	bfce      	itee	gt
 800f0c8:	462a      	movgt	r2, r5
 800f0ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f0ce:	465a      	movle	r2, fp
 800f0d0:	462f      	mov	r7, r5
 800f0d2:	46d9      	mov	r9, fp
 800f0d4:	bfcc      	ite	gt
 800f0d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f0da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f0de:	464b      	mov	r3, r9
 800f0e0:	4652      	mov	r2, sl
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	f7f1 fbc1 	bl	800086c <__aeabi_ddiv>
 800f0ea:	ec41 0b10 	vmov	d0, r0, r1
 800f0ee:	b005      	add	sp, #20
 800f0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0f4 <__copybits>:
 800f0f4:	3901      	subs	r1, #1
 800f0f6:	b570      	push	{r4, r5, r6, lr}
 800f0f8:	1149      	asrs	r1, r1, #5
 800f0fa:	6914      	ldr	r4, [r2, #16]
 800f0fc:	3101      	adds	r1, #1
 800f0fe:	f102 0314 	add.w	r3, r2, #20
 800f102:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f106:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f10a:	1f05      	subs	r5, r0, #4
 800f10c:	42a3      	cmp	r3, r4
 800f10e:	d30c      	bcc.n	800f12a <__copybits+0x36>
 800f110:	1aa3      	subs	r3, r4, r2
 800f112:	3b11      	subs	r3, #17
 800f114:	f023 0303 	bic.w	r3, r3, #3
 800f118:	3211      	adds	r2, #17
 800f11a:	42a2      	cmp	r2, r4
 800f11c:	bf88      	it	hi
 800f11e:	2300      	movhi	r3, #0
 800f120:	4418      	add	r0, r3
 800f122:	2300      	movs	r3, #0
 800f124:	4288      	cmp	r0, r1
 800f126:	d305      	bcc.n	800f134 <__copybits+0x40>
 800f128:	bd70      	pop	{r4, r5, r6, pc}
 800f12a:	f853 6b04 	ldr.w	r6, [r3], #4
 800f12e:	f845 6f04 	str.w	r6, [r5, #4]!
 800f132:	e7eb      	b.n	800f10c <__copybits+0x18>
 800f134:	f840 3b04 	str.w	r3, [r0], #4
 800f138:	e7f4      	b.n	800f124 <__copybits+0x30>

0800f13a <__any_on>:
 800f13a:	f100 0214 	add.w	r2, r0, #20
 800f13e:	6900      	ldr	r0, [r0, #16]
 800f140:	114b      	asrs	r3, r1, #5
 800f142:	4298      	cmp	r0, r3
 800f144:	b510      	push	{r4, lr}
 800f146:	db11      	blt.n	800f16c <__any_on+0x32>
 800f148:	dd0a      	ble.n	800f160 <__any_on+0x26>
 800f14a:	f011 011f 	ands.w	r1, r1, #31
 800f14e:	d007      	beq.n	800f160 <__any_on+0x26>
 800f150:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f154:	fa24 f001 	lsr.w	r0, r4, r1
 800f158:	fa00 f101 	lsl.w	r1, r0, r1
 800f15c:	428c      	cmp	r4, r1
 800f15e:	d10b      	bne.n	800f178 <__any_on+0x3e>
 800f160:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f164:	4293      	cmp	r3, r2
 800f166:	d803      	bhi.n	800f170 <__any_on+0x36>
 800f168:	2000      	movs	r0, #0
 800f16a:	bd10      	pop	{r4, pc}
 800f16c:	4603      	mov	r3, r0
 800f16e:	e7f7      	b.n	800f160 <__any_on+0x26>
 800f170:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f174:	2900      	cmp	r1, #0
 800f176:	d0f5      	beq.n	800f164 <__any_on+0x2a>
 800f178:	2001      	movs	r0, #1
 800f17a:	e7f6      	b.n	800f16a <__any_on+0x30>

0800f17c <sulp>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	4604      	mov	r4, r0
 800f180:	460d      	mov	r5, r1
 800f182:	ec45 4b10 	vmov	d0, r4, r5
 800f186:	4616      	mov	r6, r2
 800f188:	f7ff feba 	bl	800ef00 <__ulp>
 800f18c:	ec51 0b10 	vmov	r0, r1, d0
 800f190:	b17e      	cbz	r6, 800f1b2 <sulp+0x36>
 800f192:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f196:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	dd09      	ble.n	800f1b2 <sulp+0x36>
 800f19e:	051b      	lsls	r3, r3, #20
 800f1a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f1a4:	2400      	movs	r4, #0
 800f1a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f1aa:	4622      	mov	r2, r4
 800f1ac:	462b      	mov	r3, r5
 800f1ae:	f7f1 fa33 	bl	8000618 <__aeabi_dmul>
 800f1b2:	ec41 0b10 	vmov	d0, r0, r1
 800f1b6:	bd70      	pop	{r4, r5, r6, pc}

0800f1b8 <_strtod_l>:
 800f1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1bc:	b09f      	sub	sp, #124	@ 0x7c
 800f1be:	460c      	mov	r4, r1
 800f1c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	921a      	str	r2, [sp, #104]	@ 0x68
 800f1c6:	9005      	str	r0, [sp, #20]
 800f1c8:	f04f 0a00 	mov.w	sl, #0
 800f1cc:	f04f 0b00 	mov.w	fp, #0
 800f1d0:	460a      	mov	r2, r1
 800f1d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f1d4:	7811      	ldrb	r1, [r2, #0]
 800f1d6:	292b      	cmp	r1, #43	@ 0x2b
 800f1d8:	d04a      	beq.n	800f270 <_strtod_l+0xb8>
 800f1da:	d838      	bhi.n	800f24e <_strtod_l+0x96>
 800f1dc:	290d      	cmp	r1, #13
 800f1de:	d832      	bhi.n	800f246 <_strtod_l+0x8e>
 800f1e0:	2908      	cmp	r1, #8
 800f1e2:	d832      	bhi.n	800f24a <_strtod_l+0x92>
 800f1e4:	2900      	cmp	r1, #0
 800f1e6:	d03b      	beq.n	800f260 <_strtod_l+0xa8>
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f1ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f1ee:	782a      	ldrb	r2, [r5, #0]
 800f1f0:	2a30      	cmp	r2, #48	@ 0x30
 800f1f2:	f040 80b3 	bne.w	800f35c <_strtod_l+0x1a4>
 800f1f6:	786a      	ldrb	r2, [r5, #1]
 800f1f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f1fc:	2a58      	cmp	r2, #88	@ 0x58
 800f1fe:	d16e      	bne.n	800f2de <_strtod_l+0x126>
 800f200:	9302      	str	r3, [sp, #8]
 800f202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f204:	9301      	str	r3, [sp, #4]
 800f206:	ab1a      	add	r3, sp, #104	@ 0x68
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	4a8e      	ldr	r2, [pc, #568]	@ (800f444 <_strtod_l+0x28c>)
 800f20c:	9805      	ldr	r0, [sp, #20]
 800f20e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f210:	a919      	add	r1, sp, #100	@ 0x64
 800f212:	f001 f923 	bl	801045c <__gethex>
 800f216:	f010 060f 	ands.w	r6, r0, #15
 800f21a:	4604      	mov	r4, r0
 800f21c:	d005      	beq.n	800f22a <_strtod_l+0x72>
 800f21e:	2e06      	cmp	r6, #6
 800f220:	d128      	bne.n	800f274 <_strtod_l+0xbc>
 800f222:	3501      	adds	r5, #1
 800f224:	2300      	movs	r3, #0
 800f226:	9519      	str	r5, [sp, #100]	@ 0x64
 800f228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f22a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f040 858e 	bne.w	800fd4e <_strtod_l+0xb96>
 800f232:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f234:	b1cb      	cbz	r3, 800f26a <_strtod_l+0xb2>
 800f236:	4652      	mov	r2, sl
 800f238:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f23c:	ec43 2b10 	vmov	d0, r2, r3
 800f240:	b01f      	add	sp, #124	@ 0x7c
 800f242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f246:	2920      	cmp	r1, #32
 800f248:	d1ce      	bne.n	800f1e8 <_strtod_l+0x30>
 800f24a:	3201      	adds	r2, #1
 800f24c:	e7c1      	b.n	800f1d2 <_strtod_l+0x1a>
 800f24e:	292d      	cmp	r1, #45	@ 0x2d
 800f250:	d1ca      	bne.n	800f1e8 <_strtod_l+0x30>
 800f252:	2101      	movs	r1, #1
 800f254:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f256:	1c51      	adds	r1, r2, #1
 800f258:	9119      	str	r1, [sp, #100]	@ 0x64
 800f25a:	7852      	ldrb	r2, [r2, #1]
 800f25c:	2a00      	cmp	r2, #0
 800f25e:	d1c5      	bne.n	800f1ec <_strtod_l+0x34>
 800f260:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f262:	9419      	str	r4, [sp, #100]	@ 0x64
 800f264:	2b00      	cmp	r3, #0
 800f266:	f040 8570 	bne.w	800fd4a <_strtod_l+0xb92>
 800f26a:	4652      	mov	r2, sl
 800f26c:	465b      	mov	r3, fp
 800f26e:	e7e5      	b.n	800f23c <_strtod_l+0x84>
 800f270:	2100      	movs	r1, #0
 800f272:	e7ef      	b.n	800f254 <_strtod_l+0x9c>
 800f274:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f276:	b13a      	cbz	r2, 800f288 <_strtod_l+0xd0>
 800f278:	2135      	movs	r1, #53	@ 0x35
 800f27a:	a81c      	add	r0, sp, #112	@ 0x70
 800f27c:	f7ff ff3a 	bl	800f0f4 <__copybits>
 800f280:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f282:	9805      	ldr	r0, [sp, #20]
 800f284:	f7ff fb08 	bl	800e898 <_Bfree>
 800f288:	3e01      	subs	r6, #1
 800f28a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f28c:	2e04      	cmp	r6, #4
 800f28e:	d806      	bhi.n	800f29e <_strtod_l+0xe6>
 800f290:	e8df f006 	tbb	[pc, r6]
 800f294:	201d0314 	.word	0x201d0314
 800f298:	14          	.byte	0x14
 800f299:	00          	.byte	0x00
 800f29a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f29e:	05e1      	lsls	r1, r4, #23
 800f2a0:	bf48      	it	mi
 800f2a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f2a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f2aa:	0d1b      	lsrs	r3, r3, #20
 800f2ac:	051b      	lsls	r3, r3, #20
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1bb      	bne.n	800f22a <_strtod_l+0x72>
 800f2b2:	f7fe fb21 	bl	800d8f8 <__errno>
 800f2b6:	2322      	movs	r3, #34	@ 0x22
 800f2b8:	6003      	str	r3, [r0, #0]
 800f2ba:	e7b6      	b.n	800f22a <_strtod_l+0x72>
 800f2bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f2c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f2c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f2c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f2cc:	e7e7      	b.n	800f29e <_strtod_l+0xe6>
 800f2ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f44c <_strtod_l+0x294>
 800f2d2:	e7e4      	b.n	800f29e <_strtod_l+0xe6>
 800f2d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f2d8:	f04f 3aff 	mov.w	sl, #4294967295
 800f2dc:	e7df      	b.n	800f29e <_strtod_l+0xe6>
 800f2de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2e0:	1c5a      	adds	r2, r3, #1
 800f2e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2e4:	785b      	ldrb	r3, [r3, #1]
 800f2e6:	2b30      	cmp	r3, #48	@ 0x30
 800f2e8:	d0f9      	beq.n	800f2de <_strtod_l+0x126>
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d09d      	beq.n	800f22a <_strtod_l+0x72>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2f4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	9308      	str	r3, [sp, #32]
 800f2fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2fc:	461f      	mov	r7, r3
 800f2fe:	220a      	movs	r2, #10
 800f300:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f302:	7805      	ldrb	r5, [r0, #0]
 800f304:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f308:	b2d9      	uxtb	r1, r3
 800f30a:	2909      	cmp	r1, #9
 800f30c:	d928      	bls.n	800f360 <_strtod_l+0x1a8>
 800f30e:	494e      	ldr	r1, [pc, #312]	@ (800f448 <_strtod_l+0x290>)
 800f310:	2201      	movs	r2, #1
 800f312:	f000 ffbb 	bl	801028c <strncmp>
 800f316:	2800      	cmp	r0, #0
 800f318:	d032      	beq.n	800f380 <_strtod_l+0x1c8>
 800f31a:	2000      	movs	r0, #0
 800f31c:	462a      	mov	r2, r5
 800f31e:	4681      	mov	r9, r0
 800f320:	463d      	mov	r5, r7
 800f322:	4603      	mov	r3, r0
 800f324:	2a65      	cmp	r2, #101	@ 0x65
 800f326:	d001      	beq.n	800f32c <_strtod_l+0x174>
 800f328:	2a45      	cmp	r2, #69	@ 0x45
 800f32a:	d114      	bne.n	800f356 <_strtod_l+0x19e>
 800f32c:	b91d      	cbnz	r5, 800f336 <_strtod_l+0x17e>
 800f32e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f330:	4302      	orrs	r2, r0
 800f332:	d095      	beq.n	800f260 <_strtod_l+0xa8>
 800f334:	2500      	movs	r5, #0
 800f336:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f338:	1c62      	adds	r2, r4, #1
 800f33a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f33c:	7862      	ldrb	r2, [r4, #1]
 800f33e:	2a2b      	cmp	r2, #43	@ 0x2b
 800f340:	d077      	beq.n	800f432 <_strtod_l+0x27a>
 800f342:	2a2d      	cmp	r2, #45	@ 0x2d
 800f344:	d07b      	beq.n	800f43e <_strtod_l+0x286>
 800f346:	f04f 0c00 	mov.w	ip, #0
 800f34a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f34e:	2909      	cmp	r1, #9
 800f350:	f240 8082 	bls.w	800f458 <_strtod_l+0x2a0>
 800f354:	9419      	str	r4, [sp, #100]	@ 0x64
 800f356:	f04f 0800 	mov.w	r8, #0
 800f35a:	e0a2      	b.n	800f4a2 <_strtod_l+0x2ea>
 800f35c:	2300      	movs	r3, #0
 800f35e:	e7c7      	b.n	800f2f0 <_strtod_l+0x138>
 800f360:	2f08      	cmp	r7, #8
 800f362:	bfd5      	itete	le
 800f364:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f366:	9908      	ldrgt	r1, [sp, #32]
 800f368:	fb02 3301 	mlale	r3, r2, r1, r3
 800f36c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f370:	f100 0001 	add.w	r0, r0, #1
 800f374:	bfd4      	ite	le
 800f376:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f378:	9308      	strgt	r3, [sp, #32]
 800f37a:	3701      	adds	r7, #1
 800f37c:	9019      	str	r0, [sp, #100]	@ 0x64
 800f37e:	e7bf      	b.n	800f300 <_strtod_l+0x148>
 800f380:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f382:	1c5a      	adds	r2, r3, #1
 800f384:	9219      	str	r2, [sp, #100]	@ 0x64
 800f386:	785a      	ldrb	r2, [r3, #1]
 800f388:	b37f      	cbz	r7, 800f3ea <_strtod_l+0x232>
 800f38a:	4681      	mov	r9, r0
 800f38c:	463d      	mov	r5, r7
 800f38e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f392:	2b09      	cmp	r3, #9
 800f394:	d912      	bls.n	800f3bc <_strtod_l+0x204>
 800f396:	2301      	movs	r3, #1
 800f398:	e7c4      	b.n	800f324 <_strtod_l+0x16c>
 800f39a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f39c:	1c5a      	adds	r2, r3, #1
 800f39e:	9219      	str	r2, [sp, #100]	@ 0x64
 800f3a0:	785a      	ldrb	r2, [r3, #1]
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	2a30      	cmp	r2, #48	@ 0x30
 800f3a6:	d0f8      	beq.n	800f39a <_strtod_l+0x1e2>
 800f3a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f3ac:	2b08      	cmp	r3, #8
 800f3ae:	f200 84d3 	bhi.w	800fd58 <_strtod_l+0xba0>
 800f3b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f3b6:	4681      	mov	r9, r0
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	3a30      	subs	r2, #48	@ 0x30
 800f3be:	f100 0301 	add.w	r3, r0, #1
 800f3c2:	d02a      	beq.n	800f41a <_strtod_l+0x262>
 800f3c4:	4499      	add	r9, r3
 800f3c6:	eb00 0c05 	add.w	ip, r0, r5
 800f3ca:	462b      	mov	r3, r5
 800f3cc:	210a      	movs	r1, #10
 800f3ce:	4563      	cmp	r3, ip
 800f3d0:	d10d      	bne.n	800f3ee <_strtod_l+0x236>
 800f3d2:	1c69      	adds	r1, r5, #1
 800f3d4:	4401      	add	r1, r0
 800f3d6:	4428      	add	r0, r5
 800f3d8:	2808      	cmp	r0, #8
 800f3da:	dc16      	bgt.n	800f40a <_strtod_l+0x252>
 800f3dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f3de:	230a      	movs	r3, #10
 800f3e0:	fb03 2300 	mla	r3, r3, r0, r2
 800f3e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	e018      	b.n	800f41c <_strtod_l+0x264>
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	e7da      	b.n	800f3a4 <_strtod_l+0x1ec>
 800f3ee:	2b08      	cmp	r3, #8
 800f3f0:	f103 0301 	add.w	r3, r3, #1
 800f3f4:	dc03      	bgt.n	800f3fe <_strtod_l+0x246>
 800f3f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f3f8:	434e      	muls	r6, r1
 800f3fa:	960a      	str	r6, [sp, #40]	@ 0x28
 800f3fc:	e7e7      	b.n	800f3ce <_strtod_l+0x216>
 800f3fe:	2b10      	cmp	r3, #16
 800f400:	bfde      	ittt	le
 800f402:	9e08      	ldrle	r6, [sp, #32]
 800f404:	434e      	mulle	r6, r1
 800f406:	9608      	strle	r6, [sp, #32]
 800f408:	e7e1      	b.n	800f3ce <_strtod_l+0x216>
 800f40a:	280f      	cmp	r0, #15
 800f40c:	dceb      	bgt.n	800f3e6 <_strtod_l+0x22e>
 800f40e:	9808      	ldr	r0, [sp, #32]
 800f410:	230a      	movs	r3, #10
 800f412:	fb03 2300 	mla	r3, r3, r0, r2
 800f416:	9308      	str	r3, [sp, #32]
 800f418:	e7e5      	b.n	800f3e6 <_strtod_l+0x22e>
 800f41a:	4629      	mov	r1, r5
 800f41c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f41e:	1c50      	adds	r0, r2, #1
 800f420:	9019      	str	r0, [sp, #100]	@ 0x64
 800f422:	7852      	ldrb	r2, [r2, #1]
 800f424:	4618      	mov	r0, r3
 800f426:	460d      	mov	r5, r1
 800f428:	e7b1      	b.n	800f38e <_strtod_l+0x1d6>
 800f42a:	f04f 0900 	mov.w	r9, #0
 800f42e:	2301      	movs	r3, #1
 800f430:	e77d      	b.n	800f32e <_strtod_l+0x176>
 800f432:	f04f 0c00 	mov.w	ip, #0
 800f436:	1ca2      	adds	r2, r4, #2
 800f438:	9219      	str	r2, [sp, #100]	@ 0x64
 800f43a:	78a2      	ldrb	r2, [r4, #2]
 800f43c:	e785      	b.n	800f34a <_strtod_l+0x192>
 800f43e:	f04f 0c01 	mov.w	ip, #1
 800f442:	e7f8      	b.n	800f436 <_strtod_l+0x27e>
 800f444:	08013bb0 	.word	0x08013bb0
 800f448:	08013b98 	.word	0x08013b98
 800f44c:	7ff00000 	.word	0x7ff00000
 800f450:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f452:	1c51      	adds	r1, r2, #1
 800f454:	9119      	str	r1, [sp, #100]	@ 0x64
 800f456:	7852      	ldrb	r2, [r2, #1]
 800f458:	2a30      	cmp	r2, #48	@ 0x30
 800f45a:	d0f9      	beq.n	800f450 <_strtod_l+0x298>
 800f45c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f460:	2908      	cmp	r1, #8
 800f462:	f63f af78 	bhi.w	800f356 <_strtod_l+0x19e>
 800f466:	3a30      	subs	r2, #48	@ 0x30
 800f468:	920e      	str	r2, [sp, #56]	@ 0x38
 800f46a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f46c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f46e:	f04f 080a 	mov.w	r8, #10
 800f472:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f474:	1c56      	adds	r6, r2, #1
 800f476:	9619      	str	r6, [sp, #100]	@ 0x64
 800f478:	7852      	ldrb	r2, [r2, #1]
 800f47a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f47e:	f1be 0f09 	cmp.w	lr, #9
 800f482:	d939      	bls.n	800f4f8 <_strtod_l+0x340>
 800f484:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f486:	1a76      	subs	r6, r6, r1
 800f488:	2e08      	cmp	r6, #8
 800f48a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f48e:	dc03      	bgt.n	800f498 <_strtod_l+0x2e0>
 800f490:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f492:	4588      	cmp	r8, r1
 800f494:	bfa8      	it	ge
 800f496:	4688      	movge	r8, r1
 800f498:	f1bc 0f00 	cmp.w	ip, #0
 800f49c:	d001      	beq.n	800f4a2 <_strtod_l+0x2ea>
 800f49e:	f1c8 0800 	rsb	r8, r8, #0
 800f4a2:	2d00      	cmp	r5, #0
 800f4a4:	d14e      	bne.n	800f544 <_strtod_l+0x38c>
 800f4a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f4a8:	4308      	orrs	r0, r1
 800f4aa:	f47f aebe 	bne.w	800f22a <_strtod_l+0x72>
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f47f aed6 	bne.w	800f260 <_strtod_l+0xa8>
 800f4b4:	2a69      	cmp	r2, #105	@ 0x69
 800f4b6:	d028      	beq.n	800f50a <_strtod_l+0x352>
 800f4b8:	dc25      	bgt.n	800f506 <_strtod_l+0x34e>
 800f4ba:	2a49      	cmp	r2, #73	@ 0x49
 800f4bc:	d025      	beq.n	800f50a <_strtod_l+0x352>
 800f4be:	2a4e      	cmp	r2, #78	@ 0x4e
 800f4c0:	f47f aece 	bne.w	800f260 <_strtod_l+0xa8>
 800f4c4:	499b      	ldr	r1, [pc, #620]	@ (800f734 <_strtod_l+0x57c>)
 800f4c6:	a819      	add	r0, sp, #100	@ 0x64
 800f4c8:	f001 f9ea 	bl	80108a0 <__match>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	f43f aec7 	beq.w	800f260 <_strtod_l+0xa8>
 800f4d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	2b28      	cmp	r3, #40	@ 0x28
 800f4d8:	d12e      	bne.n	800f538 <_strtod_l+0x380>
 800f4da:	4997      	ldr	r1, [pc, #604]	@ (800f738 <_strtod_l+0x580>)
 800f4dc:	aa1c      	add	r2, sp, #112	@ 0x70
 800f4de:	a819      	add	r0, sp, #100	@ 0x64
 800f4e0:	f001 f9f2 	bl	80108c8 <__hexnan>
 800f4e4:	2805      	cmp	r0, #5
 800f4e6:	d127      	bne.n	800f538 <_strtod_l+0x380>
 800f4e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f4ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f4ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f4f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f4f6:	e698      	b.n	800f22a <_strtod_l+0x72>
 800f4f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f4fa:	fb08 2101 	mla	r1, r8, r1, r2
 800f4fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f502:	920e      	str	r2, [sp, #56]	@ 0x38
 800f504:	e7b5      	b.n	800f472 <_strtod_l+0x2ba>
 800f506:	2a6e      	cmp	r2, #110	@ 0x6e
 800f508:	e7da      	b.n	800f4c0 <_strtod_l+0x308>
 800f50a:	498c      	ldr	r1, [pc, #560]	@ (800f73c <_strtod_l+0x584>)
 800f50c:	a819      	add	r0, sp, #100	@ 0x64
 800f50e:	f001 f9c7 	bl	80108a0 <__match>
 800f512:	2800      	cmp	r0, #0
 800f514:	f43f aea4 	beq.w	800f260 <_strtod_l+0xa8>
 800f518:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f51a:	4989      	ldr	r1, [pc, #548]	@ (800f740 <_strtod_l+0x588>)
 800f51c:	3b01      	subs	r3, #1
 800f51e:	a819      	add	r0, sp, #100	@ 0x64
 800f520:	9319      	str	r3, [sp, #100]	@ 0x64
 800f522:	f001 f9bd 	bl	80108a0 <__match>
 800f526:	b910      	cbnz	r0, 800f52e <_strtod_l+0x376>
 800f528:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f52a:	3301      	adds	r3, #1
 800f52c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f52e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f750 <_strtod_l+0x598>
 800f532:	f04f 0a00 	mov.w	sl, #0
 800f536:	e678      	b.n	800f22a <_strtod_l+0x72>
 800f538:	4882      	ldr	r0, [pc, #520]	@ (800f744 <_strtod_l+0x58c>)
 800f53a:	f000 feed 	bl	8010318 <nan>
 800f53e:	ec5b ab10 	vmov	sl, fp, d0
 800f542:	e672      	b.n	800f22a <_strtod_l+0x72>
 800f544:	eba8 0309 	sub.w	r3, r8, r9
 800f548:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f54a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f54c:	2f00      	cmp	r7, #0
 800f54e:	bf08      	it	eq
 800f550:	462f      	moveq	r7, r5
 800f552:	2d10      	cmp	r5, #16
 800f554:	462c      	mov	r4, r5
 800f556:	bfa8      	it	ge
 800f558:	2410      	movge	r4, #16
 800f55a:	f7f0 ffe3 	bl	8000524 <__aeabi_ui2d>
 800f55e:	2d09      	cmp	r5, #9
 800f560:	4682      	mov	sl, r0
 800f562:	468b      	mov	fp, r1
 800f564:	dc13      	bgt.n	800f58e <_strtod_l+0x3d6>
 800f566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f43f ae5e 	beq.w	800f22a <_strtod_l+0x72>
 800f56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f570:	dd78      	ble.n	800f664 <_strtod_l+0x4ac>
 800f572:	2b16      	cmp	r3, #22
 800f574:	dc5f      	bgt.n	800f636 <_strtod_l+0x47e>
 800f576:	4974      	ldr	r1, [pc, #464]	@ (800f748 <_strtod_l+0x590>)
 800f578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f57c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f580:	4652      	mov	r2, sl
 800f582:	465b      	mov	r3, fp
 800f584:	f7f1 f848 	bl	8000618 <__aeabi_dmul>
 800f588:	4682      	mov	sl, r0
 800f58a:	468b      	mov	fp, r1
 800f58c:	e64d      	b.n	800f22a <_strtod_l+0x72>
 800f58e:	4b6e      	ldr	r3, [pc, #440]	@ (800f748 <_strtod_l+0x590>)
 800f590:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f594:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f598:	f7f1 f83e 	bl	8000618 <__aeabi_dmul>
 800f59c:	4682      	mov	sl, r0
 800f59e:	9808      	ldr	r0, [sp, #32]
 800f5a0:	468b      	mov	fp, r1
 800f5a2:	f7f0 ffbf 	bl	8000524 <__aeabi_ui2d>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	4650      	mov	r0, sl
 800f5ac:	4659      	mov	r1, fp
 800f5ae:	f7f0 fe7d 	bl	80002ac <__adddf3>
 800f5b2:	2d0f      	cmp	r5, #15
 800f5b4:	4682      	mov	sl, r0
 800f5b6:	468b      	mov	fp, r1
 800f5b8:	ddd5      	ble.n	800f566 <_strtod_l+0x3ae>
 800f5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5bc:	1b2c      	subs	r4, r5, r4
 800f5be:	441c      	add	r4, r3
 800f5c0:	2c00      	cmp	r4, #0
 800f5c2:	f340 8096 	ble.w	800f6f2 <_strtod_l+0x53a>
 800f5c6:	f014 030f 	ands.w	r3, r4, #15
 800f5ca:	d00a      	beq.n	800f5e2 <_strtod_l+0x42a>
 800f5cc:	495e      	ldr	r1, [pc, #376]	@ (800f748 <_strtod_l+0x590>)
 800f5ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f5d2:	4652      	mov	r2, sl
 800f5d4:	465b      	mov	r3, fp
 800f5d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5da:	f7f1 f81d 	bl	8000618 <__aeabi_dmul>
 800f5de:	4682      	mov	sl, r0
 800f5e0:	468b      	mov	fp, r1
 800f5e2:	f034 040f 	bics.w	r4, r4, #15
 800f5e6:	d073      	beq.n	800f6d0 <_strtod_l+0x518>
 800f5e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f5ec:	dd48      	ble.n	800f680 <_strtod_l+0x4c8>
 800f5ee:	2400      	movs	r4, #0
 800f5f0:	46a0      	mov	r8, r4
 800f5f2:	940a      	str	r4, [sp, #40]	@ 0x28
 800f5f4:	46a1      	mov	r9, r4
 800f5f6:	9a05      	ldr	r2, [sp, #20]
 800f5f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f750 <_strtod_l+0x598>
 800f5fc:	2322      	movs	r3, #34	@ 0x22
 800f5fe:	6013      	str	r3, [r2, #0]
 800f600:	f04f 0a00 	mov.w	sl, #0
 800f604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f606:	2b00      	cmp	r3, #0
 800f608:	f43f ae0f 	beq.w	800f22a <_strtod_l+0x72>
 800f60c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f60e:	9805      	ldr	r0, [sp, #20]
 800f610:	f7ff f942 	bl	800e898 <_Bfree>
 800f614:	9805      	ldr	r0, [sp, #20]
 800f616:	4649      	mov	r1, r9
 800f618:	f7ff f93e 	bl	800e898 <_Bfree>
 800f61c:	9805      	ldr	r0, [sp, #20]
 800f61e:	4641      	mov	r1, r8
 800f620:	f7ff f93a 	bl	800e898 <_Bfree>
 800f624:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f626:	9805      	ldr	r0, [sp, #20]
 800f628:	f7ff f936 	bl	800e898 <_Bfree>
 800f62c:	9805      	ldr	r0, [sp, #20]
 800f62e:	4621      	mov	r1, r4
 800f630:	f7ff f932 	bl	800e898 <_Bfree>
 800f634:	e5f9      	b.n	800f22a <_strtod_l+0x72>
 800f636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f638:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f63c:	4293      	cmp	r3, r2
 800f63e:	dbbc      	blt.n	800f5ba <_strtod_l+0x402>
 800f640:	4c41      	ldr	r4, [pc, #260]	@ (800f748 <_strtod_l+0x590>)
 800f642:	f1c5 050f 	rsb	r5, r5, #15
 800f646:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f64a:	4652      	mov	r2, sl
 800f64c:	465b      	mov	r3, fp
 800f64e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f652:	f7f0 ffe1 	bl	8000618 <__aeabi_dmul>
 800f656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f658:	1b5d      	subs	r5, r3, r5
 800f65a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f65e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f662:	e78f      	b.n	800f584 <_strtod_l+0x3cc>
 800f664:	3316      	adds	r3, #22
 800f666:	dba8      	blt.n	800f5ba <_strtod_l+0x402>
 800f668:	4b37      	ldr	r3, [pc, #220]	@ (800f748 <_strtod_l+0x590>)
 800f66a:	eba9 0808 	sub.w	r8, r9, r8
 800f66e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f672:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f676:	4650      	mov	r0, sl
 800f678:	4659      	mov	r1, fp
 800f67a:	f7f1 f8f7 	bl	800086c <__aeabi_ddiv>
 800f67e:	e783      	b.n	800f588 <_strtod_l+0x3d0>
 800f680:	4b32      	ldr	r3, [pc, #200]	@ (800f74c <_strtod_l+0x594>)
 800f682:	9308      	str	r3, [sp, #32]
 800f684:	2300      	movs	r3, #0
 800f686:	1124      	asrs	r4, r4, #4
 800f688:	4650      	mov	r0, sl
 800f68a:	4659      	mov	r1, fp
 800f68c:	461e      	mov	r6, r3
 800f68e:	2c01      	cmp	r4, #1
 800f690:	dc21      	bgt.n	800f6d6 <_strtod_l+0x51e>
 800f692:	b10b      	cbz	r3, 800f698 <_strtod_l+0x4e0>
 800f694:	4682      	mov	sl, r0
 800f696:	468b      	mov	fp, r1
 800f698:	492c      	ldr	r1, [pc, #176]	@ (800f74c <_strtod_l+0x594>)
 800f69a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f69e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f6a2:	4652      	mov	r2, sl
 800f6a4:	465b      	mov	r3, fp
 800f6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6aa:	f7f0 ffb5 	bl	8000618 <__aeabi_dmul>
 800f6ae:	4b28      	ldr	r3, [pc, #160]	@ (800f750 <_strtod_l+0x598>)
 800f6b0:	460a      	mov	r2, r1
 800f6b2:	400b      	ands	r3, r1
 800f6b4:	4927      	ldr	r1, [pc, #156]	@ (800f754 <_strtod_l+0x59c>)
 800f6b6:	428b      	cmp	r3, r1
 800f6b8:	4682      	mov	sl, r0
 800f6ba:	d898      	bhi.n	800f5ee <_strtod_l+0x436>
 800f6bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f6c0:	428b      	cmp	r3, r1
 800f6c2:	bf86      	itte	hi
 800f6c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f758 <_strtod_l+0x5a0>
 800f6c8:	f04f 3aff 	movhi.w	sl, #4294967295
 800f6cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	9308      	str	r3, [sp, #32]
 800f6d4:	e07a      	b.n	800f7cc <_strtod_l+0x614>
 800f6d6:	07e2      	lsls	r2, r4, #31
 800f6d8:	d505      	bpl.n	800f6e6 <_strtod_l+0x52e>
 800f6da:	9b08      	ldr	r3, [sp, #32]
 800f6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e0:	f7f0 ff9a 	bl	8000618 <__aeabi_dmul>
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	9a08      	ldr	r2, [sp, #32]
 800f6e8:	3208      	adds	r2, #8
 800f6ea:	3601      	adds	r6, #1
 800f6ec:	1064      	asrs	r4, r4, #1
 800f6ee:	9208      	str	r2, [sp, #32]
 800f6f0:	e7cd      	b.n	800f68e <_strtod_l+0x4d6>
 800f6f2:	d0ed      	beq.n	800f6d0 <_strtod_l+0x518>
 800f6f4:	4264      	negs	r4, r4
 800f6f6:	f014 020f 	ands.w	r2, r4, #15
 800f6fa:	d00a      	beq.n	800f712 <_strtod_l+0x55a>
 800f6fc:	4b12      	ldr	r3, [pc, #72]	@ (800f748 <_strtod_l+0x590>)
 800f6fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f702:	4650      	mov	r0, sl
 800f704:	4659      	mov	r1, fp
 800f706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70a:	f7f1 f8af 	bl	800086c <__aeabi_ddiv>
 800f70e:	4682      	mov	sl, r0
 800f710:	468b      	mov	fp, r1
 800f712:	1124      	asrs	r4, r4, #4
 800f714:	d0dc      	beq.n	800f6d0 <_strtod_l+0x518>
 800f716:	2c1f      	cmp	r4, #31
 800f718:	dd20      	ble.n	800f75c <_strtod_l+0x5a4>
 800f71a:	2400      	movs	r4, #0
 800f71c:	46a0      	mov	r8, r4
 800f71e:	940a      	str	r4, [sp, #40]	@ 0x28
 800f720:	46a1      	mov	r9, r4
 800f722:	9a05      	ldr	r2, [sp, #20]
 800f724:	2322      	movs	r3, #34	@ 0x22
 800f726:	f04f 0a00 	mov.w	sl, #0
 800f72a:	f04f 0b00 	mov.w	fp, #0
 800f72e:	6013      	str	r3, [r2, #0]
 800f730:	e768      	b.n	800f604 <_strtod_l+0x44c>
 800f732:	bf00      	nop
 800f734:	0801398a 	.word	0x0801398a
 800f738:	08013b9c 	.word	0x08013b9c
 800f73c:	08013982 	.word	0x08013982
 800f740:	080139b9 	.word	0x080139b9
 800f744:	08013c44 	.word	0x08013c44
 800f748:	08013ad0 	.word	0x08013ad0
 800f74c:	08013aa8 	.word	0x08013aa8
 800f750:	7ff00000 	.word	0x7ff00000
 800f754:	7ca00000 	.word	0x7ca00000
 800f758:	7fefffff 	.word	0x7fefffff
 800f75c:	f014 0310 	ands.w	r3, r4, #16
 800f760:	bf18      	it	ne
 800f762:	236a      	movne	r3, #106	@ 0x6a
 800f764:	4ea9      	ldr	r6, [pc, #676]	@ (800fa0c <_strtod_l+0x854>)
 800f766:	9308      	str	r3, [sp, #32]
 800f768:	4650      	mov	r0, sl
 800f76a:	4659      	mov	r1, fp
 800f76c:	2300      	movs	r3, #0
 800f76e:	07e2      	lsls	r2, r4, #31
 800f770:	d504      	bpl.n	800f77c <_strtod_l+0x5c4>
 800f772:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f776:	f7f0 ff4f 	bl	8000618 <__aeabi_dmul>
 800f77a:	2301      	movs	r3, #1
 800f77c:	1064      	asrs	r4, r4, #1
 800f77e:	f106 0608 	add.w	r6, r6, #8
 800f782:	d1f4      	bne.n	800f76e <_strtod_l+0x5b6>
 800f784:	b10b      	cbz	r3, 800f78a <_strtod_l+0x5d2>
 800f786:	4682      	mov	sl, r0
 800f788:	468b      	mov	fp, r1
 800f78a:	9b08      	ldr	r3, [sp, #32]
 800f78c:	b1b3      	cbz	r3, 800f7bc <_strtod_l+0x604>
 800f78e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f792:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f796:	2b00      	cmp	r3, #0
 800f798:	4659      	mov	r1, fp
 800f79a:	dd0f      	ble.n	800f7bc <_strtod_l+0x604>
 800f79c:	2b1f      	cmp	r3, #31
 800f79e:	dd55      	ble.n	800f84c <_strtod_l+0x694>
 800f7a0:	2b34      	cmp	r3, #52	@ 0x34
 800f7a2:	bfde      	ittt	le
 800f7a4:	f04f 33ff 	movle.w	r3, #4294967295
 800f7a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f7ac:	4093      	lslle	r3, r2
 800f7ae:	f04f 0a00 	mov.w	sl, #0
 800f7b2:	bfcc      	ite	gt
 800f7b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f7b8:	ea03 0b01 	andle.w	fp, r3, r1
 800f7bc:	2200      	movs	r2, #0
 800f7be:	2300      	movs	r3, #0
 800f7c0:	4650      	mov	r0, sl
 800f7c2:	4659      	mov	r1, fp
 800f7c4:	f7f1 f990 	bl	8000ae8 <__aeabi_dcmpeq>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d1a6      	bne.n	800f71a <_strtod_l+0x562>
 800f7cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7ce:	9300      	str	r3, [sp, #0]
 800f7d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f7d2:	9805      	ldr	r0, [sp, #20]
 800f7d4:	462b      	mov	r3, r5
 800f7d6:	463a      	mov	r2, r7
 800f7d8:	f7ff f8c6 	bl	800e968 <__s2b>
 800f7dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f43f af05 	beq.w	800f5ee <_strtod_l+0x436>
 800f7e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7e6:	2a00      	cmp	r2, #0
 800f7e8:	eba9 0308 	sub.w	r3, r9, r8
 800f7ec:	bfa8      	it	ge
 800f7ee:	2300      	movge	r3, #0
 800f7f0:	9312      	str	r3, [sp, #72]	@ 0x48
 800f7f2:	2400      	movs	r4, #0
 800f7f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f7f8:	9316      	str	r3, [sp, #88]	@ 0x58
 800f7fa:	46a0      	mov	r8, r4
 800f7fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7fe:	9805      	ldr	r0, [sp, #20]
 800f800:	6859      	ldr	r1, [r3, #4]
 800f802:	f7ff f809 	bl	800e818 <_Balloc>
 800f806:	4681      	mov	r9, r0
 800f808:	2800      	cmp	r0, #0
 800f80a:	f43f aef4 	beq.w	800f5f6 <_strtod_l+0x43e>
 800f80e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f810:	691a      	ldr	r2, [r3, #16]
 800f812:	3202      	adds	r2, #2
 800f814:	f103 010c 	add.w	r1, r3, #12
 800f818:	0092      	lsls	r2, r2, #2
 800f81a:	300c      	adds	r0, #12
 800f81c:	f7fe f899 	bl	800d952 <memcpy>
 800f820:	ec4b ab10 	vmov	d0, sl, fp
 800f824:	9805      	ldr	r0, [sp, #20]
 800f826:	aa1c      	add	r2, sp, #112	@ 0x70
 800f828:	a91b      	add	r1, sp, #108	@ 0x6c
 800f82a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f82e:	f7ff fbd7 	bl	800efe0 <__d2b>
 800f832:	901a      	str	r0, [sp, #104]	@ 0x68
 800f834:	2800      	cmp	r0, #0
 800f836:	f43f aede 	beq.w	800f5f6 <_strtod_l+0x43e>
 800f83a:	9805      	ldr	r0, [sp, #20]
 800f83c:	2101      	movs	r1, #1
 800f83e:	f7ff f929 	bl	800ea94 <__i2b>
 800f842:	4680      	mov	r8, r0
 800f844:	b948      	cbnz	r0, 800f85a <_strtod_l+0x6a2>
 800f846:	f04f 0800 	mov.w	r8, #0
 800f84a:	e6d4      	b.n	800f5f6 <_strtod_l+0x43e>
 800f84c:	f04f 32ff 	mov.w	r2, #4294967295
 800f850:	fa02 f303 	lsl.w	r3, r2, r3
 800f854:	ea03 0a0a 	and.w	sl, r3, sl
 800f858:	e7b0      	b.n	800f7bc <_strtod_l+0x604>
 800f85a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f85c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f85e:	2d00      	cmp	r5, #0
 800f860:	bfab      	itete	ge
 800f862:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f864:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f866:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f868:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f86a:	bfac      	ite	ge
 800f86c:	18ef      	addge	r7, r5, r3
 800f86e:	1b5e      	sublt	r6, r3, r5
 800f870:	9b08      	ldr	r3, [sp, #32]
 800f872:	1aed      	subs	r5, r5, r3
 800f874:	4415      	add	r5, r2
 800f876:	4b66      	ldr	r3, [pc, #408]	@ (800fa10 <_strtod_l+0x858>)
 800f878:	3d01      	subs	r5, #1
 800f87a:	429d      	cmp	r5, r3
 800f87c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f880:	da50      	bge.n	800f924 <_strtod_l+0x76c>
 800f882:	1b5b      	subs	r3, r3, r5
 800f884:	2b1f      	cmp	r3, #31
 800f886:	eba2 0203 	sub.w	r2, r2, r3
 800f88a:	f04f 0101 	mov.w	r1, #1
 800f88e:	dc3d      	bgt.n	800f90c <_strtod_l+0x754>
 800f890:	fa01 f303 	lsl.w	r3, r1, r3
 800f894:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f896:	2300      	movs	r3, #0
 800f898:	9310      	str	r3, [sp, #64]	@ 0x40
 800f89a:	18bd      	adds	r5, r7, r2
 800f89c:	9b08      	ldr	r3, [sp, #32]
 800f89e:	42af      	cmp	r7, r5
 800f8a0:	4416      	add	r6, r2
 800f8a2:	441e      	add	r6, r3
 800f8a4:	463b      	mov	r3, r7
 800f8a6:	bfa8      	it	ge
 800f8a8:	462b      	movge	r3, r5
 800f8aa:	42b3      	cmp	r3, r6
 800f8ac:	bfa8      	it	ge
 800f8ae:	4633      	movge	r3, r6
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	bfc2      	ittt	gt
 800f8b4:	1aed      	subgt	r5, r5, r3
 800f8b6:	1af6      	subgt	r6, r6, r3
 800f8b8:	1aff      	subgt	r7, r7, r3
 800f8ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	dd16      	ble.n	800f8ee <_strtod_l+0x736>
 800f8c0:	4641      	mov	r1, r8
 800f8c2:	9805      	ldr	r0, [sp, #20]
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	f7ff f9a5 	bl	800ec14 <__pow5mult>
 800f8ca:	4680      	mov	r8, r0
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d0ba      	beq.n	800f846 <_strtod_l+0x68e>
 800f8d0:	4601      	mov	r1, r0
 800f8d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f8d4:	9805      	ldr	r0, [sp, #20]
 800f8d6:	f7ff f8f3 	bl	800eac0 <__multiply>
 800f8da:	900e      	str	r0, [sp, #56]	@ 0x38
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	f43f ae8a 	beq.w	800f5f6 <_strtod_l+0x43e>
 800f8e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f8e4:	9805      	ldr	r0, [sp, #20]
 800f8e6:	f7fe ffd7 	bl	800e898 <_Bfree>
 800f8ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800f8ee:	2d00      	cmp	r5, #0
 800f8f0:	dc1d      	bgt.n	800f92e <_strtod_l+0x776>
 800f8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dd23      	ble.n	800f940 <_strtod_l+0x788>
 800f8f8:	4649      	mov	r1, r9
 800f8fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f8fc:	9805      	ldr	r0, [sp, #20]
 800f8fe:	f7ff f989 	bl	800ec14 <__pow5mult>
 800f902:	4681      	mov	r9, r0
 800f904:	b9e0      	cbnz	r0, 800f940 <_strtod_l+0x788>
 800f906:	f04f 0900 	mov.w	r9, #0
 800f90a:	e674      	b.n	800f5f6 <_strtod_l+0x43e>
 800f90c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f910:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f914:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f918:	35e2      	adds	r5, #226	@ 0xe2
 800f91a:	fa01 f305 	lsl.w	r3, r1, r5
 800f91e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f920:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f922:	e7ba      	b.n	800f89a <_strtod_l+0x6e2>
 800f924:	2300      	movs	r3, #0
 800f926:	9310      	str	r3, [sp, #64]	@ 0x40
 800f928:	2301      	movs	r3, #1
 800f92a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f92c:	e7b5      	b.n	800f89a <_strtod_l+0x6e2>
 800f92e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f930:	9805      	ldr	r0, [sp, #20]
 800f932:	462a      	mov	r2, r5
 800f934:	f7ff f9c8 	bl	800ecc8 <__lshift>
 800f938:	901a      	str	r0, [sp, #104]	@ 0x68
 800f93a:	2800      	cmp	r0, #0
 800f93c:	d1d9      	bne.n	800f8f2 <_strtod_l+0x73a>
 800f93e:	e65a      	b.n	800f5f6 <_strtod_l+0x43e>
 800f940:	2e00      	cmp	r6, #0
 800f942:	dd07      	ble.n	800f954 <_strtod_l+0x79c>
 800f944:	4649      	mov	r1, r9
 800f946:	9805      	ldr	r0, [sp, #20]
 800f948:	4632      	mov	r2, r6
 800f94a:	f7ff f9bd 	bl	800ecc8 <__lshift>
 800f94e:	4681      	mov	r9, r0
 800f950:	2800      	cmp	r0, #0
 800f952:	d0d8      	beq.n	800f906 <_strtod_l+0x74e>
 800f954:	2f00      	cmp	r7, #0
 800f956:	dd08      	ble.n	800f96a <_strtod_l+0x7b2>
 800f958:	4641      	mov	r1, r8
 800f95a:	9805      	ldr	r0, [sp, #20]
 800f95c:	463a      	mov	r2, r7
 800f95e:	f7ff f9b3 	bl	800ecc8 <__lshift>
 800f962:	4680      	mov	r8, r0
 800f964:	2800      	cmp	r0, #0
 800f966:	f43f ae46 	beq.w	800f5f6 <_strtod_l+0x43e>
 800f96a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f96c:	9805      	ldr	r0, [sp, #20]
 800f96e:	464a      	mov	r2, r9
 800f970:	f7ff fa32 	bl	800edd8 <__mdiff>
 800f974:	4604      	mov	r4, r0
 800f976:	2800      	cmp	r0, #0
 800f978:	f43f ae3d 	beq.w	800f5f6 <_strtod_l+0x43e>
 800f97c:	68c3      	ldr	r3, [r0, #12]
 800f97e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f980:	2300      	movs	r3, #0
 800f982:	60c3      	str	r3, [r0, #12]
 800f984:	4641      	mov	r1, r8
 800f986:	f7ff fa0b 	bl	800eda0 <__mcmp>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	da46      	bge.n	800fa1c <_strtod_l+0x864>
 800f98e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f990:	ea53 030a 	orrs.w	r3, r3, sl
 800f994:	d16c      	bne.n	800fa70 <_strtod_l+0x8b8>
 800f996:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d168      	bne.n	800fa70 <_strtod_l+0x8b8>
 800f99e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f9a2:	0d1b      	lsrs	r3, r3, #20
 800f9a4:	051b      	lsls	r3, r3, #20
 800f9a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f9aa:	d961      	bls.n	800fa70 <_strtod_l+0x8b8>
 800f9ac:	6963      	ldr	r3, [r4, #20]
 800f9ae:	b913      	cbnz	r3, 800f9b6 <_strtod_l+0x7fe>
 800f9b0:	6923      	ldr	r3, [r4, #16]
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	dd5c      	ble.n	800fa70 <_strtod_l+0x8b8>
 800f9b6:	4621      	mov	r1, r4
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	9805      	ldr	r0, [sp, #20]
 800f9bc:	f7ff f984 	bl	800ecc8 <__lshift>
 800f9c0:	4641      	mov	r1, r8
 800f9c2:	4604      	mov	r4, r0
 800f9c4:	f7ff f9ec 	bl	800eda0 <__mcmp>
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	dd51      	ble.n	800fa70 <_strtod_l+0x8b8>
 800f9cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f9d0:	9a08      	ldr	r2, [sp, #32]
 800f9d2:	0d1b      	lsrs	r3, r3, #20
 800f9d4:	051b      	lsls	r3, r3, #20
 800f9d6:	2a00      	cmp	r2, #0
 800f9d8:	d06b      	beq.n	800fab2 <_strtod_l+0x8fa>
 800f9da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f9de:	d868      	bhi.n	800fab2 <_strtod_l+0x8fa>
 800f9e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f9e4:	f67f ae9d 	bls.w	800f722 <_strtod_l+0x56a>
 800f9e8:	4b0a      	ldr	r3, [pc, #40]	@ (800fa14 <_strtod_l+0x85c>)
 800f9ea:	4650      	mov	r0, sl
 800f9ec:	4659      	mov	r1, fp
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f7f0 fe12 	bl	8000618 <__aeabi_dmul>
 800f9f4:	4b08      	ldr	r3, [pc, #32]	@ (800fa18 <_strtod_l+0x860>)
 800f9f6:	400b      	ands	r3, r1
 800f9f8:	4682      	mov	sl, r0
 800f9fa:	468b      	mov	fp, r1
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f47f ae05 	bne.w	800f60c <_strtod_l+0x454>
 800fa02:	9a05      	ldr	r2, [sp, #20]
 800fa04:	2322      	movs	r3, #34	@ 0x22
 800fa06:	6013      	str	r3, [r2, #0]
 800fa08:	e600      	b.n	800f60c <_strtod_l+0x454>
 800fa0a:	bf00      	nop
 800fa0c:	08013bc8 	.word	0x08013bc8
 800fa10:	fffffc02 	.word	0xfffffc02
 800fa14:	39500000 	.word	0x39500000
 800fa18:	7ff00000 	.word	0x7ff00000
 800fa1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fa20:	d165      	bne.n	800faee <_strtod_l+0x936>
 800fa22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fa24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa28:	b35a      	cbz	r2, 800fa82 <_strtod_l+0x8ca>
 800fa2a:	4a9f      	ldr	r2, [pc, #636]	@ (800fca8 <_strtod_l+0xaf0>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d12b      	bne.n	800fa88 <_strtod_l+0x8d0>
 800fa30:	9b08      	ldr	r3, [sp, #32]
 800fa32:	4651      	mov	r1, sl
 800fa34:	b303      	cbz	r3, 800fa78 <_strtod_l+0x8c0>
 800fa36:	4b9d      	ldr	r3, [pc, #628]	@ (800fcac <_strtod_l+0xaf4>)
 800fa38:	465a      	mov	r2, fp
 800fa3a:	4013      	ands	r3, r2
 800fa3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fa40:	f04f 32ff 	mov.w	r2, #4294967295
 800fa44:	d81b      	bhi.n	800fa7e <_strtod_l+0x8c6>
 800fa46:	0d1b      	lsrs	r3, r3, #20
 800fa48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fa4c:	fa02 f303 	lsl.w	r3, r2, r3
 800fa50:	4299      	cmp	r1, r3
 800fa52:	d119      	bne.n	800fa88 <_strtod_l+0x8d0>
 800fa54:	4b96      	ldr	r3, [pc, #600]	@ (800fcb0 <_strtod_l+0xaf8>)
 800fa56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d102      	bne.n	800fa62 <_strtod_l+0x8aa>
 800fa5c:	3101      	adds	r1, #1
 800fa5e:	f43f adca 	beq.w	800f5f6 <_strtod_l+0x43e>
 800fa62:	4b92      	ldr	r3, [pc, #584]	@ (800fcac <_strtod_l+0xaf4>)
 800fa64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa66:	401a      	ands	r2, r3
 800fa68:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fa6c:	f04f 0a00 	mov.w	sl, #0
 800fa70:	9b08      	ldr	r3, [sp, #32]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d1b8      	bne.n	800f9e8 <_strtod_l+0x830>
 800fa76:	e5c9      	b.n	800f60c <_strtod_l+0x454>
 800fa78:	f04f 33ff 	mov.w	r3, #4294967295
 800fa7c:	e7e8      	b.n	800fa50 <_strtod_l+0x898>
 800fa7e:	4613      	mov	r3, r2
 800fa80:	e7e6      	b.n	800fa50 <_strtod_l+0x898>
 800fa82:	ea53 030a 	orrs.w	r3, r3, sl
 800fa86:	d0a1      	beq.n	800f9cc <_strtod_l+0x814>
 800fa88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fa8a:	b1db      	cbz	r3, 800fac4 <_strtod_l+0x90c>
 800fa8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa8e:	4213      	tst	r3, r2
 800fa90:	d0ee      	beq.n	800fa70 <_strtod_l+0x8b8>
 800fa92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa94:	9a08      	ldr	r2, [sp, #32]
 800fa96:	4650      	mov	r0, sl
 800fa98:	4659      	mov	r1, fp
 800fa9a:	b1bb      	cbz	r3, 800facc <_strtod_l+0x914>
 800fa9c:	f7ff fb6e 	bl	800f17c <sulp>
 800faa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800faa4:	ec53 2b10 	vmov	r2, r3, d0
 800faa8:	f7f0 fc00 	bl	80002ac <__adddf3>
 800faac:	4682      	mov	sl, r0
 800faae:	468b      	mov	fp, r1
 800fab0:	e7de      	b.n	800fa70 <_strtod_l+0x8b8>
 800fab2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fab6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800faba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fabe:	f04f 3aff 	mov.w	sl, #4294967295
 800fac2:	e7d5      	b.n	800fa70 <_strtod_l+0x8b8>
 800fac4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fac6:	ea13 0f0a 	tst.w	r3, sl
 800faca:	e7e1      	b.n	800fa90 <_strtod_l+0x8d8>
 800facc:	f7ff fb56 	bl	800f17c <sulp>
 800fad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fad4:	ec53 2b10 	vmov	r2, r3, d0
 800fad8:	f7f0 fbe6 	bl	80002a8 <__aeabi_dsub>
 800fadc:	2200      	movs	r2, #0
 800fade:	2300      	movs	r3, #0
 800fae0:	4682      	mov	sl, r0
 800fae2:	468b      	mov	fp, r1
 800fae4:	f7f1 f800 	bl	8000ae8 <__aeabi_dcmpeq>
 800fae8:	2800      	cmp	r0, #0
 800faea:	d0c1      	beq.n	800fa70 <_strtod_l+0x8b8>
 800faec:	e619      	b.n	800f722 <_strtod_l+0x56a>
 800faee:	4641      	mov	r1, r8
 800faf0:	4620      	mov	r0, r4
 800faf2:	f7ff facd 	bl	800f090 <__ratio>
 800faf6:	ec57 6b10 	vmov	r6, r7, d0
 800fafa:	2200      	movs	r2, #0
 800fafc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fb00:	4630      	mov	r0, r6
 800fb02:	4639      	mov	r1, r7
 800fb04:	f7f1 f804 	bl	8000b10 <__aeabi_dcmple>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	d06f      	beq.n	800fbec <_strtod_l+0xa34>
 800fb0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d17a      	bne.n	800fc08 <_strtod_l+0xa50>
 800fb12:	f1ba 0f00 	cmp.w	sl, #0
 800fb16:	d158      	bne.n	800fbca <_strtod_l+0xa12>
 800fb18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d15a      	bne.n	800fbd8 <_strtod_l+0xa20>
 800fb22:	4b64      	ldr	r3, [pc, #400]	@ (800fcb4 <_strtod_l+0xafc>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	4630      	mov	r0, r6
 800fb28:	4639      	mov	r1, r7
 800fb2a:	f7f0 ffe7 	bl	8000afc <__aeabi_dcmplt>
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	d159      	bne.n	800fbe6 <_strtod_l+0xa2e>
 800fb32:	4630      	mov	r0, r6
 800fb34:	4639      	mov	r1, r7
 800fb36:	4b60      	ldr	r3, [pc, #384]	@ (800fcb8 <_strtod_l+0xb00>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f7f0 fd6d 	bl	8000618 <__aeabi_dmul>
 800fb3e:	4606      	mov	r6, r0
 800fb40:	460f      	mov	r7, r1
 800fb42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fb46:	9606      	str	r6, [sp, #24]
 800fb48:	9307      	str	r3, [sp, #28]
 800fb4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb4e:	4d57      	ldr	r5, [pc, #348]	@ (800fcac <_strtod_l+0xaf4>)
 800fb50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fb54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb56:	401d      	ands	r5, r3
 800fb58:	4b58      	ldr	r3, [pc, #352]	@ (800fcbc <_strtod_l+0xb04>)
 800fb5a:	429d      	cmp	r5, r3
 800fb5c:	f040 80b2 	bne.w	800fcc4 <_strtod_l+0xb0c>
 800fb60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fb66:	ec4b ab10 	vmov	d0, sl, fp
 800fb6a:	f7ff f9c9 	bl	800ef00 <__ulp>
 800fb6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb72:	ec51 0b10 	vmov	r0, r1, d0
 800fb76:	f7f0 fd4f 	bl	8000618 <__aeabi_dmul>
 800fb7a:	4652      	mov	r2, sl
 800fb7c:	465b      	mov	r3, fp
 800fb7e:	f7f0 fb95 	bl	80002ac <__adddf3>
 800fb82:	460b      	mov	r3, r1
 800fb84:	4949      	ldr	r1, [pc, #292]	@ (800fcac <_strtod_l+0xaf4>)
 800fb86:	4a4e      	ldr	r2, [pc, #312]	@ (800fcc0 <_strtod_l+0xb08>)
 800fb88:	4019      	ands	r1, r3
 800fb8a:	4291      	cmp	r1, r2
 800fb8c:	4682      	mov	sl, r0
 800fb8e:	d942      	bls.n	800fc16 <_strtod_l+0xa5e>
 800fb90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb92:	4b47      	ldr	r3, [pc, #284]	@ (800fcb0 <_strtod_l+0xaf8>)
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d103      	bne.n	800fba0 <_strtod_l+0x9e8>
 800fb98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	f43f ad2b 	beq.w	800f5f6 <_strtod_l+0x43e>
 800fba0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fcb0 <_strtod_l+0xaf8>
 800fba4:	f04f 3aff 	mov.w	sl, #4294967295
 800fba8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fbaa:	9805      	ldr	r0, [sp, #20]
 800fbac:	f7fe fe74 	bl	800e898 <_Bfree>
 800fbb0:	9805      	ldr	r0, [sp, #20]
 800fbb2:	4649      	mov	r1, r9
 800fbb4:	f7fe fe70 	bl	800e898 <_Bfree>
 800fbb8:	9805      	ldr	r0, [sp, #20]
 800fbba:	4641      	mov	r1, r8
 800fbbc:	f7fe fe6c 	bl	800e898 <_Bfree>
 800fbc0:	9805      	ldr	r0, [sp, #20]
 800fbc2:	4621      	mov	r1, r4
 800fbc4:	f7fe fe68 	bl	800e898 <_Bfree>
 800fbc8:	e618      	b.n	800f7fc <_strtod_l+0x644>
 800fbca:	f1ba 0f01 	cmp.w	sl, #1
 800fbce:	d103      	bne.n	800fbd8 <_strtod_l+0xa20>
 800fbd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	f43f ada5 	beq.w	800f722 <_strtod_l+0x56a>
 800fbd8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fc88 <_strtod_l+0xad0>
 800fbdc:	4f35      	ldr	r7, [pc, #212]	@ (800fcb4 <_strtod_l+0xafc>)
 800fbde:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fbe2:	2600      	movs	r6, #0
 800fbe4:	e7b1      	b.n	800fb4a <_strtod_l+0x992>
 800fbe6:	4f34      	ldr	r7, [pc, #208]	@ (800fcb8 <_strtod_l+0xb00>)
 800fbe8:	2600      	movs	r6, #0
 800fbea:	e7aa      	b.n	800fb42 <_strtod_l+0x98a>
 800fbec:	4b32      	ldr	r3, [pc, #200]	@ (800fcb8 <_strtod_l+0xb00>)
 800fbee:	4630      	mov	r0, r6
 800fbf0:	4639      	mov	r1, r7
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f7f0 fd10 	bl	8000618 <__aeabi_dmul>
 800fbf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbfa:	4606      	mov	r6, r0
 800fbfc:	460f      	mov	r7, r1
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d09f      	beq.n	800fb42 <_strtod_l+0x98a>
 800fc02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fc06:	e7a0      	b.n	800fb4a <_strtod_l+0x992>
 800fc08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fc90 <_strtod_l+0xad8>
 800fc0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fc10:	ec57 6b17 	vmov	r6, r7, d7
 800fc14:	e799      	b.n	800fb4a <_strtod_l+0x992>
 800fc16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fc1a:	9b08      	ldr	r3, [sp, #32]
 800fc1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d1c1      	bne.n	800fba8 <_strtod_l+0x9f0>
 800fc24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fc28:	0d1b      	lsrs	r3, r3, #20
 800fc2a:	051b      	lsls	r3, r3, #20
 800fc2c:	429d      	cmp	r5, r3
 800fc2e:	d1bb      	bne.n	800fba8 <_strtod_l+0x9f0>
 800fc30:	4630      	mov	r0, r6
 800fc32:	4639      	mov	r1, r7
 800fc34:	f7f1 f850 	bl	8000cd8 <__aeabi_d2lz>
 800fc38:	f7f0 fcc0 	bl	80005bc <__aeabi_l2d>
 800fc3c:	4602      	mov	r2, r0
 800fc3e:	460b      	mov	r3, r1
 800fc40:	4630      	mov	r0, r6
 800fc42:	4639      	mov	r1, r7
 800fc44:	f7f0 fb30 	bl	80002a8 <__aeabi_dsub>
 800fc48:	460b      	mov	r3, r1
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fc50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc56:	ea46 060a 	orr.w	r6, r6, sl
 800fc5a:	431e      	orrs	r6, r3
 800fc5c:	d06f      	beq.n	800fd3e <_strtod_l+0xb86>
 800fc5e:	a30e      	add	r3, pc, #56	@ (adr r3, 800fc98 <_strtod_l+0xae0>)
 800fc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc64:	f7f0 ff4a 	bl	8000afc <__aeabi_dcmplt>
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	f47f accf 	bne.w	800f60c <_strtod_l+0x454>
 800fc6e:	a30c      	add	r3, pc, #48	@ (adr r3, 800fca0 <_strtod_l+0xae8>)
 800fc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc78:	f7f0 ff5e 	bl	8000b38 <__aeabi_dcmpgt>
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	d093      	beq.n	800fba8 <_strtod_l+0x9f0>
 800fc80:	e4c4      	b.n	800f60c <_strtod_l+0x454>
 800fc82:	bf00      	nop
 800fc84:	f3af 8000 	nop.w
 800fc88:	00000000 	.word	0x00000000
 800fc8c:	bff00000 	.word	0xbff00000
 800fc90:	00000000 	.word	0x00000000
 800fc94:	3ff00000 	.word	0x3ff00000
 800fc98:	94a03595 	.word	0x94a03595
 800fc9c:	3fdfffff 	.word	0x3fdfffff
 800fca0:	35afe535 	.word	0x35afe535
 800fca4:	3fe00000 	.word	0x3fe00000
 800fca8:	000fffff 	.word	0x000fffff
 800fcac:	7ff00000 	.word	0x7ff00000
 800fcb0:	7fefffff 	.word	0x7fefffff
 800fcb4:	3ff00000 	.word	0x3ff00000
 800fcb8:	3fe00000 	.word	0x3fe00000
 800fcbc:	7fe00000 	.word	0x7fe00000
 800fcc0:	7c9fffff 	.word	0x7c9fffff
 800fcc4:	9b08      	ldr	r3, [sp, #32]
 800fcc6:	b323      	cbz	r3, 800fd12 <_strtod_l+0xb5a>
 800fcc8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fccc:	d821      	bhi.n	800fd12 <_strtod_l+0xb5a>
 800fcce:	a328      	add	r3, pc, #160	@ (adr r3, 800fd70 <_strtod_l+0xbb8>)
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	4639      	mov	r1, r7
 800fcd8:	f7f0 ff1a 	bl	8000b10 <__aeabi_dcmple>
 800fcdc:	b1a0      	cbz	r0, 800fd08 <_strtod_l+0xb50>
 800fcde:	4639      	mov	r1, r7
 800fce0:	4630      	mov	r0, r6
 800fce2:	f7f0 ff71 	bl	8000bc8 <__aeabi_d2uiz>
 800fce6:	2801      	cmp	r0, #1
 800fce8:	bf38      	it	cc
 800fcea:	2001      	movcc	r0, #1
 800fcec:	f7f0 fc1a 	bl	8000524 <__aeabi_ui2d>
 800fcf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	460f      	mov	r7, r1
 800fcf6:	b9fb      	cbnz	r3, 800fd38 <_strtod_l+0xb80>
 800fcf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fcfc:	9014      	str	r0, [sp, #80]	@ 0x50
 800fcfe:	9315      	str	r3, [sp, #84]	@ 0x54
 800fd00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fd04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fd08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fd0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fd0e:	1b5b      	subs	r3, r3, r5
 800fd10:	9311      	str	r3, [sp, #68]	@ 0x44
 800fd12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fd16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fd1a:	f7ff f8f1 	bl	800ef00 <__ulp>
 800fd1e:	4650      	mov	r0, sl
 800fd20:	ec53 2b10 	vmov	r2, r3, d0
 800fd24:	4659      	mov	r1, fp
 800fd26:	f7f0 fc77 	bl	8000618 <__aeabi_dmul>
 800fd2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fd2e:	f7f0 fabd 	bl	80002ac <__adddf3>
 800fd32:	4682      	mov	sl, r0
 800fd34:	468b      	mov	fp, r1
 800fd36:	e770      	b.n	800fc1a <_strtod_l+0xa62>
 800fd38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fd3c:	e7e0      	b.n	800fd00 <_strtod_l+0xb48>
 800fd3e:	a30e      	add	r3, pc, #56	@ (adr r3, 800fd78 <_strtod_l+0xbc0>)
 800fd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd44:	f7f0 feda 	bl	8000afc <__aeabi_dcmplt>
 800fd48:	e798      	b.n	800fc7c <_strtod_l+0xac4>
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fd50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd52:	6013      	str	r3, [r2, #0]
 800fd54:	f7ff ba6d 	b.w	800f232 <_strtod_l+0x7a>
 800fd58:	2a65      	cmp	r2, #101	@ 0x65
 800fd5a:	f43f ab66 	beq.w	800f42a <_strtod_l+0x272>
 800fd5e:	2a45      	cmp	r2, #69	@ 0x45
 800fd60:	f43f ab63 	beq.w	800f42a <_strtod_l+0x272>
 800fd64:	2301      	movs	r3, #1
 800fd66:	f7ff bb9e 	b.w	800f4a6 <_strtod_l+0x2ee>
 800fd6a:	bf00      	nop
 800fd6c:	f3af 8000 	nop.w
 800fd70:	ffc00000 	.word	0xffc00000
 800fd74:	41dfffff 	.word	0x41dfffff
 800fd78:	94a03595 	.word	0x94a03595
 800fd7c:	3fcfffff 	.word	0x3fcfffff

0800fd80 <_strtod_r>:
 800fd80:	4b01      	ldr	r3, [pc, #4]	@ (800fd88 <_strtod_r+0x8>)
 800fd82:	f7ff ba19 	b.w	800f1b8 <_strtod_l>
 800fd86:	bf00      	nop
 800fd88:	20000420 	.word	0x20000420

0800fd8c <__ssputs_r>:
 800fd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd90:	688e      	ldr	r6, [r1, #8]
 800fd92:	461f      	mov	r7, r3
 800fd94:	42be      	cmp	r6, r7
 800fd96:	680b      	ldr	r3, [r1, #0]
 800fd98:	4682      	mov	sl, r0
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	4690      	mov	r8, r2
 800fd9e:	d82d      	bhi.n	800fdfc <__ssputs_r+0x70>
 800fda0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fda4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fda8:	d026      	beq.n	800fdf8 <__ssputs_r+0x6c>
 800fdaa:	6965      	ldr	r5, [r4, #20]
 800fdac:	6909      	ldr	r1, [r1, #16]
 800fdae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdb2:	eba3 0901 	sub.w	r9, r3, r1
 800fdb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdba:	1c7b      	adds	r3, r7, #1
 800fdbc:	444b      	add	r3, r9
 800fdbe:	106d      	asrs	r5, r5, #1
 800fdc0:	429d      	cmp	r5, r3
 800fdc2:	bf38      	it	cc
 800fdc4:	461d      	movcc	r5, r3
 800fdc6:	0553      	lsls	r3, r2, #21
 800fdc8:	d527      	bpl.n	800fe1a <__ssputs_r+0x8e>
 800fdca:	4629      	mov	r1, r5
 800fdcc:	f7fe fc98 	bl	800e700 <_malloc_r>
 800fdd0:	4606      	mov	r6, r0
 800fdd2:	b360      	cbz	r0, 800fe2e <__ssputs_r+0xa2>
 800fdd4:	6921      	ldr	r1, [r4, #16]
 800fdd6:	464a      	mov	r2, r9
 800fdd8:	f7fd fdbb 	bl	800d952 <memcpy>
 800fddc:	89a3      	ldrh	r3, [r4, #12]
 800fdde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fde6:	81a3      	strh	r3, [r4, #12]
 800fde8:	6126      	str	r6, [r4, #16]
 800fdea:	6165      	str	r5, [r4, #20]
 800fdec:	444e      	add	r6, r9
 800fdee:	eba5 0509 	sub.w	r5, r5, r9
 800fdf2:	6026      	str	r6, [r4, #0]
 800fdf4:	60a5      	str	r5, [r4, #8]
 800fdf6:	463e      	mov	r6, r7
 800fdf8:	42be      	cmp	r6, r7
 800fdfa:	d900      	bls.n	800fdfe <__ssputs_r+0x72>
 800fdfc:	463e      	mov	r6, r7
 800fdfe:	6820      	ldr	r0, [r4, #0]
 800fe00:	4632      	mov	r2, r6
 800fe02:	4641      	mov	r1, r8
 800fe04:	f000 fa28 	bl	8010258 <memmove>
 800fe08:	68a3      	ldr	r3, [r4, #8]
 800fe0a:	1b9b      	subs	r3, r3, r6
 800fe0c:	60a3      	str	r3, [r4, #8]
 800fe0e:	6823      	ldr	r3, [r4, #0]
 800fe10:	4433      	add	r3, r6
 800fe12:	6023      	str	r3, [r4, #0]
 800fe14:	2000      	movs	r0, #0
 800fe16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe1a:	462a      	mov	r2, r5
 800fe1c:	f000 fe01 	bl	8010a22 <_realloc_r>
 800fe20:	4606      	mov	r6, r0
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d1e0      	bne.n	800fde8 <__ssputs_r+0x5c>
 800fe26:	6921      	ldr	r1, [r4, #16]
 800fe28:	4650      	mov	r0, sl
 800fe2a:	f7fe fbf5 	bl	800e618 <_free_r>
 800fe2e:	230c      	movs	r3, #12
 800fe30:	f8ca 3000 	str.w	r3, [sl]
 800fe34:	89a3      	ldrh	r3, [r4, #12]
 800fe36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe3a:	81a3      	strh	r3, [r4, #12]
 800fe3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe40:	e7e9      	b.n	800fe16 <__ssputs_r+0x8a>
	...

0800fe44 <_svfiprintf_r>:
 800fe44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe48:	4698      	mov	r8, r3
 800fe4a:	898b      	ldrh	r3, [r1, #12]
 800fe4c:	061b      	lsls	r3, r3, #24
 800fe4e:	b09d      	sub	sp, #116	@ 0x74
 800fe50:	4607      	mov	r7, r0
 800fe52:	460d      	mov	r5, r1
 800fe54:	4614      	mov	r4, r2
 800fe56:	d510      	bpl.n	800fe7a <_svfiprintf_r+0x36>
 800fe58:	690b      	ldr	r3, [r1, #16]
 800fe5a:	b973      	cbnz	r3, 800fe7a <_svfiprintf_r+0x36>
 800fe5c:	2140      	movs	r1, #64	@ 0x40
 800fe5e:	f7fe fc4f 	bl	800e700 <_malloc_r>
 800fe62:	6028      	str	r0, [r5, #0]
 800fe64:	6128      	str	r0, [r5, #16]
 800fe66:	b930      	cbnz	r0, 800fe76 <_svfiprintf_r+0x32>
 800fe68:	230c      	movs	r3, #12
 800fe6a:	603b      	str	r3, [r7, #0]
 800fe6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe70:	b01d      	add	sp, #116	@ 0x74
 800fe72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe76:	2340      	movs	r3, #64	@ 0x40
 800fe78:	616b      	str	r3, [r5, #20]
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe7e:	2320      	movs	r3, #32
 800fe80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fe84:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe88:	2330      	movs	r3, #48	@ 0x30
 800fe8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010028 <_svfiprintf_r+0x1e4>
 800fe8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe92:	f04f 0901 	mov.w	r9, #1
 800fe96:	4623      	mov	r3, r4
 800fe98:	469a      	mov	sl, r3
 800fe9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe9e:	b10a      	cbz	r2, 800fea4 <_svfiprintf_r+0x60>
 800fea0:	2a25      	cmp	r2, #37	@ 0x25
 800fea2:	d1f9      	bne.n	800fe98 <_svfiprintf_r+0x54>
 800fea4:	ebba 0b04 	subs.w	fp, sl, r4
 800fea8:	d00b      	beq.n	800fec2 <_svfiprintf_r+0x7e>
 800feaa:	465b      	mov	r3, fp
 800feac:	4622      	mov	r2, r4
 800feae:	4629      	mov	r1, r5
 800feb0:	4638      	mov	r0, r7
 800feb2:	f7ff ff6b 	bl	800fd8c <__ssputs_r>
 800feb6:	3001      	adds	r0, #1
 800feb8:	f000 80a7 	beq.w	801000a <_svfiprintf_r+0x1c6>
 800febc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800febe:	445a      	add	r2, fp
 800fec0:	9209      	str	r2, [sp, #36]	@ 0x24
 800fec2:	f89a 3000 	ldrb.w	r3, [sl]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f000 809f 	beq.w	801000a <_svfiprintf_r+0x1c6>
 800fecc:	2300      	movs	r3, #0
 800fece:	f04f 32ff 	mov.w	r2, #4294967295
 800fed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fed6:	f10a 0a01 	add.w	sl, sl, #1
 800feda:	9304      	str	r3, [sp, #16]
 800fedc:	9307      	str	r3, [sp, #28]
 800fede:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fee2:	931a      	str	r3, [sp, #104]	@ 0x68
 800fee4:	4654      	mov	r4, sl
 800fee6:	2205      	movs	r2, #5
 800fee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feec:	484e      	ldr	r0, [pc, #312]	@ (8010028 <_svfiprintf_r+0x1e4>)
 800feee:	f7f0 f97f 	bl	80001f0 <memchr>
 800fef2:	9a04      	ldr	r2, [sp, #16]
 800fef4:	b9d8      	cbnz	r0, 800ff2e <_svfiprintf_r+0xea>
 800fef6:	06d0      	lsls	r0, r2, #27
 800fef8:	bf44      	itt	mi
 800fefa:	2320      	movmi	r3, #32
 800fefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff00:	0711      	lsls	r1, r2, #28
 800ff02:	bf44      	itt	mi
 800ff04:	232b      	movmi	r3, #43	@ 0x2b
 800ff06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff10:	d015      	beq.n	800ff3e <_svfiprintf_r+0xfa>
 800ff12:	9a07      	ldr	r2, [sp, #28]
 800ff14:	4654      	mov	r4, sl
 800ff16:	2000      	movs	r0, #0
 800ff18:	f04f 0c0a 	mov.w	ip, #10
 800ff1c:	4621      	mov	r1, r4
 800ff1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff22:	3b30      	subs	r3, #48	@ 0x30
 800ff24:	2b09      	cmp	r3, #9
 800ff26:	d94b      	bls.n	800ffc0 <_svfiprintf_r+0x17c>
 800ff28:	b1b0      	cbz	r0, 800ff58 <_svfiprintf_r+0x114>
 800ff2a:	9207      	str	r2, [sp, #28]
 800ff2c:	e014      	b.n	800ff58 <_svfiprintf_r+0x114>
 800ff2e:	eba0 0308 	sub.w	r3, r0, r8
 800ff32:	fa09 f303 	lsl.w	r3, r9, r3
 800ff36:	4313      	orrs	r3, r2
 800ff38:	9304      	str	r3, [sp, #16]
 800ff3a:	46a2      	mov	sl, r4
 800ff3c:	e7d2      	b.n	800fee4 <_svfiprintf_r+0xa0>
 800ff3e:	9b03      	ldr	r3, [sp, #12]
 800ff40:	1d19      	adds	r1, r3, #4
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	9103      	str	r1, [sp, #12]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	bfbb      	ittet	lt
 800ff4a:	425b      	neglt	r3, r3
 800ff4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ff50:	9307      	strge	r3, [sp, #28]
 800ff52:	9307      	strlt	r3, [sp, #28]
 800ff54:	bfb8      	it	lt
 800ff56:	9204      	strlt	r2, [sp, #16]
 800ff58:	7823      	ldrb	r3, [r4, #0]
 800ff5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff5c:	d10a      	bne.n	800ff74 <_svfiprintf_r+0x130>
 800ff5e:	7863      	ldrb	r3, [r4, #1]
 800ff60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff62:	d132      	bne.n	800ffca <_svfiprintf_r+0x186>
 800ff64:	9b03      	ldr	r3, [sp, #12]
 800ff66:	1d1a      	adds	r2, r3, #4
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	9203      	str	r2, [sp, #12]
 800ff6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff70:	3402      	adds	r4, #2
 800ff72:	9305      	str	r3, [sp, #20]
 800ff74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010038 <_svfiprintf_r+0x1f4>
 800ff78:	7821      	ldrb	r1, [r4, #0]
 800ff7a:	2203      	movs	r2, #3
 800ff7c:	4650      	mov	r0, sl
 800ff7e:	f7f0 f937 	bl	80001f0 <memchr>
 800ff82:	b138      	cbz	r0, 800ff94 <_svfiprintf_r+0x150>
 800ff84:	9b04      	ldr	r3, [sp, #16]
 800ff86:	eba0 000a 	sub.w	r0, r0, sl
 800ff8a:	2240      	movs	r2, #64	@ 0x40
 800ff8c:	4082      	lsls	r2, r0
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	3401      	adds	r4, #1
 800ff92:	9304      	str	r3, [sp, #16]
 800ff94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff98:	4824      	ldr	r0, [pc, #144]	@ (801002c <_svfiprintf_r+0x1e8>)
 800ff9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff9e:	2206      	movs	r2, #6
 800ffa0:	f7f0 f926 	bl	80001f0 <memchr>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	d036      	beq.n	8010016 <_svfiprintf_r+0x1d2>
 800ffa8:	4b21      	ldr	r3, [pc, #132]	@ (8010030 <_svfiprintf_r+0x1ec>)
 800ffaa:	bb1b      	cbnz	r3, 800fff4 <_svfiprintf_r+0x1b0>
 800ffac:	9b03      	ldr	r3, [sp, #12]
 800ffae:	3307      	adds	r3, #7
 800ffb0:	f023 0307 	bic.w	r3, r3, #7
 800ffb4:	3308      	adds	r3, #8
 800ffb6:	9303      	str	r3, [sp, #12]
 800ffb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffba:	4433      	add	r3, r6
 800ffbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffbe:	e76a      	b.n	800fe96 <_svfiprintf_r+0x52>
 800ffc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffc4:	460c      	mov	r4, r1
 800ffc6:	2001      	movs	r0, #1
 800ffc8:	e7a8      	b.n	800ff1c <_svfiprintf_r+0xd8>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	3401      	adds	r4, #1
 800ffce:	9305      	str	r3, [sp, #20]
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	f04f 0c0a 	mov.w	ip, #10
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffdc:	3a30      	subs	r2, #48	@ 0x30
 800ffde:	2a09      	cmp	r2, #9
 800ffe0:	d903      	bls.n	800ffea <_svfiprintf_r+0x1a6>
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d0c6      	beq.n	800ff74 <_svfiprintf_r+0x130>
 800ffe6:	9105      	str	r1, [sp, #20]
 800ffe8:	e7c4      	b.n	800ff74 <_svfiprintf_r+0x130>
 800ffea:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffee:	4604      	mov	r4, r0
 800fff0:	2301      	movs	r3, #1
 800fff2:	e7f0      	b.n	800ffd6 <_svfiprintf_r+0x192>
 800fff4:	ab03      	add	r3, sp, #12
 800fff6:	9300      	str	r3, [sp, #0]
 800fff8:	462a      	mov	r2, r5
 800fffa:	4b0e      	ldr	r3, [pc, #56]	@ (8010034 <_svfiprintf_r+0x1f0>)
 800fffc:	a904      	add	r1, sp, #16
 800fffe:	4638      	mov	r0, r7
 8010000:	f7fc fc44 	bl	800c88c <_printf_float>
 8010004:	1c42      	adds	r2, r0, #1
 8010006:	4606      	mov	r6, r0
 8010008:	d1d6      	bne.n	800ffb8 <_svfiprintf_r+0x174>
 801000a:	89ab      	ldrh	r3, [r5, #12]
 801000c:	065b      	lsls	r3, r3, #25
 801000e:	f53f af2d 	bmi.w	800fe6c <_svfiprintf_r+0x28>
 8010012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010014:	e72c      	b.n	800fe70 <_svfiprintf_r+0x2c>
 8010016:	ab03      	add	r3, sp, #12
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	462a      	mov	r2, r5
 801001c:	4b05      	ldr	r3, [pc, #20]	@ (8010034 <_svfiprintf_r+0x1f0>)
 801001e:	a904      	add	r1, sp, #16
 8010020:	4638      	mov	r0, r7
 8010022:	f7fc fecb 	bl	800cdbc <_printf_i>
 8010026:	e7ed      	b.n	8010004 <_svfiprintf_r+0x1c0>
 8010028:	08013bf0 	.word	0x08013bf0
 801002c:	08013bfa 	.word	0x08013bfa
 8010030:	0800c88d 	.word	0x0800c88d
 8010034:	0800fd8d 	.word	0x0800fd8d
 8010038:	08013bf6 	.word	0x08013bf6

0801003c <__sflush_r>:
 801003c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010044:	0716      	lsls	r6, r2, #28
 8010046:	4605      	mov	r5, r0
 8010048:	460c      	mov	r4, r1
 801004a:	d454      	bmi.n	80100f6 <__sflush_r+0xba>
 801004c:	684b      	ldr	r3, [r1, #4]
 801004e:	2b00      	cmp	r3, #0
 8010050:	dc02      	bgt.n	8010058 <__sflush_r+0x1c>
 8010052:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010054:	2b00      	cmp	r3, #0
 8010056:	dd48      	ble.n	80100ea <__sflush_r+0xae>
 8010058:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801005a:	2e00      	cmp	r6, #0
 801005c:	d045      	beq.n	80100ea <__sflush_r+0xae>
 801005e:	2300      	movs	r3, #0
 8010060:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010064:	682f      	ldr	r7, [r5, #0]
 8010066:	6a21      	ldr	r1, [r4, #32]
 8010068:	602b      	str	r3, [r5, #0]
 801006a:	d030      	beq.n	80100ce <__sflush_r+0x92>
 801006c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801006e:	89a3      	ldrh	r3, [r4, #12]
 8010070:	0759      	lsls	r1, r3, #29
 8010072:	d505      	bpl.n	8010080 <__sflush_r+0x44>
 8010074:	6863      	ldr	r3, [r4, #4]
 8010076:	1ad2      	subs	r2, r2, r3
 8010078:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801007a:	b10b      	cbz	r3, 8010080 <__sflush_r+0x44>
 801007c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801007e:	1ad2      	subs	r2, r2, r3
 8010080:	2300      	movs	r3, #0
 8010082:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010084:	6a21      	ldr	r1, [r4, #32]
 8010086:	4628      	mov	r0, r5
 8010088:	47b0      	blx	r6
 801008a:	1c43      	adds	r3, r0, #1
 801008c:	89a3      	ldrh	r3, [r4, #12]
 801008e:	d106      	bne.n	801009e <__sflush_r+0x62>
 8010090:	6829      	ldr	r1, [r5, #0]
 8010092:	291d      	cmp	r1, #29
 8010094:	d82b      	bhi.n	80100ee <__sflush_r+0xb2>
 8010096:	4a2a      	ldr	r2, [pc, #168]	@ (8010140 <__sflush_r+0x104>)
 8010098:	410a      	asrs	r2, r1
 801009a:	07d6      	lsls	r6, r2, #31
 801009c:	d427      	bmi.n	80100ee <__sflush_r+0xb2>
 801009e:	2200      	movs	r2, #0
 80100a0:	6062      	str	r2, [r4, #4]
 80100a2:	04d9      	lsls	r1, r3, #19
 80100a4:	6922      	ldr	r2, [r4, #16]
 80100a6:	6022      	str	r2, [r4, #0]
 80100a8:	d504      	bpl.n	80100b4 <__sflush_r+0x78>
 80100aa:	1c42      	adds	r2, r0, #1
 80100ac:	d101      	bne.n	80100b2 <__sflush_r+0x76>
 80100ae:	682b      	ldr	r3, [r5, #0]
 80100b0:	b903      	cbnz	r3, 80100b4 <__sflush_r+0x78>
 80100b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80100b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80100b6:	602f      	str	r7, [r5, #0]
 80100b8:	b1b9      	cbz	r1, 80100ea <__sflush_r+0xae>
 80100ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80100be:	4299      	cmp	r1, r3
 80100c0:	d002      	beq.n	80100c8 <__sflush_r+0x8c>
 80100c2:	4628      	mov	r0, r5
 80100c4:	f7fe faa8 	bl	800e618 <_free_r>
 80100c8:	2300      	movs	r3, #0
 80100ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80100cc:	e00d      	b.n	80100ea <__sflush_r+0xae>
 80100ce:	2301      	movs	r3, #1
 80100d0:	4628      	mov	r0, r5
 80100d2:	47b0      	blx	r6
 80100d4:	4602      	mov	r2, r0
 80100d6:	1c50      	adds	r0, r2, #1
 80100d8:	d1c9      	bne.n	801006e <__sflush_r+0x32>
 80100da:	682b      	ldr	r3, [r5, #0]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d0c6      	beq.n	801006e <__sflush_r+0x32>
 80100e0:	2b1d      	cmp	r3, #29
 80100e2:	d001      	beq.n	80100e8 <__sflush_r+0xac>
 80100e4:	2b16      	cmp	r3, #22
 80100e6:	d11e      	bne.n	8010126 <__sflush_r+0xea>
 80100e8:	602f      	str	r7, [r5, #0]
 80100ea:	2000      	movs	r0, #0
 80100ec:	e022      	b.n	8010134 <__sflush_r+0xf8>
 80100ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100f2:	b21b      	sxth	r3, r3
 80100f4:	e01b      	b.n	801012e <__sflush_r+0xf2>
 80100f6:	690f      	ldr	r7, [r1, #16]
 80100f8:	2f00      	cmp	r7, #0
 80100fa:	d0f6      	beq.n	80100ea <__sflush_r+0xae>
 80100fc:	0793      	lsls	r3, r2, #30
 80100fe:	680e      	ldr	r6, [r1, #0]
 8010100:	bf08      	it	eq
 8010102:	694b      	ldreq	r3, [r1, #20]
 8010104:	600f      	str	r7, [r1, #0]
 8010106:	bf18      	it	ne
 8010108:	2300      	movne	r3, #0
 801010a:	eba6 0807 	sub.w	r8, r6, r7
 801010e:	608b      	str	r3, [r1, #8]
 8010110:	f1b8 0f00 	cmp.w	r8, #0
 8010114:	dde9      	ble.n	80100ea <__sflush_r+0xae>
 8010116:	6a21      	ldr	r1, [r4, #32]
 8010118:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801011a:	4643      	mov	r3, r8
 801011c:	463a      	mov	r2, r7
 801011e:	4628      	mov	r0, r5
 8010120:	47b0      	blx	r6
 8010122:	2800      	cmp	r0, #0
 8010124:	dc08      	bgt.n	8010138 <__sflush_r+0xfc>
 8010126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801012a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801012e:	81a3      	strh	r3, [r4, #12]
 8010130:	f04f 30ff 	mov.w	r0, #4294967295
 8010134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010138:	4407      	add	r7, r0
 801013a:	eba8 0800 	sub.w	r8, r8, r0
 801013e:	e7e7      	b.n	8010110 <__sflush_r+0xd4>
 8010140:	dfbffffe 	.word	0xdfbffffe

08010144 <_fflush_r>:
 8010144:	b538      	push	{r3, r4, r5, lr}
 8010146:	690b      	ldr	r3, [r1, #16]
 8010148:	4605      	mov	r5, r0
 801014a:	460c      	mov	r4, r1
 801014c:	b913      	cbnz	r3, 8010154 <_fflush_r+0x10>
 801014e:	2500      	movs	r5, #0
 8010150:	4628      	mov	r0, r5
 8010152:	bd38      	pop	{r3, r4, r5, pc}
 8010154:	b118      	cbz	r0, 801015e <_fflush_r+0x1a>
 8010156:	6a03      	ldr	r3, [r0, #32]
 8010158:	b90b      	cbnz	r3, 801015e <_fflush_r+0x1a>
 801015a:	f7fd f9ef 	bl	800d53c <__sinit>
 801015e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d0f3      	beq.n	801014e <_fflush_r+0xa>
 8010166:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010168:	07d0      	lsls	r0, r2, #31
 801016a:	d404      	bmi.n	8010176 <_fflush_r+0x32>
 801016c:	0599      	lsls	r1, r3, #22
 801016e:	d402      	bmi.n	8010176 <_fflush_r+0x32>
 8010170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010172:	f7fd fbec 	bl	800d94e <__retarget_lock_acquire_recursive>
 8010176:	4628      	mov	r0, r5
 8010178:	4621      	mov	r1, r4
 801017a:	f7ff ff5f 	bl	801003c <__sflush_r>
 801017e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010180:	07da      	lsls	r2, r3, #31
 8010182:	4605      	mov	r5, r0
 8010184:	d4e4      	bmi.n	8010150 <_fflush_r+0xc>
 8010186:	89a3      	ldrh	r3, [r4, #12]
 8010188:	059b      	lsls	r3, r3, #22
 801018a:	d4e1      	bmi.n	8010150 <_fflush_r+0xc>
 801018c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801018e:	f7fd fbdf 	bl	800d950 <__retarget_lock_release_recursive>
 8010192:	e7dd      	b.n	8010150 <_fflush_r+0xc>

08010194 <__swhatbuf_r>:
 8010194:	b570      	push	{r4, r5, r6, lr}
 8010196:	460c      	mov	r4, r1
 8010198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801019c:	2900      	cmp	r1, #0
 801019e:	b096      	sub	sp, #88	@ 0x58
 80101a0:	4615      	mov	r5, r2
 80101a2:	461e      	mov	r6, r3
 80101a4:	da0d      	bge.n	80101c2 <__swhatbuf_r+0x2e>
 80101a6:	89a3      	ldrh	r3, [r4, #12]
 80101a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80101ac:	f04f 0100 	mov.w	r1, #0
 80101b0:	bf14      	ite	ne
 80101b2:	2340      	movne	r3, #64	@ 0x40
 80101b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80101b8:	2000      	movs	r0, #0
 80101ba:	6031      	str	r1, [r6, #0]
 80101bc:	602b      	str	r3, [r5, #0]
 80101be:	b016      	add	sp, #88	@ 0x58
 80101c0:	bd70      	pop	{r4, r5, r6, pc}
 80101c2:	466a      	mov	r2, sp
 80101c4:	f000 f874 	bl	80102b0 <_fstat_r>
 80101c8:	2800      	cmp	r0, #0
 80101ca:	dbec      	blt.n	80101a6 <__swhatbuf_r+0x12>
 80101cc:	9901      	ldr	r1, [sp, #4]
 80101ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80101d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80101d6:	4259      	negs	r1, r3
 80101d8:	4159      	adcs	r1, r3
 80101da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101de:	e7eb      	b.n	80101b8 <__swhatbuf_r+0x24>

080101e0 <__smakebuf_r>:
 80101e0:	898b      	ldrh	r3, [r1, #12]
 80101e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101e4:	079d      	lsls	r5, r3, #30
 80101e6:	4606      	mov	r6, r0
 80101e8:	460c      	mov	r4, r1
 80101ea:	d507      	bpl.n	80101fc <__smakebuf_r+0x1c>
 80101ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80101f0:	6023      	str	r3, [r4, #0]
 80101f2:	6123      	str	r3, [r4, #16]
 80101f4:	2301      	movs	r3, #1
 80101f6:	6163      	str	r3, [r4, #20]
 80101f8:	b003      	add	sp, #12
 80101fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101fc:	ab01      	add	r3, sp, #4
 80101fe:	466a      	mov	r2, sp
 8010200:	f7ff ffc8 	bl	8010194 <__swhatbuf_r>
 8010204:	9f00      	ldr	r7, [sp, #0]
 8010206:	4605      	mov	r5, r0
 8010208:	4639      	mov	r1, r7
 801020a:	4630      	mov	r0, r6
 801020c:	f7fe fa78 	bl	800e700 <_malloc_r>
 8010210:	b948      	cbnz	r0, 8010226 <__smakebuf_r+0x46>
 8010212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010216:	059a      	lsls	r2, r3, #22
 8010218:	d4ee      	bmi.n	80101f8 <__smakebuf_r+0x18>
 801021a:	f023 0303 	bic.w	r3, r3, #3
 801021e:	f043 0302 	orr.w	r3, r3, #2
 8010222:	81a3      	strh	r3, [r4, #12]
 8010224:	e7e2      	b.n	80101ec <__smakebuf_r+0xc>
 8010226:	89a3      	ldrh	r3, [r4, #12]
 8010228:	6020      	str	r0, [r4, #0]
 801022a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801022e:	81a3      	strh	r3, [r4, #12]
 8010230:	9b01      	ldr	r3, [sp, #4]
 8010232:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010236:	b15b      	cbz	r3, 8010250 <__smakebuf_r+0x70>
 8010238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801023c:	4630      	mov	r0, r6
 801023e:	f000 f849 	bl	80102d4 <_isatty_r>
 8010242:	b128      	cbz	r0, 8010250 <__smakebuf_r+0x70>
 8010244:	89a3      	ldrh	r3, [r4, #12]
 8010246:	f023 0303 	bic.w	r3, r3, #3
 801024a:	f043 0301 	orr.w	r3, r3, #1
 801024e:	81a3      	strh	r3, [r4, #12]
 8010250:	89a3      	ldrh	r3, [r4, #12]
 8010252:	431d      	orrs	r5, r3
 8010254:	81a5      	strh	r5, [r4, #12]
 8010256:	e7cf      	b.n	80101f8 <__smakebuf_r+0x18>

08010258 <memmove>:
 8010258:	4288      	cmp	r0, r1
 801025a:	b510      	push	{r4, lr}
 801025c:	eb01 0402 	add.w	r4, r1, r2
 8010260:	d902      	bls.n	8010268 <memmove+0x10>
 8010262:	4284      	cmp	r4, r0
 8010264:	4623      	mov	r3, r4
 8010266:	d807      	bhi.n	8010278 <memmove+0x20>
 8010268:	1e43      	subs	r3, r0, #1
 801026a:	42a1      	cmp	r1, r4
 801026c:	d008      	beq.n	8010280 <memmove+0x28>
 801026e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010276:	e7f8      	b.n	801026a <memmove+0x12>
 8010278:	4402      	add	r2, r0
 801027a:	4601      	mov	r1, r0
 801027c:	428a      	cmp	r2, r1
 801027e:	d100      	bne.n	8010282 <memmove+0x2a>
 8010280:	bd10      	pop	{r4, pc}
 8010282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801028a:	e7f7      	b.n	801027c <memmove+0x24>

0801028c <strncmp>:
 801028c:	b510      	push	{r4, lr}
 801028e:	b16a      	cbz	r2, 80102ac <strncmp+0x20>
 8010290:	3901      	subs	r1, #1
 8010292:	1884      	adds	r4, r0, r2
 8010294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010298:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801029c:	429a      	cmp	r2, r3
 801029e:	d103      	bne.n	80102a8 <strncmp+0x1c>
 80102a0:	42a0      	cmp	r0, r4
 80102a2:	d001      	beq.n	80102a8 <strncmp+0x1c>
 80102a4:	2a00      	cmp	r2, #0
 80102a6:	d1f5      	bne.n	8010294 <strncmp+0x8>
 80102a8:	1ad0      	subs	r0, r2, r3
 80102aa:	bd10      	pop	{r4, pc}
 80102ac:	4610      	mov	r0, r2
 80102ae:	e7fc      	b.n	80102aa <strncmp+0x1e>

080102b0 <_fstat_r>:
 80102b0:	b538      	push	{r3, r4, r5, lr}
 80102b2:	4d07      	ldr	r5, [pc, #28]	@ (80102d0 <_fstat_r+0x20>)
 80102b4:	2300      	movs	r3, #0
 80102b6:	4604      	mov	r4, r0
 80102b8:	4608      	mov	r0, r1
 80102ba:	4611      	mov	r1, r2
 80102bc:	602b      	str	r3, [r5, #0]
 80102be:	f7f8 faa1 	bl	8008804 <_fstat>
 80102c2:	1c43      	adds	r3, r0, #1
 80102c4:	d102      	bne.n	80102cc <_fstat_r+0x1c>
 80102c6:	682b      	ldr	r3, [r5, #0]
 80102c8:	b103      	cbz	r3, 80102cc <_fstat_r+0x1c>
 80102ca:	6023      	str	r3, [r4, #0]
 80102cc:	bd38      	pop	{r3, r4, r5, pc}
 80102ce:	bf00      	nop
 80102d0:	20004dcc 	.word	0x20004dcc

080102d4 <_isatty_r>:
 80102d4:	b538      	push	{r3, r4, r5, lr}
 80102d6:	4d06      	ldr	r5, [pc, #24]	@ (80102f0 <_isatty_r+0x1c>)
 80102d8:	2300      	movs	r3, #0
 80102da:	4604      	mov	r4, r0
 80102dc:	4608      	mov	r0, r1
 80102de:	602b      	str	r3, [r5, #0]
 80102e0:	f7f8 faa0 	bl	8008824 <_isatty>
 80102e4:	1c43      	adds	r3, r0, #1
 80102e6:	d102      	bne.n	80102ee <_isatty_r+0x1a>
 80102e8:	682b      	ldr	r3, [r5, #0]
 80102ea:	b103      	cbz	r3, 80102ee <_isatty_r+0x1a>
 80102ec:	6023      	str	r3, [r4, #0]
 80102ee:	bd38      	pop	{r3, r4, r5, pc}
 80102f0:	20004dcc 	.word	0x20004dcc

080102f4 <_sbrk_r>:
 80102f4:	b538      	push	{r3, r4, r5, lr}
 80102f6:	4d06      	ldr	r5, [pc, #24]	@ (8010310 <_sbrk_r+0x1c>)
 80102f8:	2300      	movs	r3, #0
 80102fa:	4604      	mov	r4, r0
 80102fc:	4608      	mov	r0, r1
 80102fe:	602b      	str	r3, [r5, #0]
 8010300:	f7f8 faa8 	bl	8008854 <_sbrk>
 8010304:	1c43      	adds	r3, r0, #1
 8010306:	d102      	bne.n	801030e <_sbrk_r+0x1a>
 8010308:	682b      	ldr	r3, [r5, #0]
 801030a:	b103      	cbz	r3, 801030e <_sbrk_r+0x1a>
 801030c:	6023      	str	r3, [r4, #0]
 801030e:	bd38      	pop	{r3, r4, r5, pc}
 8010310:	20004dcc 	.word	0x20004dcc
 8010314:	00000000 	.word	0x00000000

08010318 <nan>:
 8010318:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010320 <nan+0x8>
 801031c:	4770      	bx	lr
 801031e:	bf00      	nop
 8010320:	00000000 	.word	0x00000000
 8010324:	7ff80000 	.word	0x7ff80000

08010328 <__assert_func>:
 8010328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801032a:	4614      	mov	r4, r2
 801032c:	461a      	mov	r2, r3
 801032e:	4b09      	ldr	r3, [pc, #36]	@ (8010354 <__assert_func+0x2c>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4605      	mov	r5, r0
 8010334:	68d8      	ldr	r0, [r3, #12]
 8010336:	b954      	cbnz	r4, 801034e <__assert_func+0x26>
 8010338:	4b07      	ldr	r3, [pc, #28]	@ (8010358 <__assert_func+0x30>)
 801033a:	461c      	mov	r4, r3
 801033c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010340:	9100      	str	r1, [sp, #0]
 8010342:	462b      	mov	r3, r5
 8010344:	4905      	ldr	r1, [pc, #20]	@ (801035c <__assert_func+0x34>)
 8010346:	f000 fba7 	bl	8010a98 <fiprintf>
 801034a:	f000 fbb7 	bl	8010abc <abort>
 801034e:	4b04      	ldr	r3, [pc, #16]	@ (8010360 <__assert_func+0x38>)
 8010350:	e7f4      	b.n	801033c <__assert_func+0x14>
 8010352:	bf00      	nop
 8010354:	200003d0 	.word	0x200003d0
 8010358:	08013c44 	.word	0x08013c44
 801035c:	08013c16 	.word	0x08013c16
 8010360:	08013c09 	.word	0x08013c09

08010364 <_calloc_r>:
 8010364:	b570      	push	{r4, r5, r6, lr}
 8010366:	fba1 5402 	umull	r5, r4, r1, r2
 801036a:	b93c      	cbnz	r4, 801037c <_calloc_r+0x18>
 801036c:	4629      	mov	r1, r5
 801036e:	f7fe f9c7 	bl	800e700 <_malloc_r>
 8010372:	4606      	mov	r6, r0
 8010374:	b928      	cbnz	r0, 8010382 <_calloc_r+0x1e>
 8010376:	2600      	movs	r6, #0
 8010378:	4630      	mov	r0, r6
 801037a:	bd70      	pop	{r4, r5, r6, pc}
 801037c:	220c      	movs	r2, #12
 801037e:	6002      	str	r2, [r0, #0]
 8010380:	e7f9      	b.n	8010376 <_calloc_r+0x12>
 8010382:	462a      	mov	r2, r5
 8010384:	4621      	mov	r1, r4
 8010386:	f7fd fa65 	bl	800d854 <memset>
 801038a:	e7f5      	b.n	8010378 <_calloc_r+0x14>

0801038c <rshift>:
 801038c:	6903      	ldr	r3, [r0, #16]
 801038e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010392:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010396:	ea4f 1261 	mov.w	r2, r1, asr #5
 801039a:	f100 0414 	add.w	r4, r0, #20
 801039e:	dd45      	ble.n	801042c <rshift+0xa0>
 80103a0:	f011 011f 	ands.w	r1, r1, #31
 80103a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80103a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80103ac:	d10c      	bne.n	80103c8 <rshift+0x3c>
 80103ae:	f100 0710 	add.w	r7, r0, #16
 80103b2:	4629      	mov	r1, r5
 80103b4:	42b1      	cmp	r1, r6
 80103b6:	d334      	bcc.n	8010422 <rshift+0x96>
 80103b8:	1a9b      	subs	r3, r3, r2
 80103ba:	009b      	lsls	r3, r3, #2
 80103bc:	1eea      	subs	r2, r5, #3
 80103be:	4296      	cmp	r6, r2
 80103c0:	bf38      	it	cc
 80103c2:	2300      	movcc	r3, #0
 80103c4:	4423      	add	r3, r4
 80103c6:	e015      	b.n	80103f4 <rshift+0x68>
 80103c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80103cc:	f1c1 0820 	rsb	r8, r1, #32
 80103d0:	40cf      	lsrs	r7, r1
 80103d2:	f105 0e04 	add.w	lr, r5, #4
 80103d6:	46a1      	mov	r9, r4
 80103d8:	4576      	cmp	r6, lr
 80103da:	46f4      	mov	ip, lr
 80103dc:	d815      	bhi.n	801040a <rshift+0x7e>
 80103de:	1a9a      	subs	r2, r3, r2
 80103e0:	0092      	lsls	r2, r2, #2
 80103e2:	3a04      	subs	r2, #4
 80103e4:	3501      	adds	r5, #1
 80103e6:	42ae      	cmp	r6, r5
 80103e8:	bf38      	it	cc
 80103ea:	2200      	movcc	r2, #0
 80103ec:	18a3      	adds	r3, r4, r2
 80103ee:	50a7      	str	r7, [r4, r2]
 80103f0:	b107      	cbz	r7, 80103f4 <rshift+0x68>
 80103f2:	3304      	adds	r3, #4
 80103f4:	1b1a      	subs	r2, r3, r4
 80103f6:	42a3      	cmp	r3, r4
 80103f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80103fc:	bf08      	it	eq
 80103fe:	2300      	moveq	r3, #0
 8010400:	6102      	str	r2, [r0, #16]
 8010402:	bf08      	it	eq
 8010404:	6143      	streq	r3, [r0, #20]
 8010406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801040a:	f8dc c000 	ldr.w	ip, [ip]
 801040e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010412:	ea4c 0707 	orr.w	r7, ip, r7
 8010416:	f849 7b04 	str.w	r7, [r9], #4
 801041a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801041e:	40cf      	lsrs	r7, r1
 8010420:	e7da      	b.n	80103d8 <rshift+0x4c>
 8010422:	f851 cb04 	ldr.w	ip, [r1], #4
 8010426:	f847 cf04 	str.w	ip, [r7, #4]!
 801042a:	e7c3      	b.n	80103b4 <rshift+0x28>
 801042c:	4623      	mov	r3, r4
 801042e:	e7e1      	b.n	80103f4 <rshift+0x68>

08010430 <__hexdig_fun>:
 8010430:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010434:	2b09      	cmp	r3, #9
 8010436:	d802      	bhi.n	801043e <__hexdig_fun+0xe>
 8010438:	3820      	subs	r0, #32
 801043a:	b2c0      	uxtb	r0, r0
 801043c:	4770      	bx	lr
 801043e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010442:	2b05      	cmp	r3, #5
 8010444:	d801      	bhi.n	801044a <__hexdig_fun+0x1a>
 8010446:	3847      	subs	r0, #71	@ 0x47
 8010448:	e7f7      	b.n	801043a <__hexdig_fun+0xa>
 801044a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801044e:	2b05      	cmp	r3, #5
 8010450:	d801      	bhi.n	8010456 <__hexdig_fun+0x26>
 8010452:	3827      	subs	r0, #39	@ 0x27
 8010454:	e7f1      	b.n	801043a <__hexdig_fun+0xa>
 8010456:	2000      	movs	r0, #0
 8010458:	4770      	bx	lr
	...

0801045c <__gethex>:
 801045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010460:	b085      	sub	sp, #20
 8010462:	468a      	mov	sl, r1
 8010464:	9302      	str	r3, [sp, #8]
 8010466:	680b      	ldr	r3, [r1, #0]
 8010468:	9001      	str	r0, [sp, #4]
 801046a:	4690      	mov	r8, r2
 801046c:	1c9c      	adds	r4, r3, #2
 801046e:	46a1      	mov	r9, r4
 8010470:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010474:	2830      	cmp	r0, #48	@ 0x30
 8010476:	d0fa      	beq.n	801046e <__gethex+0x12>
 8010478:	eba9 0303 	sub.w	r3, r9, r3
 801047c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010480:	f7ff ffd6 	bl	8010430 <__hexdig_fun>
 8010484:	4605      	mov	r5, r0
 8010486:	2800      	cmp	r0, #0
 8010488:	d168      	bne.n	801055c <__gethex+0x100>
 801048a:	49a0      	ldr	r1, [pc, #640]	@ (801070c <__gethex+0x2b0>)
 801048c:	2201      	movs	r2, #1
 801048e:	4648      	mov	r0, r9
 8010490:	f7ff fefc 	bl	801028c <strncmp>
 8010494:	4607      	mov	r7, r0
 8010496:	2800      	cmp	r0, #0
 8010498:	d167      	bne.n	801056a <__gethex+0x10e>
 801049a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801049e:	4626      	mov	r6, r4
 80104a0:	f7ff ffc6 	bl	8010430 <__hexdig_fun>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d062      	beq.n	801056e <__gethex+0x112>
 80104a8:	4623      	mov	r3, r4
 80104aa:	7818      	ldrb	r0, [r3, #0]
 80104ac:	2830      	cmp	r0, #48	@ 0x30
 80104ae:	4699      	mov	r9, r3
 80104b0:	f103 0301 	add.w	r3, r3, #1
 80104b4:	d0f9      	beq.n	80104aa <__gethex+0x4e>
 80104b6:	f7ff ffbb 	bl	8010430 <__hexdig_fun>
 80104ba:	fab0 f580 	clz	r5, r0
 80104be:	096d      	lsrs	r5, r5, #5
 80104c0:	f04f 0b01 	mov.w	fp, #1
 80104c4:	464a      	mov	r2, r9
 80104c6:	4616      	mov	r6, r2
 80104c8:	3201      	adds	r2, #1
 80104ca:	7830      	ldrb	r0, [r6, #0]
 80104cc:	f7ff ffb0 	bl	8010430 <__hexdig_fun>
 80104d0:	2800      	cmp	r0, #0
 80104d2:	d1f8      	bne.n	80104c6 <__gethex+0x6a>
 80104d4:	498d      	ldr	r1, [pc, #564]	@ (801070c <__gethex+0x2b0>)
 80104d6:	2201      	movs	r2, #1
 80104d8:	4630      	mov	r0, r6
 80104da:	f7ff fed7 	bl	801028c <strncmp>
 80104de:	2800      	cmp	r0, #0
 80104e0:	d13f      	bne.n	8010562 <__gethex+0x106>
 80104e2:	b944      	cbnz	r4, 80104f6 <__gethex+0x9a>
 80104e4:	1c74      	adds	r4, r6, #1
 80104e6:	4622      	mov	r2, r4
 80104e8:	4616      	mov	r6, r2
 80104ea:	3201      	adds	r2, #1
 80104ec:	7830      	ldrb	r0, [r6, #0]
 80104ee:	f7ff ff9f 	bl	8010430 <__hexdig_fun>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d1f8      	bne.n	80104e8 <__gethex+0x8c>
 80104f6:	1ba4      	subs	r4, r4, r6
 80104f8:	00a7      	lsls	r7, r4, #2
 80104fa:	7833      	ldrb	r3, [r6, #0]
 80104fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010500:	2b50      	cmp	r3, #80	@ 0x50
 8010502:	d13e      	bne.n	8010582 <__gethex+0x126>
 8010504:	7873      	ldrb	r3, [r6, #1]
 8010506:	2b2b      	cmp	r3, #43	@ 0x2b
 8010508:	d033      	beq.n	8010572 <__gethex+0x116>
 801050a:	2b2d      	cmp	r3, #45	@ 0x2d
 801050c:	d034      	beq.n	8010578 <__gethex+0x11c>
 801050e:	1c71      	adds	r1, r6, #1
 8010510:	2400      	movs	r4, #0
 8010512:	7808      	ldrb	r0, [r1, #0]
 8010514:	f7ff ff8c 	bl	8010430 <__hexdig_fun>
 8010518:	1e43      	subs	r3, r0, #1
 801051a:	b2db      	uxtb	r3, r3
 801051c:	2b18      	cmp	r3, #24
 801051e:	d830      	bhi.n	8010582 <__gethex+0x126>
 8010520:	f1a0 0210 	sub.w	r2, r0, #16
 8010524:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010528:	f7ff ff82 	bl	8010430 <__hexdig_fun>
 801052c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010530:	fa5f fc8c 	uxtb.w	ip, ip
 8010534:	f1bc 0f18 	cmp.w	ip, #24
 8010538:	f04f 030a 	mov.w	r3, #10
 801053c:	d91e      	bls.n	801057c <__gethex+0x120>
 801053e:	b104      	cbz	r4, 8010542 <__gethex+0xe6>
 8010540:	4252      	negs	r2, r2
 8010542:	4417      	add	r7, r2
 8010544:	f8ca 1000 	str.w	r1, [sl]
 8010548:	b1ed      	cbz	r5, 8010586 <__gethex+0x12a>
 801054a:	f1bb 0f00 	cmp.w	fp, #0
 801054e:	bf0c      	ite	eq
 8010550:	2506      	moveq	r5, #6
 8010552:	2500      	movne	r5, #0
 8010554:	4628      	mov	r0, r5
 8010556:	b005      	add	sp, #20
 8010558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055c:	2500      	movs	r5, #0
 801055e:	462c      	mov	r4, r5
 8010560:	e7b0      	b.n	80104c4 <__gethex+0x68>
 8010562:	2c00      	cmp	r4, #0
 8010564:	d1c7      	bne.n	80104f6 <__gethex+0x9a>
 8010566:	4627      	mov	r7, r4
 8010568:	e7c7      	b.n	80104fa <__gethex+0x9e>
 801056a:	464e      	mov	r6, r9
 801056c:	462f      	mov	r7, r5
 801056e:	2501      	movs	r5, #1
 8010570:	e7c3      	b.n	80104fa <__gethex+0x9e>
 8010572:	2400      	movs	r4, #0
 8010574:	1cb1      	adds	r1, r6, #2
 8010576:	e7cc      	b.n	8010512 <__gethex+0xb6>
 8010578:	2401      	movs	r4, #1
 801057a:	e7fb      	b.n	8010574 <__gethex+0x118>
 801057c:	fb03 0002 	mla	r0, r3, r2, r0
 8010580:	e7ce      	b.n	8010520 <__gethex+0xc4>
 8010582:	4631      	mov	r1, r6
 8010584:	e7de      	b.n	8010544 <__gethex+0xe8>
 8010586:	eba6 0309 	sub.w	r3, r6, r9
 801058a:	3b01      	subs	r3, #1
 801058c:	4629      	mov	r1, r5
 801058e:	2b07      	cmp	r3, #7
 8010590:	dc0a      	bgt.n	80105a8 <__gethex+0x14c>
 8010592:	9801      	ldr	r0, [sp, #4]
 8010594:	f7fe f940 	bl	800e818 <_Balloc>
 8010598:	4604      	mov	r4, r0
 801059a:	b940      	cbnz	r0, 80105ae <__gethex+0x152>
 801059c:	4b5c      	ldr	r3, [pc, #368]	@ (8010710 <__gethex+0x2b4>)
 801059e:	4602      	mov	r2, r0
 80105a0:	21e4      	movs	r1, #228	@ 0xe4
 80105a2:	485c      	ldr	r0, [pc, #368]	@ (8010714 <__gethex+0x2b8>)
 80105a4:	f7ff fec0 	bl	8010328 <__assert_func>
 80105a8:	3101      	adds	r1, #1
 80105aa:	105b      	asrs	r3, r3, #1
 80105ac:	e7ef      	b.n	801058e <__gethex+0x132>
 80105ae:	f100 0a14 	add.w	sl, r0, #20
 80105b2:	2300      	movs	r3, #0
 80105b4:	4655      	mov	r5, sl
 80105b6:	469b      	mov	fp, r3
 80105b8:	45b1      	cmp	r9, r6
 80105ba:	d337      	bcc.n	801062c <__gethex+0x1d0>
 80105bc:	f845 bb04 	str.w	fp, [r5], #4
 80105c0:	eba5 050a 	sub.w	r5, r5, sl
 80105c4:	10ad      	asrs	r5, r5, #2
 80105c6:	6125      	str	r5, [r4, #16]
 80105c8:	4658      	mov	r0, fp
 80105ca:	f7fe fa17 	bl	800e9fc <__hi0bits>
 80105ce:	016d      	lsls	r5, r5, #5
 80105d0:	f8d8 6000 	ldr.w	r6, [r8]
 80105d4:	1a2d      	subs	r5, r5, r0
 80105d6:	42b5      	cmp	r5, r6
 80105d8:	dd54      	ble.n	8010684 <__gethex+0x228>
 80105da:	1bad      	subs	r5, r5, r6
 80105dc:	4629      	mov	r1, r5
 80105de:	4620      	mov	r0, r4
 80105e0:	f7fe fdab 	bl	800f13a <__any_on>
 80105e4:	4681      	mov	r9, r0
 80105e6:	b178      	cbz	r0, 8010608 <__gethex+0x1ac>
 80105e8:	1e6b      	subs	r3, r5, #1
 80105ea:	1159      	asrs	r1, r3, #5
 80105ec:	f003 021f 	and.w	r2, r3, #31
 80105f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80105f4:	f04f 0901 	mov.w	r9, #1
 80105f8:	fa09 f202 	lsl.w	r2, r9, r2
 80105fc:	420a      	tst	r2, r1
 80105fe:	d003      	beq.n	8010608 <__gethex+0x1ac>
 8010600:	454b      	cmp	r3, r9
 8010602:	dc36      	bgt.n	8010672 <__gethex+0x216>
 8010604:	f04f 0902 	mov.w	r9, #2
 8010608:	4629      	mov	r1, r5
 801060a:	4620      	mov	r0, r4
 801060c:	f7ff febe 	bl	801038c <rshift>
 8010610:	442f      	add	r7, r5
 8010612:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010616:	42bb      	cmp	r3, r7
 8010618:	da42      	bge.n	80106a0 <__gethex+0x244>
 801061a:	9801      	ldr	r0, [sp, #4]
 801061c:	4621      	mov	r1, r4
 801061e:	f7fe f93b 	bl	800e898 <_Bfree>
 8010622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010624:	2300      	movs	r3, #0
 8010626:	6013      	str	r3, [r2, #0]
 8010628:	25a3      	movs	r5, #163	@ 0xa3
 801062a:	e793      	b.n	8010554 <__gethex+0xf8>
 801062c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010630:	2a2e      	cmp	r2, #46	@ 0x2e
 8010632:	d012      	beq.n	801065a <__gethex+0x1fe>
 8010634:	2b20      	cmp	r3, #32
 8010636:	d104      	bne.n	8010642 <__gethex+0x1e6>
 8010638:	f845 bb04 	str.w	fp, [r5], #4
 801063c:	f04f 0b00 	mov.w	fp, #0
 8010640:	465b      	mov	r3, fp
 8010642:	7830      	ldrb	r0, [r6, #0]
 8010644:	9303      	str	r3, [sp, #12]
 8010646:	f7ff fef3 	bl	8010430 <__hexdig_fun>
 801064a:	9b03      	ldr	r3, [sp, #12]
 801064c:	f000 000f 	and.w	r0, r0, #15
 8010650:	4098      	lsls	r0, r3
 8010652:	ea4b 0b00 	orr.w	fp, fp, r0
 8010656:	3304      	adds	r3, #4
 8010658:	e7ae      	b.n	80105b8 <__gethex+0x15c>
 801065a:	45b1      	cmp	r9, r6
 801065c:	d8ea      	bhi.n	8010634 <__gethex+0x1d8>
 801065e:	492b      	ldr	r1, [pc, #172]	@ (801070c <__gethex+0x2b0>)
 8010660:	9303      	str	r3, [sp, #12]
 8010662:	2201      	movs	r2, #1
 8010664:	4630      	mov	r0, r6
 8010666:	f7ff fe11 	bl	801028c <strncmp>
 801066a:	9b03      	ldr	r3, [sp, #12]
 801066c:	2800      	cmp	r0, #0
 801066e:	d1e1      	bne.n	8010634 <__gethex+0x1d8>
 8010670:	e7a2      	b.n	80105b8 <__gethex+0x15c>
 8010672:	1ea9      	subs	r1, r5, #2
 8010674:	4620      	mov	r0, r4
 8010676:	f7fe fd60 	bl	800f13a <__any_on>
 801067a:	2800      	cmp	r0, #0
 801067c:	d0c2      	beq.n	8010604 <__gethex+0x1a8>
 801067e:	f04f 0903 	mov.w	r9, #3
 8010682:	e7c1      	b.n	8010608 <__gethex+0x1ac>
 8010684:	da09      	bge.n	801069a <__gethex+0x23e>
 8010686:	1b75      	subs	r5, r6, r5
 8010688:	4621      	mov	r1, r4
 801068a:	9801      	ldr	r0, [sp, #4]
 801068c:	462a      	mov	r2, r5
 801068e:	f7fe fb1b 	bl	800ecc8 <__lshift>
 8010692:	1b7f      	subs	r7, r7, r5
 8010694:	4604      	mov	r4, r0
 8010696:	f100 0a14 	add.w	sl, r0, #20
 801069a:	f04f 0900 	mov.w	r9, #0
 801069e:	e7b8      	b.n	8010612 <__gethex+0x1b6>
 80106a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80106a4:	42bd      	cmp	r5, r7
 80106a6:	dd6f      	ble.n	8010788 <__gethex+0x32c>
 80106a8:	1bed      	subs	r5, r5, r7
 80106aa:	42ae      	cmp	r6, r5
 80106ac:	dc34      	bgt.n	8010718 <__gethex+0x2bc>
 80106ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80106b2:	2b02      	cmp	r3, #2
 80106b4:	d022      	beq.n	80106fc <__gethex+0x2a0>
 80106b6:	2b03      	cmp	r3, #3
 80106b8:	d024      	beq.n	8010704 <__gethex+0x2a8>
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d115      	bne.n	80106ea <__gethex+0x28e>
 80106be:	42ae      	cmp	r6, r5
 80106c0:	d113      	bne.n	80106ea <__gethex+0x28e>
 80106c2:	2e01      	cmp	r6, #1
 80106c4:	d10b      	bne.n	80106de <__gethex+0x282>
 80106c6:	9a02      	ldr	r2, [sp, #8]
 80106c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80106cc:	6013      	str	r3, [r2, #0]
 80106ce:	2301      	movs	r3, #1
 80106d0:	6123      	str	r3, [r4, #16]
 80106d2:	f8ca 3000 	str.w	r3, [sl]
 80106d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106d8:	2562      	movs	r5, #98	@ 0x62
 80106da:	601c      	str	r4, [r3, #0]
 80106dc:	e73a      	b.n	8010554 <__gethex+0xf8>
 80106de:	1e71      	subs	r1, r6, #1
 80106e0:	4620      	mov	r0, r4
 80106e2:	f7fe fd2a 	bl	800f13a <__any_on>
 80106e6:	2800      	cmp	r0, #0
 80106e8:	d1ed      	bne.n	80106c6 <__gethex+0x26a>
 80106ea:	9801      	ldr	r0, [sp, #4]
 80106ec:	4621      	mov	r1, r4
 80106ee:	f7fe f8d3 	bl	800e898 <_Bfree>
 80106f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106f4:	2300      	movs	r3, #0
 80106f6:	6013      	str	r3, [r2, #0]
 80106f8:	2550      	movs	r5, #80	@ 0x50
 80106fa:	e72b      	b.n	8010554 <__gethex+0xf8>
 80106fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1f3      	bne.n	80106ea <__gethex+0x28e>
 8010702:	e7e0      	b.n	80106c6 <__gethex+0x26a>
 8010704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010706:	2b00      	cmp	r3, #0
 8010708:	d1dd      	bne.n	80106c6 <__gethex+0x26a>
 801070a:	e7ee      	b.n	80106ea <__gethex+0x28e>
 801070c:	08013b98 	.word	0x08013b98
 8010710:	08013a32 	.word	0x08013a32
 8010714:	08013c45 	.word	0x08013c45
 8010718:	1e6f      	subs	r7, r5, #1
 801071a:	f1b9 0f00 	cmp.w	r9, #0
 801071e:	d130      	bne.n	8010782 <__gethex+0x326>
 8010720:	b127      	cbz	r7, 801072c <__gethex+0x2d0>
 8010722:	4639      	mov	r1, r7
 8010724:	4620      	mov	r0, r4
 8010726:	f7fe fd08 	bl	800f13a <__any_on>
 801072a:	4681      	mov	r9, r0
 801072c:	117a      	asrs	r2, r7, #5
 801072e:	2301      	movs	r3, #1
 8010730:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010734:	f007 071f 	and.w	r7, r7, #31
 8010738:	40bb      	lsls	r3, r7
 801073a:	4213      	tst	r3, r2
 801073c:	4629      	mov	r1, r5
 801073e:	4620      	mov	r0, r4
 8010740:	bf18      	it	ne
 8010742:	f049 0902 	orrne.w	r9, r9, #2
 8010746:	f7ff fe21 	bl	801038c <rshift>
 801074a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801074e:	1b76      	subs	r6, r6, r5
 8010750:	2502      	movs	r5, #2
 8010752:	f1b9 0f00 	cmp.w	r9, #0
 8010756:	d047      	beq.n	80107e8 <__gethex+0x38c>
 8010758:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801075c:	2b02      	cmp	r3, #2
 801075e:	d015      	beq.n	801078c <__gethex+0x330>
 8010760:	2b03      	cmp	r3, #3
 8010762:	d017      	beq.n	8010794 <__gethex+0x338>
 8010764:	2b01      	cmp	r3, #1
 8010766:	d109      	bne.n	801077c <__gethex+0x320>
 8010768:	f019 0f02 	tst.w	r9, #2
 801076c:	d006      	beq.n	801077c <__gethex+0x320>
 801076e:	f8da 3000 	ldr.w	r3, [sl]
 8010772:	ea49 0903 	orr.w	r9, r9, r3
 8010776:	f019 0f01 	tst.w	r9, #1
 801077a:	d10e      	bne.n	801079a <__gethex+0x33e>
 801077c:	f045 0510 	orr.w	r5, r5, #16
 8010780:	e032      	b.n	80107e8 <__gethex+0x38c>
 8010782:	f04f 0901 	mov.w	r9, #1
 8010786:	e7d1      	b.n	801072c <__gethex+0x2d0>
 8010788:	2501      	movs	r5, #1
 801078a:	e7e2      	b.n	8010752 <__gethex+0x2f6>
 801078c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801078e:	f1c3 0301 	rsb	r3, r3, #1
 8010792:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010796:	2b00      	cmp	r3, #0
 8010798:	d0f0      	beq.n	801077c <__gethex+0x320>
 801079a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801079e:	f104 0314 	add.w	r3, r4, #20
 80107a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80107a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80107aa:	f04f 0c00 	mov.w	ip, #0
 80107ae:	4618      	mov	r0, r3
 80107b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80107b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80107b8:	d01b      	beq.n	80107f2 <__gethex+0x396>
 80107ba:	3201      	adds	r2, #1
 80107bc:	6002      	str	r2, [r0, #0]
 80107be:	2d02      	cmp	r5, #2
 80107c0:	f104 0314 	add.w	r3, r4, #20
 80107c4:	d13c      	bne.n	8010840 <__gethex+0x3e4>
 80107c6:	f8d8 2000 	ldr.w	r2, [r8]
 80107ca:	3a01      	subs	r2, #1
 80107cc:	42b2      	cmp	r2, r6
 80107ce:	d109      	bne.n	80107e4 <__gethex+0x388>
 80107d0:	1171      	asrs	r1, r6, #5
 80107d2:	2201      	movs	r2, #1
 80107d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80107d8:	f006 061f 	and.w	r6, r6, #31
 80107dc:	fa02 f606 	lsl.w	r6, r2, r6
 80107e0:	421e      	tst	r6, r3
 80107e2:	d13a      	bne.n	801085a <__gethex+0x3fe>
 80107e4:	f045 0520 	orr.w	r5, r5, #32
 80107e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107ea:	601c      	str	r4, [r3, #0]
 80107ec:	9b02      	ldr	r3, [sp, #8]
 80107ee:	601f      	str	r7, [r3, #0]
 80107f0:	e6b0      	b.n	8010554 <__gethex+0xf8>
 80107f2:	4299      	cmp	r1, r3
 80107f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80107f8:	d8d9      	bhi.n	80107ae <__gethex+0x352>
 80107fa:	68a3      	ldr	r3, [r4, #8]
 80107fc:	459b      	cmp	fp, r3
 80107fe:	db17      	blt.n	8010830 <__gethex+0x3d4>
 8010800:	6861      	ldr	r1, [r4, #4]
 8010802:	9801      	ldr	r0, [sp, #4]
 8010804:	3101      	adds	r1, #1
 8010806:	f7fe f807 	bl	800e818 <_Balloc>
 801080a:	4681      	mov	r9, r0
 801080c:	b918      	cbnz	r0, 8010816 <__gethex+0x3ba>
 801080e:	4b1a      	ldr	r3, [pc, #104]	@ (8010878 <__gethex+0x41c>)
 8010810:	4602      	mov	r2, r0
 8010812:	2184      	movs	r1, #132	@ 0x84
 8010814:	e6c5      	b.n	80105a2 <__gethex+0x146>
 8010816:	6922      	ldr	r2, [r4, #16]
 8010818:	3202      	adds	r2, #2
 801081a:	f104 010c 	add.w	r1, r4, #12
 801081e:	0092      	lsls	r2, r2, #2
 8010820:	300c      	adds	r0, #12
 8010822:	f7fd f896 	bl	800d952 <memcpy>
 8010826:	4621      	mov	r1, r4
 8010828:	9801      	ldr	r0, [sp, #4]
 801082a:	f7fe f835 	bl	800e898 <_Bfree>
 801082e:	464c      	mov	r4, r9
 8010830:	6923      	ldr	r3, [r4, #16]
 8010832:	1c5a      	adds	r2, r3, #1
 8010834:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010838:	6122      	str	r2, [r4, #16]
 801083a:	2201      	movs	r2, #1
 801083c:	615a      	str	r2, [r3, #20]
 801083e:	e7be      	b.n	80107be <__gethex+0x362>
 8010840:	6922      	ldr	r2, [r4, #16]
 8010842:	455a      	cmp	r2, fp
 8010844:	dd0b      	ble.n	801085e <__gethex+0x402>
 8010846:	2101      	movs	r1, #1
 8010848:	4620      	mov	r0, r4
 801084a:	f7ff fd9f 	bl	801038c <rshift>
 801084e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010852:	3701      	adds	r7, #1
 8010854:	42bb      	cmp	r3, r7
 8010856:	f6ff aee0 	blt.w	801061a <__gethex+0x1be>
 801085a:	2501      	movs	r5, #1
 801085c:	e7c2      	b.n	80107e4 <__gethex+0x388>
 801085e:	f016 061f 	ands.w	r6, r6, #31
 8010862:	d0fa      	beq.n	801085a <__gethex+0x3fe>
 8010864:	4453      	add	r3, sl
 8010866:	f1c6 0620 	rsb	r6, r6, #32
 801086a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801086e:	f7fe f8c5 	bl	800e9fc <__hi0bits>
 8010872:	42b0      	cmp	r0, r6
 8010874:	dbe7      	blt.n	8010846 <__gethex+0x3ea>
 8010876:	e7f0      	b.n	801085a <__gethex+0x3fe>
 8010878:	08013a32 	.word	0x08013a32

0801087c <L_shift>:
 801087c:	f1c2 0208 	rsb	r2, r2, #8
 8010880:	0092      	lsls	r2, r2, #2
 8010882:	b570      	push	{r4, r5, r6, lr}
 8010884:	f1c2 0620 	rsb	r6, r2, #32
 8010888:	6843      	ldr	r3, [r0, #4]
 801088a:	6804      	ldr	r4, [r0, #0]
 801088c:	fa03 f506 	lsl.w	r5, r3, r6
 8010890:	432c      	orrs	r4, r5
 8010892:	40d3      	lsrs	r3, r2
 8010894:	6004      	str	r4, [r0, #0]
 8010896:	f840 3f04 	str.w	r3, [r0, #4]!
 801089a:	4288      	cmp	r0, r1
 801089c:	d3f4      	bcc.n	8010888 <L_shift+0xc>
 801089e:	bd70      	pop	{r4, r5, r6, pc}

080108a0 <__match>:
 80108a0:	b530      	push	{r4, r5, lr}
 80108a2:	6803      	ldr	r3, [r0, #0]
 80108a4:	3301      	adds	r3, #1
 80108a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108aa:	b914      	cbnz	r4, 80108b2 <__match+0x12>
 80108ac:	6003      	str	r3, [r0, #0]
 80108ae:	2001      	movs	r0, #1
 80108b0:	bd30      	pop	{r4, r5, pc}
 80108b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80108ba:	2d19      	cmp	r5, #25
 80108bc:	bf98      	it	ls
 80108be:	3220      	addls	r2, #32
 80108c0:	42a2      	cmp	r2, r4
 80108c2:	d0f0      	beq.n	80108a6 <__match+0x6>
 80108c4:	2000      	movs	r0, #0
 80108c6:	e7f3      	b.n	80108b0 <__match+0x10>

080108c8 <__hexnan>:
 80108c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108cc:	680b      	ldr	r3, [r1, #0]
 80108ce:	6801      	ldr	r1, [r0, #0]
 80108d0:	115e      	asrs	r6, r3, #5
 80108d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80108d6:	f013 031f 	ands.w	r3, r3, #31
 80108da:	b087      	sub	sp, #28
 80108dc:	bf18      	it	ne
 80108de:	3604      	addne	r6, #4
 80108e0:	2500      	movs	r5, #0
 80108e2:	1f37      	subs	r7, r6, #4
 80108e4:	4682      	mov	sl, r0
 80108e6:	4690      	mov	r8, r2
 80108e8:	9301      	str	r3, [sp, #4]
 80108ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80108ee:	46b9      	mov	r9, r7
 80108f0:	463c      	mov	r4, r7
 80108f2:	9502      	str	r5, [sp, #8]
 80108f4:	46ab      	mov	fp, r5
 80108f6:	784a      	ldrb	r2, [r1, #1]
 80108f8:	1c4b      	adds	r3, r1, #1
 80108fa:	9303      	str	r3, [sp, #12]
 80108fc:	b342      	cbz	r2, 8010950 <__hexnan+0x88>
 80108fe:	4610      	mov	r0, r2
 8010900:	9105      	str	r1, [sp, #20]
 8010902:	9204      	str	r2, [sp, #16]
 8010904:	f7ff fd94 	bl	8010430 <__hexdig_fun>
 8010908:	2800      	cmp	r0, #0
 801090a:	d151      	bne.n	80109b0 <__hexnan+0xe8>
 801090c:	9a04      	ldr	r2, [sp, #16]
 801090e:	9905      	ldr	r1, [sp, #20]
 8010910:	2a20      	cmp	r2, #32
 8010912:	d818      	bhi.n	8010946 <__hexnan+0x7e>
 8010914:	9b02      	ldr	r3, [sp, #8]
 8010916:	459b      	cmp	fp, r3
 8010918:	dd13      	ble.n	8010942 <__hexnan+0x7a>
 801091a:	454c      	cmp	r4, r9
 801091c:	d206      	bcs.n	801092c <__hexnan+0x64>
 801091e:	2d07      	cmp	r5, #7
 8010920:	dc04      	bgt.n	801092c <__hexnan+0x64>
 8010922:	462a      	mov	r2, r5
 8010924:	4649      	mov	r1, r9
 8010926:	4620      	mov	r0, r4
 8010928:	f7ff ffa8 	bl	801087c <L_shift>
 801092c:	4544      	cmp	r4, r8
 801092e:	d952      	bls.n	80109d6 <__hexnan+0x10e>
 8010930:	2300      	movs	r3, #0
 8010932:	f1a4 0904 	sub.w	r9, r4, #4
 8010936:	f844 3c04 	str.w	r3, [r4, #-4]
 801093a:	f8cd b008 	str.w	fp, [sp, #8]
 801093e:	464c      	mov	r4, r9
 8010940:	461d      	mov	r5, r3
 8010942:	9903      	ldr	r1, [sp, #12]
 8010944:	e7d7      	b.n	80108f6 <__hexnan+0x2e>
 8010946:	2a29      	cmp	r2, #41	@ 0x29
 8010948:	d157      	bne.n	80109fa <__hexnan+0x132>
 801094a:	3102      	adds	r1, #2
 801094c:	f8ca 1000 	str.w	r1, [sl]
 8010950:	f1bb 0f00 	cmp.w	fp, #0
 8010954:	d051      	beq.n	80109fa <__hexnan+0x132>
 8010956:	454c      	cmp	r4, r9
 8010958:	d206      	bcs.n	8010968 <__hexnan+0xa0>
 801095a:	2d07      	cmp	r5, #7
 801095c:	dc04      	bgt.n	8010968 <__hexnan+0xa0>
 801095e:	462a      	mov	r2, r5
 8010960:	4649      	mov	r1, r9
 8010962:	4620      	mov	r0, r4
 8010964:	f7ff ff8a 	bl	801087c <L_shift>
 8010968:	4544      	cmp	r4, r8
 801096a:	d936      	bls.n	80109da <__hexnan+0x112>
 801096c:	f1a8 0204 	sub.w	r2, r8, #4
 8010970:	4623      	mov	r3, r4
 8010972:	f853 1b04 	ldr.w	r1, [r3], #4
 8010976:	f842 1f04 	str.w	r1, [r2, #4]!
 801097a:	429f      	cmp	r7, r3
 801097c:	d2f9      	bcs.n	8010972 <__hexnan+0xaa>
 801097e:	1b3b      	subs	r3, r7, r4
 8010980:	f023 0303 	bic.w	r3, r3, #3
 8010984:	3304      	adds	r3, #4
 8010986:	3401      	adds	r4, #1
 8010988:	3e03      	subs	r6, #3
 801098a:	42b4      	cmp	r4, r6
 801098c:	bf88      	it	hi
 801098e:	2304      	movhi	r3, #4
 8010990:	4443      	add	r3, r8
 8010992:	2200      	movs	r2, #0
 8010994:	f843 2b04 	str.w	r2, [r3], #4
 8010998:	429f      	cmp	r7, r3
 801099a:	d2fb      	bcs.n	8010994 <__hexnan+0xcc>
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	b91b      	cbnz	r3, 80109a8 <__hexnan+0xe0>
 80109a0:	4547      	cmp	r7, r8
 80109a2:	d128      	bne.n	80109f6 <__hexnan+0x12e>
 80109a4:	2301      	movs	r3, #1
 80109a6:	603b      	str	r3, [r7, #0]
 80109a8:	2005      	movs	r0, #5
 80109aa:	b007      	add	sp, #28
 80109ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109b0:	3501      	adds	r5, #1
 80109b2:	2d08      	cmp	r5, #8
 80109b4:	f10b 0b01 	add.w	fp, fp, #1
 80109b8:	dd06      	ble.n	80109c8 <__hexnan+0x100>
 80109ba:	4544      	cmp	r4, r8
 80109bc:	d9c1      	bls.n	8010942 <__hexnan+0x7a>
 80109be:	2300      	movs	r3, #0
 80109c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80109c4:	2501      	movs	r5, #1
 80109c6:	3c04      	subs	r4, #4
 80109c8:	6822      	ldr	r2, [r4, #0]
 80109ca:	f000 000f 	and.w	r0, r0, #15
 80109ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80109d2:	6020      	str	r0, [r4, #0]
 80109d4:	e7b5      	b.n	8010942 <__hexnan+0x7a>
 80109d6:	2508      	movs	r5, #8
 80109d8:	e7b3      	b.n	8010942 <__hexnan+0x7a>
 80109da:	9b01      	ldr	r3, [sp, #4]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d0dd      	beq.n	801099c <__hexnan+0xd4>
 80109e0:	f1c3 0320 	rsb	r3, r3, #32
 80109e4:	f04f 32ff 	mov.w	r2, #4294967295
 80109e8:	40da      	lsrs	r2, r3
 80109ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80109ee:	4013      	ands	r3, r2
 80109f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80109f4:	e7d2      	b.n	801099c <__hexnan+0xd4>
 80109f6:	3f04      	subs	r7, #4
 80109f8:	e7d0      	b.n	801099c <__hexnan+0xd4>
 80109fa:	2004      	movs	r0, #4
 80109fc:	e7d5      	b.n	80109aa <__hexnan+0xe2>

080109fe <__ascii_mbtowc>:
 80109fe:	b082      	sub	sp, #8
 8010a00:	b901      	cbnz	r1, 8010a04 <__ascii_mbtowc+0x6>
 8010a02:	a901      	add	r1, sp, #4
 8010a04:	b142      	cbz	r2, 8010a18 <__ascii_mbtowc+0x1a>
 8010a06:	b14b      	cbz	r3, 8010a1c <__ascii_mbtowc+0x1e>
 8010a08:	7813      	ldrb	r3, [r2, #0]
 8010a0a:	600b      	str	r3, [r1, #0]
 8010a0c:	7812      	ldrb	r2, [r2, #0]
 8010a0e:	1e10      	subs	r0, r2, #0
 8010a10:	bf18      	it	ne
 8010a12:	2001      	movne	r0, #1
 8010a14:	b002      	add	sp, #8
 8010a16:	4770      	bx	lr
 8010a18:	4610      	mov	r0, r2
 8010a1a:	e7fb      	b.n	8010a14 <__ascii_mbtowc+0x16>
 8010a1c:	f06f 0001 	mvn.w	r0, #1
 8010a20:	e7f8      	b.n	8010a14 <__ascii_mbtowc+0x16>

08010a22 <_realloc_r>:
 8010a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a26:	4680      	mov	r8, r0
 8010a28:	4615      	mov	r5, r2
 8010a2a:	460c      	mov	r4, r1
 8010a2c:	b921      	cbnz	r1, 8010a38 <_realloc_r+0x16>
 8010a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a32:	4611      	mov	r1, r2
 8010a34:	f7fd be64 	b.w	800e700 <_malloc_r>
 8010a38:	b92a      	cbnz	r2, 8010a46 <_realloc_r+0x24>
 8010a3a:	f7fd fded 	bl	800e618 <_free_r>
 8010a3e:	2400      	movs	r4, #0
 8010a40:	4620      	mov	r0, r4
 8010a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a46:	f000 f840 	bl	8010aca <_malloc_usable_size_r>
 8010a4a:	4285      	cmp	r5, r0
 8010a4c:	4606      	mov	r6, r0
 8010a4e:	d802      	bhi.n	8010a56 <_realloc_r+0x34>
 8010a50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010a54:	d8f4      	bhi.n	8010a40 <_realloc_r+0x1e>
 8010a56:	4629      	mov	r1, r5
 8010a58:	4640      	mov	r0, r8
 8010a5a:	f7fd fe51 	bl	800e700 <_malloc_r>
 8010a5e:	4607      	mov	r7, r0
 8010a60:	2800      	cmp	r0, #0
 8010a62:	d0ec      	beq.n	8010a3e <_realloc_r+0x1c>
 8010a64:	42b5      	cmp	r5, r6
 8010a66:	462a      	mov	r2, r5
 8010a68:	4621      	mov	r1, r4
 8010a6a:	bf28      	it	cs
 8010a6c:	4632      	movcs	r2, r6
 8010a6e:	f7fc ff70 	bl	800d952 <memcpy>
 8010a72:	4621      	mov	r1, r4
 8010a74:	4640      	mov	r0, r8
 8010a76:	f7fd fdcf 	bl	800e618 <_free_r>
 8010a7a:	463c      	mov	r4, r7
 8010a7c:	e7e0      	b.n	8010a40 <_realloc_r+0x1e>

08010a7e <__ascii_wctomb>:
 8010a7e:	4603      	mov	r3, r0
 8010a80:	4608      	mov	r0, r1
 8010a82:	b141      	cbz	r1, 8010a96 <__ascii_wctomb+0x18>
 8010a84:	2aff      	cmp	r2, #255	@ 0xff
 8010a86:	d904      	bls.n	8010a92 <__ascii_wctomb+0x14>
 8010a88:	228a      	movs	r2, #138	@ 0x8a
 8010a8a:	601a      	str	r2, [r3, #0]
 8010a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a90:	4770      	bx	lr
 8010a92:	700a      	strb	r2, [r1, #0]
 8010a94:	2001      	movs	r0, #1
 8010a96:	4770      	bx	lr

08010a98 <fiprintf>:
 8010a98:	b40e      	push	{r1, r2, r3}
 8010a9a:	b503      	push	{r0, r1, lr}
 8010a9c:	4601      	mov	r1, r0
 8010a9e:	ab03      	add	r3, sp, #12
 8010aa0:	4805      	ldr	r0, [pc, #20]	@ (8010ab8 <fiprintf+0x20>)
 8010aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aa6:	6800      	ldr	r0, [r0, #0]
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	f000 f83f 	bl	8010b2c <_vfiprintf_r>
 8010aae:	b002      	add	sp, #8
 8010ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ab4:	b003      	add	sp, #12
 8010ab6:	4770      	bx	lr
 8010ab8:	200003d0 	.word	0x200003d0

08010abc <abort>:
 8010abc:	b508      	push	{r3, lr}
 8010abe:	2006      	movs	r0, #6
 8010ac0:	f000 f974 	bl	8010dac <raise>
 8010ac4:	2001      	movs	r0, #1
 8010ac6:	f7f7 fe4d 	bl	8008764 <_exit>

08010aca <_malloc_usable_size_r>:
 8010aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ace:	1f18      	subs	r0, r3, #4
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	bfbc      	itt	lt
 8010ad4:	580b      	ldrlt	r3, [r1, r0]
 8010ad6:	18c0      	addlt	r0, r0, r3
 8010ad8:	4770      	bx	lr

08010ada <__sfputc_r>:
 8010ada:	6893      	ldr	r3, [r2, #8]
 8010adc:	3b01      	subs	r3, #1
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	b410      	push	{r4}
 8010ae2:	6093      	str	r3, [r2, #8]
 8010ae4:	da08      	bge.n	8010af8 <__sfputc_r+0x1e>
 8010ae6:	6994      	ldr	r4, [r2, #24]
 8010ae8:	42a3      	cmp	r3, r4
 8010aea:	db01      	blt.n	8010af0 <__sfputc_r+0x16>
 8010aec:	290a      	cmp	r1, #10
 8010aee:	d103      	bne.n	8010af8 <__sfputc_r+0x1e>
 8010af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010af4:	f7fc be19 	b.w	800d72a <__swbuf_r>
 8010af8:	6813      	ldr	r3, [r2, #0]
 8010afa:	1c58      	adds	r0, r3, #1
 8010afc:	6010      	str	r0, [r2, #0]
 8010afe:	7019      	strb	r1, [r3, #0]
 8010b00:	4608      	mov	r0, r1
 8010b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b06:	4770      	bx	lr

08010b08 <__sfputs_r>:
 8010b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b0a:	4606      	mov	r6, r0
 8010b0c:	460f      	mov	r7, r1
 8010b0e:	4614      	mov	r4, r2
 8010b10:	18d5      	adds	r5, r2, r3
 8010b12:	42ac      	cmp	r4, r5
 8010b14:	d101      	bne.n	8010b1a <__sfputs_r+0x12>
 8010b16:	2000      	movs	r0, #0
 8010b18:	e007      	b.n	8010b2a <__sfputs_r+0x22>
 8010b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b1e:	463a      	mov	r2, r7
 8010b20:	4630      	mov	r0, r6
 8010b22:	f7ff ffda 	bl	8010ada <__sfputc_r>
 8010b26:	1c43      	adds	r3, r0, #1
 8010b28:	d1f3      	bne.n	8010b12 <__sfputs_r+0xa>
 8010b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010b2c <_vfiprintf_r>:
 8010b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b30:	460d      	mov	r5, r1
 8010b32:	b09d      	sub	sp, #116	@ 0x74
 8010b34:	4614      	mov	r4, r2
 8010b36:	4698      	mov	r8, r3
 8010b38:	4606      	mov	r6, r0
 8010b3a:	b118      	cbz	r0, 8010b44 <_vfiprintf_r+0x18>
 8010b3c:	6a03      	ldr	r3, [r0, #32]
 8010b3e:	b90b      	cbnz	r3, 8010b44 <_vfiprintf_r+0x18>
 8010b40:	f7fc fcfc 	bl	800d53c <__sinit>
 8010b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b46:	07d9      	lsls	r1, r3, #31
 8010b48:	d405      	bmi.n	8010b56 <_vfiprintf_r+0x2a>
 8010b4a:	89ab      	ldrh	r3, [r5, #12]
 8010b4c:	059a      	lsls	r2, r3, #22
 8010b4e:	d402      	bmi.n	8010b56 <_vfiprintf_r+0x2a>
 8010b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b52:	f7fc fefc 	bl	800d94e <__retarget_lock_acquire_recursive>
 8010b56:	89ab      	ldrh	r3, [r5, #12]
 8010b58:	071b      	lsls	r3, r3, #28
 8010b5a:	d501      	bpl.n	8010b60 <_vfiprintf_r+0x34>
 8010b5c:	692b      	ldr	r3, [r5, #16]
 8010b5e:	b99b      	cbnz	r3, 8010b88 <_vfiprintf_r+0x5c>
 8010b60:	4629      	mov	r1, r5
 8010b62:	4630      	mov	r0, r6
 8010b64:	f7fc fe20 	bl	800d7a8 <__swsetup_r>
 8010b68:	b170      	cbz	r0, 8010b88 <_vfiprintf_r+0x5c>
 8010b6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b6c:	07dc      	lsls	r4, r3, #31
 8010b6e:	d504      	bpl.n	8010b7a <_vfiprintf_r+0x4e>
 8010b70:	f04f 30ff 	mov.w	r0, #4294967295
 8010b74:	b01d      	add	sp, #116	@ 0x74
 8010b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b7a:	89ab      	ldrh	r3, [r5, #12]
 8010b7c:	0598      	lsls	r0, r3, #22
 8010b7e:	d4f7      	bmi.n	8010b70 <_vfiprintf_r+0x44>
 8010b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b82:	f7fc fee5 	bl	800d950 <__retarget_lock_release_recursive>
 8010b86:	e7f3      	b.n	8010b70 <_vfiprintf_r+0x44>
 8010b88:	2300      	movs	r3, #0
 8010b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b8c:	2320      	movs	r3, #32
 8010b8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b96:	2330      	movs	r3, #48	@ 0x30
 8010b98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010d48 <_vfiprintf_r+0x21c>
 8010b9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ba0:	f04f 0901 	mov.w	r9, #1
 8010ba4:	4623      	mov	r3, r4
 8010ba6:	469a      	mov	sl, r3
 8010ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bac:	b10a      	cbz	r2, 8010bb2 <_vfiprintf_r+0x86>
 8010bae:	2a25      	cmp	r2, #37	@ 0x25
 8010bb0:	d1f9      	bne.n	8010ba6 <_vfiprintf_r+0x7a>
 8010bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8010bb6:	d00b      	beq.n	8010bd0 <_vfiprintf_r+0xa4>
 8010bb8:	465b      	mov	r3, fp
 8010bba:	4622      	mov	r2, r4
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f7ff ffa2 	bl	8010b08 <__sfputs_r>
 8010bc4:	3001      	adds	r0, #1
 8010bc6:	f000 80a7 	beq.w	8010d18 <_vfiprintf_r+0x1ec>
 8010bca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010bcc:	445a      	add	r2, fp
 8010bce:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	f000 809f 	beq.w	8010d18 <_vfiprintf_r+0x1ec>
 8010bda:	2300      	movs	r3, #0
 8010bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8010be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010be4:	f10a 0a01 	add.w	sl, sl, #1
 8010be8:	9304      	str	r3, [sp, #16]
 8010bea:	9307      	str	r3, [sp, #28]
 8010bec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010bf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8010bf2:	4654      	mov	r4, sl
 8010bf4:	2205      	movs	r2, #5
 8010bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bfa:	4853      	ldr	r0, [pc, #332]	@ (8010d48 <_vfiprintf_r+0x21c>)
 8010bfc:	f7ef faf8 	bl	80001f0 <memchr>
 8010c00:	9a04      	ldr	r2, [sp, #16]
 8010c02:	b9d8      	cbnz	r0, 8010c3c <_vfiprintf_r+0x110>
 8010c04:	06d1      	lsls	r1, r2, #27
 8010c06:	bf44      	itt	mi
 8010c08:	2320      	movmi	r3, #32
 8010c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c0e:	0713      	lsls	r3, r2, #28
 8010c10:	bf44      	itt	mi
 8010c12:	232b      	movmi	r3, #43	@ 0x2b
 8010c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c18:	f89a 3000 	ldrb.w	r3, [sl]
 8010c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c1e:	d015      	beq.n	8010c4c <_vfiprintf_r+0x120>
 8010c20:	9a07      	ldr	r2, [sp, #28]
 8010c22:	4654      	mov	r4, sl
 8010c24:	2000      	movs	r0, #0
 8010c26:	f04f 0c0a 	mov.w	ip, #10
 8010c2a:	4621      	mov	r1, r4
 8010c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c30:	3b30      	subs	r3, #48	@ 0x30
 8010c32:	2b09      	cmp	r3, #9
 8010c34:	d94b      	bls.n	8010cce <_vfiprintf_r+0x1a2>
 8010c36:	b1b0      	cbz	r0, 8010c66 <_vfiprintf_r+0x13a>
 8010c38:	9207      	str	r2, [sp, #28]
 8010c3a:	e014      	b.n	8010c66 <_vfiprintf_r+0x13a>
 8010c3c:	eba0 0308 	sub.w	r3, r0, r8
 8010c40:	fa09 f303 	lsl.w	r3, r9, r3
 8010c44:	4313      	orrs	r3, r2
 8010c46:	9304      	str	r3, [sp, #16]
 8010c48:	46a2      	mov	sl, r4
 8010c4a:	e7d2      	b.n	8010bf2 <_vfiprintf_r+0xc6>
 8010c4c:	9b03      	ldr	r3, [sp, #12]
 8010c4e:	1d19      	adds	r1, r3, #4
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	9103      	str	r1, [sp, #12]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	bfbb      	ittet	lt
 8010c58:	425b      	neglt	r3, r3
 8010c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8010c5e:	9307      	strge	r3, [sp, #28]
 8010c60:	9307      	strlt	r3, [sp, #28]
 8010c62:	bfb8      	it	lt
 8010c64:	9204      	strlt	r2, [sp, #16]
 8010c66:	7823      	ldrb	r3, [r4, #0]
 8010c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c6a:	d10a      	bne.n	8010c82 <_vfiprintf_r+0x156>
 8010c6c:	7863      	ldrb	r3, [r4, #1]
 8010c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c70:	d132      	bne.n	8010cd8 <_vfiprintf_r+0x1ac>
 8010c72:	9b03      	ldr	r3, [sp, #12]
 8010c74:	1d1a      	adds	r2, r3, #4
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	9203      	str	r2, [sp, #12]
 8010c7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c7e:	3402      	adds	r4, #2
 8010c80:	9305      	str	r3, [sp, #20]
 8010c82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010d58 <_vfiprintf_r+0x22c>
 8010c86:	7821      	ldrb	r1, [r4, #0]
 8010c88:	2203      	movs	r2, #3
 8010c8a:	4650      	mov	r0, sl
 8010c8c:	f7ef fab0 	bl	80001f0 <memchr>
 8010c90:	b138      	cbz	r0, 8010ca2 <_vfiprintf_r+0x176>
 8010c92:	9b04      	ldr	r3, [sp, #16]
 8010c94:	eba0 000a 	sub.w	r0, r0, sl
 8010c98:	2240      	movs	r2, #64	@ 0x40
 8010c9a:	4082      	lsls	r2, r0
 8010c9c:	4313      	orrs	r3, r2
 8010c9e:	3401      	adds	r4, #1
 8010ca0:	9304      	str	r3, [sp, #16]
 8010ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ca6:	4829      	ldr	r0, [pc, #164]	@ (8010d4c <_vfiprintf_r+0x220>)
 8010ca8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010cac:	2206      	movs	r2, #6
 8010cae:	f7ef fa9f 	bl	80001f0 <memchr>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d03f      	beq.n	8010d36 <_vfiprintf_r+0x20a>
 8010cb6:	4b26      	ldr	r3, [pc, #152]	@ (8010d50 <_vfiprintf_r+0x224>)
 8010cb8:	bb1b      	cbnz	r3, 8010d02 <_vfiprintf_r+0x1d6>
 8010cba:	9b03      	ldr	r3, [sp, #12]
 8010cbc:	3307      	adds	r3, #7
 8010cbe:	f023 0307 	bic.w	r3, r3, #7
 8010cc2:	3308      	adds	r3, #8
 8010cc4:	9303      	str	r3, [sp, #12]
 8010cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cc8:	443b      	add	r3, r7
 8010cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ccc:	e76a      	b.n	8010ba4 <_vfiprintf_r+0x78>
 8010cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	2001      	movs	r0, #1
 8010cd6:	e7a8      	b.n	8010c2a <_vfiprintf_r+0xfe>
 8010cd8:	2300      	movs	r3, #0
 8010cda:	3401      	adds	r4, #1
 8010cdc:	9305      	str	r3, [sp, #20]
 8010cde:	4619      	mov	r1, r3
 8010ce0:	f04f 0c0a 	mov.w	ip, #10
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cea:	3a30      	subs	r2, #48	@ 0x30
 8010cec:	2a09      	cmp	r2, #9
 8010cee:	d903      	bls.n	8010cf8 <_vfiprintf_r+0x1cc>
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d0c6      	beq.n	8010c82 <_vfiprintf_r+0x156>
 8010cf4:	9105      	str	r1, [sp, #20]
 8010cf6:	e7c4      	b.n	8010c82 <_vfiprintf_r+0x156>
 8010cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	2301      	movs	r3, #1
 8010d00:	e7f0      	b.n	8010ce4 <_vfiprintf_r+0x1b8>
 8010d02:	ab03      	add	r3, sp, #12
 8010d04:	9300      	str	r3, [sp, #0]
 8010d06:	462a      	mov	r2, r5
 8010d08:	4b12      	ldr	r3, [pc, #72]	@ (8010d54 <_vfiprintf_r+0x228>)
 8010d0a:	a904      	add	r1, sp, #16
 8010d0c:	4630      	mov	r0, r6
 8010d0e:	f7fb fdbd 	bl	800c88c <_printf_float>
 8010d12:	4607      	mov	r7, r0
 8010d14:	1c78      	adds	r0, r7, #1
 8010d16:	d1d6      	bne.n	8010cc6 <_vfiprintf_r+0x19a>
 8010d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d1a:	07d9      	lsls	r1, r3, #31
 8010d1c:	d405      	bmi.n	8010d2a <_vfiprintf_r+0x1fe>
 8010d1e:	89ab      	ldrh	r3, [r5, #12]
 8010d20:	059a      	lsls	r2, r3, #22
 8010d22:	d402      	bmi.n	8010d2a <_vfiprintf_r+0x1fe>
 8010d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d26:	f7fc fe13 	bl	800d950 <__retarget_lock_release_recursive>
 8010d2a:	89ab      	ldrh	r3, [r5, #12]
 8010d2c:	065b      	lsls	r3, r3, #25
 8010d2e:	f53f af1f 	bmi.w	8010b70 <_vfiprintf_r+0x44>
 8010d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d34:	e71e      	b.n	8010b74 <_vfiprintf_r+0x48>
 8010d36:	ab03      	add	r3, sp, #12
 8010d38:	9300      	str	r3, [sp, #0]
 8010d3a:	462a      	mov	r2, r5
 8010d3c:	4b05      	ldr	r3, [pc, #20]	@ (8010d54 <_vfiprintf_r+0x228>)
 8010d3e:	a904      	add	r1, sp, #16
 8010d40:	4630      	mov	r0, r6
 8010d42:	f7fc f83b 	bl	800cdbc <_printf_i>
 8010d46:	e7e4      	b.n	8010d12 <_vfiprintf_r+0x1e6>
 8010d48:	08013bf0 	.word	0x08013bf0
 8010d4c:	08013bfa 	.word	0x08013bfa
 8010d50:	0800c88d 	.word	0x0800c88d
 8010d54:	08010b09 	.word	0x08010b09
 8010d58:	08013bf6 	.word	0x08013bf6

08010d5c <_raise_r>:
 8010d5c:	291f      	cmp	r1, #31
 8010d5e:	b538      	push	{r3, r4, r5, lr}
 8010d60:	4605      	mov	r5, r0
 8010d62:	460c      	mov	r4, r1
 8010d64:	d904      	bls.n	8010d70 <_raise_r+0x14>
 8010d66:	2316      	movs	r3, #22
 8010d68:	6003      	str	r3, [r0, #0]
 8010d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d6e:	bd38      	pop	{r3, r4, r5, pc}
 8010d70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d72:	b112      	cbz	r2, 8010d7a <_raise_r+0x1e>
 8010d74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d78:	b94b      	cbnz	r3, 8010d8e <_raise_r+0x32>
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	f000 f830 	bl	8010de0 <_getpid_r>
 8010d80:	4622      	mov	r2, r4
 8010d82:	4601      	mov	r1, r0
 8010d84:	4628      	mov	r0, r5
 8010d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d8a:	f000 b817 	b.w	8010dbc <_kill_r>
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d00a      	beq.n	8010da8 <_raise_r+0x4c>
 8010d92:	1c59      	adds	r1, r3, #1
 8010d94:	d103      	bne.n	8010d9e <_raise_r+0x42>
 8010d96:	2316      	movs	r3, #22
 8010d98:	6003      	str	r3, [r0, #0]
 8010d9a:	2001      	movs	r0, #1
 8010d9c:	e7e7      	b.n	8010d6e <_raise_r+0x12>
 8010d9e:	2100      	movs	r1, #0
 8010da0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010da4:	4620      	mov	r0, r4
 8010da6:	4798      	blx	r3
 8010da8:	2000      	movs	r0, #0
 8010daa:	e7e0      	b.n	8010d6e <_raise_r+0x12>

08010dac <raise>:
 8010dac:	4b02      	ldr	r3, [pc, #8]	@ (8010db8 <raise+0xc>)
 8010dae:	4601      	mov	r1, r0
 8010db0:	6818      	ldr	r0, [r3, #0]
 8010db2:	f7ff bfd3 	b.w	8010d5c <_raise_r>
 8010db6:	bf00      	nop
 8010db8:	200003d0 	.word	0x200003d0

08010dbc <_kill_r>:
 8010dbc:	b538      	push	{r3, r4, r5, lr}
 8010dbe:	4d07      	ldr	r5, [pc, #28]	@ (8010ddc <_kill_r+0x20>)
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	4608      	mov	r0, r1
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	602b      	str	r3, [r5, #0]
 8010dca:	f7f7 fcbb 	bl	8008744 <_kill>
 8010dce:	1c43      	adds	r3, r0, #1
 8010dd0:	d102      	bne.n	8010dd8 <_kill_r+0x1c>
 8010dd2:	682b      	ldr	r3, [r5, #0]
 8010dd4:	b103      	cbz	r3, 8010dd8 <_kill_r+0x1c>
 8010dd6:	6023      	str	r3, [r4, #0]
 8010dd8:	bd38      	pop	{r3, r4, r5, pc}
 8010dda:	bf00      	nop
 8010ddc:	20004dcc 	.word	0x20004dcc

08010de0 <_getpid_r>:
 8010de0:	f7f7 bca8 	b.w	8008734 <_getpid>

08010de4 <_init>:
 8010de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010de6:	bf00      	nop
 8010de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dea:	bc08      	pop	{r3}
 8010dec:	469e      	mov	lr, r3
 8010dee:	4770      	bx	lr

08010df0 <_fini>:
 8010df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df2:	bf00      	nop
 8010df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010df6:	bc08      	pop	{r3}
 8010df8:	469e      	mov	lr, r3
 8010dfa:	4770      	bx	lr
