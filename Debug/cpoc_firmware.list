
cpoc_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001342c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003240  080135c0  080135c0  000145c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016800  08016800  00018638  2**0
                  CONTENTS
  4 .ARM          00000008  08016800  08016800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016808  08016808  00018638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016808  08016808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801680c  0801680c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000638  20000000  08016810  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018638  2**0
                  CONTENTS
 10 .bss          00007da4  20000638  20000638  00018638  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200083dc  200083dc  00018638  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018638  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f618  00000000  00000000  00018668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003938  00000000  00000000  00027c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  0002b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae5  00000000  00000000  0002c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001db28  00000000  00000000  0002cf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013335  00000000  00000000  0004aa6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095a02  00000000  00000000  0005dda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f37a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e4c  00000000  00000000  000f37e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000f8634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000638 	.word	0x20000638
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080135a4 	.word	0x080135a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000063c 	.word	0x2000063c
 80001cc:	080135a4 	.word	0x080135a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001014:	2b80      	cmp	r3, #128	@ 0x80
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103a:	2b40      	cmp	r3, #64	@ 0x40
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <DS3231_Write>:
#include "ds3231.h"

#define DS3231_ADDRESS 0xD0

void DS3231_Write(uint8_t reg, uint8_t data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 80011a0:	bf00      	nop
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <DS3231_Write+0x8c>)
 80011a4:	f7ff ff7a 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <DS3231_Write+0x12>
    LL_I2C_GenerateStartCondition(I2C1);
 80011ae:	481b      	ldr	r0, [pc, #108]	@ (800121c <DS3231_Write+0x8c>)
 80011b0:	f7ff ffac 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 80011b4:	bf00      	nop
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <DS3231_Write+0x8c>)
 80011b8:	f7ff ff4a 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <DS3231_Write+0x26>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 80011c2:	21d0      	movs	r1, #208	@ 0xd0
 80011c4:	4815      	ldr	r0, [pc, #84]	@ (800121c <DS3231_Write+0x8c>)
 80011c6:	f7ff ffce 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80011ca:	bf00      	nop
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <DS3231_Write+0x8c>)
 80011ce:	f7ff ff52 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <DS3231_Write+0x3c>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <DS3231_Write+0x8c>)
 80011da:	f7ff ff72 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <DS3231_Write+0x8c>)
 80011e4:	f7ff ffbf 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011e8:	bf00      	nop
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <DS3231_Write+0x8c>)
 80011ec:	f7ff ff0a 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f9      	beq.n	80011ea <DS3231_Write+0x5a>
    LL_I2C_TransmitData8(I2C1, data);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <DS3231_Write+0x8c>)
 80011fc:	f7ff ffb3 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001200:	bf00      	nop
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <DS3231_Write+0x8c>)
 8001204:	f7ff fefe 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <DS3231_Write+0x72>
    LL_I2C_GenerateStopCondition(I2C1);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <DS3231_Write+0x8c>)
 8001210:	f7ff ff8c 	bl	800112c <LL_I2C_GenerateStopCondition>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400

08001220 <DS3231_Read>:

uint8_t DS3231_Read(uint8_t reg)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 800122e:	bf00      	nop
 8001230:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <DS3231_Read+0xc4>)
 8001232:	f7ff ff33 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <DS3231_Read+0x10>
    LL_I2C_GenerateStartCondition(I2C1);
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <DS3231_Read+0xc4>)
 800123e:	f7ff ff65 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001242:	bf00      	nop
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <DS3231_Read+0xc4>)
 8001246:	f7ff ff03 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <DS3231_Read+0x24>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 8001250:	21d0      	movs	r1, #208	@ 0xd0
 8001252:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <DS3231_Read+0xc4>)
 8001254:	f7ff ff87 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001258:	bf00      	nop
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <DS3231_Read+0xc4>)
 800125c:	f7ff ff0b 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <DS3231_Read+0x3a>
    LL_I2C_ClearFlag_ADDR(I2C1);
 8001266:	481f      	ldr	r0, [pc, #124]	@ (80012e4 <DS3231_Read+0xc4>)
 8001268:	f7ff ff2b 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <DS3231_Read+0xc4>)
 8001272:	f7ff ff78 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001276:	bf00      	nop
 8001278:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <DS3231_Read+0xc4>)
 800127a:	f7ff fec3 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <DS3231_Read+0x58>
    LL_I2C_GenerateStartCondition(I2C1);
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <DS3231_Read+0xc4>)
 8001286:	f7ff ff41 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800128a:	bf00      	nop
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <DS3231_Read+0xc4>)
 800128e:	f7ff fedf 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <DS3231_Read+0x6c>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS | 1);
 8001298:	21d1      	movs	r1, #209	@ 0xd1
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <DS3231_Read+0xc4>)
 800129c:	f7ff ff63 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80012a0:	bf00      	nop
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <DS3231_Read+0xc4>)
 80012a4:	f7ff fee7 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f9      	beq.n	80012a2 <DS3231_Read+0x82>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b0:	f7ff ff07 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80012b4:	2100      	movs	r1, #0
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b8:	f7ff ff15 	bl	80010e6 <LL_I2C_AcknowledgeNextData>
    while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80012bc:	bf00      	nop
 80012be:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <DS3231_Read+0xc4>)
 80012c0:	f7ff feb3 	bl	800102a <LL_I2C_IsActiveFlag_RXNE>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <DS3231_Read+0x9e>
    data = LL_I2C_ReceiveData8(I2C1);
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <DS3231_Read+0xc4>)
 80012cc:	f7ff ff3e 	bl	800114c <LL_I2C_ReceiveData8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
    LL_I2C_GenerateStopCondition(I2C1);
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <DS3231_Read+0xc4>)
 80012d6:	f7ff ff29 	bl	800112c <LL_I2C_GenerateStopCondition>
    return data;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400

080012e8 <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t hour, uint8_t min, uint8_t sec)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	460b      	mov	r3, r1
 8001300:	717b      	strb	r3, [r7, #5]
 8001302:	4613      	mov	r3, r2
 8001304:	713b      	strb	r3, [r7, #4]
    DS3231_Write(0x00, ((sec / 10) << 4) | (sec % 10));
 8001306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130a:	4a55      	ldr	r2, [pc, #340]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b258      	sxtb	r0, r3
 8001318:	f897 2020 	ldrb.w	r2, [r7, #32]
 800131c:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4303      	orrs	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff28 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x01, ((min / 10) << 4) | (min % 10));
 8001340:	7f3b      	ldrb	r3, [r7, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	b258      	sxtb	r0, r3
 8001350:	7f3a      	ldrb	r2, [r7, #28]
 8001352:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001354:	fba3 1302 	umull	r1, r3, r3, r2
 8001358:	08d9      	lsrs	r1, r3, #3
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4303      	orrs	r3, r0
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff0d 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x02, ((hour / 10) << 4) | (hour % 10));
 8001376:	7e3b      	ldrb	r3, [r7, #24]
 8001378:	4a39      	ldr	r2, [pc, #228]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b258      	sxtb	r0, r3
 8001386:	7e3a      	ldrb	r2, [r7, #24]
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800138a:	fba3 1302 	umull	r1, r3, r3, r2
 800138e:	08d9      	lsrs	r1, r3, #3
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4303      	orrs	r3, r0
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fef2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x03, day);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2003      	movs	r0, #3
 80013b2:	f7ff feed 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x04, ((date / 10) << 4) | (date % 10));
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b258      	sxtb	r0, r3
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4303      	orrs	r3, r0
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff fed2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x05, ((month / 10) << 4) | (month % 10));
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b258      	sxtb	r0, r3
 80013fc:	797a      	ldrb	r2, [r7, #5]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001400:	fba3 1302 	umull	r1, r3, r3, r2
 8001404:	08d9      	lsrs	r1, r3, #3
 8001406:	460b      	mov	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4303      	orrs	r3, r0
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff feb7 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x06, ((year / 10) << 4) | (year % 10));
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b258      	sxtb	r0, r3
 8001432:	793a      	ldrb	r2, [r7, #4]
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001436:	fba3 1302 	umull	r1, r3, r3, r2
 800143a:	08d9      	lsrs	r1, r3, #3
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4303      	orrs	r3, r0
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2006      	movs	r0, #6
 8001454:	f7ff fe9c 	bl	8001190 <DS3231_Write>
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	cccccccd 	.word	0xcccccccd

08001464 <DS3231_GetDateTime>:

void DS3231_GetDateTime(uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year, uint8_t *hour, uint8_t *min, uint8_t *sec)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    *sec = DS3231_Read(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fed4 	bl	8001220 <DS3231_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	701a      	strb	r2, [r3, #0]
    *min = DS3231_Read(0x01);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fecd 	bl	8001220 <DS3231_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	701a      	strb	r2, [r3, #0]
    *hour = DS3231_Read(0x02);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fec6 	bl	8001220 <DS3231_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	701a      	strb	r2, [r3, #0]
    *day = DS3231_Read(0x03);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff febf 	bl	8001220 <DS3231_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
    *date = DS3231_Read(0x04);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff feb8 	bl	8001220 <DS3231_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	701a      	strb	r2, [r3, #0]
    *month = DS3231_Read(0x05);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f7ff feb1 	bl	8001220 <DS3231_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	701a      	strb	r2, [r3, #0]
    *year = DS3231_Read(0x06);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff feaa 	bl	8001220 <DS3231_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]

    *sec = ((*sec >> 4) * 10) + (*sec & 0x0F);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	701a      	strb	r2, [r3, #0]
    *min = ((*min >> 4) * 10) + (*min & 0x0F);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	701a      	strb	r2, [r3, #0]
    *hour = ((*hour >> 4) * 10) + (*hour & 0x0F);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	701a      	strb	r2, [r3, #0]
    *date = ((*date >> 4) * 10) + (*date & 0x0F);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	701a      	strb	r2, [r3, #0]
    *month = ((*month >> 4) * 10) + (*month & 0x0F);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	701a      	strb	r2, [r3, #0]
    *year = ((*year >> 4) * 10) + (*year & 0x0F);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <DS3231_GetTemperature>:

float DS3231_GetTemperature(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
    uint8_t temp_msb = DS3231_Read(0x11);
 80015ba:	2011      	movs	r0, #17
 80015bc:	f7ff fe30 	bl	8001220 <DS3231_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_lsb = DS3231_Read(0x12);
 80015c4:	2012      	movs	r0, #18
 80015c6:	f7ff fe2b 	bl	8001220 <DS3231_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71bb      	strb	r3, [r7, #6]
    int16_t temp = (temp_msb << 8) | temp_lsb;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
    float temperature = temp / 256.0;
 80015dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffaf 	bl	8000544 <__aeabi_i2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <DS3231_GetTemperature+0x5c>)
 80015ec:	f7ff f93e 	bl	800086c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb06 	bl	8000c08 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	603b      	str	r3, [r7, #0]
    return temperature;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40700000 	.word	0x40700000

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	@ (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ffc2 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <systick_timer_init+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <systick_timer_init+0x20>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffc3 	bl	8001668 <SysTick_Config>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000045c 	.word	0x2000045c
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b02      	cmp	r3, #2
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b20      	cmp	r3, #32
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001798:	2b80      	cmp	r3, #128	@ 0x80
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001804:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800181a:	b480      	push	{r7}
 800181c:	b089      	sub	sp, #36	@ 0x24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	e853 3f00 	ldrex	r3, [r3]
 800182e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	330c      	adds	r3, #12
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	61ba      	str	r2, [r7, #24]
 8001840:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001842:	6979      	ldr	r1, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	e841 2300 	strex	r3, r2, [r1]
 800184a:	613b      	str	r3, [r7, #16]
   return(result);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e7      	bne.n	8001822 <LL_USART_EnableIT_RXNE+0x8>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3724      	adds	r7, #36	@ 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	330c      	adds	r3, #12
 800186c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	e853 3f00 	ldrex	r3, [r3]
 8001874:	60bb      	str	r3, [r7, #8]
   return(result);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	330c      	adds	r3, #12
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	61ba      	str	r2, [r7, #24]
 8001886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	e841 2300 	strex	r3, r2, [r1]
 8001890:	613b      	str	r3, [r7, #16]
   return(result);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e7      	bne.n	8001868 <LL_USART_EnableIT_TXE+0x8>
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b089      	sub	sp, #36	@ 0x24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3314      	adds	r3, #20
 80018b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	e853 3f00 	ldrex	r3, [r3]
 80018ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3314      	adds	r3, #20
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	61ba      	str	r2, [r7, #24]
 80018cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	e841 2300 	strex	r3, r2, [r1]
 80018d6:	613b      	str	r3, [r7, #16]
   return(result);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e7      	bne.n	80018ae <LL_USART_EnableIT_ERROR+0x8>
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	@ 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	330c      	adds	r3, #12
 80018f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	e853 3f00 	ldrex	r3, [r3]
 8001900:	60bb      	str	r3, [r7, #8]
   return(result);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f023 0320 	bic.w	r3, r3, #32
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	61ba      	str	r2, [r7, #24]
 8001912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	e841 2300 	strex	r3, r2, [r1]
 800191c:	613b      	str	r3, [r7, #16]
   return(result);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e7      	bne.n	80018f4 <LL_USART_DisableIT_RXNE+0x8>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001932:	b480      	push	{r7}
 8001934:	b089      	sub	sp, #36	@ 0x24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330c      	adds	r3, #12
 800193e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	e853 3f00 	ldrex	r3, [r3]
 8001946:	60bb      	str	r3, [r7, #8]
   return(result);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	330c      	adds	r3, #12
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	61ba      	str	r2, [r7, #24]
 8001958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195a:	6979      	ldr	r1, [r7, #20]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	e841 2300 	strex	r3, r2, [r1]
 8001962:	613b      	str	r3, [r7, #16]
   return(result);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e7      	bne.n	800193a <LL_USART_DisableIT_TXE+0x8>
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3724      	adds	r7, #36	@ 0x24
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b20      	cmp	r3, #32
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b80      	cmp	r3, #128	@ 0x80
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	b2db      	uxtb	r3, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <Ringbuf_init>:


void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <Ringbuf_init+0xa8>)
 8001a02:	4a29      	ldr	r2, [pc, #164]	@ (8001aa8 <Ringbuf_init+0xac>)
 8001a04:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <Ringbuf_init+0xb0>)
 8001a08:	4a29      	ldr	r2, [pc, #164]	@ (8001ab0 <Ringbuf_init+0xb4>)
 8001a0a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <Ringbuf_init+0xb8>)
 8001a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab8 <Ringbuf_init+0xbc>)
 8001a10:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001a12:	4b2a      	ldr	r3, [pc, #168]	@ (8001abc <Ringbuf_init+0xc0>)
 8001a14:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac0 <Ringbuf_init+0xc4>)
 8001a16:	601a      	str	r2, [r3, #0]
  _rx_buffer3 = &rx_buffer3;
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a1c:	601a      	str	r2, [r3, #0]
  _tx_buffer3 = &tx_buffer3;
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a20:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a22:	601a      	str	r2, [r3, #0]
  _rx_buffer5 = &rx_buffer5;
 8001a24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <Ringbuf_init+0xd8>)
 8001a26:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad8 <Ringbuf_init+0xdc>)
 8001a28:	601a      	str	r2, [r3, #0]
  _tx_buffer5 = &tx_buffer5;
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <Ringbuf_init+0xe0>)
 8001a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ae0 <Ringbuf_init+0xe4>)
 8001a2e:	601a      	str	r2, [r3, #0]
  _rx_buffer6 = &rx_buffer6;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <Ringbuf_init+0xe8>)
 8001a32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae8 <Ringbuf_init+0xec>)
 8001a34:	601a      	str	r2, [r3, #0]
  _tx_buffer6 = &tx_buffer6;
 8001a36:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <Ringbuf_init+0xf0>)
 8001a38:	4a2d      	ldr	r2, [pc, #180]	@ (8001af0 <Ringbuf_init+0xf4>)
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  LL_USART_EnableIT_ERROR(uart1);
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <Ringbuf_init+0xf8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff30 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart2);
 8001a46:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <Ringbuf_init+0xfc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff2b 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart3);
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <Ringbuf_init+0x100>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff26 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart5);
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <Ringbuf_init+0x104>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff21 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart6);
 8001a64:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <Ringbuf_init+0x108>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff1c 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart1);
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <Ringbuf_init+0xf8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fed1 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart2);
 8001a78:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <Ringbuf_init+0xfc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fecc 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart3);
 8001a82:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <Ringbuf_init+0x100>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fec7 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart5);
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <Ringbuf_init+0x104>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fec2 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart6);
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <Ringbuf_init+0x108>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff febd 	bl	800181a <LL_USART_EnableIT_RXNE>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200056a4 	.word	0x200056a4
 8001aa8:	20000654 	.word	0x20000654
 8001aac:	200056a8 	.word	0x200056a8
 8001ab0:	20000e5c 	.word	0x20000e5c
 8001ab4:	200056ac 	.word	0x200056ac
 8001ab8:	20001664 	.word	0x20001664
 8001abc:	200056b0 	.word	0x200056b0
 8001ac0:	20001e6c 	.word	0x20001e6c
 8001ac4:	200056b4 	.word	0x200056b4
 8001ac8:	20002674 	.word	0x20002674
 8001acc:	200056b8 	.word	0x200056b8
 8001ad0:	20002e7c 	.word	0x20002e7c
 8001ad4:	200056bc 	.word	0x200056bc
 8001ad8:	20003684 	.word	0x20003684
 8001adc:	200056c0 	.word	0x200056c0
 8001ae0:	20003e8c 	.word	0x20003e8c
 8001ae4:	200056c4 	.word	0x200056c4
 8001ae8:	20004694 	.word	0x20004694
 8001aec:	200056c8 	.word	0x200056c8
 8001af0:	20004e9c 	.word	0x20004e9c
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004
 8001afc:	20000008 	.word	0x20000008
 8001b00:	2000000c 	.word	0x2000000c
 8001b04:	20000010 	.word	0x20000010

08001b08 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b20:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d03b      	beq.n	8001ba6 <store_char+0x9e>
    ATOMIC_BLOCK_START(USART1)
 8001b2e:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <store_char+0xa8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff feda 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(USART2)
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <store_char+0xac>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fed5 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(USART3)
 8001b42:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <store_char+0xb0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fed0 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(UART5)
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <store_char+0xb4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fecb 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(UART4)
 8001b56:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <store_char+0xb8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fec6 	bl	80018ec <LL_USART_DisableIT_RXNE>
    buffer->buffer[buffer->head] = c;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	79f9      	ldrb	r1, [r7, #7]
 8001b6a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
    ATOMIC_BLOCK_END(USART1)
 8001b74:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <store_char+0xa8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fe4e 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART2)
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <store_char+0xac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fe49 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART3)
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <store_char+0xb0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fe44 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART5)
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <store_char+0xb4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fe3f 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART4)
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <store_char+0xb8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fe3a 	bl	800181a <LL_USART_EnableIT_RXNE>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	2000000c 	.word	0x2000000c
 8001bc0:	20000010 	.word	0x20000010

08001bc4 <Uart_read>:

int Uart_read(USART_TypeDef *uart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  ring_buffer *_rx_buffer;

  switch ((uint32_t)uart) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a50      	ldr	r2, [pc, #320]	@ (8001d10 <Uart_read+0x14c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00f      	beq.n	8001bf4 <Uart_read+0x30>
 8001bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d10 <Uart_read+0x14c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d81c      	bhi.n	8001c14 <Uart_read+0x50>
 8001bda:	4a4e      	ldr	r2, [pc, #312]	@ (8001d14 <Uart_read+0x150>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d015      	beq.n	8001c0c <Uart_read+0x48>
 8001be0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d14 <Uart_read+0x150>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d816      	bhi.n	8001c14 <Uart_read+0x50>
 8001be6:	4a4c      	ldr	r2, [pc, #304]	@ (8001d18 <Uart_read+0x154>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d007      	beq.n	8001bfc <Uart_read+0x38>
 8001bec:	4a4b      	ldr	r2, [pc, #300]	@ (8001d1c <Uart_read+0x158>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d008      	beq.n	8001c04 <Uart_read+0x40>
 8001bf2:	e00f      	b.n	8001c14 <Uart_read+0x50>
    case (uint32_t)USART1:
      _rx_buffer = _rx_buffer1;
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d20 <Uart_read+0x15c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
      break;
 8001bfa:	e00f      	b.n	8001c1c <Uart_read+0x58>
    case (uint32_t)USART2:
      _rx_buffer = _rx_buffer2;
 8001bfc:	4b49      	ldr	r3, [pc, #292]	@ (8001d24 <Uart_read+0x160>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
      break;
 8001c02:	e00b      	b.n	8001c1c <Uart_read+0x58>
    case (uint32_t)USART3:
      _rx_buffer = _rx_buffer3;
 8001c04:	4b48      	ldr	r3, [pc, #288]	@ (8001d28 <Uart_read+0x164>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
      break;
 8001c0a:	e007      	b.n	8001c1c <Uart_read+0x58>
    case (uint32_t)UART5:
      _rx_buffer = _rx_buffer5;
 8001c0c:	4b47      	ldr	r3, [pc, #284]	@ (8001d2c <Uart_read+0x168>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
      break;
 8001c12:	e003      	b.n	8001c1c <Uart_read+0x58>
    default:
      _rx_buffer = _rx_buffer6;
 8001c14:	4b46      	ldr	r3, [pc, #280]	@ (8001d30 <Uart_read+0x16c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
      break;
 8001c1a:	bf00      	nop
  }

  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d102      	bne.n	8001c32 <Uart_read+0x6e>
  {
    return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	e069      	b.n	8001d06 <Uart_read+0x142>
  }
  else
  {
    ATOMIC_BLOCK_START(uart)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a36      	ldr	r2, [pc, #216]	@ (8001d10 <Uart_read+0x14c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d105      	bne.n	8001c46 <Uart_read+0x82>
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d34 <Uart_read+0x170>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe54 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c44:	e022      	b.n	8001c8c <Uart_read+0xc8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a33      	ldr	r2, [pc, #204]	@ (8001d18 <Uart_read+0x154>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d105      	bne.n	8001c5a <Uart_read+0x96>
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d38 <Uart_read+0x174>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe4a 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c58:	e018      	b.n	8001c8c <Uart_read+0xc8>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001d1c <Uart_read+0x158>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d105      	bne.n	8001c6e <Uart_read+0xaa>
 8001c62:	4b36      	ldr	r3, [pc, #216]	@ (8001d3c <Uart_read+0x178>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fe40 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c6c:	e00e      	b.n	8001c8c <Uart_read+0xc8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a28      	ldr	r2, [pc, #160]	@ (8001d14 <Uart_read+0x150>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d105      	bne.n	8001c82 <Uart_read+0xbe>
 8001c76:	4b32      	ldr	r3, [pc, #200]	@ (8001d40 <Uart_read+0x17c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe36 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c80:	e004      	b.n	8001c8c <Uart_read+0xc8>
 8001c82:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <Uart_read+0x180>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fe30 	bl	80018ec <LL_USART_DisableIT_RXNE>
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	72fb      	strb	r3, [r7, #11]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    ATOMIC_BLOCK_END(uart)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <Uart_read+0x14c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d105      	bne.n	8001cbe <Uart_read+0xfa>
 8001cb2:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <Uart_read+0x170>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fdaf 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cbc:	e022      	b.n	8001d04 <Uart_read+0x140>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a15      	ldr	r2, [pc, #84]	@ (8001d18 <Uart_read+0x154>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d105      	bne.n	8001cd2 <Uart_read+0x10e>
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <Uart_read+0x174>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fda5 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cd0:	e018      	b.n	8001d04 <Uart_read+0x140>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a11      	ldr	r2, [pc, #68]	@ (8001d1c <Uart_read+0x158>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d105      	bne.n	8001ce6 <Uart_read+0x122>
 8001cda:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <Uart_read+0x178>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fd9b 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001ce4:	e00e      	b.n	8001d04 <Uart_read+0x140>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <Uart_read+0x150>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d105      	bne.n	8001cfa <Uart_read+0x136>
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <Uart_read+0x17c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fd91 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cf8:	e004      	b.n	8001d04 <Uart_read+0x140>
 8001cfa:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <Uart_read+0x180>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fd8b 	bl	800181a <LL_USART_EnableIT_RXNE>
    return c;
 8001d04:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40011000 	.word	0x40011000
 8001d14:	40005000 	.word	0x40005000
 8001d18:	40004400 	.word	0x40004400
 8001d1c:	40004800 	.word	0x40004800
 8001d20:	200056a4 	.word	0x200056a4
 8001d24:	200056ac 	.word	0x200056ac
 8001d28:	200056b4 	.word	0x200056b4
 8001d2c:	200056bc 	.word	0x200056bc
 8001d30:	200056c4 	.word	0x200056c4
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	2000000c 	.word	0x2000000c
 8001d44:	20000010 	.word	0x20000010

08001d48 <Uart_write>:

void Uart_write(USART_TypeDef *uart, int c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  ring_buffer *_tx_buffer;
  switch ((uint32_t)uart) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a69      	ldr	r2, [pc, #420]	@ (8001efc <Uart_write+0x1b4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00f      	beq.n	8001d7a <Uart_write+0x32>
 8001d5a:	4a68      	ldr	r2, [pc, #416]	@ (8001efc <Uart_write+0x1b4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d81c      	bhi.n	8001d9a <Uart_write+0x52>
 8001d60:	4a67      	ldr	r2, [pc, #412]	@ (8001f00 <Uart_write+0x1b8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d015      	beq.n	8001d92 <Uart_write+0x4a>
 8001d66:	4a66      	ldr	r2, [pc, #408]	@ (8001f00 <Uart_write+0x1b8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d816      	bhi.n	8001d9a <Uart_write+0x52>
 8001d6c:	4a65      	ldr	r2, [pc, #404]	@ (8001f04 <Uart_write+0x1bc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <Uart_write+0x3a>
 8001d72:	4a65      	ldr	r2, [pc, #404]	@ (8001f08 <Uart_write+0x1c0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d008      	beq.n	8001d8a <Uart_write+0x42>
 8001d78:	e00f      	b.n	8001d9a <Uart_write+0x52>
    case (uint32_t)USART1:
      _tx_buffer = _tx_buffer1;
 8001d7a:	4b64      	ldr	r3, [pc, #400]	@ (8001f0c <Uart_write+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]
      break;
 8001d80:	e00f      	b.n	8001da2 <Uart_write+0x5a>
    case (uint32_t)USART2:
      _tx_buffer = _tx_buffer2;
 8001d82:	4b63      	ldr	r3, [pc, #396]	@ (8001f10 <Uart_write+0x1c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
      break;
 8001d88:	e00b      	b.n	8001da2 <Uart_write+0x5a>
    case (uint32_t)USART3:
      _tx_buffer = _tx_buffer3;
 8001d8a:	4b62      	ldr	r3, [pc, #392]	@ (8001f14 <Uart_write+0x1cc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]
      break;
 8001d90:	e007      	b.n	8001da2 <Uart_write+0x5a>
    case (uint32_t)UART5:
      _tx_buffer = _tx_buffer5;
 8001d92:	4b61      	ldr	r3, [pc, #388]	@ (8001f18 <Uart_write+0x1d0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60fb      	str	r3, [r7, #12]
      break;
 8001d98:	e003      	b.n	8001da2 <Uart_write+0x5a>
    default:
      _tx_buffer = _tx_buffer6;
 8001d9a:	4b60      	ldr	r3, [pc, #384]	@ (8001f1c <Uart_write+0x1d4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]
      break;
 8001da0:	bf00      	nop
  }

  if (c >= 0)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f2c0 80a5 	blt.w	8001ef4 <Uart_write+0x1ac>
  {
    int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001db0:	3301      	adds	r3, #1
 8001db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db6:	60bb      	str	r3, [r7, #8]

    ATOMIC_BLOCK_START(uart)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a50      	ldr	r2, [pc, #320]	@ (8001efc <Uart_write+0x1b4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d105      	bne.n	8001dcc <Uart_write+0x84>
 8001dc0:	4b57      	ldr	r3, [pc, #348]	@ (8001f20 <Uart_write+0x1d8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fd91 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001dca:	e022      	b.n	8001e12 <Uart_write+0xca>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4d      	ldr	r2, [pc, #308]	@ (8001f04 <Uart_write+0x1bc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d105      	bne.n	8001de0 <Uart_write+0x98>
 8001dd4:	4b53      	ldr	r3, [pc, #332]	@ (8001f24 <Uart_write+0x1dc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fd87 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001dde:	e018      	b.n	8001e12 <Uart_write+0xca>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a49      	ldr	r2, [pc, #292]	@ (8001f08 <Uart_write+0x1c0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d105      	bne.n	8001df4 <Uart_write+0xac>
 8001de8:	4b4f      	ldr	r3, [pc, #316]	@ (8001f28 <Uart_write+0x1e0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fd7d 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001df2:	e00e      	b.n	8001e12 <Uart_write+0xca>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a42      	ldr	r2, [pc, #264]	@ (8001f00 <Uart_write+0x1b8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d105      	bne.n	8001e08 <Uart_write+0xc0>
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8001f2c <Uart_write+0x1e4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fd73 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001e06:	e004      	b.n	8001e12 <Uart_write+0xca>
 8001e08:	4b49      	ldr	r3, [pc, #292]	@ (8001f30 <Uart_write+0x1e8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fd6d 	bl	80018ec <LL_USART_DisableIT_RXNE>
    while (i == _tx_buffer->tail);
 8001e12:	bf00      	nop
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d0f9      	beq.n	8001e14 <Uart_write+0xcc>

    _tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	b2d1      	uxtb	r1, r2
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	54d1      	strb	r1, [r2, r3]
    _tx_buffer->head = i;
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
    ATOMIC_BLOCK_END(uart)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a30      	ldr	r2, [pc, #192]	@ (8001efc <Uart_write+0x1b4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d105      	bne.n	8001e4a <Uart_write+0x102>
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <Uart_write+0x1d8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fce9 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e48:	e022      	b.n	8001e90 <Uart_write+0x148>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f04 <Uart_write+0x1bc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d105      	bne.n	8001e5e <Uart_write+0x116>
 8001e52:	4b34      	ldr	r3, [pc, #208]	@ (8001f24 <Uart_write+0x1dc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fcdf 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e5c:	e018      	b.n	8001e90 <Uart_write+0x148>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a29      	ldr	r2, [pc, #164]	@ (8001f08 <Uart_write+0x1c0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d105      	bne.n	8001e72 <Uart_write+0x12a>
 8001e66:	4b30      	ldr	r3, [pc, #192]	@ (8001f28 <Uart_write+0x1e0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fcd5 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e70:	e00e      	b.n	8001e90 <Uart_write+0x148>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <Uart_write+0x1b8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d105      	bne.n	8001e86 <Uart_write+0x13e>
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f2c <Uart_write+0x1e4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fccb 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e84:	e004      	b.n	8001e90 <Uart_write+0x148>
 8001e86:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <Uart_write+0x1e8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fcc5 	bl	800181a <LL_USART_EnableIT_RXNE>

    switch ((uint32_t)uart) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a1a      	ldr	r2, [pc, #104]	@ (8001efc <Uart_write+0x1b4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00f      	beq.n	8001eb8 <Uart_write+0x170>
 8001e98:	4a18      	ldr	r2, [pc, #96]	@ (8001efc <Uart_write+0x1b4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d824      	bhi.n	8001ee8 <Uart_write+0x1a0>
 8001e9e:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <Uart_write+0x1b8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d01b      	beq.n	8001edc <Uart_write+0x194>
 8001ea4:	4a16      	ldr	r2, [pc, #88]	@ (8001f00 <Uart_write+0x1b8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d81e      	bhi.n	8001ee8 <Uart_write+0x1a0>
 8001eaa:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <Uart_write+0x1bc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <Uart_write+0x17c>
 8001eb0:	4a15      	ldr	r2, [pc, #84]	@ (8001f08 <Uart_write+0x1c0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00c      	beq.n	8001ed0 <Uart_write+0x188>
 8001eb6:	e017      	b.n	8001ee8 <Uart_write+0x1a0>
      case (uint32_t)USART1:
        LL_USART_EnableIT_TXE(uart1);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <Uart_write+0x1d8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fccf 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ec2:	e017      	b.n	8001ef4 <Uart_write+0x1ac>
      case (uint32_t)USART2:
        LL_USART_EnableIT_TXE(uart2);
 8001ec4:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <Uart_write+0x1dc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fcc9 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ece:	e011      	b.n	8001ef4 <Uart_write+0x1ac>
      case (uint32_t)USART3:
        LL_USART_EnableIT_TXE(uart3);
 8001ed0:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <Uart_write+0x1e0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fcc3 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001eda:	e00b      	b.n	8001ef4 <Uart_write+0x1ac>
      case (uint32_t)UART5:
        LL_USART_EnableIT_TXE(uart5);
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <Uart_write+0x1e4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fcbd 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ee6:	e005      	b.n	8001ef4 <Uart_write+0x1ac>
      default:
        LL_USART_EnableIT_TXE(uart6);
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <Uart_write+0x1e8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fcb7 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ef2:	bf00      	nop
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40011000 	.word	0x40011000
 8001f00:	40005000 	.word	0x40005000
 8001f04:	40004400 	.word	0x40004400
 8001f08:	40004800 	.word	0x40004800
 8001f0c:	200056a8 	.word	0x200056a8
 8001f10:	200056b0 	.word	0x200056b0
 8001f14:	200056b8 	.word	0x200056b8
 8001f18:	200056c0 	.word	0x200056c0
 8001f1c:	200056c8 	.word	0x200056c8
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	2000000c 	.word	0x2000000c
 8001f30:	20000010 	.word	0x20000010

08001f34 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;
	  switch ((uint32_t)uart) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb8 <IsDataAvailable+0x84>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00f      	beq.n	8001f64 <IsDataAvailable+0x30>
 8001f44:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb8 <IsDataAvailable+0x84>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d81c      	bhi.n	8001f84 <IsDataAvailable+0x50>
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fbc <IsDataAvailable+0x88>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d015      	beq.n	8001f7c <IsDataAvailable+0x48>
 8001f50:	4a1a      	ldr	r2, [pc, #104]	@ (8001fbc <IsDataAvailable+0x88>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d816      	bhi.n	8001f84 <IsDataAvailable+0x50>
 8001f56:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc0 <IsDataAvailable+0x8c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d007      	beq.n	8001f6c <IsDataAvailable+0x38>
 8001f5c:	4a19      	ldr	r2, [pc, #100]	@ (8001fc4 <IsDataAvailable+0x90>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d008      	beq.n	8001f74 <IsDataAvailable+0x40>
 8001f62:	e00f      	b.n	8001f84 <IsDataAvailable+0x50>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001f64:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <IsDataAvailable+0x94>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
	      break;
 8001f6a:	e00f      	b.n	8001f8c <IsDataAvailable+0x58>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <IsDataAvailable+0x98>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
	      break;
 8001f72:	e00b      	b.n	8001f8c <IsDataAvailable+0x58>
	    case (uint32_t)USART3:
	      _rx_buffer = _rx_buffer3;
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <IsDataAvailable+0x9c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
	      break;
 8001f7a:	e007      	b.n	8001f8c <IsDataAvailable+0x58>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001f7c:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <IsDataAvailable+0xa0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
	      break;
 8001f82:	e003      	b.n	8001f8c <IsDataAvailable+0x58>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001f84:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <IsDataAvailable+0xa4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
	      break;
 8001f8a:	bf00      	nop
	  }

  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40011000 	.word	0x40011000
 8001fbc:	40005000 	.word	0x40005000
 8001fc0:	40004400 	.word	0x40004400
 8001fc4:	40004800 	.word	0x40004800
 8001fc8:	200056a4 	.word	0x200056a4
 8001fcc:	200056ac 	.word	0x200056ac
 8001fd0:	200056b4 	.word	0x200056b4
 8001fd4:	200056bc 	.word	0x200056bc
 8001fd8:	200056c4 	.word	0x200056c4

08001fdc <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (USART_TypeDef *uart, const char *s)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	while(*s) Uart_write(uart, *s++);
 8001fe6:	e007      	b.n	8001ff8 <Uart_sendstring+0x1c>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	603a      	str	r2, [r7, #0]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fea8 	bl	8001d48 <Uart_write>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f3      	bne.n	8001fe8 <Uart_sendstring+0xc>
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <Uart_flush>:


}

void Uart_flush (USART_TypeDef *uart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;

	  switch ((uint32_t)uart) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a1d      	ldr	r2, [pc, #116]	@ (800208c <Uart_flush+0x80>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00f      	beq.n	800203c <Uart_flush+0x30>
 800201c:	4a1b      	ldr	r2, [pc, #108]	@ (800208c <Uart_flush+0x80>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d81c      	bhi.n	800205c <Uart_flush+0x50>
 8002022:	4a1b      	ldr	r2, [pc, #108]	@ (8002090 <Uart_flush+0x84>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d015      	beq.n	8002054 <Uart_flush+0x48>
 8002028:	4a19      	ldr	r2, [pc, #100]	@ (8002090 <Uart_flush+0x84>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d816      	bhi.n	800205c <Uart_flush+0x50>
 800202e:	4a19      	ldr	r2, [pc, #100]	@ (8002094 <Uart_flush+0x88>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <Uart_flush+0x38>
 8002034:	4a18      	ldr	r2, [pc, #96]	@ (8002098 <Uart_flush+0x8c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d008      	beq.n	800204c <Uart_flush+0x40>
 800203a:	e00f      	b.n	800205c <Uart_flush+0x50>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 800203c:	4b17      	ldr	r3, [pc, #92]	@ (800209c <Uart_flush+0x90>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
	      break;
 8002042:	e00f      	b.n	8002064 <Uart_flush+0x58>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8002044:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <Uart_flush+0x94>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
	      break;
 800204a:	e00b      	b.n	8002064 <Uart_flush+0x58>
	    case (uint32_t)USART3:
	      _rx_buffer = _rx_buffer3;
 800204c:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <Uart_flush+0x98>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
	      break;
 8002052:	e007      	b.n	8002064 <Uart_flush+0x58>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8002054:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <Uart_flush+0x9c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
	      break;
 800205a:	e003      	b.n	8002064 <Uart_flush+0x58>
	    default:
	      _rx_buffer = _rx_buffer6;
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <Uart_flush+0xa0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
	      break;
 8002062:	bf00      	nop
	  }

	  memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f00d ff3e 	bl	800feee <memset>
	  _rx_buffer->head = 0;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	  _rx_buffer->tail = 0;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40011000 	.word	0x40011000
 8002090:	40005000 	.word	0x40005000
 8002094:	40004400 	.word	0x40004400
 8002098:	40004800 	.word	0x40004800
 800209c:	200056a4 	.word	0x200056a4
 80020a0:	200056ac 	.word	0x200056ac
 80020a4:	200056b4 	.word	0x200056b4
 80020a8:	200056bc 	.word	0x200056bc
 80020ac:	200056c4 	.word	0x200056c4

080020b0 <Uart_isr>:
	if (so_far == len) return 1;
	else return 0;
}

void Uart_isr (USART_TypeDef *uart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  //  uint32_t isrflags   = LL_USART_ReadReg(uart, SR);
    ring_buffer *_rx_buffer;
    ring_buffer *_tx_buffer;

    switch ((uint32_t)uart) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a4c      	ldr	r2, [pc, #304]	@ (80021ec <Uart_isr+0x13c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00f      	beq.n	80020e0 <Uart_isr+0x30>
 80020c0:	4a4a      	ldr	r2, [pc, #296]	@ (80021ec <Uart_isr+0x13c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d828      	bhi.n	8002118 <Uart_isr+0x68>
 80020c6:	4a4a      	ldr	r2, [pc, #296]	@ (80021f0 <Uart_isr+0x140>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d01e      	beq.n	800210a <Uart_isr+0x5a>
 80020cc:	4a48      	ldr	r2, [pc, #288]	@ (80021f0 <Uart_isr+0x140>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d822      	bhi.n	8002118 <Uart_isr+0x68>
 80020d2:	4a48      	ldr	r2, [pc, #288]	@ (80021f4 <Uart_isr+0x144>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00a      	beq.n	80020ee <Uart_isr+0x3e>
 80020d8:	4a47      	ldr	r2, [pc, #284]	@ (80021f8 <Uart_isr+0x148>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <Uart_isr+0x4c>
 80020de:	e01b      	b.n	8002118 <Uart_isr+0x68>
      case (uint32_t)USART1:
        _rx_buffer = _rx_buffer1;
 80020e0:	4b46      	ldr	r3, [pc, #280]	@ (80021fc <Uart_isr+0x14c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer1;
 80020e6:	4b46      	ldr	r3, [pc, #280]	@ (8002200 <Uart_isr+0x150>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	613b      	str	r3, [r7, #16]
        break;
 80020ec:	e01b      	b.n	8002126 <Uart_isr+0x76>
      case (uint32_t)USART2:
        _rx_buffer = _rx_buffer2;
 80020ee:	4b45      	ldr	r3, [pc, #276]	@ (8002204 <Uart_isr+0x154>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer2;
 80020f4:	4b44      	ldr	r3, [pc, #272]	@ (8002208 <Uart_isr+0x158>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	613b      	str	r3, [r7, #16]
        break;
 80020fa:	e014      	b.n	8002126 <Uart_isr+0x76>
      case (uint32_t)USART3:
        _rx_buffer = _rx_buffer3;
 80020fc:	4b43      	ldr	r3, [pc, #268]	@ (800220c <Uart_isr+0x15c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer3;
 8002102:	4b43      	ldr	r3, [pc, #268]	@ (8002210 <Uart_isr+0x160>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	613b      	str	r3, [r7, #16]
        break;
 8002108:	e00d      	b.n	8002126 <Uart_isr+0x76>
      case (uint32_t)UART5:
        _rx_buffer = _rx_buffer5;
 800210a:	4b42      	ldr	r3, [pc, #264]	@ (8002214 <Uart_isr+0x164>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer5;
 8002110:	4b41      	ldr	r3, [pc, #260]	@ (8002218 <Uart_isr+0x168>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	613b      	str	r3, [r7, #16]
        break;
 8002116:	e006      	b.n	8002126 <Uart_isr+0x76>
      default:
        _rx_buffer = _rx_buffer6;
 8002118:	4b40      	ldr	r3, [pc, #256]	@ (800221c <Uart_isr+0x16c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer6;
 800211e:	4b40      	ldr	r3, [pc, #256]	@ (8002220 <Uart_isr+0x170>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	613b      	str	r3, [r7, #16]
        break;
 8002124:	bf00      	nop
    }

    /* if DR is not empty and the Rx Int is enabled */
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fb1b 	bl	8001762 <LL_USART_IsActiveFlag_RXNE>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d02c      	beq.n	800218c <Uart_isr+0xdc>
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fc20 	bl	8001978 <LL_USART_IsEnabledIT_RXNE>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d026      	beq.n	800218c <Uart_isr+0xdc>
//        LL_USART_ReceiveData8(uart);                /* Read status register */
//        unsigned char c = LL_USART_ReceiveData8(uart);    /* Read data register */
//        store_char (c, _rx_buffer);  // store data in buffer
//        return;

        unsigned char data = LL_USART_ReceiveData8(uart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fc40 	bl	80019c4 <LL_USART_ReceiveData8>
 8002144:	4603      	mov	r3, r0
 8002146:	73fb      	strb	r3, [r7, #15]
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff faf7 	bl	800173c <LL_USART_IsActiveFlag_ORE>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10b      	bne.n	800216c <Uart_isr+0xbc>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff facb 	bl	80016f0 <LL_USART_IsActiveFlag_FE>
 800215a:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <Uart_isr+0xbc>
            (LL_USART_IsActiveFlag_NE(uart) != RESET))
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fad8 	bl	8001716 <LL_USART_IsActiveFlag_NE>
 8002166:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002168:	2b00      	cmp	r3, #0
 800216a:	d009      	beq.n	8002180 <Uart_isr+0xd0>
        {
          // if error, del flag
          LL_USART_ClearFlag_ORE(uart);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fb42 	bl	80017f6 <LL_USART_ClearFlag_ORE>
          LL_USART_ClearFlag_FE(uart);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fb1b 	bl	80017ae <LL_USART_ClearFlag_FE>
          LL_USART_ClearFlag_NE(uart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fb2a 	bl	80017d2 <LL_USART_ClearFlag_NE>
        }
        else
        {
          store_char(data, _rx_buffer); // store data in buffer
        }
        return;
 800217e:	e032      	b.n	80021e6 <Uart_isr+0x136>
          store_char(data, _rx_buffer); // store data in buffer
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	6979      	ldr	r1, [r7, #20]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fcbf 	bl	8001b08 <store_char>
        return;
 800218a:	e02c      	b.n	80021e6 <Uart_isr+0x136>


    }
    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fafb 	bl	8001788 <LL_USART_IsActiveFlag_TXE>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d026      	beq.n	80021e6 <Uart_isr+0x136>
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff fc00 	bl	800199e <LL_USART_IsEnabledIT_TXE>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <Uart_isr+0x136>
    {
        if(_tx_buffer->head == _tx_buffer->tail)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d103      	bne.n	80021bc <Uart_isr+0x10c>
        {
          // Buffer empty, so disable interrupts
          LL_USART_DisableIT_TXE(uart);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fbbc 	bl	8001932 <LL_USART_DisableIT_TXE>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;

          LL_USART_TransmitData8(uart, c);
        }
        return;
 80021ba:	e013      	b.n	80021e4 <Uart_isr+0x134>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	73bb      	strb	r3, [r7, #14]
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
          LL_USART_TransmitData8(uart, c);
 80021da:	7bbb      	ldrb	r3, [r7, #14]
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fbfd 	bl	80019de <LL_USART_TransmitData8>
        return;
 80021e4:	bf00      	nop
    }
}
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40011000 	.word	0x40011000
 80021f0:	40005000 	.word	0x40005000
 80021f4:	40004400 	.word	0x40004400
 80021f8:	40004800 	.word	0x40004800
 80021fc:	200056a4 	.word	0x200056a4
 8002200:	200056a8 	.word	0x200056a8
 8002204:	200056ac 	.word	0x200056ac
 8002208:	200056b0 	.word	0x200056b0
 800220c:	200056b4 	.word	0x200056b4
 8002210:	200056b8 	.word	0x200056b8
 8002214:	200056bc 	.word	0x200056bc
 8002218:	200056c0 	.word	0x200056c0
 800221c:	200056c4 	.word	0x200056c4
 8002220:	200056c8 	.word	0x200056c8

08002224 <send_packet_init>:
		status_ACKsend_update					// taskFunction;
	}
};

void send_packet_init(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <send_packet_init+0x1c>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
    retryCount = 0;
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <send_packet_init+0x20>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	200057cd 	.word	0x200057cd
 8002244:	200057ce 	.word	0x200057ce

08002248 <set_send_flag>:

void set_send_flag(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
    sendFlag = 1;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <set_send_flag+0x14>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	200057cd 	.word	0x200057cd

08002260 <clear_send_flag>:

void clear_send_flag(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002264:	4b03      	ldr	r3, [pc, #12]	@ (8002274 <clear_send_flag+0x14>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	200057cd 	.word	0x200057cd

08002278 <set_fsp_packet>:


void set_fsp_packet(uint8_t *encoded_pkt, uint8_t encoded_len)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
	while (g_pkt_lock);
 8002284:	bf00      	nop
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <set_fsp_packet+0x58>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1fa      	bne.n	8002286 <set_fsp_packet+0xe>
	g_pkt_lock = 1;
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <set_fsp_packet+0x58>)
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
	memset((void *)g_encoded_pkt, 0, sizeof(g_encoded_pkt));
 8002296:	22ff      	movs	r2, #255	@ 0xff
 8002298:	2100      	movs	r1, #0
 800229a:	480e      	ldr	r0, [pc, #56]	@ (80022d4 <set_fsp_packet+0x5c>)
 800229c:	f00d fe27 	bl	800feee <memset>
    memcpy((void *)g_encoded_pkt, encoded_pkt, encoded_len);
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	461a      	mov	r2, r3
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	480b      	ldr	r0, [pc, #44]	@ (80022d4 <set_fsp_packet+0x5c>)
 80022a8:	f00d fea1 	bl	800ffee <memcpy>
    g_encoded_len = encoded_len;
 80022ac:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <set_fsp_packet+0x60>)
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	7013      	strb	r3, [r2, #0]
    g_pkt_lock = 0;
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <set_fsp_packet+0x58>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
    sendFlag = 1;
 80022b8:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <set_fsp_packet+0x64>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
    SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);
 80022be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022c2:	2003      	movs	r0, #3
 80022c4:	f009 fd64 	bl	800bd90 <SCH_TIM_Start>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200057cc 	.word	0x200057cc
 80022d4:	200056cc 	.word	0x200056cc
 80022d8:	200057cb 	.word	0x200057cb
 80022dc:	200057cd 	.word	0x200057cd

080022e0 <send_packet_create_task>:

void send_packet_create_task(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&ACKsend_task_context.taskHandle, &ACKsend_task_context.taskProperty);
 80022e4:	4902      	ldr	r1, [pc, #8]	@ (80022f0 <send_packet_create_task+0x10>)
 80022e6:	4803      	ldr	r0, [pc, #12]	@ (80022f4 <send_packet_create_task+0x14>)
 80022e8:	f009 fd7e 	bl	800bde8 <SCH_TASK_CreateTask>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000018 	.word	0x20000018
 80022f4:	20000014 	.word	0x20000014

080022f8 <status_ACKsend_update>:


uint8_t sendBuffer[FSP_PKT_MAX_LENGTH];

void	status_ACKsend_update(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0

			if (SCH_TIM_HasCompleted(SCH_TIM_ACK))
 80022fe:	2003      	movs	r0, #3
 8002300:	f009 fd5c 	bl	800bdbc <SCH_TIM_HasCompleted>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d059      	beq.n	80023be <status_ACKsend_update+0xc6>
			{

			    if (sendFlag)
 800230a:	4b2f      	ldr	r3, [pc, #188]	@ (80023c8 <status_ACKsend_update+0xd0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d04f      	beq.n	80023b4 <status_ACKsend_update+0xbc>
			    {
			    	if(retryCount < MAX_RETRIES){
 8002314:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <status_ACKsend_update+0xd4>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d833      	bhi.n	8002386 <status_ACKsend_update+0x8e>
			    		while (g_pkt_lock);
 800231e:	bf00      	nop
 8002320:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <status_ACKsend_update+0xd8>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1fa      	bne.n	8002320 <status_ACKsend_update+0x28>
			    		g_pkt_lock = 1;
 800232a:	4b29      	ldr	r3, [pc, #164]	@ (80023d0 <status_ACKsend_update+0xd8>)
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
			            memcpy(sendBuffer, (const void *)g_encoded_pkt, g_encoded_len);
 8002330:	4b28      	ldr	r3, [pc, #160]	@ (80023d4 <status_ACKsend_update+0xdc>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	4927      	ldr	r1, [pc, #156]	@ (80023d8 <status_ACKsend_update+0xe0>)
 800233a:	4828      	ldr	r0, [pc, #160]	@ (80023dc <status_ACKsend_update+0xe4>)
 800233c:	f00d fe57 	bl	800ffee <memcpy>
			            for (int i = 0; i < g_encoded_len; i++) {
 8002340:	2300      	movs	r3, #0
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	e00a      	b.n	800235c <status_ACKsend_update+0x64>
			                Uart_write(USART1, sendBuffer[i]);
 8002346:	4a25      	ldr	r2, [pc, #148]	@ (80023dc <status_ACKsend_update+0xe4>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	4823      	ldr	r0, [pc, #140]	@ (80023e0 <status_ACKsend_update+0xe8>)
 8002352:	f7ff fcf9 	bl	8001d48 <Uart_write>
			            for (int i = 0; i < g_encoded_len; i++) {
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3301      	adds	r3, #1
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <status_ACKsend_update+0xdc>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4293      	cmp	r3, r2
 8002368:	dbed      	blt.n	8002346 <status_ACKsend_update+0x4e>
			            }
						retryCount++;
 800236a:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <status_ACKsend_update+0xd4>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <status_ACKsend_update+0xd4>)
 8002376:	701a      	strb	r2, [r3, #0]
						sendFlag = 1;
 8002378:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <status_ACKsend_update+0xd0>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
						g_pkt_lock = 0;
 800237e:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <status_ACKsend_update+0xd8>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e016      	b.n	80023b4 <status_ACKsend_update+0xbc>
			    	}
			    	else {
			    		retryCount = 0;
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <status_ACKsend_update+0xd4>)
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
			    		clear_send_flag();
 800238c:	f7ff ff68 	bl	8002260 <clear_send_flag>

//			    		Uart_sendstring(UART5, "\nTIMEOUT_NORESPONE");
//			    		Uart_sendstring(UART5, "\r\n> ");
			    		Uart_sendstring(UART4, "\nTIMEOUT_NORESPONE");
 8002390:	4914      	ldr	r1, [pc, #80]	@ (80023e4 <status_ACKsend_update+0xec>)
 8002392:	4815      	ldr	r0, [pc, #84]	@ (80023e8 <status_ACKsend_update+0xf0>)
 8002394:	f7ff fe22 	bl	8001fdc <Uart_sendstring>
			    		Uart_sendstring(UART4, "\r\n> ");
 8002398:	4914      	ldr	r1, [pc, #80]	@ (80023ec <status_ACKsend_update+0xf4>)
 800239a:	4813      	ldr	r0, [pc, #76]	@ (80023e8 <status_ACKsend_update+0xf0>)
 800239c:	f7ff fe1e 	bl	8001fdc <Uart_sendstring>
			    		Uart_sendstring(USART2, "\nTIMEOUT_NORESPONE");
 80023a0:	4910      	ldr	r1, [pc, #64]	@ (80023e4 <status_ACKsend_update+0xec>)
 80023a2:	4813      	ldr	r0, [pc, #76]	@ (80023f0 <status_ACKsend_update+0xf8>)
 80023a4:	f7ff fe1a 	bl	8001fdc <Uart_sendstring>
			    		Uart_sendstring(USART2, "\r\n> ");
 80023a8:	4910      	ldr	r1, [pc, #64]	@ (80023ec <status_ACKsend_update+0xf4>)
 80023aa:	4811      	ldr	r0, [pc, #68]	@ (80023f0 <status_ACKsend_update+0xf8>)
 80023ac:	f7ff fe16 	bl	8001fdc <Uart_sendstring>
			    		clear_send_flag();
 80023b0:	f7ff ff56 	bl	8002260 <clear_send_flag>
			        }


			    }

				SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);	//restart
 80023b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023b8:	2003      	movs	r0, #3
 80023ba:	f009 fce9 	bl	800bd90 <SCH_TIM_Start>

			}


		//	[set trang thai]
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200057cd 	.word	0x200057cd
 80023cc:	200057ce 	.word	0x200057ce
 80023d0:	200057cc 	.word	0x200057cc
 80023d4:	200057cb 	.word	0x200057cb
 80023d8:	200056cc 	.word	0x200056cc
 80023dc:	200057d0 	.word	0x200057d0
 80023e0:	40011000 	.word	0x40011000
 80023e4:	080135c0 	.word	0x080135c0
 80023e8:	40004c00 	.word	0x40004c00
 80023ec:	080135d4 	.word	0x080135d4
 80023f0:	40004400 	.word	0x40004400

080023f4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	619a      	str	r2, [r3, #24]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <IOU_create_task>:
};



void IOU_create_task(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&IOU_task_context.taskHandle, &IOU_task_context.taskProperty);
 8002414:	4906      	ldr	r1, [pc, #24]	@ (8002430 <IOU_create_task+0x20>)
 8002416:	4807      	ldr	r0, [pc, #28]	@ (8002434 <IOU_create_task+0x24>)
 8002418:	f009 fce6 	bl	800bde8 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 800241c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002420:	2007      	movs	r0, #7
 8002422:	f009 fcb5 	bl	800bd90 <SCH_TIM_Start>
    Ringbuf_init();
 8002426:	f7ff fae9 	bl	80019fc <Ringbuf_init>
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000034 	.word	0x20000034
 8002434:	20000030 	.word	0x20000030

08002438 <IOU_update_task>:
volatile uint8_t send_rs422 = 0;

volatile uint8_t timeout_counter_iou = 0;


void IOU_update_task(void) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 800243e:	4b41      	ldr	r3, [pc, #260]	@ (8002544 <IOU_update_task+0x10c>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d079      	beq.n	800253c <IOU_update_task+0x104>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_IOU))
 8002448:	2007      	movs	r0, #7
 800244a:	f009 fcb7 	bl	800bdbc <SCH_TIM_HasCompleted>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d073      	beq.n	800253c <IOU_update_task+0x104>
		{

			if(!sendFlag){
 8002454:	4b3c      	ldr	r3, [pc, #240]	@ (8002548 <IOU_update_task+0x110>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d16e      	bne.n	800253c <IOU_update_task+0x104>
				if(!send_rs422){
 800245e:	4b3b      	ldr	r3, [pc, #236]	@ (800254c <IOU_update_task+0x114>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d130      	bne.n	80024ca <IOU_update_task+0x92>
					if(receive_pduFlag&&receive_pmuFlag){
 8002468:	4b39      	ldr	r3, [pc, #228]	@ (8002550 <IOU_update_task+0x118>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d02b      	beq.n	80024ca <IOU_update_task+0x92>
 8002472:	4b38      	ldr	r3, [pc, #224]	@ (8002554 <IOU_update_task+0x11c>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d026      	beq.n	80024ca <IOU_update_task+0x92>
						switch_board(3);
 800247c:	2003      	movs	r0, #3
 800247e:	f005 fbb5 	bl	8007bec <switch_board>
						Uart_flush(USART1);
 8002482:	4835      	ldr	r0, [pc, #212]	@ (8002558 <IOU_update_task+0x120>)
 8002484:	f7ff fdc2 	bl	800200c <Uart_flush>

						frame = iou_frame;
 8002488:	4b34      	ldr	r3, [pc, #208]	@ (800255c <IOU_update_task+0x124>)
 800248a:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(iou_frame);
 800248c:	2309      	movs	r3, #9
 800248e:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e00a      	b.n	80024ac <IOU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4619      	mov	r1, r3
 80024a0:	482d      	ldr	r0, [pc, #180]	@ (8002558 <IOU_update_task+0x120>)
 80024a2:	f7ff fc51 	bl	8001d48 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3301      	adds	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	dbf0      	blt.n	8002496 <IOU_update_task+0x5e>
						}
						receive_iouFlag = 0;
 80024b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002560 <IOU_update_task+0x128>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80024ba:	4b24      	ldr	r3, [pc, #144]	@ (800254c <IOU_update_task+0x114>)
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 80024c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024c4:	2007      	movs	r0, #7
 80024c6:	f009 fc63 	bl	800bd90 <SCH_TIM_Start>
					}
				}
				if(!receive_iouFlag){
 80024ca:	4b25      	ldr	r3, [pc, #148]	@ (8002560 <IOU_update_task+0x128>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d133      	bne.n	800253c <IOU_update_task+0x104>
					timeout_counter_iou++;
 80024d4:	4b23      	ldr	r3, [pc, #140]	@ (8002564 <IOU_update_task+0x12c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <IOU_update_task+0x12c>)
 80024e0:	701a      	strb	r2, [r3, #0]
					if (timeout_counter_iou > 2){
 80024e2:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <IOU_update_task+0x12c>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d927      	bls.n	800253c <IOU_update_task+0x104>
						disconnect_counter_iou++;
 80024ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <IOU_update_task+0x130>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <IOU_update_task+0x130>)
 80024f8:	701a      	strb	r2, [r3, #0]
						timeout_counter_iou = 0;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <IOU_update_task+0x12c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
						receive_iouFlag = 1;
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <IOU_update_task+0x128>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
						send_rs422 = 0;
 8002506:	4b11      	ldr	r3, [pc, #68]	@ (800254c <IOU_update_task+0x114>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
						if(disconnect_counter_iou> 4){
 800250c:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <IOU_update_task+0x130>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b04      	cmp	r3, #4
 8002514:	d912      	bls.n	800253c <IOU_update_task+0x104>
							disconnect_counter_iou = 5;
 8002516:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <IOU_update_task+0x130>)
 8002518:	2205      	movs	r2, #5
 800251a:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 35; i++) {
 800251c:	2301      	movs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	e009      	b.n	8002536 <IOU_update_task+0xfe>
								nextBuffer[i + 7] = 0xFF; //42   =  35  + 7      8 -> pay 1   9 -> pay2    43 -< pay35
 8002522:	4b12      	ldr	r3, [pc, #72]	@ (800256c <IOU_update_task+0x134>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3307      	adds	r3, #7
 800252a:	4413      	add	r3, r2
 800252c:	22ff      	movs	r2, #255	@ 0xff
 800252e:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 35; i++) {
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	3301      	adds	r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b23      	cmp	r3, #35	@ 0x23
 800253a:	ddf2      	ble.n	8002522 <IOU_update_task+0xea>
					}
				}
			}
		}
	}
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200059fd 	.word	0x200059fd
 8002548:	200057cd 	.word	0x200057cd
 800254c:	200058d2 	.word	0x200058d2
 8002550:	20000040 	.word	0x20000040
 8002554:	20000041 	.word	0x20000041
 8002558:	40011000 	.word	0x40011000
 800255c:	20000024 	.word	0x20000024
 8002560:	20000042 	.word	0x20000042
 8002564:	200058d3 	.word	0x200058d3
 8002568:	200058cf 	.word	0x200058cf
 800256c:	200003fc 	.word	0x200003fc

08002570 <Cmd_iou_set_temp>:

volatile uint8_t uart_choose_uart5 = 0;
volatile uint8_t uart_choose_usart2 = 0;

int Cmd_iou_set_temp(int argc, char *argv[])
{
 8002570:	b580      	push	{r7, lr}
 8002572:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002576:	af02      	add	r7, sp, #8
 8002578:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800257c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002580:	6018      	str	r0, [r3, #0]
 8002582:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002586:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800258a:	6019      	str	r1, [r3, #0]


    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 800258c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002590:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b03      	cmp	r3, #3
 8002598:	dc01      	bgt.n	800259e <Cmd_iou_set_temp+0x2e>
 800259a:	2303      	movs	r3, #3
 800259c:	e0e4      	b.n	8002768 <Cmd_iou_set_temp+0x1f8>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 800259e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025a2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	dd01      	ble.n	80025b0 <Cmd_iou_set_temp+0x40>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e0db      	b.n	8002768 <Cmd_iou_set_temp+0x1f8>

    uint8_t channel = atoi(argv[1]);
 80025b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025b4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3304      	adds	r3, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f00c fc7a 	bl	800eeb8 <atoi>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80025ca:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d901      	bls.n	80025d6 <Cmd_iou_set_temp+0x66>
 80025d2:	2304      	movs	r3, #4
 80025d4:	e0c8      	b.n	8002768 <Cmd_iou_set_temp+0x1f8>

    uint16_t temp = atoi(argv[2]);
 80025d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025da:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3308      	adds	r3, #8
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f00c fc67 	bl	800eeb8 <atoi>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (temp > 500)    return CMDLINE_INVALID_ARG;
 80025f0:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80025f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025f8:	d901      	bls.n	80025fe <Cmd_iou_set_temp+0x8e>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e0b4      	b.n	8002768 <Cmd_iou_set_temp+0x1f8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80025fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002602:	485c      	ldr	r0, [pc, #368]	@ (8002774 <Cmd_iou_set_temp+0x204>)
 8002604:	f7ff fef6 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002608:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800260c:	4859      	ldr	r0, [pc, #356]	@ (8002774 <Cmd_iou_set_temp+0x204>)
 800260e:	f7ff fef1 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002612:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002616:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002620:	3b01      	subs	r3, #1
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002628:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	4413      	add	r3, r2
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002636:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800263a:	4a4f      	ldr	r2, [pc, #316]	@ (8002778 <Cmd_iou_set_temp+0x208>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d103      	bne.n	8002648 <Cmd_iou_set_temp+0xd8>
    	uart_choose_uart5 = 1;
 8002640:	4b4e      	ldr	r3, [pc, #312]	@ (800277c <Cmd_iou_set_temp+0x20c>)
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e002      	b.n	800264e <Cmd_iou_set_temp+0xde>
    }else{
    	uart_choose_uart5 = 0;
 8002648:	4b4c      	ldr	r3, [pc, #304]	@ (800277c <Cmd_iou_set_temp+0x20c>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800264e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002652:	4a4b      	ldr	r2, [pc, #300]	@ (8002780 <Cmd_iou_set_temp+0x210>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d103      	bne.n	8002660 <Cmd_iou_set_temp+0xf0>
    	uart_choose_usart2 = 1;
 8002658:	4b4a      	ldr	r3, [pc, #296]	@ (8002784 <Cmd_iou_set_temp+0x214>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e002      	b.n	8002666 <Cmd_iou_set_temp+0xf6>
    }else{
    	uart_choose_usart2 = 0;
 8002660:	4b48      	ldr	r3, [pc, #288]	@ (8002784 <Cmd_iou_set_temp+0x214>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
    }

    // Create the command payload
    uint8_t cmd  = CMD_CODE_SET_TEMP;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0]  = channel;
 800266c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002670:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(temp >> 8);   //high
 8002674:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	b29b      	uxth	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(temp & 0xFF); //low
 8002682:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    fsp_packet_t  fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800268c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002690:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002694:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2301      	movs	r3, #1
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2305      	movs	r3, #5
 80026a0:	2203      	movs	r2, #3
 80026a2:	f009 fd4d 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80026a6:	f107 020f 	add.w	r2, r7, #15
 80026aa:	f107 0110 	add.w	r1, r7, #16
 80026ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026b2:	4618      	mov	r0, r3
 80026b4:	f009 fdca 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 80026b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026bc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02c      	beq.n	8002720 <Cmd_iou_set_temp+0x1b0>
        for (int i = 0; i < frame_len; i++) {
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80026cc:	e010      	b.n	80026f0 <Cmd_iou_set_temp+0x180>
            Uart_write(USART1, encoded_frame[i]);
 80026ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026d2:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80026d6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4829      	ldr	r0, [pc, #164]	@ (8002788 <Cmd_iou_set_temp+0x218>)
 80026e2:	f7ff fb31 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80026e6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026ea:	3301      	adds	r3, #1
 80026ec:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80026f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026f4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002700:	4293      	cmp	r3, r2
 8002702:	dbe4      	blt.n	80026ce <Cmd_iou_set_temp+0x15e>

        }
        set_fsp_packet(encoded_frame, frame_len);
 8002704:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002708:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fdaf 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 800271a:	f7ff fd95 	bl	8002248 <set_send_flag>
 800271e:	e022      	b.n	8002766 <Cmd_iou_set_temp+0x1f6>
    }else{
    	fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002720:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002724:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002728:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	2301      	movs	r3, #1
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2305      	movs	r3, #5
 8002734:	2203      	movs	r2, #3
 8002736:	f009 fd03 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
    	frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800273a:	f107 020f 	add.w	r2, r7, #15
 800273e:	f107 0110 	add.w	r1, r7, #16
 8002742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002746:	4618      	mov	r0, r3
 8002748:	f009 fd80 	bl	800c24c <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 800274c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002750:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002754:	781a      	ldrb	r2, [r3, #0]
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fd8b 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8002762:	f7ff fd71 	bl	8002248 <set_send_flag>
//  ==>>>> khi gui thi mo cong ra, + delay vai ms -> Set co`
//	==>>>> Neu vay thi luon luon mo cong, khi mà nhắn bên 1 2 3 4, nhắn bên 1 thì mở luôn bên 1
//	==>>>> Nhắn bên 2 thì mở luôn bên 2 nếu mà chưa nhận được ack -> busy please wait (processing...)
//  ==>>>> Đoạn đấy bỏ vào trong timeout -> Sau đó mới hiện ok, hoặc done gì đó

    return CMDLINE_PENDING;
 8002766:	2305      	movs	r3, #5
}
 8002768:	4618      	mov	r0, r3
 800276a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40020000 	.word	0x40020000
 8002778:	40005000 	.word	0x40005000
 800277c:	200058d4 	.word	0x200058d4
 8002780:	40004400 	.word	0x40004400
 8002784:	200058d5 	.word	0x200058d5
 8002788:	40011000 	.word	0x40011000

0800278c <Cmd_iou_get_temp>:


int Cmd_iou_get_temp(int argc, char *argv[])
{
 800278c:	b580      	push	{r7, lr}
 800278e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002792:	af02      	add	r7, sp, #8
 8002794:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002798:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800279c:	6018      	str	r0, [r3, #0]
 800279e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027a2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80027a6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80027a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027ac:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	dc01      	bgt.n	80027ba <Cmd_iou_get_temp+0x2e>
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0db      	b.n	8002972 <Cmd_iou_get_temp+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80027ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027be:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	dd01      	ble.n	80027cc <Cmd_iou_get_temp+0x40>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e0d2      	b.n	8002972 <Cmd_iou_get_temp+0x1e6>


    uint8_t sensor = atoi(argv[1]);
 80027cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027d0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3304      	adds	r3, #4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f00c fb6c 	bl	800eeb8 <atoi>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (sensor > 1)    return CMDLINE_INVALID_ARG;
 80027e6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d901      	bls.n	80027f2 <Cmd_iou_get_temp+0x66>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e0bf      	b.n	8002972 <Cmd_iou_get_temp+0x1e6>

    uint8_t channel = atoi(argv[2]);
 80027f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027f6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3308      	adds	r3, #8
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f00c fb59 	bl	800eeb8 <atoi>
 8002806:	4603      	mov	r3, r0
 8002808:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800280c:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002810:	2b03      	cmp	r3, #3
 8002812:	d901      	bls.n	8002818 <Cmd_iou_get_temp+0x8c>
 8002814:	2304      	movs	r3, #4
 8002816:	e0ac      	b.n	8002972 <Cmd_iou_get_temp+0x1e6>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002818:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800281c:	4857      	ldr	r0, [pc, #348]	@ (800297c <Cmd_iou_get_temp+0x1f0>)
 800281e:	f7ff fde9 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002822:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002826:	4855      	ldr	r0, [pc, #340]	@ (800297c <Cmd_iou_get_temp+0x1f0>)
 8002828:	f7ff fde4 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800282c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002830:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800283a:	3b01      	subs	r3, #1
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002842:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	4413      	add	r3, r2
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002850:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002854:	4a4a      	ldr	r2, [pc, #296]	@ (8002980 <Cmd_iou_get_temp+0x1f4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d103      	bne.n	8002862 <Cmd_iou_get_temp+0xd6>
    	uart_choose_uart5 = 1;
 800285a:	4b4a      	ldr	r3, [pc, #296]	@ (8002984 <Cmd_iou_get_temp+0x1f8>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e002      	b.n	8002868 <Cmd_iou_get_temp+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8002862:	4b48      	ldr	r3, [pc, #288]	@ (8002984 <Cmd_iou_get_temp+0x1f8>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002868:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800286c:	4a46      	ldr	r2, [pc, #280]	@ (8002988 <Cmd_iou_get_temp+0x1fc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d103      	bne.n	800287a <Cmd_iou_get_temp+0xee>
    	uart_choose_usart2 = 1;
 8002872:	4b46      	ldr	r3, [pc, #280]	@ (800298c <Cmd_iou_get_temp+0x200>)
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	e002      	b.n	8002880 <Cmd_iou_get_temp+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 800287a:	4b44      	ldr	r3, [pc, #272]	@ (800298c <Cmd_iou_get_temp+0x200>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_GET_TEMP;
 8002880:	2302      	movs	r3, #2
 8002882:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];


    payload[0] = sensor;
 8002886:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800288a:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1] = channel;
 800288e:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002892:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002896:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800289a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800289e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	2301      	movs	r3, #1
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2305      	movs	r3, #5
 80028aa:	2202      	movs	r2, #2
 80028ac:	f009 fc48 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80028b0:	f107 020f 	add.w	r2, r7, #15
 80028b4:	f107 0110 	add.w	r1, r7, #16
 80028b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028bc:	4618      	mov	r0, r3
 80028be:	f009 fcc5 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 80028c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028c6:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d02c      	beq.n	800292a <Cmd_iou_get_temp+0x19e>
        for (int i = 0; i < frame_len; i++) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80028d6:	e010      	b.n	80028fa <Cmd_iou_get_temp+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 80028d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028dc:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80028e0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80028e4:	4413      	add	r3, r2
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4829      	ldr	r0, [pc, #164]	@ (8002990 <Cmd_iou_get_temp+0x204>)
 80028ec:	f7ff fa2c 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80028f0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80028f4:	3301      	adds	r3, #1
 80028f6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80028fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028fe:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800290a:	4293      	cmp	r3, r2
 800290c:	dbe4      	blt.n	80028d8 <Cmd_iou_get_temp+0x14c>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800290e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002912:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fcaa 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002924:	f7ff fc90 	bl	8002248 <set_send_flag>
 8002928:	e022      	b.n	8002970 <Cmd_iou_get_temp+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800292a:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800292e:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002932:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2301      	movs	r3, #1
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2305      	movs	r3, #5
 800293e:	2202      	movs	r2, #2
 8002940:	f009 fbfe 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002944:	f107 020f 	add.w	r2, r7, #15
 8002948:	f107 0110 	add.w	r1, r7, #16
 800294c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002950:	4618      	mov	r0, r3
 8002952:	f009 fc7b 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002956:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800295a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800295e:	781a      	ldrb	r2, [r3, #0]
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fc86 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 800296c:	f7ff fc6c 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002970:	2305      	movs	r3, #5
}
 8002972:	4618      	mov	r0, r3
 8002974:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40020000 	.word	0x40020000
 8002980:	40005000 	.word	0x40005000
 8002984:	200058d4 	.word	0x200058d4
 8002988:	40004400 	.word	0x40004400
 800298c:	200058d5 	.word	0x200058d5
 8002990:	40011000 	.word	0x40011000

08002994 <Cmd_iou_temp_setpoint>:

int Cmd_iou_temp_setpoint(int argc, char *argv[])
{
 8002994:	b580      	push	{r7, lr}
 8002996:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800299a:	af02      	add	r7, sp, #8
 800299c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029a0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029a4:	6018      	str	r0, [r3, #0]
 80029a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029aa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80029ae:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80029b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	dc01      	bgt.n	80029c2 <Cmd_iou_temp_setpoint+0x2e>
 80029be:	2303      	movs	r3, #3
 80029c0:	e0c4      	b.n	8002b4c <Cmd_iou_temp_setpoint+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80029c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029c6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	dd01      	ble.n	80029d4 <Cmd_iou_temp_setpoint+0x40>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e0bb      	b.n	8002b4c <Cmd_iou_temp_setpoint+0x1b8>
    uint8_t channel = atoi(argv[1]);
 80029d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029d8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3304      	adds	r3, #4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f00c fa68 	bl	800eeb8 <atoi>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80029ee:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d901      	bls.n	80029fa <Cmd_iou_temp_setpoint+0x66>
 80029f6:	2304      	movs	r3, #4
 80029f8:	e0a8      	b.n	8002b4c <Cmd_iou_temp_setpoint+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80029fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029fe:	4856      	ldr	r0, [pc, #344]	@ (8002b58 <Cmd_iou_temp_setpoint+0x1c4>)
 8002a00:	f7ff fcf8 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002a04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a08:	4853      	ldr	r0, [pc, #332]	@ (8002b58 <Cmd_iou_temp_setpoint+0x1c4>)
 8002a0a:	f7ff fcf3 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002a0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a12:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002a24:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002a32:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002a36:	4a49      	ldr	r2, [pc, #292]	@ (8002b5c <Cmd_iou_temp_setpoint+0x1c8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d103      	bne.n	8002a44 <Cmd_iou_temp_setpoint+0xb0>
    	uart_choose_uart5 = 1;
 8002a3c:	4b48      	ldr	r3, [pc, #288]	@ (8002b60 <Cmd_iou_temp_setpoint+0x1cc>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e002      	b.n	8002a4a <Cmd_iou_temp_setpoint+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002a44:	4b46      	ldr	r3, [pc, #280]	@ (8002b60 <Cmd_iou_temp_setpoint+0x1cc>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002a4a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002a4e:	4a45      	ldr	r2, [pc, #276]	@ (8002b64 <Cmd_iou_temp_setpoint+0x1d0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d103      	bne.n	8002a5c <Cmd_iou_temp_setpoint+0xc8>
    	uart_choose_usart2 = 1;
 8002a54:	4b44      	ldr	r3, [pc, #272]	@ (8002b68 <Cmd_iou_temp_setpoint+0x1d4>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e002      	b.n	8002a62 <Cmd_iou_temp_setpoint+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002a5c:	4b42      	ldr	r3, [pc, #264]	@ (8002b68 <Cmd_iou_temp_setpoint+0x1d4>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEMP_SETPOINT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002a68:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002a6c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002a70:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002a74:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002a78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	2301      	movs	r3, #1
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2305      	movs	r3, #5
 8002a84:	2201      	movs	r2, #1
 8002a86:	f009 fb5b 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002a8a:	f107 020f 	add.w	r2, r7, #15
 8002a8e:	f107 0110 	add.w	r1, r7, #16
 8002a92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a96:	4618      	mov	r0, r3
 8002a98:	f009 fbd8 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 8002a9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002aa0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d02c      	beq.n	8002b04 <Cmd_iou_temp_setpoint+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ab0:	e010      	b.n	8002ad4 <Cmd_iou_temp_setpoint+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002ab2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ab6:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002aba:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002abe:	4413      	add	r3, r2
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4829      	ldr	r0, [pc, #164]	@ (8002b6c <Cmd_iou_temp_setpoint+0x1d8>)
 8002ac6:	f7ff f93f 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002aca:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ad4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ad8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	dbe4      	blt.n	8002ab2 <Cmd_iou_temp_setpoint+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002ae8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002aec:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	f107 0310 	add.w	r3, r7, #16
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fbbd 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002afe:	f7ff fba3 	bl	8002248 <set_send_flag>
 8002b02:	e022      	b.n	8002b4a <Cmd_iou_temp_setpoint+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002b04:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002b08:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002b0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	2301      	movs	r3, #1
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2305      	movs	r3, #5
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f009 fb11 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002b1e:	f107 020f 	add.w	r2, r7, #15
 8002b22:	f107 0110 	add.w	r1, r7, #16
 8002b26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f009 fb8e 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002b30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b34:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fb99 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002b46:	f7ff fb7f 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002b4a:	2305      	movs	r3, #5
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40005000 	.word	0x40005000
 8002b60:	200058d4 	.word	0x200058d4
 8002b64:	40004400 	.word	0x40004400
 8002b68:	200058d5 	.word	0x200058d5
 8002b6c:	40011000 	.word	0x40011000

08002b70 <Cmd_iou_tec_ena>:

int Cmd_iou_tec_ena(int argc, char *argv[])
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002b76:	af02      	add	r7, sp, #8
 8002b78:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b7c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b80:	6018      	str	r0, [r3, #0]
 8002b82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b86:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002b8a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002b8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b90:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	dc01      	bgt.n	8002b9e <Cmd_iou_tec_ena+0x2e>
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0c4      	b.n	8002d28 <Cmd_iou_tec_ena+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002b9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ba2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	dd01      	ble.n	8002bb0 <Cmd_iou_tec_ena+0x40>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e0bb      	b.n	8002d28 <Cmd_iou_tec_ena+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002bb0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bb4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f00c f97a 	bl	800eeb8 <atoi>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002bca:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d901      	bls.n	8002bd6 <Cmd_iou_tec_ena+0x66>
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	e0a8      	b.n	8002d28 <Cmd_iou_tec_ena+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002bd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bda:	4856      	ldr	r0, [pc, #344]	@ (8002d34 <Cmd_iou_tec_ena+0x1c4>)
 8002bdc:	f7ff fc0a 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002be0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002be4:	4853      	ldr	r0, [pc, #332]	@ (8002d34 <Cmd_iou_tec_ena+0x1c4>)
 8002be6:	f7ff fc05 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002bea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bee:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002c00:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002c0e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002c12:	4a49      	ldr	r2, [pc, #292]	@ (8002d38 <Cmd_iou_tec_ena+0x1c8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d103      	bne.n	8002c20 <Cmd_iou_tec_ena+0xb0>
    	uart_choose_uart5 = 1;
 8002c18:	4b48      	ldr	r3, [pc, #288]	@ (8002d3c <Cmd_iou_tec_ena+0x1cc>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	e002      	b.n	8002c26 <Cmd_iou_tec_ena+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002c20:	4b46      	ldr	r3, [pc, #280]	@ (8002d3c <Cmd_iou_tec_ena+0x1cc>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002c26:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002c2a:	4a45      	ldr	r2, [pc, #276]	@ (8002d40 <Cmd_iou_tec_ena+0x1d0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d103      	bne.n	8002c38 <Cmd_iou_tec_ena+0xc8>
    	uart_choose_usart2 = 1;
 8002c30:	4b44      	ldr	r3, [pc, #272]	@ (8002d44 <Cmd_iou_tec_ena+0x1d4>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e002      	b.n	8002c3e <Cmd_iou_tec_ena+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002c38:	4b42      	ldr	r3, [pc, #264]	@ (8002d44 <Cmd_iou_tec_ena+0x1d4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_ENA;
 8002c3e:	2304      	movs	r3, #4
 8002c40:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002c44:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002c48:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002c4c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002c50:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002c54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	2305      	movs	r3, #5
 8002c60:	2201      	movs	r2, #1
 8002c62:	f009 fa6d 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002c66:	f107 020f 	add.w	r2, r7, #15
 8002c6a:	f107 0110 	add.w	r1, r7, #16
 8002c6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c72:	4618      	mov	r0, r3
 8002c74:	f009 faea 	bl	800c24c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002c78:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c7c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d02c      	beq.n	8002ce0 <Cmd_iou_tec_ena+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002c8c:	e010      	b.n	8002cb0 <Cmd_iou_tec_ena+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002c8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c92:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002c96:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002c9a:	4413      	add	r3, r2
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4829      	ldr	r0, [pc, #164]	@ (8002d48 <Cmd_iou_tec_ena+0x1d8>)
 8002ca2:	f7ff f851 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002ca6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002caa:	3301      	adds	r3, #1
 8002cac:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002cb0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cb4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	dbe4      	blt.n	8002c8e <Cmd_iou_tec_ena+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002cc4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cc8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	f107 0310 	add.w	r3, r7, #16
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff facf 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002cda:	f7ff fab5 	bl	8002248 <set_send_flag>
 8002cde:	e022      	b.n	8002d26 <Cmd_iou_tec_ena+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002ce0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002ce4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002ce8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	2301      	movs	r3, #1
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f009 fa23 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002cfa:	f107 020f 	add.w	r2, r7, #15
 8002cfe:	f107 0110 	add.w	r1, r7, #16
 8002d02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d06:	4618      	mov	r0, r3
 8002d08:	f009 faa0 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002d0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d10:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	f107 0310 	add.w	r3, r7, #16
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff faab 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002d22:	f7ff fa91 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002d26:	2305      	movs	r3, #5
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40005000 	.word	0x40005000
 8002d3c:	200058d4 	.word	0x200058d4
 8002d40:	40004400 	.word	0x40004400
 8002d44:	200058d5 	.word	0x200058d5
 8002d48:	40011000 	.word	0x40011000

08002d4c <Cmd_iou_tec_dis>:

int Cmd_iou_tec_dis(int argc, char *argv[])
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002d52:	af02      	add	r7, sp, #8
 8002d54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d58:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d5c:	6018      	str	r0, [r3, #0]
 8002d5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d62:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002d66:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002d68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d6c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	dc01      	bgt.n	8002d7a <Cmd_iou_tec_dis+0x2e>
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0c4      	b.n	8002f04 <Cmd_iou_tec_dis+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002d7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d7e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	dd01      	ble.n	8002d8c <Cmd_iou_tec_dis+0x40>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e0bb      	b.n	8002f04 <Cmd_iou_tec_dis+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002d8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d90:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3304      	adds	r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f00c f88c 	bl	800eeb8 <atoi>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002da6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d901      	bls.n	8002db2 <Cmd_iou_tec_dis+0x66>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e0a8      	b.n	8002f04 <Cmd_iou_tec_dis+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002db2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002db6:	4856      	ldr	r0, [pc, #344]	@ (8002f10 <Cmd_iou_tec_dis+0x1c4>)
 8002db8:	f7ff fb1c 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002dbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002dc0:	4853      	ldr	r0, [pc, #332]	@ (8002f10 <Cmd_iou_tec_dis+0x1c4>)
 8002dc2:	f7ff fb17 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002dc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002dca:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002ddc:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002dea:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002dee:	4a49      	ldr	r2, [pc, #292]	@ (8002f14 <Cmd_iou_tec_dis+0x1c8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d103      	bne.n	8002dfc <Cmd_iou_tec_dis+0xb0>
    	uart_choose_uart5 = 1;
 8002df4:	4b48      	ldr	r3, [pc, #288]	@ (8002f18 <Cmd_iou_tec_dis+0x1cc>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e002      	b.n	8002e02 <Cmd_iou_tec_dis+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002dfc:	4b46      	ldr	r3, [pc, #280]	@ (8002f18 <Cmd_iou_tec_dis+0x1cc>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002e02:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002e06:	4a45      	ldr	r2, [pc, #276]	@ (8002f1c <Cmd_iou_tec_dis+0x1d0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d103      	bne.n	8002e14 <Cmd_iou_tec_dis+0xc8>
    	uart_choose_usart2 = 1;
 8002e0c:	4b44      	ldr	r3, [pc, #272]	@ (8002f20 <Cmd_iou_tec_dis+0x1d4>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	e002      	b.n	8002e1a <Cmd_iou_tec_dis+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002e14:	4b42      	ldr	r3, [pc, #264]	@ (8002f20 <Cmd_iou_tec_dis+0x1d4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_TEC_DIS;
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002e20:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002e24:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002e28:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002e2c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002e30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	2301      	movs	r3, #1
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f009 f97f 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002e42:	f107 020f 	add.w	r2, r7, #15
 8002e46:	f107 0110 	add.w	r1, r7, #16
 8002e4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f009 f9fc 	bl	800c24c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002e54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e58:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d02c      	beq.n	8002ebc <Cmd_iou_tec_dis+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002e68:	e010      	b.n	8002e8c <Cmd_iou_tec_dis+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002e6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e6e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002e72:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e76:	4413      	add	r3, r2
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4829      	ldr	r0, [pc, #164]	@ (8002f24 <Cmd_iou_tec_dis+0x1d8>)
 8002e7e:	f7fe ff63 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002e82:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e86:	3301      	adds	r3, #1
 8002e88:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002e8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e90:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	dbe4      	blt.n	8002e6a <Cmd_iou_tec_dis+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002ea0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ea4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	f107 0310 	add.w	r3, r7, #16
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff f9e1 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002eb6:	f7ff f9c7 	bl	8002248 <set_send_flag>
 8002eba:	e022      	b.n	8002f02 <Cmd_iou_tec_dis+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002ebc:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002ec0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002ec4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2301      	movs	r3, #1
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2305      	movs	r3, #5
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f009 f935 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002ed6:	f107 020f 	add.w	r2, r7, #15
 8002eda:	f107 0110 	add.w	r1, r7, #16
 8002ede:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f009 f9b2 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002ee8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002eec:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ef0:	781a      	ldrb	r2, [r3, #0]
 8002ef2:	f107 0310 	add.w	r3, r7, #16
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff f9bd 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002efe:	f7ff f9a3 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002f02:	2305      	movs	r3, #5
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40020000 	.word	0x40020000
 8002f14:	40005000 	.word	0x40005000
 8002f18:	200058d4 	.word	0x200058d4
 8002f1c:	40004400 	.word	0x40004400
 8002f20:	200058d5 	.word	0x200058d5
 8002f24:	40011000 	.word	0x40011000

08002f28 <Cmd_iou_tec_ena_auto>:

int Cmd_iou_tec_ena_auto(int argc, char *argv[])
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002f2e:	af02      	add	r7, sp, #8
 8002f30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f34:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f38:	6018      	str	r0, [r3, #0]
 8002f3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f3e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f42:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002f44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f48:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	dc01      	bgt.n	8002f56 <Cmd_iou_tec_ena_auto+0x2e>
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0c4      	b.n	80030e0 <Cmd_iou_tec_ena_auto+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002f56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f5a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	dd01      	ble.n	8002f68 <Cmd_iou_tec_ena_auto+0x40>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e0bb      	b.n	80030e0 <Cmd_iou_tec_ena_auto+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002f68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f6c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3304      	adds	r3, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f00b ff9e 	bl	800eeb8 <atoi>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002f82:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d901      	bls.n	8002f8e <Cmd_iou_tec_ena_auto+0x66>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e0a8      	b.n	80030e0 <Cmd_iou_tec_ena_auto+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002f8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f92:	4856      	ldr	r0, [pc, #344]	@ (80030ec <Cmd_iou_tec_ena_auto+0x1c4>)
 8002f94:	f7ff fa2e 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f9c:	4853      	ldr	r0, [pc, #332]	@ (80030ec <Cmd_iou_tec_ena_auto+0x1c4>)
 8002f9e:	f7ff fa29 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002fa2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002fa6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002fb8:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002fc6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002fca:	4a49      	ldr	r2, [pc, #292]	@ (80030f0 <Cmd_iou_tec_ena_auto+0x1c8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d103      	bne.n	8002fd8 <Cmd_iou_tec_ena_auto+0xb0>
    	uart_choose_uart5 = 1;
 8002fd0:	4b48      	ldr	r3, [pc, #288]	@ (80030f4 <Cmd_iou_tec_ena_auto+0x1cc>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e002      	b.n	8002fde <Cmd_iou_tec_ena_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002fd8:	4b46      	ldr	r3, [pc, #280]	@ (80030f4 <Cmd_iou_tec_ena_auto+0x1cc>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002fde:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002fe2:	4a45      	ldr	r2, [pc, #276]	@ (80030f8 <Cmd_iou_tec_ena_auto+0x1d0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d103      	bne.n	8002ff0 <Cmd_iou_tec_ena_auto+0xc8>
    	uart_choose_usart2 = 1;
 8002fe8:	4b44      	ldr	r3, [pc, #272]	@ (80030fc <Cmd_iou_tec_ena_auto+0x1d4>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e002      	b.n	8002ff6 <Cmd_iou_tec_ena_auto+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002ff0:	4b42      	ldr	r3, [pc, #264]	@ (80030fc <Cmd_iou_tec_ena_auto+0x1d4>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_ENA_AUTO;
 8002ff6:	2306      	movs	r3, #6
 8002ff8:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002ffc:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003000:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003004:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003008:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800300c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	2301      	movs	r3, #1
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2305      	movs	r3, #5
 8003018:	2201      	movs	r2, #1
 800301a:	f009 f891 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800301e:	f107 020f 	add.w	r2, r7, #15
 8003022:	f107 0110 	add.w	r1, r7, #16
 8003026:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800302a:	4618      	mov	r0, r3
 800302c:	f009 f90e 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 8003030:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003034:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d02c      	beq.n	8003098 <Cmd_iou_tec_ena_auto+0x170>
        for (int i = 0; i < frame_len; i++) {
 800303e:	2300      	movs	r3, #0
 8003040:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003044:	e010      	b.n	8003068 <Cmd_iou_tec_ena_auto+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8003046:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800304a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800304e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	4829      	ldr	r0, [pc, #164]	@ (8003100 <Cmd_iou_tec_ena_auto+0x1d8>)
 800305a:	f7fe fe75 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800305e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003062:	3301      	adds	r3, #1
 8003064:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003068:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800306c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003078:	4293      	cmp	r3, r2
 800307a:	dbe4      	blt.n	8003046 <Cmd_iou_tec_ena_auto+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800307c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003080:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	f107 0310 	add.w	r3, r7, #16
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff f8f3 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003092:	f7ff f8d9 	bl	8002248 <set_send_flag>
 8003096:	e022      	b.n	80030de <Cmd_iou_tec_ena_auto+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003098:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800309c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80030a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	2301      	movs	r3, #1
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2305      	movs	r3, #5
 80030ac:	2201      	movs	r2, #1
 80030ae:	f009 f847 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80030b2:	f107 020f 	add.w	r2, r7, #15
 80030b6:	f107 0110 	add.w	r1, r7, #16
 80030ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80030be:	4618      	mov	r0, r3
 80030c0:	f009 f8c4 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80030c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030c8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	f107 0310 	add.w	r3, r7, #16
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff f8cf 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80030da:	f7ff f8b5 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80030de:	2305      	movs	r3, #5
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40005000 	.word	0x40005000
 80030f4:	200058d4 	.word	0x200058d4
 80030f8:	40004400 	.word	0x40004400
 80030fc:	200058d5 	.word	0x200058d5
 8003100:	40011000 	.word	0x40011000

08003104 <Cmd_iou_tec_dis_auto>:

int Cmd_iou_tec_dis_auto(int argc, char *argv[])
{
 8003104:	b580      	push	{r7, lr}
 8003106:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800310a:	af02      	add	r7, sp, #8
 800310c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003110:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003114:	6018      	str	r0, [r3, #0]
 8003116:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800311a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800311e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8003120:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003124:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	dc01      	bgt.n	8003132 <Cmd_iou_tec_dis_auto+0x2e>
 800312e:	2303      	movs	r3, #3
 8003130:	e0c4      	b.n	80032bc <Cmd_iou_tec_dis_auto+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8003132:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003136:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b03      	cmp	r3, #3
 800313e:	dd01      	ble.n	8003144 <Cmd_iou_tec_dis_auto+0x40>
 8003140:	2302      	movs	r3, #2
 8003142:	e0bb      	b.n	80032bc <Cmd_iou_tec_dis_auto+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8003144:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003148:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3304      	adds	r3, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f00b feb0 	bl	800eeb8 <atoi>
 8003158:	4603      	mov	r3, r0
 800315a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800315e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003162:	2b03      	cmp	r3, #3
 8003164:	d901      	bls.n	800316a <Cmd_iou_tec_dis_auto+0x66>
 8003166:	2304      	movs	r3, #4
 8003168:	e0a8      	b.n	80032bc <Cmd_iou_tec_dis_auto+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800316a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800316e:	4856      	ldr	r0, [pc, #344]	@ (80032c8 <Cmd_iou_tec_dis_auto+0x1c4>)
 8003170:	f7ff f940 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003174:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003178:	4853      	ldr	r0, [pc, #332]	@ (80032c8 <Cmd_iou_tec_dis_auto+0x1c4>)
 800317a:	f7ff f93b 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800317e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003182:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800318c:	3b01      	subs	r3, #1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003194:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	4413      	add	r3, r2
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80031a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80031a6:	4a49      	ldr	r2, [pc, #292]	@ (80032cc <Cmd_iou_tec_dis_auto+0x1c8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d103      	bne.n	80031b4 <Cmd_iou_tec_dis_auto+0xb0>
    	uart_choose_uart5 = 1;
 80031ac:	4b48      	ldr	r3, [pc, #288]	@ (80032d0 <Cmd_iou_tec_dis_auto+0x1cc>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e002      	b.n	80031ba <Cmd_iou_tec_dis_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 80031b4:	4b46      	ldr	r3, [pc, #280]	@ (80032d0 <Cmd_iou_tec_dis_auto+0x1cc>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80031ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80031be:	4a45      	ldr	r2, [pc, #276]	@ (80032d4 <Cmd_iou_tec_dis_auto+0x1d0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d103      	bne.n	80031cc <Cmd_iou_tec_dis_auto+0xc8>
    	uart_choose_usart2 = 1;
 80031c4:	4b44      	ldr	r3, [pc, #272]	@ (80032d8 <Cmd_iou_tec_dis_auto+0x1d4>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e002      	b.n	80031d2 <Cmd_iou_tec_dis_auto+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80031cc:	4b42      	ldr	r3, [pc, #264]	@ (80032d8 <Cmd_iou_tec_dis_auto+0x1d4>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_DIS_AUTO;
 80031d2:	2307      	movs	r3, #7
 80031d4:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 80031d8:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80031dc:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80031e0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80031e4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80031e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	2301      	movs	r3, #1
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2305      	movs	r3, #5
 80031f4:	2201      	movs	r2, #1
 80031f6:	f008 ffa3 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80031fa:	f107 020f 	add.w	r2, r7, #15
 80031fe:	f107 0110 	add.w	r1, r7, #16
 8003202:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003206:	4618      	mov	r0, r3
 8003208:	f009 f820 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 800320c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003210:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d02c      	beq.n	8003274 <Cmd_iou_tec_dis_auto+0x170>
        for (int i = 0; i < frame_len; i++) {
 800321a:	2300      	movs	r3, #0
 800321c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003220:	e010      	b.n	8003244 <Cmd_iou_tec_dis_auto+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8003222:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003226:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800322a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800322e:	4413      	add	r3, r2
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	4619      	mov	r1, r3
 8003234:	4829      	ldr	r0, [pc, #164]	@ (80032dc <Cmd_iou_tec_dis_auto+0x1d8>)
 8003236:	f7fe fd87 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800323a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800323e:	3301      	adds	r3, #1
 8003240:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003244:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003248:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003254:	4293      	cmp	r3, r2
 8003256:	dbe4      	blt.n	8003222 <Cmd_iou_tec_dis_auto+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003258:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800325c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003260:	781a      	ldrb	r2, [r3, #0]
 8003262:	f107 0310 	add.w	r3, r7, #16
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff f805 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 800326e:	f7fe ffeb 	bl	8002248 <set_send_flag>
 8003272:	e022      	b.n	80032ba <Cmd_iou_tec_dis_auto+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003274:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003278:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800327c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	2301      	movs	r3, #1
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	2305      	movs	r3, #5
 8003288:	2201      	movs	r2, #1
 800328a:	f008 ff59 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800328e:	f107 020f 	add.w	r2, r7, #15
 8003292:	f107 0110 	add.w	r1, r7, #16
 8003296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800329a:	4618      	mov	r0, r3
 800329c:	f008 ffd6 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80032a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032a4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	f107 0310 	add.w	r3, r7, #16
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe ffe1 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80032b6:	f7fe ffc7 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80032ba:	2305      	movs	r3, #5
}
 80032bc:	4618      	mov	r0, r3
 80032be:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40020000 	.word	0x40020000
 80032cc:	40005000 	.word	0x40005000
 80032d0:	200058d4 	.word	0x200058d4
 80032d4:	40004400 	.word	0x40004400
 80032d8:	200058d5 	.word	0x200058d5
 80032dc:	40011000 	.word	0x40011000

080032e0 <Cmd_iou_tec_set_output>:


int Cmd_iou_tec_set_output(int argc, char *argv[])
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80032e6:	af02      	add	r7, sp, #8
 80032e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032ec:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032f0:	6018      	str	r0, [r3, #0]
 80032f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032f6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80032fa:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 4) return CMDLINE_TOO_FEW_ARGS;
 80032fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003300:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b04      	cmp	r3, #4
 8003308:	dc01      	bgt.n	800330e <Cmd_iou_tec_set_output+0x2e>
 800330a:	2303      	movs	r3, #3
 800330c:	e0fb      	b.n	8003506 <Cmd_iou_tec_set_output+0x226>
    if ((argc-1) > 4) return CMDLINE_TOO_MANY_ARGS;
 800330e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003312:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b05      	cmp	r3, #5
 800331a:	dd01      	ble.n	8003320 <Cmd_iou_tec_set_output+0x40>
 800331c:	2302      	movs	r3, #2
 800331e:	e0f2      	b.n	8003506 <Cmd_iou_tec_set_output+0x226>
    uint8_t channel = atoi(argv[1]);
 8003320:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003324:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3304      	adds	r3, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f00b fdc2 	bl	800eeb8 <atoi>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800333a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800333e:	2b03      	cmp	r3, #3
 8003340:	d901      	bls.n	8003346 <Cmd_iou_tec_set_output+0x66>
 8003342:	2304      	movs	r3, #4
 8003344:	e0df      	b.n	8003506 <Cmd_iou_tec_set_output+0x226>

    uint8_t mode = atoi(argv[2]);
 8003346:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800334a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3308      	adds	r3, #8
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f00b fdaf 	bl	800eeb8 <atoi>
 800335a:	4603      	mov	r3, r0
 800335c:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (mode > 1)    return CMDLINE_INVALID_ARG;
 8003360:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003364:	2b01      	cmp	r3, #1
 8003366:	d901      	bls.n	800336c <Cmd_iou_tec_set_output+0x8c>
 8003368:	2304      	movs	r3, #4
 800336a:	e0cc      	b.n	8003506 <Cmd_iou_tec_set_output+0x226>

    uint16_t vol = atoi(argv[3]);
 800336c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003370:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f00b fd9c 	bl	800eeb8 <atoi>
 8003380:	4603      	mov	r3, r0
 8003382:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 8003386:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800338a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800338e:	d901      	bls.n	8003394 <Cmd_iou_tec_set_output+0xb4>
 8003390:	2304      	movs	r3, #4
 8003392:	e0b8      	b.n	8003506 <Cmd_iou_tec_set_output+0x226>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003394:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003398:	485d      	ldr	r0, [pc, #372]	@ (8003510 <Cmd_iou_tec_set_output+0x230>)
 800339a:	f7ff f82b 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800339e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033a2:	485b      	ldr	r0, [pc, #364]	@ (8003510 <Cmd_iou_tec_set_output+0x230>)
 80033a4:	f7ff f826 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80033a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033ac:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033b6:	3b01      	subs	r3, #1
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80033be:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80033cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80033d0:	4a50      	ldr	r2, [pc, #320]	@ (8003514 <Cmd_iou_tec_set_output+0x234>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d103      	bne.n	80033de <Cmd_iou_tec_set_output+0xfe>
    	uart_choose_uart5 = 1;
 80033d6:	4b50      	ldr	r3, [pc, #320]	@ (8003518 <Cmd_iou_tec_set_output+0x238>)
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e002      	b.n	80033e4 <Cmd_iou_tec_set_output+0x104>
    }else{
    	uart_choose_uart5 = 0;
 80033de:	4b4e      	ldr	r3, [pc, #312]	@ (8003518 <Cmd_iou_tec_set_output+0x238>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80033e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80033e8:	4a4c      	ldr	r2, [pc, #304]	@ (800351c <Cmd_iou_tec_set_output+0x23c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d103      	bne.n	80033f6 <Cmd_iou_tec_set_output+0x116>
    	uart_choose_usart2 = 1;
 80033ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003520 <Cmd_iou_tec_set_output+0x240>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	e002      	b.n	80033fc <Cmd_iou_tec_set_output+0x11c>
    }else{
    	uart_choose_usart2 = 0;
 80033f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003520 <Cmd_iou_tec_set_output+0x240>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_SET_OUTPUT;
 80033fc:	2308      	movs	r3, #8
 80033fe:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];
    payload[0] = channel;
 8003402:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003406:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1] = mode;
 800340a:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 800340e:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(vol >> 8);   //high
 8003412:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	b29b      	uxth	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(vol & 0xFF); //low
 8003420:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800342a:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800342e:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003432:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2301      	movs	r3, #1
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2305      	movs	r3, #5
 800343e:	2204      	movs	r2, #4
 8003440:	f008 fe7e 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003444:	f107 020b 	add.w	r2, r7, #11
 8003448:	f107 010c 	add.w	r1, r7, #12
 800344c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003450:	4618      	mov	r0, r3
 8003452:	f008 fefb 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 8003456:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800345a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d02c      	beq.n	80034be <Cmd_iou_tec_set_output+0x1de>
        for (int i = 0; i < frame_len; i++) {
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800346a:	e010      	b.n	800348e <Cmd_iou_tec_set_output+0x1ae>
            Uart_write(USART1, encoded_frame[i]);
 800346c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003470:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003474:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003478:	4413      	add	r3, r2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	4829      	ldr	r0, [pc, #164]	@ (8003524 <Cmd_iou_tec_set_output+0x244>)
 8003480:	f7fe fc62 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003484:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003488:	3301      	adds	r3, #1
 800348a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800348e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003492:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800349e:	4293      	cmp	r3, r2
 80034a0:	dbe4      	blt.n	800346c <Cmd_iou_tec_set_output+0x18c>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80034a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034a6:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fee0 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80034b8:	f7fe fec6 	bl	8002248 <set_send_flag>
 80034bc:	e022      	b.n	8003504 <Cmd_iou_tec_set_output+0x224>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80034be:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80034c2:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80034c6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	2301      	movs	r3, #1
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2305      	movs	r3, #5
 80034d2:	2204      	movs	r2, #4
 80034d4:	f008 fe34 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80034d8:	f107 020b 	add.w	r2, r7, #11
 80034dc:	f107 010c 	add.w	r1, r7, #12
 80034e0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80034e4:	4618      	mov	r0, r3
 80034e6:	f008 feb1 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80034ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034ee:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80034f2:	781a      	ldrb	r2, [r3, #0]
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe febc 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003500:	f7fe fea2 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003504:	2305      	movs	r3, #5
}
 8003506:	4618      	mov	r0, r3
 8003508:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40020000 	.word	0x40020000
 8003514:	40005000 	.word	0x40005000
 8003518:	200058d4 	.word	0x200058d4
 800351c:	40004400 	.word	0x40004400
 8003520:	200058d5 	.word	0x200058d5
 8003524:	40011000 	.word	0x40011000

08003528 <Cmd_iou_tec_auto_vol>:

int Cmd_iou_tec_auto_vol(int argc, char *argv[])
{
 8003528:	b580      	push	{r7, lr}
 800352a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800352e:	af02      	add	r7, sp, #8
 8003530:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003534:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003538:	6018      	str	r0, [r3, #0]
 800353a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800353e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003542:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8003544:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003548:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b03      	cmp	r3, #3
 8003550:	dc01      	bgt.n	8003556 <Cmd_iou_tec_auto_vol+0x2e>
 8003552:	2303      	movs	r3, #3
 8003554:	e0e4      	b.n	8003720 <Cmd_iou_tec_auto_vol+0x1f8>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8003556:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800355a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b04      	cmp	r3, #4
 8003562:	dd01      	ble.n	8003568 <Cmd_iou_tec_auto_vol+0x40>
 8003564:	2302      	movs	r3, #2
 8003566:	e0db      	b.n	8003720 <Cmd_iou_tec_auto_vol+0x1f8>
    uint8_t channel = atoi(argv[1]);
 8003568:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800356c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3304      	adds	r3, #4
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f00b fc9e 	bl	800eeb8 <atoi>
 800357c:	4603      	mov	r3, r0
 800357e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8003582:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003586:	2b03      	cmp	r3, #3
 8003588:	d901      	bls.n	800358e <Cmd_iou_tec_auto_vol+0x66>
 800358a:	2304      	movs	r3, #4
 800358c:	e0c8      	b.n	8003720 <Cmd_iou_tec_auto_vol+0x1f8>

    uint16_t vol = atoi(argv[2]);
 800358e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003592:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3308      	adds	r3, #8
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f00b fc8b 	bl	800eeb8 <atoi>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 80035a8:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80035ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80035b0:	d901      	bls.n	80035b6 <Cmd_iou_tec_auto_vol+0x8e>
 80035b2:	2304      	movs	r3, #4
 80035b4:	e0b4      	b.n	8003720 <Cmd_iou_tec_auto_vol+0x1f8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80035b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80035ba:	485c      	ldr	r0, [pc, #368]	@ (800372c <Cmd_iou_tec_auto_vol+0x204>)
 80035bc:	f7fe ff1a 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80035c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035c4:	4859      	ldr	r0, [pc, #356]	@ (800372c <Cmd_iou_tec_auto_vol+0x204>)
 80035c6:	f7fe ff15 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80035ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035ce:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035d8:	3b01      	subs	r3, #1
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80035e0:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80035ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80035f2:	4a4f      	ldr	r2, [pc, #316]	@ (8003730 <Cmd_iou_tec_auto_vol+0x208>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <Cmd_iou_tec_auto_vol+0xd8>
    	uart_choose_uart5 = 1;
 80035f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003734 <Cmd_iou_tec_auto_vol+0x20c>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e002      	b.n	8003606 <Cmd_iou_tec_auto_vol+0xde>
    }else{
    	uart_choose_uart5 = 0;
 8003600:	4b4c      	ldr	r3, [pc, #304]	@ (8003734 <Cmd_iou_tec_auto_vol+0x20c>)
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003606:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800360a:	4a4b      	ldr	r2, [pc, #300]	@ (8003738 <Cmd_iou_tec_auto_vol+0x210>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d103      	bne.n	8003618 <Cmd_iou_tec_auto_vol+0xf0>
    	uart_choose_usart2 = 1;
 8003610:	4b4a      	ldr	r3, [pc, #296]	@ (800373c <Cmd_iou_tec_auto_vol+0x214>)
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e002      	b.n	800361e <Cmd_iou_tec_auto_vol+0xf6>
    }else{
    	uart_choose_usart2 = 0;
 8003618:	4b48      	ldr	r3, [pc, #288]	@ (800373c <Cmd_iou_tec_auto_vol+0x214>)
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_AUTO_VOL;
 800361e:	2309      	movs	r3, #9
 8003620:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0] = channel;
 8003624:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003628:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(vol >> 8);   //high
 800362c:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	b29b      	uxth	r3, r3
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(vol & 0xFF); //low
 800363a:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003644:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003648:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800364c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	2301      	movs	r3, #1
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	2305      	movs	r3, #5
 8003658:	2203      	movs	r2, #3
 800365a:	f008 fd71 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800365e:	f107 020f 	add.w	r2, r7, #15
 8003662:	f107 0110 	add.w	r1, r7, #16
 8003666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800366a:	4618      	mov	r0, r3
 800366c:	f008 fdee 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 8003670:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003674:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d02c      	beq.n	80036d8 <Cmd_iou_tec_auto_vol+0x1b0>
        for (int i = 0; i < frame_len; i++) {
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003684:	e010      	b.n	80036a8 <Cmd_iou_tec_auto_vol+0x180>
            Uart_write(USART1, encoded_frame[i]);
 8003686:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800368a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800368e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003692:	4413      	add	r3, r2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	4619      	mov	r1, r3
 8003698:	4829      	ldr	r0, [pc, #164]	@ (8003740 <Cmd_iou_tec_auto_vol+0x218>)
 800369a:	f7fe fb55 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800369e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80036a2:	3301      	adds	r3, #1
 80036a4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80036a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036ac:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80036b8:	4293      	cmp	r3, r2
 80036ba:	dbe4      	blt.n	8003686 <Cmd_iou_tec_auto_vol+0x15e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80036bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036c0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	f107 0310 	add.w	r3, r7, #16
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fdd3 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80036d2:	f7fe fdb9 	bl	8002248 <set_send_flag>
 80036d6:	e022      	b.n	800371e <Cmd_iou_tec_auto_vol+0x1f6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80036d8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80036dc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80036e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2301      	movs	r3, #1
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2305      	movs	r3, #5
 80036ec:	2203      	movs	r2, #3
 80036ee:	f008 fd27 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80036f2:	f107 020f 	add.w	r2, r7, #15
 80036f6:	f107 0110 	add.w	r1, r7, #16
 80036fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80036fe:	4618      	mov	r0, r3
 8003700:	f008 fda4 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003704:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003708:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800370c:	781a      	ldrb	r2, [r3, #0]
 800370e:	f107 0310 	add.w	r3, r7, #16
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f7fe fdaf 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 800371a:	f7fe fd95 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800371e:	2305      	movs	r3, #5
}
 8003720:	4618      	mov	r0, r3
 8003722:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40020000 	.word	0x40020000
 8003730:	40005000 	.word	0x40005000
 8003734:	200058d4 	.word	0x200058d4
 8003738:	40004400 	.word	0x40004400
 800373c:	200058d5 	.word	0x200058d5
 8003740:	40011000 	.word	0x40011000

08003744 <Cmd_iou_tec_status>:

int Cmd_iou_tec_status(int argc, char *argv[])
{
 8003744:	b580      	push	{r7, lr}
 8003746:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800374a:	af00      	add	r7, sp, #0
 800374c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003750:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003754:	6018      	str	r0, [r3, #0]
 8003756:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800375a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800375e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003760:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003764:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b01      	cmp	r3, #1
 800376c:	dc01      	bgt.n	8003772 <Cmd_iou_tec_status+0x2e>
 800376e:	2303      	movs	r3, #3
 8003770:	e0a3      	b.n	80038ba <Cmd_iou_tec_status+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003772:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003776:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b02      	cmp	r3, #2
 800377e:	dd01      	ble.n	8003784 <Cmd_iou_tec_status+0x40>
 8003780:	2302      	movs	r3, #2
 8003782:	e09a      	b.n	80038ba <Cmd_iou_tec_status+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003784:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003788:	484e      	ldr	r0, [pc, #312]	@ (80038c4 <Cmd_iou_tec_status+0x180>)
 800378a:	f7fe fe33 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800378e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003792:	484c      	ldr	r0, [pc, #304]	@ (80038c4 <Cmd_iou_tec_status+0x180>)
 8003794:	f7fe fe2e 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003798:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800379c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037a6:	3b01      	subs	r3, #1
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80037ae:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80037bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80037c0:	4a41      	ldr	r2, [pc, #260]	@ (80038c8 <Cmd_iou_tec_status+0x184>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d103      	bne.n	80037ce <Cmd_iou_tec_status+0x8a>
    	uart_choose_uart5 = 1;
 80037c6:	4b41      	ldr	r3, [pc, #260]	@ (80038cc <Cmd_iou_tec_status+0x188>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e002      	b.n	80037d4 <Cmd_iou_tec_status+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80037ce:	4b3f      	ldr	r3, [pc, #252]	@ (80038cc <Cmd_iou_tec_status+0x188>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80037d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80037d8:	4a3d      	ldr	r2, [pc, #244]	@ (80038d0 <Cmd_iou_tec_status+0x18c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d103      	bne.n	80037e6 <Cmd_iou_tec_status+0xa2>
    	uart_choose_usart2 = 1;
 80037de:	4b3d      	ldr	r3, [pc, #244]	@ (80038d4 <Cmd_iou_tec_status+0x190>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e002      	b.n	80037ec <Cmd_iou_tec_status+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80037e6:	4b3b      	ldr	r3, [pc, #236]	@ (80038d4 <Cmd_iou_tec_status+0x190>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_STATUS;
 80037ec:	230a      	movs	r3, #10
 80037ee:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80037f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037f6:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80037fa:	2201      	movs	r2, #1
 80037fc:	2105      	movs	r1, #5
 80037fe:	f008 fc77 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003802:	f107 020f 	add.w	r2, r7, #15
 8003806:	f107 0110 	add.w	r1, r7, #16
 800380a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800380e:	4618      	mov	r0, r3
 8003810:	f008 fd1c 	bl	800c24c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003814:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003818:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d02c      	beq.n	800387c <Cmd_iou_tec_status+0x138>
        for (int i = 0; i < frame_len; i++) {
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003828:	e010      	b.n	800384c <Cmd_iou_tec_status+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800382a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800382e:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003832:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003836:	4413      	add	r3, r2
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4619      	mov	r1, r3
 800383c:	4826      	ldr	r0, [pc, #152]	@ (80038d8 <Cmd_iou_tec_status+0x194>)
 800383e:	f7fe fa83 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003842:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003846:	3301      	adds	r3, #1
 8003848:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800384c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003850:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800385c:	4293      	cmp	r3, r2
 800385e:	dbe4      	blt.n	800382a <Cmd_iou_tec_status+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003860:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003864:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	f107 0310 	add.w	r3, r7, #16
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe fd01 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003876:	f7fe fce7 	bl	8002248 <set_send_flag>
 800387a:	e01d      	b.n	80038b8 <Cmd_iou_tec_status+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800387c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003880:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003884:	2201      	movs	r2, #1
 8003886:	2105      	movs	r1, #5
 8003888:	f008 fc32 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800388c:	f107 020f 	add.w	r2, r7, #15
 8003890:	f107 0110 	add.w	r1, r7, #16
 8003894:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003898:	4618      	mov	r0, r3
 800389a:	f008 fcd7 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800389e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038a2:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	f107 0310 	add.w	r3, r7, #16
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fce2 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80038b4:	f7fe fcc8 	bl	8002248 <set_send_flag>
    }
    return CMDLINE_PENDING;
 80038b8:	2305      	movs	r3, #5
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40020000 	.word	0x40020000
 80038c8:	40005000 	.word	0x40005000
 80038cc:	200058d4 	.word	0x200058d4
 80038d0:	40004400 	.word	0x40004400
 80038d4:	200058d5 	.word	0x200058d5
 80038d8:	40011000 	.word	0x40011000

080038dc <Cmd_iou_tec_log_ena>:

int Cmd_iou_tec_log_ena(int argc, char *argv[])
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038e8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80038ec:	6018      	str	r0, [r3, #0]
 80038ee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038f2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80038f6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80038f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038fc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	dc01      	bgt.n	800390a <Cmd_iou_tec_log_ena+0x2e>
 8003906:	2303      	movs	r3, #3
 8003908:	e0a3      	b.n	8003a52 <Cmd_iou_tec_log_ena+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800390a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800390e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b02      	cmp	r3, #2
 8003916:	dd01      	ble.n	800391c <Cmd_iou_tec_log_ena+0x40>
 8003918:	2302      	movs	r3, #2
 800391a:	e09a      	b.n	8003a52 <Cmd_iou_tec_log_ena+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800391c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003920:	484e      	ldr	r0, [pc, #312]	@ (8003a5c <Cmd_iou_tec_log_ena+0x180>)
 8003922:	f7fe fd67 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003926:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800392a:	484c      	ldr	r0, [pc, #304]	@ (8003a5c <Cmd_iou_tec_log_ena+0x180>)
 800392c:	f7fe fd62 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003930:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003934:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800393e:	3b01      	subs	r3, #1
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003946:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	4413      	add	r3, r2
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003954:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003958:	4a41      	ldr	r2, [pc, #260]	@ (8003a60 <Cmd_iou_tec_log_ena+0x184>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d103      	bne.n	8003966 <Cmd_iou_tec_log_ena+0x8a>
    	uart_choose_uart5 = 1;
 800395e:	4b41      	ldr	r3, [pc, #260]	@ (8003a64 <Cmd_iou_tec_log_ena+0x188>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e002      	b.n	800396c <Cmd_iou_tec_log_ena+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003966:	4b3f      	ldr	r3, [pc, #252]	@ (8003a64 <Cmd_iou_tec_log_ena+0x188>)
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800396c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003970:	4a3d      	ldr	r2, [pc, #244]	@ (8003a68 <Cmd_iou_tec_log_ena+0x18c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d103      	bne.n	800397e <Cmd_iou_tec_log_ena+0xa2>
    	uart_choose_usart2 = 1;
 8003976:	4b3d      	ldr	r3, [pc, #244]	@ (8003a6c <Cmd_iou_tec_log_ena+0x190>)
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	e002      	b.n	8003984 <Cmd_iou_tec_log_ena+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800397e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a6c <Cmd_iou_tec_log_ena+0x190>)
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_LOG_ENA;
 8003984:	230b      	movs	r3, #11
 8003986:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800398a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800398e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003992:	2201      	movs	r2, #1
 8003994:	2105      	movs	r1, #5
 8003996:	f008 fbab 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800399a:	f107 020f 	add.w	r2, r7, #15
 800399e:	f107 0110 	add.w	r1, r7, #16
 80039a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039a6:	4618      	mov	r0, r3
 80039a8:	f008 fc50 	bl	800c24c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80039ac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039b0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d02c      	beq.n	8003a14 <Cmd_iou_tec_log_ena+0x138>
        for (int i = 0; i < frame_len; i++) {
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80039c0:	e010      	b.n	80039e4 <Cmd_iou_tec_log_ena+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80039c2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039c6:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80039ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80039ce:	4413      	add	r3, r2
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	4619      	mov	r1, r3
 80039d4:	4826      	ldr	r0, [pc, #152]	@ (8003a70 <Cmd_iou_tec_log_ena+0x194>)
 80039d6:	f7fe f9b7 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80039da:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80039de:	3301      	adds	r3, #1
 80039e0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80039e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039e8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80039f4:	4293      	cmp	r3, r2
 80039f6:	dbe4      	blt.n	80039c2 <Cmd_iou_tec_log_ena+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80039f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039fc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	f107 0310 	add.w	r3, r7, #16
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fc35 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003a0e:	f7fe fc1b 	bl	8002248 <set_send_flag>
 8003a12:	e01d      	b.n	8003a50 <Cmd_iou_tec_log_ena+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003a14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a18:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	2105      	movs	r1, #5
 8003a20:	f008 fb66 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003a24:	f107 020f 	add.w	r2, r7, #15
 8003a28:	f107 0110 	add.w	r1, r7, #16
 8003a2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a30:	4618      	mov	r0, r3
 8003a32:	f008 fc0b 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003a36:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a3a:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fc16 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003a4c:	f7fe fbfc 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003a50:	2305      	movs	r3, #5
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40020000 	.word	0x40020000
 8003a60:	40005000 	.word	0x40005000
 8003a64:	200058d4 	.word	0x200058d4
 8003a68:	40004400 	.word	0x40004400
 8003a6c:	200058d5 	.word	0x200058d5
 8003a70:	40011000 	.word	0x40011000

08003a74 <Cmd_iou_tec_log_dis>:

int Cmd_iou_tec_log_dis(int argc, char *argv[])
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a80:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003a84:	6018      	str	r0, [r3, #0]
 8003a86:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a8a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003a8e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003a90:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a94:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	dc01      	bgt.n	8003aa2 <Cmd_iou_tec_log_dis+0x2e>
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0a3      	b.n	8003bea <Cmd_iou_tec_log_dis+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003aa2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003aa6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	dd01      	ble.n	8003ab4 <Cmd_iou_tec_log_dis+0x40>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e09a      	b.n	8003bea <Cmd_iou_tec_log_dis+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003ab4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ab8:	484e      	ldr	r0, [pc, #312]	@ (8003bf4 <Cmd_iou_tec_log_dis+0x180>)
 8003aba:	f7fe fc9b 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003abe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ac2:	484c      	ldr	r0, [pc, #304]	@ (8003bf4 <Cmd_iou_tec_log_dis+0x180>)
 8003ac4:	f7fe fc96 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003ac8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003acc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003ade:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003aec:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003af0:	4a41      	ldr	r2, [pc, #260]	@ (8003bf8 <Cmd_iou_tec_log_dis+0x184>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d103      	bne.n	8003afe <Cmd_iou_tec_log_dis+0x8a>
    	uart_choose_uart5 = 1;
 8003af6:	4b41      	ldr	r3, [pc, #260]	@ (8003bfc <Cmd_iou_tec_log_dis+0x188>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	e002      	b.n	8003b04 <Cmd_iou_tec_log_dis+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003afe:	4b3f      	ldr	r3, [pc, #252]	@ (8003bfc <Cmd_iou_tec_log_dis+0x188>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003b04:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003b08:	4a3d      	ldr	r2, [pc, #244]	@ (8003c00 <Cmd_iou_tec_log_dis+0x18c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d103      	bne.n	8003b16 <Cmd_iou_tec_log_dis+0xa2>
    	uart_choose_usart2 = 1;
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c04 <Cmd_iou_tec_log_dis+0x190>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e002      	b.n	8003b1c <Cmd_iou_tec_log_dis+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003b16:	4b3b      	ldr	r3, [pc, #236]	@ (8003c04 <Cmd_iou_tec_log_dis+0x190>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_LOG_DIS;
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003b22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b26:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	2105      	movs	r1, #5
 8003b2e:	f008 fadf 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003b32:	f107 020f 	add.w	r2, r7, #15
 8003b36:	f107 0110 	add.w	r1, r7, #16
 8003b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f008 fb84 	bl	800c24c <frame_encode>

//    SCH_Delay(5);
    if (frame_len > 0) {
 8003b44:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b48:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02c      	beq.n	8003bac <Cmd_iou_tec_log_dis+0x138>
        for (int i = 0; i < frame_len; i++) {
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003b58:	e010      	b.n	8003b7c <Cmd_iou_tec_log_dis+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8003b5a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b5e:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003b62:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003b66:	4413      	add	r3, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4826      	ldr	r0, [pc, #152]	@ (8003c08 <Cmd_iou_tec_log_dis+0x194>)
 8003b6e:	f7fe f8eb 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003b72:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003b76:	3301      	adds	r3, #1
 8003b78:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003b7c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b80:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	dbe4      	blt.n	8003b5a <Cmd_iou_tec_log_dis+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003b90:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b94:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	f107 0310 	add.w	r3, r7, #16
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fb69 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003ba6:	f7fe fb4f 	bl	8002248 <set_send_flag>
 8003baa:	e01d      	b.n	8003be8 <Cmd_iou_tec_log_dis+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003bac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bb0:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	2105      	movs	r1, #5
 8003bb8:	f008 fa9a 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003bbc:	f107 020f 	add.w	r2, r7, #15
 8003bc0:	f107 0110 	add.w	r1, r7, #16
 8003bc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f008 fb3f 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003bce:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003bd2:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	f107 0310 	add.w	r3, r7, #16
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fb4a 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003be4:	f7fe fb30 	bl	8002248 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8003be8:	2305      	movs	r3, #5
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40020000 	.word	0x40020000
 8003bf8:	40005000 	.word	0x40005000
 8003bfc:	200058d4 	.word	0x200058d4
 8003c00:	40004400 	.word	0x40004400
 8003c04:	200058d5 	.word	0x200058d5
 8003c08:	40011000 	.word	0x40011000

08003c0c <Cmd_iou_ringled_setRGB>:

int Cmd_iou_ringled_setRGB(int argc, char *argv[])
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003c12:	af02      	add	r7, sp, #8
 8003c14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c18:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c1c:	6018      	str	r0, [r3, #0]
 8003c1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c22:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c26:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 5) return CMDLINE_TOO_FEW_ARGS;
 8003c28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c2c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	dc01      	bgt.n	8003c3a <Cmd_iou_ringled_setRGB+0x2e>
 8003c36:	2303      	movs	r3, #3
 8003c38:	e0f1      	b.n	8003e1e <Cmd_iou_ringled_setRGB+0x212>
    if ((argc-1) > 5) return CMDLINE_TOO_MANY_ARGS;
 8003c3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c3e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b06      	cmp	r3, #6
 8003c46:	dd01      	ble.n	8003c4c <Cmd_iou_ringled_setRGB+0x40>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e0e8      	b.n	8003e1e <Cmd_iou_ringled_setRGB+0x212>
    uint8_t red = atoi(argv[1]);
 8003c4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c50:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3304      	adds	r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f00b f92c 	bl	800eeb8 <atoi>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (red > 255)    return CMDLINE_INVALID_ARG;
    uint8_t green = atoi(argv[2]);
 8003c66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c6a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3308      	adds	r3, #8
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f00b f91f 	bl	800eeb8 <atoi>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (green > 255)    return CMDLINE_INVALID_ARG;
    uint8_t blue = atoi(argv[3]);
 8003c80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c84:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f00b f912 	bl	800eeb8 <atoi>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
    if (blue > 255)    return CMDLINE_INVALID_ARG;
    uint8_t white = atoi(argv[4]);
 8003c9a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c9e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3310      	adds	r3, #16
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f00b f905 	bl	800eeb8 <atoi>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003cb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003cb8:	485b      	ldr	r0, [pc, #364]	@ (8003e28 <Cmd_iou_ringled_setRGB+0x21c>)
 8003cba:	f7fe fb9b 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003cbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cc2:	4859      	ldr	r0, [pc, #356]	@ (8003e28 <Cmd_iou_ringled_setRGB+0x21c>)
 8003cc4:	f7fe fb96 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003cc8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ccc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003cde:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003cec:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003cf0:	4a4e      	ldr	r2, [pc, #312]	@ (8003e2c <Cmd_iou_ringled_setRGB+0x220>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d103      	bne.n	8003cfe <Cmd_iou_ringled_setRGB+0xf2>
    	uart_choose_uart5 = 1;
 8003cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8003e30 <Cmd_iou_ringled_setRGB+0x224>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	e002      	b.n	8003d04 <Cmd_iou_ringled_setRGB+0xf8>
    }else{
    	uart_choose_uart5 = 0;
 8003cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8003e30 <Cmd_iou_ringled_setRGB+0x224>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003d04:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003d08:	4a4a      	ldr	r2, [pc, #296]	@ (8003e34 <Cmd_iou_ringled_setRGB+0x228>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d103      	bne.n	8003d16 <Cmd_iou_ringled_setRGB+0x10a>
    	uart_choose_usart2 = 1;
 8003d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e38 <Cmd_iou_ringled_setRGB+0x22c>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e002      	b.n	8003d1c <Cmd_iou_ringled_setRGB+0x110>
    }else{
    	uart_choose_usart2 = 0;
 8003d16:	4b48      	ldr	r3, [pc, #288]	@ (8003e38 <Cmd_iou_ringled_setRGB+0x22c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_RINGLED_SETRGB;
 8003d1c:	230d      	movs	r3, #13
 8003d1e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];

    payload[0]  = red; //low
 8003d22:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003d26:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = green; //low
 8003d2a:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003d2e:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = blue; //low
 8003d32:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8003d36:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = white; //low
 8003d3a:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8003d3e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003d42:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003d46:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003d4a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	2301      	movs	r3, #1
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2305      	movs	r3, #5
 8003d56:	2204      	movs	r2, #4
 8003d58:	f008 f9f2 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003d5c:	f107 020b 	add.w	r2, r7, #11
 8003d60:	f107 010c 	add.w	r1, r7, #12
 8003d64:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f008 fa6f 	bl	800c24c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003d6e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d72:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d02c      	beq.n	8003dd6 <Cmd_iou_ringled_setRGB+0x1ca>
        for (int i = 0; i < frame_len; i++) {
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003d82:	e010      	b.n	8003da6 <Cmd_iou_ringled_setRGB+0x19a>
            Uart_write(USART1, encoded_frame[i]);
 8003d84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d88:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003d8c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003d90:	4413      	add	r3, r2
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	4829      	ldr	r0, [pc, #164]	@ (8003e3c <Cmd_iou_ringled_setRGB+0x230>)
 8003d98:	f7fd ffd6 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003d9c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003da0:	3301      	adds	r3, #1
 8003da2:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003da6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003daa:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003db6:	4293      	cmp	r3, r2
 8003db8:	dbe4      	blt.n	8003d84 <Cmd_iou_ringled_setRGB+0x178>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003dba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dbe:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe fa54 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003dd0:	f7fe fa3a 	bl	8002248 <set_send_flag>
 8003dd4:	e022      	b.n	8003e1c <Cmd_iou_ringled_setRGB+0x210>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003dd6:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003dda:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003dde:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	2301      	movs	r3, #1
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2305      	movs	r3, #5
 8003dea:	2204      	movs	r2, #4
 8003dec:	f008 f9a8 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003df0:	f107 020b 	add.w	r2, r7, #11
 8003df4:	f107 010c 	add.w	r1, r7, #12
 8003df8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f008 fa25 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003e02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e06:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	f107 030c 	add.w	r3, r7, #12
 8003e10:	4611      	mov	r1, r2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fa30 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003e18:	f7fe fa16 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003e1c:	2305      	movs	r3, #5
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40020000 	.word	0x40020000
 8003e2c:	40005000 	.word	0x40005000
 8003e30:	200058d4 	.word	0x200058d4
 8003e34:	40004400 	.word	0x40004400
 8003e38:	200058d5 	.word	0x200058d5
 8003e3c:	40011000 	.word	0x40011000

08003e40 <Cmd_iou_ringled_getRGB>:

int Cmd_iou_ringled_getRGB(int argc, char *argv[])
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e4c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e50:	6018      	str	r0, [r3, #0]
 8003e52:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e56:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003e5a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003e5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e60:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	dc01      	bgt.n	8003e6e <Cmd_iou_ringled_getRGB+0x2e>
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0a3      	b.n	8003fb6 <Cmd_iou_ringled_getRGB+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003e6e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e72:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	dd01      	ble.n	8003e80 <Cmd_iou_ringled_getRGB+0x40>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e09a      	b.n	8003fb6 <Cmd_iou_ringled_getRGB+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003e80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e84:	484e      	ldr	r0, [pc, #312]	@ (8003fc0 <Cmd_iou_ringled_getRGB+0x180>)
 8003e86:	f7fe fab5 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003e8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e8e:	484c      	ldr	r0, [pc, #304]	@ (8003fc0 <Cmd_iou_ringled_getRGB+0x180>)
 8003e90:	f7fe fab0 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003e94:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e98:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003eaa:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003eb8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ebc:	4a41      	ldr	r2, [pc, #260]	@ (8003fc4 <Cmd_iou_ringled_getRGB+0x184>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d103      	bne.n	8003eca <Cmd_iou_ringled_getRGB+0x8a>
    	uart_choose_uart5 = 1;
 8003ec2:	4b41      	ldr	r3, [pc, #260]	@ (8003fc8 <Cmd_iou_ringled_getRGB+0x188>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e002      	b.n	8003ed0 <Cmd_iou_ringled_getRGB+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003eca:	4b3f      	ldr	r3, [pc, #252]	@ (8003fc8 <Cmd_iou_ringled_getRGB+0x188>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003ed0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ed4:	4a3d      	ldr	r2, [pc, #244]	@ (8003fcc <Cmd_iou_ringled_getRGB+0x18c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d103      	bne.n	8003ee2 <Cmd_iou_ringled_getRGB+0xa2>
    	uart_choose_usart2 = 1;
 8003eda:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd0 <Cmd_iou_ringled_getRGB+0x190>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
 8003ee0:	e002      	b.n	8003ee8 <Cmd_iou_ringled_getRGB+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd0 <Cmd_iou_ringled_getRGB+0x190>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_RINGLED_GETRGB;
 8003ee8:	230e      	movs	r3, #14
 8003eea:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003eee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003ef2:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	2105      	movs	r1, #5
 8003efa:	f008 f8f9 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003efe:	f107 020f 	add.w	r2, r7, #15
 8003f02:	f107 0110 	add.w	r1, r7, #16
 8003f06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f008 f99e 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 8003f10:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f14:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d02c      	beq.n	8003f78 <Cmd_iou_ringled_getRGB+0x138>
        for (int i = 0; i < frame_len; i++) {
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003f24:	e010      	b.n	8003f48 <Cmd_iou_ringled_getRGB+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8003f26:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f2a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003f2e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f32:	4413      	add	r3, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	4619      	mov	r1, r3
 8003f38:	4826      	ldr	r0, [pc, #152]	@ (8003fd4 <Cmd_iou_ringled_getRGB+0x194>)
 8003f3a:	f7fd ff05 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003f3e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f42:	3301      	adds	r3, #1
 8003f44:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003f48:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f4c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	dbe4      	blt.n	8003f26 <Cmd_iou_ringled_getRGB+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003f5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f60:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	f107 0310 	add.w	r3, r7, #16
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe f983 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003f72:	f7fe f969 	bl	8002248 <set_send_flag>
 8003f76:	e01d      	b.n	8003fb4 <Cmd_iou_ringled_getRGB+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003f78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f7c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003f80:	2201      	movs	r2, #1
 8003f82:	2105      	movs	r1, #5
 8003f84:	f008 f8b4 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003f88:	f107 020f 	add.w	r2, r7, #15
 8003f8c:	f107 0110 	add.w	r1, r7, #16
 8003f90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f94:	4618      	mov	r0, r3
 8003f96:	f008 f959 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003f9a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f9e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003fa2:	781a      	ldrb	r2, [r3, #0]
 8003fa4:	f107 0310 	add.w	r3, r7, #16
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe f964 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003fb0:	f7fe f94a 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003fb4:	2305      	movs	r3, #5
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	40005000 	.word	0x40005000
 8003fc8:	200058d4 	.word	0x200058d4
 8003fcc:	40004400 	.word	0x40004400
 8003fd0:	200058d5 	.word	0x200058d5
 8003fd4:	40011000 	.word	0x40011000

08003fd8 <Cmd_iou_irled_set_bright>:

int Cmd_iou_irled_set_bright(int argc, char *argv[])
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003fde:	af02      	add	r7, sp, #8
 8003fe0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fe4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003fe8:	6018      	str	r0, [r3, #0]
 8003fea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fee:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003ff2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8003ff4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ff8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	dc01      	bgt.n	8004006 <Cmd_iou_irled_set_bright+0x2e>
 8004002:	2303      	movs	r3, #3
 8004004:	e0c4      	b.n	8004190 <Cmd_iou_irled_set_bright+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004006:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800400a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b03      	cmp	r3, #3
 8004012:	dd01      	ble.n	8004018 <Cmd_iou_irled_set_bright+0x40>
 8004014:	2302      	movs	r3, #2
 8004016:	e0bb      	b.n	8004190 <Cmd_iou_irled_set_bright+0x1b8>
    uint8_t percent = atoi(argv[1]);
 8004018:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800401c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3304      	adds	r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f00a ff46 	bl	800eeb8 <atoi>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (percent > 100)    return CMDLINE_INVALID_ARG;
 8004032:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004036:	2b64      	cmp	r3, #100	@ 0x64
 8004038:	d901      	bls.n	800403e <Cmd_iou_irled_set_bright+0x66>
 800403a:	2304      	movs	r3, #4
 800403c:	e0a8      	b.n	8004190 <Cmd_iou_irled_set_bright+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800403e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004042:	4856      	ldr	r0, [pc, #344]	@ (800419c <Cmd_iou_irled_set_bright+0x1c4>)
 8004044:	f7fe f9d6 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004048:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800404c:	4853      	ldr	r0, [pc, #332]	@ (800419c <Cmd_iou_irled_set_bright+0x1c4>)
 800404e:	f7fe f9d1 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004052:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004056:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004060:	3b01      	subs	r3, #1
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004068:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	4413      	add	r3, r2
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004076:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800407a:	4a49      	ldr	r2, [pc, #292]	@ (80041a0 <Cmd_iou_irled_set_bright+0x1c8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d103      	bne.n	8004088 <Cmd_iou_irled_set_bright+0xb0>
    	uart_choose_uart5 = 1;
 8004080:	4b48      	ldr	r3, [pc, #288]	@ (80041a4 <Cmd_iou_irled_set_bright+0x1cc>)
 8004082:	2201      	movs	r2, #1
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	e002      	b.n	800408e <Cmd_iou_irled_set_bright+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004088:	4b46      	ldr	r3, [pc, #280]	@ (80041a4 <Cmd_iou_irled_set_bright+0x1cc>)
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800408e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004092:	4a45      	ldr	r2, [pc, #276]	@ (80041a8 <Cmd_iou_irled_set_bright+0x1d0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <Cmd_iou_irled_set_bright+0xc8>
    	uart_choose_usart2 = 1;
 8004098:	4b44      	ldr	r3, [pc, #272]	@ (80041ac <Cmd_iou_irled_set_bright+0x1d4>)
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e002      	b.n	80040a6 <Cmd_iou_irled_set_bright+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80040a0:	4b42      	ldr	r3, [pc, #264]	@ (80041ac <Cmd_iou_irled_set_bright+0x1d4>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_IRLED_SET_BRIGHT;
 80040a6:	230f      	movs	r3, #15
 80040a8:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];

    payload[0]  = percent; //low
 80040ac:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80040b0:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80040b4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80040b8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80040bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	2301      	movs	r3, #1
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2305      	movs	r3, #5
 80040c8:	2201      	movs	r2, #1
 80040ca:	f008 f839 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80040ce:	f107 020f 	add.w	r2, r7, #15
 80040d2:	f107 0110 	add.w	r1, r7, #16
 80040d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040da:	4618      	mov	r0, r3
 80040dc:	f008 f8b6 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 80040e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040e4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d02c      	beq.n	8004148 <Cmd_iou_irled_set_bright+0x170>
        for (int i = 0; i < frame_len; i++) {
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80040f4:	e010      	b.n	8004118 <Cmd_iou_irled_set_bright+0x140>
            Uart_write(USART1, encoded_frame[i]);
 80040f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040fa:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80040fe:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004102:	4413      	add	r3, r2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	4619      	mov	r1, r3
 8004108:	4829      	ldr	r0, [pc, #164]	@ (80041b0 <Cmd_iou_irled_set_bright+0x1d8>)
 800410a:	f7fd fe1d 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800410e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004112:	3301      	adds	r3, #1
 8004114:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004118:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800411c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004128:	4293      	cmp	r3, r2
 800412a:	dbe4      	blt.n	80040f6 <Cmd_iou_irled_set_bright+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800412c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004130:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004134:	781a      	ldrb	r2, [r3, #0]
 8004136:	f107 0310 	add.w	r3, r7, #16
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe f89b 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004142:	f7fe f881 	bl	8002248 <set_send_flag>
 8004146:	e022      	b.n	800418e <Cmd_iou_irled_set_bright+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004148:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800414c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004150:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	2301      	movs	r3, #1
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	2305      	movs	r3, #5
 800415c:	2201      	movs	r2, #1
 800415e:	f007 ffef 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004162:	f107 020f 	add.w	r2, r7, #15
 8004166:	f107 0110 	add.w	r1, r7, #16
 800416a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800416e:	4618      	mov	r0, r3
 8004170:	f008 f86c 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004174:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004178:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	f107 0310 	add.w	r3, r7, #16
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe f877 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 800418a:	f7fe f85d 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800418e:	2305      	movs	r3, #5
}
 8004190:	4618      	mov	r0, r3
 8004192:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40020000 	.word	0x40020000
 80041a0:	40005000 	.word	0x40005000
 80041a4:	200058d4 	.word	0x200058d4
 80041a8:	40004400 	.word	0x40004400
 80041ac:	200058d5 	.word	0x200058d5
 80041b0:	40011000 	.word	0x40011000

080041b4 <Cmd_iou_irled_get_bright>:

int Cmd_iou_irled_get_bright(int argc, char *argv[])
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041c0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041c4:	6018      	str	r0, [r3, #0]
 80041c6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041ca:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80041ce:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80041d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041d4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	dc01      	bgt.n	80041e2 <Cmd_iou_irled_get_bright+0x2e>
 80041de:	2303      	movs	r3, #3
 80041e0:	e0a3      	b.n	800432a <Cmd_iou_irled_get_bright+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80041e2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041e6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	dd01      	ble.n	80041f4 <Cmd_iou_irled_get_bright+0x40>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e09a      	b.n	800432a <Cmd_iou_irled_get_bright+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80041f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041f8:	484e      	ldr	r0, [pc, #312]	@ (8004334 <Cmd_iou_irled_get_bright+0x180>)
 80041fa:	f7fe f8fb 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80041fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004202:	484c      	ldr	r0, [pc, #304]	@ (8004334 <Cmd_iou_irled_get_bright+0x180>)
 8004204:	f7fe f8f6 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004208:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800420c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004216:	3b01      	subs	r3, #1
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800421e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	4413      	add	r3, r2
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 800422c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004230:	4a41      	ldr	r2, [pc, #260]	@ (8004338 <Cmd_iou_irled_get_bright+0x184>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d103      	bne.n	800423e <Cmd_iou_irled_get_bright+0x8a>
    	uart_choose_uart5 = 1;
 8004236:	4b41      	ldr	r3, [pc, #260]	@ (800433c <Cmd_iou_irled_get_bright+0x188>)
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e002      	b.n	8004244 <Cmd_iou_irled_get_bright+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800423e:	4b3f      	ldr	r3, [pc, #252]	@ (800433c <Cmd_iou_irled_get_bright+0x188>)
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004244:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004248:	4a3d      	ldr	r2, [pc, #244]	@ (8004340 <Cmd_iou_irled_get_bright+0x18c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d103      	bne.n	8004256 <Cmd_iou_irled_get_bright+0xa2>
    	uart_choose_usart2 = 1;
 800424e:	4b3d      	ldr	r3, [pc, #244]	@ (8004344 <Cmd_iou_irled_get_bright+0x190>)
 8004250:	2201      	movs	r2, #1
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e002      	b.n	800425c <Cmd_iou_irled_get_bright+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8004256:	4b3b      	ldr	r3, [pc, #236]	@ (8004344 <Cmd_iou_irled_get_bright+0x190>)
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_IRLED_GET_BRIGHT;
 800425c:	2310      	movs	r3, #16
 800425e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004262:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004266:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800426a:	2201      	movs	r2, #1
 800426c:	2105      	movs	r1, #5
 800426e:	f007 ff3f 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004272:	f107 020f 	add.w	r2, r7, #15
 8004276:	f107 0110 	add.w	r1, r7, #16
 800427a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800427e:	4618      	mov	r0, r3
 8004280:	f007 ffe4 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 8004284:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004288:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d02c      	beq.n	80042ec <Cmd_iou_irled_get_bright+0x138>
        for (int i = 0; i < frame_len; i++) {
 8004292:	2300      	movs	r3, #0
 8004294:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004298:	e010      	b.n	80042bc <Cmd_iou_irled_get_bright+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800429a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800429e:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80042a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80042a6:	4413      	add	r3, r2
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	4619      	mov	r1, r3
 80042ac:	4826      	ldr	r0, [pc, #152]	@ (8004348 <Cmd_iou_irled_get_bright+0x194>)
 80042ae:	f7fd fd4b 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80042b2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80042b6:	3301      	adds	r3, #1
 80042b8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80042bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042c0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80042cc:	4293      	cmp	r3, r2
 80042ce:	dbe4      	blt.n	800429a <Cmd_iou_irled_get_bright+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80042d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042d4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	f107 0310 	add.w	r3, r7, #16
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd ffc9 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80042e6:	f7fd ffaf 	bl	8002248 <set_send_flag>
 80042ea:	e01d      	b.n	8004328 <Cmd_iou_irled_get_bright+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80042ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80042f0:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80042f4:	2201      	movs	r2, #1
 80042f6:	2105      	movs	r1, #5
 80042f8:	f007 fefa 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80042fc:	f107 020f 	add.w	r2, r7, #15
 8004300:	f107 0110 	add.w	r1, r7, #16
 8004304:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004308:	4618      	mov	r0, r3
 800430a:	f007 ff9f 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800430e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004312:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	f107 0310 	add.w	r3, r7, #16
 800431c:	4611      	mov	r1, r2
 800431e:	4618      	mov	r0, r3
 8004320:	f7fd ffaa 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004324:	f7fd ff90 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004328:	2305      	movs	r3, #5
}
 800432a:	4618      	mov	r0, r3
 800432c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40020000 	.word	0x40020000
 8004338:	40005000 	.word	0x40005000
 800433c:	200058d4 	.word	0x200058d4
 8004340:	40004400 	.word	0x40004400
 8004344:	200058d5 	.word	0x200058d5
 8004348:	40011000 	.word	0x40011000

0800434c <Cmd_iou_get_accel>:



int Cmd_iou_get_accel(int argc, char *argv[])
{
 800434c:	b580      	push	{r7, lr}
 800434e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8004352:	af00      	add	r7, sp, #0
 8004354:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004358:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800435c:	6018      	str	r0, [r3, #0]
 800435e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004362:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004366:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8004368:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800436c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b01      	cmp	r3, #1
 8004374:	dc01      	bgt.n	800437a <Cmd_iou_get_accel+0x2e>
 8004376:	2303      	movs	r3, #3
 8004378:	e0a3      	b.n	80044c2 <Cmd_iou_get_accel+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800437a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800437e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b02      	cmp	r3, #2
 8004386:	dd01      	ble.n	800438c <Cmd_iou_get_accel+0x40>
 8004388:	2302      	movs	r3, #2
 800438a:	e09a      	b.n	80044c2 <Cmd_iou_get_accel+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800438c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004390:	484e      	ldr	r0, [pc, #312]	@ (80044cc <Cmd_iou_get_accel+0x180>)
 8004392:	f7fe f82f 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004396:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800439a:	484c      	ldr	r0, [pc, #304]	@ (80044cc <Cmd_iou_get_accel+0x180>)
 800439c:	f7fe f82a 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80043a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80043a4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043ae:	3b01      	subs	r3, #1
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80043b6:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	4413      	add	r3, r2
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80043c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80043c8:	4a41      	ldr	r2, [pc, #260]	@ (80044d0 <Cmd_iou_get_accel+0x184>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d103      	bne.n	80043d6 <Cmd_iou_get_accel+0x8a>
    	uart_choose_uart5 = 1;
 80043ce:	4b41      	ldr	r3, [pc, #260]	@ (80044d4 <Cmd_iou_get_accel+0x188>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	e002      	b.n	80043dc <Cmd_iou_get_accel+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80043d6:	4b3f      	ldr	r3, [pc, #252]	@ (80044d4 <Cmd_iou_get_accel+0x188>)
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80043dc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80043e0:	4a3d      	ldr	r2, [pc, #244]	@ (80044d8 <Cmd_iou_get_accel+0x18c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d103      	bne.n	80043ee <Cmd_iou_get_accel+0xa2>
    	uart_choose_usart2 = 1;
 80043e6:	4b3d      	ldr	r3, [pc, #244]	@ (80044dc <Cmd_iou_get_accel+0x190>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e002      	b.n	80043f4 <Cmd_iou_get_accel+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80043ee:	4b3b      	ldr	r3, [pc, #236]	@ (80044dc <Cmd_iou_get_accel+0x190>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_ACCEL_GYRO;
 80043f4:	2311      	movs	r3, #17
 80043f6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80043fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043fe:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004402:	2201      	movs	r2, #1
 8004404:	2105      	movs	r1, #5
 8004406:	f007 fe73 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800440a:	f107 020f 	add.w	r2, r7, #15
 800440e:	f107 0110 	add.w	r1, r7, #16
 8004412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004416:	4618      	mov	r0, r3
 8004418:	f007 ff18 	bl	800c24c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 800441c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004420:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d02c      	beq.n	8004484 <Cmd_iou_get_accel+0x138>
        for (int i = 0; i < frame_len; i++) {
 800442a:	2300      	movs	r3, #0
 800442c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004430:	e010      	b.n	8004454 <Cmd_iou_get_accel+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8004432:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004436:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800443a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800443e:	4413      	add	r3, r2
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	4619      	mov	r1, r3
 8004444:	4826      	ldr	r0, [pc, #152]	@ (80044e0 <Cmd_iou_get_accel+0x194>)
 8004446:	f7fd fc7f 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800444a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800444e:	3301      	adds	r3, #1
 8004450:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004454:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004458:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004464:	4293      	cmp	r3, r2
 8004466:	dbe4      	blt.n	8004432 <Cmd_iou_get_accel+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8004468:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800446c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004470:	781a      	ldrb	r2, [r3, #0]
 8004472:	f107 0310 	add.w	r3, r7, #16
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f7fd fefd 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 800447e:	f7fd fee3 	bl	8002248 <set_send_flag>
 8004482:	e01d      	b.n	80044c0 <Cmd_iou_get_accel+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004484:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004488:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800448c:	2201      	movs	r2, #1
 800448e:	2105      	movs	r1, #5
 8004490:	f007 fe2e 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004494:	f107 020f 	add.w	r2, r7, #15
 8004498:	f107 0110 	add.w	r1, r7, #16
 800449c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80044a0:	4618      	mov	r0, r3
 80044a2:	f007 fed3 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80044a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80044aa:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80044ae:	781a      	ldrb	r2, [r3, #0]
 80044b0:	f107 0310 	add.w	r3, r7, #16
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fd fede 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80044bc:	f7fd fec4 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80044c0:	2305      	movs	r3, #5
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40020000 	.word	0x40020000
 80044d0:	40005000 	.word	0x40005000
 80044d4:	200058d4 	.word	0x200058d4
 80044d8:	40004400 	.word	0x40004400
 80044dc:	200058d5 	.word	0x200058d5
 80044e0:	40011000 	.word	0x40011000

080044e4 <Cmd_iou_get_press>:

int Cmd_iou_get_press(int argc, char *argv[])
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80044f0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80044f4:	6018      	str	r0, [r3, #0]
 80044f6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80044fa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80044fe:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8004500:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004504:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b01      	cmp	r3, #1
 800450c:	dc01      	bgt.n	8004512 <Cmd_iou_get_press+0x2e>
 800450e:	2303      	movs	r3, #3
 8004510:	e0a3      	b.n	800465a <Cmd_iou_get_press+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8004512:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004516:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b02      	cmp	r3, #2
 800451e:	dd01      	ble.n	8004524 <Cmd_iou_get_press+0x40>
 8004520:	2302      	movs	r3, #2
 8004522:	e09a      	b.n	800465a <Cmd_iou_get_press+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004524:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004528:	484e      	ldr	r0, [pc, #312]	@ (8004664 <Cmd_iou_get_press+0x180>)
 800452a:	f7fd ff63 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800452e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004532:	484c      	ldr	r0, [pc, #304]	@ (8004664 <Cmd_iou_get_press+0x180>)
 8004534:	f7fd ff5e 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004538:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800453c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004546:	3b01      	subs	r3, #1
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800454e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	4413      	add	r3, r2
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 800455c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004560:	4a41      	ldr	r2, [pc, #260]	@ (8004668 <Cmd_iou_get_press+0x184>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d103      	bne.n	800456e <Cmd_iou_get_press+0x8a>
    	uart_choose_uart5 = 1;
 8004566:	4b41      	ldr	r3, [pc, #260]	@ (800466c <Cmd_iou_get_press+0x188>)
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	e002      	b.n	8004574 <Cmd_iou_get_press+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800456e:	4b3f      	ldr	r3, [pc, #252]	@ (800466c <Cmd_iou_get_press+0x188>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004574:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004578:	4a3d      	ldr	r2, [pc, #244]	@ (8004670 <Cmd_iou_get_press+0x18c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d103      	bne.n	8004586 <Cmd_iou_get_press+0xa2>
    	uart_choose_usart2 = 1;
 800457e:	4b3d      	ldr	r3, [pc, #244]	@ (8004674 <Cmd_iou_get_press+0x190>)
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e002      	b.n	800458c <Cmd_iou_get_press+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8004586:	4b3b      	ldr	r3, [pc, #236]	@ (8004674 <Cmd_iou_get_press+0x190>)
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_PRESS;
 800458c:	2312      	movs	r3, #18
 800458e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004596:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800459a:	2201      	movs	r2, #1
 800459c:	2105      	movs	r1, #5
 800459e:	f007 fda7 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80045a2:	f107 020f 	add.w	r2, r7, #15
 80045a6:	f107 0110 	add.w	r1, r7, #16
 80045aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045ae:	4618      	mov	r0, r3
 80045b0:	f007 fe4c 	bl	800c24c <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 80045b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80045b8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d02c      	beq.n	800461c <Cmd_iou_get_press+0x138>
        for (int i = 0; i < frame_len; i++) {
 80045c2:	2300      	movs	r3, #0
 80045c4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80045c8:	e010      	b.n	80045ec <Cmd_iou_get_press+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80045ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80045ce:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80045d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80045d6:	4413      	add	r3, r2
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	4619      	mov	r1, r3
 80045dc:	4826      	ldr	r0, [pc, #152]	@ (8004678 <Cmd_iou_get_press+0x194>)
 80045de:	f7fd fbb3 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80045e2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80045e6:	3301      	adds	r3, #1
 80045e8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80045ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80045f0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80045fc:	4293      	cmp	r3, r2
 80045fe:	dbe4      	blt.n	80045ca <Cmd_iou_get_press+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8004600:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004604:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	f107 0310 	add.w	r3, r7, #16
 800460e:	4611      	mov	r1, r2
 8004610:	4618      	mov	r0, r3
 8004612:	f7fd fe31 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004616:	f7fd fe17 	bl	8002248 <set_send_flag>
 800461a:	e01d      	b.n	8004658 <Cmd_iou_get_press+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800461c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004620:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004624:	2201      	movs	r2, #1
 8004626:	2105      	movs	r1, #5
 8004628:	f007 fd62 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800462c:	f107 020f 	add.w	r2, r7, #15
 8004630:	f107 0110 	add.w	r1, r7, #16
 8004634:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004638:	4618      	mov	r0, r3
 800463a:	f007 fe07 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800463e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004642:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	f107 0310 	add.w	r3, r7, #16
 800464c:	4611      	mov	r1, r2
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd fe12 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004654:	f7fd fdf8 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004658:	2305      	movs	r3, #5
}
 800465a:	4618      	mov	r0, r3
 800465c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40020000 	.word	0x40020000
 8004668:	40005000 	.word	0x40005000
 800466c:	200058d4 	.word	0x200058d4
 8004670:	40004400 	.word	0x40004400
 8004674:	200058d5 	.word	0x200058d5
 8004678:	40011000 	.word	0x40011000

0800467c <Cmd_iou_get_parameters>:


int Cmd_iou_get_parameters(int argc, char *argv[])
{
 800467c:	b580      	push	{r7, lr}
 800467e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8004682:	af00      	add	r7, sp, #0
 8004684:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004688:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800468c:	6018      	str	r0, [r3, #0]
 800468e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004692:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004696:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8004698:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800469c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	dc01      	bgt.n	80046aa <Cmd_iou_get_parameters+0x2e>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0a3      	b.n	80047f2 <Cmd_iou_get_parameters+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80046aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046ae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	dd01      	ble.n	80046bc <Cmd_iou_get_parameters+0x40>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e09a      	b.n	80047f2 <Cmd_iou_get_parameters+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80046bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80046c0:	484e      	ldr	r0, [pc, #312]	@ (80047fc <Cmd_iou_get_parameters+0x180>)
 80046c2:	f7fd fe97 	bl	80023f4 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80046c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046ca:	484c      	ldr	r0, [pc, #304]	@ (80047fc <Cmd_iou_get_parameters+0x180>)
 80046cc:	f7fd fe92 	bl	80023f4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80046d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046d4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046de:	3b01      	subs	r3, #1
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80046e6:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	4413      	add	r3, r2
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80046f4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80046f8:	4a41      	ldr	r2, [pc, #260]	@ (8004800 <Cmd_iou_get_parameters+0x184>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d103      	bne.n	8004706 <Cmd_iou_get_parameters+0x8a>
    	uart_choose_uart5 = 1;
 80046fe:	4b41      	ldr	r3, [pc, #260]	@ (8004804 <Cmd_iou_get_parameters+0x188>)
 8004700:	2201      	movs	r2, #1
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	e002      	b.n	800470c <Cmd_iou_get_parameters+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004706:	4b3f      	ldr	r3, [pc, #252]	@ (8004804 <Cmd_iou_get_parameters+0x188>)
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800470c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004710:	4a3d      	ldr	r2, [pc, #244]	@ (8004808 <Cmd_iou_get_parameters+0x18c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d103      	bne.n	800471e <Cmd_iou_get_parameters+0xa2>
    	uart_choose_usart2 = 1;
 8004716:	4b3d      	ldr	r3, [pc, #244]	@ (800480c <Cmd_iou_get_parameters+0x190>)
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e002      	b.n	8004724 <Cmd_iou_get_parameters+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800471e:	4b3b      	ldr	r3, [pc, #236]	@ (800480c <Cmd_iou_get_parameters+0x190>)
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_PARAMETERS;
 8004724:	2313      	movs	r3, #19
 8004726:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800472a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800472e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004732:	2201      	movs	r2, #1
 8004734:	2105      	movs	r1, #5
 8004736:	f007 fcdb 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800473a:	f107 020f 	add.w	r2, r7, #15
 800473e:	f107 0110 	add.w	r1, r7, #16
 8004742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004746:	4618      	mov	r0, r3
 8004748:	f007 fd80 	bl	800c24c <frame_encode>

  //  SCH_Delay(5);.
    if (frame_len > 0) {
 800474c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004750:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d02c      	beq.n	80047b4 <Cmd_iou_get_parameters+0x138>
        for (int i = 0; i < frame_len; i++) {
 800475a:	2300      	movs	r3, #0
 800475c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004760:	e010      	b.n	8004784 <Cmd_iou_get_parameters+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8004762:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004766:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800476a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800476e:	4413      	add	r3, r2
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	4826      	ldr	r0, [pc, #152]	@ (8004810 <Cmd_iou_get_parameters+0x194>)
 8004776:	f7fd fae7 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800477a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800477e:	3301      	adds	r3, #1
 8004780:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004784:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004788:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004794:	4293      	cmp	r3, r2
 8004796:	dbe4      	blt.n	8004762 <Cmd_iou_get_parameters+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8004798:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800479c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	f107 0310 	add.w	r3, r7, #16
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fd fd65 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80047ae:	f7fd fd4b 	bl	8002248 <set_send_flag>
 80047b2:	e01d      	b.n	80047f0 <Cmd_iou_get_parameters+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80047b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047b8:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80047bc:	2201      	movs	r2, #1
 80047be:	2105      	movs	r1, #5
 80047c0:	f007 fc96 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80047c4:	f107 020f 	add.w	r2, r7, #15
 80047c8:	f107 0110 	add.w	r1, r7, #16
 80047cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047d0:	4618      	mov	r0, r3
 80047d2:	f007 fd3b 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80047d6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80047da:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	f107 0310 	add.w	r3, r7, #16
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd fd46 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80047ec:	f7fd fd2c 	bl	8002248 <set_send_flag>

    }

    return CMDLINE_PENDING;
 80047f0:	2305      	movs	r3, #5
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40020000 	.word	0x40020000
 8004800:	40005000 	.word	0x40005000
 8004804:	200058d4 	.word	0x200058d4
 8004808:	40004400 	.word	0x40004400
 800480c:	200058d5 	.word	0x200058d5
 8004810:	40011000 	.word	0x40011000

08004814 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	041a      	lsls	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	619a      	str	r2, [r3, #24]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <PDU_create_task>:
};



void PDU_create_task(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PDU_task_context.taskHandle, &PDU_task_context.taskProperty);
 8004838:	4906      	ldr	r1, [pc, #24]	@ (8004854 <PDU_create_task+0x20>)
 800483a:	4807      	ldr	r0, [pc, #28]	@ (8004858 <PDU_create_task+0x24>)
 800483c:	f007 fad4 	bl	800bde8 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 8004840:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004844:	2006      	movs	r0, #6
 8004846:	f007 faa3 	bl	800bd90 <SCH_TIM_Start>
    Ringbuf_init();
 800484a:	f7fd f8d7 	bl	80019fc <Ringbuf_init>
}
 800484e:	bf00      	nop
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000054 	.word	0x20000054
 8004858:	20000050 	.word	0x20000050

0800485c <PDU_update_task>:


volatile uint8_t timeout_counter_pdu = 0;

void PDU_update_task(void) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 8004862:	4b41      	ldr	r3, [pc, #260]	@ (8004968 <PDU_update_task+0x10c>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d079      	beq.n	8004960 <PDU_update_task+0x104>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PDU))
 800486c:	2006      	movs	r0, #6
 800486e:	f007 faa5 	bl	800bdbc <SCH_TIM_HasCompleted>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d073      	beq.n	8004960 <PDU_update_task+0x104>
		{

			if(!sendFlag){
 8004878:	4b3c      	ldr	r3, [pc, #240]	@ (800496c <PDU_update_task+0x110>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d16e      	bne.n	8004960 <PDU_update_task+0x104>
				if(!send_rs422){
 8004882:	4b3b      	ldr	r3, [pc, #236]	@ (8004970 <PDU_update_task+0x114>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d130      	bne.n	80048ee <PDU_update_task+0x92>
					if(receive_iouFlag&&receive_pmuFlag){
 800488c:	4b39      	ldr	r3, [pc, #228]	@ (8004974 <PDU_update_task+0x118>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d02b      	beq.n	80048ee <PDU_update_task+0x92>
 8004896:	4b38      	ldr	r3, [pc, #224]	@ (8004978 <PDU_update_task+0x11c>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d026      	beq.n	80048ee <PDU_update_task+0x92>
						switch_board(0);
 80048a0:	2000      	movs	r0, #0
 80048a2:	f003 f9a3 	bl	8007bec <switch_board>
						Uart_flush(USART1);
 80048a6:	4835      	ldr	r0, [pc, #212]	@ (800497c <PDU_update_task+0x120>)
 80048a8:	f7fd fbb0 	bl	800200c <Uart_flush>

						frame = pdu_frame;
 80048ac:	4b34      	ldr	r3, [pc, #208]	@ (8004980 <PDU_update_task+0x124>)
 80048ae:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(pdu_frame);
 80048b0:	2309      	movs	r3, #9
 80048b2:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e00a      	b.n	80048d0 <PDU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	4413      	add	r3, r2
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	4619      	mov	r1, r3
 80048c4:	482d      	ldr	r0, [pc, #180]	@ (800497c <PDU_update_task+0x120>)
 80048c6:	f7fd fa3f 	bl	8001d48 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	dbf0      	blt.n	80048ba <PDU_update_task+0x5e>
						}
						receive_pduFlag = 0;
 80048d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004984 <PDU_update_task+0x128>)
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80048de:	4b24      	ldr	r3, [pc, #144]	@ (8004970 <PDU_update_task+0x114>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 80048e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80048e8:	2006      	movs	r0, #6
 80048ea:	f007 fa51 	bl	800bd90 <SCH_TIM_Start>
					}
				}
				if(!receive_pduFlag){
 80048ee:	4b25      	ldr	r3, [pc, #148]	@ (8004984 <PDU_update_task+0x128>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d133      	bne.n	8004960 <PDU_update_task+0x104>
					timeout_counter_pdu++;
 80048f8:	4b23      	ldr	r3, [pc, #140]	@ (8004988 <PDU_update_task+0x12c>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	3301      	adds	r3, #1
 8004900:	b2da      	uxtb	r2, r3
 8004902:	4b21      	ldr	r3, [pc, #132]	@ (8004988 <PDU_update_task+0x12c>)
 8004904:	701a      	strb	r2, [r3, #0]
					if (timeout_counter_pdu > 2){
 8004906:	4b20      	ldr	r3, [pc, #128]	@ (8004988 <PDU_update_task+0x12c>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d927      	bls.n	8004960 <PDU_update_task+0x104>
						disconnect_counter_pdu++;
 8004910:	4b1e      	ldr	r3, [pc, #120]	@ (800498c <PDU_update_task+0x130>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	3301      	adds	r3, #1
 8004918:	b2da      	uxtb	r2, r3
 800491a:	4b1c      	ldr	r3, [pc, #112]	@ (800498c <PDU_update_task+0x130>)
 800491c:	701a      	strb	r2, [r3, #0]
						timeout_counter_pdu = 0;
 800491e:	4b1a      	ldr	r3, [pc, #104]	@ (8004988 <PDU_update_task+0x12c>)
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]
						receive_pduFlag = 1;
 8004924:	4b17      	ldr	r3, [pc, #92]	@ (8004984 <PDU_update_task+0x128>)
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
						send_rs422 = 0;
 800492a:	4b11      	ldr	r3, [pc, #68]	@ (8004970 <PDU_update_task+0x114>)
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]
						if(disconnect_counter_pdu > 4){
 8004930:	4b16      	ldr	r3, [pc, #88]	@ (800498c <PDU_update_task+0x130>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b04      	cmp	r3, #4
 8004938:	d912      	bls.n	8004960 <PDU_update_task+0x104>
							disconnect_counter_pdu = 5;
 800493a:	4b14      	ldr	r3, [pc, #80]	@ (800498c <PDU_update_task+0x130>)
 800493c:	2205      	movs	r2, #5
 800493e:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 54; i++) {
 8004940:	2301      	movs	r3, #1
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	e009      	b.n	800495a <PDU_update_task+0xfe>
									nextBuffer[i + 42] = 0xFF; //43   pay1    + 44  pay2        96-<54
 8004946:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <PDU_update_task+0x134>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	332a      	adds	r3, #42	@ 0x2a
 800494e:	4413      	add	r3, r2
 8004950:	22ff      	movs	r2, #255	@ 0xff
 8004952:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 54; i++) {
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	3301      	adds	r3, #1
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b36      	cmp	r3, #54	@ 0x36
 800495e:	ddf2      	ble.n	8004946 <PDU_update_task+0xea>
					}
				}
			}
		}
	}
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	200059fd 	.word	0x200059fd
 800496c:	200057cd 	.word	0x200057cd
 8004970:	200058d2 	.word	0x200058d2
 8004974:	20000042 	.word	0x20000042
 8004978:	20000041 	.word	0x20000041
 800497c:	40011000 	.word	0x40011000
 8004980:	20000044 	.word	0x20000044
 8004984:	20000040 	.word	0x20000040
 8004988:	200058d6 	.word	0x200058d6
 800498c:	200058d0 	.word	0x200058d0
 8004990:	200003fc 	.word	0x200003fc

08004994 <Cmd_pdu_set_channel>:


#define DEST_ADDR FSP_ADR_PDU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pdu_set_channel(int argc, char *argv[])
{
 8004994:	b580      	push	{r7, lr}
 8004996:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800499a:	af02      	add	r7, sp, #8
 800499c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049a0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049a4:	6018      	str	r0, [r3, #0]
 80049a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049aa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80049ae:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80049b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	dc01      	bgt.n	80049c2 <Cmd_pdu_set_channel+0x2e>
 80049be:	2303      	movs	r3, #3
 80049c0:	e0db      	b.n	8004b7a <Cmd_pdu_set_channel+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80049c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049c6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	dd01      	ble.n	80049d4 <Cmd_pdu_set_channel+0x40>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e0d2      	b.n	8004b7a <Cmd_pdu_set_channel+0x1e6>
    uint8_t channel = atoi(argv[1]);
 80049d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049d8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3304      	adds	r3, #4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f00a fa68 	bl	800eeb8 <atoi>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 80049ee:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80049f2:	2b09      	cmp	r3, #9
 80049f4:	d901      	bls.n	80049fa <Cmd_pdu_set_channel+0x66>
 80049f6:	2304      	movs	r3, #4
 80049f8:	e0bf      	b.n	8004b7a <Cmd_pdu_set_channel+0x1e6>

    uint8_t state = atoi(argv[2]);
 80049fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049fe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f00a fa55 	bl	800eeb8 <atoi>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004a14:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d901      	bls.n	8004a20 <Cmd_pdu_set_channel+0x8c>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	e0ac      	b.n	8004b7a <Cmd_pdu_set_channel+0x1e6>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004a20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a24:	4857      	ldr	r0, [pc, #348]	@ (8004b84 <Cmd_pdu_set_channel+0x1f0>)
 8004a26:	f7ff fef5 	bl	8004814 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004a2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004a2e:	4855      	ldr	r0, [pc, #340]	@ (8004b84 <Cmd_pdu_set_channel+0x1f0>)
 8004a30:	f7ff fef0 	bl	8004814 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004a34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a38:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a42:	3b01      	subs	r3, #1
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004a4a:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004a58:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004a5c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b88 <Cmd_pdu_set_channel+0x1f4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d103      	bne.n	8004a6a <Cmd_pdu_set_channel+0xd6>
    	uart_choose_uart5 = 1;
 8004a62:	4b4a      	ldr	r3, [pc, #296]	@ (8004b8c <Cmd_pdu_set_channel+0x1f8>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e002      	b.n	8004a70 <Cmd_pdu_set_channel+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8004a6a:	4b48      	ldr	r3, [pc, #288]	@ (8004b8c <Cmd_pdu_set_channel+0x1f8>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004a70:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004a74:	4a46      	ldr	r2, [pc, #280]	@ (8004b90 <Cmd_pdu_set_channel+0x1fc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d103      	bne.n	8004a82 <Cmd_pdu_set_channel+0xee>
    	uart_choose_usart2 = 1;
 8004a7a:	4b46      	ldr	r3, [pc, #280]	@ (8004b94 <Cmd_pdu_set_channel+0x200>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e002      	b.n	8004a88 <Cmd_pdu_set_channel+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 8004a82:	4b44      	ldr	r3, [pc, #272]	@ (8004b94 <Cmd_pdu_set_channel+0x200>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_CHANNEL;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = channel;
 8004a8e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004a92:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 8004a96:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004a9a:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004a9e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004aa2:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004aa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	2301      	movs	r3, #1
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f007 fb44 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004ab8:	f107 020f 	add.w	r2, r7, #15
 8004abc:	f107 0110 	add.w	r1, r7, #16
 8004ac0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f007 fbc1 	bl	800c24c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004aca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ace:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02c      	beq.n	8004b32 <Cmd_pdu_set_channel+0x19e>
        for (int i = 0; i < frame_len; i++) {
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004ade:	e010      	b.n	8004b02 <Cmd_pdu_set_channel+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 8004ae0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ae4:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004ae8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004aec:	4413      	add	r3, r2
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	4619      	mov	r1, r3
 8004af2:	4829      	ldr	r0, [pc, #164]	@ (8004b98 <Cmd_pdu_set_channel+0x204>)
 8004af4:	f7fd f928 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004af8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004afc:	3301      	adds	r3, #1
 8004afe:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004b02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b06:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b12:	4293      	cmp	r3, r2
 8004b14:	dbe4      	blt.n	8004ae0 <Cmd_pdu_set_channel+0x14c>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004b16:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b1a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b1e:	781a      	ldrb	r2, [r3, #0]
 8004b20:	f107 0310 	add.w	r3, r7, #16
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fd fba6 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8004b2c:	f7fd fb8c 	bl	8002248 <set_send_flag>
 8004b30:	e022      	b.n	8004b78 <Cmd_pdu_set_channel+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004b32:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004b36:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	2301      	movs	r3, #1
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2303      	movs	r3, #3
 8004b46:	2202      	movs	r2, #2
 8004b48:	f007 fafa 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004b4c:	f107 020f 	add.w	r2, r7, #15
 8004b50:	f107 0110 	add.w	r1, r7, #16
 8004b54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f007 fb77 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004b5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b62:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	f107 0310 	add.w	r3, r7, #16
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fd fb82 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004b74:	f7fd fb68 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004b78:	2305      	movs	r3, #5
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40020000 	.word	0x40020000
 8004b88:	40005000 	.word	0x40005000
 8004b8c:	200058d4 	.word	0x200058d4
 8004b90:	40004400 	.word	0x40004400
 8004b94:	200058d5 	.word	0x200058d5
 8004b98:	40011000 	.word	0x40011000

08004b9c <Cmd_pdu_set_buck>:

int Cmd_pdu_set_buck(int argc, char *argv[])
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004ba2:	af02      	add	r7, sp, #8
 8004ba4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ba8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004bac:	6018      	str	r0, [r3, #0]
 8004bae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bb2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004bb6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8004bb8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bbc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	dc01      	bgt.n	8004bca <Cmd_pdu_set_buck+0x2e>
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0db      	b.n	8004d82 <Cmd_pdu_set_buck+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8004bca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bce:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	dd01      	ble.n	8004bdc <Cmd_pdu_set_buck+0x40>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e0d2      	b.n	8004d82 <Cmd_pdu_set_buck+0x1e6>
    uint8_t buck = atoi(argv[1]);
 8004bdc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004be0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3304      	adds	r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f00a f964 	bl	800eeb8 <atoi>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8004bf6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d901      	bls.n	8004c02 <Cmd_pdu_set_buck+0x66>
 8004bfe:	2304      	movs	r3, #4
 8004c00:	e0bf      	b.n	8004d82 <Cmd_pdu_set_buck+0x1e6>

    uint8_t state = atoi(argv[2]);
 8004c02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c06:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f00a f951 	bl	800eeb8 <atoi>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004c1c:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d901      	bls.n	8004c28 <Cmd_pdu_set_buck+0x8c>
 8004c24:	2304      	movs	r3, #4
 8004c26:	e0ac      	b.n	8004d82 <Cmd_pdu_set_buck+0x1e6>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004c28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c2c:	4857      	ldr	r0, [pc, #348]	@ (8004d8c <Cmd_pdu_set_buck+0x1f0>)
 8004c2e:	f7ff fdf1 	bl	8004814 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004c32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004c36:	4855      	ldr	r0, [pc, #340]	@ (8004d8c <Cmd_pdu_set_buck+0x1f0>)
 8004c38:	f7ff fdec 	bl	8004814 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004c3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c40:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004c52:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	4413      	add	r3, r2
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004c60:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004c64:	4a4a      	ldr	r2, [pc, #296]	@ (8004d90 <Cmd_pdu_set_buck+0x1f4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d103      	bne.n	8004c72 <Cmd_pdu_set_buck+0xd6>
    	uart_choose_uart5 = 1;
 8004c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d94 <Cmd_pdu_set_buck+0x1f8>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e002      	b.n	8004c78 <Cmd_pdu_set_buck+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8004c72:	4b48      	ldr	r3, [pc, #288]	@ (8004d94 <Cmd_pdu_set_buck+0x1f8>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004c78:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004c7c:	4a46      	ldr	r2, [pc, #280]	@ (8004d98 <Cmd_pdu_set_buck+0x1fc>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d103      	bne.n	8004c8a <Cmd_pdu_set_buck+0xee>
    	uart_choose_usart2 = 1;
 8004c82:	4b46      	ldr	r3, [pc, #280]	@ (8004d9c <Cmd_pdu_set_buck+0x200>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	e002      	b.n	8004c90 <Cmd_pdu_set_buck+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 8004c8a:	4b44      	ldr	r3, [pc, #272]	@ (8004d9c <Cmd_pdu_set_buck+0x200>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_BUCK;
 8004c90:	2302      	movs	r3, #2
 8004c92:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = buck;
 8004c96:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004c9a:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 8004c9e:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004ca2:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004ca6:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004caa:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004cae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	2303      	movs	r3, #3
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f007 fa40 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004cc0:	f107 020f 	add.w	r2, r7, #15
 8004cc4:	f107 0110 	add.w	r1, r7, #16
 8004cc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f007 fabd 	bl	800c24c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004cd2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cd6:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d02c      	beq.n	8004d3a <Cmd_pdu_set_buck+0x19e>
        for (int i = 0; i < frame_len; i++) {
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004ce6:	e010      	b.n	8004d0a <Cmd_pdu_set_buck+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 8004ce8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cec:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004cf0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004cf4:	4413      	add	r3, r2
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4829      	ldr	r0, [pc, #164]	@ (8004da0 <Cmd_pdu_set_buck+0x204>)
 8004cfc:	f7fd f824 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004d00:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d04:	3301      	adds	r3, #1
 8004d06:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004d0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d0e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	dbe4      	blt.n	8004ce8 <Cmd_pdu_set_buck+0x14c>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004d1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d22:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	f107 0310 	add.w	r3, r7, #16
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fd faa2 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8004d34:	f7fd fa88 	bl	8002248 <set_send_flag>
 8004d38:	e022      	b.n	8004d80 <Cmd_pdu_set_buck+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004d3a:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004d3e:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004d42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	2301      	movs	r3, #1
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f007 f9f6 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004d54:	f107 020f 	add.w	r2, r7, #15
 8004d58:	f107 0110 	add.w	r1, r7, #16
 8004d5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d60:	4618      	mov	r0, r3
 8004d62:	f007 fa73 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004d66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d6a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d6e:	781a      	ldrb	r2, [r3, #0]
 8004d70:	f107 0310 	add.w	r3, r7, #16
 8004d74:	4611      	mov	r1, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fd fa7e 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004d7c:	f7fd fa64 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004d80:	2305      	movs	r3, #5
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40020000 	.word	0x40020000
 8004d90:	40005000 	.word	0x40005000
 8004d94:	200058d4 	.word	0x200058d4
 8004d98:	40004400 	.word	0x40004400
 8004d9c:	200058d5 	.word	0x200058d5
 8004da0:	40011000 	.word	0x40011000

08004da4 <Cmd_pdu_set_all>:

int Cmd_pdu_set_all(int argc, char *argv[])
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004daa:	af02      	add	r7, sp, #8
 8004dac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004db0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004db4:	6018      	str	r0, [r3, #0]
 8004db6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dba:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004dbe:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004dc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dc4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	dc01      	bgt.n	8004dd2 <Cmd_pdu_set_all+0x2e>
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e0c4      	b.n	8004f5c <Cmd_pdu_set_all+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004dd2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dd6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	dd01      	ble.n	8004de4 <Cmd_pdu_set_all+0x40>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e0bb      	b.n	8004f5c <Cmd_pdu_set_all+0x1b8>

    uint8_t state = atoi(argv[1]);
 8004de4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004de8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3304      	adds	r3, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f00a f860 	bl	800eeb8 <atoi>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004dfe:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d901      	bls.n	8004e0a <Cmd_pdu_set_all+0x66>
 8004e06:	2304      	movs	r3, #4
 8004e08:	e0a8      	b.n	8004f5c <Cmd_pdu_set_all+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004e0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e0e:	4856      	ldr	r0, [pc, #344]	@ (8004f68 <Cmd_pdu_set_all+0x1c4>)
 8004e10:	f7ff fd00 	bl	8004814 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004e14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e18:	4853      	ldr	r0, [pc, #332]	@ (8004f68 <Cmd_pdu_set_all+0x1c4>)
 8004e1a:	f7ff fcfb 	bl	8004814 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004e1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e22:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004e34:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004e42:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004e46:	4a49      	ldr	r2, [pc, #292]	@ (8004f6c <Cmd_pdu_set_all+0x1c8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d103      	bne.n	8004e54 <Cmd_pdu_set_all+0xb0>
    	uart_choose_uart5 = 1;
 8004e4c:	4b48      	ldr	r3, [pc, #288]	@ (8004f70 <Cmd_pdu_set_all+0x1cc>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	e002      	b.n	8004e5a <Cmd_pdu_set_all+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004e54:	4b46      	ldr	r3, [pc, #280]	@ (8004f70 <Cmd_pdu_set_all+0x1cc>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004e5a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004e5e:	4a45      	ldr	r2, [pc, #276]	@ (8004f74 <Cmd_pdu_set_all+0x1d0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d103      	bne.n	8004e6c <Cmd_pdu_set_all+0xc8>
    	uart_choose_usart2 = 1;
 8004e64:	4b44      	ldr	r3, [pc, #272]	@ (8004f78 <Cmd_pdu_set_all+0x1d4>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e002      	b.n	8004e72 <Cmd_pdu_set_all+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8004e6c:	4b42      	ldr	r3, [pc, #264]	@ (8004f78 <Cmd_pdu_set_all+0x1d4>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_ALL;
 8004e72:	2303      	movs	r3, #3
 8004e74:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = state;
 8004e78:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004e7c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004e80:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004e84:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004e88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004e8c:	9301      	str	r3, [sp, #4]
 8004e8e:	2301      	movs	r3, #1
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	2303      	movs	r3, #3
 8004e94:	2201      	movs	r2, #1
 8004e96:	f007 f953 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004e9a:	f107 020f 	add.w	r2, r7, #15
 8004e9e:	f107 0110 	add.w	r1, r7, #16
 8004ea2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f007 f9d0 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 8004eac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004eb0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d02c      	beq.n	8004f14 <Cmd_pdu_set_all+0x170>
        for (int i = 0; i < frame_len; i++) {
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004ec0:	e010      	b.n	8004ee4 <Cmd_pdu_set_all+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8004ec2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ec6:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004eca:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004ece:	4413      	add	r3, r2
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4829      	ldr	r0, [pc, #164]	@ (8004f7c <Cmd_pdu_set_all+0x1d8>)
 8004ed6:	f7fc ff37 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004eda:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004ede:	3301      	adds	r3, #1
 8004ee0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004ee4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ee8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	dbe4      	blt.n	8004ec2 <Cmd_pdu_set_all+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004ef8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004efc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	f107 0310 	add.w	r3, r7, #16
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fd f9b5 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8004f0e:	f7fd f99b 	bl	8002248 <set_send_flag>
 8004f12:	e022      	b.n	8004f5a <Cmd_pdu_set_all+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004f14:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004f18:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004f1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	2301      	movs	r3, #1
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	2303      	movs	r3, #3
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f007 f909 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004f2e:	f107 020f 	add.w	r2, r7, #15
 8004f32:	f107 0110 	add.w	r1, r7, #16
 8004f36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f007 f986 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004f40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f44:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	f107 0310 	add.w	r3, r7, #16
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fd f991 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004f56:	f7fd f977 	bl	8002248 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8004f5a:	2305      	movs	r3, #5
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40020000 	.word	0x40020000
 8004f6c:	40005000 	.word	0x40005000
 8004f70:	200058d4 	.word	0x200058d4
 8004f74:	40004400 	.word	0x40004400
 8004f78:	200058d5 	.word	0x200058d5
 8004f7c:	40011000 	.word	0x40011000

08004f80 <Cmd_pdu_get_channel>:

int Cmd_pdu_get_channel(int argc, char *argv[])
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004f86:	af02      	add	r7, sp, #8
 8004f88:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f8c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004f90:	6018      	str	r0, [r3, #0]
 8004f92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f96:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004f9a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004f9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fa0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	dc01      	bgt.n	8004fae <Cmd_pdu_get_channel+0x2e>
 8004faa:	2303      	movs	r3, #3
 8004fac:	e0c4      	b.n	8005138 <Cmd_pdu_get_channel+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004fae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fb2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	dd01      	ble.n	8004fc0 <Cmd_pdu_get_channel+0x40>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e0bb      	b.n	8005138 <Cmd_pdu_get_channel+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8004fc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fc4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f009 ff72 	bl	800eeb8 <atoi>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8004fda:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004fde:	2b09      	cmp	r3, #9
 8004fe0:	d901      	bls.n	8004fe6 <Cmd_pdu_get_channel+0x66>
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	e0a8      	b.n	8005138 <Cmd_pdu_get_channel+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004fe6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004fea:	4856      	ldr	r0, [pc, #344]	@ (8005144 <Cmd_pdu_get_channel+0x1c4>)
 8004fec:	f7ff fc12 	bl	8004814 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004ff0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004ff4:	4853      	ldr	r0, [pc, #332]	@ (8005144 <Cmd_pdu_get_channel+0x1c4>)
 8004ff6:	f7ff fc0d 	bl	8004814 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004ffa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ffe:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005008:	3b01      	subs	r3, #1
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005010:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	4413      	add	r3, r2
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800501e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005022:	4a49      	ldr	r2, [pc, #292]	@ (8005148 <Cmd_pdu_get_channel+0x1c8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d103      	bne.n	8005030 <Cmd_pdu_get_channel+0xb0>
    	uart_choose_uart5 = 1;
 8005028:	4b48      	ldr	r3, [pc, #288]	@ (800514c <Cmd_pdu_get_channel+0x1cc>)
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e002      	b.n	8005036 <Cmd_pdu_get_channel+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005030:	4b46      	ldr	r3, [pc, #280]	@ (800514c <Cmd_pdu_get_channel+0x1cc>)
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005036:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800503a:	4a45      	ldr	r2, [pc, #276]	@ (8005150 <Cmd_pdu_get_channel+0x1d0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d103      	bne.n	8005048 <Cmd_pdu_get_channel+0xc8>
    	uart_choose_usart2 = 1;
 8005040:	4b44      	ldr	r3, [pc, #272]	@ (8005154 <Cmd_pdu_get_channel+0x1d4>)
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e002      	b.n	800504e <Cmd_pdu_get_channel+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8005048:	4b42      	ldr	r3, [pc, #264]	@ (8005154 <Cmd_pdu_get_channel+0x1d4>)
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
    }



    uint8_t cmd  = CMD_CODE_PDU_GET_CHANNEL;
 800504e:	2304      	movs	r3, #4
 8005050:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = channel;
 8005054:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005058:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800505c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8005060:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005064:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	2301      	movs	r3, #1
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	2303      	movs	r3, #3
 8005070:	2201      	movs	r2, #1
 8005072:	f007 f865 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005076:	f107 020f 	add.w	r2, r7, #15
 800507a:	f107 0110 	add.w	r1, r7, #16
 800507e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005082:	4618      	mov	r0, r3
 8005084:	f007 f8e2 	bl	800c24c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005088:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800508c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d02c      	beq.n	80050f0 <Cmd_pdu_get_channel+0x170>
        for (int i = 0; i < frame_len; i++) {
 8005096:	2300      	movs	r3, #0
 8005098:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800509c:	e010      	b.n	80050c0 <Cmd_pdu_get_channel+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800509e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050a2:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80050a6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050aa:	4413      	add	r3, r2
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	4619      	mov	r1, r3
 80050b0:	4829      	ldr	r0, [pc, #164]	@ (8005158 <Cmd_pdu_get_channel+0x1d8>)
 80050b2:	f7fc fe49 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80050b6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050ba:	3301      	adds	r3, #1
 80050bc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80050c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050c4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050d0:	4293      	cmp	r3, r2
 80050d2:	dbe4      	blt.n	800509e <Cmd_pdu_get_channel+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80050d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050d8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	f107 0310 	add.w	r3, r7, #16
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fd f8c7 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 80050ea:	f7fd f8ad 	bl	8002248 <set_send_flag>
 80050ee:	e022      	b.n	8005136 <Cmd_pdu_get_channel+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80050f0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80050f4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80050f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	2301      	movs	r3, #1
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	2303      	movs	r3, #3
 8005104:	2201      	movs	r2, #1
 8005106:	f007 f81b 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800510a:	f107 020f 	add.w	r2, r7, #15
 800510e:	f107 0110 	add.w	r1, r7, #16
 8005112:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005116:	4618      	mov	r0, r3
 8005118:	f007 f898 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800511c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005120:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	f107 0310 	add.w	r3, r7, #16
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f7fd f8a3 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005132:	f7fd f889 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005136:	2305      	movs	r3, #5
}
 8005138:	4618      	mov	r0, r3
 800513a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40020000 	.word	0x40020000
 8005148:	40005000 	.word	0x40005000
 800514c:	200058d4 	.word	0x200058d4
 8005150:	40004400 	.word	0x40004400
 8005154:	200058d5 	.word	0x200058d5
 8005158:	40011000 	.word	0x40011000

0800515c <Cmd_pdu_get_buck>:

int Cmd_pdu_get_buck(int argc, char *argv[])
{
 800515c:	b580      	push	{r7, lr}
 800515e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005162:	af02      	add	r7, sp, #8
 8005164:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005168:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800516c:	6018      	str	r0, [r3, #0]
 800516e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005172:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005176:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8005178:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800517c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b02      	cmp	r3, #2
 8005184:	dc01      	bgt.n	800518a <Cmd_pdu_get_buck+0x2e>
 8005186:	2303      	movs	r3, #3
 8005188:	e0c4      	b.n	8005314 <Cmd_pdu_get_buck+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 800518a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800518e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b03      	cmp	r3, #3
 8005196:	dd01      	ble.n	800519c <Cmd_pdu_get_buck+0x40>
 8005198:	2302      	movs	r3, #2
 800519a:	e0bb      	b.n	8005314 <Cmd_pdu_get_buck+0x1b8>
    uint8_t buck = atoi(argv[1]);
 800519c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80051a0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3304      	adds	r3, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f009 fe84 	bl	800eeb8 <atoi>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 80051b6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80051ba:	2b06      	cmp	r3, #6
 80051bc:	d901      	bls.n	80051c2 <Cmd_pdu_get_buck+0x66>
 80051be:	2304      	movs	r3, #4
 80051c0:	e0a8      	b.n	8005314 <Cmd_pdu_get_buck+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80051c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051c6:	4856      	ldr	r0, [pc, #344]	@ (8005320 <Cmd_pdu_get_buck+0x1c4>)
 80051c8:	f7ff fb24 	bl	8004814 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80051cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051d0:	4853      	ldr	r0, [pc, #332]	@ (8005320 <Cmd_pdu_get_buck+0x1c4>)
 80051d2:	f7ff fb1f 	bl	8004814 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80051d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80051da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051e4:	3b01      	subs	r3, #1
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80051ec:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	4413      	add	r3, r2
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80051fa:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80051fe:	4a49      	ldr	r2, [pc, #292]	@ (8005324 <Cmd_pdu_get_buck+0x1c8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d103      	bne.n	800520c <Cmd_pdu_get_buck+0xb0>
    	uart_choose_uart5 = 1;
 8005204:	4b48      	ldr	r3, [pc, #288]	@ (8005328 <Cmd_pdu_get_buck+0x1cc>)
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e002      	b.n	8005212 <Cmd_pdu_get_buck+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 800520c:	4b46      	ldr	r3, [pc, #280]	@ (8005328 <Cmd_pdu_get_buck+0x1cc>)
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005212:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005216:	4a45      	ldr	r2, [pc, #276]	@ (800532c <Cmd_pdu_get_buck+0x1d0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d103      	bne.n	8005224 <Cmd_pdu_get_buck+0xc8>
    	uart_choose_usart2 = 1;
 800521c:	4b44      	ldr	r3, [pc, #272]	@ (8005330 <Cmd_pdu_get_buck+0x1d4>)
 800521e:	2201      	movs	r2, #1
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	e002      	b.n	800522a <Cmd_pdu_get_buck+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8005224:	4b42      	ldr	r3, [pc, #264]	@ (8005330 <Cmd_pdu_get_buck+0x1d4>)
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_GET_BUCK;
 800522a:	2305      	movs	r3, #5
 800522c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = buck;
 8005230:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005234:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005238:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800523c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005240:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	2301      	movs	r3, #1
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	2303      	movs	r3, #3
 800524c:	2201      	movs	r2, #1
 800524e:	f006 ff77 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005252:	f107 020f 	add.w	r2, r7, #15
 8005256:	f107 0110 	add.w	r1, r7, #16
 800525a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800525e:	4618      	mov	r0, r3
 8005260:	f006 fff4 	bl	800c24c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005264:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005268:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d02c      	beq.n	80052cc <Cmd_pdu_get_buck+0x170>
        for (int i = 0; i < frame_len; i++) {
 8005272:	2300      	movs	r3, #0
 8005274:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005278:	e010      	b.n	800529c <Cmd_pdu_get_buck+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800527a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800527e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8005282:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005286:	4413      	add	r3, r2
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	4619      	mov	r1, r3
 800528c:	4829      	ldr	r0, [pc, #164]	@ (8005334 <Cmd_pdu_get_buck+0x1d8>)
 800528e:	f7fc fd5b 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005292:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005296:	3301      	adds	r3, #1
 8005298:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800529c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052a0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80052ac:	4293      	cmp	r3, r2
 80052ae:	dbe4      	blt.n	800527a <Cmd_pdu_get_buck+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80052b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052b4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80052b8:	781a      	ldrb	r2, [r3, #0]
 80052ba:	f107 0310 	add.w	r3, r7, #16
 80052be:	4611      	mov	r1, r2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fc ffd9 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 80052c6:	f7fc ffbf 	bl	8002248 <set_send_flag>
 80052ca:	e022      	b.n	8005312 <Cmd_pdu_get_buck+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80052cc:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80052d0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80052d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	2301      	movs	r3, #1
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2303      	movs	r3, #3
 80052e0:	2201      	movs	r2, #1
 80052e2:	f006 ff2d 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80052e6:	f107 020f 	add.w	r2, r7, #15
 80052ea:	f107 0110 	add.w	r1, r7, #16
 80052ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80052f2:	4618      	mov	r0, r3
 80052f4:	f006 ffaa 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80052f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052fc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005300:	781a      	ldrb	r2, [r3, #0]
 8005302:	f107 0310 	add.w	r3, r7, #16
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f7fc ffb5 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 800530e:	f7fc ff9b 	bl	8002248 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8005312:	2305      	movs	r3, #5
}
 8005314:	4618      	mov	r0, r3
 8005316:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40020000 	.word	0x40020000
 8005324:	40005000 	.word	0x40005000
 8005328:	200058d4 	.word	0x200058d4
 800532c:	40004400 	.word	0x40004400
 8005330:	200058d5 	.word	0x200058d5
 8005334:	40011000 	.word	0x40011000

08005338 <Cmd_pdu_get_all>:

int Cmd_pdu_get_all(int argc, char *argv[])
{
 8005338:	b580      	push	{r7, lr}
 800533a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800533e:	af00      	add	r7, sp, #0
 8005340:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005344:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005348:	6018      	str	r0, [r3, #0]
 800534a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800534e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005352:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005354:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005358:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b01      	cmp	r3, #1
 8005360:	dc01      	bgt.n	8005366 <Cmd_pdu_get_all+0x2e>
 8005362:	2303      	movs	r3, #3
 8005364:	e0a3      	b.n	80054ae <Cmd_pdu_get_all+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005366:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800536a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b02      	cmp	r3, #2
 8005372:	dd01      	ble.n	8005378 <Cmd_pdu_get_all+0x40>
 8005374:	2302      	movs	r3, #2
 8005376:	e09a      	b.n	80054ae <Cmd_pdu_get_all+0x176>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005378:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800537c:	484e      	ldr	r0, [pc, #312]	@ (80054b8 <Cmd_pdu_get_all+0x180>)
 800537e:	f7ff fa49 	bl	8004814 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005382:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005386:	484c      	ldr	r0, [pc, #304]	@ (80054b8 <Cmd_pdu_get_all+0x180>)
 8005388:	f7ff fa44 	bl	8004814 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800538c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005390:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800539a:	3b01      	subs	r3, #1
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80053a2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	4413      	add	r3, r2
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80053b0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80053b4:	4a41      	ldr	r2, [pc, #260]	@ (80054bc <Cmd_pdu_get_all+0x184>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d103      	bne.n	80053c2 <Cmd_pdu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 80053ba:	4b41      	ldr	r3, [pc, #260]	@ (80054c0 <Cmd_pdu_get_all+0x188>)
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	e002      	b.n	80053c8 <Cmd_pdu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80053c2:	4b3f      	ldr	r3, [pc, #252]	@ (80054c0 <Cmd_pdu_get_all+0x188>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80053c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80053cc:	4a3d      	ldr	r2, [pc, #244]	@ (80054c4 <Cmd_pdu_get_all+0x18c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d103      	bne.n	80053da <Cmd_pdu_get_all+0xa2>
    	uart_choose_usart2 = 1;
 80053d2:	4b3d      	ldr	r3, [pc, #244]	@ (80054c8 <Cmd_pdu_get_all+0x190>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	e002      	b.n	80053e0 <Cmd_pdu_get_all+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80053da:	4b3b      	ldr	r3, [pc, #236]	@ (80054c8 <Cmd_pdu_get_all+0x190>)
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_GET_ALL;
 80053e0:	2306      	movs	r3, #6
 80053e2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80053e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80053ea:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80053ee:	2201      	movs	r2, #1
 80053f0:	2103      	movs	r1, #3
 80053f2:	f006 fe7d 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80053f6:	f107 020f 	add.w	r2, r7, #15
 80053fa:	f107 0110 	add.w	r1, r7, #16
 80053fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005402:	4618      	mov	r0, r3
 8005404:	f006 ff22 	bl	800c24c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005408:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800540c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d02c      	beq.n	8005470 <Cmd_pdu_get_all+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005416:	2300      	movs	r3, #0
 8005418:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800541c:	e010      	b.n	8005440 <Cmd_pdu_get_all+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800541e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005422:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005426:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800542a:	4413      	add	r3, r2
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	4619      	mov	r1, r3
 8005430:	4826      	ldr	r0, [pc, #152]	@ (80054cc <Cmd_pdu_get_all+0x194>)
 8005432:	f7fc fc89 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005436:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800543a:	3301      	adds	r3, #1
 800543c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005440:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005444:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005450:	4293      	cmp	r3, r2
 8005452:	dbe4      	blt.n	800541e <Cmd_pdu_get_all+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005454:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005458:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800545c:	781a      	ldrb	r2, [r3, #0]
 800545e:	f107 0310 	add.w	r3, r7, #16
 8005462:	4611      	mov	r1, r2
 8005464:	4618      	mov	r0, r3
 8005466:	f7fc ff07 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 800546a:	f7fc feed 	bl	8002248 <set_send_flag>
 800546e:	e01d      	b.n	80054ac <Cmd_pdu_get_all+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005470:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005474:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005478:	2201      	movs	r2, #1
 800547a:	2103      	movs	r1, #3
 800547c:	f006 fe38 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005480:	f107 020f 	add.w	r2, r7, #15
 8005484:	f107 0110 	add.w	r1, r7, #16
 8005488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800548c:	4618      	mov	r0, r3
 800548e:	f006 fedd 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005492:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005496:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	f107 0310 	add.w	r3, r7, #16
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fc fee8 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80054a8:	f7fc fece 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80054ac:	2305      	movs	r3, #5
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40020000 	.word	0x40020000
 80054bc:	40005000 	.word	0x40005000
 80054c0:	200058d4 	.word	0x200058d4
 80054c4:	40004400 	.word	0x40004400
 80054c8:	200058d5 	.word	0x200058d5
 80054cc:	40011000 	.word	0x40011000

080054d0 <LL_GPIO_SetOutputPin>:
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	619a      	str	r2, [r3, #24]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <LL_GPIO_ResetOutputPin>:
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	041a      	lsls	r2, r3, #16
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	619a      	str	r2, [r3, #24]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <PMU_create_task>:
};



void PMU_create_task(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PMU_task_context.taskHandle, &PMU_task_context.taskProperty);
 8005510:	4906      	ldr	r1, [pc, #24]	@ (800552c <PMU_create_task+0x20>)
 8005512:	4807      	ldr	r0, [pc, #28]	@ (8005530 <PMU_create_task+0x24>)
 8005514:	f006 fc68 	bl	800bde8 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 8005518:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800551c:	2005      	movs	r0, #5
 800551e:	f006 fc37 	bl	800bd90 <SCH_TIM_Start>
    Ringbuf_init();
 8005522:	f7fc fa6b 	bl	80019fc <Ringbuf_init>
}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000070 	.word	0x20000070
 8005530:	2000006c 	.word	0x2000006c

08005534 <PMU_update_task>:



volatile uint8_t timeout_counter_pmu = 0;

void PMU_update_task(void) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 800553a:	4b41      	ldr	r3, [pc, #260]	@ (8005640 <PMU_update_task+0x10c>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d079      	beq.n	8005638 <PMU_update_task+0x104>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PMU))
 8005544:	2005      	movs	r0, #5
 8005546:	f006 fc39 	bl	800bdbc <SCH_TIM_HasCompleted>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d073      	beq.n	8005638 <PMU_update_task+0x104>
		{

			if(!sendFlag){
 8005550:	4b3c      	ldr	r3, [pc, #240]	@ (8005644 <PMU_update_task+0x110>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d16e      	bne.n	8005638 <PMU_update_task+0x104>
				if(!send_rs422){
 800555a:	4b3b      	ldr	r3, [pc, #236]	@ (8005648 <PMU_update_task+0x114>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d130      	bne.n	80055c6 <PMU_update_task+0x92>
					if(receive_iouFlag&&receive_pduFlag){
 8005564:	4b39      	ldr	r3, [pc, #228]	@ (800564c <PMU_update_task+0x118>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d02b      	beq.n	80055c6 <PMU_update_task+0x92>
 800556e:	4b38      	ldr	r3, [pc, #224]	@ (8005650 <PMU_update_task+0x11c>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d026      	beq.n	80055c6 <PMU_update_task+0x92>
						switch_board(1);
 8005578:	2001      	movs	r0, #1
 800557a:	f002 fb37 	bl	8007bec <switch_board>
						Uart_flush(USART1);
 800557e:	4835      	ldr	r0, [pc, #212]	@ (8005654 <PMU_update_task+0x120>)
 8005580:	f7fc fd44 	bl	800200c <Uart_flush>

						frame = pmu_frame;
 8005584:	4b34      	ldr	r3, [pc, #208]	@ (8005658 <PMU_update_task+0x124>)
 8005586:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(pmu_frame);
 8005588:	2309      	movs	r3, #9
 800558a:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	e00a      	b.n	80055a8 <PMU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	4413      	add	r3, r2
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	482d      	ldr	r0, [pc, #180]	@ (8005654 <PMU_update_task+0x120>)
 800559e:	f7fc fbd3 	bl	8001d48 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3301      	adds	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	dbf0      	blt.n	8005592 <PMU_update_task+0x5e>
						}
						receive_pmuFlag = 0;
 80055b0:	4b2a      	ldr	r3, [pc, #168]	@ (800565c <PMU_update_task+0x128>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80055b6:	4b24      	ldr	r3, [pc, #144]	@ (8005648 <PMU_update_task+0x114>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 80055bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80055c0:	2005      	movs	r0, #5
 80055c2:	f006 fbe5 	bl	800bd90 <SCH_TIM_Start>
					}
				}
				if(!receive_pmuFlag){
 80055c6:	4b25      	ldr	r3, [pc, #148]	@ (800565c <PMU_update_task+0x128>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d133      	bne.n	8005638 <PMU_update_task+0x104>
					timeout_counter_pmu++;
 80055d0:	4b23      	ldr	r3, [pc, #140]	@ (8005660 <PMU_update_task+0x12c>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	3301      	adds	r3, #1
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4b21      	ldr	r3, [pc, #132]	@ (8005660 <PMU_update_task+0x12c>)
 80055dc:	701a      	strb	r2, [r3, #0]
					if (timeout_counter_pmu > 2){
 80055de:	4b20      	ldr	r3, [pc, #128]	@ (8005660 <PMU_update_task+0x12c>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d927      	bls.n	8005638 <PMU_update_task+0x104>
						disconnect_counter_pmu++;
 80055e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005664 <PMU_update_task+0x130>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	3301      	adds	r3, #1
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005664 <PMU_update_task+0x130>)
 80055f4:	701a      	strb	r2, [r3, #0]
						timeout_counter_pmu = 0;
 80055f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005660 <PMU_update_task+0x12c>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
						receive_pmuFlag = 1;
 80055fc:	4b17      	ldr	r3, [pc, #92]	@ (800565c <PMU_update_task+0x128>)
 80055fe:	2201      	movs	r2, #1
 8005600:	701a      	strb	r2, [r3, #0]
						send_rs422 = 0;
 8005602:	4b11      	ldr	r3, [pc, #68]	@ (8005648 <PMU_update_task+0x114>)
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
						if(disconnect_counter_pmu> 4){
 8005608:	4b16      	ldr	r3, [pc, #88]	@ (8005664 <PMU_update_task+0x130>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b04      	cmp	r3, #4
 8005610:	d912      	bls.n	8005638 <PMU_update_task+0x104>
							for (int i = 1; i <= 24; i++) {
 8005612:	2301      	movs	r3, #1
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	e00c      	b.n	8005632 <PMU_update_task+0xfe>
								disconnect_counter_pmu = 5;
 8005618:	4b12      	ldr	r3, [pc, #72]	@ (8005664 <PMU_update_task+0x130>)
 800561a:	2205      	movs	r2, #5
 800561c:	701a      	strb	r2, [r3, #0]
								nextBuffer[i + 96] = 0xFF; //97   pay1    + 98 pay2    120    pay24
 800561e:	4b12      	ldr	r3, [pc, #72]	@ (8005668 <PMU_update_task+0x134>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	3360      	adds	r3, #96	@ 0x60
 8005626:	4413      	add	r3, r2
 8005628:	22ff      	movs	r2, #255	@ 0xff
 800562a:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 24; i++) {
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	3301      	adds	r3, #1
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b18      	cmp	r3, #24
 8005636:	ddef      	ble.n	8005618 <PMU_update_task+0xe4>
					}
				}
			}
		}
	}
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	200059fd 	.word	0x200059fd
 8005644:	200057cd 	.word	0x200057cd
 8005648:	200058d2 	.word	0x200058d2
 800564c:	20000042 	.word	0x20000042
 8005650:	20000040 	.word	0x20000040
 8005654:	40011000 	.word	0x40011000
 8005658:	20000060 	.word	0x20000060
 800565c:	20000041 	.word	0x20000041
 8005660:	200058d7 	.word	0x200058d7
 8005664:	200058d1 	.word	0x200058d1
 8005668:	200003fc 	.word	0x200003fc

0800566c <Cmd_pmu_get_temp>:


#define DEST_ADDR FSP_ADR_PMU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pmu_get_temp(int argc, char *argv[])
{
 800566c:	b580      	push	{r7, lr}
 800566e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005672:	af00      	add	r7, sp, #0
 8005674:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005678:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800567c:	6018      	str	r0, [r3, #0]
 800567e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005682:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005686:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005688:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800568c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b01      	cmp	r3, #1
 8005694:	dc01      	bgt.n	800569a <Cmd_pmu_get_temp+0x2e>
 8005696:	2303      	movs	r3, #3
 8005698:	e0a3      	b.n	80057e2 <Cmd_pmu_get_temp+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800569a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800569e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	dd01      	ble.n	80056ac <Cmd_pmu_get_temp+0x40>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e09a      	b.n	80057e2 <Cmd_pmu_get_temp+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80056ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056b0:	484e      	ldr	r0, [pc, #312]	@ (80057ec <Cmd_pmu_get_temp+0x180>)
 80056b2:	f7ff ff1b 	bl	80054ec <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80056b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056ba:	484c      	ldr	r0, [pc, #304]	@ (80057ec <Cmd_pmu_get_temp+0x180>)
 80056bc:	f7ff ff08 	bl	80054d0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80056c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80056c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056ce:	3b01      	subs	r3, #1
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80056d6:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	4413      	add	r3, r2
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80056e4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80056e8:	4a41      	ldr	r2, [pc, #260]	@ (80057f0 <Cmd_pmu_get_temp+0x184>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d103      	bne.n	80056f6 <Cmd_pmu_get_temp+0x8a>
    	uart_choose_uart5 = 1;
 80056ee:	4b41      	ldr	r3, [pc, #260]	@ (80057f4 <Cmd_pmu_get_temp+0x188>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	e002      	b.n	80056fc <Cmd_pmu_get_temp+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80056f6:	4b3f      	ldr	r3, [pc, #252]	@ (80057f4 <Cmd_pmu_get_temp+0x188>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80056fc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005700:	4a3d      	ldr	r2, [pc, #244]	@ (80057f8 <Cmd_pmu_get_temp+0x18c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d103      	bne.n	800570e <Cmd_pmu_get_temp+0xa2>
    	uart_choose_usart2 = 1;
 8005706:	4b3d      	ldr	r3, [pc, #244]	@ (80057fc <Cmd_pmu_get_temp+0x190>)
 8005708:	2201      	movs	r2, #1
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	e002      	b.n	8005714 <Cmd_pmu_get_temp+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800570e:	4b3b      	ldr	r3, [pc, #236]	@ (80057fc <Cmd_pmu_get_temp+0x190>)
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PMU_GET_TEMP;
 8005714:	2301      	movs	r3, #1
 8005716:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800571a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800571e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005722:	2201      	movs	r2, #1
 8005724:	2102      	movs	r1, #2
 8005726:	f006 fce3 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800572a:	f107 020f 	add.w	r2, r7, #15
 800572e:	f107 0110 	add.w	r1, r7, #16
 8005732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005736:	4618      	mov	r0, r3
 8005738:	f006 fd88 	bl	800c24c <frame_encode>

    if (frame_len > 0) {
 800573c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005740:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02c      	beq.n	80057a4 <Cmd_pmu_get_temp+0x138>
        for (int i = 0; i < frame_len; i++) {
 800574a:	2300      	movs	r3, #0
 800574c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005750:	e010      	b.n	8005774 <Cmd_pmu_get_temp+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005752:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005756:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800575a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800575e:	4413      	add	r3, r2
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	4619      	mov	r1, r3
 8005764:	4826      	ldr	r0, [pc, #152]	@ (8005800 <Cmd_pmu_get_temp+0x194>)
 8005766:	f7fc faef 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800576a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800576e:	3301      	adds	r3, #1
 8005770:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005774:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005778:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005784:	4293      	cmp	r3, r2
 8005786:	dbe4      	blt.n	8005752 <Cmd_pmu_get_temp+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005788:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800578c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	f107 0310 	add.w	r3, r7, #16
 8005796:	4611      	mov	r1, r2
 8005798:	4618      	mov	r0, r3
 800579a:	f7fc fd6d 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 800579e:	f7fc fd53 	bl	8002248 <set_send_flag>
 80057a2:	e01d      	b.n	80057e0 <Cmd_pmu_get_temp+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80057a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057a8:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80057ac:	2201      	movs	r2, #1
 80057ae:	2102      	movs	r1, #2
 80057b0:	f006 fc9e 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80057b4:	f107 020f 	add.w	r2, r7, #15
 80057b8:	f107 0110 	add.w	r1, r7, #16
 80057bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057c0:	4618      	mov	r0, r3
 80057c2:	f006 fd43 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80057c6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80057ca:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80057ce:	781a      	ldrb	r2, [r3, #0]
 80057d0:	f107 0310 	add.w	r3, r7, #16
 80057d4:	4611      	mov	r1, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fc fd4e 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80057dc:	f7fc fd34 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80057e0:	2305      	movs	r3, #5
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40020000 	.word	0x40020000
 80057f0:	40005000 	.word	0x40005000
 80057f4:	200058d4 	.word	0x200058d4
 80057f8:	40004400 	.word	0x40004400
 80057fc:	200058d5 	.word	0x200058d5
 8005800:	40011000 	.word	0x40011000

08005804 <Cmd_pmu_bat_vol>:

int Cmd_pmu_bat_vol(int argc, char *argv[])
{
 8005804:	b580      	push	{r7, lr}
 8005806:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800580a:	af00      	add	r7, sp, #0
 800580c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005810:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005814:	6018      	str	r0, [r3, #0]
 8005816:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800581a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800581e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005820:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005824:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b01      	cmp	r3, #1
 800582c:	dc01      	bgt.n	8005832 <Cmd_pmu_bat_vol+0x2e>
 800582e:	2303      	movs	r3, #3
 8005830:	e0a3      	b.n	800597a <Cmd_pmu_bat_vol+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005832:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005836:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b02      	cmp	r3, #2
 800583e:	dd01      	ble.n	8005844 <Cmd_pmu_bat_vol+0x40>
 8005840:	2302      	movs	r3, #2
 8005842:	e09a      	b.n	800597a <Cmd_pmu_bat_vol+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005844:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005848:	484e      	ldr	r0, [pc, #312]	@ (8005984 <Cmd_pmu_bat_vol+0x180>)
 800584a:	f7ff fe4f 	bl	80054ec <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800584e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005852:	484c      	ldr	r0, [pc, #304]	@ (8005984 <Cmd_pmu_bat_vol+0x180>)
 8005854:	f7ff fe3c 	bl	80054d0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005858:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800585c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005866:	3b01      	subs	r3, #1
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800586e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	4413      	add	r3, r2
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 800587c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005880:	4a41      	ldr	r2, [pc, #260]	@ (8005988 <Cmd_pmu_bat_vol+0x184>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d103      	bne.n	800588e <Cmd_pmu_bat_vol+0x8a>
    	uart_choose_uart5 = 1;
 8005886:	4b41      	ldr	r3, [pc, #260]	@ (800598c <Cmd_pmu_bat_vol+0x188>)
 8005888:	2201      	movs	r2, #1
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e002      	b.n	8005894 <Cmd_pmu_bat_vol+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800588e:	4b3f      	ldr	r3, [pc, #252]	@ (800598c <Cmd_pmu_bat_vol+0x188>)
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005894:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005898:	4a3d      	ldr	r2, [pc, #244]	@ (8005990 <Cmd_pmu_bat_vol+0x18c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d103      	bne.n	80058a6 <Cmd_pmu_bat_vol+0xa2>
    	uart_choose_usart2 = 1;
 800589e:	4b3d      	ldr	r3, [pc, #244]	@ (8005994 <Cmd_pmu_bat_vol+0x190>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e002      	b.n	80058ac <Cmd_pmu_bat_vol+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80058a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005994 <Cmd_pmu_bat_vol+0x190>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_BAT_VOL;
 80058ac:	2302      	movs	r3, #2
 80058ae:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80058b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058b6:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80058ba:	2201      	movs	r2, #1
 80058bc:	2102      	movs	r1, #2
 80058be:	f006 fc17 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80058c2:	f107 020f 	add.w	r2, r7, #15
 80058c6:	f107 0110 	add.w	r1, r7, #16
 80058ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058ce:	4618      	mov	r0, r3
 80058d0:	f006 fcbc 	bl	800c24c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80058d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80058d8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d02c      	beq.n	800593c <Cmd_pmu_bat_vol+0x138>
        for (int i = 0; i < frame_len; i++) {
 80058e2:	2300      	movs	r3, #0
 80058e4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80058e8:	e010      	b.n	800590c <Cmd_pmu_bat_vol+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80058ea:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80058ee:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80058f2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80058f6:	4413      	add	r3, r2
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	4619      	mov	r1, r3
 80058fc:	4826      	ldr	r0, [pc, #152]	@ (8005998 <Cmd_pmu_bat_vol+0x194>)
 80058fe:	f7fc fa23 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005902:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005906:	3301      	adds	r3, #1
 8005908:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800590c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005910:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800591c:	4293      	cmp	r3, r2
 800591e:	dbe4      	blt.n	80058ea <Cmd_pmu_bat_vol+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005920:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005924:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	f107 0310 	add.w	r3, r7, #16
 800592e:	4611      	mov	r1, r2
 8005930:	4618      	mov	r0, r3
 8005932:	f7fc fca1 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8005936:	f7fc fc87 	bl	8002248 <set_send_flag>
 800593a:	e01d      	b.n	8005978 <Cmd_pmu_bat_vol+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800593c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005940:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005944:	2201      	movs	r2, #1
 8005946:	2102      	movs	r1, #2
 8005948:	f006 fbd2 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800594c:	f107 020f 	add.w	r2, r7, #15
 8005950:	f107 0110 	add.w	r1, r7, #16
 8005954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005958:	4618      	mov	r0, r3
 800595a:	f006 fc77 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800595e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005962:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005966:	781a      	ldrb	r2, [r3, #0]
 8005968:	f107 0310 	add.w	r3, r7, #16
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f7fc fc82 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005974:	f7fc fc68 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005978:	2305      	movs	r3, #5
}
 800597a:	4618      	mov	r0, r3
 800597c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40020000 	.word	0x40020000
 8005988:	40005000 	.word	0x40005000
 800598c:	200058d4 	.word	0x200058d4
 8005990:	40004400 	.word	0x40004400
 8005994:	200058d5 	.word	0x200058d5
 8005998:	40011000 	.word	0x40011000

0800599c <Cmd_pmu_parag_in>:

int Cmd_pmu_parag_in(int argc, char *argv[])
{
 800599c:	b580      	push	{r7, lr}
 800599e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059a8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80059ac:	6018      	str	r0, [r3, #0]
 80059ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059b2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80059b6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80059b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059bc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	dc01      	bgt.n	80059ca <Cmd_pmu_parag_in+0x2e>
 80059c6:	2303      	movs	r3, #3
 80059c8:	e0a3      	b.n	8005b12 <Cmd_pmu_parag_in+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80059ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059ce:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	dd01      	ble.n	80059dc <Cmd_pmu_parag_in+0x40>
 80059d8:	2302      	movs	r3, #2
 80059da:	e09a      	b.n	8005b12 <Cmd_pmu_parag_in+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80059dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059e0:	484e      	ldr	r0, [pc, #312]	@ (8005b1c <Cmd_pmu_parag_in+0x180>)
 80059e2:	f7ff fd83 	bl	80054ec <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80059e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80059ea:	484c      	ldr	r0, [pc, #304]	@ (8005b1c <Cmd_pmu_parag_in+0x180>)
 80059ec:	f7ff fd70 	bl	80054d0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80059f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059f4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059fe:	3b01      	subs	r3, #1
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005a06:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005a14:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005a18:	4a41      	ldr	r2, [pc, #260]	@ (8005b20 <Cmd_pmu_parag_in+0x184>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d103      	bne.n	8005a26 <Cmd_pmu_parag_in+0x8a>
    	uart_choose_uart5 = 1;
 8005a1e:	4b41      	ldr	r3, [pc, #260]	@ (8005b24 <Cmd_pmu_parag_in+0x188>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e002      	b.n	8005a2c <Cmd_pmu_parag_in+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005a26:	4b3f      	ldr	r3, [pc, #252]	@ (8005b24 <Cmd_pmu_parag_in+0x188>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005a2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005a30:	4a3d      	ldr	r2, [pc, #244]	@ (8005b28 <Cmd_pmu_parag_in+0x18c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d103      	bne.n	8005a3e <Cmd_pmu_parag_in+0xa2>
    	uart_choose_usart2 = 1;
 8005a36:	4b3d      	ldr	r3, [pc, #244]	@ (8005b2c <Cmd_pmu_parag_in+0x190>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	e002      	b.n	8005a44 <Cmd_pmu_parag_in+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b2c <Cmd_pmu_parag_in+0x190>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PARAG_IN;
 8005a44:	2303      	movs	r3, #3
 8005a46:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005a4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a4e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005a52:	2201      	movs	r2, #1
 8005a54:	2102      	movs	r1, #2
 8005a56:	f006 fb4b 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005a5a:	f107 020f 	add.w	r2, r7, #15
 8005a5e:	f107 0110 	add.w	r1, r7, #16
 8005a62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a66:	4618      	mov	r0, r3
 8005a68:	f006 fbf0 	bl	800c24c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005a6c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a70:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d02c      	beq.n	8005ad4 <Cmd_pmu_parag_in+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005a80:	e010      	b.n	8005aa4 <Cmd_pmu_parag_in+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005a82:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a86:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005a8a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005a8e:	4413      	add	r3, r2
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	4619      	mov	r1, r3
 8005a94:	4826      	ldr	r0, [pc, #152]	@ (8005b30 <Cmd_pmu_parag_in+0x194>)
 8005a96:	f7fc f957 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005a9a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005aa4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005aa8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	dbe4      	blt.n	8005a82 <Cmd_pmu_parag_in+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005ab8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005abc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	f107 0310 	add.w	r3, r7, #16
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fc fbd5 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8005ace:	f7fc fbbb 	bl	8002248 <set_send_flag>
 8005ad2:	e01d      	b.n	8005b10 <Cmd_pmu_parag_in+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005ad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005ad8:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005adc:	2201      	movs	r2, #1
 8005ade:	2102      	movs	r1, #2
 8005ae0:	f006 fb06 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005ae4:	f107 020f 	add.w	r2, r7, #15
 8005ae8:	f107 0110 	add.w	r1, r7, #16
 8005aec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005af0:	4618      	mov	r0, r3
 8005af2:	f006 fbab 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005af6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005afa:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005afe:	781a      	ldrb	r2, [r3, #0]
 8005b00:	f107 0310 	add.w	r3, r7, #16
 8005b04:	4611      	mov	r1, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fc fbb6 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005b0c:	f7fc fb9c 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005b10:	2305      	movs	r3, #5
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40020000 	.word	0x40020000
 8005b20:	40005000 	.word	0x40005000
 8005b24:	200058d4 	.word	0x200058d4
 8005b28:	40004400 	.word	0x40004400
 8005b2c:	200058d5 	.word	0x200058d5
 8005b30:	40011000 	.word	0x40011000

08005b34 <Cmd_pmu_parag_out>:

int Cmd_pmu_parag_out(int argc, char *argv[])
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b40:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005b44:	6018      	str	r0, [r3, #0]
 8005b46:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b4a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005b4e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005b50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b54:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	dc01      	bgt.n	8005b62 <Cmd_pmu_parag_out+0x2e>
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e0a3      	b.n	8005caa <Cmd_pmu_parag_out+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005b62:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b66:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	dd01      	ble.n	8005b74 <Cmd_pmu_parag_out+0x40>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e09a      	b.n	8005caa <Cmd_pmu_parag_out+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005b74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b78:	484e      	ldr	r0, [pc, #312]	@ (8005cb4 <Cmd_pmu_parag_out+0x180>)
 8005b7a:	f7ff fcb7 	bl	80054ec <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005b7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b82:	484c      	ldr	r0, [pc, #304]	@ (8005cb4 <Cmd_pmu_parag_out+0x180>)
 8005b84:	f7ff fca4 	bl	80054d0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005b88:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b8c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b96:	3b01      	subs	r3, #1
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005b9e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005bac:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005bb0:	4a41      	ldr	r2, [pc, #260]	@ (8005cb8 <Cmd_pmu_parag_out+0x184>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d103      	bne.n	8005bbe <Cmd_pmu_parag_out+0x8a>
    	uart_choose_uart5 = 1;
 8005bb6:	4b41      	ldr	r3, [pc, #260]	@ (8005cbc <Cmd_pmu_parag_out+0x188>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e002      	b.n	8005bc4 <Cmd_pmu_parag_out+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8005cbc <Cmd_pmu_parag_out+0x188>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005bc4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005bc8:	4a3d      	ldr	r2, [pc, #244]	@ (8005cc0 <Cmd_pmu_parag_out+0x18c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d103      	bne.n	8005bd6 <Cmd_pmu_parag_out+0xa2>
    	uart_choose_usart2 = 1;
 8005bce:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc4 <Cmd_pmu_parag_out+0x190>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	e002      	b.n	8005bdc <Cmd_pmu_parag_out+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8005cc4 <Cmd_pmu_parag_out+0x190>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PARAG_OUT;
 8005bdc:	2304      	movs	r3, #4
 8005bde:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005be2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005be6:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005bea:	2201      	movs	r2, #1
 8005bec:	2102      	movs	r1, #2
 8005bee:	f006 fa7f 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005bf2:	f107 020f 	add.w	r2, r7, #15
 8005bf6:	f107 0110 	add.w	r1, r7, #16
 8005bfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f006 fb24 	bl	800c24c <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8005c04:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c08:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d02c      	beq.n	8005c6c <Cmd_pmu_parag_out+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005c12:	2300      	movs	r3, #0
 8005c14:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005c18:	e010      	b.n	8005c3c <Cmd_pmu_parag_out+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005c1a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c1e:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005c22:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005c26:	4413      	add	r3, r2
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4826      	ldr	r0, [pc, #152]	@ (8005cc8 <Cmd_pmu_parag_out+0x194>)
 8005c2e:	f7fc f88b 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005c32:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005c36:	3301      	adds	r3, #1
 8005c38:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005c3c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c40:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	dbe4      	blt.n	8005c1a <Cmd_pmu_parag_out+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005c50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c54:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	f107 0310 	add.w	r3, r7, #16
 8005c5e:	4611      	mov	r1, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fc fb09 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8005c66:	f7fc faef 	bl	8002248 <set_send_flag>
 8005c6a:	e01d      	b.n	8005ca8 <Cmd_pmu_parag_out+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005c6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c70:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005c74:	2201      	movs	r2, #1
 8005c76:	2102      	movs	r1, #2
 8005c78:	f006 fa3a 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005c7c:	f107 020f 	add.w	r2, r7, #15
 8005c80:	f107 0110 	add.w	r1, r7, #16
 8005c84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f006 fadf 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005c8e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c92:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c96:	781a      	ldrb	r2, [r3, #0]
 8005c98:	f107 0310 	add.w	r3, r7, #16
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fc faea 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005ca4:	f7fc fad0 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005ca8:	2305      	movs	r3, #5
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40020000 	.word	0x40020000
 8005cb8:	40005000 	.word	0x40005000
 8005cbc:	200058d4 	.word	0x200058d4
 8005cc0:	40004400 	.word	0x40004400
 8005cc4:	200058d5 	.word	0x200058d5
 8005cc8:	40011000 	.word	0x40011000

08005ccc <Cmd_pmu_set_temppoint>:

int Cmd_pmu_set_temppoint(int argc, char *argv[])
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005cd2:	af02      	add	r7, sp, #8
 8005cd4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005cd8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005cdc:	6018      	str	r0, [r3, #0]
 8005cde:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ce2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005ce6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8005ce8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005cec:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	dc01      	bgt.n	8005cfa <Cmd_pmu_set_temppoint+0x2e>
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e0e7      	b.n	8005eca <Cmd_pmu_set_temppoint+0x1fe>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8005cfa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005cfe:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	dd01      	ble.n	8005d0c <Cmd_pmu_set_temppoint+0x40>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e0de      	b.n	8005eca <Cmd_pmu_set_temppoint+0x1fe>
    uint16_t lowpoint = atoi(argv[1]);
 8005d0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d10:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3304      	adds	r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f009 f8cc 	bl	800eeb8 <atoi>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
   // if (lowpoint > 6)   return CMDLINE_INVALID_ARG;
    uint16_t highpoint = atoi(argv[2]);
 8005d26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d2a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f009 f8bf 	bl	800eeb8 <atoi>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
   // if (highpoint > 6)   return CMDLINE_INVALID_ARG;
    if (highpoint < lowpoint)   return CMDLINE_INVALID_ARG;
 8005d40:	f8b7 2218 	ldrh.w	r2, [r7, #536]	@ 0x218
 8005d44:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d201      	bcs.n	8005d50 <Cmd_pmu_set_temppoint+0x84>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	e0bc      	b.n	8005eca <Cmd_pmu_set_temppoint+0x1fe>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005d50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d54:	485f      	ldr	r0, [pc, #380]	@ (8005ed4 <Cmd_pmu_set_temppoint+0x208>)
 8005d56:	f7ff fbc9 	bl	80054ec <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005d5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005d5e:	485d      	ldr	r0, [pc, #372]	@ (8005ed4 <Cmd_pmu_set_temppoint+0x208>)
 8005d60:	f7ff fbb6 	bl	80054d0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005d64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d68:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d72:	3b01      	subs	r3, #1
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005d7a:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	4413      	add	r3, r2
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005d88:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005d8c:	4a52      	ldr	r2, [pc, #328]	@ (8005ed8 <Cmd_pmu_set_temppoint+0x20c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d103      	bne.n	8005d9a <Cmd_pmu_set_temppoint+0xce>
    	uart_choose_uart5 = 1;
 8005d92:	4b52      	ldr	r3, [pc, #328]	@ (8005edc <Cmd_pmu_set_temppoint+0x210>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	e002      	b.n	8005da0 <Cmd_pmu_set_temppoint+0xd4>
    }else{
    	uart_choose_uart5 = 0;
 8005d9a:	4b50      	ldr	r3, [pc, #320]	@ (8005edc <Cmd_pmu_set_temppoint+0x210>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]
    }
    if (USARTx == USART2) {
 8005da0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005da4:	4a4e      	ldr	r2, [pc, #312]	@ (8005ee0 <Cmd_pmu_set_temppoint+0x214>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d103      	bne.n	8005db2 <Cmd_pmu_set_temppoint+0xe6>
    	uart_choose_usart2 = 1;
 8005daa:	4b4e      	ldr	r3, [pc, #312]	@ (8005ee4 <Cmd_pmu_set_temppoint+0x218>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e002      	b.n	8005db8 <Cmd_pmu_set_temppoint+0xec>
    }else{
    	uart_choose_usart2 = 0;
 8005db2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ee4 <Cmd_pmu_set_temppoint+0x218>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_TEMP_POINT;
 8005db8:	2305      	movs	r3, #5
 8005dba:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = (uint8_t)(lowpoint >> 8);
 8005dbe:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005dc2:	0a1b      	lsrs	r3, r3, #8
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = (uint8_t)(lowpoint & 0xFF);
 8005dcc:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(highpoint >> 8);
 8005dd6:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8005dda:	0a1b      	lsrs	r3, r3, #8
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(highpoint & 0xFF);
 8005de4:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005dee:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005df2:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005df6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	2302      	movs	r3, #2
 8005e02:	2204      	movs	r2, #4
 8005e04:	f006 f99c 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005e08:	f107 020b 	add.w	r2, r7, #11
 8005e0c:	f107 010c 	add.w	r1, r7, #12
 8005e10:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005e14:	4618      	mov	r0, r3
 8005e16:	f006 fa19 	bl	800c24c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005e1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e1e:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d02c      	beq.n	8005e82 <Cmd_pmu_set_temppoint+0x1b6>
        for (int i = 0; i < frame_len; i++) {
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005e2e:	e010      	b.n	8005e52 <Cmd_pmu_set_temppoint+0x186>
            Uart_write(USART1, encoded_frame[i]);
 8005e30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e34:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8005e38:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005e3c:	4413      	add	r3, r2
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	4619      	mov	r1, r3
 8005e42:	4829      	ldr	r0, [pc, #164]	@ (8005ee8 <Cmd_pmu_set_temppoint+0x21c>)
 8005e44:	f7fb ff80 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005e48:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005e52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e56:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005e62:	4293      	cmp	r3, r2
 8005e64:	dbe4      	blt.n	8005e30 <Cmd_pmu_set_temppoint+0x164>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005e66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e6a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005e6e:	781a      	ldrb	r2, [r3, #0]
 8005e70:	f107 030c 	add.w	r3, r7, #12
 8005e74:	4611      	mov	r1, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fc f9fe 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8005e7c:	f7fc f9e4 	bl	8002248 <set_send_flag>
 8005e80:	e022      	b.n	8005ec8 <Cmd_pmu_set_temppoint+0x1fc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005e82:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005e86:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005e8a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	2301      	movs	r3, #1
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	2302      	movs	r3, #2
 8005e96:	2204      	movs	r2, #4
 8005e98:	f006 f952 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005e9c:	f107 020b 	add.w	r2, r7, #11
 8005ea0:	f107 010c 	add.w	r1, r7, #12
 8005ea4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f006 f9cf 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005eae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005eb2:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	f107 030c 	add.w	r3, r7, #12
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fc f9da 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005ec4:	f7fc f9c0 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005ec8:	2305      	movs	r3, #5
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40020000 	.word	0x40020000
 8005ed8:	40005000 	.word	0x40005000
 8005edc:	200058d4 	.word	0x200058d4
 8005ee0:	40004400 	.word	0x40004400
 8005ee4:	200058d5 	.word	0x200058d5
 8005ee8:	40011000 	.word	0x40011000

08005eec <Cmd_pmu_set_output>:

int Cmd_pmu_set_output(int argc, char *argv[])
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005ef2:	af02      	add	r7, sp, #8
 8005ef4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ef8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005efc:	6018      	str	r0, [r3, #0]
 8005efe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f02:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005f06:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8005f08:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f0c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	dc01      	bgt.n	8005f1a <Cmd_pmu_set_output+0x2e>
 8005f16:	2303      	movs	r3, #3
 8005f18:	e0c4      	b.n	80060a4 <Cmd_pmu_set_output+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8005f1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f1e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	dd01      	ble.n	8005f2c <Cmd_pmu_set_output+0x40>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e0bb      	b.n	80060a4 <Cmd_pmu_set_output+0x1b8>
    uint8_t state = atoi(argv[1]);
 8005f2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f30:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3304      	adds	r3, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f008 ffbc 	bl	800eeb8 <atoi>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1)   return CMDLINE_INVALID_ARG;
 8005f46:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d901      	bls.n	8005f52 <Cmd_pmu_set_output+0x66>
 8005f4e:	2304      	movs	r3, #4
 8005f50:	e0a8      	b.n	80060a4 <Cmd_pmu_set_output+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005f52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f56:	4856      	ldr	r0, [pc, #344]	@ (80060b0 <Cmd_pmu_set_output+0x1c4>)
 8005f58:	f7ff fac8 	bl	80054ec <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005f5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f60:	4853      	ldr	r0, [pc, #332]	@ (80060b0 <Cmd_pmu_set_output+0x1c4>)
 8005f62:	f7ff fab5 	bl	80054d0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005f66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f6a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f74:	3b01      	subs	r3, #1
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005f7c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	4413      	add	r3, r2
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005f8a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005f8e:	4a49      	ldr	r2, [pc, #292]	@ (80060b4 <Cmd_pmu_set_output+0x1c8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d103      	bne.n	8005f9c <Cmd_pmu_set_output+0xb0>
    	uart_choose_uart5 = 1;
 8005f94:	4b48      	ldr	r3, [pc, #288]	@ (80060b8 <Cmd_pmu_set_output+0x1cc>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e002      	b.n	8005fa2 <Cmd_pmu_set_output+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005f9c:	4b46      	ldr	r3, [pc, #280]	@ (80060b8 <Cmd_pmu_set_output+0x1cc>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005fa2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005fa6:	4a45      	ldr	r2, [pc, #276]	@ (80060bc <Cmd_pmu_set_output+0x1d0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d103      	bne.n	8005fb4 <Cmd_pmu_set_output+0xc8>
    	uart_choose_usart2 = 1;
 8005fac:	4b44      	ldr	r3, [pc, #272]	@ (80060c0 <Cmd_pmu_set_output+0x1d4>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	e002      	b.n	8005fba <Cmd_pmu_set_output+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8005fb4:	4b42      	ldr	r3, [pc, #264]	@ (80060c0 <Cmd_pmu_set_output+0x1d4>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	701a      	strb	r2, [r3, #0]
    }



    uint8_t cmd  = CMD_CODE_PMU_OUTPUT;
 8005fba:	2306      	movs	r3, #6
 8005fbc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = state;
 8005fc0:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005fc4:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005fc8:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005fcc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005fd0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	2302      	movs	r3, #2
 8005fdc:	2204      	movs	r2, #4
 8005fde:	f006 f8af 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005fe2:	f107 020b 	add.w	r2, r7, #11
 8005fe6:	f107 010c 	add.w	r1, r7, #12
 8005fea:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f006 f92c 	bl	800c24c <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8005ff4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ff8:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d02c      	beq.n	800605c <Cmd_pmu_set_output+0x170>
        for (int i = 0; i < frame_len; i++) {
 8006002:	2300      	movs	r3, #0
 8006004:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8006008:	e010      	b.n	800602c <Cmd_pmu_set_output+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800600a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800600e:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8006012:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006016:	4413      	add	r3, r2
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	4619      	mov	r1, r3
 800601c:	4829      	ldr	r0, [pc, #164]	@ (80060c4 <Cmd_pmu_set_output+0x1d8>)
 800601e:	f7fb fe93 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8006022:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006026:	3301      	adds	r3, #1
 8006028:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800602c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006030:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800603c:	4293      	cmp	r3, r2
 800603e:	dbe4      	blt.n	800600a <Cmd_pmu_set_output+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8006040:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006044:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006048:	781a      	ldrb	r2, [r3, #0]
 800604a:	f107 030c 	add.w	r3, r7, #12
 800604e:	4611      	mov	r1, r2
 8006050:	4618      	mov	r0, r3
 8006052:	f7fc f911 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8006056:	f7fc f8f7 	bl	8002248 <set_send_flag>
 800605a:	e022      	b.n	80060a2 <Cmd_pmu_set_output+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800605c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8006060:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8006064:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	2301      	movs	r3, #1
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	2302      	movs	r3, #2
 8006070:	2204      	movs	r2, #4
 8006072:	f006 f865 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006076:	f107 020b 	add.w	r2, r7, #11
 800607a:	f107 010c 	add.w	r1, r7, #12
 800607e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006082:	4618      	mov	r0, r3
 8006084:	f006 f8e2 	bl	800c24c <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8006088:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800608c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006090:	781a      	ldrb	r2, [r3, #0]
 8006092:	f107 030c 	add.w	r3, r7, #12
 8006096:	4611      	mov	r1, r2
 8006098:	4618      	mov	r0, r3
 800609a:	f7fc f8ed 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 800609e:	f7fc f8d3 	bl	8002248 <set_send_flag>
    }


    return CMDLINE_PENDING;
 80060a2:	2305      	movs	r3, #5
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40020000 	.word	0x40020000
 80060b4:	40005000 	.word	0x40005000
 80060b8:	200058d4 	.word	0x200058d4
 80060bc:	40004400 	.word	0x40004400
 80060c0:	200058d5 	.word	0x200058d5
 80060c4:	40011000 	.word	0x40011000

080060c8 <Cmd_pmu_set_pwm>:

int Cmd_pmu_set_pwm(int argc, char *argv[])
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80060ce:	af02      	add	r7, sp, #8
 80060d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060d4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80060d8:	6018      	str	r0, [r3, #0]
 80060da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060de:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80060e2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80060e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060e8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	dc01      	bgt.n	80060f6 <Cmd_pmu_set_pwm+0x2e>
 80060f2:	2303      	movs	r3, #3
 80060f4:	e0c4      	b.n	8006280 <Cmd_pmu_set_pwm+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80060f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060fa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b03      	cmp	r3, #3
 8006102:	dd01      	ble.n	8006108 <Cmd_pmu_set_pwm+0x40>
 8006104:	2302      	movs	r3, #2
 8006106:	e0bb      	b.n	8006280 <Cmd_pmu_set_pwm+0x1b8>
    uint8_t duty = atoi(argv[1]);
 8006108:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800610c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3304      	adds	r3, #4
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f008 fece 	bl	800eeb8 <atoi>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (duty > 100)   return CMDLINE_INVALID_ARG;
 8006122:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8006126:	2b64      	cmp	r3, #100	@ 0x64
 8006128:	d901      	bls.n	800612e <Cmd_pmu_set_pwm+0x66>
 800612a:	2304      	movs	r3, #4
 800612c:	e0a8      	b.n	8006280 <Cmd_pmu_set_pwm+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800612e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006132:	4856      	ldr	r0, [pc, #344]	@ (800628c <Cmd_pmu_set_pwm+0x1c4>)
 8006134:	f7ff f9da 	bl	80054ec <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006138:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800613c:	4853      	ldr	r0, [pc, #332]	@ (800628c <Cmd_pmu_set_pwm+0x1c4>)
 800613e:	f7ff f9c7 	bl	80054d0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006142:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006146:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006150:	3b01      	subs	r3, #1
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8006158:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	4413      	add	r3, r2
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8006166:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800616a:	4a49      	ldr	r2, [pc, #292]	@ (8006290 <Cmd_pmu_set_pwm+0x1c8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d103      	bne.n	8006178 <Cmd_pmu_set_pwm+0xb0>
    	uart_choose_uart5 = 1;
 8006170:	4b48      	ldr	r3, [pc, #288]	@ (8006294 <Cmd_pmu_set_pwm+0x1cc>)
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	e002      	b.n	800617e <Cmd_pmu_set_pwm+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8006178:	4b46      	ldr	r3, [pc, #280]	@ (8006294 <Cmd_pmu_set_pwm+0x1cc>)
 800617a:	2200      	movs	r2, #0
 800617c:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800617e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8006182:	4a45      	ldr	r2, [pc, #276]	@ (8006298 <Cmd_pmu_set_pwm+0x1d0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d103      	bne.n	8006190 <Cmd_pmu_set_pwm+0xc8>
    	uart_choose_usart2 = 1;
 8006188:	4b44      	ldr	r3, [pc, #272]	@ (800629c <Cmd_pmu_set_pwm+0x1d4>)
 800618a:	2201      	movs	r2, #1
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e002      	b.n	8006196 <Cmd_pmu_set_pwm+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8006190:	4b42      	ldr	r3, [pc, #264]	@ (800629c <Cmd_pmu_set_pwm+0x1d4>)
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PMU_PWM;
 8006196:	2307      	movs	r3, #7
 8006198:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = duty;
 800619c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80061a0:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80061a4:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80061a8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80061ac:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	2301      	movs	r3, #1
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	2302      	movs	r3, #2
 80061b8:	2204      	movs	r2, #4
 80061ba:	f005 ffc1 	bl	800c140 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80061be:	f107 020b 	add.w	r2, r7, #11
 80061c2:	f107 010c 	add.w	r1, r7, #12
 80061c6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80061ca:	4618      	mov	r0, r3
 80061cc:	f006 f83e 	bl	800c24c <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80061d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80061d4:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d02c      	beq.n	8006238 <Cmd_pmu_set_pwm+0x170>
        for (int i = 0; i < frame_len; i++) {
 80061de:	2300      	movs	r3, #0
 80061e0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80061e4:	e010      	b.n	8006208 <Cmd_pmu_set_pwm+0x140>
            Uart_write(USART1, encoded_frame[i]);
 80061e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80061ea:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 80061ee:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80061f2:	4413      	add	r3, r2
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	4829      	ldr	r0, [pc, #164]	@ (80062a0 <Cmd_pmu_set_pwm+0x1d8>)
 80061fa:	f7fb fda5 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80061fe:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006202:	3301      	adds	r3, #1
 8006204:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8006208:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800620c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006218:	4293      	cmp	r3, r2
 800621a:	dbe4      	blt.n	80061e6 <Cmd_pmu_set_pwm+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800621c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006220:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	f107 030c 	add.w	r3, r7, #12
 800622a:	4611      	mov	r1, r2
 800622c:	4618      	mov	r0, r3
 800622e:	f7fc f823 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8006232:	f7fc f809 	bl	8002248 <set_send_flag>
 8006236:	e022      	b.n	800627e <Cmd_pmu_set_pwm+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8006238:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800623c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8006240:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	2301      	movs	r3, #1
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	2302      	movs	r3, #2
 800624c:	2204      	movs	r2, #4
 800624e:	f005 ff77 	bl	800c140 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006252:	f107 020b 	add.w	r2, r7, #11
 8006256:	f107 010c 	add.w	r1, r7, #12
 800625a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800625e:	4618      	mov	r0, r3
 8006260:	f005 fff4 	bl	800c24c <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8006264:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006268:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800626c:	781a      	ldrb	r2, [r3, #0]
 800626e:	f107 030c 	add.w	r3, r7, #12
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f7fb ffff 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 800627a:	f7fb ffe5 	bl	8002248 <set_send_flag>
    }


    return CMDLINE_PENDING;
 800627e:	2305      	movs	r3, #5
}
 8006280:	4618      	mov	r0, r3
 8006282:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40020000 	.word	0x40020000
 8006290:	40005000 	.word	0x40005000
 8006294:	200058d4 	.word	0x200058d4
 8006298:	40004400 	.word	0x40004400
 800629c:	200058d5 	.word	0x200058d5
 80062a0:	40011000 	.word	0x40011000

080062a4 <Cmd_pmu_get_all>:

int Cmd_pmu_get_all(int argc, char *argv[])
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062b0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80062b4:	6018      	str	r0, [r3, #0]
 80062b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062ba:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80062be:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80062c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	dc01      	bgt.n	80062d2 <Cmd_pmu_get_all+0x2e>
 80062ce:	2303      	movs	r3, #3
 80062d0:	e0a3      	b.n	800641a <Cmd_pmu_get_all+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80062d2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062d6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	dd01      	ble.n	80062e4 <Cmd_pmu_get_all+0x40>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e09a      	b.n	800641a <Cmd_pmu_get_all+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80062e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80062e8:	484e      	ldr	r0, [pc, #312]	@ (8006424 <Cmd_pmu_get_all+0x180>)
 80062ea:	f7ff f8ff 	bl	80054ec <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80062ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80062f2:	484c      	ldr	r0, [pc, #304]	@ (8006424 <Cmd_pmu_get_all+0x180>)
 80062f4:	f7ff f8ec 	bl	80054d0 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80062f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062fc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006306:	3b01      	subs	r3, #1
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800630e:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8006312:	6812      	ldr	r2, [r2, #0]
 8006314:	4413      	add	r3, r2
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 800631c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8006320:	4a41      	ldr	r2, [pc, #260]	@ (8006428 <Cmd_pmu_get_all+0x184>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d103      	bne.n	800632e <Cmd_pmu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 8006326:	4b41      	ldr	r3, [pc, #260]	@ (800642c <Cmd_pmu_get_all+0x188>)
 8006328:	2201      	movs	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e002      	b.n	8006334 <Cmd_pmu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800632e:	4b3f      	ldr	r3, [pc, #252]	@ (800642c <Cmd_pmu_get_all+0x188>)
 8006330:	2200      	movs	r2, #0
 8006332:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8006334:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8006338:	4a3d      	ldr	r2, [pc, #244]	@ (8006430 <Cmd_pmu_get_all+0x18c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d103      	bne.n	8006346 <Cmd_pmu_get_all+0xa2>
    	uart_choose_usart2 = 1;
 800633e:	4b3d      	ldr	r3, [pc, #244]	@ (8006434 <Cmd_pmu_get_all+0x190>)
 8006340:	2201      	movs	r2, #1
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	e002      	b.n	800634c <Cmd_pmu_get_all+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8006346:	4b3b      	ldr	r3, [pc, #236]	@ (8006434 <Cmd_pmu_get_all+0x190>)
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_PMU_ALL;
 800634c:	2308      	movs	r3, #8
 800634e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8006352:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006356:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800635a:	2201      	movs	r2, #1
 800635c:	2102      	movs	r1, #2
 800635e:	f005 fec7 	bl	800c0f0 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006362:	f107 020f 	add.w	r2, r7, #15
 8006366:	f107 0110 	add.w	r1, r7, #16
 800636a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800636e:	4618      	mov	r0, r3
 8006370:	f005 ff6c 	bl	800c24c <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8006374:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006378:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d02c      	beq.n	80063dc <Cmd_pmu_get_all+0x138>
        for (int i = 0; i < frame_len; i++) {
 8006382:	2300      	movs	r3, #0
 8006384:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8006388:	e010      	b.n	80063ac <Cmd_pmu_get_all+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800638a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800638e:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8006392:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8006396:	4413      	add	r3, r2
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	4619      	mov	r1, r3
 800639c:	4826      	ldr	r0, [pc, #152]	@ (8006438 <Cmd_pmu_get_all+0x194>)
 800639e:	f7fb fcd3 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80063a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80063a6:	3301      	adds	r3, #1
 80063a8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80063ac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80063b0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80063bc:	4293      	cmp	r3, r2
 80063be:	dbe4      	blt.n	800638a <Cmd_pmu_get_all+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80063c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80063c4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	f107 0310 	add.w	r3, r7, #16
 80063ce:	4611      	mov	r1, r2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fb ff51 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 80063d6:	f7fb ff37 	bl	8002248 <set_send_flag>
 80063da:	e01d      	b.n	8006418 <Cmd_pmu_get_all+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80063dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063e0:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80063e4:	2201      	movs	r2, #1
 80063e6:	2102      	movs	r1, #2
 80063e8:	f005 fe82 	bl	800c0f0 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80063ec:	f107 020f 	add.w	r2, r7, #15
 80063f0:	f107 0110 	add.w	r1, r7, #16
 80063f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063f8:	4618      	mov	r0, r3
 80063fa:	f005 ff27 	bl	800c24c <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80063fe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006402:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8006406:	781a      	ldrb	r2, [r3, #0]
 8006408:	f107 0310 	add.w	r3, r7, #16
 800640c:	4611      	mov	r1, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f7fb ff32 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8006414:	f7fb ff18 	bl	8002248 <set_send_flag>
    }
    return CMDLINE_PENDING;
 8006418:	2305      	movs	r3, #5
}
 800641a:	4618      	mov	r0, r3
 800641c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40020000 	.word	0x40020000
 8006428:	40005000 	.word	0x40005000
 800642c:	200058d4 	.word	0x200058d4
 8006430:	40004400 	.word	0x40004400
 8006434:	200058d5 	.word	0x200058d5
 8006438:	40011000 	.word	0x40011000

0800643c <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8006446:	2301      	movs	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8006452:	e01f      	b.n	8006494 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b20      	cmp	r3, #32
 800645a:	d105      	bne.n	8006468 <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2200      	movs	r2, #0
 8006460:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8006462:	2301      	movs	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]
 8006466:	e012      	b.n	800648e <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00f      	beq.n	800648e <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b07      	cmp	r3, #7
 8006472:	d80a      	bhi.n	800648a <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8006474:	4920      	ldr	r1, [pc, #128]	@ (80064f8 <CmdLineProcess+0xbc>)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	3301      	adds	r3, #1
 8006482:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8006484:	2300      	movs	r3, #0
 8006486:	73fb      	strb	r3, [r7, #15]
 8006488:	e001      	b.n	800648e <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 800648a:	2302      	movs	r3, #2
 800648c:	e030      	b.n	80064f0 <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	3301      	adds	r3, #1
 8006492:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1db      	bne.n	8006454 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d025      	beq.n	80064ee <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 80064a2:	4915      	ldr	r1, [pc, #84]	@ (80064f8 <CmdLineProcess+0xbc>)
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	3301      	adds	r3, #1
 80064b0:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 80064b2:	4b12      	ldr	r3, [pc, #72]	@ (80064fc <CmdLineProcess+0xc0>)
 80064b4:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 80064b6:	e016      	b.n	80064e6 <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 80064b8:	4b0f      	ldr	r3, [pc, #60]	@ (80064f8 <CmdLineProcess+0xbc>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f7f9 fe84 	bl	80001d0 <strcmp>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d108      	bne.n	80064e0 <CmdLineProcess+0xa4>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4908      	ldr	r1, [pc, #32]	@ (80064f8 <CmdLineProcess+0xbc>)
 80064d6:	4610      	mov	r0, r2
 80064d8:	4798      	blx	r3
 80064da:	4603      	mov	r3, r0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e007      	b.n	80064f0 <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	330c      	adds	r3, #12
 80064e4:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e4      	bne.n	80064b8 <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 80064ee:	2301      	movs	r3, #1
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	200058d8 	.word	0x200058d8
 80064fc:	20000094 	.word	0x20000094

08006500 <__NVIC_SystemReset>:
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006504:	f3bf 8f4f 	dsb	sy
}
 8006508:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800650a:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <__NVIC_SystemReset+0x24>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006512:	4904      	ldr	r1, [pc, #16]	@ (8006524 <__NVIC_SystemReset+0x24>)
 8006514:	4b04      	ldr	r3, [pc, #16]	@ (8006528 <__NVIC_SystemReset+0x28>)
 8006516:	4313      	orrs	r3, r2
 8006518:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800651a:	f3bf 8f4f 	dsb	sy
}
 800651e:	bf00      	nop
    __NOP();
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <__NVIC_SystemReset+0x20>
 8006524:	e000ed00 	.word	0xe000ed00
 8006528:	05fa0004 	.word	0x05fa0004

0800652c <LL_USART_Enable>:
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60da      	str	r2, [r3, #12]
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <LL_USART_Disable>:
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <LL_USART_SetBaudRate>:
{
 800656c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006570:	b0c0      	sub	sp, #256	@ 0x100
 8006572:	af00      	add	r7, sp, #0
 8006574:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006578:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800657c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8006580:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800658c:	f040 810c 	bne.w	80067a8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006590:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800659a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800659e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065a2:	4622      	mov	r2, r4
 80065a4:	462b      	mov	r3, r5
 80065a6:	1891      	adds	r1, r2, r2
 80065a8:	6639      	str	r1, [r7, #96]	@ 0x60
 80065aa:	415b      	adcs	r3, r3
 80065ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80065ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80065b2:	4621      	mov	r1, r4
 80065b4:	eb12 0801 	adds.w	r8, r2, r1
 80065b8:	4629      	mov	r1, r5
 80065ba:	eb43 0901 	adc.w	r9, r3, r1
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065d2:	4690      	mov	r8, r2
 80065d4:	4699      	mov	r9, r3
 80065d6:	4623      	mov	r3, r4
 80065d8:	eb18 0303 	adds.w	r3, r8, r3
 80065dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065e0:	462b      	mov	r3, r5
 80065e2:	eb49 0303 	adc.w	r3, r9, r3
 80065e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80065ee:	2200      	movs	r2, #0
 80065f0:	469a      	mov	sl, r3
 80065f2:	4693      	mov	fp, r2
 80065f4:	eb1a 030a 	adds.w	r3, sl, sl
 80065f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065fa:	eb4b 030b 	adc.w	r3, fp, fp
 80065fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006600:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006608:	f7fa fb4e 	bl	8000ca8 <__aeabi_uldivmod>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4b64      	ldr	r3, [pc, #400]	@ (80067a4 <LL_USART_SetBaudRate+0x238>)
 8006612:	fba3 2302 	umull	r2, r3, r3, r2
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	b29b      	uxth	r3, r3
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	b29c      	uxth	r4, r3
 800661e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006622:	2200      	movs	r2, #0
 8006624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006628:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800662c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8006630:	4642      	mov	r2, r8
 8006632:	464b      	mov	r3, r9
 8006634:	1891      	adds	r1, r2, r2
 8006636:	6539      	str	r1, [r7, #80]	@ 0x50
 8006638:	415b      	adcs	r3, r3
 800663a:	657b      	str	r3, [r7, #84]	@ 0x54
 800663c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006640:	4641      	mov	r1, r8
 8006642:	1851      	adds	r1, r2, r1
 8006644:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006646:	4649      	mov	r1, r9
 8006648:	414b      	adcs	r3, r1
 800664a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8006658:	4659      	mov	r1, fp
 800665a:	00cb      	lsls	r3, r1, #3
 800665c:	4651      	mov	r1, sl
 800665e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006662:	4651      	mov	r1, sl
 8006664:	00ca      	lsls	r2, r1, #3
 8006666:	4610      	mov	r0, r2
 8006668:	4619      	mov	r1, r3
 800666a:	4603      	mov	r3, r0
 800666c:	4642      	mov	r2, r8
 800666e:	189b      	adds	r3, r3, r2
 8006670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006674:	464b      	mov	r3, r9
 8006676:	460a      	mov	r2, r1
 8006678:	eb42 0303 	adc.w	r3, r2, r3
 800667c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006680:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006684:	2200      	movs	r2, #0
 8006686:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800668a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800668e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006692:	460b      	mov	r3, r1
 8006694:	18db      	adds	r3, r3, r3
 8006696:	643b      	str	r3, [r7, #64]	@ 0x40
 8006698:	4613      	mov	r3, r2
 800669a:	eb42 0303 	adc.w	r3, r2, r3
 800669e:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066a4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80066a8:	f7fa fafe 	bl	8000ca8 <__aeabi_uldivmod>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4611      	mov	r1, r2
 80066b2:	4b3c      	ldr	r3, [pc, #240]	@ (80067a4 <LL_USART_SetBaudRate+0x238>)
 80066b4:	fba3 2301 	umull	r2, r3, r3, r1
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	2264      	movs	r2, #100	@ 0x64
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
 80066c0:	1acb      	subs	r3, r1, r3
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066c8:	4b36      	ldr	r3, [pc, #216]	@ (80067a4 <LL_USART_SetBaudRate+0x238>)
 80066ca:	fba3 2302 	umull	r2, r3, r3, r2
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066da:	b29b      	uxth	r3, r3
 80066dc:	4423      	add	r3, r4
 80066de:	b29c      	uxth	r4, r3
 80066e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066ea:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066ee:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80066f2:	4642      	mov	r2, r8
 80066f4:	464b      	mov	r3, r9
 80066f6:	1891      	adds	r1, r2, r2
 80066f8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066fa:	415b      	adcs	r3, r3
 80066fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006702:	4641      	mov	r1, r8
 8006704:	1851      	adds	r1, r2, r1
 8006706:	6339      	str	r1, [r7, #48]	@ 0x30
 8006708:	4649      	mov	r1, r9
 800670a:	414b      	adcs	r3, r1
 800670c:	637b      	str	r3, [r7, #52]	@ 0x34
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800671a:	4659      	mov	r1, fp
 800671c:	00cb      	lsls	r3, r1, #3
 800671e:	4651      	mov	r1, sl
 8006720:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006724:	4651      	mov	r1, sl
 8006726:	00ca      	lsls	r2, r1, #3
 8006728:	4610      	mov	r0, r2
 800672a:	4619      	mov	r1, r3
 800672c:	4603      	mov	r3, r0
 800672e:	4642      	mov	r2, r8
 8006730:	189b      	adds	r3, r3, r2
 8006732:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006736:	464b      	mov	r3, r9
 8006738:	460a      	mov	r2, r1
 800673a:	eb42 0303 	adc.w	r3, r2, r3
 800673e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006742:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006746:	2200      	movs	r2, #0
 8006748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800674c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006750:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006754:	460b      	mov	r3, r1
 8006756:	18db      	adds	r3, r3, r3
 8006758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800675a:	4613      	mov	r3, r2
 800675c:	eb42 0303 	adc.w	r3, r2, r3
 8006760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006766:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800676a:	f7fa fa9d 	bl	8000ca8 <__aeabi_uldivmod>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <LL_USART_SetBaudRate+0x238>)
 8006774:	fba3 1302 	umull	r1, r3, r3, r2
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	2164      	movs	r1, #100	@ 0x64
 800677c:	fb01 f303 	mul.w	r3, r1, r3
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	3332      	adds	r3, #50	@ 0x32
 8006786:	4a07      	ldr	r2, [pc, #28]	@ (80067a4 <LL_USART_SetBaudRate+0x238>)
 8006788:	fba2 2303 	umull	r2, r3, r2, r3
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	b29b      	uxth	r3, r3
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	b29b      	uxth	r3, r3
 8006796:	4423      	add	r3, r4
 8006798:	b29b      	uxth	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067a0:	609a      	str	r2, [r3, #8]
}
 80067a2:	e108      	b.n	80069b6 <LL_USART_SetBaudRate+0x44a>
 80067a4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80067a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067b2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067b6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80067ba:	4642      	mov	r2, r8
 80067bc:	464b      	mov	r3, r9
 80067be:	1891      	adds	r1, r2, r2
 80067c0:	6239      	str	r1, [r7, #32]
 80067c2:	415b      	adcs	r3, r3
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ca:	4641      	mov	r1, r8
 80067cc:	1854      	adds	r4, r2, r1
 80067ce:	4649      	mov	r1, r9
 80067d0:	eb43 0501 	adc.w	r5, r3, r1
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	00eb      	lsls	r3, r5, #3
 80067de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067e2:	00e2      	lsls	r2, r4, #3
 80067e4:	4614      	mov	r4, r2
 80067e6:	461d      	mov	r5, r3
 80067e8:	4643      	mov	r3, r8
 80067ea:	18e3      	adds	r3, r4, r3
 80067ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067f0:	464b      	mov	r3, r9
 80067f2:	eb45 0303 	adc.w	r3, r5, r3
 80067f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80067fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006804:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8006814:	4629      	mov	r1, r5
 8006816:	008b      	lsls	r3, r1, #2
 8006818:	4621      	mov	r1, r4
 800681a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800681e:	4621      	mov	r1, r4
 8006820:	008a      	lsls	r2, r1, #2
 8006822:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8006826:	f7fa fa3f 	bl	8000ca8 <__aeabi_uldivmod>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4b65      	ldr	r3, [pc, #404]	@ (80069c4 <LL_USART_SetBaudRate+0x458>)
 8006830:	fba3 2302 	umull	r2, r3, r3, r2
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	b29b      	uxth	r3, r3
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	b29c      	uxth	r4, r3
 800683c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006840:	2200      	movs	r2, #0
 8006842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006846:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800684a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800684e:	4642      	mov	r2, r8
 8006850:	464b      	mov	r3, r9
 8006852:	1891      	adds	r1, r2, r2
 8006854:	61b9      	str	r1, [r7, #24]
 8006856:	415b      	adcs	r3, r3
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800685e:	4641      	mov	r1, r8
 8006860:	1851      	adds	r1, r2, r1
 8006862:	6139      	str	r1, [r7, #16]
 8006864:	4649      	mov	r1, r9
 8006866:	414b      	adcs	r3, r1
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	f04f 0200 	mov.w	r2, #0
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006876:	4659      	mov	r1, fp
 8006878:	00cb      	lsls	r3, r1, #3
 800687a:	4651      	mov	r1, sl
 800687c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006880:	4651      	mov	r1, sl
 8006882:	00ca      	lsls	r2, r1, #3
 8006884:	4610      	mov	r0, r2
 8006886:	4619      	mov	r1, r3
 8006888:	4603      	mov	r3, r0
 800688a:	4642      	mov	r2, r8
 800688c:	189b      	adds	r3, r3, r2
 800688e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006892:	464b      	mov	r3, r9
 8006894:	460a      	mov	r2, r1
 8006896:	eb42 0303 	adc.w	r3, r2, r3
 800689a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800689e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80068b8:	4649      	mov	r1, r9
 80068ba:	008b      	lsls	r3, r1, #2
 80068bc:	4641      	mov	r1, r8
 80068be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c2:	4641      	mov	r1, r8
 80068c4:	008a      	lsls	r2, r1, #2
 80068c6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80068ca:	f7fa f9ed 	bl	8000ca8 <__aeabi_uldivmod>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4611      	mov	r1, r2
 80068d4:	4b3b      	ldr	r3, [pc, #236]	@ (80069c4 <LL_USART_SetBaudRate+0x458>)
 80068d6:	fba3 2301 	umull	r2, r3, r3, r1
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2264      	movs	r2, #100	@ 0x64
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	1acb      	subs	r3, r1, r3
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	3332      	adds	r3, #50	@ 0x32
 80068e8:	4a36      	ldr	r2, [pc, #216]	@ (80069c4 <LL_USART_SetBaudRate+0x458>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	4423      	add	r3, r4
 80068fa:	b29c      	uxth	r4, r3
 80068fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006900:	2200      	movs	r2, #0
 8006902:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006904:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006906:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800690a:	4642      	mov	r2, r8
 800690c:	464b      	mov	r3, r9
 800690e:	1891      	adds	r1, r2, r2
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	415b      	adcs	r3, r3
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800691a:	4641      	mov	r1, r8
 800691c:	1851      	adds	r1, r2, r1
 800691e:	6039      	str	r1, [r7, #0]
 8006920:	4649      	mov	r1, r9
 8006922:	414b      	adcs	r3, r1
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006932:	4659      	mov	r1, fp
 8006934:	00cb      	lsls	r3, r1, #3
 8006936:	4651      	mov	r1, sl
 8006938:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800693c:	4651      	mov	r1, sl
 800693e:	00ca      	lsls	r2, r1, #3
 8006940:	4610      	mov	r0, r2
 8006942:	4619      	mov	r1, r3
 8006944:	4603      	mov	r3, r0
 8006946:	4642      	mov	r2, r8
 8006948:	189b      	adds	r3, r3, r2
 800694a:	673b      	str	r3, [r7, #112]	@ 0x70
 800694c:	464b      	mov	r3, r9
 800694e:	460a      	mov	r2, r1
 8006950:	eb42 0303 	adc.w	r3, r2, r3
 8006954:	677b      	str	r3, [r7, #116]	@ 0x74
 8006956:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800695a:	2200      	movs	r2, #0
 800695c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800695e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800696c:	4649      	mov	r1, r9
 800696e:	008b      	lsls	r3, r1, #2
 8006970:	4641      	mov	r1, r8
 8006972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006976:	4641      	mov	r1, r8
 8006978:	008a      	lsls	r2, r1, #2
 800697a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800697e:	f7fa f993 	bl	8000ca8 <__aeabi_uldivmod>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4b0f      	ldr	r3, [pc, #60]	@ (80069c4 <LL_USART_SetBaudRate+0x458>)
 8006988:	fba3 1302 	umull	r1, r3, r3, r2
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	2164      	movs	r1, #100	@ 0x64
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	3332      	adds	r3, #50	@ 0x32
 800699a:	4a0a      	ldr	r2, [pc, #40]	@ (80069c4 <LL_USART_SetBaudRate+0x458>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f003 030f 	and.w	r3, r3, #15
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	4423      	add	r3, r4
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069b4:	609a      	str	r2, [r3, #8]
}
 80069b6:	bf00      	nop
 80069b8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069bc:	46bd      	mov	sp, r7
 80069be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069c2:	bf00      	nop
 80069c4:	51eb851f 	.word	0x51eb851f

080069c8 <LL_GPIO_IsOutputPinSet>:
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695a      	ldr	r2, [r3, #20]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	4013      	ands	r3, r2
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	bf0c      	ite	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	2300      	movne	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <LL_GPIO_SetOutputPin>:
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	619a      	str	r2, [r3, #24]
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <LL_GPIO_ResetOutputPin>:
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	041a      	lsls	r2, r3, #16
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	619a      	str	r2, [r3, #24]
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <command_init>:
		command_task_update                // taskFunction;
	}
};

void	command_init(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8006a32:	f7fa ffe3 	bl	80019fc <Ringbuf_init>

//	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 8006a36:	22ff      	movs	r2, #255	@ 0xff
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4838      	ldr	r0, [pc, #224]	@ (8006b1c <command_init+0xf0>)
 8006a3c:	f009 fa57 	bl	800feee <memset>
	s_commandBufferIndex = 0;
 8006a40:	4b37      	ldr	r3, [pc, #220]	@ (8006b20 <command_init+0xf4>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]
//	Uart_sendstring(UART5,"\r\n");
//	Uart_sendstring(UART5,"> CPOC FIRMWARE V1.2.0 \r\n");
//	Uart_sendstring(UART5,"\r\n");

    Uart_sendstring(UART4, "\r\n");
 8006a46:	4937      	ldr	r1, [pc, #220]	@ (8006b24 <command_init+0xf8>)
 8006a48:	4837      	ldr	r0, [pc, #220]	@ (8006b28 <command_init+0xfc>)
 8006a4a:	f7fb fac7 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(UART4, "> CPOC FIRMWARE V1.2.0 \r\n");
 8006a4e:	4937      	ldr	r1, [pc, #220]	@ (8006b2c <command_init+0x100>)
 8006a50:	4835      	ldr	r0, [pc, #212]	@ (8006b28 <command_init+0xfc>)
 8006a52:	f7fb fac3 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(UART4, "\r\n");
 8006a56:	4933      	ldr	r1, [pc, #204]	@ (8006b24 <command_init+0xf8>)
 8006a58:	4833      	ldr	r0, [pc, #204]	@ (8006b28 <command_init+0xfc>)
 8006a5a:	f7fb fabf 	bl	8001fdc <Uart_sendstring>

    Uart_sendstring(USART2, "B");
 8006a5e:	4934      	ldr	r1, [pc, #208]	@ (8006b30 <command_init+0x104>)
 8006a60:	4834      	ldr	r0, [pc, #208]	@ (8006b34 <command_init+0x108>)
 8006a62:	f7fb fabb 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n");
 8006a66:	492f      	ldr	r1, [pc, #188]	@ (8006b24 <command_init+0xf8>)
 8006a68:	4832      	ldr	r0, [pc, #200]	@ (8006b34 <command_init+0x108>)
 8006a6a:	f7fb fab7 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "> CPOC FIRMWARE V1.2.0 \r\n");
 8006a6e:	492f      	ldr	r1, [pc, #188]	@ (8006b2c <command_init+0x100>)
 8006a70:	4830      	ldr	r0, [pc, #192]	@ (8006b34 <command_init+0x108>)
 8006a72:	f7fb fab3 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n");
 8006a76:	492b      	ldr	r1, [pc, #172]	@ (8006b24 <command_init+0xf8>)
 8006a78:	482e      	ldr	r0, [pc, #184]	@ (8006b34 <command_init+0x108>)
 8006a7a:	f7fb faaf 	bl	8001fdc <Uart_sendstring>

    command_send_splash();
 8006a7e:	f000 ffdb 	bl	8007a38 <command_send_splash>
	tCmdLineEntry *pEntry;


//	Uart_sendstring(UART5, "\nStart with <help_xxxx> command\r\n");
//	Uart_sendstring(UART5, "-------------------------------------\r\n");
    Uart_sendstring(UART4, "\nStart with <help_xxxx> command\r\n");
 8006a82:	492d      	ldr	r1, [pc, #180]	@ (8006b38 <command_init+0x10c>)
 8006a84:	4828      	ldr	r0, [pc, #160]	@ (8006b28 <command_init+0xfc>)
 8006a86:	f7fb faa9 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(UART4, "-------------------------------------\r\n");
 8006a8a:	492c      	ldr	r1, [pc, #176]	@ (8006b3c <command_init+0x110>)
 8006a8c:	4826      	ldr	r0, [pc, #152]	@ (8006b28 <command_init+0xfc>)
 8006a8e:	f7fb faa5 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "\nStart with <help_xxxx> command\r\n");
 8006a92:	4929      	ldr	r1, [pc, #164]	@ (8006b38 <command_init+0x10c>)
 8006a94:	4827      	ldr	r0, [pc, #156]	@ (8006b34 <command_init+0x108>)
 8006a96:	f7fb faa1 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "-------------------------------------\r\n");
 8006a9a:	4928      	ldr	r1, [pc, #160]	@ (8006b3c <command_init+0x110>)
 8006a9c:	4825      	ldr	r0, [pc, #148]	@ (8006b34 <command_init+0x108>)
 8006a9e:	f7fb fa9d 	bl	8001fdc <Uart_sendstring>

	pEntry = &g_psCmdTable[0];
 8006aa2:	4b27      	ldr	r3, [pc, #156]	@ (8006b40 <command_init+0x114>)
 8006aa4:	607b      	str	r3, [r7, #4]

	while (pEntry->pcCmd) {
 8006aa6:	e026      	b.n	8006af6 <command_init+0xca>
//		Uart_sendstring(UART5, pEntry->pcCmd);
//		Uart_sendstring(UART5, pEntry->pcHelp);
//		Uart_sendstring(UART5, "\r\n");

        Uart_sendstring(UART4, pEntry->pcCmd);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4619      	mov	r1, r3
 8006aae:	481e      	ldr	r0, [pc, #120]	@ (8006b28 <command_init+0xfc>)
 8006ab0:	f7fb fa94 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(UART4, pEntry->pcHelp);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	481b      	ldr	r0, [pc, #108]	@ (8006b28 <command_init+0xfc>)
 8006abc:	f7fb fa8e 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(UART4, "\r\n");
 8006ac0:	4918      	ldr	r1, [pc, #96]	@ (8006b24 <command_init+0xf8>)
 8006ac2:	4819      	ldr	r0, [pc, #100]	@ (8006b28 <command_init+0xfc>)
 8006ac4:	f7fb fa8a 	bl	8001fdc <Uart_sendstring>

        Uart_sendstring(USART2, pEntry->pcCmd);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4619      	mov	r1, r3
 8006ace:	4819      	ldr	r0, [pc, #100]	@ (8006b34 <command_init+0x108>)
 8006ad0:	f7fb fa84 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(USART2, pEntry->pcHelp);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4816      	ldr	r0, [pc, #88]	@ (8006b34 <command_init+0x108>)
 8006adc:	f7fb fa7e 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(USART2, "\r\n");
 8006ae0:	4910      	ldr	r1, [pc, #64]	@ (8006b24 <command_init+0xf8>)
 8006ae2:	4814      	ldr	r0, [pc, #80]	@ (8006b34 <command_init+0x108>)
 8006ae4:	f7fb fa7a 	bl	8001fdc <Uart_sendstring>

	    if (pEntry == &g_psCmdTable[12]) {
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a16      	ldr	r2, [pc, #88]	@ (8006b44 <command_init+0x118>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d007      	beq.n	8006b00 <command_init+0xd4>
	        break;
	    }
	    pEntry++;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	330c      	adds	r3, #12
 8006af4:	607b      	str	r3, [r7, #4]
	while (pEntry->pcCmd) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d4      	bne.n	8006aa8 <command_init+0x7c>
 8006afe:	e000      	b.n	8006b02 <command_init+0xd6>
	        break;
 8006b00:	bf00      	nop
	}

//	Uart_sendstring(UART5, "\r\n> ");
    Uart_sendstring(UART4, "\r\n> ");
 8006b02:	4911      	ldr	r1, [pc, #68]	@ (8006b48 <command_init+0x11c>)
 8006b04:	4808      	ldr	r0, [pc, #32]	@ (8006b28 <command_init+0xfc>)
 8006b06:	f7fb fa69 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n> ");
 8006b0a:	490f      	ldr	r1, [pc, #60]	@ (8006b48 <command_init+0x11c>)
 8006b0c:	4809      	ldr	r0, [pc, #36]	@ (8006b34 <command_init+0x108>)
 8006b0e:	f7fb fa65 	bl	8001fdc <Uart_sendstring>
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	200058fc 	.word	0x200058fc
 8006b20:	200059fb 	.word	0x200059fb
 8006b24:	08014bb4 	.word	0x08014bb4
 8006b28:	40004c00 	.word	0x40004c00
 8006b2c:	08014bb8 	.word	0x08014bb8
 8006b30:	08014bd4 	.word	0x08014bd4
 8006b34:	40004400 	.word	0x40004400
 8006b38:	08014bd8 	.word	0x08014bd8
 8006b3c:	08014bfc 	.word	0x08014bfc
 8006b40:	20000094 	.word	0x20000094
 8006b44:	20000124 	.word	0x20000124
 8006b48:	08014c24 	.word	0x08014c24

08006b4c <command_task_update>:
volatile uint8_t rs422_report_enable = 0;
void process_command(USART_TypeDef* USARTx, char rxData);


static void command_task_update(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
    char rxData;


    while (IsDataAvailable(UART4) || IsDataAvailable(USART2))
 8006b52:	e029      	b.n	8006ba8 <command_task_update+0x5c>
//            rxData = Uart_read(UART5);
//            Uart_write(UART5, rxData);
//            process_command(UART5, rxData);
//        }

        if (IsDataAvailable(UART4)) {
 8006b54:	481d      	ldr	r0, [pc, #116]	@ (8006bcc <command_task_update+0x80>)
 8006b56:	f7fb f9ed 	bl	8001f34 <IsDataAvailable>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <command_task_update+0x32>
            rxData = Uart_read(UART4);
 8006b60:	481a      	ldr	r0, [pc, #104]	@ (8006bcc <command_task_update+0x80>)
 8006b62:	f7fb f82f 	bl	8001bc4 <Uart_read>
 8006b66:	4603      	mov	r3, r0
 8006b68:	71fb      	strb	r3, [r7, #7]
            Uart_write(UART4, rxData);
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4817      	ldr	r0, [pc, #92]	@ (8006bcc <command_task_update+0x80>)
 8006b70:	f7fb f8ea 	bl	8001d48 <Uart_write>
            process_command(UART4, rxData);
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	4619      	mov	r1, r3
 8006b78:	4814      	ldr	r0, [pc, #80]	@ (8006bcc <command_task_update+0x80>)
 8006b7a:	f000 f82b 	bl	8006bd4 <process_command>
        }

        if (IsDataAvailable(USART2)) {
 8006b7e:	4814      	ldr	r0, [pc, #80]	@ (8006bd0 <command_task_update+0x84>)
 8006b80:	f7fb f9d8 	bl	8001f34 <IsDataAvailable>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00e      	beq.n	8006ba8 <command_task_update+0x5c>
            rxData = Uart_read(USART2);
 8006b8a:	4811      	ldr	r0, [pc, #68]	@ (8006bd0 <command_task_update+0x84>)
 8006b8c:	f7fb f81a 	bl	8001bc4 <Uart_read>
 8006b90:	4603      	mov	r3, r0
 8006b92:	71fb      	strb	r3, [r7, #7]
            Uart_write(USART2, rxData);
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	4619      	mov	r1, r3
 8006b98:	480d      	ldr	r0, [pc, #52]	@ (8006bd0 <command_task_update+0x84>)
 8006b9a:	f7fb f8d5 	bl	8001d48 <Uart_write>
            process_command(USART2, rxData);
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	480b      	ldr	r0, [pc, #44]	@ (8006bd0 <command_task_update+0x84>)
 8006ba4:	f000 f816 	bl	8006bd4 <process_command>
    while (IsDataAvailable(UART4) || IsDataAvailable(USART2))
 8006ba8:	4808      	ldr	r0, [pc, #32]	@ (8006bcc <command_task_update+0x80>)
 8006baa:	f7fb f9c3 	bl	8001f34 <IsDataAvailable>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1cf      	bne.n	8006b54 <command_task_update+0x8>
 8006bb4:	4806      	ldr	r0, [pc, #24]	@ (8006bd0 <command_task_update+0x84>)
 8006bb6:	f7fb f9bd 	bl	8001f34 <IsDataAvailable>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1c9      	bne.n	8006b54 <command_task_update+0x8>
        }
    }
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40004c00 	.word	0x40004c00
 8006bd0:	40004400 	.word	0x40004400

08006bd4 <process_command>:

void process_command(USART_TypeDef* USARTx, char rxData)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
    int8_t ret_val;
    if (rxData == 27)  // ASCII code for ESC key
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	2b1b      	cmp	r3, #27
 8006be4:	d10c      	bne.n	8006c00 <process_command+0x2c>
    {
    	auto_report_enabled = 0;
 8006be6:	4b31      	ldr	r3, [pc, #196]	@ (8006cac <process_command+0xd8>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
        rs422_report_enable = 0;
 8006bec:	4b30      	ldr	r3, [pc, #192]	@ (8006cb0 <process_command+0xdc>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
        rf_report_enable = 0;
 8006bf2:	4b30      	ldr	r3, [pc, #192]	@ (8006cb4 <process_command+0xe0>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
        gps_report_enable = 0;
 8006bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8006cb8 <process_command+0xe4>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
        return;
 8006bfe:	e052      	b.n	8006ca6 <process_command+0xd2>
    }

    if ((rxData == '\r') || (rxData == '\n'))
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	2b0d      	cmp	r3, #13
 8006c04:	d002      	beq.n	8006c0c <process_command+0x38>
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	2b0a      	cmp	r3, #10
 8006c0a:	d12f      	bne.n	8006c6c <process_command+0x98>
    {
        if (s_commandBufferIndex > 0)
 8006c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006cbc <process_command+0xe8>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d026      	beq.n	8006c62 <process_command+0x8e>
        {
            s_commandBuffer[s_commandBufferIndex] = 0;
 8006c14:	4b29      	ldr	r3, [pc, #164]	@ (8006cbc <process_command+0xe8>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4b29      	ldr	r3, [pc, #164]	@ (8006cc0 <process_command+0xec>)
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	5499      	strb	r1, [r3, r2]
            s_commandBufferIndex++;
 8006c20:	4b26      	ldr	r3, [pc, #152]	@ (8006cbc <process_command+0xe8>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	3301      	adds	r3, #1
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	4b24      	ldr	r3, [pc, #144]	@ (8006cbc <process_command+0xe8>)
 8006c2a:	701a      	strb	r2, [r3, #0]
            ret_val = CmdLineProcess(s_commandBuffer,USARTx);
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4824      	ldr	r0, [pc, #144]	@ (8006cc0 <process_command+0xec>)
 8006c30:	f7ff fc04 	bl	800643c <CmdLineProcess>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73fb      	strb	r3, [r7, #15]
            s_commandBufferIndex = 0;
 8006c38:	4b20      	ldr	r3, [pc, #128]	@ (8006cbc <process_command+0xe8>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
            Uart_sendstring(USARTx, "\r\n> ");
 8006c3e:	4921      	ldr	r1, [pc, #132]	@ (8006cc4 <process_command+0xf0>)
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fb f9cb 	bl	8001fdc <Uart_sendstring>
            Uart_sendstring(USARTx, ErrorCode[ret_val]);
 8006c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc8 <process_command+0xf4>)
 8006c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fb f9c2 	bl	8001fdc <Uart_sendstring>
            Uart_sendstring(USARTx, "> ");
 8006c58:	491c      	ldr	r1, [pc, #112]	@ (8006ccc <process_command+0xf8>)
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fb f9be 	bl	8001fdc <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 8006c60:	e021      	b.n	8006ca6 <process_command+0xd2>
        }
        else
        {
            Uart_sendstring(USARTx, "\r\n> ");
 8006c62:	4918      	ldr	r1, [pc, #96]	@ (8006cc4 <process_command+0xf0>)
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fb f9b9 	bl	8001fdc <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 8006c6a:	e01c      	b.n	8006ca6 <process_command+0xd2>
        }
    }
    else if ((rxData == 8) || (rxData == 127))
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d002      	beq.n	8006c78 <process_command+0xa4>
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c76:	d10a      	bne.n	8006c8e <process_command+0xba>
    {
        if (s_commandBufferIndex > 0)
 8006c78:	4b10      	ldr	r3, [pc, #64]	@ (8006cbc <process_command+0xe8>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d012      	beq.n	8006ca6 <process_command+0xd2>
        {
            s_commandBufferIndex--;
 8006c80:	4b0e      	ldr	r3, [pc, #56]	@ (8006cbc <process_command+0xe8>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	4b0c      	ldr	r3, [pc, #48]	@ (8006cbc <process_command+0xe8>)
 8006c8a:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > 0)
 8006c8c:	e00b      	b.n	8006ca6 <process_command+0xd2>
        }
    }
    else
    {
        s_commandBuffer[s_commandBufferIndex] = rxData;
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cbc <process_command+0xe8>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	4619      	mov	r1, r3
 8006c94:	4a0a      	ldr	r2, [pc, #40]	@ (8006cc0 <process_command+0xec>)
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	5453      	strb	r3, [r2, r1]
        s_commandBufferIndex++;
 8006c9a:	4b08      	ldr	r3, [pc, #32]	@ (8006cbc <process_command+0xe8>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	4b06      	ldr	r3, [pc, #24]	@ (8006cbc <process_command+0xe8>)
 8006ca4:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > COMMAND_MAX_LENGTH)
        {
            s_commandBufferIndex = 0;
        }
    }
}
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	200059fc 	.word	0x200059fc
 8006cb0:	200059fd 	.word	0x200059fd
 8006cb4:	200059fe 	.word	0x200059fe
 8006cb8:	20005a00 	.word	0x20005a00
 8006cbc:	200059fb 	.word	0x200059fb
 8006cc0:	200058fc 	.word	0x200058fc
 8006cc4:	08014c24 	.word	0x08014c24
 8006cc8:	2000007c 	.word	0x2000007c
 8006ccc:	08014c2c 	.word	0x08014c2c

08006cd0 <Cmd_help>:

//USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];

int Cmd_help(int argc, char *argv[]) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
    tCmdLineEntry *pEntry;
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60bb      	str	r3, [r7, #8]

    Uart_sendstring(USARTx, "\nSimple commands\r\n");
 8006cec:	4916      	ldr	r1, [pc, #88]	@ (8006d48 <Cmd_help+0x78>)
 8006cee:	68b8      	ldr	r0, [r7, #8]
 8006cf0:	f7fb f974 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USARTx, "------------------\r\n");
 8006cf4:	4915      	ldr	r1, [pc, #84]	@ (8006d4c <Cmd_help+0x7c>)
 8006cf6:	68b8      	ldr	r0, [r7, #8]
 8006cf8:	f7fb f970 	bl	8001fdc <Uart_sendstring>
    pEntry = &g_psCmdTable[0];
 8006cfc:	4b14      	ldr	r3, [pc, #80]	@ (8006d50 <Cmd_help+0x80>)
 8006cfe:	60fb      	str	r3, [r7, #12]

    while (pEntry->pcCmd) {
 8006d00:	e016      	b.n	8006d30 <Cmd_help+0x60>
        Uart_sendstring(USARTx, pEntry->pcCmd);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4619      	mov	r1, r3
 8006d08:	68b8      	ldr	r0, [r7, #8]
 8006d0a:	f7fb f967 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(USARTx, pEntry->pcHelp);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	4619      	mov	r1, r3
 8006d14:	68b8      	ldr	r0, [r7, #8]
 8006d16:	f7fb f961 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(USARTx, "\r\n");
 8006d1a:	490e      	ldr	r1, [pc, #56]	@ (8006d54 <Cmd_help+0x84>)
 8006d1c:	68b8      	ldr	r0, [r7, #8]
 8006d1e:	f7fb f95d 	bl	8001fdc <Uart_sendstring>
        if (pEntry == &g_psCmdTable[12]) {
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4a0c      	ldr	r2, [pc, #48]	@ (8006d58 <Cmd_help+0x88>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <Cmd_help+0x6a>
            break;
        }
        pEntry++;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	60fb      	str	r3, [r7, #12]
    while (pEntry->pcCmd) {
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e4      	bne.n	8006d02 <Cmd_help+0x32>
 8006d38:	e000      	b.n	8006d3c <Cmd_help+0x6c>
            break;
 8006d3a:	bf00      	nop
    }

    return (CMDLINE_OK);
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	08014c30 	.word	0x08014c30
 8006d4c:	08014c44 	.word	0x08014c44
 8006d50:	20000094 	.word	0x20000094
 8006d54:	08014bb4 	.word	0x08014bb4
 8006d58:	20000124 	.word	0x20000124

08006d5c <Cmd_help_all>:

// 9table <-> 8 o day
int Cmd_help_all(int argc, char *argv[]) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	4413      	add	r3, r2
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60bb      	str	r3, [r7, #8]
	Uart_sendstring(USARTx, "\nAvailable commands\r\n");
 8006d78:	4915      	ldr	r1, [pc, #84]	@ (8006dd0 <Cmd_help_all+0x74>)
 8006d7a:	68b8      	ldr	r0, [r7, #8]
 8006d7c:	f7fb f92e 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USARTx, "------------------\r\n");
 8006d80:	4914      	ldr	r1, [pc, #80]	@ (8006dd4 <Cmd_help_all+0x78>)
 8006d82:	68b8      	ldr	r0, [r7, #8]
 8006d84:	f7fb f92a 	bl	8001fdc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
 8006d88:	4b13      	ldr	r3, [pc, #76]	@ (8006dd8 <Cmd_help_all+0x7c>)
 8006d8a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006d8c:	e012      	b.n	8006db4 <Cmd_help_all+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4619      	mov	r1, r3
 8006d94:	68b8      	ldr	r0, [r7, #8]
 8006d96:	f7fb f921 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	68b8      	ldr	r0, [r7, #8]
 8006da2:	f7fb f91b 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006da6:	490d      	ldr	r1, [pc, #52]	@ (8006ddc <Cmd_help_all+0x80>)
 8006da8:	68b8      	ldr	r0, [r7, #8]
 8006daa:	f7fb f917 	bl	8001fdc <Uart_sendstring>
//	        Uart_sendstring(USARTx, "\n--------------IOU Command List-------------\r\n");
//	    }


		// Advance to the next entry in the table.
		pEntry++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	330c      	adds	r3, #12
 8006db2:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e8      	bne.n	8006d8e <Cmd_help_all+0x32>

	}
	Uart_sendstring(USARTx, "--------------    END    -------------\r\n");
 8006dbc:	4908      	ldr	r1, [pc, #32]	@ (8006de0 <Cmd_help_all+0x84>)
 8006dbe:	68b8      	ldr	r0, [r7, #8]
 8006dc0:	f7fb f90c 	bl	8001fdc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	08014c5c 	.word	0x08014c5c
 8006dd4:	08014c44 	.word	0x08014c44
 8006dd8:	20000094 	.word	0x20000094
 8006ddc:	08014bb4 	.word	0x08014bb4
 8006de0:	08014c74 	.word	0x08014c74

08006de4 <Cmd_help_cpoc>:

int Cmd_help_cpoc(int argc, char *argv[]) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006df4:	3b01      	subs	r3, #1
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CPOC Command List-------------\r\n");
 8006e00:	4914      	ldr	r1, [pc, #80]	@ (8006e54 <Cmd_help_cpoc+0x70>)
 8006e02:	68b8      	ldr	r0, [r7, #8]
 8006e04:	f7fb f8ea 	bl	8001fdc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[13];
 8006e08:	4b13      	ldr	r3, [pc, #76]	@ (8006e58 <Cmd_help_cpoc+0x74>)
 8006e0a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006e0c:	e016      	b.n	8006e3c <Cmd_help_cpoc+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4619      	mov	r1, r3
 8006e14:	68b8      	ldr	r0, [r7, #8]
 8006e16:	f7fb f8e1 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	68b8      	ldr	r0, [r7, #8]
 8006e22:	f7fb f8db 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006e26:	490d      	ldr	r1, [pc, #52]	@ (8006e5c <Cmd_help_cpoc+0x78>)
 8006e28:	68b8      	ldr	r0, [r7, #8]
 8006e2a:	f7fb f8d7 	bl	8001fdc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[27]) {
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4a0b      	ldr	r2, [pc, #44]	@ (8006e60 <Cmd_help_cpoc+0x7c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d007      	beq.n	8006e46 <Cmd_help_cpoc+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e4      	bne.n	8006e0e <Cmd_help_cpoc+0x2a>
 8006e44:	e000      	b.n	8006e48 <Cmd_help_cpoc+0x64>
	        break;
 8006e46:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006e48:	2300      	movs	r3, #0

}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	08014ca0 	.word	0x08014ca0
 8006e58:	20000130 	.word	0x20000130
 8006e5c:	08014bb4 	.word	0x08014bb4
 8006e60:	200001d8 	.word	0x200001d8

08006e64 <Cmd_help_pmu>:
int Cmd_help_pmu(int argc, char *argv[]) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e74:	3b01      	subs	r3, #1
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PMU Command List-------------\r\n");
 8006e80:	4914      	ldr	r1, [pc, #80]	@ (8006ed4 <Cmd_help_pmu+0x70>)
 8006e82:	68b8      	ldr	r0, [r7, #8]
 8006e84:	f7fb f8aa 	bl	8001fdc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[28];
 8006e88:	4b13      	ldr	r3, [pc, #76]	@ (8006ed8 <Cmd_help_pmu+0x74>)
 8006e8a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006e8c:	e016      	b.n	8006ebc <Cmd_help_pmu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	68b8      	ldr	r0, [r7, #8]
 8006e96:	f7fb f8a1 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	68b8      	ldr	r0, [r7, #8]
 8006ea2:	f7fb f89b 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006ea6:	490d      	ldr	r1, [pc, #52]	@ (8006edc <Cmd_help_pmu+0x78>)
 8006ea8:	68b8      	ldr	r0, [r7, #8]
 8006eaa:	f7fb f897 	bl	8001fdc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[34]) {
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8006ee0 <Cmd_help_pmu+0x7c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d007      	beq.n	8006ec6 <Cmd_help_pmu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e4      	bne.n	8006e8e <Cmd_help_pmu+0x2a>
 8006ec4:	e000      	b.n	8006ec8 <Cmd_help_pmu+0x64>
	        break;
 8006ec6:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	08014cd0 	.word	0x08014cd0
 8006ed8:	200001e4 	.word	0x200001e4
 8006edc:	08014bb4 	.word	0x08014bb4
 8006ee0:	2000022c 	.word	0x2000022c

08006ee4 <Cmd_help_pdu>:
int Cmd_help_pdu(int argc, char *argv[]) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	4413      	add	r3, r2
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PDU Command List-------------\r\n");
 8006f00:	4914      	ldr	r1, [pc, #80]	@ (8006f54 <Cmd_help_pdu+0x70>)
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f7fb f86a 	bl	8001fdc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[35];
 8006f08:	4b13      	ldr	r3, [pc, #76]	@ (8006f58 <Cmd_help_pdu+0x74>)
 8006f0a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006f0c:	e016      	b.n	8006f3c <Cmd_help_pdu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4619      	mov	r1, r3
 8006f14:	68b8      	ldr	r0, [r7, #8]
 8006f16:	f7fb f861 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68b8      	ldr	r0, [r7, #8]
 8006f22:	f7fb f85b 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006f26:	490d      	ldr	r1, [pc, #52]	@ (8006f5c <Cmd_help_pdu+0x78>)
 8006f28:	68b8      	ldr	r0, [r7, #8]
 8006f2a:	f7fb f857 	bl	8001fdc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[40]) {
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a0b      	ldr	r2, [pc, #44]	@ (8006f60 <Cmd_help_pdu+0x7c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d007      	beq.n	8006f46 <Cmd_help_pdu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e4      	bne.n	8006f0e <Cmd_help_pdu+0x2a>
 8006f44:	e000      	b.n	8006f48 <Cmd_help_pdu+0x64>
	        break;
 8006f46:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	08014d00 	.word	0x08014d00
 8006f58:	20000238 	.word	0x20000238
 8006f5c:	08014bb4 	.word	0x08014bb4
 8006f60:	20000274 	.word	0x20000274

08006f64 <Cmd_help_cam>:
int Cmd_help_cam(int argc, char *argv[]) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f74:	3b01      	subs	r3, #1
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CAM Command List-------------\r\n");
 8006f80:	4914      	ldr	r1, [pc, #80]	@ (8006fd4 <Cmd_help_cam+0x70>)
 8006f82:	68b8      	ldr	r0, [r7, #8]
 8006f84:	f7fb f82a 	bl	8001fdc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[41];
 8006f88:	4b13      	ldr	r3, [pc, #76]	@ (8006fd8 <Cmd_help_cam+0x74>)
 8006f8a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006f8c:	e016      	b.n	8006fbc <Cmd_help_cam+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4619      	mov	r1, r3
 8006f94:	68b8      	ldr	r0, [r7, #8]
 8006f96:	f7fb f821 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	68b8      	ldr	r0, [r7, #8]
 8006fa2:	f7fb f81b 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006fa6:	490d      	ldr	r1, [pc, #52]	@ (8006fdc <Cmd_help_cam+0x78>)
 8006fa8:	68b8      	ldr	r0, [r7, #8]
 8006faa:	f7fb f817 	bl	8001fdc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[41]) {
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4a09      	ldr	r2, [pc, #36]	@ (8006fd8 <Cmd_help_cam+0x74>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d007      	beq.n	8006fc6 <Cmd_help_cam+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	330c      	adds	r3, #12
 8006fba:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e4      	bne.n	8006f8e <Cmd_help_cam+0x2a>
 8006fc4:	e000      	b.n	8006fc8 <Cmd_help_cam+0x64>
	        break;
 8006fc6:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	08014d30 	.word	0x08014d30
 8006fd8:	20000280 	.word	0x20000280
 8006fdc:	08014bb4 	.word	0x08014bb4

08006fe0 <Cmd_help_iou>:
int Cmd_help_iou(int argc, char *argv[]) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------IOU Command List-------------\r\n");
 8006ffc:	4914      	ldr	r1, [pc, #80]	@ (8007050 <Cmd_help_iou+0x70>)
 8006ffe:	68b8      	ldr	r0, [r7, #8]
 8007000:	f7fa ffec 	bl	8001fdc <Uart_sendstring>


	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[42];
 8007004:	4b13      	ldr	r3, [pc, #76]	@ (8007054 <Cmd_help_iou+0x74>)
 8007006:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8007008:	e016      	b.n	8007038 <Cmd_help_iou+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4619      	mov	r1, r3
 8007010:	68b8      	ldr	r0, [r7, #8]
 8007012:	f7fa ffe3 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	4619      	mov	r1, r3
 800701c:	68b8      	ldr	r0, [r7, #8]
 800701e:	f7fa ffdd 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8007022:	490d      	ldr	r1, [pc, #52]	@ (8007058 <Cmd_help_iou+0x78>)
 8007024:	68b8      	ldr	r0, [r7, #8]
 8007026:	f7fa ffd9 	bl	8001fdc <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[23]) {
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4a0b      	ldr	r2, [pc, #44]	@ (800705c <Cmd_help_iou+0x7c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d007      	beq.n	8007042 <Cmd_help_iou+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	330c      	adds	r3, #12
 8007036:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e4      	bne.n	800700a <Cmd_help_iou+0x2a>
 8007040:	e000      	b.n	8007044 <Cmd_help_iou+0x64>
	        break;
 8007042:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	08014d60 	.word	0x08014d60
 8007054:	2000028c 	.word	0x2000028c
 8007058:	08014bb4 	.word	0x08014bb4
 800705c:	200001a8 	.word	0x200001a8

08007060 <NotYetDefine>:





int NotYetDefine(int argc, char *argv[]) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007070:	3b01      	subs	r3, #1
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	4413      	add	r3, r2
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]
	Uart_sendstring(USARTx, "\nThis function is not defined yet \r\n");
 800707c:	4904      	ldr	r1, [pc, #16]	@ (8007090 <NotYetDefine+0x30>)
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f7fa ffac 	bl	8001fdc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	08014d90 	.word	0x08014d90

08007094 <Cmd_splash>:

int Cmd_splash(int argc, char *argv[]) {
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
	command_send_splash();
 800709e:	f000 fccb 	bl	8007a38 <command_send_splash>
	// Return success.
	return (CMDLINE_OK);
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <Cmd_status_now>:

int Cmd_status_now(int argc, char *argv[]){
 80070ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ae:	b0a5      	sub	sp, #148	@ 0x94
 80070b0:	af04      	add	r7, sp, #16
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070bc:	3b01      	subs	r3, #1
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	4413      	add	r3, r2
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint8_t day, date, month, year, hour, min, sec;
    float temp;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 80070c8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80070cc:	f107 0275 	add.w	r2, r7, #117	@ 0x75
 80070d0:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 80070d4:	f107 0077 	add.w	r0, r7, #119	@ 0x77
 80070d8:	f107 0371 	add.w	r3, r7, #113	@ 0x71
 80070dc:	9302      	str	r3, [sp, #8]
 80070de:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	4623      	mov	r3, r4
 80070ec:	f7fa f9ba 	bl	8001464 <DS3231_GetDateTime>

    // Get current temperature from DS3231
    temp = DS3231_GetTemperature();
 80070f0:	f7fa fa60 	bl	80015b4 <DS3231_GetTemperature>
 80070f4:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78

    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 80070f8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80070fc:	461d      	mov	r5, r3
 80070fe:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8007102:	461e      	mov	r6, r3
 8007104:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007108:	461a      	mov	r2, r3
 800710a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800710e:	4619      	mov	r1, r3
 8007110:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8007114:	461c      	mov	r4, r3
 8007116:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800711a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800711e:	f107 000c 	add.w	r0, r7, #12
 8007122:	9303      	str	r3, [sp, #12]
 8007124:	9402      	str	r4, [sp, #8]
 8007126:	9101      	str	r1, [sp, #4]
 8007128:	9200      	str	r2, [sp, #0]
 800712a:	4633      	mov	r3, r6
 800712c:	462a      	mov	r2, r5
 800712e:	4931      	ldr	r1, [pc, #196]	@ (80071f4 <Cmd_status_now+0x148>)
 8007130:	f008 fe7a 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007134:	f107 030c 	add.w	r3, r7, #12
 8007138:	4619      	mov	r1, r3
 800713a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800713c:	f7fa ff4e 	bl	8001fdc <Uart_sendstring>

    sprintf(buffer, "Temperature: %.2f *C\r\n", temp);
 8007140:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8007142:	f7f9 fa11 	bl	8000568 <__aeabi_f2d>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	f107 000c 	add.w	r0, r7, #12
 800714e:	492a      	ldr	r1, [pc, #168]	@ (80071f8 <Cmd_status_now+0x14c>)
 8007150:	f008 fe6a 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007154:	f107 030c 	add.w	r3, r7, #12
 8007158:	4619      	mov	r1, r3
 800715a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800715c:	f7fa ff3e 	bl	8001fdc <Uart_sendstring>
    sprintf(buffer, "HardwareVer: CPOC Hardware 1.2.0\r\n");
 8007160:	f107 030c 	add.w	r3, r7, #12
 8007164:	4925      	ldr	r1, [pc, #148]	@ (80071fc <Cmd_status_now+0x150>)
 8007166:	4618      	mov	r0, r3
 8007168:	f008 fe5e 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, buffer);
 800716c:	f107 030c 	add.w	r3, r7, #12
 8007170:	4619      	mov	r1, r3
 8007172:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007174:	f7fa ff32 	bl	8001fdc <Uart_sendstring>
    sprintf(buffer, "FirmwareVer: CPOC Firmware 1.2.0\r\n");
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4920      	ldr	r1, [pc, #128]	@ (8007200 <Cmd_status_now+0x154>)
 800717e:	4618      	mov	r0, r3
 8007180:	f008 fe52 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007184:	f107 030c 	add.w	r3, r7, #12
 8007188:	4619      	mov	r1, r3
 800718a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800718c:	f7fa ff26 	bl	8001fdc <Uart_sendstring>

    if (LL_GPIO_IsOutputPinSet(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin)) {
 8007190:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007194:	481b      	ldr	r0, [pc, #108]	@ (8007204 <Cmd_status_now+0x158>)
 8007196:	f7ff fc17 	bl	80069c8 <LL_GPIO_IsOutputPinSet>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00c      	beq.n	80071ba <Cmd_status_now+0x10e>
        sprintf(buffer, "Enable: RF[OFF]\r\n");
 80071a0:	f107 030c 	add.w	r3, r7, #12
 80071a4:	4918      	ldr	r1, [pc, #96]	@ (8007208 <Cmd_status_now+0x15c>)
 80071a6:	4618      	mov	r0, r3
 80071a8:	f008 fe3e 	bl	800fe28 <siprintf>
        Uart_sendstring(USARTx, buffer);
 80071ac:	f107 030c 	add.w	r3, r7, #12
 80071b0:	4619      	mov	r1, r3
 80071b2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80071b4:	f7fa ff12 	bl	8001fdc <Uart_sendstring>
 80071b8:	e00b      	b.n	80071d2 <Cmd_status_now+0x126>
    } else {
        sprintf(buffer, "Enable: RF[ON]\r\n");
 80071ba:	f107 030c 	add.w	r3, r7, #12
 80071be:	4913      	ldr	r1, [pc, #76]	@ (800720c <Cmd_status_now+0x160>)
 80071c0:	4618      	mov	r0, r3
 80071c2:	f008 fe31 	bl	800fe28 <siprintf>
        Uart_sendstring(USARTx, buffer);
 80071c6:	f107 030c 	add.w	r3, r7, #12
 80071ca:	4619      	mov	r1, r3
 80071cc:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80071ce:	f7fa ff05 	bl	8001fdc <Uart_sendstring>
    }

    sprintf(buffer, "MuxMode: Auto\r\n");
 80071d2:	f107 030c 	add.w	r3, r7, #12
 80071d6:	490e      	ldr	r1, [pc, #56]	@ (8007210 <Cmd_status_now+0x164>)
 80071d8:	4618      	mov	r0, r3
 80071da:	f008 fe25 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, buffer);
 80071de:	f107 030c 	add.w	r3, r7, #12
 80071e2:	4619      	mov	r1, r3
 80071e4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80071e6:	f7fa fef9 	bl	8001fdc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3784      	adds	r7, #132	@ 0x84
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f4:	08014db8 	.word	0x08014db8
 80071f8:	08014ddc 	.word	0x08014ddc
 80071fc:	08014df4 	.word	0x08014df4
 8007200:	08014e18 	.word	0x08014e18
 8007204:	40020400 	.word	0x40020400
 8007208:	08014e3c 	.word	0x08014e3c
 800720c:	08014e50 	.word	0x08014e50
 8007210:	08014e64 	.word	0x08014e64

08007214 <Cmd_set_byte_rs422>:
//uint32_t RS422_PERIOD = 3000;

uint16_t ARRAY_SIZE = 282;

int Cmd_set_byte_rs422(int argc, char *argv[])
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b090      	sub	sp, #64	@ 0x40
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b02      	cmp	r3, #2
 8007222:	dc01      	bgt.n	8007228 <Cmd_set_byte_rs422+0x14>
 8007224:	2303      	movs	r3, #3
 8007226:	e03c      	b.n	80072a2 <Cmd_set_byte_rs422+0x8e>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b03      	cmp	r3, #3
 800722c:	dd01      	ble.n	8007232 <Cmd_set_byte_rs422+0x1e>
 800722e:	2302      	movs	r3, #2
 8007230:	e037      	b.n	80072a2 <Cmd_set_byte_rs422+0x8e>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007238:	3b01      	subs	r3, #1
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	4413      	add	r3, r2
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint16_t size = atoi(argv[1]);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	3304      	adds	r3, #4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4618      	mov	r0, r3
 800724c:	f007 fe34 	bl	800eeb8 <atoi>
 8007250:	4603      	mov	r3, r0
 8007252:	877b      	strh	r3, [r7, #58]	@ 0x3a
    if (size <= 0) {
 8007254:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007256:	2b00      	cmp	r3, #0
 8007258:	d105      	bne.n	8007266 <Cmd_set_byte_rs422+0x52>
        Uart_sendstring(USARTx,"\nPositive integer!!!\n");
 800725a:	4914      	ldr	r1, [pc, #80]	@ (80072ac <Cmd_set_byte_rs422+0x98>)
 800725c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800725e:	f7fa febd 	bl	8001fdc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 8007262:	2304      	movs	r3, #4
 8007264:	e01d      	b.n	80072a2 <Cmd_set_byte_rs422+0x8e>
    }

    if ( size > 1000 || size < 150) {
 8007266:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800726c:	d802      	bhi.n	8007274 <Cmd_set_byte_rs422+0x60>
 800726e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007270:	2b95      	cmp	r3, #149	@ 0x95
 8007272:	d805      	bhi.n	8007280 <Cmd_set_byte_rs422+0x6c>
        Uart_sendstring(USARTx,"Array size > 150 or < 1000.\n");
 8007274:	490e      	ldr	r1, [pc, #56]	@ (80072b0 <Cmd_set_byte_rs422+0x9c>)
 8007276:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007278:	f7fa feb0 	bl	8001fdc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 800727c:	2304      	movs	r3, #4
 800727e:	e010      	b.n	80072a2 <Cmd_set_byte_rs422+0x8e>
    }

    ARRAY_SIZE = size;
 8007280:	4a0c      	ldr	r2, [pc, #48]	@ (80072b4 <Cmd_set_byte_rs422+0xa0>)
 8007282:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007284:	8013      	strh	r3, [r2, #0]

    char msg[50];
    sprintf(msg, "\nArray size set to %d bytes.\n", size);
 8007286:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007288:	f107 0308 	add.w	r3, r7, #8
 800728c:	490a      	ldr	r1, [pc, #40]	@ (80072b8 <Cmd_set_byte_rs422+0xa4>)
 800728e:	4618      	mov	r0, r3
 8007290:	f008 fdca 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, msg);
 8007294:	f107 0308 	add.w	r3, r7, #8
 8007298:	4619      	mov	r1, r3
 800729a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800729c:	f7fa fe9e 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3740      	adds	r7, #64	@ 0x40
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	08014e74 	.word	0x08014e74
 80072b0:	08014e8c 	.word	0x08014e8c
 80072b4:	200003e0 	.word	0x200003e0
 80072b8:	08014eac 	.word	0x08014eac

080072bc <Cmd_set_baudrate_rs422>:



int Cmd_set_baudrate_rs422(int argc, char *argv[])
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b096      	sub	sp, #88	@ 0x58
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	dc01      	bgt.n	80072d0 <Cmd_set_baudrate_rs422+0x14>
 80072cc:	2303      	movs	r3, #3
 80072ce:	e055      	b.n	800737c <Cmd_set_baudrate_rs422+0xc0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	dd01      	ble.n	80072da <Cmd_set_baudrate_rs422+0x1e>
 80072d6:	2302      	movs	r3, #2
 80072d8:	e050      	b.n	800737c <Cmd_set_baudrate_rs422+0xc0>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072e0:	3b01      	subs	r3, #1
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	4413      	add	r3, r2
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	657b      	str	r3, [r7, #84]	@ 0x54

//	{"set_baudrate_rs422", Cmd_set_baudrate_rs422, ": [9600|19200|38400|115200|230400|460800], Default 115200 | format: set_baudrate_rs422 <size>"},


    uint32_t baudrate = atoi(argv[1]);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	3304      	adds	r3, #4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f007 fde0 	bl	800eeb8 <atoi>
 80072f8:	4603      	mov	r3, r0
 80072fa:	653b      	str	r3, [r7, #80]	@ 0x50

    if (baudrate != 9600 && baudrate != 19200 && baudrate != 38400 &&
 80072fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072fe:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8007302:	d019      	beq.n	8007338 <Cmd_set_baudrate_rs422+0x7c>
 8007304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007306:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 800730a:	d015      	beq.n	8007338 <Cmd_set_baudrate_rs422+0x7c>
 800730c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800730e:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8007312:	d011      	beq.n	8007338 <Cmd_set_baudrate_rs422+0x7c>
 8007314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007316:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800731a:	d00d      	beq.n	8007338 <Cmd_set_baudrate_rs422+0x7c>
        baudrate != 115200 && baudrate != 230400 && baudrate != 460800) {
 800731c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800731e:	f5b3 3f61 	cmp.w	r3, #230400	@ 0x38400
 8007322:	d009      	beq.n	8007338 <Cmd_set_baudrate_rs422+0x7c>
 8007324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007326:	f5b3 2fe1 	cmp.w	r3, #460800	@ 0x70800
 800732a:	d005      	beq.n	8007338 <Cmd_set_baudrate_rs422+0x7c>
        Uart_sendstring(USARTx, "\n Allowed Baudrates: [9600|19200|38400|115200|230400|460800]\n");
 800732c:	4915      	ldr	r1, [pc, #84]	@ (8007384 <Cmd_set_baudrate_rs422+0xc8>)
 800732e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007330:	f7fa fe54 	bl	8001fdc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 8007334:	2304      	movs	r3, #4
 8007336:	e021      	b.n	800737c <Cmd_set_baudrate_rs422+0xc0>
    }

    // Disable UART5
    LL_USART_Disable(UART5);
 8007338:	4813      	ldr	r0, [pc, #76]	@ (8007388 <Cmd_set_baudrate_rs422+0xcc>)
 800733a:	f7ff f907 	bl	800654c <LL_USART_Disable>

    LL_RCC_ClocksTypeDef rcc_clocks;
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800733e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007342:	4618      	mov	r0, r3
 8007344:	f004 f910 	bl	800b568 <LL_RCC_GetSystemClocksFreq>
    // Configure baudrate
    LL_USART_SetBaudRate(UART5, rcc_clocks.PCLK1_Frequency, LL_USART_OVERSAMPLING_16, baudrate);
 8007348:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800734a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800734c:	2200      	movs	r2, #0
 800734e:	480e      	ldr	r0, [pc, #56]	@ (8007388 <Cmd_set_baudrate_rs422+0xcc>)
 8007350:	f7ff f90c 	bl	800656c <LL_USART_SetBaudRate>

    // Enable UART5
    LL_USART_Enable(UART5);
 8007354:	480c      	ldr	r0, [pc, #48]	@ (8007388 <Cmd_set_baudrate_rs422+0xcc>)
 8007356:	f7ff f8e9 	bl	800652c <LL_USART_Enable>

	Uart_flush(UART5);
 800735a:	480b      	ldr	r0, [pc, #44]	@ (8007388 <Cmd_set_baudrate_rs422+0xcc>)
 800735c:	f7fa fe56 	bl	800200c <Uart_flush>

    char msg[50];
    sprintf(msg, "\nRS422 Baudrate set to  %ld.\n", baudrate);
 8007360:	f107 030c 	add.w	r3, r7, #12
 8007364:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007366:	4909      	ldr	r1, [pc, #36]	@ (800738c <Cmd_set_baudrate_rs422+0xd0>)
 8007368:	4618      	mov	r0, r3
 800736a:	f008 fd5d 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, msg);
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	4619      	mov	r1, r3
 8007374:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007376:	f7fa fe31 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3758      	adds	r7, #88	@ 0x58
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	08014ecc 	.word	0x08014ecc
 8007388:	40005000 	.word	0x40005000
 800738c:	08014f0c 	.word	0x08014f0c

08007390 <Cmd_set_fre_rs422>:


int Cmd_set_fre_rs422(int argc, char *argv[])
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b090      	sub	sp, #64	@ 0x40
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b02      	cmp	r3, #2
 800739e:	dc01      	bgt.n	80073a4 <Cmd_set_fre_rs422+0x14>
 80073a0:	2303      	movs	r3, #3
 80073a2:	e083      	b.n	80074ac <Cmd_set_fre_rs422+0x11c>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	dd01      	ble.n	80073ae <Cmd_set_fre_rs422+0x1e>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e07e      	b.n	80074ac <Cmd_set_fre_rs422+0x11c>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073b4:	3b01      	subs	r3, #1
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	4413      	add	r3, r2
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	63fb      	str	r3, [r7, #60]	@ 0x3c

//	{"set_baudrate_rs422", Cmd_set_baudrate_rs422, ": [9600|19200|38400|115200|230400|460800], Default 115200 | format: set_baudrate_rs422 <size>"},


    uint8_t fre = atoi(argv[1]);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	3304      	adds	r3, #4
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f007 fd76 	bl	800eeb8 <atoi>
 80073cc:	4603      	mov	r3, r0
 80073ce:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    switch (fre) {
 80073d2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80073d6:	2b0c      	cmp	r3, #12
 80073d8:	d854      	bhi.n	8007484 <Cmd_set_fre_rs422+0xf4>
 80073da:	a201      	add	r2, pc, #4	@ (adr r2, 80073e0 <Cmd_set_fre_rs422+0x50>)
 80073dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e0:	08007415 	.word	0x08007415
 80073e4:	0800741f 	.word	0x0800741f
 80073e8:	08007429 	.word	0x08007429
 80073ec:	08007433 	.word	0x08007433
 80073f0:	0800743d 	.word	0x0800743d
 80073f4:	08007445 	.word	0x08007445
 80073f8:	0800744d 	.word	0x0800744d
 80073fc:	08007455 	.word	0x08007455
 8007400:	0800745d 	.word	0x0800745d
 8007404:	08007465 	.word	0x08007465
 8007408:	0800746d 	.word	0x0800746d
 800740c:	08007475 	.word	0x08007475
 8007410:	0800747d 	.word	0x0800747d
        case 0:
        	rs422_set_task_period(2000);
 8007414:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007418:	f000 fbd6 	bl	8007bc8 <rs422_set_task_period>
            break;
 800741c:	e034      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 1:
        	rs422_set_task_period(1000);
 800741e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007422:	f000 fbd1 	bl	8007bc8 <rs422_set_task_period>
            break;
 8007426:	e02f      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 2:
        	rs422_set_task_period(500);
 8007428:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800742c:	f000 fbcc 	bl	8007bc8 <rs422_set_task_period>
            break;
 8007430:	e02a      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 3:
        	rs422_set_task_period(333);
 8007432:	f240 104d 	movw	r0, #333	@ 0x14d
 8007436:	f000 fbc7 	bl	8007bc8 <rs422_set_task_period>
            break;
 800743a:	e025      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 4:
        	rs422_set_task_period(250);
 800743c:	20fa      	movs	r0, #250	@ 0xfa
 800743e:	f000 fbc3 	bl	8007bc8 <rs422_set_task_period>
            break;
 8007442:	e021      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 5:
        	rs422_set_task_period(200);
 8007444:	20c8      	movs	r0, #200	@ 0xc8
 8007446:	f000 fbbf 	bl	8007bc8 <rs422_set_task_period>
            break;
 800744a:	e01d      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 6:
        	rs422_set_task_period(167);
 800744c:	20a7      	movs	r0, #167	@ 0xa7
 800744e:	f000 fbbb 	bl	8007bc8 <rs422_set_task_period>
            break;
 8007452:	e019      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 7:
        	rs422_set_task_period(143);
 8007454:	208f      	movs	r0, #143	@ 0x8f
 8007456:	f000 fbb7 	bl	8007bc8 <rs422_set_task_period>
            break;
 800745a:	e015      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 8:
        	rs422_set_task_period(125);
 800745c:	207d      	movs	r0, #125	@ 0x7d
 800745e:	f000 fbb3 	bl	8007bc8 <rs422_set_task_period>
            break;
 8007462:	e011      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 9:
        	rs422_set_task_period(111);
 8007464:	206f      	movs	r0, #111	@ 0x6f
 8007466:	f000 fbaf 	bl	8007bc8 <rs422_set_task_period>
            break;
 800746a:	e00d      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 10:
        	rs422_set_task_period(100);
 800746c:	2064      	movs	r0, #100	@ 0x64
 800746e:	f000 fbab 	bl	8007bc8 <rs422_set_task_period>
            break;
 8007472:	e009      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 11:
        	rs422_set_task_period(91);
 8007474:	205b      	movs	r0, #91	@ 0x5b
 8007476:	f000 fba7 	bl	8007bc8 <rs422_set_task_period>
            break;
 800747a:	e005      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        case 12:
        	rs422_set_task_period(83);
 800747c:	2053      	movs	r0, #83	@ 0x53
 800747e:	f000 fba3 	bl	8007bc8 <rs422_set_task_period>
            break;
 8007482:	e001      	b.n	8007488 <Cmd_set_fre_rs422+0xf8>
        default:
        	return CMDLINE_INVALID_ARG;
 8007484:	2304      	movs	r3, #4
 8007486:	e011      	b.n	80074ac <Cmd_set_fre_rs422+0x11c>
            break;
    }


	Uart_flush(USART1);
 8007488:	480a      	ldr	r0, [pc, #40]	@ (80074b4 <Cmd_set_fre_rs422+0x124>)
 800748a:	f7fa fdbf 	bl	800200c <Uart_flush>

    char msg[50];
    sprintf(msg, "\nRS422 Packet per second set to %d.\n", fre);
 800748e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8007492:	f107 0308 	add.w	r3, r7, #8
 8007496:	4908      	ldr	r1, [pc, #32]	@ (80074b8 <Cmd_set_fre_rs422+0x128>)
 8007498:	4618      	mov	r0, r3
 800749a:	f008 fcc5 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, msg);
 800749e:	f107 0308 	add.w	r3, r7, #8
 80074a2:	4619      	mov	r1, r3
 80074a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80074a6:	f7fa fd99 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3740      	adds	r7, #64	@ 0x40
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	40011000 	.word	0x40011000
 80074b8:	08014f2c 	.word	0x08014f2c

080074bc <Cmd_auto_report_ena>:


int Cmd_auto_report_ena(int argc, char *argv[])
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	dc01      	bgt.n	80074d0 <Cmd_auto_report_ena+0x14>
 80074cc:	2303      	movs	r3, #3
 80074ce:	e015      	b.n	80074fc <Cmd_auto_report_ena+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	dd01      	ble.n	80074da <Cmd_auto_report_ena+0x1e>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e010      	b.n	80074fc <Cmd_auto_report_ena+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074e0:	3b01      	subs	r3, #1
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	4413      	add	r3, r2
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60fb      	str	r3, [r7, #12]


    auto_report_enabled = 1;
 80074ec:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <Cmd_auto_report_ena+0x48>)
 80074ee:	2201      	movs	r2, #1
 80074f0:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nAuto report mirror from RS422 Packet, [ESC] to Stop\n");
 80074f2:	4905      	ldr	r1, [pc, #20]	@ (8007508 <Cmd_auto_report_ena+0x4c>)
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f7fa fd71 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200059fc 	.word	0x200059fc
 8007508:	08014f54 	.word	0x08014f54

0800750c <Cmd_rs422_report_ena>:



int Cmd_rs422_report_ena(int argc, char *argv[])
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b090      	sub	sp, #64	@ 0x40
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b01      	cmp	r3, #1
 800751a:	dc01      	bgt.n	8007520 <Cmd_rs422_report_ena+0x14>
 800751c:	2303      	movs	r3, #3
 800751e:	e020      	b.n	8007562 <Cmd_rs422_report_ena+0x56>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b02      	cmp	r3, #2
 8007524:	dd01      	ble.n	800752a <Cmd_rs422_report_ena+0x1e>
 8007526:	2302      	movs	r3, #2
 8007528:	e01b      	b.n	8007562 <Cmd_rs422_report_ena+0x56>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007530:	3b01      	subs	r3, #1
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	4413      	add	r3, r2
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    rs422_report_enable = 1;
 800753c:	4b0b      	ldr	r3, [pc, #44]	@ (800756c <Cmd_rs422_report_ena+0x60>)
 800753e:	2201      	movs	r2, #1
 8007540:	701a      	strb	r2, [r3, #0]
 // Convert seconds to milliseconds
    Uart_flush(USART1);
 8007542:	480b      	ldr	r0, [pc, #44]	@ (8007570 <Cmd_rs422_report_ena+0x64>)
 8007544:	f7fa fd62 	bl	800200c <Uart_flush>

    char msg[50];
    sprintf(msg, "\nAuto report RS422, [ESC] to Stop\n");
 8007548:	f107 0308 	add.w	r3, r7, #8
 800754c:	4909      	ldr	r1, [pc, #36]	@ (8007574 <Cmd_rs422_report_ena+0x68>)
 800754e:	4618      	mov	r0, r3
 8007550:	f008 fc6a 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, msg);
 8007554:	f107 0308 	add.w	r3, r7, #8
 8007558:	4619      	mov	r1, r3
 800755a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800755c:	f7fa fd3e 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3740      	adds	r7, #64	@ 0x40
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200059fd 	.word	0x200059fd
 8007570:	40011000 	.word	0x40011000
 8007574:	08014f8c 	.word	0x08014f8c

08007578 <Cmd_rf_report_ena>:

volatile uint8_t rf_report_enable = 0;
int Cmd_rf_report_ena(int argc, char *argv[])
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b090      	sub	sp, #64	@ 0x40
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b01      	cmp	r3, #1
 8007586:	dc01      	bgt.n	800758c <Cmd_rf_report_ena+0x14>
 8007588:	2303      	movs	r3, #3
 800758a:	e01d      	b.n	80075c8 <Cmd_rf_report_ena+0x50>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b02      	cmp	r3, #2
 8007590:	dd01      	ble.n	8007596 <Cmd_rf_report_ena+0x1e>
 8007592:	2302      	movs	r3, #2
 8007594:	e018      	b.n	80075c8 <Cmd_rf_report_ena+0x50>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800759c:	3b01      	subs	r3, #1
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	4413      	add	r3, r2
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    rf_report_enable = 1;
 80075a8:	4b09      	ldr	r3, [pc, #36]	@ (80075d0 <Cmd_rf_report_ena+0x58>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	701a      	strb	r2, [r3, #0]
 // Convert seconds to milliseconds

    char msg[50];
    sprintf(msg, "\nAuto report RF, [ESC] to Stop\n");
 80075ae:	f107 0308 	add.w	r3, r7, #8
 80075b2:	4908      	ldr	r1, [pc, #32]	@ (80075d4 <Cmd_rf_report_ena+0x5c>)
 80075b4:	4618      	mov	r0, r3
 80075b6:	f008 fc37 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, msg);
 80075ba:	f107 0308 	add.w	r3, r7, #8
 80075be:	4619      	mov	r1, r3
 80075c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80075c2:	f7fa fd0b 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3740      	adds	r7, #64	@ 0x40
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	200059fe 	.word	0x200059fe
 80075d4:	08014fb0 	.word	0x08014fb0

080075d8 <Cmd_swap_byte_ena>:


volatile uint8_t swap_byte_enable = 0;

int Cmd_swap_byte_ena(int argc, char *argv[])
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	dc01      	bgt.n	80075ec <Cmd_swap_byte_ena+0x14>
 80075e8:	2303      	movs	r3, #3
 80075ea:	e015      	b.n	8007618 <Cmd_swap_byte_ena+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	dd01      	ble.n	80075f6 <Cmd_swap_byte_ena+0x1e>
 80075f2:	2302      	movs	r3, #2
 80075f4:	e010      	b.n	8007618 <Cmd_swap_byte_ena+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075fc:	3b01      	subs	r3, #1
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	4413      	add	r3, r2
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60fb      	str	r3, [r7, #12]


    swap_byte_enable = 1;
 8007608:	4b05      	ldr	r3, [pc, #20]	@ (8007620 <Cmd_swap_byte_ena+0x48>)
 800760a:	2201      	movs	r2, #1
 800760c:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nEnabled swap byte RS422, NOT INCLUDE STX-ETX, 0x02->0xFE, 0x03->0xFD \n");
 800760e:	4905      	ldr	r1, [pc, #20]	@ (8007624 <Cmd_swap_byte_ena+0x4c>)
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7fa fce3 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200059ff 	.word	0x200059ff
 8007624:	08014fd0 	.word	0x08014fd0

08007628 <Cmd_swap_byte_dis>:

int Cmd_swap_byte_dis(int argc, char *argv[])
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b01      	cmp	r3, #1
 8007636:	dc01      	bgt.n	800763c <Cmd_swap_byte_dis+0x14>
 8007638:	2303      	movs	r3, #3
 800763a:	e015      	b.n	8007668 <Cmd_swap_byte_dis+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b02      	cmp	r3, #2
 8007640:	dd01      	ble.n	8007646 <Cmd_swap_byte_dis+0x1e>
 8007642:	2302      	movs	r3, #2
 8007644:	e010      	b.n	8007668 <Cmd_swap_byte_dis+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800764c:	3b01      	subs	r3, #1
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	4413      	add	r3, r2
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]


    swap_byte_enable = 0;
 8007658:	4b05      	ldr	r3, [pc, #20]	@ (8007670 <Cmd_swap_byte_dis+0x48>)
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nDISABLE!!!\n");
 800765e:	4905      	ldr	r1, [pc, #20]	@ (8007674 <Cmd_swap_byte_dis+0x4c>)
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7fa fcbb 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	200059ff 	.word	0x200059ff
 8007674:	08015018 	.word	0x08015018

08007678 <Cmd_memory_usage>:



int Cmd_memory_usage(int argc, char *argv[]) {
 8007678:	b5b0      	push	{r4, r5, r7, lr}
 800767a:	b0a6      	sub	sp, #152	@ 0x98
 800767c:	af02      	add	r7, sp, #8
 800767e:	4674      	mov	r4, lr
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800768a:	3b01      	subs	r3, #1
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	4413      	add	r3, r2
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    // STM32F405RGT7 có 192KB SRAM [[5]]
    uint32_t totalRAM = 192 * 1024;
 8007698:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800769c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80076a0:	f3ef 8308 	mrs	r3, MSP
 80076a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 80076a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    uint32_t usedRAM = SRAM1_BASE + totalRAM - __get_MSP();
 80076a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80076b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    float ramUsage = (float)usedRAM / totalRAM * 100;
 80076b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8007750 <Cmd_memory_usage+0xd8>
 80076d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076da:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

    // STM32F405RGT7 có 1MB Flash [[1]] [[4]]
    uint32_t totalFlash = 1 * 1024 * 1024;
 80076de:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80076e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t usedFlash = (uint32_t)__builtin_return_address(0) - FLASH_BASE;
 80076e4:	4623      	mov	r3, r4
 80076e6:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80076ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    float flashUsage = (float)usedFlash / totalFlash * 100;
 80076ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007704:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8007750 <Cmd_memory_usage+0xd8>
 8007708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800770c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74


    char buffer[100];
    sprintf(buffer, "\nRAM: %.2f%% used\r\nFlash: %.2f%% used\r\n", ramUsage, flashUsage);
 8007710:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8007714:	f7f8 ff28 	bl	8000568 <__aeabi_f2d>
 8007718:	4604      	mov	r4, r0
 800771a:	460d      	mov	r5, r1
 800771c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800771e:	f7f8 ff23 	bl	8000568 <__aeabi_f2d>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	f107 000c 	add.w	r0, r7, #12
 800772a:	e9cd 2300 	strd	r2, r3, [sp]
 800772e:	4622      	mov	r2, r4
 8007730:	462b      	mov	r3, r5
 8007732:	4908      	ldr	r1, [pc, #32]	@ (8007754 <Cmd_memory_usage+0xdc>)
 8007734:	f008 fb78 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007738:	f107 030c 	add.w	r3, r7, #12
 800773c:	4619      	mov	r1, r3
 800773e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8007742:	f7fa fc4b 	bl	8001fdc <Uart_sendstring>

    return CMDLINE_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3790      	adds	r7, #144	@ 0x90
 800774c:	46bd      	mov	sp, r7
 800774e:	bdb0      	pop	{r4, r5, r7, pc}
 8007750:	42c80000 	.word	0x42c80000
 8007754:	08015028 	.word	0x08015028

08007758 <Cmd_time_get>:


int Cmd_time_get(int argc, char *argv[]){
 8007758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800775a:	b0a3      	sub	sp, #140	@ 0x8c
 800775c:	af04      	add	r7, sp, #16
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    char buffer[100];
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007768:	3b01      	subs	r3, #1
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	4413      	add	r3, r2
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	677b      	str	r3, [r7, #116]	@ 0x74
    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8007774:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8007778:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 800777c:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 8007780:	f107 0073 	add.w	r0, r7, #115	@ 0x73
 8007784:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 8007788:	9302      	str	r3, [sp, #8]
 800778a:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	f107 036f 	add.w	r3, r7, #111	@ 0x6f
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	4623      	mov	r3, r4
 8007798:	f7f9 fe64 	bl	8001464 <DS3231_GetDateTime>
    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 800779c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80077a0:	461d      	mov	r5, r3
 80077a2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077a6:	461e      	mov	r6, r3
 80077a8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80077ac:	461a      	mov	r2, r3
 80077ae:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80077b2:	4619      	mov	r1, r3
 80077b4:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80077b8:	461c      	mov	r4, r3
 80077ba:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80077be:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80077c2:	f107 0008 	add.w	r0, r7, #8
 80077c6:	9303      	str	r3, [sp, #12]
 80077c8:	9402      	str	r4, [sp, #8]
 80077ca:	9101      	str	r1, [sp, #4]
 80077cc:	9200      	str	r2, [sp, #0]
 80077ce:	4633      	mov	r3, r6
 80077d0:	462a      	mov	r2, r5
 80077d2:	4907      	ldr	r1, [pc, #28]	@ (80077f0 <Cmd_time_get+0x98>)
 80077d4:	f008 fb28 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, buffer);
 80077d8:	f107 0308 	add.w	r3, r7, #8
 80077dc:	4619      	mov	r1, r3
 80077de:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80077e0:	f7fa fbfc 	bl	8001fdc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	377c      	adds	r7, #124	@ 0x7c
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ee:	bf00      	nop
 80077f0:	08014db8 	.word	0x08014db8

080077f4 <Cmd_time_set>:

int Cmd_time_set(int argc, char *argv[]){
 80077f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077f6:	b0a3      	sub	sp, #140	@ 0x8c
 80077f8:	af04      	add	r7, sp, #16
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 7) return CMDLINE_TOO_FEW_ARGS;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b07      	cmp	r3, #7
 8007802:	dc01      	bgt.n	8007808 <Cmd_time_set+0x14>
 8007804:	2303      	movs	r3, #3
 8007806:	e091      	b.n	800792c <Cmd_time_set+0x138>
    if ((argc-1) > 7) return CMDLINE_TOO_MANY_ARGS;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b08      	cmp	r3, #8
 800780c:	dd01      	ble.n	8007812 <Cmd_time_set+0x1e>
 800780e:	2302      	movs	r3, #2
 8007810:	e08c      	b.n	800792c <Cmd_time_set+0x138>
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007818:	3b01      	subs	r3, #1
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	4413      	add	r3, r2
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	677b      	str	r3, [r7, #116]	@ 0x74
    uint8_t hour = atoi(argv[1]);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	3304      	adds	r3, #4
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f007 fb44 	bl	800eeb8 <atoi>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    uint8_t min = atoi(argv[2]);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4618      	mov	r0, r3
 800783e:	f007 fb3b 	bl	800eeb8 <atoi>
 8007842:	4603      	mov	r3, r0
 8007844:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    uint8_t sec = atoi(argv[3]);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	330c      	adds	r3, #12
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f007 fb32 	bl	800eeb8 <atoi>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
    uint8_t date = atoi(argv[4]);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	3310      	adds	r3, #16
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4618      	mov	r0, r3
 8007862:	f007 fb29 	bl	800eeb8 <atoi>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
    uint8_t month = atoi(argv[5]);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	3314      	adds	r3, #20
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4618      	mov	r0, r3
 8007874:	f007 fb20 	bl	800eeb8 <atoi>
 8007878:	4603      	mov	r3, r0
 800787a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t year = atoi(argv[6]);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	3318      	adds	r3, #24
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4618      	mov	r0, r3
 8007886:	f007 fb17 	bl	800eeb8 <atoi>
 800788a:	4603      	mov	r3, r0
 800788c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

    if (hour > 23 || min > 59 || sec > 59 || date > 31 || month > 12 || year > 99)
 8007890:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8007894:	2b17      	cmp	r3, #23
 8007896:	d813      	bhi.n	80078c0 <Cmd_time_set+0xcc>
 8007898:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800789c:	2b3b      	cmp	r3, #59	@ 0x3b
 800789e:	d80f      	bhi.n	80078c0 <Cmd_time_set+0xcc>
 80078a0:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80078a4:	2b3b      	cmp	r3, #59	@ 0x3b
 80078a6:	d80b      	bhi.n	80078c0 <Cmd_time_set+0xcc>
 80078a8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80078ac:	2b1f      	cmp	r3, #31
 80078ae:	d807      	bhi.n	80078c0 <Cmd_time_set+0xcc>
 80078b0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80078b4:	2b0c      	cmp	r3, #12
 80078b6:	d803      	bhi.n	80078c0 <Cmd_time_set+0xcc>
 80078b8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80078bc:	2b63      	cmp	r3, #99	@ 0x63
 80078be:	d901      	bls.n	80078c4 <Cmd_time_set+0xd0>
        return CMDLINE_INVALID_ARG;
 80078c0:	2304      	movs	r3, #4
 80078c2:	e033      	b.n	800792c <Cmd_time_set+0x138>

    DS3231_SetDateTime(1, date, month, year, hour, min, sec);
 80078c4:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 80078c8:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 80078cc:	f897 1070 	ldrb.w	r1, [r7, #112]	@ 0x70
 80078d0:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80078d4:	9302      	str	r3, [sp, #8]
 80078d6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80078da:	9301      	str	r3, [sp, #4]
 80078dc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	4603      	mov	r3, r0
 80078e4:	2001      	movs	r0, #1
 80078e6:	f7f9 fcff 	bl	80012e8 <DS3231_SetDateTime>

    char buffer[100];
    sprintf(buffer, "\nTime set to: %02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 80078ea:	f897 5073 	ldrb.w	r5, [r7, #115]	@ 0x73
 80078ee:	f897 6072 	ldrb.w	r6, [r7, #114]	@ 0x72
 80078f2:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80078f6:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 80078fa:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 80078fe:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 8007902:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8007906:	f107 0408 	add.w	r4, r7, #8
 800790a:	9003      	str	r0, [sp, #12]
 800790c:	9102      	str	r1, [sp, #8]
 800790e:	9201      	str	r2, [sp, #4]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	4633      	mov	r3, r6
 8007914:	462a      	mov	r2, r5
 8007916:	4907      	ldr	r1, [pc, #28]	@ (8007934 <Cmd_time_set+0x140>)
 8007918:	4620      	mov	r0, r4
 800791a:	f008 fa85 	bl	800fe28 <siprintf>
    Uart_sendstring(USARTx, buffer);
 800791e:	f107 0308 	add.w	r3, r7, #8
 8007922:	4619      	mov	r1, r3
 8007924:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007926:	f7fa fb59 	bl	8001fdc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	377c      	adds	r7, #124	@ 0x7c
 8007930:	46bd      	mov	sp, r7
 8007932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007934:	08015050 	.word	0x08015050

08007938 <Cmd_cpoc_reset>:

int Cmd_cpoc_reset(int argc, char *argv[]){
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 8007942:	f7fe fddd 	bl	8006500 <__NVIC_SystemReset>
	...

08007948 <Cmd_rf_ena>:
//	Cmd_pmu_board_alive();
//	Cmd_pmu_board_alive();
//
//}

int Cmd_rf_ena(int argc, char *argv[]){
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007958:	3b01      	subs	r3, #1
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	4413      	add	r3, r2
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60fb      	str	r3, [r7, #12]
	LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8007964:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007968:	4807      	ldr	r0, [pc, #28]	@ (8007988 <Cmd_rf_ena+0x40>)
 800796a:	f7ff f850 	bl	8006a0e <LL_GPIO_ResetOutputPin>
	 Uart_sendstring(USARTx, "\nRF Set to Enable\r\n");
 800796e:	4907      	ldr	r1, [pc, #28]	@ (800798c <Cmd_rf_ena+0x44>)
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7fa fb33 	bl	8001fdc <Uart_sendstring>
	// Return success.
	Uart_sendstring(USART2, "B");
 8007976:	4906      	ldr	r1, [pc, #24]	@ (8007990 <Cmd_rf_ena+0x48>)
 8007978:	4806      	ldr	r0, [pc, #24]	@ (8007994 <Cmd_rf_ena+0x4c>)
 800797a:	f7fa fb2f 	bl	8001fdc <Uart_sendstring>
	return (CMDLINE_OK);
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40020400 	.word	0x40020400
 800798c:	08015080 	.word	0x08015080
 8007990:	08014bd4 	.word	0x08014bd4
 8007994:	40004400 	.word	0x40004400

08007998 <Cmd_rf_dis>:

int Cmd_rf_dis(int argc, char *argv[]){
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079a8:	3b01      	subs	r3, #1
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	4413      	add	r3, r2
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]
	LL_GPIO_SetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 80079b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80079b8:	4805      	ldr	r0, [pc, #20]	@ (80079d0 <Cmd_rf_dis+0x38>)
 80079ba:	f7ff f81a 	bl	80069f2 <LL_GPIO_SetOutputPin>
	Uart_sendstring(USARTx, "\nRF Disable\r\n");
 80079be:	4905      	ldr	r1, [pc, #20]	@ (80079d4 <Cmd_rf_dis+0x3c>)
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7fa fb0b 	bl	8001fdc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	40020400 	.word	0x40020400
 80079d4:	08015094 	.word	0x08015094

080079d8 <Cmd_start_positioining>:

volatile uint8_t gps_report_enable = 0;
int Cmd_start_positioining (int argc, char *argv[]){
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079e8:	3b01      	subs	r3, #1
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	4413      	add	r3, r2
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60fb      	str	r3, [r7, #12]
	gps_report_enable = 1;
 80079f4:	4b07      	ldr	r3, [pc, #28]	@ (8007a14 <Cmd_start_positioining+0x3c>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	701a      	strb	r2, [r3, #0]
	Uart_flush(USART3);
 80079fa:	4807      	ldr	r0, [pc, #28]	@ (8007a18 <Cmd_start_positioining+0x40>)
 80079fc:	f7fa fb06 	bl	800200c <Uart_flush>
	Uart_sendstring(USARTx, "\nStart reporting position to RF, [ESC] to Stop\r\n");
 8007a00:	4906      	ldr	r1, [pc, #24]	@ (8007a1c <Cmd_start_positioining+0x44>)
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7fa faea 	bl	8001fdc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20005a00 	.word	0x20005a00
 8007a18:	40004800 	.word	0x40004800
 8007a1c:	080150a4 	.word	0x080150a4

08007a20 <command_create_task>:


void	command_create_task(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8007a24:	4902      	ldr	r1, [pc, #8]	@ (8007a30 <command_create_task+0x10>)
 8007a26:	4803      	ldr	r0, [pc, #12]	@ (8007a34 <command_create_task+0x14>)
 8007a28:	f004 f9de 	bl	800bde8 <SCH_TASK_CreateTask>
}
 8007a2c:	bf00      	nop
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	200003d4 	.word	0x200003d4
 8007a34:	200003d0 	.word	0x200003d0

08007a38 <command_send_splash>:

void	command_send_splash(void)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
	Uart_sendstring(UART4, "------------------------------------------------\r\n");
 8007a3c:	4938      	ldr	r1, [pc, #224]	@ (8007b20 <command_send_splash+0xe8>)
 8007a3e:	4839      	ldr	r0, [pc, #228]	@ (8007b24 <command_send_splash+0xec>)
 8007a40:	f7fa facc 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--        ____                                --\r\n");
 8007a44:	4938      	ldr	r1, [pc, #224]	@ (8007b28 <command_send_splash+0xf0>)
 8007a46:	4837      	ldr	r0, [pc, #220]	@ (8007b24 <command_send_splash+0xec>)
 8007a48:	f7fa fac8 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--       / ___| _ __   __ _  ___ ___          --\r\n");
 8007a4c:	4937      	ldr	r1, [pc, #220]	@ (8007b2c <command_send_splash+0xf4>)
 8007a4e:	4835      	ldr	r0, [pc, #212]	@ (8007b24 <command_send_splash+0xec>)
 8007a50:	f7fa fac4 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--       \\___ \\| '_ \\ / _` |/ __/ _ \\         --  \r\n");
 8007a54:	4936      	ldr	r1, [pc, #216]	@ (8007b30 <command_send_splash+0xf8>)
 8007a56:	4833      	ldr	r0, [pc, #204]	@ (8007b24 <command_send_splash+0xec>)
 8007a58:	f7fa fac0 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--        ___) | |_) | (_| | (_|  __/         --\r\n");
 8007a5c:	4935      	ldr	r1, [pc, #212]	@ (8007b34 <command_send_splash+0xfc>)
 8007a5e:	4831      	ldr	r0, [pc, #196]	@ (8007b24 <command_send_splash+0xec>)
 8007a60:	f7fa fabc 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--       |____/| -__/ \\__,_|\\___\\___|         --  \r\n");
 8007a64:	4934      	ldr	r1, [pc, #208]	@ (8007b38 <command_send_splash+0x100>)
 8007a66:	482f      	ldr	r0, [pc, #188]	@ (8007b24 <command_send_splash+0xec>)
 8007a68:	f7fa fab8 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--             |_|                            --\r\n");
 8007a6c:	4933      	ldr	r1, [pc, #204]	@ (8007b3c <command_send_splash+0x104>)
 8007a6e:	482d      	ldr	r0, [pc, #180]	@ (8007b24 <command_send_splash+0xec>)
 8007a70:	f7fa fab4 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--     _     _ _     _____         _          --\r\n");
 8007a74:	4932      	ldr	r1, [pc, #200]	@ (8007b40 <command_send_splash+0x108>)
 8007a76:	482b      	ldr	r0, [pc, #172]	@ (8007b24 <command_send_splash+0xec>)
 8007a78:	f7fa fab0 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--    | |   (_|_)_ _|_   _|__  ___| |__       --\r\n");
 8007a7c:	4931      	ldr	r1, [pc, #196]	@ (8007b44 <command_send_splash+0x10c>)
 8007a7e:	4829      	ldr	r0, [pc, #164]	@ (8007b24 <command_send_splash+0xec>)
 8007a80:	f7fa faac 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--    | |   | | | '_ \\| |/ _ \\/ __| '_ \\      --\r\n");
 8007a84:	4930      	ldr	r1, [pc, #192]	@ (8007b48 <command_send_splash+0x110>)
 8007a86:	4827      	ldr	r0, [pc, #156]	@ (8007b24 <command_send_splash+0xec>)
 8007a88:	f7fa faa8 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--    | |___| | | | | | |  __/ (__| | | |     --\r\n");
 8007a8c:	492f      	ldr	r1, [pc, #188]	@ (8007b4c <command_send_splash+0x114>)
 8007a8e:	4825      	ldr	r0, [pc, #148]	@ (8007b24 <command_send_splash+0xec>)
 8007a90:	f7fa faa4 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--    |_____|_|_|_| |_|_|\\___|\\___| |_|_|     --\r\n");
 8007a94:	492e      	ldr	r1, [pc, #184]	@ (8007b50 <command_send_splash+0x118>)
 8007a96:	4823      	ldr	r0, [pc, #140]	@ (8007b24 <command_send_splash+0xec>)
 8007a98:	f7fa faa0 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "------------------------------------------------\r\n");
 8007a9c:	4920      	ldr	r1, [pc, #128]	@ (8007b20 <command_send_splash+0xe8>)
 8007a9e:	4821      	ldr	r0, [pc, #132]	@ (8007b24 <command_send_splash+0xec>)
 8007aa0:	f7fa fa9c 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--           ____ ____   ___   ____           --\r\n");
 8007aa4:	492b      	ldr	r1, [pc, #172]	@ (8007b54 <command_send_splash+0x11c>)
 8007aa6:	481f      	ldr	r0, [pc, #124]	@ (8007b24 <command_send_splash+0xec>)
 8007aa8:	f7fa fa98 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--          / ___|  _ \\ / _ \\ / ___|          --\r\n");
 8007aac:	492a      	ldr	r1, [pc, #168]	@ (8007b58 <command_send_splash+0x120>)
 8007aae:	481d      	ldr	r0, [pc, #116]	@ (8007b24 <command_send_splash+0xec>)
 8007ab0:	f7fa fa94 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--         | |   | |_) | | | | |              --\r\n");
 8007ab4:	4929      	ldr	r1, [pc, #164]	@ (8007b5c <command_send_splash+0x124>)
 8007ab6:	481b      	ldr	r0, [pc, #108]	@ (8007b24 <command_send_splash+0xec>)
 8007ab8:	f7fa fa90 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--         | |___|  __/| |_| | |___           --\r\n");
 8007abc:	4928      	ldr	r1, [pc, #160]	@ (8007b60 <command_send_splash+0x128>)
 8007abe:	4819      	ldr	r0, [pc, #100]	@ (8007b24 <command_send_splash+0xec>)
 8007ac0:	f7fa fa8c 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--          \\____|_|    \\___/ \\____|          -- \r\n");
 8007ac4:	4927      	ldr	r1, [pc, #156]	@ (8007b64 <command_send_splash+0x12c>)
 8007ac6:	4817      	ldr	r0, [pc, #92]	@ (8007b24 <command_send_splash+0xec>)
 8007ac8:	f7fa fa88 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--                  _   ___   ___             --\r\n");
 8007acc:	4926      	ldr	r1, [pc, #152]	@ (8007b68 <command_send_splash+0x130>)
 8007ace:	4815      	ldr	r0, [pc, #84]	@ (8007b24 <command_send_splash+0xec>)
 8007ad0:	f7fa fa84 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--          __   __/ | / _ \\ / _ \\            -- \r\n");
 8007ad4:	4925      	ldr	r1, [pc, #148]	@ (8007b6c <command_send_splash+0x134>)
 8007ad6:	4813      	ldr	r0, [pc, #76]	@ (8007b24 <command_send_splash+0xec>)
 8007ad8:	f7fa fa80 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--          \\ \\ / /| || | | | | | |           --  \r\n");
 8007adc:	4924      	ldr	r1, [pc, #144]	@ (8007b70 <command_send_splash+0x138>)
 8007ade:	4811      	ldr	r0, [pc, #68]	@ (8007b24 <command_send_splash+0xec>)
 8007ae0:	f7fa fa7c 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--           \\ V / | || |_| | |_| |           -- \r\n");
 8007ae4:	4923      	ldr	r1, [pc, #140]	@ (8007b74 <command_send_splash+0x13c>)
 8007ae6:	480f      	ldr	r0, [pc, #60]	@ (8007b24 <command_send_splash+0xec>)
 8007ae8:	f7fa fa78 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "--            \\_/  |_(_)___(_)___/            -- \r\n");
 8007aec:	4922      	ldr	r1, [pc, #136]	@ (8007b78 <command_send_splash+0x140>)
 8007aee:	480d      	ldr	r0, [pc, #52]	@ (8007b24 <command_send_splash+0xec>)
 8007af0:	f7fa fa74 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(UART4, "------------------------------------------------\r\n");
 8007af4:	490a      	ldr	r1, [pc, #40]	@ (8007b20 <command_send_splash+0xe8>)
 8007af6:	480b      	ldr	r0, [pc, #44]	@ (8007b24 <command_send_splash+0xec>)
 8007af8:	f7fa fa70 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART4, "> ");
 8007afc:	491f      	ldr	r1, [pc, #124]	@ (8007b7c <command_send_splash+0x144>)
 8007afe:	4809      	ldr	r0, [pc, #36]	@ (8007b24 <command_send_splash+0xec>)
 8007b00:	f7fa fa6c 	bl	8001fdc <Uart_sendstring>

//	Uart_sendstring(UART5, "\r\n");
//	Uart_sendstring(UART5, ">>>>> CPOC V1.2.0 RS422 <<<<<\r\n");
//	Uart_sendstring(UART5, "> ");

	Uart_sendstring(USART2, "\r\n");
 8007b04:	491e      	ldr	r1, [pc, #120]	@ (8007b80 <command_send_splash+0x148>)
 8007b06:	481f      	ldr	r0, [pc, #124]	@ (8007b84 <command_send_splash+0x14c>)
 8007b08:	f7fa fa68 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART2, ">>>>> CPOC V1.2.0 XBEE RF <<<<<\r\n");
 8007b0c:	491e      	ldr	r1, [pc, #120]	@ (8007b88 <command_send_splash+0x150>)
 8007b0e:	481d      	ldr	r0, [pc, #116]	@ (8007b84 <command_send_splash+0x14c>)
 8007b10:	f7fa fa64 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART2, "> ");
 8007b14:	4919      	ldr	r1, [pc, #100]	@ (8007b7c <command_send_splash+0x144>)
 8007b16:	481b      	ldr	r0, [pc, #108]	@ (8007b84 <command_send_splash+0x14c>)
 8007b18:	f7fa fa60 	bl	8001fdc <Uart_sendstring>
}
 8007b1c:	bf00      	nop
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	080150d8 	.word	0x080150d8
 8007b24:	40004c00 	.word	0x40004c00
 8007b28:	0801510c 	.word	0x0801510c
 8007b2c:	08015140 	.word	0x08015140
 8007b30:	08015174 	.word	0x08015174
 8007b34:	080151ac 	.word	0x080151ac
 8007b38:	080151e0 	.word	0x080151e0
 8007b3c:	08015218 	.word	0x08015218
 8007b40:	0801524c 	.word	0x0801524c
 8007b44:	08015280 	.word	0x08015280
 8007b48:	080152b4 	.word	0x080152b4
 8007b4c:	080152e8 	.word	0x080152e8
 8007b50:	0801531c 	.word	0x0801531c
 8007b54:	08015350 	.word	0x08015350
 8007b58:	08015384 	.word	0x08015384
 8007b5c:	080153b8 	.word	0x080153b8
 8007b60:	080153ec 	.word	0x080153ec
 8007b64:	08015420 	.word	0x08015420
 8007b68:	08015454 	.word	0x08015454
 8007b6c:	08015488 	.word	0x08015488
 8007b70:	080154bc 	.word	0x080154bc
 8007b74:	080154f4 	.word	0x080154f4
 8007b78:	08015528 	.word	0x08015528
 8007b7c:	08014c2c 	.word	0x08014c2c
 8007b80:	08014bb4 	.word	0x08014bb4
 8007b84:	40004400 	.word	0x40004400
 8007b88:	0801555c 	.word	0x0801555c

08007b8c <LL_GPIO_SetOutputPin>:
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	619a      	str	r2, [r3, #24]
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <LL_GPIO_ResetOutputPin>:
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	041a      	lsls	r2, r3, #16
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	619a      	str	r2, [r3, #24]
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
	...

08007bc8 <rs422_set_task_period>:
	}
};


void rs422_set_task_period(uint32_t period_ms)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
    RS422_task_context.taskProperty.taskPeriodInMS = period_ms;
 8007bd0:	4a05      	ldr	r2, [pc, #20]	@ (8007be8 <rs422_set_task_period+0x20>)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60d3      	str	r3, [r2, #12]

 //    Reset taskTick when changing task period
    RS422_task_context.taskTick = 0;
 8007bd6:	4b04      	ldr	r3, [pc, #16]	@ (8007be8 <rs422_set_task_period+0x20>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	605a      	str	r2, [r3, #4]

}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	200003e4 	.word	0x200003e4

08007bec <switch_board>:


void switch_board(uint8_t board_id) {
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
    switch (board_id) {
 8007bf6:	79fb      	ldrb	r3, [r7, #7]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d837      	bhi.n	8007c6c <switch_board+0x80>
 8007bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007c04 <switch_board+0x18>)
 8007bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c02:	bf00      	nop
 8007c04:	08007c15 	.word	0x08007c15
 8007c08:	08007c2b 	.word	0x08007c2b
 8007c0c:	08007c41 	.word	0x08007c41
 8007c10:	08007c57 	.word	0x08007c57
        case 0: // PDU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c18:	4816      	ldr	r0, [pc, #88]	@ (8007c74 <switch_board+0x88>)
 8007c1a:	f7ff ffc5 	bl	8007ba8 <LL_GPIO_ResetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c22:	4814      	ldr	r0, [pc, #80]	@ (8007c74 <switch_board+0x88>)
 8007c24:	f7ff ffc0 	bl	8007ba8 <LL_GPIO_ResetOutputPin>
            break;
 8007c28:	e020      	b.n	8007c6c <switch_board+0x80>
        case 1: // PMU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c2e:	4811      	ldr	r0, [pc, #68]	@ (8007c74 <switch_board+0x88>)
 8007c30:	f7ff ffba 	bl	8007ba8 <LL_GPIO_ResetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c38:	480e      	ldr	r0, [pc, #56]	@ (8007c74 <switch_board+0x88>)
 8007c3a:	f7ff ffa7 	bl	8007b8c <LL_GPIO_SetOutputPin>
            break;
 8007c3e:	e015      	b.n	8007c6c <switch_board+0x80>
        case 2: // CAM
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c44:	480b      	ldr	r0, [pc, #44]	@ (8007c74 <switch_board+0x88>)
 8007c46:	f7ff ffa1 	bl	8007b8c <LL_GPIO_SetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c4e:	4809      	ldr	r0, [pc, #36]	@ (8007c74 <switch_board+0x88>)
 8007c50:	f7ff ffaa 	bl	8007ba8 <LL_GPIO_ResetOutputPin>
            break;
 8007c54:	e00a      	b.n	8007c6c <switch_board+0x80>
        case 3: // IOU
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c5a:	4806      	ldr	r0, [pc, #24]	@ (8007c74 <switch_board+0x88>)
 8007c5c:	f7ff ff96 	bl	8007b8c <LL_GPIO_SetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c64:	4803      	ldr	r0, [pc, #12]	@ (8007c74 <switch_board+0x88>)
 8007c66:	f7ff ff91 	bl	8007b8c <LL_GPIO_SetOutputPin>
            break;
 8007c6a:	bf00      	nop
    }
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	40020000 	.word	0x40020000

08007c78 <RS422_periodic_task>:
uint8_t packet_sig = 0;
uint8_t currentSourceBuffer = 0;
volatile uint8_t packet_count = 0x00;


void RS422_periodic_task(void) {
 8007c78:	b590      	push	{r4, r7, lr}
 8007c7a:	b091      	sub	sp, #68	@ 0x44
 8007c7c:	af04      	add	r7, sp, #16
	if (rs422_report_enable) {
 8007c7e:	4b87      	ldr	r3, [pc, #540]	@ (8007e9c <RS422_periodic_task+0x224>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 81bd 	beq.w	8008004 <RS422_periodic_task+0x38c>

        packet_count = 0;
 8007c8a:	4b85      	ldr	r3, [pc, #532]	@ (8007ea0 <RS422_periodic_task+0x228>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	701a      	strb	r2, [r3, #0]
        uint32_t packets_per_second = 0;
 8007c90:	2300      	movs	r3, #0
 8007c92:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch (RS422_task_context.taskProperty.taskPeriodInMS) {
 8007c94:	4b83      	ldr	r3, [pc, #524]	@ (8007ea4 <RS422_periodic_task+0x22c>)
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007c9c:	d06f      	beq.n	8007d7e <RS422_periodic_task+0x106>
 8007c9e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007ca2:	f200 8093 	bhi.w	8007dcc <RS422_periodic_task+0x154>
 8007ca6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007caa:	d06b      	beq.n	8007d84 <RS422_periodic_task+0x10c>
 8007cac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cb0:	f200 808c 	bhi.w	8007dcc <RS422_periodic_task+0x154>
 8007cb4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007cb8:	d067      	beq.n	8007d8a <RS422_periodic_task+0x112>
 8007cba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007cbe:	f200 8085 	bhi.w	8007dcc <RS422_periodic_task+0x154>
 8007cc2:	f240 124d 	movw	r2, #333	@ 0x14d
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d062      	beq.n	8007d90 <RS422_periodic_task+0x118>
 8007cca:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8007cce:	d27d      	bcs.n	8007dcc <RS422_periodic_task+0x154>
 8007cd0:	2bfa      	cmp	r3, #250	@ 0xfa
 8007cd2:	d060      	beq.n	8007d96 <RS422_periodic_task+0x11e>
 8007cd4:	2bfa      	cmp	r3, #250	@ 0xfa
 8007cd6:	d879      	bhi.n	8007dcc <RS422_periodic_task+0x154>
 8007cd8:	2bc8      	cmp	r3, #200	@ 0xc8
 8007cda:	d05f      	beq.n	8007d9c <RS422_periodic_task+0x124>
 8007cdc:	2bc8      	cmp	r3, #200	@ 0xc8
 8007cde:	d875      	bhi.n	8007dcc <RS422_periodic_task+0x154>
 8007ce0:	2ba7      	cmp	r3, #167	@ 0xa7
 8007ce2:	d05e      	beq.n	8007da2 <RS422_periodic_task+0x12a>
 8007ce4:	2ba7      	cmp	r3, #167	@ 0xa7
 8007ce6:	d871      	bhi.n	8007dcc <RS422_periodic_task+0x154>
 8007ce8:	2b8f      	cmp	r3, #143	@ 0x8f
 8007cea:	d05d      	beq.n	8007da8 <RS422_periodic_task+0x130>
 8007cec:	2b8f      	cmp	r3, #143	@ 0x8f
 8007cee:	d86d      	bhi.n	8007dcc <RS422_periodic_task+0x154>
 8007cf0:	2b6f      	cmp	r3, #111	@ 0x6f
 8007cf2:	d841      	bhi.n	8007d78 <RS422_periodic_task+0x100>
 8007cf4:	2b53      	cmp	r3, #83	@ 0x53
 8007cf6:	d369      	bcc.n	8007dcc <RS422_periodic_task+0x154>
 8007cf8:	3b53      	subs	r3, #83	@ 0x53
 8007cfa:	2b1c      	cmp	r3, #28
 8007cfc:	d866      	bhi.n	8007dcc <RS422_periodic_task+0x154>
 8007cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8007d04 <RS422_periodic_task+0x8c>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007dc7 	.word	0x08007dc7
 8007d08:	08007dcd 	.word	0x08007dcd
 8007d0c:	08007dcd 	.word	0x08007dcd
 8007d10:	08007dcd 	.word	0x08007dcd
 8007d14:	08007dcd 	.word	0x08007dcd
 8007d18:	08007dcd 	.word	0x08007dcd
 8007d1c:	08007dcd 	.word	0x08007dcd
 8007d20:	08007dcd 	.word	0x08007dcd
 8007d24:	08007dc1 	.word	0x08007dc1
 8007d28:	08007dcd 	.word	0x08007dcd
 8007d2c:	08007dcd 	.word	0x08007dcd
 8007d30:	08007dcd 	.word	0x08007dcd
 8007d34:	08007dcd 	.word	0x08007dcd
 8007d38:	08007dcd 	.word	0x08007dcd
 8007d3c:	08007dcd 	.word	0x08007dcd
 8007d40:	08007dcd 	.word	0x08007dcd
 8007d44:	08007dcd 	.word	0x08007dcd
 8007d48:	08007dbb 	.word	0x08007dbb
 8007d4c:	08007dcd 	.word	0x08007dcd
 8007d50:	08007dcd 	.word	0x08007dcd
 8007d54:	08007dcd 	.word	0x08007dcd
 8007d58:	08007dcd 	.word	0x08007dcd
 8007d5c:	08007dcd 	.word	0x08007dcd
 8007d60:	08007dcd 	.word	0x08007dcd
 8007d64:	08007dcd 	.word	0x08007dcd
 8007d68:	08007dcd 	.word	0x08007dcd
 8007d6c:	08007dcd 	.word	0x08007dcd
 8007d70:	08007dcd 	.word	0x08007dcd
 8007d74:	08007db5 	.word	0x08007db5
 8007d78:	2b7d      	cmp	r3, #125	@ 0x7d
 8007d7a:	d018      	beq.n	8007dae <RS422_periodic_task+0x136>
 8007d7c:	e026      	b.n	8007dcc <RS422_periodic_task+0x154>
            case 2000:
                packets_per_second = 1;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007d82:	e026      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 1000:
                packets_per_second = 1;
 8007d84:	2301      	movs	r3, #1
 8007d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007d88:	e023      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 500:
                packets_per_second = 2;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007d8e:	e020      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 333:
                packets_per_second = 3;
 8007d90:	2303      	movs	r3, #3
 8007d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007d94:	e01d      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 250:
                packets_per_second = 4;
 8007d96:	2304      	movs	r3, #4
 8007d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007d9a:	e01a      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 200:
                packets_per_second = 5;
 8007d9c:	2305      	movs	r3, #5
 8007d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007da0:	e017      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 167:
                packets_per_second = 6;
 8007da2:	2306      	movs	r3, #6
 8007da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007da6:	e014      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 143:
                packets_per_second = 7;
 8007da8:	2307      	movs	r3, #7
 8007daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dac:	e011      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 125:
                packets_per_second = 8;
 8007dae:	2308      	movs	r3, #8
 8007db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007db2:	e00e      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 111:
                packets_per_second = 9;
 8007db4:	2309      	movs	r3, #9
 8007db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007db8:	e00b      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 100:
                packets_per_second = 10;
 8007dba:	230a      	movs	r3, #10
 8007dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dbe:	e008      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 91:
                packets_per_second = 11;
 8007dc0:	230b      	movs	r3, #11
 8007dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dc4:	e005      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            case 83:
                packets_per_second = 12;
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dca:	e002      	b.n	8007dd2 <RS422_periodic_task+0x15a>
            default:
                packets_per_second = 1;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dd0:	bf00      	nop
        }


		if (packet_count == 0)
 8007dd2:	4b33      	ldr	r3, [pc, #204]	@ (8007ea0 <RS422_periodic_task+0x228>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f040 80a7 	bne.w	8007f2c <RS422_periodic_task+0x2b4>
		{

			nextBuffer[0] = 0x02;
 8007dde:	4b32      	ldr	r3, [pc, #200]	@ (8007ea8 <RS422_periodic_task+0x230>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2202      	movs	r2, #2
 8007de4:	701a      	strb	r2, [r3, #0]
			nextBuffer[ARRAY_SIZE - 1] = 0x03;
 8007de6:	4b30      	ldr	r3, [pc, #192]	@ (8007ea8 <RS422_periodic_task+0x230>)
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	4b30      	ldr	r3, [pc, #192]	@ (8007eac <RS422_periodic_task+0x234>)
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	4413      	add	r3, r2
 8007df2:	2203      	movs	r2, #3
 8007df4:	701a      	strb	r2, [r3, #0]

		    uint8_t day, date, month, year, hour, min, sec;
		    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8007df6:	f107 040c 	add.w	r4, r7, #12
 8007dfa:	f107 020d 	add.w	r2, r7, #13
 8007dfe:	f107 010e 	add.w	r1, r7, #14
 8007e02:	f107 000f 	add.w	r0, r7, #15
 8007e06:	f107 0309 	add.w	r3, r7, #9
 8007e0a:	9302      	str	r3, [sp, #8]
 8007e0c:	f107 030a 	add.w	r3, r7, #10
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	f107 030b 	add.w	r3, r7, #11
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	4623      	mov	r3, r4
 8007e1a:	f7f9 fb23 	bl	8001464 <DS3231_GetDateTime>

		    float temp;
		    uint8_t rounded_temp;

		    temp = DS3231_GetTemperature();
 8007e1e:	f7f9 fbc9 	bl	80015b4 <DS3231_GetTemperature>
 8007e22:	ed87 0a06 	vstr	s0, [r7, #24]
		    rounded_temp = (uint8_t)temp;
 8007e26:	edd7 7a06 	vldr	s15, [r7, #24]
 8007e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007e32:	793b      	ldrb	r3, [r7, #4]
 8007e34:	75fb      	strb	r3, [r7, #23]

		    nextBuffer[2] = sec;
 8007e36:	4b1c      	ldr	r3, [pc, #112]	@ (8007ea8 <RS422_periodic_task+0x230>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3302      	adds	r3, #2
 8007e3c:	7a7a      	ldrb	r2, [r7, #9]
 8007e3e:	701a      	strb	r2, [r3, #0]
		    nextBuffer[3] = min;
 8007e40:	4b19      	ldr	r3, [pc, #100]	@ (8007ea8 <RS422_periodic_task+0x230>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3303      	adds	r3, #3
 8007e46:	7aba      	ldrb	r2, [r7, #10]
 8007e48:	701a      	strb	r2, [r3, #0]
		    nextBuffer[4] = hour;
 8007e4a:	4b17      	ldr	r3, [pc, #92]	@ (8007ea8 <RS422_periodic_task+0x230>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	7afa      	ldrb	r2, [r7, #11]
 8007e52:	701a      	strb	r2, [r3, #0]
		    nextBuffer[5] = date;
 8007e54:	4b14      	ldr	r3, [pc, #80]	@ (8007ea8 <RS422_periodic_task+0x230>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3305      	adds	r3, #5
 8007e5a:	7bba      	ldrb	r2, [r7, #14]
 8007e5c:	701a      	strb	r2, [r3, #0]
		    nextBuffer[6] = month;
 8007e5e:	4b12      	ldr	r3, [pc, #72]	@ (8007ea8 <RS422_periodic_task+0x230>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3306      	adds	r3, #6
 8007e64:	7b7a      	ldrb	r2, [r7, #13]
 8007e66:	701a      	strb	r2, [r3, #0]
		    nextBuffer[7] = rounded_temp;
 8007e68:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea8 <RS422_periodic_task+0x230>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3307      	adds	r3, #7
 8007e6e:	7dfa      	ldrb	r2, [r7, #23]
 8007e70:	701a      	strb	r2, [r3, #0]




			for (int i = 135; i <= 160; i++) {
 8007e72:	2387      	movs	r3, #135	@ 0x87
 8007e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e76:	e00b      	b.n	8007e90 <RS422_periodic_task+0x218>
				nextBuffer[i] = i - 135;
 8007e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea8 <RS422_periodic_task+0x230>)
 8007e7e:	6819      	ldr	r1, [r3, #0]
 8007e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e82:	440b      	add	r3, r1
 8007e84:	3279      	adds	r2, #121	@ 0x79
 8007e86:	b2d2      	uxtb	r2, r2
 8007e88:	701a      	strb	r2, [r3, #0]
			for (int i = 135; i <= 160; i++) {
 8007e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e92:	2ba0      	cmp	r3, #160	@ 0xa0
 8007e94:	ddf0      	ble.n	8007e78 <RS422_periodic_task+0x200>
			}


			for (int i = 161; i <= ARRAY_SIZE-2; i++) {
 8007e96:	23a1      	movs	r3, #161	@ 0xa1
 8007e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e9a:	e015      	b.n	8007ec8 <RS422_periodic_task+0x250>
 8007e9c:	200059fd 	.word	0x200059fd
 8007ea0:	200061d5 	.word	0x200061d5
 8007ea4:	200003e4 	.word	0x200003e4
 8007ea8:	200003fc 	.word	0x200003fc
 8007eac:	200003e0 	.word	0x200003e0
				nextBuffer[i] = i - 161;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	4b55      	ldr	r3, [pc, #340]	@ (800800c <RS422_periodic_task+0x394>)
 8007eb6:	6819      	ldr	r1, [r3, #0]
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	440b      	add	r3, r1
 8007ebc:	325f      	adds	r2, #95	@ 0x5f
 8007ebe:	b2d2      	uxtb	r2, r2
 8007ec0:	701a      	strb	r2, [r3, #0]
			for (int i = 161; i <= ARRAY_SIZE-2; i++) {
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ec8:	4b51      	ldr	r3, [pc, #324]	@ (8008010 <RS422_periodic_task+0x398>)
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	dbed      	blt.n	8007eb0 <RS422_periodic_task+0x238>
			}


			uint16_t crc = crc16_CCITT(0xFFFF, &nextBuffer[1], ARRAY_SIZE - 4);
 8007ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800800c <RS422_periodic_task+0x394>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	1c59      	adds	r1, r3, #1
 8007eda:	4b4d      	ldr	r3, [pc, #308]	@ (8008010 <RS422_periodic_task+0x398>)
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	3b04      	subs	r3, #4
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007ee8:	f004 f8b0 	bl	800c04c <crc16_CCITT>
 8007eec:	4603      	mov	r3, r0
 8007eee:	82bb      	strh	r3, [r7, #20]

			nextBuffer[ARRAY_SIZE - 3] = (crc >> 8) & 0xFF;  // CRC#HIGH
 8007ef0:	8abb      	ldrh	r3, [r7, #20]
 8007ef2:	0a1b      	lsrs	r3, r3, #8
 8007ef4:	b299      	uxth	r1, r3
 8007ef6:	4b45      	ldr	r3, [pc, #276]	@ (800800c <RS422_periodic_task+0x394>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	4b45      	ldr	r3, [pc, #276]	@ (8008010 <RS422_periodic_task+0x398>)
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	3b03      	subs	r3, #3
 8007f00:	4413      	add	r3, r2
 8007f02:	b2ca      	uxtb	r2, r1
 8007f04:	701a      	strb	r2, [r3, #0]
			nextBuffer[ARRAY_SIZE - 2] = crc & 0xFF;         // CRC#LOW
 8007f06:	4b41      	ldr	r3, [pc, #260]	@ (800800c <RS422_periodic_task+0x394>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	4b41      	ldr	r3, [pc, #260]	@ (8008010 <RS422_periodic_task+0x398>)
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	3b02      	subs	r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	8aba      	ldrh	r2, [r7, #20]
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	701a      	strb	r2, [r3, #0]

            // Switch buffers
            uint8_t* tempz = currentBuffer;
 8007f18:	4b3e      	ldr	r3, [pc, #248]	@ (8008014 <RS422_periodic_task+0x39c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	613b      	str	r3, [r7, #16]
            currentBuffer = nextBuffer;
 8007f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800800c <RS422_periodic_task+0x394>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a3c      	ldr	r2, [pc, #240]	@ (8008014 <RS422_periodic_task+0x39c>)
 8007f24:	6013      	str	r3, [r2, #0]
            nextBuffer = tempz;
 8007f26:	4a39      	ldr	r2, [pc, #228]	@ (800800c <RS422_periodic_task+0x394>)
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	6013      	str	r3, [r2, #0]


		}

		currentBuffer[1] = packet_count;
 8007f2c:	4b39      	ldr	r3, [pc, #228]	@ (8008014 <RS422_periodic_task+0x39c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3301      	adds	r3, #1
 8007f32:	4a39      	ldr	r2, [pc, #228]	@ (8008018 <RS422_periodic_task+0x3a0>)
 8007f34:	7812      	ldrb	r2, [r2, #0]
 8007f36:	b2d2      	uxtb	r2, r2
 8007f38:	701a      	strb	r2, [r3, #0]

		if (swap_byte_enable){
 8007f3a:	4b38      	ldr	r3, [pc, #224]	@ (800801c <RS422_periodic_task+0x3a4>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d026      	beq.n	8007f92 <RS422_periodic_task+0x31a>
			for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 8007f44:	2301      	movs	r3, #1
 8007f46:	623b      	str	r3, [r7, #32]
 8007f48:	e01d      	b.n	8007f86 <RS422_periodic_task+0x30e>
				if (currentBuffer[i] == 0x02) {
 8007f4a:	4b32      	ldr	r3, [pc, #200]	@ (8008014 <RS422_periodic_task+0x39c>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	4413      	add	r3, r2
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d106      	bne.n	8007f66 <RS422_periodic_task+0x2ee>
					currentBuffer[i] = 0xFE;
 8007f58:	4b2e      	ldr	r3, [pc, #184]	@ (8008014 <RS422_periodic_task+0x39c>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	4413      	add	r3, r2
 8007f60:	22fe      	movs	r2, #254	@ 0xfe
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	e00c      	b.n	8007f80 <RS422_periodic_task+0x308>
				} else if (currentBuffer[i] == 0x03) {
 8007f66:	4b2b      	ldr	r3, [pc, #172]	@ (8008014 <RS422_periodic_task+0x39c>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d105      	bne.n	8007f80 <RS422_periodic_task+0x308>
					currentBuffer[i] = 0xFD;
 8007f74:	4b27      	ldr	r3, [pc, #156]	@ (8008014 <RS422_periodic_task+0x39c>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	22fd      	movs	r2, #253	@ 0xfd
 8007f7e:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	3301      	adds	r3, #1
 8007f84:	623b      	str	r3, [r7, #32]
 8007f86:	4b22      	ldr	r3, [pc, #136]	@ (8008010 <RS422_periodic_task+0x398>)
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	6a3a      	ldr	r2, [r7, #32]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	dbdb      	blt.n	8007f4a <RS422_periodic_task+0x2d2>
				}
			}
		}

        for (int i = 0; i < ARRAY_SIZE; i++) {
 8007f92:	2300      	movs	r3, #0
 8007f94:	61fb      	str	r3, [r7, #28]
 8007f96:	e00b      	b.n	8007fb0 <RS422_periodic_task+0x338>
            Uart_write(UART5, currentBuffer[i]);
 8007f98:	4b1e      	ldr	r3, [pc, #120]	@ (8008014 <RS422_periodic_task+0x39c>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	481e      	ldr	r0, [pc, #120]	@ (8008020 <RS422_periodic_task+0x3a8>)
 8007fa6:	f7f9 fecf 	bl	8001d48 <Uart_write>
        for (int i = 0; i < ARRAY_SIZE; i++) {
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	3301      	adds	r3, #1
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	4b17      	ldr	r3, [pc, #92]	@ (8008010 <RS422_periodic_task+0x398>)
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	dbed      	blt.n	8007f98 <RS422_periodic_task+0x320>
        }

        if(packet_sig){
 8007fbc:	4b19      	ldr	r3, [pc, #100]	@ (8008024 <RS422_periodic_task+0x3ac>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d007      	beq.n	8007fd4 <RS422_periodic_task+0x35c>
        	packet_sig = 0;
 8007fc4:	4b17      	ldr	r3, [pc, #92]	@ (8008024 <RS422_periodic_task+0x3ac>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	701a      	strb	r2, [r3, #0]
            LL_GPIO_ResetOutputPin(GPIOA,LORA_IO0_Pin);
 8007fca:	2110      	movs	r1, #16
 8007fcc:	4816      	ldr	r0, [pc, #88]	@ (8008028 <RS422_periodic_task+0x3b0>)
 8007fce:	f7ff fdeb 	bl	8007ba8 <LL_GPIO_ResetOutputPin>
 8007fd2:	e006      	b.n	8007fe2 <RS422_periodic_task+0x36a>
        }else{
        	packet_sig = 1;
 8007fd4:	4b13      	ldr	r3, [pc, #76]	@ (8008024 <RS422_periodic_task+0x3ac>)
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	701a      	strb	r2, [r3, #0]
        	LL_GPIO_SetOutputPin(GPIOA,LORA_IO0_Pin);
 8007fda:	2110      	movs	r1, #16
 8007fdc:	4812      	ldr	r0, [pc, #72]	@ (8008028 <RS422_periodic_task+0x3b0>)
 8007fde:	f7ff fdd5 	bl	8007b8c <LL_GPIO_SetOutputPin>
        }

        packet_count++;
 8007fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8008018 <RS422_periodic_task+0x3a0>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	3301      	adds	r3, #1
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	4b0a      	ldr	r3, [pc, #40]	@ (8008018 <RS422_periodic_task+0x3a0>)
 8007fee:	701a      	strb	r2, [r3, #0]

        if (packet_count >= packets_per_second) {
 8007ff0:	4b09      	ldr	r3, [pc, #36]	@ (8008018 <RS422_periodic_task+0x3a0>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d802      	bhi.n	8008004 <RS422_periodic_task+0x38c>
            packet_count = 0;
 8007ffe:	4b06      	ldr	r3, [pc, #24]	@ (8008018 <RS422_periodic_task+0x3a0>)
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
        }

	}
}
 8008004:	bf00      	nop
 8008006:	3734      	adds	r7, #52	@ 0x34
 8008008:	46bd      	mov	sp, r7
 800800a:	bd90      	pop	{r4, r7, pc}
 800800c:	200003fc 	.word	0x200003fc
 8008010:	200003e0 	.word	0x200003e0
 8008014:	200003f8 	.word	0x200003f8
 8008018:	200061d5 	.word	0x200061d5
 800801c:	200059ff 	.word	0x200059ff
 8008020:	40005000 	.word	0x40005000
 8008024:	200061d4 	.word	0x200061d4
 8008028:	40020000 	.word	0x40020000

0800802c <frame_processing_rs422>:

void frame_processing_rs422(fsp_packet_t *fsp_pkt){
 800802c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008030:	f5ad 6ddb 	sub.w	sp, sp, #1752	@ 0x6d8
 8008034:	af34      	add	r7, sp, #208	@ 0xd0
 8008036:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800803a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800803e:	6018      	str	r0, [r3, #0]
	switch(fsp_pkt->payload[0])
 8008040:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008044:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	795b      	ldrb	r3, [r3, #5]
 800804c:	2b13      	cmp	r3, #19
 800804e:	f000 8629 	beq.w	8008ca4 <frame_processing_rs422+0xc78>
 8008052:	2b13      	cmp	r3, #19
 8008054:	f301 833a 	bgt.w	80096cc <frame_processing_rs422+0x16a0>
 8008058:	2b06      	cmp	r3, #6
 800805a:	f000 82eb 	beq.w	8008634 <frame_processing_rs422+0x608>
 800805e:	2b08      	cmp	r3, #8
 8008060:	f041 8334 	bne.w	80096cc <frame_processing_rs422+0x16a0>
	{
		case 0x08:
	    {
			if(auto_report_enabled || rf_report_enable){
 8008064:	4bab      	ldr	r3, [pc, #684]	@ (8008314 <frame_processing_rs422+0x2e8>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d105      	bne.n	800807a <frame_processing_rs422+0x4e>
 800806e:	4baa      	ldr	r3, [pc, #680]	@ (8008318 <frame_processing_rs422+0x2ec>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 82a3 	beq.w	80085c0 <frame_processing_rs422+0x594>
				if(auto_report_enabled){
 800807a:	4ba6      	ldr	r3, [pc, #664]	@ (8008314 <frame_processing_rs422+0x2e8>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d004      	beq.n	800808e <frame_processing_rs422+0x62>
					Uart_sendstring(UART4, "\nPMU:\n");
 8008084:	49a5      	ldr	r1, [pc, #660]	@ (800831c <frame_processing_rs422+0x2f0>)
 8008086:	48a6      	ldr	r0, [pc, #664]	@ (8008320 <frame_processing_rs422+0x2f4>)
 8008088:	f7f9 ffa8 	bl	8001fdc <Uart_sendstring>
 800808c:	e003      	b.n	8008096 <frame_processing_rs422+0x6a>
				}else{
					Uart_sendstring(USART2, "\nPMU:\n");
 800808e:	49a3      	ldr	r1, [pc, #652]	@ (800831c <frame_processing_rs422+0x2f0>)
 8008090:	48a4      	ldr	r0, [pc, #656]	@ (8008324 <frame_processing_rs422+0x2f8>)
 8008092:	f7f9 ffa3 	bl	8001fdc <Uart_sendstring>
				}

				int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8008096:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800809a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	799b      	ldrb	r3, [r3, #6]
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	b21a      	sxth	r2, r3
 80080a6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80080aa:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	79db      	ldrb	r3, [r3, #7]
 80080b2:	b21b      	sxth	r3, r3
 80080b4:	4313      	orrs	r3, r2
 80080b6:	f8a7 35c8 	strh.w	r3, [r7, #1480]	@ 0x5c8
				int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 80080ba:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80080be:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	7a1b      	ldrb	r3, [r3, #8]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	b21a      	sxth	r2, r3
 80080ca:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80080ce:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	7a5b      	ldrb	r3, [r3, #9]
 80080d6:	b21b      	sxth	r3, r3
 80080d8:	4313      	orrs	r3, r2
 80080da:	f8a7 35c6 	strh.w	r3, [r7, #1478]	@ 0x5c6
				int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 80080de:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80080e2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	7a9b      	ldrb	r3, [r3, #10]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	b21a      	sxth	r2, r3
 80080ee:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80080f2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	7adb      	ldrb	r3, [r3, #11]
 80080fa:	b21b      	sxth	r3, r3
 80080fc:	4313      	orrs	r3, r2
 80080fe:	f8a7 35c4 	strh.w	r3, [r7, #1476]	@ 0x5c4
				int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 8008102:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008106:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	7b1b      	ldrb	r3, [r3, #12]
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	b21a      	sxth	r2, r3
 8008112:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008116:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	7b5b      	ldrb	r3, [r3, #13]
 800811e:	b21b      	sxth	r3, r3
 8008120:	4313      	orrs	r3, r2
 8008122:	f8a7 35c2 	strh.w	r3, [r7, #1474]	@ 0x5c2

				uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 8008126:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800812a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	7b9b      	ldrb	r3, [r3, #14]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	b21a      	sxth	r2, r3
 8008136:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800813a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	7bdb      	ldrb	r3, [r3, #15]
 8008142:	b21b      	sxth	r3, r3
 8008144:	4313      	orrs	r3, r2
 8008146:	b21b      	sxth	r3, r3
 8008148:	f8a7 35c0 	strh.w	r3, [r7, #1472]	@ 0x5c0
				uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800814c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008150:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	7c1b      	ldrb	r3, [r3, #16]
 8008158:	021b      	lsls	r3, r3, #8
 800815a:	b21a      	sxth	r2, r3
 800815c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008160:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	7c5b      	ldrb	r3, [r3, #17]
 8008168:	b21b      	sxth	r3, r3
 800816a:	4313      	orrs	r3, r2
 800816c:	b21b      	sxth	r3, r3
 800816e:	f8a7 35be 	strh.w	r3, [r7, #1470]	@ 0x5be
				uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 8008172:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008176:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	7c9b      	ldrb	r3, [r3, #18]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	b21a      	sxth	r2, r3
 8008182:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008186:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	7cdb      	ldrb	r3, [r3, #19]
 800818e:	b21b      	sxth	r3, r3
 8008190:	4313      	orrs	r3, r2
 8008192:	b21b      	sxth	r3, r3
 8008194:	f8a7 35bc 	strh.w	r3, [r7, #1468]	@ 0x5bc
				uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8008198:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800819c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	7d1b      	ldrb	r3, [r3, #20]
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	b21a      	sxth	r2, r3
 80081a8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80081ac:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	7d5b      	ldrb	r3, [r3, #21]
 80081b4:	b21b      	sxth	r3, r3
 80081b6:	4313      	orrs	r3, r2
 80081b8:	b21b      	sxth	r3, r3
 80081ba:	f8a7 35ba 	strh.w	r3, [r7, #1466]	@ 0x5ba

				uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 80081be:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80081c2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	7d9b      	ldrb	r3, [r3, #22]
 80081ca:	021b      	lsls	r3, r3, #8
 80081cc:	b21a      	sxth	r2, r3
 80081ce:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80081d2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	7ddb      	ldrb	r3, [r3, #23]
 80081da:	b21b      	sxth	r3, r3
 80081dc:	4313      	orrs	r3, r2
 80081de:	b21b      	sxth	r3, r3
 80081e0:	f8a7 35b8 	strh.w	r3, [r7, #1464]	@ 0x5b8
				uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 80081e4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80081e8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	7e1b      	ldrb	r3, [r3, #24]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	b21a      	sxth	r2, r3
 80081f4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80081f8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	7e5b      	ldrb	r3, [r3, #25]
 8008200:	b21b      	sxth	r3, r3
 8008202:	4313      	orrs	r3, r2
 8008204:	b21b      	sxth	r3, r3
 8008206:	f8a7 35b6 	strh.w	r3, [r7, #1462]	@ 0x5b6

				uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800820a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800820e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	7e9b      	ldrb	r3, [r3, #26]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	b21a      	sxth	r2, r3
 800821a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800821e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	7edb      	ldrb	r3, [r3, #27]
 8008226:	b21b      	sxth	r3, r3
 8008228:	4313      	orrs	r3, r2
 800822a:	b21b      	sxth	r3, r3
 800822c:	f8a7 35b4 	strh.w	r3, [r7, #1460]	@ 0x5b4
				uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 8008230:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008234:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	7f1b      	ldrb	r3, [r3, #28]
 800823c:	021b      	lsls	r3, r3, #8
 800823e:	b21a      	sxth	r2, r3
 8008240:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008244:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	7f5b      	ldrb	r3, [r3, #29]
 800824c:	b21b      	sxth	r3, r3
 800824e:	4313      	orrs	r3, r2
 8008250:	b21b      	sxth	r3, r3
 8008252:	f8a7 35b2 	strh.w	r3, [r7, #1458]	@ 0x5b2

				char buffer_0x08[500];
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008256:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 800825a:	2b00      	cmp	r3, #0
 800825c:	da03      	bge.n	8008266 <frame_processing_rs422+0x23a>
 800825e:	4b32      	ldr	r3, [pc, #200]	@ (8008328 <frame_processing_rs422+0x2fc>)
 8008260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008264:	e002      	b.n	800826c <frame_processing_rs422+0x240>
 8008266:	4b31      	ldr	r3, [pc, #196]	@ (800832c <frame_processing_rs422+0x300>)
 8008268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800826c:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 8008270:	2b00      	cmp	r3, #0
 8008272:	bfb8      	it	lt
 8008274:	425b      	neglt	r3, r3
 8008276:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008278:	4a2d      	ldr	r2, [pc, #180]	@ (8008330 <frame_processing_rs422+0x304>)
 800827a:	fb82 1203 	smull	r1, r2, r2, r3
 800827e:	1152      	asrs	r2, r2, #5
 8008280:	17db      	asrs	r3, r3, #31
 8008282:	eba2 0c03 	sub.w	ip, r2, r3
						ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 8008286:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 800828a:	2b00      	cmp	r3, #0
 800828c:	bfb8      	it	lt
 800828e:	425b      	neglt	r3, r3
 8008290:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008292:	4a27      	ldr	r2, [pc, #156]	@ (8008330 <frame_processing_rs422+0x304>)
 8008294:	fb82 1203 	smull	r1, r2, r2, r3
 8008298:	1151      	asrs	r1, r2, #5
 800829a:	17da      	asrs	r2, r3, #31
 800829c:	1a8a      	subs	r2, r1, r2
 800829e:	4611      	mov	r1, r2
 80082a0:	2264      	movs	r2, #100	@ 0x64
 80082a2:	fb01 f202 	mul.w	r2, r1, r2
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80082ac:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da03      	bge.n	80082bc <frame_processing_rs422+0x290>
 80082b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008328 <frame_processing_rs422+0x2fc>)
 80082b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082ba:	e002      	b.n	80082c2 <frame_processing_rs422+0x296>
 80082bc:	4b1b      	ldr	r3, [pc, #108]	@ (800832c <frame_processing_rs422+0x300>)
 80082be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 80082c2:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	bfb8      	it	lt
 80082ca:	425b      	neglt	r3, r3
 80082cc:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80082ce:	4a18      	ldr	r2, [pc, #96]	@ (8008330 <frame_processing_rs422+0x304>)
 80082d0:	fb82 1203 	smull	r1, r2, r2, r3
 80082d4:	1152      	asrs	r2, r2, #5
 80082d6:	17db      	asrs	r3, r3, #31
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 80082de:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bfb8      	it	lt
 80082e6:	425b      	neglt	r3, r3
 80082e8:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80082ea:	4a11      	ldr	r2, [pc, #68]	@ (8008330 <frame_processing_rs422+0x304>)
 80082ec:	fb82 1203 	smull	r1, r2, r2, r3
 80082f0:	1151      	asrs	r1, r2, #5
 80082f2:	17da      	asrs	r2, r3, #31
 80082f4:	1a8a      	subs	r2, r1, r2
 80082f6:	4611      	mov	r1, r2
 80082f8:	2264      	movs	r2, #100	@ 0x64
 80082fa:	fb01 f202 	mul.w	r2, r1, r2
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008304:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 8008308:	2b00      	cmp	r3, #0
 800830a:	da13      	bge.n	8008334 <frame_processing_rs422+0x308>
 800830c:	4b06      	ldr	r3, [pc, #24]	@ (8008328 <frame_processing_rs422+0x2fc>)
 800830e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008312:	e012      	b.n	800833a <frame_processing_rs422+0x30e>
 8008314:	200059fc 	.word	0x200059fc
 8008318:	200059fe 	.word	0x200059fe
 800831c:	08015580 	.word	0x08015580
 8008320:	40004c00 	.word	0x40004c00
 8008324:	40004400 	.word	0x40004400
 8008328:	08015588 	.word	0x08015588
 800832c:	0801558c 	.word	0x0801558c
 8008330:	51eb851f 	.word	0x51eb851f
 8008334:	4bb5      	ldr	r3, [pc, #724]	@ (800860c <frame_processing_rs422+0x5e0>)
 8008336:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800833a:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 800833e:	2b00      	cmp	r3, #0
 8008340:	bfb8      	it	lt
 8008342:	425b      	neglt	r3, r3
 8008344:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008346:	4ab2      	ldr	r2, [pc, #712]	@ (8008610 <frame_processing_rs422+0x5e4>)
 8008348:	fb82 1203 	smull	r1, r2, r2, r3
 800834c:	1152      	asrs	r2, r2, #5
 800834e:	17db      	asrs	r3, r3, #31
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 8008356:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfb8      	it	lt
 800835e:	425b      	neglt	r3, r3
 8008360:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008362:	4aab      	ldr	r2, [pc, #684]	@ (8008610 <frame_processing_rs422+0x5e4>)
 8008364:	fb82 1203 	smull	r1, r2, r2, r3
 8008368:	1151      	asrs	r1, r2, #5
 800836a:	17da      	asrs	r2, r3, #31
 800836c:	1a8a      	subs	r2, r1, r2
 800836e:	4611      	mov	r1, r2
 8008370:	2264      	movs	r2, #100	@ 0x64
 8008372:	fb01 f202 	mul.w	r2, r1, r2
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800837c:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 8008380:	2b00      	cmp	r3, #0
 8008382:	da03      	bge.n	800838c <frame_processing_rs422+0x360>
 8008384:	4ba3      	ldr	r3, [pc, #652]	@ (8008614 <frame_processing_rs422+0x5e8>)
 8008386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800838a:	e002      	b.n	8008392 <frame_processing_rs422+0x366>
 800838c:	4b9f      	ldr	r3, [pc, #636]	@ (800860c <frame_processing_rs422+0x5e0>)
 800838e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 8008392:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 8008396:	2b00      	cmp	r3, #0
 8008398:	bfb8      	it	lt
 800839a:	425b      	neglt	r3, r3
 800839c:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800839e:	4a9c      	ldr	r2, [pc, #624]	@ (8008610 <frame_processing_rs422+0x5e4>)
 80083a0:	fb82 1203 	smull	r1, r2, r2, r3
 80083a4:	1152      	asrs	r2, r2, #5
 80083a6:	17db      	asrs	r3, r3, #31
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 80083ae:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bfb8      	it	lt
 80083b6:	425b      	neglt	r3, r3
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	4619      	mov	r1, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80083bc:	4b94      	ldr	r3, [pc, #592]	@ (8008610 <frame_processing_rs422+0x5e4>)
 80083be:	fb83 2301 	smull	r2, r3, r3, r1
 80083c2:	115a      	asrs	r2, r3, #5
 80083c4:	17cb      	asrs	r3, r1, #31
 80083c6:	1ad6      	subs	r6, r2, r3
 80083c8:	2364      	movs	r3, #100	@ 0x64
 80083ca:	fb06 f303 	mul.w	r3, r6, r3
 80083ce:	1ace      	subs	r6, r1, r3
 80083d0:	f8b7 35c0 	ldrh.w	r3, [r7, #1472]	@ 0x5c0
 80083d4:	4a8e      	ldr	r2, [pc, #568]	@ (8008610 <frame_processing_rs422+0x5e4>)
 80083d6:	fba2 2303 	umull	r2, r3, r2, r3
 80083da:	095b      	lsrs	r3, r3, #5
 80083dc:	b29b      	uxth	r3, r3
 80083de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083e2:	f8b7 15c0 	ldrh.w	r1, [r7, #1472]	@ 0x5c0
 80083e6:	4b8a      	ldr	r3, [pc, #552]	@ (8008610 <frame_processing_rs422+0x5e4>)
 80083e8:	fba3 2301 	umull	r2, r3, r3, r1
 80083ec:	095a      	lsrs	r2, r3, #5
 80083ee:	2364      	movs	r3, #100	@ 0x64
 80083f0:	fb02 f303 	mul.w	r3, r2, r3
 80083f4:	1acb      	subs	r3, r1, r3
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083fc:	f8b7 25be 	ldrh.w	r2, [r7, #1470]	@ 0x5be
 8008400:	4b83      	ldr	r3, [pc, #524]	@ (8008610 <frame_processing_rs422+0x5e4>)
 8008402:	fba3 2302 	umull	r2, r3, r3, r2
 8008406:	095b      	lsrs	r3, r3, #5
 8008408:	b29b      	uxth	r3, r3
 800840a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800840e:	f8b7 15be 	ldrh.w	r1, [r7, #1470]	@ 0x5be
 8008412:	4b7f      	ldr	r3, [pc, #508]	@ (8008610 <frame_processing_rs422+0x5e4>)
 8008414:	fba3 2301 	umull	r2, r3, r3, r1
 8008418:	095a      	lsrs	r2, r3, #5
 800841a:	2364      	movs	r3, #100	@ 0x64
 800841c:	fb02 f303 	mul.w	r3, r2, r3
 8008420:	1acb      	subs	r3, r1, r3
 8008422:	b29b      	uxth	r3, r3
 8008424:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008426:	f8b7 25bc 	ldrh.w	r2, [r7, #1468]	@ 0x5bc
 800842a:	4b79      	ldr	r3, [pc, #484]	@ (8008610 <frame_processing_rs422+0x5e4>)
 800842c:	fba3 2302 	umull	r2, r3, r3, r2
 8008430:	095b      	lsrs	r3, r3, #5
 8008432:	b29b      	uxth	r3, r3
 8008434:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008436:	f8b7 15bc 	ldrh.w	r1, [r7, #1468]	@ 0x5bc
 800843a:	4b75      	ldr	r3, [pc, #468]	@ (8008610 <frame_processing_rs422+0x5e4>)
 800843c:	fba3 2301 	umull	r2, r3, r3, r1
 8008440:	095a      	lsrs	r2, r3, #5
 8008442:	2364      	movs	r3, #100	@ 0x64
 8008444:	fb02 f303 	mul.w	r3, r2, r3
 8008448:	1acb      	subs	r3, r1, r3
 800844a:	b29b      	uxth	r3, r3
 800844c:	677b      	str	r3, [r7, #116]	@ 0x74
 800844e:	f8b7 25ba 	ldrh.w	r2, [r7, #1466]	@ 0x5ba
 8008452:	4b6f      	ldr	r3, [pc, #444]	@ (8008610 <frame_processing_rs422+0x5e4>)
 8008454:	fba3 2302 	umull	r2, r3, r3, r2
 8008458:	095b      	lsrs	r3, r3, #5
 800845a:	b29b      	uxth	r3, r3
 800845c:	673b      	str	r3, [r7, #112]	@ 0x70
 800845e:	f8b7 15ba 	ldrh.w	r1, [r7, #1466]	@ 0x5ba
 8008462:	4b6b      	ldr	r3, [pc, #428]	@ (8008610 <frame_processing_rs422+0x5e4>)
 8008464:	fba3 2301 	umull	r2, r3, r3, r1
 8008468:	095a      	lsrs	r2, r3, #5
 800846a:	2364      	movs	r3, #100	@ 0x64
 800846c:	fb02 f303 	mul.w	r3, r2, r3
 8008470:	1acb      	subs	r3, r1, r3
 8008472:	b29b      	uxth	r3, r3
 8008474:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008476:	f8b7 25b8 	ldrh.w	r2, [r7, #1464]	@ 0x5b8
 800847a:	4b65      	ldr	r3, [pc, #404]	@ (8008610 <frame_processing_rs422+0x5e4>)
 800847c:	fba3 2302 	umull	r2, r3, r3, r2
 8008480:	095b      	lsrs	r3, r3, #5
 8008482:	b29b      	uxth	r3, r3
 8008484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008486:	f8b7 15b8 	ldrh.w	r1, [r7, #1464]	@ 0x5b8
 800848a:	4b61      	ldr	r3, [pc, #388]	@ (8008610 <frame_processing_rs422+0x5e4>)
 800848c:	fba3 2301 	umull	r2, r3, r3, r1
 8008490:	095a      	lsrs	r2, r3, #5
 8008492:	2364      	movs	r3, #100	@ 0x64
 8008494:	fb02 f303 	mul.w	r3, r2, r3
 8008498:	1acb      	subs	r3, r1, r3
 800849a:	b29b      	uxth	r3, r3
 800849c:	667b      	str	r3, [r7, #100]	@ 0x64
 800849e:	f8b7 25b6 	ldrh.w	r2, [r7, #1462]	@ 0x5b6
 80084a2:	4b5b      	ldr	r3, [pc, #364]	@ (8008610 <frame_processing_rs422+0x5e4>)
 80084a4:	fba3 2302 	umull	r2, r3, r3, r2
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ae:	f8b7 15b6 	ldrh.w	r1, [r7, #1462]	@ 0x5b6
 80084b2:	4b57      	ldr	r3, [pc, #348]	@ (8008610 <frame_processing_rs422+0x5e4>)
 80084b4:	fba3 2301 	umull	r2, r3, r3, r1
 80084b8:	095a      	lsrs	r2, r3, #5
 80084ba:	2364      	movs	r3, #100	@ 0x64
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
 80084c0:	1acb      	subs	r3, r1, r3
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084c6:	f8b7 25b4 	ldrh.w	r2, [r7, #1460]	@ 0x5b4
 80084ca:	4b51      	ldr	r3, [pc, #324]	@ (8008610 <frame_processing_rs422+0x5e4>)
 80084cc:	fba3 2302 	umull	r2, r3, r3, r2
 80084d0:	095b      	lsrs	r3, r3, #5
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084d6:	f8b7 15b4 	ldrh.w	r1, [r7, #1460]	@ 0x5b4
 80084da:	4b4d      	ldr	r3, [pc, #308]	@ (8008610 <frame_processing_rs422+0x5e4>)
 80084dc:	fba3 2301 	umull	r2, r3, r3, r1
 80084e0:	095a      	lsrs	r2, r3, #5
 80084e2:	2364      	movs	r3, #100	@ 0x64
 80084e4:	fb02 f303 	mul.w	r3, r2, r3
 80084e8:	1acb      	subs	r3, r1, r3
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	461d      	mov	r5, r3
 80084ee:	f8b7 25b2 	ldrh.w	r2, [r7, #1458]	@ 0x5b2
 80084f2:	4b47      	ldr	r3, [pc, #284]	@ (8008610 <frame_processing_rs422+0x5e4>)
 80084f4:	fba3 2302 	umull	r2, r3, r3, r2
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	461c      	mov	r4, r3
 80084fe:	f8b7 15b2 	ldrh.w	r1, [r7, #1458]	@ 0x5b2
 8008502:	4b43      	ldr	r3, [pc, #268]	@ (8008610 <frame_processing_rs422+0x5e4>)
 8008504:	fba3 2301 	umull	r2, r3, r3, r1
 8008508:	095a      	lsrs	r2, r3, #5
 800850a:	2364      	movs	r3, #100	@ 0x64
 800850c:	fb02 f303 	mul.w	r3, r2, r3
 8008510:	1acb      	subs	r3, r1, r3
 8008512:	b29b      	uxth	r3, r3
 8008514:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8008518:	9319      	str	r3, [sp, #100]	@ 0x64
 800851a:	9418      	str	r4, [sp, #96]	@ 0x60
 800851c:	9517      	str	r5, [sp, #92]	@ 0x5c
 800851e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008520:	9216      	str	r2, [sp, #88]	@ 0x58
 8008522:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008524:	9215      	str	r2, [sp, #84]	@ 0x54
 8008526:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008528:	9214      	str	r2, [sp, #80]	@ 0x50
 800852a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800852c:	9213      	str	r2, [sp, #76]	@ 0x4c
 800852e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008530:	9212      	str	r2, [sp, #72]	@ 0x48
 8008532:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008534:	9211      	str	r2, [sp, #68]	@ 0x44
 8008536:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008538:	9210      	str	r2, [sp, #64]	@ 0x40
 800853a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800853c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800853e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008540:	920e      	str	r2, [sp, #56]	@ 0x38
 8008542:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008544:	920d      	str	r2, [sp, #52]	@ 0x34
 8008546:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800854a:	920c      	str	r2, [sp, #48]	@ 0x30
 800854c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008550:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008552:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008556:	920a      	str	r2, [sp, #40]	@ 0x28
 8008558:	9609      	str	r6, [sp, #36]	@ 0x24
 800855a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800855e:	9308      	str	r3, [sp, #32]
 8008560:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008564:	9307      	str	r3, [sp, #28]
 8008566:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800856a:	9306      	str	r3, [sp, #24]
 800856c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008570:	9305      	str	r3, [sp, #20]
 8008572:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008576:	9304      	str	r3, [sp, #16]
 8008578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800857c:	9303      	str	r3, [sp, #12]
 800857e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008582:	9302      	str	r3, [sp, #8]
 8008584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	4663      	mov	r3, ip
 8008592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008596:	4920      	ldr	r1, [pc, #128]	@ (8008618 <frame_processing_rs422+0x5ec>)
 8008598:	f007 fc46 	bl	800fe28 <siprintf>
						bat0 / 100, bat0 % 100, bat1 / 100, bat1 % 100,
						bat2 / 100, bat2 % 100, bat3 / 100, bat3 % 100,
						vin / 100, vin % 100, iin / 100, iin % 100,
						vout / 100, vout % 100, iout / 100, iout % 100);

				if(auto_report_enabled){
 800859c:	4b1f      	ldr	r3, [pc, #124]	@ (800861c <frame_processing_rs422+0x5f0>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d006      	beq.n	80085b4 <frame_processing_rs422+0x588>
					Uart_sendstring(UART4, buffer_0x08);
 80085a6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80085aa:	4619      	mov	r1, r3
 80085ac:	481c      	ldr	r0, [pc, #112]	@ (8008620 <frame_processing_rs422+0x5f4>)
 80085ae:	f7f9 fd15 	bl	8001fdc <Uart_sendstring>
 80085b2:	e005      	b.n	80085c0 <frame_processing_rs422+0x594>
				}else{
					Uart_sendstring(USART2, buffer_0x08);
 80085b4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80085b8:	4619      	mov	r1, r3
 80085ba:	481a      	ldr	r0, [pc, #104]	@ (8008624 <frame_processing_rs422+0x5f8>)
 80085bc:	f7f9 fd0e 	bl	8001fdc <Uart_sendstring>
				}
			}
			receive_pmuFlag = 1;
 80085c0:	4b19      	ldr	r3, [pc, #100]	@ (8008628 <frame_processing_rs422+0x5fc>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	701a      	strb	r2, [r3, #0]

			for (int i = 1; i <= 24; i++) {
 80085c6:	2301      	movs	r3, #1
 80085c8:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 80085cc:	e015      	b.n	80085fa <frame_processing_rs422+0x5ce>
			    nextBuffer[i + 110] = fsp_pkt->payload[i]; //97   pay1    + 98 pay2    120    pay24
 80085ce:	4b17      	ldr	r3, [pc, #92]	@ (800862c <frame_processing_rs422+0x600>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 80085d6:	336e      	adds	r3, #110	@ 0x6e
 80085d8:	4413      	add	r3, r2
 80085da:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 80085de:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 80085e2:	6811      	ldr	r1, [r2, #0]
 80085e4:	f8d7 2604 	ldr.w	r2, [r7, #1540]	@ 0x604
 80085e8:	440a      	add	r2, r1
 80085ea:	3205      	adds	r2, #5
 80085ec:	7812      	ldrb	r2, [r2, #0]
 80085ee:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= 24; i++) {
 80085f0:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 80085f4:	3301      	adds	r3, #1
 80085f6:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 80085fa:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 80085fe:	2b18      	cmp	r3, #24
 8008600:	dde5      	ble.n	80085ce <frame_processing_rs422+0x5a2>
			}
//			Uart_sendstring(UART4, "\nPMU_Collected\r\n");

			disconnect_counter_pmu = 0;
 8008602:	4b0b      	ldr	r3, [pc, #44]	@ (8008630 <frame_processing_rs422+0x604>)
 8008604:	2200      	movs	r2, #0
 8008606:	701a      	strb	r2, [r3, #0]

	    }
	    break;
 8008608:	f001 b869 	b.w	80096de <frame_processing_rs422+0x16b2>
 800860c:	0801558c 	.word	0x0801558c
 8008610:	51eb851f 	.word	0x51eb851f
 8008614:	08015588 	.word	0x08015588
 8008618:	08015590 	.word	0x08015590
 800861c:	200059fc 	.word	0x200059fc
 8008620:	40004c00 	.word	0x40004c00
 8008624:	40004400 	.word	0x40004400
 8008628:	20000041 	.word	0x20000041
 800862c:	200003fc 	.word	0x200003fc
 8008630:	200058d1 	.word	0x200058d1

		case 0x06:
		{
			if(auto_report_enabled || rf_report_enable){
 8008634:	4b0a      	ldr	r3, [pc, #40]	@ (8008660 <frame_processing_rs422+0x634>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d105      	bne.n	800864a <frame_processing_rs422+0x61e>
 800863e:	4b09      	ldr	r3, [pc, #36]	@ (8008664 <frame_processing_rs422+0x638>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 8307 	beq.w	8008c58 <frame_processing_rs422+0xc2c>
				if(auto_report_enabled){
 800864a:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <frame_processing_rs422+0x634>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00d      	beq.n	8008670 <frame_processing_rs422+0x644>
					Uart_sendstring(UART4, "\nPDU:\n");
 8008654:	4904      	ldr	r1, [pc, #16]	@ (8008668 <frame_processing_rs422+0x63c>)
 8008656:	4805      	ldr	r0, [pc, #20]	@ (800866c <frame_processing_rs422+0x640>)
 8008658:	f7f9 fcc0 	bl	8001fdc <Uart_sendstring>
 800865c:	e012      	b.n	8008684 <frame_processing_rs422+0x658>
 800865e:	bf00      	nop
 8008660:	200059fc 	.word	0x200059fc
 8008664:	200059fe 	.word	0x200059fe
 8008668:	08015680 	.word	0x08015680
 800866c:	40004c00 	.word	0x40004c00
				}else{
					Uart_sendstring(USART2, "\nPDU:\n");
 8008670:	4902      	ldr	r1, [pc, #8]	@ (800867c <frame_processing_rs422+0x650>)
 8008672:	4803      	ldr	r0, [pc, #12]	@ (8008680 <frame_processing_rs422+0x654>)
 8008674:	f7f9 fcb2 	bl	8001fdc <Uart_sendstring>
 8008678:	e004      	b.n	8008684 <frame_processing_rs422+0x658>
 800867a:	bf00      	nop
 800867c:	08015680 	.word	0x08015680
 8008680:	40004400 	.word	0x40004400
				}
				uint8_t tec1buck_status = fsp_pkt->payload[1];
 8008684:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008688:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	799b      	ldrb	r3, [r3, #6]
 8008690:	f887 35b1 	strb.w	r3, [r7, #1457]	@ 0x5b1
				uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 8008694:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008698:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	79db      	ldrb	r3, [r3, #7]
 80086a0:	021b      	lsls	r3, r3, #8
 80086a2:	b21a      	sxth	r2, r3
 80086a4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086a8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	7a1b      	ldrb	r3, [r3, #8]
 80086b0:	b21b      	sxth	r3, r3
 80086b2:	4313      	orrs	r3, r2
 80086b4:	b21b      	sxth	r3, r3
 80086b6:	f8a7 35ae 	strh.w	r3, [r7, #1454]	@ 0x5ae

				uint8_t tec2buck_status = fsp_pkt->payload[4];
 80086ba:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086be:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	7a5b      	ldrb	r3, [r3, #9]
 80086c6:	f887 35ad 	strb.w	r3, [r7, #1453]	@ 0x5ad
				uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 80086ca:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086ce:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	7a9b      	ldrb	r3, [r3, #10]
 80086d6:	021b      	lsls	r3, r3, #8
 80086d8:	b21a      	sxth	r2, r3
 80086da:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086de:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	7adb      	ldrb	r3, [r3, #11]
 80086e6:	b21b      	sxth	r3, r3
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b21b      	sxth	r3, r3
 80086ec:	f8a7 35aa 	strh.w	r3, [r7, #1450]	@ 0x5aa

				uint8_t tec3buck_status = fsp_pkt->payload[7];
 80086f0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086f4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	7b1b      	ldrb	r3, [r3, #12]
 80086fc:	f887 35a9 	strb.w	r3, [r7, #1449]	@ 0x5a9
				uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 8008700:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008704:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	7b5b      	ldrb	r3, [r3, #13]
 800870c:	021b      	lsls	r3, r3, #8
 800870e:	b21a      	sxth	r2, r3
 8008710:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008714:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	7b9b      	ldrb	r3, [r3, #14]
 800871c:	b21b      	sxth	r3, r3
 800871e:	4313      	orrs	r3, r2
 8008720:	b21b      	sxth	r3, r3
 8008722:	f8a7 35a6 	strh.w	r3, [r7, #1446]	@ 0x5a6

				uint8_t tec4buck_status = fsp_pkt->payload[10];
 8008726:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800872a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	7bdb      	ldrb	r3, [r3, #15]
 8008732:	f887 35a5 	strb.w	r3, [r7, #1445]	@ 0x5a5
				uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 8008736:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800873a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	7c1b      	ldrb	r3, [r3, #16]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	b21a      	sxth	r2, r3
 8008746:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800874a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	7c5b      	ldrb	r3, [r3, #17]
 8008752:	b21b      	sxth	r3, r3
 8008754:	4313      	orrs	r3, r2
 8008756:	b21b      	sxth	r3, r3
 8008758:	f8a7 35a2 	strh.w	r3, [r7, #1442]	@ 0x5a2

				uint8_t mcubuck_status = fsp_pkt->payload[13];
 800875c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008760:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	7c9b      	ldrb	r3, [r3, #18]
 8008768:	f887 35a1 	strb.w	r3, [r7, #1441]	@ 0x5a1
				uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 800876c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008770:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	7cdb      	ldrb	r3, [r3, #19]
 8008778:	021b      	lsls	r3, r3, #8
 800877a:	b21a      	sxth	r2, r3
 800877c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008780:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	7d1b      	ldrb	r3, [r3, #20]
 8008788:	b21b      	sxth	r3, r3
 800878a:	4313      	orrs	r3, r2
 800878c:	b21b      	sxth	r3, r3
 800878e:	f8a7 359e 	strh.w	r3, [r7, #1438]	@ 0x59e

				uint8_t ledbuck_status = fsp_pkt->payload[16];
 8008792:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008796:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	7d5b      	ldrb	r3, [r3, #21]
 800879e:	f887 359d 	strb.w	r3, [r7, #1437]	@ 0x59d
				uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 80087a2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087a6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	7d9b      	ldrb	r3, [r3, #22]
 80087ae:	021b      	lsls	r3, r3, #8
 80087b0:	b21a      	sxth	r2, r3
 80087b2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087b6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	7ddb      	ldrb	r3, [r3, #23]
 80087be:	b21b      	sxth	r3, r3
 80087c0:	4313      	orrs	r3, r2
 80087c2:	b21b      	sxth	r3, r3
 80087c4:	f8a7 359a 	strh.w	r3, [r7, #1434]	@ 0x59a

				uint8_t cm4buck_status = fsp_pkt->payload[19];
 80087c8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087cc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	7e1b      	ldrb	r3, [r3, #24]
 80087d4:	f887 3599 	strb.w	r3, [r7, #1433]	@ 0x599
				uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 80087d8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087dc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	7e5b      	ldrb	r3, [r3, #25]
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	b21a      	sxth	r2, r3
 80087e8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087ec:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	7e9b      	ldrb	r3, [r3, #26]
 80087f4:	b21b      	sxth	r3, r3
 80087f6:	4313      	orrs	r3, r2
 80087f8:	b21b      	sxth	r3, r3
 80087fa:	f8a7 3596 	strh.w	r3, [r7, #1430]	@ 0x596

				uint8_t tec1_status = fsp_pkt->payload[22];
 80087fe:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008802:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	7edb      	ldrb	r3, [r3, #27]
 800880a:	f887 3595 	strb.w	r3, [r7, #1429]	@ 0x595
				uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 800880e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008812:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	7f1b      	ldrb	r3, [r3, #28]
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	b21a      	sxth	r2, r3
 800881e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008822:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	7f5b      	ldrb	r3, [r3, #29]
 800882a:	b21b      	sxth	r3, r3
 800882c:	4313      	orrs	r3, r2
 800882e:	b21b      	sxth	r3, r3
 8008830:	f8a7 3592 	strh.w	r3, [r7, #1426]	@ 0x592

				uint8_t tec2_status = fsp_pkt->payload[25];
 8008834:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008838:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	7f9b      	ldrb	r3, [r3, #30]
 8008840:	f887 3591 	strb.w	r3, [r7, #1425]	@ 0x591
				uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 8008844:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008848:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	7fdb      	ldrb	r3, [r3, #31]
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	b21a      	sxth	r2, r3
 8008854:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008858:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008862:	b21b      	sxth	r3, r3
 8008864:	4313      	orrs	r3, r2
 8008866:	b21b      	sxth	r3, r3
 8008868:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e

				uint8_t tec3_status = fsp_pkt->payload[28];
 800886c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008870:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800887a:	f887 358d 	strb.w	r3, [r7, #1421]	@ 0x58d
				uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 800887e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008882:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	b21a      	sxth	r2, r3
 8008890:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008894:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800889e:	b21b      	sxth	r3, r3
 80088a0:	4313      	orrs	r3, r2
 80088a2:	b21b      	sxth	r3, r3
 80088a4:	f8a7 358a 	strh.w	r3, [r7, #1418]	@ 0x58a

				uint8_t tec4_status = fsp_pkt->payload[31];
 80088a8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80088ac:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80088b6:	f887 3589 	strb.w	r3, [r7, #1417]	@ 0x589
				uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 80088ba:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80088be:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80088c8:	021b      	lsls	r3, r3, #8
 80088ca:	b21a      	sxth	r2, r3
 80088cc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80088d0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80088da:	b21b      	sxth	r3, r3
 80088dc:	4313      	orrs	r3, r2
 80088de:	b21b      	sxth	r3, r3
 80088e0:	f8a7 3586 	strh.w	r3, [r7, #1414]	@ 0x586

				uint8_t copc_status = fsp_pkt->payload[34];
 80088e4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80088e8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80088f2:	f887 3585 	strb.w	r3, [r7, #1413]	@ 0x585
				uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 80088f6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80088fa:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008904:	021b      	lsls	r3, r3, #8
 8008906:	b21a      	sxth	r2, r3
 8008908:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800890c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008916:	b21b      	sxth	r3, r3
 8008918:	4313      	orrs	r3, r2
 800891a:	b21b      	sxth	r3, r3
 800891c:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582

				uint8_t iou_status = fsp_pkt->payload[37];
 8008920:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008924:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800892e:	f887 3581 	strb.w	r3, [r7, #1409]	@ 0x581
				uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 8008932:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008936:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008940:	021b      	lsls	r3, r3, #8
 8008942:	b21a      	sxth	r2, r3
 8008944:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008948:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008952:	b21b      	sxth	r3, r3
 8008954:	4313      	orrs	r3, r2
 8008956:	b21b      	sxth	r3, r3
 8008958:	f8a7 357e 	strh.w	r3, [r7, #1406]	@ 0x57e

				uint8_t rgb_status = fsp_pkt->payload[40];
 800895c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008960:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800896a:	f887 357d 	strb.w	r3, [r7, #1405]	@ 0x57d
				uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 800896e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008972:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	b21a      	sxth	r2, r3
 8008980:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008984:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800898e:	b21b      	sxth	r3, r3
 8008990:	4313      	orrs	r3, r2
 8008992:	b21b      	sxth	r3, r3
 8008994:	f8a7 357a 	strh.w	r3, [r7, #1402]	@ 0x57a

				uint8_t ir_status = fsp_pkt->payload[43];
 8008998:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800899c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80089a6:	f887 3579 	strb.w	r3, [r7, #1401]	@ 0x579
				uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 80089aa:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80089ae:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	b21a      	sxth	r2, r3
 80089bc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80089c0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80089ca:	b21b      	sxth	r3, r3
 80089cc:	4313      	orrs	r3, r2
 80089ce:	b21b      	sxth	r3, r3
 80089d0:	f8a7 3576 	strh.w	r3, [r7, #1398]	@ 0x576

				uint8_t cm4_status = fsp_pkt->payload[46];
 80089d4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80089d8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80089e2:	f887 3575 	strb.w	r3, [r7, #1397]	@ 0x575
				uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 80089e6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80089ea:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	b21a      	sxth	r2, r3
 80089f8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80089fc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a06:	b21b      	sxth	r3, r3
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	b21b      	sxth	r3, r3
 8008a0c:	f8a7 3572 	strh.w	r3, [r7, #1394]	@ 0x572

				uint8_t vin_status = fsp_pkt->payload[49];
 8008a10:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a14:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008a1e:	f887 3571 	strb.w	r3, [r7, #1393]	@ 0x571
				uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 8008a22:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a26:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8008a30:	021b      	lsls	r3, r3, #8
 8008a32:	b21a      	sxth	r2, r3
 8008a34:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a38:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008a42:	b21b      	sxth	r3, r3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	b21b      	sxth	r3, r3
 8008a48:	f8a7 356e 	strh.w	r3, [r7, #1390]	@ 0x56e

				uint8_t vbus_status = fsp_pkt->payload[52];
 8008a4c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a50:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008a5a:	f887 356d 	strb.w	r3, [r7, #1389]	@ 0x56d
				uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 8008a5e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a62:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	b21a      	sxth	r2, r3
 8008a70:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a74:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008a7e:	b21b      	sxth	r3, r3
 8008a80:	4313      	orrs	r3, r2
 8008a82:	b21b      	sxth	r3, r3
 8008a84:	f8a7 356a 	strh.w	r3, [r7, #1386]	@ 0x56a


						char buffer_0x06[1000];
						sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 8008a88:	f897 e5b1 	ldrb.w	lr, [r7, #1457]	@ 0x5b1
 8008a8c:	f8b7 85ae 	ldrh.w	r8, [r7, #1454]	@ 0x5ae
 8008a90:	f897 35ad 	ldrb.w	r3, [r7, #1453]	@ 0x5ad
 8008a94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a98:	f8b7 25aa 	ldrh.w	r2, [r7, #1450]	@ 0x5aa
 8008a9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008aa0:	f897 15a9 	ldrb.w	r1, [r7, #1449]	@ 0x5a9
 8008aa4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8008aa8:	f8b7 05a6 	ldrh.w	r0, [r7, #1446]	@ 0x5a6
 8008aac:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 8008ab0:	f897 45a5 	ldrb.w	r4, [r7, #1445]	@ 0x5a5
 8008ab4:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8008ab8:	f8b7 55a2 	ldrh.w	r5, [r7, #1442]	@ 0x5a2
 8008abc:	f8c7 509c 	str.w	r5, [r7, #156]	@ 0x9c
 8008ac0:	f897 65a1 	ldrb.w	r6, [r7, #1441]	@ 0x5a1
 8008ac4:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 8008ac8:	f8b7 c59e 	ldrh.w	ip, [r7, #1438]	@ 0x59e
 8008acc:	4663      	mov	r3, ip
 8008ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ad2:	f897 c59d 	ldrb.w	ip, [r7, #1437]	@ 0x59d
 8008ad6:	4662      	mov	r2, ip
 8008ad8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8008adc:	f8b7 c59a 	ldrh.w	ip, [r7, #1434]	@ 0x59a
 8008ae0:	4661      	mov	r1, ip
 8008ae2:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8008ae6:	f897 c599 	ldrb.w	ip, [r7, #1433]	@ 0x599
 8008aea:	4660      	mov	r0, ip
 8008aec:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8008af0:	f8b7 c596 	ldrh.w	ip, [r7, #1430]	@ 0x596
 8008af4:	4664      	mov	r4, ip
 8008af6:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
 8008afa:	f897 c595 	ldrb.w	ip, [r7, #1429]	@ 0x595
 8008afe:	4665      	mov	r5, ip
 8008b00:	f8c7 5080 	str.w	r5, [r7, #128]	@ 0x80
 8008b04:	f8b7 c592 	ldrh.w	ip, [r7, #1426]	@ 0x592
 8008b08:	4666      	mov	r6, ip
 8008b0a:	67fe      	str	r6, [r7, #124]	@ 0x7c
 8008b0c:	f897 c591 	ldrb.w	ip, [r7, #1425]	@ 0x591
 8008b10:	4663      	mov	r3, ip
 8008b12:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b14:	f8b7 c58e 	ldrh.w	ip, [r7, #1422]	@ 0x58e
 8008b18:	4662      	mov	r2, ip
 8008b1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8008b1c:	f897 c58d 	ldrb.w	ip, [r7, #1421]	@ 0x58d
 8008b20:	4661      	mov	r1, ip
 8008b22:	6739      	str	r1, [r7, #112]	@ 0x70
 8008b24:	f8b7 c58a 	ldrh.w	ip, [r7, #1418]	@ 0x58a
 8008b28:	4660      	mov	r0, ip
 8008b2a:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8008b2c:	f897 c589 	ldrb.w	ip, [r7, #1417]	@ 0x589
 8008b30:	4664      	mov	r4, ip
 8008b32:	66bc      	str	r4, [r7, #104]	@ 0x68
 8008b34:	f8b7 c586 	ldrh.w	ip, [r7, #1414]	@ 0x586
 8008b38:	4665      	mov	r5, ip
 8008b3a:	667d      	str	r5, [r7, #100]	@ 0x64
 8008b3c:	f897 c585 	ldrb.w	ip, [r7, #1413]	@ 0x585
 8008b40:	4666      	mov	r6, ip
 8008b42:	663e      	str	r6, [r7, #96]	@ 0x60
 8008b44:	f8b7 c582 	ldrh.w	ip, [r7, #1410]	@ 0x582
 8008b48:	4663      	mov	r3, ip
 8008b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b4c:	f897 c581 	ldrb.w	ip, [r7, #1409]	@ 0x581
 8008b50:	4662      	mov	r2, ip
 8008b52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008b54:	f8b7 c57e 	ldrh.w	ip, [r7, #1406]	@ 0x57e
 8008b58:	4661      	mov	r1, ip
 8008b5a:	6579      	str	r1, [r7, #84]	@ 0x54
 8008b5c:	f897 c57d 	ldrb.w	ip, [r7, #1405]	@ 0x57d
 8008b60:	4660      	mov	r0, ip
 8008b62:	6538      	str	r0, [r7, #80]	@ 0x50
 8008b64:	f8b7 c57a 	ldrh.w	ip, [r7, #1402]	@ 0x57a
 8008b68:	4664      	mov	r4, ip
 8008b6a:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8008b6c:	f897 c579 	ldrb.w	ip, [r7, #1401]	@ 0x579
 8008b70:	4665      	mov	r5, ip
 8008b72:	64bd      	str	r5, [r7, #72]	@ 0x48
 8008b74:	f8b7 6576 	ldrh.w	r6, [r7, #1398]	@ 0x576
 8008b78:	f897 5575 	ldrb.w	r5, [r7, #1397]	@ 0x575
 8008b7c:	f8b7 4572 	ldrh.w	r4, [r7, #1394]	@ 0x572
 8008b80:	f897 0571 	ldrb.w	r0, [r7, #1393]	@ 0x571
 8008b84:	f8b7 156e 	ldrh.w	r1, [r7, #1390]	@ 0x56e
 8008b88:	f897 256d 	ldrb.w	r2, [r7, #1389]	@ 0x56d
 8008b8c:	f8b7 356a 	ldrh.w	r3, [r7, #1386]	@ 0x56a
 8008b90:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 8008b94:	9321      	str	r3, [sp, #132]	@ 0x84
 8008b96:	9220      	str	r2, [sp, #128]	@ 0x80
 8008b98:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008b9a:	901e      	str	r0, [sp, #120]	@ 0x78
 8008b9c:	941d      	str	r4, [sp, #116]	@ 0x74
 8008b9e:	951c      	str	r5, [sp, #112]	@ 0x70
 8008ba0:	961b      	str	r6, [sp, #108]	@ 0x6c
 8008ba2:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 8008ba4:	951a      	str	r5, [sp, #104]	@ 0x68
 8008ba6:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8008ba8:	9419      	str	r4, [sp, #100]	@ 0x64
 8008baa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008bac:	9018      	str	r0, [sp, #96]	@ 0x60
 8008bae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008bb0:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008bb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bb4:	9216      	str	r2, [sp, #88]	@ 0x58
 8008bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bb8:	9315      	str	r3, [sp, #84]	@ 0x54
 8008bba:	6e3e      	ldr	r6, [r7, #96]	@ 0x60
 8008bbc:	9614      	str	r6, [sp, #80]	@ 0x50
 8008bbe:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 8008bc0:	9513      	str	r5, [sp, #76]	@ 0x4c
 8008bc2:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 8008bc4:	9412      	str	r4, [sp, #72]	@ 0x48
 8008bc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008bc8:	9011      	str	r0, [sp, #68]	@ 0x44
 8008bca:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008bcc:	9110      	str	r1, [sp, #64]	@ 0x40
 8008bce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008bd0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008bd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8008bd6:	6ffe      	ldr	r6, [r7, #124]	@ 0x7c
 8008bd8:	960d      	str	r6, [sp, #52]	@ 0x34
 8008bda:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 8008bde:	950c      	str	r5, [sp, #48]	@ 0x30
 8008be0:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8008be4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008be6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8008bea:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bec:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8008bf0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008bf2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008bf6:	9208      	str	r2, [sp, #32]
 8008bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008bfc:	9307      	str	r3, [sp, #28]
 8008bfe:	f8d7 6098 	ldr.w	r6, [r7, #152]	@ 0x98
 8008c02:	9606      	str	r6, [sp, #24]
 8008c04:	f8d7 509c 	ldr.w	r5, [r7, #156]	@ 0x9c
 8008c08:	9505      	str	r5, [sp, #20]
 8008c0a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8008c0e:	9404      	str	r4, [sp, #16]
 8008c10:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8008c14:	9003      	str	r0, [sp, #12]
 8008c16:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8008c1a:	9102      	str	r1, [sp, #8]
 8008c1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c20:	9201      	str	r2, [sp, #4]
 8008c22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	4643      	mov	r3, r8
 8008c2a:	4672      	mov	r2, lr
 8008c2c:	4928      	ldr	r1, [pc, #160]	@ (8008cd0 <frame_processing_rs422+0xca4>)
 8008c2e:	4660      	mov	r0, ip
 8008c30:	f007 f8fa 	bl	800fe28 <siprintf>
							cm4_status, cm4_current,
							vin_status, vin_voltage,
							vbus_status, vbus_voltage);


					if(auto_report_enabled){
 8008c34:	4b27      	ldr	r3, [pc, #156]	@ (8008cd4 <frame_processing_rs422+0xca8>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d006      	beq.n	8008c4c <frame_processing_rs422+0xc20>
							Uart_sendstring(UART4, buffer_0x06);
 8008c3e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008c42:	4619      	mov	r1, r3
 8008c44:	4824      	ldr	r0, [pc, #144]	@ (8008cd8 <frame_processing_rs422+0xcac>)
 8008c46:	f7f9 f9c9 	bl	8001fdc <Uart_sendstring>
 8008c4a:	e005      	b.n	8008c58 <frame_processing_rs422+0xc2c>
					}else{
							Uart_sendstring(USART2, buffer_0x06);
 8008c4c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008c50:	4619      	mov	r1, r3
 8008c52:	4822      	ldr	r0, [pc, #136]	@ (8008cdc <frame_processing_rs422+0xcb0>)
 8008c54:	f7f9 f9c2 	bl	8001fdc <Uart_sendstring>
					}
			}

					receive_pduFlag = 1;
 8008c58:	4b21      	ldr	r3, [pc, #132]	@ (8008ce0 <frame_processing_rs422+0xcb4>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	701a      	strb	r2, [r3, #0]

					for (int i = 1; i <= 54; i++) {
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8008c64:	e015      	b.n	8008c92 <frame_processing_rs422+0xc66>
					    nextBuffer[i + 56] = fsp_pkt->payload[i]; //43   pay1    + 44  pay2        96-<54
 8008c66:	4b1f      	ldr	r3, [pc, #124]	@ (8008ce4 <frame_processing_rs422+0xcb8>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8008c6e:	3338      	adds	r3, #56	@ 0x38
 8008c70:	4413      	add	r3, r2
 8008c72:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 8008c76:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 8008c7a:	6811      	ldr	r1, [r2, #0]
 8008c7c:	f8d7 2600 	ldr.w	r2, [r7, #1536]	@ 0x600
 8008c80:	440a      	add	r2, r1
 8008c82:	3205      	adds	r2, #5
 8008c84:	7812      	ldrb	r2, [r2, #0]
 8008c86:	701a      	strb	r2, [r3, #0]
					for (int i = 1; i <= 54; i++) {
 8008c88:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8008c92:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8008c96:	2b36      	cmp	r3, #54	@ 0x36
 8008c98:	dde5      	ble.n	8008c66 <frame_processing_rs422+0xc3a>
					}
//					Uart_sendstring(UART4, "\nPDU_Collected\r\n");

					disconnect_counter_pdu = 0;
 8008c9a:	4b13      	ldr	r3, [pc, #76]	@ (8008ce8 <frame_processing_rs422+0xcbc>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8008ca0:	f000 bd1d 	b.w	80096de <frame_processing_rs422+0x16b2>


		case 0x13:
		{
			if(auto_report_enabled || rf_report_enable){
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd4 <frame_processing_rs422+0xca8>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d105      	bne.n	8008cba <frame_processing_rs422+0xc8e>
 8008cae:	4b0f      	ldr	r3, [pc, #60]	@ (8008cec <frame_processing_rs422+0xcc0>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 84e4 	beq.w	8009682 <frame_processing_rs422+0x1656>
				if(auto_report_enabled){
 8008cba:	4b06      	ldr	r3, [pc, #24]	@ (8008cd4 <frame_processing_rs422+0xca8>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d017      	beq.n	8008cf4 <frame_processing_rs422+0xcc8>
					Uart_sendstring(UART4, "\nIOU:\n");
 8008cc4:	490a      	ldr	r1, [pc, #40]	@ (8008cf0 <frame_processing_rs422+0xcc4>)
 8008cc6:	4804      	ldr	r0, [pc, #16]	@ (8008cd8 <frame_processing_rs422+0xcac>)
 8008cc8:	f7f9 f988 	bl	8001fdc <Uart_sendstring>
 8008ccc:	e01c      	b.n	8008d08 <frame_processing_rs422+0xcdc>
 8008cce:	bf00      	nop
 8008cd0:	08015688 	.word	0x08015688
 8008cd4:	200059fc 	.word	0x200059fc
 8008cd8:	40004c00 	.word	0x40004c00
 8008cdc:	40004400 	.word	0x40004400
 8008ce0:	20000040 	.word	0x20000040
 8008ce4:	200003fc 	.word	0x200003fc
 8008ce8:	200058d0 	.word	0x200058d0
 8008cec:	200059fe 	.word	0x200059fe
 8008cf0:	080158d0 	.word	0x080158d0
				}else{
					Uart_sendstring(USART2, "\nIOU:\n");
 8008cf4:	4902      	ldr	r1, [pc, #8]	@ (8008d00 <frame_processing_rs422+0xcd4>)
 8008cf6:	4803      	ldr	r0, [pc, #12]	@ (8008d04 <frame_processing_rs422+0xcd8>)
 8008cf8:	f7f9 f970 	bl	8001fdc <Uart_sendstring>
 8008cfc:	e004      	b.n	8008d08 <frame_processing_rs422+0xcdc>
 8008cfe:	bf00      	nop
 8008d00:	080158d0 	.word	0x080158d0
 8008d04:	40004400 	.word	0x40004400
				}

			int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8008d08:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d0c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	799b      	ldrb	r3, [r3, #6]
 8008d14:	021b      	lsls	r3, r3, #8
 8008d16:	b21a      	sxth	r2, r3
 8008d18:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d1c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	79db      	ldrb	r3, [r3, #7]
 8008d24:	b21b      	sxth	r3, r3
 8008d26:	4313      	orrs	r3, r2
 8008d28:	f8a7 35fa 	strh.w	r3, [r7, #1530]	@ 0x5fa
			int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8008d2c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d30:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	7a1b      	ldrb	r3, [r3, #8]
 8008d38:	021b      	lsls	r3, r3, #8
 8008d3a:	b21a      	sxth	r2, r3
 8008d3c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d40:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	7a5b      	ldrb	r3, [r3, #9]
 8008d48:	b21b      	sxth	r3, r3
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	f8a7 35f8 	strh.w	r3, [r7, #1528]	@ 0x5f8
			int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 8008d50:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d54:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	7a9b      	ldrb	r3, [r3, #10]
 8008d5c:	021b      	lsls	r3, r3, #8
 8008d5e:	b21a      	sxth	r2, r3
 8008d60:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d64:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	7adb      	ldrb	r3, [r3, #11]
 8008d6c:	b21b      	sxth	r3, r3
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	f8a7 35f6 	strh.w	r3, [r7, #1526]	@ 0x5f6
			int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 8008d74:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d78:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	7b1b      	ldrb	r3, [r3, #12]
 8008d80:	021b      	lsls	r3, r3, #8
 8008d82:	b21a      	sxth	r2, r3
 8008d84:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d88:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	7b5b      	ldrb	r3, [r3, #13]
 8008d90:	b21b      	sxth	r3, r3
 8008d92:	4313      	orrs	r3, r2
 8008d94:	f8a7 35f4 	strh.w	r3, [r7, #1524]	@ 0x5f4

			int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 8008d98:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d9c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	7b9b      	ldrb	r3, [r3, #14]
 8008da4:	021b      	lsls	r3, r3, #8
 8008da6:	b21a      	sxth	r2, r3
 8008da8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dac:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	7bdb      	ldrb	r3, [r3, #15]
 8008db4:	b21b      	sxth	r3, r3
 8008db6:	4313      	orrs	r3, r2
 8008db8:	f8a7 35f2 	strh.w	r3, [r7, #1522]	@ 0x5f2
			int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8008dbc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dc0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	7c1b      	ldrb	r3, [r3, #16]
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	b21a      	sxth	r2, r3
 8008dcc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dd0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	7c5b      	ldrb	r3, [r3, #17]
 8008dd8:	b21b      	sxth	r3, r3
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	f8a7 35f0 	strh.w	r3, [r7, #1520]	@ 0x5f0

			int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 8008de0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008de4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	7c9b      	ldrb	r3, [r3, #18]
 8008dec:	021b      	lsls	r3, r3, #8
 8008dee:	b21a      	sxth	r2, r3
 8008df0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008df4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	7cdb      	ldrb	r3, [r3, #19]
 8008dfc:	b21b      	sxth	r3, r3
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	f8a7 35ee 	strh.w	r3, [r7, #1518]	@ 0x5ee

			int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8008e04:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e08:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	7d1b      	ldrb	r3, [r3, #20]
 8008e10:	021b      	lsls	r3, r3, #8
 8008e12:	b21a      	sxth	r2, r3
 8008e14:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e18:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	7d5b      	ldrb	r3, [r3, #21]
 8008e20:	b21b      	sxth	r3, r3
 8008e22:	4313      	orrs	r3, r2
 8008e24:	f8a7 35ec 	strh.w	r3, [r7, #1516]	@ 0x5ec
			int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 8008e28:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e2c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	7d9b      	ldrb	r3, [r3, #22]
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	b21a      	sxth	r2, r3
 8008e38:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e3c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	7ddb      	ldrb	r3, [r3, #23]
 8008e44:	b21b      	sxth	r3, r3
 8008e46:	4313      	orrs	r3, r2
 8008e48:	f8a7 35ea 	strh.w	r3, [r7, #1514]	@ 0x5ea
			int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 8008e4c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e50:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	7e1b      	ldrb	r3, [r3, #24]
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	b21a      	sxth	r2, r3
 8008e5c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e60:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	7e5b      	ldrb	r3, [r3, #25]
 8008e68:	b21b      	sxth	r3, r3
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	f8a7 35e8 	strh.w	r3, [r7, #1512]	@ 0x5e8
			int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 8008e70:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e74:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	7e9b      	ldrb	r3, [r3, #26]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	b21a      	sxth	r2, r3
 8008e80:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e84:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	7edb      	ldrb	r3, [r3, #27]
 8008e8c:	b21b      	sxth	r3, r3
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	f8a7 35e6 	strh.w	r3, [r7, #1510]	@ 0x5e6

			uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 8008e94:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e98:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	7f1b      	ldrb	r3, [r3, #28]
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	b21a      	sxth	r2, r3
 8008ea4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ea8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	7f5b      	ldrb	r3, [r3, #29]
 8008eb0:	b21b      	sxth	r3, r3
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	b21b      	sxth	r3, r3
 8008eb6:	f8a7 35e4 	strh.w	r3, [r7, #1508]	@ 0x5e4
			uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 8008eba:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ebe:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	7f9b      	ldrb	r3, [r3, #30]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	b21a      	sxth	r2, r3
 8008eca:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ece:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	7fdb      	ldrb	r3, [r3, #31]
 8008ed6:	b21b      	sxth	r3, r3
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	b21b      	sxth	r3, r3
 8008edc:	f8a7 35e2 	strh.w	r3, [r7, #1506]	@ 0x5e2
			uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 8008ee0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ee4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008eee:	021b      	lsls	r3, r3, #8
 8008ef0:	b21a      	sxth	r2, r3
 8008ef2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ef6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008f00:	b21b      	sxth	r3, r3
 8008f02:	4313      	orrs	r3, r2
 8008f04:	b21b      	sxth	r3, r3
 8008f06:	f8a7 35e0 	strh.w	r3, [r7, #1504]	@ 0x5e0
			uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 8008f0a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f0e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008f18:	021b      	lsls	r3, r3, #8
 8008f1a:	b21a      	sxth	r2, r3
 8008f1c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f20:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008f2a:	b21b      	sxth	r3, r3
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	b21b      	sxth	r3, r3
 8008f30:	f8a7 35de 	strh.w	r3, [r7, #1502]	@ 0x5de

			uint8_t neo_led_r = fsp_pkt->payload[31];
 8008f34:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f38:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008f42:	f887 35dd 	strb.w	r3, [r7, #1501]	@ 0x5dd
			uint8_t neo_led_g = fsp_pkt->payload[32];
 8008f46:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f4a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008f54:	f887 35dc 	strb.w	r3, [r7, #1500]	@ 0x5dc
			uint8_t neo_led_b = fsp_pkt->payload[33];
 8008f58:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f5c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8008f66:	f887 35db 	strb.w	r3, [r7, #1499]	@ 0x5db
			uint8_t neo_led_w = fsp_pkt->payload[34];
 8008f6a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f6e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8008f78:	f887 35da 	strb.w	r3, [r7, #1498]	@ 0x5da

			uint8_t ir_led_duty = fsp_pkt->payload[35];
 8008f7c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f80:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f8a:	f887 35d9 	strb.w	r3, [r7, #1497]	@ 0x5d9

		    int16_t accel_x = (int16_t)((fsp_pkt->payload[36] << 8) | fsp_pkt->payload[37]);
 8008f8e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f92:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	b21a      	sxth	r2, r3
 8008fa0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008fa4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8008fae:	b21b      	sxth	r3, r3
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	f8a7 35d6 	strh.w	r3, [r7, #1494]	@ 0x5d6
		    int16_t accel_y = (int16_t)((fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39]);
 8008fb6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008fba:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008fc4:	021b      	lsls	r3, r3, #8
 8008fc6:	b21a      	sxth	r2, r3
 8008fc8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008fcc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008fd6:	b21b      	sxth	r3, r3
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	f8a7 35d4 	strh.w	r3, [r7, #1492]	@ 0x5d4
		    int16_t accel_z = (int16_t)((fsp_pkt->payload[40] << 8) | fsp_pkt->payload[41]);
 8008fde:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008fe2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	b21a      	sxth	r2, r3
 8008ff0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ff4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8008ffe:	b21b      	sxth	r3, r3
 8009000:	4313      	orrs	r3, r2
 8009002:	f8a7 35d2 	strh.w	r3, [r7, #1490]	@ 0x5d2

		    int16_t gyro_x = (int16_t)((fsp_pkt->payload[42] << 8) | fsp_pkt->payload[43]);
 8009006:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800900a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	b21a      	sxth	r2, r3
 8009018:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800901c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009026:	b21b      	sxth	r3, r3
 8009028:	4313      	orrs	r3, r2
 800902a:	f8a7 35d0 	strh.w	r3, [r7, #1488]	@ 0x5d0
		    int16_t gyro_y = (int16_t)((fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45]);
 800902e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009032:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800903c:	021b      	lsls	r3, r3, #8
 800903e:	b21a      	sxth	r2, r3
 8009040:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009044:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800904e:	b21b      	sxth	r3, r3
 8009050:	4313      	orrs	r3, r2
 8009052:	f8a7 35ce 	strh.w	r3, [r7, #1486]	@ 0x5ce
		    int16_t gyro_z = (int16_t)((fsp_pkt->payload[46] << 8) | fsp_pkt->payload[47]);
 8009056:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800905a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	b21a      	sxth	r2, r3
 8009068:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800906c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009076:	b21b      	sxth	r3, r3
 8009078:	4313      	orrs	r3, r2
 800907a:	f8a7 35cc 	strh.w	r3, [r7, #1484]	@ 0x5cc

		    int16_t press = (int16_t)((fsp_pkt->payload[48] << 8) | fsp_pkt->payload[49]);
 800907e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009082:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	b21a      	sxth	r2, r3
 8009090:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009094:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800909e:	b21b      	sxth	r3, r3
 80090a0:	4313      	orrs	r3, r2
 80090a2:	f8a7 35ca 	strh.w	r3, [r7, #1482]	@ 0x5ca


			char buffer_0x13[1200];
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80090a6:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	da03      	bge.n	80090b6 <frame_processing_rs422+0x108a>
 80090ae:	4bb5      	ldr	r3, [pc, #724]	@ (8009384 <frame_processing_rs422+0x1358>)
 80090b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090b4:	e002      	b.n	80090bc <frame_processing_rs422+0x1090>
 80090b6:	4bb4      	ldr	r3, [pc, #720]	@ (8009388 <frame_processing_rs422+0x135c>)
 80090b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			                     "Neo LED: R=%u, G=%u, B=%u, W=%u\n"
			                     "IR LED Duty: %u%%\n"
					 	 	 	 "Accel: X=%d, Y=%d, Z=%d\n"
					             "Gyro: X=%d, Y=%d, Z=%d\n"
					             "Pressure: %d]\n",
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 80090bc:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bfb8      	it	lt
 80090c4:	425b      	neglt	r3, r3
 80090c6:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80090c8:	4ab0      	ldr	r2, [pc, #704]	@ (800938c <frame_processing_rs422+0x1360>)
 80090ca:	fb82 1203 	smull	r1, r2, r2, r3
 80090ce:	1092      	asrs	r2, r2, #2
 80090d0:	17db      	asrs	r3, r3, #31
 80090d2:	eba2 0e03 	sub.w	lr, r2, r3
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 80090d6:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 80090da:	2b00      	cmp	r3, #0
 80090dc:	bfb8      	it	lt
 80090de:	425b      	neglt	r3, r3
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80090e4:	4ba9      	ldr	r3, [pc, #676]	@ (800938c <frame_processing_rs422+0x1360>)
 80090e6:	fb83 1302 	smull	r1, r3, r3, r2
 80090ea:	1099      	asrs	r1, r3, #2
 80090ec:	17d3      	asrs	r3, r2, #31
 80090ee:	1acb      	subs	r3, r1, r3
 80090f0:	4619      	mov	r1, r3
 80090f2:	460b      	mov	r3, r1
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	440b      	add	r3, r1
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009100:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 8009104:	2b00      	cmp	r3, #0
 8009106:	da03      	bge.n	8009110 <frame_processing_rs422+0x10e4>
 8009108:	4b9e      	ldr	r3, [pc, #632]	@ (8009384 <frame_processing_rs422+0x1358>)
 800910a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800910e:	e002      	b.n	8009116 <frame_processing_rs422+0x10ea>
 8009110:	4b9d      	ldr	r3, [pc, #628]	@ (8009388 <frame_processing_rs422+0x135c>)
 8009112:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 8009116:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 800911a:	2b00      	cmp	r3, #0
 800911c:	bfb8      	it	lt
 800911e:	425b      	neglt	r3, r3
 8009120:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009122:	4a9a      	ldr	r2, [pc, #616]	@ (800938c <frame_processing_rs422+0x1360>)
 8009124:	fb82 1203 	smull	r1, r2, r2, r3
 8009128:	1092      	asrs	r2, r2, #2
 800912a:	17db      	asrs	r3, r3, #31
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 8009132:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfb8      	it	lt
 800913a:	425b      	neglt	r3, r3
 800913c:	b29b      	uxth	r3, r3
 800913e:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009140:	4b92      	ldr	r3, [pc, #584]	@ (800938c <frame_processing_rs422+0x1360>)
 8009142:	fb83 1302 	smull	r1, r3, r3, r2
 8009146:	1099      	asrs	r1, r3, #2
 8009148:	17d3      	asrs	r3, r2, #31
 800914a:	1acb      	subs	r3, r1, r3
 800914c:	4619      	mov	r1, r3
 800914e:	460b      	mov	r3, r1
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800915a:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 800915e:	2b00      	cmp	r3, #0
 8009160:	da03      	bge.n	800916a <frame_processing_rs422+0x113e>
 8009162:	4b88      	ldr	r3, [pc, #544]	@ (8009384 <frame_processing_rs422+0x1358>)
 8009164:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009168:	e002      	b.n	8009170 <frame_processing_rs422+0x1144>
 800916a:	4b87      	ldr	r3, [pc, #540]	@ (8009388 <frame_processing_rs422+0x135c>)
 800916c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 8009170:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 8009174:	2b00      	cmp	r3, #0
 8009176:	bfb8      	it	lt
 8009178:	425b      	neglt	r3, r3
 800917a:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800917c:	4a83      	ldr	r2, [pc, #524]	@ (800938c <frame_processing_rs422+0x1360>)
 800917e:	fb82 1203 	smull	r1, r2, r2, r3
 8009182:	1092      	asrs	r2, r2, #2
 8009184:	17db      	asrs	r3, r3, #31
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	67bb      	str	r3, [r7, #120]	@ 0x78
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800918a:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 800918e:	2b00      	cmp	r3, #0
 8009190:	bfb8      	it	lt
 8009192:	425b      	neglt	r3, r3
 8009194:	b29b      	uxth	r3, r3
 8009196:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009198:	4b7c      	ldr	r3, [pc, #496]	@ (800938c <frame_processing_rs422+0x1360>)
 800919a:	fb83 1302 	smull	r1, r3, r3, r2
 800919e:	1099      	asrs	r1, r3, #2
 80091a0:	17d3      	asrs	r3, r2, #31
 80091a2:	1acb      	subs	r3, r1, r3
 80091a4:	4619      	mov	r1, r3
 80091a6:	460b      	mov	r3, r1
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	440b      	add	r3, r1
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80091b2:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da03      	bge.n	80091c2 <frame_processing_rs422+0x1196>
 80091ba:	4b72      	ldr	r3, [pc, #456]	@ (8009384 <frame_processing_rs422+0x1358>)
 80091bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80091c0:	e002      	b.n	80091c8 <frame_processing_rs422+0x119c>
 80091c2:	4b71      	ldr	r3, [pc, #452]	@ (8009388 <frame_processing_rs422+0x135c>)
 80091c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 80091c8:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bfb8      	it	lt
 80091d0:	425b      	neglt	r3, r3
 80091d2:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80091d4:	4a6d      	ldr	r2, [pc, #436]	@ (800938c <frame_processing_rs422+0x1360>)
 80091d6:	fb82 1203 	smull	r1, r2, r2, r3
 80091da:	1092      	asrs	r2, r2, #2
 80091dc:	17db      	asrs	r3, r3, #31
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	673b      	str	r3, [r7, #112]	@ 0x70
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 80091e2:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	bfb8      	it	lt
 80091ea:	425b      	neglt	r3, r3
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80091f0:	4b66      	ldr	r3, [pc, #408]	@ (800938c <frame_processing_rs422+0x1360>)
 80091f2:	fb83 2301 	smull	r2, r3, r3, r1
 80091f6:	109a      	asrs	r2, r3, #2
 80091f8:	17cb      	asrs	r3, r1, #31
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	461a      	mov	r2, r3
 80091fe:	4613      	mov	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	1acb      	subs	r3, r1, r3
 8009208:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800920a:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 800920e:	2b00      	cmp	r3, #0
 8009210:	da03      	bge.n	800921a <frame_processing_rs422+0x11ee>
 8009212:	4b5c      	ldr	r3, [pc, #368]	@ (8009384 <frame_processing_rs422+0x1358>)
 8009214:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009218:	e002      	b.n	8009220 <frame_processing_rs422+0x11f4>
 800921a:	4b5b      	ldr	r3, [pc, #364]	@ (8009388 <frame_processing_rs422+0x135c>)
 800921c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 8009220:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfb8      	it	lt
 8009228:	425b      	neglt	r3, r3
 800922a:	b29b      	uxth	r3, r3
 800922c:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800922e:	4b57      	ldr	r3, [pc, #348]	@ (800938c <frame_processing_rs422+0x1360>)
 8009230:	fb83 2301 	smull	r2, r3, r3, r1
 8009234:	109a      	asrs	r2, r3, #2
 8009236:	17cb      	asrs	r3, r1, #31
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	66bb      	str	r3, [r7, #104]	@ 0x68
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800923c:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 8009240:	2b00      	cmp	r3, #0
 8009242:	bfb8      	it	lt
 8009244:	425b      	neglt	r3, r3
 8009246:	b29b      	uxth	r3, r3
 8009248:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800924a:	4b50      	ldr	r3, [pc, #320]	@ (800938c <frame_processing_rs422+0x1360>)
 800924c:	fb83 2301 	smull	r2, r3, r3, r1
 8009250:	109a      	asrs	r2, r3, #2
 8009252:	17cb      	asrs	r3, r1, #31
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	461a      	mov	r2, r3
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	005b      	lsls	r3, r3, #1
 8009260:	1acb      	subs	r3, r1, r3
 8009262:	667b      	str	r3, [r7, #100]	@ 0x64
 8009264:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 8009268:	2b00      	cmp	r3, #0
 800926a:	da03      	bge.n	8009274 <frame_processing_rs422+0x1248>
 800926c:	4b45      	ldr	r3, [pc, #276]	@ (8009384 <frame_processing_rs422+0x1358>)
 800926e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009272:	e002      	b.n	800927a <frame_processing_rs422+0x124e>
 8009274:	4b44      	ldr	r3, [pc, #272]	@ (8009388 <frame_processing_rs422+0x135c>)
 8009276:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800927a:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 800927e:	2b00      	cmp	r3, #0
 8009280:	bfb8      	it	lt
 8009282:	425b      	neglt	r3, r3
 8009284:	b29b      	uxth	r3, r3
 8009286:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009288:	4b40      	ldr	r3, [pc, #256]	@ (800938c <frame_processing_rs422+0x1360>)
 800928a:	fb83 2301 	smull	r2, r3, r3, r1
 800928e:	109a      	asrs	r2, r3, #2
 8009290:	17cb      	asrs	r3, r1, #31
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	663b      	str	r3, [r7, #96]	@ 0x60
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 8009296:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 800929a:	2b00      	cmp	r3, #0
 800929c:	bfb8      	it	lt
 800929e:	425b      	neglt	r3, r3
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80092a4:	4b39      	ldr	r3, [pc, #228]	@ (800938c <frame_processing_rs422+0x1360>)
 80092a6:	fb83 2301 	smull	r2, r3, r3, r1
 80092aa:	109a      	asrs	r2, r3, #2
 80092ac:	17cb      	asrs	r3, r1, #31
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	4613      	mov	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	1acb      	subs	r3, r1, r3
 80092bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092be:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	da03      	bge.n	80092ce <frame_processing_rs422+0x12a2>
 80092c6:	4b2f      	ldr	r3, [pc, #188]	@ (8009384 <frame_processing_rs422+0x1358>)
 80092c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092cc:	e002      	b.n	80092d4 <frame_processing_rs422+0x12a8>
 80092ce:	4b2e      	ldr	r3, [pc, #184]	@ (8009388 <frame_processing_rs422+0x135c>)
 80092d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 80092d4:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 80092d8:	2b00      	cmp	r3, #0
 80092da:	bfb8      	it	lt
 80092dc:	425b      	neglt	r3, r3
 80092de:	b29b      	uxth	r3, r3
 80092e0:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80092e2:	4b2a      	ldr	r3, [pc, #168]	@ (800938c <frame_processing_rs422+0x1360>)
 80092e4:	fb83 2301 	smull	r2, r3, r3, r1
 80092e8:	109a      	asrs	r2, r3, #2
 80092ea:	17cb      	asrs	r3, r1, #31
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	65bb      	str	r3, [r7, #88]	@ 0x58
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 80092f0:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bfb8      	it	lt
 80092f8:	425b      	neglt	r3, r3
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80092fe:	4b23      	ldr	r3, [pc, #140]	@ (800938c <frame_processing_rs422+0x1360>)
 8009300:	fb83 2301 	smull	r2, r3, r3, r1
 8009304:	109a      	asrs	r2, r3, #2
 8009306:	17cb      	asrs	r3, r1, #31
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	461a      	mov	r2, r3
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	1acb      	subs	r3, r1, r3
 8009316:	657b      	str	r3, [r7, #84]	@ 0x54
 8009318:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 800931c:	2b00      	cmp	r3, #0
 800931e:	da03      	bge.n	8009328 <frame_processing_rs422+0x12fc>
 8009320:	4b18      	ldr	r3, [pc, #96]	@ (8009384 <frame_processing_rs422+0x1358>)
 8009322:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009326:	e002      	b.n	800932e <frame_processing_rs422+0x1302>
 8009328:	4b17      	ldr	r3, [pc, #92]	@ (8009388 <frame_processing_rs422+0x135c>)
 800932a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800932e:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 8009332:	2b00      	cmp	r3, #0
 8009334:	bfb8      	it	lt
 8009336:	425b      	neglt	r3, r3
 8009338:	b29b      	uxth	r3, r3
 800933a:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800933c:	4b13      	ldr	r3, [pc, #76]	@ (800938c <frame_processing_rs422+0x1360>)
 800933e:	fb83 2301 	smull	r2, r3, r3, r1
 8009342:	109a      	asrs	r2, r3, #2
 8009344:	17cb      	asrs	r3, r1, #31
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	653b      	str	r3, [r7, #80]	@ 0x50
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800934a:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfb8      	it	lt
 8009352:	425b      	neglt	r3, r3
 8009354:	b29b      	uxth	r3, r3
 8009356:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009358:	4b0c      	ldr	r3, [pc, #48]	@ (800938c <frame_processing_rs422+0x1360>)
 800935a:	fb83 2301 	smull	r2, r3, r3, r1
 800935e:	109a      	asrs	r2, r3, #2
 8009360:	17cb      	asrs	r3, r1, #31
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	461a      	mov	r2, r3
 8009366:	4613      	mov	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	1acb      	subs	r3, r1, r3
 8009370:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009372:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 8009376:	2b00      	cmp	r3, #0
 8009378:	da0a      	bge.n	8009390 <frame_processing_rs422+0x1364>
 800937a:	4b02      	ldr	r3, [pc, #8]	@ (8009384 <frame_processing_rs422+0x1358>)
 800937c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009380:	e009      	b.n	8009396 <frame_processing_rs422+0x136a>
 8009382:	bf00      	nop
 8009384:	08015588 	.word	0x08015588
 8009388:	0801558c 	.word	0x0801558c
 800938c:	66666667 	.word	0x66666667
 8009390:	4b2c      	ldr	r3, [pc, #176]	@ (8009444 <frame_processing_rs422+0x1418>)
 8009392:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 8009396:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 800939a:	2b00      	cmp	r3, #0
 800939c:	bfb8      	it	lt
 800939e:	425b      	neglt	r3, r3
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80093a4:	4b28      	ldr	r3, [pc, #160]	@ (8009448 <frame_processing_rs422+0x141c>)
 80093a6:	fb83 2301 	smull	r2, r3, r3, r1
 80093aa:	109a      	asrs	r2, r3, #2
 80093ac:	17cb      	asrs	r3, r1, #31
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	64bb      	str	r3, [r7, #72]	@ 0x48
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 80093b2:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bfb8      	it	lt
 80093ba:	425b      	neglt	r3, r3
 80093bc:	b29b      	uxth	r3, r3
 80093be:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80093c0:	4b21      	ldr	r3, [pc, #132]	@ (8009448 <frame_processing_rs422+0x141c>)
 80093c2:	fb83 2301 	smull	r2, r3, r3, r1
 80093c6:	109a      	asrs	r2, r3, #2
 80093c8:	17cb      	asrs	r3, r1, #31
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	461a      	mov	r2, r3
 80093ce:	4613      	mov	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	1acb      	subs	r3, r1, r3
 80093d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80093da:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 80093de:	2b00      	cmp	r3, #0
 80093e0:	da03      	bge.n	80093ea <frame_processing_rs422+0x13be>
 80093e2:	4b1a      	ldr	r3, [pc, #104]	@ (800944c <frame_processing_rs422+0x1420>)
 80093e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80093e8:	e002      	b.n	80093f0 <frame_processing_rs422+0x13c4>
 80093ea:	4b16      	ldr	r3, [pc, #88]	@ (8009444 <frame_processing_rs422+0x1418>)
 80093ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 80093f0:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bfb8      	it	lt
 80093f8:	425b      	neglt	r3, r3
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80093fe:	4b12      	ldr	r3, [pc, #72]	@ (8009448 <frame_processing_rs422+0x141c>)
 8009400:	fb83 2301 	smull	r2, r3, r3, r1
 8009404:	109a      	asrs	r2, r3, #2
 8009406:	17cb      	asrs	r3, r1, #31
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	643b      	str	r3, [r7, #64]	@ 0x40
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800940c:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 8009410:	2b00      	cmp	r3, #0
 8009412:	bfb8      	it	lt
 8009414:	425b      	neglt	r3, r3
 8009416:	b29b      	uxth	r3, r3
 8009418:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800941a:	4b0b      	ldr	r3, [pc, #44]	@ (8009448 <frame_processing_rs422+0x141c>)
 800941c:	fb83 2301 	smull	r2, r3, r3, r1
 8009420:	109a      	asrs	r2, r3, #2
 8009422:	17cb      	asrs	r3, r1, #31
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	461a      	mov	r2, r3
 8009428:	4613      	mov	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	005b      	lsls	r3, r3, #1
 8009430:	1acb      	subs	r3, r1, r3
 8009432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009434:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 8009438:	2b00      	cmp	r3, #0
 800943a:	da09      	bge.n	8009450 <frame_processing_rs422+0x1424>
 800943c:	4b03      	ldr	r3, [pc, #12]	@ (800944c <frame_processing_rs422+0x1420>)
 800943e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009442:	e008      	b.n	8009456 <frame_processing_rs422+0x142a>
 8009444:	0801558c 	.word	0x0801558c
 8009448:	66666667 	.word	0x66666667
 800944c:	08015588 	.word	0x08015588
 8009450:	4ba6      	ldr	r3, [pc, #664]	@ (80096ec <frame_processing_rs422+0x16c0>)
 8009452:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 8009456:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 800945a:	2b00      	cmp	r3, #0
 800945c:	bfb8      	it	lt
 800945e:	425b      	neglt	r3, r3
 8009460:	b29b      	uxth	r3, r3
 8009462:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009464:	4ba2      	ldr	r3, [pc, #648]	@ (80096f0 <frame_processing_rs422+0x16c4>)
 8009466:	fb83 2301 	smull	r2, r3, r3, r1
 800946a:	109a      	asrs	r2, r3, #2
 800946c:	17cb      	asrs	r3, r1, #31
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	63bb      	str	r3, [r7, #56]	@ 0x38
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 8009472:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfb8      	it	lt
 800947a:	425b      	neglt	r3, r3
 800947c:	b29b      	uxth	r3, r3
 800947e:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009480:	4b9b      	ldr	r3, [pc, #620]	@ (80096f0 <frame_processing_rs422+0x16c4>)
 8009482:	fb83 2301 	smull	r2, r3, r3, r1
 8009486:	109a      	asrs	r2, r3, #2
 8009488:	17cb      	asrs	r3, r1, #31
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	461a      	mov	r2, r3
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	1aca      	subs	r2, r1, r3
 8009498:	637a      	str	r2, [r7, #52]	@ 0x34
 800949a:	f8b7 25e4 	ldrh.w	r2, [r7, #1508]	@ 0x5e4
 800949e:	4b95      	ldr	r3, [pc, #596]	@ (80096f4 <frame_processing_rs422+0x16c8>)
 80094a0:	fba3 2302 	umull	r2, r3, r3, r2
 80094a4:	095b      	lsrs	r3, r3, #5
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80094aa:	f8b7 15e4 	ldrh.w	r1, [r7, #1508]	@ 0x5e4
 80094ae:	4b91      	ldr	r3, [pc, #580]	@ (80096f4 <frame_processing_rs422+0x16c8>)
 80094b0:	fba3 2301 	umull	r2, r3, r3, r1
 80094b4:	095a      	lsrs	r2, r3, #5
 80094b6:	2364      	movs	r3, #100	@ 0x64
 80094b8:	fb02 f303 	mul.w	r3, r2, r3
 80094bc:	1acb      	subs	r3, r1, r3
 80094be:	b29b      	uxth	r3, r3
 80094c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094c2:	f8b7 25e2 	ldrh.w	r2, [r7, #1506]	@ 0x5e2
 80094c6:	4b8b      	ldr	r3, [pc, #556]	@ (80096f4 <frame_processing_rs422+0x16c8>)
 80094c8:	fba3 2302 	umull	r2, r3, r3, r2
 80094cc:	095b      	lsrs	r3, r3, #5
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094d2:	f8b7 15e2 	ldrh.w	r1, [r7, #1506]	@ 0x5e2
 80094d6:	4b87      	ldr	r3, [pc, #540]	@ (80096f4 <frame_processing_rs422+0x16c8>)
 80094d8:	fba3 2301 	umull	r2, r3, r3, r1
 80094dc:	095a      	lsrs	r2, r3, #5
 80094de:	2364      	movs	r3, #100	@ 0x64
 80094e0:	fb02 f303 	mul.w	r3, r2, r3
 80094e4:	1acb      	subs	r3, r1, r3
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80094ea:	f8b7 25e0 	ldrh.w	r2, [r7, #1504]	@ 0x5e0
 80094ee:	4b81      	ldr	r3, [pc, #516]	@ (80096f4 <frame_processing_rs422+0x16c8>)
 80094f0:	fba3 2302 	umull	r2, r3, r3, r2
 80094f4:	095b      	lsrs	r3, r3, #5
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	623b      	str	r3, [r7, #32]
 80094fa:	f8b7 15e0 	ldrh.w	r1, [r7, #1504]	@ 0x5e0
 80094fe:	4b7d      	ldr	r3, [pc, #500]	@ (80096f4 <frame_processing_rs422+0x16c8>)
 8009500:	fba3 2301 	umull	r2, r3, r3, r1
 8009504:	095a      	lsrs	r2, r3, #5
 8009506:	2364      	movs	r3, #100	@ 0x64
 8009508:	fb02 f303 	mul.w	r3, r2, r3
 800950c:	1acb      	subs	r3, r1, r3
 800950e:	b29b      	uxth	r3, r3
 8009510:	61fb      	str	r3, [r7, #28]
 8009512:	f8b7 25de 	ldrh.w	r2, [r7, #1502]	@ 0x5de
 8009516:	4b77      	ldr	r3, [pc, #476]	@ (80096f4 <frame_processing_rs422+0x16c8>)
 8009518:	fba3 2302 	umull	r2, r3, r3, r2
 800951c:	095b      	lsrs	r3, r3, #5
 800951e:	b29b      	uxth	r3, r3
 8009520:	61bb      	str	r3, [r7, #24]
 8009522:	f8b7 15de 	ldrh.w	r1, [r7, #1502]	@ 0x5de
 8009526:	4b73      	ldr	r3, [pc, #460]	@ (80096f4 <frame_processing_rs422+0x16c8>)
 8009528:	fba3 2301 	umull	r2, r3, r3, r1
 800952c:	095a      	lsrs	r2, r3, #5
 800952e:	2364      	movs	r3, #100	@ 0x64
 8009530:	fb02 f303 	mul.w	r3, r2, r3
 8009534:	1acb      	subs	r3, r1, r3
 8009536:	b29b      	uxth	r3, r3
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	f897 05dd 	ldrb.w	r0, [r7, #1501]	@ 0x5dd
 800953e:	4601      	mov	r1, r0
 8009540:	6139      	str	r1, [r7, #16]
 8009542:	f897 05dc 	ldrb.w	r0, [r7, #1500]	@ 0x5dc
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	f897 45db 	ldrb.w	r4, [r7, #1499]	@ 0x5db
 800954c:	60bc      	str	r4, [r7, #8]
 800954e:	f897 55da 	ldrb.w	r5, [r7, #1498]	@ 0x5da
 8009552:	607d      	str	r5, [r7, #4]
 8009554:	f897 65d9 	ldrb.w	r6, [r7, #1497]	@ 0x5d9
 8009558:	603e      	str	r6, [r7, #0]
 800955a:	f9b7 65d6 	ldrsh.w	r6, [r7, #1494]	@ 0x5d6
 800955e:	f9b7 55d4 	ldrsh.w	r5, [r7, #1492]	@ 0x5d4
 8009562:	f9b7 45d2 	ldrsh.w	r4, [r7, #1490]	@ 0x5d2
 8009566:	f9b7 05d0 	ldrsh.w	r0, [r7, #1488]	@ 0x5d0
 800956a:	f9b7 15ce 	ldrsh.w	r1, [r7, #1486]	@ 0x5ce
 800956e:	f9b7 25cc 	ldrsh.w	r2, [r7, #1484]	@ 0x5cc
 8009572:	f9b7 35ca 	ldrsh.w	r3, [r7, #1482]	@ 0x5ca
 8009576:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 800957a:	9332      	str	r3, [sp, #200]	@ 0xc8
 800957c:	9231      	str	r2, [sp, #196]	@ 0xc4
 800957e:	9130      	str	r1, [sp, #192]	@ 0xc0
 8009580:	902f      	str	r0, [sp, #188]	@ 0xbc
 8009582:	942e      	str	r4, [sp, #184]	@ 0xb8
 8009584:	952d      	str	r5, [sp, #180]	@ 0xb4
 8009586:	962c      	str	r6, [sp, #176]	@ 0xb0
 8009588:	683e      	ldr	r6, [r7, #0]
 800958a:	962b      	str	r6, [sp, #172]	@ 0xac
 800958c:	687d      	ldr	r5, [r7, #4]
 800958e:	952a      	str	r5, [sp, #168]	@ 0xa8
 8009590:	68bc      	ldr	r4, [r7, #8]
 8009592:	9429      	str	r4, [sp, #164]	@ 0xa4
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	9028      	str	r0, [sp, #160]	@ 0xa0
 8009598:	6939      	ldr	r1, [r7, #16]
 800959a:	9127      	str	r1, [sp, #156]	@ 0x9c
 800959c:	6979      	ldr	r1, [r7, #20]
 800959e:	9126      	str	r1, [sp, #152]	@ 0x98
 80095a0:	69b9      	ldr	r1, [r7, #24]
 80095a2:	9125      	str	r1, [sp, #148]	@ 0x94
 80095a4:	69f9      	ldr	r1, [r7, #28]
 80095a6:	9124      	str	r1, [sp, #144]	@ 0x90
 80095a8:	6a39      	ldr	r1, [r7, #32]
 80095aa:	9123      	str	r1, [sp, #140]	@ 0x8c
 80095ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80095ae:	9122      	str	r1, [sp, #136]	@ 0x88
 80095b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095b2:	9121      	str	r1, [sp, #132]	@ 0x84
 80095b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095b6:	9120      	str	r1, [sp, #128]	@ 0x80
 80095b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095ba:	911f      	str	r1, [sp, #124]	@ 0x7c
 80095bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095be:	921e      	str	r2, [sp, #120]	@ 0x78
 80095c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c2:	931d      	str	r3, [sp, #116]	@ 0x74
 80095c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095c8:	931c      	str	r3, [sp, #112]	@ 0x70
 80095ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095cc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80095ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80095d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095d6:	9319      	str	r3, [sp, #100]	@ 0x64
 80095d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095da:	9318      	str	r3, [sp, #96]	@ 0x60
 80095dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095de:	9317      	str	r3, [sp, #92]	@ 0x5c
 80095e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80095e4:	9316      	str	r3, [sp, #88]	@ 0x58
 80095e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e8:	9315      	str	r3, [sp, #84]	@ 0x54
 80095ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095ec:	9314      	str	r3, [sp, #80]	@ 0x50
 80095ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80095f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80095f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80095fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009600:	9310      	str	r3, [sp, #64]	@ 0x40
 8009602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009604:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009608:	930e      	str	r3, [sp, #56]	@ 0x38
 800960a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800960e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009612:	930c      	str	r3, [sp, #48]	@ 0x30
 8009614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009616:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009618:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800961c:	930a      	str	r3, [sp, #40]	@ 0x28
 800961e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009620:	9309      	str	r3, [sp, #36]	@ 0x24
 8009622:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009624:	9308      	str	r3, [sp, #32]
 8009626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800962a:	9307      	str	r3, [sp, #28]
 800962c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800962e:	9306      	str	r3, [sp, #24]
 8009630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009632:	9305      	str	r3, [sp, #20]
 8009634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009638:	9304      	str	r3, [sp, #16]
 800963a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800963c:	9303      	str	r3, [sp, #12]
 800963e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009642:	9302      	str	r3, [sp, #8]
 8009644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	4673      	mov	r3, lr
 8009652:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009656:	4928      	ldr	r1, [pc, #160]	@ (80096f8 <frame_processing_rs422+0x16cc>)
 8009658:	4660      	mov	r0, ip
 800965a:	f006 fbe5 	bl	800fe28 <siprintf>
			        neo_led_r, neo_led_g, neo_led_b, neo_led_w,
			        ir_led_duty, accel_x, accel_y, accel_z,
		            gyro_x, gyro_y, gyro_z,
		            press);

			if(auto_report_enabled){
 800965e:	4b27      	ldr	r3, [pc, #156]	@ (80096fc <frame_processing_rs422+0x16d0>)
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d006      	beq.n	8009676 <frame_processing_rs422+0x164a>
				Uart_sendstring(UART4, buffer_0x13);
 8009668:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800966c:	4619      	mov	r1, r3
 800966e:	4824      	ldr	r0, [pc, #144]	@ (8009700 <frame_processing_rs422+0x16d4>)
 8009670:	f7f8 fcb4 	bl	8001fdc <Uart_sendstring>
 8009674:	e005      	b.n	8009682 <frame_processing_rs422+0x1656>
			}else{
				Uart_sendstring(USART2, buffer_0x13);
 8009676:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800967a:	4619      	mov	r1, r3
 800967c:	4821      	ldr	r0, [pc, #132]	@ (8009704 <frame_processing_rs422+0x16d8>)
 800967e:	f7f8 fcad 	bl	8001fdc <Uart_sendstring>
			}



			}
			receive_iouFlag = 1;
 8009682:	4b21      	ldr	r3, [pc, #132]	@ (8009708 <frame_processing_rs422+0x16dc>)
 8009684:	2201      	movs	r2, #1
 8009686:	701a      	strb	r2, [r3, #0]

			for (int i = 1; i <= 49; i++) {
 8009688:	2301      	movs	r3, #1
 800968a:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 800968e:	e015      	b.n	80096bc <frame_processing_rs422+0x1690>
					    nextBuffer[i + 7] = fsp_pkt->payload[i]; //42   =  35  + 7      8 -> pay 1   9 -> pay2    43 -< pay35
 8009690:	4b1e      	ldr	r3, [pc, #120]	@ (800970c <frame_processing_rs422+0x16e0>)
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 8009698:	3307      	adds	r3, #7
 800969a:	4413      	add	r3, r2
 800969c:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 80096a0:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 80096a4:	6811      	ldr	r1, [r2, #0]
 80096a6:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 80096aa:	440a      	add	r2, r1
 80096ac:	3205      	adds	r2, #5
 80096ae:	7812      	ldrb	r2, [r2, #0]
 80096b0:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= 49; i++) {
 80096b2:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 80096b6:	3301      	adds	r3, #1
 80096b8:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 80096bc:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 80096c0:	2b31      	cmp	r3, #49	@ 0x31
 80096c2:	dde5      	ble.n	8009690 <frame_processing_rs422+0x1664>
			}
//			Uart_sendstring(UART4, "\nIOU_Collected\r\n");

			disconnect_counter_iou = 0;
 80096c4:	4b12      	ldr	r3, [pc, #72]	@ (8009710 <frame_processing_rs422+0x16e4>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	701a      	strb	r2, [r3, #0]

		}
		break;
 80096ca:	e008      	b.n	80096de <frame_processing_rs422+0x16b2>


		default:
			Uart_sendstring(UART4, "Failed to get all");
 80096cc:	4911      	ldr	r1, [pc, #68]	@ (8009714 <frame_processing_rs422+0x16e8>)
 80096ce:	480c      	ldr	r0, [pc, #48]	@ (8009700 <frame_processing_rs422+0x16d4>)
 80096d0:	f7f8 fc84 	bl	8001fdc <Uart_sendstring>
			Uart_sendstring(USART2, "Failed to get all");
 80096d4:	490f      	ldr	r1, [pc, #60]	@ (8009714 <frame_processing_rs422+0x16e8>)
 80096d6:	480b      	ldr	r0, [pc, #44]	@ (8009704 <frame_processing_rs422+0x16d8>)
 80096d8:	f7f8 fc80 	bl	8001fdc <Uart_sendstring>
			break;
 80096dc:	bf00      	nop
	}

}
 80096de:	bf00      	nop
 80096e0:	f507 67c1 	add.w	r7, r7, #1544	@ 0x608
 80096e4:	46bd      	mov	sp, r7
 80096e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ea:	bf00      	nop
 80096ec:	0801558c 	.word	0x0801558c
 80096f0:	66666667 	.word	0x66666667
 80096f4:	51eb851f 	.word	0x51eb851f
 80096f8:	080158d8 	.word	0x080158d8
 80096fc:	200059fc 	.word	0x200059fc
 8009700:	40004c00 	.word	0x40004c00
 8009704:	40004400 	.word	0x40004400
 8009708:	20000042 	.word	0x20000042
 800970c:	200003fc 	.word	0x200003fc
 8009710:	200058cf 	.word	0x200058cf
 8009714:	08015a5c 	.word	0x08015a5c

08009718 <rs422_create_task>:

void	rs422_create_task(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&RS422_task_context.taskHandle, &RS422_task_context.taskProperty);
 800971c:	4903      	ldr	r1, [pc, #12]	@ (800972c <rs422_create_task+0x14>)
 800971e:	4804      	ldr	r0, [pc, #16]	@ (8009730 <rs422_create_task+0x18>)
 8009720:	f002 fb62 	bl	800bde8 <SCH_TASK_CreateTask>
	Ringbuf_init();
 8009724:	f7f8 f96a 	bl	80019fc <Ringbuf_init>

}
 8009728:	bf00      	nop
 800972a:	bd80      	pop	{r7, pc}
 800972c:	200003ec 	.word	0x200003ec
 8009730:	200003e4 	.word	0x200003e4

08009734 <COPC_init>:
		COPC_task_update                // taskFunction;
	}
};

void	COPC_init(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8009738:	f7f8 f960 	bl	80019fc <Ringbuf_init>
	fsp_init(FSP_ADR_CPOC);
 800973c:	2001      	movs	r0, #1
 800973e:	f002 fcc1 	bl	800c0c4 <fsp_init>
	s_pCOPC_Sfp_Payload = (COPC_Sfp_Payload_t *)(&s_COPC_FspPacket.payload);
 8009742:	4b02      	ldr	r3, [pc, #8]	@ (800974c <COPC_init+0x18>)
 8009744:	4a02      	ldr	r2, [pc, #8]	@ (8009750 <COPC_init+0x1c>)
 8009746:	601a      	str	r2, [r3, #0]
}
 8009748:	bf00      	nop
 800974a:	bd80      	pop	{r7, pc}
 800974c:	200062d8 	.word	0x200062d8
 8009750:	200061dd 	.word	0x200061dd

08009754 <COPC_task_update>:
volatile uint8_t receiving = 0;
volatile uint8_t receive_buffer[FSP_PKT_MAX_LENGTH];
volatile uint8_t receive_index = 0;

static void COPC_task_update(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b0d0      	sub	sp, #320	@ 0x140
 8009758:	af00      	add	r7, sp, #0
	uint8_t rxData;


    while (IsDataAvailable(USART1))
 800975a:	e074      	b.n	8009846 <COPC_task_update+0xf2>
    {
        rxData = Uart_read(USART1);
 800975c:	4840      	ldr	r0, [pc, #256]	@ (8009860 <COPC_task_update+0x10c>)
 800975e:	f7f8 fa31 	bl	8001bc4 <Uart_read>
 8009762:	4603      	mov	r3, r0
 8009764:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

//		char pos_str2[10];
//		sprintf(pos_str2, "%d", rxData);
//		Uart_sendstring(UART5, pos_str2);

        if (!receiving) {
 8009768:	4b3e      	ldr	r3, [pc, #248]	@ (8009864 <COPC_task_update+0x110>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <COPC_task_update+0x34>
            if (rxData == FSP_PKT_SOD) {
 8009772:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009776:	2bca      	cmp	r3, #202	@ 0xca
 8009778:	d165      	bne.n	8009846 <COPC_task_update+0xf2>
                receiving = 1;
 800977a:	4b3a      	ldr	r3, [pc, #232]	@ (8009864 <COPC_task_update+0x110>)
 800977c:	2201      	movs	r2, #1
 800977e:	701a      	strb	r2, [r3, #0]
                receive_index = 0;
 8009780:	4b39      	ldr	r3, [pc, #228]	@ (8009868 <COPC_task_update+0x114>)
 8009782:	2200      	movs	r2, #0
 8009784:	701a      	strb	r2, [r3, #0]
 8009786:	e05e      	b.n	8009846 <COPC_task_update+0xf2>
            }
        } else {

            if (rxData == FSP_PKT_EOF) {
 8009788:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800978c:	2bef      	cmp	r3, #239	@ 0xef
 800978e:	d146      	bne.n	800981e <COPC_task_update+0xca>
                receiving = 0;
 8009790:	4b34      	ldr	r3, [pc, #208]	@ (8009864 <COPC_task_update+0x110>)
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
                fsp_packet_t fsp_pkt;
                if(send_rs422){
 8009796:	4b35      	ldr	r3, [pc, #212]	@ (800986c <COPC_task_update+0x118>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	d01a      	beq.n	80097d6 <COPC_task_update+0x82>
					frame_decode_rs422((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 80097a0:	4b31      	ldr	r3, [pc, #196]	@ (8009868 <COPC_task_update+0x114>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80097aa:	4619      	mov	r1, r3
 80097ac:	4830      	ldr	r0, [pc, #192]	@ (8009870 <COPC_task_update+0x11c>)
 80097ae:	f003 f8b3 	bl	800c918 <frame_decode_rs422>
					frame_processing_rs422(&fsp_pkt);
 80097b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fc38 	bl	800802c <frame_processing_rs422>
					receive_pduFlag = 1;
 80097bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009874 <COPC_task_update+0x120>)
 80097be:	2201      	movs	r2, #1
 80097c0:	701a      	strb	r2, [r3, #0]
					receive_pmuFlag = 1;
 80097c2:	4b2d      	ldr	r3, [pc, #180]	@ (8009878 <COPC_task_update+0x124>)
 80097c4:	2201      	movs	r2, #1
 80097c6:	701a      	strb	r2, [r3, #0]
					receive_iouFlag = 1;
 80097c8:	4b2c      	ldr	r3, [pc, #176]	@ (800987c <COPC_task_update+0x128>)
 80097ca:	2201      	movs	r2, #1
 80097cc:	701a      	strb	r2, [r3, #0]
					send_rs422 = 0;
 80097ce:	4b27      	ldr	r3, [pc, #156]	@ (800986c <COPC_task_update+0x118>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	e02f      	b.n	8009836 <COPC_task_update+0xe2>
                }else{
                    int ret = frame_decode((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 80097d6:	4b24      	ldr	r3, [pc, #144]	@ (8009868 <COPC_task_update+0x114>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80097e0:	4619      	mov	r1, r3
 80097e2:	4823      	ldr	r0, [pc, #140]	@ (8009870 <COPC_task_update+0x11c>)
 80097e4:	f002 ff36 	bl	800c654 <frame_decode>
 80097e8:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138

                    if (ret > 0) {
 80097ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dd20      	ble.n	8009836 <COPC_task_update+0xe2>
                        char error_msg[50];
                        sprintf(error_msg, "Error: %s\r\n", decode_error_msgs[ret]);
 80097f4:	4a22      	ldr	r2, [pc, #136]	@ (8009880 <COPC_task_update+0x12c>)
 80097f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80097fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80097fe:	1d3b      	adds	r3, r7, #4
 8009800:	4920      	ldr	r1, [pc, #128]	@ (8009884 <COPC_task_update+0x130>)
 8009802:	4618      	mov	r0, r3
 8009804:	f006 fb10 	bl	800fe28 <siprintf>
//                        Uart_sendstring(UART5, error_msg);
                        Uart_sendstring(UART4, error_msg);
 8009808:	1d3b      	adds	r3, r7, #4
 800980a:	4619      	mov	r1, r3
 800980c:	481e      	ldr	r0, [pc, #120]	@ (8009888 <COPC_task_update+0x134>)
 800980e:	f7f8 fbe5 	bl	8001fdc <Uart_sendstring>
                        Uart_sendstring(USART2, error_msg);
 8009812:	1d3b      	adds	r3, r7, #4
 8009814:	4619      	mov	r1, r3
 8009816:	481d      	ldr	r0, [pc, #116]	@ (800988c <COPC_task_update+0x138>)
 8009818:	f7f8 fbe0 	bl	8001fdc <Uart_sendstring>
 800981c:	e00b      	b.n	8009836 <COPC_task_update+0xe2>
                }



            }else{
            	receive_buffer[receive_index++] = rxData;
 800981e:	4b12      	ldr	r3, [pc, #72]	@ (8009868 <COPC_task_update+0x114>)
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	b2d1      	uxtb	r1, r2
 8009828:	4a0f      	ldr	r2, [pc, #60]	@ (8009868 <COPC_task_update+0x114>)
 800982a:	7011      	strb	r1, [r2, #0]
 800982c:	4619      	mov	r1, r3
 800982e:	4a10      	ldr	r2, [pc, #64]	@ (8009870 <COPC_task_update+0x11c>)
 8009830:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009834:	5453      	strb	r3, [r2, r1]
            }

            if (receive_index >= FSP_PKT_MAX_LENGTH) {
 8009836:	4b0c      	ldr	r3, [pc, #48]	@ (8009868 <COPC_task_update+0x114>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2bff      	cmp	r3, #255	@ 0xff
 800983e:	d102      	bne.n	8009846 <COPC_task_update+0xf2>
                // Frame quá dài, reset lại

                receiving = 0;
 8009840:	4b08      	ldr	r3, [pc, #32]	@ (8009864 <COPC_task_update+0x110>)
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART1))
 8009846:	4806      	ldr	r0, [pc, #24]	@ (8009860 <COPC_task_update+0x10c>)
 8009848:	f7f8 fb74 	bl	8001f34 <IsDataAvailable>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d184      	bne.n	800975c <COPC_task_update+0x8>
            }
    }
}

}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	40011000 	.word	0x40011000
 8009864:	200062dc 	.word	0x200062dc
 8009868:	200063df 	.word	0x200063df
 800986c:	200058d2 	.word	0x200058d2
 8009870:	200062e0 	.word	0x200062e0
 8009874:	20000040 	.word	0x20000040
 8009878:	20000041 	.word	0x20000041
 800987c:	20000042 	.word	0x20000042
 8009880:	20000400 	.word	0x20000400
 8009884:	08015afc 	.word	0x08015afc
 8009888:	40004c00 	.word	0x40004c00
 800988c:	40004400 	.word	0x40004400

08009890 <COPC_create_task>:
void	COPC_create_task(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
	COPC_init();
 8009894:	f7ff ff4e 	bl	8009734 <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
 8009898:	4902      	ldr	r1, [pc, #8]	@ (80098a4 <COPC_create_task+0x14>)
 800989a:	4803      	ldr	r0, [pc, #12]	@ (80098a8 <COPC_create_task+0x18>)
 800989c:	f002 faa4 	bl	800bde8 <SCH_TASK_CreateTask>
}
 80098a0:	bf00      	nop
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20000420 	.word	0x20000420
 80098a8:	2000041c 	.word	0x2000041c

080098ac <GPS_create_task>:
		}
};


void GPS_create_task(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	af00      	add	r7, sp, #0
	Ringbuf_init();
 80098b0:	f7f8 f8a4 	bl	80019fc <Ringbuf_init>
	SCH_TASK_CreateTask(&gps_task_context.taskHandle, &gps_task_context.taskProperty);
 80098b4:	4902      	ldr	r1, [pc, #8]	@ (80098c0 <GPS_create_task+0x14>)
 80098b6:	4803      	ldr	r0, [pc, #12]	@ (80098c4 <GPS_create_task+0x18>)
 80098b8:	f002 fa96 	bl	800bde8 <SCH_TASK_CreateTask>
}
 80098bc:	bf00      	nop
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20000430 	.word	0x20000430
 80098c4:	2000042c 	.word	0x2000042c

080098c8 <GPS_task_update>:



static void GPS_task_update(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
	if(gps_report_enable){
 80098ce:	4b0f      	ldr	r3, [pc, #60]	@ (800990c <GPS_task_update+0x44>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d015      	beq.n	8009904 <GPS_task_update+0x3c>
		uint8_t rxData;
		while (IsDataAvailable(USART3))
 80098d8:	e00e      	b.n	80098f8 <GPS_task_update+0x30>
		{
			rxData = Uart_read(USART3);
 80098da:	480d      	ldr	r0, [pc, #52]	@ (8009910 <GPS_task_update+0x48>)
 80098dc:	f7f8 f972 	bl	8001bc4 <Uart_read>
 80098e0:	4603      	mov	r3, r0
 80098e2:	71fb      	strb	r3, [r7, #7]
			Uart_write(USART2, rxData);
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	4619      	mov	r1, r3
 80098e8:	480a      	ldr	r0, [pc, #40]	@ (8009914 <GPS_task_update+0x4c>)
 80098ea:	f7f8 fa2d 	bl	8001d48 <Uart_write>
			Uart_write(UART4, rxData);
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	4619      	mov	r1, r3
 80098f2:	4809      	ldr	r0, [pc, #36]	@ (8009918 <GPS_task_update+0x50>)
 80098f4:	f7f8 fa28 	bl	8001d48 <Uart_write>
		while (IsDataAvailable(USART3))
 80098f8:	4805      	ldr	r0, [pc, #20]	@ (8009910 <GPS_task_update+0x48>)
 80098fa:	f7f8 fb1b 	bl	8001f34 <IsDataAvailable>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1ea      	bne.n	80098da <GPS_task_update+0x12>
		}
	}
}
 8009904:	bf00      	nop
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20005a00 	.word	0x20005a00
 8009910:	40004800 	.word	0x40004800
 8009914:	40004400 	.word	0x40004400
 8009918:	40004c00 	.word	0x40004c00

0800991c <LL_I2C_DisableIT_RX>:
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	605a      	str	r2, [r3, #4]
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <LL_I2C_IsActiveFlag_RXNE>:
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994c:	2b40      	cmp	r3, #64	@ 0x40
 800994e:	bf0c      	ite	eq
 8009950:	2301      	moveq	r3, #1
 8009952:	2300      	movne	r3, #0
 8009954:	b2db      	uxtb	r3, r3
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <LL_I2C_ClearFlag_ADDR>:
{
 8009962:	b480      	push	{r7}
 8009964:	b085      	sub	sp, #20
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8009970:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8009978:	68fb      	ldr	r3, [r7, #12]
}
 800997a:	bf00      	nop
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <LL_I2C_GenerateStartCondition>:
{
 8009986:	b480      	push	{r7}
 8009988:	b083      	sub	sp, #12
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	601a      	str	r2, [r3, #0]
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <LL_I2C_GenerateStopCondition>:
{
 80099a6:	b480      	push	{r7}
 80099a8:	b083      	sub	sp, #12
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	601a      	str	r2, [r3, #0]
}
 80099ba:	bf00      	nop
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <LL_I2C_ReceiveData8>:
{
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	b2db      	uxtb	r3, r3
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <LL_I2C_TransmitData8>:
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	611a      	str	r2, [r3, #16]
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <I2C_img_task_update>:
    }
};

uint8_t img_read_enable = 0;
static void I2C_img_task_update(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
  //  if (img_read_enable)
    if (img_read_enable)
 8009a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8009abc <I2C_img_task_update+0xb4>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d042      	beq.n	8009a9c <I2C_img_task_update+0x94>
    {
        if (currentBlock < NUM_BLOCKS)
 8009a16:	4b2a      	ldr	r3, [pc, #168]	@ (8009ac0 <I2C_img_task_update+0xb8>)
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	2b38      	cmp	r3, #56	@ 0x38
 8009a1c:	d811      	bhi.n	8009a42 <I2C_img_task_update+0x3a>
        {
            if (imgReadIndex == 0)
 8009a1e:	4b29      	ldr	r3, [pc, #164]	@ (8009ac4 <I2C_img_task_update+0xbc>)
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d128      	bne.n	8009a78 <I2C_img_task_update+0x70>
     //           while (!LL_I2C_IsActiveFlag_ADDR(I2C3));
//                LL_I2C_ClearFlag_ADDR(I2C3);
//                LL_I2C_EnableIT_RX(I2C3);


                LL_I2C_GenerateStartCondition(I2C3);
 8009a26:	4828      	ldr	r0, [pc, #160]	@ (8009ac8 <I2C_img_task_update+0xc0>)
 8009a28:	f7ff ffad 	bl	8009986 <LL_I2C_GenerateStartCondition>

                LL_I2C_TransmitData8(I2C3, IMG_ADDRESS);
 8009a2c:	2113      	movs	r1, #19
 8009a2e:	4826      	ldr	r0, [pc, #152]	@ (8009ac8 <I2C_img_task_update+0xc0>)
 8009a30:	f7ff ffd6 	bl	80099e0 <LL_I2C_TransmitData8>
                LL_I2C_ClearFlag_ADDR(I2C3);
 8009a34:	4824      	ldr	r0, [pc, #144]	@ (8009ac8 <I2C_img_task_update+0xc0>)
 8009a36:	f7ff ff94 	bl	8009962 <LL_I2C_ClearFlag_ADDR>
                LL_I2C_GenerateStopCondition(I2C3);
 8009a3a:	4823      	ldr	r0, [pc, #140]	@ (8009ac8 <I2C_img_task_update+0xc0>)
 8009a3c:	f7ff ffb3 	bl	80099a6 <LL_I2C_GenerateStopCondition>
 8009a40:	e01a      	b.n	8009a78 <I2C_img_task_update+0x70>
            }
        }
        else
        {
            // All blocks have been read
            LL_I2C_DisableIT_RX(I2C3);
 8009a42:	4821      	ldr	r0, [pc, #132]	@ (8009ac8 <I2C_img_task_update+0xc0>)
 8009a44:	f7ff ff6a 	bl	800991c <LL_I2C_DisableIT_RX>
            LL_I2C_GenerateStopCondition(I2C3);
 8009a48:	481f      	ldr	r0, [pc, #124]	@ (8009ac8 <I2C_img_task_update+0xc0>)
 8009a4a:	f7ff ffac 	bl	80099a6 <LL_I2C_GenerateStopCondition>
            img_read_enable = 0;
 8009a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8009abc <I2C_img_task_update+0xb4>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	701a      	strb	r2, [r3, #0]
            // Process the received data
            // Switch block ở đây
            // ...
            for (int i = 0; i < IMG_SIZE; i++) {
 8009a54:	2300      	movs	r3, #0
 8009a56:	607b      	str	r3, [r7, #4]
 8009a58:	e00a      	b.n	8009a70 <I2C_img_task_update+0x68>
                Uart_write(UART4, imgData[i]);
 8009a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8009acc <I2C_img_task_update+0xc4>)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4413      	add	r3, r2
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	4619      	mov	r1, r3
 8009a64:	481a      	ldr	r0, [pc, #104]	@ (8009ad0 <I2C_img_task_update+0xc8>)
 8009a66:	f7f8 f96f 	bl	8001d48 <Uart_write>
            for (int i = 0; i < IMG_SIZE; i++) {
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	607b      	str	r3, [r7, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 8009a76:	dbf0      	blt.n	8009a5a <I2C_img_task_update+0x52>
            }
        }

        // Check if 1 second has elapsed
        if (SCH_TIM_HasCompleted(SCH_TIM_IMG))
 8009a78:	2008      	movs	r0, #8
 8009a7a:	f002 f99f 	bl	800bdbc <SCH_TIM_HasCompleted>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d016      	beq.n	8009ab2 <I2C_img_task_update+0xaa>
        {
            // Reset the read process
            imgReadIndex = 0;
 8009a84:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac4 <I2C_img_task_update+0xbc>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	801a      	strh	r2, [r3, #0]
            currentBlock = 0;
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac0 <I2C_img_task_update+0xb8>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	801a      	strh	r2, [r3, #0]
            SCH_TIM_Start(SCH_TIM_IMG, IMG_PERIOD);
 8009a90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009a94:	2008      	movs	r0, #8
 8009a96:	f002 f97b 	bl	800bd90 <SCH_TIM_Start>
        // Reset the read process
        imgReadIndex = 0;
        currentBlock = 0;
        SCH_TIM_Start(SCH_TIM_IMG, IMG_PERIOD);
    }
}
 8009a9a:	e00a      	b.n	8009ab2 <I2C_img_task_update+0xaa>
        imgReadIndex = 0;
 8009a9c:	4b09      	ldr	r3, [pc, #36]	@ (8009ac4 <I2C_img_task_update+0xbc>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	801a      	strh	r2, [r3, #0]
        currentBlock = 0;
 8009aa2:	4b07      	ldr	r3, [pc, #28]	@ (8009ac0 <I2C_img_task_update+0xb8>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	801a      	strh	r2, [r3, #0]
        SCH_TIM_Start(SCH_TIM_IMG, IMG_PERIOD);
 8009aa8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009aac:	2008      	movs	r0, #8
 8009aae:	f002 f96f 	bl	800bd90 <SCH_TIM_Start>
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20008064 	.word	0x20008064
 8009ac0:	20008062 	.word	0x20008062
 8009ac4:	20008060 	.word	0x20008060
 8009ac8:	40005c00 	.word	0x40005c00
 8009acc:	200063e0 	.word	0x200063e0
 8009ad0:	40004c00 	.word	0x40004c00

08009ad4 <I2C_img_create_task>:


void I2C_img_create_task(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&i2c_img_task_context.taskHandle, &i2c_img_task_context.taskProperty);
 8009ad8:	4902      	ldr	r1, [pc, #8]	@ (8009ae4 <I2C_img_create_task+0x10>)
 8009ada:	4803      	ldr	r0, [pc, #12]	@ (8009ae8 <I2C_img_create_task+0x14>)
 8009adc:	f002 f984 	bl	800bde8 <SCH_TASK_CreateTask>
}
 8009ae0:	bf00      	nop
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	20000440 	.word	0x20000440
 8009ae8:	2000043c 	.word	0x2000043c

08009aec <I2C3_IRQHandler>:

void I2C3_IRQHandler(void)
{
 8009aec:	b598      	push	{r3, r4, r7, lr}
 8009aee:	af00      	add	r7, sp, #0
    if (LL_I2C_IsActiveFlag_RXNE(I2C3))
 8009af0:	4816      	ldr	r0, [pc, #88]	@ (8009b4c <I2C3_IRQHandler+0x60>)
 8009af2:	f7ff ff23 	bl	800993c <LL_I2C_IsActiveFlag_RXNE>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d025      	beq.n	8009b48 <I2C3_IRQHandler+0x5c>
    {
        // Read received data
        imgData[currentBlock * BLOCK_SIZE + imgReadIndex] = LL_I2C_ReceiveData8(I2C3);
 8009afc:	4b14      	ldr	r3, [pc, #80]	@ (8009b50 <I2C3_IRQHandler+0x64>)
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	01db      	lsls	r3, r3, #7
 8009b02:	4a14      	ldr	r2, [pc, #80]	@ (8009b54 <I2C3_IRQHandler+0x68>)
 8009b04:	8812      	ldrh	r2, [r2, #0]
 8009b06:	189c      	adds	r4, r3, r2
 8009b08:	4810      	ldr	r0, [pc, #64]	@ (8009b4c <I2C3_IRQHandler+0x60>)
 8009b0a:	f7ff ff5c 	bl	80099c6 <LL_I2C_ReceiveData8>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	461a      	mov	r2, r3
 8009b12:	4b11      	ldr	r3, [pc, #68]	@ (8009b58 <I2C3_IRQHandler+0x6c>)
 8009b14:	551a      	strb	r2, [r3, r4]
        imgReadIndex++;
 8009b16:	4b0f      	ldr	r3, [pc, #60]	@ (8009b54 <I2C3_IRQHandler+0x68>)
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b54 <I2C3_IRQHandler+0x68>)
 8009b20:	801a      	strh	r2, [r3, #0]

        if (imgReadIndex >= BLOCK_SIZE)
 8009b22:	4b0c      	ldr	r3, [pc, #48]	@ (8009b54 <I2C3_IRQHandler+0x68>)
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b28:	d90e      	bls.n	8009b48 <I2C3_IRQHandler+0x5c>
        {
            // Current block is fully read
            LL_I2C_DisableIT_RX(I2C3);
 8009b2a:	4808      	ldr	r0, [pc, #32]	@ (8009b4c <I2C3_IRQHandler+0x60>)
 8009b2c:	f7ff fef6 	bl	800991c <LL_I2C_DisableIT_RX>
            LL_I2C_GenerateStopCondition(I2C3);
 8009b30:	4806      	ldr	r0, [pc, #24]	@ (8009b4c <I2C3_IRQHandler+0x60>)
 8009b32:	f7ff ff38 	bl	80099a6 <LL_I2C_GenerateStopCondition>
            imgReadIndex = 0;
 8009b36:	4b07      	ldr	r3, [pc, #28]	@ (8009b54 <I2C3_IRQHandler+0x68>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	801a      	strh	r2, [r3, #0]
            currentBlock++;
 8009b3c:	4b04      	ldr	r3, [pc, #16]	@ (8009b50 <I2C3_IRQHandler+0x64>)
 8009b3e:	881b      	ldrh	r3, [r3, #0]
 8009b40:	3301      	adds	r3, #1
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	4b02      	ldr	r3, [pc, #8]	@ (8009b50 <I2C3_IRQHandler+0x64>)
 8009b46:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8009b48:	bf00      	nop
 8009b4a:	bd98      	pop	{r3, r4, r7, pc}
 8009b4c:	40005c00 	.word	0x40005c00
 8009b50:	20008062 	.word	0x20008062
 8009b54:	20008060 	.word	0x20008060
 8009b58:	200063e0 	.word	0x200063e0

08009b5c <LL_GPIO_SetOutputPin>:
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	619a      	str	r2, [r3, #24]
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <LL_GPIO_ResetOutputPin>:
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	041a      	lsls	r2, r3, #16
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	619a      	str	r2, [r3, #24]
}
 8009b8a:	bf00      	nop
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
	...

08009b98 <status_led_init>:
{
	s_led_display_status.state = status;
}

void status_led_init(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
    // Initialize LED status variable
    s_led_display_status.led = 0;
 8009b9c:	4a06      	ldr	r2, [pc, #24]	@ (8009bb8 <status_led_init+0x20>)
 8009b9e:	7813      	ldrb	r3, [r2, #0]
 8009ba0:	f36f 0300 	bfc	r3, #0, #1
 8009ba4:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 8009ba6:	4a04      	ldr	r2, [pc, #16]	@ (8009bb8 <status_led_init+0x20>)
 8009ba8:	7813      	ldrb	r3, [r2, #0]
 8009baa:	f36f 0347 	bfc	r3, #1, #7
 8009bae:	7013      	strb	r3, [r2, #0]

    // Turn off LED initially
    status_led_off();
 8009bb0:	f000 f804 	bl	8009bbc <status_led_off>
}
 8009bb4:	bf00      	nop
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	20008068 	.word	0x20008068

08009bbc <status_led_off>:

static void status_led_off(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 8009bc0:	2120      	movs	r1, #32
 8009bc2:	4802      	ldr	r0, [pc, #8]	@ (8009bcc <status_led_off+0x10>)
 8009bc4:	f7ff ffd8 	bl	8009b78 <LL_GPIO_ResetOutputPin>
}
 8009bc8:	bf00      	nop
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	40020800 	.word	0x40020800

08009bd0 <status_led_on>:

static void status_led_on(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 8009bd4:	2120      	movs	r1, #32
 8009bd6:	4802      	ldr	r0, [pc, #8]	@ (8009be0 <status_led_on+0x10>)
 8009bd8:	f7ff ffc0 	bl	8009b5c <LL_GPIO_SetOutputPin>
}
 8009bdc:	bf00      	nop
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	40020800 	.word	0x40020800

08009be4 <status_led_update>:

void	status_led_update(void)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
	switch (s_led_display_status.state) {
 8009be8:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <status_led_update+0x3c>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d811      	bhi.n	8009c1a <status_led_update+0x36>
 8009bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bfc <status_led_update+0x18>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c0d 	.word	0x08009c0d
 8009c00:	08009c13 	.word	0x08009c13
 8009c04:	08009c19 	.word	0x08009c19
 8009c08:	08009c19 	.word	0x08009c19
	case POWERUP:
		status_led_powerup();
 8009c0c:	f000 f80a 	bl	8009c24 <status_led_powerup>
		break;
 8009c10:	e003      	b.n	8009c1a <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 8009c12:	f000 f869 	bl	8009ce8 <status_led_normal>
		break;
 8009c16:	e000      	b.n	8009c1a <status_led_update+0x36>
	case POWERING_SUB:
		break;
 8009c18:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 8009c1a:	bf00      	nop
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	20008068 	.word	0x20008068

08009c24 <status_led_powerup>:

int count = 0;
static void status_led_powerup(void)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 8009c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009cd4 <status_led_powerup+0xb0>)
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d02f      	beq.n	8009c98 <status_led_powerup+0x74>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8009c38:	2000      	movs	r0, #0
 8009c3a:	f002 f8bf 	bl	800bdbc <SCH_TIM_HasCompleted>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d042      	beq.n	8009cca <status_led_powerup+0xa6>
        {
            s_led_display_status.led = 0;
 8009c44:	4a23      	ldr	r2, [pc, #140]	@ (8009cd4 <status_led_powerup+0xb0>)
 8009c46:	7813      	ldrb	r3, [r2, #0]
 8009c48:	f36f 0300 	bfc	r3, #0, #1
 8009c4c:	7013      	strb	r3, [r2, #0]
            if(!rs422_report_enable){
 8009c4e:	4b22      	ldr	r3, [pc, #136]	@ (8009cd8 <status_led_powerup+0xb4>)
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d117      	bne.n	8009c88 <status_led_powerup+0x64>
            	char buffer_0x00[20];

				sprintf(buffer_0x00, "\nAlive[%d]\n", count);
 8009c58:	4b20      	ldr	r3, [pc, #128]	@ (8009cdc <status_led_powerup+0xb8>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	1d3b      	adds	r3, r7, #4
 8009c5e:	4920      	ldr	r1, [pc, #128]	@ (8009ce0 <status_led_powerup+0xbc>)
 8009c60:	4618      	mov	r0, r3
 8009c62:	f006 f8e1 	bl	800fe28 <siprintf>
				Uart_sendstring(UART5, buffer_0x00);
 8009c66:	1d3b      	adds	r3, r7, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	481e      	ldr	r0, [pc, #120]	@ (8009ce4 <status_led_powerup+0xc0>)
 8009c6c:	f7f8 f9b6 	bl	8001fdc <Uart_sendstring>
				count++;
 8009c70:	4b1a      	ldr	r3, [pc, #104]	@ (8009cdc <status_led_powerup+0xb8>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3301      	adds	r3, #1
 8009c76:	4a19      	ldr	r2, [pc, #100]	@ (8009cdc <status_led_powerup+0xb8>)
 8009c78:	6013      	str	r3, [r2, #0]
				if(count>4){
 8009c7a:	4b18      	ldr	r3, [pc, #96]	@ (8009cdc <status_led_powerup+0xb8>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b04      	cmp	r3, #4
 8009c80:	dd02      	ble.n	8009c88 <status_led_powerup+0x64>
					count =0;
 8009c82:	4b16      	ldr	r3, [pc, #88]	@ (8009cdc <status_led_powerup+0xb8>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	601a      	str	r2, [r3, #0]
//            char buffered[100];
//            sprintf(buffered, "PMU_INT: %d, PDU_INT: %d, IOU_INT: %d, CAM_INT: %d\r\n",
//                    pmu_int_value, pdu_int_value, iou_int_value, cam_int_value);
//            Uart_sendstring(USART6, buffered);

            status_led_off();
 8009c88:	f7ff ff98 	bl	8009bbc <status_led_off>
//            command_send_splash();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8009c8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009c90:	2000      	movs	r0, #0
 8009c92:	f002 f87d 	bl	800bd90 <SCH_TIM_Start>
            s_led_display_status.led = 1;
            status_led_on();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
        }
    }
}
 8009c96:	e018      	b.n	8009cca <status_led_powerup+0xa6>
    else if (s_led_display_status.led == 0) // LED is OFF
 8009c98:	4b0e      	ldr	r3, [pc, #56]	@ (8009cd4 <status_led_powerup+0xb0>)
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d111      	bne.n	8009cca <status_led_powerup+0xa6>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	f002 f888 	bl	800bdbc <SCH_TIM_HasCompleted>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00b      	beq.n	8009cca <status_led_powerup+0xa6>
            s_led_display_status.led = 1;
 8009cb2:	4a08      	ldr	r2, [pc, #32]	@ (8009cd4 <status_led_powerup+0xb0>)
 8009cb4:	7813      	ldrb	r3, [r2, #0]
 8009cb6:	f043 0301 	orr.w	r3, r3, #1
 8009cba:	7013      	strb	r3, [r2, #0]
            status_led_on();
 8009cbc:	f7ff ff88 	bl	8009bd0 <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8009cc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	f002 f863 	bl	800bd90 <SCH_TIM_Start>
}
 8009cca:	bf00      	nop
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20008068 	.word	0x20008068
 8009cd8:	200059fd 	.word	0x200059fd
 8009cdc:	2000806c 	.word	0x2000806c
 8009ce0:	08015b08 	.word	0x08015b08
 8009ce4:	40005000 	.word	0x40005000

08009ce8 <status_led_normal>:
//}
//


static void status_led_normal(void)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	af00      	add	r7, sp, #0
//			s_led_display_status.led = 1;
//			status_led_on();
//			SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_ON_PERIOD);	//restart
//		}
//	}
}
 8009cec:	bf00      	nop
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
	...

08009cf8 <status_led_create_task>:

void	status_led_create_task(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8009cfc:	4902      	ldr	r1, [pc, #8]	@ (8009d08 <status_led_create_task+0x10>)
 8009cfe:	4803      	ldr	r0, [pc, #12]	@ (8009d0c <status_led_create_task+0x14>)
 8009d00:	f002 f872 	bl	800bde8 <SCH_TASK_CreateTask>
}
 8009d04:	bf00      	nop
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	20000450 	.word	0x20000450
 8009d0c:	2000044c 	.word	0x2000044c

08009d10 <__NVIC_SetPriorityGrouping>:
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f003 0307 	and.w	r3, r3, #7
 8009d1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d20:	4b0c      	ldr	r3, [pc, #48]	@ (8009d54 <__NVIC_SetPriorityGrouping+0x44>)
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d42:	4a04      	ldr	r2, [pc, #16]	@ (8009d54 <__NVIC_SetPriorityGrouping+0x44>)
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	60d3      	str	r3, [r2, #12]
}
 8009d48:	bf00      	nop
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	e000ed00 	.word	0xe000ed00

08009d58 <__NVIC_GetPriorityGrouping>:
{
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d5c:	4b04      	ldr	r3, [pc, #16]	@ (8009d70 <__NVIC_GetPriorityGrouping+0x18>)
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	0a1b      	lsrs	r3, r3, #8
 8009d62:	f003 0307 	and.w	r3, r3, #7
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	e000ed00 	.word	0xe000ed00

08009d74 <__NVIC_EnableIRQ>:
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	db0b      	blt.n	8009d9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d86:	79fb      	ldrb	r3, [r7, #7]
 8009d88:	f003 021f 	and.w	r2, r3, #31
 8009d8c:	4907      	ldr	r1, [pc, #28]	@ (8009dac <__NVIC_EnableIRQ+0x38>)
 8009d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d92:	095b      	lsrs	r3, r3, #5
 8009d94:	2001      	movs	r0, #1
 8009d96:	fa00 f202 	lsl.w	r2, r0, r2
 8009d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009d9e:	bf00      	nop
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	e000e100 	.word	0xe000e100

08009db0 <__NVIC_SetPriority>:
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	4603      	mov	r3, r0
 8009db8:	6039      	str	r1, [r7, #0]
 8009dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	db0a      	blt.n	8009dda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	490c      	ldr	r1, [pc, #48]	@ (8009dfc <__NVIC_SetPriority+0x4c>)
 8009dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dce:	0112      	lsls	r2, r2, #4
 8009dd0:	b2d2      	uxtb	r2, r2
 8009dd2:	440b      	add	r3, r1
 8009dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009dd8:	e00a      	b.n	8009df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	4908      	ldr	r1, [pc, #32]	@ (8009e00 <__NVIC_SetPriority+0x50>)
 8009de0:	79fb      	ldrb	r3, [r7, #7]
 8009de2:	f003 030f 	and.w	r3, r3, #15
 8009de6:	3b04      	subs	r3, #4
 8009de8:	0112      	lsls	r2, r2, #4
 8009dea:	b2d2      	uxtb	r2, r2
 8009dec:	440b      	add	r3, r1
 8009dee:	761a      	strb	r2, [r3, #24]
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	e000e100 	.word	0xe000e100
 8009e00:	e000ed00 	.word	0xe000ed00

08009e04 <NVIC_EncodePriority>:
{
 8009e04:	b480      	push	{r7}
 8009e06:	b089      	sub	sp, #36	@ 0x24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	f1c3 0307 	rsb	r3, r3, #7
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	bf28      	it	cs
 8009e22:	2304      	movcs	r3, #4
 8009e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	2b06      	cmp	r3, #6
 8009e2c:	d902      	bls.n	8009e34 <NVIC_EncodePriority+0x30>
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	3b03      	subs	r3, #3
 8009e32:	e000      	b.n	8009e36 <NVIC_EncodePriority+0x32>
 8009e34:	2300      	movs	r3, #0
 8009e36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e38:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e42:	43da      	mvns	r2, r3
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	401a      	ands	r2, r3
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	fa01 f303 	lsl.w	r3, r1, r3
 8009e56:	43d9      	mvns	r1, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e5c:	4313      	orrs	r3, r2
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3724      	adds	r7, #36	@ 0x24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <LL_I2C_EnableClockStretching>:
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	601a      	str	r2, [r3, #0]
}
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <LL_I2C_DisableGeneralCall>:
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	601a      	str	r2, [r3, #0]
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <LL_I2C_SetOwnAddress2>:
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b083      	sub	sp, #12
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	431a      	orrs	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	60da      	str	r2, [r3, #12]
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <LL_I2C_DisableOwnAddress2>:
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f023 0201 	bic.w	r2, r3, #1
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	60da      	str	r2, [r3, #12]
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009ef4:	4b05      	ldr	r3, [pc, #20]	@ (8009f0c <LL_RCC_HSE_Enable+0x1c>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a04      	ldr	r2, [pc, #16]	@ (8009f0c <LL_RCC_HSE_Enable+0x1c>)
 8009efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009efe:	6013      	str	r3, [r2, #0]
}
 8009f00:	bf00      	nop
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	40023800 	.word	0x40023800

08009f10 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8009f14:	4b07      	ldr	r3, [pc, #28]	@ (8009f34 <LL_RCC_HSE_IsReady+0x24>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f20:	bf0c      	ite	eq
 8009f22:	2301      	moveq	r3, #1
 8009f24:	2300      	movne	r3, #0
 8009f26:	b2db      	uxtb	r3, r3
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	40023800 	.word	0x40023800

08009f38 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8009f40:	4b06      	ldr	r3, [pc, #24]	@ (8009f5c <LL_RCC_SetSysClkSource+0x24>)
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f023 0203 	bic.w	r2, r3, #3
 8009f48:	4904      	ldr	r1, [pc, #16]	@ (8009f5c <LL_RCC_SetSysClkSource+0x24>)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	608b      	str	r3, [r1, #8]
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	40023800 	.word	0x40023800

08009f60 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009f60:	b480      	push	{r7}
 8009f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009f64:	4b04      	ldr	r3, [pc, #16]	@ (8009f78 <LL_RCC_GetSysClkSource+0x18>)
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f003 030c 	and.w	r3, r3, #12
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	40023800 	.word	0x40023800

08009f7c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8009f84:	4b06      	ldr	r3, [pc, #24]	@ (8009fa0 <LL_RCC_SetAHBPrescaler+0x24>)
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009f8c:	4904      	ldr	r1, [pc, #16]	@ (8009fa0 <LL_RCC_SetAHBPrescaler+0x24>)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	608b      	str	r3, [r1, #8]
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	40023800 	.word	0x40023800

08009fa4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8009fac:	4b06      	ldr	r3, [pc, #24]	@ (8009fc8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009fb4:	4904      	ldr	r1, [pc, #16]	@ (8009fc8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	608b      	str	r3, [r1, #8]
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	40023800 	.word	0x40023800

08009fcc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8009fd4:	4b06      	ldr	r3, [pc, #24]	@ (8009ff0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009fdc:	4904      	ldr	r1, [pc, #16]	@ (8009ff0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	608b      	str	r3, [r1, #8]
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	40023800 	.word	0x40023800

08009ff4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009ff8:	4b05      	ldr	r3, [pc, #20]	@ (800a010 <LL_RCC_PLL_Enable+0x1c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a04      	ldr	r2, [pc, #16]	@ (800a010 <LL_RCC_PLL_Enable+0x1c>)
 8009ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a002:	6013      	str	r3, [r2, #0]
}
 800a004:	bf00      	nop
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	40023800 	.word	0x40023800

0800a014 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a014:	b480      	push	{r7}
 800a016:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800a018:	4b07      	ldr	r3, [pc, #28]	@ (800a038 <LL_RCC_PLL_IsReady+0x24>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a020:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a024:	bf0c      	ite	eq
 800a026:	2301      	moveq	r3, #1
 800a028:	2300      	movne	r3, #0
 800a02a:	b2db      	uxtb	r3, r3
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	40023800 	.word	0x40023800

0800a03c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800a04a:	4b0d      	ldr	r3, [pc, #52]	@ (800a080 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	4b0d      	ldr	r3, [pc, #52]	@ (800a084 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800a050:	4013      	ands	r3, r2
 800a052:	68f9      	ldr	r1, [r7, #12]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	4311      	orrs	r1, r2
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	0192      	lsls	r2, r2, #6
 800a05c:	430a      	orrs	r2, r1
 800a05e:	4908      	ldr	r1, [pc, #32]	@ (800a080 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a060:	4313      	orrs	r3, r2
 800a062:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800a064:	4b06      	ldr	r3, [pc, #24]	@ (800a080 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a06c:	4904      	ldr	r1, [pc, #16]	@ (800a080 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	4313      	orrs	r3, r2
 800a072:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800a074:	bf00      	nop
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	40023800 	.word	0x40023800
 800a084:	ffbf8000 	.word	0xffbf8000

0800a088 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800a090:	4b08      	ldr	r3, [pc, #32]	@ (800a0b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a094:	4907      	ldr	r1, [pc, #28]	@ (800a0b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4313      	orrs	r3, r2
 800a09a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800a09c:	4b05      	ldr	r3, [pc, #20]	@ (800a0b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a09e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
}
 800a0a8:	bf00      	nop
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	40023800 	.word	0x40023800

0800a0b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800a0c0:	4b08      	ldr	r3, [pc, #32]	@ (800a0e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a0c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0c4:	4907      	ldr	r1, [pc, #28]	@ (800a0e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800a0cc:	4b05      	ldr	r3, [pc, #20]	@ (800a0e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a0ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
}
 800a0d8:	bf00      	nop
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	40023800 	.word	0x40023800

0800a0e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a0f0:	4b08      	ldr	r3, [pc, #32]	@ (800a114 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a0f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0f4:	4907      	ldr	r1, [pc, #28]	@ (800a114 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a0fc:	4b05      	ldr	r3, [pc, #20]	@ (800a114 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a0fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4013      	ands	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a106:	68fb      	ldr	r3, [r7, #12]
}
 800a108:	bf00      	nop
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	40023800 	.word	0x40023800

0800a118 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800a120:	4b06      	ldr	r3, [pc, #24]	@ (800a13c <LL_FLASH_SetLatency+0x24>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f023 0207 	bic.w	r2, r3, #7
 800a128:	4904      	ldr	r1, [pc, #16]	@ (800a13c <LL_FLASH_SetLatency+0x24>)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	600b      	str	r3, [r1, #0]
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	40023c00 	.word	0x40023c00

0800a140 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800a144:	4b04      	ldr	r3, [pc, #16]	@ (800a158 <LL_FLASH_GetLatency+0x18>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0307 	and.w	r3, r3, #7
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	40023c00 	.word	0x40023c00

0800a15c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800a164:	4b06      	ldr	r3, [pc, #24]	@ (800a180 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a16c:	4904      	ldr	r1, [pc, #16]	@ (800a180 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4313      	orrs	r3, r2
 800a172:	600b      	str	r3, [r1, #0]
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	40007000 	.word	0x40007000

0800a184 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800a184:	b480      	push	{r7}
 800a186:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800a188:	4b07      	ldr	r3, [pc, #28]	@ (800a1a8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a190:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a194:	bf0c      	ite	eq
 800a196:	2301      	moveq	r3, #1
 800a198:	2300      	movne	r3, #0
 800a19a:	b2db      	uxtb	r3, r3
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	40007000 	.word	0x40007000

0800a1ac <LL_USART_Enable>:
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	60da      	str	r2, [r3, #12]
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <LL_USART_ConfigAsyncMode>:
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	615a      	str	r2, [r3, #20]
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <LL_GPIO_ResetOutputPin>:
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	041a      	lsls	r2, r3, #16
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	619a      	str	r2, [r3, #24]
}
 800a20a:	bf00      	nop
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
	...

0800a218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800a21c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a220:	f7ff ff62 	bl	800a0e8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800a224:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800a228:	f7ff ff46 	bl	800a0b8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a22c:	2003      	movs	r0, #3
 800a22e:	f7ff fd6f 	bl	8009d10 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800a232:	f7ff fd91 	bl	8009d58 <__NVIC_GetPriorityGrouping>
 800a236:	4603      	mov	r3, r0
 800a238:	2200      	movs	r2, #0
 800a23a:	210f      	movs	r1, #15
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7ff fde1 	bl	8009e04 <NVIC_EncodePriority>
 800a242:	4603      	mov	r3, r0
 800a244:	4619      	mov	r1, r3
 800a246:	f04f 30ff 	mov.w	r0, #4294967295
 800a24a:	f7ff fdb1 	bl	8009db0 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a24e:	f000 f841 	bl	800a2d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a252:	f000 fbcd 	bl	800a9f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800a256:	f000 f887 	bl	800a368 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800a25a:	f000 fb69 	bl	800a930 <MX_USART6_UART_Init>
  MX_UART5_Init();
 800a25e:	f000 f9cd 	bl	800a5fc <MX_UART5_Init>
  MX_USART1_UART_Init();
 800a262:	f000 fa43 	bl	800a6ec <MX_USART1_UART_Init>
  MX_UART4_Init();
 800a266:	f000 f967 	bl	800a538 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800a26a:	f000 faff 	bl	800a86c <MX_USART3_UART_Init>
  MX_I2C3_Init();
 800a26e:	f000 f8d3 	bl	800a418 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 800a272:	f000 fa9b 	bl	800a7ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  command_init();
 800a276:	f7fc fbd9 	bl	8006a2c <command_init>

  fsp_init(FSP_ADR_CPOC);
 800a27a:	2001      	movs	r0, #1
 800a27c:	f001 ff22 	bl	800c0c4 <fsp_init>
  LL_GPIO_ResetOutputPin(GPIOC, ENABLE_MUX_Pin);
 800a280:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a284:	4812      	ldr	r0, [pc, #72]	@ (800a2d0 <main+0xb8>)
 800a286:	f7ff ffb7 	bl	800a1f8 <LL_GPIO_ResetOutputPin>

  status_led_init();
 800a28a:	f7ff fc85 	bl	8009b98 <status_led_init>



  WDT_init();
 800a28e:	f000 fdbf 	bl	800ae10 <WDT_init>

  SCH_Initialize();
 800a292:	f001 fd53 	bl	800bd3c <SCH_Initialize>

  status_led_create_task();
 800a296:	f7ff fd2f 	bl	8009cf8 <status_led_create_task>

  send_packet_init();
 800a29a:	f7f7 ffc3 	bl	8002224 <send_packet_init>
  send_packet_create_task();
 800a29e:	f7f8 f81f 	bl	80022e0 <send_packet_create_task>


  command_create_task();
 800a2a2:	f7fd fbbd 	bl	8007a20 <command_create_task>

  COPC_create_task();
 800a2a6:	f7ff faf3 	bl	8009890 <COPC_create_task>

  WDT_create_task();
 800a2aa:	f000 fdbd 	bl	800ae28 <WDT_create_task>

  IOU_create_task();
 800a2ae:	f7f8 f8af 	bl	8002410 <IOU_create_task>
  PMU_create_task();
 800a2b2:	f7fb f92b 	bl	800550c <PMU_create_task>
  PDU_create_task();
 800a2b6:	f7fa fabd 	bl	8004834 <PDU_create_task>
  rs422_create_task();
 800a2ba:	f7ff fa2d 	bl	8009718 <rs422_create_task>
  GPS_create_task();
 800a2be:	f7ff faf5 	bl	80098ac <GPS_create_task>
  I2C_img_create_task();
 800a2c2:	f7ff fc07 	bl	8009ad4 <I2C_img_create_task>

  SCH_StartSchedular();
 800a2c6:	f001 fe61 	bl	800bf8c <SCH_StartSchedular>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 800a2ca:	f001 fe65 	bl	800bf98 <SCH_HandleScheduledTask>
 800a2ce:	e7fc      	b.n	800a2ca <main+0xb2>
 800a2d0:	40020800 	.word	0x40020800

0800a2d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 800a2d8:	2001      	movs	r0, #1
 800a2da:	f7ff ff1d 	bl	800a118 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800a2de:	bf00      	nop
 800a2e0:	f7ff ff2e 	bl	800a140 <LL_FLASH_GetLatency>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d1fa      	bne.n	800a2e0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800a2ea:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a2ee:	f7ff ff35 	bl	800a15c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800a2f2:	f7ff fdfd 	bl	8009ef0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800a2f6:	bf00      	nop
 800a2f8:	f7ff fe0a 	bl	8009f10 <LL_RCC_HSE_IsReady>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d1fa      	bne.n	800a2f8 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 192, LL_RCC_PLLP_DIV_4);
 800a302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a306:	22c0      	movs	r2, #192	@ 0xc0
 800a308:	2104      	movs	r1, #4
 800a30a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800a30e:	f7ff fe95 	bl	800a03c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800a312:	f7ff fe6f 	bl	8009ff4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800a316:	bf00      	nop
 800a318:	f7ff fe7c 	bl	800a014 <LL_RCC_PLL_IsReady>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d1fa      	bne.n	800a318 <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800a322:	bf00      	nop
 800a324:	f7ff ff2e 	bl	800a184 <LL_PWR_IsActiveFlag_VOS>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0fa      	beq.n	800a324 <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 800a32e:	2080      	movs	r0, #128	@ 0x80
 800a330:	f7ff fe24 	bl	8009f7c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800a334:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a338:	f7ff fe34 	bl	8009fa4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800a33c:	2000      	movs	r0, #0
 800a33e:	f7ff fe45 	bl	8009fcc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800a342:	2002      	movs	r0, #2
 800a344:	f7ff fdf8 	bl	8009f38 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800a348:	bf00      	nop
 800a34a:	f7ff fe09 	bl	8009f60 <LL_RCC_GetSysClkSource>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b08      	cmp	r3, #8
 800a352:	d1fa      	bne.n	800a34a <SystemClock_Config+0x76>
  {

  }
  LL_Init1msTick(48000000);
 800a354:	4803      	ldr	r0, [pc, #12]	@ (800a364 <SystemClock_Config+0x90>)
 800a356:	f001 fcd3 	bl	800bd00 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 800a35a:	4802      	ldr	r0, [pc, #8]	@ (800a364 <SystemClock_Config+0x90>)
 800a35c:	f001 fcde 	bl	800bd1c <LL_SetSystemCoreClock>
}
 800a360:	bf00      	nop
 800a362:	bd80      	pop	{r7, pc}
 800a364:	02dc6c00 	.word	0x02dc6c00

0800a368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08c      	sub	sp, #48	@ 0x30
 800a36c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800a36e:	f107 0318 	add.w	r3, r7, #24
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	605a      	str	r2, [r3, #4]
 800a378:	609a      	str	r2, [r3, #8]
 800a37a:	60da      	str	r2, [r3, #12]
 800a37c:	611a      	str	r2, [r3, #16]
 800a37e:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a380:	463b      	mov	r3, r7
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	605a      	str	r2, [r3, #4]
 800a388:	609a      	str	r2, [r3, #8]
 800a38a:	60da      	str	r2, [r3, #12]
 800a38c:	611a      	str	r2, [r3, #16]
 800a38e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800a390:	2002      	movs	r0, #2
 800a392:	f7ff fe79 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800a396:	23c0      	movs	r3, #192	@ 0xc0
 800a398:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a39a:	2302      	movs	r3, #2
 800a39c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800a3aa:	2304      	movs	r3, #4
 800a3ac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3ae:	463b      	mov	r3, r7
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	4816      	ldr	r0, [pc, #88]	@ (800a40c <MX_I2C1_Init+0xa4>)
 800a3b4:	f000 febf 	bl	800b136 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800a3b8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a3bc:	f7ff fe7c 	bl	800a0b8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800a3c0:	4813      	ldr	r0, [pc, #76]	@ (800a410 <MX_I2C1_Init+0xa8>)
 800a3c2:	f7ff fd85 	bl	8009ed0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800a3c6:	4812      	ldr	r0, [pc, #72]	@ (800a410 <MX_I2C1_Init+0xa8>)
 800a3c8:	f7ff fd5f 	bl	8009e8a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800a3cc:	4810      	ldr	r0, [pc, #64]	@ (800a410 <MX_I2C1_Init+0xa8>)
 800a3ce:	f7ff fd4c 	bl	8009e6a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 800a3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a414 <MX_I2C1_Init+0xac>)
 800a3d8:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800a3e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800a3e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a3ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800a3ee:	f107 0318 	add.w	r3, r7, #24
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4806      	ldr	r0, [pc, #24]	@ (800a410 <MX_I2C1_Init+0xa8>)
 800a3f6:	f001 f815 	bl	800b424 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	4804      	ldr	r0, [pc, #16]	@ (800a410 <MX_I2C1_Init+0xa8>)
 800a3fe:	f7ff fd54 	bl	8009eaa <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a402:	bf00      	nop
 800a404:	3730      	adds	r7, #48	@ 0x30
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	40020400 	.word	0x40020400
 800a410:	40005400 	.word	0x40005400
 800a414:	00061a80 	.word	0x00061a80

0800a418 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08c      	sub	sp, #48	@ 0x30
 800a41c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800a41e:	f107 0318 	add.w	r3, r7, #24
 800a422:	2200      	movs	r2, #0
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	605a      	str	r2, [r3, #4]
 800a428:	609a      	str	r2, [r3, #8]
 800a42a:	60da      	str	r2, [r3, #12]
 800a42c:	611a      	str	r2, [r3, #16]
 800a42e:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a430:	463b      	mov	r3, r7
 800a432:	2200      	movs	r2, #0
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	605a      	str	r2, [r3, #4]
 800a438:	609a      	str	r2, [r3, #8]
 800a43a:	60da      	str	r2, [r3, #12]
 800a43c:	611a      	str	r2, [r3, #16]
 800a43e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a440:	2004      	movs	r0, #4
 800a442:	f7ff fe21 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a446:	2001      	movs	r0, #1
 800a448:	f7ff fe1e 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800a44c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a450:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a452:	2302      	movs	r3, #2
 800a454:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a456:	2303      	movs	r3, #3
 800a458:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800a45a:	2301      	movs	r3, #1
 800a45c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a45e:	2300      	movs	r3, #0
 800a460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800a462:	2304      	movs	r3, #4
 800a464:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a466:	463b      	mov	r3, r7
 800a468:	4619      	mov	r1, r3
 800a46a:	482f      	ldr	r0, [pc, #188]	@ (800a528 <MX_I2C3_Init+0x110>)
 800a46c:	f000 fe63 	bl	800b136 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800a470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a474:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a476:	2302      	movs	r3, #2
 800a478:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a47a:	2303      	movs	r3, #3
 800a47c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800a47e:	2301      	movs	r3, #1
 800a480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a482:	2300      	movs	r3, #0
 800a484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800a486:	2304      	movs	r3, #4
 800a488:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a48a:	463b      	mov	r3, r7
 800a48c:	4619      	mov	r1, r3
 800a48e:	4827      	ldr	r0, [pc, #156]	@ (800a52c <MX_I2C3_Init+0x114>)
 800a490:	f000 fe51 	bl	800b136 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800a494:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a498:	f7ff fe0e 	bl	800a0b8 <LL_APB1_GRP1_EnableClock>

  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a49c:	f7ff fc5c 	bl	8009d58 <__NVIC_GetPriorityGrouping>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff fcac 	bl	8009e04 <NVIC_EncodePriority>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	2048      	movs	r0, #72	@ 0x48
 800a4b2:	f7ff fc7d 	bl	8009db0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 800a4b6:	2048      	movs	r0, #72	@ 0x48
 800a4b8:	f7ff fc5c 	bl	8009d74 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a4bc:	f7ff fc4c 	bl	8009d58 <__NVIC_GetPriorityGrouping>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7ff fc9c 	bl	8009e04 <NVIC_EncodePriority>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	2049      	movs	r0, #73	@ 0x49
 800a4d2:	f7ff fc6d 	bl	8009db0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 800a4d6:	2049      	movs	r0, #73	@ 0x49
 800a4d8:	f7ff fc4c 	bl	8009d74 <__NVIC_EnableIRQ>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 800a4dc:	4814      	ldr	r0, [pc, #80]	@ (800a530 <MX_I2C3_Init+0x118>)
 800a4de:	f7ff fcf7 	bl	8009ed0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 800a4e2:	4813      	ldr	r0, [pc, #76]	@ (800a530 <MX_I2C3_Init+0x118>)
 800a4e4:	f7ff fcd1 	bl	8009e8a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 800a4e8:	4811      	ldr	r0, [pc, #68]	@ (800a530 <MX_I2C3_Init+0x118>)
 800a4ea:	f7ff fcbe 	bl	8009e6a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 800a4f2:	4b10      	ldr	r3, [pc, #64]	@ (800a534 <MX_I2C3_Init+0x11c>)
 800a4f4:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800a4fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a502:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800a504:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 800a50a:	f107 0318 	add.w	r3, r7, #24
 800a50e:	4619      	mov	r1, r3
 800a510:	4807      	ldr	r0, [pc, #28]	@ (800a530 <MX_I2C3_Init+0x118>)
 800a512:	f000 ff87 	bl	800b424 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 800a516:	2100      	movs	r1, #0
 800a518:	4805      	ldr	r0, [pc, #20]	@ (800a530 <MX_I2C3_Init+0x118>)
 800a51a:	f7ff fcc6 	bl	8009eaa <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800a51e:	bf00      	nop
 800a520:	3730      	adds	r7, #48	@ 0x30
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	40020800 	.word	0x40020800
 800a52c:	40020000 	.word	0x40020000
 800a530:	40005c00 	.word	0x40005c00
 800a534:	00061a80 	.word	0x00061a80

0800a538 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08e      	sub	sp, #56	@ 0x38
 800a53c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a53e:	f107 031c 	add.w	r3, r7, #28
 800a542:	2200      	movs	r2, #0
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	605a      	str	r2, [r3, #4]
 800a548:	609a      	str	r2, [r3, #8]
 800a54a:	60da      	str	r2, [r3, #12]
 800a54c:	611a      	str	r2, [r3, #16]
 800a54e:	615a      	str	r2, [r3, #20]
 800a550:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a552:	1d3b      	adds	r3, r7, #4
 800a554:	2200      	movs	r2, #0
 800a556:	601a      	str	r2, [r3, #0]
 800a558:	605a      	str	r2, [r3, #4]
 800a55a:	609a      	str	r2, [r3, #8]
 800a55c:	60da      	str	r2, [r3, #12]
 800a55e:	611a      	str	r2, [r3, #16]
 800a560:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800a562:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a566:	f7ff fda7 	bl	800a0b8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a56a:	2004      	movs	r0, #4
 800a56c:	f7ff fd8c 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800a570:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a574:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a576:	2302      	movs	r3, #2
 800a578:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a57a:	2303      	movs	r3, #3
 800a57c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a582:	2300      	movs	r3, #0
 800a584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a586:	2308      	movs	r3, #8
 800a588:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a58a:	1d3b      	adds	r3, r7, #4
 800a58c:	4619      	mov	r1, r3
 800a58e:	4819      	ldr	r0, [pc, #100]	@ (800a5f4 <MX_UART4_Init+0xbc>)
 800a590:	f000 fdd1 	bl	800b136 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a594:	f7ff fbe0 	bl	8009d58 <__NVIC_GetPriorityGrouping>
 800a598:	4603      	mov	r3, r0
 800a59a:	2200      	movs	r2, #0
 800a59c:	2100      	movs	r1, #0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fc30 	bl	8009e04 <NVIC_EncodePriority>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	2034      	movs	r0, #52	@ 0x34
 800a5aa:	f7ff fc01 	bl	8009db0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800a5ae:	2034      	movs	r0, #52	@ 0x34
 800a5b0:	f7ff fbe0 	bl	8009d74 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a5b4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a5b8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800a5d2:	f107 031c 	add.w	r3, r7, #28
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4807      	ldr	r0, [pc, #28]	@ (800a5f8 <MX_UART4_Init+0xc0>)
 800a5da:	f001 faf7 	bl	800bbcc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800a5de:	4806      	ldr	r0, [pc, #24]	@ (800a5f8 <MX_UART4_Init+0xc0>)
 800a5e0:	f7ff fdf4 	bl	800a1cc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800a5e4:	4804      	ldr	r0, [pc, #16]	@ (800a5f8 <MX_UART4_Init+0xc0>)
 800a5e6:	f7ff fde1 	bl	800a1ac <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a5ea:	bf00      	nop
 800a5ec:	3738      	adds	r7, #56	@ 0x38
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	40020800 	.word	0x40020800
 800a5f8:	40004c00 	.word	0x40004c00

0800a5fc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08e      	sub	sp, #56	@ 0x38
 800a600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a602:	f107 031c 	add.w	r3, r7, #28
 800a606:	2200      	movs	r2, #0
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	605a      	str	r2, [r3, #4]
 800a60c:	609a      	str	r2, [r3, #8]
 800a60e:	60da      	str	r2, [r3, #12]
 800a610:	611a      	str	r2, [r3, #16]
 800a612:	615a      	str	r2, [r3, #20]
 800a614:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a616:	1d3b      	adds	r3, r7, #4
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	605a      	str	r2, [r3, #4]
 800a61e:	609a      	str	r2, [r3, #8]
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	611a      	str	r2, [r3, #16]
 800a624:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800a626:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a62a:	f7ff fd45 	bl	800a0b8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a62e:	2004      	movs	r0, #4
 800a630:	f7ff fd2a 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800a634:	2008      	movs	r0, #8
 800a636:	f7ff fd27 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800a63a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a63e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a640:	2302      	movs	r3, #2
 800a642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a644:	2303      	movs	r3, #3
 800a646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a648:	2300      	movs	r3, #0
 800a64a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a64c:	2300      	movs	r3, #0
 800a64e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a650:	2308      	movs	r3, #8
 800a652:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a654:	1d3b      	adds	r3, r7, #4
 800a656:	4619      	mov	r1, r3
 800a658:	4821      	ldr	r0, [pc, #132]	@ (800a6e0 <MX_UART5_Init+0xe4>)
 800a65a:	f000 fd6c 	bl	800b136 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800a65e:	2304      	movs	r3, #4
 800a660:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a662:	2302      	movs	r3, #2
 800a664:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a666:	2303      	movs	r3, #3
 800a668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a66e:	2300      	movs	r3, #0
 800a670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a672:	2308      	movs	r3, #8
 800a674:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a676:	1d3b      	adds	r3, r7, #4
 800a678:	4619      	mov	r1, r3
 800a67a:	481a      	ldr	r0, [pc, #104]	@ (800a6e4 <MX_UART5_Init+0xe8>)
 800a67c:	f000 fd5b 	bl	800b136 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a680:	f7ff fb6a 	bl	8009d58 <__NVIC_GetPriorityGrouping>
 800a684:	4603      	mov	r3, r0
 800a686:	2200      	movs	r2, #0
 800a688:	2100      	movs	r1, #0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7ff fbba 	bl	8009e04 <NVIC_EncodePriority>
 800a690:	4603      	mov	r3, r0
 800a692:	4619      	mov	r1, r3
 800a694:	2035      	movs	r0, #53	@ 0x35
 800a696:	f7ff fb8b 	bl	8009db0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800a69a:	2035      	movs	r0, #53	@ 0x35
 800a69c:	f7ff fb6a 	bl	8009d74 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a6a0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a6a4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a6b2:	230c      	movs	r3, #12
 800a6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800a6be:	f107 031c 	add.w	r3, r7, #28
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4808      	ldr	r0, [pc, #32]	@ (800a6e8 <MX_UART5_Init+0xec>)
 800a6c6:	f001 fa81 	bl	800bbcc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800a6ca:	4807      	ldr	r0, [pc, #28]	@ (800a6e8 <MX_UART5_Init+0xec>)
 800a6cc:	f7ff fd7e 	bl	800a1cc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800a6d0:	4805      	ldr	r0, [pc, #20]	@ (800a6e8 <MX_UART5_Init+0xec>)
 800a6d2:	f7ff fd6b 	bl	800a1ac <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800a6d6:	bf00      	nop
 800a6d8:	3738      	adds	r7, #56	@ 0x38
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	40020800 	.word	0x40020800
 800a6e4:	40020c00 	.word	0x40020c00
 800a6e8:	40005000 	.word	0x40005000

0800a6ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08e      	sub	sp, #56	@ 0x38
 800a6f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a6f2:	f107 031c 	add.w	r3, r7, #28
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
 800a6fa:	605a      	str	r2, [r3, #4]
 800a6fc:	609a      	str	r2, [r3, #8]
 800a6fe:	60da      	str	r2, [r3, #12]
 800a700:	611a      	str	r2, [r3, #16]
 800a702:	615a      	str	r2, [r3, #20]
 800a704:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a706:	1d3b      	adds	r3, r7, #4
 800a708:	2200      	movs	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]
 800a70c:	605a      	str	r2, [r3, #4]
 800a70e:	609a      	str	r2, [r3, #8]
 800a710:	60da      	str	r2, [r3, #12]
 800a712:	611a      	str	r2, [r3, #16]
 800a714:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800a716:	2010      	movs	r0, #16
 800a718:	f7ff fce6 	bl	800a0e8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a71c:	2001      	movs	r0, #1
 800a71e:	f7ff fcb3 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800a722:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a726:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a728:	2302      	movs	r3, #2
 800a72a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a72c:	2303      	movs	r3, #3
 800a72e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a730:	2300      	movs	r3, #0
 800a732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a734:	2300      	movs	r3, #0
 800a736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a738:	2307      	movs	r3, #7
 800a73a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a73c:	1d3b      	adds	r3, r7, #4
 800a73e:	4619      	mov	r1, r3
 800a740:	4818      	ldr	r0, [pc, #96]	@ (800a7a4 <MX_USART1_UART_Init+0xb8>)
 800a742:	f000 fcf8 	bl	800b136 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a746:	f7ff fb07 	bl	8009d58 <__NVIC_GetPriorityGrouping>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2200      	movs	r2, #0
 800a74e:	2100      	movs	r1, #0
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff fb57 	bl	8009e04 <NVIC_EncodePriority>
 800a756:	4603      	mov	r3, r0
 800a758:	4619      	mov	r1, r3
 800a75a:	2025      	movs	r0, #37	@ 0x25
 800a75c:	f7ff fb28 	bl	8009db0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800a760:	2025      	movs	r0, #37	@ 0x25
 800a762:	f7ff fb07 	bl	8009d74 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 800a766:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 800a76a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a76c:	2300      	movs	r3, #0
 800a76e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a770:	2300      	movs	r3, #0
 800a772:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a774:	2300      	movs	r3, #0
 800a776:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a778:	230c      	movs	r3, #12
 800a77a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a77c:	2300      	movs	r3, #0
 800a77e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a780:	2300      	movs	r3, #0
 800a782:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800a784:	f107 031c 	add.w	r3, r7, #28
 800a788:	4619      	mov	r1, r3
 800a78a:	4807      	ldr	r0, [pc, #28]	@ (800a7a8 <MX_USART1_UART_Init+0xbc>)
 800a78c:	f001 fa1e 	bl	800bbcc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800a790:	4805      	ldr	r0, [pc, #20]	@ (800a7a8 <MX_USART1_UART_Init+0xbc>)
 800a792:	f7ff fd1b 	bl	800a1cc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800a796:	4804      	ldr	r0, [pc, #16]	@ (800a7a8 <MX_USART1_UART_Init+0xbc>)
 800a798:	f7ff fd08 	bl	800a1ac <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a79c:	bf00      	nop
 800a79e:	3738      	adds	r7, #56	@ 0x38
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	40020000 	.word	0x40020000
 800a7a8:	40011000 	.word	0x40011000

0800a7ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b08e      	sub	sp, #56	@ 0x38
 800a7b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a7b2:	f107 031c 	add.w	r3, r7, #28
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	601a      	str	r2, [r3, #0]
 800a7ba:	605a      	str	r2, [r3, #4]
 800a7bc:	609a      	str	r2, [r3, #8]
 800a7be:	60da      	str	r2, [r3, #12]
 800a7c0:	611a      	str	r2, [r3, #16]
 800a7c2:	615a      	str	r2, [r3, #20]
 800a7c4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7c6:	1d3b      	adds	r3, r7, #4
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	605a      	str	r2, [r3, #4]
 800a7ce:	609a      	str	r2, [r3, #8]
 800a7d0:	60da      	str	r2, [r3, #12]
 800a7d2:	611a      	str	r2, [r3, #16]
 800a7d4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800a7d6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a7da:	f7ff fc6d 	bl	800a0b8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a7de:	2001      	movs	r0, #1
 800a7e0:	f7ff fc52 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800a7e4:	230c      	movs	r3, #12
 800a7e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a7f8:	2307      	movs	r3, #7
 800a7fa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7fc:	1d3b      	adds	r3, r7, #4
 800a7fe:	4619      	mov	r1, r3
 800a800:	4818      	ldr	r0, [pc, #96]	@ (800a864 <MX_USART2_UART_Init+0xb8>)
 800a802:	f000 fc98 	bl	800b136 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a806:	f7ff faa7 	bl	8009d58 <__NVIC_GetPriorityGrouping>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2200      	movs	r2, #0
 800a80e:	2100      	movs	r1, #0
 800a810:	4618      	mov	r0, r3
 800a812:	f7ff faf7 	bl	8009e04 <NVIC_EncodePriority>
 800a816:	4603      	mov	r3, r0
 800a818:	4619      	mov	r1, r3
 800a81a:	2026      	movs	r0, #38	@ 0x26
 800a81c:	f7ff fac8 	bl	8009db0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800a820:	2026      	movs	r0, #38	@ 0x26
 800a822:	f7ff faa7 	bl	8009d74 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a826:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a82a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a82c:	2300      	movs	r3, #0
 800a82e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a830:	2300      	movs	r3, #0
 800a832:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a834:	2300      	movs	r3, #0
 800a836:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a838:	230c      	movs	r3, #12
 800a83a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a83c:	2300      	movs	r3, #0
 800a83e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a840:	2300      	movs	r3, #0
 800a842:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800a844:	f107 031c 	add.w	r3, r7, #28
 800a848:	4619      	mov	r1, r3
 800a84a:	4807      	ldr	r0, [pc, #28]	@ (800a868 <MX_USART2_UART_Init+0xbc>)
 800a84c:	f001 f9be 	bl	800bbcc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800a850:	4805      	ldr	r0, [pc, #20]	@ (800a868 <MX_USART2_UART_Init+0xbc>)
 800a852:	f7ff fcbb 	bl	800a1cc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800a856:	4804      	ldr	r0, [pc, #16]	@ (800a868 <MX_USART2_UART_Init+0xbc>)
 800a858:	f7ff fca8 	bl	800a1ac <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a85c:	bf00      	nop
 800a85e:	3738      	adds	r7, #56	@ 0x38
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	40020000 	.word	0x40020000
 800a868:	40004400 	.word	0x40004400

0800a86c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08e      	sub	sp, #56	@ 0x38
 800a870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a872:	f107 031c 	add.w	r3, r7, #28
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	605a      	str	r2, [r3, #4]
 800a87c:	609a      	str	r2, [r3, #8]
 800a87e:	60da      	str	r2, [r3, #12]
 800a880:	611a      	str	r2, [r3, #16]
 800a882:	615a      	str	r2, [r3, #20]
 800a884:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a886:	1d3b      	adds	r3, r7, #4
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	605a      	str	r2, [r3, #4]
 800a88e:	609a      	str	r2, [r3, #8]
 800a890:	60da      	str	r2, [r3, #12]
 800a892:	611a      	str	r2, [r3, #16]
 800a894:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800a896:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a89a:	f7ff fc0d 	bl	800a0b8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800a89e:	2002      	movs	r0, #2
 800a8a0:	f7ff fbf2 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800a8a4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a8a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a8ba:	2307      	movs	r3, #7
 800a8bc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8be:	1d3b      	adds	r3, r7, #4
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4819      	ldr	r0, [pc, #100]	@ (800a928 <MX_USART3_UART_Init+0xbc>)
 800a8c4:	f000 fc37 	bl	800b136 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a8c8:	f7ff fa46 	bl	8009d58 <__NVIC_GetPriorityGrouping>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff fa96 	bl	8009e04 <NVIC_EncodePriority>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	4619      	mov	r1, r3
 800a8dc:	2027      	movs	r0, #39	@ 0x27
 800a8de:	f7ff fa67 	bl	8009db0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800a8e2:	2027      	movs	r0, #39	@ 0x27
 800a8e4:	f7ff fa46 	bl	8009d74 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a8e8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a8ec:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a8fa:	230c      	movs	r3, #12
 800a8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a8fe:	2300      	movs	r3, #0
 800a900:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a902:	2300      	movs	r3, #0
 800a904:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800a906:	f107 031c 	add.w	r3, r7, #28
 800a90a:	4619      	mov	r1, r3
 800a90c:	4807      	ldr	r0, [pc, #28]	@ (800a92c <MX_USART3_UART_Init+0xc0>)
 800a90e:	f001 f95d 	bl	800bbcc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800a912:	4806      	ldr	r0, [pc, #24]	@ (800a92c <MX_USART3_UART_Init+0xc0>)
 800a914:	f7ff fc5a 	bl	800a1cc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800a918:	4804      	ldr	r0, [pc, #16]	@ (800a92c <MX_USART3_UART_Init+0xc0>)
 800a91a:	f7ff fc47 	bl	800a1ac <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a91e:	bf00      	nop
 800a920:	3738      	adds	r7, #56	@ 0x38
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	40020400 	.word	0x40020400
 800a92c:	40004800 	.word	0x40004800

0800a930 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08e      	sub	sp, #56	@ 0x38
 800a934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a936:	f107 031c 	add.w	r3, r7, #28
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	605a      	str	r2, [r3, #4]
 800a940:	609a      	str	r2, [r3, #8]
 800a942:	60da      	str	r2, [r3, #12]
 800a944:	611a      	str	r2, [r3, #16]
 800a946:	615a      	str	r2, [r3, #20]
 800a948:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a94a:	1d3b      	adds	r3, r7, #4
 800a94c:	2200      	movs	r2, #0
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	605a      	str	r2, [r3, #4]
 800a952:	609a      	str	r2, [r3, #8]
 800a954:	60da      	str	r2, [r3, #12]
 800a956:	611a      	str	r2, [r3, #16]
 800a958:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800a95a:	2020      	movs	r0, #32
 800a95c:	f7ff fbc4 	bl	800a0e8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a960:	2004      	movs	r0, #4
 800a962:	f7ff fb91 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800a966:	23c0      	movs	r3, #192	@ 0xc0
 800a968:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a96a:	2302      	movs	r3, #2
 800a96c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a96e:	2303      	movs	r3, #3
 800a970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a972:	2300      	movs	r3, #0
 800a974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a976:	2300      	movs	r3, #0
 800a978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a97a:	2308      	movs	r3, #8
 800a97c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a97e:	1d3b      	adds	r3, r7, #4
 800a980:	4619      	mov	r1, r3
 800a982:	4819      	ldr	r0, [pc, #100]	@ (800a9e8 <MX_USART6_UART_Init+0xb8>)
 800a984:	f000 fbd7 	bl	800b136 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a988:	f7ff f9e6 	bl	8009d58 <__NVIC_GetPriorityGrouping>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2200      	movs	r2, #0
 800a990:	2100      	movs	r1, #0
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff fa36 	bl	8009e04 <NVIC_EncodePriority>
 800a998:	4603      	mov	r3, r0
 800a99a:	4619      	mov	r1, r3
 800a99c:	2047      	movs	r0, #71	@ 0x47
 800a99e:	f7ff fa07 	bl	8009db0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800a9a2:	2047      	movs	r0, #71	@ 0x47
 800a9a4:	f7ff f9e6 	bl	8009d74 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a9a8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a9ac:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a9ba:	230c      	movs	r3, #12
 800a9bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800a9c6:	f107 031c 	add.w	r3, r7, #28
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	4807      	ldr	r0, [pc, #28]	@ (800a9ec <MX_USART6_UART_Init+0xbc>)
 800a9ce:	f001 f8fd 	bl	800bbcc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800a9d2:	4806      	ldr	r0, [pc, #24]	@ (800a9ec <MX_USART6_UART_Init+0xbc>)
 800a9d4:	f7ff fbfa 	bl	800a1cc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800a9d8:	4804      	ldr	r0, [pc, #16]	@ (800a9ec <MX_USART6_UART_Init+0xbc>)
 800a9da:	f7ff fbe7 	bl	800a1ac <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800a9de:	bf00      	nop
 800a9e0:	3738      	adds	r7, #56	@ 0x38
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	40020800 	.word	0x40020800
 800a9ec:	40011400 	.word	0x40011400

0800a9f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	605a      	str	r2, [r3, #4]
 800a9fe:	609a      	str	r2, [r3, #8]
 800aa00:	60da      	str	r2, [r3, #12]
 800aa02:	611a      	str	r2, [r3, #16]
 800aa04:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800aa06:	2004      	movs	r0, #4
 800aa08:	f7ff fb3e 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800aa0c:	2080      	movs	r0, #128	@ 0x80
 800aa0e:	f7ff fb3b 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800aa12:	2001      	movs	r0, #1
 800aa14:	f7ff fb38 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800aa18:	2002      	movs	r0, #2
 800aa1a:	f7ff fb35 	bl	800a088 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800aa1e:	2008      	movs	r0, #8
 800aa20:	f7ff fb32 	bl	800a088 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, WD_DONE_Pin|LORA_IO0_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin);
 800aa24:	f641 0112 	movw	r1, #6162	@ 0x1812
 800aa28:	4826      	ldr	r0, [pc, #152]	@ (800aac4 <MX_GPIO_Init+0xd4>)
 800aa2a:	f7ff fbe5 	bl	800a1f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_busy_Pin|ENABLE_MUX_Pin);
 800aa2e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800aa32:	4825      	ldr	r0, [pc, #148]	@ (800aac8 <MX_GPIO_Init+0xd8>)
 800aa34:	f7ff fbe0 	bl	800a1f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 800aa38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aa3c:	4823      	ldr	r0, [pc, #140]	@ (800aacc <MX_GPIO_Init+0xdc>)
 800aa3e:	f7ff fbdb 	bl	800a1f8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = PMU_INT_MCU_Pin|PDU_INT_MCU_Pin|IOU_INT_MCU_Pin|EJECT_Pin
 800aa42:	f24e 030c 	movw	r3, #57356	@ 0xe00c
 800aa46:	603b      	str	r3, [r7, #0]
                          |CAM_INT_MCU_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa50:	463b      	mov	r3, r7
 800aa52:	4619      	mov	r1, r3
 800aa54:	481c      	ldr	r0, [pc, #112]	@ (800aac8 <MX_GPIO_Init+0xd8>)
 800aa56:	f000 fb6e 	bl	800b136 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin|LORA_IO0_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin;
 800aa5a:	f641 0312 	movw	r3, #6162	@ 0x1812
 800aa5e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800aa60:	2301      	movs	r3, #1
 800aa62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800aa64:	2300      	movs	r3, #0
 800aa66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa70:	463b      	mov	r3, r7
 800aa72:	4619      	mov	r1, r3
 800aa74:	4813      	ldr	r0, [pc, #76]	@ (800aac4 <MX_GPIO_Init+0xd4>)
 800aa76:	f000 fb5e 	bl	800b136 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_busy_Pin|ENABLE_MUX_Pin;
 800aa7a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800aa7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800aa80:	2301      	movs	r3, #1
 800aa82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800aa84:	2300      	movs	r3, #0
 800aa86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa90:	463b      	mov	r3, r7
 800aa92:	4619      	mov	r1, r3
 800aa94:	480c      	ldr	r0, [pc, #48]	@ (800aac8 <MX_GPIO_Init+0xd8>)
 800aa96:	f000 fb4e 	bl	800b136 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_RF_Pin;
 800aa9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aaac:	2300      	movs	r3, #0
 800aaae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENABLE_RF_GPIO_Port, &GPIO_InitStruct);
 800aab0:	463b      	mov	r3, r7
 800aab2:	4619      	mov	r1, r3
 800aab4:	4805      	ldr	r0, [pc, #20]	@ (800aacc <MX_GPIO_Init+0xdc>)
 800aab6:	f000 fb3e 	bl	800b136 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800aaba:	bf00      	nop
 800aabc:	3718      	adds	r7, #24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	40020000 	.word	0x40020000
 800aac8:	40020800 	.word	0x40020800
 800aacc:	40020400 	.word	0x40020400

0800aad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aad0:	b480      	push	{r7}
 800aad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800aad4:	bf00      	nop
 800aad6:	e7fd      	b.n	800aad4 <NMI_Handler+0x4>

0800aad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aad8:	b480      	push	{r7}
 800aada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800aadc:	bf00      	nop
 800aade:	e7fd      	b.n	800aadc <HardFault_Handler+0x4>

0800aae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aae0:	b480      	push	{r7}
 800aae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800aae4:	bf00      	nop
 800aae6:	e7fd      	b.n	800aae4 <MemManage_Handler+0x4>

0800aae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aae8:	b480      	push	{r7}
 800aaea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800aaec:	bf00      	nop
 800aaee:	e7fd      	b.n	800aaec <BusFault_Handler+0x4>

0800aaf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800aaf4:	bf00      	nop
 800aaf6:	e7fd      	b.n	800aaf4 <UsageFault_Handler+0x4>

0800aaf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800aafc:	bf00      	nop
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ab06:	b480      	push	{r7}
 800ab08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ab0a:	bf00      	nop
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ab18:	bf00      	nop
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    g_systick_count++;
 800ab28:	4b04      	ldr	r3, [pc, #16]	@ (800ab3c <SysTick_Handler+0x18>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	4a03      	ldr	r2, [pc, #12]	@ (800ab3c <SysTick_Handler+0x18>)
 800ab30:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 800ab32:	f001 f997 	bl	800be64 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ab36:	bf00      	nop
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20008070 	.word	0x20008070

0800ab40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (USART1);
 800ab44:	4802      	ldr	r0, [pc, #8]	@ (800ab50 <USART1_IRQHandler+0x10>)
 800ab46:	f7f7 fab3 	bl	80020b0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ab4a:	bf00      	nop
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	40011000 	.word	0x40011000

0800ab54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (USART2);
 800ab58:	4802      	ldr	r0, [pc, #8]	@ (800ab64 <USART2_IRQHandler+0x10>)
 800ab5a:	f7f7 faa9 	bl	80020b0 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ab5e:	bf00      	nop
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	40004400 	.word	0x40004400

0800ab68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (USART3);
 800ab6c:	4802      	ldr	r0, [pc, #8]	@ (800ab78 <USART3_IRQHandler+0x10>)
 800ab6e:	f7f7 fa9f 	bl	80020b0 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800ab72:	bf00      	nop
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	40004800 	.word	0x40004800

0800ab7c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Uart_isr (UART4);
 800ab80:	4802      	ldr	r0, [pc, #8]	@ (800ab8c <UART4_IRQHandler+0x10>)
 800ab82:	f7f7 fa95 	bl	80020b0 <Uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ab86:	bf00      	nop
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	40004c00 	.word	0x40004c00

0800ab90 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr (UART5);
 800ab94:	4802      	ldr	r0, [pc, #8]	@ (800aba0 <UART5_IRQHandler+0x10>)
 800ab96:	f7f7 fa8b 	bl	80020b0 <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800ab9a:	bf00      	nop
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	40005000 	.word	0x40005000

0800aba4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr (USART6);
 800aba8:	4802      	ldr	r0, [pc, #8]	@ (800abb4 <USART6_IRQHandler+0x10>)
 800abaa:	f7f7 fa81 	bl	80020b0 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800abae:	bf00      	nop
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	40011400 	.word	0x40011400

0800abb8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */
	I2C3_IRQHandler();
 800abbc:	f7fe ff96 	bl	8009aec <I2C3_IRQHandler>
  /* USER CODE END I2C3_EV_IRQn 0 */

  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800abc0:	bf00      	nop
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_ER_IRQn 0 */

  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800abc8:	bf00      	nop
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800abd2:	b480      	push	{r7}
 800abd4:	af00      	add	r7, sp, #0
  return 1;
 800abd6:	2301      	movs	r3, #1
}
 800abd8:	4618      	mov	r0, r3
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <_kill>:

int _kill(int pid, int sig)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b082      	sub	sp, #8
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800abec:	f005 f9d2 	bl	800ff94 <__errno>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2216      	movs	r2, #22
 800abf4:	601a      	str	r2, [r3, #0]
  return -1;
 800abf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <_exit>:

void _exit (int status)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ac0a:	f04f 31ff 	mov.w	r1, #4294967295
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff ffe7 	bl	800abe2 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ac14:	bf00      	nop
 800ac16:	e7fd      	b.n	800ac14 <_exit+0x12>

0800ac18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b086      	sub	sp, #24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac24:	2300      	movs	r3, #0
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	e00a      	b.n	800ac40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ac2a:	f3af 8000 	nop.w
 800ac2e:	4601      	mov	r1, r0
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	60ba      	str	r2, [r7, #8]
 800ac36:	b2ca      	uxtb	r2, r1
 800ac38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	617b      	str	r3, [r7, #20]
 800ac40:	697a      	ldr	r2, [r7, #20]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	dbf0      	blt.n	800ac2a <_read+0x12>
  }

  return len;
 800ac48:	687b      	ldr	r3, [r7, #4]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b086      	sub	sp, #24
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	60b9      	str	r1, [r7, #8]
 800ac5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]
 800ac62:	e009      	b.n	800ac78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	60ba      	str	r2, [r7, #8]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	3301      	adds	r3, #1
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	dbf1      	blt.n	800ac64 <_write+0x12>
  }
  return len;
 800ac80:	687b      	ldr	r3, [r7, #4]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <_close>:

int _close(int file)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b083      	sub	sp, #12
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800ac92:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	370c      	adds	r7, #12
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800acb2:	605a      	str	r2, [r3, #4]
  return 0;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <_isatty>:

int _isatty(int file)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b083      	sub	sp, #12
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800acca:	2301      	movs	r3, #1
}
 800accc:	4618      	mov	r0, r3
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
	...

0800acf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800acfc:	4a14      	ldr	r2, [pc, #80]	@ (800ad50 <_sbrk+0x5c>)
 800acfe:	4b15      	ldr	r3, [pc, #84]	@ (800ad54 <_sbrk+0x60>)
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ad08:	4b13      	ldr	r3, [pc, #76]	@ (800ad58 <_sbrk+0x64>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d102      	bne.n	800ad16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ad10:	4b11      	ldr	r3, [pc, #68]	@ (800ad58 <_sbrk+0x64>)
 800ad12:	4a12      	ldr	r2, [pc, #72]	@ (800ad5c <_sbrk+0x68>)
 800ad14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ad16:	4b10      	ldr	r3, [pc, #64]	@ (800ad58 <_sbrk+0x64>)
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d207      	bcs.n	800ad34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ad24:	f005 f936 	bl	800ff94 <__errno>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	220c      	movs	r2, #12
 800ad2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ad2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad32:	e009      	b.n	800ad48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ad34:	4b08      	ldr	r3, [pc, #32]	@ (800ad58 <_sbrk+0x64>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ad3a:	4b07      	ldr	r3, [pc, #28]	@ (800ad58 <_sbrk+0x64>)
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4413      	add	r3, r2
 800ad42:	4a05      	ldr	r2, [pc, #20]	@ (800ad58 <_sbrk+0x64>)
 800ad44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ad46:	68fb      	ldr	r3, [r7, #12]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	20020000 	.word	0x20020000
 800ad54:	00000400 	.word	0x00000400
 800ad58:	20008074 	.word	0x20008074
 800ad5c:	200083e0 	.word	0x200083e0

0800ad60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ad64:	4b06      	ldr	r3, [pc, #24]	@ (800ad80 <SystemInit+0x20>)
 800ad66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad6a:	4a05      	ldr	r2, [pc, #20]	@ (800ad80 <SystemInit+0x20>)
 800ad6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ad70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ad74:	bf00      	nop
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	e000ed00 	.word	0xe000ed00

0800ad84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ad84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800adbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800ad88:	f7ff ffea 	bl	800ad60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ad8c:	480c      	ldr	r0, [pc, #48]	@ (800adc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ad8e:	490d      	ldr	r1, [pc, #52]	@ (800adc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ad90:	4a0d      	ldr	r2, [pc, #52]	@ (800adc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ad92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ad94:	e002      	b.n	800ad9c <LoopCopyDataInit>

0800ad96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ad96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ad98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ad9a:	3304      	adds	r3, #4

0800ad9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ad9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ad9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ada0:	d3f9      	bcc.n	800ad96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ada2:	4a0a      	ldr	r2, [pc, #40]	@ (800adcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ada4:	4c0a      	ldr	r4, [pc, #40]	@ (800add0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ada6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ada8:	e001      	b.n	800adae <LoopFillZerobss>

0800adaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800adaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800adac:	3204      	adds	r2, #4

0800adae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800adae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800adb0:	d3fb      	bcc.n	800adaa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800adb2:	f005 f8f5 	bl	800ffa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800adb6:	f7ff fa2f 	bl	800a218 <main>
  bx  lr    
 800adba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800adbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800adc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800adc4:	20000638 	.word	0x20000638
  ldr r2, =_sidata
 800adc8:	08016810 	.word	0x08016810
  ldr r2, =_sbss
 800adcc:	20000638 	.word	0x20000638
  ldr r4, =_ebss
 800add0:	200083dc 	.word	0x200083dc

0800add4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800add4:	e7fe      	b.n	800add4 <ADC_IRQHandler>

0800add6 <LL_GPIO_SetOutputPin>:
{
 800add6:	b480      	push	{r7}
 800add8:	b083      	sub	sp, #12
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	619a      	str	r2, [r3, #24]
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <LL_GPIO_ResetOutputPin>:
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	041a      	lsls	r2, r3, #16
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	619a      	str	r2, [r3, #24]
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <WDT_init>:




void WDT_init(void)
{
 800ae10:	b480      	push	{r7}
 800ae12:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 800ae14:	4b03      	ldr	r3, [pc, #12]	@ (800ae24 <WDT_init+0x14>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]

}
 800ae1a:	bf00      	nop
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	20008078 	.word	0x20008078

0800ae28 <WDT_create_task>:

void WDT_create_task(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800ae2c:	4902      	ldr	r1, [pc, #8]	@ (800ae38 <WDT_create_task+0x10>)
 800ae2e:	4803      	ldr	r0, [pc, #12]	@ (800ae3c <WDT_create_task+0x14>)
 800ae30:	f000 ffda 	bl	800bde8 <SCH_TASK_CreateTask>

}
 800ae34:	bf00      	nop
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20000464 	.word	0x20000464
 800ae3c:	20000460 	.word	0x20000460

0800ae40 <status_wdt_update>:

void	status_wdt_update(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	af00      	add	r7, sp, #0

		if (WDT_Current){
 800ae44:	4b14      	ldr	r3, [pc, #80]	@ (800ae98 <status_wdt_update+0x58>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d012      	beq.n	800ae72 <status_wdt_update+0x32>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800ae4c:	2001      	movs	r0, #1
 800ae4e:	f000 ffb5 	bl	800bdbc <SCH_TIM_HasCompleted>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d01d      	beq.n	800ae94 <status_wdt_update+0x54>
			{
				WDT_Current = 0;
 800ae58:	4b0f      	ldr	r3, [pc, #60]	@ (800ae98 <status_wdt_update+0x58>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	701a      	strb	r2, [r3, #0]
				LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800ae5e:	2102      	movs	r1, #2
 800ae60:	480e      	ldr	r0, [pc, #56]	@ (800ae9c <status_wdt_update+0x5c>)
 800ae62:	f7ff ffc6 	bl	800adf2 <LL_GPIO_ResetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 800ae66:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	f000 ff90 	bl	800bd90 <SCH_TIM_Start>
				WDT_Current = 1;
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
			}
	}
}
 800ae70:	e010      	b.n	800ae94 <status_wdt_update+0x54>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800ae72:	2001      	movs	r0, #1
 800ae74:	f000 ffa2 	bl	800bdbc <SCH_TIM_HasCompleted>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00a      	beq.n	800ae94 <status_wdt_update+0x54>
				WDT_Current = 1;
 800ae7e:	4b06      	ldr	r3, [pc, #24]	@ (800ae98 <status_wdt_update+0x58>)
 800ae80:	2201      	movs	r2, #1
 800ae82:	701a      	strb	r2, [r3, #0]
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800ae84:	2102      	movs	r1, #2
 800ae86:	4805      	ldr	r0, [pc, #20]	@ (800ae9c <status_wdt_update+0x5c>)
 800ae88:	f7ff ffa5 	bl	800add6 <LL_GPIO_SetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800ae8c:	21c8      	movs	r1, #200	@ 0xc8
 800ae8e:	2001      	movs	r0, #1
 800ae90:	f000 ff7e 	bl	800bd90 <SCH_TIM_Start>
}
 800ae94:	bf00      	nop
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20008078 	.word	0x20008078
 800ae9c:	40020000 	.word	0x40020000

0800aea0 <LL_GPIO_SetPinMode>:
{
 800aea0:	b480      	push	{r7}
 800aea2:	b08b      	sub	sp, #44	@ 0x2c
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	fa93 f3a3 	rbit	r3, r3
 800aeba:	613b      	str	r3, [r7, #16]
  return result;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800aec6:	2320      	movs	r3, #32
 800aec8:	e003      	b.n	800aed2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	fab3 f383 	clz	r3, r3
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	2103      	movs	r1, #3
 800aed6:	fa01 f303 	lsl.w	r3, r1, r3
 800aeda:	43db      	mvns	r3, r3
 800aedc:	401a      	ands	r2, r3
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	fa93 f3a3 	rbit	r3, r3
 800aee8:	61fb      	str	r3, [r7, #28]
  return result;
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800aeee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800aef4:	2320      	movs	r3, #32
 800aef6:	e003      	b.n	800af00 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800aef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefa:	fab3 f383 	clz	r3, r3
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	fa01 f303 	lsl.w	r3, r1, r3
 800af08:	431a      	orrs	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	601a      	str	r2, [r3, #0]
}
 800af0e:	bf00      	nop
 800af10:	372c      	adds	r7, #44	@ 0x2c
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <LL_GPIO_SetPinOutputType>:
{
 800af1a:	b480      	push	{r7}
 800af1c:	b085      	sub	sp, #20
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	60b9      	str	r1, [r7, #8]
 800af24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	685a      	ldr	r2, [r3, #4]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	43db      	mvns	r3, r3
 800af2e:	401a      	ands	r2, r3
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	fb01 f303 	mul.w	r3, r1, r3
 800af38:	431a      	orrs	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	605a      	str	r2, [r3, #4]
}
 800af3e:	bf00      	nop
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <LL_GPIO_SetPinSpeed>:
{
 800af4a:	b480      	push	{r7}
 800af4c:	b08b      	sub	sp, #44	@ 0x2c
 800af4e:	af00      	add	r7, sp, #0
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	689a      	ldr	r2, [r3, #8]
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	fa93 f3a3 	rbit	r3, r3
 800af64:	613b      	str	r3, [r7, #16]
  return result;
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800af70:	2320      	movs	r3, #32
 800af72:	e003      	b.n	800af7c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	fab3 f383 	clz	r3, r3
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	005b      	lsls	r3, r3, #1
 800af7e:	2103      	movs	r1, #3
 800af80:	fa01 f303 	lsl.w	r3, r1, r3
 800af84:	43db      	mvns	r3, r3
 800af86:	401a      	ands	r2, r3
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	fa93 f3a3 	rbit	r3, r3
 800af92:	61fb      	str	r3, [r7, #28]
  return result;
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800af98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d101      	bne.n	800afa2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800af9e:	2320      	movs	r3, #32
 800afa0:	e003      	b.n	800afaa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800afa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa4:	fab3 f383 	clz	r3, r3
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	fa01 f303 	lsl.w	r3, r1, r3
 800afb2:	431a      	orrs	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	609a      	str	r2, [r3, #8]
}
 800afb8:	bf00      	nop
 800afba:	372c      	adds	r7, #44	@ 0x2c
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <LL_GPIO_SetPinPull>:
{
 800afc4:	b480      	push	{r7}
 800afc6:	b08b      	sub	sp, #44	@ 0x2c
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	fa93 f3a3 	rbit	r3, r3
 800afde:	613b      	str	r3, [r7, #16]
  return result;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800afea:	2320      	movs	r3, #32
 800afec:	e003      	b.n	800aff6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	fab3 f383 	clz	r3, r3
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	2103      	movs	r1, #3
 800affa:	fa01 f303 	lsl.w	r3, r1, r3
 800affe:	43db      	mvns	r3, r3
 800b000:	401a      	ands	r2, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b006:	6a3b      	ldr	r3, [r7, #32]
 800b008:	fa93 f3a3 	rbit	r3, r3
 800b00c:	61fb      	str	r3, [r7, #28]
  return result;
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b014:	2b00      	cmp	r3, #0
 800b016:	d101      	bne.n	800b01c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b018:	2320      	movs	r3, #32
 800b01a:	e003      	b.n	800b024 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01e:	fab3 f383 	clz	r3, r3
 800b022:	b2db      	uxtb	r3, r3
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	fa01 f303 	lsl.w	r3, r1, r3
 800b02c:	431a      	orrs	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	60da      	str	r2, [r3, #12]
}
 800b032:	bf00      	nop
 800b034:	372c      	adds	r7, #44	@ 0x2c
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <LL_GPIO_SetAFPin_0_7>:
{
 800b03e:	b480      	push	{r7}
 800b040:	b08b      	sub	sp, #44	@ 0x2c
 800b042:	af00      	add	r7, sp, #0
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	60b9      	str	r1, [r7, #8]
 800b048:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6a1a      	ldr	r2, [r3, #32]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	fa93 f3a3 	rbit	r3, r3
 800b058:	613b      	str	r3, [r7, #16]
  return result;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b064:	2320      	movs	r3, #32
 800b066:	e003      	b.n	800b070 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	fab3 f383 	clz	r3, r3
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	210f      	movs	r1, #15
 800b074:	fa01 f303 	lsl.w	r3, r1, r3
 800b078:	43db      	mvns	r3, r3
 800b07a:	401a      	ands	r2, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	fa93 f3a3 	rbit	r3, r3
 800b086:	61fb      	str	r3, [r7, #28]
  return result;
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b092:	2320      	movs	r3, #32
 800b094:	e003      	b.n	800b09e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b098:	fab3 f383 	clz	r3, r3
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	6879      	ldr	r1, [r7, #4]
 800b0a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	621a      	str	r2, [r3, #32]
}
 800b0ac:	bf00      	nop
 800b0ae:	372c      	adds	r7, #44	@ 0x2c
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <LL_GPIO_SetAFPin_8_15>:
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b08b      	sub	sp, #44	@ 0x2c
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	0a1b      	lsrs	r3, r3, #8
 800b0cc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	fa93 f3a3 	rbit	r3, r3
 800b0d4:	613b      	str	r3, [r7, #16]
  return result;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b0e0:	2320      	movs	r3, #32
 800b0e2:	e003      	b.n	800b0ec <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	fab3 f383 	clz	r3, r3
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	210f      	movs	r1, #15
 800b0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0f4:	43db      	mvns	r3, r3
 800b0f6:	401a      	ands	r2, r3
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	0a1b      	lsrs	r3, r3, #8
 800b0fc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0fe:	6a3b      	ldr	r3, [r7, #32]
 800b100:	fa93 f3a3 	rbit	r3, r3
 800b104:	61fb      	str	r3, [r7, #28]
  return result;
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b110:	2320      	movs	r3, #32
 800b112:	e003      	b.n	800b11c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b116:	fab3 f383 	clz	r3, r3
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	6879      	ldr	r1, [r7, #4]
 800b120:	fa01 f303 	lsl.w	r3, r1, r3
 800b124:	431a      	orrs	r2, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b12a:	bf00      	nop
 800b12c:	372c      	adds	r7, #44	@ 0x2c
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b08a      	sub	sp, #40	@ 0x28
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800b140:	2300      	movs	r3, #0
 800b142:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800b144:	2300      	movs	r3, #0
 800b146:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	fa93 f3a3 	rbit	r3, r3
 800b154:	617b      	str	r3, [r7, #20]
  return result;
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d101      	bne.n	800b164 <LL_GPIO_Init+0x2e>
    return 32U;
 800b160:	2320      	movs	r3, #32
 800b162:	e003      	b.n	800b16c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	fab3 f383 	clz	r3, r3
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b16e:	e057      	b.n	800b220 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	2101      	movs	r1, #1
 800b176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b178:	fa01 f303 	lsl.w	r3, r1, r3
 800b17c:	4013      	ands	r3, r2
 800b17e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d049      	beq.n	800b21a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d003      	beq.n	800b196 <LL_GPIO_Init+0x60>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	2b02      	cmp	r3, #2
 800b194:	d10d      	bne.n	800b1b2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	461a      	mov	r2, r3
 800b19c:	6a39      	ldr	r1, [r7, #32]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7ff fed3 	bl	800af4a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	6a39      	ldr	r1, [r7, #32]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff feb4 	bl	800af1a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	6a39      	ldr	r1, [r7, #32]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff ff02 	bl	800afc4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d121      	bne.n	800b20c <LL_GPIO_Init+0xd6>
 800b1c8:	6a3b      	ldr	r3, [r7, #32]
 800b1ca:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	fa93 f3a3 	rbit	r3, r3
 800b1d2:	60bb      	str	r3, [r7, #8]
  return result;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <LL_GPIO_Init+0xac>
    return 32U;
 800b1de:	2320      	movs	r3, #32
 800b1e0:	e003      	b.n	800b1ea <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	fab3 f383 	clz	r3, r3
 800b1e8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800b1ea:	2b07      	cmp	r3, #7
 800b1ec:	d807      	bhi.n	800b1fe <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	6a39      	ldr	r1, [r7, #32]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff ff21 	bl	800b03e <LL_GPIO_SetAFPin_0_7>
 800b1fc:	e006      	b.n	800b20c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	695b      	ldr	r3, [r3, #20]
 800b202:	461a      	mov	r2, r3
 800b204:	6a39      	ldr	r1, [r7, #32]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff ff56 	bl	800b0b8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	461a      	mov	r2, r3
 800b212:	6a39      	ldr	r1, [r7, #32]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff fe43 	bl	800aea0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21c:	3301      	adds	r3, #1
 800b21e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b226:	fa22 f303 	lsr.w	r3, r2, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1a0      	bne.n	800b170 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3728      	adds	r7, #40	@ 0x28
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <LL_I2C_Enable>:
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f043 0201 	orr.w	r2, r3, #1
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	601a      	str	r2, [r3, #0]
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <LL_I2C_Disable>:
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f023 0201 	bic.w	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	601a      	str	r2, [r3, #0]
}
 800b26c:	bf00      	nop
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <LL_I2C_SetOwnAddress1>:
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b28c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b290:	68b9      	ldr	r1, [r7, #8]
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	430a      	orrs	r2, r1
 800b296:	431a      	orrs	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	609a      	str	r2, [r3, #8]
}
 800b29c:	bf00      	nop
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <LL_I2C_ConfigSpeed>:
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	4a42      	ldr	r2, [pc, #264]	@ (800b3cc <LL_I2C_ConfigSpeed+0x124>)
 800b2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c6:	0c9b      	lsrs	r3, r3, #18
 800b2c8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	431a      	orrs	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6a1b      	ldr	r3, [r3, #32]
 800b2de:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	493a      	ldr	r1, [pc, #232]	@ (800b3d0 <LL_I2C_ConfigSpeed+0x128>)
 800b2e6:	428b      	cmp	r3, r1
 800b2e8:	d802      	bhi.n	800b2f0 <LL_I2C_ConfigSpeed+0x48>
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	e009      	b.n	800b304 <LL_I2C_ConfigSpeed+0x5c>
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800b2f6:	fb01 f303 	mul.w	r3, r1, r3
 800b2fa:	4936      	ldr	r1, [pc, #216]	@ (800b3d4 <LL_I2C_ConfigSpeed+0x12c>)
 800b2fc:	fba1 1303 	umull	r1, r3, r1, r3
 800b300:	099b      	lsrs	r3, r3, #6
 800b302:	3301      	adds	r3, #1
 800b304:	431a      	orrs	r2, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a30      	ldr	r2, [pc, #192]	@ (800b3d0 <LL_I2C_ConfigSpeed+0x128>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d939      	bls.n	800b386 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d117      	bne.n	800b348 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	4613      	mov	r3, r2
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	4413      	add	r3, r2
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	fbb2 f3f3 	udiv	r3, r2, r3
 800b326:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d009      	beq.n	800b342 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	4613      	mov	r3, r2
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	4413      	add	r3, r2
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b33c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b340:	e01d      	b.n	800b37e <LL_I2C_ConfigSpeed+0xd6>
 800b342:	f248 0301 	movw	r3, #32769	@ 0x8001
 800b346:	e01a      	b.n	800b37e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	4613      	mov	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4413      	add	r3, r2
 800b350:	009a      	lsls	r2, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00b      	beq.n	800b37a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	4613      	mov	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	009a      	lsls	r2, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b374:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b378:	e001      	b.n	800b37e <LL_I2C_ConfigSpeed+0xd6>
 800b37a:	f248 0301 	movw	r3, #32769	@ 0x8001
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	4313      	orrs	r3, r2
 800b382:	617b      	str	r3, [r7, #20]
 800b384:	e011      	b.n	800b3aa <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	005b      	lsls	r3, r3, #1
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b390:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b394:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800b396:	2b00      	cmp	r3, #0
 800b398:	d005      	beq.n	800b3a6 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a4:	e000      	b.n	800b3a8 <LL_I2C_ConfigSpeed+0x100>
 800b3a6:	2304      	movs	r3, #4
 800b3a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 800b3b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	61da      	str	r2, [r3, #28]
}
 800b3be:	bf00      	nop
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	431bde83 	.word	0x431bde83
 800b3d0:	000186a0 	.word	0x000186a0
 800b3d4:	10624dd3 	.word	0x10624dd3

0800b3d8 <LL_I2C_SetMode>:
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f023 021a 	bic.w	r2, r3, #26
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	431a      	orrs	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	601a      	str	r2, [r3, #0]
}
 800b3f2:	bf00      	nop
 800b3f4:	370c      	adds	r7, #12
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <LL_I2C_AcknowledgeNextData>:
{
 800b3fe:	b480      	push	{r7}
 800b400:	b083      	sub	sp, #12
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	431a      	orrs	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	601a      	str	r2, [r3, #0]
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff ff12 	bl	800b258 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800b434:	f107 0308 	add.w	r3, r7, #8
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 f895 	bl	800b568 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800b43e:	6939      	ldr	r1, [r7, #16]
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7ff ff2d 	bl	800b2a8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	68d9      	ldr	r1, [r3, #12]
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	695b      	ldr	r3, [r3, #20]
 800b456:	461a      	mov	r2, r3
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7ff ff0d 	bl	800b278 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4619      	mov	r1, r3
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7ff ffb7 	bl	800b3d8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7ff fee4 	bl	800b238 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7ff ffc1 	bl	800b3fe <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3718      	adds	r7, #24
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <LL_RCC_GetSysClkSource>:
{
 800b488:	b480      	push	{r7}
 800b48a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b48c:	4b04      	ldr	r3, [pc, #16]	@ (800b4a0 <LL_RCC_GetSysClkSource+0x18>)
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	f003 030c 	and.w	r3, r3, #12
}
 800b494:	4618      	mov	r0, r3
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	40023800 	.word	0x40023800

0800b4a4 <LL_RCC_GetAHBPrescaler>:
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b4a8:	4b04      	ldr	r3, [pc, #16]	@ (800b4bc <LL_RCC_GetAHBPrescaler+0x18>)
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop
 800b4bc:	40023800 	.word	0x40023800

0800b4c0 <LL_RCC_GetAPB1Prescaler>:
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b4c4:	4b04      	ldr	r3, [pc, #16]	@ (800b4d8 <LL_RCC_GetAPB1Prescaler+0x18>)
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	40023800 	.word	0x40023800

0800b4dc <LL_RCC_GetAPB2Prescaler>:
{
 800b4dc:	b480      	push	{r7}
 800b4de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b4e0:	4b04      	ldr	r3, [pc, #16]	@ (800b4f4 <LL_RCC_GetAPB2Prescaler+0x18>)
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	40023800 	.word	0x40023800

0800b4f8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b4fc:	4b04      	ldr	r3, [pc, #16]	@ (800b510 <LL_RCC_PLL_GetMainSource+0x18>)
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800b504:	4618      	mov	r0, r3
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	40023800 	.word	0x40023800

0800b514 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b514:	b480      	push	{r7}
 800b516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b518:	4b04      	ldr	r3, [pc, #16]	@ (800b52c <LL_RCC_PLL_GetN+0x18>)
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	099b      	lsrs	r3, r3, #6
 800b51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800b522:	4618      	mov	r0, r3
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	40023800 	.word	0x40023800

0800b530 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800b534:	4b04      	ldr	r3, [pc, #16]	@ (800b548 <LL_RCC_PLL_GetP+0x18>)
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	40023800 	.word	0x40023800

0800b54c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b54c:	b480      	push	{r7}
 800b54e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b550:	4b04      	ldr	r3, [pc, #16]	@ (800b564 <LL_RCC_PLL_GetDivider+0x18>)
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800b558:	4618      	mov	r0, r3
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	40023800 	.word	0x40023800

0800b568 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800b570:	f000 f820 	bl	800b5b4 <RCC_GetSystemClockFreq>
 800b574:	4602      	mov	r2, r0
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 f840 	bl	800b604 <RCC_GetHCLKClockFreq>
 800b584:	4602      	mov	r2, r0
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 f84e 	bl	800b630 <RCC_GetPCLK1ClockFreq>
 800b594:	4602      	mov	r2, r0
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 f85a 	bl	800b658 <RCC_GetPCLK2ClockFreq>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	60da      	str	r2, [r3, #12]
}
 800b5aa:	bf00      	nop
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
	...

0800b5b4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b5be:	f7ff ff63 	bl	800b488 <LL_RCC_GetSysClkSource>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d00c      	beq.n	800b5e2 <RCC_GetSystemClockFreq+0x2e>
 800b5c8:	2b08      	cmp	r3, #8
 800b5ca:	d80f      	bhi.n	800b5ec <RCC_GetSystemClockFreq+0x38>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <RCC_GetSystemClockFreq+0x22>
 800b5d0:	2b04      	cmp	r3, #4
 800b5d2:	d003      	beq.n	800b5dc <RCC_GetSystemClockFreq+0x28>
 800b5d4:	e00a      	b.n	800b5ec <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b5d6:	4b09      	ldr	r3, [pc, #36]	@ (800b5fc <RCC_GetSystemClockFreq+0x48>)
 800b5d8:	607b      	str	r3, [r7, #4]
      break;
 800b5da:	e00a      	b.n	800b5f2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b5dc:	4b08      	ldr	r3, [pc, #32]	@ (800b600 <RCC_GetSystemClockFreq+0x4c>)
 800b5de:	607b      	str	r3, [r7, #4]
      break;
 800b5e0:	e007      	b.n	800b5f2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800b5e2:	2008      	movs	r0, #8
 800b5e4:	f000 f84c 	bl	800b680 <RCC_PLL_GetFreqDomain_SYS>
 800b5e8:	6078      	str	r0, [r7, #4]
      break;
 800b5ea:	e002      	b.n	800b5f2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800b5ec:	4b03      	ldr	r3, [pc, #12]	@ (800b5fc <RCC_GetSystemClockFreq+0x48>)
 800b5ee:	607b      	str	r3, [r7, #4]
      break;
 800b5f0:	bf00      	nop
  }

  return frequency;
 800b5f2:	687b      	ldr	r3, [r7, #4]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	00f42400 	.word	0x00f42400
 800b600:	007a1200 	.word	0x007a1200

0800b604 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b60c:	f7ff ff4a 	bl	800b4a4 <LL_RCC_GetAHBPrescaler>
 800b610:	4603      	mov	r3, r0
 800b612:	091b      	lsrs	r3, r3, #4
 800b614:	f003 030f 	and.w	r3, r3, #15
 800b618:	4a04      	ldr	r2, [pc, #16]	@ (800b62c <RCC_GetHCLKClockFreq+0x28>)
 800b61a:	5cd3      	ldrb	r3, [r2, r3]
 800b61c:	461a      	mov	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	40d3      	lsrs	r3, r2
}
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	080163bc 	.word	0x080163bc

0800b630 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b638:	f7ff ff42 	bl	800b4c0 <LL_RCC_GetAPB1Prescaler>
 800b63c:	4603      	mov	r3, r0
 800b63e:	0a9b      	lsrs	r3, r3, #10
 800b640:	4a04      	ldr	r2, [pc, #16]	@ (800b654 <RCC_GetPCLK1ClockFreq+0x24>)
 800b642:	5cd3      	ldrb	r3, [r2, r3]
 800b644:	461a      	mov	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	40d3      	lsrs	r3, r2
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	080163cc 	.word	0x080163cc

0800b658 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800b660:	f7ff ff3c 	bl	800b4dc <LL_RCC_GetAPB2Prescaler>
 800b664:	4603      	mov	r3, r0
 800b666:	0b5b      	lsrs	r3, r3, #13
 800b668:	4a04      	ldr	r2, [pc, #16]	@ (800b67c <RCC_GetPCLK2ClockFreq+0x24>)
 800b66a:	5cd3      	ldrb	r3, [r2, r3]
 800b66c:	461a      	mov	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	40d3      	lsrs	r3, r2
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	080163cc 	.word	0x080163cc

0800b680 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800b680:	b590      	push	{r4, r7, lr}
 800b682:	b087      	sub	sp, #28
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800b688:	2300      	movs	r3, #0
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	2300      	movs	r3, #0
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b694:	f7ff ff30 	bl	800b4f8 <LL_RCC_PLL_GetMainSource>
 800b698:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d004      	beq.n	800b6aa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6a6:	d003      	beq.n	800b6b0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800b6a8:	e005      	b.n	800b6b6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800b6aa:	4b12      	ldr	r3, [pc, #72]	@ (800b6f4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b6ac:	617b      	str	r3, [r7, #20]
      break;
 800b6ae:	e005      	b.n	800b6bc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800b6b0:	4b11      	ldr	r3, [pc, #68]	@ (800b6f8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800b6b2:	617b      	str	r3, [r7, #20]
      break;
 800b6b4:	e002      	b.n	800b6bc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800b6b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b6f4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b6b8:	617b      	str	r3, [r7, #20]
      break;
 800b6ba:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b08      	cmp	r3, #8
 800b6c0:	d113      	bne.n	800b6ea <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800b6c2:	f7ff ff43 	bl	800b54c <LL_RCC_PLL_GetDivider>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	fbb3 f4f2 	udiv	r4, r3, r2
 800b6ce:	f7ff ff21 	bl	800b514 <LL_RCC_PLL_GetN>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	fb03 f404 	mul.w	r4, r3, r4
 800b6d8:	f7ff ff2a 	bl	800b530 <LL_RCC_PLL_GetP>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	0c1b      	lsrs	r3, r3, #16
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	fbb4 f3f3 	udiv	r3, r4, r3
 800b6e8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800b6ea:	693b      	ldr	r3, [r7, #16]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	371c      	adds	r7, #28
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd90      	pop	{r4, r7, pc}
 800b6f4:	00f42400 	.word	0x00f42400
 800b6f8:	007a1200 	.word	0x007a1200

0800b6fc <LL_USART_IsEnabled>:
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b70c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b710:	bf0c      	ite	eq
 800b712:	2301      	moveq	r3, #1
 800b714:	2300      	movne	r3, #0
 800b716:	b2db      	uxtb	r3, r3
}
 800b718:	4618      	mov	r0, r3
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <LL_USART_SetStopBitsLength>:
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	431a      	orrs	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	611a      	str	r2, [r3, #16]
}
 800b73e:	bf00      	nop
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <LL_USART_SetHWFlowCtrl>:
{
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	431a      	orrs	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	615a      	str	r2, [r3, #20]
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <LL_USART_SetBaudRate>:
{
 800b770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b774:	b0c0      	sub	sp, #256	@ 0x100
 800b776:	af00      	add	r7, sp, #0
 800b778:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b77c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800b780:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800b784:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800b788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b78c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b790:	f040 810c 	bne.w	800b9ac <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800b794:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b798:	2200      	movs	r2, #0
 800b79a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b79e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b7a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	462b      	mov	r3, r5
 800b7aa:	1891      	adds	r1, r2, r2
 800b7ac:	6639      	str	r1, [r7, #96]	@ 0x60
 800b7ae:	415b      	adcs	r3, r3
 800b7b0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b7b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	eb12 0801 	adds.w	r8, r2, r1
 800b7bc:	4629      	mov	r1, r5
 800b7be:	eb43 0901 	adc.w	r9, r3, r1
 800b7c2:	f04f 0200 	mov.w	r2, #0
 800b7c6:	f04f 0300 	mov.w	r3, #0
 800b7ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b7ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b7d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b7d6:	4690      	mov	r8, r2
 800b7d8:	4699      	mov	r9, r3
 800b7da:	4623      	mov	r3, r4
 800b7dc:	eb18 0303 	adds.w	r3, r8, r3
 800b7e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b7e4:	462b      	mov	r3, r5
 800b7e6:	eb49 0303 	adc.w	r3, r9, r3
 800b7ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b7ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	469a      	mov	sl, r3
 800b7f6:	4693      	mov	fp, r2
 800b7f8:	eb1a 030a 	adds.w	r3, sl, sl
 800b7fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7fe:	eb4b 030b 	adc.w	r3, fp, fp
 800b802:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b804:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b80c:	f7f5 fa4c 	bl	8000ca8 <__aeabi_uldivmod>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4b64      	ldr	r3, [pc, #400]	@ (800b9a8 <LL_USART_SetBaudRate+0x238>)
 800b816:	fba3 2302 	umull	r2, r3, r3, r2
 800b81a:	095b      	lsrs	r3, r3, #5
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	011b      	lsls	r3, r3, #4
 800b820:	b29c      	uxth	r4, r3
 800b822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b826:	2200      	movs	r2, #0
 800b828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b82c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b830:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800b834:	4642      	mov	r2, r8
 800b836:	464b      	mov	r3, r9
 800b838:	1891      	adds	r1, r2, r2
 800b83a:	6539      	str	r1, [r7, #80]	@ 0x50
 800b83c:	415b      	adcs	r3, r3
 800b83e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b840:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b844:	4641      	mov	r1, r8
 800b846:	1851      	adds	r1, r2, r1
 800b848:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b84a:	4649      	mov	r1, r9
 800b84c:	414b      	adcs	r3, r1
 800b84e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b850:	f04f 0200 	mov.w	r2, #0
 800b854:	f04f 0300 	mov.w	r3, #0
 800b858:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800b85c:	4659      	mov	r1, fp
 800b85e:	00cb      	lsls	r3, r1, #3
 800b860:	4651      	mov	r1, sl
 800b862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b866:	4651      	mov	r1, sl
 800b868:	00ca      	lsls	r2, r1, #3
 800b86a:	4610      	mov	r0, r2
 800b86c:	4619      	mov	r1, r3
 800b86e:	4603      	mov	r3, r0
 800b870:	4642      	mov	r2, r8
 800b872:	189b      	adds	r3, r3, r2
 800b874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b878:	464b      	mov	r3, r9
 800b87a:	460a      	mov	r2, r1
 800b87c:	eb42 0303 	adc.w	r3, r2, r3
 800b880:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b884:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b888:	2200      	movs	r2, #0
 800b88a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b88e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800b892:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b896:	460b      	mov	r3, r1
 800b898:	18db      	adds	r3, r3, r3
 800b89a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b89c:	4613      	mov	r3, r2
 800b89e:	eb42 0303 	adc.w	r3, r2, r3
 800b8a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b8a8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800b8ac:	f7f5 f9fc 	bl	8000ca8 <__aeabi_uldivmod>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	4b3c      	ldr	r3, [pc, #240]	@ (800b9a8 <LL_USART_SetBaudRate+0x238>)
 800b8b8:	fba3 2301 	umull	r2, r3, r3, r1
 800b8bc:	095b      	lsrs	r3, r3, #5
 800b8be:	2264      	movs	r2, #100	@ 0x64
 800b8c0:	fb02 f303 	mul.w	r3, r2, r3
 800b8c4:	1acb      	subs	r3, r1, r3
 800b8c6:	00db      	lsls	r3, r3, #3
 800b8c8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b8cc:	4b36      	ldr	r3, [pc, #216]	@ (800b9a8 <LL_USART_SetBaudRate+0x238>)
 800b8ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b8d2:	095b      	lsrs	r3, r3, #5
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	4423      	add	r3, r4
 800b8e2:	b29c      	uxth	r4, r3
 800b8e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b8ee:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b8f2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800b8f6:	4642      	mov	r2, r8
 800b8f8:	464b      	mov	r3, r9
 800b8fa:	1891      	adds	r1, r2, r2
 800b8fc:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b8fe:	415b      	adcs	r3, r3
 800b900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b902:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b906:	4641      	mov	r1, r8
 800b908:	1851      	adds	r1, r2, r1
 800b90a:	6339      	str	r1, [r7, #48]	@ 0x30
 800b90c:	4649      	mov	r1, r9
 800b90e:	414b      	adcs	r3, r1
 800b910:	637b      	str	r3, [r7, #52]	@ 0x34
 800b912:	f04f 0200 	mov.w	r2, #0
 800b916:	f04f 0300 	mov.w	r3, #0
 800b91a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b91e:	4659      	mov	r1, fp
 800b920:	00cb      	lsls	r3, r1, #3
 800b922:	4651      	mov	r1, sl
 800b924:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b928:	4651      	mov	r1, sl
 800b92a:	00ca      	lsls	r2, r1, #3
 800b92c:	4610      	mov	r0, r2
 800b92e:	4619      	mov	r1, r3
 800b930:	4603      	mov	r3, r0
 800b932:	4642      	mov	r2, r8
 800b934:	189b      	adds	r3, r3, r2
 800b936:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b93a:	464b      	mov	r3, r9
 800b93c:	460a      	mov	r2, r1
 800b93e:	eb42 0303 	adc.w	r3, r2, r3
 800b942:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b946:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b94a:	2200      	movs	r2, #0
 800b94c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b950:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800b954:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b958:	460b      	mov	r3, r1
 800b95a:	18db      	adds	r3, r3, r3
 800b95c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b95e:	4613      	mov	r3, r2
 800b960:	eb42 0303 	adc.w	r3, r2, r3
 800b964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b96a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800b96e:	f7f5 f99b 	bl	8000ca8 <__aeabi_uldivmod>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
 800b976:	4b0c      	ldr	r3, [pc, #48]	@ (800b9a8 <LL_USART_SetBaudRate+0x238>)
 800b978:	fba3 1302 	umull	r1, r3, r3, r2
 800b97c:	095b      	lsrs	r3, r3, #5
 800b97e:	2164      	movs	r1, #100	@ 0x64
 800b980:	fb01 f303 	mul.w	r3, r1, r3
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	00db      	lsls	r3, r3, #3
 800b988:	3332      	adds	r3, #50	@ 0x32
 800b98a:	4a07      	ldr	r2, [pc, #28]	@ (800b9a8 <LL_USART_SetBaudRate+0x238>)
 800b98c:	fba2 2303 	umull	r2, r3, r2, r3
 800b990:	095b      	lsrs	r3, r3, #5
 800b992:	b29b      	uxth	r3, r3
 800b994:	f003 0307 	and.w	r3, r3, #7
 800b998:	b29b      	uxth	r3, r3
 800b99a:	4423      	add	r3, r4
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	461a      	mov	r2, r3
 800b9a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9a4:	609a      	str	r2, [r3, #8]
}
 800b9a6:	e108      	b.n	800bbba <LL_USART_SetBaudRate+0x44a>
 800b9a8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800b9ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b9b6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b9ba:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800b9be:	4642      	mov	r2, r8
 800b9c0:	464b      	mov	r3, r9
 800b9c2:	1891      	adds	r1, r2, r2
 800b9c4:	6239      	str	r1, [r7, #32]
 800b9c6:	415b      	adcs	r3, r3
 800b9c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b9ce:	4641      	mov	r1, r8
 800b9d0:	1854      	adds	r4, r2, r1
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	eb43 0501 	adc.w	r5, r3, r1
 800b9d8:	f04f 0200 	mov.w	r2, #0
 800b9dc:	f04f 0300 	mov.w	r3, #0
 800b9e0:	00eb      	lsls	r3, r5, #3
 800b9e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9e6:	00e2      	lsls	r2, r4, #3
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	461d      	mov	r5, r3
 800b9ec:	4643      	mov	r3, r8
 800b9ee:	18e3      	adds	r3, r4, r3
 800b9f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b9f4:	464b      	mov	r3, r9
 800b9f6:	eb45 0303 	adc.w	r3, r5, r3
 800b9fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b9fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ba02:	2200      	movs	r2, #0
 800ba04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ba08:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800ba0c:	f04f 0200 	mov.w	r2, #0
 800ba10:	f04f 0300 	mov.w	r3, #0
 800ba14:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800ba18:	4629      	mov	r1, r5
 800ba1a:	008b      	lsls	r3, r1, #2
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba22:	4621      	mov	r1, r4
 800ba24:	008a      	lsls	r2, r1, #2
 800ba26:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800ba2a:	f7f5 f93d 	bl	8000ca8 <__aeabi_uldivmod>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	4b65      	ldr	r3, [pc, #404]	@ (800bbc8 <LL_USART_SetBaudRate+0x458>)
 800ba34:	fba3 2302 	umull	r2, r3, r3, r2
 800ba38:	095b      	lsrs	r3, r3, #5
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	011b      	lsls	r3, r3, #4
 800ba3e:	b29c      	uxth	r4, r3
 800ba40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ba44:	2200      	movs	r2, #0
 800ba46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ba4e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800ba52:	4642      	mov	r2, r8
 800ba54:	464b      	mov	r3, r9
 800ba56:	1891      	adds	r1, r2, r2
 800ba58:	61b9      	str	r1, [r7, #24]
 800ba5a:	415b      	adcs	r3, r3
 800ba5c:	61fb      	str	r3, [r7, #28]
 800ba5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba62:	4641      	mov	r1, r8
 800ba64:	1851      	adds	r1, r2, r1
 800ba66:	6139      	str	r1, [r7, #16]
 800ba68:	4649      	mov	r1, r9
 800ba6a:	414b      	adcs	r3, r1
 800ba6c:	617b      	str	r3, [r7, #20]
 800ba6e:	f04f 0200 	mov.w	r2, #0
 800ba72:	f04f 0300 	mov.w	r3, #0
 800ba76:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba7a:	4659      	mov	r1, fp
 800ba7c:	00cb      	lsls	r3, r1, #3
 800ba7e:	4651      	mov	r1, sl
 800ba80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba84:	4651      	mov	r1, sl
 800ba86:	00ca      	lsls	r2, r1, #3
 800ba88:	4610      	mov	r0, r2
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	4642      	mov	r2, r8
 800ba90:	189b      	adds	r3, r3, r2
 800ba92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba96:	464b      	mov	r3, r9
 800ba98:	460a      	mov	r2, r1
 800ba9a:	eb42 0303 	adc.w	r3, r2, r3
 800ba9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800baa2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800baa6:	2200      	movs	r2, #0
 800baa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800baac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800bab0:	f04f 0200 	mov.w	r2, #0
 800bab4:	f04f 0300 	mov.w	r3, #0
 800bab8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800babc:	4649      	mov	r1, r9
 800babe:	008b      	lsls	r3, r1, #2
 800bac0:	4641      	mov	r1, r8
 800bac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bac6:	4641      	mov	r1, r8
 800bac8:	008a      	lsls	r2, r1, #2
 800baca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800bace:	f7f5 f8eb 	bl	8000ca8 <__aeabi_uldivmod>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4611      	mov	r1, r2
 800bad8:	4b3b      	ldr	r3, [pc, #236]	@ (800bbc8 <LL_USART_SetBaudRate+0x458>)
 800bada:	fba3 2301 	umull	r2, r3, r3, r1
 800bade:	095b      	lsrs	r3, r3, #5
 800bae0:	2264      	movs	r2, #100	@ 0x64
 800bae2:	fb02 f303 	mul.w	r3, r2, r3
 800bae6:	1acb      	subs	r3, r1, r3
 800bae8:	011b      	lsls	r3, r3, #4
 800baea:	3332      	adds	r3, #50	@ 0x32
 800baec:	4a36      	ldr	r2, [pc, #216]	@ (800bbc8 <LL_USART_SetBaudRate+0x458>)
 800baee:	fba2 2303 	umull	r2, r3, r2, r3
 800baf2:	095b      	lsrs	r3, r3, #5
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	4423      	add	r3, r4
 800bafe:	b29c      	uxth	r4, r3
 800bb00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb04:	2200      	movs	r2, #0
 800bb06:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb08:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bb0a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bb0e:	4642      	mov	r2, r8
 800bb10:	464b      	mov	r3, r9
 800bb12:	1891      	adds	r1, r2, r2
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	415b      	adcs	r3, r3
 800bb18:	60fb      	str	r3, [r7, #12]
 800bb1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb1e:	4641      	mov	r1, r8
 800bb20:	1851      	adds	r1, r2, r1
 800bb22:	6039      	str	r1, [r7, #0]
 800bb24:	4649      	mov	r1, r9
 800bb26:	414b      	adcs	r3, r1
 800bb28:	607b      	str	r3, [r7, #4]
 800bb2a:	f04f 0200 	mov.w	r2, #0
 800bb2e:	f04f 0300 	mov.w	r3, #0
 800bb32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bb36:	4659      	mov	r1, fp
 800bb38:	00cb      	lsls	r3, r1, #3
 800bb3a:	4651      	mov	r1, sl
 800bb3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb40:	4651      	mov	r1, sl
 800bb42:	00ca      	lsls	r2, r1, #3
 800bb44:	4610      	mov	r0, r2
 800bb46:	4619      	mov	r1, r3
 800bb48:	4603      	mov	r3, r0
 800bb4a:	4642      	mov	r2, r8
 800bb4c:	189b      	adds	r3, r3, r2
 800bb4e:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb50:	464b      	mov	r3, r9
 800bb52:	460a      	mov	r2, r1
 800bb54:	eb42 0303 	adc.w	r3, r2, r3
 800bb58:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bb5e:	2200      	movs	r2, #0
 800bb60:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bb64:	f04f 0200 	mov.w	r2, #0
 800bb68:	f04f 0300 	mov.w	r3, #0
 800bb6c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800bb70:	4649      	mov	r1, r9
 800bb72:	008b      	lsls	r3, r1, #2
 800bb74:	4641      	mov	r1, r8
 800bb76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb7a:	4641      	mov	r1, r8
 800bb7c:	008a      	lsls	r2, r1, #2
 800bb7e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800bb82:	f7f5 f891 	bl	8000ca8 <__aeabi_uldivmod>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc8 <LL_USART_SetBaudRate+0x458>)
 800bb8c:	fba3 1302 	umull	r1, r3, r3, r2
 800bb90:	095b      	lsrs	r3, r3, #5
 800bb92:	2164      	movs	r1, #100	@ 0x64
 800bb94:	fb01 f303 	mul.w	r3, r1, r3
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	011b      	lsls	r3, r3, #4
 800bb9c:	3332      	adds	r3, #50	@ 0x32
 800bb9e:	4a0a      	ldr	r2, [pc, #40]	@ (800bbc8 <LL_USART_SetBaudRate+0x458>)
 800bba0:	fba2 2303 	umull	r2, r3, r2, r3
 800bba4:	095b      	lsrs	r3, r3, #5
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	f003 030f 	and.w	r3, r3, #15
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	4423      	add	r3, r4
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbb8:	609a      	str	r2, [r3, #8]
}
 800bbba:	bf00      	nop
 800bbbc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbc6:	bf00      	nop
 800bbc8:	51eb851f 	.word	0x51eb851f

0800bbcc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b088      	sub	sp, #32
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7ff fd8c 	bl	800b6fc <LL_USART_IsEnabled>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d15e      	bne.n	800bca8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800bbf2:	f023 030c 	bic.w	r3, r3, #12
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	6851      	ldr	r1, [r2, #4]
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	68d2      	ldr	r2, [r2, #12]
 800bbfe:	4311      	orrs	r1, r2
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	6912      	ldr	r2, [r2, #16]
 800bc04:	4311      	orrs	r1, r2
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	6992      	ldr	r2, [r2, #24]
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	431a      	orrs	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7ff fd83 	bl	800b724 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	695b      	ldr	r3, [r3, #20]
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff fd90 	bl	800b74a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800bc2a:	f107 0308 	add.w	r3, r7, #8
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff fc9a 	bl	800b568 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a1f      	ldr	r2, [pc, #124]	@ (800bcb4 <LL_USART_Init+0xe8>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d102      	bne.n	800bc42 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	61bb      	str	r3, [r7, #24]
 800bc40:	e021      	b.n	800bc86 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a1c      	ldr	r2, [pc, #112]	@ (800bcb8 <LL_USART_Init+0xec>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d102      	bne.n	800bc50 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	61bb      	str	r3, [r7, #24]
 800bc4e:	e01a      	b.n	800bc86 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a1a      	ldr	r2, [pc, #104]	@ (800bcbc <LL_USART_Init+0xf0>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d102      	bne.n	800bc5e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	61bb      	str	r3, [r7, #24]
 800bc5c:	e013      	b.n	800bc86 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a17      	ldr	r2, [pc, #92]	@ (800bcc0 <LL_USART_Init+0xf4>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d102      	bne.n	800bc6c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	61bb      	str	r3, [r7, #24]
 800bc6a:	e00c      	b.n	800bc86 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a15      	ldr	r2, [pc, #84]	@ (800bcc4 <LL_USART_Init+0xf8>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d102      	bne.n	800bc7a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	61bb      	str	r3, [r7, #24]
 800bc78:	e005      	b.n	800bc86 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a12      	ldr	r2, [pc, #72]	@ (800bcc8 <LL_USART_Init+0xfc>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d101      	bne.n	800bc86 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d00d      	beq.n	800bca8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d009      	beq.n	800bca8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800bc94:	2300      	movs	r3, #0
 800bc96:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800bca0:	69b9      	ldr	r1, [r7, #24]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f7ff fd64 	bl	800b770 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800bca8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3720      	adds	r7, #32
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	40011000 	.word	0x40011000
 800bcb8:	40004400 	.word	0x40004400
 800bcbc:	40004800 	.word	0x40004800
 800bcc0:	40011400 	.word	0x40011400
 800bcc4:	40004c00 	.word	0x40004c00
 800bcc8:	40005000 	.word	0x40005000

0800bccc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcde:	4a07      	ldr	r2, [pc, #28]	@ (800bcfc <LL_InitTick+0x30>)
 800bce0:	3b01      	subs	r3, #1
 800bce2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800bce4:	4b05      	ldr	r3, [pc, #20]	@ (800bcfc <LL_InitTick+0x30>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bcea:	4b04      	ldr	r3, [pc, #16]	@ (800bcfc <LL_InitTick+0x30>)
 800bcec:	2205      	movs	r2, #5
 800bcee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	e000e010 	.word	0xe000e010

0800bd00 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800bd08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7ff ffdd 	bl	800bccc <LL_InitTick>
}
 800bd12:	bf00      	nop
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
	...

0800bd1c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800bd24:	4a04      	ldr	r2, [pc, #16]	@ (800bd38 <LL_SetSystemCoreClock+0x1c>)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6013      	str	r3, [r2, #0]
}
 800bd2a:	bf00      	nop
 800bd2c:	370c      	adds	r7, #12
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	2000045c 	.word	0x2000045c

0800bd3c <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 800bd40:	4b0d      	ldr	r3, [pc, #52]	@ (800bd78 <SCH_Initialize+0x3c>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 800bd46:	4b0d      	ldr	r3, [pc, #52]	@ (800bd7c <SCH_Initialize+0x40>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 800bd4c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd80 <SCH_Initialize+0x44>)
 800bd4e:	2200      	movs	r2, #0
 800bd50:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 800bd52:	22f0      	movs	r2, #240	@ 0xf0
 800bd54:	2100      	movs	r1, #0
 800bd56:	480b      	ldr	r0, [pc, #44]	@ (800bd84 <SCH_Initialize+0x48>)
 800bd58:	f004 f8c9 	bl	800feee <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 800bd5c:	22f0      	movs	r2, #240	@ 0xf0
 800bd5e:	2100      	movs	r1, #0
 800bd60:	4809      	ldr	r0, [pc, #36]	@ (800bd88 <SCH_Initialize+0x4c>)
 800bd62:	f004 f8c4 	bl	800feee <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 800bd66:	2224      	movs	r2, #36	@ 0x24
 800bd68:	2100      	movs	r1, #0
 800bd6a:	4808      	ldr	r0, [pc, #32]	@ (800bd8c <SCH_Initialize+0x50>)
 800bd6c:	f004 f8bf 	bl	800feee <memset>

    // Initialize Scheduler context
  systick_timer_init();
 800bd70:	f7f5 fcac 	bl	80016cc <systick_timer_init>
}
 800bd74:	bf00      	nop
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	20008264 	.word	0x20008264
 800bd7c:	2000816c 	.word	0x2000816c
 800bd80:	20008260 	.word	0x20008260
 800bd84:	2000807c 	.word	0x2000807c
 800bd88:	20008170 	.word	0x20008170
 800bd8c:	20008268 	.word	0x20008268

0800bd90 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	4603      	mov	r3, r0
 800bd98:	6039      	str	r1, [r7, #0]
 800bd9a:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 800bd9c:	79fb      	ldrb	r3, [r7, #7]
 800bd9e:	2b08      	cmp	r3, #8
 800bda0:	d804      	bhi.n	800bdac <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 800bda2:	79fb      	ldrb	r3, [r7, #7]
 800bda4:	4904      	ldr	r1, [pc, #16]	@ (800bdb8 <SCH_TIM_Start+0x28>)
 800bda6:	683a      	ldr	r2, [r7, #0]
 800bda8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr
 800bdb8:	20008268 	.word	0x20008268

0800bdbc <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
 800bdc8:	4a06      	ldr	r2, [pc, #24]	@ (800bde4 <SCH_TIM_HasCompleted+0x28>)
 800bdca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	bf0c      	ite	eq
 800bdd2:	2301      	moveq	r3, #1
 800bdd4:	2300      	movne	r3, #0
 800bdd6:	b2db      	uxtb	r3, r3
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	20008268 	.word	0x20008268

0800bde8 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d028      	beq.n	800be4e <SCH_TASK_CreateTask+0x66>
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d025      	beq.n	800be4e <SCH_TASK_CreateTask+0x66>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 800be02:	4b16      	ldr	r3, [pc, #88]	@ (800be5c <SCH_TASK_CreateTask+0x74>)
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2b12      	cmp	r3, #18
 800be08:	d821      	bhi.n	800be4e <SCH_TASK_CreateTask+0x66>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 800be0a:	4b14      	ldr	r3, [pc, #80]	@ (800be5c <SCH_TASK_CreateTask+0x74>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	461a      	mov	r2, r3
 800be10:	4613      	mov	r3, r2
 800be12:	005b      	lsls	r3, r3, #1
 800be14:	4413      	add	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4a11      	ldr	r2, [pc, #68]	@ (800be60 <SCH_TASK_CreateTask+0x78>)
 800be1a:	4413      	add	r3, r2
 800be1c:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	683a      	ldr	r2, [r7, #0]
 800be22:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	2200      	movs	r2, #0
 800be28:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = RESET;
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	2200      	movs	r2, #0
 800be2e:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	2201      	movs	r2, #1
 800be34:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 800be36:	4b09      	ldr	r3, [pc, #36]	@ (800be5c <SCH_TASK_CreateTask+0x74>)
 800be38:	781a      	ldrb	r2, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800be3e:	4b07      	ldr	r3, [pc, #28]	@ (800be5c <SCH_TASK_CreateTask+0x74>)
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	3301      	adds	r3, #1
 800be44:	b2da      	uxtb	r2, r3
 800be46:	4b05      	ldr	r3, [pc, #20]	@ (800be5c <SCH_TASK_CreateTask+0x74>)
 800be48:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 800be4a:	2300      	movs	r3, #0
 800be4c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	2000816c 	.word	0x2000816c
 800be60:	2000807c 	.word	0x2000807c

0800be64 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 800be6a:	4b42      	ldr	r3, [pc, #264]	@ (800bf74 <SCH_RunSystemTickTimer+0x110>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3301      	adds	r3, #1
 800be70:	4a40      	ldr	r2, [pc, #256]	@ (800bf74 <SCH_RunSystemTickTimer+0x110>)
 800be72:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800be74:	2300      	movs	r3, #0
 800be76:	73fb      	strb	r3, [r7, #15]
 800be78:	e025      	b.n	800bec6 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800be7a:	7bfa      	ldrb	r2, [r7, #15]
 800be7c:	4613      	mov	r3, r2
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	4413      	add	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4a3c      	ldr	r2, [pc, #240]	@ (800bf78 <SCH_RunSystemTickTimer+0x114>)
 800be86:	4413      	add	r3, r2
 800be88:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	2b01      	cmp	r3, #1
 800be92:	d115      	bne.n	800bec0 <SCH_RunSystemTickTimer+0x5c>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d111      	bne.n	800bec0 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685a      	ldr	r2, [r3, #4]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d305      	bcc.n	800bec0 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
 800bec2:	3301      	adds	r3, #1
 800bec4:	73fb      	strb	r3, [r7, #15]
 800bec6:	4b2d      	ldr	r3, [pc, #180]	@ (800bf7c <SCH_RunSystemTickTimer+0x118>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	7bfa      	ldrb	r2, [r7, #15]
 800becc:	429a      	cmp	r2, r3
 800bece:	d3d4      	bcc.n	800be7a <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800bed0:	2300      	movs	r3, #0
 800bed2:	73bb      	strb	r3, [r7, #14]
 800bed4:	e02b      	b.n	800bf2e <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 800bed6:	7bba      	ldrb	r2, [r7, #14]
 800bed8:	4613      	mov	r3, r2
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	4413      	add	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4a27      	ldr	r2, [pc, #156]	@ (800bf80 <SCH_RunSystemTickTimer+0x11c>)
 800bee2:	4413      	add	r3, r2
 800bee4:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d11c      	bne.n	800bf28 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	1c5a      	adds	r2, r3, #1
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d310      	bcc.n	800bf28 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	bf0c      	ite	eq
 800bf1c:	2301      	moveq	r3, #1
 800bf1e:	2300      	movne	r3, #0
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	461a      	mov	r2, r3
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	73bb      	strb	r3, [r7, #14]
 800bf2e:	4b15      	ldr	r3, [pc, #84]	@ (800bf84 <SCH_RunSystemTickTimer+0x120>)
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	7bba      	ldrb	r2, [r7, #14]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d3ce      	bcc.n	800bed6 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800bf38:	2300      	movs	r3, #0
 800bf3a:	73bb      	strb	r3, [r7, #14]
 800bf3c:	e010      	b.n	800bf60 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 800bf3e:	7bbb      	ldrb	r3, [r7, #14]
 800bf40:	4a11      	ldr	r2, [pc, #68]	@ (800bf88 <SCH_RunSystemTickTimer+0x124>)
 800bf42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d007      	beq.n	800bf5a <SCH_RunSystemTickTimer+0xf6>
 800bf4a:	7bbb      	ldrb	r3, [r7, #14]
 800bf4c:	4a0e      	ldr	r2, [pc, #56]	@ (800bf88 <SCH_RunSystemTickTimer+0x124>)
 800bf4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bf52:	3a01      	subs	r2, #1
 800bf54:	490c      	ldr	r1, [pc, #48]	@ (800bf88 <SCH_RunSystemTickTimer+0x124>)
 800bf56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800bf5a:	7bbb      	ldrb	r3, [r7, #14]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	73bb      	strb	r3, [r7, #14]
 800bf60:	7bbb      	ldrb	r3, [r7, #14]
 800bf62:	2b08      	cmp	r3, #8
 800bf64:	d9eb      	bls.n	800bf3e <SCH_RunSystemTickTimer+0xda>
}
 800bf66:	bf00      	nop
 800bf68:	bf00      	nop
 800bf6a:	3714      	adds	r7, #20
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	20008264 	.word	0x20008264
 800bf78:	2000807c 	.word	0x2000807c
 800bf7c:	2000816c 	.word	0x2000816c
 800bf80:	20008170 	.word	0x20008170
 800bf84:	20008260 	.word	0x20008260
 800bf88:	20008268 	.word	0x20008268

0800bf8c <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 800bf90:	f7f5 fb8c 	bl	80016ac <systick_timer_start>
}
 800bf94:	bf00      	nop
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	73fb      	strb	r3, [r7, #15]
 800bfa2:	e01e      	b.n	800bfe2 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800bfa4:	7bfa      	ldrb	r2, [r7, #15]
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	005b      	lsls	r3, r3, #1
 800bfaa:	4413      	add	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4a23      	ldr	r2, [pc, #140]	@ (800c03c <SCH_HandleScheduledTask+0xa4>)
 800bfb0:	4413      	add	r3, r2
 800bfb2:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	885b      	ldrh	r3, [r3, #2]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d10f      	bne.n	800bfdc <SCH_HandleScheduledTask+0x44>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d10b      	bne.n	800bfdc <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d003      	beq.n	800bfdc <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	73fb      	strb	r3, [r7, #15]
 800bfe2:	4b17      	ldr	r3, [pc, #92]	@ (800c040 <SCH_HandleScheduledTask+0xa8>)
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	7bfa      	ldrb	r2, [r7, #15]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d3db      	bcc.n	800bfa4 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800bfec:	2300      	movs	r3, #0
 800bfee:	73bb      	strb	r3, [r7, #14]
 800bff0:	e01a      	b.n	800c028 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 800bff2:	7bba      	ldrb	r2, [r7, #14]
 800bff4:	4613      	mov	r3, r2
 800bff6:	005b      	lsls	r3, r3, #1
 800bff8:	4413      	add	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4a11      	ldr	r2, [pc, #68]	@ (800c044 <SCH_HandleScheduledTask+0xac>)
 800bffe:	4413      	add	r3, r2
 800c000:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	885b      	ldrh	r3, [r3, #2]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d10b      	bne.n	800c022 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	2200      	movs	r2, #0
 800c00e:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c022:	7bbb      	ldrb	r3, [r7, #14]
 800c024:	3301      	adds	r3, #1
 800c026:	73bb      	strb	r3, [r7, #14]
 800c028:	4b07      	ldr	r3, [pc, #28]	@ (800c048 <SCH_HandleScheduledTask+0xb0>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	7bba      	ldrb	r2, [r7, #14]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d3df      	bcc.n	800bff2 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800c032:	bf00      	nop
 800c034:	bf00      	nop
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	2000807c 	.word	0x2000807c
 800c040:	2000816c 	.word	0x2000816c
 800c044:	20008170 	.word	0x20008170
 800c048:	20008260 	.word	0x20008260

0800c04c <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint16_t size)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	6039      	str	r1, [r7, #0]
 800c056:	80fb      	strh	r3, [r7, #6]
 800c058:	4613      	mov	r3, r2
 800c05a:	80bb      	strh	r3, [r7, #4]
    uint8_t x;
    uint16_t crc = initial_value;
 800c05c:	88fb      	ldrh	r3, [r7, #6]
 800c05e:	81fb      	strh	r3, [r7, #14]

    while(size--)
 800c060:	e023      	b.n	800c0aa <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 800c062:	89fb      	ldrh	r3, [r7, #14]
 800c064:	0a1b      	lsrs	r3, r3, #8
 800c066:	b29b      	uxth	r3, r3
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	1c59      	adds	r1, r3, #1
 800c06e:	6039      	str	r1, [r7, #0]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	4053      	eors	r3, r2
 800c074:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 800c076:	7b7b      	ldrb	r3, [r7, #13]
 800c078:	091b      	lsrs	r3, r3, #4
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	7b7b      	ldrb	r3, [r7, #13]
 800c07e:	4053      	eors	r3, r2
 800c080:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 800c082:	89fb      	ldrh	r3, [r7, #14]
 800c084:	021b      	lsls	r3, r3, #8
 800c086:	b21a      	sxth	r2, r3
 800c088:	7b7b      	ldrb	r3, [r7, #13]
 800c08a:	b21b      	sxth	r3, r3
 800c08c:	031b      	lsls	r3, r3, #12
 800c08e:	b21b      	sxth	r3, r3
 800c090:	4053      	eors	r3, r2
 800c092:	b21a      	sxth	r2, r3
 800c094:	7b7b      	ldrb	r3, [r7, #13]
 800c096:	b21b      	sxth	r3, r3
 800c098:	015b      	lsls	r3, r3, #5
 800c09a:	b21b      	sxth	r3, r3
 800c09c:	4053      	eors	r3, r2
 800c09e:	b21a      	sxth	r2, r3
 800c0a0:	7b7b      	ldrb	r3, [r7, #13]
 800c0a2:	b21b      	sxth	r3, r3
 800c0a4:	4053      	eors	r3, r2
 800c0a6:	b21b      	sxth	r3, r3
 800c0a8:	81fb      	strh	r3, [r7, #14]
    while(size--)
 800c0aa:	88bb      	ldrh	r3, [r7, #4]
 800c0ac:	1e5a      	subs	r2, r3, #1
 800c0ae:	80ba      	strh	r2, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1d6      	bne.n	800c062 <crc16_CCITT+0x16>
    }

    return crc;
 800c0b4:	89fb      	ldrh	r3, [r7, #14]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
	...

0800c0c4 <fsp_init>:
uint8_t fsp_my_adr;

volatile uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 800c0ce:	4a06      	ldr	r2, [pc, #24]	@ (800c0e8 <fsp_init+0x24>)
 800c0d0:	79fb      	ldrb	r3, [r7, #7]
 800c0d2:	7013      	strb	r3, [r2, #0]

    fsp_decode_pos = 0;
 800c0d4:	4b05      	ldr	r3, [pc, #20]	@ (800c0ec <fsp_init+0x28>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	701a      	strb	r2, [r3, #0]
}
 800c0da:	bf00      	nop
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	2000828c 	.word	0x2000828c
 800c0ec:	2000828d 	.word	0x2000828d

0800c0f0 <fsp_gen_cmd_pkt>:
        fsp_gen_pkt((void*)0, data, data_len, dst_adr, FSP_PKT_TYPE_DATA, fsp);
    }
}

void fsp_gen_cmd_pkt(uint8_t cmd, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af02      	add	r7, sp, #8
 800c0f6:	603b      	str	r3, [r7, #0]
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	71fb      	strb	r3, [r7, #7]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	71bb      	strb	r3, [r7, #6]
 800c100:	4613      	mov	r3, r2
 800c102:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800c104:	797b      	ldrb	r3, [r7, #5]
 800c106:	2b01      	cmp	r3, #1
 800c108:	d10b      	bne.n	800c122 <fsp_gen_cmd_pkt+0x32>
    {
        fsp_gen_pkt(&cmd,(void*)0, 0, dst_adr, FSP_PKT_TYPE_CMD_WITH_ACK, fsp);
 800c10a:	79ba      	ldrb	r2, [r7, #6]
 800c10c:	1df8      	adds	r0, r7, #7
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	2304      	movs	r3, #4
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	4613      	mov	r3, r2
 800c118:	2200      	movs	r2, #0
 800c11a:	2100      	movs	r1, #0
 800c11c:	f000 f83a 	bl	800c194 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
    }
}
 800c120:	e00a      	b.n	800c138 <fsp_gen_cmd_pkt+0x48>
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
 800c122:	79ba      	ldrb	r2, [r7, #6]
 800c124:	1df8      	adds	r0, r7, #7
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	9301      	str	r3, [sp, #4]
 800c12a:	2303      	movs	r3, #3
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	4613      	mov	r3, r2
 800c130:	2200      	movs	r2, #0
 800c132:	2100      	movs	r1, #0
 800c134:	f000 f82e 	bl	800c194 <fsp_gen_pkt>
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <fsp_gen_cmd_w_data_pkt>:

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af02      	add	r7, sp, #8
 800c146:	6039      	str	r1, [r7, #0]
 800c148:	4611      	mov	r1, r2
 800c14a:	461a      	mov	r2, r3
 800c14c:	4603      	mov	r3, r0
 800c14e:	71fb      	strb	r3, [r7, #7]
 800c150:	460b      	mov	r3, r1
 800c152:	71bb      	strb	r3, [r7, #6]
 800c154:	4613      	mov	r3, r2
 800c156:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800c158:	7c3b      	ldrb	r3, [r7, #16]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d10b      	bne.n	800c176 <fsp_gen_cmd_w_data_pkt+0x36>
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 800c15e:	7979      	ldrb	r1, [r7, #5]
 800c160:	79ba      	ldrb	r2, [r7, #6]
 800c162:	1df8      	adds	r0, r7, #7
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	9301      	str	r3, [sp, #4]
 800c168:	2308      	movs	r3, #8
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	460b      	mov	r3, r1
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	f000 f810 	bl	800c194 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
    }
}
 800c174:	e00a      	b.n	800c18c <fsp_gen_cmd_w_data_pkt+0x4c>
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 800c176:	7979      	ldrb	r1, [r7, #5]
 800c178:	79ba      	ldrb	r2, [r7, #6]
 800c17a:	1df8      	adds	r0, r7, #7
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	9301      	str	r3, [sp, #4]
 800c180:	2307      	movs	r3, #7
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	460b      	mov	r3, r1
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	f000 f804 	bl	800c194 <fsp_gen_pkt>
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <fsp_gen_pkt>:
    fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}


void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	4611      	mov	r1, r2
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	71fb      	strb	r3, [r7, #7]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	71bb      	strb	r3, [r7, #6]
    fsp->sod        = FSP_PKT_SOD;
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ac:	22ca      	movs	r2, #202	@ 0xca
 800c1ae:	701a      	strb	r2, [r3, #0]
    fsp->src_adr    = fsp_my_adr;
 800c1b0:	4b25      	ldr	r3, [pc, #148]	@ (800c248 <fsp_gen_pkt+0xb4>)
 800c1b2:	781a      	ldrb	r2, [r3, #0]
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b6:	705a      	strb	r2, [r3, #1]
    fsp->dst_adr    = dst_adr;
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ba:	79ba      	ldrb	r2, [r7, #6]
 800c1bc:	709a      	strb	r2, [r3, #2]
    fsp->length     = payload_len;
 800c1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c0:	79fa      	ldrb	r2, [r7, #7]
 800c1c2:	70da      	strb	r2, [r3, #3]
    fsp->type       = type;
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c1ca:	711a      	strb	r2, [r3, #4]

    uint8_t i = 0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	75fb      	strb	r3, [r7, #23]
    uint8_t j = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	75bb      	strb	r3, [r7, #22]

    // Copy cmd payload
    if (cmd != NULL) {
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00e      	beq.n	800c1f8 <fsp_gen_pkt+0x64>
        fsp->length++; // length + byte cmd
 800c1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1dc:	78db      	ldrb	r3, [r3, #3]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e4:	70da      	strb	r2, [r3, #3]
        fsp->payload[j++] = *cmd;
 800c1e6:	7dbb      	ldrb	r3, [r7, #22]
 800c1e8:	1c5a      	adds	r2, r3, #1
 800c1ea:	75ba      	strb	r2, [r7, #22]
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	781a      	ldrb	r2, [r3, #0]
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f4:	440b      	add	r3, r1
 800c1f6:	715a      	strb	r2, [r3, #5]
    }

    // Copy payload fsp->payload
    for(i=0; i<payload_len; i++)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	75fb      	strb	r3, [r7, #23]
 800c1fc:	e00d      	b.n	800c21a <fsp_gen_pkt+0x86>
    {
        fsp->payload[j++] = payload[i];
 800c1fe:	7dfb      	ldrb	r3, [r7, #23]
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	441a      	add	r2, r3
 800c204:	7dbb      	ldrb	r3, [r7, #22]
 800c206:	1c59      	adds	r1, r3, #1
 800c208:	75b9      	strb	r1, [r7, #22]
 800c20a:	4619      	mov	r1, r3
 800c20c:	7812      	ldrb	r2, [r2, #0]
 800c20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c210:	440b      	add	r3, r1
 800c212:	715a      	strb	r2, [r3, #5]
    for(i=0; i<payload_len; i++)
 800c214:	7dfb      	ldrb	r3, [r7, #23]
 800c216:	3301      	adds	r3, #1
 800c218:	75fb      	strb	r3, [r7, #23]
 800c21a:	7dfa      	ldrb	r2, [r7, #23]
 800c21c:	79fb      	ldrb	r3, [r7, #7]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d3ed      	bcc.n	800c1fe <fsp_gen_pkt+0x6a>
    }

    fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 800c222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c224:	1c59      	adds	r1, r3, #1
 800c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c228:	78db      	ldrb	r3, [r3, #3]
 800c22a:	3304      	adds	r3, #4
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	461a      	mov	r2, r3
 800c230:	2000      	movs	r0, #0
 800c232:	f7ff ff0b 	bl	800c04c <crc16_CCITT>
 800c236:	4603      	mov	r3, r0
 800c238:	461a      	mov	r2, r3
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

}
 800c240:	bf00      	nop
 800c242:	3718      	adds	r7, #24
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	2000828c 	.word	0x2000828c

0800c24c <frame_encode>:


void frame_encode(fsp_packet_t *fsp, uint8_t *frame, uint8_t *frame_len)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b0c8      	sub	sp, #288	@ 0x120
 800c250:	af00      	add	r7, sp, #0
 800c252:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c256:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c25a:	6018      	str	r0, [r3, #0]
 800c25c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c260:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c264:	6019      	str	r1, [r3, #0]
 800c266:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c26a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800c26e:	601a      	str	r2, [r3, #0]
    //frame
    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t encoded_length = 0;
 800c270:	2300      	movs	r3, #0
 800c272:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    encoded_frame[encoded_length++] = fsp->sod;
 800c276:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c27a:	1c5a      	adds	r2, r3, #1
 800c27c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c280:	461a      	mov	r2, r3
 800c282:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c286:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	7819      	ldrb	r1, [r3, #0]
 800c28e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c292:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c296:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->src_adr;
 800c298:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c29c:	1c5a      	adds	r2, r3, #1
 800c29e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	7859      	ldrb	r1, [r3, #1]
 800c2b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c2b8:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->dst_adr;
 800c2ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2be:	1c5a      	adds	r2, r3, #1
 800c2c0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	7899      	ldrb	r1, [r3, #2]
 800c2d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c2da:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->length;
 800c2dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2e0:	1c5a      	adds	r2, r3, #1
 800c2e2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	78d9      	ldrb	r1, [r3, #3]
 800c2f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c2fc:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->type;
 800c2fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c302:	1c5a      	adds	r2, r3, #1
 800c304:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c308:	461a      	mov	r2, r3
 800c30a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c30e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	7919      	ldrb	r1, [r3, #4]
 800c316:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c31a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c31e:	5499      	strb	r1, [r3, r2]

    for(int i=0; i<fsp->length; i++)
 800c320:	2300      	movs	r3, #0
 800c322:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c326:	e088      	b.n	800c43a <frame_encode+0x1ee>
    {
        if (fsp->payload[i] == FSP_PKT_SOD) {
 800c328:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c32c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c336:	4413      	add	r3, r2
 800c338:	3305      	adds	r3, #5
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	2bca      	cmp	r3, #202	@ 0xca
 800c33e:	d118      	bne.n	800c372 <frame_encode+0x126>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c340:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c344:	1c5a      	adds	r2, r3, #1
 800c346:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c34a:	461a      	mov	r2, r3
 800c34c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c350:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c354:	21bd      	movs	r1, #189	@ 0xbd
 800c356:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800c358:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c35c:	1c5a      	adds	r2, r3, #1
 800c35e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c362:	461a      	mov	r2, r3
 800c364:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c368:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c36c:	21dc      	movs	r1, #220	@ 0xdc
 800c36e:	5499      	strb	r1, [r3, r2]
 800c370:	e05e      	b.n	800c430 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_EOF) {
 800c372:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c376:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c380:	4413      	add	r3, r2
 800c382:	3305      	adds	r3, #5
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	2bef      	cmp	r3, #239	@ 0xef
 800c388:	d118      	bne.n	800c3bc <frame_encode+0x170>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c38a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c394:	461a      	mov	r2, r3
 800c396:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c39a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c39e:	21bd      	movs	r1, #189	@ 0xbd
 800c3a0:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800c3a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3a6:	1c5a      	adds	r2, r3, #1
 800c3a8:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c3b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c3b6:	21de      	movs	r1, #222	@ 0xde
 800c3b8:	5499      	strb	r1, [r3, r2]
 800c3ba:	e039      	b.n	800c430 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_ESC) {
 800c3bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c3c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c3ca:	4413      	add	r3, r2
 800c3cc:	3305      	adds	r3, #5
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	2bbd      	cmp	r3, #189	@ 0xbd
 800c3d2:	d118      	bne.n	800c406 <frame_encode+0x1ba>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c3d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c3e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c3e8:	21bd      	movs	r1, #189	@ 0xbd
 800c3ea:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800c3ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3f0:	1c5a      	adds	r2, r3, #1
 800c3f2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c3fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c400:	21db      	movs	r1, #219	@ 0xdb
 800c402:	5499      	strb	r1, [r3, r2]
 800c404:	e014      	b.n	800c430 <frame_encode+0x1e4>
        } else {
            encoded_frame[encoded_length++] = fsp->payload[i];
 800c406:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c40a:	1c5a      	adds	r2, r3, #1
 800c40c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c410:	4619      	mov	r1, r3
 800c412:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c416:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c420:	4413      	add	r3, r2
 800c422:	3305      	adds	r3, #5
 800c424:	781a      	ldrb	r2, [r3, #0]
 800c426:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c42a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c42e:	545a      	strb	r2, [r3, r1]
    for(int i=0; i<fsp->length; i++)
 800c430:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c434:	3301      	adds	r3, #1
 800c436:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c43a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c43e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	78db      	ldrb	r3, [r3, #3]
 800c446:	461a      	mov	r2, r3
 800c448:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c44c:	4293      	cmp	r3, r2
 800c44e:	f6ff af6b 	blt.w	800c328 <frame_encode+0xdc>
        }
    }

    // CRC16
    uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 800c452:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c456:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800c460:	0a1b      	lsrs	r3, r3, #8
 800c462:	b29b      	uxth	r3, r3
 800c464:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 800c468:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c46c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800c476:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

    if (crc_msb == FSP_PKT_SOD) {
 800c47a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c47e:	2bca      	cmp	r3, #202	@ 0xca
 800c480:	d118      	bne.n	800c4b4 <frame_encode+0x268>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c482:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c48c:	461a      	mov	r2, r3
 800c48e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c492:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c496:	21bd      	movs	r1, #189	@ 0xbd
 800c498:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800c49a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c49e:	1c5a      	adds	r2, r3, #1
 800c4a0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c4aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c4ae:	21dc      	movs	r1, #220	@ 0xdc
 800c4b0:	5499      	strb	r1, [r3, r2]
 800c4b2:	e046      	b.n	800c542 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_EOF) {
 800c4b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4b8:	2bef      	cmp	r3, #239	@ 0xef
 800c4ba:	d118      	bne.n	800c4ee <frame_encode+0x2a2>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c4bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c4cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c4d0:	21bd      	movs	r1, #189	@ 0xbd
 800c4d2:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800c4d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4d8:	1c5a      	adds	r2, r3, #1
 800c4da:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c4de:	461a      	mov	r2, r3
 800c4e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c4e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c4e8:	21de      	movs	r1, #222	@ 0xde
 800c4ea:	5499      	strb	r1, [r3, r2]
 800c4ec:	e029      	b.n	800c542 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_ESC) {
 800c4ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4f2:	2bbd      	cmp	r3, #189	@ 0xbd
 800c4f4:	d118      	bne.n	800c528 <frame_encode+0x2dc>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c4f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4fa:	1c5a      	adds	r2, r3, #1
 800c4fc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c500:	461a      	mov	r2, r3
 800c502:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c506:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c50a:	21bd      	movs	r1, #189	@ 0xbd
 800c50c:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800c50e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c518:	461a      	mov	r2, r3
 800c51a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c51e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c522:	21db      	movs	r1, #219	@ 0xdb
 800c524:	5499      	strb	r1, [r3, r2]
 800c526:	e00c      	b.n	800c542 <frame_encode+0x2f6>
    } else {
        encoded_frame[encoded_length++] = crc_msb;
 800c528:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c52c:	1c5a      	adds	r2, r3, #1
 800c52e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c532:	4619      	mov	r1, r3
 800c534:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c538:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c53c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800c540:	545a      	strb	r2, [r3, r1]
    }

    if (crc_lsb == FSP_PKT_SOD) {
 800c542:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c546:	2bca      	cmp	r3, #202	@ 0xca
 800c548:	d118      	bne.n	800c57c <frame_encode+0x330>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c54a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c554:	461a      	mov	r2, r3
 800c556:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c55a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c55e:	21bd      	movs	r1, #189	@ 0xbd
 800c560:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800c562:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c566:	1c5a      	adds	r2, r3, #1
 800c568:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c56c:	461a      	mov	r2, r3
 800c56e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c572:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c576:	21dc      	movs	r1, #220	@ 0xdc
 800c578:	5499      	strb	r1, [r3, r2]
 800c57a:	e046      	b.n	800c60a <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_EOF) {
 800c57c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c580:	2bef      	cmp	r3, #239	@ 0xef
 800c582:	d118      	bne.n	800c5b6 <frame_encode+0x36a>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c584:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c588:	1c5a      	adds	r2, r3, #1
 800c58a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c58e:	461a      	mov	r2, r3
 800c590:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c594:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c598:	21bd      	movs	r1, #189	@ 0xbd
 800c59a:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800c59c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c5ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c5b0:	21de      	movs	r1, #222	@ 0xde
 800c5b2:	5499      	strb	r1, [r3, r2]
 800c5b4:	e029      	b.n	800c60a <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_ESC) {
 800c5b6:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c5ba:	2bbd      	cmp	r3, #189	@ 0xbd
 800c5bc:	d118      	bne.n	800c5f0 <frame_encode+0x3a4>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c5be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5c2:	1c5a      	adds	r2, r3, #1
 800c5c4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c5ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c5d2:	21bd      	movs	r1, #189	@ 0xbd
 800c5d4:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800c5d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5da:	1c5a      	adds	r2, r3, #1
 800c5dc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c5e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c5ea:	21db      	movs	r1, #219	@ 0xdb
 800c5ec:	5499      	strb	r1, [r3, r2]
 800c5ee:	e00c      	b.n	800c60a <frame_encode+0x3be>
    } else {
        encoded_frame[encoded_length++] = crc_lsb;
 800c5f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5f4:	1c5a      	adds	r2, r3, #1
 800c5f6:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c600:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c604:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800c608:	545a      	strb	r2, [r3, r1]
    }

    encoded_frame[encoded_length++] = FSP_PKT_EOF;
 800c60a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c60e:	1c5a      	adds	r2, r3, #1
 800c610:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c614:	461a      	mov	r2, r3
 800c616:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c61a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c61e:	21ef      	movs	r1, #239	@ 0xef
 800c620:	5499      	strb	r1, [r3, r2]

    memcpy(frame, encoded_frame, encoded_length);
 800c622:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800c626:	f107 0114 	add.w	r1, r7, #20
 800c62a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c62e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c632:	6818      	ldr	r0, [r3, #0]
 800c634:	f003 fcdb 	bl	800ffee <memcpy>
    *frame_len = encoded_length;
 800c638:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c63c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800c646:	701a      	strb	r2, [r3, #0]
}
 800c648:	bf00      	nop
 800c64a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
	...

0800c654 <frame_decode>:
                return FSP_PKT_ERROR;
            }
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800c654:	b580      	push	{r7, lr}
 800c656:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c660:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c664:	6018      	str	r0, [r3, #0]
 800c666:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c66a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c674:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c678:	460a      	mov	r2, r1
 800c67a:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800c67c:	2300      	movs	r3, #0
 800c67e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800c688:	2300      	movs	r3, #0
 800c68a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];


	if (length < FSP_PKT_MIN_LENGTH - 2) {
 800c68e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c692:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	2b05      	cmp	r3, #5
 800c69a:	d862      	bhi.n	800c762 <frame_decode+0x10e>
	        return FSP_PKT_INVALID;
 800c69c:	2302      	movs	r3, #2
 800c69e:	e133      	b.n	800c908 <frame_decode+0x2b4>
	}


	while (i < length){
        uint8_t byte = buffer[i++];
 800c6a0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c6a4:	1c5a      	adds	r2, r3, #1
 800c6a6:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c6b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (escape) {
 800c6be:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d038      	beq.n	800c738 <frame_decode+0xe4>
            if (byte == FSP_PKT_TSOD) {
 800c6c6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c6ca:	2bdc      	cmp	r3, #220	@ 0xdc
 800c6cc:	d10c      	bne.n	800c6e8 <frame_decode+0x94>
                decoded_payload[j++] = FSP_PKT_SOD;
 800c6ce:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c6d8:	461a      	mov	r2, r3
 800c6da:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c6de:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c6e2:	21ca      	movs	r1, #202	@ 0xca
 800c6e4:	5499      	strb	r1, [r3, r2]
 800c6e6:	e023      	b.n	800c730 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TEOF) {
 800c6e8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c6ec:	2bde      	cmp	r3, #222	@ 0xde
 800c6ee:	d10c      	bne.n	800c70a <frame_decode+0xb6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800c6f0:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c700:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c704:	21ef      	movs	r1, #239	@ 0xef
 800c706:	5499      	strb	r1, [r3, r2]
 800c708:	e012      	b.n	800c730 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TESC) {
 800c70a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c70e:	2bdb      	cmp	r3, #219	@ 0xdb
 800c710:	d10c      	bne.n	800c72c <frame_decode+0xd8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800c712:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c716:	1c5a      	adds	r2, r3, #1
 800c718:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c71c:	461a      	mov	r2, r3
 800c71e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c722:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c726:	21bd      	movs	r1, #189	@ 0xbd
 800c728:	5499      	strb	r1, [r3, r2]
 800c72a:	e001      	b.n	800c730 <frame_decode+0xdc>
            } else {
            	return FSP_PKT_INVALID;
 800c72c:	2302      	movs	r3, #2
 800c72e:	e0eb      	b.n	800c908 <frame_decode+0x2b4>
            }
            escape = 0;
 800c730:	2300      	movs	r3, #0
 800c732:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800c736:	e014      	b.n	800c762 <frame_decode+0x10e>
        } else if (byte == FSP_PKT_ESC) {
 800c738:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c73c:	2bbd      	cmp	r3, #189	@ 0xbd
 800c73e:	d103      	bne.n	800c748 <frame_decode+0xf4>
        	escape = 1;
 800c740:	2301      	movs	r3, #1
 800c742:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800c746:	e00c      	b.n	800c762 <frame_decode+0x10e>
        } else {
            decoded_payload[j++] = byte;
 800c748:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c74c:	1c5a      	adds	r2, r3, #1
 800c74e:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c752:	4619      	mov	r1, r3
 800c754:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c758:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c75c:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800c760:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800c762:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c766:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c76a:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	429a      	cmp	r2, r3
 800c772:	d395      	bcc.n	800c6a0 <frame_decode+0x4c>
        }
	}

    i = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800c77a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c784:	461a      	mov	r2, r3
 800c786:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c78a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c78e:	5c9a      	ldrb	r2, [r3, r2]
 800c790:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c798:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800c79a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c79e:	1c5a      	adds	r2, r3, #1
 800c7a0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7aa:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c7ae:	5c9a      	ldrb	r2, [r3, r2]
 800c7b0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7b8:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800c7ba:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c7be:	1c5a      	adds	r2, r3, #1
 800c7c0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7ca:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c7ce:	5c9a      	ldrb	r2, [r3, r2]
 800c7d0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7d8:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800c7da:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7ea:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c7ee:	5c9a      	ldrb	r2, [r3, r2]
 800c7f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7f8:	711a      	strb	r2, [r3, #4]

    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 800c7fa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c802:	78db      	ldrb	r3, [r3, #3]
 800c804:	2bf7      	cmp	r3, #247	@ 0xf7
 800c806:	d80a      	bhi.n	800c81e <frame_decode+0x1ca>
 800c808:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c80c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c810:	78db      	ldrb	r3, [r3, #3]
 800c812:	461a      	mov	r2, r3
 800c814:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c818:	3b06      	subs	r3, #6
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d001      	beq.n	800c822 <frame_decode+0x1ce>
        return FSP_PKT_WRONG_LENGTH;
 800c81e:	2306      	movs	r3, #6
 800c820:	e072      	b.n	800c908 <frame_decode+0x2b4>
    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800c822:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c826:	f107 0210 	add.w	r2, r7, #16
 800c82a:	18d1      	adds	r1, r2, r3
 800c82c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c834:	78db      	ldrb	r3, [r3, #3]
 800c836:	461a      	mov	r2, r3
 800c838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c83c:	3305      	adds	r3, #5
 800c83e:	4618      	mov	r0, r3
 800c840:	f003 fbd5 	bl	800ffee <memcpy>
    i += fsp_pkt.length;
 800c844:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c84c:	78da      	ldrb	r2, [r3, #3]
 800c84e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c852:	4413      	add	r3, r2
 800c854:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    //CRC
    uint16_t crc_received = (uint16_t)(decoded_payload[i++] << 8);
 800c858:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c85c:	1c5a      	adds	r2, r3, #1
 800c85e:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c862:	461a      	mov	r2, r3
 800c864:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c868:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c86c:	5c9b      	ldrb	r3, [r3, r2]
 800c86e:	021b      	lsls	r3, r3, #8
 800c870:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
    crc_received |= (uint16_t)(decoded_payload[i++]);
 800c874:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c878:	1c5a      	adds	r2, r3, #1
 800c87a:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c87e:	461a      	mov	r2, r3
 800c880:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c884:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c888:	5c9b      	ldrb	r3, [r3, r2]
 800c88a:	461a      	mov	r2, r3
 800c88c:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 800c890:	4313      	orrs	r3, r2
 800c892:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a


    // CAL CRC
    uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp_pkt.src_adr, fsp_pkt.length + 4);
 800c896:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c89a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c89e:	78db      	ldrb	r3, [r3, #3]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	f7ff fbcd 	bl	800c04c <crc16_CCITT>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208


    // CHECK CRC
    if (crc_received != crc_calculated) {
 800c8b8:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 800c8bc:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d001      	beq.n	800c8c8 <frame_decode+0x274>
        return FSP_PKT_CRC_FAIL;
 800c8c4:	2305      	movs	r3, #5
 800c8c6:	e01f      	b.n	800c908 <frame_decode+0x2b4>
    }

    // Address
    if (fsp_pkt.dst_adr != fsp_my_adr) {
 800c8c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c8cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8d0:	789a      	ldrb	r2, [r3, #2]
 800c8d2:	4b10      	ldr	r3, [pc, #64]	@ (800c914 <frame_decode+0x2c0>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d001      	beq.n	800c8de <frame_decode+0x28a>
        return FSP_PKT_WRONG_ADR;
 800c8da:	2303      	movs	r3, #3
 800c8dc:	e014      	b.n	800c908 <frame_decode+0x2b4>
    }

    *pkt = fsp_pkt;
 800c8de:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c8e2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c8ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8f0:	4610      	mov	r0, r2
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	23fe      	movs	r3, #254	@ 0xfe
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f003 fb79 	bl	800ffee <memcpy>


    frame_processing(&fsp_pkt);
 800c8fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c900:	4618      	mov	r0, r3
 800c902:	f000 f905 	bl	800cb10 <frame_processing>


    return 0;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	2000828c 	.word	0x2000828c

0800c918 <frame_decode_rs422>:



int frame_decode_rs422(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800c918:	b580      	push	{r7, lr}
 800c91a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800c91e:	af00      	add	r7, sp, #0
 800c920:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c924:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c928:	6018      	str	r0, [r3, #0]
 800c92a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c92e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c938:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c93c:	460a      	mov	r2, r1
 800c93e:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800c940:	2300      	movs	r3, #0
 800c942:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800c946:	2300      	movs	r3, #0
 800c948:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800c94c:	2300      	movs	r3, #0
 800c94e:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
//	if (length < FSP_PKT_MIN_LENGTH - 2) {
//	        return FSP_PKT_INVALID;
//	}


	while (i < length){
 800c952:	e060      	b.n	800ca16 <frame_decode_rs422+0xfe>
        uint8_t byte = buffer[i++];
 800c954:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c95e:	461a      	mov	r2, r3
 800c960:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c964:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4413      	add	r3, r2
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (escape) {
 800c972:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800c976:	2b00      	cmp	r3, #0
 800c978:	d038      	beq.n	800c9ec <frame_decode_rs422+0xd4>
            if (byte == FSP_PKT_TSOD) {
 800c97a:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800c97e:	2bdc      	cmp	r3, #220	@ 0xdc
 800c980:	d10c      	bne.n	800c99c <frame_decode_rs422+0x84>
                decoded_payload[j++] = FSP_PKT_SOD;
 800c982:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c986:	1c5a      	adds	r2, r3, #1
 800c988:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c98c:	461a      	mov	r2, r3
 800c98e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c992:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c996:	21ca      	movs	r1, #202	@ 0xca
 800c998:	5499      	strb	r1, [r3, r2]
 800c99a:	e023      	b.n	800c9e4 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TEOF) {
 800c99c:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800c9a0:	2bde      	cmp	r3, #222	@ 0xde
 800c9a2:	d10c      	bne.n	800c9be <frame_decode_rs422+0xa6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800c9a4:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c9b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c9b8:	21ef      	movs	r1, #239	@ 0xef
 800c9ba:	5499      	strb	r1, [r3, r2]
 800c9bc:	e012      	b.n	800c9e4 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TESC) {
 800c9be:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800c9c2:	2bdb      	cmp	r3, #219	@ 0xdb
 800c9c4:	d10c      	bne.n	800c9e0 <frame_decode_rs422+0xc8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800c9c6:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c9ca:	1c5a      	adds	r2, r3, #1
 800c9cc:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c9d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c9da:	21bd      	movs	r1, #189	@ 0xbd
 800c9dc:	5499      	strb	r1, [r3, r2]
 800c9de:	e001      	b.n	800c9e4 <frame_decode_rs422+0xcc>
            } else {
            	return FSP_PKT_INVALID;
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	e08f      	b.n	800cb04 <frame_decode_rs422+0x1ec>
            }
            escape = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800c9ea:	e014      	b.n	800ca16 <frame_decode_rs422+0xfe>
        } else if (byte == FSP_PKT_ESC) {
 800c9ec:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800c9f0:	2bbd      	cmp	r3, #189	@ 0xbd
 800c9f2:	d103      	bne.n	800c9fc <frame_decode_rs422+0xe4>
        	escape = 1;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800c9fa:	e00c      	b.n	800ca16 <frame_decode_rs422+0xfe>
        } else {
            decoded_payload[j++] = byte;
 800c9fc:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800ca06:	4619      	mov	r1, r3
 800ca08:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800ca10:	f897 220c 	ldrb.w	r2, [r7, #524]	@ 0x20c
 800ca14:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800ca16:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca1a:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800ca1e:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d395      	bcc.n	800c954 <frame_decode_rs422+0x3c>
        }
	}

    i = 0;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800ca2e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ca32:	1c5a      	adds	r2, r3, #1
 800ca34:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800ca38:	461a      	mov	r2, r3
 800ca3a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800ca42:	5c9a      	ldrb	r2, [r3, r2]
 800ca44:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca4c:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800ca4e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ca52:	1c5a      	adds	r2, r3, #1
 800ca54:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800ca58:	461a      	mov	r2, r3
 800ca5a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800ca62:	5c9a      	ldrb	r2, [r3, r2]
 800ca64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca6c:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800ca6e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ca72:	1c5a      	adds	r2, r3, #1
 800ca74:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800ca78:	461a      	mov	r2, r3
 800ca7a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800ca82:	5c9a      	ldrb	r2, [r3, r2]
 800ca84:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca8c:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800ca8e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800ca98:	461a      	mov	r2, r3
 800ca9a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800caa2:	5c9a      	ldrb	r2, [r3, r2]
 800caa4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800caa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800caac:	711a      	strb	r2, [r3, #4]

//    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
//        return FSP_PKT_WRONG_LENGTH;
//    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800caae:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800cab2:	f107 0214 	add.w	r2, r7, #20
 800cab6:	18d1      	adds	r1, r2, r3
 800cab8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cabc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cac0:	78db      	ldrb	r3, [r3, #3]
 800cac2:	461a      	mov	r2, r3
 800cac4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800cac8:	3305      	adds	r3, #5
 800caca:	4618      	mov	r0, r3
 800cacc:	f003 fa8f 	bl	800ffee <memcpy>
    i += fsp_pkt.length;
 800cad0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cad8:	78da      	ldrb	r2, [r3, #3]
 800cada:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800cade:	4413      	add	r3, r2
 800cae0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
//    // Address
//    if (fsp_pkt.dst_adr != fsp_my_adr) {
//        return FSP_PKT_WRONG_ADR;
//    }

    *pkt = fsp_pkt;
 800cae4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cae8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800caf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800caf6:	4610      	mov	r0, r2
 800caf8:	4619      	mov	r1, r3
 800cafa:	23fe      	movs	r3, #254	@ 0xfe
 800cafc:	461a      	mov	r2, r3
 800cafe:	f003 fa76 	bl	800ffee <memcpy>


    return 0;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <frame_processing>:


char pos_str2[10];

int frame_processing(fsp_packet_t *fsp_pkt){
 800cb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb14:	f5ad 6de1 	sub.w	sp, sp, #1800	@ 0x708
 800cb18:	af34      	add	r7, sp, #208	@ 0xd0
 800cb1a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cb1e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cb22:	6018      	str	r0, [r3, #0]


	switch (fsp_pkt->src_adr){
 800cb24:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cb28:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	785b      	ldrb	r3, [r3, #1]
 800cb30:	3b02      	subs	r3, #2
 800cb32:	2b03      	cmp	r3, #3
 800cb34:	f202 81a6 	bhi.w	800ee84 <frame_processing+0x2374>
 800cb38:	a201      	add	r2, pc, #4	@ (adr r2, 800cb40 <frame_processing+0x30>)
 800cb3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3e:	bf00      	nop
 800cb40:	0800cb51 	.word	0x0800cb51
 800cb44:	0800d72b 	.word	0x0800d72b
 800cb48:	0800dfbd 	.word	0x0800dfbd
 800cb4c:	0800dfc5 	.word	0x0800dfc5
		case FSP_ADR_PMU:
			switch (fsp_pkt->type)
 800cb50:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cb54:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	791b      	ldrb	r3, [r3, #4]
 800cb5c:	2b05      	cmp	r3, #5
 800cb5e:	d003      	beq.n	800cb68 <frame_processing+0x58>
 800cb60:	2b07      	cmp	r3, #7
 800cb62:	d010      	beq.n	800cb86 <frame_processing+0x76>
 800cb64:	f000 bdd7 	b.w	800d716 <frame_processing+0xc06>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800cb68:	f7f5 fb7a 	bl	8002260 <clear_send_flag>

//                    if (uart_choose_uart5) {
//                    	Uart_sendstring(UART5, "\nPMU_ACK\r\n> ");
//                    }
                    if (uart_choose_usart2) {
 800cb6c:	4b9d      	ldr	r3, [pc, #628]	@ (800cde4 <frame_processing+0x2d4>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d003      	beq.n	800cb7e <frame_processing+0x6e>
                    	Uart_sendstring(USART2, "\nPMU_ACK\r\n> ");
 800cb76:	499c      	ldr	r1, [pc, #624]	@ (800cde8 <frame_processing+0x2d8>)
 800cb78:	489c      	ldr	r0, [pc, #624]	@ (800cdec <frame_processing+0x2dc>)
 800cb7a:	f7f5 fa2f 	bl	8001fdc <Uart_sendstring>
                    }
					Uart_sendstring(UART4, "\nPMU_ACK\r\n> ");
 800cb7e:	499a      	ldr	r1, [pc, #616]	@ (800cde8 <frame_processing+0x2d8>)
 800cb80:	489b      	ldr	r0, [pc, #620]	@ (800cdf0 <frame_processing+0x2e0>)
 800cb82:	f7f5 fa2b 	bl	8001fdc <Uart_sendstring>

				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800cb86:	f7f5 fb6b 	bl	8002260 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800cb8a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cb8e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	795b      	ldrb	r3, [r3, #5]
 800cb96:	2b08      	cmp	r3, #8
 800cb98:	dc1a      	bgt.n	800cbd0 <frame_processing+0xc0>
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	f2c0 85c0 	blt.w	800d720 <frame_processing+0xc10>
 800cba0:	2b08      	cmp	r3, #8
 800cba2:	f200 85bd 	bhi.w	800d720 <frame_processing+0xc10>
 800cba6:	a201      	add	r2, pc, #4	@ (adr r2, 800cbac <frame_processing+0x9c>)
 800cba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbac:	0800cbd9 	.word	0x0800cbd9
 800cbb0:	0800cc59 	.word	0x0800cc59
 800cbb4:	0800ceab 	.word	0x0800ceab
 800cbb8:	0800d02b 	.word	0x0800d02b
 800cbbc:	0800d11d 	.word	0x0800d11d
 800cbc0:	0800d721 	.word	0x0800d721
 800cbc4:	0800d721 	.word	0x0800d721
 800cbc8:	0800d721 	.word	0x0800d721
 800cbcc:	0800d1ed 	.word	0x0800d1ed
 800cbd0:	2bff      	cmp	r3, #255	@ 0xff
 800cbd2:	d021      	beq.n	800cc18 <frame_processing+0x108>

							    }
							    break;
					}

					break;
 800cbd4:	f000 bda4 	b.w	800d720 <frame_processing+0xc10>
							sprintf(buffer_0x00, "PMU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800cbd8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cbdc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	799b      	ldrb	r3, [r3, #6]
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cbea:	4982      	ldr	r1, [pc, #520]	@ (800cdf4 <frame_processing+0x2e4>)
 800cbec:	4618      	mov	r0, r3
 800cbee:	f003 f91b 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800cbf2:	4b7c      	ldr	r3, [pc, #496]	@ (800cde4 <frame_processing+0x2d4>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d005      	beq.n	800cc08 <frame_processing+0xf8>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800cbfc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cc00:	4619      	mov	r1, r3
 800cc02:	487a      	ldr	r0, [pc, #488]	@ (800cdec <frame_processing+0x2dc>)
 800cc04:	f7f5 f9ea 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x00);
 800cc08:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	4878      	ldr	r0, [pc, #480]	@ (800cdf0 <frame_processing+0x2e0>)
 800cc10:	f7f5 f9e4 	bl	8001fdc <Uart_sendstring>
							break;
 800cc14:	f000 bd7e 	b.w	800d714 <frame_processing+0xc04>
							sprintf(buffer_0xFF, "PMU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800cc18:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cc1c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	799b      	ldrb	r3, [r3, #6]
 800cc24:	461a      	mov	r2, r3
 800cc26:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cc2a:	4973      	ldr	r1, [pc, #460]	@ (800cdf8 <frame_processing+0x2e8>)
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f003 f8fb 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800cc32:	4b6c      	ldr	r3, [pc, #432]	@ (800cde4 <frame_processing+0x2d4>)
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d005      	beq.n	800cc48 <frame_processing+0x138>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800cc3c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cc40:	4619      	mov	r1, r3
 800cc42:	486a      	ldr	r0, [pc, #424]	@ (800cdec <frame_processing+0x2dc>)
 800cc44:	f7f5 f9ca 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0xFF);
 800cc48:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	4868      	ldr	r0, [pc, #416]	@ (800cdf0 <frame_processing+0x2e0>)
 800cc50:	f7f5 f9c4 	bl	8001fdc <Uart_sendstring>
							break;
 800cc54:	f000 bd5e 	b.w	800d714 <frame_processing+0xc04>
						    int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800cc58:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cc5c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	799b      	ldrb	r3, [r3, #6]
 800cc64:	021b      	lsls	r3, r3, #8
 800cc66:	b21a      	sxth	r2, r3
 800cc68:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cc6c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	79db      	ldrb	r3, [r3, #7]
 800cc74:	b21b      	sxth	r3, r3
 800cc76:	4313      	orrs	r3, r2
 800cc78:	f8a7 356e 	strh.w	r3, [r7, #1390]	@ 0x56e
						    int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800cc7c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cc80:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	7a1b      	ldrb	r3, [r3, #8]
 800cc88:	021b      	lsls	r3, r3, #8
 800cc8a:	b21a      	sxth	r2, r3
 800cc8c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cc90:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	7a5b      	ldrb	r3, [r3, #9]
 800cc98:	b21b      	sxth	r3, r3
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	f8a7 356c 	strh.w	r3, [r7, #1388]	@ 0x56c
						    int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800cca0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cca4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	7a9b      	ldrb	r3, [r3, #10]
 800ccac:	021b      	lsls	r3, r3, #8
 800ccae:	b21a      	sxth	r2, r3
 800ccb0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ccb4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	7adb      	ldrb	r3, [r3, #11]
 800ccbc:	b21b      	sxth	r3, r3
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	f8a7 356a 	strh.w	r3, [r7, #1386]	@ 0x56a
						    int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800ccc4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ccc8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	7b1b      	ldrb	r3, [r3, #12]
 800ccd0:	021b      	lsls	r3, r3, #8
 800ccd2:	b21a      	sxth	r2, r3
 800ccd4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ccd8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	7b5b      	ldrb	r3, [r3, #13]
 800cce0:	b21b      	sxth	r3, r3
 800cce2:	4313      	orrs	r3, r2
 800cce4:	f8a7 3568 	strh.w	r3, [r7, #1384]	@ 0x568
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cce8:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	da03      	bge.n	800ccf8 <frame_processing+0x1e8>
 800ccf0:	4b42      	ldr	r3, [pc, #264]	@ (800cdfc <frame_processing+0x2ec>)
 800ccf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ccf6:	e002      	b.n	800ccfe <frame_processing+0x1ee>
 800ccf8:	4b41      	ldr	r3, [pc, #260]	@ (800ce00 <frame_processing+0x2f0>)
 800ccfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800ccfe:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	bfb8      	it	lt
 800cd06:	425b      	neglt	r3, r3
 800cd08:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cd0a:	4a3e      	ldr	r2, [pc, #248]	@ (800ce04 <frame_processing+0x2f4>)
 800cd0c:	fb82 1203 	smull	r1, r2, r2, r3
 800cd10:	1152      	asrs	r2, r2, #5
 800cd12:	17db      	asrs	r3, r3, #31
 800cd14:	eba2 0c03 	sub.w	ip, r2, r3
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800cd18:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	bfb8      	it	lt
 800cd20:	425b      	neglt	r3, r3
 800cd22:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cd24:	4a37      	ldr	r2, [pc, #220]	@ (800ce04 <frame_processing+0x2f4>)
 800cd26:	fb82 1203 	smull	r1, r2, r2, r3
 800cd2a:	1151      	asrs	r1, r2, #5
 800cd2c:	17da      	asrs	r2, r3, #31
 800cd2e:	1a8c      	subs	r4, r1, r2
 800cd30:	2264      	movs	r2, #100	@ 0x64
 800cd32:	fb04 f202 	mul.w	r2, r4, r2
 800cd36:	1a9c      	subs	r4, r3, r2
 800cd38:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	da01      	bge.n	800cd44 <frame_processing+0x234>
 800cd40:	4e2e      	ldr	r6, [pc, #184]	@ (800cdfc <frame_processing+0x2ec>)
 800cd42:	e000      	b.n	800cd46 <frame_processing+0x236>
 800cd44:	4e2e      	ldr	r6, [pc, #184]	@ (800ce00 <frame_processing+0x2f0>)
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800cd46:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	bfb8      	it	lt
 800cd4e:	425b      	neglt	r3, r3
 800cd50:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cd52:	4a2c      	ldr	r2, [pc, #176]	@ (800ce04 <frame_processing+0x2f4>)
 800cd54:	fb82 1203 	smull	r1, r2, r2, r3
 800cd58:	1152      	asrs	r2, r2, #5
 800cd5a:	17db      	asrs	r3, r3, #31
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800cd62:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	bfb8      	it	lt
 800cd6a:	425b      	neglt	r3, r3
 800cd6c:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cd6e:	4a25      	ldr	r2, [pc, #148]	@ (800ce04 <frame_processing+0x2f4>)
 800cd70:	fb82 1203 	smull	r1, r2, r2, r3
 800cd74:	1151      	asrs	r1, r2, #5
 800cd76:	17da      	asrs	r2, r3, #31
 800cd78:	1a8d      	subs	r5, r1, r2
 800cd7a:	2264      	movs	r2, #100	@ 0x64
 800cd7c:	fb05 f202 	mul.w	r2, r5, r2
 800cd80:	1a9d      	subs	r5, r3, r2
 800cd82:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	da03      	bge.n	800cd92 <frame_processing+0x282>
 800cd8a:	4b1c      	ldr	r3, [pc, #112]	@ (800cdfc <frame_processing+0x2ec>)
 800cd8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cd90:	e002      	b.n	800cd98 <frame_processing+0x288>
 800cd92:	4b1b      	ldr	r3, [pc, #108]	@ (800ce00 <frame_processing+0x2f0>)
 800cd94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800cd98:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	bfb8      	it	lt
 800cda0:	425b      	neglt	r3, r3
 800cda2:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cda4:	4a17      	ldr	r2, [pc, #92]	@ (800ce04 <frame_processing+0x2f4>)
 800cda6:	fb82 1203 	smull	r1, r2, r2, r3
 800cdaa:	1152      	asrs	r2, r2, #5
 800cdac:	17db      	asrs	r3, r3, #31
 800cdae:	1ad3      	subs	r3, r2, r3
 800cdb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800cdb4:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	bfb8      	it	lt
 800cdbc:	425b      	neglt	r3, r3
 800cdbe:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cdc0:	4a10      	ldr	r2, [pc, #64]	@ (800ce04 <frame_processing+0x2f4>)
 800cdc2:	fb82 1203 	smull	r1, r2, r2, r3
 800cdc6:	1151      	asrs	r1, r2, #5
 800cdc8:	17da      	asrs	r2, r3, #31
 800cdca:	1a89      	subs	r1, r1, r2
 800cdcc:	2264      	movs	r2, #100	@ 0x64
 800cdce:	fb01 f202 	mul.w	r2, r1, r2
 800cdd2:	1a99      	subs	r1, r3, r2
 800cdd4:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	da15      	bge.n	800ce08 <frame_processing+0x2f8>
 800cddc:	4b07      	ldr	r3, [pc, #28]	@ (800cdfc <frame_processing+0x2ec>)
 800cdde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cde2:	e014      	b.n	800ce0e <frame_processing+0x2fe>
 800cde4:	200058d5 	.word	0x200058d5
 800cde8:	08015b14 	.word	0x08015b14
 800cdec:	40004400 	.word	0x40004400
 800cdf0:	40004c00 	.word	0x40004c00
 800cdf4:	08015b24 	.word	0x08015b24
 800cdf8:	08015b40 	.word	0x08015b40
 800cdfc:	08015b5c 	.word	0x08015b5c
 800ce00:	08015b60 	.word	0x08015b60
 800ce04:	51eb851f 	.word	0x51eb851f
 800ce08:	4bbc      	ldr	r3, [pc, #752]	@ (800d0fc <frame_processing+0x5ec>)
 800ce0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800ce0e:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	bfb8      	it	lt
 800ce16:	425b      	neglt	r3, r3
 800ce18:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800ce1a:	4ab9      	ldr	r2, [pc, #740]	@ (800d100 <frame_processing+0x5f0>)
 800ce1c:	fb82 0203 	smull	r0, r2, r2, r3
 800ce20:	1152      	asrs	r2, r2, #5
 800ce22:	17db      	asrs	r3, r3, #31
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800ce2a:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	bfb8      	it	lt
 800ce32:	425b      	neglt	r3, r3
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	4618      	mov	r0, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800ce38:	4bb1      	ldr	r3, [pc, #708]	@ (800d100 <frame_processing+0x5f0>)
 800ce3a:	fb83 2300 	smull	r2, r3, r3, r0
 800ce3e:	115a      	asrs	r2, r3, #5
 800ce40:	17c3      	asrs	r3, r0, #31
 800ce42:	1ad3      	subs	r3, r2, r3
 800ce44:	2264      	movs	r2, #100	@ 0x64
 800ce46:	fb02 f303 	mul.w	r3, r2, r3
 800ce4a:	1ac3      	subs	r3, r0, r3
 800ce4c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800ce50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce56:	9308      	str	r3, [sp, #32]
 800ce58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce5c:	9307      	str	r3, [sp, #28]
 800ce5e:	9106      	str	r1, [sp, #24]
 800ce60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce64:	9305      	str	r3, [sp, #20]
 800ce66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce6a:	9304      	str	r3, [sp, #16]
 800ce6c:	9503      	str	r5, [sp, #12]
 800ce6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ce72:	9302      	str	r3, [sp, #8]
 800ce74:	9601      	str	r6, [sp, #4]
 800ce76:	9400      	str	r4, [sp, #0]
 800ce78:	4663      	mov	r3, ip
 800ce7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ce7e:	49a1      	ldr	r1, [pc, #644]	@ (800d104 <frame_processing+0x5f4>)
 800ce80:	f002 ffd2 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800ce84:	4ba0      	ldr	r3, [pc, #640]	@ (800d108 <frame_processing+0x5f8>)
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d005      	beq.n	800ce9a <frame_processing+0x38a>
		                    	Uart_sendstring(USART2, buffer_0x01);
 800ce8e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ce92:	4619      	mov	r1, r3
 800ce94:	489d      	ldr	r0, [pc, #628]	@ (800d10c <frame_processing+0x5fc>)
 800ce96:	f7f5 f8a1 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x01);
 800ce9a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ce9e:	4619      	mov	r1, r3
 800cea0:	489b      	ldr	r0, [pc, #620]	@ (800d110 <frame_processing+0x600>)
 800cea2:	f7f5 f89b 	bl	8001fdc <Uart_sendstring>
						break;
 800cea6:	f000 bc35 	b.w	800d714 <frame_processing+0xc04>
					        uint16_t bat0 = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800ceaa:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ceae:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	799b      	ldrb	r3, [r3, #6]
 800ceb6:	021b      	lsls	r3, r3, #8
 800ceb8:	b21a      	sxth	r2, r3
 800ceba:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cebe:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	79db      	ldrb	r3, [r3, #7]
 800cec6:	b21b      	sxth	r3, r3
 800cec8:	4313      	orrs	r3, r2
 800ceca:	b21b      	sxth	r3, r3
 800cecc:	f8a7 3576 	strh.w	r3, [r7, #1398]	@ 0x576
					        uint16_t bat1 = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800ced0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ced4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	7a1b      	ldrb	r3, [r3, #8]
 800cedc:	021b      	lsls	r3, r3, #8
 800cede:	b21a      	sxth	r2, r3
 800cee0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cee4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	7a5b      	ldrb	r3, [r3, #9]
 800ceec:	b21b      	sxth	r3, r3
 800ceee:	4313      	orrs	r3, r2
 800cef0:	b21b      	sxth	r3, r3
 800cef2:	f8a7 3574 	strh.w	r3, [r7, #1396]	@ 0x574
					        uint16_t bat2 = (uint16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800cef6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cefa:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	7a9b      	ldrb	r3, [r3, #10]
 800cf02:	021b      	lsls	r3, r3, #8
 800cf04:	b21a      	sxth	r2, r3
 800cf06:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf0a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	7adb      	ldrb	r3, [r3, #11]
 800cf12:	b21b      	sxth	r3, r3
 800cf14:	4313      	orrs	r3, r2
 800cf16:	b21b      	sxth	r3, r3
 800cf18:	f8a7 3572 	strh.w	r3, [r7, #1394]	@ 0x572
					        uint16_t bat3 = (uint16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800cf1c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf20:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	7b1b      	ldrb	r3, [r3, #12]
 800cf28:	021b      	lsls	r3, r3, #8
 800cf2a:	b21a      	sxth	r2, r3
 800cf2c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf30:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	7b5b      	ldrb	r3, [r3, #13]
 800cf38:	b21b      	sxth	r3, r3
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	b21b      	sxth	r3, r3
 800cf3e:	f8a7 3570 	strh.w	r3, [r7, #1392]	@ 0x570
					        sprintf(buffer_0x02, "PMU_Res: CMDcode 0x02 [BAT0: %d.%02d V, BAT1: %d.%02d V, BAT2: %d.%02d V, BAT3: %d.%02d V]\n",
 800cf42:	f8b7 3576 	ldrh.w	r3, [r7, #1398]	@ 0x576
 800cf46:	4a6e      	ldr	r2, [pc, #440]	@ (800d100 <frame_processing+0x5f0>)
 800cf48:	fba2 2303 	umull	r2, r3, r2, r3
 800cf4c:	095b      	lsrs	r3, r3, #5
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	469c      	mov	ip, r3
 800cf52:	f8b7 3576 	ldrh.w	r3, [r7, #1398]	@ 0x576
 800cf56:	4a6a      	ldr	r2, [pc, #424]	@ (800d100 <frame_processing+0x5f0>)
 800cf58:	fba2 1203 	umull	r1, r2, r2, r3
 800cf5c:	0952      	lsrs	r2, r2, #5
 800cf5e:	2164      	movs	r1, #100	@ 0x64
 800cf60:	fb01 f202 	mul.w	r2, r1, r2
 800cf64:	1a9b      	subs	r3, r3, r2
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	469e      	mov	lr, r3
 800cf6a:	f8b7 3574 	ldrh.w	r3, [r7, #1396]	@ 0x574
 800cf6e:	4a64      	ldr	r2, [pc, #400]	@ (800d100 <frame_processing+0x5f0>)
 800cf70:	fba2 2303 	umull	r2, r3, r2, r3
 800cf74:	095b      	lsrs	r3, r3, #5
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	461c      	mov	r4, r3
 800cf7a:	f8b7 3574 	ldrh.w	r3, [r7, #1396]	@ 0x574
 800cf7e:	4a60      	ldr	r2, [pc, #384]	@ (800d100 <frame_processing+0x5f0>)
 800cf80:	fba2 1203 	umull	r1, r2, r2, r3
 800cf84:	0952      	lsrs	r2, r2, #5
 800cf86:	2164      	movs	r1, #100	@ 0x64
 800cf88:	fb01 f202 	mul.w	r2, r1, r2
 800cf8c:	1a9b      	subs	r3, r3, r2
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	461d      	mov	r5, r3
 800cf92:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	@ 0x572
 800cf96:	4a5a      	ldr	r2, [pc, #360]	@ (800d100 <frame_processing+0x5f0>)
 800cf98:	fba2 2303 	umull	r2, r3, r2, r3
 800cf9c:	095b      	lsrs	r3, r3, #5
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	461e      	mov	r6, r3
 800cfa2:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	@ 0x572
 800cfa6:	4a56      	ldr	r2, [pc, #344]	@ (800d100 <frame_processing+0x5f0>)
 800cfa8:	fba2 1203 	umull	r1, r2, r2, r3
 800cfac:	0952      	lsrs	r2, r2, #5
 800cfae:	2164      	movs	r1, #100	@ 0x64
 800cfb0:	fb01 f202 	mul.w	r2, r1, r2
 800cfb4:	1a9b      	subs	r3, r3, r2
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cfbc:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	@ 0x570
 800cfc0:	4a4f      	ldr	r2, [pc, #316]	@ (800d100 <frame_processing+0x5f0>)
 800cfc2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfc6:	095b      	lsrs	r3, r3, #5
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cfce:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	@ 0x570
 800cfd2:	4a4b      	ldr	r2, [pc, #300]	@ (800d100 <frame_processing+0x5f0>)
 800cfd4:	fba2 1203 	umull	r1, r2, r2, r3
 800cfd8:	0952      	lsrs	r2, r2, #5
 800cfda:	2164      	movs	r1, #100	@ 0x64
 800cfdc:	fb01 f202 	mul.w	r2, r1, r2
 800cfe0:	1a9b      	subs	r3, r3, r2
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800cfe8:	9305      	str	r3, [sp, #20]
 800cfea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cfee:	9204      	str	r2, [sp, #16]
 800cff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cff4:	9303      	str	r3, [sp, #12]
 800cff6:	9602      	str	r6, [sp, #8]
 800cff8:	9501      	str	r5, [sp, #4]
 800cffa:	9400      	str	r4, [sp, #0]
 800cffc:	4673      	mov	r3, lr
 800cffe:	4662      	mov	r2, ip
 800d000:	4944      	ldr	r1, [pc, #272]	@ (800d114 <frame_processing+0x604>)
 800d002:	f002 ff11 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800d006:	4b40      	ldr	r3, [pc, #256]	@ (800d108 <frame_processing+0x5f8>)
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d005      	beq.n	800d01c <frame_processing+0x50c>
		                    	Uart_sendstring(USART2, buffer_0x02);
 800d010:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d014:	4619      	mov	r1, r3
 800d016:	483d      	ldr	r0, [pc, #244]	@ (800d10c <frame_processing+0x5fc>)
 800d018:	f7f4 ffe0 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x02);
 800d01c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d020:	4619      	mov	r1, r3
 800d022:	483b      	ldr	r0, [pc, #236]	@ (800d110 <frame_processing+0x600>)
 800d024:	f7f4 ffda 	bl	8001fdc <Uart_sendstring>
							break;
 800d028:	e374      	b.n	800d714 <frame_processing+0xc04>
						    uint16_t vin = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800d02a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d02e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	799b      	ldrb	r3, [r3, #6]
 800d036:	021b      	lsls	r3, r3, #8
 800d038:	b21a      	sxth	r2, r3
 800d03a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d03e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	79db      	ldrb	r3, [r3, #7]
 800d046:	b21b      	sxth	r3, r3
 800d048:	4313      	orrs	r3, r2
 800d04a:	b21b      	sxth	r3, r3
 800d04c:	f8a7 357a 	strh.w	r3, [r7, #1402]	@ 0x57a
						    uint16_t iin = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800d050:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d054:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	7a1b      	ldrb	r3, [r3, #8]
 800d05c:	021b      	lsls	r3, r3, #8
 800d05e:	b21a      	sxth	r2, r3
 800d060:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d064:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	7a5b      	ldrb	r3, [r3, #9]
 800d06c:	b21b      	sxth	r3, r3
 800d06e:	4313      	orrs	r3, r2
 800d070:	b21b      	sxth	r3, r3
 800d072:	f8a7 3578 	strh.w	r3, [r7, #1400]	@ 0x578
						    sprintf(buffer_0x03, "PMU_Res: CMDcode 0x03 [VIN: %d.%02d V, IIN: %d.%02d A]\n",
 800d076:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	@ 0x57a
 800d07a:	4a21      	ldr	r2, [pc, #132]	@ (800d100 <frame_processing+0x5f0>)
 800d07c:	fba2 2303 	umull	r2, r3, r2, r3
 800d080:	095b      	lsrs	r3, r3, #5
 800d082:	b29b      	uxth	r3, r3
 800d084:	461d      	mov	r5, r3
 800d086:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	@ 0x57a
 800d08a:	4a1d      	ldr	r2, [pc, #116]	@ (800d100 <frame_processing+0x5f0>)
 800d08c:	fba2 1203 	umull	r1, r2, r2, r3
 800d090:	0952      	lsrs	r2, r2, #5
 800d092:	2164      	movs	r1, #100	@ 0x64
 800d094:	fb01 f202 	mul.w	r2, r1, r2
 800d098:	1a9b      	subs	r3, r3, r2
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	461e      	mov	r6, r3
 800d09e:	f8b7 3578 	ldrh.w	r3, [r7, #1400]	@ 0x578
 800d0a2:	4a17      	ldr	r2, [pc, #92]	@ (800d100 <frame_processing+0x5f0>)
 800d0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0a8:	095b      	lsrs	r3, r3, #5
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	461c      	mov	r4, r3
 800d0ae:	f8b7 3578 	ldrh.w	r3, [r7, #1400]	@ 0x578
 800d0b2:	4a13      	ldr	r2, [pc, #76]	@ (800d100 <frame_processing+0x5f0>)
 800d0b4:	fba2 1203 	umull	r1, r2, r2, r3
 800d0b8:	0952      	lsrs	r2, r2, #5
 800d0ba:	2164      	movs	r1, #100	@ 0x64
 800d0bc:	fb01 f202 	mul.w	r2, r1, r2
 800d0c0:	1a9b      	subs	r3, r3, r2
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d0c8:	9301      	str	r3, [sp, #4]
 800d0ca:	9400      	str	r4, [sp, #0]
 800d0cc:	4633      	mov	r3, r6
 800d0ce:	462a      	mov	r2, r5
 800d0d0:	4911      	ldr	r1, [pc, #68]	@ (800d118 <frame_processing+0x608>)
 800d0d2:	f002 fea9 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800d0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d108 <frame_processing+0x5f8>)
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d005      	beq.n	800d0ec <frame_processing+0x5dc>
		                    	Uart_sendstring(USART2, buffer_0x03);
 800d0e0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	4809      	ldr	r0, [pc, #36]	@ (800d10c <frame_processing+0x5fc>)
 800d0e8:	f7f4 ff78 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x03);
 800d0ec:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	4807      	ldr	r0, [pc, #28]	@ (800d110 <frame_processing+0x600>)
 800d0f4:	f7f4 ff72 	bl	8001fdc <Uart_sendstring>
						    break;
 800d0f8:	e30c      	b.n	800d714 <frame_processing+0xc04>
 800d0fa:	bf00      	nop
 800d0fc:	08015b60 	.word	0x08015b60
 800d100:	51eb851f 	.word	0x51eb851f
 800d104:	08015b64 	.word	0x08015b64
 800d108:	200058d5 	.word	0x200058d5
 800d10c:	40004400 	.word	0x40004400
 800d110:	40004c00 	.word	0x40004c00
 800d114:	08015bc4 	.word	0x08015bc4
 800d118:	08015c20 	.word	0x08015c20
						    uint16_t vout = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800d11c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d120:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	799b      	ldrb	r3, [r3, #6]
 800d128:	021b      	lsls	r3, r3, #8
 800d12a:	b21a      	sxth	r2, r3
 800d12c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d130:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	79db      	ldrb	r3, [r3, #7]
 800d138:	b21b      	sxth	r3, r3
 800d13a:	4313      	orrs	r3, r2
 800d13c:	b21b      	sxth	r3, r3
 800d13e:	f8a7 357e 	strh.w	r3, [r7, #1406]	@ 0x57e
						    uint16_t iout = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800d142:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d146:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	7a1b      	ldrb	r3, [r3, #8]
 800d14e:	021b      	lsls	r3, r3, #8
 800d150:	b21a      	sxth	r2, r3
 800d152:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d156:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	7a5b      	ldrb	r3, [r3, #9]
 800d15e:	b21b      	sxth	r3, r3
 800d160:	4313      	orrs	r3, r2
 800d162:	b21b      	sxth	r3, r3
 800d164:	f8a7 357c 	strh.w	r3, [r7, #1404]	@ 0x57c
						    sprintf(buffer_0x04_pmu, "PMU_Res: CMDcode 0x04 [VOUT: %d.%02d V, IOUT: %d.%02d A]\n",
 800d168:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 800d16c:	4abf      	ldr	r2, [pc, #764]	@ (800d46c <frame_processing+0x95c>)
 800d16e:	fba2 2303 	umull	r2, r3, r2, r3
 800d172:	095b      	lsrs	r3, r3, #5
 800d174:	b29b      	uxth	r3, r3
 800d176:	461d      	mov	r5, r3
 800d178:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 800d17c:	4abb      	ldr	r2, [pc, #748]	@ (800d46c <frame_processing+0x95c>)
 800d17e:	fba2 1203 	umull	r1, r2, r2, r3
 800d182:	0952      	lsrs	r2, r2, #5
 800d184:	2164      	movs	r1, #100	@ 0x64
 800d186:	fb01 f202 	mul.w	r2, r1, r2
 800d18a:	1a9b      	subs	r3, r3, r2
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	461e      	mov	r6, r3
 800d190:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 800d194:	4ab5      	ldr	r2, [pc, #724]	@ (800d46c <frame_processing+0x95c>)
 800d196:	fba2 2303 	umull	r2, r3, r2, r3
 800d19a:	095b      	lsrs	r3, r3, #5
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	461c      	mov	r4, r3
 800d1a0:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 800d1a4:	4ab1      	ldr	r2, [pc, #708]	@ (800d46c <frame_processing+0x95c>)
 800d1a6:	fba2 1203 	umull	r1, r2, r2, r3
 800d1aa:	0952      	lsrs	r2, r2, #5
 800d1ac:	2164      	movs	r1, #100	@ 0x64
 800d1ae:	fb01 f202 	mul.w	r2, r1, r2
 800d1b2:	1a9b      	subs	r3, r3, r2
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d1ba:	9301      	str	r3, [sp, #4]
 800d1bc:	9400      	str	r4, [sp, #0]
 800d1be:	4633      	mov	r3, r6
 800d1c0:	462a      	mov	r2, r5
 800d1c2:	49ab      	ldr	r1, [pc, #684]	@ (800d470 <frame_processing+0x960>)
 800d1c4:	f002 fe30 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800d1c8:	4baa      	ldr	r3, [pc, #680]	@ (800d474 <frame_processing+0x964>)
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d005      	beq.n	800d1de <frame_processing+0x6ce>
		                    	Uart_sendstring(USART2, buffer_0x04_pmu);
 800d1d2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	48a7      	ldr	r0, [pc, #668]	@ (800d478 <frame_processing+0x968>)
 800d1da:	f7f4 feff 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x04_pmu);
 800d1de:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	48a5      	ldr	r0, [pc, #660]	@ (800d47c <frame_processing+0x96c>)
 800d1e6:	f7f4 fef9 	bl	8001fdc <Uart_sendstring>
							break;
 800d1ea:	e293      	b.n	800d714 <frame_processing+0xc04>
							    	int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800d1ec:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d1f0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	799b      	ldrb	r3, [r3, #6]
 800d1f8:	021b      	lsls	r3, r3, #8
 800d1fa:	b21a      	sxth	r2, r3
 800d1fc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d200:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	79db      	ldrb	r3, [r3, #7]
 800d208:	b21b      	sxth	r3, r3
 800d20a:	4313      	orrs	r3, r2
 800d20c:	f8a7 3596 	strh.w	r3, [r7, #1430]	@ 0x596
							    	int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800d210:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d214:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	7a1b      	ldrb	r3, [r3, #8]
 800d21c:	021b      	lsls	r3, r3, #8
 800d21e:	b21a      	sxth	r2, r3
 800d220:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d224:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	7a5b      	ldrb	r3, [r3, #9]
 800d22c:	b21b      	sxth	r3, r3
 800d22e:	4313      	orrs	r3, r2
 800d230:	f8a7 3594 	strh.w	r3, [r7, #1428]	@ 0x594
							    	int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800d234:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d238:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	7a9b      	ldrb	r3, [r3, #10]
 800d240:	021b      	lsls	r3, r3, #8
 800d242:	b21a      	sxth	r2, r3
 800d244:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d248:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	7adb      	ldrb	r3, [r3, #11]
 800d250:	b21b      	sxth	r3, r3
 800d252:	4313      	orrs	r3, r2
 800d254:	f8a7 3592 	strh.w	r3, [r7, #1426]	@ 0x592
							    	int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800d258:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d25c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	7b1b      	ldrb	r3, [r3, #12]
 800d264:	021b      	lsls	r3, r3, #8
 800d266:	b21a      	sxth	r2, r3
 800d268:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d26c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	7b5b      	ldrb	r3, [r3, #13]
 800d274:	b21b      	sxth	r3, r3
 800d276:	4313      	orrs	r3, r2
 800d278:	f8a7 3590 	strh.w	r3, [r7, #1424]	@ 0x590
							    	uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800d27c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d280:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	7b9b      	ldrb	r3, [r3, #14]
 800d288:	021b      	lsls	r3, r3, #8
 800d28a:	b21a      	sxth	r2, r3
 800d28c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d290:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	7bdb      	ldrb	r3, [r3, #15]
 800d298:	b21b      	sxth	r3, r3
 800d29a:	4313      	orrs	r3, r2
 800d29c:	b21b      	sxth	r3, r3
 800d29e:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e
							    	uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800d2a2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d2a6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	7c1b      	ldrb	r3, [r3, #16]
 800d2ae:	021b      	lsls	r3, r3, #8
 800d2b0:	b21a      	sxth	r2, r3
 800d2b2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d2b6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	7c5b      	ldrb	r3, [r3, #17]
 800d2be:	b21b      	sxth	r3, r3
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	b21b      	sxth	r3, r3
 800d2c4:	f8a7 358c 	strh.w	r3, [r7, #1420]	@ 0x58c
							    	uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800d2c8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d2cc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	7c9b      	ldrb	r3, [r3, #18]
 800d2d4:	021b      	lsls	r3, r3, #8
 800d2d6:	b21a      	sxth	r2, r3
 800d2d8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d2dc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	7cdb      	ldrb	r3, [r3, #19]
 800d2e4:	b21b      	sxth	r3, r3
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	b21b      	sxth	r3, r3
 800d2ea:	f8a7 358a 	strh.w	r3, [r7, #1418]	@ 0x58a
							    	uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800d2ee:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d2f2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	7d1b      	ldrb	r3, [r3, #20]
 800d2fa:	021b      	lsls	r3, r3, #8
 800d2fc:	b21a      	sxth	r2, r3
 800d2fe:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d302:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	7d5b      	ldrb	r3, [r3, #21]
 800d30a:	b21b      	sxth	r3, r3
 800d30c:	4313      	orrs	r3, r2
 800d30e:	b21b      	sxth	r3, r3
 800d310:	f8a7 3588 	strh.w	r3, [r7, #1416]	@ 0x588
							    	uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800d314:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d318:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	7d9b      	ldrb	r3, [r3, #22]
 800d320:	021b      	lsls	r3, r3, #8
 800d322:	b21a      	sxth	r2, r3
 800d324:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d328:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	7ddb      	ldrb	r3, [r3, #23]
 800d330:	b21b      	sxth	r3, r3
 800d332:	4313      	orrs	r3, r2
 800d334:	b21b      	sxth	r3, r3
 800d336:	f8a7 3586 	strh.w	r3, [r7, #1414]	@ 0x586
							    	uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800d33a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d33e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	7e1b      	ldrb	r3, [r3, #24]
 800d346:	021b      	lsls	r3, r3, #8
 800d348:	b21a      	sxth	r2, r3
 800d34a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d34e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	7e5b      	ldrb	r3, [r3, #25]
 800d356:	b21b      	sxth	r3, r3
 800d358:	4313      	orrs	r3, r2
 800d35a:	b21b      	sxth	r3, r3
 800d35c:	f8a7 3584 	strh.w	r3, [r7, #1412]	@ 0x584
							    	uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800d360:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d364:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	7e9b      	ldrb	r3, [r3, #26]
 800d36c:	021b      	lsls	r3, r3, #8
 800d36e:	b21a      	sxth	r2, r3
 800d370:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d374:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	7edb      	ldrb	r3, [r3, #27]
 800d37c:	b21b      	sxth	r3, r3
 800d37e:	4313      	orrs	r3, r2
 800d380:	b21b      	sxth	r3, r3
 800d382:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582
							    	uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800d386:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d38a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	7f1b      	ldrb	r3, [r3, #28]
 800d392:	021b      	lsls	r3, r3, #8
 800d394:	b21a      	sxth	r2, r3
 800d396:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d39a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	7f5b      	ldrb	r3, [r3, #29]
 800d3a2:	b21b      	sxth	r3, r3
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	b21b      	sxth	r3, r3
 800d3a8:	f8a7 3580 	strh.w	r3, [r7, #1408]	@ 0x580
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d3ac:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	da03      	bge.n	800d3bc <frame_processing+0x8ac>
 800d3b4:	4b32      	ldr	r3, [pc, #200]	@ (800d480 <frame_processing+0x970>)
 800d3b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d3ba:	e002      	b.n	800d3c2 <frame_processing+0x8b2>
 800d3bc:	4b31      	ldr	r3, [pc, #196]	@ (800d484 <frame_processing+0x974>)
 800d3be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800d3c2:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	bfb8      	it	lt
 800d3ca:	425b      	neglt	r3, r3
 800d3cc:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d3ce:	4a27      	ldr	r2, [pc, #156]	@ (800d46c <frame_processing+0x95c>)
 800d3d0:	fb82 1203 	smull	r1, r2, r2, r3
 800d3d4:	1152      	asrs	r2, r2, #5
 800d3d6:	17db      	asrs	r3, r3, #31
 800d3d8:	eba2 0c03 	sub.w	ip, r2, r3
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800d3dc:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	bfb8      	it	lt
 800d3e4:	425b      	neglt	r3, r3
 800d3e6:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d3e8:	4a20      	ldr	r2, [pc, #128]	@ (800d46c <frame_processing+0x95c>)
 800d3ea:	fb82 1203 	smull	r1, r2, r2, r3
 800d3ee:	1151      	asrs	r1, r2, #5
 800d3f0:	17da      	asrs	r2, r3, #31
 800d3f2:	1a8a      	subs	r2, r1, r2
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	2264      	movs	r2, #100	@ 0x64
 800d3f8:	fb01 f202 	mul.w	r2, r1, r2
 800d3fc:	1a9b      	subs	r3, r3, r2
 800d3fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d402:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800d406:	2b00      	cmp	r3, #0
 800d408:	da03      	bge.n	800d412 <frame_processing+0x902>
 800d40a:	4b1d      	ldr	r3, [pc, #116]	@ (800d480 <frame_processing+0x970>)
 800d40c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d410:	e002      	b.n	800d418 <frame_processing+0x908>
 800d412:	4b1c      	ldr	r3, [pc, #112]	@ (800d484 <frame_processing+0x974>)
 800d414:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800d418:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	bfb8      	it	lt
 800d420:	425b      	neglt	r3, r3
 800d422:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d424:	4a11      	ldr	r2, [pc, #68]	@ (800d46c <frame_processing+0x95c>)
 800d426:	fb82 1203 	smull	r1, r2, r2, r3
 800d42a:	1152      	asrs	r2, r2, #5
 800d42c:	17db      	asrs	r3, r3, #31
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800d434:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800d438:	2b00      	cmp	r3, #0
 800d43a:	bfb8      	it	lt
 800d43c:	425b      	neglt	r3, r3
 800d43e:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d440:	4a0a      	ldr	r2, [pc, #40]	@ (800d46c <frame_processing+0x95c>)
 800d442:	fb82 1203 	smull	r1, r2, r2, r3
 800d446:	1151      	asrs	r1, r2, #5
 800d448:	17da      	asrs	r2, r3, #31
 800d44a:	1a8a      	subs	r2, r1, r2
 800d44c:	4611      	mov	r1, r2
 800d44e:	2264      	movs	r2, #100	@ 0x64
 800d450:	fb01 f202 	mul.w	r2, r1, r2
 800d454:	1a9b      	subs	r3, r3, r2
 800d456:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d45a:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800d45e:	2b00      	cmp	r3, #0
 800d460:	da12      	bge.n	800d488 <frame_processing+0x978>
 800d462:	4b07      	ldr	r3, [pc, #28]	@ (800d480 <frame_processing+0x970>)
 800d464:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d468:	e011      	b.n	800d48e <frame_processing+0x97e>
 800d46a:	bf00      	nop
 800d46c:	51eb851f 	.word	0x51eb851f
 800d470:	08015c58 	.word	0x08015c58
 800d474:	200058d5 	.word	0x200058d5
 800d478:	40004400 	.word	0x40004400
 800d47c:	40004c00 	.word	0x40004c00
 800d480:	08015b5c 	.word	0x08015b5c
 800d484:	08015b60 	.word	0x08015b60
 800d488:	4bb6      	ldr	r3, [pc, #728]	@ (800d764 <frame_processing+0xc54>)
 800d48a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800d48e:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800d492:	2b00      	cmp	r3, #0
 800d494:	bfb8      	it	lt
 800d496:	425b      	neglt	r3, r3
 800d498:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d49a:	4ab3      	ldr	r2, [pc, #716]	@ (800d768 <frame_processing+0xc58>)
 800d49c:	fb82 1203 	smull	r1, r2, r2, r3
 800d4a0:	1152      	asrs	r2, r2, #5
 800d4a2:	17db      	asrs	r3, r3, #31
 800d4a4:	1ad3      	subs	r3, r2, r3
 800d4a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800d4aa:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	bfb8      	it	lt
 800d4b2:	425b      	neglt	r3, r3
 800d4b4:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d4b6:	4aac      	ldr	r2, [pc, #688]	@ (800d768 <frame_processing+0xc58>)
 800d4b8:	fb82 1203 	smull	r1, r2, r2, r3
 800d4bc:	1151      	asrs	r1, r2, #5
 800d4be:	17da      	asrs	r2, r3, #31
 800d4c0:	1a8a      	subs	r2, r1, r2
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	2264      	movs	r2, #100	@ 0x64
 800d4c6:	fb01 f202 	mul.w	r2, r1, r2
 800d4ca:	1a9b      	subs	r3, r3, r2
 800d4cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d4d0:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	da03      	bge.n	800d4e0 <frame_processing+0x9d0>
 800d4d8:	4ba4      	ldr	r3, [pc, #656]	@ (800d76c <frame_processing+0xc5c>)
 800d4da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d4de:	e002      	b.n	800d4e6 <frame_processing+0x9d6>
 800d4e0:	4ba0      	ldr	r3, [pc, #640]	@ (800d764 <frame_processing+0xc54>)
 800d4e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800d4e6:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	bfb8      	it	lt
 800d4ee:	425b      	neglt	r3, r3
 800d4f0:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d4f2:	4a9d      	ldr	r2, [pc, #628]	@ (800d768 <frame_processing+0xc58>)
 800d4f4:	fb82 1203 	smull	r1, r2, r2, r3
 800d4f8:	1152      	asrs	r2, r2, #5
 800d4fa:	17db      	asrs	r3, r3, #31
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800d502:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800d506:	2b00      	cmp	r3, #0
 800d508:	bfb8      	it	lt
 800d50a:	425b      	neglt	r3, r3
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	4619      	mov	r1, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d510:	4b95      	ldr	r3, [pc, #596]	@ (800d768 <frame_processing+0xc58>)
 800d512:	fb83 2301 	smull	r2, r3, r3, r1
 800d516:	115a      	asrs	r2, r3, #5
 800d518:	17cb      	asrs	r3, r1, #31
 800d51a:	1ad6      	subs	r6, r2, r3
 800d51c:	2364      	movs	r3, #100	@ 0x64
 800d51e:	fb06 f303 	mul.w	r3, r6, r3
 800d522:	1ace      	subs	r6, r1, r3
 800d524:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 800d528:	4a8f      	ldr	r2, [pc, #572]	@ (800d768 <frame_processing+0xc58>)
 800d52a:	fba2 2303 	umull	r2, r3, r2, r3
 800d52e:	095b      	lsrs	r3, r3, #5
 800d530:	b29b      	uxth	r3, r3
 800d532:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d536:	f8b7 158e 	ldrh.w	r1, [r7, #1422]	@ 0x58e
 800d53a:	4b8b      	ldr	r3, [pc, #556]	@ (800d768 <frame_processing+0xc58>)
 800d53c:	fba3 2301 	umull	r2, r3, r3, r1
 800d540:	095a      	lsrs	r2, r3, #5
 800d542:	2364      	movs	r3, #100	@ 0x64
 800d544:	fb02 f303 	mul.w	r3, r2, r3
 800d548:	1acb      	subs	r3, r1, r3
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d550:	f8b7 258c 	ldrh.w	r2, [r7, #1420]	@ 0x58c
 800d554:	4b84      	ldr	r3, [pc, #528]	@ (800d768 <frame_processing+0xc58>)
 800d556:	fba3 2302 	umull	r2, r3, r3, r2
 800d55a:	095b      	lsrs	r3, r3, #5
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d562:	f8b7 158c 	ldrh.w	r1, [r7, #1420]	@ 0x58c
 800d566:	4b80      	ldr	r3, [pc, #512]	@ (800d768 <frame_processing+0xc58>)
 800d568:	fba3 2301 	umull	r2, r3, r3, r1
 800d56c:	095a      	lsrs	r2, r3, #5
 800d56e:	2364      	movs	r3, #100	@ 0x64
 800d570:	fb02 f303 	mul.w	r3, r2, r3
 800d574:	1acb      	subs	r3, r1, r3
 800d576:	b29b      	uxth	r3, r3
 800d578:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d57a:	f8b7 258a 	ldrh.w	r2, [r7, #1418]	@ 0x58a
 800d57e:	4b7a      	ldr	r3, [pc, #488]	@ (800d768 <frame_processing+0xc58>)
 800d580:	fba3 2302 	umull	r2, r3, r3, r2
 800d584:	095b      	lsrs	r3, r3, #5
 800d586:	b29b      	uxth	r3, r3
 800d588:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d58a:	f8b7 158a 	ldrh.w	r1, [r7, #1418]	@ 0x58a
 800d58e:	4b76      	ldr	r3, [pc, #472]	@ (800d768 <frame_processing+0xc58>)
 800d590:	fba3 2301 	umull	r2, r3, r3, r1
 800d594:	095a      	lsrs	r2, r3, #5
 800d596:	2364      	movs	r3, #100	@ 0x64
 800d598:	fb02 f303 	mul.w	r3, r2, r3
 800d59c:	1acb      	subs	r3, r1, r3
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	677b      	str	r3, [r7, #116]	@ 0x74
 800d5a2:	f8b7 2588 	ldrh.w	r2, [r7, #1416]	@ 0x588
 800d5a6:	4b70      	ldr	r3, [pc, #448]	@ (800d768 <frame_processing+0xc58>)
 800d5a8:	fba3 2302 	umull	r2, r3, r3, r2
 800d5ac:	095b      	lsrs	r3, r3, #5
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5b2:	f8b7 1588 	ldrh.w	r1, [r7, #1416]	@ 0x588
 800d5b6:	4b6c      	ldr	r3, [pc, #432]	@ (800d768 <frame_processing+0xc58>)
 800d5b8:	fba3 2301 	umull	r2, r3, r3, r1
 800d5bc:	095a      	lsrs	r2, r3, #5
 800d5be:	2364      	movs	r3, #100	@ 0x64
 800d5c0:	fb02 f303 	mul.w	r3, r2, r3
 800d5c4:	1acb      	subs	r3, r1, r3
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d5ca:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	@ 0x586
 800d5ce:	4b66      	ldr	r3, [pc, #408]	@ (800d768 <frame_processing+0xc58>)
 800d5d0:	fba3 2302 	umull	r2, r3, r3, r2
 800d5d4:	095b      	lsrs	r3, r3, #5
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d5da:	f8b7 1586 	ldrh.w	r1, [r7, #1414]	@ 0x586
 800d5de:	4b62      	ldr	r3, [pc, #392]	@ (800d768 <frame_processing+0xc58>)
 800d5e0:	fba3 2301 	umull	r2, r3, r3, r1
 800d5e4:	095a      	lsrs	r2, r3, #5
 800d5e6:	2364      	movs	r3, #100	@ 0x64
 800d5e8:	fb02 f303 	mul.w	r3, r2, r3
 800d5ec:	1acb      	subs	r3, r1, r3
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800d5f2:	f8b7 2584 	ldrh.w	r2, [r7, #1412]	@ 0x584
 800d5f6:	4b5c      	ldr	r3, [pc, #368]	@ (800d768 <frame_processing+0xc58>)
 800d5f8:	fba3 2302 	umull	r2, r3, r3, r2
 800d5fc:	095b      	lsrs	r3, r3, #5
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	663b      	str	r3, [r7, #96]	@ 0x60
 800d602:	f8b7 1584 	ldrh.w	r1, [r7, #1412]	@ 0x584
 800d606:	4b58      	ldr	r3, [pc, #352]	@ (800d768 <frame_processing+0xc58>)
 800d608:	fba3 2301 	umull	r2, r3, r3, r1
 800d60c:	095a      	lsrs	r2, r3, #5
 800d60e:	2364      	movs	r3, #100	@ 0x64
 800d610:	fb02 f303 	mul.w	r3, r2, r3
 800d614:	1acb      	subs	r3, r1, r3
 800d616:	b29b      	uxth	r3, r3
 800d618:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d61a:	f8b7 2582 	ldrh.w	r2, [r7, #1410]	@ 0x582
 800d61e:	4b52      	ldr	r3, [pc, #328]	@ (800d768 <frame_processing+0xc58>)
 800d620:	fba3 2302 	umull	r2, r3, r3, r2
 800d624:	095b      	lsrs	r3, r3, #5
 800d626:	b29b      	uxth	r3, r3
 800d628:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d62a:	f8b7 1582 	ldrh.w	r1, [r7, #1410]	@ 0x582
 800d62e:	4b4e      	ldr	r3, [pc, #312]	@ (800d768 <frame_processing+0xc58>)
 800d630:	fba3 2301 	umull	r2, r3, r3, r1
 800d634:	095a      	lsrs	r2, r3, #5
 800d636:	2364      	movs	r3, #100	@ 0x64
 800d638:	fb02 f303 	mul.w	r3, r2, r3
 800d63c:	1acb      	subs	r3, r1, r3
 800d63e:	b29b      	uxth	r3, r3
 800d640:	461d      	mov	r5, r3
 800d642:	f8b7 2580 	ldrh.w	r2, [r7, #1408]	@ 0x580
 800d646:	4b48      	ldr	r3, [pc, #288]	@ (800d768 <frame_processing+0xc58>)
 800d648:	fba3 2302 	umull	r2, r3, r3, r2
 800d64c:	095b      	lsrs	r3, r3, #5
 800d64e:	b29b      	uxth	r3, r3
 800d650:	461c      	mov	r4, r3
 800d652:	f8b7 1580 	ldrh.w	r1, [r7, #1408]	@ 0x580
 800d656:	4b44      	ldr	r3, [pc, #272]	@ (800d768 <frame_processing+0xc58>)
 800d658:	fba3 2301 	umull	r2, r3, r3, r1
 800d65c:	095a      	lsrs	r2, r3, #5
 800d65e:	2364      	movs	r3, #100	@ 0x64
 800d660:	fb02 f303 	mul.w	r3, r2, r3
 800d664:	1acb      	subs	r3, r1, r3
 800d666:	b29b      	uxth	r3, r3
 800d668:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d66c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d66e:	9418      	str	r4, [sp, #96]	@ 0x60
 800d670:	9517      	str	r5, [sp, #92]	@ 0x5c
 800d672:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d674:	9216      	str	r2, [sp, #88]	@ 0x58
 800d676:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d678:	9215      	str	r2, [sp, #84]	@ 0x54
 800d67a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d67c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d67e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d680:	9213      	str	r2, [sp, #76]	@ 0x4c
 800d682:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d684:	9212      	str	r2, [sp, #72]	@ 0x48
 800d686:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d688:	9211      	str	r2, [sp, #68]	@ 0x44
 800d68a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d68c:	9210      	str	r2, [sp, #64]	@ 0x40
 800d68e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d690:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d692:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d694:	920e      	str	r2, [sp, #56]	@ 0x38
 800d696:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d698:	920d      	str	r2, [sp, #52]	@ 0x34
 800d69a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d69e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d6a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d6a4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d6a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d6aa:	920a      	str	r2, [sp, #40]	@ 0x28
 800d6ac:	9609      	str	r6, [sp, #36]	@ 0x24
 800d6ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6b2:	9308      	str	r3, [sp, #32]
 800d6b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d6b8:	9307      	str	r3, [sp, #28]
 800d6ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d6be:	9306      	str	r3, [sp, #24]
 800d6c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d6c4:	9305      	str	r3, [sp, #20]
 800d6c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d6ca:	9304      	str	r3, [sp, #16]
 800d6cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d6d0:	9303      	str	r3, [sp, #12]
 800d6d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d6d6:	9302      	str	r3, [sp, #8]
 800d6d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	4663      	mov	r3, ip
 800d6e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d6ea:	4921      	ldr	r1, [pc, #132]	@ (800d770 <frame_processing+0xc60>)
 800d6ec:	f002 fb9c 	bl	800fe28 <siprintf>
				                    if (uart_choose_usart2) {
 800d6f0:	4b20      	ldr	r3, [pc, #128]	@ (800d774 <frame_processing+0xc64>)
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d005      	beq.n	800d706 <frame_processing+0xbf6>
				                    	Uart_sendstring(USART2, buffer_0x08);
 800d6fa:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d6fe:	4619      	mov	r1, r3
 800d700:	481d      	ldr	r0, [pc, #116]	@ (800d778 <frame_processing+0xc68>)
 800d702:	f7f4 fc6b 	bl	8001fdc <Uart_sendstring>
									Uart_sendstring(UART4, buffer_0x08);
 800d706:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d70a:	4619      	mov	r1, r3
 800d70c:	481b      	ldr	r0, [pc, #108]	@ (800d77c <frame_processing+0xc6c>)
 800d70e:	f7f4 fc65 	bl	8001fdc <Uart_sendstring>
							    break;
 800d712:	bf00      	nop
					break;
 800d714:	e004      	b.n	800d720 <frame_processing+0xc10>
				default:
					clear_send_flag();
 800d716:	f7f4 fda3 	bl	8002260 <clear_send_flag>
					return FSP_PKT_INVALID;
 800d71a:	2302      	movs	r3, #2
 800d71c:	f001 bbb7 	b.w	800ee8e <frame_processing+0x237e>
					break;
 800d720:	bf00      	nop
					break;
			}
			clear_send_flag();
 800d722:	f7f4 fd9d 	bl	8002260 <clear_send_flag>
			break;
 800d726:	f001 bbb1 	b.w	800ee8c <frame_processing+0x237c>
		case FSP_ADR_PDU:
			switch (fsp_pkt->type)
 800d72a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d72e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	791b      	ldrb	r3, [r3, #4]
 800d736:	2b05      	cmp	r3, #5
 800d738:	d003      	beq.n	800d742 <frame_processing+0xc32>
 800d73a:	2b07      	cmp	r3, #7
 800d73c:	d022      	beq.n	800d784 <frame_processing+0xc74>
 800d73e:	f000 bc36 	b.w	800dfae <frame_processing+0x149e>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800d742:	f7f4 fd8d 	bl	8002260 <clear_send_flag>
//					if (uart_choose_uart5) {
//						Uart_sendstring(UART5, "\n> PDU_ACK\r\n> ");
//					}
                    if (uart_choose_usart2) {
 800d746:	4b0b      	ldr	r3, [pc, #44]	@ (800d774 <frame_processing+0xc64>)
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d003      	beq.n	800d758 <frame_processing+0xc48>
                    	Uart_sendstring(USART2, "\n> PDU_ACK\r\n> ");
 800d750:	490b      	ldr	r1, [pc, #44]	@ (800d780 <frame_processing+0xc70>)
 800d752:	4809      	ldr	r0, [pc, #36]	@ (800d778 <frame_processing+0xc68>)
 800d754:	f7f4 fc42 	bl	8001fdc <Uart_sendstring>
                    }
					Uart_sendstring(UART4, "\n> PDU_ACK\r\n> ");
 800d758:	4909      	ldr	r1, [pc, #36]	@ (800d780 <frame_processing+0xc70>)
 800d75a:	4808      	ldr	r0, [pc, #32]	@ (800d77c <frame_processing+0xc6c>)
 800d75c:	f7f4 fc3e 	bl	8001fdc <Uart_sendstring>

					break;
 800d760:	f000 bc2a 	b.w	800dfb8 <frame_processing+0x14a8>
 800d764:	08015b60 	.word	0x08015b60
 800d768:	51eb851f 	.word	0x51eb851f
 800d76c:	08015b5c 	.word	0x08015b5c
 800d770:	08015c94 	.word	0x08015c94
 800d774:	200058d5 	.word	0x200058d5
 800d778:	40004400 	.word	0x40004400
 800d77c:	40004c00 	.word	0x40004c00
 800d780:	08015d84 	.word	0x08015d84
				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800d784:	f7f4 fd6c 	bl	8002260 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800d788:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d78c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	795b      	ldrb	r3, [r3, #5]
 800d794:	2b06      	cmp	r3, #6
 800d796:	dc17      	bgt.n	800d7c8 <frame_processing+0xcb8>
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f2c0 8400 	blt.w	800df9e <frame_processing+0x148e>
 800d79e:	2b06      	cmp	r3, #6
 800d7a0:	f200 83fd 	bhi.w	800df9e <frame_processing+0x148e>
 800d7a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d7ac <frame_processing+0xc9c>)
 800d7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7aa:	bf00      	nop
 800d7ac:	0800d7cf 	.word	0x0800d7cf
 800d7b0:	0800df9f 	.word	0x0800df9f
 800d7b4:	0800df9f 	.word	0x0800df9f
 800d7b8:	0800df9f 	.word	0x0800df9f
 800d7bc:	0800d84b 	.word	0x0800d84b
 800d7c0:	0800d8fd 	.word	0x0800d8fd
 800d7c4:	0800d9cd 	.word	0x0800d9cd
 800d7c8:	2bff      	cmp	r3, #255	@ 0xff
 800d7ca:	d01f      	beq.n	800d80c <frame_processing+0xcfc>
 800d7cc:	e3e7      	b.n	800df9e <frame_processing+0x148e>
					{
						case 0x00:
						{
							char buffer_0x00[50];
							sprintf(buffer_0x00, "PDU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800d7ce:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d7d2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	799b      	ldrb	r3, [r3, #6]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d7e0:	4973      	ldr	r1, [pc, #460]	@ (800d9b0 <frame_processing+0xea0>)
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f002 fb20 	bl	800fe28 <siprintf>
//							if (uart_choose_uart5) {
//								Uart_sendstring(UART5, buffer_0x00);
//							}
		                    if (uart_choose_usart2) {
 800d7e8:	4b72      	ldr	r3, [pc, #456]	@ (800d9b4 <frame_processing+0xea4>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d005      	beq.n	800d7fe <frame_processing+0xcee>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800d7f2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	486f      	ldr	r0, [pc, #444]	@ (800d9b8 <frame_processing+0xea8>)
 800d7fa:	f7f4 fbef 	bl	8001fdc <Uart_sendstring>
		                    }
							Uart_sendstring(UART4, buffer_0x00);
 800d7fe:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d802:	4619      	mov	r1, r3
 800d804:	486d      	ldr	r0, [pc, #436]	@ (800d9bc <frame_processing+0xeac>)
 800d806:	f7f4 fbe9 	bl	8001fdc <Uart_sendstring>

						}
							break;
 800d80a:	e3cd      	b.n	800dfa8 <frame_processing+0x1498>
						case 0xFF:
						{
							char buffer_0xFF[50];
							sprintf(buffer_0xFF, "PDU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800d80c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d810:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	799b      	ldrb	r3, [r3, #6]
 800d818:	461a      	mov	r2, r3
 800d81a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d81e:	4968      	ldr	r1, [pc, #416]	@ (800d9c0 <frame_processing+0xeb0>)
 800d820:	4618      	mov	r0, r3
 800d822:	f002 fb01 	bl	800fe28 <siprintf>
//							if (uart_choose_uart5) {
//								Uart_sendstring(UART5, buffer_0xFF);
//							}
		                    if (uart_choose_usart2) {
 800d826:	4b63      	ldr	r3, [pc, #396]	@ (800d9b4 <frame_processing+0xea4>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d005      	beq.n	800d83c <frame_processing+0xd2c>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800d830:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d834:	4619      	mov	r1, r3
 800d836:	4860      	ldr	r0, [pc, #384]	@ (800d9b8 <frame_processing+0xea8>)
 800d838:	f7f4 fbd0 	bl	8001fdc <Uart_sendstring>
		                    }
							Uart_sendstring(UART4, buffer_0xFF);
 800d83c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d840:	4619      	mov	r1, r3
 800d842:	485e      	ldr	r0, [pc, #376]	@ (800d9bc <frame_processing+0xeac>)
 800d844:	f7f4 fbca 	bl	8001fdc <Uart_sendstring>

						}
							break;
 800d848:	e3ae      	b.n	800dfa8 <frame_processing+0x1498>

						case 0x04:
						{
							        uint8_t channel = fsp_pkt->payload[1];
 800d84a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d84e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	799b      	ldrb	r3, [r3, #6]
 800d856:	f887 359d 	strb.w	r3, [r7, #1437]	@ 0x59d
							        uint8_t status_0x04 = fsp_pkt->payload[2];
 800d85a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d85e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	79db      	ldrb	r3, [r3, #7]
 800d866:	f887 359c 	strb.w	r3, [r7, #1436]	@ 0x59c
							        uint16_t voltage_0x04 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800d86a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d86e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	7a1b      	ldrb	r3, [r3, #8]
 800d876:	021b      	lsls	r3, r3, #8
 800d878:	b21a      	sxth	r2, r3
 800d87a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d87e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	7a5b      	ldrb	r3, [r3, #9]
 800d886:	b21b      	sxth	r3, r3
 800d888:	4313      	orrs	r3, r2
 800d88a:	b21b      	sxth	r3, r3
 800d88c:	f8a7 359a 	strh.w	r3, [r7, #1434]	@ 0x59a
							        uint16_t current_0x04 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800d890:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d894:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	7a9b      	ldrb	r3, [r3, #10]
 800d89c:	021b      	lsls	r3, r3, #8
 800d89e:	b21a      	sxth	r2, r3
 800d8a0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8a4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	7adb      	ldrb	r3, [r3, #11]
 800d8ac:	b21b      	sxth	r3, r3
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	b21b      	sxth	r3, r3
 800d8b2:	f8a7 3598 	strh.w	r3, [r7, #1432]	@ 0x598

							        char buffer_0x07[100];
							        sprintf(buffer_0x07, "PDU_Res: CMDcode 0x04 [{Channel %u} Status %u, Voltage: %u, Current: %u]\n", channel, status_0x04, voltage_0x04, current_0x04);
 800d8b6:	f897 159d 	ldrb.w	r1, [r7, #1437]	@ 0x59d
 800d8ba:	f897 459c 	ldrb.w	r4, [r7, #1436]	@ 0x59c
 800d8be:	f8b7 359a 	ldrh.w	r3, [r7, #1434]	@ 0x59a
 800d8c2:	f8b7 2598 	ldrh.w	r2, [r7, #1432]	@ 0x598
 800d8c6:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d8ca:	9201      	str	r2, [sp, #4]
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	4623      	mov	r3, r4
 800d8d0:	460a      	mov	r2, r1
 800d8d2:	493c      	ldr	r1, [pc, #240]	@ (800d9c4 <frame_processing+0xeb4>)
 800d8d4:	f002 faa8 	bl	800fe28 <siprintf>
//									if (uart_choose_uart5) {
//										Uart_sendstring(UART5, buffer_0x07);
//									}
				                    if (uart_choose_usart2) {
 800d8d8:	4b36      	ldr	r3, [pc, #216]	@ (800d9b4 <frame_processing+0xea4>)
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d005      	beq.n	800d8ee <frame_processing+0xdde>
				                    	Uart_sendstring(USART2, buffer_0x07);
 800d8e2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	4833      	ldr	r0, [pc, #204]	@ (800d9b8 <frame_processing+0xea8>)
 800d8ea:	f7f4 fb77 	bl	8001fdc <Uart_sendstring>
				                    }
									Uart_sendstring(UART4, buffer_0x07);
 800d8ee:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	4831      	ldr	r0, [pc, #196]	@ (800d9bc <frame_processing+0xeac>)
 800d8f6:	f7f4 fb71 	bl	8001fdc <Uart_sendstring>

						}
									break;
 800d8fa:	e355      	b.n	800dfa8 <frame_processing+0x1498>
						case 0x05:
						{
						            uint8_t buck = fsp_pkt->payload[1];
 800d8fc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d900:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	799b      	ldrb	r3, [r3, #6]
 800d908:	f887 35a3 	strb.w	r3, [r7, #1443]	@ 0x5a3
						            uint8_t status_0x05 = fsp_pkt->payload[2];
 800d90c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d910:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	79db      	ldrb	r3, [r3, #7]
 800d918:	f887 35a2 	strb.w	r3, [r7, #1442]	@ 0x5a2
						            uint16_t voltage_0x05 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800d91c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d920:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	7a1b      	ldrb	r3, [r3, #8]
 800d928:	021b      	lsls	r3, r3, #8
 800d92a:	b21a      	sxth	r2, r3
 800d92c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d930:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	7a5b      	ldrb	r3, [r3, #9]
 800d938:	b21b      	sxth	r3, r3
 800d93a:	4313      	orrs	r3, r2
 800d93c:	b21b      	sxth	r3, r3
 800d93e:	f8a7 35a0 	strh.w	r3, [r7, #1440]	@ 0x5a0
						            uint16_t current_0x05 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800d942:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d946:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	7a9b      	ldrb	r3, [r3, #10]
 800d94e:	021b      	lsls	r3, r3, #8
 800d950:	b21a      	sxth	r2, r3
 800d952:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d956:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	7adb      	ldrb	r3, [r3, #11]
 800d95e:	b21b      	sxth	r3, r3
 800d960:	4313      	orrs	r3, r2
 800d962:	b21b      	sxth	r3, r3
 800d964:	f8a7 359e 	strh.w	r3, [r7, #1438]	@ 0x59e

						            char buffer_0x05[100];
						            sprintf(buffer_0x05, "PDU_Res: CMDcode 0x05 [{Buck %u} Status %u, Voltage: %u, Current: %u]\n", buck, status_0x05, voltage_0x05, current_0x05);
 800d968:	f897 15a3 	ldrb.w	r1, [r7, #1443]	@ 0x5a3
 800d96c:	f897 45a2 	ldrb.w	r4, [r7, #1442]	@ 0x5a2
 800d970:	f8b7 35a0 	ldrh.w	r3, [r7, #1440]	@ 0x5a0
 800d974:	f8b7 259e 	ldrh.w	r2, [r7, #1438]	@ 0x59e
 800d978:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d97c:	9201      	str	r2, [sp, #4]
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	4623      	mov	r3, r4
 800d982:	460a      	mov	r2, r1
 800d984:	4910      	ldr	r1, [pc, #64]	@ (800d9c8 <frame_processing+0xeb8>)
 800d986:	f002 fa4f 	bl	800fe28 <siprintf>
//									if (uart_choose_uart5) {
//										Uart_sendstring(UART5, buffer_0x05);
//									}
				                    if (uart_choose_usart2) {
 800d98a:	4b0a      	ldr	r3, [pc, #40]	@ (800d9b4 <frame_processing+0xea4>)
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	2b00      	cmp	r3, #0
 800d992:	d005      	beq.n	800d9a0 <frame_processing+0xe90>
				                    	Uart_sendstring(USART2, buffer_0x05);
 800d994:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d998:	4619      	mov	r1, r3
 800d99a:	4807      	ldr	r0, [pc, #28]	@ (800d9b8 <frame_processing+0xea8>)
 800d99c:	f7f4 fb1e 	bl	8001fdc <Uart_sendstring>
				                    }
									Uart_sendstring(UART4, buffer_0x05);
 800d9a0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	4805      	ldr	r0, [pc, #20]	@ (800d9bc <frame_processing+0xeac>)
 800d9a8:	f7f4 fb18 	bl	8001fdc <Uart_sendstring>

						}
									break;
 800d9ac:	e2fc      	b.n	800dfa8 <frame_processing+0x1498>
 800d9ae:	bf00      	nop
 800d9b0:	08015d94 	.word	0x08015d94
 800d9b4:	200058d5 	.word	0x200058d5
 800d9b8:	40004400 	.word	0x40004400
 800d9bc:	40004c00 	.word	0x40004c00
 800d9c0:	08015db0 	.word	0x08015db0
 800d9c4:	08015dcc 	.word	0x08015dcc
 800d9c8:	08015e18 	.word	0x08015e18
						case 0x06:
						{
							uint8_t tec1buck_status = fsp_pkt->payload[1];
 800d9cc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d9d0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	799b      	ldrb	r3, [r3, #6]
 800d9d8:	f887 35eb 	strb.w	r3, [r7, #1515]	@ 0x5eb
							uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 800d9dc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d9e0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	79db      	ldrb	r3, [r3, #7]
 800d9e8:	021b      	lsls	r3, r3, #8
 800d9ea:	b21a      	sxth	r2, r3
 800d9ec:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d9f0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	7a1b      	ldrb	r3, [r3, #8]
 800d9f8:	b21b      	sxth	r3, r3
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	b21b      	sxth	r3, r3
 800d9fe:	f8a7 35e8 	strh.w	r3, [r7, #1512]	@ 0x5e8

							uint8_t tec2buck_status = fsp_pkt->payload[4];
 800da02:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da06:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	7a5b      	ldrb	r3, [r3, #9]
 800da0e:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
							uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800da12:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da16:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	7a9b      	ldrb	r3, [r3, #10]
 800da1e:	021b      	lsls	r3, r3, #8
 800da20:	b21a      	sxth	r2, r3
 800da22:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da26:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	7adb      	ldrb	r3, [r3, #11]
 800da2e:	b21b      	sxth	r3, r3
 800da30:	4313      	orrs	r3, r2
 800da32:	b21b      	sxth	r3, r3
 800da34:	f8a7 35e4 	strh.w	r3, [r7, #1508]	@ 0x5e4

							uint8_t tec3buck_status = fsp_pkt->payload[7];
 800da38:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da3c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	7b1b      	ldrb	r3, [r3, #12]
 800da44:	f887 35e3 	strb.w	r3, [r7, #1507]	@ 0x5e3
							uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 800da48:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da4c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	7b5b      	ldrb	r3, [r3, #13]
 800da54:	021b      	lsls	r3, r3, #8
 800da56:	b21a      	sxth	r2, r3
 800da58:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da5c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	7b9b      	ldrb	r3, [r3, #14]
 800da64:	b21b      	sxth	r3, r3
 800da66:	4313      	orrs	r3, r2
 800da68:	b21b      	sxth	r3, r3
 800da6a:	f8a7 35e0 	strh.w	r3, [r7, #1504]	@ 0x5e0

							uint8_t tec4buck_status = fsp_pkt->payload[10];
 800da6e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da72:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	7bdb      	ldrb	r3, [r3, #15]
 800da7a:	f887 35df 	strb.w	r3, [r7, #1503]	@ 0x5df
							uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 800da7e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da82:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	7c1b      	ldrb	r3, [r3, #16]
 800da8a:	021b      	lsls	r3, r3, #8
 800da8c:	b21a      	sxth	r2, r3
 800da8e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da92:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	7c5b      	ldrb	r3, [r3, #17]
 800da9a:	b21b      	sxth	r3, r3
 800da9c:	4313      	orrs	r3, r2
 800da9e:	b21b      	sxth	r3, r3
 800daa0:	f8a7 35dc 	strh.w	r3, [r7, #1500]	@ 0x5dc

							uint8_t mcubuck_status = fsp_pkt->payload[13];
 800daa4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800daa8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	7c9b      	ldrb	r3, [r3, #18]
 800dab0:	f887 35db 	strb.w	r3, [r7, #1499]	@ 0x5db
							uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 800dab4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dab8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	7cdb      	ldrb	r3, [r3, #19]
 800dac0:	021b      	lsls	r3, r3, #8
 800dac2:	b21a      	sxth	r2, r3
 800dac4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dac8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	7d1b      	ldrb	r3, [r3, #20]
 800dad0:	b21b      	sxth	r3, r3
 800dad2:	4313      	orrs	r3, r2
 800dad4:	b21b      	sxth	r3, r3
 800dad6:	f8a7 35d8 	strh.w	r3, [r7, #1496]	@ 0x5d8

							uint8_t ledbuck_status = fsp_pkt->payload[16];
 800dada:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dade:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	7d5b      	ldrb	r3, [r3, #21]
 800dae6:	f887 35d7 	strb.w	r3, [r7, #1495]	@ 0x5d7
							uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 800daea:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800daee:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	7d9b      	ldrb	r3, [r3, #22]
 800daf6:	021b      	lsls	r3, r3, #8
 800daf8:	b21a      	sxth	r2, r3
 800dafa:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dafe:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	7ddb      	ldrb	r3, [r3, #23]
 800db06:	b21b      	sxth	r3, r3
 800db08:	4313      	orrs	r3, r2
 800db0a:	b21b      	sxth	r3, r3
 800db0c:	f8a7 35d4 	strh.w	r3, [r7, #1492]	@ 0x5d4

							uint8_t cm4buck_status = fsp_pkt->payload[19];
 800db10:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db14:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	7e1b      	ldrb	r3, [r3, #24]
 800db1c:	f887 35d3 	strb.w	r3, [r7, #1491]	@ 0x5d3
							uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 800db20:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db24:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	7e5b      	ldrb	r3, [r3, #25]
 800db2c:	021b      	lsls	r3, r3, #8
 800db2e:	b21a      	sxth	r2, r3
 800db30:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db34:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	7e9b      	ldrb	r3, [r3, #26]
 800db3c:	b21b      	sxth	r3, r3
 800db3e:	4313      	orrs	r3, r2
 800db40:	b21b      	sxth	r3, r3
 800db42:	f8a7 35d0 	strh.w	r3, [r7, #1488]	@ 0x5d0

							uint8_t tec1_status = fsp_pkt->payload[22];
 800db46:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db4a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	7edb      	ldrb	r3, [r3, #27]
 800db52:	f887 35cf 	strb.w	r3, [r7, #1487]	@ 0x5cf
							uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 800db56:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db5a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	7f1b      	ldrb	r3, [r3, #28]
 800db62:	021b      	lsls	r3, r3, #8
 800db64:	b21a      	sxth	r2, r3
 800db66:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db6a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	7f5b      	ldrb	r3, [r3, #29]
 800db72:	b21b      	sxth	r3, r3
 800db74:	4313      	orrs	r3, r2
 800db76:	b21b      	sxth	r3, r3
 800db78:	f8a7 35cc 	strh.w	r3, [r7, #1484]	@ 0x5cc

							uint8_t tec2_status = fsp_pkt->payload[25];
 800db7c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db80:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	7f9b      	ldrb	r3, [r3, #30]
 800db88:	f887 35cb 	strb.w	r3, [r7, #1483]	@ 0x5cb
							uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 800db8c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db90:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	7fdb      	ldrb	r3, [r3, #31]
 800db98:	021b      	lsls	r3, r3, #8
 800db9a:	b21a      	sxth	r2, r3
 800db9c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dba0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dbaa:	b21b      	sxth	r3, r3
 800dbac:	4313      	orrs	r3, r2
 800dbae:	b21b      	sxth	r3, r3
 800dbb0:	f8a7 35c8 	strh.w	r3, [r7, #1480]	@ 0x5c8

							uint8_t tec3_status = fsp_pkt->payload[28];
 800dbb4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbb8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800dbc2:	f887 35c7 	strb.w	r3, [r7, #1479]	@ 0x5c7
							uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 800dbc6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbca:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800dbd4:	021b      	lsls	r3, r3, #8
 800dbd6:	b21a      	sxth	r2, r3
 800dbd8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbdc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800dbe6:	b21b      	sxth	r3, r3
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	b21b      	sxth	r3, r3
 800dbec:	f8a7 35c4 	strh.w	r3, [r7, #1476]	@ 0x5c4

							uint8_t tec4_status = fsp_pkt->payload[31];
 800dbf0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbf4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dbfe:	f887 35c3 	strb.w	r3, [r7, #1475]	@ 0x5c3
							uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 800dc02:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc06:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800dc10:	021b      	lsls	r3, r3, #8
 800dc12:	b21a      	sxth	r2, r3
 800dc14:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc18:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800dc22:	b21b      	sxth	r3, r3
 800dc24:	4313      	orrs	r3, r2
 800dc26:	b21b      	sxth	r3, r3
 800dc28:	f8a7 35c0 	strh.w	r3, [r7, #1472]	@ 0x5c0

							uint8_t copc_status = fsp_pkt->payload[34];
 800dc2c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc30:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800dc3a:	f887 35bf 	strb.w	r3, [r7, #1471]	@ 0x5bf
							uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 800dc3e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc42:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc4c:	021b      	lsls	r3, r3, #8
 800dc4e:	b21a      	sxth	r2, r3
 800dc50:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc54:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800dc5e:	b21b      	sxth	r3, r3
 800dc60:	4313      	orrs	r3, r2
 800dc62:	b21b      	sxth	r3, r3
 800dc64:	f8a7 35bc 	strh.w	r3, [r7, #1468]	@ 0x5bc

							uint8_t iou_status = fsp_pkt->payload[37];
 800dc68:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc6c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800dc76:	f887 35bb 	strb.w	r3, [r7, #1467]	@ 0x5bb
							uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800dc7a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc7e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800dc88:	021b      	lsls	r3, r3, #8
 800dc8a:	b21a      	sxth	r2, r3
 800dc8c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc90:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dc9a:	b21b      	sxth	r3, r3
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	b21b      	sxth	r3, r3
 800dca0:	f8a7 35b8 	strh.w	r3, [r7, #1464]	@ 0x5b8

							uint8_t rgb_status = fsp_pkt->payload[40];
 800dca4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dca8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dcb2:	f887 35b7 	strb.w	r3, [r7, #1463]	@ 0x5b7
							uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 800dcb6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dcba:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800dcc4:	021b      	lsls	r3, r3, #8
 800dcc6:	b21a      	sxth	r2, r3
 800dcc8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dccc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dcd6:	b21b      	sxth	r3, r3
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	b21b      	sxth	r3, r3
 800dcdc:	f8a7 35b4 	strh.w	r3, [r7, #1460]	@ 0x5b4

							uint8_t ir_status = fsp_pkt->payload[43];
 800dce0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dce4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dcee:	f887 35b3 	strb.w	r3, [r7, #1459]	@ 0x5b3
							uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 800dcf2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dcf6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800dd00:	021b      	lsls	r3, r3, #8
 800dd02:	b21a      	sxth	r2, r3
 800dd04:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd08:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800dd12:	b21b      	sxth	r3, r3
 800dd14:	4313      	orrs	r3, r2
 800dd16:	b21b      	sxth	r3, r3
 800dd18:	f8a7 35b0 	strh.w	r3, [r7, #1456]	@ 0x5b0

							uint8_t cm4_status = fsp_pkt->payload[46];
 800dd1c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd20:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800dd2a:	f887 35af 	strb.w	r3, [r7, #1455]	@ 0x5af
							uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 800dd2e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd32:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dd3c:	021b      	lsls	r3, r3, #8
 800dd3e:	b21a      	sxth	r2, r3
 800dd40:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd44:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dd4e:	b21b      	sxth	r3, r3
 800dd50:	4313      	orrs	r3, r2
 800dd52:	b21b      	sxth	r3, r3
 800dd54:	f8a7 35ac 	strh.w	r3, [r7, #1452]	@ 0x5ac

							uint8_t vin_status = fsp_pkt->payload[49];
 800dd58:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd5c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800dd66:	f887 35ab 	strb.w	r3, [r7, #1451]	@ 0x5ab
							uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 800dd6a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd6e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800dd78:	021b      	lsls	r3, r3, #8
 800dd7a:	b21a      	sxth	r2, r3
 800dd7c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd80:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dd8a:	b21b      	sxth	r3, r3
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	b21b      	sxth	r3, r3
 800dd90:	f8a7 35a8 	strh.w	r3, [r7, #1448]	@ 0x5a8

							uint8_t vbus_status = fsp_pkt->payload[52];
 800dd94:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd98:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800dda2:	f887 35a7 	strb.w	r3, [r7, #1447]	@ 0x5a7
							uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 800dda6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ddaa:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ddb4:	021b      	lsls	r3, r3, #8
 800ddb6:	b21a      	sxth	r2, r3
 800ddb8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ddbc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ddc6:	b21b      	sxth	r3, r3
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	b21b      	sxth	r3, r3
 800ddcc:	f8a7 35a4 	strh.w	r3, [r7, #1444]	@ 0x5a4


						            char buffer_0x06[1000];
						            sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 800ddd0:	f897 e5eb 	ldrb.w	lr, [r7, #1515]	@ 0x5eb
 800ddd4:	f8b7 85e8 	ldrh.w	r8, [r7, #1512]	@ 0x5e8
 800ddd8:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800dddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dde0:	f8b7 25e4 	ldrh.w	r2, [r7, #1508]	@ 0x5e4
 800dde4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800dde8:	f897 15e3 	ldrb.w	r1, [r7, #1507]	@ 0x5e3
 800ddec:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800ddf0:	f8b7 05e0 	ldrh.w	r0, [r7, #1504]	@ 0x5e0
 800ddf4:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800ddf8:	f897 45df 	ldrb.w	r4, [r7, #1503]	@ 0x5df
 800ddfc:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 800de00:	f8b7 55dc 	ldrh.w	r5, [r7, #1500]	@ 0x5dc
 800de04:	f8c7 509c 	str.w	r5, [r7, #156]	@ 0x9c
 800de08:	f897 65db 	ldrb.w	r6, [r7, #1499]	@ 0x5db
 800de0c:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 800de10:	f8b7 c5d8 	ldrh.w	ip, [r7, #1496]	@ 0x5d8
 800de14:	4663      	mov	r3, ip
 800de16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800de1a:	f897 c5d7 	ldrb.w	ip, [r7, #1495]	@ 0x5d7
 800de1e:	4662      	mov	r2, ip
 800de20:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800de24:	f8b7 c5d4 	ldrh.w	ip, [r7, #1492]	@ 0x5d4
 800de28:	4661      	mov	r1, ip
 800de2a:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 800de2e:	f897 c5d3 	ldrb.w	ip, [r7, #1491]	@ 0x5d3
 800de32:	4660      	mov	r0, ip
 800de34:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 800de38:	f8b7 c5d0 	ldrh.w	ip, [r7, #1488]	@ 0x5d0
 800de3c:	4664      	mov	r4, ip
 800de3e:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
 800de42:	f897 c5cf 	ldrb.w	ip, [r7, #1487]	@ 0x5cf
 800de46:	4665      	mov	r5, ip
 800de48:	f8c7 5080 	str.w	r5, [r7, #128]	@ 0x80
 800de4c:	f8b7 c5cc 	ldrh.w	ip, [r7, #1484]	@ 0x5cc
 800de50:	4666      	mov	r6, ip
 800de52:	67fe      	str	r6, [r7, #124]	@ 0x7c
 800de54:	f897 c5cb 	ldrb.w	ip, [r7, #1483]	@ 0x5cb
 800de58:	4663      	mov	r3, ip
 800de5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800de5c:	f8b7 c5c8 	ldrh.w	ip, [r7, #1480]	@ 0x5c8
 800de60:	4662      	mov	r2, ip
 800de62:	677a      	str	r2, [r7, #116]	@ 0x74
 800de64:	f897 c5c7 	ldrb.w	ip, [r7, #1479]	@ 0x5c7
 800de68:	4661      	mov	r1, ip
 800de6a:	6739      	str	r1, [r7, #112]	@ 0x70
 800de6c:	f8b7 c5c4 	ldrh.w	ip, [r7, #1476]	@ 0x5c4
 800de70:	4660      	mov	r0, ip
 800de72:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de74:	f897 c5c3 	ldrb.w	ip, [r7, #1475]	@ 0x5c3
 800de78:	4664      	mov	r4, ip
 800de7a:	66bc      	str	r4, [r7, #104]	@ 0x68
 800de7c:	f8b7 c5c0 	ldrh.w	ip, [r7, #1472]	@ 0x5c0
 800de80:	4665      	mov	r5, ip
 800de82:	667d      	str	r5, [r7, #100]	@ 0x64
 800de84:	f897 c5bf 	ldrb.w	ip, [r7, #1471]	@ 0x5bf
 800de88:	4666      	mov	r6, ip
 800de8a:	663e      	str	r6, [r7, #96]	@ 0x60
 800de8c:	f8b7 c5bc 	ldrh.w	ip, [r7, #1468]	@ 0x5bc
 800de90:	4663      	mov	r3, ip
 800de92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de94:	f897 c5bb 	ldrb.w	ip, [r7, #1467]	@ 0x5bb
 800de98:	4662      	mov	r2, ip
 800de9a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800de9c:	f8b7 c5b8 	ldrh.w	ip, [r7, #1464]	@ 0x5b8
 800dea0:	4661      	mov	r1, ip
 800dea2:	6579      	str	r1, [r7, #84]	@ 0x54
 800dea4:	f897 c5b7 	ldrb.w	ip, [r7, #1463]	@ 0x5b7
 800dea8:	4660      	mov	r0, ip
 800deaa:	6538      	str	r0, [r7, #80]	@ 0x50
 800deac:	f8b7 c5b4 	ldrh.w	ip, [r7, #1460]	@ 0x5b4
 800deb0:	4664      	mov	r4, ip
 800deb2:	64fc      	str	r4, [r7, #76]	@ 0x4c
 800deb4:	f897 c5b3 	ldrb.w	ip, [r7, #1459]	@ 0x5b3
 800deb8:	4665      	mov	r5, ip
 800deba:	64bd      	str	r5, [r7, #72]	@ 0x48
 800debc:	f8b7 65b0 	ldrh.w	r6, [r7, #1456]	@ 0x5b0
 800dec0:	f897 55af 	ldrb.w	r5, [r7, #1455]	@ 0x5af
 800dec4:	f8b7 45ac 	ldrh.w	r4, [r7, #1452]	@ 0x5ac
 800dec8:	f897 05ab 	ldrb.w	r0, [r7, #1451]	@ 0x5ab
 800decc:	f8b7 15a8 	ldrh.w	r1, [r7, #1448]	@ 0x5a8
 800ded0:	f897 25a7 	ldrb.w	r2, [r7, #1447]	@ 0x5a7
 800ded4:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	@ 0x5a4
 800ded8:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 800dedc:	9321      	str	r3, [sp, #132]	@ 0x84
 800dede:	9220      	str	r2, [sp, #128]	@ 0x80
 800dee0:	911f      	str	r1, [sp, #124]	@ 0x7c
 800dee2:	901e      	str	r0, [sp, #120]	@ 0x78
 800dee4:	941d      	str	r4, [sp, #116]	@ 0x74
 800dee6:	951c      	str	r5, [sp, #112]	@ 0x70
 800dee8:	961b      	str	r6, [sp, #108]	@ 0x6c
 800deea:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 800deec:	951a      	str	r5, [sp, #104]	@ 0x68
 800deee:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800def0:	9419      	str	r4, [sp, #100]	@ 0x64
 800def2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800def4:	9018      	str	r0, [sp, #96]	@ 0x60
 800def6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800def8:	9117      	str	r1, [sp, #92]	@ 0x5c
 800defa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800defc:	9216      	str	r2, [sp, #88]	@ 0x58
 800defe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df00:	9315      	str	r3, [sp, #84]	@ 0x54
 800df02:	6e3e      	ldr	r6, [r7, #96]	@ 0x60
 800df04:	9614      	str	r6, [sp, #80]	@ 0x50
 800df06:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 800df08:	9513      	str	r5, [sp, #76]	@ 0x4c
 800df0a:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 800df0c:	9412      	str	r4, [sp, #72]	@ 0x48
 800df0e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800df10:	9011      	str	r0, [sp, #68]	@ 0x44
 800df12:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800df14:	9110      	str	r1, [sp, #64]	@ 0x40
 800df16:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800df18:	920f      	str	r2, [sp, #60]	@ 0x3c
 800df1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df1c:	930e      	str	r3, [sp, #56]	@ 0x38
 800df1e:	6ffe      	ldr	r6, [r7, #124]	@ 0x7c
 800df20:	960d      	str	r6, [sp, #52]	@ 0x34
 800df22:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 800df26:	950c      	str	r5, [sp, #48]	@ 0x30
 800df28:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800df2c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df2e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800df32:	900a      	str	r0, [sp, #40]	@ 0x28
 800df34:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800df38:	9109      	str	r1, [sp, #36]	@ 0x24
 800df3a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800df3e:	9208      	str	r2, [sp, #32]
 800df40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800df44:	9307      	str	r3, [sp, #28]
 800df46:	f8d7 6098 	ldr.w	r6, [r7, #152]	@ 0x98
 800df4a:	9606      	str	r6, [sp, #24]
 800df4c:	f8d7 509c 	ldr.w	r5, [r7, #156]	@ 0x9c
 800df50:	9505      	str	r5, [sp, #20]
 800df52:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800df56:	9404      	str	r4, [sp, #16]
 800df58:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800df5c:	9003      	str	r0, [sp, #12]
 800df5e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800df62:	9102      	str	r1, [sp, #8]
 800df64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800df68:	9201      	str	r2, [sp, #4]
 800df6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	4643      	mov	r3, r8
 800df72:	4672      	mov	r2, lr
 800df74:	49ba      	ldr	r1, [pc, #744]	@ (800e260 <frame_processing+0x1750>)
 800df76:	4660      	mov	r0, ip
 800df78:	f001 ff56 	bl	800fe28 <siprintf>
						                vin_status, vin_voltage,
						                vbus_status, vbus_voltage);
//									if (uart_choose_uart5) {
//										Uart_sendstring(UART5, buffer_0x06);
//									}
				                    if (uart_choose_usart2) {
 800df7c:	4bb9      	ldr	r3, [pc, #740]	@ (800e264 <frame_processing+0x1754>)
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	d005      	beq.n	800df92 <frame_processing+0x1482>
				                    	Uart_sendstring(USART2, buffer_0x06);
 800df86:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800df8a:	4619      	mov	r1, r3
 800df8c:	48b6      	ldr	r0, [pc, #728]	@ (800e268 <frame_processing+0x1758>)
 800df8e:	f7f4 f825 	bl	8001fdc <Uart_sendstring>
				                    }
									Uart_sendstring(UART4, buffer_0x06);
 800df92:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800df96:	4619      	mov	r1, r3
 800df98:	48b4      	ldr	r0, [pc, #720]	@ (800e26c <frame_processing+0x175c>)
 800df9a:	f7f4 f81f 	bl	8001fdc <Uart_sendstring>

						}

						default:
							clear_send_flag();
 800df9e:	f7f4 f95f 	bl	8002260 <clear_send_flag>
							return FSP_PKT_INVALID;
 800dfa2:	2302      	movs	r3, #2
 800dfa4:	f000 bf73 	b.w	800ee8e <frame_processing+0x237e>
//													for (int i = 0; i < fsp_pkt->length; i++) {
//													      sprintf(buffer, "\n{%d}", fsp_pkt->payload[i]);
//													      Uart_sendstring(UART5, buffer);
//													}

					clear_send_flag();
 800dfa8:	f7f4 f95a 	bl	8002260 <clear_send_flag>
					break;
 800dfac:	e004      	b.n	800dfb8 <frame_processing+0x14a8>
				default:
					clear_send_flag();
 800dfae:	f7f4 f957 	bl	8002260 <clear_send_flag>
					return FSP_PKT_INVALID;
 800dfb2:	2302      	movs	r3, #2
 800dfb4:	f000 bf6b 	b.w	800ee8e <frame_processing+0x237e>
					break;
			}

			break;
 800dfb8:	f000 bf68 	b.w	800ee8c <frame_processing+0x237c>
		case FSP_ADR_CAM:
			clear_send_flag();
 800dfbc:	f7f4 f950 	bl	8002260 <clear_send_flag>

			break;
 800dfc0:	f000 bf64 	b.w	800ee8c <frame_processing+0x237c>

		case FSP_ADR_IOU:
			switch (fsp_pkt->type)
 800dfc4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dfc8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	791b      	ldrb	r3, [r3, #4]
 800dfd0:	2b05      	cmp	r3, #5
 800dfd2:	d003      	beq.n	800dfdc <frame_processing+0x14cc>
 800dfd4:	2b07      	cmp	r3, #7
 800dfd6:	d015      	beq.n	800e004 <frame_processing+0x14f4>
 800dfd8:	f000 bf50 	b.w	800ee7c <frame_processing+0x236c>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800dfdc:	f7f4 f940 	bl	8002260 <clear_send_flag>
//					if (uart_choose_uart5) {
//						Uart_sendstring(UART5, "\nIOU_ACK\r\n> ");
//					}
                    if (uart_choose_usart2) {
 800dfe0:	4ba0      	ldr	r3, [pc, #640]	@ (800e264 <frame_processing+0x1754>)
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d003      	beq.n	800dff2 <frame_processing+0x14e2>
                    	Uart_sendstring(USART2, "\nIOU_ACK\r\n> ");
 800dfea:	49a1      	ldr	r1, [pc, #644]	@ (800e270 <frame_processing+0x1760>)
 800dfec:	489e      	ldr	r0, [pc, #632]	@ (800e268 <frame_processing+0x1758>)
 800dfee:	f7f3 fff5 	bl	8001fdc <Uart_sendstring>
                    }
					Uart_sendstring(UART4, "\nIOU_ACK\r\n> ");
 800dff2:	499f      	ldr	r1, [pc, #636]	@ (800e270 <frame_processing+0x1760>)
 800dff4:	489d      	ldr	r0, [pc, #628]	@ (800e26c <frame_processing+0x175c>)
 800dff6:	f7f3 fff1 	bl	8001fdc <Uart_sendstring>

					break;
 800dffa:	bf00      	nop
				default:
					clear_send_flag();
					return FSP_PKT_INVALID;
					break;
			}
			clear_send_flag();
 800dffc:	f7f4 f930 	bl	8002260 <clear_send_flag>
			break;
 800e000:	f000 bf44 	b.w	800ee8c <frame_processing+0x237c>
					clear_send_flag();
 800e004:	f7f4 f92c 	bl	8002260 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800e008:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e00c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	795b      	ldrb	r3, [r3, #5]
 800e014:	2b13      	cmp	r3, #19
 800e016:	dc31      	bgt.n	800e07c <frame_processing+0x156c>
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f2c0 872c 	blt.w	800ee76 <frame_processing+0x2366>
 800e01e:	2b13      	cmp	r3, #19
 800e020:	f200 8729 	bhi.w	800ee76 <frame_processing+0x2366>
 800e024:	a201      	add	r2, pc, #4	@ (adr r2, 800e02c <frame_processing+0x151c>)
 800e026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02a:	bf00      	nop
 800e02c:	0800e085 	.word	0x0800e085
 800e030:	0800ee77 	.word	0x0800ee77
 800e034:	0800e105 	.word	0x0800e105
 800e038:	0800e1c1 	.word	0x0800e1c1
 800e03c:	0800ee77 	.word	0x0800ee77
 800e040:	0800ee77 	.word	0x0800ee77
 800e044:	0800ee77 	.word	0x0800ee77
 800e048:	0800ee77 	.word	0x0800ee77
 800e04c:	0800ee77 	.word	0x0800ee77
 800e050:	0800ee77 	.word	0x0800ee77
 800e054:	0800ee77 	.word	0x0800ee77
 800e058:	0800ee77 	.word	0x0800ee77
 800e05c:	0800ee77 	.word	0x0800ee77
 800e060:	0800ee77 	.word	0x0800ee77
 800e064:	0800e289 	.word	0x0800e289
 800e068:	0800ee77 	.word	0x0800ee77
 800e06c:	0800e311 	.word	0x0800e311
 800e070:	0800e357 	.word	0x0800e357
 800e074:	0800e485 	.word	0x0800e485
 800e078:	0800e4fd 	.word	0x0800e4fd
 800e07c:	2bff      	cmp	r3, #255	@ 0xff
 800e07e:	d021      	beq.n	800e0c4 <frame_processing+0x15b4>
 800e080:	f000 bef9 	b.w	800ee76 <frame_processing+0x2366>
							sprintf(buffer_0x00, "IOU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800e084:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e088:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	799b      	ldrb	r3, [r3, #6]
 800e090:	461a      	mov	r2, r3
 800e092:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e096:	4977      	ldr	r1, [pc, #476]	@ (800e274 <frame_processing+0x1764>)
 800e098:	4618      	mov	r0, r3
 800e09a:	f001 fec5 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800e09e:	4b71      	ldr	r3, [pc, #452]	@ (800e264 <frame_processing+0x1754>)
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d005      	beq.n	800e0b4 <frame_processing+0x15a4>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800e0a8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	486e      	ldr	r0, [pc, #440]	@ (800e268 <frame_processing+0x1758>)
 800e0b0:	f7f3 ff94 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x00);
 800e0b4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	486c      	ldr	r0, [pc, #432]	@ (800e26c <frame_processing+0x175c>)
 800e0bc:	f7f3 ff8e 	bl	8001fdc <Uart_sendstring>
							break;
 800e0c0:	f000 bedc 	b.w	800ee7c <frame_processing+0x236c>
							sprintf(buffer_0xFF, "IOU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800e0c4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0c8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	799b      	ldrb	r3, [r3, #6]
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e0d6:	4968      	ldr	r1, [pc, #416]	@ (800e278 <frame_processing+0x1768>)
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f001 fea5 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800e0de:	4b61      	ldr	r3, [pc, #388]	@ (800e264 <frame_processing+0x1754>)
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d005      	beq.n	800e0f4 <frame_processing+0x15e4>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800e0e8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	485e      	ldr	r0, [pc, #376]	@ (800e268 <frame_processing+0x1758>)
 800e0f0:	f7f3 ff74 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0xFF);
 800e0f4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	485c      	ldr	r0, [pc, #368]	@ (800e26c <frame_processing+0x175c>)
 800e0fc:	f7f3 ff6e 	bl	8001fdc <Uart_sendstring>
							break;
 800e100:	f000 bebc 	b.w	800ee7c <frame_processing+0x236c>
						    uint8_t device = fsp_pkt->payload[1];
 800e104:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e108:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	799b      	ldrb	r3, [r3, #6]
 800e110:	f887 35ef 	strb.w	r3, [r7, #1519]	@ 0x5ef
						    uint8_t channel = fsp_pkt->payload[2];
 800e114:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e118:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	79db      	ldrb	r3, [r3, #7]
 800e120:	f887 35ee 	strb.w	r3, [r7, #1518]	@ 0x5ee
						    int16_t temp = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800e124:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e128:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	7a1b      	ldrb	r3, [r3, #8]
 800e130:	021b      	lsls	r3, r3, #8
 800e132:	b21a      	sxth	r2, r3
 800e134:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e138:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	7a5b      	ldrb	r3, [r3, #9]
 800e140:	b21b      	sxth	r3, r3
 800e142:	4313      	orrs	r3, r2
 800e144:	f8a7 35ec 	strh.w	r3, [r7, #1516]	@ 0x5ec
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800e148:	f897 45ef 	ldrb.w	r4, [r7, #1519]	@ 0x5ef
 800e14c:	f897 55ee 	ldrb.w	r5, [r7, #1518]	@ 0x5ee
 800e150:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 800e154:	4a49      	ldr	r2, [pc, #292]	@ (800e27c <frame_processing+0x176c>)
 800e156:	fb82 1203 	smull	r1, r2, r2, r3
 800e15a:	1092      	asrs	r2, r2, #2
 800e15c:	17db      	asrs	r3, r3, #31
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	b21b      	sxth	r3, r3
 800e162:	461e      	mov	r6, r3
						            device, channel, temp / 10, abs(temp % 10));
 800e164:	f9b7 25ec 	ldrsh.w	r2, [r7, #1516]	@ 0x5ec
 800e168:	4b44      	ldr	r3, [pc, #272]	@ (800e27c <frame_processing+0x176c>)
 800e16a:	fb83 1302 	smull	r1, r3, r3, r2
 800e16e:	1099      	asrs	r1, r3, #2
 800e170:	17d3      	asrs	r3, r2, #31
 800e172:	1ac9      	subs	r1, r1, r3
 800e174:	460b      	mov	r3, r1
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	440b      	add	r3, r1
 800e17a:	005b      	lsls	r3, r3, #1
 800e17c:	1ad3      	subs	r3, r2, r3
 800e17e:	b21b      	sxth	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	bfb8      	it	lt
 800e184:	425b      	neglt	r3, r3
 800e186:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800e188:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800e18c:	9301      	str	r3, [sp, #4]
 800e18e:	9600      	str	r6, [sp, #0]
 800e190:	462b      	mov	r3, r5
 800e192:	4622      	mov	r2, r4
 800e194:	493a      	ldr	r1, [pc, #232]	@ (800e280 <frame_processing+0x1770>)
 800e196:	f001 fe47 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800e19a:	4b32      	ldr	r3, [pc, #200]	@ (800e264 <frame_processing+0x1754>)
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d005      	beq.n	800e1b0 <frame_processing+0x16a0>
		                    	Uart_sendstring(USART2, buffer_0x02);
 800e1a4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	482f      	ldr	r0, [pc, #188]	@ (800e268 <frame_processing+0x1758>)
 800e1ac:	f7f3 ff16 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x02);
 800e1b0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	482d      	ldr	r0, [pc, #180]	@ (800e26c <frame_processing+0x175c>)
 800e1b8:	f7f3 ff10 	bl	8001fdc <Uart_sendstring>
						break;
 800e1bc:	f000 be5e 	b.w	800ee7c <frame_processing+0x236c>
						    uint8_t channel = fsp_pkt->payload[1];
 800e1c0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e1c4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	799b      	ldrb	r3, [r3, #6]
 800e1cc:	f887 35f2 	strb.w	r3, [r7, #1522]	@ 0x5f2
						    int16_t temp = (int16_t)((fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3]);
 800e1d0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e1d4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	79db      	ldrb	r3, [r3, #7]
 800e1dc:	021b      	lsls	r3, r3, #8
 800e1de:	b21a      	sxth	r2, r3
 800e1e0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e1e4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	7a1b      	ldrb	r3, [r3, #8]
 800e1ec:	b21b      	sxth	r3, r3
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	f8a7 35f0 	strh.w	r3, [r7, #1520]	@ 0x5f0
						    sprintf(buffer_0x03, "IOU_Res: CMDcode 0x03 [{Channel: %u} Temp: %d.%d]\n",
 800e1f4:	f897 45f2 	ldrb.w	r4, [r7, #1522]	@ 0x5f2
 800e1f8:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 800e1fc:	4a1f      	ldr	r2, [pc, #124]	@ (800e27c <frame_processing+0x176c>)
 800e1fe:	fb82 1203 	smull	r1, r2, r2, r3
 800e202:	1092      	asrs	r2, r2, #2
 800e204:	17db      	asrs	r3, r3, #31
 800e206:	1ad3      	subs	r3, r2, r3
 800e208:	b21b      	sxth	r3, r3
 800e20a:	461d      	mov	r5, r3
 800e20c:	f9b7 25f0 	ldrsh.w	r2, [r7, #1520]	@ 0x5f0
 800e210:	4b1a      	ldr	r3, [pc, #104]	@ (800e27c <frame_processing+0x176c>)
 800e212:	fb83 1302 	smull	r1, r3, r3, r2
 800e216:	1099      	asrs	r1, r3, #2
 800e218:	17d3      	asrs	r3, r2, #31
 800e21a:	1ac9      	subs	r1, r1, r3
 800e21c:	460b      	mov	r3, r1
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	440b      	add	r3, r1
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	b21b      	sxth	r3, r3
 800e228:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	462b      	mov	r3, r5
 800e230:	4622      	mov	r2, r4
 800e232:	4914      	ldr	r1, [pc, #80]	@ (800e284 <frame_processing+0x1774>)
 800e234:	f001 fdf8 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800e238:	4b0a      	ldr	r3, [pc, #40]	@ (800e264 <frame_processing+0x1754>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d005      	beq.n	800e24e <frame_processing+0x173e>
		                    	Uart_sendstring(USART2, buffer_0x03);
 800e242:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e246:	4619      	mov	r1, r3
 800e248:	4807      	ldr	r0, [pc, #28]	@ (800e268 <frame_processing+0x1758>)
 800e24a:	f7f3 fec7 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x03);
 800e24e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e252:	4619      	mov	r1, r3
 800e254:	4805      	ldr	r0, [pc, #20]	@ (800e26c <frame_processing+0x175c>)
 800e256:	f7f3 fec1 	bl	8001fdc <Uart_sendstring>
						break;
 800e25a:	f000 be0f 	b.w	800ee7c <frame_processing+0x236c>
 800e25e:	bf00      	nop
 800e260:	08015e60 	.word	0x08015e60
 800e264:	200058d5 	.word	0x200058d5
 800e268:	40004400 	.word	0x40004400
 800e26c:	40004c00 	.word	0x40004c00
 800e270:	080160a8 	.word	0x080160a8
 800e274:	080160b8 	.word	0x080160b8
 800e278:	080160d4 	.word	0x080160d4
 800e27c:	66666667 	.word	0x66666667
 800e280:	080160f0 	.word	0x080160f0
 800e284:	08016130 	.word	0x08016130
						    uint8_t red = fsp_pkt->payload[1];
 800e288:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e28c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	799b      	ldrb	r3, [r3, #6]
 800e294:	f887 35f6 	strb.w	r3, [r7, #1526]	@ 0x5f6
						    uint8_t blue = fsp_pkt->payload[2];
 800e298:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e29c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	79db      	ldrb	r3, [r3, #7]
 800e2a4:	f887 35f5 	strb.w	r3, [r7, #1525]	@ 0x5f5
						    uint8_t green = fsp_pkt->payload[3];
 800e2a8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2ac:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	7a1b      	ldrb	r3, [r3, #8]
 800e2b4:	f887 35f4 	strb.w	r3, [r7, #1524]	@ 0x5f4
						    uint8_t white = fsp_pkt->payload[4];
 800e2b8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2bc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	7a5b      	ldrb	r3, [r3, #9]
 800e2c4:	f887 35f3 	strb.w	r3, [r7, #1523]	@ 0x5f3
						    sprintf(buffer_0x0E, "IOU_Res: CMDcode 0x0E [Red: %u, Blue: %u, Green: %u, White: %u]\n",
 800e2c8:	f897 15f6 	ldrb.w	r1, [r7, #1526]	@ 0x5f6
 800e2cc:	f897 45f5 	ldrb.w	r4, [r7, #1525]	@ 0x5f5
 800e2d0:	f897 35f4 	ldrb.w	r3, [r7, #1524]	@ 0x5f4
 800e2d4:	f897 25f3 	ldrb.w	r2, [r7, #1523]	@ 0x5f3
 800e2d8:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800e2dc:	9201      	str	r2, [sp, #4]
 800e2de:	9300      	str	r3, [sp, #0]
 800e2e0:	4623      	mov	r3, r4
 800e2e2:	460a      	mov	r2, r1
 800e2e4:	497e      	ldr	r1, [pc, #504]	@ (800e4e0 <frame_processing+0x19d0>)
 800e2e6:	f001 fd9f 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800e2ea:	4b7e      	ldr	r3, [pc, #504]	@ (800e4e4 <frame_processing+0x19d4>)
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d005      	beq.n	800e300 <frame_processing+0x17f0>
		                    	Uart_sendstring(USART2, buffer_0x0E);
 800e2f4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	487b      	ldr	r0, [pc, #492]	@ (800e4e8 <frame_processing+0x19d8>)
 800e2fc:	f7f3 fe6e 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x0E);
 800e300:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e304:	4619      	mov	r1, r3
 800e306:	4879      	ldr	r0, [pc, #484]	@ (800e4ec <frame_processing+0x19dc>)
 800e308:	f7f3 fe68 	bl	8001fdc <Uart_sendstring>
						break;
 800e30c:	f000 bdb6 	b.w	800ee7c <frame_processing+0x236c>
						    uint8_t duty = fsp_pkt->payload[1];
 800e310:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e314:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	799b      	ldrb	r3, [r3, #6]
 800e31c:	f887 35f7 	strb.w	r3, [r7, #1527]	@ 0x5f7
						    sprintf(buffer_0x10, "IOU_Res: CMDcode 0x10 [Duty: %u%%]\n", duty);
 800e320:	f897 25f7 	ldrb.w	r2, [r7, #1527]	@ 0x5f7
 800e324:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e328:	4971      	ldr	r1, [pc, #452]	@ (800e4f0 <frame_processing+0x19e0>)
 800e32a:	4618      	mov	r0, r3
 800e32c:	f001 fd7c 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800e330:	4b6c      	ldr	r3, [pc, #432]	@ (800e4e4 <frame_processing+0x19d4>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d005      	beq.n	800e346 <frame_processing+0x1836>
		                    	Uart_sendstring(USART2, buffer_0x10);
 800e33a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e33e:	4619      	mov	r1, r3
 800e340:	4869      	ldr	r0, [pc, #420]	@ (800e4e8 <frame_processing+0x19d8>)
 800e342:	f7f3 fe4b 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x10);
 800e346:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e34a:	4619      	mov	r1, r3
 800e34c:	4867      	ldr	r0, [pc, #412]	@ (800e4ec <frame_processing+0x19dc>)
 800e34e:	f7f3 fe45 	bl	8001fdc <Uart_sendstring>
						break;
 800e352:	f000 bd93 	b.w	800ee7c <frame_processing+0x236c>
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800e356:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e35a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	799b      	ldrb	r3, [r3, #6]
 800e362:	021b      	lsls	r3, r3, #8
 800e364:	b21a      	sxth	r2, r3
 800e366:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e36a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	79db      	ldrb	r3, [r3, #7]
 800e372:	b21b      	sxth	r3, r3
 800e374:	4313      	orrs	r3, r2
 800e376:	f8a7 3602 	strh.w	r3, [r7, #1538]	@ 0x602
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800e37a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e37e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	7a1b      	ldrb	r3, [r3, #8]
 800e386:	021b      	lsls	r3, r3, #8
 800e388:	b21a      	sxth	r2, r3
 800e38a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e38e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	7a5b      	ldrb	r3, [r3, #9]
 800e396:	b21b      	sxth	r3, r3
 800e398:	4313      	orrs	r3, r2
 800e39a:	f8a7 3600 	strh.w	r3, [r7, #1536]	@ 0x600
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800e39e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3a2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	7a9b      	ldrb	r3, [r3, #10]
 800e3aa:	021b      	lsls	r3, r3, #8
 800e3ac:	b21a      	sxth	r2, r3
 800e3ae:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3b2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	7adb      	ldrb	r3, [r3, #11]
 800e3ba:	b21b      	sxth	r3, r3
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	f8a7 35fe 	strh.w	r3, [r7, #1534]	@ 0x5fe
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800e3c2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3c6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	7b1b      	ldrb	r3, [r3, #12]
 800e3ce:	021b      	lsls	r3, r3, #8
 800e3d0:	b21a      	sxth	r2, r3
 800e3d2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3d6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	7b5b      	ldrb	r3, [r3, #13]
 800e3de:	b21b      	sxth	r3, r3
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	f8a7 35fc 	strh.w	r3, [r7, #1532]	@ 0x5fc
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800e3e6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3ea:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	7b9b      	ldrb	r3, [r3, #14]
 800e3f2:	021b      	lsls	r3, r3, #8
 800e3f4:	b21a      	sxth	r2, r3
 800e3f6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3fa:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	7bdb      	ldrb	r3, [r3, #15]
 800e402:	b21b      	sxth	r3, r3
 800e404:	4313      	orrs	r3, r2
 800e406:	f8a7 35fa 	strh.w	r3, [r7, #1530]	@ 0x5fa
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800e40a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e40e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	7c1b      	ldrb	r3, [r3, #16]
 800e416:	021b      	lsls	r3, r3, #8
 800e418:	b21a      	sxth	r2, r3
 800e41a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e41e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	7c5b      	ldrb	r3, [r3, #17]
 800e426:	b21b      	sxth	r3, r3
 800e428:	4313      	orrs	r3, r2
 800e42a:	f8a7 35f8 	strh.w	r3, [r7, #1528]	@ 0x5f8
						    sprintf(buffer_0x11, "IOU_Res: CMDcode 0x11 [Accel: X=%d, Y=%d, Z=%d\nGyro: X=%d, Y=%d, Z=%d]\n",
 800e42e:	f9b7 5602 	ldrsh.w	r5, [r7, #1538]	@ 0x602
 800e432:	f9b7 6600 	ldrsh.w	r6, [r7, #1536]	@ 0x600
 800e436:	f9b7 35fe 	ldrsh.w	r3, [r7, #1534]	@ 0x5fe
 800e43a:	f9b7 25fc 	ldrsh.w	r2, [r7, #1532]	@ 0x5fc
 800e43e:	f9b7 15fa 	ldrsh.w	r1, [r7, #1530]	@ 0x5fa
 800e442:	f9b7 05f8 	ldrsh.w	r0, [r7, #1528]	@ 0x5f8
 800e446:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 800e44a:	9003      	str	r0, [sp, #12]
 800e44c:	9102      	str	r1, [sp, #8]
 800e44e:	9201      	str	r2, [sp, #4]
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	4633      	mov	r3, r6
 800e454:	462a      	mov	r2, r5
 800e456:	4927      	ldr	r1, [pc, #156]	@ (800e4f4 <frame_processing+0x19e4>)
 800e458:	4620      	mov	r0, r4
 800e45a:	f001 fce5 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800e45e:	4b21      	ldr	r3, [pc, #132]	@ (800e4e4 <frame_processing+0x19d4>)
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	b2db      	uxtb	r3, r3
 800e464:	2b00      	cmp	r3, #0
 800e466:	d005      	beq.n	800e474 <frame_processing+0x1964>
		                    	Uart_sendstring(USART2, buffer_0x11);
 800e468:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e46c:	4619      	mov	r1, r3
 800e46e:	481e      	ldr	r0, [pc, #120]	@ (800e4e8 <frame_processing+0x19d8>)
 800e470:	f7f3 fdb4 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x11);
 800e474:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e478:	4619      	mov	r1, r3
 800e47a:	481c      	ldr	r0, [pc, #112]	@ (800e4ec <frame_processing+0x19dc>)
 800e47c:	f7f3 fdae 	bl	8001fdc <Uart_sendstring>
						break;
 800e480:	f000 bcfc 	b.w	800ee7c <frame_processing+0x236c>
						    uint16_t pressure = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800e484:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e488:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	799b      	ldrb	r3, [r3, #6]
 800e490:	021b      	lsls	r3, r3, #8
 800e492:	b21a      	sxth	r2, r3
 800e494:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e498:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	79db      	ldrb	r3, [r3, #7]
 800e4a0:	b21b      	sxth	r3, r3
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	b21b      	sxth	r3, r3
 800e4a6:	f8a7 3604 	strh.w	r3, [r7, #1540]	@ 0x604
						    sprintf(buffer_0x12, "IOU_Res: CMDcode 0x12 [Press: %u]\n", pressure);
 800e4aa:	f8b7 2604 	ldrh.w	r2, [r7, #1540]	@ 0x604
 800e4ae:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e4b2:	4911      	ldr	r1, [pc, #68]	@ (800e4f8 <frame_processing+0x19e8>)
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f001 fcb7 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800e4ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e4e4 <frame_processing+0x19d4>)
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d005      	beq.n	800e4d0 <frame_processing+0x19c0>
		                    	Uart_sendstring(USART2, buffer_0x12);
 800e4c4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	4807      	ldr	r0, [pc, #28]	@ (800e4e8 <frame_processing+0x19d8>)
 800e4cc:	f7f3 fd86 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x12);
 800e4d0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	4805      	ldr	r0, [pc, #20]	@ (800e4ec <frame_processing+0x19dc>)
 800e4d8:	f7f3 fd80 	bl	8001fdc <Uart_sendstring>
						break;
 800e4dc:	f000 bcce 	b.w	800ee7c <frame_processing+0x236c>
 800e4e0:	08016164 	.word	0x08016164
 800e4e4:	200058d5 	.word	0x200058d5
 800e4e8:	40004400 	.word	0x40004400
 800e4ec:	40004c00 	.word	0x40004c00
 800e4f0:	080161a8 	.word	0x080161a8
 800e4f4:	080161cc 	.word	0x080161cc
 800e4f8:	08016214 	.word	0x08016214
							int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800e4fc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e500:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	799b      	ldrb	r3, [r3, #6]
 800e508:	021b      	lsls	r3, r3, #8
 800e50a:	b21a      	sxth	r2, r3
 800e50c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e510:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	79db      	ldrb	r3, [r3, #7]
 800e518:	b21b      	sxth	r3, r3
 800e51a:	4313      	orrs	r3, r2
 800e51c:	f8a7 3636 	strh.w	r3, [r7, #1590]	@ 0x636
							int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800e520:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e524:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	7a1b      	ldrb	r3, [r3, #8]
 800e52c:	021b      	lsls	r3, r3, #8
 800e52e:	b21a      	sxth	r2, r3
 800e530:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e534:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	7a5b      	ldrb	r3, [r3, #9]
 800e53c:	b21b      	sxth	r3, r3
 800e53e:	4313      	orrs	r3, r2
 800e540:	f8a7 3634 	strh.w	r3, [r7, #1588]	@ 0x634
							int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800e544:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e548:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	7a9b      	ldrb	r3, [r3, #10]
 800e550:	021b      	lsls	r3, r3, #8
 800e552:	b21a      	sxth	r2, r3
 800e554:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e558:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	7adb      	ldrb	r3, [r3, #11]
 800e560:	b21b      	sxth	r3, r3
 800e562:	4313      	orrs	r3, r2
 800e564:	f8a7 3632 	strh.w	r3, [r7, #1586]	@ 0x632
							int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800e568:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e56c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	7b1b      	ldrb	r3, [r3, #12]
 800e574:	021b      	lsls	r3, r3, #8
 800e576:	b21a      	sxth	r2, r3
 800e578:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e57c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	7b5b      	ldrb	r3, [r3, #13]
 800e584:	b21b      	sxth	r3, r3
 800e586:	4313      	orrs	r3, r2
 800e588:	f8a7 3630 	strh.w	r3, [r7, #1584]	@ 0x630
							int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800e58c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e590:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	7b9b      	ldrb	r3, [r3, #14]
 800e598:	021b      	lsls	r3, r3, #8
 800e59a:	b21a      	sxth	r2, r3
 800e59c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5a0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	7bdb      	ldrb	r3, [r3, #15]
 800e5a8:	b21b      	sxth	r3, r3
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	f8a7 362e 	strh.w	r3, [r7, #1582]	@ 0x62e
							int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800e5b0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5b4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	7c1b      	ldrb	r3, [r3, #16]
 800e5bc:	021b      	lsls	r3, r3, #8
 800e5be:	b21a      	sxth	r2, r3
 800e5c0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5c4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	7c5b      	ldrb	r3, [r3, #17]
 800e5cc:	b21b      	sxth	r3, r3
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	f8a7 362c 	strh.w	r3, [r7, #1580]	@ 0x62c
							int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800e5d4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5d8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	7c9b      	ldrb	r3, [r3, #18]
 800e5e0:	021b      	lsls	r3, r3, #8
 800e5e2:	b21a      	sxth	r2, r3
 800e5e4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5e8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	7cdb      	ldrb	r3, [r3, #19]
 800e5f0:	b21b      	sxth	r3, r3
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	f8a7 362a 	strh.w	r3, [r7, #1578]	@ 0x62a
							int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800e5f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	7d1b      	ldrb	r3, [r3, #20]
 800e604:	021b      	lsls	r3, r3, #8
 800e606:	b21a      	sxth	r2, r3
 800e608:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e60c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	7d5b      	ldrb	r3, [r3, #21]
 800e614:	b21b      	sxth	r3, r3
 800e616:	4313      	orrs	r3, r2
 800e618:	f8a7 3628 	strh.w	r3, [r7, #1576]	@ 0x628
							int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800e61c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e620:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	7d9b      	ldrb	r3, [r3, #22]
 800e628:	021b      	lsls	r3, r3, #8
 800e62a:	b21a      	sxth	r2, r3
 800e62c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e630:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	7ddb      	ldrb	r3, [r3, #23]
 800e638:	b21b      	sxth	r3, r3
 800e63a:	4313      	orrs	r3, r2
 800e63c:	f8a7 3626 	strh.w	r3, [r7, #1574]	@ 0x626
							int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800e640:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e644:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	7e1b      	ldrb	r3, [r3, #24]
 800e64c:	021b      	lsls	r3, r3, #8
 800e64e:	b21a      	sxth	r2, r3
 800e650:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e654:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	7e5b      	ldrb	r3, [r3, #25]
 800e65c:	b21b      	sxth	r3, r3
 800e65e:	4313      	orrs	r3, r2
 800e660:	f8a7 3624 	strh.w	r3, [r7, #1572]	@ 0x624
							int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800e664:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e668:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	7e9b      	ldrb	r3, [r3, #26]
 800e670:	021b      	lsls	r3, r3, #8
 800e672:	b21a      	sxth	r2, r3
 800e674:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e678:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	7edb      	ldrb	r3, [r3, #27]
 800e680:	b21b      	sxth	r3, r3
 800e682:	4313      	orrs	r3, r2
 800e684:	f8a7 3622 	strh.w	r3, [r7, #1570]	@ 0x622
							uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800e688:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e68c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	7f1b      	ldrb	r3, [r3, #28]
 800e694:	021b      	lsls	r3, r3, #8
 800e696:	b21a      	sxth	r2, r3
 800e698:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e69c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	7f5b      	ldrb	r3, [r3, #29]
 800e6a4:	b21b      	sxth	r3, r3
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	b21b      	sxth	r3, r3
 800e6aa:	f8a7 3620 	strh.w	r3, [r7, #1568]	@ 0x620
							uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 800e6ae:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e6b2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	7f9b      	ldrb	r3, [r3, #30]
 800e6ba:	021b      	lsls	r3, r3, #8
 800e6bc:	b21a      	sxth	r2, r3
 800e6be:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e6c2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	7fdb      	ldrb	r3, [r3, #31]
 800e6ca:	b21b      	sxth	r3, r3
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	b21b      	sxth	r3, r3
 800e6d0:	f8a7 361e 	strh.w	r3, [r7, #1566]	@ 0x61e
							uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 800e6d4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e6d8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e6e2:	021b      	lsls	r3, r3, #8
 800e6e4:	b21a      	sxth	r2, r3
 800e6e6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e6ea:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800e6f4:	b21b      	sxth	r3, r3
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	b21b      	sxth	r3, r3
 800e6fa:	f8a7 361c 	strh.w	r3, [r7, #1564]	@ 0x61c
							uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 800e6fe:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e702:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800e70c:	021b      	lsls	r3, r3, #8
 800e70e:	b21a      	sxth	r2, r3
 800e710:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e714:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800e71e:	b21b      	sxth	r3, r3
 800e720:	4313      	orrs	r3, r2
 800e722:	b21b      	sxth	r3, r3
 800e724:	f8a7 361a 	strh.w	r3, [r7, #1562]	@ 0x61a
							uint8_t neo_led_r = fsp_pkt->payload[31];
 800e728:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e72c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e736:	f887 3619 	strb.w	r3, [r7, #1561]	@ 0x619
							uint8_t neo_led_g = fsp_pkt->payload[32];
 800e73a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e73e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e748:	f887 3618 	strb.w	r3, [r7, #1560]	@ 0x618
							uint8_t neo_led_b = fsp_pkt->payload[33];
 800e74c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e750:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e75a:	f887 3617 	strb.w	r3, [r7, #1559]	@ 0x617
							uint8_t neo_led_w = fsp_pkt->payload[34];
 800e75e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e762:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e76c:	f887 3616 	strb.w	r3, [r7, #1558]	@ 0x616
							uint8_t ir_led_duty = fsp_pkt->payload[35];
 800e770:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e774:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e77e:	f887 3615 	strb.w	r3, [r7, #1557]	@ 0x615
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[36] << 8) | fsp_pkt->payload[37]);
 800e782:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e786:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800e790:	021b      	lsls	r3, r3, #8
 800e792:	b21a      	sxth	r2, r3
 800e794:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e798:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800e7a2:	b21b      	sxth	r3, r3
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	f8a7 3612 	strh.w	r3, [r7, #1554]	@ 0x612
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39]);
 800e7aa:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7ae:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800e7b8:	021b      	lsls	r3, r3, #8
 800e7ba:	b21a      	sxth	r2, r3
 800e7bc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7c0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e7ca:	b21b      	sxth	r3, r3
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	f8a7 3610 	strh.w	r3, [r7, #1552]	@ 0x610
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[40] << 8) | fsp_pkt->payload[41]);
 800e7d2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7d6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7e0:	021b      	lsls	r3, r3, #8
 800e7e2:	b21a      	sxth	r2, r3
 800e7e4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7e8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800e7f2:	b21b      	sxth	r3, r3
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	f8a7 360e 	strh.w	r3, [r7, #1550]	@ 0x60e
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[42] << 8) | fsp_pkt->payload[43]);
 800e7fa:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7fe:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e808:	021b      	lsls	r3, r3, #8
 800e80a:	b21a      	sxth	r2, r3
 800e80c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e810:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e81a:	b21b      	sxth	r3, r3
 800e81c:	4313      	orrs	r3, r2
 800e81e:	f8a7 360c 	strh.w	r3, [r7, #1548]	@ 0x60c
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45]);
 800e822:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e826:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e830:	021b      	lsls	r3, r3, #8
 800e832:	b21a      	sxth	r2, r3
 800e834:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e838:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e842:	b21b      	sxth	r3, r3
 800e844:	4313      	orrs	r3, r2
 800e846:	f8a7 360a 	strh.w	r3, [r7, #1546]	@ 0x60a
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[46] << 8) | fsp_pkt->payload[47]);
 800e84a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e84e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e858:	021b      	lsls	r3, r3, #8
 800e85a:	b21a      	sxth	r2, r3
 800e85c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e860:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e86a:	b21b      	sxth	r3, r3
 800e86c:	4313      	orrs	r3, r2
 800e86e:	f8a7 3608 	strh.w	r3, [r7, #1544]	@ 0x608
						    int16_t press = (int16_t)((fsp_pkt->payload[48] << 8) | fsp_pkt->payload[49]);
 800e872:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e876:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e880:	021b      	lsls	r3, r3, #8
 800e882:	b21a      	sxth	r2, r3
 800e884:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e888:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e892:	b21b      	sxth	r3, r3
 800e894:	4313      	orrs	r3, r2
 800e896:	f8a7 3606 	strh.w	r3, [r7, #1542]	@ 0x606
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e89a:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	da03      	bge.n	800e8aa <frame_processing+0x1d9a>
 800e8a2:	4bb5      	ldr	r3, [pc, #724]	@ (800eb78 <frame_processing+0x2068>)
 800e8a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e8a8:	e002      	b.n	800e8b0 <frame_processing+0x1da0>
 800e8aa:	4bb4      	ldr	r3, [pc, #720]	@ (800eb7c <frame_processing+0x206c>)
 800e8ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800e8b0:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	bfb8      	it	lt
 800e8b8:	425b      	neglt	r3, r3
 800e8ba:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e8bc:	4ab0      	ldr	r2, [pc, #704]	@ (800eb80 <frame_processing+0x2070>)
 800e8be:	fb82 1203 	smull	r1, r2, r2, r3
 800e8c2:	1092      	asrs	r2, r2, #2
 800e8c4:	17db      	asrs	r3, r3, #31
 800e8c6:	eba2 0e03 	sub.w	lr, r2, r3
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800e8ca:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	bfb8      	it	lt
 800e8d2:	425b      	neglt	r3, r3
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e8d8:	4ba9      	ldr	r3, [pc, #676]	@ (800eb80 <frame_processing+0x2070>)
 800e8da:	fb83 1302 	smull	r1, r3, r3, r2
 800e8de:	1099      	asrs	r1, r3, #2
 800e8e0:	17d3      	asrs	r3, r2, #31
 800e8e2:	1acb      	subs	r3, r1, r3
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	440b      	add	r3, r1
 800e8ec:	005b      	lsls	r3, r3, #1
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e8f4:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	da03      	bge.n	800e904 <frame_processing+0x1df4>
 800e8fc:	4b9e      	ldr	r3, [pc, #632]	@ (800eb78 <frame_processing+0x2068>)
 800e8fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e902:	e002      	b.n	800e90a <frame_processing+0x1dfa>
 800e904:	4b9d      	ldr	r3, [pc, #628]	@ (800eb7c <frame_processing+0x206c>)
 800e906:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800e90a:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800e90e:	2b00      	cmp	r3, #0
 800e910:	bfb8      	it	lt
 800e912:	425b      	neglt	r3, r3
 800e914:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e916:	4a9a      	ldr	r2, [pc, #616]	@ (800eb80 <frame_processing+0x2070>)
 800e918:	fb82 1203 	smull	r1, r2, r2, r3
 800e91c:	1092      	asrs	r2, r2, #2
 800e91e:	17db      	asrs	r3, r3, #31
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800e926:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	bfb8      	it	lt
 800e92e:	425b      	neglt	r3, r3
 800e930:	b29b      	uxth	r3, r3
 800e932:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e934:	4b92      	ldr	r3, [pc, #584]	@ (800eb80 <frame_processing+0x2070>)
 800e936:	fb83 1302 	smull	r1, r3, r3, r2
 800e93a:	1099      	asrs	r1, r3, #2
 800e93c:	17d3      	asrs	r3, r2, #31
 800e93e:	1acb      	subs	r3, r1, r3
 800e940:	4619      	mov	r1, r3
 800e942:	460b      	mov	r3, r1
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	440b      	add	r3, r1
 800e948:	005b      	lsls	r3, r3, #1
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e94e:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800e952:	2b00      	cmp	r3, #0
 800e954:	da03      	bge.n	800e95e <frame_processing+0x1e4e>
 800e956:	4b88      	ldr	r3, [pc, #544]	@ (800eb78 <frame_processing+0x2068>)
 800e958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e95c:	e002      	b.n	800e964 <frame_processing+0x1e54>
 800e95e:	4b87      	ldr	r3, [pc, #540]	@ (800eb7c <frame_processing+0x206c>)
 800e960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800e964:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800e968:	2b00      	cmp	r3, #0
 800e96a:	bfb8      	it	lt
 800e96c:	425b      	neglt	r3, r3
 800e96e:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e970:	4a83      	ldr	r2, [pc, #524]	@ (800eb80 <frame_processing+0x2070>)
 800e972:	fb82 1203 	smull	r1, r2, r2, r3
 800e976:	1092      	asrs	r2, r2, #2
 800e978:	17db      	asrs	r3, r3, #31
 800e97a:	1ad3      	subs	r3, r2, r3
 800e97c:	67bb      	str	r3, [r7, #120]	@ 0x78
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800e97e:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800e982:	2b00      	cmp	r3, #0
 800e984:	bfb8      	it	lt
 800e986:	425b      	neglt	r3, r3
 800e988:	b29b      	uxth	r3, r3
 800e98a:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e98c:	4b7c      	ldr	r3, [pc, #496]	@ (800eb80 <frame_processing+0x2070>)
 800e98e:	fb83 1302 	smull	r1, r3, r3, r2
 800e992:	1099      	asrs	r1, r3, #2
 800e994:	17d3      	asrs	r3, r2, #31
 800e996:	1acb      	subs	r3, r1, r3
 800e998:	4619      	mov	r1, r3
 800e99a:	460b      	mov	r3, r1
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	440b      	add	r3, r1
 800e9a0:	005b      	lsls	r3, r3, #1
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	677b      	str	r3, [r7, #116]	@ 0x74
 800e9a6:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	da03      	bge.n	800e9b6 <frame_processing+0x1ea6>
 800e9ae:	4b72      	ldr	r3, [pc, #456]	@ (800eb78 <frame_processing+0x2068>)
 800e9b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e9b4:	e002      	b.n	800e9bc <frame_processing+0x1eac>
 800e9b6:	4b71      	ldr	r3, [pc, #452]	@ (800eb7c <frame_processing+0x206c>)
 800e9b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800e9bc:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	bfb8      	it	lt
 800e9c4:	425b      	neglt	r3, r3
 800e9c6:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e9c8:	4a6d      	ldr	r2, [pc, #436]	@ (800eb80 <frame_processing+0x2070>)
 800e9ca:	fb82 1203 	smull	r1, r2, r2, r3
 800e9ce:	1092      	asrs	r2, r2, #2
 800e9d0:	17db      	asrs	r3, r3, #31
 800e9d2:	1ad3      	subs	r3, r2, r3
 800e9d4:	673b      	str	r3, [r7, #112]	@ 0x70
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800e9d6:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	bfb8      	it	lt
 800e9de:	425b      	neglt	r3, r3
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e9e4:	4b66      	ldr	r3, [pc, #408]	@ (800eb80 <frame_processing+0x2070>)
 800e9e6:	fb83 2301 	smull	r2, r3, r3, r1
 800e9ea:	109a      	asrs	r2, r3, #2
 800e9ec:	17cb      	asrs	r3, r1, #31
 800e9ee:	1ad3      	subs	r3, r2, r3
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	005b      	lsls	r3, r3, #1
 800e9fa:	1acb      	subs	r3, r1, r3
 800e9fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e9fe:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	da03      	bge.n	800ea0e <frame_processing+0x1efe>
 800ea06:	4b5c      	ldr	r3, [pc, #368]	@ (800eb78 <frame_processing+0x2068>)
 800ea08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ea0c:	e002      	b.n	800ea14 <frame_processing+0x1f04>
 800ea0e:	4b5b      	ldr	r3, [pc, #364]	@ (800eb7c <frame_processing+0x206c>)
 800ea10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800ea14:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	bfb8      	it	lt
 800ea1c:	425b      	neglt	r3, r3
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ea22:	4b57      	ldr	r3, [pc, #348]	@ (800eb80 <frame_processing+0x2070>)
 800ea24:	fb83 2301 	smull	r2, r3, r3, r1
 800ea28:	109a      	asrs	r2, r3, #2
 800ea2a:	17cb      	asrs	r3, r1, #31
 800ea2c:	1ad3      	subs	r3, r2, r3
 800ea2e:	66bb      	str	r3, [r7, #104]	@ 0x68
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800ea30:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	bfb8      	it	lt
 800ea38:	425b      	neglt	r3, r3
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ea3e:	4b50      	ldr	r3, [pc, #320]	@ (800eb80 <frame_processing+0x2070>)
 800ea40:	fb83 2301 	smull	r2, r3, r3, r1
 800ea44:	109a      	asrs	r2, r3, #2
 800ea46:	17cb      	asrs	r3, r1, #31
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	009b      	lsls	r3, r3, #2
 800ea50:	4413      	add	r3, r2
 800ea52:	005b      	lsls	r3, r3, #1
 800ea54:	1acb      	subs	r3, r1, r3
 800ea56:	667b      	str	r3, [r7, #100]	@ 0x64
 800ea58:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	da03      	bge.n	800ea68 <frame_processing+0x1f58>
 800ea60:	4b45      	ldr	r3, [pc, #276]	@ (800eb78 <frame_processing+0x2068>)
 800ea62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ea66:	e002      	b.n	800ea6e <frame_processing+0x1f5e>
 800ea68:	4b44      	ldr	r3, [pc, #272]	@ (800eb7c <frame_processing+0x206c>)
 800ea6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800ea6e:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	bfb8      	it	lt
 800ea76:	425b      	neglt	r3, r3
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ea7c:	4b40      	ldr	r3, [pc, #256]	@ (800eb80 <frame_processing+0x2070>)
 800ea7e:	fb83 2301 	smull	r2, r3, r3, r1
 800ea82:	109a      	asrs	r2, r3, #2
 800ea84:	17cb      	asrs	r3, r1, #31
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	663b      	str	r3, [r7, #96]	@ 0x60
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800ea8a:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	bfb8      	it	lt
 800ea92:	425b      	neglt	r3, r3
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ea98:	4b39      	ldr	r3, [pc, #228]	@ (800eb80 <frame_processing+0x2070>)
 800ea9a:	fb83 2301 	smull	r2, r3, r3, r1
 800ea9e:	109a      	asrs	r2, r3, #2
 800eaa0:	17cb      	asrs	r3, r1, #31
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	4413      	add	r3, r2
 800eaac:	005b      	lsls	r3, r3, #1
 800eaae:	1acb      	subs	r3, r1, r3
 800eab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eab2:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	da03      	bge.n	800eac2 <frame_processing+0x1fb2>
 800eaba:	4b2f      	ldr	r3, [pc, #188]	@ (800eb78 <frame_processing+0x2068>)
 800eabc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eac0:	e002      	b.n	800eac8 <frame_processing+0x1fb8>
 800eac2:	4b2e      	ldr	r3, [pc, #184]	@ (800eb7c <frame_processing+0x206c>)
 800eac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800eac8:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800eacc:	2b00      	cmp	r3, #0
 800eace:	bfb8      	it	lt
 800ead0:	425b      	neglt	r3, r3
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ead6:	4b2a      	ldr	r3, [pc, #168]	@ (800eb80 <frame_processing+0x2070>)
 800ead8:	fb83 2301 	smull	r2, r3, r3, r1
 800eadc:	109a      	asrs	r2, r3, #2
 800eade:	17cb      	asrs	r3, r1, #31
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	65bb      	str	r3, [r7, #88]	@ 0x58
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800eae4:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	bfb8      	it	lt
 800eaec:	425b      	neglt	r3, r3
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800eaf2:	4b23      	ldr	r3, [pc, #140]	@ (800eb80 <frame_processing+0x2070>)
 800eaf4:	fb83 2301 	smull	r2, r3, r3, r1
 800eaf8:	109a      	asrs	r2, r3, #2
 800eafa:	17cb      	asrs	r3, r1, #31
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	461a      	mov	r2, r3
 800eb00:	4613      	mov	r3, r2
 800eb02:	009b      	lsls	r3, r3, #2
 800eb04:	4413      	add	r3, r2
 800eb06:	005b      	lsls	r3, r3, #1
 800eb08:	1acb      	subs	r3, r1, r3
 800eb0a:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb0c:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	da03      	bge.n	800eb1c <frame_processing+0x200c>
 800eb14:	4b18      	ldr	r3, [pc, #96]	@ (800eb78 <frame_processing+0x2068>)
 800eb16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eb1a:	e002      	b.n	800eb22 <frame_processing+0x2012>
 800eb1c:	4b17      	ldr	r3, [pc, #92]	@ (800eb7c <frame_processing+0x206c>)
 800eb1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800eb22:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	bfb8      	it	lt
 800eb2a:	425b      	neglt	r3, r3
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800eb30:	4b13      	ldr	r3, [pc, #76]	@ (800eb80 <frame_processing+0x2070>)
 800eb32:	fb83 2301 	smull	r2, r3, r3, r1
 800eb36:	109a      	asrs	r2, r3, #2
 800eb38:	17cb      	asrs	r3, r1, #31
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	653b      	str	r3, [r7, #80]	@ 0x50
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800eb3e:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	bfb8      	it	lt
 800eb46:	425b      	neglt	r3, r3
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800eb4c:	4b0c      	ldr	r3, [pc, #48]	@ (800eb80 <frame_processing+0x2070>)
 800eb4e:	fb83 2301 	smull	r2, r3, r3, r1
 800eb52:	109a      	asrs	r2, r3, #2
 800eb54:	17cb      	asrs	r3, r1, #31
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	461a      	mov	r2, r3
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4413      	add	r3, r2
 800eb60:	005b      	lsls	r3, r3, #1
 800eb62:	1acb      	subs	r3, r1, r3
 800eb64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb66:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	da0a      	bge.n	800eb84 <frame_processing+0x2074>
 800eb6e:	4b02      	ldr	r3, [pc, #8]	@ (800eb78 <frame_processing+0x2068>)
 800eb70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eb74:	e009      	b.n	800eb8a <frame_processing+0x207a>
 800eb76:	bf00      	nop
 800eb78:	08015b5c 	.word	0x08015b5c
 800eb7c:	08015b60 	.word	0x08015b60
 800eb80:	66666667 	.word	0x66666667
 800eb84:	4b2c      	ldr	r3, [pc, #176]	@ (800ec38 <frame_processing+0x2128>)
 800eb86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800eb8a:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	bfb8      	it	lt
 800eb92:	425b      	neglt	r3, r3
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800eb98:	4b28      	ldr	r3, [pc, #160]	@ (800ec3c <frame_processing+0x212c>)
 800eb9a:	fb83 2301 	smull	r2, r3, r3, r1
 800eb9e:	109a      	asrs	r2, r3, #2
 800eba0:	17cb      	asrs	r3, r1, #31
 800eba2:	1ad3      	subs	r3, r2, r3
 800eba4:	64bb      	str	r3, [r7, #72]	@ 0x48
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800eba6:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	bfb8      	it	lt
 800ebae:	425b      	neglt	r3, r3
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ebb4:	4b21      	ldr	r3, [pc, #132]	@ (800ec3c <frame_processing+0x212c>)
 800ebb6:	fb83 2301 	smull	r2, r3, r3, r1
 800ebba:	109a      	asrs	r2, r3, #2
 800ebbc:	17cb      	asrs	r3, r1, #31
 800ebbe:	1ad3      	subs	r3, r2, r3
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	4413      	add	r3, r2
 800ebc8:	005b      	lsls	r3, r3, #1
 800ebca:	1acb      	subs	r3, r1, r3
 800ebcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebce:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	da03      	bge.n	800ebde <frame_processing+0x20ce>
 800ebd6:	4b1a      	ldr	r3, [pc, #104]	@ (800ec40 <frame_processing+0x2130>)
 800ebd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ebdc:	e002      	b.n	800ebe4 <frame_processing+0x20d4>
 800ebde:	4b16      	ldr	r3, [pc, #88]	@ (800ec38 <frame_processing+0x2128>)
 800ebe0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800ebe4:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	bfb8      	it	lt
 800ebec:	425b      	neglt	r3, r3
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ebf2:	4b12      	ldr	r3, [pc, #72]	@ (800ec3c <frame_processing+0x212c>)
 800ebf4:	fb83 2301 	smull	r2, r3, r3, r1
 800ebf8:	109a      	asrs	r2, r3, #2
 800ebfa:	17cb      	asrs	r3, r1, #31
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	643b      	str	r3, [r7, #64]	@ 0x40
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800ec00:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	bfb8      	it	lt
 800ec08:	425b      	neglt	r3, r3
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ec0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec3c <frame_processing+0x212c>)
 800ec10:	fb83 2301 	smull	r2, r3, r3, r1
 800ec14:	109a      	asrs	r2, r3, #2
 800ec16:	17cb      	asrs	r3, r1, #31
 800ec18:	1ad3      	subs	r3, r2, r3
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	4413      	add	r3, r2
 800ec22:	005b      	lsls	r3, r3, #1
 800ec24:	1acb      	subs	r3, r1, r3
 800ec26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec28:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	da09      	bge.n	800ec44 <frame_processing+0x2134>
 800ec30:	4b03      	ldr	r3, [pc, #12]	@ (800ec40 <frame_processing+0x2130>)
 800ec32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ec36:	e008      	b.n	800ec4a <frame_processing+0x213a>
 800ec38:	08015b60 	.word	0x08015b60
 800ec3c:	66666667 	.word	0x66666667
 800ec40:	08015b5c 	.word	0x08015b5c
 800ec44:	4b95      	ldr	r3, [pc, #596]	@ (800ee9c <frame_processing+0x238c>)
 800ec46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800ec4a:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	bfb8      	it	lt
 800ec52:	425b      	neglt	r3, r3
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ec58:	4b91      	ldr	r3, [pc, #580]	@ (800eea0 <frame_processing+0x2390>)
 800ec5a:	fb83 2301 	smull	r2, r3, r3, r1
 800ec5e:	109a      	asrs	r2, r3, #2
 800ec60:	17cb      	asrs	r3, r1, #31
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	63bb      	str	r3, [r7, #56]	@ 0x38
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800ec66:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	bfb8      	it	lt
 800ec6e:	425b      	neglt	r3, r3
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ec74:	4b8a      	ldr	r3, [pc, #552]	@ (800eea0 <frame_processing+0x2390>)
 800ec76:	fb83 2301 	smull	r2, r3, r3, r1
 800ec7a:	109a      	asrs	r2, r3, #2
 800ec7c:	17cb      	asrs	r3, r1, #31
 800ec7e:	1ad3      	subs	r3, r2, r3
 800ec80:	461a      	mov	r2, r3
 800ec82:	4613      	mov	r3, r2
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	4413      	add	r3, r2
 800ec88:	005b      	lsls	r3, r3, #1
 800ec8a:	1aca      	subs	r2, r1, r3
 800ec8c:	637a      	str	r2, [r7, #52]	@ 0x34
 800ec8e:	f8b7 2620 	ldrh.w	r2, [r7, #1568]	@ 0x620
 800ec92:	4b84      	ldr	r3, [pc, #528]	@ (800eea4 <frame_processing+0x2394>)
 800ec94:	fba3 2302 	umull	r2, r3, r3, r2
 800ec98:	095b      	lsrs	r3, r3, #5
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec9e:	f8b7 1620 	ldrh.w	r1, [r7, #1568]	@ 0x620
 800eca2:	4b80      	ldr	r3, [pc, #512]	@ (800eea4 <frame_processing+0x2394>)
 800eca4:	fba3 2301 	umull	r2, r3, r3, r1
 800eca8:	095a      	lsrs	r2, r3, #5
 800ecaa:	2364      	movs	r3, #100	@ 0x64
 800ecac:	fb02 f303 	mul.w	r3, r2, r3
 800ecb0:	1acb      	subs	r3, r1, r3
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ecb6:	f8b7 261e 	ldrh.w	r2, [r7, #1566]	@ 0x61e
 800ecba:	4b7a      	ldr	r3, [pc, #488]	@ (800eea4 <frame_processing+0x2394>)
 800ecbc:	fba3 2302 	umull	r2, r3, r3, r2
 800ecc0:	095b      	lsrs	r3, r3, #5
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ecc6:	f8b7 161e 	ldrh.w	r1, [r7, #1566]	@ 0x61e
 800ecca:	4b76      	ldr	r3, [pc, #472]	@ (800eea4 <frame_processing+0x2394>)
 800eccc:	fba3 2301 	umull	r2, r3, r3, r1
 800ecd0:	095a      	lsrs	r2, r3, #5
 800ecd2:	2364      	movs	r3, #100	@ 0x64
 800ecd4:	fb02 f303 	mul.w	r3, r2, r3
 800ecd8:	1acb      	subs	r3, r1, r3
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecde:	f8b7 261c 	ldrh.w	r2, [r7, #1564]	@ 0x61c
 800ece2:	4b70      	ldr	r3, [pc, #448]	@ (800eea4 <frame_processing+0x2394>)
 800ece4:	fba3 2302 	umull	r2, r3, r3, r2
 800ece8:	095b      	lsrs	r3, r3, #5
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	623b      	str	r3, [r7, #32]
 800ecee:	f8b7 161c 	ldrh.w	r1, [r7, #1564]	@ 0x61c
 800ecf2:	4b6c      	ldr	r3, [pc, #432]	@ (800eea4 <frame_processing+0x2394>)
 800ecf4:	fba3 2301 	umull	r2, r3, r3, r1
 800ecf8:	095a      	lsrs	r2, r3, #5
 800ecfa:	2364      	movs	r3, #100	@ 0x64
 800ecfc:	fb02 f303 	mul.w	r3, r2, r3
 800ed00:	1acb      	subs	r3, r1, r3
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	61fb      	str	r3, [r7, #28]
 800ed06:	f8b7 261a 	ldrh.w	r2, [r7, #1562]	@ 0x61a
 800ed0a:	4b66      	ldr	r3, [pc, #408]	@ (800eea4 <frame_processing+0x2394>)
 800ed0c:	fba3 2302 	umull	r2, r3, r3, r2
 800ed10:	095b      	lsrs	r3, r3, #5
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	61bb      	str	r3, [r7, #24]
 800ed16:	f8b7 161a 	ldrh.w	r1, [r7, #1562]	@ 0x61a
 800ed1a:	4b62      	ldr	r3, [pc, #392]	@ (800eea4 <frame_processing+0x2394>)
 800ed1c:	fba3 2301 	umull	r2, r3, r3, r1
 800ed20:	095a      	lsrs	r2, r3, #5
 800ed22:	2364      	movs	r3, #100	@ 0x64
 800ed24:	fb02 f303 	mul.w	r3, r2, r3
 800ed28:	1acb      	subs	r3, r1, r3
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	617b      	str	r3, [r7, #20]
 800ed2e:	f897 0619 	ldrb.w	r0, [r7, #1561]	@ 0x619
 800ed32:	4601      	mov	r1, r0
 800ed34:	6139      	str	r1, [r7, #16]
 800ed36:	f897 0618 	ldrb.w	r0, [r7, #1560]	@ 0x618
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	f897 4617 	ldrb.w	r4, [r7, #1559]	@ 0x617
 800ed40:	60bc      	str	r4, [r7, #8]
 800ed42:	f897 5616 	ldrb.w	r5, [r7, #1558]	@ 0x616
 800ed46:	607d      	str	r5, [r7, #4]
 800ed48:	f897 6615 	ldrb.w	r6, [r7, #1557]	@ 0x615
 800ed4c:	603e      	str	r6, [r7, #0]
 800ed4e:	f9b7 6612 	ldrsh.w	r6, [r7, #1554]	@ 0x612
 800ed52:	f9b7 5610 	ldrsh.w	r5, [r7, #1552]	@ 0x610
 800ed56:	f9b7 460e 	ldrsh.w	r4, [r7, #1550]	@ 0x60e
 800ed5a:	f9b7 060c 	ldrsh.w	r0, [r7, #1548]	@ 0x60c
 800ed5e:	f9b7 160a 	ldrsh.w	r1, [r7, #1546]	@ 0x60a
 800ed62:	f9b7 2608 	ldrsh.w	r2, [r7, #1544]	@ 0x608
 800ed66:	f9b7 3606 	ldrsh.w	r3, [r7, #1542]	@ 0x606
 800ed6a:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 800ed6e:	9332      	str	r3, [sp, #200]	@ 0xc8
 800ed70:	9231      	str	r2, [sp, #196]	@ 0xc4
 800ed72:	9130      	str	r1, [sp, #192]	@ 0xc0
 800ed74:	902f      	str	r0, [sp, #188]	@ 0xbc
 800ed76:	942e      	str	r4, [sp, #184]	@ 0xb8
 800ed78:	952d      	str	r5, [sp, #180]	@ 0xb4
 800ed7a:	962c      	str	r6, [sp, #176]	@ 0xb0
 800ed7c:	683e      	ldr	r6, [r7, #0]
 800ed7e:	962b      	str	r6, [sp, #172]	@ 0xac
 800ed80:	687d      	ldr	r5, [r7, #4]
 800ed82:	952a      	str	r5, [sp, #168]	@ 0xa8
 800ed84:	68bc      	ldr	r4, [r7, #8]
 800ed86:	9429      	str	r4, [sp, #164]	@ 0xa4
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	9028      	str	r0, [sp, #160]	@ 0xa0
 800ed8c:	6939      	ldr	r1, [r7, #16]
 800ed8e:	9127      	str	r1, [sp, #156]	@ 0x9c
 800ed90:	6979      	ldr	r1, [r7, #20]
 800ed92:	9126      	str	r1, [sp, #152]	@ 0x98
 800ed94:	69b9      	ldr	r1, [r7, #24]
 800ed96:	9125      	str	r1, [sp, #148]	@ 0x94
 800ed98:	69f9      	ldr	r1, [r7, #28]
 800ed9a:	9124      	str	r1, [sp, #144]	@ 0x90
 800ed9c:	6a39      	ldr	r1, [r7, #32]
 800ed9e:	9123      	str	r1, [sp, #140]	@ 0x8c
 800eda0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eda2:	9122      	str	r1, [sp, #136]	@ 0x88
 800eda4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eda6:	9121      	str	r1, [sp, #132]	@ 0x84
 800eda8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800edaa:	9120      	str	r1, [sp, #128]	@ 0x80
 800edac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800edae:	911f      	str	r1, [sp, #124]	@ 0x7c
 800edb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800edb2:	921e      	str	r2, [sp, #120]	@ 0x78
 800edb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edb6:	931d      	str	r3, [sp, #116]	@ 0x74
 800edb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800edbc:	931c      	str	r3, [sp, #112]	@ 0x70
 800edbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800edc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edc4:	931a      	str	r3, [sp, #104]	@ 0x68
 800edc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800edca:	9319      	str	r3, [sp, #100]	@ 0x64
 800edcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edce:	9318      	str	r3, [sp, #96]	@ 0x60
 800edd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edd2:	9317      	str	r3, [sp, #92]	@ 0x5c
 800edd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800edd8:	9316      	str	r3, [sp, #88]	@ 0x58
 800edda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eddc:	9315      	str	r3, [sp, #84]	@ 0x54
 800edde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ede0:	9314      	str	r3, [sp, #80]	@ 0x50
 800ede2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ede6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ede8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edea:	9312      	str	r3, [sp, #72]	@ 0x48
 800edec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800edee:	9311      	str	r3, [sp, #68]	@ 0x44
 800edf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800edf4:	9310      	str	r3, [sp, #64]	@ 0x40
 800edf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800edf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800edfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800edfc:	930e      	str	r3, [sp, #56]	@ 0x38
 800edfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ee02:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee06:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ee0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ee14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ee18:	9308      	str	r3, [sp, #32]
 800ee1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee1e:	9307      	str	r3, [sp, #28]
 800ee20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee22:	9306      	str	r3, [sp, #24]
 800ee24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ee26:	9305      	str	r3, [sp, #20]
 800ee28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ee2c:	9304      	str	r3, [sp, #16]
 800ee2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ee30:	9303      	str	r3, [sp, #12]
 800ee32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ee36:	9302      	str	r3, [sp, #8]
 800ee38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee3c:	9301      	str	r3, [sp, #4]
 800ee3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	4673      	mov	r3, lr
 800ee46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ee4a:	4917      	ldr	r1, [pc, #92]	@ (800eea8 <frame_processing+0x2398>)
 800ee4c:	4660      	mov	r0, ip
 800ee4e:	f000 ffeb 	bl	800fe28 <siprintf>
		                    if (uart_choose_usart2) {
 800ee52:	4b16      	ldr	r3, [pc, #88]	@ (800eeac <frame_processing+0x239c>)
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d005      	beq.n	800ee68 <frame_processing+0x2358>
		                    	Uart_sendstring(USART2, buffer_0x13);
 800ee5c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ee60:	4619      	mov	r1, r3
 800ee62:	4813      	ldr	r0, [pc, #76]	@ (800eeb0 <frame_processing+0x23a0>)
 800ee64:	f7f3 f8ba 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x13);
 800ee68:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	4811      	ldr	r0, [pc, #68]	@ (800eeb4 <frame_processing+0x23a4>)
 800ee70:	f7f3 f8b4 	bl	8001fdc <Uart_sendstring>
						break;
 800ee74:	e002      	b.n	800ee7c <frame_processing+0x236c>
							clear_send_flag();
 800ee76:	f7f3 f9f3 	bl	8002260 <clear_send_flag>
							break;
 800ee7a:	bf00      	nop
					clear_send_flag();
 800ee7c:	f7f3 f9f0 	bl	8002260 <clear_send_flag>
					return FSP_PKT_INVALID;
 800ee80:	2302      	movs	r3, #2
 800ee82:	e004      	b.n	800ee8e <frame_processing+0x237e>
		default:
			clear_send_flag();
 800ee84:	f7f3 f9ec 	bl	8002260 <clear_send_flag>
			return FSP_PKT_WRONG_ADR;
 800ee88:	2303      	movs	r3, #3
 800ee8a:	e000      	b.n	800ee8e <frame_processing+0x237e>
			break;

	}
	return 0;
 800ee8c:	2300      	movs	r3, #0

}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f507 67c7 	add.w	r7, r7, #1592	@ 0x638
 800ee94:	46bd      	mov	sp, r7
 800ee96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee9a:	bf00      	nop
 800ee9c:	08015b60 	.word	0x08015b60
 800eea0:	66666667 	.word	0x66666667
 800eea4:	51eb851f 	.word	0x51eb851f
 800eea8:	08016238 	.word	0x08016238
 800eeac:	200058d5 	.word	0x200058d5
 800eeb0:	40004400 	.word	0x40004400
 800eeb4:	40004c00 	.word	0x40004c00

0800eeb8 <atoi>:
 800eeb8:	220a      	movs	r2, #10
 800eeba:	2100      	movs	r1, #0
 800eebc:	f000 b87c 	b.w	800efb8 <strtol>

0800eec0 <_strtol_l.constprop.0>:
 800eec0:	2b24      	cmp	r3, #36	@ 0x24
 800eec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eec6:	4686      	mov	lr, r0
 800eec8:	4690      	mov	r8, r2
 800eeca:	d801      	bhi.n	800eed0 <_strtol_l.constprop.0+0x10>
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d106      	bne.n	800eede <_strtol_l.constprop.0+0x1e>
 800eed0:	f001 f860 	bl	800ff94 <__errno>
 800eed4:	2316      	movs	r3, #22
 800eed6:	6003      	str	r3, [r0, #0]
 800eed8:	2000      	movs	r0, #0
 800eeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eede:	4834      	ldr	r0, [pc, #208]	@ (800efb0 <_strtol_l.constprop.0+0xf0>)
 800eee0:	460d      	mov	r5, r1
 800eee2:	462a      	mov	r2, r5
 800eee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eee8:	5d06      	ldrb	r6, [r0, r4]
 800eeea:	f016 0608 	ands.w	r6, r6, #8
 800eeee:	d1f8      	bne.n	800eee2 <_strtol_l.constprop.0+0x22>
 800eef0:	2c2d      	cmp	r4, #45	@ 0x2d
 800eef2:	d12d      	bne.n	800ef50 <_strtol_l.constprop.0+0x90>
 800eef4:	782c      	ldrb	r4, [r5, #0]
 800eef6:	2601      	movs	r6, #1
 800eef8:	1c95      	adds	r5, r2, #2
 800eefa:	f033 0210 	bics.w	r2, r3, #16
 800eefe:	d109      	bne.n	800ef14 <_strtol_l.constprop.0+0x54>
 800ef00:	2c30      	cmp	r4, #48	@ 0x30
 800ef02:	d12a      	bne.n	800ef5a <_strtol_l.constprop.0+0x9a>
 800ef04:	782a      	ldrb	r2, [r5, #0]
 800ef06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef0a:	2a58      	cmp	r2, #88	@ 0x58
 800ef0c:	d125      	bne.n	800ef5a <_strtol_l.constprop.0+0x9a>
 800ef0e:	786c      	ldrb	r4, [r5, #1]
 800ef10:	2310      	movs	r3, #16
 800ef12:	3502      	adds	r5, #2
 800ef14:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ef18:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	fbbc f9f3 	udiv	r9, ip, r3
 800ef22:	4610      	mov	r0, r2
 800ef24:	fb03 ca19 	mls	sl, r3, r9, ip
 800ef28:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ef2c:	2f09      	cmp	r7, #9
 800ef2e:	d81b      	bhi.n	800ef68 <_strtol_l.constprop.0+0xa8>
 800ef30:	463c      	mov	r4, r7
 800ef32:	42a3      	cmp	r3, r4
 800ef34:	dd27      	ble.n	800ef86 <_strtol_l.constprop.0+0xc6>
 800ef36:	1c57      	adds	r7, r2, #1
 800ef38:	d007      	beq.n	800ef4a <_strtol_l.constprop.0+0x8a>
 800ef3a:	4581      	cmp	r9, r0
 800ef3c:	d320      	bcc.n	800ef80 <_strtol_l.constprop.0+0xc0>
 800ef3e:	d101      	bne.n	800ef44 <_strtol_l.constprop.0+0x84>
 800ef40:	45a2      	cmp	sl, r4
 800ef42:	db1d      	blt.n	800ef80 <_strtol_l.constprop.0+0xc0>
 800ef44:	fb00 4003 	mla	r0, r0, r3, r4
 800ef48:	2201      	movs	r2, #1
 800ef4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef4e:	e7eb      	b.n	800ef28 <_strtol_l.constprop.0+0x68>
 800ef50:	2c2b      	cmp	r4, #43	@ 0x2b
 800ef52:	bf04      	itt	eq
 800ef54:	782c      	ldrbeq	r4, [r5, #0]
 800ef56:	1c95      	addeq	r5, r2, #2
 800ef58:	e7cf      	b.n	800eefa <_strtol_l.constprop.0+0x3a>
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1da      	bne.n	800ef14 <_strtol_l.constprop.0+0x54>
 800ef5e:	2c30      	cmp	r4, #48	@ 0x30
 800ef60:	bf0c      	ite	eq
 800ef62:	2308      	moveq	r3, #8
 800ef64:	230a      	movne	r3, #10
 800ef66:	e7d5      	b.n	800ef14 <_strtol_l.constprop.0+0x54>
 800ef68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ef6c:	2f19      	cmp	r7, #25
 800ef6e:	d801      	bhi.n	800ef74 <_strtol_l.constprop.0+0xb4>
 800ef70:	3c37      	subs	r4, #55	@ 0x37
 800ef72:	e7de      	b.n	800ef32 <_strtol_l.constprop.0+0x72>
 800ef74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ef78:	2f19      	cmp	r7, #25
 800ef7a:	d804      	bhi.n	800ef86 <_strtol_l.constprop.0+0xc6>
 800ef7c:	3c57      	subs	r4, #87	@ 0x57
 800ef7e:	e7d8      	b.n	800ef32 <_strtol_l.constprop.0+0x72>
 800ef80:	f04f 32ff 	mov.w	r2, #4294967295
 800ef84:	e7e1      	b.n	800ef4a <_strtol_l.constprop.0+0x8a>
 800ef86:	1c53      	adds	r3, r2, #1
 800ef88:	d108      	bne.n	800ef9c <_strtol_l.constprop.0+0xdc>
 800ef8a:	2322      	movs	r3, #34	@ 0x22
 800ef8c:	f8ce 3000 	str.w	r3, [lr]
 800ef90:	4660      	mov	r0, ip
 800ef92:	f1b8 0f00 	cmp.w	r8, #0
 800ef96:	d0a0      	beq.n	800eeda <_strtol_l.constprop.0+0x1a>
 800ef98:	1e69      	subs	r1, r5, #1
 800ef9a:	e006      	b.n	800efaa <_strtol_l.constprop.0+0xea>
 800ef9c:	b106      	cbz	r6, 800efa0 <_strtol_l.constprop.0+0xe0>
 800ef9e:	4240      	negs	r0, r0
 800efa0:	f1b8 0f00 	cmp.w	r8, #0
 800efa4:	d099      	beq.n	800eeda <_strtol_l.constprop.0+0x1a>
 800efa6:	2a00      	cmp	r2, #0
 800efa8:	d1f6      	bne.n	800ef98 <_strtol_l.constprop.0+0xd8>
 800efaa:	f8c8 1000 	str.w	r1, [r8]
 800efae:	e794      	b.n	800eeda <_strtol_l.constprop.0+0x1a>
 800efb0:	080163d5 	.word	0x080163d5

0800efb4 <_strtol_r>:
 800efb4:	f7ff bf84 	b.w	800eec0 <_strtol_l.constprop.0>

0800efb8 <strtol>:
 800efb8:	4613      	mov	r3, r2
 800efba:	460a      	mov	r2, r1
 800efbc:	4601      	mov	r1, r0
 800efbe:	4802      	ldr	r0, [pc, #8]	@ (800efc8 <strtol+0x10>)
 800efc0:	6800      	ldr	r0, [r0, #0]
 800efc2:	f7ff bf7d 	b.w	800eec0 <_strtol_l.constprop.0>
 800efc6:	bf00      	nop
 800efc8:	2000047c 	.word	0x2000047c

0800efcc <__cvt>:
 800efcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efd0:	ec57 6b10 	vmov	r6, r7, d0
 800efd4:	2f00      	cmp	r7, #0
 800efd6:	460c      	mov	r4, r1
 800efd8:	4619      	mov	r1, r3
 800efda:	463b      	mov	r3, r7
 800efdc:	bfbb      	ittet	lt
 800efde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800efe2:	461f      	movlt	r7, r3
 800efe4:	2300      	movge	r3, #0
 800efe6:	232d      	movlt	r3, #45	@ 0x2d
 800efe8:	700b      	strb	r3, [r1, #0]
 800efea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800efec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800eff0:	4691      	mov	r9, r2
 800eff2:	f023 0820 	bic.w	r8, r3, #32
 800eff6:	bfbc      	itt	lt
 800eff8:	4632      	movlt	r2, r6
 800effa:	4616      	movlt	r6, r2
 800effc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f000:	d005      	beq.n	800f00e <__cvt+0x42>
 800f002:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f006:	d100      	bne.n	800f00a <__cvt+0x3e>
 800f008:	3401      	adds	r4, #1
 800f00a:	2102      	movs	r1, #2
 800f00c:	e000      	b.n	800f010 <__cvt+0x44>
 800f00e:	2103      	movs	r1, #3
 800f010:	ab03      	add	r3, sp, #12
 800f012:	9301      	str	r3, [sp, #4]
 800f014:	ab02      	add	r3, sp, #8
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	ec47 6b10 	vmov	d0, r6, r7
 800f01c:	4653      	mov	r3, sl
 800f01e:	4622      	mov	r2, r4
 800f020:	f001 f882 	bl	8010128 <_dtoa_r>
 800f024:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f028:	4605      	mov	r5, r0
 800f02a:	d119      	bne.n	800f060 <__cvt+0x94>
 800f02c:	f019 0f01 	tst.w	r9, #1
 800f030:	d00e      	beq.n	800f050 <__cvt+0x84>
 800f032:	eb00 0904 	add.w	r9, r0, r4
 800f036:	2200      	movs	r2, #0
 800f038:	2300      	movs	r3, #0
 800f03a:	4630      	mov	r0, r6
 800f03c:	4639      	mov	r1, r7
 800f03e:	f7f1 fd53 	bl	8000ae8 <__aeabi_dcmpeq>
 800f042:	b108      	cbz	r0, 800f048 <__cvt+0x7c>
 800f044:	f8cd 900c 	str.w	r9, [sp, #12]
 800f048:	2230      	movs	r2, #48	@ 0x30
 800f04a:	9b03      	ldr	r3, [sp, #12]
 800f04c:	454b      	cmp	r3, r9
 800f04e:	d31e      	bcc.n	800f08e <__cvt+0xc2>
 800f050:	9b03      	ldr	r3, [sp, #12]
 800f052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f054:	1b5b      	subs	r3, r3, r5
 800f056:	4628      	mov	r0, r5
 800f058:	6013      	str	r3, [r2, #0]
 800f05a:	b004      	add	sp, #16
 800f05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f060:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f064:	eb00 0904 	add.w	r9, r0, r4
 800f068:	d1e5      	bne.n	800f036 <__cvt+0x6a>
 800f06a:	7803      	ldrb	r3, [r0, #0]
 800f06c:	2b30      	cmp	r3, #48	@ 0x30
 800f06e:	d10a      	bne.n	800f086 <__cvt+0xba>
 800f070:	2200      	movs	r2, #0
 800f072:	2300      	movs	r3, #0
 800f074:	4630      	mov	r0, r6
 800f076:	4639      	mov	r1, r7
 800f078:	f7f1 fd36 	bl	8000ae8 <__aeabi_dcmpeq>
 800f07c:	b918      	cbnz	r0, 800f086 <__cvt+0xba>
 800f07e:	f1c4 0401 	rsb	r4, r4, #1
 800f082:	f8ca 4000 	str.w	r4, [sl]
 800f086:	f8da 3000 	ldr.w	r3, [sl]
 800f08a:	4499      	add	r9, r3
 800f08c:	e7d3      	b.n	800f036 <__cvt+0x6a>
 800f08e:	1c59      	adds	r1, r3, #1
 800f090:	9103      	str	r1, [sp, #12]
 800f092:	701a      	strb	r2, [r3, #0]
 800f094:	e7d9      	b.n	800f04a <__cvt+0x7e>

0800f096 <__exponent>:
 800f096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f098:	2900      	cmp	r1, #0
 800f09a:	bfba      	itte	lt
 800f09c:	4249      	neglt	r1, r1
 800f09e:	232d      	movlt	r3, #45	@ 0x2d
 800f0a0:	232b      	movge	r3, #43	@ 0x2b
 800f0a2:	2909      	cmp	r1, #9
 800f0a4:	7002      	strb	r2, [r0, #0]
 800f0a6:	7043      	strb	r3, [r0, #1]
 800f0a8:	dd29      	ble.n	800f0fe <__exponent+0x68>
 800f0aa:	f10d 0307 	add.w	r3, sp, #7
 800f0ae:	461d      	mov	r5, r3
 800f0b0:	270a      	movs	r7, #10
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	fbb1 f6f7 	udiv	r6, r1, r7
 800f0b8:	fb07 1416 	mls	r4, r7, r6, r1
 800f0bc:	3430      	adds	r4, #48	@ 0x30
 800f0be:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f0c2:	460c      	mov	r4, r1
 800f0c4:	2c63      	cmp	r4, #99	@ 0x63
 800f0c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f0ca:	4631      	mov	r1, r6
 800f0cc:	dcf1      	bgt.n	800f0b2 <__exponent+0x1c>
 800f0ce:	3130      	adds	r1, #48	@ 0x30
 800f0d0:	1e94      	subs	r4, r2, #2
 800f0d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f0d6:	1c41      	adds	r1, r0, #1
 800f0d8:	4623      	mov	r3, r4
 800f0da:	42ab      	cmp	r3, r5
 800f0dc:	d30a      	bcc.n	800f0f4 <__exponent+0x5e>
 800f0de:	f10d 0309 	add.w	r3, sp, #9
 800f0e2:	1a9b      	subs	r3, r3, r2
 800f0e4:	42ac      	cmp	r4, r5
 800f0e6:	bf88      	it	hi
 800f0e8:	2300      	movhi	r3, #0
 800f0ea:	3302      	adds	r3, #2
 800f0ec:	4403      	add	r3, r0
 800f0ee:	1a18      	subs	r0, r3, r0
 800f0f0:	b003      	add	sp, #12
 800f0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f0f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f0fc:	e7ed      	b.n	800f0da <__exponent+0x44>
 800f0fe:	2330      	movs	r3, #48	@ 0x30
 800f100:	3130      	adds	r1, #48	@ 0x30
 800f102:	7083      	strb	r3, [r0, #2]
 800f104:	70c1      	strb	r1, [r0, #3]
 800f106:	1d03      	adds	r3, r0, #4
 800f108:	e7f1      	b.n	800f0ee <__exponent+0x58>
	...

0800f10c <_printf_float>:
 800f10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f110:	b08d      	sub	sp, #52	@ 0x34
 800f112:	460c      	mov	r4, r1
 800f114:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f118:	4616      	mov	r6, r2
 800f11a:	461f      	mov	r7, r3
 800f11c:	4605      	mov	r5, r0
 800f11e:	f000 feef 	bl	800ff00 <_localeconv_r>
 800f122:	6803      	ldr	r3, [r0, #0]
 800f124:	9304      	str	r3, [sp, #16]
 800f126:	4618      	mov	r0, r3
 800f128:	f7f1 f8b2 	bl	8000290 <strlen>
 800f12c:	2300      	movs	r3, #0
 800f12e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f130:	f8d8 3000 	ldr.w	r3, [r8]
 800f134:	9005      	str	r0, [sp, #20]
 800f136:	3307      	adds	r3, #7
 800f138:	f023 0307 	bic.w	r3, r3, #7
 800f13c:	f103 0208 	add.w	r2, r3, #8
 800f140:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f144:	f8d4 b000 	ldr.w	fp, [r4]
 800f148:	f8c8 2000 	str.w	r2, [r8]
 800f14c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f150:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f154:	9307      	str	r3, [sp, #28]
 800f156:	f8cd 8018 	str.w	r8, [sp, #24]
 800f15a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f15e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f162:	4b9c      	ldr	r3, [pc, #624]	@ (800f3d4 <_printf_float+0x2c8>)
 800f164:	f04f 32ff 	mov.w	r2, #4294967295
 800f168:	f7f1 fcf0 	bl	8000b4c <__aeabi_dcmpun>
 800f16c:	bb70      	cbnz	r0, 800f1cc <_printf_float+0xc0>
 800f16e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f172:	4b98      	ldr	r3, [pc, #608]	@ (800f3d4 <_printf_float+0x2c8>)
 800f174:	f04f 32ff 	mov.w	r2, #4294967295
 800f178:	f7f1 fcca 	bl	8000b10 <__aeabi_dcmple>
 800f17c:	bb30      	cbnz	r0, 800f1cc <_printf_float+0xc0>
 800f17e:	2200      	movs	r2, #0
 800f180:	2300      	movs	r3, #0
 800f182:	4640      	mov	r0, r8
 800f184:	4649      	mov	r1, r9
 800f186:	f7f1 fcb9 	bl	8000afc <__aeabi_dcmplt>
 800f18a:	b110      	cbz	r0, 800f192 <_printf_float+0x86>
 800f18c:	232d      	movs	r3, #45	@ 0x2d
 800f18e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f192:	4a91      	ldr	r2, [pc, #580]	@ (800f3d8 <_printf_float+0x2cc>)
 800f194:	4b91      	ldr	r3, [pc, #580]	@ (800f3dc <_printf_float+0x2d0>)
 800f196:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f19a:	bf94      	ite	ls
 800f19c:	4690      	movls	r8, r2
 800f19e:	4698      	movhi	r8, r3
 800f1a0:	2303      	movs	r3, #3
 800f1a2:	6123      	str	r3, [r4, #16]
 800f1a4:	f02b 0304 	bic.w	r3, fp, #4
 800f1a8:	6023      	str	r3, [r4, #0]
 800f1aa:	f04f 0900 	mov.w	r9, #0
 800f1ae:	9700      	str	r7, [sp, #0]
 800f1b0:	4633      	mov	r3, r6
 800f1b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f1b4:	4621      	mov	r1, r4
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	f000 f9d2 	bl	800f560 <_printf_common>
 800f1bc:	3001      	adds	r0, #1
 800f1be:	f040 808d 	bne.w	800f2dc <_printf_float+0x1d0>
 800f1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c6:	b00d      	add	sp, #52	@ 0x34
 800f1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1cc:	4642      	mov	r2, r8
 800f1ce:	464b      	mov	r3, r9
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	4649      	mov	r1, r9
 800f1d4:	f7f1 fcba 	bl	8000b4c <__aeabi_dcmpun>
 800f1d8:	b140      	cbz	r0, 800f1ec <_printf_float+0xe0>
 800f1da:	464b      	mov	r3, r9
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	bfbc      	itt	lt
 800f1e0:	232d      	movlt	r3, #45	@ 0x2d
 800f1e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f1e6:	4a7e      	ldr	r2, [pc, #504]	@ (800f3e0 <_printf_float+0x2d4>)
 800f1e8:	4b7e      	ldr	r3, [pc, #504]	@ (800f3e4 <_printf_float+0x2d8>)
 800f1ea:	e7d4      	b.n	800f196 <_printf_float+0x8a>
 800f1ec:	6863      	ldr	r3, [r4, #4]
 800f1ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f1f2:	9206      	str	r2, [sp, #24]
 800f1f4:	1c5a      	adds	r2, r3, #1
 800f1f6:	d13b      	bne.n	800f270 <_printf_float+0x164>
 800f1f8:	2306      	movs	r3, #6
 800f1fa:	6063      	str	r3, [r4, #4]
 800f1fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f200:	2300      	movs	r3, #0
 800f202:	6022      	str	r2, [r4, #0]
 800f204:	9303      	str	r3, [sp, #12]
 800f206:	ab0a      	add	r3, sp, #40	@ 0x28
 800f208:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f20c:	ab09      	add	r3, sp, #36	@ 0x24
 800f20e:	9300      	str	r3, [sp, #0]
 800f210:	6861      	ldr	r1, [r4, #4]
 800f212:	ec49 8b10 	vmov	d0, r8, r9
 800f216:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f21a:	4628      	mov	r0, r5
 800f21c:	f7ff fed6 	bl	800efcc <__cvt>
 800f220:	9b06      	ldr	r3, [sp, #24]
 800f222:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f224:	2b47      	cmp	r3, #71	@ 0x47
 800f226:	4680      	mov	r8, r0
 800f228:	d129      	bne.n	800f27e <_printf_float+0x172>
 800f22a:	1cc8      	adds	r0, r1, #3
 800f22c:	db02      	blt.n	800f234 <_printf_float+0x128>
 800f22e:	6863      	ldr	r3, [r4, #4]
 800f230:	4299      	cmp	r1, r3
 800f232:	dd41      	ble.n	800f2b8 <_printf_float+0x1ac>
 800f234:	f1aa 0a02 	sub.w	sl, sl, #2
 800f238:	fa5f fa8a 	uxtb.w	sl, sl
 800f23c:	3901      	subs	r1, #1
 800f23e:	4652      	mov	r2, sl
 800f240:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f244:	9109      	str	r1, [sp, #36]	@ 0x24
 800f246:	f7ff ff26 	bl	800f096 <__exponent>
 800f24a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f24c:	1813      	adds	r3, r2, r0
 800f24e:	2a01      	cmp	r2, #1
 800f250:	4681      	mov	r9, r0
 800f252:	6123      	str	r3, [r4, #16]
 800f254:	dc02      	bgt.n	800f25c <_printf_float+0x150>
 800f256:	6822      	ldr	r2, [r4, #0]
 800f258:	07d2      	lsls	r2, r2, #31
 800f25a:	d501      	bpl.n	800f260 <_printf_float+0x154>
 800f25c:	3301      	adds	r3, #1
 800f25e:	6123      	str	r3, [r4, #16]
 800f260:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f264:	2b00      	cmp	r3, #0
 800f266:	d0a2      	beq.n	800f1ae <_printf_float+0xa2>
 800f268:	232d      	movs	r3, #45	@ 0x2d
 800f26a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f26e:	e79e      	b.n	800f1ae <_printf_float+0xa2>
 800f270:	9a06      	ldr	r2, [sp, #24]
 800f272:	2a47      	cmp	r2, #71	@ 0x47
 800f274:	d1c2      	bne.n	800f1fc <_printf_float+0xf0>
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1c0      	bne.n	800f1fc <_printf_float+0xf0>
 800f27a:	2301      	movs	r3, #1
 800f27c:	e7bd      	b.n	800f1fa <_printf_float+0xee>
 800f27e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f282:	d9db      	bls.n	800f23c <_printf_float+0x130>
 800f284:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f288:	d118      	bne.n	800f2bc <_printf_float+0x1b0>
 800f28a:	2900      	cmp	r1, #0
 800f28c:	6863      	ldr	r3, [r4, #4]
 800f28e:	dd0b      	ble.n	800f2a8 <_printf_float+0x19c>
 800f290:	6121      	str	r1, [r4, #16]
 800f292:	b913      	cbnz	r3, 800f29a <_printf_float+0x18e>
 800f294:	6822      	ldr	r2, [r4, #0]
 800f296:	07d0      	lsls	r0, r2, #31
 800f298:	d502      	bpl.n	800f2a0 <_printf_float+0x194>
 800f29a:	3301      	adds	r3, #1
 800f29c:	440b      	add	r3, r1
 800f29e:	6123      	str	r3, [r4, #16]
 800f2a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f2a2:	f04f 0900 	mov.w	r9, #0
 800f2a6:	e7db      	b.n	800f260 <_printf_float+0x154>
 800f2a8:	b913      	cbnz	r3, 800f2b0 <_printf_float+0x1a4>
 800f2aa:	6822      	ldr	r2, [r4, #0]
 800f2ac:	07d2      	lsls	r2, r2, #31
 800f2ae:	d501      	bpl.n	800f2b4 <_printf_float+0x1a8>
 800f2b0:	3302      	adds	r3, #2
 800f2b2:	e7f4      	b.n	800f29e <_printf_float+0x192>
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	e7f2      	b.n	800f29e <_printf_float+0x192>
 800f2b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f2bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2be:	4299      	cmp	r1, r3
 800f2c0:	db05      	blt.n	800f2ce <_printf_float+0x1c2>
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	6121      	str	r1, [r4, #16]
 800f2c6:	07d8      	lsls	r0, r3, #31
 800f2c8:	d5ea      	bpl.n	800f2a0 <_printf_float+0x194>
 800f2ca:	1c4b      	adds	r3, r1, #1
 800f2cc:	e7e7      	b.n	800f29e <_printf_float+0x192>
 800f2ce:	2900      	cmp	r1, #0
 800f2d0:	bfd4      	ite	le
 800f2d2:	f1c1 0202 	rsble	r2, r1, #2
 800f2d6:	2201      	movgt	r2, #1
 800f2d8:	4413      	add	r3, r2
 800f2da:	e7e0      	b.n	800f29e <_printf_float+0x192>
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	055a      	lsls	r2, r3, #21
 800f2e0:	d407      	bmi.n	800f2f2 <_printf_float+0x1e6>
 800f2e2:	6923      	ldr	r3, [r4, #16]
 800f2e4:	4642      	mov	r2, r8
 800f2e6:	4631      	mov	r1, r6
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	47b8      	blx	r7
 800f2ec:	3001      	adds	r0, #1
 800f2ee:	d12b      	bne.n	800f348 <_printf_float+0x23c>
 800f2f0:	e767      	b.n	800f1c2 <_printf_float+0xb6>
 800f2f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f2f6:	f240 80dd 	bls.w	800f4b4 <_printf_float+0x3a8>
 800f2fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f2fe:	2200      	movs	r2, #0
 800f300:	2300      	movs	r3, #0
 800f302:	f7f1 fbf1 	bl	8000ae8 <__aeabi_dcmpeq>
 800f306:	2800      	cmp	r0, #0
 800f308:	d033      	beq.n	800f372 <_printf_float+0x266>
 800f30a:	4a37      	ldr	r2, [pc, #220]	@ (800f3e8 <_printf_float+0x2dc>)
 800f30c:	2301      	movs	r3, #1
 800f30e:	4631      	mov	r1, r6
 800f310:	4628      	mov	r0, r5
 800f312:	47b8      	blx	r7
 800f314:	3001      	adds	r0, #1
 800f316:	f43f af54 	beq.w	800f1c2 <_printf_float+0xb6>
 800f31a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f31e:	4543      	cmp	r3, r8
 800f320:	db02      	blt.n	800f328 <_printf_float+0x21c>
 800f322:	6823      	ldr	r3, [r4, #0]
 800f324:	07d8      	lsls	r0, r3, #31
 800f326:	d50f      	bpl.n	800f348 <_printf_float+0x23c>
 800f328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f32c:	4631      	mov	r1, r6
 800f32e:	4628      	mov	r0, r5
 800f330:	47b8      	blx	r7
 800f332:	3001      	adds	r0, #1
 800f334:	f43f af45 	beq.w	800f1c2 <_printf_float+0xb6>
 800f338:	f04f 0900 	mov.w	r9, #0
 800f33c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f340:	f104 0a1a 	add.w	sl, r4, #26
 800f344:	45c8      	cmp	r8, r9
 800f346:	dc09      	bgt.n	800f35c <_printf_float+0x250>
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	079b      	lsls	r3, r3, #30
 800f34c:	f100 8103 	bmi.w	800f556 <_printf_float+0x44a>
 800f350:	68e0      	ldr	r0, [r4, #12]
 800f352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f354:	4298      	cmp	r0, r3
 800f356:	bfb8      	it	lt
 800f358:	4618      	movlt	r0, r3
 800f35a:	e734      	b.n	800f1c6 <_printf_float+0xba>
 800f35c:	2301      	movs	r3, #1
 800f35e:	4652      	mov	r2, sl
 800f360:	4631      	mov	r1, r6
 800f362:	4628      	mov	r0, r5
 800f364:	47b8      	blx	r7
 800f366:	3001      	adds	r0, #1
 800f368:	f43f af2b 	beq.w	800f1c2 <_printf_float+0xb6>
 800f36c:	f109 0901 	add.w	r9, r9, #1
 800f370:	e7e8      	b.n	800f344 <_printf_float+0x238>
 800f372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f374:	2b00      	cmp	r3, #0
 800f376:	dc39      	bgt.n	800f3ec <_printf_float+0x2e0>
 800f378:	4a1b      	ldr	r2, [pc, #108]	@ (800f3e8 <_printf_float+0x2dc>)
 800f37a:	2301      	movs	r3, #1
 800f37c:	4631      	mov	r1, r6
 800f37e:	4628      	mov	r0, r5
 800f380:	47b8      	blx	r7
 800f382:	3001      	adds	r0, #1
 800f384:	f43f af1d 	beq.w	800f1c2 <_printf_float+0xb6>
 800f388:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f38c:	ea59 0303 	orrs.w	r3, r9, r3
 800f390:	d102      	bne.n	800f398 <_printf_float+0x28c>
 800f392:	6823      	ldr	r3, [r4, #0]
 800f394:	07d9      	lsls	r1, r3, #31
 800f396:	d5d7      	bpl.n	800f348 <_printf_float+0x23c>
 800f398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f39c:	4631      	mov	r1, r6
 800f39e:	4628      	mov	r0, r5
 800f3a0:	47b8      	blx	r7
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	f43f af0d 	beq.w	800f1c2 <_printf_float+0xb6>
 800f3a8:	f04f 0a00 	mov.w	sl, #0
 800f3ac:	f104 0b1a 	add.w	fp, r4, #26
 800f3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3b2:	425b      	negs	r3, r3
 800f3b4:	4553      	cmp	r3, sl
 800f3b6:	dc01      	bgt.n	800f3bc <_printf_float+0x2b0>
 800f3b8:	464b      	mov	r3, r9
 800f3ba:	e793      	b.n	800f2e4 <_printf_float+0x1d8>
 800f3bc:	2301      	movs	r3, #1
 800f3be:	465a      	mov	r2, fp
 800f3c0:	4631      	mov	r1, r6
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	47b8      	blx	r7
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	f43f aefb 	beq.w	800f1c2 <_printf_float+0xb6>
 800f3cc:	f10a 0a01 	add.w	sl, sl, #1
 800f3d0:	e7ee      	b.n	800f3b0 <_printf_float+0x2a4>
 800f3d2:	bf00      	nop
 800f3d4:	7fefffff 	.word	0x7fefffff
 800f3d8:	080164d5 	.word	0x080164d5
 800f3dc:	080164d9 	.word	0x080164d9
 800f3e0:	080164dd 	.word	0x080164dd
 800f3e4:	080164e1 	.word	0x080164e1
 800f3e8:	080164e5 	.word	0x080164e5
 800f3ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f3ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f3f2:	4553      	cmp	r3, sl
 800f3f4:	bfa8      	it	ge
 800f3f6:	4653      	movge	r3, sl
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	4699      	mov	r9, r3
 800f3fc:	dc36      	bgt.n	800f46c <_printf_float+0x360>
 800f3fe:	f04f 0b00 	mov.w	fp, #0
 800f402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f406:	f104 021a 	add.w	r2, r4, #26
 800f40a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f40c:	9306      	str	r3, [sp, #24]
 800f40e:	eba3 0309 	sub.w	r3, r3, r9
 800f412:	455b      	cmp	r3, fp
 800f414:	dc31      	bgt.n	800f47a <_printf_float+0x36e>
 800f416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f418:	459a      	cmp	sl, r3
 800f41a:	dc3a      	bgt.n	800f492 <_printf_float+0x386>
 800f41c:	6823      	ldr	r3, [r4, #0]
 800f41e:	07da      	lsls	r2, r3, #31
 800f420:	d437      	bmi.n	800f492 <_printf_float+0x386>
 800f422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f424:	ebaa 0903 	sub.w	r9, sl, r3
 800f428:	9b06      	ldr	r3, [sp, #24]
 800f42a:	ebaa 0303 	sub.w	r3, sl, r3
 800f42e:	4599      	cmp	r9, r3
 800f430:	bfa8      	it	ge
 800f432:	4699      	movge	r9, r3
 800f434:	f1b9 0f00 	cmp.w	r9, #0
 800f438:	dc33      	bgt.n	800f4a2 <_printf_float+0x396>
 800f43a:	f04f 0800 	mov.w	r8, #0
 800f43e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f442:	f104 0b1a 	add.w	fp, r4, #26
 800f446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f448:	ebaa 0303 	sub.w	r3, sl, r3
 800f44c:	eba3 0309 	sub.w	r3, r3, r9
 800f450:	4543      	cmp	r3, r8
 800f452:	f77f af79 	ble.w	800f348 <_printf_float+0x23c>
 800f456:	2301      	movs	r3, #1
 800f458:	465a      	mov	r2, fp
 800f45a:	4631      	mov	r1, r6
 800f45c:	4628      	mov	r0, r5
 800f45e:	47b8      	blx	r7
 800f460:	3001      	adds	r0, #1
 800f462:	f43f aeae 	beq.w	800f1c2 <_printf_float+0xb6>
 800f466:	f108 0801 	add.w	r8, r8, #1
 800f46a:	e7ec      	b.n	800f446 <_printf_float+0x33a>
 800f46c:	4642      	mov	r2, r8
 800f46e:	4631      	mov	r1, r6
 800f470:	4628      	mov	r0, r5
 800f472:	47b8      	blx	r7
 800f474:	3001      	adds	r0, #1
 800f476:	d1c2      	bne.n	800f3fe <_printf_float+0x2f2>
 800f478:	e6a3      	b.n	800f1c2 <_printf_float+0xb6>
 800f47a:	2301      	movs	r3, #1
 800f47c:	4631      	mov	r1, r6
 800f47e:	4628      	mov	r0, r5
 800f480:	9206      	str	r2, [sp, #24]
 800f482:	47b8      	blx	r7
 800f484:	3001      	adds	r0, #1
 800f486:	f43f ae9c 	beq.w	800f1c2 <_printf_float+0xb6>
 800f48a:	9a06      	ldr	r2, [sp, #24]
 800f48c:	f10b 0b01 	add.w	fp, fp, #1
 800f490:	e7bb      	b.n	800f40a <_printf_float+0x2fe>
 800f492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f496:	4631      	mov	r1, r6
 800f498:	4628      	mov	r0, r5
 800f49a:	47b8      	blx	r7
 800f49c:	3001      	adds	r0, #1
 800f49e:	d1c0      	bne.n	800f422 <_printf_float+0x316>
 800f4a0:	e68f      	b.n	800f1c2 <_printf_float+0xb6>
 800f4a2:	9a06      	ldr	r2, [sp, #24]
 800f4a4:	464b      	mov	r3, r9
 800f4a6:	4442      	add	r2, r8
 800f4a8:	4631      	mov	r1, r6
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	47b8      	blx	r7
 800f4ae:	3001      	adds	r0, #1
 800f4b0:	d1c3      	bne.n	800f43a <_printf_float+0x32e>
 800f4b2:	e686      	b.n	800f1c2 <_printf_float+0xb6>
 800f4b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f4b8:	f1ba 0f01 	cmp.w	sl, #1
 800f4bc:	dc01      	bgt.n	800f4c2 <_printf_float+0x3b6>
 800f4be:	07db      	lsls	r3, r3, #31
 800f4c0:	d536      	bpl.n	800f530 <_printf_float+0x424>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	4642      	mov	r2, r8
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b8      	blx	r7
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	f43f ae78 	beq.w	800f1c2 <_printf_float+0xb6>
 800f4d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4d6:	4631      	mov	r1, r6
 800f4d8:	4628      	mov	r0, r5
 800f4da:	47b8      	blx	r7
 800f4dc:	3001      	adds	r0, #1
 800f4de:	f43f ae70 	beq.w	800f1c2 <_printf_float+0xb6>
 800f4e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4ee:	f7f1 fafb 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4f2:	b9c0      	cbnz	r0, 800f526 <_printf_float+0x41a>
 800f4f4:	4653      	mov	r3, sl
 800f4f6:	f108 0201 	add.w	r2, r8, #1
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b8      	blx	r7
 800f500:	3001      	adds	r0, #1
 800f502:	d10c      	bne.n	800f51e <_printf_float+0x412>
 800f504:	e65d      	b.n	800f1c2 <_printf_float+0xb6>
 800f506:	2301      	movs	r3, #1
 800f508:	465a      	mov	r2, fp
 800f50a:	4631      	mov	r1, r6
 800f50c:	4628      	mov	r0, r5
 800f50e:	47b8      	blx	r7
 800f510:	3001      	adds	r0, #1
 800f512:	f43f ae56 	beq.w	800f1c2 <_printf_float+0xb6>
 800f516:	f108 0801 	add.w	r8, r8, #1
 800f51a:	45d0      	cmp	r8, sl
 800f51c:	dbf3      	blt.n	800f506 <_printf_float+0x3fa>
 800f51e:	464b      	mov	r3, r9
 800f520:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f524:	e6df      	b.n	800f2e6 <_printf_float+0x1da>
 800f526:	f04f 0800 	mov.w	r8, #0
 800f52a:	f104 0b1a 	add.w	fp, r4, #26
 800f52e:	e7f4      	b.n	800f51a <_printf_float+0x40e>
 800f530:	2301      	movs	r3, #1
 800f532:	4642      	mov	r2, r8
 800f534:	e7e1      	b.n	800f4fa <_printf_float+0x3ee>
 800f536:	2301      	movs	r3, #1
 800f538:	464a      	mov	r2, r9
 800f53a:	4631      	mov	r1, r6
 800f53c:	4628      	mov	r0, r5
 800f53e:	47b8      	blx	r7
 800f540:	3001      	adds	r0, #1
 800f542:	f43f ae3e 	beq.w	800f1c2 <_printf_float+0xb6>
 800f546:	f108 0801 	add.w	r8, r8, #1
 800f54a:	68e3      	ldr	r3, [r4, #12]
 800f54c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f54e:	1a5b      	subs	r3, r3, r1
 800f550:	4543      	cmp	r3, r8
 800f552:	dcf0      	bgt.n	800f536 <_printf_float+0x42a>
 800f554:	e6fc      	b.n	800f350 <_printf_float+0x244>
 800f556:	f04f 0800 	mov.w	r8, #0
 800f55a:	f104 0919 	add.w	r9, r4, #25
 800f55e:	e7f4      	b.n	800f54a <_printf_float+0x43e>

0800f560 <_printf_common>:
 800f560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f564:	4616      	mov	r6, r2
 800f566:	4698      	mov	r8, r3
 800f568:	688a      	ldr	r2, [r1, #8]
 800f56a:	690b      	ldr	r3, [r1, #16]
 800f56c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f570:	4293      	cmp	r3, r2
 800f572:	bfb8      	it	lt
 800f574:	4613      	movlt	r3, r2
 800f576:	6033      	str	r3, [r6, #0]
 800f578:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f57c:	4607      	mov	r7, r0
 800f57e:	460c      	mov	r4, r1
 800f580:	b10a      	cbz	r2, 800f586 <_printf_common+0x26>
 800f582:	3301      	adds	r3, #1
 800f584:	6033      	str	r3, [r6, #0]
 800f586:	6823      	ldr	r3, [r4, #0]
 800f588:	0699      	lsls	r1, r3, #26
 800f58a:	bf42      	ittt	mi
 800f58c:	6833      	ldrmi	r3, [r6, #0]
 800f58e:	3302      	addmi	r3, #2
 800f590:	6033      	strmi	r3, [r6, #0]
 800f592:	6825      	ldr	r5, [r4, #0]
 800f594:	f015 0506 	ands.w	r5, r5, #6
 800f598:	d106      	bne.n	800f5a8 <_printf_common+0x48>
 800f59a:	f104 0a19 	add.w	sl, r4, #25
 800f59e:	68e3      	ldr	r3, [r4, #12]
 800f5a0:	6832      	ldr	r2, [r6, #0]
 800f5a2:	1a9b      	subs	r3, r3, r2
 800f5a4:	42ab      	cmp	r3, r5
 800f5a6:	dc26      	bgt.n	800f5f6 <_printf_common+0x96>
 800f5a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f5ac:	6822      	ldr	r2, [r4, #0]
 800f5ae:	3b00      	subs	r3, #0
 800f5b0:	bf18      	it	ne
 800f5b2:	2301      	movne	r3, #1
 800f5b4:	0692      	lsls	r2, r2, #26
 800f5b6:	d42b      	bmi.n	800f610 <_printf_common+0xb0>
 800f5b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f5bc:	4641      	mov	r1, r8
 800f5be:	4638      	mov	r0, r7
 800f5c0:	47c8      	blx	r9
 800f5c2:	3001      	adds	r0, #1
 800f5c4:	d01e      	beq.n	800f604 <_printf_common+0xa4>
 800f5c6:	6823      	ldr	r3, [r4, #0]
 800f5c8:	6922      	ldr	r2, [r4, #16]
 800f5ca:	f003 0306 	and.w	r3, r3, #6
 800f5ce:	2b04      	cmp	r3, #4
 800f5d0:	bf02      	ittt	eq
 800f5d2:	68e5      	ldreq	r5, [r4, #12]
 800f5d4:	6833      	ldreq	r3, [r6, #0]
 800f5d6:	1aed      	subeq	r5, r5, r3
 800f5d8:	68a3      	ldr	r3, [r4, #8]
 800f5da:	bf0c      	ite	eq
 800f5dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5e0:	2500      	movne	r5, #0
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	bfc4      	itt	gt
 800f5e6:	1a9b      	subgt	r3, r3, r2
 800f5e8:	18ed      	addgt	r5, r5, r3
 800f5ea:	2600      	movs	r6, #0
 800f5ec:	341a      	adds	r4, #26
 800f5ee:	42b5      	cmp	r5, r6
 800f5f0:	d11a      	bne.n	800f628 <_printf_common+0xc8>
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	e008      	b.n	800f608 <_printf_common+0xa8>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	4652      	mov	r2, sl
 800f5fa:	4641      	mov	r1, r8
 800f5fc:	4638      	mov	r0, r7
 800f5fe:	47c8      	blx	r9
 800f600:	3001      	adds	r0, #1
 800f602:	d103      	bne.n	800f60c <_printf_common+0xac>
 800f604:	f04f 30ff 	mov.w	r0, #4294967295
 800f608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f60c:	3501      	adds	r5, #1
 800f60e:	e7c6      	b.n	800f59e <_printf_common+0x3e>
 800f610:	18e1      	adds	r1, r4, r3
 800f612:	1c5a      	adds	r2, r3, #1
 800f614:	2030      	movs	r0, #48	@ 0x30
 800f616:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f61a:	4422      	add	r2, r4
 800f61c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f624:	3302      	adds	r3, #2
 800f626:	e7c7      	b.n	800f5b8 <_printf_common+0x58>
 800f628:	2301      	movs	r3, #1
 800f62a:	4622      	mov	r2, r4
 800f62c:	4641      	mov	r1, r8
 800f62e:	4638      	mov	r0, r7
 800f630:	47c8      	blx	r9
 800f632:	3001      	adds	r0, #1
 800f634:	d0e6      	beq.n	800f604 <_printf_common+0xa4>
 800f636:	3601      	adds	r6, #1
 800f638:	e7d9      	b.n	800f5ee <_printf_common+0x8e>
	...

0800f63c <_printf_i>:
 800f63c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f640:	7e0f      	ldrb	r7, [r1, #24]
 800f642:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f644:	2f78      	cmp	r7, #120	@ 0x78
 800f646:	4691      	mov	r9, r2
 800f648:	4680      	mov	r8, r0
 800f64a:	460c      	mov	r4, r1
 800f64c:	469a      	mov	sl, r3
 800f64e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f652:	d807      	bhi.n	800f664 <_printf_i+0x28>
 800f654:	2f62      	cmp	r7, #98	@ 0x62
 800f656:	d80a      	bhi.n	800f66e <_printf_i+0x32>
 800f658:	2f00      	cmp	r7, #0
 800f65a:	f000 80d2 	beq.w	800f802 <_printf_i+0x1c6>
 800f65e:	2f58      	cmp	r7, #88	@ 0x58
 800f660:	f000 80b9 	beq.w	800f7d6 <_printf_i+0x19a>
 800f664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f668:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f66c:	e03a      	b.n	800f6e4 <_printf_i+0xa8>
 800f66e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f672:	2b15      	cmp	r3, #21
 800f674:	d8f6      	bhi.n	800f664 <_printf_i+0x28>
 800f676:	a101      	add	r1, pc, #4	@ (adr r1, 800f67c <_printf_i+0x40>)
 800f678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f67c:	0800f6d5 	.word	0x0800f6d5
 800f680:	0800f6e9 	.word	0x0800f6e9
 800f684:	0800f665 	.word	0x0800f665
 800f688:	0800f665 	.word	0x0800f665
 800f68c:	0800f665 	.word	0x0800f665
 800f690:	0800f665 	.word	0x0800f665
 800f694:	0800f6e9 	.word	0x0800f6e9
 800f698:	0800f665 	.word	0x0800f665
 800f69c:	0800f665 	.word	0x0800f665
 800f6a0:	0800f665 	.word	0x0800f665
 800f6a4:	0800f665 	.word	0x0800f665
 800f6a8:	0800f7e9 	.word	0x0800f7e9
 800f6ac:	0800f713 	.word	0x0800f713
 800f6b0:	0800f7a3 	.word	0x0800f7a3
 800f6b4:	0800f665 	.word	0x0800f665
 800f6b8:	0800f665 	.word	0x0800f665
 800f6bc:	0800f80b 	.word	0x0800f80b
 800f6c0:	0800f665 	.word	0x0800f665
 800f6c4:	0800f713 	.word	0x0800f713
 800f6c8:	0800f665 	.word	0x0800f665
 800f6cc:	0800f665 	.word	0x0800f665
 800f6d0:	0800f7ab 	.word	0x0800f7ab
 800f6d4:	6833      	ldr	r3, [r6, #0]
 800f6d6:	1d1a      	adds	r2, r3, #4
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	6032      	str	r2, [r6, #0]
 800f6dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f6e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	e09d      	b.n	800f824 <_printf_i+0x1e8>
 800f6e8:	6833      	ldr	r3, [r6, #0]
 800f6ea:	6820      	ldr	r0, [r4, #0]
 800f6ec:	1d19      	adds	r1, r3, #4
 800f6ee:	6031      	str	r1, [r6, #0]
 800f6f0:	0606      	lsls	r6, r0, #24
 800f6f2:	d501      	bpl.n	800f6f8 <_printf_i+0xbc>
 800f6f4:	681d      	ldr	r5, [r3, #0]
 800f6f6:	e003      	b.n	800f700 <_printf_i+0xc4>
 800f6f8:	0645      	lsls	r5, r0, #25
 800f6fa:	d5fb      	bpl.n	800f6f4 <_printf_i+0xb8>
 800f6fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f700:	2d00      	cmp	r5, #0
 800f702:	da03      	bge.n	800f70c <_printf_i+0xd0>
 800f704:	232d      	movs	r3, #45	@ 0x2d
 800f706:	426d      	negs	r5, r5
 800f708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f70c:	4859      	ldr	r0, [pc, #356]	@ (800f874 <_printf_i+0x238>)
 800f70e:	230a      	movs	r3, #10
 800f710:	e011      	b.n	800f736 <_printf_i+0xfa>
 800f712:	6821      	ldr	r1, [r4, #0]
 800f714:	6833      	ldr	r3, [r6, #0]
 800f716:	0608      	lsls	r0, r1, #24
 800f718:	f853 5b04 	ldr.w	r5, [r3], #4
 800f71c:	d402      	bmi.n	800f724 <_printf_i+0xe8>
 800f71e:	0649      	lsls	r1, r1, #25
 800f720:	bf48      	it	mi
 800f722:	b2ad      	uxthmi	r5, r5
 800f724:	2f6f      	cmp	r7, #111	@ 0x6f
 800f726:	4853      	ldr	r0, [pc, #332]	@ (800f874 <_printf_i+0x238>)
 800f728:	6033      	str	r3, [r6, #0]
 800f72a:	bf14      	ite	ne
 800f72c:	230a      	movne	r3, #10
 800f72e:	2308      	moveq	r3, #8
 800f730:	2100      	movs	r1, #0
 800f732:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f736:	6866      	ldr	r6, [r4, #4]
 800f738:	60a6      	str	r6, [r4, #8]
 800f73a:	2e00      	cmp	r6, #0
 800f73c:	bfa2      	ittt	ge
 800f73e:	6821      	ldrge	r1, [r4, #0]
 800f740:	f021 0104 	bicge.w	r1, r1, #4
 800f744:	6021      	strge	r1, [r4, #0]
 800f746:	b90d      	cbnz	r5, 800f74c <_printf_i+0x110>
 800f748:	2e00      	cmp	r6, #0
 800f74a:	d04b      	beq.n	800f7e4 <_printf_i+0x1a8>
 800f74c:	4616      	mov	r6, r2
 800f74e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f752:	fb03 5711 	mls	r7, r3, r1, r5
 800f756:	5dc7      	ldrb	r7, [r0, r7]
 800f758:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f75c:	462f      	mov	r7, r5
 800f75e:	42bb      	cmp	r3, r7
 800f760:	460d      	mov	r5, r1
 800f762:	d9f4      	bls.n	800f74e <_printf_i+0x112>
 800f764:	2b08      	cmp	r3, #8
 800f766:	d10b      	bne.n	800f780 <_printf_i+0x144>
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	07df      	lsls	r7, r3, #31
 800f76c:	d508      	bpl.n	800f780 <_printf_i+0x144>
 800f76e:	6923      	ldr	r3, [r4, #16]
 800f770:	6861      	ldr	r1, [r4, #4]
 800f772:	4299      	cmp	r1, r3
 800f774:	bfde      	ittt	le
 800f776:	2330      	movle	r3, #48	@ 0x30
 800f778:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f77c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f780:	1b92      	subs	r2, r2, r6
 800f782:	6122      	str	r2, [r4, #16]
 800f784:	f8cd a000 	str.w	sl, [sp]
 800f788:	464b      	mov	r3, r9
 800f78a:	aa03      	add	r2, sp, #12
 800f78c:	4621      	mov	r1, r4
 800f78e:	4640      	mov	r0, r8
 800f790:	f7ff fee6 	bl	800f560 <_printf_common>
 800f794:	3001      	adds	r0, #1
 800f796:	d14a      	bne.n	800f82e <_printf_i+0x1f2>
 800f798:	f04f 30ff 	mov.w	r0, #4294967295
 800f79c:	b004      	add	sp, #16
 800f79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7a2:	6823      	ldr	r3, [r4, #0]
 800f7a4:	f043 0320 	orr.w	r3, r3, #32
 800f7a8:	6023      	str	r3, [r4, #0]
 800f7aa:	4833      	ldr	r0, [pc, #204]	@ (800f878 <_printf_i+0x23c>)
 800f7ac:	2778      	movs	r7, #120	@ 0x78
 800f7ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f7b2:	6823      	ldr	r3, [r4, #0]
 800f7b4:	6831      	ldr	r1, [r6, #0]
 800f7b6:	061f      	lsls	r7, r3, #24
 800f7b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800f7bc:	d402      	bmi.n	800f7c4 <_printf_i+0x188>
 800f7be:	065f      	lsls	r7, r3, #25
 800f7c0:	bf48      	it	mi
 800f7c2:	b2ad      	uxthmi	r5, r5
 800f7c4:	6031      	str	r1, [r6, #0]
 800f7c6:	07d9      	lsls	r1, r3, #31
 800f7c8:	bf44      	itt	mi
 800f7ca:	f043 0320 	orrmi.w	r3, r3, #32
 800f7ce:	6023      	strmi	r3, [r4, #0]
 800f7d0:	b11d      	cbz	r5, 800f7da <_printf_i+0x19e>
 800f7d2:	2310      	movs	r3, #16
 800f7d4:	e7ac      	b.n	800f730 <_printf_i+0xf4>
 800f7d6:	4827      	ldr	r0, [pc, #156]	@ (800f874 <_printf_i+0x238>)
 800f7d8:	e7e9      	b.n	800f7ae <_printf_i+0x172>
 800f7da:	6823      	ldr	r3, [r4, #0]
 800f7dc:	f023 0320 	bic.w	r3, r3, #32
 800f7e0:	6023      	str	r3, [r4, #0]
 800f7e2:	e7f6      	b.n	800f7d2 <_printf_i+0x196>
 800f7e4:	4616      	mov	r6, r2
 800f7e6:	e7bd      	b.n	800f764 <_printf_i+0x128>
 800f7e8:	6833      	ldr	r3, [r6, #0]
 800f7ea:	6825      	ldr	r5, [r4, #0]
 800f7ec:	6961      	ldr	r1, [r4, #20]
 800f7ee:	1d18      	adds	r0, r3, #4
 800f7f0:	6030      	str	r0, [r6, #0]
 800f7f2:	062e      	lsls	r6, r5, #24
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	d501      	bpl.n	800f7fc <_printf_i+0x1c0>
 800f7f8:	6019      	str	r1, [r3, #0]
 800f7fa:	e002      	b.n	800f802 <_printf_i+0x1c6>
 800f7fc:	0668      	lsls	r0, r5, #25
 800f7fe:	d5fb      	bpl.n	800f7f8 <_printf_i+0x1bc>
 800f800:	8019      	strh	r1, [r3, #0]
 800f802:	2300      	movs	r3, #0
 800f804:	6123      	str	r3, [r4, #16]
 800f806:	4616      	mov	r6, r2
 800f808:	e7bc      	b.n	800f784 <_printf_i+0x148>
 800f80a:	6833      	ldr	r3, [r6, #0]
 800f80c:	1d1a      	adds	r2, r3, #4
 800f80e:	6032      	str	r2, [r6, #0]
 800f810:	681e      	ldr	r6, [r3, #0]
 800f812:	6862      	ldr	r2, [r4, #4]
 800f814:	2100      	movs	r1, #0
 800f816:	4630      	mov	r0, r6
 800f818:	f7f0 fcea 	bl	80001f0 <memchr>
 800f81c:	b108      	cbz	r0, 800f822 <_printf_i+0x1e6>
 800f81e:	1b80      	subs	r0, r0, r6
 800f820:	6060      	str	r0, [r4, #4]
 800f822:	6863      	ldr	r3, [r4, #4]
 800f824:	6123      	str	r3, [r4, #16]
 800f826:	2300      	movs	r3, #0
 800f828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f82c:	e7aa      	b.n	800f784 <_printf_i+0x148>
 800f82e:	6923      	ldr	r3, [r4, #16]
 800f830:	4632      	mov	r2, r6
 800f832:	4649      	mov	r1, r9
 800f834:	4640      	mov	r0, r8
 800f836:	47d0      	blx	sl
 800f838:	3001      	adds	r0, #1
 800f83a:	d0ad      	beq.n	800f798 <_printf_i+0x15c>
 800f83c:	6823      	ldr	r3, [r4, #0]
 800f83e:	079b      	lsls	r3, r3, #30
 800f840:	d413      	bmi.n	800f86a <_printf_i+0x22e>
 800f842:	68e0      	ldr	r0, [r4, #12]
 800f844:	9b03      	ldr	r3, [sp, #12]
 800f846:	4298      	cmp	r0, r3
 800f848:	bfb8      	it	lt
 800f84a:	4618      	movlt	r0, r3
 800f84c:	e7a6      	b.n	800f79c <_printf_i+0x160>
 800f84e:	2301      	movs	r3, #1
 800f850:	4632      	mov	r2, r6
 800f852:	4649      	mov	r1, r9
 800f854:	4640      	mov	r0, r8
 800f856:	47d0      	blx	sl
 800f858:	3001      	adds	r0, #1
 800f85a:	d09d      	beq.n	800f798 <_printf_i+0x15c>
 800f85c:	3501      	adds	r5, #1
 800f85e:	68e3      	ldr	r3, [r4, #12]
 800f860:	9903      	ldr	r1, [sp, #12]
 800f862:	1a5b      	subs	r3, r3, r1
 800f864:	42ab      	cmp	r3, r5
 800f866:	dcf2      	bgt.n	800f84e <_printf_i+0x212>
 800f868:	e7eb      	b.n	800f842 <_printf_i+0x206>
 800f86a:	2500      	movs	r5, #0
 800f86c:	f104 0619 	add.w	r6, r4, #25
 800f870:	e7f5      	b.n	800f85e <_printf_i+0x222>
 800f872:	bf00      	nop
 800f874:	080164e7 	.word	0x080164e7
 800f878:	080164f8 	.word	0x080164f8

0800f87c <_scanf_float>:
 800f87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f880:	b087      	sub	sp, #28
 800f882:	4617      	mov	r7, r2
 800f884:	9303      	str	r3, [sp, #12]
 800f886:	688b      	ldr	r3, [r1, #8]
 800f888:	1e5a      	subs	r2, r3, #1
 800f88a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f88e:	bf81      	itttt	hi
 800f890:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f894:	eb03 0b05 	addhi.w	fp, r3, r5
 800f898:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f89c:	608b      	strhi	r3, [r1, #8]
 800f89e:	680b      	ldr	r3, [r1, #0]
 800f8a0:	460a      	mov	r2, r1
 800f8a2:	f04f 0500 	mov.w	r5, #0
 800f8a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f8aa:	f842 3b1c 	str.w	r3, [r2], #28
 800f8ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f8b2:	4680      	mov	r8, r0
 800f8b4:	460c      	mov	r4, r1
 800f8b6:	bf98      	it	ls
 800f8b8:	f04f 0b00 	movls.w	fp, #0
 800f8bc:	9201      	str	r2, [sp, #4]
 800f8be:	4616      	mov	r6, r2
 800f8c0:	46aa      	mov	sl, r5
 800f8c2:	46a9      	mov	r9, r5
 800f8c4:	9502      	str	r5, [sp, #8]
 800f8c6:	68a2      	ldr	r2, [r4, #8]
 800f8c8:	b152      	cbz	r2, 800f8e0 <_scanf_float+0x64>
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	2b4e      	cmp	r3, #78	@ 0x4e
 800f8d0:	d864      	bhi.n	800f99c <_scanf_float+0x120>
 800f8d2:	2b40      	cmp	r3, #64	@ 0x40
 800f8d4:	d83c      	bhi.n	800f950 <_scanf_float+0xd4>
 800f8d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f8da:	b2c8      	uxtb	r0, r1
 800f8dc:	280e      	cmp	r0, #14
 800f8de:	d93a      	bls.n	800f956 <_scanf_float+0xda>
 800f8e0:	f1b9 0f00 	cmp.w	r9, #0
 800f8e4:	d003      	beq.n	800f8ee <_scanf_float+0x72>
 800f8e6:	6823      	ldr	r3, [r4, #0]
 800f8e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f8ec:	6023      	str	r3, [r4, #0]
 800f8ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8f2:	f1ba 0f01 	cmp.w	sl, #1
 800f8f6:	f200 8117 	bhi.w	800fb28 <_scanf_float+0x2ac>
 800f8fa:	9b01      	ldr	r3, [sp, #4]
 800f8fc:	429e      	cmp	r6, r3
 800f8fe:	f200 8108 	bhi.w	800fb12 <_scanf_float+0x296>
 800f902:	2001      	movs	r0, #1
 800f904:	b007      	add	sp, #28
 800f906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f90a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f90e:	2a0d      	cmp	r2, #13
 800f910:	d8e6      	bhi.n	800f8e0 <_scanf_float+0x64>
 800f912:	a101      	add	r1, pc, #4	@ (adr r1, 800f918 <_scanf_float+0x9c>)
 800f914:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f918:	0800fa5f 	.word	0x0800fa5f
 800f91c:	0800f8e1 	.word	0x0800f8e1
 800f920:	0800f8e1 	.word	0x0800f8e1
 800f924:	0800f8e1 	.word	0x0800f8e1
 800f928:	0800fabf 	.word	0x0800fabf
 800f92c:	0800fa97 	.word	0x0800fa97
 800f930:	0800f8e1 	.word	0x0800f8e1
 800f934:	0800f8e1 	.word	0x0800f8e1
 800f938:	0800fa6d 	.word	0x0800fa6d
 800f93c:	0800f8e1 	.word	0x0800f8e1
 800f940:	0800f8e1 	.word	0x0800f8e1
 800f944:	0800f8e1 	.word	0x0800f8e1
 800f948:	0800f8e1 	.word	0x0800f8e1
 800f94c:	0800fa25 	.word	0x0800fa25
 800f950:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f954:	e7db      	b.n	800f90e <_scanf_float+0x92>
 800f956:	290e      	cmp	r1, #14
 800f958:	d8c2      	bhi.n	800f8e0 <_scanf_float+0x64>
 800f95a:	a001      	add	r0, pc, #4	@ (adr r0, 800f960 <_scanf_float+0xe4>)
 800f95c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f960:	0800fa15 	.word	0x0800fa15
 800f964:	0800f8e1 	.word	0x0800f8e1
 800f968:	0800fa15 	.word	0x0800fa15
 800f96c:	0800faab 	.word	0x0800faab
 800f970:	0800f8e1 	.word	0x0800f8e1
 800f974:	0800f9bd 	.word	0x0800f9bd
 800f978:	0800f9fb 	.word	0x0800f9fb
 800f97c:	0800f9fb 	.word	0x0800f9fb
 800f980:	0800f9fb 	.word	0x0800f9fb
 800f984:	0800f9fb 	.word	0x0800f9fb
 800f988:	0800f9fb 	.word	0x0800f9fb
 800f98c:	0800f9fb 	.word	0x0800f9fb
 800f990:	0800f9fb 	.word	0x0800f9fb
 800f994:	0800f9fb 	.word	0x0800f9fb
 800f998:	0800f9fb 	.word	0x0800f9fb
 800f99c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f99e:	d809      	bhi.n	800f9b4 <_scanf_float+0x138>
 800f9a0:	2b60      	cmp	r3, #96	@ 0x60
 800f9a2:	d8b2      	bhi.n	800f90a <_scanf_float+0x8e>
 800f9a4:	2b54      	cmp	r3, #84	@ 0x54
 800f9a6:	d07b      	beq.n	800faa0 <_scanf_float+0x224>
 800f9a8:	2b59      	cmp	r3, #89	@ 0x59
 800f9aa:	d199      	bne.n	800f8e0 <_scanf_float+0x64>
 800f9ac:	2d07      	cmp	r5, #7
 800f9ae:	d197      	bne.n	800f8e0 <_scanf_float+0x64>
 800f9b0:	2508      	movs	r5, #8
 800f9b2:	e02c      	b.n	800fa0e <_scanf_float+0x192>
 800f9b4:	2b74      	cmp	r3, #116	@ 0x74
 800f9b6:	d073      	beq.n	800faa0 <_scanf_float+0x224>
 800f9b8:	2b79      	cmp	r3, #121	@ 0x79
 800f9ba:	e7f6      	b.n	800f9aa <_scanf_float+0x12e>
 800f9bc:	6821      	ldr	r1, [r4, #0]
 800f9be:	05c8      	lsls	r0, r1, #23
 800f9c0:	d51b      	bpl.n	800f9fa <_scanf_float+0x17e>
 800f9c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f9c6:	6021      	str	r1, [r4, #0]
 800f9c8:	f109 0901 	add.w	r9, r9, #1
 800f9cc:	f1bb 0f00 	cmp.w	fp, #0
 800f9d0:	d003      	beq.n	800f9da <_scanf_float+0x15e>
 800f9d2:	3201      	adds	r2, #1
 800f9d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f9d8:	60a2      	str	r2, [r4, #8]
 800f9da:	68a3      	ldr	r3, [r4, #8]
 800f9dc:	3b01      	subs	r3, #1
 800f9de:	60a3      	str	r3, [r4, #8]
 800f9e0:	6923      	ldr	r3, [r4, #16]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	6123      	str	r3, [r4, #16]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	3b01      	subs	r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	607b      	str	r3, [r7, #4]
 800f9ee:	f340 8087 	ble.w	800fb00 <_scanf_float+0x284>
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	603b      	str	r3, [r7, #0]
 800f9f8:	e765      	b.n	800f8c6 <_scanf_float+0x4a>
 800f9fa:	eb1a 0105 	adds.w	r1, sl, r5
 800f9fe:	f47f af6f 	bne.w	800f8e0 <_scanf_float+0x64>
 800fa02:	6822      	ldr	r2, [r4, #0]
 800fa04:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fa08:	6022      	str	r2, [r4, #0]
 800fa0a:	460d      	mov	r5, r1
 800fa0c:	468a      	mov	sl, r1
 800fa0e:	f806 3b01 	strb.w	r3, [r6], #1
 800fa12:	e7e2      	b.n	800f9da <_scanf_float+0x15e>
 800fa14:	6822      	ldr	r2, [r4, #0]
 800fa16:	0610      	lsls	r0, r2, #24
 800fa18:	f57f af62 	bpl.w	800f8e0 <_scanf_float+0x64>
 800fa1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fa20:	6022      	str	r2, [r4, #0]
 800fa22:	e7f4      	b.n	800fa0e <_scanf_float+0x192>
 800fa24:	f1ba 0f00 	cmp.w	sl, #0
 800fa28:	d10e      	bne.n	800fa48 <_scanf_float+0x1cc>
 800fa2a:	f1b9 0f00 	cmp.w	r9, #0
 800fa2e:	d10e      	bne.n	800fa4e <_scanf_float+0x1d2>
 800fa30:	6822      	ldr	r2, [r4, #0]
 800fa32:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fa36:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fa3a:	d108      	bne.n	800fa4e <_scanf_float+0x1d2>
 800fa3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fa40:	6022      	str	r2, [r4, #0]
 800fa42:	f04f 0a01 	mov.w	sl, #1
 800fa46:	e7e2      	b.n	800fa0e <_scanf_float+0x192>
 800fa48:	f1ba 0f02 	cmp.w	sl, #2
 800fa4c:	d055      	beq.n	800fafa <_scanf_float+0x27e>
 800fa4e:	2d01      	cmp	r5, #1
 800fa50:	d002      	beq.n	800fa58 <_scanf_float+0x1dc>
 800fa52:	2d04      	cmp	r5, #4
 800fa54:	f47f af44 	bne.w	800f8e0 <_scanf_float+0x64>
 800fa58:	3501      	adds	r5, #1
 800fa5a:	b2ed      	uxtb	r5, r5
 800fa5c:	e7d7      	b.n	800fa0e <_scanf_float+0x192>
 800fa5e:	f1ba 0f01 	cmp.w	sl, #1
 800fa62:	f47f af3d 	bne.w	800f8e0 <_scanf_float+0x64>
 800fa66:	f04f 0a02 	mov.w	sl, #2
 800fa6a:	e7d0      	b.n	800fa0e <_scanf_float+0x192>
 800fa6c:	b97d      	cbnz	r5, 800fa8e <_scanf_float+0x212>
 800fa6e:	f1b9 0f00 	cmp.w	r9, #0
 800fa72:	f47f af38 	bne.w	800f8e6 <_scanf_float+0x6a>
 800fa76:	6822      	ldr	r2, [r4, #0]
 800fa78:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fa7c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fa80:	f040 8108 	bne.w	800fc94 <_scanf_float+0x418>
 800fa84:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fa88:	6022      	str	r2, [r4, #0]
 800fa8a:	2501      	movs	r5, #1
 800fa8c:	e7bf      	b.n	800fa0e <_scanf_float+0x192>
 800fa8e:	2d03      	cmp	r5, #3
 800fa90:	d0e2      	beq.n	800fa58 <_scanf_float+0x1dc>
 800fa92:	2d05      	cmp	r5, #5
 800fa94:	e7de      	b.n	800fa54 <_scanf_float+0x1d8>
 800fa96:	2d02      	cmp	r5, #2
 800fa98:	f47f af22 	bne.w	800f8e0 <_scanf_float+0x64>
 800fa9c:	2503      	movs	r5, #3
 800fa9e:	e7b6      	b.n	800fa0e <_scanf_float+0x192>
 800faa0:	2d06      	cmp	r5, #6
 800faa2:	f47f af1d 	bne.w	800f8e0 <_scanf_float+0x64>
 800faa6:	2507      	movs	r5, #7
 800faa8:	e7b1      	b.n	800fa0e <_scanf_float+0x192>
 800faaa:	6822      	ldr	r2, [r4, #0]
 800faac:	0591      	lsls	r1, r2, #22
 800faae:	f57f af17 	bpl.w	800f8e0 <_scanf_float+0x64>
 800fab2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fab6:	6022      	str	r2, [r4, #0]
 800fab8:	f8cd 9008 	str.w	r9, [sp, #8]
 800fabc:	e7a7      	b.n	800fa0e <_scanf_float+0x192>
 800fabe:	6822      	ldr	r2, [r4, #0]
 800fac0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fac4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fac8:	d006      	beq.n	800fad8 <_scanf_float+0x25c>
 800faca:	0550      	lsls	r0, r2, #21
 800facc:	f57f af08 	bpl.w	800f8e0 <_scanf_float+0x64>
 800fad0:	f1b9 0f00 	cmp.w	r9, #0
 800fad4:	f000 80de 	beq.w	800fc94 <_scanf_float+0x418>
 800fad8:	0591      	lsls	r1, r2, #22
 800fada:	bf58      	it	pl
 800fadc:	9902      	ldrpl	r1, [sp, #8]
 800fade:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fae2:	bf58      	it	pl
 800fae4:	eba9 0101 	subpl.w	r1, r9, r1
 800fae8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800faec:	bf58      	it	pl
 800faee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800faf2:	6022      	str	r2, [r4, #0]
 800faf4:	f04f 0900 	mov.w	r9, #0
 800faf8:	e789      	b.n	800fa0e <_scanf_float+0x192>
 800fafa:	f04f 0a03 	mov.w	sl, #3
 800fafe:	e786      	b.n	800fa0e <_scanf_float+0x192>
 800fb00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fb04:	4639      	mov	r1, r7
 800fb06:	4640      	mov	r0, r8
 800fb08:	4798      	blx	r3
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	f43f aedb 	beq.w	800f8c6 <_scanf_float+0x4a>
 800fb10:	e6e6      	b.n	800f8e0 <_scanf_float+0x64>
 800fb12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb1a:	463a      	mov	r2, r7
 800fb1c:	4640      	mov	r0, r8
 800fb1e:	4798      	blx	r3
 800fb20:	6923      	ldr	r3, [r4, #16]
 800fb22:	3b01      	subs	r3, #1
 800fb24:	6123      	str	r3, [r4, #16]
 800fb26:	e6e8      	b.n	800f8fa <_scanf_float+0x7e>
 800fb28:	1e6b      	subs	r3, r5, #1
 800fb2a:	2b06      	cmp	r3, #6
 800fb2c:	d824      	bhi.n	800fb78 <_scanf_float+0x2fc>
 800fb2e:	2d02      	cmp	r5, #2
 800fb30:	d836      	bhi.n	800fba0 <_scanf_float+0x324>
 800fb32:	9b01      	ldr	r3, [sp, #4]
 800fb34:	429e      	cmp	r6, r3
 800fb36:	f67f aee4 	bls.w	800f902 <_scanf_float+0x86>
 800fb3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb42:	463a      	mov	r2, r7
 800fb44:	4640      	mov	r0, r8
 800fb46:	4798      	blx	r3
 800fb48:	6923      	ldr	r3, [r4, #16]
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	6123      	str	r3, [r4, #16]
 800fb4e:	e7f0      	b.n	800fb32 <_scanf_float+0x2b6>
 800fb50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb54:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fb58:	463a      	mov	r2, r7
 800fb5a:	4640      	mov	r0, r8
 800fb5c:	4798      	blx	r3
 800fb5e:	6923      	ldr	r3, [r4, #16]
 800fb60:	3b01      	subs	r3, #1
 800fb62:	6123      	str	r3, [r4, #16]
 800fb64:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb68:	fa5f fa8a 	uxtb.w	sl, sl
 800fb6c:	f1ba 0f02 	cmp.w	sl, #2
 800fb70:	d1ee      	bne.n	800fb50 <_scanf_float+0x2d4>
 800fb72:	3d03      	subs	r5, #3
 800fb74:	b2ed      	uxtb	r5, r5
 800fb76:	1b76      	subs	r6, r6, r5
 800fb78:	6823      	ldr	r3, [r4, #0]
 800fb7a:	05da      	lsls	r2, r3, #23
 800fb7c:	d530      	bpl.n	800fbe0 <_scanf_float+0x364>
 800fb7e:	055b      	lsls	r3, r3, #21
 800fb80:	d511      	bpl.n	800fba6 <_scanf_float+0x32a>
 800fb82:	9b01      	ldr	r3, [sp, #4]
 800fb84:	429e      	cmp	r6, r3
 800fb86:	f67f aebc 	bls.w	800f902 <_scanf_float+0x86>
 800fb8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb92:	463a      	mov	r2, r7
 800fb94:	4640      	mov	r0, r8
 800fb96:	4798      	blx	r3
 800fb98:	6923      	ldr	r3, [r4, #16]
 800fb9a:	3b01      	subs	r3, #1
 800fb9c:	6123      	str	r3, [r4, #16]
 800fb9e:	e7f0      	b.n	800fb82 <_scanf_float+0x306>
 800fba0:	46aa      	mov	sl, r5
 800fba2:	46b3      	mov	fp, r6
 800fba4:	e7de      	b.n	800fb64 <_scanf_float+0x2e8>
 800fba6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fbaa:	6923      	ldr	r3, [r4, #16]
 800fbac:	2965      	cmp	r1, #101	@ 0x65
 800fbae:	f103 33ff 	add.w	r3, r3, #4294967295
 800fbb2:	f106 35ff 	add.w	r5, r6, #4294967295
 800fbb6:	6123      	str	r3, [r4, #16]
 800fbb8:	d00c      	beq.n	800fbd4 <_scanf_float+0x358>
 800fbba:	2945      	cmp	r1, #69	@ 0x45
 800fbbc:	d00a      	beq.n	800fbd4 <_scanf_float+0x358>
 800fbbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbc2:	463a      	mov	r2, r7
 800fbc4:	4640      	mov	r0, r8
 800fbc6:	4798      	blx	r3
 800fbc8:	6923      	ldr	r3, [r4, #16]
 800fbca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	1eb5      	subs	r5, r6, #2
 800fbd2:	6123      	str	r3, [r4, #16]
 800fbd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbd8:	463a      	mov	r2, r7
 800fbda:	4640      	mov	r0, r8
 800fbdc:	4798      	blx	r3
 800fbde:	462e      	mov	r6, r5
 800fbe0:	6822      	ldr	r2, [r4, #0]
 800fbe2:	f012 0210 	ands.w	r2, r2, #16
 800fbe6:	d001      	beq.n	800fbec <_scanf_float+0x370>
 800fbe8:	2000      	movs	r0, #0
 800fbea:	e68b      	b.n	800f904 <_scanf_float+0x88>
 800fbec:	7032      	strb	r2, [r6, #0]
 800fbee:	6823      	ldr	r3, [r4, #0]
 800fbf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fbf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fbf8:	d11c      	bne.n	800fc34 <_scanf_float+0x3b8>
 800fbfa:	9b02      	ldr	r3, [sp, #8]
 800fbfc:	454b      	cmp	r3, r9
 800fbfe:	eba3 0209 	sub.w	r2, r3, r9
 800fc02:	d123      	bne.n	800fc4c <_scanf_float+0x3d0>
 800fc04:	9901      	ldr	r1, [sp, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	4640      	mov	r0, r8
 800fc0a:	f002 fc05 	bl	8012418 <_strtod_r>
 800fc0e:	9b03      	ldr	r3, [sp, #12]
 800fc10:	6821      	ldr	r1, [r4, #0]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f011 0f02 	tst.w	r1, #2
 800fc18:	ec57 6b10 	vmov	r6, r7, d0
 800fc1c:	f103 0204 	add.w	r2, r3, #4
 800fc20:	d01f      	beq.n	800fc62 <_scanf_float+0x3e6>
 800fc22:	9903      	ldr	r1, [sp, #12]
 800fc24:	600a      	str	r2, [r1, #0]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	e9c3 6700 	strd	r6, r7, [r3]
 800fc2c:	68e3      	ldr	r3, [r4, #12]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	60e3      	str	r3, [r4, #12]
 800fc32:	e7d9      	b.n	800fbe8 <_scanf_float+0x36c>
 800fc34:	9b04      	ldr	r3, [sp, #16]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d0e4      	beq.n	800fc04 <_scanf_float+0x388>
 800fc3a:	9905      	ldr	r1, [sp, #20]
 800fc3c:	230a      	movs	r3, #10
 800fc3e:	3101      	adds	r1, #1
 800fc40:	4640      	mov	r0, r8
 800fc42:	f7ff f9b7 	bl	800efb4 <_strtol_r>
 800fc46:	9b04      	ldr	r3, [sp, #16]
 800fc48:	9e05      	ldr	r6, [sp, #20]
 800fc4a:	1ac2      	subs	r2, r0, r3
 800fc4c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fc50:	429e      	cmp	r6, r3
 800fc52:	bf28      	it	cs
 800fc54:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fc58:	4910      	ldr	r1, [pc, #64]	@ (800fc9c <_scanf_float+0x420>)
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	f000 f8e4 	bl	800fe28 <siprintf>
 800fc60:	e7d0      	b.n	800fc04 <_scanf_float+0x388>
 800fc62:	f011 0f04 	tst.w	r1, #4
 800fc66:	9903      	ldr	r1, [sp, #12]
 800fc68:	600a      	str	r2, [r1, #0]
 800fc6a:	d1dc      	bne.n	800fc26 <_scanf_float+0x3aa>
 800fc6c:	681d      	ldr	r5, [r3, #0]
 800fc6e:	4632      	mov	r2, r6
 800fc70:	463b      	mov	r3, r7
 800fc72:	4630      	mov	r0, r6
 800fc74:	4639      	mov	r1, r7
 800fc76:	f7f0 ff69 	bl	8000b4c <__aeabi_dcmpun>
 800fc7a:	b128      	cbz	r0, 800fc88 <_scanf_float+0x40c>
 800fc7c:	4808      	ldr	r0, [pc, #32]	@ (800fca0 <_scanf_float+0x424>)
 800fc7e:	f000 f9c5 	bl	801000c <nanf>
 800fc82:	ed85 0a00 	vstr	s0, [r5]
 800fc86:	e7d1      	b.n	800fc2c <_scanf_float+0x3b0>
 800fc88:	4630      	mov	r0, r6
 800fc8a:	4639      	mov	r1, r7
 800fc8c:	f7f0 ffbc 	bl	8000c08 <__aeabi_d2f>
 800fc90:	6028      	str	r0, [r5, #0]
 800fc92:	e7cb      	b.n	800fc2c <_scanf_float+0x3b0>
 800fc94:	f04f 0900 	mov.w	r9, #0
 800fc98:	e629      	b.n	800f8ee <_scanf_float+0x72>
 800fc9a:	bf00      	nop
 800fc9c:	08016509 	.word	0x08016509
 800fca0:	0801679c 	.word	0x0801679c

0800fca4 <std>:
 800fca4:	2300      	movs	r3, #0
 800fca6:	b510      	push	{r4, lr}
 800fca8:	4604      	mov	r4, r0
 800fcaa:	e9c0 3300 	strd	r3, r3, [r0]
 800fcae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fcb2:	6083      	str	r3, [r0, #8]
 800fcb4:	8181      	strh	r1, [r0, #12]
 800fcb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800fcb8:	81c2      	strh	r2, [r0, #14]
 800fcba:	6183      	str	r3, [r0, #24]
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	2208      	movs	r2, #8
 800fcc0:	305c      	adds	r0, #92	@ 0x5c
 800fcc2:	f000 f914 	bl	800feee <memset>
 800fcc6:	4b0d      	ldr	r3, [pc, #52]	@ (800fcfc <std+0x58>)
 800fcc8:	6263      	str	r3, [r4, #36]	@ 0x24
 800fcca:	4b0d      	ldr	r3, [pc, #52]	@ (800fd00 <std+0x5c>)
 800fccc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fcce:	4b0d      	ldr	r3, [pc, #52]	@ (800fd04 <std+0x60>)
 800fcd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fcd2:	4b0d      	ldr	r3, [pc, #52]	@ (800fd08 <std+0x64>)
 800fcd4:	6323      	str	r3, [r4, #48]	@ 0x30
 800fcd6:	4b0d      	ldr	r3, [pc, #52]	@ (800fd0c <std+0x68>)
 800fcd8:	6224      	str	r4, [r4, #32]
 800fcda:	429c      	cmp	r4, r3
 800fcdc:	d006      	beq.n	800fcec <std+0x48>
 800fcde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fce2:	4294      	cmp	r4, r2
 800fce4:	d002      	beq.n	800fcec <std+0x48>
 800fce6:	33d0      	adds	r3, #208	@ 0xd0
 800fce8:	429c      	cmp	r4, r3
 800fcea:	d105      	bne.n	800fcf8 <std+0x54>
 800fcec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fcf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcf4:	f000 b978 	b.w	800ffe8 <__retarget_lock_init_recursive>
 800fcf8:	bd10      	pop	{r4, pc}
 800fcfa:	bf00      	nop
 800fcfc:	0800fe69 	.word	0x0800fe69
 800fd00:	0800fe8b 	.word	0x0800fe8b
 800fd04:	0800fec3 	.word	0x0800fec3
 800fd08:	0800fee7 	.word	0x0800fee7
 800fd0c:	20008290 	.word	0x20008290

0800fd10 <stdio_exit_handler>:
 800fd10:	4a02      	ldr	r2, [pc, #8]	@ (800fd1c <stdio_exit_handler+0xc>)
 800fd12:	4903      	ldr	r1, [pc, #12]	@ (800fd20 <stdio_exit_handler+0x10>)
 800fd14:	4803      	ldr	r0, [pc, #12]	@ (800fd24 <stdio_exit_handler+0x14>)
 800fd16:	f000 b869 	b.w	800fdec <_fwalk_sglue>
 800fd1a:	bf00      	nop
 800fd1c:	20000470 	.word	0x20000470
 800fd20:	080127dd 	.word	0x080127dd
 800fd24:	20000480 	.word	0x20000480

0800fd28 <cleanup_stdio>:
 800fd28:	6841      	ldr	r1, [r0, #4]
 800fd2a:	4b0c      	ldr	r3, [pc, #48]	@ (800fd5c <cleanup_stdio+0x34>)
 800fd2c:	4299      	cmp	r1, r3
 800fd2e:	b510      	push	{r4, lr}
 800fd30:	4604      	mov	r4, r0
 800fd32:	d001      	beq.n	800fd38 <cleanup_stdio+0x10>
 800fd34:	f002 fd52 	bl	80127dc <_fflush_r>
 800fd38:	68a1      	ldr	r1, [r4, #8]
 800fd3a:	4b09      	ldr	r3, [pc, #36]	@ (800fd60 <cleanup_stdio+0x38>)
 800fd3c:	4299      	cmp	r1, r3
 800fd3e:	d002      	beq.n	800fd46 <cleanup_stdio+0x1e>
 800fd40:	4620      	mov	r0, r4
 800fd42:	f002 fd4b 	bl	80127dc <_fflush_r>
 800fd46:	68e1      	ldr	r1, [r4, #12]
 800fd48:	4b06      	ldr	r3, [pc, #24]	@ (800fd64 <cleanup_stdio+0x3c>)
 800fd4a:	4299      	cmp	r1, r3
 800fd4c:	d004      	beq.n	800fd58 <cleanup_stdio+0x30>
 800fd4e:	4620      	mov	r0, r4
 800fd50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd54:	f002 bd42 	b.w	80127dc <_fflush_r>
 800fd58:	bd10      	pop	{r4, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20008290 	.word	0x20008290
 800fd60:	200082f8 	.word	0x200082f8
 800fd64:	20008360 	.word	0x20008360

0800fd68 <global_stdio_init.part.0>:
 800fd68:	b510      	push	{r4, lr}
 800fd6a:	4b0b      	ldr	r3, [pc, #44]	@ (800fd98 <global_stdio_init.part.0+0x30>)
 800fd6c:	4c0b      	ldr	r4, [pc, #44]	@ (800fd9c <global_stdio_init.part.0+0x34>)
 800fd6e:	4a0c      	ldr	r2, [pc, #48]	@ (800fda0 <global_stdio_init.part.0+0x38>)
 800fd70:	601a      	str	r2, [r3, #0]
 800fd72:	4620      	mov	r0, r4
 800fd74:	2200      	movs	r2, #0
 800fd76:	2104      	movs	r1, #4
 800fd78:	f7ff ff94 	bl	800fca4 <std>
 800fd7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fd80:	2201      	movs	r2, #1
 800fd82:	2109      	movs	r1, #9
 800fd84:	f7ff ff8e 	bl	800fca4 <std>
 800fd88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fd8c:	2202      	movs	r2, #2
 800fd8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd92:	2112      	movs	r1, #18
 800fd94:	f7ff bf86 	b.w	800fca4 <std>
 800fd98:	200083c8 	.word	0x200083c8
 800fd9c:	20008290 	.word	0x20008290
 800fda0:	0800fd11 	.word	0x0800fd11

0800fda4 <__sfp_lock_acquire>:
 800fda4:	4801      	ldr	r0, [pc, #4]	@ (800fdac <__sfp_lock_acquire+0x8>)
 800fda6:	f000 b920 	b.w	800ffea <__retarget_lock_acquire_recursive>
 800fdaa:	bf00      	nop
 800fdac:	200083d1 	.word	0x200083d1

0800fdb0 <__sfp_lock_release>:
 800fdb0:	4801      	ldr	r0, [pc, #4]	@ (800fdb8 <__sfp_lock_release+0x8>)
 800fdb2:	f000 b91b 	b.w	800ffec <__retarget_lock_release_recursive>
 800fdb6:	bf00      	nop
 800fdb8:	200083d1 	.word	0x200083d1

0800fdbc <__sinit>:
 800fdbc:	b510      	push	{r4, lr}
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	f7ff fff0 	bl	800fda4 <__sfp_lock_acquire>
 800fdc4:	6a23      	ldr	r3, [r4, #32]
 800fdc6:	b11b      	cbz	r3, 800fdd0 <__sinit+0x14>
 800fdc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdcc:	f7ff bff0 	b.w	800fdb0 <__sfp_lock_release>
 800fdd0:	4b04      	ldr	r3, [pc, #16]	@ (800fde4 <__sinit+0x28>)
 800fdd2:	6223      	str	r3, [r4, #32]
 800fdd4:	4b04      	ldr	r3, [pc, #16]	@ (800fde8 <__sinit+0x2c>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d1f5      	bne.n	800fdc8 <__sinit+0xc>
 800fddc:	f7ff ffc4 	bl	800fd68 <global_stdio_init.part.0>
 800fde0:	e7f2      	b.n	800fdc8 <__sinit+0xc>
 800fde2:	bf00      	nop
 800fde4:	0800fd29 	.word	0x0800fd29
 800fde8:	200083c8 	.word	0x200083c8

0800fdec <_fwalk_sglue>:
 800fdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdf0:	4607      	mov	r7, r0
 800fdf2:	4688      	mov	r8, r1
 800fdf4:	4614      	mov	r4, r2
 800fdf6:	2600      	movs	r6, #0
 800fdf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fdfc:	f1b9 0901 	subs.w	r9, r9, #1
 800fe00:	d505      	bpl.n	800fe0e <_fwalk_sglue+0x22>
 800fe02:	6824      	ldr	r4, [r4, #0]
 800fe04:	2c00      	cmp	r4, #0
 800fe06:	d1f7      	bne.n	800fdf8 <_fwalk_sglue+0xc>
 800fe08:	4630      	mov	r0, r6
 800fe0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe0e:	89ab      	ldrh	r3, [r5, #12]
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d907      	bls.n	800fe24 <_fwalk_sglue+0x38>
 800fe14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	d003      	beq.n	800fe24 <_fwalk_sglue+0x38>
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	4638      	mov	r0, r7
 800fe20:	47c0      	blx	r8
 800fe22:	4306      	orrs	r6, r0
 800fe24:	3568      	adds	r5, #104	@ 0x68
 800fe26:	e7e9      	b.n	800fdfc <_fwalk_sglue+0x10>

0800fe28 <siprintf>:
 800fe28:	b40e      	push	{r1, r2, r3}
 800fe2a:	b500      	push	{lr}
 800fe2c:	b09c      	sub	sp, #112	@ 0x70
 800fe2e:	ab1d      	add	r3, sp, #116	@ 0x74
 800fe30:	9002      	str	r0, [sp, #8]
 800fe32:	9006      	str	r0, [sp, #24]
 800fe34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe38:	4809      	ldr	r0, [pc, #36]	@ (800fe60 <siprintf+0x38>)
 800fe3a:	9107      	str	r1, [sp, #28]
 800fe3c:	9104      	str	r1, [sp, #16]
 800fe3e:	4909      	ldr	r1, [pc, #36]	@ (800fe64 <siprintf+0x3c>)
 800fe40:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe44:	9105      	str	r1, [sp, #20]
 800fe46:	6800      	ldr	r0, [r0, #0]
 800fe48:	9301      	str	r3, [sp, #4]
 800fe4a:	a902      	add	r1, sp, #8
 800fe4c:	f002 fb46 	bl	80124dc <_svfiprintf_r>
 800fe50:	9b02      	ldr	r3, [sp, #8]
 800fe52:	2200      	movs	r2, #0
 800fe54:	701a      	strb	r2, [r3, #0]
 800fe56:	b01c      	add	sp, #112	@ 0x70
 800fe58:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe5c:	b003      	add	sp, #12
 800fe5e:	4770      	bx	lr
 800fe60:	2000047c 	.word	0x2000047c
 800fe64:	ffff0208 	.word	0xffff0208

0800fe68 <__sread>:
 800fe68:	b510      	push	{r4, lr}
 800fe6a:	460c      	mov	r4, r1
 800fe6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe70:	f000 f86c 	bl	800ff4c <_read_r>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	bfab      	itete	ge
 800fe78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fe7a:	89a3      	ldrhlt	r3, [r4, #12]
 800fe7c:	181b      	addge	r3, r3, r0
 800fe7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fe82:	bfac      	ite	ge
 800fe84:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fe86:	81a3      	strhlt	r3, [r4, #12]
 800fe88:	bd10      	pop	{r4, pc}

0800fe8a <__swrite>:
 800fe8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8e:	461f      	mov	r7, r3
 800fe90:	898b      	ldrh	r3, [r1, #12]
 800fe92:	05db      	lsls	r3, r3, #23
 800fe94:	4605      	mov	r5, r0
 800fe96:	460c      	mov	r4, r1
 800fe98:	4616      	mov	r6, r2
 800fe9a:	d505      	bpl.n	800fea8 <__swrite+0x1e>
 800fe9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fea0:	2302      	movs	r3, #2
 800fea2:	2200      	movs	r2, #0
 800fea4:	f000 f840 	bl	800ff28 <_lseek_r>
 800fea8:	89a3      	ldrh	r3, [r4, #12]
 800feaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800feae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800feb2:	81a3      	strh	r3, [r4, #12]
 800feb4:	4632      	mov	r2, r6
 800feb6:	463b      	mov	r3, r7
 800feb8:	4628      	mov	r0, r5
 800feba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800febe:	f000 b857 	b.w	800ff70 <_write_r>

0800fec2 <__sseek>:
 800fec2:	b510      	push	{r4, lr}
 800fec4:	460c      	mov	r4, r1
 800fec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feca:	f000 f82d 	bl	800ff28 <_lseek_r>
 800fece:	1c43      	adds	r3, r0, #1
 800fed0:	89a3      	ldrh	r3, [r4, #12]
 800fed2:	bf15      	itete	ne
 800fed4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fed6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800feda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fede:	81a3      	strheq	r3, [r4, #12]
 800fee0:	bf18      	it	ne
 800fee2:	81a3      	strhne	r3, [r4, #12]
 800fee4:	bd10      	pop	{r4, pc}

0800fee6 <__sclose>:
 800fee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feea:	f000 b80d 	b.w	800ff08 <_close_r>

0800feee <memset>:
 800feee:	4402      	add	r2, r0
 800fef0:	4603      	mov	r3, r0
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d100      	bne.n	800fef8 <memset+0xa>
 800fef6:	4770      	bx	lr
 800fef8:	f803 1b01 	strb.w	r1, [r3], #1
 800fefc:	e7f9      	b.n	800fef2 <memset+0x4>
	...

0800ff00 <_localeconv_r>:
 800ff00:	4800      	ldr	r0, [pc, #0]	@ (800ff04 <_localeconv_r+0x4>)
 800ff02:	4770      	bx	lr
 800ff04:	200005bc 	.word	0x200005bc

0800ff08 <_close_r>:
 800ff08:	b538      	push	{r3, r4, r5, lr}
 800ff0a:	4d06      	ldr	r5, [pc, #24]	@ (800ff24 <_close_r+0x1c>)
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	4604      	mov	r4, r0
 800ff10:	4608      	mov	r0, r1
 800ff12:	602b      	str	r3, [r5, #0]
 800ff14:	f7fa feb9 	bl	800ac8a <_close>
 800ff18:	1c43      	adds	r3, r0, #1
 800ff1a:	d102      	bne.n	800ff22 <_close_r+0x1a>
 800ff1c:	682b      	ldr	r3, [r5, #0]
 800ff1e:	b103      	cbz	r3, 800ff22 <_close_r+0x1a>
 800ff20:	6023      	str	r3, [r4, #0]
 800ff22:	bd38      	pop	{r3, r4, r5, pc}
 800ff24:	200083cc 	.word	0x200083cc

0800ff28 <_lseek_r>:
 800ff28:	b538      	push	{r3, r4, r5, lr}
 800ff2a:	4d07      	ldr	r5, [pc, #28]	@ (800ff48 <_lseek_r+0x20>)
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	4608      	mov	r0, r1
 800ff30:	4611      	mov	r1, r2
 800ff32:	2200      	movs	r2, #0
 800ff34:	602a      	str	r2, [r5, #0]
 800ff36:	461a      	mov	r2, r3
 800ff38:	f7fa fece 	bl	800acd8 <_lseek>
 800ff3c:	1c43      	adds	r3, r0, #1
 800ff3e:	d102      	bne.n	800ff46 <_lseek_r+0x1e>
 800ff40:	682b      	ldr	r3, [r5, #0]
 800ff42:	b103      	cbz	r3, 800ff46 <_lseek_r+0x1e>
 800ff44:	6023      	str	r3, [r4, #0]
 800ff46:	bd38      	pop	{r3, r4, r5, pc}
 800ff48:	200083cc 	.word	0x200083cc

0800ff4c <_read_r>:
 800ff4c:	b538      	push	{r3, r4, r5, lr}
 800ff4e:	4d07      	ldr	r5, [pc, #28]	@ (800ff6c <_read_r+0x20>)
 800ff50:	4604      	mov	r4, r0
 800ff52:	4608      	mov	r0, r1
 800ff54:	4611      	mov	r1, r2
 800ff56:	2200      	movs	r2, #0
 800ff58:	602a      	str	r2, [r5, #0]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	f7fa fe5c 	bl	800ac18 <_read>
 800ff60:	1c43      	adds	r3, r0, #1
 800ff62:	d102      	bne.n	800ff6a <_read_r+0x1e>
 800ff64:	682b      	ldr	r3, [r5, #0]
 800ff66:	b103      	cbz	r3, 800ff6a <_read_r+0x1e>
 800ff68:	6023      	str	r3, [r4, #0]
 800ff6a:	bd38      	pop	{r3, r4, r5, pc}
 800ff6c:	200083cc 	.word	0x200083cc

0800ff70 <_write_r>:
 800ff70:	b538      	push	{r3, r4, r5, lr}
 800ff72:	4d07      	ldr	r5, [pc, #28]	@ (800ff90 <_write_r+0x20>)
 800ff74:	4604      	mov	r4, r0
 800ff76:	4608      	mov	r0, r1
 800ff78:	4611      	mov	r1, r2
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	602a      	str	r2, [r5, #0]
 800ff7e:	461a      	mov	r2, r3
 800ff80:	f7fa fe67 	bl	800ac52 <_write>
 800ff84:	1c43      	adds	r3, r0, #1
 800ff86:	d102      	bne.n	800ff8e <_write_r+0x1e>
 800ff88:	682b      	ldr	r3, [r5, #0]
 800ff8a:	b103      	cbz	r3, 800ff8e <_write_r+0x1e>
 800ff8c:	6023      	str	r3, [r4, #0]
 800ff8e:	bd38      	pop	{r3, r4, r5, pc}
 800ff90:	200083cc 	.word	0x200083cc

0800ff94 <__errno>:
 800ff94:	4b01      	ldr	r3, [pc, #4]	@ (800ff9c <__errno+0x8>)
 800ff96:	6818      	ldr	r0, [r3, #0]
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	2000047c 	.word	0x2000047c

0800ffa0 <__libc_init_array>:
 800ffa0:	b570      	push	{r4, r5, r6, lr}
 800ffa2:	4d0d      	ldr	r5, [pc, #52]	@ (800ffd8 <__libc_init_array+0x38>)
 800ffa4:	4c0d      	ldr	r4, [pc, #52]	@ (800ffdc <__libc_init_array+0x3c>)
 800ffa6:	1b64      	subs	r4, r4, r5
 800ffa8:	10a4      	asrs	r4, r4, #2
 800ffaa:	2600      	movs	r6, #0
 800ffac:	42a6      	cmp	r6, r4
 800ffae:	d109      	bne.n	800ffc4 <__libc_init_array+0x24>
 800ffb0:	4d0b      	ldr	r5, [pc, #44]	@ (800ffe0 <__libc_init_array+0x40>)
 800ffb2:	4c0c      	ldr	r4, [pc, #48]	@ (800ffe4 <__libc_init_array+0x44>)
 800ffb4:	f003 faf6 	bl	80135a4 <_init>
 800ffb8:	1b64      	subs	r4, r4, r5
 800ffba:	10a4      	asrs	r4, r4, #2
 800ffbc:	2600      	movs	r6, #0
 800ffbe:	42a6      	cmp	r6, r4
 800ffc0:	d105      	bne.n	800ffce <__libc_init_array+0x2e>
 800ffc2:	bd70      	pop	{r4, r5, r6, pc}
 800ffc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffc8:	4798      	blx	r3
 800ffca:	3601      	adds	r6, #1
 800ffcc:	e7ee      	b.n	800ffac <__libc_init_array+0xc>
 800ffce:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffd2:	4798      	blx	r3
 800ffd4:	3601      	adds	r6, #1
 800ffd6:	e7f2      	b.n	800ffbe <__libc_init_array+0x1e>
 800ffd8:	08016808 	.word	0x08016808
 800ffdc:	08016808 	.word	0x08016808
 800ffe0:	08016808 	.word	0x08016808
 800ffe4:	0801680c 	.word	0x0801680c

0800ffe8 <__retarget_lock_init_recursive>:
 800ffe8:	4770      	bx	lr

0800ffea <__retarget_lock_acquire_recursive>:
 800ffea:	4770      	bx	lr

0800ffec <__retarget_lock_release_recursive>:
 800ffec:	4770      	bx	lr

0800ffee <memcpy>:
 800ffee:	440a      	add	r2, r1
 800fff0:	4291      	cmp	r1, r2
 800fff2:	f100 33ff 	add.w	r3, r0, #4294967295
 800fff6:	d100      	bne.n	800fffa <memcpy+0xc>
 800fff8:	4770      	bx	lr
 800fffa:	b510      	push	{r4, lr}
 800fffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010004:	4291      	cmp	r1, r2
 8010006:	d1f9      	bne.n	800fffc <memcpy+0xe>
 8010008:	bd10      	pop	{r4, pc}
	...

0801000c <nanf>:
 801000c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010014 <nanf+0x8>
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	7fc00000 	.word	0x7fc00000

08010018 <quorem>:
 8010018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801001c:	6903      	ldr	r3, [r0, #16]
 801001e:	690c      	ldr	r4, [r1, #16]
 8010020:	42a3      	cmp	r3, r4
 8010022:	4607      	mov	r7, r0
 8010024:	db7e      	blt.n	8010124 <quorem+0x10c>
 8010026:	3c01      	subs	r4, #1
 8010028:	f101 0814 	add.w	r8, r1, #20
 801002c:	00a3      	lsls	r3, r4, #2
 801002e:	f100 0514 	add.w	r5, r0, #20
 8010032:	9300      	str	r3, [sp, #0]
 8010034:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010038:	9301      	str	r3, [sp, #4]
 801003a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801003e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010042:	3301      	adds	r3, #1
 8010044:	429a      	cmp	r2, r3
 8010046:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801004a:	fbb2 f6f3 	udiv	r6, r2, r3
 801004e:	d32e      	bcc.n	80100ae <quorem+0x96>
 8010050:	f04f 0a00 	mov.w	sl, #0
 8010054:	46c4      	mov	ip, r8
 8010056:	46ae      	mov	lr, r5
 8010058:	46d3      	mov	fp, sl
 801005a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801005e:	b298      	uxth	r0, r3
 8010060:	fb06 a000 	mla	r0, r6, r0, sl
 8010064:	0c02      	lsrs	r2, r0, #16
 8010066:	0c1b      	lsrs	r3, r3, #16
 8010068:	fb06 2303 	mla	r3, r6, r3, r2
 801006c:	f8de 2000 	ldr.w	r2, [lr]
 8010070:	b280      	uxth	r0, r0
 8010072:	b292      	uxth	r2, r2
 8010074:	1a12      	subs	r2, r2, r0
 8010076:	445a      	add	r2, fp
 8010078:	f8de 0000 	ldr.w	r0, [lr]
 801007c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010080:	b29b      	uxth	r3, r3
 8010082:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010086:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801008a:	b292      	uxth	r2, r2
 801008c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010090:	45e1      	cmp	r9, ip
 8010092:	f84e 2b04 	str.w	r2, [lr], #4
 8010096:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801009a:	d2de      	bcs.n	801005a <quorem+0x42>
 801009c:	9b00      	ldr	r3, [sp, #0]
 801009e:	58eb      	ldr	r3, [r5, r3]
 80100a0:	b92b      	cbnz	r3, 80100ae <quorem+0x96>
 80100a2:	9b01      	ldr	r3, [sp, #4]
 80100a4:	3b04      	subs	r3, #4
 80100a6:	429d      	cmp	r5, r3
 80100a8:	461a      	mov	r2, r3
 80100aa:	d32f      	bcc.n	801010c <quorem+0xf4>
 80100ac:	613c      	str	r4, [r7, #16]
 80100ae:	4638      	mov	r0, r7
 80100b0:	f001 f9c2 	bl	8011438 <__mcmp>
 80100b4:	2800      	cmp	r0, #0
 80100b6:	db25      	blt.n	8010104 <quorem+0xec>
 80100b8:	4629      	mov	r1, r5
 80100ba:	2000      	movs	r0, #0
 80100bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80100c0:	f8d1 c000 	ldr.w	ip, [r1]
 80100c4:	fa1f fe82 	uxth.w	lr, r2
 80100c8:	fa1f f38c 	uxth.w	r3, ip
 80100cc:	eba3 030e 	sub.w	r3, r3, lr
 80100d0:	4403      	add	r3, r0
 80100d2:	0c12      	lsrs	r2, r2, #16
 80100d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80100d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80100dc:	b29b      	uxth	r3, r3
 80100de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100e2:	45c1      	cmp	r9, r8
 80100e4:	f841 3b04 	str.w	r3, [r1], #4
 80100e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80100ec:	d2e6      	bcs.n	80100bc <quorem+0xa4>
 80100ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100f6:	b922      	cbnz	r2, 8010102 <quorem+0xea>
 80100f8:	3b04      	subs	r3, #4
 80100fa:	429d      	cmp	r5, r3
 80100fc:	461a      	mov	r2, r3
 80100fe:	d30b      	bcc.n	8010118 <quorem+0x100>
 8010100:	613c      	str	r4, [r7, #16]
 8010102:	3601      	adds	r6, #1
 8010104:	4630      	mov	r0, r6
 8010106:	b003      	add	sp, #12
 8010108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801010c:	6812      	ldr	r2, [r2, #0]
 801010e:	3b04      	subs	r3, #4
 8010110:	2a00      	cmp	r2, #0
 8010112:	d1cb      	bne.n	80100ac <quorem+0x94>
 8010114:	3c01      	subs	r4, #1
 8010116:	e7c6      	b.n	80100a6 <quorem+0x8e>
 8010118:	6812      	ldr	r2, [r2, #0]
 801011a:	3b04      	subs	r3, #4
 801011c:	2a00      	cmp	r2, #0
 801011e:	d1ef      	bne.n	8010100 <quorem+0xe8>
 8010120:	3c01      	subs	r4, #1
 8010122:	e7ea      	b.n	80100fa <quorem+0xe2>
 8010124:	2000      	movs	r0, #0
 8010126:	e7ee      	b.n	8010106 <quorem+0xee>

08010128 <_dtoa_r>:
 8010128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801012c:	69c7      	ldr	r7, [r0, #28]
 801012e:	b099      	sub	sp, #100	@ 0x64
 8010130:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010134:	ec55 4b10 	vmov	r4, r5, d0
 8010138:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801013a:	9109      	str	r1, [sp, #36]	@ 0x24
 801013c:	4683      	mov	fp, r0
 801013e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010140:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010142:	b97f      	cbnz	r7, 8010164 <_dtoa_r+0x3c>
 8010144:	2010      	movs	r0, #16
 8010146:	f000 fdfd 	bl	8010d44 <malloc>
 801014a:	4602      	mov	r2, r0
 801014c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010150:	b920      	cbnz	r0, 801015c <_dtoa_r+0x34>
 8010152:	4ba7      	ldr	r3, [pc, #668]	@ (80103f0 <_dtoa_r+0x2c8>)
 8010154:	21ef      	movs	r1, #239	@ 0xef
 8010156:	48a7      	ldr	r0, [pc, #668]	@ (80103f4 <_dtoa_r+0x2cc>)
 8010158:	f002 fbae 	bl	80128b8 <__assert_func>
 801015c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010160:	6007      	str	r7, [r0, #0]
 8010162:	60c7      	str	r7, [r0, #12]
 8010164:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010168:	6819      	ldr	r1, [r3, #0]
 801016a:	b159      	cbz	r1, 8010184 <_dtoa_r+0x5c>
 801016c:	685a      	ldr	r2, [r3, #4]
 801016e:	604a      	str	r2, [r1, #4]
 8010170:	2301      	movs	r3, #1
 8010172:	4093      	lsls	r3, r2
 8010174:	608b      	str	r3, [r1, #8]
 8010176:	4658      	mov	r0, fp
 8010178:	f000 feda 	bl	8010f30 <_Bfree>
 801017c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010180:	2200      	movs	r2, #0
 8010182:	601a      	str	r2, [r3, #0]
 8010184:	1e2b      	subs	r3, r5, #0
 8010186:	bfb9      	ittee	lt
 8010188:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801018c:	9303      	strlt	r3, [sp, #12]
 801018e:	2300      	movge	r3, #0
 8010190:	6033      	strge	r3, [r6, #0]
 8010192:	9f03      	ldr	r7, [sp, #12]
 8010194:	4b98      	ldr	r3, [pc, #608]	@ (80103f8 <_dtoa_r+0x2d0>)
 8010196:	bfbc      	itt	lt
 8010198:	2201      	movlt	r2, #1
 801019a:	6032      	strlt	r2, [r6, #0]
 801019c:	43bb      	bics	r3, r7
 801019e:	d112      	bne.n	80101c6 <_dtoa_r+0x9e>
 80101a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80101a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80101a6:	6013      	str	r3, [r2, #0]
 80101a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80101ac:	4323      	orrs	r3, r4
 80101ae:	f000 854d 	beq.w	8010c4c <_dtoa_r+0xb24>
 80101b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80101b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801040c <_dtoa_r+0x2e4>
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 854f 	beq.w	8010c5c <_dtoa_r+0xb34>
 80101be:	f10a 0303 	add.w	r3, sl, #3
 80101c2:	f000 bd49 	b.w	8010c58 <_dtoa_r+0xb30>
 80101c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101ca:	2200      	movs	r2, #0
 80101cc:	ec51 0b17 	vmov	r0, r1, d7
 80101d0:	2300      	movs	r3, #0
 80101d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80101d6:	f7f0 fc87 	bl	8000ae8 <__aeabi_dcmpeq>
 80101da:	4680      	mov	r8, r0
 80101dc:	b158      	cbz	r0, 80101f6 <_dtoa_r+0xce>
 80101de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80101e0:	2301      	movs	r3, #1
 80101e2:	6013      	str	r3, [r2, #0]
 80101e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80101e6:	b113      	cbz	r3, 80101ee <_dtoa_r+0xc6>
 80101e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80101ea:	4b84      	ldr	r3, [pc, #528]	@ (80103fc <_dtoa_r+0x2d4>)
 80101ec:	6013      	str	r3, [r2, #0]
 80101ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010410 <_dtoa_r+0x2e8>
 80101f2:	f000 bd33 	b.w	8010c5c <_dtoa_r+0xb34>
 80101f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80101fa:	aa16      	add	r2, sp, #88	@ 0x58
 80101fc:	a917      	add	r1, sp, #92	@ 0x5c
 80101fe:	4658      	mov	r0, fp
 8010200:	f001 fa3a 	bl	8011678 <__d2b>
 8010204:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010208:	4681      	mov	r9, r0
 801020a:	2e00      	cmp	r6, #0
 801020c:	d077      	beq.n	80102fe <_dtoa_r+0x1d6>
 801020e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010210:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801021c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010220:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010224:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010228:	4619      	mov	r1, r3
 801022a:	2200      	movs	r2, #0
 801022c:	4b74      	ldr	r3, [pc, #464]	@ (8010400 <_dtoa_r+0x2d8>)
 801022e:	f7f0 f83b 	bl	80002a8 <__aeabi_dsub>
 8010232:	a369      	add	r3, pc, #420	@ (adr r3, 80103d8 <_dtoa_r+0x2b0>)
 8010234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010238:	f7f0 f9ee 	bl	8000618 <__aeabi_dmul>
 801023c:	a368      	add	r3, pc, #416	@ (adr r3, 80103e0 <_dtoa_r+0x2b8>)
 801023e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010242:	f7f0 f833 	bl	80002ac <__adddf3>
 8010246:	4604      	mov	r4, r0
 8010248:	4630      	mov	r0, r6
 801024a:	460d      	mov	r5, r1
 801024c:	f7f0 f97a 	bl	8000544 <__aeabi_i2d>
 8010250:	a365      	add	r3, pc, #404	@ (adr r3, 80103e8 <_dtoa_r+0x2c0>)
 8010252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010256:	f7f0 f9df 	bl	8000618 <__aeabi_dmul>
 801025a:	4602      	mov	r2, r0
 801025c:	460b      	mov	r3, r1
 801025e:	4620      	mov	r0, r4
 8010260:	4629      	mov	r1, r5
 8010262:	f7f0 f823 	bl	80002ac <__adddf3>
 8010266:	4604      	mov	r4, r0
 8010268:	460d      	mov	r5, r1
 801026a:	f7f0 fc85 	bl	8000b78 <__aeabi_d2iz>
 801026e:	2200      	movs	r2, #0
 8010270:	4607      	mov	r7, r0
 8010272:	2300      	movs	r3, #0
 8010274:	4620      	mov	r0, r4
 8010276:	4629      	mov	r1, r5
 8010278:	f7f0 fc40 	bl	8000afc <__aeabi_dcmplt>
 801027c:	b140      	cbz	r0, 8010290 <_dtoa_r+0x168>
 801027e:	4638      	mov	r0, r7
 8010280:	f7f0 f960 	bl	8000544 <__aeabi_i2d>
 8010284:	4622      	mov	r2, r4
 8010286:	462b      	mov	r3, r5
 8010288:	f7f0 fc2e 	bl	8000ae8 <__aeabi_dcmpeq>
 801028c:	b900      	cbnz	r0, 8010290 <_dtoa_r+0x168>
 801028e:	3f01      	subs	r7, #1
 8010290:	2f16      	cmp	r7, #22
 8010292:	d851      	bhi.n	8010338 <_dtoa_r+0x210>
 8010294:	4b5b      	ldr	r3, [pc, #364]	@ (8010404 <_dtoa_r+0x2dc>)
 8010296:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801029a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80102a2:	f7f0 fc2b 	bl	8000afc <__aeabi_dcmplt>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d048      	beq.n	801033c <_dtoa_r+0x214>
 80102aa:	3f01      	subs	r7, #1
 80102ac:	2300      	movs	r3, #0
 80102ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80102b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80102b2:	1b9b      	subs	r3, r3, r6
 80102b4:	1e5a      	subs	r2, r3, #1
 80102b6:	bf44      	itt	mi
 80102b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80102bc:	2300      	movmi	r3, #0
 80102be:	9208      	str	r2, [sp, #32]
 80102c0:	bf54      	ite	pl
 80102c2:	f04f 0800 	movpl.w	r8, #0
 80102c6:	9308      	strmi	r3, [sp, #32]
 80102c8:	2f00      	cmp	r7, #0
 80102ca:	db39      	blt.n	8010340 <_dtoa_r+0x218>
 80102cc:	9b08      	ldr	r3, [sp, #32]
 80102ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80102d0:	443b      	add	r3, r7
 80102d2:	9308      	str	r3, [sp, #32]
 80102d4:	2300      	movs	r3, #0
 80102d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80102d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102da:	2b09      	cmp	r3, #9
 80102dc:	d864      	bhi.n	80103a8 <_dtoa_r+0x280>
 80102de:	2b05      	cmp	r3, #5
 80102e0:	bfc4      	itt	gt
 80102e2:	3b04      	subgt	r3, #4
 80102e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80102e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102e8:	f1a3 0302 	sub.w	r3, r3, #2
 80102ec:	bfcc      	ite	gt
 80102ee:	2400      	movgt	r4, #0
 80102f0:	2401      	movle	r4, #1
 80102f2:	2b03      	cmp	r3, #3
 80102f4:	d863      	bhi.n	80103be <_dtoa_r+0x296>
 80102f6:	e8df f003 	tbb	[pc, r3]
 80102fa:	372a      	.short	0x372a
 80102fc:	5535      	.short	0x5535
 80102fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010302:	441e      	add	r6, r3
 8010304:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010308:	2b20      	cmp	r3, #32
 801030a:	bfc1      	itttt	gt
 801030c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010310:	409f      	lslgt	r7, r3
 8010312:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010316:	fa24 f303 	lsrgt.w	r3, r4, r3
 801031a:	bfd6      	itet	le
 801031c:	f1c3 0320 	rsble	r3, r3, #32
 8010320:	ea47 0003 	orrgt.w	r0, r7, r3
 8010324:	fa04 f003 	lslle.w	r0, r4, r3
 8010328:	f7f0 f8fc 	bl	8000524 <__aeabi_ui2d>
 801032c:	2201      	movs	r2, #1
 801032e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010332:	3e01      	subs	r6, #1
 8010334:	9214      	str	r2, [sp, #80]	@ 0x50
 8010336:	e777      	b.n	8010228 <_dtoa_r+0x100>
 8010338:	2301      	movs	r3, #1
 801033a:	e7b8      	b.n	80102ae <_dtoa_r+0x186>
 801033c:	9012      	str	r0, [sp, #72]	@ 0x48
 801033e:	e7b7      	b.n	80102b0 <_dtoa_r+0x188>
 8010340:	427b      	negs	r3, r7
 8010342:	930a      	str	r3, [sp, #40]	@ 0x28
 8010344:	2300      	movs	r3, #0
 8010346:	eba8 0807 	sub.w	r8, r8, r7
 801034a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801034c:	e7c4      	b.n	80102d8 <_dtoa_r+0x1b0>
 801034e:	2300      	movs	r3, #0
 8010350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010352:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010354:	2b00      	cmp	r3, #0
 8010356:	dc35      	bgt.n	80103c4 <_dtoa_r+0x29c>
 8010358:	2301      	movs	r3, #1
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	9307      	str	r3, [sp, #28]
 801035e:	461a      	mov	r2, r3
 8010360:	920e      	str	r2, [sp, #56]	@ 0x38
 8010362:	e00b      	b.n	801037c <_dtoa_r+0x254>
 8010364:	2301      	movs	r3, #1
 8010366:	e7f3      	b.n	8010350 <_dtoa_r+0x228>
 8010368:	2300      	movs	r3, #0
 801036a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801036c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801036e:	18fb      	adds	r3, r7, r3
 8010370:	9300      	str	r3, [sp, #0]
 8010372:	3301      	adds	r3, #1
 8010374:	2b01      	cmp	r3, #1
 8010376:	9307      	str	r3, [sp, #28]
 8010378:	bfb8      	it	lt
 801037a:	2301      	movlt	r3, #1
 801037c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010380:	2100      	movs	r1, #0
 8010382:	2204      	movs	r2, #4
 8010384:	f102 0514 	add.w	r5, r2, #20
 8010388:	429d      	cmp	r5, r3
 801038a:	d91f      	bls.n	80103cc <_dtoa_r+0x2a4>
 801038c:	6041      	str	r1, [r0, #4]
 801038e:	4658      	mov	r0, fp
 8010390:	f000 fd8e 	bl	8010eb0 <_Balloc>
 8010394:	4682      	mov	sl, r0
 8010396:	2800      	cmp	r0, #0
 8010398:	d13c      	bne.n	8010414 <_dtoa_r+0x2ec>
 801039a:	4b1b      	ldr	r3, [pc, #108]	@ (8010408 <_dtoa_r+0x2e0>)
 801039c:	4602      	mov	r2, r0
 801039e:	f240 11af 	movw	r1, #431	@ 0x1af
 80103a2:	e6d8      	b.n	8010156 <_dtoa_r+0x2e>
 80103a4:	2301      	movs	r3, #1
 80103a6:	e7e0      	b.n	801036a <_dtoa_r+0x242>
 80103a8:	2401      	movs	r4, #1
 80103aa:	2300      	movs	r3, #0
 80103ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80103ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80103b0:	f04f 33ff 	mov.w	r3, #4294967295
 80103b4:	9300      	str	r3, [sp, #0]
 80103b6:	9307      	str	r3, [sp, #28]
 80103b8:	2200      	movs	r2, #0
 80103ba:	2312      	movs	r3, #18
 80103bc:	e7d0      	b.n	8010360 <_dtoa_r+0x238>
 80103be:	2301      	movs	r3, #1
 80103c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103c2:	e7f5      	b.n	80103b0 <_dtoa_r+0x288>
 80103c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	9307      	str	r3, [sp, #28]
 80103ca:	e7d7      	b.n	801037c <_dtoa_r+0x254>
 80103cc:	3101      	adds	r1, #1
 80103ce:	0052      	lsls	r2, r2, #1
 80103d0:	e7d8      	b.n	8010384 <_dtoa_r+0x25c>
 80103d2:	bf00      	nop
 80103d4:	f3af 8000 	nop.w
 80103d8:	636f4361 	.word	0x636f4361
 80103dc:	3fd287a7 	.word	0x3fd287a7
 80103e0:	8b60c8b3 	.word	0x8b60c8b3
 80103e4:	3fc68a28 	.word	0x3fc68a28
 80103e8:	509f79fb 	.word	0x509f79fb
 80103ec:	3fd34413 	.word	0x3fd34413
 80103f0:	0801651b 	.word	0x0801651b
 80103f4:	08016532 	.word	0x08016532
 80103f8:	7ff00000 	.word	0x7ff00000
 80103fc:	080164e6 	.word	0x080164e6
 8010400:	3ff80000 	.word	0x3ff80000
 8010404:	08016628 	.word	0x08016628
 8010408:	0801658a 	.word	0x0801658a
 801040c:	08016517 	.word	0x08016517
 8010410:	080164e5 	.word	0x080164e5
 8010414:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010418:	6018      	str	r0, [r3, #0]
 801041a:	9b07      	ldr	r3, [sp, #28]
 801041c:	2b0e      	cmp	r3, #14
 801041e:	f200 80a4 	bhi.w	801056a <_dtoa_r+0x442>
 8010422:	2c00      	cmp	r4, #0
 8010424:	f000 80a1 	beq.w	801056a <_dtoa_r+0x442>
 8010428:	2f00      	cmp	r7, #0
 801042a:	dd33      	ble.n	8010494 <_dtoa_r+0x36c>
 801042c:	4bad      	ldr	r3, [pc, #692]	@ (80106e4 <_dtoa_r+0x5bc>)
 801042e:	f007 020f 	and.w	r2, r7, #15
 8010432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010436:	ed93 7b00 	vldr	d7, [r3]
 801043a:	05f8      	lsls	r0, r7, #23
 801043c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010440:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010444:	d516      	bpl.n	8010474 <_dtoa_r+0x34c>
 8010446:	4ba8      	ldr	r3, [pc, #672]	@ (80106e8 <_dtoa_r+0x5c0>)
 8010448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801044c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010450:	f7f0 fa0c 	bl	800086c <__aeabi_ddiv>
 8010454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010458:	f004 040f 	and.w	r4, r4, #15
 801045c:	2603      	movs	r6, #3
 801045e:	4da2      	ldr	r5, [pc, #648]	@ (80106e8 <_dtoa_r+0x5c0>)
 8010460:	b954      	cbnz	r4, 8010478 <_dtoa_r+0x350>
 8010462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801046a:	f7f0 f9ff 	bl	800086c <__aeabi_ddiv>
 801046e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010472:	e028      	b.n	80104c6 <_dtoa_r+0x39e>
 8010474:	2602      	movs	r6, #2
 8010476:	e7f2      	b.n	801045e <_dtoa_r+0x336>
 8010478:	07e1      	lsls	r1, r4, #31
 801047a:	d508      	bpl.n	801048e <_dtoa_r+0x366>
 801047c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010480:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010484:	f7f0 f8c8 	bl	8000618 <__aeabi_dmul>
 8010488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801048c:	3601      	adds	r6, #1
 801048e:	1064      	asrs	r4, r4, #1
 8010490:	3508      	adds	r5, #8
 8010492:	e7e5      	b.n	8010460 <_dtoa_r+0x338>
 8010494:	f000 80d2 	beq.w	801063c <_dtoa_r+0x514>
 8010498:	427c      	negs	r4, r7
 801049a:	4b92      	ldr	r3, [pc, #584]	@ (80106e4 <_dtoa_r+0x5bc>)
 801049c:	4d92      	ldr	r5, [pc, #584]	@ (80106e8 <_dtoa_r+0x5c0>)
 801049e:	f004 020f 	and.w	r2, r4, #15
 80104a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80104ae:	f7f0 f8b3 	bl	8000618 <__aeabi_dmul>
 80104b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104b6:	1124      	asrs	r4, r4, #4
 80104b8:	2300      	movs	r3, #0
 80104ba:	2602      	movs	r6, #2
 80104bc:	2c00      	cmp	r4, #0
 80104be:	f040 80b2 	bne.w	8010626 <_dtoa_r+0x4fe>
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d1d3      	bne.n	801046e <_dtoa_r+0x346>
 80104c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80104c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f000 80b7 	beq.w	8010640 <_dtoa_r+0x518>
 80104d2:	4b86      	ldr	r3, [pc, #536]	@ (80106ec <_dtoa_r+0x5c4>)
 80104d4:	2200      	movs	r2, #0
 80104d6:	4620      	mov	r0, r4
 80104d8:	4629      	mov	r1, r5
 80104da:	f7f0 fb0f 	bl	8000afc <__aeabi_dcmplt>
 80104de:	2800      	cmp	r0, #0
 80104e0:	f000 80ae 	beq.w	8010640 <_dtoa_r+0x518>
 80104e4:	9b07      	ldr	r3, [sp, #28]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	f000 80aa 	beq.w	8010640 <_dtoa_r+0x518>
 80104ec:	9b00      	ldr	r3, [sp, #0]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	dd37      	ble.n	8010562 <_dtoa_r+0x43a>
 80104f2:	1e7b      	subs	r3, r7, #1
 80104f4:	9304      	str	r3, [sp, #16]
 80104f6:	4620      	mov	r0, r4
 80104f8:	4b7d      	ldr	r3, [pc, #500]	@ (80106f0 <_dtoa_r+0x5c8>)
 80104fa:	2200      	movs	r2, #0
 80104fc:	4629      	mov	r1, r5
 80104fe:	f7f0 f88b 	bl	8000618 <__aeabi_dmul>
 8010502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010506:	9c00      	ldr	r4, [sp, #0]
 8010508:	3601      	adds	r6, #1
 801050a:	4630      	mov	r0, r6
 801050c:	f7f0 f81a 	bl	8000544 <__aeabi_i2d>
 8010510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010514:	f7f0 f880 	bl	8000618 <__aeabi_dmul>
 8010518:	4b76      	ldr	r3, [pc, #472]	@ (80106f4 <_dtoa_r+0x5cc>)
 801051a:	2200      	movs	r2, #0
 801051c:	f7ef fec6 	bl	80002ac <__adddf3>
 8010520:	4605      	mov	r5, r0
 8010522:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010526:	2c00      	cmp	r4, #0
 8010528:	f040 808d 	bne.w	8010646 <_dtoa_r+0x51e>
 801052c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010530:	4b71      	ldr	r3, [pc, #452]	@ (80106f8 <_dtoa_r+0x5d0>)
 8010532:	2200      	movs	r2, #0
 8010534:	f7ef feb8 	bl	80002a8 <__aeabi_dsub>
 8010538:	4602      	mov	r2, r0
 801053a:	460b      	mov	r3, r1
 801053c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010540:	462a      	mov	r2, r5
 8010542:	4633      	mov	r3, r6
 8010544:	f7f0 faf8 	bl	8000b38 <__aeabi_dcmpgt>
 8010548:	2800      	cmp	r0, #0
 801054a:	f040 828b 	bne.w	8010a64 <_dtoa_r+0x93c>
 801054e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010552:	462a      	mov	r2, r5
 8010554:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010558:	f7f0 fad0 	bl	8000afc <__aeabi_dcmplt>
 801055c:	2800      	cmp	r0, #0
 801055e:	f040 8128 	bne.w	80107b2 <_dtoa_r+0x68a>
 8010562:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010566:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801056a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801056c:	2b00      	cmp	r3, #0
 801056e:	f2c0 815a 	blt.w	8010826 <_dtoa_r+0x6fe>
 8010572:	2f0e      	cmp	r7, #14
 8010574:	f300 8157 	bgt.w	8010826 <_dtoa_r+0x6fe>
 8010578:	4b5a      	ldr	r3, [pc, #360]	@ (80106e4 <_dtoa_r+0x5bc>)
 801057a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801057e:	ed93 7b00 	vldr	d7, [r3]
 8010582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010584:	2b00      	cmp	r3, #0
 8010586:	ed8d 7b00 	vstr	d7, [sp]
 801058a:	da03      	bge.n	8010594 <_dtoa_r+0x46c>
 801058c:	9b07      	ldr	r3, [sp, #28]
 801058e:	2b00      	cmp	r3, #0
 8010590:	f340 8101 	ble.w	8010796 <_dtoa_r+0x66e>
 8010594:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010598:	4656      	mov	r6, sl
 801059a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801059e:	4620      	mov	r0, r4
 80105a0:	4629      	mov	r1, r5
 80105a2:	f7f0 f963 	bl	800086c <__aeabi_ddiv>
 80105a6:	f7f0 fae7 	bl	8000b78 <__aeabi_d2iz>
 80105aa:	4680      	mov	r8, r0
 80105ac:	f7ef ffca 	bl	8000544 <__aeabi_i2d>
 80105b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105b4:	f7f0 f830 	bl	8000618 <__aeabi_dmul>
 80105b8:	4602      	mov	r2, r0
 80105ba:	460b      	mov	r3, r1
 80105bc:	4620      	mov	r0, r4
 80105be:	4629      	mov	r1, r5
 80105c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80105c4:	f7ef fe70 	bl	80002a8 <__aeabi_dsub>
 80105c8:	f806 4b01 	strb.w	r4, [r6], #1
 80105cc:	9d07      	ldr	r5, [sp, #28]
 80105ce:	eba6 040a 	sub.w	r4, r6, sl
 80105d2:	42a5      	cmp	r5, r4
 80105d4:	4602      	mov	r2, r0
 80105d6:	460b      	mov	r3, r1
 80105d8:	f040 8117 	bne.w	801080a <_dtoa_r+0x6e2>
 80105dc:	f7ef fe66 	bl	80002ac <__adddf3>
 80105e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105e4:	4604      	mov	r4, r0
 80105e6:	460d      	mov	r5, r1
 80105e8:	f7f0 faa6 	bl	8000b38 <__aeabi_dcmpgt>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	f040 80f9 	bne.w	80107e4 <_dtoa_r+0x6bc>
 80105f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105f6:	4620      	mov	r0, r4
 80105f8:	4629      	mov	r1, r5
 80105fa:	f7f0 fa75 	bl	8000ae8 <__aeabi_dcmpeq>
 80105fe:	b118      	cbz	r0, 8010608 <_dtoa_r+0x4e0>
 8010600:	f018 0f01 	tst.w	r8, #1
 8010604:	f040 80ee 	bne.w	80107e4 <_dtoa_r+0x6bc>
 8010608:	4649      	mov	r1, r9
 801060a:	4658      	mov	r0, fp
 801060c:	f000 fc90 	bl	8010f30 <_Bfree>
 8010610:	2300      	movs	r3, #0
 8010612:	7033      	strb	r3, [r6, #0]
 8010614:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010616:	3701      	adds	r7, #1
 8010618:	601f      	str	r7, [r3, #0]
 801061a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801061c:	2b00      	cmp	r3, #0
 801061e:	f000 831d 	beq.w	8010c5c <_dtoa_r+0xb34>
 8010622:	601e      	str	r6, [r3, #0]
 8010624:	e31a      	b.n	8010c5c <_dtoa_r+0xb34>
 8010626:	07e2      	lsls	r2, r4, #31
 8010628:	d505      	bpl.n	8010636 <_dtoa_r+0x50e>
 801062a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801062e:	f7ef fff3 	bl	8000618 <__aeabi_dmul>
 8010632:	3601      	adds	r6, #1
 8010634:	2301      	movs	r3, #1
 8010636:	1064      	asrs	r4, r4, #1
 8010638:	3508      	adds	r5, #8
 801063a:	e73f      	b.n	80104bc <_dtoa_r+0x394>
 801063c:	2602      	movs	r6, #2
 801063e:	e742      	b.n	80104c6 <_dtoa_r+0x39e>
 8010640:	9c07      	ldr	r4, [sp, #28]
 8010642:	9704      	str	r7, [sp, #16]
 8010644:	e761      	b.n	801050a <_dtoa_r+0x3e2>
 8010646:	4b27      	ldr	r3, [pc, #156]	@ (80106e4 <_dtoa_r+0x5bc>)
 8010648:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801064a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801064e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010652:	4454      	add	r4, sl
 8010654:	2900      	cmp	r1, #0
 8010656:	d053      	beq.n	8010700 <_dtoa_r+0x5d8>
 8010658:	4928      	ldr	r1, [pc, #160]	@ (80106fc <_dtoa_r+0x5d4>)
 801065a:	2000      	movs	r0, #0
 801065c:	f7f0 f906 	bl	800086c <__aeabi_ddiv>
 8010660:	4633      	mov	r3, r6
 8010662:	462a      	mov	r2, r5
 8010664:	f7ef fe20 	bl	80002a8 <__aeabi_dsub>
 8010668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801066c:	4656      	mov	r6, sl
 801066e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010672:	f7f0 fa81 	bl	8000b78 <__aeabi_d2iz>
 8010676:	4605      	mov	r5, r0
 8010678:	f7ef ff64 	bl	8000544 <__aeabi_i2d>
 801067c:	4602      	mov	r2, r0
 801067e:	460b      	mov	r3, r1
 8010680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010684:	f7ef fe10 	bl	80002a8 <__aeabi_dsub>
 8010688:	3530      	adds	r5, #48	@ 0x30
 801068a:	4602      	mov	r2, r0
 801068c:	460b      	mov	r3, r1
 801068e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010692:	f806 5b01 	strb.w	r5, [r6], #1
 8010696:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801069a:	f7f0 fa2f 	bl	8000afc <__aeabi_dcmplt>
 801069e:	2800      	cmp	r0, #0
 80106a0:	d171      	bne.n	8010786 <_dtoa_r+0x65e>
 80106a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106a6:	4911      	ldr	r1, [pc, #68]	@ (80106ec <_dtoa_r+0x5c4>)
 80106a8:	2000      	movs	r0, #0
 80106aa:	f7ef fdfd 	bl	80002a8 <__aeabi_dsub>
 80106ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80106b2:	f7f0 fa23 	bl	8000afc <__aeabi_dcmplt>
 80106b6:	2800      	cmp	r0, #0
 80106b8:	f040 8095 	bne.w	80107e6 <_dtoa_r+0x6be>
 80106bc:	42a6      	cmp	r6, r4
 80106be:	f43f af50 	beq.w	8010562 <_dtoa_r+0x43a>
 80106c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80106c6:	4b0a      	ldr	r3, [pc, #40]	@ (80106f0 <_dtoa_r+0x5c8>)
 80106c8:	2200      	movs	r2, #0
 80106ca:	f7ef ffa5 	bl	8000618 <__aeabi_dmul>
 80106ce:	4b08      	ldr	r3, [pc, #32]	@ (80106f0 <_dtoa_r+0x5c8>)
 80106d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80106d4:	2200      	movs	r2, #0
 80106d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106da:	f7ef ff9d 	bl	8000618 <__aeabi_dmul>
 80106de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106e2:	e7c4      	b.n	801066e <_dtoa_r+0x546>
 80106e4:	08016628 	.word	0x08016628
 80106e8:	08016600 	.word	0x08016600
 80106ec:	3ff00000 	.word	0x3ff00000
 80106f0:	40240000 	.word	0x40240000
 80106f4:	401c0000 	.word	0x401c0000
 80106f8:	40140000 	.word	0x40140000
 80106fc:	3fe00000 	.word	0x3fe00000
 8010700:	4631      	mov	r1, r6
 8010702:	4628      	mov	r0, r5
 8010704:	f7ef ff88 	bl	8000618 <__aeabi_dmul>
 8010708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801070c:	9415      	str	r4, [sp, #84]	@ 0x54
 801070e:	4656      	mov	r6, sl
 8010710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010714:	f7f0 fa30 	bl	8000b78 <__aeabi_d2iz>
 8010718:	4605      	mov	r5, r0
 801071a:	f7ef ff13 	bl	8000544 <__aeabi_i2d>
 801071e:	4602      	mov	r2, r0
 8010720:	460b      	mov	r3, r1
 8010722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010726:	f7ef fdbf 	bl	80002a8 <__aeabi_dsub>
 801072a:	3530      	adds	r5, #48	@ 0x30
 801072c:	f806 5b01 	strb.w	r5, [r6], #1
 8010730:	4602      	mov	r2, r0
 8010732:	460b      	mov	r3, r1
 8010734:	42a6      	cmp	r6, r4
 8010736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801073a:	f04f 0200 	mov.w	r2, #0
 801073e:	d124      	bne.n	801078a <_dtoa_r+0x662>
 8010740:	4bac      	ldr	r3, [pc, #688]	@ (80109f4 <_dtoa_r+0x8cc>)
 8010742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010746:	f7ef fdb1 	bl	80002ac <__adddf3>
 801074a:	4602      	mov	r2, r0
 801074c:	460b      	mov	r3, r1
 801074e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010752:	f7f0 f9f1 	bl	8000b38 <__aeabi_dcmpgt>
 8010756:	2800      	cmp	r0, #0
 8010758:	d145      	bne.n	80107e6 <_dtoa_r+0x6be>
 801075a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801075e:	49a5      	ldr	r1, [pc, #660]	@ (80109f4 <_dtoa_r+0x8cc>)
 8010760:	2000      	movs	r0, #0
 8010762:	f7ef fda1 	bl	80002a8 <__aeabi_dsub>
 8010766:	4602      	mov	r2, r0
 8010768:	460b      	mov	r3, r1
 801076a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801076e:	f7f0 f9c5 	bl	8000afc <__aeabi_dcmplt>
 8010772:	2800      	cmp	r0, #0
 8010774:	f43f aef5 	beq.w	8010562 <_dtoa_r+0x43a>
 8010778:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801077a:	1e73      	subs	r3, r6, #1
 801077c:	9315      	str	r3, [sp, #84]	@ 0x54
 801077e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010782:	2b30      	cmp	r3, #48	@ 0x30
 8010784:	d0f8      	beq.n	8010778 <_dtoa_r+0x650>
 8010786:	9f04      	ldr	r7, [sp, #16]
 8010788:	e73e      	b.n	8010608 <_dtoa_r+0x4e0>
 801078a:	4b9b      	ldr	r3, [pc, #620]	@ (80109f8 <_dtoa_r+0x8d0>)
 801078c:	f7ef ff44 	bl	8000618 <__aeabi_dmul>
 8010790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010794:	e7bc      	b.n	8010710 <_dtoa_r+0x5e8>
 8010796:	d10c      	bne.n	80107b2 <_dtoa_r+0x68a>
 8010798:	4b98      	ldr	r3, [pc, #608]	@ (80109fc <_dtoa_r+0x8d4>)
 801079a:	2200      	movs	r2, #0
 801079c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107a0:	f7ef ff3a 	bl	8000618 <__aeabi_dmul>
 80107a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107a8:	f7f0 f9bc 	bl	8000b24 <__aeabi_dcmpge>
 80107ac:	2800      	cmp	r0, #0
 80107ae:	f000 8157 	beq.w	8010a60 <_dtoa_r+0x938>
 80107b2:	2400      	movs	r4, #0
 80107b4:	4625      	mov	r5, r4
 80107b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107b8:	43db      	mvns	r3, r3
 80107ba:	9304      	str	r3, [sp, #16]
 80107bc:	4656      	mov	r6, sl
 80107be:	2700      	movs	r7, #0
 80107c0:	4621      	mov	r1, r4
 80107c2:	4658      	mov	r0, fp
 80107c4:	f000 fbb4 	bl	8010f30 <_Bfree>
 80107c8:	2d00      	cmp	r5, #0
 80107ca:	d0dc      	beq.n	8010786 <_dtoa_r+0x65e>
 80107cc:	b12f      	cbz	r7, 80107da <_dtoa_r+0x6b2>
 80107ce:	42af      	cmp	r7, r5
 80107d0:	d003      	beq.n	80107da <_dtoa_r+0x6b2>
 80107d2:	4639      	mov	r1, r7
 80107d4:	4658      	mov	r0, fp
 80107d6:	f000 fbab 	bl	8010f30 <_Bfree>
 80107da:	4629      	mov	r1, r5
 80107dc:	4658      	mov	r0, fp
 80107de:	f000 fba7 	bl	8010f30 <_Bfree>
 80107e2:	e7d0      	b.n	8010786 <_dtoa_r+0x65e>
 80107e4:	9704      	str	r7, [sp, #16]
 80107e6:	4633      	mov	r3, r6
 80107e8:	461e      	mov	r6, r3
 80107ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107ee:	2a39      	cmp	r2, #57	@ 0x39
 80107f0:	d107      	bne.n	8010802 <_dtoa_r+0x6da>
 80107f2:	459a      	cmp	sl, r3
 80107f4:	d1f8      	bne.n	80107e8 <_dtoa_r+0x6c0>
 80107f6:	9a04      	ldr	r2, [sp, #16]
 80107f8:	3201      	adds	r2, #1
 80107fa:	9204      	str	r2, [sp, #16]
 80107fc:	2230      	movs	r2, #48	@ 0x30
 80107fe:	f88a 2000 	strb.w	r2, [sl]
 8010802:	781a      	ldrb	r2, [r3, #0]
 8010804:	3201      	adds	r2, #1
 8010806:	701a      	strb	r2, [r3, #0]
 8010808:	e7bd      	b.n	8010786 <_dtoa_r+0x65e>
 801080a:	4b7b      	ldr	r3, [pc, #492]	@ (80109f8 <_dtoa_r+0x8d0>)
 801080c:	2200      	movs	r2, #0
 801080e:	f7ef ff03 	bl	8000618 <__aeabi_dmul>
 8010812:	2200      	movs	r2, #0
 8010814:	2300      	movs	r3, #0
 8010816:	4604      	mov	r4, r0
 8010818:	460d      	mov	r5, r1
 801081a:	f7f0 f965 	bl	8000ae8 <__aeabi_dcmpeq>
 801081e:	2800      	cmp	r0, #0
 8010820:	f43f aebb 	beq.w	801059a <_dtoa_r+0x472>
 8010824:	e6f0      	b.n	8010608 <_dtoa_r+0x4e0>
 8010826:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010828:	2a00      	cmp	r2, #0
 801082a:	f000 80db 	beq.w	80109e4 <_dtoa_r+0x8bc>
 801082e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010830:	2a01      	cmp	r2, #1
 8010832:	f300 80bf 	bgt.w	80109b4 <_dtoa_r+0x88c>
 8010836:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010838:	2a00      	cmp	r2, #0
 801083a:	f000 80b7 	beq.w	80109ac <_dtoa_r+0x884>
 801083e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010842:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010844:	4646      	mov	r6, r8
 8010846:	9a08      	ldr	r2, [sp, #32]
 8010848:	2101      	movs	r1, #1
 801084a:	441a      	add	r2, r3
 801084c:	4658      	mov	r0, fp
 801084e:	4498      	add	r8, r3
 8010850:	9208      	str	r2, [sp, #32]
 8010852:	f000 fc6b 	bl	801112c <__i2b>
 8010856:	4605      	mov	r5, r0
 8010858:	b15e      	cbz	r6, 8010872 <_dtoa_r+0x74a>
 801085a:	9b08      	ldr	r3, [sp, #32]
 801085c:	2b00      	cmp	r3, #0
 801085e:	dd08      	ble.n	8010872 <_dtoa_r+0x74a>
 8010860:	42b3      	cmp	r3, r6
 8010862:	9a08      	ldr	r2, [sp, #32]
 8010864:	bfa8      	it	ge
 8010866:	4633      	movge	r3, r6
 8010868:	eba8 0803 	sub.w	r8, r8, r3
 801086c:	1af6      	subs	r6, r6, r3
 801086e:	1ad3      	subs	r3, r2, r3
 8010870:	9308      	str	r3, [sp, #32]
 8010872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010874:	b1f3      	cbz	r3, 80108b4 <_dtoa_r+0x78c>
 8010876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010878:	2b00      	cmp	r3, #0
 801087a:	f000 80b7 	beq.w	80109ec <_dtoa_r+0x8c4>
 801087e:	b18c      	cbz	r4, 80108a4 <_dtoa_r+0x77c>
 8010880:	4629      	mov	r1, r5
 8010882:	4622      	mov	r2, r4
 8010884:	4658      	mov	r0, fp
 8010886:	f000 fd11 	bl	80112ac <__pow5mult>
 801088a:	464a      	mov	r2, r9
 801088c:	4601      	mov	r1, r0
 801088e:	4605      	mov	r5, r0
 8010890:	4658      	mov	r0, fp
 8010892:	f000 fc61 	bl	8011158 <__multiply>
 8010896:	4649      	mov	r1, r9
 8010898:	9004      	str	r0, [sp, #16]
 801089a:	4658      	mov	r0, fp
 801089c:	f000 fb48 	bl	8010f30 <_Bfree>
 80108a0:	9b04      	ldr	r3, [sp, #16]
 80108a2:	4699      	mov	r9, r3
 80108a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108a6:	1b1a      	subs	r2, r3, r4
 80108a8:	d004      	beq.n	80108b4 <_dtoa_r+0x78c>
 80108aa:	4649      	mov	r1, r9
 80108ac:	4658      	mov	r0, fp
 80108ae:	f000 fcfd 	bl	80112ac <__pow5mult>
 80108b2:	4681      	mov	r9, r0
 80108b4:	2101      	movs	r1, #1
 80108b6:	4658      	mov	r0, fp
 80108b8:	f000 fc38 	bl	801112c <__i2b>
 80108bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108be:	4604      	mov	r4, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	f000 81cf 	beq.w	8010c64 <_dtoa_r+0xb3c>
 80108c6:	461a      	mov	r2, r3
 80108c8:	4601      	mov	r1, r0
 80108ca:	4658      	mov	r0, fp
 80108cc:	f000 fcee 	bl	80112ac <__pow5mult>
 80108d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	4604      	mov	r4, r0
 80108d6:	f300 8095 	bgt.w	8010a04 <_dtoa_r+0x8dc>
 80108da:	9b02      	ldr	r3, [sp, #8]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	f040 8087 	bne.w	80109f0 <_dtoa_r+0x8c8>
 80108e2:	9b03      	ldr	r3, [sp, #12]
 80108e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	f040 8089 	bne.w	8010a00 <_dtoa_r+0x8d8>
 80108ee:	9b03      	ldr	r3, [sp, #12]
 80108f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80108f4:	0d1b      	lsrs	r3, r3, #20
 80108f6:	051b      	lsls	r3, r3, #20
 80108f8:	b12b      	cbz	r3, 8010906 <_dtoa_r+0x7de>
 80108fa:	9b08      	ldr	r3, [sp, #32]
 80108fc:	3301      	adds	r3, #1
 80108fe:	9308      	str	r3, [sp, #32]
 8010900:	f108 0801 	add.w	r8, r8, #1
 8010904:	2301      	movs	r3, #1
 8010906:	930a      	str	r3, [sp, #40]	@ 0x28
 8010908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801090a:	2b00      	cmp	r3, #0
 801090c:	f000 81b0 	beq.w	8010c70 <_dtoa_r+0xb48>
 8010910:	6923      	ldr	r3, [r4, #16]
 8010912:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010916:	6918      	ldr	r0, [r3, #16]
 8010918:	f000 fbbc 	bl	8011094 <__hi0bits>
 801091c:	f1c0 0020 	rsb	r0, r0, #32
 8010920:	9b08      	ldr	r3, [sp, #32]
 8010922:	4418      	add	r0, r3
 8010924:	f010 001f 	ands.w	r0, r0, #31
 8010928:	d077      	beq.n	8010a1a <_dtoa_r+0x8f2>
 801092a:	f1c0 0320 	rsb	r3, r0, #32
 801092e:	2b04      	cmp	r3, #4
 8010930:	dd6b      	ble.n	8010a0a <_dtoa_r+0x8e2>
 8010932:	9b08      	ldr	r3, [sp, #32]
 8010934:	f1c0 001c 	rsb	r0, r0, #28
 8010938:	4403      	add	r3, r0
 801093a:	4480      	add	r8, r0
 801093c:	4406      	add	r6, r0
 801093e:	9308      	str	r3, [sp, #32]
 8010940:	f1b8 0f00 	cmp.w	r8, #0
 8010944:	dd05      	ble.n	8010952 <_dtoa_r+0x82a>
 8010946:	4649      	mov	r1, r9
 8010948:	4642      	mov	r2, r8
 801094a:	4658      	mov	r0, fp
 801094c:	f000 fd08 	bl	8011360 <__lshift>
 8010950:	4681      	mov	r9, r0
 8010952:	9b08      	ldr	r3, [sp, #32]
 8010954:	2b00      	cmp	r3, #0
 8010956:	dd05      	ble.n	8010964 <_dtoa_r+0x83c>
 8010958:	4621      	mov	r1, r4
 801095a:	461a      	mov	r2, r3
 801095c:	4658      	mov	r0, fp
 801095e:	f000 fcff 	bl	8011360 <__lshift>
 8010962:	4604      	mov	r4, r0
 8010964:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010966:	2b00      	cmp	r3, #0
 8010968:	d059      	beq.n	8010a1e <_dtoa_r+0x8f6>
 801096a:	4621      	mov	r1, r4
 801096c:	4648      	mov	r0, r9
 801096e:	f000 fd63 	bl	8011438 <__mcmp>
 8010972:	2800      	cmp	r0, #0
 8010974:	da53      	bge.n	8010a1e <_dtoa_r+0x8f6>
 8010976:	1e7b      	subs	r3, r7, #1
 8010978:	9304      	str	r3, [sp, #16]
 801097a:	4649      	mov	r1, r9
 801097c:	2300      	movs	r3, #0
 801097e:	220a      	movs	r2, #10
 8010980:	4658      	mov	r0, fp
 8010982:	f000 faf7 	bl	8010f74 <__multadd>
 8010986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010988:	4681      	mov	r9, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	f000 8172 	beq.w	8010c74 <_dtoa_r+0xb4c>
 8010990:	2300      	movs	r3, #0
 8010992:	4629      	mov	r1, r5
 8010994:	220a      	movs	r2, #10
 8010996:	4658      	mov	r0, fp
 8010998:	f000 faec 	bl	8010f74 <__multadd>
 801099c:	9b00      	ldr	r3, [sp, #0]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	4605      	mov	r5, r0
 80109a2:	dc67      	bgt.n	8010a74 <_dtoa_r+0x94c>
 80109a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109a6:	2b02      	cmp	r3, #2
 80109a8:	dc41      	bgt.n	8010a2e <_dtoa_r+0x906>
 80109aa:	e063      	b.n	8010a74 <_dtoa_r+0x94c>
 80109ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80109ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80109b2:	e746      	b.n	8010842 <_dtoa_r+0x71a>
 80109b4:	9b07      	ldr	r3, [sp, #28]
 80109b6:	1e5c      	subs	r4, r3, #1
 80109b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109ba:	42a3      	cmp	r3, r4
 80109bc:	bfbf      	itttt	lt
 80109be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80109c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80109c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80109c4:	1ae3      	sublt	r3, r4, r3
 80109c6:	bfb4      	ite	lt
 80109c8:	18d2      	addlt	r2, r2, r3
 80109ca:	1b1c      	subge	r4, r3, r4
 80109cc:	9b07      	ldr	r3, [sp, #28]
 80109ce:	bfbc      	itt	lt
 80109d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80109d2:	2400      	movlt	r4, #0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	bfb5      	itete	lt
 80109d8:	eba8 0603 	sublt.w	r6, r8, r3
 80109dc:	9b07      	ldrge	r3, [sp, #28]
 80109de:	2300      	movlt	r3, #0
 80109e0:	4646      	movge	r6, r8
 80109e2:	e730      	b.n	8010846 <_dtoa_r+0x71e>
 80109e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80109e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80109e8:	4646      	mov	r6, r8
 80109ea:	e735      	b.n	8010858 <_dtoa_r+0x730>
 80109ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80109ee:	e75c      	b.n	80108aa <_dtoa_r+0x782>
 80109f0:	2300      	movs	r3, #0
 80109f2:	e788      	b.n	8010906 <_dtoa_r+0x7de>
 80109f4:	3fe00000 	.word	0x3fe00000
 80109f8:	40240000 	.word	0x40240000
 80109fc:	40140000 	.word	0x40140000
 8010a00:	9b02      	ldr	r3, [sp, #8]
 8010a02:	e780      	b.n	8010906 <_dtoa_r+0x7de>
 8010a04:	2300      	movs	r3, #0
 8010a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a08:	e782      	b.n	8010910 <_dtoa_r+0x7e8>
 8010a0a:	d099      	beq.n	8010940 <_dtoa_r+0x818>
 8010a0c:	9a08      	ldr	r2, [sp, #32]
 8010a0e:	331c      	adds	r3, #28
 8010a10:	441a      	add	r2, r3
 8010a12:	4498      	add	r8, r3
 8010a14:	441e      	add	r6, r3
 8010a16:	9208      	str	r2, [sp, #32]
 8010a18:	e792      	b.n	8010940 <_dtoa_r+0x818>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	e7f6      	b.n	8010a0c <_dtoa_r+0x8e4>
 8010a1e:	9b07      	ldr	r3, [sp, #28]
 8010a20:	9704      	str	r7, [sp, #16]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	dc20      	bgt.n	8010a68 <_dtoa_r+0x940>
 8010a26:	9300      	str	r3, [sp, #0]
 8010a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a2a:	2b02      	cmp	r3, #2
 8010a2c:	dd1e      	ble.n	8010a6c <_dtoa_r+0x944>
 8010a2e:	9b00      	ldr	r3, [sp, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	f47f aec0 	bne.w	80107b6 <_dtoa_r+0x68e>
 8010a36:	4621      	mov	r1, r4
 8010a38:	2205      	movs	r2, #5
 8010a3a:	4658      	mov	r0, fp
 8010a3c:	f000 fa9a 	bl	8010f74 <__multadd>
 8010a40:	4601      	mov	r1, r0
 8010a42:	4604      	mov	r4, r0
 8010a44:	4648      	mov	r0, r9
 8010a46:	f000 fcf7 	bl	8011438 <__mcmp>
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	f77f aeb3 	ble.w	80107b6 <_dtoa_r+0x68e>
 8010a50:	4656      	mov	r6, sl
 8010a52:	2331      	movs	r3, #49	@ 0x31
 8010a54:	f806 3b01 	strb.w	r3, [r6], #1
 8010a58:	9b04      	ldr	r3, [sp, #16]
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	9304      	str	r3, [sp, #16]
 8010a5e:	e6ae      	b.n	80107be <_dtoa_r+0x696>
 8010a60:	9c07      	ldr	r4, [sp, #28]
 8010a62:	9704      	str	r7, [sp, #16]
 8010a64:	4625      	mov	r5, r4
 8010a66:	e7f3      	b.n	8010a50 <_dtoa_r+0x928>
 8010a68:	9b07      	ldr	r3, [sp, #28]
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	f000 8104 	beq.w	8010c7c <_dtoa_r+0xb54>
 8010a74:	2e00      	cmp	r6, #0
 8010a76:	dd05      	ble.n	8010a84 <_dtoa_r+0x95c>
 8010a78:	4629      	mov	r1, r5
 8010a7a:	4632      	mov	r2, r6
 8010a7c:	4658      	mov	r0, fp
 8010a7e:	f000 fc6f 	bl	8011360 <__lshift>
 8010a82:	4605      	mov	r5, r0
 8010a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d05a      	beq.n	8010b40 <_dtoa_r+0xa18>
 8010a8a:	6869      	ldr	r1, [r5, #4]
 8010a8c:	4658      	mov	r0, fp
 8010a8e:	f000 fa0f 	bl	8010eb0 <_Balloc>
 8010a92:	4606      	mov	r6, r0
 8010a94:	b928      	cbnz	r0, 8010aa2 <_dtoa_r+0x97a>
 8010a96:	4b84      	ldr	r3, [pc, #528]	@ (8010ca8 <_dtoa_r+0xb80>)
 8010a98:	4602      	mov	r2, r0
 8010a9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010a9e:	f7ff bb5a 	b.w	8010156 <_dtoa_r+0x2e>
 8010aa2:	692a      	ldr	r2, [r5, #16]
 8010aa4:	3202      	adds	r2, #2
 8010aa6:	0092      	lsls	r2, r2, #2
 8010aa8:	f105 010c 	add.w	r1, r5, #12
 8010aac:	300c      	adds	r0, #12
 8010aae:	f7ff fa9e 	bl	800ffee <memcpy>
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	4631      	mov	r1, r6
 8010ab6:	4658      	mov	r0, fp
 8010ab8:	f000 fc52 	bl	8011360 <__lshift>
 8010abc:	f10a 0301 	add.w	r3, sl, #1
 8010ac0:	9307      	str	r3, [sp, #28]
 8010ac2:	9b00      	ldr	r3, [sp, #0]
 8010ac4:	4453      	add	r3, sl
 8010ac6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ac8:	9b02      	ldr	r3, [sp, #8]
 8010aca:	f003 0301 	and.w	r3, r3, #1
 8010ace:	462f      	mov	r7, r5
 8010ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ad2:	4605      	mov	r5, r0
 8010ad4:	9b07      	ldr	r3, [sp, #28]
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	3b01      	subs	r3, #1
 8010ada:	4648      	mov	r0, r9
 8010adc:	9300      	str	r3, [sp, #0]
 8010ade:	f7ff fa9b 	bl	8010018 <quorem>
 8010ae2:	4639      	mov	r1, r7
 8010ae4:	9002      	str	r0, [sp, #8]
 8010ae6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010aea:	4648      	mov	r0, r9
 8010aec:	f000 fca4 	bl	8011438 <__mcmp>
 8010af0:	462a      	mov	r2, r5
 8010af2:	9008      	str	r0, [sp, #32]
 8010af4:	4621      	mov	r1, r4
 8010af6:	4658      	mov	r0, fp
 8010af8:	f000 fcba 	bl	8011470 <__mdiff>
 8010afc:	68c2      	ldr	r2, [r0, #12]
 8010afe:	4606      	mov	r6, r0
 8010b00:	bb02      	cbnz	r2, 8010b44 <_dtoa_r+0xa1c>
 8010b02:	4601      	mov	r1, r0
 8010b04:	4648      	mov	r0, r9
 8010b06:	f000 fc97 	bl	8011438 <__mcmp>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	4631      	mov	r1, r6
 8010b0e:	4658      	mov	r0, fp
 8010b10:	920e      	str	r2, [sp, #56]	@ 0x38
 8010b12:	f000 fa0d 	bl	8010f30 <_Bfree>
 8010b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b1a:	9e07      	ldr	r6, [sp, #28]
 8010b1c:	ea43 0102 	orr.w	r1, r3, r2
 8010b20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b22:	4319      	orrs	r1, r3
 8010b24:	d110      	bne.n	8010b48 <_dtoa_r+0xa20>
 8010b26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b2a:	d029      	beq.n	8010b80 <_dtoa_r+0xa58>
 8010b2c:	9b08      	ldr	r3, [sp, #32]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	dd02      	ble.n	8010b38 <_dtoa_r+0xa10>
 8010b32:	9b02      	ldr	r3, [sp, #8]
 8010b34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010b38:	9b00      	ldr	r3, [sp, #0]
 8010b3a:	f883 8000 	strb.w	r8, [r3]
 8010b3e:	e63f      	b.n	80107c0 <_dtoa_r+0x698>
 8010b40:	4628      	mov	r0, r5
 8010b42:	e7bb      	b.n	8010abc <_dtoa_r+0x994>
 8010b44:	2201      	movs	r2, #1
 8010b46:	e7e1      	b.n	8010b0c <_dtoa_r+0x9e4>
 8010b48:	9b08      	ldr	r3, [sp, #32]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	db04      	blt.n	8010b58 <_dtoa_r+0xa30>
 8010b4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010b50:	430b      	orrs	r3, r1
 8010b52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010b54:	430b      	orrs	r3, r1
 8010b56:	d120      	bne.n	8010b9a <_dtoa_r+0xa72>
 8010b58:	2a00      	cmp	r2, #0
 8010b5a:	dded      	ble.n	8010b38 <_dtoa_r+0xa10>
 8010b5c:	4649      	mov	r1, r9
 8010b5e:	2201      	movs	r2, #1
 8010b60:	4658      	mov	r0, fp
 8010b62:	f000 fbfd 	bl	8011360 <__lshift>
 8010b66:	4621      	mov	r1, r4
 8010b68:	4681      	mov	r9, r0
 8010b6a:	f000 fc65 	bl	8011438 <__mcmp>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	dc03      	bgt.n	8010b7a <_dtoa_r+0xa52>
 8010b72:	d1e1      	bne.n	8010b38 <_dtoa_r+0xa10>
 8010b74:	f018 0f01 	tst.w	r8, #1
 8010b78:	d0de      	beq.n	8010b38 <_dtoa_r+0xa10>
 8010b7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b7e:	d1d8      	bne.n	8010b32 <_dtoa_r+0xa0a>
 8010b80:	9a00      	ldr	r2, [sp, #0]
 8010b82:	2339      	movs	r3, #57	@ 0x39
 8010b84:	7013      	strb	r3, [r2, #0]
 8010b86:	4633      	mov	r3, r6
 8010b88:	461e      	mov	r6, r3
 8010b8a:	3b01      	subs	r3, #1
 8010b8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010b90:	2a39      	cmp	r2, #57	@ 0x39
 8010b92:	d052      	beq.n	8010c3a <_dtoa_r+0xb12>
 8010b94:	3201      	adds	r2, #1
 8010b96:	701a      	strb	r2, [r3, #0]
 8010b98:	e612      	b.n	80107c0 <_dtoa_r+0x698>
 8010b9a:	2a00      	cmp	r2, #0
 8010b9c:	dd07      	ble.n	8010bae <_dtoa_r+0xa86>
 8010b9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010ba2:	d0ed      	beq.n	8010b80 <_dtoa_r+0xa58>
 8010ba4:	9a00      	ldr	r2, [sp, #0]
 8010ba6:	f108 0301 	add.w	r3, r8, #1
 8010baa:	7013      	strb	r3, [r2, #0]
 8010bac:	e608      	b.n	80107c0 <_dtoa_r+0x698>
 8010bae:	9b07      	ldr	r3, [sp, #28]
 8010bb0:	9a07      	ldr	r2, [sp, #28]
 8010bb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d028      	beq.n	8010c0e <_dtoa_r+0xae6>
 8010bbc:	4649      	mov	r1, r9
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	220a      	movs	r2, #10
 8010bc2:	4658      	mov	r0, fp
 8010bc4:	f000 f9d6 	bl	8010f74 <__multadd>
 8010bc8:	42af      	cmp	r7, r5
 8010bca:	4681      	mov	r9, r0
 8010bcc:	f04f 0300 	mov.w	r3, #0
 8010bd0:	f04f 020a 	mov.w	r2, #10
 8010bd4:	4639      	mov	r1, r7
 8010bd6:	4658      	mov	r0, fp
 8010bd8:	d107      	bne.n	8010bea <_dtoa_r+0xac2>
 8010bda:	f000 f9cb 	bl	8010f74 <__multadd>
 8010bde:	4607      	mov	r7, r0
 8010be0:	4605      	mov	r5, r0
 8010be2:	9b07      	ldr	r3, [sp, #28]
 8010be4:	3301      	adds	r3, #1
 8010be6:	9307      	str	r3, [sp, #28]
 8010be8:	e774      	b.n	8010ad4 <_dtoa_r+0x9ac>
 8010bea:	f000 f9c3 	bl	8010f74 <__multadd>
 8010bee:	4629      	mov	r1, r5
 8010bf0:	4607      	mov	r7, r0
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	220a      	movs	r2, #10
 8010bf6:	4658      	mov	r0, fp
 8010bf8:	f000 f9bc 	bl	8010f74 <__multadd>
 8010bfc:	4605      	mov	r5, r0
 8010bfe:	e7f0      	b.n	8010be2 <_dtoa_r+0xaba>
 8010c00:	9b00      	ldr	r3, [sp, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	bfcc      	ite	gt
 8010c06:	461e      	movgt	r6, r3
 8010c08:	2601      	movle	r6, #1
 8010c0a:	4456      	add	r6, sl
 8010c0c:	2700      	movs	r7, #0
 8010c0e:	4649      	mov	r1, r9
 8010c10:	2201      	movs	r2, #1
 8010c12:	4658      	mov	r0, fp
 8010c14:	f000 fba4 	bl	8011360 <__lshift>
 8010c18:	4621      	mov	r1, r4
 8010c1a:	4681      	mov	r9, r0
 8010c1c:	f000 fc0c 	bl	8011438 <__mcmp>
 8010c20:	2800      	cmp	r0, #0
 8010c22:	dcb0      	bgt.n	8010b86 <_dtoa_r+0xa5e>
 8010c24:	d102      	bne.n	8010c2c <_dtoa_r+0xb04>
 8010c26:	f018 0f01 	tst.w	r8, #1
 8010c2a:	d1ac      	bne.n	8010b86 <_dtoa_r+0xa5e>
 8010c2c:	4633      	mov	r3, r6
 8010c2e:	461e      	mov	r6, r3
 8010c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c34:	2a30      	cmp	r2, #48	@ 0x30
 8010c36:	d0fa      	beq.n	8010c2e <_dtoa_r+0xb06>
 8010c38:	e5c2      	b.n	80107c0 <_dtoa_r+0x698>
 8010c3a:	459a      	cmp	sl, r3
 8010c3c:	d1a4      	bne.n	8010b88 <_dtoa_r+0xa60>
 8010c3e:	9b04      	ldr	r3, [sp, #16]
 8010c40:	3301      	adds	r3, #1
 8010c42:	9304      	str	r3, [sp, #16]
 8010c44:	2331      	movs	r3, #49	@ 0x31
 8010c46:	f88a 3000 	strb.w	r3, [sl]
 8010c4a:	e5b9      	b.n	80107c0 <_dtoa_r+0x698>
 8010c4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010c4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010cac <_dtoa_r+0xb84>
 8010c52:	b11b      	cbz	r3, 8010c5c <_dtoa_r+0xb34>
 8010c54:	f10a 0308 	add.w	r3, sl, #8
 8010c58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010c5a:	6013      	str	r3, [r2, #0]
 8010c5c:	4650      	mov	r0, sl
 8010c5e:	b019      	add	sp, #100	@ 0x64
 8010c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	f77f ae37 	ble.w	80108da <_dtoa_r+0x7b2>
 8010c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c70:	2001      	movs	r0, #1
 8010c72:	e655      	b.n	8010920 <_dtoa_r+0x7f8>
 8010c74:	9b00      	ldr	r3, [sp, #0]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	f77f aed6 	ble.w	8010a28 <_dtoa_r+0x900>
 8010c7c:	4656      	mov	r6, sl
 8010c7e:	4621      	mov	r1, r4
 8010c80:	4648      	mov	r0, r9
 8010c82:	f7ff f9c9 	bl	8010018 <quorem>
 8010c86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010c8a:	f806 8b01 	strb.w	r8, [r6], #1
 8010c8e:	9b00      	ldr	r3, [sp, #0]
 8010c90:	eba6 020a 	sub.w	r2, r6, sl
 8010c94:	4293      	cmp	r3, r2
 8010c96:	ddb3      	ble.n	8010c00 <_dtoa_r+0xad8>
 8010c98:	4649      	mov	r1, r9
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	220a      	movs	r2, #10
 8010c9e:	4658      	mov	r0, fp
 8010ca0:	f000 f968 	bl	8010f74 <__multadd>
 8010ca4:	4681      	mov	r9, r0
 8010ca6:	e7ea      	b.n	8010c7e <_dtoa_r+0xb56>
 8010ca8:	0801658a 	.word	0x0801658a
 8010cac:	0801650e 	.word	0x0801650e

08010cb0 <_free_r>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	4605      	mov	r5, r0
 8010cb4:	2900      	cmp	r1, #0
 8010cb6:	d041      	beq.n	8010d3c <_free_r+0x8c>
 8010cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cbc:	1f0c      	subs	r4, r1, #4
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	bfb8      	it	lt
 8010cc2:	18e4      	addlt	r4, r4, r3
 8010cc4:	f000 f8e8 	bl	8010e98 <__malloc_lock>
 8010cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8010d40 <_free_r+0x90>)
 8010cca:	6813      	ldr	r3, [r2, #0]
 8010ccc:	b933      	cbnz	r3, 8010cdc <_free_r+0x2c>
 8010cce:	6063      	str	r3, [r4, #4]
 8010cd0:	6014      	str	r4, [r2, #0]
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cd8:	f000 b8e4 	b.w	8010ea4 <__malloc_unlock>
 8010cdc:	42a3      	cmp	r3, r4
 8010cde:	d908      	bls.n	8010cf2 <_free_r+0x42>
 8010ce0:	6820      	ldr	r0, [r4, #0]
 8010ce2:	1821      	adds	r1, r4, r0
 8010ce4:	428b      	cmp	r3, r1
 8010ce6:	bf01      	itttt	eq
 8010ce8:	6819      	ldreq	r1, [r3, #0]
 8010cea:	685b      	ldreq	r3, [r3, #4]
 8010cec:	1809      	addeq	r1, r1, r0
 8010cee:	6021      	streq	r1, [r4, #0]
 8010cf0:	e7ed      	b.n	8010cce <_free_r+0x1e>
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	b10b      	cbz	r3, 8010cfc <_free_r+0x4c>
 8010cf8:	42a3      	cmp	r3, r4
 8010cfa:	d9fa      	bls.n	8010cf2 <_free_r+0x42>
 8010cfc:	6811      	ldr	r1, [r2, #0]
 8010cfe:	1850      	adds	r0, r2, r1
 8010d00:	42a0      	cmp	r0, r4
 8010d02:	d10b      	bne.n	8010d1c <_free_r+0x6c>
 8010d04:	6820      	ldr	r0, [r4, #0]
 8010d06:	4401      	add	r1, r0
 8010d08:	1850      	adds	r0, r2, r1
 8010d0a:	4283      	cmp	r3, r0
 8010d0c:	6011      	str	r1, [r2, #0]
 8010d0e:	d1e0      	bne.n	8010cd2 <_free_r+0x22>
 8010d10:	6818      	ldr	r0, [r3, #0]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	6053      	str	r3, [r2, #4]
 8010d16:	4408      	add	r0, r1
 8010d18:	6010      	str	r0, [r2, #0]
 8010d1a:	e7da      	b.n	8010cd2 <_free_r+0x22>
 8010d1c:	d902      	bls.n	8010d24 <_free_r+0x74>
 8010d1e:	230c      	movs	r3, #12
 8010d20:	602b      	str	r3, [r5, #0]
 8010d22:	e7d6      	b.n	8010cd2 <_free_r+0x22>
 8010d24:	6820      	ldr	r0, [r4, #0]
 8010d26:	1821      	adds	r1, r4, r0
 8010d28:	428b      	cmp	r3, r1
 8010d2a:	bf04      	itt	eq
 8010d2c:	6819      	ldreq	r1, [r3, #0]
 8010d2e:	685b      	ldreq	r3, [r3, #4]
 8010d30:	6063      	str	r3, [r4, #4]
 8010d32:	bf04      	itt	eq
 8010d34:	1809      	addeq	r1, r1, r0
 8010d36:	6021      	streq	r1, [r4, #0]
 8010d38:	6054      	str	r4, [r2, #4]
 8010d3a:	e7ca      	b.n	8010cd2 <_free_r+0x22>
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	bf00      	nop
 8010d40:	200083d8 	.word	0x200083d8

08010d44 <malloc>:
 8010d44:	4b02      	ldr	r3, [pc, #8]	@ (8010d50 <malloc+0xc>)
 8010d46:	4601      	mov	r1, r0
 8010d48:	6818      	ldr	r0, [r3, #0]
 8010d4a:	f000 b825 	b.w	8010d98 <_malloc_r>
 8010d4e:	bf00      	nop
 8010d50:	2000047c 	.word	0x2000047c

08010d54 <sbrk_aligned>:
 8010d54:	b570      	push	{r4, r5, r6, lr}
 8010d56:	4e0f      	ldr	r6, [pc, #60]	@ (8010d94 <sbrk_aligned+0x40>)
 8010d58:	460c      	mov	r4, r1
 8010d5a:	6831      	ldr	r1, [r6, #0]
 8010d5c:	4605      	mov	r5, r0
 8010d5e:	b911      	cbnz	r1, 8010d66 <sbrk_aligned+0x12>
 8010d60:	f001 fd90 	bl	8012884 <_sbrk_r>
 8010d64:	6030      	str	r0, [r6, #0]
 8010d66:	4621      	mov	r1, r4
 8010d68:	4628      	mov	r0, r5
 8010d6a:	f001 fd8b 	bl	8012884 <_sbrk_r>
 8010d6e:	1c43      	adds	r3, r0, #1
 8010d70:	d103      	bne.n	8010d7a <sbrk_aligned+0x26>
 8010d72:	f04f 34ff 	mov.w	r4, #4294967295
 8010d76:	4620      	mov	r0, r4
 8010d78:	bd70      	pop	{r4, r5, r6, pc}
 8010d7a:	1cc4      	adds	r4, r0, #3
 8010d7c:	f024 0403 	bic.w	r4, r4, #3
 8010d80:	42a0      	cmp	r0, r4
 8010d82:	d0f8      	beq.n	8010d76 <sbrk_aligned+0x22>
 8010d84:	1a21      	subs	r1, r4, r0
 8010d86:	4628      	mov	r0, r5
 8010d88:	f001 fd7c 	bl	8012884 <_sbrk_r>
 8010d8c:	3001      	adds	r0, #1
 8010d8e:	d1f2      	bne.n	8010d76 <sbrk_aligned+0x22>
 8010d90:	e7ef      	b.n	8010d72 <sbrk_aligned+0x1e>
 8010d92:	bf00      	nop
 8010d94:	200083d4 	.word	0x200083d4

08010d98 <_malloc_r>:
 8010d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d9c:	1ccd      	adds	r5, r1, #3
 8010d9e:	f025 0503 	bic.w	r5, r5, #3
 8010da2:	3508      	adds	r5, #8
 8010da4:	2d0c      	cmp	r5, #12
 8010da6:	bf38      	it	cc
 8010da8:	250c      	movcc	r5, #12
 8010daa:	2d00      	cmp	r5, #0
 8010dac:	4606      	mov	r6, r0
 8010dae:	db01      	blt.n	8010db4 <_malloc_r+0x1c>
 8010db0:	42a9      	cmp	r1, r5
 8010db2:	d904      	bls.n	8010dbe <_malloc_r+0x26>
 8010db4:	230c      	movs	r3, #12
 8010db6:	6033      	str	r3, [r6, #0]
 8010db8:	2000      	movs	r0, #0
 8010dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010e94 <_malloc_r+0xfc>
 8010dc2:	f000 f869 	bl	8010e98 <__malloc_lock>
 8010dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8010dca:	461c      	mov	r4, r3
 8010dcc:	bb44      	cbnz	r4, 8010e20 <_malloc_r+0x88>
 8010dce:	4629      	mov	r1, r5
 8010dd0:	4630      	mov	r0, r6
 8010dd2:	f7ff ffbf 	bl	8010d54 <sbrk_aligned>
 8010dd6:	1c43      	adds	r3, r0, #1
 8010dd8:	4604      	mov	r4, r0
 8010dda:	d158      	bne.n	8010e8e <_malloc_r+0xf6>
 8010ddc:	f8d8 4000 	ldr.w	r4, [r8]
 8010de0:	4627      	mov	r7, r4
 8010de2:	2f00      	cmp	r7, #0
 8010de4:	d143      	bne.n	8010e6e <_malloc_r+0xd6>
 8010de6:	2c00      	cmp	r4, #0
 8010de8:	d04b      	beq.n	8010e82 <_malloc_r+0xea>
 8010dea:	6823      	ldr	r3, [r4, #0]
 8010dec:	4639      	mov	r1, r7
 8010dee:	4630      	mov	r0, r6
 8010df0:	eb04 0903 	add.w	r9, r4, r3
 8010df4:	f001 fd46 	bl	8012884 <_sbrk_r>
 8010df8:	4581      	cmp	r9, r0
 8010dfa:	d142      	bne.n	8010e82 <_malloc_r+0xea>
 8010dfc:	6821      	ldr	r1, [r4, #0]
 8010dfe:	1a6d      	subs	r5, r5, r1
 8010e00:	4629      	mov	r1, r5
 8010e02:	4630      	mov	r0, r6
 8010e04:	f7ff ffa6 	bl	8010d54 <sbrk_aligned>
 8010e08:	3001      	adds	r0, #1
 8010e0a:	d03a      	beq.n	8010e82 <_malloc_r+0xea>
 8010e0c:	6823      	ldr	r3, [r4, #0]
 8010e0e:	442b      	add	r3, r5
 8010e10:	6023      	str	r3, [r4, #0]
 8010e12:	f8d8 3000 	ldr.w	r3, [r8]
 8010e16:	685a      	ldr	r2, [r3, #4]
 8010e18:	bb62      	cbnz	r2, 8010e74 <_malloc_r+0xdc>
 8010e1a:	f8c8 7000 	str.w	r7, [r8]
 8010e1e:	e00f      	b.n	8010e40 <_malloc_r+0xa8>
 8010e20:	6822      	ldr	r2, [r4, #0]
 8010e22:	1b52      	subs	r2, r2, r5
 8010e24:	d420      	bmi.n	8010e68 <_malloc_r+0xd0>
 8010e26:	2a0b      	cmp	r2, #11
 8010e28:	d917      	bls.n	8010e5a <_malloc_r+0xc2>
 8010e2a:	1961      	adds	r1, r4, r5
 8010e2c:	42a3      	cmp	r3, r4
 8010e2e:	6025      	str	r5, [r4, #0]
 8010e30:	bf18      	it	ne
 8010e32:	6059      	strne	r1, [r3, #4]
 8010e34:	6863      	ldr	r3, [r4, #4]
 8010e36:	bf08      	it	eq
 8010e38:	f8c8 1000 	streq.w	r1, [r8]
 8010e3c:	5162      	str	r2, [r4, r5]
 8010e3e:	604b      	str	r3, [r1, #4]
 8010e40:	4630      	mov	r0, r6
 8010e42:	f000 f82f 	bl	8010ea4 <__malloc_unlock>
 8010e46:	f104 000b 	add.w	r0, r4, #11
 8010e4a:	1d23      	adds	r3, r4, #4
 8010e4c:	f020 0007 	bic.w	r0, r0, #7
 8010e50:	1ac2      	subs	r2, r0, r3
 8010e52:	bf1c      	itt	ne
 8010e54:	1a1b      	subne	r3, r3, r0
 8010e56:	50a3      	strne	r3, [r4, r2]
 8010e58:	e7af      	b.n	8010dba <_malloc_r+0x22>
 8010e5a:	6862      	ldr	r2, [r4, #4]
 8010e5c:	42a3      	cmp	r3, r4
 8010e5e:	bf0c      	ite	eq
 8010e60:	f8c8 2000 	streq.w	r2, [r8]
 8010e64:	605a      	strne	r2, [r3, #4]
 8010e66:	e7eb      	b.n	8010e40 <_malloc_r+0xa8>
 8010e68:	4623      	mov	r3, r4
 8010e6a:	6864      	ldr	r4, [r4, #4]
 8010e6c:	e7ae      	b.n	8010dcc <_malloc_r+0x34>
 8010e6e:	463c      	mov	r4, r7
 8010e70:	687f      	ldr	r7, [r7, #4]
 8010e72:	e7b6      	b.n	8010de2 <_malloc_r+0x4a>
 8010e74:	461a      	mov	r2, r3
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	42a3      	cmp	r3, r4
 8010e7a:	d1fb      	bne.n	8010e74 <_malloc_r+0xdc>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	6053      	str	r3, [r2, #4]
 8010e80:	e7de      	b.n	8010e40 <_malloc_r+0xa8>
 8010e82:	230c      	movs	r3, #12
 8010e84:	6033      	str	r3, [r6, #0]
 8010e86:	4630      	mov	r0, r6
 8010e88:	f000 f80c 	bl	8010ea4 <__malloc_unlock>
 8010e8c:	e794      	b.n	8010db8 <_malloc_r+0x20>
 8010e8e:	6005      	str	r5, [r0, #0]
 8010e90:	e7d6      	b.n	8010e40 <_malloc_r+0xa8>
 8010e92:	bf00      	nop
 8010e94:	200083d8 	.word	0x200083d8

08010e98 <__malloc_lock>:
 8010e98:	4801      	ldr	r0, [pc, #4]	@ (8010ea0 <__malloc_lock+0x8>)
 8010e9a:	f7ff b8a6 	b.w	800ffea <__retarget_lock_acquire_recursive>
 8010e9e:	bf00      	nop
 8010ea0:	200083d0 	.word	0x200083d0

08010ea4 <__malloc_unlock>:
 8010ea4:	4801      	ldr	r0, [pc, #4]	@ (8010eac <__malloc_unlock+0x8>)
 8010ea6:	f7ff b8a1 	b.w	800ffec <__retarget_lock_release_recursive>
 8010eaa:	bf00      	nop
 8010eac:	200083d0 	.word	0x200083d0

08010eb0 <_Balloc>:
 8010eb0:	b570      	push	{r4, r5, r6, lr}
 8010eb2:	69c6      	ldr	r6, [r0, #28]
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	460d      	mov	r5, r1
 8010eb8:	b976      	cbnz	r6, 8010ed8 <_Balloc+0x28>
 8010eba:	2010      	movs	r0, #16
 8010ebc:	f7ff ff42 	bl	8010d44 <malloc>
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	61e0      	str	r0, [r4, #28]
 8010ec4:	b920      	cbnz	r0, 8010ed0 <_Balloc+0x20>
 8010ec6:	4b18      	ldr	r3, [pc, #96]	@ (8010f28 <_Balloc+0x78>)
 8010ec8:	4818      	ldr	r0, [pc, #96]	@ (8010f2c <_Balloc+0x7c>)
 8010eca:	216b      	movs	r1, #107	@ 0x6b
 8010ecc:	f001 fcf4 	bl	80128b8 <__assert_func>
 8010ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ed4:	6006      	str	r6, [r0, #0]
 8010ed6:	60c6      	str	r6, [r0, #12]
 8010ed8:	69e6      	ldr	r6, [r4, #28]
 8010eda:	68f3      	ldr	r3, [r6, #12]
 8010edc:	b183      	cbz	r3, 8010f00 <_Balloc+0x50>
 8010ede:	69e3      	ldr	r3, [r4, #28]
 8010ee0:	68db      	ldr	r3, [r3, #12]
 8010ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010ee6:	b9b8      	cbnz	r0, 8010f18 <_Balloc+0x68>
 8010ee8:	2101      	movs	r1, #1
 8010eea:	fa01 f605 	lsl.w	r6, r1, r5
 8010eee:	1d72      	adds	r2, r6, #5
 8010ef0:	0092      	lsls	r2, r2, #2
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	f001 fcfe 	bl	80128f4 <_calloc_r>
 8010ef8:	b160      	cbz	r0, 8010f14 <_Balloc+0x64>
 8010efa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010efe:	e00e      	b.n	8010f1e <_Balloc+0x6e>
 8010f00:	2221      	movs	r2, #33	@ 0x21
 8010f02:	2104      	movs	r1, #4
 8010f04:	4620      	mov	r0, r4
 8010f06:	f001 fcf5 	bl	80128f4 <_calloc_r>
 8010f0a:	69e3      	ldr	r3, [r4, #28]
 8010f0c:	60f0      	str	r0, [r6, #12]
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d1e4      	bne.n	8010ede <_Balloc+0x2e>
 8010f14:	2000      	movs	r0, #0
 8010f16:	bd70      	pop	{r4, r5, r6, pc}
 8010f18:	6802      	ldr	r2, [r0, #0]
 8010f1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f1e:	2300      	movs	r3, #0
 8010f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f24:	e7f7      	b.n	8010f16 <_Balloc+0x66>
 8010f26:	bf00      	nop
 8010f28:	0801651b 	.word	0x0801651b
 8010f2c:	0801659b 	.word	0x0801659b

08010f30 <_Bfree>:
 8010f30:	b570      	push	{r4, r5, r6, lr}
 8010f32:	69c6      	ldr	r6, [r0, #28]
 8010f34:	4605      	mov	r5, r0
 8010f36:	460c      	mov	r4, r1
 8010f38:	b976      	cbnz	r6, 8010f58 <_Bfree+0x28>
 8010f3a:	2010      	movs	r0, #16
 8010f3c:	f7ff ff02 	bl	8010d44 <malloc>
 8010f40:	4602      	mov	r2, r0
 8010f42:	61e8      	str	r0, [r5, #28]
 8010f44:	b920      	cbnz	r0, 8010f50 <_Bfree+0x20>
 8010f46:	4b09      	ldr	r3, [pc, #36]	@ (8010f6c <_Bfree+0x3c>)
 8010f48:	4809      	ldr	r0, [pc, #36]	@ (8010f70 <_Bfree+0x40>)
 8010f4a:	218f      	movs	r1, #143	@ 0x8f
 8010f4c:	f001 fcb4 	bl	80128b8 <__assert_func>
 8010f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f54:	6006      	str	r6, [r0, #0]
 8010f56:	60c6      	str	r6, [r0, #12]
 8010f58:	b13c      	cbz	r4, 8010f6a <_Bfree+0x3a>
 8010f5a:	69eb      	ldr	r3, [r5, #28]
 8010f5c:	6862      	ldr	r2, [r4, #4]
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f64:	6021      	str	r1, [r4, #0]
 8010f66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f6a:	bd70      	pop	{r4, r5, r6, pc}
 8010f6c:	0801651b 	.word	0x0801651b
 8010f70:	0801659b 	.word	0x0801659b

08010f74 <__multadd>:
 8010f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f78:	690d      	ldr	r5, [r1, #16]
 8010f7a:	4607      	mov	r7, r0
 8010f7c:	460c      	mov	r4, r1
 8010f7e:	461e      	mov	r6, r3
 8010f80:	f101 0c14 	add.w	ip, r1, #20
 8010f84:	2000      	movs	r0, #0
 8010f86:	f8dc 3000 	ldr.w	r3, [ip]
 8010f8a:	b299      	uxth	r1, r3
 8010f8c:	fb02 6101 	mla	r1, r2, r1, r6
 8010f90:	0c1e      	lsrs	r6, r3, #16
 8010f92:	0c0b      	lsrs	r3, r1, #16
 8010f94:	fb02 3306 	mla	r3, r2, r6, r3
 8010f98:	b289      	uxth	r1, r1
 8010f9a:	3001      	adds	r0, #1
 8010f9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010fa0:	4285      	cmp	r5, r0
 8010fa2:	f84c 1b04 	str.w	r1, [ip], #4
 8010fa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010faa:	dcec      	bgt.n	8010f86 <__multadd+0x12>
 8010fac:	b30e      	cbz	r6, 8010ff2 <__multadd+0x7e>
 8010fae:	68a3      	ldr	r3, [r4, #8]
 8010fb0:	42ab      	cmp	r3, r5
 8010fb2:	dc19      	bgt.n	8010fe8 <__multadd+0x74>
 8010fb4:	6861      	ldr	r1, [r4, #4]
 8010fb6:	4638      	mov	r0, r7
 8010fb8:	3101      	adds	r1, #1
 8010fba:	f7ff ff79 	bl	8010eb0 <_Balloc>
 8010fbe:	4680      	mov	r8, r0
 8010fc0:	b928      	cbnz	r0, 8010fce <__multadd+0x5a>
 8010fc2:	4602      	mov	r2, r0
 8010fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8010ff8 <__multadd+0x84>)
 8010fc6:	480d      	ldr	r0, [pc, #52]	@ (8010ffc <__multadd+0x88>)
 8010fc8:	21ba      	movs	r1, #186	@ 0xba
 8010fca:	f001 fc75 	bl	80128b8 <__assert_func>
 8010fce:	6922      	ldr	r2, [r4, #16]
 8010fd0:	3202      	adds	r2, #2
 8010fd2:	f104 010c 	add.w	r1, r4, #12
 8010fd6:	0092      	lsls	r2, r2, #2
 8010fd8:	300c      	adds	r0, #12
 8010fda:	f7ff f808 	bl	800ffee <memcpy>
 8010fde:	4621      	mov	r1, r4
 8010fe0:	4638      	mov	r0, r7
 8010fe2:	f7ff ffa5 	bl	8010f30 <_Bfree>
 8010fe6:	4644      	mov	r4, r8
 8010fe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010fec:	3501      	adds	r5, #1
 8010fee:	615e      	str	r6, [r3, #20]
 8010ff0:	6125      	str	r5, [r4, #16]
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ff8:	0801658a 	.word	0x0801658a
 8010ffc:	0801659b 	.word	0x0801659b

08011000 <__s2b>:
 8011000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011004:	460c      	mov	r4, r1
 8011006:	4615      	mov	r5, r2
 8011008:	461f      	mov	r7, r3
 801100a:	2209      	movs	r2, #9
 801100c:	3308      	adds	r3, #8
 801100e:	4606      	mov	r6, r0
 8011010:	fb93 f3f2 	sdiv	r3, r3, r2
 8011014:	2100      	movs	r1, #0
 8011016:	2201      	movs	r2, #1
 8011018:	429a      	cmp	r2, r3
 801101a:	db09      	blt.n	8011030 <__s2b+0x30>
 801101c:	4630      	mov	r0, r6
 801101e:	f7ff ff47 	bl	8010eb0 <_Balloc>
 8011022:	b940      	cbnz	r0, 8011036 <__s2b+0x36>
 8011024:	4602      	mov	r2, r0
 8011026:	4b19      	ldr	r3, [pc, #100]	@ (801108c <__s2b+0x8c>)
 8011028:	4819      	ldr	r0, [pc, #100]	@ (8011090 <__s2b+0x90>)
 801102a:	21d3      	movs	r1, #211	@ 0xd3
 801102c:	f001 fc44 	bl	80128b8 <__assert_func>
 8011030:	0052      	lsls	r2, r2, #1
 8011032:	3101      	adds	r1, #1
 8011034:	e7f0      	b.n	8011018 <__s2b+0x18>
 8011036:	9b08      	ldr	r3, [sp, #32]
 8011038:	6143      	str	r3, [r0, #20]
 801103a:	2d09      	cmp	r5, #9
 801103c:	f04f 0301 	mov.w	r3, #1
 8011040:	6103      	str	r3, [r0, #16]
 8011042:	dd16      	ble.n	8011072 <__s2b+0x72>
 8011044:	f104 0909 	add.w	r9, r4, #9
 8011048:	46c8      	mov	r8, r9
 801104a:	442c      	add	r4, r5
 801104c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011050:	4601      	mov	r1, r0
 8011052:	3b30      	subs	r3, #48	@ 0x30
 8011054:	220a      	movs	r2, #10
 8011056:	4630      	mov	r0, r6
 8011058:	f7ff ff8c 	bl	8010f74 <__multadd>
 801105c:	45a0      	cmp	r8, r4
 801105e:	d1f5      	bne.n	801104c <__s2b+0x4c>
 8011060:	f1a5 0408 	sub.w	r4, r5, #8
 8011064:	444c      	add	r4, r9
 8011066:	1b2d      	subs	r5, r5, r4
 8011068:	1963      	adds	r3, r4, r5
 801106a:	42bb      	cmp	r3, r7
 801106c:	db04      	blt.n	8011078 <__s2b+0x78>
 801106e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011072:	340a      	adds	r4, #10
 8011074:	2509      	movs	r5, #9
 8011076:	e7f6      	b.n	8011066 <__s2b+0x66>
 8011078:	f814 3b01 	ldrb.w	r3, [r4], #1
 801107c:	4601      	mov	r1, r0
 801107e:	3b30      	subs	r3, #48	@ 0x30
 8011080:	220a      	movs	r2, #10
 8011082:	4630      	mov	r0, r6
 8011084:	f7ff ff76 	bl	8010f74 <__multadd>
 8011088:	e7ee      	b.n	8011068 <__s2b+0x68>
 801108a:	bf00      	nop
 801108c:	0801658a 	.word	0x0801658a
 8011090:	0801659b 	.word	0x0801659b

08011094 <__hi0bits>:
 8011094:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011098:	4603      	mov	r3, r0
 801109a:	bf36      	itet	cc
 801109c:	0403      	lslcc	r3, r0, #16
 801109e:	2000      	movcs	r0, #0
 80110a0:	2010      	movcc	r0, #16
 80110a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80110a6:	bf3c      	itt	cc
 80110a8:	021b      	lslcc	r3, r3, #8
 80110aa:	3008      	addcc	r0, #8
 80110ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80110b0:	bf3c      	itt	cc
 80110b2:	011b      	lslcc	r3, r3, #4
 80110b4:	3004      	addcc	r0, #4
 80110b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80110ba:	bf3c      	itt	cc
 80110bc:	009b      	lslcc	r3, r3, #2
 80110be:	3002      	addcc	r0, #2
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	db05      	blt.n	80110d0 <__hi0bits+0x3c>
 80110c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80110c8:	f100 0001 	add.w	r0, r0, #1
 80110cc:	bf08      	it	eq
 80110ce:	2020      	moveq	r0, #32
 80110d0:	4770      	bx	lr

080110d2 <__lo0bits>:
 80110d2:	6803      	ldr	r3, [r0, #0]
 80110d4:	4602      	mov	r2, r0
 80110d6:	f013 0007 	ands.w	r0, r3, #7
 80110da:	d00b      	beq.n	80110f4 <__lo0bits+0x22>
 80110dc:	07d9      	lsls	r1, r3, #31
 80110de:	d421      	bmi.n	8011124 <__lo0bits+0x52>
 80110e0:	0798      	lsls	r0, r3, #30
 80110e2:	bf49      	itett	mi
 80110e4:	085b      	lsrmi	r3, r3, #1
 80110e6:	089b      	lsrpl	r3, r3, #2
 80110e8:	2001      	movmi	r0, #1
 80110ea:	6013      	strmi	r3, [r2, #0]
 80110ec:	bf5c      	itt	pl
 80110ee:	6013      	strpl	r3, [r2, #0]
 80110f0:	2002      	movpl	r0, #2
 80110f2:	4770      	bx	lr
 80110f4:	b299      	uxth	r1, r3
 80110f6:	b909      	cbnz	r1, 80110fc <__lo0bits+0x2a>
 80110f8:	0c1b      	lsrs	r3, r3, #16
 80110fa:	2010      	movs	r0, #16
 80110fc:	b2d9      	uxtb	r1, r3
 80110fe:	b909      	cbnz	r1, 8011104 <__lo0bits+0x32>
 8011100:	3008      	adds	r0, #8
 8011102:	0a1b      	lsrs	r3, r3, #8
 8011104:	0719      	lsls	r1, r3, #28
 8011106:	bf04      	itt	eq
 8011108:	091b      	lsreq	r3, r3, #4
 801110a:	3004      	addeq	r0, #4
 801110c:	0799      	lsls	r1, r3, #30
 801110e:	bf04      	itt	eq
 8011110:	089b      	lsreq	r3, r3, #2
 8011112:	3002      	addeq	r0, #2
 8011114:	07d9      	lsls	r1, r3, #31
 8011116:	d403      	bmi.n	8011120 <__lo0bits+0x4e>
 8011118:	085b      	lsrs	r3, r3, #1
 801111a:	f100 0001 	add.w	r0, r0, #1
 801111e:	d003      	beq.n	8011128 <__lo0bits+0x56>
 8011120:	6013      	str	r3, [r2, #0]
 8011122:	4770      	bx	lr
 8011124:	2000      	movs	r0, #0
 8011126:	4770      	bx	lr
 8011128:	2020      	movs	r0, #32
 801112a:	4770      	bx	lr

0801112c <__i2b>:
 801112c:	b510      	push	{r4, lr}
 801112e:	460c      	mov	r4, r1
 8011130:	2101      	movs	r1, #1
 8011132:	f7ff febd 	bl	8010eb0 <_Balloc>
 8011136:	4602      	mov	r2, r0
 8011138:	b928      	cbnz	r0, 8011146 <__i2b+0x1a>
 801113a:	4b05      	ldr	r3, [pc, #20]	@ (8011150 <__i2b+0x24>)
 801113c:	4805      	ldr	r0, [pc, #20]	@ (8011154 <__i2b+0x28>)
 801113e:	f240 1145 	movw	r1, #325	@ 0x145
 8011142:	f001 fbb9 	bl	80128b8 <__assert_func>
 8011146:	2301      	movs	r3, #1
 8011148:	6144      	str	r4, [r0, #20]
 801114a:	6103      	str	r3, [r0, #16]
 801114c:	bd10      	pop	{r4, pc}
 801114e:	bf00      	nop
 8011150:	0801658a 	.word	0x0801658a
 8011154:	0801659b 	.word	0x0801659b

08011158 <__multiply>:
 8011158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801115c:	4614      	mov	r4, r2
 801115e:	690a      	ldr	r2, [r1, #16]
 8011160:	6923      	ldr	r3, [r4, #16]
 8011162:	429a      	cmp	r2, r3
 8011164:	bfa8      	it	ge
 8011166:	4623      	movge	r3, r4
 8011168:	460f      	mov	r7, r1
 801116a:	bfa4      	itt	ge
 801116c:	460c      	movge	r4, r1
 801116e:	461f      	movge	r7, r3
 8011170:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011174:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011178:	68a3      	ldr	r3, [r4, #8]
 801117a:	6861      	ldr	r1, [r4, #4]
 801117c:	eb0a 0609 	add.w	r6, sl, r9
 8011180:	42b3      	cmp	r3, r6
 8011182:	b085      	sub	sp, #20
 8011184:	bfb8      	it	lt
 8011186:	3101      	addlt	r1, #1
 8011188:	f7ff fe92 	bl	8010eb0 <_Balloc>
 801118c:	b930      	cbnz	r0, 801119c <__multiply+0x44>
 801118e:	4602      	mov	r2, r0
 8011190:	4b44      	ldr	r3, [pc, #272]	@ (80112a4 <__multiply+0x14c>)
 8011192:	4845      	ldr	r0, [pc, #276]	@ (80112a8 <__multiply+0x150>)
 8011194:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011198:	f001 fb8e 	bl	80128b8 <__assert_func>
 801119c:	f100 0514 	add.w	r5, r0, #20
 80111a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80111a4:	462b      	mov	r3, r5
 80111a6:	2200      	movs	r2, #0
 80111a8:	4543      	cmp	r3, r8
 80111aa:	d321      	bcc.n	80111f0 <__multiply+0x98>
 80111ac:	f107 0114 	add.w	r1, r7, #20
 80111b0:	f104 0214 	add.w	r2, r4, #20
 80111b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80111b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80111bc:	9302      	str	r3, [sp, #8]
 80111be:	1b13      	subs	r3, r2, r4
 80111c0:	3b15      	subs	r3, #21
 80111c2:	f023 0303 	bic.w	r3, r3, #3
 80111c6:	3304      	adds	r3, #4
 80111c8:	f104 0715 	add.w	r7, r4, #21
 80111cc:	42ba      	cmp	r2, r7
 80111ce:	bf38      	it	cc
 80111d0:	2304      	movcc	r3, #4
 80111d2:	9301      	str	r3, [sp, #4]
 80111d4:	9b02      	ldr	r3, [sp, #8]
 80111d6:	9103      	str	r1, [sp, #12]
 80111d8:	428b      	cmp	r3, r1
 80111da:	d80c      	bhi.n	80111f6 <__multiply+0x9e>
 80111dc:	2e00      	cmp	r6, #0
 80111de:	dd03      	ble.n	80111e8 <__multiply+0x90>
 80111e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d05b      	beq.n	80112a0 <__multiply+0x148>
 80111e8:	6106      	str	r6, [r0, #16]
 80111ea:	b005      	add	sp, #20
 80111ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f0:	f843 2b04 	str.w	r2, [r3], #4
 80111f4:	e7d8      	b.n	80111a8 <__multiply+0x50>
 80111f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80111fa:	f1ba 0f00 	cmp.w	sl, #0
 80111fe:	d024      	beq.n	801124a <__multiply+0xf2>
 8011200:	f104 0e14 	add.w	lr, r4, #20
 8011204:	46a9      	mov	r9, r5
 8011206:	f04f 0c00 	mov.w	ip, #0
 801120a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801120e:	f8d9 3000 	ldr.w	r3, [r9]
 8011212:	fa1f fb87 	uxth.w	fp, r7
 8011216:	b29b      	uxth	r3, r3
 8011218:	fb0a 330b 	mla	r3, sl, fp, r3
 801121c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011220:	f8d9 7000 	ldr.w	r7, [r9]
 8011224:	4463      	add	r3, ip
 8011226:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801122a:	fb0a c70b 	mla	r7, sl, fp, ip
 801122e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011232:	b29b      	uxth	r3, r3
 8011234:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011238:	4572      	cmp	r2, lr
 801123a:	f849 3b04 	str.w	r3, [r9], #4
 801123e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011242:	d8e2      	bhi.n	801120a <__multiply+0xb2>
 8011244:	9b01      	ldr	r3, [sp, #4]
 8011246:	f845 c003 	str.w	ip, [r5, r3]
 801124a:	9b03      	ldr	r3, [sp, #12]
 801124c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011250:	3104      	adds	r1, #4
 8011252:	f1b9 0f00 	cmp.w	r9, #0
 8011256:	d021      	beq.n	801129c <__multiply+0x144>
 8011258:	682b      	ldr	r3, [r5, #0]
 801125a:	f104 0c14 	add.w	ip, r4, #20
 801125e:	46ae      	mov	lr, r5
 8011260:	f04f 0a00 	mov.w	sl, #0
 8011264:	f8bc b000 	ldrh.w	fp, [ip]
 8011268:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801126c:	fb09 770b 	mla	r7, r9, fp, r7
 8011270:	4457      	add	r7, sl
 8011272:	b29b      	uxth	r3, r3
 8011274:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011278:	f84e 3b04 	str.w	r3, [lr], #4
 801127c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011280:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011284:	f8be 3000 	ldrh.w	r3, [lr]
 8011288:	fb09 330a 	mla	r3, r9, sl, r3
 801128c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011290:	4562      	cmp	r2, ip
 8011292:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011296:	d8e5      	bhi.n	8011264 <__multiply+0x10c>
 8011298:	9f01      	ldr	r7, [sp, #4]
 801129a:	51eb      	str	r3, [r5, r7]
 801129c:	3504      	adds	r5, #4
 801129e:	e799      	b.n	80111d4 <__multiply+0x7c>
 80112a0:	3e01      	subs	r6, #1
 80112a2:	e79b      	b.n	80111dc <__multiply+0x84>
 80112a4:	0801658a 	.word	0x0801658a
 80112a8:	0801659b 	.word	0x0801659b

080112ac <__pow5mult>:
 80112ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112b0:	4615      	mov	r5, r2
 80112b2:	f012 0203 	ands.w	r2, r2, #3
 80112b6:	4607      	mov	r7, r0
 80112b8:	460e      	mov	r6, r1
 80112ba:	d007      	beq.n	80112cc <__pow5mult+0x20>
 80112bc:	4c25      	ldr	r4, [pc, #148]	@ (8011354 <__pow5mult+0xa8>)
 80112be:	3a01      	subs	r2, #1
 80112c0:	2300      	movs	r3, #0
 80112c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80112c6:	f7ff fe55 	bl	8010f74 <__multadd>
 80112ca:	4606      	mov	r6, r0
 80112cc:	10ad      	asrs	r5, r5, #2
 80112ce:	d03d      	beq.n	801134c <__pow5mult+0xa0>
 80112d0:	69fc      	ldr	r4, [r7, #28]
 80112d2:	b97c      	cbnz	r4, 80112f4 <__pow5mult+0x48>
 80112d4:	2010      	movs	r0, #16
 80112d6:	f7ff fd35 	bl	8010d44 <malloc>
 80112da:	4602      	mov	r2, r0
 80112dc:	61f8      	str	r0, [r7, #28]
 80112de:	b928      	cbnz	r0, 80112ec <__pow5mult+0x40>
 80112e0:	4b1d      	ldr	r3, [pc, #116]	@ (8011358 <__pow5mult+0xac>)
 80112e2:	481e      	ldr	r0, [pc, #120]	@ (801135c <__pow5mult+0xb0>)
 80112e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80112e8:	f001 fae6 	bl	80128b8 <__assert_func>
 80112ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112f0:	6004      	str	r4, [r0, #0]
 80112f2:	60c4      	str	r4, [r0, #12]
 80112f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80112f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80112fc:	b94c      	cbnz	r4, 8011312 <__pow5mult+0x66>
 80112fe:	f240 2171 	movw	r1, #625	@ 0x271
 8011302:	4638      	mov	r0, r7
 8011304:	f7ff ff12 	bl	801112c <__i2b>
 8011308:	2300      	movs	r3, #0
 801130a:	f8c8 0008 	str.w	r0, [r8, #8]
 801130e:	4604      	mov	r4, r0
 8011310:	6003      	str	r3, [r0, #0]
 8011312:	f04f 0900 	mov.w	r9, #0
 8011316:	07eb      	lsls	r3, r5, #31
 8011318:	d50a      	bpl.n	8011330 <__pow5mult+0x84>
 801131a:	4631      	mov	r1, r6
 801131c:	4622      	mov	r2, r4
 801131e:	4638      	mov	r0, r7
 8011320:	f7ff ff1a 	bl	8011158 <__multiply>
 8011324:	4631      	mov	r1, r6
 8011326:	4680      	mov	r8, r0
 8011328:	4638      	mov	r0, r7
 801132a:	f7ff fe01 	bl	8010f30 <_Bfree>
 801132e:	4646      	mov	r6, r8
 8011330:	106d      	asrs	r5, r5, #1
 8011332:	d00b      	beq.n	801134c <__pow5mult+0xa0>
 8011334:	6820      	ldr	r0, [r4, #0]
 8011336:	b938      	cbnz	r0, 8011348 <__pow5mult+0x9c>
 8011338:	4622      	mov	r2, r4
 801133a:	4621      	mov	r1, r4
 801133c:	4638      	mov	r0, r7
 801133e:	f7ff ff0b 	bl	8011158 <__multiply>
 8011342:	6020      	str	r0, [r4, #0]
 8011344:	f8c0 9000 	str.w	r9, [r0]
 8011348:	4604      	mov	r4, r0
 801134a:	e7e4      	b.n	8011316 <__pow5mult+0x6a>
 801134c:	4630      	mov	r0, r6
 801134e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011352:	bf00      	nop
 8011354:	080165f4 	.word	0x080165f4
 8011358:	0801651b 	.word	0x0801651b
 801135c:	0801659b 	.word	0x0801659b

08011360 <__lshift>:
 8011360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011364:	460c      	mov	r4, r1
 8011366:	6849      	ldr	r1, [r1, #4]
 8011368:	6923      	ldr	r3, [r4, #16]
 801136a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801136e:	68a3      	ldr	r3, [r4, #8]
 8011370:	4607      	mov	r7, r0
 8011372:	4691      	mov	r9, r2
 8011374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011378:	f108 0601 	add.w	r6, r8, #1
 801137c:	42b3      	cmp	r3, r6
 801137e:	db0b      	blt.n	8011398 <__lshift+0x38>
 8011380:	4638      	mov	r0, r7
 8011382:	f7ff fd95 	bl	8010eb0 <_Balloc>
 8011386:	4605      	mov	r5, r0
 8011388:	b948      	cbnz	r0, 801139e <__lshift+0x3e>
 801138a:	4602      	mov	r2, r0
 801138c:	4b28      	ldr	r3, [pc, #160]	@ (8011430 <__lshift+0xd0>)
 801138e:	4829      	ldr	r0, [pc, #164]	@ (8011434 <__lshift+0xd4>)
 8011390:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011394:	f001 fa90 	bl	80128b8 <__assert_func>
 8011398:	3101      	adds	r1, #1
 801139a:	005b      	lsls	r3, r3, #1
 801139c:	e7ee      	b.n	801137c <__lshift+0x1c>
 801139e:	2300      	movs	r3, #0
 80113a0:	f100 0114 	add.w	r1, r0, #20
 80113a4:	f100 0210 	add.w	r2, r0, #16
 80113a8:	4618      	mov	r0, r3
 80113aa:	4553      	cmp	r3, sl
 80113ac:	db33      	blt.n	8011416 <__lshift+0xb6>
 80113ae:	6920      	ldr	r0, [r4, #16]
 80113b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80113b4:	f104 0314 	add.w	r3, r4, #20
 80113b8:	f019 091f 	ands.w	r9, r9, #31
 80113bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80113c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80113c4:	d02b      	beq.n	801141e <__lshift+0xbe>
 80113c6:	f1c9 0e20 	rsb	lr, r9, #32
 80113ca:	468a      	mov	sl, r1
 80113cc:	2200      	movs	r2, #0
 80113ce:	6818      	ldr	r0, [r3, #0]
 80113d0:	fa00 f009 	lsl.w	r0, r0, r9
 80113d4:	4310      	orrs	r0, r2
 80113d6:	f84a 0b04 	str.w	r0, [sl], #4
 80113da:	f853 2b04 	ldr.w	r2, [r3], #4
 80113de:	459c      	cmp	ip, r3
 80113e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80113e4:	d8f3      	bhi.n	80113ce <__lshift+0x6e>
 80113e6:	ebac 0304 	sub.w	r3, ip, r4
 80113ea:	3b15      	subs	r3, #21
 80113ec:	f023 0303 	bic.w	r3, r3, #3
 80113f0:	3304      	adds	r3, #4
 80113f2:	f104 0015 	add.w	r0, r4, #21
 80113f6:	4584      	cmp	ip, r0
 80113f8:	bf38      	it	cc
 80113fa:	2304      	movcc	r3, #4
 80113fc:	50ca      	str	r2, [r1, r3]
 80113fe:	b10a      	cbz	r2, 8011404 <__lshift+0xa4>
 8011400:	f108 0602 	add.w	r6, r8, #2
 8011404:	3e01      	subs	r6, #1
 8011406:	4638      	mov	r0, r7
 8011408:	612e      	str	r6, [r5, #16]
 801140a:	4621      	mov	r1, r4
 801140c:	f7ff fd90 	bl	8010f30 <_Bfree>
 8011410:	4628      	mov	r0, r5
 8011412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011416:	f842 0f04 	str.w	r0, [r2, #4]!
 801141a:	3301      	adds	r3, #1
 801141c:	e7c5      	b.n	80113aa <__lshift+0x4a>
 801141e:	3904      	subs	r1, #4
 8011420:	f853 2b04 	ldr.w	r2, [r3], #4
 8011424:	f841 2f04 	str.w	r2, [r1, #4]!
 8011428:	459c      	cmp	ip, r3
 801142a:	d8f9      	bhi.n	8011420 <__lshift+0xc0>
 801142c:	e7ea      	b.n	8011404 <__lshift+0xa4>
 801142e:	bf00      	nop
 8011430:	0801658a 	.word	0x0801658a
 8011434:	0801659b 	.word	0x0801659b

08011438 <__mcmp>:
 8011438:	690a      	ldr	r2, [r1, #16]
 801143a:	4603      	mov	r3, r0
 801143c:	6900      	ldr	r0, [r0, #16]
 801143e:	1a80      	subs	r0, r0, r2
 8011440:	b530      	push	{r4, r5, lr}
 8011442:	d10e      	bne.n	8011462 <__mcmp+0x2a>
 8011444:	3314      	adds	r3, #20
 8011446:	3114      	adds	r1, #20
 8011448:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801144c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011458:	4295      	cmp	r5, r2
 801145a:	d003      	beq.n	8011464 <__mcmp+0x2c>
 801145c:	d205      	bcs.n	801146a <__mcmp+0x32>
 801145e:	f04f 30ff 	mov.w	r0, #4294967295
 8011462:	bd30      	pop	{r4, r5, pc}
 8011464:	42a3      	cmp	r3, r4
 8011466:	d3f3      	bcc.n	8011450 <__mcmp+0x18>
 8011468:	e7fb      	b.n	8011462 <__mcmp+0x2a>
 801146a:	2001      	movs	r0, #1
 801146c:	e7f9      	b.n	8011462 <__mcmp+0x2a>
	...

08011470 <__mdiff>:
 8011470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011474:	4689      	mov	r9, r1
 8011476:	4606      	mov	r6, r0
 8011478:	4611      	mov	r1, r2
 801147a:	4648      	mov	r0, r9
 801147c:	4614      	mov	r4, r2
 801147e:	f7ff ffdb 	bl	8011438 <__mcmp>
 8011482:	1e05      	subs	r5, r0, #0
 8011484:	d112      	bne.n	80114ac <__mdiff+0x3c>
 8011486:	4629      	mov	r1, r5
 8011488:	4630      	mov	r0, r6
 801148a:	f7ff fd11 	bl	8010eb0 <_Balloc>
 801148e:	4602      	mov	r2, r0
 8011490:	b928      	cbnz	r0, 801149e <__mdiff+0x2e>
 8011492:	4b3f      	ldr	r3, [pc, #252]	@ (8011590 <__mdiff+0x120>)
 8011494:	f240 2137 	movw	r1, #567	@ 0x237
 8011498:	483e      	ldr	r0, [pc, #248]	@ (8011594 <__mdiff+0x124>)
 801149a:	f001 fa0d 	bl	80128b8 <__assert_func>
 801149e:	2301      	movs	r3, #1
 80114a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80114a4:	4610      	mov	r0, r2
 80114a6:	b003      	add	sp, #12
 80114a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ac:	bfbc      	itt	lt
 80114ae:	464b      	movlt	r3, r9
 80114b0:	46a1      	movlt	r9, r4
 80114b2:	4630      	mov	r0, r6
 80114b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80114b8:	bfba      	itte	lt
 80114ba:	461c      	movlt	r4, r3
 80114bc:	2501      	movlt	r5, #1
 80114be:	2500      	movge	r5, #0
 80114c0:	f7ff fcf6 	bl	8010eb0 <_Balloc>
 80114c4:	4602      	mov	r2, r0
 80114c6:	b918      	cbnz	r0, 80114d0 <__mdiff+0x60>
 80114c8:	4b31      	ldr	r3, [pc, #196]	@ (8011590 <__mdiff+0x120>)
 80114ca:	f240 2145 	movw	r1, #581	@ 0x245
 80114ce:	e7e3      	b.n	8011498 <__mdiff+0x28>
 80114d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80114d4:	6926      	ldr	r6, [r4, #16]
 80114d6:	60c5      	str	r5, [r0, #12]
 80114d8:	f109 0310 	add.w	r3, r9, #16
 80114dc:	f109 0514 	add.w	r5, r9, #20
 80114e0:	f104 0e14 	add.w	lr, r4, #20
 80114e4:	f100 0b14 	add.w	fp, r0, #20
 80114e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80114ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80114f0:	9301      	str	r3, [sp, #4]
 80114f2:	46d9      	mov	r9, fp
 80114f4:	f04f 0c00 	mov.w	ip, #0
 80114f8:	9b01      	ldr	r3, [sp, #4]
 80114fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80114fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011502:	9301      	str	r3, [sp, #4]
 8011504:	fa1f f38a 	uxth.w	r3, sl
 8011508:	4619      	mov	r1, r3
 801150a:	b283      	uxth	r3, r0
 801150c:	1acb      	subs	r3, r1, r3
 801150e:	0c00      	lsrs	r0, r0, #16
 8011510:	4463      	add	r3, ip
 8011512:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011516:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801151a:	b29b      	uxth	r3, r3
 801151c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011520:	4576      	cmp	r6, lr
 8011522:	f849 3b04 	str.w	r3, [r9], #4
 8011526:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801152a:	d8e5      	bhi.n	80114f8 <__mdiff+0x88>
 801152c:	1b33      	subs	r3, r6, r4
 801152e:	3b15      	subs	r3, #21
 8011530:	f023 0303 	bic.w	r3, r3, #3
 8011534:	3415      	adds	r4, #21
 8011536:	3304      	adds	r3, #4
 8011538:	42a6      	cmp	r6, r4
 801153a:	bf38      	it	cc
 801153c:	2304      	movcc	r3, #4
 801153e:	441d      	add	r5, r3
 8011540:	445b      	add	r3, fp
 8011542:	461e      	mov	r6, r3
 8011544:	462c      	mov	r4, r5
 8011546:	4544      	cmp	r4, r8
 8011548:	d30e      	bcc.n	8011568 <__mdiff+0xf8>
 801154a:	f108 0103 	add.w	r1, r8, #3
 801154e:	1b49      	subs	r1, r1, r5
 8011550:	f021 0103 	bic.w	r1, r1, #3
 8011554:	3d03      	subs	r5, #3
 8011556:	45a8      	cmp	r8, r5
 8011558:	bf38      	it	cc
 801155a:	2100      	movcc	r1, #0
 801155c:	440b      	add	r3, r1
 801155e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011562:	b191      	cbz	r1, 801158a <__mdiff+0x11a>
 8011564:	6117      	str	r7, [r2, #16]
 8011566:	e79d      	b.n	80114a4 <__mdiff+0x34>
 8011568:	f854 1b04 	ldr.w	r1, [r4], #4
 801156c:	46e6      	mov	lr, ip
 801156e:	0c08      	lsrs	r0, r1, #16
 8011570:	fa1c fc81 	uxtah	ip, ip, r1
 8011574:	4471      	add	r1, lr
 8011576:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801157a:	b289      	uxth	r1, r1
 801157c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011580:	f846 1b04 	str.w	r1, [r6], #4
 8011584:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011588:	e7dd      	b.n	8011546 <__mdiff+0xd6>
 801158a:	3f01      	subs	r7, #1
 801158c:	e7e7      	b.n	801155e <__mdiff+0xee>
 801158e:	bf00      	nop
 8011590:	0801658a 	.word	0x0801658a
 8011594:	0801659b 	.word	0x0801659b

08011598 <__ulp>:
 8011598:	b082      	sub	sp, #8
 801159a:	ed8d 0b00 	vstr	d0, [sp]
 801159e:	9a01      	ldr	r2, [sp, #4]
 80115a0:	4b0f      	ldr	r3, [pc, #60]	@ (80115e0 <__ulp+0x48>)
 80115a2:	4013      	ands	r3, r2
 80115a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	dc08      	bgt.n	80115be <__ulp+0x26>
 80115ac:	425b      	negs	r3, r3
 80115ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80115b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80115b6:	da04      	bge.n	80115c2 <__ulp+0x2a>
 80115b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80115bc:	4113      	asrs	r3, r2
 80115be:	2200      	movs	r2, #0
 80115c0:	e008      	b.n	80115d4 <__ulp+0x3c>
 80115c2:	f1a2 0314 	sub.w	r3, r2, #20
 80115c6:	2b1e      	cmp	r3, #30
 80115c8:	bfda      	itte	le
 80115ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80115ce:	40da      	lsrle	r2, r3
 80115d0:	2201      	movgt	r2, #1
 80115d2:	2300      	movs	r3, #0
 80115d4:	4619      	mov	r1, r3
 80115d6:	4610      	mov	r0, r2
 80115d8:	ec41 0b10 	vmov	d0, r0, r1
 80115dc:	b002      	add	sp, #8
 80115de:	4770      	bx	lr
 80115e0:	7ff00000 	.word	0x7ff00000

080115e4 <__b2d>:
 80115e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e8:	6906      	ldr	r6, [r0, #16]
 80115ea:	f100 0814 	add.w	r8, r0, #20
 80115ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80115f2:	1f37      	subs	r7, r6, #4
 80115f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80115f8:	4610      	mov	r0, r2
 80115fa:	f7ff fd4b 	bl	8011094 <__hi0bits>
 80115fe:	f1c0 0320 	rsb	r3, r0, #32
 8011602:	280a      	cmp	r0, #10
 8011604:	600b      	str	r3, [r1, #0]
 8011606:	491b      	ldr	r1, [pc, #108]	@ (8011674 <__b2d+0x90>)
 8011608:	dc15      	bgt.n	8011636 <__b2d+0x52>
 801160a:	f1c0 0c0b 	rsb	ip, r0, #11
 801160e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011612:	45b8      	cmp	r8, r7
 8011614:	ea43 0501 	orr.w	r5, r3, r1
 8011618:	bf34      	ite	cc
 801161a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801161e:	2300      	movcs	r3, #0
 8011620:	3015      	adds	r0, #21
 8011622:	fa02 f000 	lsl.w	r0, r2, r0
 8011626:	fa23 f30c 	lsr.w	r3, r3, ip
 801162a:	4303      	orrs	r3, r0
 801162c:	461c      	mov	r4, r3
 801162e:	ec45 4b10 	vmov	d0, r4, r5
 8011632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011636:	45b8      	cmp	r8, r7
 8011638:	bf3a      	itte	cc
 801163a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801163e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011642:	2300      	movcs	r3, #0
 8011644:	380b      	subs	r0, #11
 8011646:	d012      	beq.n	801166e <__b2d+0x8a>
 8011648:	f1c0 0120 	rsb	r1, r0, #32
 801164c:	fa23 f401 	lsr.w	r4, r3, r1
 8011650:	4082      	lsls	r2, r0
 8011652:	4322      	orrs	r2, r4
 8011654:	4547      	cmp	r7, r8
 8011656:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801165a:	bf8c      	ite	hi
 801165c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011660:	2200      	movls	r2, #0
 8011662:	4083      	lsls	r3, r0
 8011664:	40ca      	lsrs	r2, r1
 8011666:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801166a:	4313      	orrs	r3, r2
 801166c:	e7de      	b.n	801162c <__b2d+0x48>
 801166e:	ea42 0501 	orr.w	r5, r2, r1
 8011672:	e7db      	b.n	801162c <__b2d+0x48>
 8011674:	3ff00000 	.word	0x3ff00000

08011678 <__d2b>:
 8011678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801167c:	460f      	mov	r7, r1
 801167e:	2101      	movs	r1, #1
 8011680:	ec59 8b10 	vmov	r8, r9, d0
 8011684:	4616      	mov	r6, r2
 8011686:	f7ff fc13 	bl	8010eb0 <_Balloc>
 801168a:	4604      	mov	r4, r0
 801168c:	b930      	cbnz	r0, 801169c <__d2b+0x24>
 801168e:	4602      	mov	r2, r0
 8011690:	4b23      	ldr	r3, [pc, #140]	@ (8011720 <__d2b+0xa8>)
 8011692:	4824      	ldr	r0, [pc, #144]	@ (8011724 <__d2b+0xac>)
 8011694:	f240 310f 	movw	r1, #783	@ 0x30f
 8011698:	f001 f90e 	bl	80128b8 <__assert_func>
 801169c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80116a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80116a4:	b10d      	cbz	r5, 80116aa <__d2b+0x32>
 80116a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80116aa:	9301      	str	r3, [sp, #4]
 80116ac:	f1b8 0300 	subs.w	r3, r8, #0
 80116b0:	d023      	beq.n	80116fa <__d2b+0x82>
 80116b2:	4668      	mov	r0, sp
 80116b4:	9300      	str	r3, [sp, #0]
 80116b6:	f7ff fd0c 	bl	80110d2 <__lo0bits>
 80116ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80116be:	b1d0      	cbz	r0, 80116f6 <__d2b+0x7e>
 80116c0:	f1c0 0320 	rsb	r3, r0, #32
 80116c4:	fa02 f303 	lsl.w	r3, r2, r3
 80116c8:	430b      	orrs	r3, r1
 80116ca:	40c2      	lsrs	r2, r0
 80116cc:	6163      	str	r3, [r4, #20]
 80116ce:	9201      	str	r2, [sp, #4]
 80116d0:	9b01      	ldr	r3, [sp, #4]
 80116d2:	61a3      	str	r3, [r4, #24]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	bf0c      	ite	eq
 80116d8:	2201      	moveq	r2, #1
 80116da:	2202      	movne	r2, #2
 80116dc:	6122      	str	r2, [r4, #16]
 80116de:	b1a5      	cbz	r5, 801170a <__d2b+0x92>
 80116e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80116e4:	4405      	add	r5, r0
 80116e6:	603d      	str	r5, [r7, #0]
 80116e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80116ec:	6030      	str	r0, [r6, #0]
 80116ee:	4620      	mov	r0, r4
 80116f0:	b003      	add	sp, #12
 80116f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116f6:	6161      	str	r1, [r4, #20]
 80116f8:	e7ea      	b.n	80116d0 <__d2b+0x58>
 80116fa:	a801      	add	r0, sp, #4
 80116fc:	f7ff fce9 	bl	80110d2 <__lo0bits>
 8011700:	9b01      	ldr	r3, [sp, #4]
 8011702:	6163      	str	r3, [r4, #20]
 8011704:	3020      	adds	r0, #32
 8011706:	2201      	movs	r2, #1
 8011708:	e7e8      	b.n	80116dc <__d2b+0x64>
 801170a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801170e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011712:	6038      	str	r0, [r7, #0]
 8011714:	6918      	ldr	r0, [r3, #16]
 8011716:	f7ff fcbd 	bl	8011094 <__hi0bits>
 801171a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801171e:	e7e5      	b.n	80116ec <__d2b+0x74>
 8011720:	0801658a 	.word	0x0801658a
 8011724:	0801659b 	.word	0x0801659b

08011728 <__ratio>:
 8011728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801172c:	b085      	sub	sp, #20
 801172e:	e9cd 1000 	strd	r1, r0, [sp]
 8011732:	a902      	add	r1, sp, #8
 8011734:	f7ff ff56 	bl	80115e4 <__b2d>
 8011738:	9800      	ldr	r0, [sp, #0]
 801173a:	a903      	add	r1, sp, #12
 801173c:	ec55 4b10 	vmov	r4, r5, d0
 8011740:	f7ff ff50 	bl	80115e4 <__b2d>
 8011744:	9b01      	ldr	r3, [sp, #4]
 8011746:	6919      	ldr	r1, [r3, #16]
 8011748:	9b00      	ldr	r3, [sp, #0]
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	1ac9      	subs	r1, r1, r3
 801174e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011752:	1a9b      	subs	r3, r3, r2
 8011754:	ec5b ab10 	vmov	sl, fp, d0
 8011758:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801175c:	2b00      	cmp	r3, #0
 801175e:	bfce      	itee	gt
 8011760:	462a      	movgt	r2, r5
 8011762:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011766:	465a      	movle	r2, fp
 8011768:	462f      	mov	r7, r5
 801176a:	46d9      	mov	r9, fp
 801176c:	bfcc      	ite	gt
 801176e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011772:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011776:	464b      	mov	r3, r9
 8011778:	4652      	mov	r2, sl
 801177a:	4620      	mov	r0, r4
 801177c:	4639      	mov	r1, r7
 801177e:	f7ef f875 	bl	800086c <__aeabi_ddiv>
 8011782:	ec41 0b10 	vmov	d0, r0, r1
 8011786:	b005      	add	sp, #20
 8011788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801178c <__copybits>:
 801178c:	3901      	subs	r1, #1
 801178e:	b570      	push	{r4, r5, r6, lr}
 8011790:	1149      	asrs	r1, r1, #5
 8011792:	6914      	ldr	r4, [r2, #16]
 8011794:	3101      	adds	r1, #1
 8011796:	f102 0314 	add.w	r3, r2, #20
 801179a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801179e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80117a2:	1f05      	subs	r5, r0, #4
 80117a4:	42a3      	cmp	r3, r4
 80117a6:	d30c      	bcc.n	80117c2 <__copybits+0x36>
 80117a8:	1aa3      	subs	r3, r4, r2
 80117aa:	3b11      	subs	r3, #17
 80117ac:	f023 0303 	bic.w	r3, r3, #3
 80117b0:	3211      	adds	r2, #17
 80117b2:	42a2      	cmp	r2, r4
 80117b4:	bf88      	it	hi
 80117b6:	2300      	movhi	r3, #0
 80117b8:	4418      	add	r0, r3
 80117ba:	2300      	movs	r3, #0
 80117bc:	4288      	cmp	r0, r1
 80117be:	d305      	bcc.n	80117cc <__copybits+0x40>
 80117c0:	bd70      	pop	{r4, r5, r6, pc}
 80117c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80117c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80117ca:	e7eb      	b.n	80117a4 <__copybits+0x18>
 80117cc:	f840 3b04 	str.w	r3, [r0], #4
 80117d0:	e7f4      	b.n	80117bc <__copybits+0x30>

080117d2 <__any_on>:
 80117d2:	f100 0214 	add.w	r2, r0, #20
 80117d6:	6900      	ldr	r0, [r0, #16]
 80117d8:	114b      	asrs	r3, r1, #5
 80117da:	4298      	cmp	r0, r3
 80117dc:	b510      	push	{r4, lr}
 80117de:	db11      	blt.n	8011804 <__any_on+0x32>
 80117e0:	dd0a      	ble.n	80117f8 <__any_on+0x26>
 80117e2:	f011 011f 	ands.w	r1, r1, #31
 80117e6:	d007      	beq.n	80117f8 <__any_on+0x26>
 80117e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80117ec:	fa24 f001 	lsr.w	r0, r4, r1
 80117f0:	fa00 f101 	lsl.w	r1, r0, r1
 80117f4:	428c      	cmp	r4, r1
 80117f6:	d10b      	bne.n	8011810 <__any_on+0x3e>
 80117f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d803      	bhi.n	8011808 <__any_on+0x36>
 8011800:	2000      	movs	r0, #0
 8011802:	bd10      	pop	{r4, pc}
 8011804:	4603      	mov	r3, r0
 8011806:	e7f7      	b.n	80117f8 <__any_on+0x26>
 8011808:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801180c:	2900      	cmp	r1, #0
 801180e:	d0f5      	beq.n	80117fc <__any_on+0x2a>
 8011810:	2001      	movs	r0, #1
 8011812:	e7f6      	b.n	8011802 <__any_on+0x30>

08011814 <sulp>:
 8011814:	b570      	push	{r4, r5, r6, lr}
 8011816:	4604      	mov	r4, r0
 8011818:	460d      	mov	r5, r1
 801181a:	ec45 4b10 	vmov	d0, r4, r5
 801181e:	4616      	mov	r6, r2
 8011820:	f7ff feba 	bl	8011598 <__ulp>
 8011824:	ec51 0b10 	vmov	r0, r1, d0
 8011828:	b17e      	cbz	r6, 801184a <sulp+0x36>
 801182a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801182e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011832:	2b00      	cmp	r3, #0
 8011834:	dd09      	ble.n	801184a <sulp+0x36>
 8011836:	051b      	lsls	r3, r3, #20
 8011838:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801183c:	2400      	movs	r4, #0
 801183e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011842:	4622      	mov	r2, r4
 8011844:	462b      	mov	r3, r5
 8011846:	f7ee fee7 	bl	8000618 <__aeabi_dmul>
 801184a:	ec41 0b10 	vmov	d0, r0, r1
 801184e:	bd70      	pop	{r4, r5, r6, pc}

08011850 <_strtod_l>:
 8011850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011854:	b09f      	sub	sp, #124	@ 0x7c
 8011856:	460c      	mov	r4, r1
 8011858:	9217      	str	r2, [sp, #92]	@ 0x5c
 801185a:	2200      	movs	r2, #0
 801185c:	921a      	str	r2, [sp, #104]	@ 0x68
 801185e:	9005      	str	r0, [sp, #20]
 8011860:	f04f 0a00 	mov.w	sl, #0
 8011864:	f04f 0b00 	mov.w	fp, #0
 8011868:	460a      	mov	r2, r1
 801186a:	9219      	str	r2, [sp, #100]	@ 0x64
 801186c:	7811      	ldrb	r1, [r2, #0]
 801186e:	292b      	cmp	r1, #43	@ 0x2b
 8011870:	d04a      	beq.n	8011908 <_strtod_l+0xb8>
 8011872:	d838      	bhi.n	80118e6 <_strtod_l+0x96>
 8011874:	290d      	cmp	r1, #13
 8011876:	d832      	bhi.n	80118de <_strtod_l+0x8e>
 8011878:	2908      	cmp	r1, #8
 801187a:	d832      	bhi.n	80118e2 <_strtod_l+0x92>
 801187c:	2900      	cmp	r1, #0
 801187e:	d03b      	beq.n	80118f8 <_strtod_l+0xa8>
 8011880:	2200      	movs	r2, #0
 8011882:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011884:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011886:	782a      	ldrb	r2, [r5, #0]
 8011888:	2a30      	cmp	r2, #48	@ 0x30
 801188a:	f040 80b3 	bne.w	80119f4 <_strtod_l+0x1a4>
 801188e:	786a      	ldrb	r2, [r5, #1]
 8011890:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011894:	2a58      	cmp	r2, #88	@ 0x58
 8011896:	d16e      	bne.n	8011976 <_strtod_l+0x126>
 8011898:	9302      	str	r3, [sp, #8]
 801189a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801189c:	9301      	str	r3, [sp, #4]
 801189e:	ab1a      	add	r3, sp, #104	@ 0x68
 80118a0:	9300      	str	r3, [sp, #0]
 80118a2:	4a8e      	ldr	r2, [pc, #568]	@ (8011adc <_strtod_l+0x28c>)
 80118a4:	9805      	ldr	r0, [sp, #20]
 80118a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80118a8:	a919      	add	r1, sp, #100	@ 0x64
 80118aa:	f001 f89f 	bl	80129ec <__gethex>
 80118ae:	f010 060f 	ands.w	r6, r0, #15
 80118b2:	4604      	mov	r4, r0
 80118b4:	d005      	beq.n	80118c2 <_strtod_l+0x72>
 80118b6:	2e06      	cmp	r6, #6
 80118b8:	d128      	bne.n	801190c <_strtod_l+0xbc>
 80118ba:	3501      	adds	r5, #1
 80118bc:	2300      	movs	r3, #0
 80118be:	9519      	str	r5, [sp, #100]	@ 0x64
 80118c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80118c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	f040 858e 	bne.w	80123e6 <_strtod_l+0xb96>
 80118ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80118cc:	b1cb      	cbz	r3, 8011902 <_strtod_l+0xb2>
 80118ce:	4652      	mov	r2, sl
 80118d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80118d4:	ec43 2b10 	vmov	d0, r2, r3
 80118d8:	b01f      	add	sp, #124	@ 0x7c
 80118da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118de:	2920      	cmp	r1, #32
 80118e0:	d1ce      	bne.n	8011880 <_strtod_l+0x30>
 80118e2:	3201      	adds	r2, #1
 80118e4:	e7c1      	b.n	801186a <_strtod_l+0x1a>
 80118e6:	292d      	cmp	r1, #45	@ 0x2d
 80118e8:	d1ca      	bne.n	8011880 <_strtod_l+0x30>
 80118ea:	2101      	movs	r1, #1
 80118ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80118ee:	1c51      	adds	r1, r2, #1
 80118f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80118f2:	7852      	ldrb	r2, [r2, #1]
 80118f4:	2a00      	cmp	r2, #0
 80118f6:	d1c5      	bne.n	8011884 <_strtod_l+0x34>
 80118f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80118fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	f040 8570 	bne.w	80123e2 <_strtod_l+0xb92>
 8011902:	4652      	mov	r2, sl
 8011904:	465b      	mov	r3, fp
 8011906:	e7e5      	b.n	80118d4 <_strtod_l+0x84>
 8011908:	2100      	movs	r1, #0
 801190a:	e7ef      	b.n	80118ec <_strtod_l+0x9c>
 801190c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801190e:	b13a      	cbz	r2, 8011920 <_strtod_l+0xd0>
 8011910:	2135      	movs	r1, #53	@ 0x35
 8011912:	a81c      	add	r0, sp, #112	@ 0x70
 8011914:	f7ff ff3a 	bl	801178c <__copybits>
 8011918:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801191a:	9805      	ldr	r0, [sp, #20]
 801191c:	f7ff fb08 	bl	8010f30 <_Bfree>
 8011920:	3e01      	subs	r6, #1
 8011922:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011924:	2e04      	cmp	r6, #4
 8011926:	d806      	bhi.n	8011936 <_strtod_l+0xe6>
 8011928:	e8df f006 	tbb	[pc, r6]
 801192c:	201d0314 	.word	0x201d0314
 8011930:	14          	.byte	0x14
 8011931:	00          	.byte	0x00
 8011932:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011936:	05e1      	lsls	r1, r4, #23
 8011938:	bf48      	it	mi
 801193a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801193e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011942:	0d1b      	lsrs	r3, r3, #20
 8011944:	051b      	lsls	r3, r3, #20
 8011946:	2b00      	cmp	r3, #0
 8011948:	d1bb      	bne.n	80118c2 <_strtod_l+0x72>
 801194a:	f7fe fb23 	bl	800ff94 <__errno>
 801194e:	2322      	movs	r3, #34	@ 0x22
 8011950:	6003      	str	r3, [r0, #0]
 8011952:	e7b6      	b.n	80118c2 <_strtod_l+0x72>
 8011954:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011958:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801195c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011960:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011964:	e7e7      	b.n	8011936 <_strtod_l+0xe6>
 8011966:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011ae4 <_strtod_l+0x294>
 801196a:	e7e4      	b.n	8011936 <_strtod_l+0xe6>
 801196c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011970:	f04f 3aff 	mov.w	sl, #4294967295
 8011974:	e7df      	b.n	8011936 <_strtod_l+0xe6>
 8011976:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011978:	1c5a      	adds	r2, r3, #1
 801197a:	9219      	str	r2, [sp, #100]	@ 0x64
 801197c:	785b      	ldrb	r3, [r3, #1]
 801197e:	2b30      	cmp	r3, #48	@ 0x30
 8011980:	d0f9      	beq.n	8011976 <_strtod_l+0x126>
 8011982:	2b00      	cmp	r3, #0
 8011984:	d09d      	beq.n	80118c2 <_strtod_l+0x72>
 8011986:	2301      	movs	r3, #1
 8011988:	9309      	str	r3, [sp, #36]	@ 0x24
 801198a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801198c:	930c      	str	r3, [sp, #48]	@ 0x30
 801198e:	2300      	movs	r3, #0
 8011990:	9308      	str	r3, [sp, #32]
 8011992:	930a      	str	r3, [sp, #40]	@ 0x28
 8011994:	461f      	mov	r7, r3
 8011996:	220a      	movs	r2, #10
 8011998:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801199a:	7805      	ldrb	r5, [r0, #0]
 801199c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80119a0:	b2d9      	uxtb	r1, r3
 80119a2:	2909      	cmp	r1, #9
 80119a4:	d928      	bls.n	80119f8 <_strtod_l+0x1a8>
 80119a6:	494e      	ldr	r1, [pc, #312]	@ (8011ae0 <_strtod_l+0x290>)
 80119a8:	2201      	movs	r2, #1
 80119aa:	f000 ff59 	bl	8012860 <strncmp>
 80119ae:	2800      	cmp	r0, #0
 80119b0:	d032      	beq.n	8011a18 <_strtod_l+0x1c8>
 80119b2:	2000      	movs	r0, #0
 80119b4:	462a      	mov	r2, r5
 80119b6:	4681      	mov	r9, r0
 80119b8:	463d      	mov	r5, r7
 80119ba:	4603      	mov	r3, r0
 80119bc:	2a65      	cmp	r2, #101	@ 0x65
 80119be:	d001      	beq.n	80119c4 <_strtod_l+0x174>
 80119c0:	2a45      	cmp	r2, #69	@ 0x45
 80119c2:	d114      	bne.n	80119ee <_strtod_l+0x19e>
 80119c4:	b91d      	cbnz	r5, 80119ce <_strtod_l+0x17e>
 80119c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119c8:	4302      	orrs	r2, r0
 80119ca:	d095      	beq.n	80118f8 <_strtod_l+0xa8>
 80119cc:	2500      	movs	r5, #0
 80119ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80119d0:	1c62      	adds	r2, r4, #1
 80119d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80119d4:	7862      	ldrb	r2, [r4, #1]
 80119d6:	2a2b      	cmp	r2, #43	@ 0x2b
 80119d8:	d077      	beq.n	8011aca <_strtod_l+0x27a>
 80119da:	2a2d      	cmp	r2, #45	@ 0x2d
 80119dc:	d07b      	beq.n	8011ad6 <_strtod_l+0x286>
 80119de:	f04f 0c00 	mov.w	ip, #0
 80119e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80119e6:	2909      	cmp	r1, #9
 80119e8:	f240 8082 	bls.w	8011af0 <_strtod_l+0x2a0>
 80119ec:	9419      	str	r4, [sp, #100]	@ 0x64
 80119ee:	f04f 0800 	mov.w	r8, #0
 80119f2:	e0a2      	b.n	8011b3a <_strtod_l+0x2ea>
 80119f4:	2300      	movs	r3, #0
 80119f6:	e7c7      	b.n	8011988 <_strtod_l+0x138>
 80119f8:	2f08      	cmp	r7, #8
 80119fa:	bfd5      	itete	le
 80119fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80119fe:	9908      	ldrgt	r1, [sp, #32]
 8011a00:	fb02 3301 	mlale	r3, r2, r1, r3
 8011a04:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011a08:	f100 0001 	add.w	r0, r0, #1
 8011a0c:	bfd4      	ite	le
 8011a0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011a10:	9308      	strgt	r3, [sp, #32]
 8011a12:	3701      	adds	r7, #1
 8011a14:	9019      	str	r0, [sp, #100]	@ 0x64
 8011a16:	e7bf      	b.n	8011998 <_strtod_l+0x148>
 8011a18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a1a:	1c5a      	adds	r2, r3, #1
 8011a1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a1e:	785a      	ldrb	r2, [r3, #1]
 8011a20:	b37f      	cbz	r7, 8011a82 <_strtod_l+0x232>
 8011a22:	4681      	mov	r9, r0
 8011a24:	463d      	mov	r5, r7
 8011a26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011a2a:	2b09      	cmp	r3, #9
 8011a2c:	d912      	bls.n	8011a54 <_strtod_l+0x204>
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e7c4      	b.n	80119bc <_strtod_l+0x16c>
 8011a32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a34:	1c5a      	adds	r2, r3, #1
 8011a36:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a38:	785a      	ldrb	r2, [r3, #1]
 8011a3a:	3001      	adds	r0, #1
 8011a3c:	2a30      	cmp	r2, #48	@ 0x30
 8011a3e:	d0f8      	beq.n	8011a32 <_strtod_l+0x1e2>
 8011a40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011a44:	2b08      	cmp	r3, #8
 8011a46:	f200 84d3 	bhi.w	80123f0 <_strtod_l+0xba0>
 8011a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8011a4e:	4681      	mov	r9, r0
 8011a50:	2000      	movs	r0, #0
 8011a52:	4605      	mov	r5, r0
 8011a54:	3a30      	subs	r2, #48	@ 0x30
 8011a56:	f100 0301 	add.w	r3, r0, #1
 8011a5a:	d02a      	beq.n	8011ab2 <_strtod_l+0x262>
 8011a5c:	4499      	add	r9, r3
 8011a5e:	eb00 0c05 	add.w	ip, r0, r5
 8011a62:	462b      	mov	r3, r5
 8011a64:	210a      	movs	r1, #10
 8011a66:	4563      	cmp	r3, ip
 8011a68:	d10d      	bne.n	8011a86 <_strtod_l+0x236>
 8011a6a:	1c69      	adds	r1, r5, #1
 8011a6c:	4401      	add	r1, r0
 8011a6e:	4428      	add	r0, r5
 8011a70:	2808      	cmp	r0, #8
 8011a72:	dc16      	bgt.n	8011aa2 <_strtod_l+0x252>
 8011a74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011a76:	230a      	movs	r3, #10
 8011a78:	fb03 2300 	mla	r3, r3, r0, r2
 8011a7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a7e:	2300      	movs	r3, #0
 8011a80:	e018      	b.n	8011ab4 <_strtod_l+0x264>
 8011a82:	4638      	mov	r0, r7
 8011a84:	e7da      	b.n	8011a3c <_strtod_l+0x1ec>
 8011a86:	2b08      	cmp	r3, #8
 8011a88:	f103 0301 	add.w	r3, r3, #1
 8011a8c:	dc03      	bgt.n	8011a96 <_strtod_l+0x246>
 8011a8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011a90:	434e      	muls	r6, r1
 8011a92:	960a      	str	r6, [sp, #40]	@ 0x28
 8011a94:	e7e7      	b.n	8011a66 <_strtod_l+0x216>
 8011a96:	2b10      	cmp	r3, #16
 8011a98:	bfde      	ittt	le
 8011a9a:	9e08      	ldrle	r6, [sp, #32]
 8011a9c:	434e      	mulle	r6, r1
 8011a9e:	9608      	strle	r6, [sp, #32]
 8011aa0:	e7e1      	b.n	8011a66 <_strtod_l+0x216>
 8011aa2:	280f      	cmp	r0, #15
 8011aa4:	dceb      	bgt.n	8011a7e <_strtod_l+0x22e>
 8011aa6:	9808      	ldr	r0, [sp, #32]
 8011aa8:	230a      	movs	r3, #10
 8011aaa:	fb03 2300 	mla	r3, r3, r0, r2
 8011aae:	9308      	str	r3, [sp, #32]
 8011ab0:	e7e5      	b.n	8011a7e <_strtod_l+0x22e>
 8011ab2:	4629      	mov	r1, r5
 8011ab4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011ab6:	1c50      	adds	r0, r2, #1
 8011ab8:	9019      	str	r0, [sp, #100]	@ 0x64
 8011aba:	7852      	ldrb	r2, [r2, #1]
 8011abc:	4618      	mov	r0, r3
 8011abe:	460d      	mov	r5, r1
 8011ac0:	e7b1      	b.n	8011a26 <_strtod_l+0x1d6>
 8011ac2:	f04f 0900 	mov.w	r9, #0
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	e77d      	b.n	80119c6 <_strtod_l+0x176>
 8011aca:	f04f 0c00 	mov.w	ip, #0
 8011ace:	1ca2      	adds	r2, r4, #2
 8011ad0:	9219      	str	r2, [sp, #100]	@ 0x64
 8011ad2:	78a2      	ldrb	r2, [r4, #2]
 8011ad4:	e785      	b.n	80119e2 <_strtod_l+0x192>
 8011ad6:	f04f 0c01 	mov.w	ip, #1
 8011ada:	e7f8      	b.n	8011ace <_strtod_l+0x27e>
 8011adc:	08016708 	.word	0x08016708
 8011ae0:	080166f0 	.word	0x080166f0
 8011ae4:	7ff00000 	.word	0x7ff00000
 8011ae8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011aea:	1c51      	adds	r1, r2, #1
 8011aec:	9119      	str	r1, [sp, #100]	@ 0x64
 8011aee:	7852      	ldrb	r2, [r2, #1]
 8011af0:	2a30      	cmp	r2, #48	@ 0x30
 8011af2:	d0f9      	beq.n	8011ae8 <_strtod_l+0x298>
 8011af4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011af8:	2908      	cmp	r1, #8
 8011afa:	f63f af78 	bhi.w	80119ee <_strtod_l+0x19e>
 8011afe:	3a30      	subs	r2, #48	@ 0x30
 8011b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8011b02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011b06:	f04f 080a 	mov.w	r8, #10
 8011b0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b0c:	1c56      	adds	r6, r2, #1
 8011b0e:	9619      	str	r6, [sp, #100]	@ 0x64
 8011b10:	7852      	ldrb	r2, [r2, #1]
 8011b12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011b16:	f1be 0f09 	cmp.w	lr, #9
 8011b1a:	d939      	bls.n	8011b90 <_strtod_l+0x340>
 8011b1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011b1e:	1a76      	subs	r6, r6, r1
 8011b20:	2e08      	cmp	r6, #8
 8011b22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011b26:	dc03      	bgt.n	8011b30 <_strtod_l+0x2e0>
 8011b28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011b2a:	4588      	cmp	r8, r1
 8011b2c:	bfa8      	it	ge
 8011b2e:	4688      	movge	r8, r1
 8011b30:	f1bc 0f00 	cmp.w	ip, #0
 8011b34:	d001      	beq.n	8011b3a <_strtod_l+0x2ea>
 8011b36:	f1c8 0800 	rsb	r8, r8, #0
 8011b3a:	2d00      	cmp	r5, #0
 8011b3c:	d14e      	bne.n	8011bdc <_strtod_l+0x38c>
 8011b3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b40:	4308      	orrs	r0, r1
 8011b42:	f47f aebe 	bne.w	80118c2 <_strtod_l+0x72>
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	f47f aed6 	bne.w	80118f8 <_strtod_l+0xa8>
 8011b4c:	2a69      	cmp	r2, #105	@ 0x69
 8011b4e:	d028      	beq.n	8011ba2 <_strtod_l+0x352>
 8011b50:	dc25      	bgt.n	8011b9e <_strtod_l+0x34e>
 8011b52:	2a49      	cmp	r2, #73	@ 0x49
 8011b54:	d025      	beq.n	8011ba2 <_strtod_l+0x352>
 8011b56:	2a4e      	cmp	r2, #78	@ 0x4e
 8011b58:	f47f aece 	bne.w	80118f8 <_strtod_l+0xa8>
 8011b5c:	499b      	ldr	r1, [pc, #620]	@ (8011dcc <_strtod_l+0x57c>)
 8011b5e:	a819      	add	r0, sp, #100	@ 0x64
 8011b60:	f001 f966 	bl	8012e30 <__match>
 8011b64:	2800      	cmp	r0, #0
 8011b66:	f43f aec7 	beq.w	80118f8 <_strtod_l+0xa8>
 8011b6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	2b28      	cmp	r3, #40	@ 0x28
 8011b70:	d12e      	bne.n	8011bd0 <_strtod_l+0x380>
 8011b72:	4997      	ldr	r1, [pc, #604]	@ (8011dd0 <_strtod_l+0x580>)
 8011b74:	aa1c      	add	r2, sp, #112	@ 0x70
 8011b76:	a819      	add	r0, sp, #100	@ 0x64
 8011b78:	f001 f96e 	bl	8012e58 <__hexnan>
 8011b7c:	2805      	cmp	r0, #5
 8011b7e:	d127      	bne.n	8011bd0 <_strtod_l+0x380>
 8011b80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011b82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011b86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011b8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011b8e:	e698      	b.n	80118c2 <_strtod_l+0x72>
 8011b90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011b92:	fb08 2101 	mla	r1, r8, r1, r2
 8011b96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011b9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8011b9c:	e7b5      	b.n	8011b0a <_strtod_l+0x2ba>
 8011b9e:	2a6e      	cmp	r2, #110	@ 0x6e
 8011ba0:	e7da      	b.n	8011b58 <_strtod_l+0x308>
 8011ba2:	498c      	ldr	r1, [pc, #560]	@ (8011dd4 <_strtod_l+0x584>)
 8011ba4:	a819      	add	r0, sp, #100	@ 0x64
 8011ba6:	f001 f943 	bl	8012e30 <__match>
 8011baa:	2800      	cmp	r0, #0
 8011bac:	f43f aea4 	beq.w	80118f8 <_strtod_l+0xa8>
 8011bb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011bb2:	4989      	ldr	r1, [pc, #548]	@ (8011dd8 <_strtod_l+0x588>)
 8011bb4:	3b01      	subs	r3, #1
 8011bb6:	a819      	add	r0, sp, #100	@ 0x64
 8011bb8:	9319      	str	r3, [sp, #100]	@ 0x64
 8011bba:	f001 f939 	bl	8012e30 <__match>
 8011bbe:	b910      	cbnz	r0, 8011bc6 <_strtod_l+0x376>
 8011bc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	9319      	str	r3, [sp, #100]	@ 0x64
 8011bc6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011de8 <_strtod_l+0x598>
 8011bca:	f04f 0a00 	mov.w	sl, #0
 8011bce:	e678      	b.n	80118c2 <_strtod_l+0x72>
 8011bd0:	4882      	ldr	r0, [pc, #520]	@ (8011ddc <_strtod_l+0x58c>)
 8011bd2:	f000 fe69 	bl	80128a8 <nan>
 8011bd6:	ec5b ab10 	vmov	sl, fp, d0
 8011bda:	e672      	b.n	80118c2 <_strtod_l+0x72>
 8011bdc:	eba8 0309 	sub.w	r3, r8, r9
 8011be0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011be4:	2f00      	cmp	r7, #0
 8011be6:	bf08      	it	eq
 8011be8:	462f      	moveq	r7, r5
 8011bea:	2d10      	cmp	r5, #16
 8011bec:	462c      	mov	r4, r5
 8011bee:	bfa8      	it	ge
 8011bf0:	2410      	movge	r4, #16
 8011bf2:	f7ee fc97 	bl	8000524 <__aeabi_ui2d>
 8011bf6:	2d09      	cmp	r5, #9
 8011bf8:	4682      	mov	sl, r0
 8011bfa:	468b      	mov	fp, r1
 8011bfc:	dc13      	bgt.n	8011c26 <_strtod_l+0x3d6>
 8011bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	f43f ae5e 	beq.w	80118c2 <_strtod_l+0x72>
 8011c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c08:	dd78      	ble.n	8011cfc <_strtod_l+0x4ac>
 8011c0a:	2b16      	cmp	r3, #22
 8011c0c:	dc5f      	bgt.n	8011cce <_strtod_l+0x47e>
 8011c0e:	4974      	ldr	r1, [pc, #464]	@ (8011de0 <_strtod_l+0x590>)
 8011c10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c18:	4652      	mov	r2, sl
 8011c1a:	465b      	mov	r3, fp
 8011c1c:	f7ee fcfc 	bl	8000618 <__aeabi_dmul>
 8011c20:	4682      	mov	sl, r0
 8011c22:	468b      	mov	fp, r1
 8011c24:	e64d      	b.n	80118c2 <_strtod_l+0x72>
 8011c26:	4b6e      	ldr	r3, [pc, #440]	@ (8011de0 <_strtod_l+0x590>)
 8011c28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011c2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011c30:	f7ee fcf2 	bl	8000618 <__aeabi_dmul>
 8011c34:	4682      	mov	sl, r0
 8011c36:	9808      	ldr	r0, [sp, #32]
 8011c38:	468b      	mov	fp, r1
 8011c3a:	f7ee fc73 	bl	8000524 <__aeabi_ui2d>
 8011c3e:	4602      	mov	r2, r0
 8011c40:	460b      	mov	r3, r1
 8011c42:	4650      	mov	r0, sl
 8011c44:	4659      	mov	r1, fp
 8011c46:	f7ee fb31 	bl	80002ac <__adddf3>
 8011c4a:	2d0f      	cmp	r5, #15
 8011c4c:	4682      	mov	sl, r0
 8011c4e:	468b      	mov	fp, r1
 8011c50:	ddd5      	ble.n	8011bfe <_strtod_l+0x3ae>
 8011c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c54:	1b2c      	subs	r4, r5, r4
 8011c56:	441c      	add	r4, r3
 8011c58:	2c00      	cmp	r4, #0
 8011c5a:	f340 8096 	ble.w	8011d8a <_strtod_l+0x53a>
 8011c5e:	f014 030f 	ands.w	r3, r4, #15
 8011c62:	d00a      	beq.n	8011c7a <_strtod_l+0x42a>
 8011c64:	495e      	ldr	r1, [pc, #376]	@ (8011de0 <_strtod_l+0x590>)
 8011c66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011c6a:	4652      	mov	r2, sl
 8011c6c:	465b      	mov	r3, fp
 8011c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c72:	f7ee fcd1 	bl	8000618 <__aeabi_dmul>
 8011c76:	4682      	mov	sl, r0
 8011c78:	468b      	mov	fp, r1
 8011c7a:	f034 040f 	bics.w	r4, r4, #15
 8011c7e:	d073      	beq.n	8011d68 <_strtod_l+0x518>
 8011c80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011c84:	dd48      	ble.n	8011d18 <_strtod_l+0x4c8>
 8011c86:	2400      	movs	r4, #0
 8011c88:	46a0      	mov	r8, r4
 8011c8a:	940a      	str	r4, [sp, #40]	@ 0x28
 8011c8c:	46a1      	mov	r9, r4
 8011c8e:	9a05      	ldr	r2, [sp, #20]
 8011c90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011de8 <_strtod_l+0x598>
 8011c94:	2322      	movs	r3, #34	@ 0x22
 8011c96:	6013      	str	r3, [r2, #0]
 8011c98:	f04f 0a00 	mov.w	sl, #0
 8011c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f43f ae0f 	beq.w	80118c2 <_strtod_l+0x72>
 8011ca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011ca6:	9805      	ldr	r0, [sp, #20]
 8011ca8:	f7ff f942 	bl	8010f30 <_Bfree>
 8011cac:	9805      	ldr	r0, [sp, #20]
 8011cae:	4649      	mov	r1, r9
 8011cb0:	f7ff f93e 	bl	8010f30 <_Bfree>
 8011cb4:	9805      	ldr	r0, [sp, #20]
 8011cb6:	4641      	mov	r1, r8
 8011cb8:	f7ff f93a 	bl	8010f30 <_Bfree>
 8011cbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011cbe:	9805      	ldr	r0, [sp, #20]
 8011cc0:	f7ff f936 	bl	8010f30 <_Bfree>
 8011cc4:	9805      	ldr	r0, [sp, #20]
 8011cc6:	4621      	mov	r1, r4
 8011cc8:	f7ff f932 	bl	8010f30 <_Bfree>
 8011ccc:	e5f9      	b.n	80118c2 <_strtod_l+0x72>
 8011cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	dbbc      	blt.n	8011c52 <_strtod_l+0x402>
 8011cd8:	4c41      	ldr	r4, [pc, #260]	@ (8011de0 <_strtod_l+0x590>)
 8011cda:	f1c5 050f 	rsb	r5, r5, #15
 8011cde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011ce2:	4652      	mov	r2, sl
 8011ce4:	465b      	mov	r3, fp
 8011ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cea:	f7ee fc95 	bl	8000618 <__aeabi_dmul>
 8011cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cf0:	1b5d      	subs	r5, r3, r5
 8011cf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011cf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011cfa:	e78f      	b.n	8011c1c <_strtod_l+0x3cc>
 8011cfc:	3316      	adds	r3, #22
 8011cfe:	dba8      	blt.n	8011c52 <_strtod_l+0x402>
 8011d00:	4b37      	ldr	r3, [pc, #220]	@ (8011de0 <_strtod_l+0x590>)
 8011d02:	eba9 0808 	sub.w	r8, r9, r8
 8011d06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011d0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011d0e:	4650      	mov	r0, sl
 8011d10:	4659      	mov	r1, fp
 8011d12:	f7ee fdab 	bl	800086c <__aeabi_ddiv>
 8011d16:	e783      	b.n	8011c20 <_strtod_l+0x3d0>
 8011d18:	4b32      	ldr	r3, [pc, #200]	@ (8011de4 <_strtod_l+0x594>)
 8011d1a:	9308      	str	r3, [sp, #32]
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	1124      	asrs	r4, r4, #4
 8011d20:	4650      	mov	r0, sl
 8011d22:	4659      	mov	r1, fp
 8011d24:	461e      	mov	r6, r3
 8011d26:	2c01      	cmp	r4, #1
 8011d28:	dc21      	bgt.n	8011d6e <_strtod_l+0x51e>
 8011d2a:	b10b      	cbz	r3, 8011d30 <_strtod_l+0x4e0>
 8011d2c:	4682      	mov	sl, r0
 8011d2e:	468b      	mov	fp, r1
 8011d30:	492c      	ldr	r1, [pc, #176]	@ (8011de4 <_strtod_l+0x594>)
 8011d32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011d36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011d3a:	4652      	mov	r2, sl
 8011d3c:	465b      	mov	r3, fp
 8011d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d42:	f7ee fc69 	bl	8000618 <__aeabi_dmul>
 8011d46:	4b28      	ldr	r3, [pc, #160]	@ (8011de8 <_strtod_l+0x598>)
 8011d48:	460a      	mov	r2, r1
 8011d4a:	400b      	ands	r3, r1
 8011d4c:	4927      	ldr	r1, [pc, #156]	@ (8011dec <_strtod_l+0x59c>)
 8011d4e:	428b      	cmp	r3, r1
 8011d50:	4682      	mov	sl, r0
 8011d52:	d898      	bhi.n	8011c86 <_strtod_l+0x436>
 8011d54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011d58:	428b      	cmp	r3, r1
 8011d5a:	bf86      	itte	hi
 8011d5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011df0 <_strtod_l+0x5a0>
 8011d60:	f04f 3aff 	movhi.w	sl, #4294967295
 8011d64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011d68:	2300      	movs	r3, #0
 8011d6a:	9308      	str	r3, [sp, #32]
 8011d6c:	e07a      	b.n	8011e64 <_strtod_l+0x614>
 8011d6e:	07e2      	lsls	r2, r4, #31
 8011d70:	d505      	bpl.n	8011d7e <_strtod_l+0x52e>
 8011d72:	9b08      	ldr	r3, [sp, #32]
 8011d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d78:	f7ee fc4e 	bl	8000618 <__aeabi_dmul>
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	9a08      	ldr	r2, [sp, #32]
 8011d80:	3208      	adds	r2, #8
 8011d82:	3601      	adds	r6, #1
 8011d84:	1064      	asrs	r4, r4, #1
 8011d86:	9208      	str	r2, [sp, #32]
 8011d88:	e7cd      	b.n	8011d26 <_strtod_l+0x4d6>
 8011d8a:	d0ed      	beq.n	8011d68 <_strtod_l+0x518>
 8011d8c:	4264      	negs	r4, r4
 8011d8e:	f014 020f 	ands.w	r2, r4, #15
 8011d92:	d00a      	beq.n	8011daa <_strtod_l+0x55a>
 8011d94:	4b12      	ldr	r3, [pc, #72]	@ (8011de0 <_strtod_l+0x590>)
 8011d96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d9a:	4650      	mov	r0, sl
 8011d9c:	4659      	mov	r1, fp
 8011d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da2:	f7ee fd63 	bl	800086c <__aeabi_ddiv>
 8011da6:	4682      	mov	sl, r0
 8011da8:	468b      	mov	fp, r1
 8011daa:	1124      	asrs	r4, r4, #4
 8011dac:	d0dc      	beq.n	8011d68 <_strtod_l+0x518>
 8011dae:	2c1f      	cmp	r4, #31
 8011db0:	dd20      	ble.n	8011df4 <_strtod_l+0x5a4>
 8011db2:	2400      	movs	r4, #0
 8011db4:	46a0      	mov	r8, r4
 8011db6:	940a      	str	r4, [sp, #40]	@ 0x28
 8011db8:	46a1      	mov	r9, r4
 8011dba:	9a05      	ldr	r2, [sp, #20]
 8011dbc:	2322      	movs	r3, #34	@ 0x22
 8011dbe:	f04f 0a00 	mov.w	sl, #0
 8011dc2:	f04f 0b00 	mov.w	fp, #0
 8011dc6:	6013      	str	r3, [r2, #0]
 8011dc8:	e768      	b.n	8011c9c <_strtod_l+0x44c>
 8011dca:	bf00      	nop
 8011dcc:	080164e2 	.word	0x080164e2
 8011dd0:	080166f4 	.word	0x080166f4
 8011dd4:	080164da 	.word	0x080164da
 8011dd8:	08016511 	.word	0x08016511
 8011ddc:	0801679c 	.word	0x0801679c
 8011de0:	08016628 	.word	0x08016628
 8011de4:	08016600 	.word	0x08016600
 8011de8:	7ff00000 	.word	0x7ff00000
 8011dec:	7ca00000 	.word	0x7ca00000
 8011df0:	7fefffff 	.word	0x7fefffff
 8011df4:	f014 0310 	ands.w	r3, r4, #16
 8011df8:	bf18      	it	ne
 8011dfa:	236a      	movne	r3, #106	@ 0x6a
 8011dfc:	4ea9      	ldr	r6, [pc, #676]	@ (80120a4 <_strtod_l+0x854>)
 8011dfe:	9308      	str	r3, [sp, #32]
 8011e00:	4650      	mov	r0, sl
 8011e02:	4659      	mov	r1, fp
 8011e04:	2300      	movs	r3, #0
 8011e06:	07e2      	lsls	r2, r4, #31
 8011e08:	d504      	bpl.n	8011e14 <_strtod_l+0x5c4>
 8011e0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e0e:	f7ee fc03 	bl	8000618 <__aeabi_dmul>
 8011e12:	2301      	movs	r3, #1
 8011e14:	1064      	asrs	r4, r4, #1
 8011e16:	f106 0608 	add.w	r6, r6, #8
 8011e1a:	d1f4      	bne.n	8011e06 <_strtod_l+0x5b6>
 8011e1c:	b10b      	cbz	r3, 8011e22 <_strtod_l+0x5d2>
 8011e1e:	4682      	mov	sl, r0
 8011e20:	468b      	mov	fp, r1
 8011e22:	9b08      	ldr	r3, [sp, #32]
 8011e24:	b1b3      	cbz	r3, 8011e54 <_strtod_l+0x604>
 8011e26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011e2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	4659      	mov	r1, fp
 8011e32:	dd0f      	ble.n	8011e54 <_strtod_l+0x604>
 8011e34:	2b1f      	cmp	r3, #31
 8011e36:	dd55      	ble.n	8011ee4 <_strtod_l+0x694>
 8011e38:	2b34      	cmp	r3, #52	@ 0x34
 8011e3a:	bfde      	ittt	le
 8011e3c:	f04f 33ff 	movle.w	r3, #4294967295
 8011e40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011e44:	4093      	lslle	r3, r2
 8011e46:	f04f 0a00 	mov.w	sl, #0
 8011e4a:	bfcc      	ite	gt
 8011e4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011e50:	ea03 0b01 	andle.w	fp, r3, r1
 8011e54:	2200      	movs	r2, #0
 8011e56:	2300      	movs	r3, #0
 8011e58:	4650      	mov	r0, sl
 8011e5a:	4659      	mov	r1, fp
 8011e5c:	f7ee fe44 	bl	8000ae8 <__aeabi_dcmpeq>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	d1a6      	bne.n	8011db2 <_strtod_l+0x562>
 8011e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e66:	9300      	str	r3, [sp, #0]
 8011e68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011e6a:	9805      	ldr	r0, [sp, #20]
 8011e6c:	462b      	mov	r3, r5
 8011e6e:	463a      	mov	r2, r7
 8011e70:	f7ff f8c6 	bl	8011000 <__s2b>
 8011e74:	900a      	str	r0, [sp, #40]	@ 0x28
 8011e76:	2800      	cmp	r0, #0
 8011e78:	f43f af05 	beq.w	8011c86 <_strtod_l+0x436>
 8011e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e7e:	2a00      	cmp	r2, #0
 8011e80:	eba9 0308 	sub.w	r3, r9, r8
 8011e84:	bfa8      	it	ge
 8011e86:	2300      	movge	r3, #0
 8011e88:	9312      	str	r3, [sp, #72]	@ 0x48
 8011e8a:	2400      	movs	r4, #0
 8011e8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011e90:	9316      	str	r3, [sp, #88]	@ 0x58
 8011e92:	46a0      	mov	r8, r4
 8011e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e96:	9805      	ldr	r0, [sp, #20]
 8011e98:	6859      	ldr	r1, [r3, #4]
 8011e9a:	f7ff f809 	bl	8010eb0 <_Balloc>
 8011e9e:	4681      	mov	r9, r0
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	f43f aef4 	beq.w	8011c8e <_strtod_l+0x43e>
 8011ea6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ea8:	691a      	ldr	r2, [r3, #16]
 8011eaa:	3202      	adds	r2, #2
 8011eac:	f103 010c 	add.w	r1, r3, #12
 8011eb0:	0092      	lsls	r2, r2, #2
 8011eb2:	300c      	adds	r0, #12
 8011eb4:	f7fe f89b 	bl	800ffee <memcpy>
 8011eb8:	ec4b ab10 	vmov	d0, sl, fp
 8011ebc:	9805      	ldr	r0, [sp, #20]
 8011ebe:	aa1c      	add	r2, sp, #112	@ 0x70
 8011ec0:	a91b      	add	r1, sp, #108	@ 0x6c
 8011ec2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011ec6:	f7ff fbd7 	bl	8011678 <__d2b>
 8011eca:	901a      	str	r0, [sp, #104]	@ 0x68
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	f43f aede 	beq.w	8011c8e <_strtod_l+0x43e>
 8011ed2:	9805      	ldr	r0, [sp, #20]
 8011ed4:	2101      	movs	r1, #1
 8011ed6:	f7ff f929 	bl	801112c <__i2b>
 8011eda:	4680      	mov	r8, r0
 8011edc:	b948      	cbnz	r0, 8011ef2 <_strtod_l+0x6a2>
 8011ede:	f04f 0800 	mov.w	r8, #0
 8011ee2:	e6d4      	b.n	8011c8e <_strtod_l+0x43e>
 8011ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8011eec:	ea03 0a0a 	and.w	sl, r3, sl
 8011ef0:	e7b0      	b.n	8011e54 <_strtod_l+0x604>
 8011ef2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011ef4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011ef6:	2d00      	cmp	r5, #0
 8011ef8:	bfab      	itete	ge
 8011efa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011efc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011efe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011f00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011f02:	bfac      	ite	ge
 8011f04:	18ef      	addge	r7, r5, r3
 8011f06:	1b5e      	sublt	r6, r3, r5
 8011f08:	9b08      	ldr	r3, [sp, #32]
 8011f0a:	1aed      	subs	r5, r5, r3
 8011f0c:	4415      	add	r5, r2
 8011f0e:	4b66      	ldr	r3, [pc, #408]	@ (80120a8 <_strtod_l+0x858>)
 8011f10:	3d01      	subs	r5, #1
 8011f12:	429d      	cmp	r5, r3
 8011f14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011f18:	da50      	bge.n	8011fbc <_strtod_l+0x76c>
 8011f1a:	1b5b      	subs	r3, r3, r5
 8011f1c:	2b1f      	cmp	r3, #31
 8011f1e:	eba2 0203 	sub.w	r2, r2, r3
 8011f22:	f04f 0101 	mov.w	r1, #1
 8011f26:	dc3d      	bgt.n	8011fa4 <_strtod_l+0x754>
 8011f28:	fa01 f303 	lsl.w	r3, r1, r3
 8011f2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011f2e:	2300      	movs	r3, #0
 8011f30:	9310      	str	r3, [sp, #64]	@ 0x40
 8011f32:	18bd      	adds	r5, r7, r2
 8011f34:	9b08      	ldr	r3, [sp, #32]
 8011f36:	42af      	cmp	r7, r5
 8011f38:	4416      	add	r6, r2
 8011f3a:	441e      	add	r6, r3
 8011f3c:	463b      	mov	r3, r7
 8011f3e:	bfa8      	it	ge
 8011f40:	462b      	movge	r3, r5
 8011f42:	42b3      	cmp	r3, r6
 8011f44:	bfa8      	it	ge
 8011f46:	4633      	movge	r3, r6
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	bfc2      	ittt	gt
 8011f4c:	1aed      	subgt	r5, r5, r3
 8011f4e:	1af6      	subgt	r6, r6, r3
 8011f50:	1aff      	subgt	r7, r7, r3
 8011f52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	dd16      	ble.n	8011f86 <_strtod_l+0x736>
 8011f58:	4641      	mov	r1, r8
 8011f5a:	9805      	ldr	r0, [sp, #20]
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	f7ff f9a5 	bl	80112ac <__pow5mult>
 8011f62:	4680      	mov	r8, r0
 8011f64:	2800      	cmp	r0, #0
 8011f66:	d0ba      	beq.n	8011ede <_strtod_l+0x68e>
 8011f68:	4601      	mov	r1, r0
 8011f6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011f6c:	9805      	ldr	r0, [sp, #20]
 8011f6e:	f7ff f8f3 	bl	8011158 <__multiply>
 8011f72:	900e      	str	r0, [sp, #56]	@ 0x38
 8011f74:	2800      	cmp	r0, #0
 8011f76:	f43f ae8a 	beq.w	8011c8e <_strtod_l+0x43e>
 8011f7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f7c:	9805      	ldr	r0, [sp, #20]
 8011f7e:	f7fe ffd7 	bl	8010f30 <_Bfree>
 8011f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f84:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f86:	2d00      	cmp	r5, #0
 8011f88:	dc1d      	bgt.n	8011fc6 <_strtod_l+0x776>
 8011f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	dd23      	ble.n	8011fd8 <_strtod_l+0x788>
 8011f90:	4649      	mov	r1, r9
 8011f92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011f94:	9805      	ldr	r0, [sp, #20]
 8011f96:	f7ff f989 	bl	80112ac <__pow5mult>
 8011f9a:	4681      	mov	r9, r0
 8011f9c:	b9e0      	cbnz	r0, 8011fd8 <_strtod_l+0x788>
 8011f9e:	f04f 0900 	mov.w	r9, #0
 8011fa2:	e674      	b.n	8011c8e <_strtod_l+0x43e>
 8011fa4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011fa8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011fac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011fb0:	35e2      	adds	r5, #226	@ 0xe2
 8011fb2:	fa01 f305 	lsl.w	r3, r1, r5
 8011fb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8011fb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011fba:	e7ba      	b.n	8011f32 <_strtod_l+0x6e2>
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011fc4:	e7b5      	b.n	8011f32 <_strtod_l+0x6e2>
 8011fc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011fc8:	9805      	ldr	r0, [sp, #20]
 8011fca:	462a      	mov	r2, r5
 8011fcc:	f7ff f9c8 	bl	8011360 <__lshift>
 8011fd0:	901a      	str	r0, [sp, #104]	@ 0x68
 8011fd2:	2800      	cmp	r0, #0
 8011fd4:	d1d9      	bne.n	8011f8a <_strtod_l+0x73a>
 8011fd6:	e65a      	b.n	8011c8e <_strtod_l+0x43e>
 8011fd8:	2e00      	cmp	r6, #0
 8011fda:	dd07      	ble.n	8011fec <_strtod_l+0x79c>
 8011fdc:	4649      	mov	r1, r9
 8011fde:	9805      	ldr	r0, [sp, #20]
 8011fe0:	4632      	mov	r2, r6
 8011fe2:	f7ff f9bd 	bl	8011360 <__lshift>
 8011fe6:	4681      	mov	r9, r0
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d0d8      	beq.n	8011f9e <_strtod_l+0x74e>
 8011fec:	2f00      	cmp	r7, #0
 8011fee:	dd08      	ble.n	8012002 <_strtod_l+0x7b2>
 8011ff0:	4641      	mov	r1, r8
 8011ff2:	9805      	ldr	r0, [sp, #20]
 8011ff4:	463a      	mov	r2, r7
 8011ff6:	f7ff f9b3 	bl	8011360 <__lshift>
 8011ffa:	4680      	mov	r8, r0
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	f43f ae46 	beq.w	8011c8e <_strtod_l+0x43e>
 8012002:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012004:	9805      	ldr	r0, [sp, #20]
 8012006:	464a      	mov	r2, r9
 8012008:	f7ff fa32 	bl	8011470 <__mdiff>
 801200c:	4604      	mov	r4, r0
 801200e:	2800      	cmp	r0, #0
 8012010:	f43f ae3d 	beq.w	8011c8e <_strtod_l+0x43e>
 8012014:	68c3      	ldr	r3, [r0, #12]
 8012016:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012018:	2300      	movs	r3, #0
 801201a:	60c3      	str	r3, [r0, #12]
 801201c:	4641      	mov	r1, r8
 801201e:	f7ff fa0b 	bl	8011438 <__mcmp>
 8012022:	2800      	cmp	r0, #0
 8012024:	da46      	bge.n	80120b4 <_strtod_l+0x864>
 8012026:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012028:	ea53 030a 	orrs.w	r3, r3, sl
 801202c:	d16c      	bne.n	8012108 <_strtod_l+0x8b8>
 801202e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012032:	2b00      	cmp	r3, #0
 8012034:	d168      	bne.n	8012108 <_strtod_l+0x8b8>
 8012036:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801203a:	0d1b      	lsrs	r3, r3, #20
 801203c:	051b      	lsls	r3, r3, #20
 801203e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012042:	d961      	bls.n	8012108 <_strtod_l+0x8b8>
 8012044:	6963      	ldr	r3, [r4, #20]
 8012046:	b913      	cbnz	r3, 801204e <_strtod_l+0x7fe>
 8012048:	6923      	ldr	r3, [r4, #16]
 801204a:	2b01      	cmp	r3, #1
 801204c:	dd5c      	ble.n	8012108 <_strtod_l+0x8b8>
 801204e:	4621      	mov	r1, r4
 8012050:	2201      	movs	r2, #1
 8012052:	9805      	ldr	r0, [sp, #20]
 8012054:	f7ff f984 	bl	8011360 <__lshift>
 8012058:	4641      	mov	r1, r8
 801205a:	4604      	mov	r4, r0
 801205c:	f7ff f9ec 	bl	8011438 <__mcmp>
 8012060:	2800      	cmp	r0, #0
 8012062:	dd51      	ble.n	8012108 <_strtod_l+0x8b8>
 8012064:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012068:	9a08      	ldr	r2, [sp, #32]
 801206a:	0d1b      	lsrs	r3, r3, #20
 801206c:	051b      	lsls	r3, r3, #20
 801206e:	2a00      	cmp	r2, #0
 8012070:	d06b      	beq.n	801214a <_strtod_l+0x8fa>
 8012072:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012076:	d868      	bhi.n	801214a <_strtod_l+0x8fa>
 8012078:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801207c:	f67f ae9d 	bls.w	8011dba <_strtod_l+0x56a>
 8012080:	4b0a      	ldr	r3, [pc, #40]	@ (80120ac <_strtod_l+0x85c>)
 8012082:	4650      	mov	r0, sl
 8012084:	4659      	mov	r1, fp
 8012086:	2200      	movs	r2, #0
 8012088:	f7ee fac6 	bl	8000618 <__aeabi_dmul>
 801208c:	4b08      	ldr	r3, [pc, #32]	@ (80120b0 <_strtod_l+0x860>)
 801208e:	400b      	ands	r3, r1
 8012090:	4682      	mov	sl, r0
 8012092:	468b      	mov	fp, r1
 8012094:	2b00      	cmp	r3, #0
 8012096:	f47f ae05 	bne.w	8011ca4 <_strtod_l+0x454>
 801209a:	9a05      	ldr	r2, [sp, #20]
 801209c:	2322      	movs	r3, #34	@ 0x22
 801209e:	6013      	str	r3, [r2, #0]
 80120a0:	e600      	b.n	8011ca4 <_strtod_l+0x454>
 80120a2:	bf00      	nop
 80120a4:	08016720 	.word	0x08016720
 80120a8:	fffffc02 	.word	0xfffffc02
 80120ac:	39500000 	.word	0x39500000
 80120b0:	7ff00000 	.word	0x7ff00000
 80120b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80120b8:	d165      	bne.n	8012186 <_strtod_l+0x936>
 80120ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80120bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120c0:	b35a      	cbz	r2, 801211a <_strtod_l+0x8ca>
 80120c2:	4a9f      	ldr	r2, [pc, #636]	@ (8012340 <_strtod_l+0xaf0>)
 80120c4:	4293      	cmp	r3, r2
 80120c6:	d12b      	bne.n	8012120 <_strtod_l+0x8d0>
 80120c8:	9b08      	ldr	r3, [sp, #32]
 80120ca:	4651      	mov	r1, sl
 80120cc:	b303      	cbz	r3, 8012110 <_strtod_l+0x8c0>
 80120ce:	4b9d      	ldr	r3, [pc, #628]	@ (8012344 <_strtod_l+0xaf4>)
 80120d0:	465a      	mov	r2, fp
 80120d2:	4013      	ands	r3, r2
 80120d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80120d8:	f04f 32ff 	mov.w	r2, #4294967295
 80120dc:	d81b      	bhi.n	8012116 <_strtod_l+0x8c6>
 80120de:	0d1b      	lsrs	r3, r3, #20
 80120e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80120e4:	fa02 f303 	lsl.w	r3, r2, r3
 80120e8:	4299      	cmp	r1, r3
 80120ea:	d119      	bne.n	8012120 <_strtod_l+0x8d0>
 80120ec:	4b96      	ldr	r3, [pc, #600]	@ (8012348 <_strtod_l+0xaf8>)
 80120ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d102      	bne.n	80120fa <_strtod_l+0x8aa>
 80120f4:	3101      	adds	r1, #1
 80120f6:	f43f adca 	beq.w	8011c8e <_strtod_l+0x43e>
 80120fa:	4b92      	ldr	r3, [pc, #584]	@ (8012344 <_strtod_l+0xaf4>)
 80120fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80120fe:	401a      	ands	r2, r3
 8012100:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012104:	f04f 0a00 	mov.w	sl, #0
 8012108:	9b08      	ldr	r3, [sp, #32]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d1b8      	bne.n	8012080 <_strtod_l+0x830>
 801210e:	e5c9      	b.n	8011ca4 <_strtod_l+0x454>
 8012110:	f04f 33ff 	mov.w	r3, #4294967295
 8012114:	e7e8      	b.n	80120e8 <_strtod_l+0x898>
 8012116:	4613      	mov	r3, r2
 8012118:	e7e6      	b.n	80120e8 <_strtod_l+0x898>
 801211a:	ea53 030a 	orrs.w	r3, r3, sl
 801211e:	d0a1      	beq.n	8012064 <_strtod_l+0x814>
 8012120:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012122:	b1db      	cbz	r3, 801215c <_strtod_l+0x90c>
 8012124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012126:	4213      	tst	r3, r2
 8012128:	d0ee      	beq.n	8012108 <_strtod_l+0x8b8>
 801212a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801212c:	9a08      	ldr	r2, [sp, #32]
 801212e:	4650      	mov	r0, sl
 8012130:	4659      	mov	r1, fp
 8012132:	b1bb      	cbz	r3, 8012164 <_strtod_l+0x914>
 8012134:	f7ff fb6e 	bl	8011814 <sulp>
 8012138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801213c:	ec53 2b10 	vmov	r2, r3, d0
 8012140:	f7ee f8b4 	bl	80002ac <__adddf3>
 8012144:	4682      	mov	sl, r0
 8012146:	468b      	mov	fp, r1
 8012148:	e7de      	b.n	8012108 <_strtod_l+0x8b8>
 801214a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801214e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012152:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012156:	f04f 3aff 	mov.w	sl, #4294967295
 801215a:	e7d5      	b.n	8012108 <_strtod_l+0x8b8>
 801215c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801215e:	ea13 0f0a 	tst.w	r3, sl
 8012162:	e7e1      	b.n	8012128 <_strtod_l+0x8d8>
 8012164:	f7ff fb56 	bl	8011814 <sulp>
 8012168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801216c:	ec53 2b10 	vmov	r2, r3, d0
 8012170:	f7ee f89a 	bl	80002a8 <__aeabi_dsub>
 8012174:	2200      	movs	r2, #0
 8012176:	2300      	movs	r3, #0
 8012178:	4682      	mov	sl, r0
 801217a:	468b      	mov	fp, r1
 801217c:	f7ee fcb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8012180:	2800      	cmp	r0, #0
 8012182:	d0c1      	beq.n	8012108 <_strtod_l+0x8b8>
 8012184:	e619      	b.n	8011dba <_strtod_l+0x56a>
 8012186:	4641      	mov	r1, r8
 8012188:	4620      	mov	r0, r4
 801218a:	f7ff facd 	bl	8011728 <__ratio>
 801218e:	ec57 6b10 	vmov	r6, r7, d0
 8012192:	2200      	movs	r2, #0
 8012194:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012198:	4630      	mov	r0, r6
 801219a:	4639      	mov	r1, r7
 801219c:	f7ee fcb8 	bl	8000b10 <__aeabi_dcmple>
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d06f      	beq.n	8012284 <_strtod_l+0xa34>
 80121a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d17a      	bne.n	80122a0 <_strtod_l+0xa50>
 80121aa:	f1ba 0f00 	cmp.w	sl, #0
 80121ae:	d158      	bne.n	8012262 <_strtod_l+0xa12>
 80121b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d15a      	bne.n	8012270 <_strtod_l+0xa20>
 80121ba:	4b64      	ldr	r3, [pc, #400]	@ (801234c <_strtod_l+0xafc>)
 80121bc:	2200      	movs	r2, #0
 80121be:	4630      	mov	r0, r6
 80121c0:	4639      	mov	r1, r7
 80121c2:	f7ee fc9b 	bl	8000afc <__aeabi_dcmplt>
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d159      	bne.n	801227e <_strtod_l+0xa2e>
 80121ca:	4630      	mov	r0, r6
 80121cc:	4639      	mov	r1, r7
 80121ce:	4b60      	ldr	r3, [pc, #384]	@ (8012350 <_strtod_l+0xb00>)
 80121d0:	2200      	movs	r2, #0
 80121d2:	f7ee fa21 	bl	8000618 <__aeabi_dmul>
 80121d6:	4606      	mov	r6, r0
 80121d8:	460f      	mov	r7, r1
 80121da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80121de:	9606      	str	r6, [sp, #24]
 80121e0:	9307      	str	r3, [sp, #28]
 80121e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121e6:	4d57      	ldr	r5, [pc, #348]	@ (8012344 <_strtod_l+0xaf4>)
 80121e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80121ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121ee:	401d      	ands	r5, r3
 80121f0:	4b58      	ldr	r3, [pc, #352]	@ (8012354 <_strtod_l+0xb04>)
 80121f2:	429d      	cmp	r5, r3
 80121f4:	f040 80b2 	bne.w	801235c <_strtod_l+0xb0c>
 80121f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80121fe:	ec4b ab10 	vmov	d0, sl, fp
 8012202:	f7ff f9c9 	bl	8011598 <__ulp>
 8012206:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801220a:	ec51 0b10 	vmov	r0, r1, d0
 801220e:	f7ee fa03 	bl	8000618 <__aeabi_dmul>
 8012212:	4652      	mov	r2, sl
 8012214:	465b      	mov	r3, fp
 8012216:	f7ee f849 	bl	80002ac <__adddf3>
 801221a:	460b      	mov	r3, r1
 801221c:	4949      	ldr	r1, [pc, #292]	@ (8012344 <_strtod_l+0xaf4>)
 801221e:	4a4e      	ldr	r2, [pc, #312]	@ (8012358 <_strtod_l+0xb08>)
 8012220:	4019      	ands	r1, r3
 8012222:	4291      	cmp	r1, r2
 8012224:	4682      	mov	sl, r0
 8012226:	d942      	bls.n	80122ae <_strtod_l+0xa5e>
 8012228:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801222a:	4b47      	ldr	r3, [pc, #284]	@ (8012348 <_strtod_l+0xaf8>)
 801222c:	429a      	cmp	r2, r3
 801222e:	d103      	bne.n	8012238 <_strtod_l+0x9e8>
 8012230:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012232:	3301      	adds	r3, #1
 8012234:	f43f ad2b 	beq.w	8011c8e <_strtod_l+0x43e>
 8012238:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012348 <_strtod_l+0xaf8>
 801223c:	f04f 3aff 	mov.w	sl, #4294967295
 8012240:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012242:	9805      	ldr	r0, [sp, #20]
 8012244:	f7fe fe74 	bl	8010f30 <_Bfree>
 8012248:	9805      	ldr	r0, [sp, #20]
 801224a:	4649      	mov	r1, r9
 801224c:	f7fe fe70 	bl	8010f30 <_Bfree>
 8012250:	9805      	ldr	r0, [sp, #20]
 8012252:	4641      	mov	r1, r8
 8012254:	f7fe fe6c 	bl	8010f30 <_Bfree>
 8012258:	9805      	ldr	r0, [sp, #20]
 801225a:	4621      	mov	r1, r4
 801225c:	f7fe fe68 	bl	8010f30 <_Bfree>
 8012260:	e618      	b.n	8011e94 <_strtod_l+0x644>
 8012262:	f1ba 0f01 	cmp.w	sl, #1
 8012266:	d103      	bne.n	8012270 <_strtod_l+0xa20>
 8012268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801226a:	2b00      	cmp	r3, #0
 801226c:	f43f ada5 	beq.w	8011dba <_strtod_l+0x56a>
 8012270:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012320 <_strtod_l+0xad0>
 8012274:	4f35      	ldr	r7, [pc, #212]	@ (801234c <_strtod_l+0xafc>)
 8012276:	ed8d 7b06 	vstr	d7, [sp, #24]
 801227a:	2600      	movs	r6, #0
 801227c:	e7b1      	b.n	80121e2 <_strtod_l+0x992>
 801227e:	4f34      	ldr	r7, [pc, #208]	@ (8012350 <_strtod_l+0xb00>)
 8012280:	2600      	movs	r6, #0
 8012282:	e7aa      	b.n	80121da <_strtod_l+0x98a>
 8012284:	4b32      	ldr	r3, [pc, #200]	@ (8012350 <_strtod_l+0xb00>)
 8012286:	4630      	mov	r0, r6
 8012288:	4639      	mov	r1, r7
 801228a:	2200      	movs	r2, #0
 801228c:	f7ee f9c4 	bl	8000618 <__aeabi_dmul>
 8012290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012292:	4606      	mov	r6, r0
 8012294:	460f      	mov	r7, r1
 8012296:	2b00      	cmp	r3, #0
 8012298:	d09f      	beq.n	80121da <_strtod_l+0x98a>
 801229a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801229e:	e7a0      	b.n	80121e2 <_strtod_l+0x992>
 80122a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012328 <_strtod_l+0xad8>
 80122a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80122a8:	ec57 6b17 	vmov	r6, r7, d7
 80122ac:	e799      	b.n	80121e2 <_strtod_l+0x992>
 80122ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80122b2:	9b08      	ldr	r3, [sp, #32]
 80122b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d1c1      	bne.n	8012240 <_strtod_l+0x9f0>
 80122bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80122c0:	0d1b      	lsrs	r3, r3, #20
 80122c2:	051b      	lsls	r3, r3, #20
 80122c4:	429d      	cmp	r5, r3
 80122c6:	d1bb      	bne.n	8012240 <_strtod_l+0x9f0>
 80122c8:	4630      	mov	r0, r6
 80122ca:	4639      	mov	r1, r7
 80122cc:	f7ee fd04 	bl	8000cd8 <__aeabi_d2lz>
 80122d0:	f7ee f974 	bl	80005bc <__aeabi_l2d>
 80122d4:	4602      	mov	r2, r0
 80122d6:	460b      	mov	r3, r1
 80122d8:	4630      	mov	r0, r6
 80122da:	4639      	mov	r1, r7
 80122dc:	f7ed ffe4 	bl	80002a8 <__aeabi_dsub>
 80122e0:	460b      	mov	r3, r1
 80122e2:	4602      	mov	r2, r0
 80122e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80122e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80122ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122ee:	ea46 060a 	orr.w	r6, r6, sl
 80122f2:	431e      	orrs	r6, r3
 80122f4:	d06f      	beq.n	80123d6 <_strtod_l+0xb86>
 80122f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8012330 <_strtod_l+0xae0>)
 80122f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fc:	f7ee fbfe 	bl	8000afc <__aeabi_dcmplt>
 8012300:	2800      	cmp	r0, #0
 8012302:	f47f accf 	bne.w	8011ca4 <_strtod_l+0x454>
 8012306:	a30c      	add	r3, pc, #48	@ (adr r3, 8012338 <_strtod_l+0xae8>)
 8012308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012310:	f7ee fc12 	bl	8000b38 <__aeabi_dcmpgt>
 8012314:	2800      	cmp	r0, #0
 8012316:	d093      	beq.n	8012240 <_strtod_l+0x9f0>
 8012318:	e4c4      	b.n	8011ca4 <_strtod_l+0x454>
 801231a:	bf00      	nop
 801231c:	f3af 8000 	nop.w
 8012320:	00000000 	.word	0x00000000
 8012324:	bff00000 	.word	0xbff00000
 8012328:	00000000 	.word	0x00000000
 801232c:	3ff00000 	.word	0x3ff00000
 8012330:	94a03595 	.word	0x94a03595
 8012334:	3fdfffff 	.word	0x3fdfffff
 8012338:	35afe535 	.word	0x35afe535
 801233c:	3fe00000 	.word	0x3fe00000
 8012340:	000fffff 	.word	0x000fffff
 8012344:	7ff00000 	.word	0x7ff00000
 8012348:	7fefffff 	.word	0x7fefffff
 801234c:	3ff00000 	.word	0x3ff00000
 8012350:	3fe00000 	.word	0x3fe00000
 8012354:	7fe00000 	.word	0x7fe00000
 8012358:	7c9fffff 	.word	0x7c9fffff
 801235c:	9b08      	ldr	r3, [sp, #32]
 801235e:	b323      	cbz	r3, 80123aa <_strtod_l+0xb5a>
 8012360:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012364:	d821      	bhi.n	80123aa <_strtod_l+0xb5a>
 8012366:	a328      	add	r3, pc, #160	@ (adr r3, 8012408 <_strtod_l+0xbb8>)
 8012368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236c:	4630      	mov	r0, r6
 801236e:	4639      	mov	r1, r7
 8012370:	f7ee fbce 	bl	8000b10 <__aeabi_dcmple>
 8012374:	b1a0      	cbz	r0, 80123a0 <_strtod_l+0xb50>
 8012376:	4639      	mov	r1, r7
 8012378:	4630      	mov	r0, r6
 801237a:	f7ee fc25 	bl	8000bc8 <__aeabi_d2uiz>
 801237e:	2801      	cmp	r0, #1
 8012380:	bf38      	it	cc
 8012382:	2001      	movcc	r0, #1
 8012384:	f7ee f8ce 	bl	8000524 <__aeabi_ui2d>
 8012388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801238a:	4606      	mov	r6, r0
 801238c:	460f      	mov	r7, r1
 801238e:	b9fb      	cbnz	r3, 80123d0 <_strtod_l+0xb80>
 8012390:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012394:	9014      	str	r0, [sp, #80]	@ 0x50
 8012396:	9315      	str	r3, [sp, #84]	@ 0x54
 8012398:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801239c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80123a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80123a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80123a6:	1b5b      	subs	r3, r3, r5
 80123a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80123aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80123ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80123b2:	f7ff f8f1 	bl	8011598 <__ulp>
 80123b6:	4650      	mov	r0, sl
 80123b8:	ec53 2b10 	vmov	r2, r3, d0
 80123bc:	4659      	mov	r1, fp
 80123be:	f7ee f92b 	bl	8000618 <__aeabi_dmul>
 80123c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80123c6:	f7ed ff71 	bl	80002ac <__adddf3>
 80123ca:	4682      	mov	sl, r0
 80123cc:	468b      	mov	fp, r1
 80123ce:	e770      	b.n	80122b2 <_strtod_l+0xa62>
 80123d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80123d4:	e7e0      	b.n	8012398 <_strtod_l+0xb48>
 80123d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8012410 <_strtod_l+0xbc0>)
 80123d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123dc:	f7ee fb8e 	bl	8000afc <__aeabi_dcmplt>
 80123e0:	e798      	b.n	8012314 <_strtod_l+0xac4>
 80123e2:	2300      	movs	r3, #0
 80123e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80123e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80123ea:	6013      	str	r3, [r2, #0]
 80123ec:	f7ff ba6d 	b.w	80118ca <_strtod_l+0x7a>
 80123f0:	2a65      	cmp	r2, #101	@ 0x65
 80123f2:	f43f ab66 	beq.w	8011ac2 <_strtod_l+0x272>
 80123f6:	2a45      	cmp	r2, #69	@ 0x45
 80123f8:	f43f ab63 	beq.w	8011ac2 <_strtod_l+0x272>
 80123fc:	2301      	movs	r3, #1
 80123fe:	f7ff bb9e 	b.w	8011b3e <_strtod_l+0x2ee>
 8012402:	bf00      	nop
 8012404:	f3af 8000 	nop.w
 8012408:	ffc00000 	.word	0xffc00000
 801240c:	41dfffff 	.word	0x41dfffff
 8012410:	94a03595 	.word	0x94a03595
 8012414:	3fcfffff 	.word	0x3fcfffff

08012418 <_strtod_r>:
 8012418:	4b01      	ldr	r3, [pc, #4]	@ (8012420 <_strtod_r+0x8>)
 801241a:	f7ff ba19 	b.w	8011850 <_strtod_l>
 801241e:	bf00      	nop
 8012420:	200004cc 	.word	0x200004cc

08012424 <__ssputs_r>:
 8012424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012428:	688e      	ldr	r6, [r1, #8]
 801242a:	461f      	mov	r7, r3
 801242c:	42be      	cmp	r6, r7
 801242e:	680b      	ldr	r3, [r1, #0]
 8012430:	4682      	mov	sl, r0
 8012432:	460c      	mov	r4, r1
 8012434:	4690      	mov	r8, r2
 8012436:	d82d      	bhi.n	8012494 <__ssputs_r+0x70>
 8012438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801243c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012440:	d026      	beq.n	8012490 <__ssputs_r+0x6c>
 8012442:	6965      	ldr	r5, [r4, #20]
 8012444:	6909      	ldr	r1, [r1, #16]
 8012446:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801244a:	eba3 0901 	sub.w	r9, r3, r1
 801244e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012452:	1c7b      	adds	r3, r7, #1
 8012454:	444b      	add	r3, r9
 8012456:	106d      	asrs	r5, r5, #1
 8012458:	429d      	cmp	r5, r3
 801245a:	bf38      	it	cc
 801245c:	461d      	movcc	r5, r3
 801245e:	0553      	lsls	r3, r2, #21
 8012460:	d527      	bpl.n	80124b2 <__ssputs_r+0x8e>
 8012462:	4629      	mov	r1, r5
 8012464:	f7fe fc98 	bl	8010d98 <_malloc_r>
 8012468:	4606      	mov	r6, r0
 801246a:	b360      	cbz	r0, 80124c6 <__ssputs_r+0xa2>
 801246c:	6921      	ldr	r1, [r4, #16]
 801246e:	464a      	mov	r2, r9
 8012470:	f7fd fdbd 	bl	800ffee <memcpy>
 8012474:	89a3      	ldrh	r3, [r4, #12]
 8012476:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801247a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801247e:	81a3      	strh	r3, [r4, #12]
 8012480:	6126      	str	r6, [r4, #16]
 8012482:	6165      	str	r5, [r4, #20]
 8012484:	444e      	add	r6, r9
 8012486:	eba5 0509 	sub.w	r5, r5, r9
 801248a:	6026      	str	r6, [r4, #0]
 801248c:	60a5      	str	r5, [r4, #8]
 801248e:	463e      	mov	r6, r7
 8012490:	42be      	cmp	r6, r7
 8012492:	d900      	bls.n	8012496 <__ssputs_r+0x72>
 8012494:	463e      	mov	r6, r7
 8012496:	6820      	ldr	r0, [r4, #0]
 8012498:	4632      	mov	r2, r6
 801249a:	4641      	mov	r1, r8
 801249c:	f000 f9c6 	bl	801282c <memmove>
 80124a0:	68a3      	ldr	r3, [r4, #8]
 80124a2:	1b9b      	subs	r3, r3, r6
 80124a4:	60a3      	str	r3, [r4, #8]
 80124a6:	6823      	ldr	r3, [r4, #0]
 80124a8:	4433      	add	r3, r6
 80124aa:	6023      	str	r3, [r4, #0]
 80124ac:	2000      	movs	r0, #0
 80124ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124b2:	462a      	mov	r2, r5
 80124b4:	f000 fd7d 	bl	8012fb2 <_realloc_r>
 80124b8:	4606      	mov	r6, r0
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d1e0      	bne.n	8012480 <__ssputs_r+0x5c>
 80124be:	6921      	ldr	r1, [r4, #16]
 80124c0:	4650      	mov	r0, sl
 80124c2:	f7fe fbf5 	bl	8010cb0 <_free_r>
 80124c6:	230c      	movs	r3, #12
 80124c8:	f8ca 3000 	str.w	r3, [sl]
 80124cc:	89a3      	ldrh	r3, [r4, #12]
 80124ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124d2:	81a3      	strh	r3, [r4, #12]
 80124d4:	f04f 30ff 	mov.w	r0, #4294967295
 80124d8:	e7e9      	b.n	80124ae <__ssputs_r+0x8a>
	...

080124dc <_svfiprintf_r>:
 80124dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e0:	4698      	mov	r8, r3
 80124e2:	898b      	ldrh	r3, [r1, #12]
 80124e4:	061b      	lsls	r3, r3, #24
 80124e6:	b09d      	sub	sp, #116	@ 0x74
 80124e8:	4607      	mov	r7, r0
 80124ea:	460d      	mov	r5, r1
 80124ec:	4614      	mov	r4, r2
 80124ee:	d510      	bpl.n	8012512 <_svfiprintf_r+0x36>
 80124f0:	690b      	ldr	r3, [r1, #16]
 80124f2:	b973      	cbnz	r3, 8012512 <_svfiprintf_r+0x36>
 80124f4:	2140      	movs	r1, #64	@ 0x40
 80124f6:	f7fe fc4f 	bl	8010d98 <_malloc_r>
 80124fa:	6028      	str	r0, [r5, #0]
 80124fc:	6128      	str	r0, [r5, #16]
 80124fe:	b930      	cbnz	r0, 801250e <_svfiprintf_r+0x32>
 8012500:	230c      	movs	r3, #12
 8012502:	603b      	str	r3, [r7, #0]
 8012504:	f04f 30ff 	mov.w	r0, #4294967295
 8012508:	b01d      	add	sp, #116	@ 0x74
 801250a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801250e:	2340      	movs	r3, #64	@ 0x40
 8012510:	616b      	str	r3, [r5, #20]
 8012512:	2300      	movs	r3, #0
 8012514:	9309      	str	r3, [sp, #36]	@ 0x24
 8012516:	2320      	movs	r3, #32
 8012518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801251c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012520:	2330      	movs	r3, #48	@ 0x30
 8012522:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80126c0 <_svfiprintf_r+0x1e4>
 8012526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801252a:	f04f 0901 	mov.w	r9, #1
 801252e:	4623      	mov	r3, r4
 8012530:	469a      	mov	sl, r3
 8012532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012536:	b10a      	cbz	r2, 801253c <_svfiprintf_r+0x60>
 8012538:	2a25      	cmp	r2, #37	@ 0x25
 801253a:	d1f9      	bne.n	8012530 <_svfiprintf_r+0x54>
 801253c:	ebba 0b04 	subs.w	fp, sl, r4
 8012540:	d00b      	beq.n	801255a <_svfiprintf_r+0x7e>
 8012542:	465b      	mov	r3, fp
 8012544:	4622      	mov	r2, r4
 8012546:	4629      	mov	r1, r5
 8012548:	4638      	mov	r0, r7
 801254a:	f7ff ff6b 	bl	8012424 <__ssputs_r>
 801254e:	3001      	adds	r0, #1
 8012550:	f000 80a7 	beq.w	80126a2 <_svfiprintf_r+0x1c6>
 8012554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012556:	445a      	add	r2, fp
 8012558:	9209      	str	r2, [sp, #36]	@ 0x24
 801255a:	f89a 3000 	ldrb.w	r3, [sl]
 801255e:	2b00      	cmp	r3, #0
 8012560:	f000 809f 	beq.w	80126a2 <_svfiprintf_r+0x1c6>
 8012564:	2300      	movs	r3, #0
 8012566:	f04f 32ff 	mov.w	r2, #4294967295
 801256a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801256e:	f10a 0a01 	add.w	sl, sl, #1
 8012572:	9304      	str	r3, [sp, #16]
 8012574:	9307      	str	r3, [sp, #28]
 8012576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801257a:	931a      	str	r3, [sp, #104]	@ 0x68
 801257c:	4654      	mov	r4, sl
 801257e:	2205      	movs	r2, #5
 8012580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012584:	484e      	ldr	r0, [pc, #312]	@ (80126c0 <_svfiprintf_r+0x1e4>)
 8012586:	f7ed fe33 	bl	80001f0 <memchr>
 801258a:	9a04      	ldr	r2, [sp, #16]
 801258c:	b9d8      	cbnz	r0, 80125c6 <_svfiprintf_r+0xea>
 801258e:	06d0      	lsls	r0, r2, #27
 8012590:	bf44      	itt	mi
 8012592:	2320      	movmi	r3, #32
 8012594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012598:	0711      	lsls	r1, r2, #28
 801259a:	bf44      	itt	mi
 801259c:	232b      	movmi	r3, #43	@ 0x2b
 801259e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125a2:	f89a 3000 	ldrb.w	r3, [sl]
 80125a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80125a8:	d015      	beq.n	80125d6 <_svfiprintf_r+0xfa>
 80125aa:	9a07      	ldr	r2, [sp, #28]
 80125ac:	4654      	mov	r4, sl
 80125ae:	2000      	movs	r0, #0
 80125b0:	f04f 0c0a 	mov.w	ip, #10
 80125b4:	4621      	mov	r1, r4
 80125b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125ba:	3b30      	subs	r3, #48	@ 0x30
 80125bc:	2b09      	cmp	r3, #9
 80125be:	d94b      	bls.n	8012658 <_svfiprintf_r+0x17c>
 80125c0:	b1b0      	cbz	r0, 80125f0 <_svfiprintf_r+0x114>
 80125c2:	9207      	str	r2, [sp, #28]
 80125c4:	e014      	b.n	80125f0 <_svfiprintf_r+0x114>
 80125c6:	eba0 0308 	sub.w	r3, r0, r8
 80125ca:	fa09 f303 	lsl.w	r3, r9, r3
 80125ce:	4313      	orrs	r3, r2
 80125d0:	9304      	str	r3, [sp, #16]
 80125d2:	46a2      	mov	sl, r4
 80125d4:	e7d2      	b.n	801257c <_svfiprintf_r+0xa0>
 80125d6:	9b03      	ldr	r3, [sp, #12]
 80125d8:	1d19      	adds	r1, r3, #4
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	9103      	str	r1, [sp, #12]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	bfbb      	ittet	lt
 80125e2:	425b      	neglt	r3, r3
 80125e4:	f042 0202 	orrlt.w	r2, r2, #2
 80125e8:	9307      	strge	r3, [sp, #28]
 80125ea:	9307      	strlt	r3, [sp, #28]
 80125ec:	bfb8      	it	lt
 80125ee:	9204      	strlt	r2, [sp, #16]
 80125f0:	7823      	ldrb	r3, [r4, #0]
 80125f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80125f4:	d10a      	bne.n	801260c <_svfiprintf_r+0x130>
 80125f6:	7863      	ldrb	r3, [r4, #1]
 80125f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80125fa:	d132      	bne.n	8012662 <_svfiprintf_r+0x186>
 80125fc:	9b03      	ldr	r3, [sp, #12]
 80125fe:	1d1a      	adds	r2, r3, #4
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	9203      	str	r2, [sp, #12]
 8012604:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012608:	3402      	adds	r4, #2
 801260a:	9305      	str	r3, [sp, #20]
 801260c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80126d0 <_svfiprintf_r+0x1f4>
 8012610:	7821      	ldrb	r1, [r4, #0]
 8012612:	2203      	movs	r2, #3
 8012614:	4650      	mov	r0, sl
 8012616:	f7ed fdeb 	bl	80001f0 <memchr>
 801261a:	b138      	cbz	r0, 801262c <_svfiprintf_r+0x150>
 801261c:	9b04      	ldr	r3, [sp, #16]
 801261e:	eba0 000a 	sub.w	r0, r0, sl
 8012622:	2240      	movs	r2, #64	@ 0x40
 8012624:	4082      	lsls	r2, r0
 8012626:	4313      	orrs	r3, r2
 8012628:	3401      	adds	r4, #1
 801262a:	9304      	str	r3, [sp, #16]
 801262c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012630:	4824      	ldr	r0, [pc, #144]	@ (80126c4 <_svfiprintf_r+0x1e8>)
 8012632:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012636:	2206      	movs	r2, #6
 8012638:	f7ed fdda 	bl	80001f0 <memchr>
 801263c:	2800      	cmp	r0, #0
 801263e:	d036      	beq.n	80126ae <_svfiprintf_r+0x1d2>
 8012640:	4b21      	ldr	r3, [pc, #132]	@ (80126c8 <_svfiprintf_r+0x1ec>)
 8012642:	bb1b      	cbnz	r3, 801268c <_svfiprintf_r+0x1b0>
 8012644:	9b03      	ldr	r3, [sp, #12]
 8012646:	3307      	adds	r3, #7
 8012648:	f023 0307 	bic.w	r3, r3, #7
 801264c:	3308      	adds	r3, #8
 801264e:	9303      	str	r3, [sp, #12]
 8012650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012652:	4433      	add	r3, r6
 8012654:	9309      	str	r3, [sp, #36]	@ 0x24
 8012656:	e76a      	b.n	801252e <_svfiprintf_r+0x52>
 8012658:	fb0c 3202 	mla	r2, ip, r2, r3
 801265c:	460c      	mov	r4, r1
 801265e:	2001      	movs	r0, #1
 8012660:	e7a8      	b.n	80125b4 <_svfiprintf_r+0xd8>
 8012662:	2300      	movs	r3, #0
 8012664:	3401      	adds	r4, #1
 8012666:	9305      	str	r3, [sp, #20]
 8012668:	4619      	mov	r1, r3
 801266a:	f04f 0c0a 	mov.w	ip, #10
 801266e:	4620      	mov	r0, r4
 8012670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012674:	3a30      	subs	r2, #48	@ 0x30
 8012676:	2a09      	cmp	r2, #9
 8012678:	d903      	bls.n	8012682 <_svfiprintf_r+0x1a6>
 801267a:	2b00      	cmp	r3, #0
 801267c:	d0c6      	beq.n	801260c <_svfiprintf_r+0x130>
 801267e:	9105      	str	r1, [sp, #20]
 8012680:	e7c4      	b.n	801260c <_svfiprintf_r+0x130>
 8012682:	fb0c 2101 	mla	r1, ip, r1, r2
 8012686:	4604      	mov	r4, r0
 8012688:	2301      	movs	r3, #1
 801268a:	e7f0      	b.n	801266e <_svfiprintf_r+0x192>
 801268c:	ab03      	add	r3, sp, #12
 801268e:	9300      	str	r3, [sp, #0]
 8012690:	462a      	mov	r2, r5
 8012692:	4b0e      	ldr	r3, [pc, #56]	@ (80126cc <_svfiprintf_r+0x1f0>)
 8012694:	a904      	add	r1, sp, #16
 8012696:	4638      	mov	r0, r7
 8012698:	f7fc fd38 	bl	800f10c <_printf_float>
 801269c:	1c42      	adds	r2, r0, #1
 801269e:	4606      	mov	r6, r0
 80126a0:	d1d6      	bne.n	8012650 <_svfiprintf_r+0x174>
 80126a2:	89ab      	ldrh	r3, [r5, #12]
 80126a4:	065b      	lsls	r3, r3, #25
 80126a6:	f53f af2d 	bmi.w	8012504 <_svfiprintf_r+0x28>
 80126aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126ac:	e72c      	b.n	8012508 <_svfiprintf_r+0x2c>
 80126ae:	ab03      	add	r3, sp, #12
 80126b0:	9300      	str	r3, [sp, #0]
 80126b2:	462a      	mov	r2, r5
 80126b4:	4b05      	ldr	r3, [pc, #20]	@ (80126cc <_svfiprintf_r+0x1f0>)
 80126b6:	a904      	add	r1, sp, #16
 80126b8:	4638      	mov	r0, r7
 80126ba:	f7fc ffbf 	bl	800f63c <_printf_i>
 80126be:	e7ed      	b.n	801269c <_svfiprintf_r+0x1c0>
 80126c0:	08016748 	.word	0x08016748
 80126c4:	08016752 	.word	0x08016752
 80126c8:	0800f10d 	.word	0x0800f10d
 80126cc:	08012425 	.word	0x08012425
 80126d0:	0801674e 	.word	0x0801674e

080126d4 <__sflush_r>:
 80126d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126dc:	0716      	lsls	r6, r2, #28
 80126de:	4605      	mov	r5, r0
 80126e0:	460c      	mov	r4, r1
 80126e2:	d454      	bmi.n	801278e <__sflush_r+0xba>
 80126e4:	684b      	ldr	r3, [r1, #4]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	dc02      	bgt.n	80126f0 <__sflush_r+0x1c>
 80126ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	dd48      	ble.n	8012782 <__sflush_r+0xae>
 80126f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126f2:	2e00      	cmp	r6, #0
 80126f4:	d045      	beq.n	8012782 <__sflush_r+0xae>
 80126f6:	2300      	movs	r3, #0
 80126f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80126fc:	682f      	ldr	r7, [r5, #0]
 80126fe:	6a21      	ldr	r1, [r4, #32]
 8012700:	602b      	str	r3, [r5, #0]
 8012702:	d030      	beq.n	8012766 <__sflush_r+0x92>
 8012704:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012706:	89a3      	ldrh	r3, [r4, #12]
 8012708:	0759      	lsls	r1, r3, #29
 801270a:	d505      	bpl.n	8012718 <__sflush_r+0x44>
 801270c:	6863      	ldr	r3, [r4, #4]
 801270e:	1ad2      	subs	r2, r2, r3
 8012710:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012712:	b10b      	cbz	r3, 8012718 <__sflush_r+0x44>
 8012714:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012716:	1ad2      	subs	r2, r2, r3
 8012718:	2300      	movs	r3, #0
 801271a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801271c:	6a21      	ldr	r1, [r4, #32]
 801271e:	4628      	mov	r0, r5
 8012720:	47b0      	blx	r6
 8012722:	1c43      	adds	r3, r0, #1
 8012724:	89a3      	ldrh	r3, [r4, #12]
 8012726:	d106      	bne.n	8012736 <__sflush_r+0x62>
 8012728:	6829      	ldr	r1, [r5, #0]
 801272a:	291d      	cmp	r1, #29
 801272c:	d82b      	bhi.n	8012786 <__sflush_r+0xb2>
 801272e:	4a2a      	ldr	r2, [pc, #168]	@ (80127d8 <__sflush_r+0x104>)
 8012730:	410a      	asrs	r2, r1
 8012732:	07d6      	lsls	r6, r2, #31
 8012734:	d427      	bmi.n	8012786 <__sflush_r+0xb2>
 8012736:	2200      	movs	r2, #0
 8012738:	6062      	str	r2, [r4, #4]
 801273a:	04d9      	lsls	r1, r3, #19
 801273c:	6922      	ldr	r2, [r4, #16]
 801273e:	6022      	str	r2, [r4, #0]
 8012740:	d504      	bpl.n	801274c <__sflush_r+0x78>
 8012742:	1c42      	adds	r2, r0, #1
 8012744:	d101      	bne.n	801274a <__sflush_r+0x76>
 8012746:	682b      	ldr	r3, [r5, #0]
 8012748:	b903      	cbnz	r3, 801274c <__sflush_r+0x78>
 801274a:	6560      	str	r0, [r4, #84]	@ 0x54
 801274c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801274e:	602f      	str	r7, [r5, #0]
 8012750:	b1b9      	cbz	r1, 8012782 <__sflush_r+0xae>
 8012752:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012756:	4299      	cmp	r1, r3
 8012758:	d002      	beq.n	8012760 <__sflush_r+0x8c>
 801275a:	4628      	mov	r0, r5
 801275c:	f7fe faa8 	bl	8010cb0 <_free_r>
 8012760:	2300      	movs	r3, #0
 8012762:	6363      	str	r3, [r4, #52]	@ 0x34
 8012764:	e00d      	b.n	8012782 <__sflush_r+0xae>
 8012766:	2301      	movs	r3, #1
 8012768:	4628      	mov	r0, r5
 801276a:	47b0      	blx	r6
 801276c:	4602      	mov	r2, r0
 801276e:	1c50      	adds	r0, r2, #1
 8012770:	d1c9      	bne.n	8012706 <__sflush_r+0x32>
 8012772:	682b      	ldr	r3, [r5, #0]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d0c6      	beq.n	8012706 <__sflush_r+0x32>
 8012778:	2b1d      	cmp	r3, #29
 801277a:	d001      	beq.n	8012780 <__sflush_r+0xac>
 801277c:	2b16      	cmp	r3, #22
 801277e:	d11e      	bne.n	80127be <__sflush_r+0xea>
 8012780:	602f      	str	r7, [r5, #0]
 8012782:	2000      	movs	r0, #0
 8012784:	e022      	b.n	80127cc <__sflush_r+0xf8>
 8012786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801278a:	b21b      	sxth	r3, r3
 801278c:	e01b      	b.n	80127c6 <__sflush_r+0xf2>
 801278e:	690f      	ldr	r7, [r1, #16]
 8012790:	2f00      	cmp	r7, #0
 8012792:	d0f6      	beq.n	8012782 <__sflush_r+0xae>
 8012794:	0793      	lsls	r3, r2, #30
 8012796:	680e      	ldr	r6, [r1, #0]
 8012798:	bf08      	it	eq
 801279a:	694b      	ldreq	r3, [r1, #20]
 801279c:	600f      	str	r7, [r1, #0]
 801279e:	bf18      	it	ne
 80127a0:	2300      	movne	r3, #0
 80127a2:	eba6 0807 	sub.w	r8, r6, r7
 80127a6:	608b      	str	r3, [r1, #8]
 80127a8:	f1b8 0f00 	cmp.w	r8, #0
 80127ac:	dde9      	ble.n	8012782 <__sflush_r+0xae>
 80127ae:	6a21      	ldr	r1, [r4, #32]
 80127b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80127b2:	4643      	mov	r3, r8
 80127b4:	463a      	mov	r2, r7
 80127b6:	4628      	mov	r0, r5
 80127b8:	47b0      	blx	r6
 80127ba:	2800      	cmp	r0, #0
 80127bc:	dc08      	bgt.n	80127d0 <__sflush_r+0xfc>
 80127be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127c6:	81a3      	strh	r3, [r4, #12]
 80127c8:	f04f 30ff 	mov.w	r0, #4294967295
 80127cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127d0:	4407      	add	r7, r0
 80127d2:	eba8 0800 	sub.w	r8, r8, r0
 80127d6:	e7e7      	b.n	80127a8 <__sflush_r+0xd4>
 80127d8:	dfbffffe 	.word	0xdfbffffe

080127dc <_fflush_r>:
 80127dc:	b538      	push	{r3, r4, r5, lr}
 80127de:	690b      	ldr	r3, [r1, #16]
 80127e0:	4605      	mov	r5, r0
 80127e2:	460c      	mov	r4, r1
 80127e4:	b913      	cbnz	r3, 80127ec <_fflush_r+0x10>
 80127e6:	2500      	movs	r5, #0
 80127e8:	4628      	mov	r0, r5
 80127ea:	bd38      	pop	{r3, r4, r5, pc}
 80127ec:	b118      	cbz	r0, 80127f6 <_fflush_r+0x1a>
 80127ee:	6a03      	ldr	r3, [r0, #32]
 80127f0:	b90b      	cbnz	r3, 80127f6 <_fflush_r+0x1a>
 80127f2:	f7fd fae3 	bl	800fdbc <__sinit>
 80127f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d0f3      	beq.n	80127e6 <_fflush_r+0xa>
 80127fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012800:	07d0      	lsls	r0, r2, #31
 8012802:	d404      	bmi.n	801280e <_fflush_r+0x32>
 8012804:	0599      	lsls	r1, r3, #22
 8012806:	d402      	bmi.n	801280e <_fflush_r+0x32>
 8012808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801280a:	f7fd fbee 	bl	800ffea <__retarget_lock_acquire_recursive>
 801280e:	4628      	mov	r0, r5
 8012810:	4621      	mov	r1, r4
 8012812:	f7ff ff5f 	bl	80126d4 <__sflush_r>
 8012816:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012818:	07da      	lsls	r2, r3, #31
 801281a:	4605      	mov	r5, r0
 801281c:	d4e4      	bmi.n	80127e8 <_fflush_r+0xc>
 801281e:	89a3      	ldrh	r3, [r4, #12]
 8012820:	059b      	lsls	r3, r3, #22
 8012822:	d4e1      	bmi.n	80127e8 <_fflush_r+0xc>
 8012824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012826:	f7fd fbe1 	bl	800ffec <__retarget_lock_release_recursive>
 801282a:	e7dd      	b.n	80127e8 <_fflush_r+0xc>

0801282c <memmove>:
 801282c:	4288      	cmp	r0, r1
 801282e:	b510      	push	{r4, lr}
 8012830:	eb01 0402 	add.w	r4, r1, r2
 8012834:	d902      	bls.n	801283c <memmove+0x10>
 8012836:	4284      	cmp	r4, r0
 8012838:	4623      	mov	r3, r4
 801283a:	d807      	bhi.n	801284c <memmove+0x20>
 801283c:	1e43      	subs	r3, r0, #1
 801283e:	42a1      	cmp	r1, r4
 8012840:	d008      	beq.n	8012854 <memmove+0x28>
 8012842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012846:	f803 2f01 	strb.w	r2, [r3, #1]!
 801284a:	e7f8      	b.n	801283e <memmove+0x12>
 801284c:	4402      	add	r2, r0
 801284e:	4601      	mov	r1, r0
 8012850:	428a      	cmp	r2, r1
 8012852:	d100      	bne.n	8012856 <memmove+0x2a>
 8012854:	bd10      	pop	{r4, pc}
 8012856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801285a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801285e:	e7f7      	b.n	8012850 <memmove+0x24>

08012860 <strncmp>:
 8012860:	b510      	push	{r4, lr}
 8012862:	b16a      	cbz	r2, 8012880 <strncmp+0x20>
 8012864:	3901      	subs	r1, #1
 8012866:	1884      	adds	r4, r0, r2
 8012868:	f810 2b01 	ldrb.w	r2, [r0], #1
 801286c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012870:	429a      	cmp	r2, r3
 8012872:	d103      	bne.n	801287c <strncmp+0x1c>
 8012874:	42a0      	cmp	r0, r4
 8012876:	d001      	beq.n	801287c <strncmp+0x1c>
 8012878:	2a00      	cmp	r2, #0
 801287a:	d1f5      	bne.n	8012868 <strncmp+0x8>
 801287c:	1ad0      	subs	r0, r2, r3
 801287e:	bd10      	pop	{r4, pc}
 8012880:	4610      	mov	r0, r2
 8012882:	e7fc      	b.n	801287e <strncmp+0x1e>

08012884 <_sbrk_r>:
 8012884:	b538      	push	{r3, r4, r5, lr}
 8012886:	4d06      	ldr	r5, [pc, #24]	@ (80128a0 <_sbrk_r+0x1c>)
 8012888:	2300      	movs	r3, #0
 801288a:	4604      	mov	r4, r0
 801288c:	4608      	mov	r0, r1
 801288e:	602b      	str	r3, [r5, #0]
 8012890:	f7f8 fa30 	bl	800acf4 <_sbrk>
 8012894:	1c43      	adds	r3, r0, #1
 8012896:	d102      	bne.n	801289e <_sbrk_r+0x1a>
 8012898:	682b      	ldr	r3, [r5, #0]
 801289a:	b103      	cbz	r3, 801289e <_sbrk_r+0x1a>
 801289c:	6023      	str	r3, [r4, #0]
 801289e:	bd38      	pop	{r3, r4, r5, pc}
 80128a0:	200083cc 	.word	0x200083cc
 80128a4:	00000000 	.word	0x00000000

080128a8 <nan>:
 80128a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80128b0 <nan+0x8>
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	00000000 	.word	0x00000000
 80128b4:	7ff80000 	.word	0x7ff80000

080128b8 <__assert_func>:
 80128b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128ba:	4614      	mov	r4, r2
 80128bc:	461a      	mov	r2, r3
 80128be:	4b09      	ldr	r3, [pc, #36]	@ (80128e4 <__assert_func+0x2c>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	4605      	mov	r5, r0
 80128c4:	68d8      	ldr	r0, [r3, #12]
 80128c6:	b954      	cbnz	r4, 80128de <__assert_func+0x26>
 80128c8:	4b07      	ldr	r3, [pc, #28]	@ (80128e8 <__assert_func+0x30>)
 80128ca:	461c      	mov	r4, r3
 80128cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80128d0:	9100      	str	r1, [sp, #0]
 80128d2:	462b      	mov	r3, r5
 80128d4:	4905      	ldr	r1, [pc, #20]	@ (80128ec <__assert_func+0x34>)
 80128d6:	f000 fba7 	bl	8013028 <fiprintf>
 80128da:	f000 fbb7 	bl	801304c <abort>
 80128de:	4b04      	ldr	r3, [pc, #16]	@ (80128f0 <__assert_func+0x38>)
 80128e0:	e7f4      	b.n	80128cc <__assert_func+0x14>
 80128e2:	bf00      	nop
 80128e4:	2000047c 	.word	0x2000047c
 80128e8:	0801679c 	.word	0x0801679c
 80128ec:	0801676e 	.word	0x0801676e
 80128f0:	08016761 	.word	0x08016761

080128f4 <_calloc_r>:
 80128f4:	b570      	push	{r4, r5, r6, lr}
 80128f6:	fba1 5402 	umull	r5, r4, r1, r2
 80128fa:	b93c      	cbnz	r4, 801290c <_calloc_r+0x18>
 80128fc:	4629      	mov	r1, r5
 80128fe:	f7fe fa4b 	bl	8010d98 <_malloc_r>
 8012902:	4606      	mov	r6, r0
 8012904:	b928      	cbnz	r0, 8012912 <_calloc_r+0x1e>
 8012906:	2600      	movs	r6, #0
 8012908:	4630      	mov	r0, r6
 801290a:	bd70      	pop	{r4, r5, r6, pc}
 801290c:	220c      	movs	r2, #12
 801290e:	6002      	str	r2, [r0, #0]
 8012910:	e7f9      	b.n	8012906 <_calloc_r+0x12>
 8012912:	462a      	mov	r2, r5
 8012914:	4621      	mov	r1, r4
 8012916:	f7fd faea 	bl	800feee <memset>
 801291a:	e7f5      	b.n	8012908 <_calloc_r+0x14>

0801291c <rshift>:
 801291c:	6903      	ldr	r3, [r0, #16]
 801291e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012922:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012926:	ea4f 1261 	mov.w	r2, r1, asr #5
 801292a:	f100 0414 	add.w	r4, r0, #20
 801292e:	dd45      	ble.n	80129bc <rshift+0xa0>
 8012930:	f011 011f 	ands.w	r1, r1, #31
 8012934:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012938:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801293c:	d10c      	bne.n	8012958 <rshift+0x3c>
 801293e:	f100 0710 	add.w	r7, r0, #16
 8012942:	4629      	mov	r1, r5
 8012944:	42b1      	cmp	r1, r6
 8012946:	d334      	bcc.n	80129b2 <rshift+0x96>
 8012948:	1a9b      	subs	r3, r3, r2
 801294a:	009b      	lsls	r3, r3, #2
 801294c:	1eea      	subs	r2, r5, #3
 801294e:	4296      	cmp	r6, r2
 8012950:	bf38      	it	cc
 8012952:	2300      	movcc	r3, #0
 8012954:	4423      	add	r3, r4
 8012956:	e015      	b.n	8012984 <rshift+0x68>
 8012958:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801295c:	f1c1 0820 	rsb	r8, r1, #32
 8012960:	40cf      	lsrs	r7, r1
 8012962:	f105 0e04 	add.w	lr, r5, #4
 8012966:	46a1      	mov	r9, r4
 8012968:	4576      	cmp	r6, lr
 801296a:	46f4      	mov	ip, lr
 801296c:	d815      	bhi.n	801299a <rshift+0x7e>
 801296e:	1a9a      	subs	r2, r3, r2
 8012970:	0092      	lsls	r2, r2, #2
 8012972:	3a04      	subs	r2, #4
 8012974:	3501      	adds	r5, #1
 8012976:	42ae      	cmp	r6, r5
 8012978:	bf38      	it	cc
 801297a:	2200      	movcc	r2, #0
 801297c:	18a3      	adds	r3, r4, r2
 801297e:	50a7      	str	r7, [r4, r2]
 8012980:	b107      	cbz	r7, 8012984 <rshift+0x68>
 8012982:	3304      	adds	r3, #4
 8012984:	1b1a      	subs	r2, r3, r4
 8012986:	42a3      	cmp	r3, r4
 8012988:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801298c:	bf08      	it	eq
 801298e:	2300      	moveq	r3, #0
 8012990:	6102      	str	r2, [r0, #16]
 8012992:	bf08      	it	eq
 8012994:	6143      	streq	r3, [r0, #20]
 8012996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801299a:	f8dc c000 	ldr.w	ip, [ip]
 801299e:	fa0c fc08 	lsl.w	ip, ip, r8
 80129a2:	ea4c 0707 	orr.w	r7, ip, r7
 80129a6:	f849 7b04 	str.w	r7, [r9], #4
 80129aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80129ae:	40cf      	lsrs	r7, r1
 80129b0:	e7da      	b.n	8012968 <rshift+0x4c>
 80129b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80129b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80129ba:	e7c3      	b.n	8012944 <rshift+0x28>
 80129bc:	4623      	mov	r3, r4
 80129be:	e7e1      	b.n	8012984 <rshift+0x68>

080129c0 <__hexdig_fun>:
 80129c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80129c4:	2b09      	cmp	r3, #9
 80129c6:	d802      	bhi.n	80129ce <__hexdig_fun+0xe>
 80129c8:	3820      	subs	r0, #32
 80129ca:	b2c0      	uxtb	r0, r0
 80129cc:	4770      	bx	lr
 80129ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80129d2:	2b05      	cmp	r3, #5
 80129d4:	d801      	bhi.n	80129da <__hexdig_fun+0x1a>
 80129d6:	3847      	subs	r0, #71	@ 0x47
 80129d8:	e7f7      	b.n	80129ca <__hexdig_fun+0xa>
 80129da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80129de:	2b05      	cmp	r3, #5
 80129e0:	d801      	bhi.n	80129e6 <__hexdig_fun+0x26>
 80129e2:	3827      	subs	r0, #39	@ 0x27
 80129e4:	e7f1      	b.n	80129ca <__hexdig_fun+0xa>
 80129e6:	2000      	movs	r0, #0
 80129e8:	4770      	bx	lr
	...

080129ec <__gethex>:
 80129ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f0:	b085      	sub	sp, #20
 80129f2:	468a      	mov	sl, r1
 80129f4:	9302      	str	r3, [sp, #8]
 80129f6:	680b      	ldr	r3, [r1, #0]
 80129f8:	9001      	str	r0, [sp, #4]
 80129fa:	4690      	mov	r8, r2
 80129fc:	1c9c      	adds	r4, r3, #2
 80129fe:	46a1      	mov	r9, r4
 8012a00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012a04:	2830      	cmp	r0, #48	@ 0x30
 8012a06:	d0fa      	beq.n	80129fe <__gethex+0x12>
 8012a08:	eba9 0303 	sub.w	r3, r9, r3
 8012a0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012a10:	f7ff ffd6 	bl	80129c0 <__hexdig_fun>
 8012a14:	4605      	mov	r5, r0
 8012a16:	2800      	cmp	r0, #0
 8012a18:	d168      	bne.n	8012aec <__gethex+0x100>
 8012a1a:	49a0      	ldr	r1, [pc, #640]	@ (8012c9c <__gethex+0x2b0>)
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	4648      	mov	r0, r9
 8012a20:	f7ff ff1e 	bl	8012860 <strncmp>
 8012a24:	4607      	mov	r7, r0
 8012a26:	2800      	cmp	r0, #0
 8012a28:	d167      	bne.n	8012afa <__gethex+0x10e>
 8012a2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012a2e:	4626      	mov	r6, r4
 8012a30:	f7ff ffc6 	bl	80129c0 <__hexdig_fun>
 8012a34:	2800      	cmp	r0, #0
 8012a36:	d062      	beq.n	8012afe <__gethex+0x112>
 8012a38:	4623      	mov	r3, r4
 8012a3a:	7818      	ldrb	r0, [r3, #0]
 8012a3c:	2830      	cmp	r0, #48	@ 0x30
 8012a3e:	4699      	mov	r9, r3
 8012a40:	f103 0301 	add.w	r3, r3, #1
 8012a44:	d0f9      	beq.n	8012a3a <__gethex+0x4e>
 8012a46:	f7ff ffbb 	bl	80129c0 <__hexdig_fun>
 8012a4a:	fab0 f580 	clz	r5, r0
 8012a4e:	096d      	lsrs	r5, r5, #5
 8012a50:	f04f 0b01 	mov.w	fp, #1
 8012a54:	464a      	mov	r2, r9
 8012a56:	4616      	mov	r6, r2
 8012a58:	3201      	adds	r2, #1
 8012a5a:	7830      	ldrb	r0, [r6, #0]
 8012a5c:	f7ff ffb0 	bl	80129c0 <__hexdig_fun>
 8012a60:	2800      	cmp	r0, #0
 8012a62:	d1f8      	bne.n	8012a56 <__gethex+0x6a>
 8012a64:	498d      	ldr	r1, [pc, #564]	@ (8012c9c <__gethex+0x2b0>)
 8012a66:	2201      	movs	r2, #1
 8012a68:	4630      	mov	r0, r6
 8012a6a:	f7ff fef9 	bl	8012860 <strncmp>
 8012a6e:	2800      	cmp	r0, #0
 8012a70:	d13f      	bne.n	8012af2 <__gethex+0x106>
 8012a72:	b944      	cbnz	r4, 8012a86 <__gethex+0x9a>
 8012a74:	1c74      	adds	r4, r6, #1
 8012a76:	4622      	mov	r2, r4
 8012a78:	4616      	mov	r6, r2
 8012a7a:	3201      	adds	r2, #1
 8012a7c:	7830      	ldrb	r0, [r6, #0]
 8012a7e:	f7ff ff9f 	bl	80129c0 <__hexdig_fun>
 8012a82:	2800      	cmp	r0, #0
 8012a84:	d1f8      	bne.n	8012a78 <__gethex+0x8c>
 8012a86:	1ba4      	subs	r4, r4, r6
 8012a88:	00a7      	lsls	r7, r4, #2
 8012a8a:	7833      	ldrb	r3, [r6, #0]
 8012a8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012a90:	2b50      	cmp	r3, #80	@ 0x50
 8012a92:	d13e      	bne.n	8012b12 <__gethex+0x126>
 8012a94:	7873      	ldrb	r3, [r6, #1]
 8012a96:	2b2b      	cmp	r3, #43	@ 0x2b
 8012a98:	d033      	beq.n	8012b02 <__gethex+0x116>
 8012a9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8012a9c:	d034      	beq.n	8012b08 <__gethex+0x11c>
 8012a9e:	1c71      	adds	r1, r6, #1
 8012aa0:	2400      	movs	r4, #0
 8012aa2:	7808      	ldrb	r0, [r1, #0]
 8012aa4:	f7ff ff8c 	bl	80129c0 <__hexdig_fun>
 8012aa8:	1e43      	subs	r3, r0, #1
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	2b18      	cmp	r3, #24
 8012aae:	d830      	bhi.n	8012b12 <__gethex+0x126>
 8012ab0:	f1a0 0210 	sub.w	r2, r0, #16
 8012ab4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012ab8:	f7ff ff82 	bl	80129c0 <__hexdig_fun>
 8012abc:	f100 3cff 	add.w	ip, r0, #4294967295
 8012ac0:	fa5f fc8c 	uxtb.w	ip, ip
 8012ac4:	f1bc 0f18 	cmp.w	ip, #24
 8012ac8:	f04f 030a 	mov.w	r3, #10
 8012acc:	d91e      	bls.n	8012b0c <__gethex+0x120>
 8012ace:	b104      	cbz	r4, 8012ad2 <__gethex+0xe6>
 8012ad0:	4252      	negs	r2, r2
 8012ad2:	4417      	add	r7, r2
 8012ad4:	f8ca 1000 	str.w	r1, [sl]
 8012ad8:	b1ed      	cbz	r5, 8012b16 <__gethex+0x12a>
 8012ada:	f1bb 0f00 	cmp.w	fp, #0
 8012ade:	bf0c      	ite	eq
 8012ae0:	2506      	moveq	r5, #6
 8012ae2:	2500      	movne	r5, #0
 8012ae4:	4628      	mov	r0, r5
 8012ae6:	b005      	add	sp, #20
 8012ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aec:	2500      	movs	r5, #0
 8012aee:	462c      	mov	r4, r5
 8012af0:	e7b0      	b.n	8012a54 <__gethex+0x68>
 8012af2:	2c00      	cmp	r4, #0
 8012af4:	d1c7      	bne.n	8012a86 <__gethex+0x9a>
 8012af6:	4627      	mov	r7, r4
 8012af8:	e7c7      	b.n	8012a8a <__gethex+0x9e>
 8012afa:	464e      	mov	r6, r9
 8012afc:	462f      	mov	r7, r5
 8012afe:	2501      	movs	r5, #1
 8012b00:	e7c3      	b.n	8012a8a <__gethex+0x9e>
 8012b02:	2400      	movs	r4, #0
 8012b04:	1cb1      	adds	r1, r6, #2
 8012b06:	e7cc      	b.n	8012aa2 <__gethex+0xb6>
 8012b08:	2401      	movs	r4, #1
 8012b0a:	e7fb      	b.n	8012b04 <__gethex+0x118>
 8012b0c:	fb03 0002 	mla	r0, r3, r2, r0
 8012b10:	e7ce      	b.n	8012ab0 <__gethex+0xc4>
 8012b12:	4631      	mov	r1, r6
 8012b14:	e7de      	b.n	8012ad4 <__gethex+0xe8>
 8012b16:	eba6 0309 	sub.w	r3, r6, r9
 8012b1a:	3b01      	subs	r3, #1
 8012b1c:	4629      	mov	r1, r5
 8012b1e:	2b07      	cmp	r3, #7
 8012b20:	dc0a      	bgt.n	8012b38 <__gethex+0x14c>
 8012b22:	9801      	ldr	r0, [sp, #4]
 8012b24:	f7fe f9c4 	bl	8010eb0 <_Balloc>
 8012b28:	4604      	mov	r4, r0
 8012b2a:	b940      	cbnz	r0, 8012b3e <__gethex+0x152>
 8012b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8012ca0 <__gethex+0x2b4>)
 8012b2e:	4602      	mov	r2, r0
 8012b30:	21e4      	movs	r1, #228	@ 0xe4
 8012b32:	485c      	ldr	r0, [pc, #368]	@ (8012ca4 <__gethex+0x2b8>)
 8012b34:	f7ff fec0 	bl	80128b8 <__assert_func>
 8012b38:	3101      	adds	r1, #1
 8012b3a:	105b      	asrs	r3, r3, #1
 8012b3c:	e7ef      	b.n	8012b1e <__gethex+0x132>
 8012b3e:	f100 0a14 	add.w	sl, r0, #20
 8012b42:	2300      	movs	r3, #0
 8012b44:	4655      	mov	r5, sl
 8012b46:	469b      	mov	fp, r3
 8012b48:	45b1      	cmp	r9, r6
 8012b4a:	d337      	bcc.n	8012bbc <__gethex+0x1d0>
 8012b4c:	f845 bb04 	str.w	fp, [r5], #4
 8012b50:	eba5 050a 	sub.w	r5, r5, sl
 8012b54:	10ad      	asrs	r5, r5, #2
 8012b56:	6125      	str	r5, [r4, #16]
 8012b58:	4658      	mov	r0, fp
 8012b5a:	f7fe fa9b 	bl	8011094 <__hi0bits>
 8012b5e:	016d      	lsls	r5, r5, #5
 8012b60:	f8d8 6000 	ldr.w	r6, [r8]
 8012b64:	1a2d      	subs	r5, r5, r0
 8012b66:	42b5      	cmp	r5, r6
 8012b68:	dd54      	ble.n	8012c14 <__gethex+0x228>
 8012b6a:	1bad      	subs	r5, r5, r6
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	4620      	mov	r0, r4
 8012b70:	f7fe fe2f 	bl	80117d2 <__any_on>
 8012b74:	4681      	mov	r9, r0
 8012b76:	b178      	cbz	r0, 8012b98 <__gethex+0x1ac>
 8012b78:	1e6b      	subs	r3, r5, #1
 8012b7a:	1159      	asrs	r1, r3, #5
 8012b7c:	f003 021f 	and.w	r2, r3, #31
 8012b80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012b84:	f04f 0901 	mov.w	r9, #1
 8012b88:	fa09 f202 	lsl.w	r2, r9, r2
 8012b8c:	420a      	tst	r2, r1
 8012b8e:	d003      	beq.n	8012b98 <__gethex+0x1ac>
 8012b90:	454b      	cmp	r3, r9
 8012b92:	dc36      	bgt.n	8012c02 <__gethex+0x216>
 8012b94:	f04f 0902 	mov.w	r9, #2
 8012b98:	4629      	mov	r1, r5
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	f7ff febe 	bl	801291c <rshift>
 8012ba0:	442f      	add	r7, r5
 8012ba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012ba6:	42bb      	cmp	r3, r7
 8012ba8:	da42      	bge.n	8012c30 <__gethex+0x244>
 8012baa:	9801      	ldr	r0, [sp, #4]
 8012bac:	4621      	mov	r1, r4
 8012bae:	f7fe f9bf 	bl	8010f30 <_Bfree>
 8012bb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	6013      	str	r3, [r2, #0]
 8012bb8:	25a3      	movs	r5, #163	@ 0xa3
 8012bba:	e793      	b.n	8012ae4 <__gethex+0xf8>
 8012bbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012bc0:	2a2e      	cmp	r2, #46	@ 0x2e
 8012bc2:	d012      	beq.n	8012bea <__gethex+0x1fe>
 8012bc4:	2b20      	cmp	r3, #32
 8012bc6:	d104      	bne.n	8012bd2 <__gethex+0x1e6>
 8012bc8:	f845 bb04 	str.w	fp, [r5], #4
 8012bcc:	f04f 0b00 	mov.w	fp, #0
 8012bd0:	465b      	mov	r3, fp
 8012bd2:	7830      	ldrb	r0, [r6, #0]
 8012bd4:	9303      	str	r3, [sp, #12]
 8012bd6:	f7ff fef3 	bl	80129c0 <__hexdig_fun>
 8012bda:	9b03      	ldr	r3, [sp, #12]
 8012bdc:	f000 000f 	and.w	r0, r0, #15
 8012be0:	4098      	lsls	r0, r3
 8012be2:	ea4b 0b00 	orr.w	fp, fp, r0
 8012be6:	3304      	adds	r3, #4
 8012be8:	e7ae      	b.n	8012b48 <__gethex+0x15c>
 8012bea:	45b1      	cmp	r9, r6
 8012bec:	d8ea      	bhi.n	8012bc4 <__gethex+0x1d8>
 8012bee:	492b      	ldr	r1, [pc, #172]	@ (8012c9c <__gethex+0x2b0>)
 8012bf0:	9303      	str	r3, [sp, #12]
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	f7ff fe33 	bl	8012860 <strncmp>
 8012bfa:	9b03      	ldr	r3, [sp, #12]
 8012bfc:	2800      	cmp	r0, #0
 8012bfe:	d1e1      	bne.n	8012bc4 <__gethex+0x1d8>
 8012c00:	e7a2      	b.n	8012b48 <__gethex+0x15c>
 8012c02:	1ea9      	subs	r1, r5, #2
 8012c04:	4620      	mov	r0, r4
 8012c06:	f7fe fde4 	bl	80117d2 <__any_on>
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	d0c2      	beq.n	8012b94 <__gethex+0x1a8>
 8012c0e:	f04f 0903 	mov.w	r9, #3
 8012c12:	e7c1      	b.n	8012b98 <__gethex+0x1ac>
 8012c14:	da09      	bge.n	8012c2a <__gethex+0x23e>
 8012c16:	1b75      	subs	r5, r6, r5
 8012c18:	4621      	mov	r1, r4
 8012c1a:	9801      	ldr	r0, [sp, #4]
 8012c1c:	462a      	mov	r2, r5
 8012c1e:	f7fe fb9f 	bl	8011360 <__lshift>
 8012c22:	1b7f      	subs	r7, r7, r5
 8012c24:	4604      	mov	r4, r0
 8012c26:	f100 0a14 	add.w	sl, r0, #20
 8012c2a:	f04f 0900 	mov.w	r9, #0
 8012c2e:	e7b8      	b.n	8012ba2 <__gethex+0x1b6>
 8012c30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012c34:	42bd      	cmp	r5, r7
 8012c36:	dd6f      	ble.n	8012d18 <__gethex+0x32c>
 8012c38:	1bed      	subs	r5, r5, r7
 8012c3a:	42ae      	cmp	r6, r5
 8012c3c:	dc34      	bgt.n	8012ca8 <__gethex+0x2bc>
 8012c3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012c42:	2b02      	cmp	r3, #2
 8012c44:	d022      	beq.n	8012c8c <__gethex+0x2a0>
 8012c46:	2b03      	cmp	r3, #3
 8012c48:	d024      	beq.n	8012c94 <__gethex+0x2a8>
 8012c4a:	2b01      	cmp	r3, #1
 8012c4c:	d115      	bne.n	8012c7a <__gethex+0x28e>
 8012c4e:	42ae      	cmp	r6, r5
 8012c50:	d113      	bne.n	8012c7a <__gethex+0x28e>
 8012c52:	2e01      	cmp	r6, #1
 8012c54:	d10b      	bne.n	8012c6e <__gethex+0x282>
 8012c56:	9a02      	ldr	r2, [sp, #8]
 8012c58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012c5c:	6013      	str	r3, [r2, #0]
 8012c5e:	2301      	movs	r3, #1
 8012c60:	6123      	str	r3, [r4, #16]
 8012c62:	f8ca 3000 	str.w	r3, [sl]
 8012c66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c68:	2562      	movs	r5, #98	@ 0x62
 8012c6a:	601c      	str	r4, [r3, #0]
 8012c6c:	e73a      	b.n	8012ae4 <__gethex+0xf8>
 8012c6e:	1e71      	subs	r1, r6, #1
 8012c70:	4620      	mov	r0, r4
 8012c72:	f7fe fdae 	bl	80117d2 <__any_on>
 8012c76:	2800      	cmp	r0, #0
 8012c78:	d1ed      	bne.n	8012c56 <__gethex+0x26a>
 8012c7a:	9801      	ldr	r0, [sp, #4]
 8012c7c:	4621      	mov	r1, r4
 8012c7e:	f7fe f957 	bl	8010f30 <_Bfree>
 8012c82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012c84:	2300      	movs	r3, #0
 8012c86:	6013      	str	r3, [r2, #0]
 8012c88:	2550      	movs	r5, #80	@ 0x50
 8012c8a:	e72b      	b.n	8012ae4 <__gethex+0xf8>
 8012c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d1f3      	bne.n	8012c7a <__gethex+0x28e>
 8012c92:	e7e0      	b.n	8012c56 <__gethex+0x26a>
 8012c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d1dd      	bne.n	8012c56 <__gethex+0x26a>
 8012c9a:	e7ee      	b.n	8012c7a <__gethex+0x28e>
 8012c9c:	080166f0 	.word	0x080166f0
 8012ca0:	0801658a 	.word	0x0801658a
 8012ca4:	0801679d 	.word	0x0801679d
 8012ca8:	1e6f      	subs	r7, r5, #1
 8012caa:	f1b9 0f00 	cmp.w	r9, #0
 8012cae:	d130      	bne.n	8012d12 <__gethex+0x326>
 8012cb0:	b127      	cbz	r7, 8012cbc <__gethex+0x2d0>
 8012cb2:	4639      	mov	r1, r7
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	f7fe fd8c 	bl	80117d2 <__any_on>
 8012cba:	4681      	mov	r9, r0
 8012cbc:	117a      	asrs	r2, r7, #5
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012cc4:	f007 071f 	and.w	r7, r7, #31
 8012cc8:	40bb      	lsls	r3, r7
 8012cca:	4213      	tst	r3, r2
 8012ccc:	4629      	mov	r1, r5
 8012cce:	4620      	mov	r0, r4
 8012cd0:	bf18      	it	ne
 8012cd2:	f049 0902 	orrne.w	r9, r9, #2
 8012cd6:	f7ff fe21 	bl	801291c <rshift>
 8012cda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012cde:	1b76      	subs	r6, r6, r5
 8012ce0:	2502      	movs	r5, #2
 8012ce2:	f1b9 0f00 	cmp.w	r9, #0
 8012ce6:	d047      	beq.n	8012d78 <__gethex+0x38c>
 8012ce8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012cec:	2b02      	cmp	r3, #2
 8012cee:	d015      	beq.n	8012d1c <__gethex+0x330>
 8012cf0:	2b03      	cmp	r3, #3
 8012cf2:	d017      	beq.n	8012d24 <__gethex+0x338>
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d109      	bne.n	8012d0c <__gethex+0x320>
 8012cf8:	f019 0f02 	tst.w	r9, #2
 8012cfc:	d006      	beq.n	8012d0c <__gethex+0x320>
 8012cfe:	f8da 3000 	ldr.w	r3, [sl]
 8012d02:	ea49 0903 	orr.w	r9, r9, r3
 8012d06:	f019 0f01 	tst.w	r9, #1
 8012d0a:	d10e      	bne.n	8012d2a <__gethex+0x33e>
 8012d0c:	f045 0510 	orr.w	r5, r5, #16
 8012d10:	e032      	b.n	8012d78 <__gethex+0x38c>
 8012d12:	f04f 0901 	mov.w	r9, #1
 8012d16:	e7d1      	b.n	8012cbc <__gethex+0x2d0>
 8012d18:	2501      	movs	r5, #1
 8012d1a:	e7e2      	b.n	8012ce2 <__gethex+0x2f6>
 8012d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d1e:	f1c3 0301 	rsb	r3, r3, #1
 8012d22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d0f0      	beq.n	8012d0c <__gethex+0x320>
 8012d2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012d2e:	f104 0314 	add.w	r3, r4, #20
 8012d32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012d36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012d3a:	f04f 0c00 	mov.w	ip, #0
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012d48:	d01b      	beq.n	8012d82 <__gethex+0x396>
 8012d4a:	3201      	adds	r2, #1
 8012d4c:	6002      	str	r2, [r0, #0]
 8012d4e:	2d02      	cmp	r5, #2
 8012d50:	f104 0314 	add.w	r3, r4, #20
 8012d54:	d13c      	bne.n	8012dd0 <__gethex+0x3e4>
 8012d56:	f8d8 2000 	ldr.w	r2, [r8]
 8012d5a:	3a01      	subs	r2, #1
 8012d5c:	42b2      	cmp	r2, r6
 8012d5e:	d109      	bne.n	8012d74 <__gethex+0x388>
 8012d60:	1171      	asrs	r1, r6, #5
 8012d62:	2201      	movs	r2, #1
 8012d64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d68:	f006 061f 	and.w	r6, r6, #31
 8012d6c:	fa02 f606 	lsl.w	r6, r2, r6
 8012d70:	421e      	tst	r6, r3
 8012d72:	d13a      	bne.n	8012dea <__gethex+0x3fe>
 8012d74:	f045 0520 	orr.w	r5, r5, #32
 8012d78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d7a:	601c      	str	r4, [r3, #0]
 8012d7c:	9b02      	ldr	r3, [sp, #8]
 8012d7e:	601f      	str	r7, [r3, #0]
 8012d80:	e6b0      	b.n	8012ae4 <__gethex+0xf8>
 8012d82:	4299      	cmp	r1, r3
 8012d84:	f843 cc04 	str.w	ip, [r3, #-4]
 8012d88:	d8d9      	bhi.n	8012d3e <__gethex+0x352>
 8012d8a:	68a3      	ldr	r3, [r4, #8]
 8012d8c:	459b      	cmp	fp, r3
 8012d8e:	db17      	blt.n	8012dc0 <__gethex+0x3d4>
 8012d90:	6861      	ldr	r1, [r4, #4]
 8012d92:	9801      	ldr	r0, [sp, #4]
 8012d94:	3101      	adds	r1, #1
 8012d96:	f7fe f88b 	bl	8010eb0 <_Balloc>
 8012d9a:	4681      	mov	r9, r0
 8012d9c:	b918      	cbnz	r0, 8012da6 <__gethex+0x3ba>
 8012d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8012e08 <__gethex+0x41c>)
 8012da0:	4602      	mov	r2, r0
 8012da2:	2184      	movs	r1, #132	@ 0x84
 8012da4:	e6c5      	b.n	8012b32 <__gethex+0x146>
 8012da6:	6922      	ldr	r2, [r4, #16]
 8012da8:	3202      	adds	r2, #2
 8012daa:	f104 010c 	add.w	r1, r4, #12
 8012dae:	0092      	lsls	r2, r2, #2
 8012db0:	300c      	adds	r0, #12
 8012db2:	f7fd f91c 	bl	800ffee <memcpy>
 8012db6:	4621      	mov	r1, r4
 8012db8:	9801      	ldr	r0, [sp, #4]
 8012dba:	f7fe f8b9 	bl	8010f30 <_Bfree>
 8012dbe:	464c      	mov	r4, r9
 8012dc0:	6923      	ldr	r3, [r4, #16]
 8012dc2:	1c5a      	adds	r2, r3, #1
 8012dc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012dc8:	6122      	str	r2, [r4, #16]
 8012dca:	2201      	movs	r2, #1
 8012dcc:	615a      	str	r2, [r3, #20]
 8012dce:	e7be      	b.n	8012d4e <__gethex+0x362>
 8012dd0:	6922      	ldr	r2, [r4, #16]
 8012dd2:	455a      	cmp	r2, fp
 8012dd4:	dd0b      	ble.n	8012dee <__gethex+0x402>
 8012dd6:	2101      	movs	r1, #1
 8012dd8:	4620      	mov	r0, r4
 8012dda:	f7ff fd9f 	bl	801291c <rshift>
 8012dde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012de2:	3701      	adds	r7, #1
 8012de4:	42bb      	cmp	r3, r7
 8012de6:	f6ff aee0 	blt.w	8012baa <__gethex+0x1be>
 8012dea:	2501      	movs	r5, #1
 8012dec:	e7c2      	b.n	8012d74 <__gethex+0x388>
 8012dee:	f016 061f 	ands.w	r6, r6, #31
 8012df2:	d0fa      	beq.n	8012dea <__gethex+0x3fe>
 8012df4:	4453      	add	r3, sl
 8012df6:	f1c6 0620 	rsb	r6, r6, #32
 8012dfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012dfe:	f7fe f949 	bl	8011094 <__hi0bits>
 8012e02:	42b0      	cmp	r0, r6
 8012e04:	dbe7      	blt.n	8012dd6 <__gethex+0x3ea>
 8012e06:	e7f0      	b.n	8012dea <__gethex+0x3fe>
 8012e08:	0801658a 	.word	0x0801658a

08012e0c <L_shift>:
 8012e0c:	f1c2 0208 	rsb	r2, r2, #8
 8012e10:	0092      	lsls	r2, r2, #2
 8012e12:	b570      	push	{r4, r5, r6, lr}
 8012e14:	f1c2 0620 	rsb	r6, r2, #32
 8012e18:	6843      	ldr	r3, [r0, #4]
 8012e1a:	6804      	ldr	r4, [r0, #0]
 8012e1c:	fa03 f506 	lsl.w	r5, r3, r6
 8012e20:	432c      	orrs	r4, r5
 8012e22:	40d3      	lsrs	r3, r2
 8012e24:	6004      	str	r4, [r0, #0]
 8012e26:	f840 3f04 	str.w	r3, [r0, #4]!
 8012e2a:	4288      	cmp	r0, r1
 8012e2c:	d3f4      	bcc.n	8012e18 <L_shift+0xc>
 8012e2e:	bd70      	pop	{r4, r5, r6, pc}

08012e30 <__match>:
 8012e30:	b530      	push	{r4, r5, lr}
 8012e32:	6803      	ldr	r3, [r0, #0]
 8012e34:	3301      	adds	r3, #1
 8012e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e3a:	b914      	cbnz	r4, 8012e42 <__match+0x12>
 8012e3c:	6003      	str	r3, [r0, #0]
 8012e3e:	2001      	movs	r0, #1
 8012e40:	bd30      	pop	{r4, r5, pc}
 8012e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012e4a:	2d19      	cmp	r5, #25
 8012e4c:	bf98      	it	ls
 8012e4e:	3220      	addls	r2, #32
 8012e50:	42a2      	cmp	r2, r4
 8012e52:	d0f0      	beq.n	8012e36 <__match+0x6>
 8012e54:	2000      	movs	r0, #0
 8012e56:	e7f3      	b.n	8012e40 <__match+0x10>

08012e58 <__hexnan>:
 8012e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e5c:	680b      	ldr	r3, [r1, #0]
 8012e5e:	6801      	ldr	r1, [r0, #0]
 8012e60:	115e      	asrs	r6, r3, #5
 8012e62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012e66:	f013 031f 	ands.w	r3, r3, #31
 8012e6a:	b087      	sub	sp, #28
 8012e6c:	bf18      	it	ne
 8012e6e:	3604      	addne	r6, #4
 8012e70:	2500      	movs	r5, #0
 8012e72:	1f37      	subs	r7, r6, #4
 8012e74:	4682      	mov	sl, r0
 8012e76:	4690      	mov	r8, r2
 8012e78:	9301      	str	r3, [sp, #4]
 8012e7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8012e7e:	46b9      	mov	r9, r7
 8012e80:	463c      	mov	r4, r7
 8012e82:	9502      	str	r5, [sp, #8]
 8012e84:	46ab      	mov	fp, r5
 8012e86:	784a      	ldrb	r2, [r1, #1]
 8012e88:	1c4b      	adds	r3, r1, #1
 8012e8a:	9303      	str	r3, [sp, #12]
 8012e8c:	b342      	cbz	r2, 8012ee0 <__hexnan+0x88>
 8012e8e:	4610      	mov	r0, r2
 8012e90:	9105      	str	r1, [sp, #20]
 8012e92:	9204      	str	r2, [sp, #16]
 8012e94:	f7ff fd94 	bl	80129c0 <__hexdig_fun>
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	d151      	bne.n	8012f40 <__hexnan+0xe8>
 8012e9c:	9a04      	ldr	r2, [sp, #16]
 8012e9e:	9905      	ldr	r1, [sp, #20]
 8012ea0:	2a20      	cmp	r2, #32
 8012ea2:	d818      	bhi.n	8012ed6 <__hexnan+0x7e>
 8012ea4:	9b02      	ldr	r3, [sp, #8]
 8012ea6:	459b      	cmp	fp, r3
 8012ea8:	dd13      	ble.n	8012ed2 <__hexnan+0x7a>
 8012eaa:	454c      	cmp	r4, r9
 8012eac:	d206      	bcs.n	8012ebc <__hexnan+0x64>
 8012eae:	2d07      	cmp	r5, #7
 8012eb0:	dc04      	bgt.n	8012ebc <__hexnan+0x64>
 8012eb2:	462a      	mov	r2, r5
 8012eb4:	4649      	mov	r1, r9
 8012eb6:	4620      	mov	r0, r4
 8012eb8:	f7ff ffa8 	bl	8012e0c <L_shift>
 8012ebc:	4544      	cmp	r4, r8
 8012ebe:	d952      	bls.n	8012f66 <__hexnan+0x10e>
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	f1a4 0904 	sub.w	r9, r4, #4
 8012ec6:	f844 3c04 	str.w	r3, [r4, #-4]
 8012eca:	f8cd b008 	str.w	fp, [sp, #8]
 8012ece:	464c      	mov	r4, r9
 8012ed0:	461d      	mov	r5, r3
 8012ed2:	9903      	ldr	r1, [sp, #12]
 8012ed4:	e7d7      	b.n	8012e86 <__hexnan+0x2e>
 8012ed6:	2a29      	cmp	r2, #41	@ 0x29
 8012ed8:	d157      	bne.n	8012f8a <__hexnan+0x132>
 8012eda:	3102      	adds	r1, #2
 8012edc:	f8ca 1000 	str.w	r1, [sl]
 8012ee0:	f1bb 0f00 	cmp.w	fp, #0
 8012ee4:	d051      	beq.n	8012f8a <__hexnan+0x132>
 8012ee6:	454c      	cmp	r4, r9
 8012ee8:	d206      	bcs.n	8012ef8 <__hexnan+0xa0>
 8012eea:	2d07      	cmp	r5, #7
 8012eec:	dc04      	bgt.n	8012ef8 <__hexnan+0xa0>
 8012eee:	462a      	mov	r2, r5
 8012ef0:	4649      	mov	r1, r9
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f7ff ff8a 	bl	8012e0c <L_shift>
 8012ef8:	4544      	cmp	r4, r8
 8012efa:	d936      	bls.n	8012f6a <__hexnan+0x112>
 8012efc:	f1a8 0204 	sub.w	r2, r8, #4
 8012f00:	4623      	mov	r3, r4
 8012f02:	f853 1b04 	ldr.w	r1, [r3], #4
 8012f06:	f842 1f04 	str.w	r1, [r2, #4]!
 8012f0a:	429f      	cmp	r7, r3
 8012f0c:	d2f9      	bcs.n	8012f02 <__hexnan+0xaa>
 8012f0e:	1b3b      	subs	r3, r7, r4
 8012f10:	f023 0303 	bic.w	r3, r3, #3
 8012f14:	3304      	adds	r3, #4
 8012f16:	3401      	adds	r4, #1
 8012f18:	3e03      	subs	r6, #3
 8012f1a:	42b4      	cmp	r4, r6
 8012f1c:	bf88      	it	hi
 8012f1e:	2304      	movhi	r3, #4
 8012f20:	4443      	add	r3, r8
 8012f22:	2200      	movs	r2, #0
 8012f24:	f843 2b04 	str.w	r2, [r3], #4
 8012f28:	429f      	cmp	r7, r3
 8012f2a:	d2fb      	bcs.n	8012f24 <__hexnan+0xcc>
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	b91b      	cbnz	r3, 8012f38 <__hexnan+0xe0>
 8012f30:	4547      	cmp	r7, r8
 8012f32:	d128      	bne.n	8012f86 <__hexnan+0x12e>
 8012f34:	2301      	movs	r3, #1
 8012f36:	603b      	str	r3, [r7, #0]
 8012f38:	2005      	movs	r0, #5
 8012f3a:	b007      	add	sp, #28
 8012f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f40:	3501      	adds	r5, #1
 8012f42:	2d08      	cmp	r5, #8
 8012f44:	f10b 0b01 	add.w	fp, fp, #1
 8012f48:	dd06      	ble.n	8012f58 <__hexnan+0x100>
 8012f4a:	4544      	cmp	r4, r8
 8012f4c:	d9c1      	bls.n	8012ed2 <__hexnan+0x7a>
 8012f4e:	2300      	movs	r3, #0
 8012f50:	f844 3c04 	str.w	r3, [r4, #-4]
 8012f54:	2501      	movs	r5, #1
 8012f56:	3c04      	subs	r4, #4
 8012f58:	6822      	ldr	r2, [r4, #0]
 8012f5a:	f000 000f 	and.w	r0, r0, #15
 8012f5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012f62:	6020      	str	r0, [r4, #0]
 8012f64:	e7b5      	b.n	8012ed2 <__hexnan+0x7a>
 8012f66:	2508      	movs	r5, #8
 8012f68:	e7b3      	b.n	8012ed2 <__hexnan+0x7a>
 8012f6a:	9b01      	ldr	r3, [sp, #4]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d0dd      	beq.n	8012f2c <__hexnan+0xd4>
 8012f70:	f1c3 0320 	rsb	r3, r3, #32
 8012f74:	f04f 32ff 	mov.w	r2, #4294967295
 8012f78:	40da      	lsrs	r2, r3
 8012f7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012f7e:	4013      	ands	r3, r2
 8012f80:	f846 3c04 	str.w	r3, [r6, #-4]
 8012f84:	e7d2      	b.n	8012f2c <__hexnan+0xd4>
 8012f86:	3f04      	subs	r7, #4
 8012f88:	e7d0      	b.n	8012f2c <__hexnan+0xd4>
 8012f8a:	2004      	movs	r0, #4
 8012f8c:	e7d5      	b.n	8012f3a <__hexnan+0xe2>

08012f8e <__ascii_mbtowc>:
 8012f8e:	b082      	sub	sp, #8
 8012f90:	b901      	cbnz	r1, 8012f94 <__ascii_mbtowc+0x6>
 8012f92:	a901      	add	r1, sp, #4
 8012f94:	b142      	cbz	r2, 8012fa8 <__ascii_mbtowc+0x1a>
 8012f96:	b14b      	cbz	r3, 8012fac <__ascii_mbtowc+0x1e>
 8012f98:	7813      	ldrb	r3, [r2, #0]
 8012f9a:	600b      	str	r3, [r1, #0]
 8012f9c:	7812      	ldrb	r2, [r2, #0]
 8012f9e:	1e10      	subs	r0, r2, #0
 8012fa0:	bf18      	it	ne
 8012fa2:	2001      	movne	r0, #1
 8012fa4:	b002      	add	sp, #8
 8012fa6:	4770      	bx	lr
 8012fa8:	4610      	mov	r0, r2
 8012faa:	e7fb      	b.n	8012fa4 <__ascii_mbtowc+0x16>
 8012fac:	f06f 0001 	mvn.w	r0, #1
 8012fb0:	e7f8      	b.n	8012fa4 <__ascii_mbtowc+0x16>

08012fb2 <_realloc_r>:
 8012fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb6:	4680      	mov	r8, r0
 8012fb8:	4615      	mov	r5, r2
 8012fba:	460c      	mov	r4, r1
 8012fbc:	b921      	cbnz	r1, 8012fc8 <_realloc_r+0x16>
 8012fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc2:	4611      	mov	r1, r2
 8012fc4:	f7fd bee8 	b.w	8010d98 <_malloc_r>
 8012fc8:	b92a      	cbnz	r2, 8012fd6 <_realloc_r+0x24>
 8012fca:	f7fd fe71 	bl	8010cb0 <_free_r>
 8012fce:	2400      	movs	r4, #0
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fd6:	f000 f840 	bl	801305a <_malloc_usable_size_r>
 8012fda:	4285      	cmp	r5, r0
 8012fdc:	4606      	mov	r6, r0
 8012fde:	d802      	bhi.n	8012fe6 <_realloc_r+0x34>
 8012fe0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012fe4:	d8f4      	bhi.n	8012fd0 <_realloc_r+0x1e>
 8012fe6:	4629      	mov	r1, r5
 8012fe8:	4640      	mov	r0, r8
 8012fea:	f7fd fed5 	bl	8010d98 <_malloc_r>
 8012fee:	4607      	mov	r7, r0
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	d0ec      	beq.n	8012fce <_realloc_r+0x1c>
 8012ff4:	42b5      	cmp	r5, r6
 8012ff6:	462a      	mov	r2, r5
 8012ff8:	4621      	mov	r1, r4
 8012ffa:	bf28      	it	cs
 8012ffc:	4632      	movcs	r2, r6
 8012ffe:	f7fc fff6 	bl	800ffee <memcpy>
 8013002:	4621      	mov	r1, r4
 8013004:	4640      	mov	r0, r8
 8013006:	f7fd fe53 	bl	8010cb0 <_free_r>
 801300a:	463c      	mov	r4, r7
 801300c:	e7e0      	b.n	8012fd0 <_realloc_r+0x1e>

0801300e <__ascii_wctomb>:
 801300e:	4603      	mov	r3, r0
 8013010:	4608      	mov	r0, r1
 8013012:	b141      	cbz	r1, 8013026 <__ascii_wctomb+0x18>
 8013014:	2aff      	cmp	r2, #255	@ 0xff
 8013016:	d904      	bls.n	8013022 <__ascii_wctomb+0x14>
 8013018:	228a      	movs	r2, #138	@ 0x8a
 801301a:	601a      	str	r2, [r3, #0]
 801301c:	f04f 30ff 	mov.w	r0, #4294967295
 8013020:	4770      	bx	lr
 8013022:	700a      	strb	r2, [r1, #0]
 8013024:	2001      	movs	r0, #1
 8013026:	4770      	bx	lr

08013028 <fiprintf>:
 8013028:	b40e      	push	{r1, r2, r3}
 801302a:	b503      	push	{r0, r1, lr}
 801302c:	4601      	mov	r1, r0
 801302e:	ab03      	add	r3, sp, #12
 8013030:	4805      	ldr	r0, [pc, #20]	@ (8013048 <fiprintf+0x20>)
 8013032:	f853 2b04 	ldr.w	r2, [r3], #4
 8013036:	6800      	ldr	r0, [r0, #0]
 8013038:	9301      	str	r3, [sp, #4]
 801303a:	f000 f83f 	bl	80130bc <_vfiprintf_r>
 801303e:	b002      	add	sp, #8
 8013040:	f85d eb04 	ldr.w	lr, [sp], #4
 8013044:	b003      	add	sp, #12
 8013046:	4770      	bx	lr
 8013048:	2000047c 	.word	0x2000047c

0801304c <abort>:
 801304c:	b508      	push	{r3, lr}
 801304e:	2006      	movs	r0, #6
 8013050:	f000 fa08 	bl	8013464 <raise>
 8013054:	2001      	movs	r0, #1
 8013056:	f7f7 fdd4 	bl	800ac02 <_exit>

0801305a <_malloc_usable_size_r>:
 801305a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801305e:	1f18      	subs	r0, r3, #4
 8013060:	2b00      	cmp	r3, #0
 8013062:	bfbc      	itt	lt
 8013064:	580b      	ldrlt	r3, [r1, r0]
 8013066:	18c0      	addlt	r0, r0, r3
 8013068:	4770      	bx	lr

0801306a <__sfputc_r>:
 801306a:	6893      	ldr	r3, [r2, #8]
 801306c:	3b01      	subs	r3, #1
 801306e:	2b00      	cmp	r3, #0
 8013070:	b410      	push	{r4}
 8013072:	6093      	str	r3, [r2, #8]
 8013074:	da08      	bge.n	8013088 <__sfputc_r+0x1e>
 8013076:	6994      	ldr	r4, [r2, #24]
 8013078:	42a3      	cmp	r3, r4
 801307a:	db01      	blt.n	8013080 <__sfputc_r+0x16>
 801307c:	290a      	cmp	r1, #10
 801307e:	d103      	bne.n	8013088 <__sfputc_r+0x1e>
 8013080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013084:	f000 b932 	b.w	80132ec <__swbuf_r>
 8013088:	6813      	ldr	r3, [r2, #0]
 801308a:	1c58      	adds	r0, r3, #1
 801308c:	6010      	str	r0, [r2, #0]
 801308e:	7019      	strb	r1, [r3, #0]
 8013090:	4608      	mov	r0, r1
 8013092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013096:	4770      	bx	lr

08013098 <__sfputs_r>:
 8013098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801309a:	4606      	mov	r6, r0
 801309c:	460f      	mov	r7, r1
 801309e:	4614      	mov	r4, r2
 80130a0:	18d5      	adds	r5, r2, r3
 80130a2:	42ac      	cmp	r4, r5
 80130a4:	d101      	bne.n	80130aa <__sfputs_r+0x12>
 80130a6:	2000      	movs	r0, #0
 80130a8:	e007      	b.n	80130ba <__sfputs_r+0x22>
 80130aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130ae:	463a      	mov	r2, r7
 80130b0:	4630      	mov	r0, r6
 80130b2:	f7ff ffda 	bl	801306a <__sfputc_r>
 80130b6:	1c43      	adds	r3, r0, #1
 80130b8:	d1f3      	bne.n	80130a2 <__sfputs_r+0xa>
 80130ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080130bc <_vfiprintf_r>:
 80130bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c0:	460d      	mov	r5, r1
 80130c2:	b09d      	sub	sp, #116	@ 0x74
 80130c4:	4614      	mov	r4, r2
 80130c6:	4698      	mov	r8, r3
 80130c8:	4606      	mov	r6, r0
 80130ca:	b118      	cbz	r0, 80130d4 <_vfiprintf_r+0x18>
 80130cc:	6a03      	ldr	r3, [r0, #32]
 80130ce:	b90b      	cbnz	r3, 80130d4 <_vfiprintf_r+0x18>
 80130d0:	f7fc fe74 	bl	800fdbc <__sinit>
 80130d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130d6:	07d9      	lsls	r1, r3, #31
 80130d8:	d405      	bmi.n	80130e6 <_vfiprintf_r+0x2a>
 80130da:	89ab      	ldrh	r3, [r5, #12]
 80130dc:	059a      	lsls	r2, r3, #22
 80130de:	d402      	bmi.n	80130e6 <_vfiprintf_r+0x2a>
 80130e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130e2:	f7fc ff82 	bl	800ffea <__retarget_lock_acquire_recursive>
 80130e6:	89ab      	ldrh	r3, [r5, #12]
 80130e8:	071b      	lsls	r3, r3, #28
 80130ea:	d501      	bpl.n	80130f0 <_vfiprintf_r+0x34>
 80130ec:	692b      	ldr	r3, [r5, #16]
 80130ee:	b99b      	cbnz	r3, 8013118 <_vfiprintf_r+0x5c>
 80130f0:	4629      	mov	r1, r5
 80130f2:	4630      	mov	r0, r6
 80130f4:	f000 f938 	bl	8013368 <__swsetup_r>
 80130f8:	b170      	cbz	r0, 8013118 <_vfiprintf_r+0x5c>
 80130fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130fc:	07dc      	lsls	r4, r3, #31
 80130fe:	d504      	bpl.n	801310a <_vfiprintf_r+0x4e>
 8013100:	f04f 30ff 	mov.w	r0, #4294967295
 8013104:	b01d      	add	sp, #116	@ 0x74
 8013106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801310a:	89ab      	ldrh	r3, [r5, #12]
 801310c:	0598      	lsls	r0, r3, #22
 801310e:	d4f7      	bmi.n	8013100 <_vfiprintf_r+0x44>
 8013110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013112:	f7fc ff6b 	bl	800ffec <__retarget_lock_release_recursive>
 8013116:	e7f3      	b.n	8013100 <_vfiprintf_r+0x44>
 8013118:	2300      	movs	r3, #0
 801311a:	9309      	str	r3, [sp, #36]	@ 0x24
 801311c:	2320      	movs	r3, #32
 801311e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013122:	f8cd 800c 	str.w	r8, [sp, #12]
 8013126:	2330      	movs	r3, #48	@ 0x30
 8013128:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80132d8 <_vfiprintf_r+0x21c>
 801312c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013130:	f04f 0901 	mov.w	r9, #1
 8013134:	4623      	mov	r3, r4
 8013136:	469a      	mov	sl, r3
 8013138:	f813 2b01 	ldrb.w	r2, [r3], #1
 801313c:	b10a      	cbz	r2, 8013142 <_vfiprintf_r+0x86>
 801313e:	2a25      	cmp	r2, #37	@ 0x25
 8013140:	d1f9      	bne.n	8013136 <_vfiprintf_r+0x7a>
 8013142:	ebba 0b04 	subs.w	fp, sl, r4
 8013146:	d00b      	beq.n	8013160 <_vfiprintf_r+0xa4>
 8013148:	465b      	mov	r3, fp
 801314a:	4622      	mov	r2, r4
 801314c:	4629      	mov	r1, r5
 801314e:	4630      	mov	r0, r6
 8013150:	f7ff ffa2 	bl	8013098 <__sfputs_r>
 8013154:	3001      	adds	r0, #1
 8013156:	f000 80a7 	beq.w	80132a8 <_vfiprintf_r+0x1ec>
 801315a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801315c:	445a      	add	r2, fp
 801315e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013160:	f89a 3000 	ldrb.w	r3, [sl]
 8013164:	2b00      	cmp	r3, #0
 8013166:	f000 809f 	beq.w	80132a8 <_vfiprintf_r+0x1ec>
 801316a:	2300      	movs	r3, #0
 801316c:	f04f 32ff 	mov.w	r2, #4294967295
 8013170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013174:	f10a 0a01 	add.w	sl, sl, #1
 8013178:	9304      	str	r3, [sp, #16]
 801317a:	9307      	str	r3, [sp, #28]
 801317c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013180:	931a      	str	r3, [sp, #104]	@ 0x68
 8013182:	4654      	mov	r4, sl
 8013184:	2205      	movs	r2, #5
 8013186:	f814 1b01 	ldrb.w	r1, [r4], #1
 801318a:	4853      	ldr	r0, [pc, #332]	@ (80132d8 <_vfiprintf_r+0x21c>)
 801318c:	f7ed f830 	bl	80001f0 <memchr>
 8013190:	9a04      	ldr	r2, [sp, #16]
 8013192:	b9d8      	cbnz	r0, 80131cc <_vfiprintf_r+0x110>
 8013194:	06d1      	lsls	r1, r2, #27
 8013196:	bf44      	itt	mi
 8013198:	2320      	movmi	r3, #32
 801319a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801319e:	0713      	lsls	r3, r2, #28
 80131a0:	bf44      	itt	mi
 80131a2:	232b      	movmi	r3, #43	@ 0x2b
 80131a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80131a8:	f89a 3000 	ldrb.w	r3, [sl]
 80131ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80131ae:	d015      	beq.n	80131dc <_vfiprintf_r+0x120>
 80131b0:	9a07      	ldr	r2, [sp, #28]
 80131b2:	4654      	mov	r4, sl
 80131b4:	2000      	movs	r0, #0
 80131b6:	f04f 0c0a 	mov.w	ip, #10
 80131ba:	4621      	mov	r1, r4
 80131bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131c0:	3b30      	subs	r3, #48	@ 0x30
 80131c2:	2b09      	cmp	r3, #9
 80131c4:	d94b      	bls.n	801325e <_vfiprintf_r+0x1a2>
 80131c6:	b1b0      	cbz	r0, 80131f6 <_vfiprintf_r+0x13a>
 80131c8:	9207      	str	r2, [sp, #28]
 80131ca:	e014      	b.n	80131f6 <_vfiprintf_r+0x13a>
 80131cc:	eba0 0308 	sub.w	r3, r0, r8
 80131d0:	fa09 f303 	lsl.w	r3, r9, r3
 80131d4:	4313      	orrs	r3, r2
 80131d6:	9304      	str	r3, [sp, #16]
 80131d8:	46a2      	mov	sl, r4
 80131da:	e7d2      	b.n	8013182 <_vfiprintf_r+0xc6>
 80131dc:	9b03      	ldr	r3, [sp, #12]
 80131de:	1d19      	adds	r1, r3, #4
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	9103      	str	r1, [sp, #12]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	bfbb      	ittet	lt
 80131e8:	425b      	neglt	r3, r3
 80131ea:	f042 0202 	orrlt.w	r2, r2, #2
 80131ee:	9307      	strge	r3, [sp, #28]
 80131f0:	9307      	strlt	r3, [sp, #28]
 80131f2:	bfb8      	it	lt
 80131f4:	9204      	strlt	r2, [sp, #16]
 80131f6:	7823      	ldrb	r3, [r4, #0]
 80131f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80131fa:	d10a      	bne.n	8013212 <_vfiprintf_r+0x156>
 80131fc:	7863      	ldrb	r3, [r4, #1]
 80131fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8013200:	d132      	bne.n	8013268 <_vfiprintf_r+0x1ac>
 8013202:	9b03      	ldr	r3, [sp, #12]
 8013204:	1d1a      	adds	r2, r3, #4
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	9203      	str	r2, [sp, #12]
 801320a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801320e:	3402      	adds	r4, #2
 8013210:	9305      	str	r3, [sp, #20]
 8013212:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80132e8 <_vfiprintf_r+0x22c>
 8013216:	7821      	ldrb	r1, [r4, #0]
 8013218:	2203      	movs	r2, #3
 801321a:	4650      	mov	r0, sl
 801321c:	f7ec ffe8 	bl	80001f0 <memchr>
 8013220:	b138      	cbz	r0, 8013232 <_vfiprintf_r+0x176>
 8013222:	9b04      	ldr	r3, [sp, #16]
 8013224:	eba0 000a 	sub.w	r0, r0, sl
 8013228:	2240      	movs	r2, #64	@ 0x40
 801322a:	4082      	lsls	r2, r0
 801322c:	4313      	orrs	r3, r2
 801322e:	3401      	adds	r4, #1
 8013230:	9304      	str	r3, [sp, #16]
 8013232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013236:	4829      	ldr	r0, [pc, #164]	@ (80132dc <_vfiprintf_r+0x220>)
 8013238:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801323c:	2206      	movs	r2, #6
 801323e:	f7ec ffd7 	bl	80001f0 <memchr>
 8013242:	2800      	cmp	r0, #0
 8013244:	d03f      	beq.n	80132c6 <_vfiprintf_r+0x20a>
 8013246:	4b26      	ldr	r3, [pc, #152]	@ (80132e0 <_vfiprintf_r+0x224>)
 8013248:	bb1b      	cbnz	r3, 8013292 <_vfiprintf_r+0x1d6>
 801324a:	9b03      	ldr	r3, [sp, #12]
 801324c:	3307      	adds	r3, #7
 801324e:	f023 0307 	bic.w	r3, r3, #7
 8013252:	3308      	adds	r3, #8
 8013254:	9303      	str	r3, [sp, #12]
 8013256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013258:	443b      	add	r3, r7
 801325a:	9309      	str	r3, [sp, #36]	@ 0x24
 801325c:	e76a      	b.n	8013134 <_vfiprintf_r+0x78>
 801325e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013262:	460c      	mov	r4, r1
 8013264:	2001      	movs	r0, #1
 8013266:	e7a8      	b.n	80131ba <_vfiprintf_r+0xfe>
 8013268:	2300      	movs	r3, #0
 801326a:	3401      	adds	r4, #1
 801326c:	9305      	str	r3, [sp, #20]
 801326e:	4619      	mov	r1, r3
 8013270:	f04f 0c0a 	mov.w	ip, #10
 8013274:	4620      	mov	r0, r4
 8013276:	f810 2b01 	ldrb.w	r2, [r0], #1
 801327a:	3a30      	subs	r2, #48	@ 0x30
 801327c:	2a09      	cmp	r2, #9
 801327e:	d903      	bls.n	8013288 <_vfiprintf_r+0x1cc>
 8013280:	2b00      	cmp	r3, #0
 8013282:	d0c6      	beq.n	8013212 <_vfiprintf_r+0x156>
 8013284:	9105      	str	r1, [sp, #20]
 8013286:	e7c4      	b.n	8013212 <_vfiprintf_r+0x156>
 8013288:	fb0c 2101 	mla	r1, ip, r1, r2
 801328c:	4604      	mov	r4, r0
 801328e:	2301      	movs	r3, #1
 8013290:	e7f0      	b.n	8013274 <_vfiprintf_r+0x1b8>
 8013292:	ab03      	add	r3, sp, #12
 8013294:	9300      	str	r3, [sp, #0]
 8013296:	462a      	mov	r2, r5
 8013298:	4b12      	ldr	r3, [pc, #72]	@ (80132e4 <_vfiprintf_r+0x228>)
 801329a:	a904      	add	r1, sp, #16
 801329c:	4630      	mov	r0, r6
 801329e:	f7fb ff35 	bl	800f10c <_printf_float>
 80132a2:	4607      	mov	r7, r0
 80132a4:	1c78      	adds	r0, r7, #1
 80132a6:	d1d6      	bne.n	8013256 <_vfiprintf_r+0x19a>
 80132a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80132aa:	07d9      	lsls	r1, r3, #31
 80132ac:	d405      	bmi.n	80132ba <_vfiprintf_r+0x1fe>
 80132ae:	89ab      	ldrh	r3, [r5, #12]
 80132b0:	059a      	lsls	r2, r3, #22
 80132b2:	d402      	bmi.n	80132ba <_vfiprintf_r+0x1fe>
 80132b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80132b6:	f7fc fe99 	bl	800ffec <__retarget_lock_release_recursive>
 80132ba:	89ab      	ldrh	r3, [r5, #12]
 80132bc:	065b      	lsls	r3, r3, #25
 80132be:	f53f af1f 	bmi.w	8013100 <_vfiprintf_r+0x44>
 80132c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80132c4:	e71e      	b.n	8013104 <_vfiprintf_r+0x48>
 80132c6:	ab03      	add	r3, sp, #12
 80132c8:	9300      	str	r3, [sp, #0]
 80132ca:	462a      	mov	r2, r5
 80132cc:	4b05      	ldr	r3, [pc, #20]	@ (80132e4 <_vfiprintf_r+0x228>)
 80132ce:	a904      	add	r1, sp, #16
 80132d0:	4630      	mov	r0, r6
 80132d2:	f7fc f9b3 	bl	800f63c <_printf_i>
 80132d6:	e7e4      	b.n	80132a2 <_vfiprintf_r+0x1e6>
 80132d8:	08016748 	.word	0x08016748
 80132dc:	08016752 	.word	0x08016752
 80132e0:	0800f10d 	.word	0x0800f10d
 80132e4:	08013099 	.word	0x08013099
 80132e8:	0801674e 	.word	0x0801674e

080132ec <__swbuf_r>:
 80132ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ee:	460e      	mov	r6, r1
 80132f0:	4614      	mov	r4, r2
 80132f2:	4605      	mov	r5, r0
 80132f4:	b118      	cbz	r0, 80132fe <__swbuf_r+0x12>
 80132f6:	6a03      	ldr	r3, [r0, #32]
 80132f8:	b90b      	cbnz	r3, 80132fe <__swbuf_r+0x12>
 80132fa:	f7fc fd5f 	bl	800fdbc <__sinit>
 80132fe:	69a3      	ldr	r3, [r4, #24]
 8013300:	60a3      	str	r3, [r4, #8]
 8013302:	89a3      	ldrh	r3, [r4, #12]
 8013304:	071a      	lsls	r2, r3, #28
 8013306:	d501      	bpl.n	801330c <__swbuf_r+0x20>
 8013308:	6923      	ldr	r3, [r4, #16]
 801330a:	b943      	cbnz	r3, 801331e <__swbuf_r+0x32>
 801330c:	4621      	mov	r1, r4
 801330e:	4628      	mov	r0, r5
 8013310:	f000 f82a 	bl	8013368 <__swsetup_r>
 8013314:	b118      	cbz	r0, 801331e <__swbuf_r+0x32>
 8013316:	f04f 37ff 	mov.w	r7, #4294967295
 801331a:	4638      	mov	r0, r7
 801331c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801331e:	6823      	ldr	r3, [r4, #0]
 8013320:	6922      	ldr	r2, [r4, #16]
 8013322:	1a98      	subs	r0, r3, r2
 8013324:	6963      	ldr	r3, [r4, #20]
 8013326:	b2f6      	uxtb	r6, r6
 8013328:	4283      	cmp	r3, r0
 801332a:	4637      	mov	r7, r6
 801332c:	dc05      	bgt.n	801333a <__swbuf_r+0x4e>
 801332e:	4621      	mov	r1, r4
 8013330:	4628      	mov	r0, r5
 8013332:	f7ff fa53 	bl	80127dc <_fflush_r>
 8013336:	2800      	cmp	r0, #0
 8013338:	d1ed      	bne.n	8013316 <__swbuf_r+0x2a>
 801333a:	68a3      	ldr	r3, [r4, #8]
 801333c:	3b01      	subs	r3, #1
 801333e:	60a3      	str	r3, [r4, #8]
 8013340:	6823      	ldr	r3, [r4, #0]
 8013342:	1c5a      	adds	r2, r3, #1
 8013344:	6022      	str	r2, [r4, #0]
 8013346:	701e      	strb	r6, [r3, #0]
 8013348:	6962      	ldr	r2, [r4, #20]
 801334a:	1c43      	adds	r3, r0, #1
 801334c:	429a      	cmp	r2, r3
 801334e:	d004      	beq.n	801335a <__swbuf_r+0x6e>
 8013350:	89a3      	ldrh	r3, [r4, #12]
 8013352:	07db      	lsls	r3, r3, #31
 8013354:	d5e1      	bpl.n	801331a <__swbuf_r+0x2e>
 8013356:	2e0a      	cmp	r6, #10
 8013358:	d1df      	bne.n	801331a <__swbuf_r+0x2e>
 801335a:	4621      	mov	r1, r4
 801335c:	4628      	mov	r0, r5
 801335e:	f7ff fa3d 	bl	80127dc <_fflush_r>
 8013362:	2800      	cmp	r0, #0
 8013364:	d0d9      	beq.n	801331a <__swbuf_r+0x2e>
 8013366:	e7d6      	b.n	8013316 <__swbuf_r+0x2a>

08013368 <__swsetup_r>:
 8013368:	b538      	push	{r3, r4, r5, lr}
 801336a:	4b29      	ldr	r3, [pc, #164]	@ (8013410 <__swsetup_r+0xa8>)
 801336c:	4605      	mov	r5, r0
 801336e:	6818      	ldr	r0, [r3, #0]
 8013370:	460c      	mov	r4, r1
 8013372:	b118      	cbz	r0, 801337c <__swsetup_r+0x14>
 8013374:	6a03      	ldr	r3, [r0, #32]
 8013376:	b90b      	cbnz	r3, 801337c <__swsetup_r+0x14>
 8013378:	f7fc fd20 	bl	800fdbc <__sinit>
 801337c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013380:	0719      	lsls	r1, r3, #28
 8013382:	d422      	bmi.n	80133ca <__swsetup_r+0x62>
 8013384:	06da      	lsls	r2, r3, #27
 8013386:	d407      	bmi.n	8013398 <__swsetup_r+0x30>
 8013388:	2209      	movs	r2, #9
 801338a:	602a      	str	r2, [r5, #0]
 801338c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013390:	81a3      	strh	r3, [r4, #12]
 8013392:	f04f 30ff 	mov.w	r0, #4294967295
 8013396:	e033      	b.n	8013400 <__swsetup_r+0x98>
 8013398:	0758      	lsls	r0, r3, #29
 801339a:	d512      	bpl.n	80133c2 <__swsetup_r+0x5a>
 801339c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801339e:	b141      	cbz	r1, 80133b2 <__swsetup_r+0x4a>
 80133a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80133a4:	4299      	cmp	r1, r3
 80133a6:	d002      	beq.n	80133ae <__swsetup_r+0x46>
 80133a8:	4628      	mov	r0, r5
 80133aa:	f7fd fc81 	bl	8010cb0 <_free_r>
 80133ae:	2300      	movs	r3, #0
 80133b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80133b2:	89a3      	ldrh	r3, [r4, #12]
 80133b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80133b8:	81a3      	strh	r3, [r4, #12]
 80133ba:	2300      	movs	r3, #0
 80133bc:	6063      	str	r3, [r4, #4]
 80133be:	6923      	ldr	r3, [r4, #16]
 80133c0:	6023      	str	r3, [r4, #0]
 80133c2:	89a3      	ldrh	r3, [r4, #12]
 80133c4:	f043 0308 	orr.w	r3, r3, #8
 80133c8:	81a3      	strh	r3, [r4, #12]
 80133ca:	6923      	ldr	r3, [r4, #16]
 80133cc:	b94b      	cbnz	r3, 80133e2 <__swsetup_r+0x7a>
 80133ce:	89a3      	ldrh	r3, [r4, #12]
 80133d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80133d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80133d8:	d003      	beq.n	80133e2 <__swsetup_r+0x7a>
 80133da:	4621      	mov	r1, r4
 80133dc:	4628      	mov	r0, r5
 80133de:	f000 f883 	bl	80134e8 <__smakebuf_r>
 80133e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133e6:	f013 0201 	ands.w	r2, r3, #1
 80133ea:	d00a      	beq.n	8013402 <__swsetup_r+0x9a>
 80133ec:	2200      	movs	r2, #0
 80133ee:	60a2      	str	r2, [r4, #8]
 80133f0:	6962      	ldr	r2, [r4, #20]
 80133f2:	4252      	negs	r2, r2
 80133f4:	61a2      	str	r2, [r4, #24]
 80133f6:	6922      	ldr	r2, [r4, #16]
 80133f8:	b942      	cbnz	r2, 801340c <__swsetup_r+0xa4>
 80133fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80133fe:	d1c5      	bne.n	801338c <__swsetup_r+0x24>
 8013400:	bd38      	pop	{r3, r4, r5, pc}
 8013402:	0799      	lsls	r1, r3, #30
 8013404:	bf58      	it	pl
 8013406:	6962      	ldrpl	r2, [r4, #20]
 8013408:	60a2      	str	r2, [r4, #8]
 801340a:	e7f4      	b.n	80133f6 <__swsetup_r+0x8e>
 801340c:	2000      	movs	r0, #0
 801340e:	e7f7      	b.n	8013400 <__swsetup_r+0x98>
 8013410:	2000047c 	.word	0x2000047c

08013414 <_raise_r>:
 8013414:	291f      	cmp	r1, #31
 8013416:	b538      	push	{r3, r4, r5, lr}
 8013418:	4605      	mov	r5, r0
 801341a:	460c      	mov	r4, r1
 801341c:	d904      	bls.n	8013428 <_raise_r+0x14>
 801341e:	2316      	movs	r3, #22
 8013420:	6003      	str	r3, [r0, #0]
 8013422:	f04f 30ff 	mov.w	r0, #4294967295
 8013426:	bd38      	pop	{r3, r4, r5, pc}
 8013428:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801342a:	b112      	cbz	r2, 8013432 <_raise_r+0x1e>
 801342c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013430:	b94b      	cbnz	r3, 8013446 <_raise_r+0x32>
 8013432:	4628      	mov	r0, r5
 8013434:	f000 f830 	bl	8013498 <_getpid_r>
 8013438:	4622      	mov	r2, r4
 801343a:	4601      	mov	r1, r0
 801343c:	4628      	mov	r0, r5
 801343e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013442:	f000 b817 	b.w	8013474 <_kill_r>
 8013446:	2b01      	cmp	r3, #1
 8013448:	d00a      	beq.n	8013460 <_raise_r+0x4c>
 801344a:	1c59      	adds	r1, r3, #1
 801344c:	d103      	bne.n	8013456 <_raise_r+0x42>
 801344e:	2316      	movs	r3, #22
 8013450:	6003      	str	r3, [r0, #0]
 8013452:	2001      	movs	r0, #1
 8013454:	e7e7      	b.n	8013426 <_raise_r+0x12>
 8013456:	2100      	movs	r1, #0
 8013458:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801345c:	4620      	mov	r0, r4
 801345e:	4798      	blx	r3
 8013460:	2000      	movs	r0, #0
 8013462:	e7e0      	b.n	8013426 <_raise_r+0x12>

08013464 <raise>:
 8013464:	4b02      	ldr	r3, [pc, #8]	@ (8013470 <raise+0xc>)
 8013466:	4601      	mov	r1, r0
 8013468:	6818      	ldr	r0, [r3, #0]
 801346a:	f7ff bfd3 	b.w	8013414 <_raise_r>
 801346e:	bf00      	nop
 8013470:	2000047c 	.word	0x2000047c

08013474 <_kill_r>:
 8013474:	b538      	push	{r3, r4, r5, lr}
 8013476:	4d07      	ldr	r5, [pc, #28]	@ (8013494 <_kill_r+0x20>)
 8013478:	2300      	movs	r3, #0
 801347a:	4604      	mov	r4, r0
 801347c:	4608      	mov	r0, r1
 801347e:	4611      	mov	r1, r2
 8013480:	602b      	str	r3, [r5, #0]
 8013482:	f7f7 fbae 	bl	800abe2 <_kill>
 8013486:	1c43      	adds	r3, r0, #1
 8013488:	d102      	bne.n	8013490 <_kill_r+0x1c>
 801348a:	682b      	ldr	r3, [r5, #0]
 801348c:	b103      	cbz	r3, 8013490 <_kill_r+0x1c>
 801348e:	6023      	str	r3, [r4, #0]
 8013490:	bd38      	pop	{r3, r4, r5, pc}
 8013492:	bf00      	nop
 8013494:	200083cc 	.word	0x200083cc

08013498 <_getpid_r>:
 8013498:	f7f7 bb9b 	b.w	800abd2 <_getpid>

0801349c <__swhatbuf_r>:
 801349c:	b570      	push	{r4, r5, r6, lr}
 801349e:	460c      	mov	r4, r1
 80134a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134a4:	2900      	cmp	r1, #0
 80134a6:	b096      	sub	sp, #88	@ 0x58
 80134a8:	4615      	mov	r5, r2
 80134aa:	461e      	mov	r6, r3
 80134ac:	da0d      	bge.n	80134ca <__swhatbuf_r+0x2e>
 80134ae:	89a3      	ldrh	r3, [r4, #12]
 80134b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80134b4:	f04f 0100 	mov.w	r1, #0
 80134b8:	bf14      	ite	ne
 80134ba:	2340      	movne	r3, #64	@ 0x40
 80134bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80134c0:	2000      	movs	r0, #0
 80134c2:	6031      	str	r1, [r6, #0]
 80134c4:	602b      	str	r3, [r5, #0]
 80134c6:	b016      	add	sp, #88	@ 0x58
 80134c8:	bd70      	pop	{r4, r5, r6, pc}
 80134ca:	466a      	mov	r2, sp
 80134cc:	f000 f848 	bl	8013560 <_fstat_r>
 80134d0:	2800      	cmp	r0, #0
 80134d2:	dbec      	blt.n	80134ae <__swhatbuf_r+0x12>
 80134d4:	9901      	ldr	r1, [sp, #4]
 80134d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80134da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80134de:	4259      	negs	r1, r3
 80134e0:	4159      	adcs	r1, r3
 80134e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80134e6:	e7eb      	b.n	80134c0 <__swhatbuf_r+0x24>

080134e8 <__smakebuf_r>:
 80134e8:	898b      	ldrh	r3, [r1, #12]
 80134ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134ec:	079d      	lsls	r5, r3, #30
 80134ee:	4606      	mov	r6, r0
 80134f0:	460c      	mov	r4, r1
 80134f2:	d507      	bpl.n	8013504 <__smakebuf_r+0x1c>
 80134f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80134f8:	6023      	str	r3, [r4, #0]
 80134fa:	6123      	str	r3, [r4, #16]
 80134fc:	2301      	movs	r3, #1
 80134fe:	6163      	str	r3, [r4, #20]
 8013500:	b003      	add	sp, #12
 8013502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013504:	ab01      	add	r3, sp, #4
 8013506:	466a      	mov	r2, sp
 8013508:	f7ff ffc8 	bl	801349c <__swhatbuf_r>
 801350c:	9f00      	ldr	r7, [sp, #0]
 801350e:	4605      	mov	r5, r0
 8013510:	4639      	mov	r1, r7
 8013512:	4630      	mov	r0, r6
 8013514:	f7fd fc40 	bl	8010d98 <_malloc_r>
 8013518:	b948      	cbnz	r0, 801352e <__smakebuf_r+0x46>
 801351a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801351e:	059a      	lsls	r2, r3, #22
 8013520:	d4ee      	bmi.n	8013500 <__smakebuf_r+0x18>
 8013522:	f023 0303 	bic.w	r3, r3, #3
 8013526:	f043 0302 	orr.w	r3, r3, #2
 801352a:	81a3      	strh	r3, [r4, #12]
 801352c:	e7e2      	b.n	80134f4 <__smakebuf_r+0xc>
 801352e:	89a3      	ldrh	r3, [r4, #12]
 8013530:	6020      	str	r0, [r4, #0]
 8013532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013536:	81a3      	strh	r3, [r4, #12]
 8013538:	9b01      	ldr	r3, [sp, #4]
 801353a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801353e:	b15b      	cbz	r3, 8013558 <__smakebuf_r+0x70>
 8013540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013544:	4630      	mov	r0, r6
 8013546:	f000 f81d 	bl	8013584 <_isatty_r>
 801354a:	b128      	cbz	r0, 8013558 <__smakebuf_r+0x70>
 801354c:	89a3      	ldrh	r3, [r4, #12]
 801354e:	f023 0303 	bic.w	r3, r3, #3
 8013552:	f043 0301 	orr.w	r3, r3, #1
 8013556:	81a3      	strh	r3, [r4, #12]
 8013558:	89a3      	ldrh	r3, [r4, #12]
 801355a:	431d      	orrs	r5, r3
 801355c:	81a5      	strh	r5, [r4, #12]
 801355e:	e7cf      	b.n	8013500 <__smakebuf_r+0x18>

08013560 <_fstat_r>:
 8013560:	b538      	push	{r3, r4, r5, lr}
 8013562:	4d07      	ldr	r5, [pc, #28]	@ (8013580 <_fstat_r+0x20>)
 8013564:	2300      	movs	r3, #0
 8013566:	4604      	mov	r4, r0
 8013568:	4608      	mov	r0, r1
 801356a:	4611      	mov	r1, r2
 801356c:	602b      	str	r3, [r5, #0]
 801356e:	f7f7 fb98 	bl	800aca2 <_fstat>
 8013572:	1c43      	adds	r3, r0, #1
 8013574:	d102      	bne.n	801357c <_fstat_r+0x1c>
 8013576:	682b      	ldr	r3, [r5, #0]
 8013578:	b103      	cbz	r3, 801357c <_fstat_r+0x1c>
 801357a:	6023      	str	r3, [r4, #0]
 801357c:	bd38      	pop	{r3, r4, r5, pc}
 801357e:	bf00      	nop
 8013580:	200083cc 	.word	0x200083cc

08013584 <_isatty_r>:
 8013584:	b538      	push	{r3, r4, r5, lr}
 8013586:	4d06      	ldr	r5, [pc, #24]	@ (80135a0 <_isatty_r+0x1c>)
 8013588:	2300      	movs	r3, #0
 801358a:	4604      	mov	r4, r0
 801358c:	4608      	mov	r0, r1
 801358e:	602b      	str	r3, [r5, #0]
 8013590:	f7f7 fb97 	bl	800acc2 <_isatty>
 8013594:	1c43      	adds	r3, r0, #1
 8013596:	d102      	bne.n	801359e <_isatty_r+0x1a>
 8013598:	682b      	ldr	r3, [r5, #0]
 801359a:	b103      	cbz	r3, 801359e <_isatty_r+0x1a>
 801359c:	6023      	str	r3, [r4, #0]
 801359e:	bd38      	pop	{r3, r4, r5, pc}
 80135a0:	200083cc 	.word	0x200083cc

080135a4 <_init>:
 80135a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a6:	bf00      	nop
 80135a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135aa:	bc08      	pop	{r3}
 80135ac:	469e      	mov	lr, r3
 80135ae:	4770      	bx	lr

080135b0 <_fini>:
 80135b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135b2:	bf00      	nop
 80135b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135b6:	bc08      	pop	{r3}
 80135b8:	469e      	mov	lr, r3
 80135ba:	4770      	bx	lr
