
cpoc_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013494  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003240  08013628  08013628  00014628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016868  08016868  000186dc  2**0
                  CONTENTS
  4 .ARM          00000008  08016868  08016868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016870  08016870  000186dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016870  08016870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016874  08016874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006dc  20000000  08016878  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000186dc  2**0
                  CONTENTS
 10 .bss          000080ec  200006dc  200006dc  000186dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200087c8  200087c8  000186dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000186dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f637  00000000  00000000  0001870c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003905  00000000  00000000  00027d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  0002b648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae5  00000000  00000000  0002c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001db5c  00000000  00000000  0002cfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000133a5  00000000  00000000  0004ab31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095a6d  00000000  00000000  0005ded6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f3943  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e4c  00000000  00000000  000f3988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000f87d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006dc 	.word	0x200006dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801360c 	.word	0x0801360c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006e0 	.word	0x200006e0
 80001cc:	0801360c 	.word	0x0801360c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001014:	2b80      	cmp	r3, #128	@ 0x80
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103a:	2b40      	cmp	r3, #64	@ 0x40
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <DS3231_Write>:
#include "ds3231.h"

#define DS3231_ADDRESS 0xD0

void DS3231_Write(uint8_t reg, uint8_t data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 80011a0:	bf00      	nop
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <DS3231_Write+0x8c>)
 80011a4:	f7ff ff7a 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <DS3231_Write+0x12>
    LL_I2C_GenerateStartCondition(I2C1);
 80011ae:	481b      	ldr	r0, [pc, #108]	@ (800121c <DS3231_Write+0x8c>)
 80011b0:	f7ff ffac 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 80011b4:	bf00      	nop
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <DS3231_Write+0x8c>)
 80011b8:	f7ff ff4a 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <DS3231_Write+0x26>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 80011c2:	21d0      	movs	r1, #208	@ 0xd0
 80011c4:	4815      	ldr	r0, [pc, #84]	@ (800121c <DS3231_Write+0x8c>)
 80011c6:	f7ff ffce 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80011ca:	bf00      	nop
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <DS3231_Write+0x8c>)
 80011ce:	f7ff ff52 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <DS3231_Write+0x3c>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <DS3231_Write+0x8c>)
 80011da:	f7ff ff72 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <DS3231_Write+0x8c>)
 80011e4:	f7ff ffbf 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011e8:	bf00      	nop
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <DS3231_Write+0x8c>)
 80011ec:	f7ff ff0a 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f9      	beq.n	80011ea <DS3231_Write+0x5a>
    LL_I2C_TransmitData8(I2C1, data);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <DS3231_Write+0x8c>)
 80011fc:	f7ff ffb3 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001200:	bf00      	nop
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <DS3231_Write+0x8c>)
 8001204:	f7ff fefe 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <DS3231_Write+0x72>
    LL_I2C_GenerateStopCondition(I2C1);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <DS3231_Write+0x8c>)
 8001210:	f7ff ff8c 	bl	800112c <LL_I2C_GenerateStopCondition>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400

08001220 <DS3231_Read>:

uint8_t DS3231_Read(uint8_t reg)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 800122e:	bf00      	nop
 8001230:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <DS3231_Read+0xc4>)
 8001232:	f7ff ff33 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <DS3231_Read+0x10>
    LL_I2C_GenerateStartCondition(I2C1);
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <DS3231_Read+0xc4>)
 800123e:	f7ff ff65 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001242:	bf00      	nop
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <DS3231_Read+0xc4>)
 8001246:	f7ff ff03 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <DS3231_Read+0x24>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 8001250:	21d0      	movs	r1, #208	@ 0xd0
 8001252:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <DS3231_Read+0xc4>)
 8001254:	f7ff ff87 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001258:	bf00      	nop
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <DS3231_Read+0xc4>)
 800125c:	f7ff ff0b 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <DS3231_Read+0x3a>
    LL_I2C_ClearFlag_ADDR(I2C1);
 8001266:	481f      	ldr	r0, [pc, #124]	@ (80012e4 <DS3231_Read+0xc4>)
 8001268:	f7ff ff2b 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <DS3231_Read+0xc4>)
 8001272:	f7ff ff78 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001276:	bf00      	nop
 8001278:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <DS3231_Read+0xc4>)
 800127a:	f7ff fec3 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <DS3231_Read+0x58>
    LL_I2C_GenerateStartCondition(I2C1);
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <DS3231_Read+0xc4>)
 8001286:	f7ff ff41 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800128a:	bf00      	nop
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <DS3231_Read+0xc4>)
 800128e:	f7ff fedf 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <DS3231_Read+0x6c>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS | 1);
 8001298:	21d1      	movs	r1, #209	@ 0xd1
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <DS3231_Read+0xc4>)
 800129c:	f7ff ff63 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80012a0:	bf00      	nop
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <DS3231_Read+0xc4>)
 80012a4:	f7ff fee7 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f9      	beq.n	80012a2 <DS3231_Read+0x82>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b0:	f7ff ff07 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80012b4:	2100      	movs	r1, #0
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b8:	f7ff ff15 	bl	80010e6 <LL_I2C_AcknowledgeNextData>
    while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80012bc:	bf00      	nop
 80012be:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <DS3231_Read+0xc4>)
 80012c0:	f7ff feb3 	bl	800102a <LL_I2C_IsActiveFlag_RXNE>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <DS3231_Read+0x9e>
    data = LL_I2C_ReceiveData8(I2C1);
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <DS3231_Read+0xc4>)
 80012cc:	f7ff ff3e 	bl	800114c <LL_I2C_ReceiveData8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
    LL_I2C_GenerateStopCondition(I2C1);
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <DS3231_Read+0xc4>)
 80012d6:	f7ff ff29 	bl	800112c <LL_I2C_GenerateStopCondition>
    return data;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400

080012e8 <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t hour, uint8_t min, uint8_t sec)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	460b      	mov	r3, r1
 8001300:	717b      	strb	r3, [r7, #5]
 8001302:	4613      	mov	r3, r2
 8001304:	713b      	strb	r3, [r7, #4]
    DS3231_Write(0x00, ((sec / 10) << 4) | (sec % 10));
 8001306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130a:	4a55      	ldr	r2, [pc, #340]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b258      	sxtb	r0, r3
 8001318:	f897 2020 	ldrb.w	r2, [r7, #32]
 800131c:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4303      	orrs	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff28 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x01, ((min / 10) << 4) | (min % 10));
 8001340:	7f3b      	ldrb	r3, [r7, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	b258      	sxtb	r0, r3
 8001350:	7f3a      	ldrb	r2, [r7, #28]
 8001352:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001354:	fba3 1302 	umull	r1, r3, r3, r2
 8001358:	08d9      	lsrs	r1, r3, #3
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4303      	orrs	r3, r0
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff0d 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x02, ((hour / 10) << 4) | (hour % 10));
 8001376:	7e3b      	ldrb	r3, [r7, #24]
 8001378:	4a39      	ldr	r2, [pc, #228]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b258      	sxtb	r0, r3
 8001386:	7e3a      	ldrb	r2, [r7, #24]
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800138a:	fba3 1302 	umull	r1, r3, r3, r2
 800138e:	08d9      	lsrs	r1, r3, #3
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4303      	orrs	r3, r0
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fef2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x03, day);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2003      	movs	r0, #3
 80013b2:	f7ff feed 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x04, ((date / 10) << 4) | (date % 10));
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b258      	sxtb	r0, r3
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4303      	orrs	r3, r0
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff fed2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x05, ((month / 10) << 4) | (month % 10));
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b258      	sxtb	r0, r3
 80013fc:	797a      	ldrb	r2, [r7, #5]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001400:	fba3 1302 	umull	r1, r3, r3, r2
 8001404:	08d9      	lsrs	r1, r3, #3
 8001406:	460b      	mov	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4303      	orrs	r3, r0
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff feb7 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x06, ((year / 10) << 4) | (year % 10));
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b258      	sxtb	r0, r3
 8001432:	793a      	ldrb	r2, [r7, #4]
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001436:	fba3 1302 	umull	r1, r3, r3, r2
 800143a:	08d9      	lsrs	r1, r3, #3
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4303      	orrs	r3, r0
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2006      	movs	r0, #6
 8001454:	f7ff fe9c 	bl	8001190 <DS3231_Write>
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	cccccccd 	.word	0xcccccccd

08001464 <DS3231_GetDateTime>:

void DS3231_GetDateTime(uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year, uint8_t *hour, uint8_t *min, uint8_t *sec)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    *sec = DS3231_Read(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fed4 	bl	8001220 <DS3231_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	701a      	strb	r2, [r3, #0]
    *min = DS3231_Read(0x01);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fecd 	bl	8001220 <DS3231_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	701a      	strb	r2, [r3, #0]
    *hour = DS3231_Read(0x02);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fec6 	bl	8001220 <DS3231_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	701a      	strb	r2, [r3, #0]
    *day = DS3231_Read(0x03);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff febf 	bl	8001220 <DS3231_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
    *date = DS3231_Read(0x04);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff feb8 	bl	8001220 <DS3231_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	701a      	strb	r2, [r3, #0]
    *month = DS3231_Read(0x05);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f7ff feb1 	bl	8001220 <DS3231_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	701a      	strb	r2, [r3, #0]
    *year = DS3231_Read(0x06);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff feaa 	bl	8001220 <DS3231_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]

    *sec = ((*sec >> 4) * 10) + (*sec & 0x0F);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	701a      	strb	r2, [r3, #0]
    *min = ((*min >> 4) * 10) + (*min & 0x0F);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	701a      	strb	r2, [r3, #0]
    *hour = ((*hour >> 4) * 10) + (*hour & 0x0F);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	701a      	strb	r2, [r3, #0]
    *date = ((*date >> 4) * 10) + (*date & 0x0F);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	701a      	strb	r2, [r3, #0]
    *month = ((*month >> 4) * 10) + (*month & 0x0F);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	701a      	strb	r2, [r3, #0]
    *year = ((*year >> 4) * 10) + (*year & 0x0F);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <DS3231_GetTemperature>:

float DS3231_GetTemperature(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
    uint8_t temp_msb = DS3231_Read(0x11);
 80015ba:	2011      	movs	r0, #17
 80015bc:	f7ff fe30 	bl	8001220 <DS3231_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_lsb = DS3231_Read(0x12);
 80015c4:	2012      	movs	r0, #18
 80015c6:	f7ff fe2b 	bl	8001220 <DS3231_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71bb      	strb	r3, [r7, #6]
    int16_t temp = (temp_msb << 8) | temp_lsb;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
    float temperature = temp / 256.0;
 80015dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffaf 	bl	8000544 <__aeabi_i2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <DS3231_GetTemperature+0x5c>)
 80015ec:	f7ff f93e 	bl	800086c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb06 	bl	8000c08 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	603b      	str	r3, [r7, #0]
    return temperature;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40700000 	.word	0x40700000

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	@ (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ffc2 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <systick_timer_init+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <systick_timer_init+0x20>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffc3 	bl	8001668 <SysTick_Config>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000500 	.word	0x20000500
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b02      	cmp	r3, #2
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b20      	cmp	r3, #32
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001798:	2b80      	cmp	r3, #128	@ 0x80
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001804:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800181a:	b480      	push	{r7}
 800181c:	b089      	sub	sp, #36	@ 0x24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	e853 3f00 	ldrex	r3, [r3]
 800182e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	330c      	adds	r3, #12
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	61ba      	str	r2, [r7, #24]
 8001840:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001842:	6979      	ldr	r1, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	e841 2300 	strex	r3, r2, [r1]
 800184a:	613b      	str	r3, [r7, #16]
   return(result);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e7      	bne.n	8001822 <LL_USART_EnableIT_RXNE+0x8>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3724      	adds	r7, #36	@ 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	330c      	adds	r3, #12
 800186c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	e853 3f00 	ldrex	r3, [r3]
 8001874:	60bb      	str	r3, [r7, #8]
   return(result);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	330c      	adds	r3, #12
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	61ba      	str	r2, [r7, #24]
 8001886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	e841 2300 	strex	r3, r2, [r1]
 8001890:	613b      	str	r3, [r7, #16]
   return(result);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e7      	bne.n	8001868 <LL_USART_EnableIT_TXE+0x8>
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b089      	sub	sp, #36	@ 0x24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3314      	adds	r3, #20
 80018b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	e853 3f00 	ldrex	r3, [r3]
 80018ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3314      	adds	r3, #20
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	61ba      	str	r2, [r7, #24]
 80018cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	e841 2300 	strex	r3, r2, [r1]
 80018d6:	613b      	str	r3, [r7, #16]
   return(result);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e7      	bne.n	80018ae <LL_USART_EnableIT_ERROR+0x8>
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	@ 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	330c      	adds	r3, #12
 80018f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	e853 3f00 	ldrex	r3, [r3]
 8001900:	60bb      	str	r3, [r7, #8]
   return(result);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f023 0320 	bic.w	r3, r3, #32
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	61ba      	str	r2, [r7, #24]
 8001912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	e841 2300 	strex	r3, r2, [r1]
 800191c:	613b      	str	r3, [r7, #16]
   return(result);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e7      	bne.n	80018f4 <LL_USART_DisableIT_RXNE+0x8>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001932:	b480      	push	{r7}
 8001934:	b089      	sub	sp, #36	@ 0x24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330c      	adds	r3, #12
 800193e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	e853 3f00 	ldrex	r3, [r3]
 8001946:	60bb      	str	r3, [r7, #8]
   return(result);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	330c      	adds	r3, #12
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	61ba      	str	r2, [r7, #24]
 8001958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195a:	6979      	ldr	r1, [r7, #20]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	e841 2300 	strex	r3, r2, [r1]
 8001962:	613b      	str	r3, [r7, #16]
   return(result);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e7      	bne.n	800193a <LL_USART_DisableIT_TXE+0x8>
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3724      	adds	r7, #36	@ 0x24
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b20      	cmp	r3, #32
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b80      	cmp	r3, #128	@ 0x80
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	b2db      	uxtb	r3, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <Ringbuf_init>:


void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <Ringbuf_init+0xa8>)
 8001a02:	4a29      	ldr	r2, [pc, #164]	@ (8001aa8 <Ringbuf_init+0xac>)
 8001a04:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <Ringbuf_init+0xb0>)
 8001a08:	4a29      	ldr	r2, [pc, #164]	@ (8001ab0 <Ringbuf_init+0xb4>)
 8001a0a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <Ringbuf_init+0xb8>)
 8001a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab8 <Ringbuf_init+0xbc>)
 8001a10:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001a12:	4b2a      	ldr	r3, [pc, #168]	@ (8001abc <Ringbuf_init+0xc0>)
 8001a14:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac0 <Ringbuf_init+0xc4>)
 8001a16:	601a      	str	r2, [r3, #0]
  _rx_buffer3 = &rx_buffer3;
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a1c:	601a      	str	r2, [r3, #0]
  _tx_buffer3 = &tx_buffer3;
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a20:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a22:	601a      	str	r2, [r3, #0]
  _rx_buffer5 = &rx_buffer5;
 8001a24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <Ringbuf_init+0xd8>)
 8001a26:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad8 <Ringbuf_init+0xdc>)
 8001a28:	601a      	str	r2, [r3, #0]
  _tx_buffer5 = &tx_buffer5;
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <Ringbuf_init+0xe0>)
 8001a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ae0 <Ringbuf_init+0xe4>)
 8001a2e:	601a      	str	r2, [r3, #0]
  _rx_buffer6 = &rx_buffer6;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <Ringbuf_init+0xe8>)
 8001a32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae8 <Ringbuf_init+0xec>)
 8001a34:	601a      	str	r2, [r3, #0]
  _tx_buffer6 = &tx_buffer6;
 8001a36:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <Ringbuf_init+0xf0>)
 8001a38:	4a2d      	ldr	r2, [pc, #180]	@ (8001af0 <Ringbuf_init+0xf4>)
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  LL_USART_EnableIT_ERROR(uart1);
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <Ringbuf_init+0xf8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff30 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart2);
 8001a46:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <Ringbuf_init+0xfc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff2b 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart3);
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <Ringbuf_init+0x100>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff26 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart5);
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <Ringbuf_init+0x104>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff21 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart6);
 8001a64:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <Ringbuf_init+0x108>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff1c 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart1);
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <Ringbuf_init+0xf8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fed1 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart2);
 8001a78:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <Ringbuf_init+0xfc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fecc 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart3);
 8001a82:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <Ringbuf_init+0x100>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fec7 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart5);
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <Ringbuf_init+0x104>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fec2 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart6);
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <Ringbuf_init+0x108>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff febd 	bl	800181a <LL_USART_EnableIT_RXNE>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20005a90 	.word	0x20005a90
 8001aa8:	20000014 	.word	0x20000014
 8001aac:	20005a94 	.word	0x20005a94
 8001ab0:	20000024 	.word	0x20000024
 8001ab4:	20005a98 	.word	0x20005a98
 8001ab8:	20000034 	.word	0x20000034
 8001abc:	20005a9c 	.word	0x20005a9c
 8001ac0:	20000044 	.word	0x20000044
 8001ac4:	20005aa0 	.word	0x20005aa0
 8001ac8:	20000054 	.word	0x20000054
 8001acc:	20005aa4 	.word	0x20005aa4
 8001ad0:	20000064 	.word	0x20000064
 8001ad4:	20005aa8 	.word	0x20005aa8
 8001ad8:	20000074 	.word	0x20000074
 8001adc:	20005aac 	.word	0x20005aac
 8001ae0:	20000084 	.word	0x20000084
 8001ae4:	20005ab0 	.word	0x20005ab0
 8001ae8:	20000094 	.word	0x20000094
 8001aec:	20005ab4 	.word	0x20005ab4
 8001af0:	200000a4 	.word	0x200000a4
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004
 8001afc:	20000008 	.word	0x20000008
 8001b00:	2000000c 	.word	0x2000000c
 8001b04:	20000010 	.word	0x20000010

08001b08 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % buffer->size;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	68d2      	ldr	r2, [r2, #12]
 8001b1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b22:	fb01 f202 	mul.w	r2, r1, r2
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d03b      	beq.n	8001bac <store_char+0xa4>
    ATOMIC_BLOCK_START(USART1)
 8001b34:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb4 <store_char+0xac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fed7 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(USART2)
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <store_char+0xb0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fed2 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(USART3)
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <store_char+0xb4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fecd 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(UART5)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <store_char+0xb8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fec8 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(UART4)
 8001b5c:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <store_char+0xbc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fec3 	bl	80018ec <LL_USART_DisableIT_RXNE>
    buffer->buffer[buffer->head] = c;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	79fa      	ldrb	r2, [r7, #7]
 8001b72:	701a      	strb	r2, [r3, #0]
    buffer->head = i;
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	605a      	str	r2, [r3, #4]
    ATOMIC_BLOCK_END(USART1)
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <store_char+0xac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fe4b 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART2)
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <store_char+0xb0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fe46 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART3)
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <store_char+0xb4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe41 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART5)
 8001b98:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <store_char+0xb8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fe3c 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART4)
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <store_char+0xbc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fe37 	bl	800181a <LL_USART_EnableIT_RXNE>
  }
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	20000010 	.word	0x20000010

08001bc8 <Uart_read>:

int Uart_read(USART_TypeDef *uart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  ring_buffer *_rx_buffer;

  switch ((uint32_t)uart) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a51      	ldr	r2, [pc, #324]	@ (8001d18 <Uart_read+0x150>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d00f      	beq.n	8001bf8 <Uart_read+0x30>
 8001bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d18 <Uart_read+0x150>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d81c      	bhi.n	8001c18 <Uart_read+0x50>
 8001bde:	4a4f      	ldr	r2, [pc, #316]	@ (8001d1c <Uart_read+0x154>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d015      	beq.n	8001c10 <Uart_read+0x48>
 8001be4:	4a4d      	ldr	r2, [pc, #308]	@ (8001d1c <Uart_read+0x154>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d816      	bhi.n	8001c18 <Uart_read+0x50>
 8001bea:	4a4d      	ldr	r2, [pc, #308]	@ (8001d20 <Uart_read+0x158>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d007      	beq.n	8001c00 <Uart_read+0x38>
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d24 <Uart_read+0x15c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d008      	beq.n	8001c08 <Uart_read+0x40>
 8001bf6:	e00f      	b.n	8001c18 <Uart_read+0x50>
    case (uint32_t)USART1:
      _rx_buffer = _rx_buffer1;
 8001bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8001d28 <Uart_read+0x160>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
      break;
 8001bfe:	e00f      	b.n	8001c20 <Uart_read+0x58>
    case (uint32_t)USART2:
      _rx_buffer = _rx_buffer2;
 8001c00:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <Uart_read+0x164>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
      break;
 8001c06:	e00b      	b.n	8001c20 <Uart_read+0x58>
    case (uint32_t)USART3:
      _rx_buffer = _rx_buffer3;
 8001c08:	4b49      	ldr	r3, [pc, #292]	@ (8001d30 <Uart_read+0x168>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
      break;
 8001c0e:	e007      	b.n	8001c20 <Uart_read+0x58>
    case (uint32_t)UART5:
      _rx_buffer = _rx_buffer5;
 8001c10:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <Uart_read+0x16c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
      break;
 8001c16:	e003      	b.n	8001c20 <Uart_read+0x58>
    default:
      _rx_buffer = _rx_buffer6;
 8001c18:	4b47      	ldr	r3, [pc, #284]	@ (8001d38 <Uart_read+0x170>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
      break;
 8001c1e:	bf00      	nop
  }

  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d102      	bne.n	8001c32 <Uart_read+0x6a>
  {
    return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	e06d      	b.n	8001d0e <Uart_read+0x146>
  }
  else
  {
    ATOMIC_BLOCK_START(uart)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a38      	ldr	r2, [pc, #224]	@ (8001d18 <Uart_read+0x150>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d105      	bne.n	8001c46 <Uart_read+0x7e>
 8001c3a:	4b40      	ldr	r3, [pc, #256]	@ (8001d3c <Uart_read+0x174>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe54 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c44:	e022      	b.n	8001c8c <Uart_read+0xc4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a35      	ldr	r2, [pc, #212]	@ (8001d20 <Uart_read+0x158>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d105      	bne.n	8001c5a <Uart_read+0x92>
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <Uart_read+0x178>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe4a 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c58:	e018      	b.n	8001c8c <Uart_read+0xc4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a31      	ldr	r2, [pc, #196]	@ (8001d24 <Uart_read+0x15c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d105      	bne.n	8001c6e <Uart_read+0xa6>
 8001c62:	4b38      	ldr	r3, [pc, #224]	@ (8001d44 <Uart_read+0x17c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fe40 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c6c:	e00e      	b.n	8001c8c <Uart_read+0xc4>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a2a      	ldr	r2, [pc, #168]	@ (8001d1c <Uart_read+0x154>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d105      	bne.n	8001c82 <Uart_read+0xba>
 8001c76:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <Uart_read+0x180>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe36 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c80:	e004      	b.n	8001c8c <Uart_read+0xc4>
 8001c82:	4b32      	ldr	r3, [pc, #200]	@ (8001d4c <Uart_read+0x184>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fe30 	bl	80018ec <LL_USART_DisableIT_RXNE>
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	72fb      	strb	r3, [r7, #11]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % _rx_buffer->size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	68d2      	ldr	r2, [r2, #12]
 8001ca4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ca8:	fb01 f202 	mul.w	r2, r1, r2
 8001cac:	1a9a      	subs	r2, r3, r2
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	609a      	str	r2, [r3, #8]
    ATOMIC_BLOCK_END(uart)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <Uart_read+0x150>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d105      	bne.n	8001cc6 <Uart_read+0xfe>
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <Uart_read+0x174>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fdab 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cc4:	e022      	b.n	8001d0c <Uart_read+0x144>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a15      	ldr	r2, [pc, #84]	@ (8001d20 <Uart_read+0x158>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d105      	bne.n	8001cda <Uart_read+0x112>
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <Uart_read+0x178>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fda1 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cd8:	e018      	b.n	8001d0c <Uart_read+0x144>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <Uart_read+0x15c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d105      	bne.n	8001cee <Uart_read+0x126>
 8001ce2:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <Uart_read+0x17c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fd97 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cec:	e00e      	b.n	8001d0c <Uart_read+0x144>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <Uart_read+0x154>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d105      	bne.n	8001d02 <Uart_read+0x13a>
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <Uart_read+0x180>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fd8d 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001d00:	e004      	b.n	8001d0c <Uart_read+0x144>
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <Uart_read+0x184>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fd87 	bl	800181a <LL_USART_EnableIT_RXNE>
    return c;
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	40005000 	.word	0x40005000
 8001d20:	40004400 	.word	0x40004400
 8001d24:	40004800 	.word	0x40004800
 8001d28:	20005a90 	.word	0x20005a90
 8001d2c:	20005a98 	.word	0x20005a98
 8001d30:	20005aa0 	.word	0x20005aa0
 8001d34:	20005aa8 	.word	0x20005aa8
 8001d38:	20005ab0 	.word	0x20005ab0
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000004 	.word	0x20000004
 8001d44:	20000008 	.word	0x20000008
 8001d48:	2000000c 	.word	0x2000000c
 8001d4c:	20000010 	.word	0x20000010

08001d50 <Uart_write>:

void Uart_write(USART_TypeDef *uart, int c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  ring_buffer *_tx_buffer;
  switch ((uint32_t)uart) {
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8001f0c <Uart_write+0x1bc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00f      	beq.n	8001d82 <Uart_write+0x32>
 8001d62:	4a6a      	ldr	r2, [pc, #424]	@ (8001f0c <Uart_write+0x1bc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d81c      	bhi.n	8001da2 <Uart_write+0x52>
 8001d68:	4a69      	ldr	r2, [pc, #420]	@ (8001f10 <Uart_write+0x1c0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d015      	beq.n	8001d9a <Uart_write+0x4a>
 8001d6e:	4a68      	ldr	r2, [pc, #416]	@ (8001f10 <Uart_write+0x1c0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d816      	bhi.n	8001da2 <Uart_write+0x52>
 8001d74:	4a67      	ldr	r2, [pc, #412]	@ (8001f14 <Uart_write+0x1c4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <Uart_write+0x3a>
 8001d7a:	4a67      	ldr	r2, [pc, #412]	@ (8001f18 <Uart_write+0x1c8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d008      	beq.n	8001d92 <Uart_write+0x42>
 8001d80:	e00f      	b.n	8001da2 <Uart_write+0x52>
    case (uint32_t)USART1:
      _tx_buffer = _tx_buffer1;
 8001d82:	4b66      	ldr	r3, [pc, #408]	@ (8001f1c <Uart_write+0x1cc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
      break;
 8001d88:	e00f      	b.n	8001daa <Uart_write+0x5a>
    case (uint32_t)USART2:
      _tx_buffer = _tx_buffer2;
 8001d8a:	4b65      	ldr	r3, [pc, #404]	@ (8001f20 <Uart_write+0x1d0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]
      break;
 8001d90:	e00b      	b.n	8001daa <Uart_write+0x5a>
    case (uint32_t)USART3:
      _tx_buffer = _tx_buffer3;
 8001d92:	4b64      	ldr	r3, [pc, #400]	@ (8001f24 <Uart_write+0x1d4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60fb      	str	r3, [r7, #12]
      break;
 8001d98:	e007      	b.n	8001daa <Uart_write+0x5a>
    case (uint32_t)UART5:
      _tx_buffer = _tx_buffer5;
 8001d9a:	4b63      	ldr	r3, [pc, #396]	@ (8001f28 <Uart_write+0x1d8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]
      break;
 8001da0:	e003      	b.n	8001daa <Uart_write+0x5a>
    default:
      _tx_buffer = _tx_buffer6;
 8001da2:	4b62      	ldr	r3, [pc, #392]	@ (8001f2c <Uart_write+0x1dc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]
      break;
 8001da8:	bf00      	nop
  }

  if (c >= 0)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f2c0 80a8 	blt.w	8001f02 <Uart_write+0x1b2>
  {
    int i = (_tx_buffer->head + 1) % _tx_buffer->size;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	3301      	adds	r3, #1
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	68d2      	ldr	r2, [r2, #12]
 8001dbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dc0:	fb01 f202 	mul.w	r2, r1, r2
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]

    ATOMIC_BLOCK_START(uart)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a50      	ldr	r2, [pc, #320]	@ (8001f0c <Uart_write+0x1bc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d105      	bne.n	8001ddc <Uart_write+0x8c>
 8001dd0:	4b57      	ldr	r3, [pc, #348]	@ (8001f30 <Uart_write+0x1e0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fd89 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001dda:	e022      	b.n	8001e22 <Uart_write+0xd2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <Uart_write+0x1c4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d105      	bne.n	8001df0 <Uart_write+0xa0>
 8001de4:	4b53      	ldr	r3, [pc, #332]	@ (8001f34 <Uart_write+0x1e4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fd7f 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001dee:	e018      	b.n	8001e22 <Uart_write+0xd2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a49      	ldr	r2, [pc, #292]	@ (8001f18 <Uart_write+0x1c8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d105      	bne.n	8001e04 <Uart_write+0xb4>
 8001df8:	4b4f      	ldr	r3, [pc, #316]	@ (8001f38 <Uart_write+0x1e8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fd75 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001e02:	e00e      	b.n	8001e22 <Uart_write+0xd2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a42      	ldr	r2, [pc, #264]	@ (8001f10 <Uart_write+0x1c0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d105      	bne.n	8001e18 <Uart_write+0xc8>
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f3c <Uart_write+0x1ec>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fd6b 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001e16:	e004      	b.n	8001e22 <Uart_write+0xd2>
 8001e18:	4b49      	ldr	r3, [pc, #292]	@ (8001f40 <Uart_write+0x1f0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fd65 	bl	80018ec <LL_USART_DisableIT_RXNE>
    while (i == _tx_buffer->tail);
 8001e22:	bf00      	nop
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d0fa      	beq.n	8001e24 <Uart_write+0xd4>

    _tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
    _tx_buffer->head = i;
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	605a      	str	r2, [r3, #4]
    ATOMIC_BLOCK_END(uart)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a31      	ldr	r2, [pc, #196]	@ (8001f0c <Uart_write+0x1bc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d105      	bne.n	8001e58 <Uart_write+0x108>
 8001e4c:	4b38      	ldr	r3, [pc, #224]	@ (8001f30 <Uart_write+0x1e0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fce2 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e56:	e022      	b.n	8001e9e <Uart_write+0x14e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f14 <Uart_write+0x1c4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d105      	bne.n	8001e6c <Uart_write+0x11c>
 8001e60:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <Uart_write+0x1e4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fcd8 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e6a:	e018      	b.n	8001e9e <Uart_write+0x14e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f18 <Uart_write+0x1c8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d105      	bne.n	8001e80 <Uart_write+0x130>
 8001e74:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <Uart_write+0x1e8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fcce 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e7e:	e00e      	b.n	8001e9e <Uart_write+0x14e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <Uart_write+0x1c0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d105      	bne.n	8001e94 <Uart_write+0x144>
 8001e88:	4b2c      	ldr	r3, [pc, #176]	@ (8001f3c <Uart_write+0x1ec>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fcc4 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e92:	e004      	b.n	8001e9e <Uart_write+0x14e>
 8001e94:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <Uart_write+0x1f0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fcbe 	bl	800181a <LL_USART_EnableIT_RXNE>

    switch ((uint32_t)uart) {
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f0c <Uart_write+0x1bc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00f      	beq.n	8001ec6 <Uart_write+0x176>
 8001ea6:	4a19      	ldr	r2, [pc, #100]	@ (8001f0c <Uart_write+0x1bc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d824      	bhi.n	8001ef6 <Uart_write+0x1a6>
 8001eac:	4a18      	ldr	r2, [pc, #96]	@ (8001f10 <Uart_write+0x1c0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01b      	beq.n	8001eea <Uart_write+0x19a>
 8001eb2:	4a17      	ldr	r2, [pc, #92]	@ (8001f10 <Uart_write+0x1c0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d81e      	bhi.n	8001ef6 <Uart_write+0x1a6>
 8001eb8:	4a16      	ldr	r2, [pc, #88]	@ (8001f14 <Uart_write+0x1c4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <Uart_write+0x182>
 8001ebe:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <Uart_write+0x1c8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00c      	beq.n	8001ede <Uart_write+0x18e>
 8001ec4:	e017      	b.n	8001ef6 <Uart_write+0x1a6>
      case (uint32_t)USART1:
        LL_USART_EnableIT_TXE(uart1);
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <Uart_write+0x1e0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fcc8 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ed0:	e017      	b.n	8001f02 <Uart_write+0x1b2>
      case (uint32_t)USART2:
        LL_USART_EnableIT_TXE(uart2);
 8001ed2:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <Uart_write+0x1e4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fcc2 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001edc:	e011      	b.n	8001f02 <Uart_write+0x1b2>
      case (uint32_t)USART3:
        LL_USART_EnableIT_TXE(uart3);
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <Uart_write+0x1e8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fcbc 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ee8:	e00b      	b.n	8001f02 <Uart_write+0x1b2>
      case (uint32_t)UART5:
        LL_USART_EnableIT_TXE(uart5);
 8001eea:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <Uart_write+0x1ec>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fcb6 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ef4:	e005      	b.n	8001f02 <Uart_write+0x1b2>
      default:
        LL_USART_EnableIT_TXE(uart6);
 8001ef6:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <Uart_write+0x1f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fcb0 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001f00:	bf00      	nop
    }
  }
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40005000 	.word	0x40005000
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40004800 	.word	0x40004800
 8001f1c:	20005a94 	.word	0x20005a94
 8001f20:	20005a9c 	.word	0x20005a9c
 8001f24:	20005aa4 	.word	0x20005aa4
 8001f28:	20005aac 	.word	0x20005aac
 8001f2c:	20005ab4 	.word	0x20005ab4
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	2000000c 	.word	0x2000000c
 8001f40:	20000010 	.word	0x20000010

08001f44 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;
	  switch ((uint32_t)uart) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <IsDataAvailable+0x90>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00f      	beq.n	8001f74 <IsDataAvailable+0x30>
 8001f54:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd4 <IsDataAvailable+0x90>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d81c      	bhi.n	8001f94 <IsDataAvailable+0x50>
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd8 <IsDataAvailable+0x94>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d015      	beq.n	8001f8c <IsDataAvailable+0x48>
 8001f60:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd8 <IsDataAvailable+0x94>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d816      	bhi.n	8001f94 <IsDataAvailable+0x50>
 8001f66:	4a1d      	ldr	r2, [pc, #116]	@ (8001fdc <IsDataAvailable+0x98>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <IsDataAvailable+0x38>
 8001f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe0 <IsDataAvailable+0x9c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d008      	beq.n	8001f84 <IsDataAvailable+0x40>
 8001f72:	e00f      	b.n	8001f94 <IsDataAvailable+0x50>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <IsDataAvailable+0xa0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
	      break;
 8001f7a:	e00f      	b.n	8001f9c <IsDataAvailable+0x58>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <IsDataAvailable+0xa4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
	      break;
 8001f82:	e00b      	b.n	8001f9c <IsDataAvailable+0x58>
	    case (uint32_t)USART3:
	      _rx_buffer = _rx_buffer3;
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <IsDataAvailable+0xa8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
	      break;
 8001f8a:	e007      	b.n	8001f9c <IsDataAvailable+0x58>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <IsDataAvailable+0xac>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
	      break;
 8001f92:	e003      	b.n	8001f9c <IsDataAvailable+0x58>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001f94:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <IsDataAvailable+0xb0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
	      break;
 8001f9a:	bf00      	nop
	  }

	  return (uint16_t)(_rx_buffer->size + _rx_buffer->head - _rx_buffer->tail) % _rx_buffer->size;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	1ad3      	subs	r3, r2, r3
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40011000 	.word	0x40011000
 8001fd8:	40005000 	.word	0x40005000
 8001fdc:	40004400 	.word	0x40004400
 8001fe0:	40004800 	.word	0x40004800
 8001fe4:	20005a90 	.word	0x20005a90
 8001fe8:	20005a98 	.word	0x20005a98
 8001fec:	20005aa0 	.word	0x20005aa0
 8001ff0:	20005aa8 	.word	0x20005aa8
 8001ff4:	20005ab0 	.word	0x20005ab0

08001ff8 <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (USART_TypeDef *uart, const char *s)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
	while(*s) Uart_write(uart, *s++);
 8002002:	e007      	b.n	8002014 <Uart_sendstring+0x1c>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	603a      	str	r2, [r7, #0]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fe9e 	bl	8001d50 <Uart_write>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f3      	bne.n	8002004 <Uart_sendstring+0xc>
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <Uart_flush>:


}

void Uart_flush (USART_TypeDef *uart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;

	  switch ((uint32_t)uart) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a1c      	ldr	r2, [pc, #112]	@ (80020a4 <Uart_flush+0x7c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00f      	beq.n	8002058 <Uart_flush+0x30>
 8002038:	4a1a      	ldr	r2, [pc, #104]	@ (80020a4 <Uart_flush+0x7c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d81c      	bhi.n	8002078 <Uart_flush+0x50>
 800203e:	4a1a      	ldr	r2, [pc, #104]	@ (80020a8 <Uart_flush+0x80>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d015      	beq.n	8002070 <Uart_flush+0x48>
 8002044:	4a18      	ldr	r2, [pc, #96]	@ (80020a8 <Uart_flush+0x80>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d816      	bhi.n	8002078 <Uart_flush+0x50>
 800204a:	4a18      	ldr	r2, [pc, #96]	@ (80020ac <Uart_flush+0x84>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <Uart_flush+0x38>
 8002050:	4a17      	ldr	r2, [pc, #92]	@ (80020b0 <Uart_flush+0x88>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d008      	beq.n	8002068 <Uart_flush+0x40>
 8002056:	e00f      	b.n	8002078 <Uart_flush+0x50>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8002058:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <Uart_flush+0x8c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
	      break;
 800205e:	e00f      	b.n	8002080 <Uart_flush+0x58>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8002060:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <Uart_flush+0x90>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
	      break;
 8002066:	e00b      	b.n	8002080 <Uart_flush+0x58>
	    case (uint32_t)USART3:
	      _rx_buffer = _rx_buffer3;
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <Uart_flush+0x94>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
	      break;
 800206e:	e007      	b.n	8002080 <Uart_flush+0x58>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8002070:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <Uart_flush+0x98>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
	      break;
 8002076:	e003      	b.n	8002080 <Uart_flush+0x58>
	    default:
	      _rx_buffer = _rx_buffer6;
 8002078:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <Uart_flush+0x9c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
	      break;
 800207e:	bf00      	nop
	  }

	  memset(_rx_buffer->buffer,'\0', _rx_buffer->size);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	461a      	mov	r2, r3
 800208a:	2100      	movs	r1, #0
 800208c:	f00d ff61 	bl	800ff52 <memset>
	  _rx_buffer->head = 0;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
	  _rx_buffer->tail = 0;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40011000 	.word	0x40011000
 80020a8:	40005000 	.word	0x40005000
 80020ac:	40004400 	.word	0x40004400
 80020b0:	40004800 	.word	0x40004800
 80020b4:	20005a90 	.word	0x20005a90
 80020b8:	20005a98 	.word	0x20005a98
 80020bc:	20005aa0 	.word	0x20005aa0
 80020c0:	20005aa8 	.word	0x20005aa8
 80020c4:	20005ab0 	.word	0x20005ab0

080020c8 <Uart_isr>:
	if (so_far == len) return 1;
	else return 0;
}

void Uart_isr (USART_TypeDef *uart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  //  uint32_t isrflags   = LL_USART_ReadReg(uart, SR);
    ring_buffer *_rx_buffer;
    ring_buffer *_tx_buffer;

    switch ((uint32_t)uart) {
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002208 <Uart_isr+0x140>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00f      	beq.n	80020f8 <Uart_isr+0x30>
 80020d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002208 <Uart_isr+0x140>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d828      	bhi.n	8002130 <Uart_isr+0x68>
 80020de:	4a4b      	ldr	r2, [pc, #300]	@ (800220c <Uart_isr+0x144>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01e      	beq.n	8002122 <Uart_isr+0x5a>
 80020e4:	4a49      	ldr	r2, [pc, #292]	@ (800220c <Uart_isr+0x144>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d822      	bhi.n	8002130 <Uart_isr+0x68>
 80020ea:	4a49      	ldr	r2, [pc, #292]	@ (8002210 <Uart_isr+0x148>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00a      	beq.n	8002106 <Uart_isr+0x3e>
 80020f0:	4a48      	ldr	r2, [pc, #288]	@ (8002214 <Uart_isr+0x14c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00e      	beq.n	8002114 <Uart_isr+0x4c>
 80020f6:	e01b      	b.n	8002130 <Uart_isr+0x68>
      case (uint32_t)USART1:
        _rx_buffer = _rx_buffer1;
 80020f8:	4b47      	ldr	r3, [pc, #284]	@ (8002218 <Uart_isr+0x150>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer1;
 80020fe:	4b47      	ldr	r3, [pc, #284]	@ (800221c <Uart_isr+0x154>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	613b      	str	r3, [r7, #16]
        break;
 8002104:	e01b      	b.n	800213e <Uart_isr+0x76>
      case (uint32_t)USART2:
        _rx_buffer = _rx_buffer2;
 8002106:	4b46      	ldr	r3, [pc, #280]	@ (8002220 <Uart_isr+0x158>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer2;
 800210c:	4b45      	ldr	r3, [pc, #276]	@ (8002224 <Uart_isr+0x15c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	613b      	str	r3, [r7, #16]
        break;
 8002112:	e014      	b.n	800213e <Uart_isr+0x76>
      case (uint32_t)USART3:
        _rx_buffer = _rx_buffer3;
 8002114:	4b44      	ldr	r3, [pc, #272]	@ (8002228 <Uart_isr+0x160>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer3;
 800211a:	4b44      	ldr	r3, [pc, #272]	@ (800222c <Uart_isr+0x164>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	613b      	str	r3, [r7, #16]
        break;
 8002120:	e00d      	b.n	800213e <Uart_isr+0x76>
      case (uint32_t)UART5:
        _rx_buffer = _rx_buffer5;
 8002122:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <Uart_isr+0x168>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer5;
 8002128:	4b42      	ldr	r3, [pc, #264]	@ (8002234 <Uart_isr+0x16c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	613b      	str	r3, [r7, #16]
        break;
 800212e:	e006      	b.n	800213e <Uart_isr+0x76>
      default:
        _rx_buffer = _rx_buffer6;
 8002130:	4b41      	ldr	r3, [pc, #260]	@ (8002238 <Uart_isr+0x170>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer6;
 8002136:	4b41      	ldr	r3, [pc, #260]	@ (800223c <Uart_isr+0x174>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	613b      	str	r3, [r7, #16]
        break;
 800213c:	bf00      	nop
    }

    /* if DR is not empty and the Rx Int is enabled */
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fb0f 	bl	8001762 <LL_USART_IsActiveFlag_RXNE>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d02c      	beq.n	80021a4 <Uart_isr+0xdc>
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fc14 	bl	8001978 <LL_USART_IsEnabledIT_RXNE>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d026      	beq.n	80021a4 <Uart_isr+0xdc>
//        LL_USART_ReceiveData8(uart);                /* Read status register */
//        unsigned char c = LL_USART_ReceiveData8(uart);    /* Read data register */
//        store_char (c, _rx_buffer);  // store data in buffer
//        return;

        unsigned char data = LL_USART_ReceiveData8(uart);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fc34 	bl	80019c4 <LL_USART_ReceiveData8>
 800215c:	4603      	mov	r3, r0
 800215e:	73fb      	strb	r3, [r7, #15]
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff faeb 	bl	800173c <LL_USART_IsActiveFlag_ORE>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <Uart_isr+0xbc>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fabf 	bl	80016f0 <LL_USART_IsActiveFlag_FE>
 8002172:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <Uart_isr+0xbc>
            (LL_USART_IsActiveFlag_NE(uart) != RESET))
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff facc 	bl	8001716 <LL_USART_IsActiveFlag_NE>
 800217e:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002180:	2b00      	cmp	r3, #0
 8002182:	d009      	beq.n	8002198 <Uart_isr+0xd0>
        {
          // if error, del flag
          LL_USART_ClearFlag_ORE(uart);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fb36 	bl	80017f6 <LL_USART_ClearFlag_ORE>
          LL_USART_ClearFlag_FE(uart);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fb0f 	bl	80017ae <LL_USART_ClearFlag_FE>
          LL_USART_ClearFlag_NE(uart);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fb1e 	bl	80017d2 <LL_USART_ClearFlag_NE>
        }
        else
        {
          store_char(data, _rx_buffer); // store data in buffer
        }
        return;
 8002196:	e034      	b.n	8002202 <Uart_isr+0x13a>
          store_char(data, _rx_buffer); // store data in buffer
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	6979      	ldr	r1, [r7, #20]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fcb3 	bl	8001b08 <store_char>
        return;
 80021a2:	e02e      	b.n	8002202 <Uart_isr+0x13a>


    }
    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff faef 	bl	8001788 <LL_USART_IsActiveFlag_TXE>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d028      	beq.n	8002202 <Uart_isr+0x13a>
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fbf4 	bl	800199e <LL_USART_IsEnabledIT_TXE>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d022      	beq.n	8002202 <Uart_isr+0x13a>
    {
        if(_tx_buffer->head == _tx_buffer->tail)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d103      	bne.n	80021d0 <Uart_isr+0x108>
        {
          // Buffer empty, so disable interrupts
          LL_USART_DisableIT_TXE(uart);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fbb2 	bl	8001932 <LL_USART_DisableIT_TXE>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
          _tx_buffer->tail = (_tx_buffer->tail + 1) % _tx_buffer->size;

          LL_USART_TransmitData8(uart, c);
        }
        return;
 80021ce:	e017      	b.n	8002200 <Uart_isr+0x138>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4413      	add	r3, r2
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	73bb      	strb	r3, [r7, #14]
          _tx_buffer->tail = (_tx_buffer->tail + 1) % _tx_buffer->size;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	3301      	adds	r3, #1
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	68d2      	ldr	r2, [r2, #12]
 80021e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80021ec:	fb01 f202 	mul.w	r2, r1, r2
 80021f0:	1a9a      	subs	r2, r3, r2
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]
          LL_USART_TransmitData8(uart, c);
 80021f6:	7bbb      	ldrb	r3, [r7, #14]
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fbef 	bl	80019de <LL_USART_TransmitData8>
        return;
 8002200:	bf00      	nop
    }
}
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40011000 	.word	0x40011000
 800220c:	40005000 	.word	0x40005000
 8002210:	40004400 	.word	0x40004400
 8002214:	40004800 	.word	0x40004800
 8002218:	20005a90 	.word	0x20005a90
 800221c:	20005a94 	.word	0x20005a94
 8002220:	20005a98 	.word	0x20005a98
 8002224:	20005a9c 	.word	0x20005a9c
 8002228:	20005aa0 	.word	0x20005aa0
 800222c:	20005aa4 	.word	0x20005aa4
 8002230:	20005aa8 	.word	0x20005aa8
 8002234:	20005aac 	.word	0x20005aac
 8002238:	20005ab0 	.word	0x20005ab0
 800223c:	20005ab4 	.word	0x20005ab4

08002240 <send_packet_init>:
		status_ACKsend_update					// taskFunction;
	}
};

void send_packet_init(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <send_packet_init+0x1c>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
    retryCount = 0;
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <send_packet_init+0x20>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20005bb9 	.word	0x20005bb9
 8002260:	20005bba 	.word	0x20005bba

08002264 <set_send_flag>:

void set_send_flag(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
    sendFlag = 1;
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <set_send_flag+0x14>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	20005bb9 	.word	0x20005bb9

0800227c <clear_send_flag>:

void clear_send_flag(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <clear_send_flag+0x14>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	20005bb9 	.word	0x20005bb9

08002294 <set_fsp_packet>:


void set_fsp_packet(uint8_t *encoded_pkt, uint8_t encoded_len)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
	while (g_pkt_lock);
 80022a0:	bf00      	nop
 80022a2:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <set_fsp_packet+0x58>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1fa      	bne.n	80022a2 <set_fsp_packet+0xe>
	g_pkt_lock = 1;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <set_fsp_packet+0x58>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
	memset((void *)g_encoded_pkt, 0, sizeof(g_encoded_pkt));
 80022b2:	22ff      	movs	r2, #255	@ 0xff
 80022b4:	2100      	movs	r1, #0
 80022b6:	480e      	ldr	r0, [pc, #56]	@ (80022f0 <set_fsp_packet+0x5c>)
 80022b8:	f00d fe4b 	bl	800ff52 <memset>
    memcpy((void *)g_encoded_pkt, encoded_pkt, encoded_len);
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	461a      	mov	r2, r3
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	480b      	ldr	r0, [pc, #44]	@ (80022f0 <set_fsp_packet+0x5c>)
 80022c4:	f00d fec5 	bl	8010052 <memcpy>
    g_encoded_len = encoded_len;
 80022c8:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <set_fsp_packet+0x60>)
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	7013      	strb	r3, [r2, #0]
    g_pkt_lock = 0;
 80022ce:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <set_fsp_packet+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
    sendFlag = 1;
 80022d4:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <set_fsp_packet+0x64>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
    SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);
 80022da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022de:	2003      	movs	r0, #3
 80022e0:	f009 fd88 	bl	800bdf4 <SCH_TIM_Start>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20005bb8 	.word	0x20005bb8
 80022f0:	20005ab8 	.word	0x20005ab8
 80022f4:	20005bb7 	.word	0x20005bb7
 80022f8:	20005bb9 	.word	0x20005bb9

080022fc <send_packet_create_task>:

void send_packet_create_task(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&ACKsend_task_context.taskHandle, &ACKsend_task_context.taskProperty);
 8002300:	4902      	ldr	r1, [pc, #8]	@ (800230c <send_packet_create_task+0x10>)
 8002302:	4803      	ldr	r0, [pc, #12]	@ (8002310 <send_packet_create_task+0x14>)
 8002304:	f009 fda2 	bl	800be4c <SCH_TASK_CreateTask>
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200000b8 	.word	0x200000b8
 8002310:	200000b4 	.word	0x200000b4

08002314 <status_ACKsend_update>:


uint8_t sendBuffer[FSP_PKT_MAX_LENGTH];

void	status_ACKsend_update(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0

			if (SCH_TIM_HasCompleted(SCH_TIM_ACK))
 800231a:	2003      	movs	r0, #3
 800231c:	f009 fd80 	bl	800be20 <SCH_TIM_HasCompleted>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d059      	beq.n	80023da <status_ACKsend_update+0xc6>
			{

			    if (sendFlag)
 8002326:	4b2f      	ldr	r3, [pc, #188]	@ (80023e4 <status_ACKsend_update+0xd0>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d04f      	beq.n	80023d0 <status_ACKsend_update+0xbc>
			    {
			    	if(retryCount < MAX_RETRIES){
 8002330:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <status_ACKsend_update+0xd4>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d833      	bhi.n	80023a2 <status_ACKsend_update+0x8e>
			    		while (g_pkt_lock);
 800233a:	bf00      	nop
 800233c:	4b2b      	ldr	r3, [pc, #172]	@ (80023ec <status_ACKsend_update+0xd8>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1fa      	bne.n	800233c <status_ACKsend_update+0x28>
			    		g_pkt_lock = 1;
 8002346:	4b29      	ldr	r3, [pc, #164]	@ (80023ec <status_ACKsend_update+0xd8>)
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
			            memcpy(sendBuffer, (const void *)g_encoded_pkt, g_encoded_len);
 800234c:	4b28      	ldr	r3, [pc, #160]	@ (80023f0 <status_ACKsend_update+0xdc>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	4927      	ldr	r1, [pc, #156]	@ (80023f4 <status_ACKsend_update+0xe0>)
 8002356:	4828      	ldr	r0, [pc, #160]	@ (80023f8 <status_ACKsend_update+0xe4>)
 8002358:	f00d fe7b 	bl	8010052 <memcpy>
			            for (int i = 0; i < g_encoded_len; i++) {
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	e00a      	b.n	8002378 <status_ACKsend_update+0x64>
			                Uart_write(USART1, sendBuffer[i]);
 8002362:	4a25      	ldr	r2, [pc, #148]	@ (80023f8 <status_ACKsend_update+0xe4>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4619      	mov	r1, r3
 800236c:	4823      	ldr	r0, [pc, #140]	@ (80023fc <status_ACKsend_update+0xe8>)
 800236e:	f7ff fcef 	bl	8001d50 <Uart_write>
			            for (int i = 0; i < g_encoded_len; i++) {
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3301      	adds	r3, #1
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <status_ACKsend_update+0xdc>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4293      	cmp	r3, r2
 8002384:	dbed      	blt.n	8002362 <status_ACKsend_update+0x4e>
			            }
						retryCount++;
 8002386:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <status_ACKsend_update+0xd4>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <status_ACKsend_update+0xd4>)
 8002392:	701a      	strb	r2, [r3, #0]
						sendFlag = 1;
 8002394:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <status_ACKsend_update+0xd0>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
						g_pkt_lock = 0;
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <status_ACKsend_update+0xd8>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e016      	b.n	80023d0 <status_ACKsend_update+0xbc>
			    	}
			    	else {
			    		retryCount = 0;
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <status_ACKsend_update+0xd4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
			    		clear_send_flag();
 80023a8:	f7ff ff68 	bl	800227c <clear_send_flag>

//			    		Uart_sendstring(UART5, "\nTIMEOUT_NORESPONE");
//			    		Uart_sendstring(UART5, "\r\n> ");
			    		Uart_sendstring(UART4, "\nTIMEOUT_NORESPONE");
 80023ac:	4914      	ldr	r1, [pc, #80]	@ (8002400 <status_ACKsend_update+0xec>)
 80023ae:	4815      	ldr	r0, [pc, #84]	@ (8002404 <status_ACKsend_update+0xf0>)
 80023b0:	f7ff fe22 	bl	8001ff8 <Uart_sendstring>
			    		Uart_sendstring(UART4, "\r\n> ");
 80023b4:	4914      	ldr	r1, [pc, #80]	@ (8002408 <status_ACKsend_update+0xf4>)
 80023b6:	4813      	ldr	r0, [pc, #76]	@ (8002404 <status_ACKsend_update+0xf0>)
 80023b8:	f7ff fe1e 	bl	8001ff8 <Uart_sendstring>
			    		Uart_sendstring(USART2, "\nTIMEOUT_NORESPONE");
 80023bc:	4910      	ldr	r1, [pc, #64]	@ (8002400 <status_ACKsend_update+0xec>)
 80023be:	4813      	ldr	r0, [pc, #76]	@ (800240c <status_ACKsend_update+0xf8>)
 80023c0:	f7ff fe1a 	bl	8001ff8 <Uart_sendstring>
			    		Uart_sendstring(USART2, "\r\n> ");
 80023c4:	4910      	ldr	r1, [pc, #64]	@ (8002408 <status_ACKsend_update+0xf4>)
 80023c6:	4811      	ldr	r0, [pc, #68]	@ (800240c <status_ACKsend_update+0xf8>)
 80023c8:	f7ff fe16 	bl	8001ff8 <Uart_sendstring>
			    		clear_send_flag();
 80023cc:	f7ff ff56 	bl	800227c <clear_send_flag>
			        }


			    }

				SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);	//restart
 80023d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023d4:	2003      	movs	r0, #3
 80023d6:	f009 fd0d 	bl	800bdf4 <SCH_TIM_Start>

			}


		//	[set trang thai]
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20005bb9 	.word	0x20005bb9
 80023e8:	20005bba 	.word	0x20005bba
 80023ec:	20005bb8 	.word	0x20005bb8
 80023f0:	20005bb7 	.word	0x20005bb7
 80023f4:	20005ab8 	.word	0x20005ab8
 80023f8:	20005bbc 	.word	0x20005bbc
 80023fc:	40011000 	.word	0x40011000
 8002400:	08013628 	.word	0x08013628
 8002404:	40004c00 	.word	0x40004c00
 8002408:	0801363c 	.word	0x0801363c
 800240c:	40004400 	.word	0x40004400

08002410 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	619a      	str	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <IOU_create_task>:
};



void IOU_create_task(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&IOU_task_context.taskHandle, &IOU_task_context.taskProperty);
 8002430:	4906      	ldr	r1, [pc, #24]	@ (800244c <IOU_create_task+0x20>)
 8002432:	4807      	ldr	r0, [pc, #28]	@ (8002450 <IOU_create_task+0x24>)
 8002434:	f009 fd0a 	bl	800be4c <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 8002438:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800243c:	2007      	movs	r0, #7
 800243e:	f009 fcd9 	bl	800bdf4 <SCH_TIM_Start>
    Ringbuf_init();
 8002442:	f7ff fadb 	bl	80019fc <Ringbuf_init>
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200000d4 	.word	0x200000d4
 8002450:	200000d0 	.word	0x200000d0

08002454 <IOU_update_task>:
volatile uint8_t send_rs422 = 0;

volatile uint8_t timeout_counter_iou = 0;


void IOU_update_task(void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 800245a:	4b41      	ldr	r3, [pc, #260]	@ (8002560 <IOU_update_task+0x10c>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d079      	beq.n	8002558 <IOU_update_task+0x104>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_IOU))
 8002464:	2007      	movs	r0, #7
 8002466:	f009 fcdb 	bl	800be20 <SCH_TIM_HasCompleted>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d073      	beq.n	8002558 <IOU_update_task+0x104>
		{

			if(!sendFlag){
 8002470:	4b3c      	ldr	r3, [pc, #240]	@ (8002564 <IOU_update_task+0x110>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d16e      	bne.n	8002558 <IOU_update_task+0x104>
				if(!send_rs422){
 800247a:	4b3b      	ldr	r3, [pc, #236]	@ (8002568 <IOU_update_task+0x114>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d130      	bne.n	80024e6 <IOU_update_task+0x92>
					if(receive_pduFlag&&receive_pmuFlag){
 8002484:	4b39      	ldr	r3, [pc, #228]	@ (800256c <IOU_update_task+0x118>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d02b      	beq.n	80024e6 <IOU_update_task+0x92>
 800248e:	4b38      	ldr	r3, [pc, #224]	@ (8002570 <IOU_update_task+0x11c>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d026      	beq.n	80024e6 <IOU_update_task+0x92>
						switch_board(3);
 8002498:	2003      	movs	r0, #3
 800249a:	f005 fbb5 	bl	8007c08 <switch_board>
						Uart_flush(USART1);
 800249e:	4835      	ldr	r0, [pc, #212]	@ (8002574 <IOU_update_task+0x120>)
 80024a0:	f7ff fdc2 	bl	8002028 <Uart_flush>

						frame = iou_frame;
 80024a4:	4b34      	ldr	r3, [pc, #208]	@ (8002578 <IOU_update_task+0x124>)
 80024a6:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(iou_frame);
 80024a8:	2309      	movs	r3, #9
 80024aa:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e00a      	b.n	80024c8 <IOU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	482d      	ldr	r0, [pc, #180]	@ (8002574 <IOU_update_task+0x120>)
 80024be:	f7ff fc47 	bl	8001d50 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	dbf0      	blt.n	80024b2 <IOU_update_task+0x5e>
						}
						receive_iouFlag = 0;
 80024d0:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <IOU_update_task+0x128>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80024d6:	4b24      	ldr	r3, [pc, #144]	@ (8002568 <IOU_update_task+0x114>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 80024dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024e0:	2007      	movs	r0, #7
 80024e2:	f009 fc87 	bl	800bdf4 <SCH_TIM_Start>
					}
				}
				if(!receive_iouFlag){
 80024e6:	4b25      	ldr	r3, [pc, #148]	@ (800257c <IOU_update_task+0x128>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d133      	bne.n	8002558 <IOU_update_task+0x104>
					timeout_counter_iou++;
 80024f0:	4b23      	ldr	r3, [pc, #140]	@ (8002580 <IOU_update_task+0x12c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b21      	ldr	r3, [pc, #132]	@ (8002580 <IOU_update_task+0x12c>)
 80024fc:	701a      	strb	r2, [r3, #0]
					if (timeout_counter_iou > 2){
 80024fe:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <IOU_update_task+0x12c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d927      	bls.n	8002558 <IOU_update_task+0x104>
						disconnect_counter_iou++;
 8002508:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <IOU_update_task+0x130>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3301      	adds	r3, #1
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b1c      	ldr	r3, [pc, #112]	@ (8002584 <IOU_update_task+0x130>)
 8002514:	701a      	strb	r2, [r3, #0]
						timeout_counter_iou = 0;
 8002516:	4b1a      	ldr	r3, [pc, #104]	@ (8002580 <IOU_update_task+0x12c>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
						receive_iouFlag = 1;
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <IOU_update_task+0x128>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
						send_rs422 = 0;
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <IOU_update_task+0x114>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
						if(disconnect_counter_iou> 4){
 8002528:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <IOU_update_task+0x130>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b04      	cmp	r3, #4
 8002530:	d912      	bls.n	8002558 <IOU_update_task+0x104>
							disconnect_counter_iou = 5;
 8002532:	4b14      	ldr	r3, [pc, #80]	@ (8002584 <IOU_update_task+0x130>)
 8002534:	2205      	movs	r2, #5
 8002536:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 35; i++) {
 8002538:	2301      	movs	r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	e009      	b.n	8002552 <IOU_update_task+0xfe>
								nextBuffer[i + 7] = 0xFF; //42   =  35  + 7      8 -> pay 1   9 -> pay2    43 -< pay35
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <IOU_update_task+0x134>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3307      	adds	r3, #7
 8002546:	4413      	add	r3, r2
 8002548:	22ff      	movs	r2, #255	@ 0xff
 800254a:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 35; i++) {
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3301      	adds	r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b23      	cmp	r3, #35	@ 0x23
 8002556:	ddf2      	ble.n	800253e <IOU_update_task+0xea>
					}
				}
			}
		}
	}
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20005de9 	.word	0x20005de9
 8002564:	20005bb9 	.word	0x20005bb9
 8002568:	20005cbe 	.word	0x20005cbe
 800256c:	200000e0 	.word	0x200000e0
 8002570:	200000e1 	.word	0x200000e1
 8002574:	40011000 	.word	0x40011000
 8002578:	200000c4 	.word	0x200000c4
 800257c:	200000e2 	.word	0x200000e2
 8002580:	20005cbf 	.word	0x20005cbf
 8002584:	20005cbb 	.word	0x20005cbb
 8002588:	2000049c 	.word	0x2000049c

0800258c <Cmd_iou_set_temp>:

volatile uint8_t uart_choose_uart5 = 0;
volatile uint8_t uart_choose_usart2 = 0;

int Cmd_iou_set_temp(int argc, char *argv[])
{
 800258c:	b580      	push	{r7, lr}
 800258e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002592:	af02      	add	r7, sp, #8
 8002594:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002598:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800259c:	6018      	str	r0, [r3, #0]
 800259e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025a2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80025a6:	6019      	str	r1, [r3, #0]


    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80025a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025ac:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	dc01      	bgt.n	80025ba <Cmd_iou_set_temp+0x2e>
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0e4      	b.n	8002784 <Cmd_iou_set_temp+0x1f8>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80025ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025be:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	dd01      	ble.n	80025cc <Cmd_iou_set_temp+0x40>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e0db      	b.n	8002784 <Cmd_iou_set_temp+0x1f8>

    uint8_t channel = atoi(argv[1]);
 80025cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025d0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3304      	adds	r3, #4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f00c fc9e 	bl	800ef1c <atoi>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80025e6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d901      	bls.n	80025f2 <Cmd_iou_set_temp+0x66>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e0c8      	b.n	8002784 <Cmd_iou_set_temp+0x1f8>

    uint16_t temp = atoi(argv[2]);
 80025f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025f6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3308      	adds	r3, #8
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f00c fc8b 	bl	800ef1c <atoi>
 8002606:	4603      	mov	r3, r0
 8002608:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (temp > 500)    return CMDLINE_INVALID_ARG;
 800260c:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8002610:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002614:	d901      	bls.n	800261a <Cmd_iou_set_temp+0x8e>
 8002616:	2304      	movs	r3, #4
 8002618:	e0b4      	b.n	8002784 <Cmd_iou_set_temp+0x1f8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800261a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800261e:	485c      	ldr	r0, [pc, #368]	@ (8002790 <Cmd_iou_set_temp+0x204>)
 8002620:	f7ff fef6 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002624:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002628:	4859      	ldr	r0, [pc, #356]	@ (8002790 <Cmd_iou_set_temp+0x204>)
 800262a:	f7ff fef1 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800262e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002632:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800263c:	3b01      	subs	r3, #1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002644:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	4413      	add	r3, r2
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002652:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002656:	4a4f      	ldr	r2, [pc, #316]	@ (8002794 <Cmd_iou_set_temp+0x208>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d103      	bne.n	8002664 <Cmd_iou_set_temp+0xd8>
    	uart_choose_uart5 = 1;
 800265c:	4b4e      	ldr	r3, [pc, #312]	@ (8002798 <Cmd_iou_set_temp+0x20c>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e002      	b.n	800266a <Cmd_iou_set_temp+0xde>
    }else{
    	uart_choose_uart5 = 0;
 8002664:	4b4c      	ldr	r3, [pc, #304]	@ (8002798 <Cmd_iou_set_temp+0x20c>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800266a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800266e:	4a4b      	ldr	r2, [pc, #300]	@ (800279c <Cmd_iou_set_temp+0x210>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d103      	bne.n	800267c <Cmd_iou_set_temp+0xf0>
    	uart_choose_usart2 = 1;
 8002674:	4b4a      	ldr	r3, [pc, #296]	@ (80027a0 <Cmd_iou_set_temp+0x214>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e002      	b.n	8002682 <Cmd_iou_set_temp+0xf6>
    }else{
    	uart_choose_usart2 = 0;
 800267c:	4b48      	ldr	r3, [pc, #288]	@ (80027a0 <Cmd_iou_set_temp+0x214>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
    }

    // Create the command payload
    uint8_t cmd  = CMD_CODE_SET_TEMP;
 8002682:	2301      	movs	r3, #1
 8002684:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0]  = channel;
 8002688:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800268c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(temp >> 8);   //high
 8002690:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	b29b      	uxth	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(temp & 0xFF); //low
 800269e:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    fsp_packet_t  fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80026a8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80026ac:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80026b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	2301      	movs	r3, #1
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2305      	movs	r3, #5
 80026bc:	2203      	movs	r2, #3
 80026be:	f009 fd71 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80026c2:	f107 020f 	add.w	r2, r7, #15
 80026c6:	f107 0110 	add.w	r1, r7, #16
 80026ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026ce:	4618      	mov	r0, r3
 80026d0:	f009 fdee 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 80026d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026d8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d02c      	beq.n	800273c <Cmd_iou_set_temp+0x1b0>
        for (int i = 0; i < frame_len; i++) {
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80026e8:	e010      	b.n	800270c <Cmd_iou_set_temp+0x180>
            Uart_write(USART1, encoded_frame[i]);
 80026ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026ee:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80026f2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026f6:	4413      	add	r3, r2
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4829      	ldr	r0, [pc, #164]	@ (80027a4 <Cmd_iou_set_temp+0x218>)
 80026fe:	f7ff fb27 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002702:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002706:	3301      	adds	r3, #1
 8002708:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800270c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002710:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800271c:	4293      	cmp	r3, r2
 800271e:	dbe4      	blt.n	80026ea <Cmd_iou_set_temp+0x15e>

        }
        set_fsp_packet(encoded_frame, frame_len);
 8002720:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002724:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fdaf 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8002736:	f7ff fd95 	bl	8002264 <set_send_flag>
 800273a:	e022      	b.n	8002782 <Cmd_iou_set_temp+0x1f6>
    }else{
    	fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800273c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002740:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002744:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	2301      	movs	r3, #1
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2305      	movs	r3, #5
 8002750:	2203      	movs	r2, #3
 8002752:	f009 fd27 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
    	frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002756:	f107 020f 	add.w	r2, r7, #15
 800275a:	f107 0110 	add.w	r1, r7, #16
 800275e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002762:	4618      	mov	r0, r3
 8002764:	f009 fda4 	bl	800c2b0 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8002768:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800276c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	f107 0310 	add.w	r3, r7, #16
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fd8b 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 800277e:	f7ff fd71 	bl	8002264 <set_send_flag>
//  ==>>>> khi gui thi mo cong ra, + delay vai ms -> Set co`
//	==>>>> Neu vay thi luon luon mo cong, khi mà nhắn bên 1 2 3 4, nhắn bên 1 thì mở luôn bên 1
//	==>>>> Nhắn bên 2 thì mở luôn bên 2 nếu mà chưa nhận được ack -> busy please wait (processing...)
//  ==>>>> Đoạn đấy bỏ vào trong timeout -> Sau đó mới hiện ok, hoặc done gì đó

    return CMDLINE_PENDING;
 8002782:	2305      	movs	r3, #5
}
 8002784:	4618      	mov	r0, r3
 8002786:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40020000 	.word	0x40020000
 8002794:	40005000 	.word	0x40005000
 8002798:	20005cc0 	.word	0x20005cc0
 800279c:	40004400 	.word	0x40004400
 80027a0:	20005cc1 	.word	0x20005cc1
 80027a4:	40011000 	.word	0x40011000

080027a8 <Cmd_iou_get_temp>:


int Cmd_iou_get_temp(int argc, char *argv[])
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80027ae:	af02      	add	r7, sp, #8
 80027b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80027b8:	6018      	str	r0, [r3, #0]
 80027ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80027c2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80027c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	dc01      	bgt.n	80027d6 <Cmd_iou_get_temp+0x2e>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e0db      	b.n	800298e <Cmd_iou_get_temp+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80027d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	dd01      	ble.n	80027e8 <Cmd_iou_get_temp+0x40>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0d2      	b.n	800298e <Cmd_iou_get_temp+0x1e6>


    uint8_t sensor = atoi(argv[1]);
 80027e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027ec:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3304      	adds	r3, #4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f00c fb90 	bl	800ef1c <atoi>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (sensor > 1)    return CMDLINE_INVALID_ARG;
 8002802:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002806:	2b01      	cmp	r3, #1
 8002808:	d901      	bls.n	800280e <Cmd_iou_get_temp+0x66>
 800280a:	2304      	movs	r3, #4
 800280c:	e0bf      	b.n	800298e <Cmd_iou_get_temp+0x1e6>

    uint8_t channel = atoi(argv[2]);
 800280e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002812:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3308      	adds	r3, #8
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f00c fb7d 	bl	800ef1c <atoi>
 8002822:	4603      	mov	r3, r0
 8002824:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002828:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 800282c:	2b03      	cmp	r3, #3
 800282e:	d901      	bls.n	8002834 <Cmd_iou_get_temp+0x8c>
 8002830:	2304      	movs	r3, #4
 8002832:	e0ac      	b.n	800298e <Cmd_iou_get_temp+0x1e6>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002834:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002838:	4857      	ldr	r0, [pc, #348]	@ (8002998 <Cmd_iou_get_temp+0x1f0>)
 800283a:	f7ff fde9 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800283e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002842:	4855      	ldr	r0, [pc, #340]	@ (8002998 <Cmd_iou_get_temp+0x1f0>)
 8002844:	f7ff fde4 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002848:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800284c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002856:	3b01      	subs	r3, #1
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800285e:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	4413      	add	r3, r2
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800286c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002870:	4a4a      	ldr	r2, [pc, #296]	@ (800299c <Cmd_iou_get_temp+0x1f4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d103      	bne.n	800287e <Cmd_iou_get_temp+0xd6>
    	uart_choose_uart5 = 1;
 8002876:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <Cmd_iou_get_temp+0x1f8>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e002      	b.n	8002884 <Cmd_iou_get_temp+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 800287e:	4b48      	ldr	r3, [pc, #288]	@ (80029a0 <Cmd_iou_get_temp+0x1f8>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002884:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002888:	4a46      	ldr	r2, [pc, #280]	@ (80029a4 <Cmd_iou_get_temp+0x1fc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d103      	bne.n	8002896 <Cmd_iou_get_temp+0xee>
    	uart_choose_usart2 = 1;
 800288e:	4b46      	ldr	r3, [pc, #280]	@ (80029a8 <Cmd_iou_get_temp+0x200>)
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e002      	b.n	800289c <Cmd_iou_get_temp+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 8002896:	4b44      	ldr	r3, [pc, #272]	@ (80029a8 <Cmd_iou_get_temp+0x200>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_GET_TEMP;
 800289c:	2302      	movs	r3, #2
 800289e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];


    payload[0] = sensor;
 80028a2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80028a6:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1] = channel;
 80028aa:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80028ae:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80028b2:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80028b6:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80028ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	2301      	movs	r3, #1
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2305      	movs	r3, #5
 80028c6:	2202      	movs	r2, #2
 80028c8:	f009 fc6c 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80028cc:	f107 020f 	add.w	r2, r7, #15
 80028d0:	f107 0110 	add.w	r1, r7, #16
 80028d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028d8:	4618      	mov	r0, r3
 80028da:	f009 fce9 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 80028de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028e2:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02c      	beq.n	8002946 <Cmd_iou_get_temp+0x19e>
        for (int i = 0; i < frame_len; i++) {
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80028f2:	e010      	b.n	8002916 <Cmd_iou_get_temp+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 80028f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028f8:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80028fc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002900:	4413      	add	r3, r2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	4829      	ldr	r0, [pc, #164]	@ (80029ac <Cmd_iou_get_temp+0x204>)
 8002908:	f7ff fa22 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800290c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002910:	3301      	adds	r3, #1
 8002912:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002916:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800291a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002926:	4293      	cmp	r3, r2
 8002928:	dbe4      	blt.n	80028f4 <Cmd_iou_get_temp+0x14c>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800292a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800292e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fcaa 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002940:	f7ff fc90 	bl	8002264 <set_send_flag>
 8002944:	e022      	b.n	800298c <Cmd_iou_get_temp+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002946:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800294a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800294e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	2301      	movs	r3, #1
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2305      	movs	r3, #5
 800295a:	2202      	movs	r2, #2
 800295c:	f009 fc22 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002960:	f107 020f 	add.w	r2, r7, #15
 8002964:	f107 0110 	add.w	r1, r7, #16
 8002968:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800296c:	4618      	mov	r0, r3
 800296e:	f009 fc9f 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002972:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002976:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fc86 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002988:	f7ff fc6c 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800298c:	2305      	movs	r3, #5
}
 800298e:	4618      	mov	r0, r3
 8002990:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40020000 	.word	0x40020000
 800299c:	40005000 	.word	0x40005000
 80029a0:	20005cc0 	.word	0x20005cc0
 80029a4:	40004400 	.word	0x40004400
 80029a8:	20005cc1 	.word	0x20005cc1
 80029ac:	40011000 	.word	0x40011000

080029b0 <Cmd_iou_temp_setpoint>:

int Cmd_iou_temp_setpoint(int argc, char *argv[])
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80029b6:	af02      	add	r7, sp, #8
 80029b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029bc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029c0:	6018      	str	r0, [r3, #0]
 80029c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029c6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80029ca:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80029cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029d0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	dc01      	bgt.n	80029de <Cmd_iou_temp_setpoint+0x2e>
 80029da:	2303      	movs	r3, #3
 80029dc:	e0c4      	b.n	8002b68 <Cmd_iou_temp_setpoint+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80029de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029e2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	dd01      	ble.n	80029f0 <Cmd_iou_temp_setpoint+0x40>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e0bb      	b.n	8002b68 <Cmd_iou_temp_setpoint+0x1b8>
    uint8_t channel = atoi(argv[1]);
 80029f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029f4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3304      	adds	r3, #4
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f00c fa8c 	bl	800ef1c <atoi>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002a0a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d901      	bls.n	8002a16 <Cmd_iou_temp_setpoint+0x66>
 8002a12:	2304      	movs	r3, #4
 8002a14:	e0a8      	b.n	8002b68 <Cmd_iou_temp_setpoint+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002a16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a1a:	4856      	ldr	r0, [pc, #344]	@ (8002b74 <Cmd_iou_temp_setpoint+0x1c4>)
 8002a1c:	f7ff fcf8 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002a20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a24:	4853      	ldr	r0, [pc, #332]	@ (8002b74 <Cmd_iou_temp_setpoint+0x1c4>)
 8002a26:	f7ff fcf3 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002a2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a2e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002a40:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002a4e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002a52:	4a49      	ldr	r2, [pc, #292]	@ (8002b78 <Cmd_iou_temp_setpoint+0x1c8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d103      	bne.n	8002a60 <Cmd_iou_temp_setpoint+0xb0>
    	uart_choose_uart5 = 1;
 8002a58:	4b48      	ldr	r3, [pc, #288]	@ (8002b7c <Cmd_iou_temp_setpoint+0x1cc>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <Cmd_iou_temp_setpoint+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002a60:	4b46      	ldr	r3, [pc, #280]	@ (8002b7c <Cmd_iou_temp_setpoint+0x1cc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002a66:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002a6a:	4a45      	ldr	r2, [pc, #276]	@ (8002b80 <Cmd_iou_temp_setpoint+0x1d0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d103      	bne.n	8002a78 <Cmd_iou_temp_setpoint+0xc8>
    	uart_choose_usart2 = 1;
 8002a70:	4b44      	ldr	r3, [pc, #272]	@ (8002b84 <Cmd_iou_temp_setpoint+0x1d4>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e002      	b.n	8002a7e <Cmd_iou_temp_setpoint+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002a78:	4b42      	ldr	r3, [pc, #264]	@ (8002b84 <Cmd_iou_temp_setpoint+0x1d4>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEMP_SETPOINT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002a84:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002a88:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002a8c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002a90:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002a94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f009 fb7f 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002aa6:	f107 020f 	add.w	r2, r7, #15
 8002aaa:	f107 0110 	add.w	r1, r7, #16
 8002aae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f009 fbfc 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 8002ab8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002abc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d02c      	beq.n	8002b20 <Cmd_iou_temp_setpoint+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002acc:	e010      	b.n	8002af0 <Cmd_iou_temp_setpoint+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002ace:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ad2:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002ad6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ada:	4413      	add	r3, r2
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4829      	ldr	r0, [pc, #164]	@ (8002b88 <Cmd_iou_temp_setpoint+0x1d8>)
 8002ae2:	f7ff f935 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002ae6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002aea:	3301      	adds	r3, #1
 8002aec:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002af0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002af4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002b00:	4293      	cmp	r3, r2
 8002b02:	dbe4      	blt.n	8002ace <Cmd_iou_temp_setpoint+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002b04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b08:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fbbd 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002b1a:	f7ff fba3 	bl	8002264 <set_send_flag>
 8002b1e:	e022      	b.n	8002b66 <Cmd_iou_temp_setpoint+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002b20:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002b24:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002b28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2305      	movs	r3, #5
 8002b34:	2201      	movs	r2, #1
 8002b36:	f009 fb35 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002b3a:	f107 020f 	add.w	r2, r7, #15
 8002b3e:	f107 0110 	add.w	r1, r7, #16
 8002b42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b46:	4618      	mov	r0, r3
 8002b48:	f009 fbb2 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002b4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b50:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	f107 0310 	add.w	r3, r7, #16
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fb99 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002b62:	f7ff fb7f 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002b66:	2305      	movs	r3, #5
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40005000 	.word	0x40005000
 8002b7c:	20005cc0 	.word	0x20005cc0
 8002b80:	40004400 	.word	0x40004400
 8002b84:	20005cc1 	.word	0x20005cc1
 8002b88:	40011000 	.word	0x40011000

08002b8c <Cmd_iou_tec_ena>:

int Cmd_iou_tec_ena(int argc, char *argv[])
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002b92:	af02      	add	r7, sp, #8
 8002b94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b98:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b9c:	6018      	str	r0, [r3, #0]
 8002b9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ba2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002ba6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002ba8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bac:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	dc01      	bgt.n	8002bba <Cmd_iou_tec_ena+0x2e>
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e0c4      	b.n	8002d44 <Cmd_iou_tec_ena+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002bba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bbe:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	dd01      	ble.n	8002bcc <Cmd_iou_tec_ena+0x40>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e0bb      	b.n	8002d44 <Cmd_iou_tec_ena+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002bcc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bd0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f00c f99e 	bl	800ef1c <atoi>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002be6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d901      	bls.n	8002bf2 <Cmd_iou_tec_ena+0x66>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e0a8      	b.n	8002d44 <Cmd_iou_tec_ena+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002bf2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bf6:	4856      	ldr	r0, [pc, #344]	@ (8002d50 <Cmd_iou_tec_ena+0x1c4>)
 8002bf8:	f7ff fc0a 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002bfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c00:	4853      	ldr	r0, [pc, #332]	@ (8002d50 <Cmd_iou_tec_ena+0x1c4>)
 8002c02:	f7ff fc05 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002c06:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c0a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c14:	3b01      	subs	r3, #1
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002c1c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002c2a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002c2e:	4a49      	ldr	r2, [pc, #292]	@ (8002d54 <Cmd_iou_tec_ena+0x1c8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d103      	bne.n	8002c3c <Cmd_iou_tec_ena+0xb0>
    	uart_choose_uart5 = 1;
 8002c34:	4b48      	ldr	r3, [pc, #288]	@ (8002d58 <Cmd_iou_tec_ena+0x1cc>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e002      	b.n	8002c42 <Cmd_iou_tec_ena+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002c3c:	4b46      	ldr	r3, [pc, #280]	@ (8002d58 <Cmd_iou_tec_ena+0x1cc>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002c42:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002c46:	4a45      	ldr	r2, [pc, #276]	@ (8002d5c <Cmd_iou_tec_ena+0x1d0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d103      	bne.n	8002c54 <Cmd_iou_tec_ena+0xc8>
    	uart_choose_usart2 = 1;
 8002c4c:	4b44      	ldr	r3, [pc, #272]	@ (8002d60 <Cmd_iou_tec_ena+0x1d4>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e002      	b.n	8002c5a <Cmd_iou_tec_ena+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002c54:	4b42      	ldr	r3, [pc, #264]	@ (8002d60 <Cmd_iou_tec_ena+0x1d4>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_ENA;
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002c60:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002c64:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002c68:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002c6c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002c70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	2301      	movs	r3, #1
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f009 fa91 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002c82:	f107 020f 	add.w	r2, r7, #15
 8002c86:	f107 0110 	add.w	r1, r7, #16
 8002c8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f009 fb0e 	bl	800c2b0 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002c94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c98:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d02c      	beq.n	8002cfc <Cmd_iou_tec_ena+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ca8:	e010      	b.n	8002ccc <Cmd_iou_tec_ena+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002caa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cae:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002cb2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4829      	ldr	r0, [pc, #164]	@ (8002d64 <Cmd_iou_tec_ena+0x1d8>)
 8002cbe:	f7ff f847 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002cc2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ccc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cd0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	dbe4      	blt.n	8002caa <Cmd_iou_tec_ena+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002ce0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ce4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff facf 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002cf6:	f7ff fab5 	bl	8002264 <set_send_flag>
 8002cfa:	e022      	b.n	8002d42 <Cmd_iou_tec_ena+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002cfc:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002d00:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002d04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2305      	movs	r3, #5
 8002d10:	2201      	movs	r2, #1
 8002d12:	f009 fa47 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002d16:	f107 020f 	add.w	r2, r7, #15
 8002d1a:	f107 0110 	add.w	r1, r7, #16
 8002d1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d22:	4618      	mov	r0, r3
 8002d24:	f009 fac4 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002d28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d2c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	f107 0310 	add.w	r3, r7, #16
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff faab 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002d3e:	f7ff fa91 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002d42:	2305      	movs	r3, #5
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40005000 	.word	0x40005000
 8002d58:	20005cc0 	.word	0x20005cc0
 8002d5c:	40004400 	.word	0x40004400
 8002d60:	20005cc1 	.word	0x20005cc1
 8002d64:	40011000 	.word	0x40011000

08002d68 <Cmd_iou_tec_dis>:

int Cmd_iou_tec_dis(int argc, char *argv[])
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002d6e:	af02      	add	r7, sp, #8
 8002d70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d74:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d78:	6018      	str	r0, [r3, #0]
 8002d7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d7e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002d82:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002d84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d88:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	dc01      	bgt.n	8002d96 <Cmd_iou_tec_dis+0x2e>
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0c4      	b.n	8002f20 <Cmd_iou_tec_dis+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002d96:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d9a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	dd01      	ble.n	8002da8 <Cmd_iou_tec_dis+0x40>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e0bb      	b.n	8002f20 <Cmd_iou_tec_dis+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002da8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002dac:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3304      	adds	r3, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f00c f8b0 	bl	800ef1c <atoi>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002dc2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d901      	bls.n	8002dce <Cmd_iou_tec_dis+0x66>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e0a8      	b.n	8002f20 <Cmd_iou_tec_dis+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002dce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002dd2:	4856      	ldr	r0, [pc, #344]	@ (8002f2c <Cmd_iou_tec_dis+0x1c4>)
 8002dd4:	f7ff fb1c 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002dd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ddc:	4853      	ldr	r0, [pc, #332]	@ (8002f2c <Cmd_iou_tec_dis+0x1c4>)
 8002dde:	f7ff fb17 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002de2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002de6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002df0:	3b01      	subs	r3, #1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002df8:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002e06:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002e0a:	4a49      	ldr	r2, [pc, #292]	@ (8002f30 <Cmd_iou_tec_dis+0x1c8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d103      	bne.n	8002e18 <Cmd_iou_tec_dis+0xb0>
    	uart_choose_uart5 = 1;
 8002e10:	4b48      	ldr	r3, [pc, #288]	@ (8002f34 <Cmd_iou_tec_dis+0x1cc>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e002      	b.n	8002e1e <Cmd_iou_tec_dis+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002e18:	4b46      	ldr	r3, [pc, #280]	@ (8002f34 <Cmd_iou_tec_dis+0x1cc>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002e1e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002e22:	4a45      	ldr	r2, [pc, #276]	@ (8002f38 <Cmd_iou_tec_dis+0x1d0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d103      	bne.n	8002e30 <Cmd_iou_tec_dis+0xc8>
    	uart_choose_usart2 = 1;
 8002e28:	4b44      	ldr	r3, [pc, #272]	@ (8002f3c <Cmd_iou_tec_dis+0x1d4>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e002      	b.n	8002e36 <Cmd_iou_tec_dis+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002e30:	4b42      	ldr	r3, [pc, #264]	@ (8002f3c <Cmd_iou_tec_dis+0x1d4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_TEC_DIS;
 8002e36:	2305      	movs	r3, #5
 8002e38:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002e3c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002e40:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002e44:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002e48:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002e4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	2301      	movs	r3, #1
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2305      	movs	r3, #5
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f009 f9a3 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002e5e:	f107 020f 	add.w	r2, r7, #15
 8002e62:	f107 0110 	add.w	r1, r7, #16
 8002e66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f009 fa20 	bl	800c2b0 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002e70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e74:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d02c      	beq.n	8002ed8 <Cmd_iou_tec_dis+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002e84:	e010      	b.n	8002ea8 <Cmd_iou_tec_dis+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002e86:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e8a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002e8e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	4829      	ldr	r0, [pc, #164]	@ (8002f40 <Cmd_iou_tec_dis+0x1d8>)
 8002e9a:	f7fe ff59 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002e9e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ea8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002eac:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	dbe4      	blt.n	8002e86 <Cmd_iou_tec_dis+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002ebc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ec0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	f107 0310 	add.w	r3, r7, #16
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f9e1 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002ed2:	f7ff f9c7 	bl	8002264 <set_send_flag>
 8002ed6:	e022      	b.n	8002f1e <Cmd_iou_tec_dis+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002ed8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002edc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002ee0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2305      	movs	r3, #5
 8002eec:	2201      	movs	r2, #1
 8002eee:	f009 f959 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002ef2:	f107 020f 	add.w	r2, r7, #15
 8002ef6:	f107 0110 	add.w	r1, r7, #16
 8002efa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002efe:	4618      	mov	r0, r3
 8002f00:	f009 f9d6 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002f04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f08:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f9bd 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8002f1a:	f7ff f9a3 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002f1e:	2305      	movs	r3, #5
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	40005000 	.word	0x40005000
 8002f34:	20005cc0 	.word	0x20005cc0
 8002f38:	40004400 	.word	0x40004400
 8002f3c:	20005cc1 	.word	0x20005cc1
 8002f40:	40011000 	.word	0x40011000

08002f44 <Cmd_iou_tec_ena_auto>:

int Cmd_iou_tec_ena_auto(int argc, char *argv[])
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f50:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f54:	6018      	str	r0, [r3, #0]
 8002f56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f5a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f5e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002f60:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f64:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	dc01      	bgt.n	8002f72 <Cmd_iou_tec_ena_auto+0x2e>
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0c4      	b.n	80030fc <Cmd_iou_tec_ena_auto+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002f72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f76:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	dd01      	ble.n	8002f84 <Cmd_iou_tec_ena_auto+0x40>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e0bb      	b.n	80030fc <Cmd_iou_tec_ena_auto+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002f84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f88:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f00b ffc2 	bl	800ef1c <atoi>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002f9e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d901      	bls.n	8002faa <Cmd_iou_tec_ena_auto+0x66>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	e0a8      	b.n	80030fc <Cmd_iou_tec_ena_auto+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002faa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fae:	4856      	ldr	r0, [pc, #344]	@ (8003108 <Cmd_iou_tec_ena_auto+0x1c4>)
 8002fb0:	f7ff fa2e 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002fb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fb8:	4853      	ldr	r0, [pc, #332]	@ (8003108 <Cmd_iou_tec_ena_auto+0x1c4>)
 8002fba:	f7ff fa29 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002fbe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002fc2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002fd4:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002fe2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002fe6:	4a49      	ldr	r2, [pc, #292]	@ (800310c <Cmd_iou_tec_ena_auto+0x1c8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d103      	bne.n	8002ff4 <Cmd_iou_tec_ena_auto+0xb0>
    	uart_choose_uart5 = 1;
 8002fec:	4b48      	ldr	r3, [pc, #288]	@ (8003110 <Cmd_iou_tec_ena_auto+0x1cc>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e002      	b.n	8002ffa <Cmd_iou_tec_ena_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002ff4:	4b46      	ldr	r3, [pc, #280]	@ (8003110 <Cmd_iou_tec_ena_auto+0x1cc>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002ffa:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002ffe:	4a45      	ldr	r2, [pc, #276]	@ (8003114 <Cmd_iou_tec_ena_auto+0x1d0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d103      	bne.n	800300c <Cmd_iou_tec_ena_auto+0xc8>
    	uart_choose_usart2 = 1;
 8003004:	4b44      	ldr	r3, [pc, #272]	@ (8003118 <Cmd_iou_tec_ena_auto+0x1d4>)
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e002      	b.n	8003012 <Cmd_iou_tec_ena_auto+0xce>
    }else{
    	uart_choose_usart2 = 0;
 800300c:	4b42      	ldr	r3, [pc, #264]	@ (8003118 <Cmd_iou_tec_ena_auto+0x1d4>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_ENA_AUTO;
 8003012:	2306      	movs	r3, #6
 8003014:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8003018:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800301c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003020:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003024:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003028:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	2301      	movs	r3, #1
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2305      	movs	r3, #5
 8003034:	2201      	movs	r2, #1
 8003036:	f009 f8b5 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800303a:	f107 020f 	add.w	r2, r7, #15
 800303e:	f107 0110 	add.w	r1, r7, #16
 8003042:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003046:	4618      	mov	r0, r3
 8003048:	f009 f932 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 800304c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003050:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d02c      	beq.n	80030b4 <Cmd_iou_tec_ena_auto+0x170>
        for (int i = 0; i < frame_len; i++) {
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003060:	e010      	b.n	8003084 <Cmd_iou_tec_ena_auto+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8003062:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003066:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800306a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800306e:	4413      	add	r3, r2
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	4619      	mov	r1, r3
 8003074:	4829      	ldr	r0, [pc, #164]	@ (800311c <Cmd_iou_tec_ena_auto+0x1d8>)
 8003076:	f7fe fe6b 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800307a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800307e:	3301      	adds	r3, #1
 8003080:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003084:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003088:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003094:	4293      	cmp	r3, r2
 8003096:	dbe4      	blt.n	8003062 <Cmd_iou_tec_ena_auto+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003098:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800309c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f8f3 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80030ae:	f7ff f8d9 	bl	8002264 <set_send_flag>
 80030b2:	e022      	b.n	80030fa <Cmd_iou_tec_ena_auto+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80030b4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80030b8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80030bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	2301      	movs	r3, #1
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2305      	movs	r3, #5
 80030c8:	2201      	movs	r2, #1
 80030ca:	f009 f86b 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80030ce:	f107 020f 	add.w	r2, r7, #15
 80030d2:	f107 0110 	add.w	r1, r7, #16
 80030d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80030da:	4618      	mov	r0, r3
 80030dc:	f009 f8e8 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80030e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030e4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	f107 0310 	add.w	r3, r7, #16
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f8cf 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80030f6:	f7ff f8b5 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80030fa:	2305      	movs	r3, #5
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40020000 	.word	0x40020000
 800310c:	40005000 	.word	0x40005000
 8003110:	20005cc0 	.word	0x20005cc0
 8003114:	40004400 	.word	0x40004400
 8003118:	20005cc1 	.word	0x20005cc1
 800311c:	40011000 	.word	0x40011000

08003120 <Cmd_iou_tec_dis_auto>:

int Cmd_iou_tec_dis_auto(int argc, char *argv[])
{
 8003120:	b580      	push	{r7, lr}
 8003122:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003126:	af02      	add	r7, sp, #8
 8003128:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800312c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003130:	6018      	str	r0, [r3, #0]
 8003132:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003136:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800313a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 800313c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003140:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b02      	cmp	r3, #2
 8003148:	dc01      	bgt.n	800314e <Cmd_iou_tec_dis_auto+0x2e>
 800314a:	2303      	movs	r3, #3
 800314c:	e0c4      	b.n	80032d8 <Cmd_iou_tec_dis_auto+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 800314e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003152:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b03      	cmp	r3, #3
 800315a:	dd01      	ble.n	8003160 <Cmd_iou_tec_dis_auto+0x40>
 800315c:	2302      	movs	r3, #2
 800315e:	e0bb      	b.n	80032d8 <Cmd_iou_tec_dis_auto+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8003160:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003164:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3304      	adds	r3, #4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f00b fed4 	bl	800ef1c <atoi>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800317a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800317e:	2b03      	cmp	r3, #3
 8003180:	d901      	bls.n	8003186 <Cmd_iou_tec_dis_auto+0x66>
 8003182:	2304      	movs	r3, #4
 8003184:	e0a8      	b.n	80032d8 <Cmd_iou_tec_dis_auto+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003186:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800318a:	4856      	ldr	r0, [pc, #344]	@ (80032e4 <Cmd_iou_tec_dis_auto+0x1c4>)
 800318c:	f7ff f940 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003190:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003194:	4853      	ldr	r0, [pc, #332]	@ (80032e4 <Cmd_iou_tec_dis_auto+0x1c4>)
 8003196:	f7ff f93b 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800319a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800319e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031a8:	3b01      	subs	r3, #1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80031b0:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80031be:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80031c2:	4a49      	ldr	r2, [pc, #292]	@ (80032e8 <Cmd_iou_tec_dis_auto+0x1c8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d103      	bne.n	80031d0 <Cmd_iou_tec_dis_auto+0xb0>
    	uart_choose_uart5 = 1;
 80031c8:	4b48      	ldr	r3, [pc, #288]	@ (80032ec <Cmd_iou_tec_dis_auto+0x1cc>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e002      	b.n	80031d6 <Cmd_iou_tec_dis_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 80031d0:	4b46      	ldr	r3, [pc, #280]	@ (80032ec <Cmd_iou_tec_dis_auto+0x1cc>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80031d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80031da:	4a45      	ldr	r2, [pc, #276]	@ (80032f0 <Cmd_iou_tec_dis_auto+0x1d0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <Cmd_iou_tec_dis_auto+0xc8>
    	uart_choose_usart2 = 1;
 80031e0:	4b44      	ldr	r3, [pc, #272]	@ (80032f4 <Cmd_iou_tec_dis_auto+0x1d4>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e002      	b.n	80031ee <Cmd_iou_tec_dis_auto+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80031e8:	4b42      	ldr	r3, [pc, #264]	@ (80032f4 <Cmd_iou_tec_dis_auto+0x1d4>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_DIS_AUTO;
 80031ee:	2307      	movs	r3, #7
 80031f0:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 80031f4:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80031f8:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80031fc:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003200:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003204:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	2301      	movs	r3, #1
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	2305      	movs	r3, #5
 8003210:	2201      	movs	r2, #1
 8003212:	f008 ffc7 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003216:	f107 020f 	add.w	r2, r7, #15
 800321a:	f107 0110 	add.w	r1, r7, #16
 800321e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003222:	4618      	mov	r0, r3
 8003224:	f009 f844 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 8003228:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800322c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d02c      	beq.n	8003290 <Cmd_iou_tec_dis_auto+0x170>
        for (int i = 0; i < frame_len; i++) {
 8003236:	2300      	movs	r3, #0
 8003238:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800323c:	e010      	b.n	8003260 <Cmd_iou_tec_dis_auto+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800323e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003242:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8003246:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	4619      	mov	r1, r3
 8003250:	4829      	ldr	r0, [pc, #164]	@ (80032f8 <Cmd_iou_tec_dis_auto+0x1d8>)
 8003252:	f7fe fd7d 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003256:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800325a:	3301      	adds	r3, #1
 800325c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003260:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003264:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003270:	4293      	cmp	r3, r2
 8003272:	dbe4      	blt.n	800323e <Cmd_iou_tec_dis_auto+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003274:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003278:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	f107 0310 	add.w	r3, r7, #16
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff f805 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800328a:	f7fe ffeb 	bl	8002264 <set_send_flag>
 800328e:	e022      	b.n	80032d6 <Cmd_iou_tec_dis_auto+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003290:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003294:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003298:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2301      	movs	r3, #1
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2305      	movs	r3, #5
 80032a4:	2201      	movs	r2, #1
 80032a6:	f008 ff7d 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80032aa:	f107 020f 	add.w	r2, r7, #15
 80032ae:	f107 0110 	add.w	r1, r7, #16
 80032b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032b6:	4618      	mov	r0, r3
 80032b8:	f008 fffa 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80032bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032c0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	f107 0310 	add.w	r3, r7, #16
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe ffe1 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80032d2:	f7fe ffc7 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80032d6:	2305      	movs	r3, #5
}
 80032d8:	4618      	mov	r0, r3
 80032da:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40020000 	.word	0x40020000
 80032e8:	40005000 	.word	0x40005000
 80032ec:	20005cc0 	.word	0x20005cc0
 80032f0:	40004400 	.word	0x40004400
 80032f4:	20005cc1 	.word	0x20005cc1
 80032f8:	40011000 	.word	0x40011000

080032fc <Cmd_iou_tec_set_output>:


int Cmd_iou_tec_set_output(int argc, char *argv[])
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003302:	af02      	add	r7, sp, #8
 8003304:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003308:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800330c:	6018      	str	r0, [r3, #0]
 800330e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003312:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003316:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 4) return CMDLINE_TOO_FEW_ARGS;
 8003318:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800331c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b04      	cmp	r3, #4
 8003324:	dc01      	bgt.n	800332a <Cmd_iou_tec_set_output+0x2e>
 8003326:	2303      	movs	r3, #3
 8003328:	e0fb      	b.n	8003522 <Cmd_iou_tec_set_output+0x226>
    if ((argc-1) > 4) return CMDLINE_TOO_MANY_ARGS;
 800332a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800332e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b05      	cmp	r3, #5
 8003336:	dd01      	ble.n	800333c <Cmd_iou_tec_set_output+0x40>
 8003338:	2302      	movs	r3, #2
 800333a:	e0f2      	b.n	8003522 <Cmd_iou_tec_set_output+0x226>
    uint8_t channel = atoi(argv[1]);
 800333c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003340:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3304      	adds	r3, #4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f00b fde6 	bl	800ef1c <atoi>
 8003350:	4603      	mov	r3, r0
 8003352:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8003356:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800335a:	2b03      	cmp	r3, #3
 800335c:	d901      	bls.n	8003362 <Cmd_iou_tec_set_output+0x66>
 800335e:	2304      	movs	r3, #4
 8003360:	e0df      	b.n	8003522 <Cmd_iou_tec_set_output+0x226>

    uint8_t mode = atoi(argv[2]);
 8003362:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003366:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3308      	adds	r3, #8
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f00b fdd3 	bl	800ef1c <atoi>
 8003376:	4603      	mov	r3, r0
 8003378:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (mode > 1)    return CMDLINE_INVALID_ARG;
 800337c:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003380:	2b01      	cmp	r3, #1
 8003382:	d901      	bls.n	8003388 <Cmd_iou_tec_set_output+0x8c>
 8003384:	2304      	movs	r3, #4
 8003386:	e0cc      	b.n	8003522 <Cmd_iou_tec_set_output+0x226>

    uint16_t vol = atoi(argv[3]);
 8003388:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800338c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f00b fdc0 	bl	800ef1c <atoi>
 800339c:	4603      	mov	r3, r0
 800339e:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 80033a2:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80033a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80033aa:	d901      	bls.n	80033b0 <Cmd_iou_tec_set_output+0xb4>
 80033ac:	2304      	movs	r3, #4
 80033ae:	e0b8      	b.n	8003522 <Cmd_iou_tec_set_output+0x226>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80033b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80033b4:	485d      	ldr	r0, [pc, #372]	@ (800352c <Cmd_iou_tec_set_output+0x230>)
 80033b6:	f7ff f82b 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80033ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033be:	485b      	ldr	r0, [pc, #364]	@ (800352c <Cmd_iou_tec_set_output+0x230>)
 80033c0:	f7ff f826 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80033c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033d2:	3b01      	subs	r3, #1
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80033da:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	4413      	add	r3, r2
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80033e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80033ec:	4a50      	ldr	r2, [pc, #320]	@ (8003530 <Cmd_iou_tec_set_output+0x234>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d103      	bne.n	80033fa <Cmd_iou_tec_set_output+0xfe>
    	uart_choose_uart5 = 1;
 80033f2:	4b50      	ldr	r3, [pc, #320]	@ (8003534 <Cmd_iou_tec_set_output+0x238>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	e002      	b.n	8003400 <Cmd_iou_tec_set_output+0x104>
    }else{
    	uart_choose_uart5 = 0;
 80033fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003534 <Cmd_iou_tec_set_output+0x238>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003400:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003404:	4a4c      	ldr	r2, [pc, #304]	@ (8003538 <Cmd_iou_tec_set_output+0x23c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d103      	bne.n	8003412 <Cmd_iou_tec_set_output+0x116>
    	uart_choose_usart2 = 1;
 800340a:	4b4c      	ldr	r3, [pc, #304]	@ (800353c <Cmd_iou_tec_set_output+0x240>)
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	e002      	b.n	8003418 <Cmd_iou_tec_set_output+0x11c>
    }else{
    	uart_choose_usart2 = 0;
 8003412:	4b4a      	ldr	r3, [pc, #296]	@ (800353c <Cmd_iou_tec_set_output+0x240>)
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_SET_OUTPUT;
 8003418:	2308      	movs	r3, #8
 800341a:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];
    payload[0] = channel;
 800341e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003422:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1] = mode;
 8003426:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 800342a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(vol >> 8);   //high
 800342e:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	b29b      	uxth	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(vol & 0xFF); //low
 800343c:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003446:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800344a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800344e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	2301      	movs	r3, #1
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2305      	movs	r3, #5
 800345a:	2204      	movs	r2, #4
 800345c:	f008 fea2 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003460:	f107 020b 	add.w	r2, r7, #11
 8003464:	f107 010c 	add.w	r1, r7, #12
 8003468:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800346c:	4618      	mov	r0, r3
 800346e:	f008 ff1f 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 8003472:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003476:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d02c      	beq.n	80034da <Cmd_iou_tec_set_output+0x1de>
        for (int i = 0; i < frame_len; i++) {
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003486:	e010      	b.n	80034aa <Cmd_iou_tec_set_output+0x1ae>
            Uart_write(USART1, encoded_frame[i]);
 8003488:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800348c:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003490:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003494:	4413      	add	r3, r2
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	4619      	mov	r1, r3
 800349a:	4829      	ldr	r0, [pc, #164]	@ (8003540 <Cmd_iou_tec_set_output+0x244>)
 800349c:	f7fe fc58 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80034a0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80034a4:	3301      	adds	r3, #1
 80034a6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80034aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034ae:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80034ba:	4293      	cmp	r3, r2
 80034bc:	dbe4      	blt.n	8003488 <Cmd_iou_tec_set_output+0x18c>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80034be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034c2:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fee0 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80034d4:	f7fe fec6 	bl	8002264 <set_send_flag>
 80034d8:	e022      	b.n	8003520 <Cmd_iou_tec_set_output+0x224>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80034da:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80034de:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80034e2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	2301      	movs	r3, #1
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	2305      	movs	r3, #5
 80034ee:	2204      	movs	r2, #4
 80034f0:	f008 fe58 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80034f4:	f107 020b 	add.w	r2, r7, #11
 80034f8:	f107 010c 	add.w	r1, r7, #12
 80034fc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003500:	4618      	mov	r0, r3
 8003502:	f008 fed5 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003506:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800350a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe febc 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800351c:	f7fe fea2 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003520:	2305      	movs	r3, #5
}
 8003522:	4618      	mov	r0, r3
 8003524:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40020000 	.word	0x40020000
 8003530:	40005000 	.word	0x40005000
 8003534:	20005cc0 	.word	0x20005cc0
 8003538:	40004400 	.word	0x40004400
 800353c:	20005cc1 	.word	0x20005cc1
 8003540:	40011000 	.word	0x40011000

08003544 <Cmd_iou_tec_auto_vol>:

int Cmd_iou_tec_auto_vol(int argc, char *argv[])
{
 8003544:	b580      	push	{r7, lr}
 8003546:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800354a:	af02      	add	r7, sp, #8
 800354c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003550:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003554:	6018      	str	r0, [r3, #0]
 8003556:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800355a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800355e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8003560:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003564:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b03      	cmp	r3, #3
 800356c:	dc01      	bgt.n	8003572 <Cmd_iou_tec_auto_vol+0x2e>
 800356e:	2303      	movs	r3, #3
 8003570:	e0e4      	b.n	800373c <Cmd_iou_tec_auto_vol+0x1f8>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8003572:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003576:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b04      	cmp	r3, #4
 800357e:	dd01      	ble.n	8003584 <Cmd_iou_tec_auto_vol+0x40>
 8003580:	2302      	movs	r3, #2
 8003582:	e0db      	b.n	800373c <Cmd_iou_tec_auto_vol+0x1f8>
    uint8_t channel = atoi(argv[1]);
 8003584:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003588:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3304      	adds	r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f00b fcc2 	bl	800ef1c <atoi>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800359e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d901      	bls.n	80035aa <Cmd_iou_tec_auto_vol+0x66>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e0c8      	b.n	800373c <Cmd_iou_tec_auto_vol+0x1f8>

    uint16_t vol = atoi(argv[2]);
 80035aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035ae:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3308      	adds	r3, #8
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f00b fcaf 	bl	800ef1c <atoi>
 80035be:	4603      	mov	r3, r0
 80035c0:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 80035c4:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80035c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80035cc:	d901      	bls.n	80035d2 <Cmd_iou_tec_auto_vol+0x8e>
 80035ce:	2304      	movs	r3, #4
 80035d0:	e0b4      	b.n	800373c <Cmd_iou_tec_auto_vol+0x1f8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80035d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80035d6:	485c      	ldr	r0, [pc, #368]	@ (8003748 <Cmd_iou_tec_auto_vol+0x204>)
 80035d8:	f7fe ff1a 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80035dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035e0:	4859      	ldr	r0, [pc, #356]	@ (8003748 <Cmd_iou_tec_auto_vol+0x204>)
 80035e2:	f7fe ff15 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80035e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035ea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035f4:	3b01      	subs	r3, #1
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80035fc:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	4413      	add	r3, r2
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800360a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800360e:	4a4f      	ldr	r2, [pc, #316]	@ (800374c <Cmd_iou_tec_auto_vol+0x208>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d103      	bne.n	800361c <Cmd_iou_tec_auto_vol+0xd8>
    	uart_choose_uart5 = 1;
 8003614:	4b4e      	ldr	r3, [pc, #312]	@ (8003750 <Cmd_iou_tec_auto_vol+0x20c>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e002      	b.n	8003622 <Cmd_iou_tec_auto_vol+0xde>
    }else{
    	uart_choose_uart5 = 0;
 800361c:	4b4c      	ldr	r3, [pc, #304]	@ (8003750 <Cmd_iou_tec_auto_vol+0x20c>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003622:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003626:	4a4b      	ldr	r2, [pc, #300]	@ (8003754 <Cmd_iou_tec_auto_vol+0x210>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d103      	bne.n	8003634 <Cmd_iou_tec_auto_vol+0xf0>
    	uart_choose_usart2 = 1;
 800362c:	4b4a      	ldr	r3, [pc, #296]	@ (8003758 <Cmd_iou_tec_auto_vol+0x214>)
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e002      	b.n	800363a <Cmd_iou_tec_auto_vol+0xf6>
    }else{
    	uart_choose_usart2 = 0;
 8003634:	4b48      	ldr	r3, [pc, #288]	@ (8003758 <Cmd_iou_tec_auto_vol+0x214>)
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_AUTO_VOL;
 800363a:	2309      	movs	r3, #9
 800363c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0] = channel;
 8003640:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003644:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(vol >> 8);   //high
 8003648:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	b29b      	uxth	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(vol & 0xFF); //low
 8003656:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003660:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8003664:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2301      	movs	r3, #1
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2305      	movs	r3, #5
 8003674:	2203      	movs	r2, #3
 8003676:	f008 fd95 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800367a:	f107 020f 	add.w	r2, r7, #15
 800367e:	f107 0110 	add.w	r1, r7, #16
 8003682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003686:	4618      	mov	r0, r3
 8003688:	f008 fe12 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 800368c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003690:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d02c      	beq.n	80036f4 <Cmd_iou_tec_auto_vol+0x1b0>
        for (int i = 0; i < frame_len; i++) {
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80036a0:	e010      	b.n	80036c4 <Cmd_iou_tec_auto_vol+0x180>
            Uart_write(USART1, encoded_frame[i]);
 80036a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036a6:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80036aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80036ae:	4413      	add	r3, r2
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	4619      	mov	r1, r3
 80036b4:	4829      	ldr	r0, [pc, #164]	@ (800375c <Cmd_iou_tec_auto_vol+0x218>)
 80036b6:	f7fe fb4b 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80036ba:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80036be:	3301      	adds	r3, #1
 80036c0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80036c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036c8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80036d4:	4293      	cmp	r3, r2
 80036d6:	dbe4      	blt.n	80036a2 <Cmd_iou_tec_auto_vol+0x15e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80036d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036dc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	f107 0310 	add.w	r3, r7, #16
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fdd3 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80036ee:	f7fe fdb9 	bl	8002264 <set_send_flag>
 80036f2:	e022      	b.n	800373a <Cmd_iou_tec_auto_vol+0x1f6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80036f4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80036f8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80036fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2301      	movs	r3, #1
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2305      	movs	r3, #5
 8003708:	2203      	movs	r2, #3
 800370a:	f008 fd4b 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800370e:	f107 020f 	add.w	r2, r7, #15
 8003712:	f107 0110 	add.w	r1, r7, #16
 8003716:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800371a:	4618      	mov	r0, r3
 800371c:	f008 fdc8 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003720:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003724:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	f107 0310 	add.w	r3, r7, #16
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe fdaf 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003736:	f7fe fd95 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800373a:	2305      	movs	r3, #5
}
 800373c:	4618      	mov	r0, r3
 800373e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40020000 	.word	0x40020000
 800374c:	40005000 	.word	0x40005000
 8003750:	20005cc0 	.word	0x20005cc0
 8003754:	40004400 	.word	0x40004400
 8003758:	20005cc1 	.word	0x20005cc1
 800375c:	40011000 	.word	0x40011000

08003760 <Cmd_iou_tec_status>:

int Cmd_iou_tec_status(int argc, char *argv[])
{
 8003760:	b580      	push	{r7, lr}
 8003762:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003766:	af00      	add	r7, sp, #0
 8003768:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800376c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003770:	6018      	str	r0, [r3, #0]
 8003772:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003776:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800377a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800377c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003780:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	dc01      	bgt.n	800378e <Cmd_iou_tec_status+0x2e>
 800378a:	2303      	movs	r3, #3
 800378c:	e0a3      	b.n	80038d6 <Cmd_iou_tec_status+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800378e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003792:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b02      	cmp	r3, #2
 800379a:	dd01      	ble.n	80037a0 <Cmd_iou_tec_status+0x40>
 800379c:	2302      	movs	r3, #2
 800379e:	e09a      	b.n	80038d6 <Cmd_iou_tec_status+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80037a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037a4:	484e      	ldr	r0, [pc, #312]	@ (80038e0 <Cmd_iou_tec_status+0x180>)
 80037a6:	f7fe fe33 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80037aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037ae:	484c      	ldr	r0, [pc, #304]	@ (80038e0 <Cmd_iou_tec_status+0x180>)
 80037b0:	f7fe fe2e 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80037b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037b8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037c2:	3b01      	subs	r3, #1
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80037ca:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80037d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80037dc:	4a41      	ldr	r2, [pc, #260]	@ (80038e4 <Cmd_iou_tec_status+0x184>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d103      	bne.n	80037ea <Cmd_iou_tec_status+0x8a>
    	uart_choose_uart5 = 1;
 80037e2:	4b41      	ldr	r3, [pc, #260]	@ (80038e8 <Cmd_iou_tec_status+0x188>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	e002      	b.n	80037f0 <Cmd_iou_tec_status+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80037ea:	4b3f      	ldr	r3, [pc, #252]	@ (80038e8 <Cmd_iou_tec_status+0x188>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80037f0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80037f4:	4a3d      	ldr	r2, [pc, #244]	@ (80038ec <Cmd_iou_tec_status+0x18c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d103      	bne.n	8003802 <Cmd_iou_tec_status+0xa2>
    	uart_choose_usart2 = 1;
 80037fa:	4b3d      	ldr	r3, [pc, #244]	@ (80038f0 <Cmd_iou_tec_status+0x190>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e002      	b.n	8003808 <Cmd_iou_tec_status+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003802:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <Cmd_iou_tec_status+0x190>)
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_STATUS;
 8003808:	230a      	movs	r3, #10
 800380a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800380e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003812:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003816:	2201      	movs	r2, #1
 8003818:	2105      	movs	r1, #5
 800381a:	f008 fc9b 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800381e:	f107 020f 	add.w	r2, r7, #15
 8003822:	f107 0110 	add.w	r1, r7, #16
 8003826:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800382a:	4618      	mov	r0, r3
 800382c:	f008 fd40 	bl	800c2b0 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003830:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003834:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02c      	beq.n	8003898 <Cmd_iou_tec_status+0x138>
        for (int i = 0; i < frame_len; i++) {
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003844:	e010      	b.n	8003868 <Cmd_iou_tec_status+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8003846:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800384a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800384e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003852:	4413      	add	r3, r2
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	4619      	mov	r1, r3
 8003858:	4826      	ldr	r0, [pc, #152]	@ (80038f4 <Cmd_iou_tec_status+0x194>)
 800385a:	f7fe fa79 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800385e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003862:	3301      	adds	r3, #1
 8003864:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003868:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800386c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003878:	4293      	cmp	r3, r2
 800387a:	dbe4      	blt.n	8003846 <Cmd_iou_tec_status+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800387c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003880:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	f107 0310 	add.w	r3, r7, #16
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fd01 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003892:	f7fe fce7 	bl	8002264 <set_send_flag>
 8003896:	e01d      	b.n	80038d4 <Cmd_iou_tec_status+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003898:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800389c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80038a0:	2201      	movs	r2, #1
 80038a2:	2105      	movs	r1, #5
 80038a4:	f008 fc56 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80038a8:	f107 020f 	add.w	r2, r7, #15
 80038ac:	f107 0110 	add.w	r1, r7, #16
 80038b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038b4:	4618      	mov	r0, r3
 80038b6:	f008 fcfb 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80038ba:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038be:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	f107 0310 	add.w	r3, r7, #16
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fce2 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80038d0:	f7fe fcc8 	bl	8002264 <set_send_flag>
    }
    return CMDLINE_PENDING;
 80038d4:	2305      	movs	r3, #5
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40020000 	.word	0x40020000
 80038e4:	40005000 	.word	0x40005000
 80038e8:	20005cc0 	.word	0x20005cc0
 80038ec:	40004400 	.word	0x40004400
 80038f0:	20005cc1 	.word	0x20005cc1
 80038f4:	40011000 	.word	0x40011000

080038f8 <Cmd_iou_tec_log_ena>:

int Cmd_iou_tec_log_ena(int argc, char *argv[])
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80038fe:	af00      	add	r7, sp, #0
 8003900:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003904:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003908:	6018      	str	r0, [r3, #0]
 800390a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800390e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003912:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003914:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003918:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	dc01      	bgt.n	8003926 <Cmd_iou_tec_log_ena+0x2e>
 8003922:	2303      	movs	r3, #3
 8003924:	e0a3      	b.n	8003a6e <Cmd_iou_tec_log_ena+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003926:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800392a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b02      	cmp	r3, #2
 8003932:	dd01      	ble.n	8003938 <Cmd_iou_tec_log_ena+0x40>
 8003934:	2302      	movs	r3, #2
 8003936:	e09a      	b.n	8003a6e <Cmd_iou_tec_log_ena+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003938:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800393c:	484e      	ldr	r0, [pc, #312]	@ (8003a78 <Cmd_iou_tec_log_ena+0x180>)
 800393e:	f7fe fd67 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003942:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003946:	484c      	ldr	r0, [pc, #304]	@ (8003a78 <Cmd_iou_tec_log_ena+0x180>)
 8003948:	f7fe fd62 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800394c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003950:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800395a:	3b01      	subs	r3, #1
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003962:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	4413      	add	r3, r2
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003970:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003974:	4a41      	ldr	r2, [pc, #260]	@ (8003a7c <Cmd_iou_tec_log_ena+0x184>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d103      	bne.n	8003982 <Cmd_iou_tec_log_ena+0x8a>
    	uart_choose_uart5 = 1;
 800397a:	4b41      	ldr	r3, [pc, #260]	@ (8003a80 <Cmd_iou_tec_log_ena+0x188>)
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e002      	b.n	8003988 <Cmd_iou_tec_log_ena+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003982:	4b3f      	ldr	r3, [pc, #252]	@ (8003a80 <Cmd_iou_tec_log_ena+0x188>)
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003988:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800398c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a84 <Cmd_iou_tec_log_ena+0x18c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d103      	bne.n	800399a <Cmd_iou_tec_log_ena+0xa2>
    	uart_choose_usart2 = 1;
 8003992:	4b3d      	ldr	r3, [pc, #244]	@ (8003a88 <Cmd_iou_tec_log_ena+0x190>)
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e002      	b.n	80039a0 <Cmd_iou_tec_log_ena+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800399a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a88 <Cmd_iou_tec_log_ena+0x190>)
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_LOG_ENA;
 80039a0:	230b      	movs	r3, #11
 80039a2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80039a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039aa:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80039ae:	2201      	movs	r2, #1
 80039b0:	2105      	movs	r1, #5
 80039b2:	f008 fbcf 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80039b6:	f107 020f 	add.w	r2, r7, #15
 80039ba:	f107 0110 	add.w	r1, r7, #16
 80039be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039c2:	4618      	mov	r0, r3
 80039c4:	f008 fc74 	bl	800c2b0 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80039c8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039cc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d02c      	beq.n	8003a30 <Cmd_iou_tec_log_ena+0x138>
        for (int i = 0; i < frame_len; i++) {
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80039dc:	e010      	b.n	8003a00 <Cmd_iou_tec_log_ena+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80039de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039e2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80039e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80039ea:	4413      	add	r3, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	4619      	mov	r1, r3
 80039f0:	4826      	ldr	r0, [pc, #152]	@ (8003a8c <Cmd_iou_tec_log_ena+0x194>)
 80039f2:	f7fe f9ad 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80039f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80039fa:	3301      	adds	r3, #1
 80039fc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003a00:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a04:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003a10:	4293      	cmp	r3, r2
 8003a12:	dbe4      	blt.n	80039de <Cmd_iou_tec_log_ena+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003a14:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a18:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	f107 0310 	add.w	r3, r7, #16
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fc35 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003a2a:	f7fe fc1b 	bl	8002264 <set_send_flag>
 8003a2e:	e01d      	b.n	8003a6c <Cmd_iou_tec_log_ena+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003a30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a34:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003a38:	2201      	movs	r2, #1
 8003a3a:	2105      	movs	r1, #5
 8003a3c:	f008 fb8a 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003a40:	f107 020f 	add.w	r2, r7, #15
 8003a44:	f107 0110 	add.w	r1, r7, #16
 8003a48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f008 fc2f 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003a52:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a56:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003a5a:	781a      	ldrb	r2, [r3, #0]
 8003a5c:	f107 0310 	add.w	r3, r7, #16
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fc16 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003a68:	f7fe fbfc 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003a6c:	2305      	movs	r3, #5
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40020000 	.word	0x40020000
 8003a7c:	40005000 	.word	0x40005000
 8003a80:	20005cc0 	.word	0x20005cc0
 8003a84:	40004400 	.word	0x40004400
 8003a88:	20005cc1 	.word	0x20005cc1
 8003a8c:	40011000 	.word	0x40011000

08003a90 <Cmd_iou_tec_log_dis>:

int Cmd_iou_tec_log_dis(int argc, char *argv[])
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a9c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003aa0:	6018      	str	r0, [r3, #0]
 8003aa2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003aa6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003aaa:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003aac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ab0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	dc01      	bgt.n	8003abe <Cmd_iou_tec_log_dis+0x2e>
 8003aba:	2303      	movs	r3, #3
 8003abc:	e0a3      	b.n	8003c06 <Cmd_iou_tec_log_dis+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003abe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ac2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	dd01      	ble.n	8003ad0 <Cmd_iou_tec_log_dis+0x40>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e09a      	b.n	8003c06 <Cmd_iou_tec_log_dis+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003ad0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ad4:	484e      	ldr	r0, [pc, #312]	@ (8003c10 <Cmd_iou_tec_log_dis+0x180>)
 8003ad6:	f7fe fc9b 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003ada:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ade:	484c      	ldr	r0, [pc, #304]	@ (8003c10 <Cmd_iou_tec_log_dis+0x180>)
 8003ae0:	f7fe fc96 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003ae4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ae8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003af2:	3b01      	subs	r3, #1
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003afa:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003b08:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003b0c:	4a41      	ldr	r2, [pc, #260]	@ (8003c14 <Cmd_iou_tec_log_dis+0x184>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d103      	bne.n	8003b1a <Cmd_iou_tec_log_dis+0x8a>
    	uart_choose_uart5 = 1;
 8003b12:	4b41      	ldr	r3, [pc, #260]	@ (8003c18 <Cmd_iou_tec_log_dis+0x188>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	701a      	strb	r2, [r3, #0]
 8003b18:	e002      	b.n	8003b20 <Cmd_iou_tec_log_dis+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c18 <Cmd_iou_tec_log_dis+0x188>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003b20:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003b24:	4a3d      	ldr	r2, [pc, #244]	@ (8003c1c <Cmd_iou_tec_log_dis+0x18c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d103      	bne.n	8003b32 <Cmd_iou_tec_log_dis+0xa2>
    	uart_choose_usart2 = 1;
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c20 <Cmd_iou_tec_log_dis+0x190>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	e002      	b.n	8003b38 <Cmd_iou_tec_log_dis+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003b32:	4b3b      	ldr	r3, [pc, #236]	@ (8003c20 <Cmd_iou_tec_log_dis+0x190>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_LOG_DIS;
 8003b38:	230c      	movs	r3, #12
 8003b3a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003b3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b42:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003b46:	2201      	movs	r2, #1
 8003b48:	2105      	movs	r1, #5
 8003b4a:	f008 fb03 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003b4e:	f107 020f 	add.w	r2, r7, #15
 8003b52:	f107 0110 	add.w	r1, r7, #16
 8003b56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f008 fba8 	bl	800c2b0 <frame_encode>

//    SCH_Delay(5);
    if (frame_len > 0) {
 8003b60:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b64:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02c      	beq.n	8003bc8 <Cmd_iou_tec_log_dis+0x138>
        for (int i = 0; i < frame_len; i++) {
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003b74:	e010      	b.n	8003b98 <Cmd_iou_tec_log_dis+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8003b76:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b7a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003b7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003b82:	4413      	add	r3, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	4619      	mov	r1, r3
 8003b88:	4826      	ldr	r0, [pc, #152]	@ (8003c24 <Cmd_iou_tec_log_dis+0x194>)
 8003b8a:	f7fe f8e1 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003b8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003b92:	3301      	adds	r3, #1
 8003b94:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003b98:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b9c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	dbe4      	blt.n	8003b76 <Cmd_iou_tec_log_dis+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003bac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003bb0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	f107 0310 	add.w	r3, r7, #16
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe fb69 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003bc2:	f7fe fb4f 	bl	8002264 <set_send_flag>
 8003bc6:	e01d      	b.n	8003c04 <Cmd_iou_tec_log_dis+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003bc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bcc:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	2105      	movs	r1, #5
 8003bd4:	f008 fabe 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003bd8:	f107 020f 	add.w	r2, r7, #15
 8003bdc:	f107 0110 	add.w	r1, r7, #16
 8003be0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003be4:	4618      	mov	r0, r3
 8003be6:	f008 fb63 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003bea:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003bee:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	f107 0310 	add.w	r3, r7, #16
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fb4a 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003c00:	f7fe fb30 	bl	8002264 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8003c04:	2305      	movs	r3, #5
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40020000 	.word	0x40020000
 8003c14:	40005000 	.word	0x40005000
 8003c18:	20005cc0 	.word	0x20005cc0
 8003c1c:	40004400 	.word	0x40004400
 8003c20:	20005cc1 	.word	0x20005cc1
 8003c24:	40011000 	.word	0x40011000

08003c28 <Cmd_iou_ringled_setRGB>:

int Cmd_iou_ringled_setRGB(int argc, char *argv[])
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003c2e:	af02      	add	r7, sp, #8
 8003c30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c34:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c38:	6018      	str	r0, [r3, #0]
 8003c3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c3e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c42:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 5) return CMDLINE_TOO_FEW_ARGS;
 8003c44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c48:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	dc01      	bgt.n	8003c56 <Cmd_iou_ringled_setRGB+0x2e>
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0f1      	b.n	8003e3a <Cmd_iou_ringled_setRGB+0x212>
    if ((argc-1) > 5) return CMDLINE_TOO_MANY_ARGS;
 8003c56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c5a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b06      	cmp	r3, #6
 8003c62:	dd01      	ble.n	8003c68 <Cmd_iou_ringled_setRGB+0x40>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e0e8      	b.n	8003e3a <Cmd_iou_ringled_setRGB+0x212>
    uint8_t red = atoi(argv[1]);
 8003c68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c6c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3304      	adds	r3, #4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f00b f950 	bl	800ef1c <atoi>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (red > 255)    return CMDLINE_INVALID_ARG;
    uint8_t green = atoi(argv[2]);
 8003c82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c86:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f00b f943 	bl	800ef1c <atoi>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (green > 255)    return CMDLINE_INVALID_ARG;
    uint8_t blue = atoi(argv[3]);
 8003c9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ca0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f00b f936 	bl	800ef1c <atoi>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
    if (blue > 255)    return CMDLINE_INVALID_ARG;
    uint8_t white = atoi(argv[4]);
 8003cb6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003cba:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3310      	adds	r3, #16
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f00b f929 	bl	800ef1c <atoi>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003cd0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003cd4:	485b      	ldr	r0, [pc, #364]	@ (8003e44 <Cmd_iou_ringled_setRGB+0x21c>)
 8003cd6:	f7fe fb9b 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003cda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cde:	4859      	ldr	r0, [pc, #356]	@ (8003e44 <Cmd_iou_ringled_setRGB+0x21c>)
 8003ce0:	f7fe fb96 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003ce4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ce8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003cfa:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	4413      	add	r3, r2
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003d08:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003d0c:	4a4e      	ldr	r2, [pc, #312]	@ (8003e48 <Cmd_iou_ringled_setRGB+0x220>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d103      	bne.n	8003d1a <Cmd_iou_ringled_setRGB+0xf2>
    	uart_choose_uart5 = 1;
 8003d12:	4b4e      	ldr	r3, [pc, #312]	@ (8003e4c <Cmd_iou_ringled_setRGB+0x224>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e002      	b.n	8003d20 <Cmd_iou_ringled_setRGB+0xf8>
    }else{
    	uart_choose_uart5 = 0;
 8003d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e4c <Cmd_iou_ringled_setRGB+0x224>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003d20:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003d24:	4a4a      	ldr	r2, [pc, #296]	@ (8003e50 <Cmd_iou_ringled_setRGB+0x228>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d103      	bne.n	8003d32 <Cmd_iou_ringled_setRGB+0x10a>
    	uart_choose_usart2 = 1;
 8003d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e54 <Cmd_iou_ringled_setRGB+0x22c>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	701a      	strb	r2, [r3, #0]
 8003d30:	e002      	b.n	8003d38 <Cmd_iou_ringled_setRGB+0x110>
    }else{
    	uart_choose_usart2 = 0;
 8003d32:	4b48      	ldr	r3, [pc, #288]	@ (8003e54 <Cmd_iou_ringled_setRGB+0x22c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_RINGLED_SETRGB;
 8003d38:	230d      	movs	r3, #13
 8003d3a:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];

    payload[0]  = red; //low
 8003d3e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003d42:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = green; //low
 8003d46:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003d4a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = blue; //low
 8003d4e:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8003d52:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = white; //low
 8003d56:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8003d5a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003d5e:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003d62:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003d66:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2305      	movs	r3, #5
 8003d72:	2204      	movs	r2, #4
 8003d74:	f008 fa16 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003d78:	f107 020b 	add.w	r2, r7, #11
 8003d7c:	f107 010c 	add.w	r1, r7, #12
 8003d80:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d84:	4618      	mov	r0, r3
 8003d86:	f008 fa93 	bl	800c2b0 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003d8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d8e:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02c      	beq.n	8003df2 <Cmd_iou_ringled_setRGB+0x1ca>
        for (int i = 0; i < frame_len; i++) {
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003d9e:	e010      	b.n	8003dc2 <Cmd_iou_ringled_setRGB+0x19a>
            Uart_write(USART1, encoded_frame[i]);
 8003da0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003da4:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003da8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003dac:	4413      	add	r3, r2
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	4619      	mov	r1, r3
 8003db2:	4829      	ldr	r0, [pc, #164]	@ (8003e58 <Cmd_iou_ringled_setRGB+0x230>)
 8003db4:	f7fd ffcc 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003db8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003dc2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dc6:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	dbe4      	blt.n	8003da0 <Cmd_iou_ringled_setRGB+0x178>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003dd6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dda:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	f107 030c 	add.w	r3, r7, #12
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fa54 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003dec:	f7fe fa3a 	bl	8002264 <set_send_flag>
 8003df0:	e022      	b.n	8003e38 <Cmd_iou_ringled_setRGB+0x210>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003df2:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003df6:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003dfa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	2301      	movs	r3, #1
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2305      	movs	r3, #5
 8003e06:	2204      	movs	r2, #4
 8003e08:	f008 f9cc 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003e0c:	f107 020b 	add.w	r2, r7, #11
 8003e10:	f107 010c 	add.w	r1, r7, #12
 8003e14:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f008 fa49 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003e1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e22:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	f107 030c 	add.w	r3, r7, #12
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe fa30 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003e34:	f7fe fa16 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003e38:	2305      	movs	r3, #5
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40020000 	.word	0x40020000
 8003e48:	40005000 	.word	0x40005000
 8003e4c:	20005cc0 	.word	0x20005cc0
 8003e50:	40004400 	.word	0x40004400
 8003e54:	20005cc1 	.word	0x20005cc1
 8003e58:	40011000 	.word	0x40011000

08003e5c <Cmd_iou_ringled_getRGB>:

int Cmd_iou_ringled_getRGB(int argc, char *argv[])
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e68:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e6c:	6018      	str	r0, [r3, #0]
 8003e6e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e72:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003e76:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003e78:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e7c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	dc01      	bgt.n	8003e8a <Cmd_iou_ringled_getRGB+0x2e>
 8003e86:	2303      	movs	r3, #3
 8003e88:	e0a3      	b.n	8003fd2 <Cmd_iou_ringled_getRGB+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003e8a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e8e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	dd01      	ble.n	8003e9c <Cmd_iou_ringled_getRGB+0x40>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e09a      	b.n	8003fd2 <Cmd_iou_ringled_getRGB+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003e9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ea0:	484e      	ldr	r0, [pc, #312]	@ (8003fdc <Cmd_iou_ringled_getRGB+0x180>)
 8003ea2:	f7fe fab5 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003ea6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003eaa:	484c      	ldr	r0, [pc, #304]	@ (8003fdc <Cmd_iou_ringled_getRGB+0x180>)
 8003eac:	f7fe fab0 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003eb0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003eb4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003ec6:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	4413      	add	r3, r2
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003ed4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ed8:	4a41      	ldr	r2, [pc, #260]	@ (8003fe0 <Cmd_iou_ringled_getRGB+0x184>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d103      	bne.n	8003ee6 <Cmd_iou_ringled_getRGB+0x8a>
    	uart_choose_uart5 = 1;
 8003ede:	4b41      	ldr	r3, [pc, #260]	@ (8003fe4 <Cmd_iou_ringled_getRGB+0x188>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e002      	b.n	8003eec <Cmd_iou_ringled_getRGB+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe4 <Cmd_iou_ringled_getRGB+0x188>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003eec:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ef0:	4a3d      	ldr	r2, [pc, #244]	@ (8003fe8 <Cmd_iou_ringled_getRGB+0x18c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d103      	bne.n	8003efe <Cmd_iou_ringled_getRGB+0xa2>
    	uart_choose_usart2 = 1;
 8003ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fec <Cmd_iou_ringled_getRGB+0x190>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e002      	b.n	8003f04 <Cmd_iou_ringled_getRGB+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003efe:	4b3b      	ldr	r3, [pc, #236]	@ (8003fec <Cmd_iou_ringled_getRGB+0x190>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_RINGLED_GETRGB;
 8003f04:	230e      	movs	r3, #14
 8003f06:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003f0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f0e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003f12:	2201      	movs	r2, #1
 8003f14:	2105      	movs	r1, #5
 8003f16:	f008 f91d 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003f1a:	f107 020f 	add.w	r2, r7, #15
 8003f1e:	f107 0110 	add.w	r1, r7, #16
 8003f22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f26:	4618      	mov	r0, r3
 8003f28:	f008 f9c2 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 8003f2c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f30:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d02c      	beq.n	8003f94 <Cmd_iou_ringled_getRGB+0x138>
        for (int i = 0; i < frame_len; i++) {
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003f40:	e010      	b.n	8003f64 <Cmd_iou_ringled_getRGB+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8003f42:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f46:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003f4a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f4e:	4413      	add	r3, r2
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	4826      	ldr	r0, [pc, #152]	@ (8003ff0 <Cmd_iou_ringled_getRGB+0x194>)
 8003f56:	f7fd fefb 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003f5a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f5e:	3301      	adds	r3, #1
 8003f60:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003f64:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f68:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f74:	4293      	cmp	r3, r2
 8003f76:	dbe4      	blt.n	8003f42 <Cmd_iou_ringled_getRGB+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003f78:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f7c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	f107 0310 	add.w	r3, r7, #16
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe f983 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003f8e:	f7fe f969 	bl	8002264 <set_send_flag>
 8003f92:	e01d      	b.n	8003fd0 <Cmd_iou_ringled_getRGB+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003f94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f98:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	2105      	movs	r1, #5
 8003fa0:	f008 f8d8 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003fa4:	f107 020f 	add.w	r2, r7, #15
 8003fa8:	f107 0110 	add.w	r1, r7, #16
 8003fac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f008 f97d 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003fb6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003fba:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	f107 0310 	add.w	r3, r7, #16
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe f964 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8003fcc:	f7fe f94a 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003fd0:	2305      	movs	r3, #5
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40020000 	.word	0x40020000
 8003fe0:	40005000 	.word	0x40005000
 8003fe4:	20005cc0 	.word	0x20005cc0
 8003fe8:	40004400 	.word	0x40004400
 8003fec:	20005cc1 	.word	0x20005cc1
 8003ff0:	40011000 	.word	0x40011000

08003ff4 <Cmd_iou_irled_set_bright>:

int Cmd_iou_irled_set_bright(int argc, char *argv[])
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003ffa:	af02      	add	r7, sp, #8
 8003ffc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004000:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004004:	6018      	str	r0, [r3, #0]
 8004006:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800400a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800400e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004010:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004014:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b02      	cmp	r3, #2
 800401c:	dc01      	bgt.n	8004022 <Cmd_iou_irled_set_bright+0x2e>
 800401e:	2303      	movs	r3, #3
 8004020:	e0c4      	b.n	80041ac <Cmd_iou_irled_set_bright+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004022:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004026:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b03      	cmp	r3, #3
 800402e:	dd01      	ble.n	8004034 <Cmd_iou_irled_set_bright+0x40>
 8004030:	2302      	movs	r3, #2
 8004032:	e0bb      	b.n	80041ac <Cmd_iou_irled_set_bright+0x1b8>
    uint8_t percent = atoi(argv[1]);
 8004034:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004038:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3304      	adds	r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f00a ff6a 	bl	800ef1c <atoi>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (percent > 100)    return CMDLINE_INVALID_ARG;
 800404e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004052:	2b64      	cmp	r3, #100	@ 0x64
 8004054:	d901      	bls.n	800405a <Cmd_iou_irled_set_bright+0x66>
 8004056:	2304      	movs	r3, #4
 8004058:	e0a8      	b.n	80041ac <Cmd_iou_irled_set_bright+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800405a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800405e:	4856      	ldr	r0, [pc, #344]	@ (80041b8 <Cmd_iou_irled_set_bright+0x1c4>)
 8004060:	f7fe f9d6 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004064:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004068:	4853      	ldr	r0, [pc, #332]	@ (80041b8 <Cmd_iou_irled_set_bright+0x1c4>)
 800406a:	f7fe f9d1 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800406e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004072:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800407c:	3b01      	subs	r3, #1
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004084:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	4413      	add	r3, r2
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004092:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004096:	4a49      	ldr	r2, [pc, #292]	@ (80041bc <Cmd_iou_irled_set_bright+0x1c8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d103      	bne.n	80040a4 <Cmd_iou_irled_set_bright+0xb0>
    	uart_choose_uart5 = 1;
 800409c:	4b48      	ldr	r3, [pc, #288]	@ (80041c0 <Cmd_iou_irled_set_bright+0x1cc>)
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e002      	b.n	80040aa <Cmd_iou_irled_set_bright+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 80040a4:	4b46      	ldr	r3, [pc, #280]	@ (80041c0 <Cmd_iou_irled_set_bright+0x1cc>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80040aa:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80040ae:	4a45      	ldr	r2, [pc, #276]	@ (80041c4 <Cmd_iou_irled_set_bright+0x1d0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d103      	bne.n	80040bc <Cmd_iou_irled_set_bright+0xc8>
    	uart_choose_usart2 = 1;
 80040b4:	4b44      	ldr	r3, [pc, #272]	@ (80041c8 <Cmd_iou_irled_set_bright+0x1d4>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e002      	b.n	80040c2 <Cmd_iou_irled_set_bright+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80040bc:	4b42      	ldr	r3, [pc, #264]	@ (80041c8 <Cmd_iou_irled_set_bright+0x1d4>)
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_IRLED_SET_BRIGHT;
 80040c2:	230f      	movs	r3, #15
 80040c4:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];

    payload[0]  = percent; //low
 80040c8:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80040cc:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80040d0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80040d4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80040d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	2301      	movs	r3, #1
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	2305      	movs	r3, #5
 80040e4:	2201      	movs	r2, #1
 80040e6:	f008 f85d 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80040ea:	f107 020f 	add.w	r2, r7, #15
 80040ee:	f107 0110 	add.w	r1, r7, #16
 80040f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040f6:	4618      	mov	r0, r3
 80040f8:	f008 f8da 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 80040fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004100:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d02c      	beq.n	8004164 <Cmd_iou_irled_set_bright+0x170>
        for (int i = 0; i < frame_len; i++) {
 800410a:	2300      	movs	r3, #0
 800410c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004110:	e010      	b.n	8004134 <Cmd_iou_irled_set_bright+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8004112:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004116:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800411a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800411e:	4413      	add	r3, r2
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	4619      	mov	r1, r3
 8004124:	4829      	ldr	r0, [pc, #164]	@ (80041cc <Cmd_iou_irled_set_bright+0x1d8>)
 8004126:	f7fd fe13 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800412a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800412e:	3301      	adds	r3, #1
 8004130:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004134:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004138:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004144:	4293      	cmp	r3, r2
 8004146:	dbe4      	blt.n	8004112 <Cmd_iou_irled_set_bright+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8004148:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800414c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	f107 0310 	add.w	r3, r7, #16
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe f89b 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800415e:	f7fe f881 	bl	8002264 <set_send_flag>
 8004162:	e022      	b.n	80041aa <Cmd_iou_irled_set_bright+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004164:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004168:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800416c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	2301      	movs	r3, #1
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	2305      	movs	r3, #5
 8004178:	2201      	movs	r2, #1
 800417a:	f008 f813 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800417e:	f107 020f 	add.w	r2, r7, #15
 8004182:	f107 0110 	add.w	r1, r7, #16
 8004186:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800418a:	4618      	mov	r0, r3
 800418c:	f008 f890 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004190:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004194:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	f107 0310 	add.w	r3, r7, #16
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe f877 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80041a6:	f7fe f85d 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80041aa:	2305      	movs	r3, #5
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40020000 	.word	0x40020000
 80041bc:	40005000 	.word	0x40005000
 80041c0:	20005cc0 	.word	0x20005cc0
 80041c4:	40004400 	.word	0x40004400
 80041c8:	20005cc1 	.word	0x20005cc1
 80041cc:	40011000 	.word	0x40011000

080041d0 <Cmd_iou_irled_get_bright>:

int Cmd_iou_irled_get_bright(int argc, char *argv[])
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041dc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041e0:	6018      	str	r0, [r3, #0]
 80041e2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041e6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80041ea:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80041ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041f0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	dc01      	bgt.n	80041fe <Cmd_iou_irled_get_bright+0x2e>
 80041fa:	2303      	movs	r3, #3
 80041fc:	e0a3      	b.n	8004346 <Cmd_iou_irled_get_bright+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80041fe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004202:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b02      	cmp	r3, #2
 800420a:	dd01      	ble.n	8004210 <Cmd_iou_irled_get_bright+0x40>
 800420c:	2302      	movs	r3, #2
 800420e:	e09a      	b.n	8004346 <Cmd_iou_irled_get_bright+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004210:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004214:	484e      	ldr	r0, [pc, #312]	@ (8004350 <Cmd_iou_irled_get_bright+0x180>)
 8004216:	f7fe f8fb 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800421a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800421e:	484c      	ldr	r0, [pc, #304]	@ (8004350 <Cmd_iou_irled_get_bright+0x180>)
 8004220:	f7fe f8f6 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004224:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004228:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004232:	3b01      	subs	r3, #1
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800423a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	4413      	add	r3, r2
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004248:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800424c:	4a41      	ldr	r2, [pc, #260]	@ (8004354 <Cmd_iou_irled_get_bright+0x184>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d103      	bne.n	800425a <Cmd_iou_irled_get_bright+0x8a>
    	uart_choose_uart5 = 1;
 8004252:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <Cmd_iou_irled_get_bright+0x188>)
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	e002      	b.n	8004260 <Cmd_iou_irled_get_bright+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800425a:	4b3f      	ldr	r3, [pc, #252]	@ (8004358 <Cmd_iou_irled_get_bright+0x188>)
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004260:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004264:	4a3d      	ldr	r2, [pc, #244]	@ (800435c <Cmd_iou_irled_get_bright+0x18c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d103      	bne.n	8004272 <Cmd_iou_irled_get_bright+0xa2>
    	uart_choose_usart2 = 1;
 800426a:	4b3d      	ldr	r3, [pc, #244]	@ (8004360 <Cmd_iou_irled_get_bright+0x190>)
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e002      	b.n	8004278 <Cmd_iou_irled_get_bright+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8004272:	4b3b      	ldr	r3, [pc, #236]	@ (8004360 <Cmd_iou_irled_get_bright+0x190>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_IRLED_GET_BRIGHT;
 8004278:	2310      	movs	r3, #16
 800427a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800427e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004282:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004286:	2201      	movs	r2, #1
 8004288:	2105      	movs	r1, #5
 800428a:	f007 ff63 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800428e:	f107 020f 	add.w	r2, r7, #15
 8004292:	f107 0110 	add.w	r1, r7, #16
 8004296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800429a:	4618      	mov	r0, r3
 800429c:	f008 f808 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 80042a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042a4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d02c      	beq.n	8004308 <Cmd_iou_irled_get_bright+0x138>
        for (int i = 0; i < frame_len; i++) {
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80042b4:	e010      	b.n	80042d8 <Cmd_iou_irled_get_bright+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80042b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042ba:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80042be:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80042c2:	4413      	add	r3, r2
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	4619      	mov	r1, r3
 80042c8:	4826      	ldr	r0, [pc, #152]	@ (8004364 <Cmd_iou_irled_get_bright+0x194>)
 80042ca:	f7fd fd41 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80042ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80042d2:	3301      	adds	r3, #1
 80042d4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80042d8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042dc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80042e8:	4293      	cmp	r3, r2
 80042ea:	dbe4      	blt.n	80042b6 <Cmd_iou_irled_get_bright+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80042ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042f0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	f107 0310 	add.w	r3, r7, #16
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd ffc9 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004302:	f7fd ffaf 	bl	8002264 <set_send_flag>
 8004306:	e01d      	b.n	8004344 <Cmd_iou_irled_get_bright+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004308:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800430c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004310:	2201      	movs	r2, #1
 8004312:	2105      	movs	r1, #5
 8004314:	f007 ff1e 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004318:	f107 020f 	add.w	r2, r7, #15
 800431c:	f107 0110 	add.w	r1, r7, #16
 8004320:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004324:	4618      	mov	r0, r3
 8004326:	f007 ffc3 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800432a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800432e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	f107 0310 	add.w	r3, r7, #16
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd ffaa 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004340:	f7fd ff90 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004344:	2305      	movs	r3, #5
}
 8004346:	4618      	mov	r0, r3
 8004348:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40020000 	.word	0x40020000
 8004354:	40005000 	.word	0x40005000
 8004358:	20005cc0 	.word	0x20005cc0
 800435c:	40004400 	.word	0x40004400
 8004360:	20005cc1 	.word	0x20005cc1
 8004364:	40011000 	.word	0x40011000

08004368 <Cmd_iou_get_accel>:



int Cmd_iou_get_accel(int argc, char *argv[])
{
 8004368:	b580      	push	{r7, lr}
 800436a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800436e:	af00      	add	r7, sp, #0
 8004370:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004374:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004378:	6018      	str	r0, [r3, #0]
 800437a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800437e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004382:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8004384:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004388:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	dc01      	bgt.n	8004396 <Cmd_iou_get_accel+0x2e>
 8004392:	2303      	movs	r3, #3
 8004394:	e0a3      	b.n	80044de <Cmd_iou_get_accel+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8004396:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800439a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	dd01      	ble.n	80043a8 <Cmd_iou_get_accel+0x40>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e09a      	b.n	80044de <Cmd_iou_get_accel+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80043a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043ac:	484e      	ldr	r0, [pc, #312]	@ (80044e8 <Cmd_iou_get_accel+0x180>)
 80043ae:	f7fe f82f 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80043b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043b6:	484c      	ldr	r0, [pc, #304]	@ (80044e8 <Cmd_iou_get_accel+0x180>)
 80043b8:	f7fe f82a 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80043bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80043c0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043ca:	3b01      	subs	r3, #1
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80043d2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80043e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80043e4:	4a41      	ldr	r2, [pc, #260]	@ (80044ec <Cmd_iou_get_accel+0x184>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d103      	bne.n	80043f2 <Cmd_iou_get_accel+0x8a>
    	uart_choose_uart5 = 1;
 80043ea:	4b41      	ldr	r3, [pc, #260]	@ (80044f0 <Cmd_iou_get_accel+0x188>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e002      	b.n	80043f8 <Cmd_iou_get_accel+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80043f2:	4b3f      	ldr	r3, [pc, #252]	@ (80044f0 <Cmd_iou_get_accel+0x188>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80043f8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80043fc:	4a3d      	ldr	r2, [pc, #244]	@ (80044f4 <Cmd_iou_get_accel+0x18c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d103      	bne.n	800440a <Cmd_iou_get_accel+0xa2>
    	uart_choose_usart2 = 1;
 8004402:	4b3d      	ldr	r3, [pc, #244]	@ (80044f8 <Cmd_iou_get_accel+0x190>)
 8004404:	2201      	movs	r2, #1
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e002      	b.n	8004410 <Cmd_iou_get_accel+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800440a:	4b3b      	ldr	r3, [pc, #236]	@ (80044f8 <Cmd_iou_get_accel+0x190>)
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_ACCEL_GYRO;
 8004410:	2311      	movs	r3, #17
 8004412:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800441a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800441e:	2201      	movs	r2, #1
 8004420:	2105      	movs	r1, #5
 8004422:	f007 fe97 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004426:	f107 020f 	add.w	r2, r7, #15
 800442a:	f107 0110 	add.w	r1, r7, #16
 800442e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004432:	4618      	mov	r0, r3
 8004434:	f007 ff3c 	bl	800c2b0 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8004438:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800443c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02c      	beq.n	80044a0 <Cmd_iou_get_accel+0x138>
        for (int i = 0; i < frame_len; i++) {
 8004446:	2300      	movs	r3, #0
 8004448:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800444c:	e010      	b.n	8004470 <Cmd_iou_get_accel+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800444e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004452:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8004456:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800445a:	4413      	add	r3, r2
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	4619      	mov	r1, r3
 8004460:	4826      	ldr	r0, [pc, #152]	@ (80044fc <Cmd_iou_get_accel+0x194>)
 8004462:	f7fd fc75 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004466:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800446a:	3301      	adds	r3, #1
 800446c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004470:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004474:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004480:	4293      	cmp	r3, r2
 8004482:	dbe4      	blt.n	800444e <Cmd_iou_get_accel+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8004484:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004488:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	f107 0310 	add.w	r3, r7, #16
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f7fd fefd 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800449a:	f7fd fee3 	bl	8002264 <set_send_flag>
 800449e:	e01d      	b.n	80044dc <Cmd_iou_get_accel+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80044a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80044a4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80044a8:	2201      	movs	r2, #1
 80044aa:	2105      	movs	r1, #5
 80044ac:	f007 fe52 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80044b0:	f107 020f 	add.w	r2, r7, #15
 80044b4:	f107 0110 	add.w	r1, r7, #16
 80044b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80044bc:	4618      	mov	r0, r3
 80044be:	f007 fef7 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80044c2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80044c6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80044ca:	781a      	ldrb	r2, [r3, #0]
 80044cc:	f107 0310 	add.w	r3, r7, #16
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd fede 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80044d8:	f7fd fec4 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80044dc:	2305      	movs	r3, #5
}
 80044de:	4618      	mov	r0, r3
 80044e0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40020000 	.word	0x40020000
 80044ec:	40005000 	.word	0x40005000
 80044f0:	20005cc0 	.word	0x20005cc0
 80044f4:	40004400 	.word	0x40004400
 80044f8:	20005cc1 	.word	0x20005cc1
 80044fc:	40011000 	.word	0x40011000

08004500 <Cmd_iou_get_press>:

int Cmd_iou_get_press(int argc, char *argv[])
{
 8004500:	b580      	push	{r7, lr}
 8004502:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8004506:	af00      	add	r7, sp, #0
 8004508:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800450c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004510:	6018      	str	r0, [r3, #0]
 8004512:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004516:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800451a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800451c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004520:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	dc01      	bgt.n	800452e <Cmd_iou_get_press+0x2e>
 800452a:	2303      	movs	r3, #3
 800452c:	e0a3      	b.n	8004676 <Cmd_iou_get_press+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800452e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004532:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b02      	cmp	r3, #2
 800453a:	dd01      	ble.n	8004540 <Cmd_iou_get_press+0x40>
 800453c:	2302      	movs	r3, #2
 800453e:	e09a      	b.n	8004676 <Cmd_iou_get_press+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004540:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004544:	484e      	ldr	r0, [pc, #312]	@ (8004680 <Cmd_iou_get_press+0x180>)
 8004546:	f7fd ff63 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800454a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800454e:	484c      	ldr	r0, [pc, #304]	@ (8004680 <Cmd_iou_get_press+0x180>)
 8004550:	f7fd ff5e 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004554:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004558:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004562:	3b01      	subs	r3, #1
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800456a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	4413      	add	r3, r2
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004578:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800457c:	4a41      	ldr	r2, [pc, #260]	@ (8004684 <Cmd_iou_get_press+0x184>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d103      	bne.n	800458a <Cmd_iou_get_press+0x8a>
    	uart_choose_uart5 = 1;
 8004582:	4b41      	ldr	r3, [pc, #260]	@ (8004688 <Cmd_iou_get_press+0x188>)
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	e002      	b.n	8004590 <Cmd_iou_get_press+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800458a:	4b3f      	ldr	r3, [pc, #252]	@ (8004688 <Cmd_iou_get_press+0x188>)
 800458c:	2200      	movs	r2, #0
 800458e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004590:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004594:	4a3d      	ldr	r2, [pc, #244]	@ (800468c <Cmd_iou_get_press+0x18c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d103      	bne.n	80045a2 <Cmd_iou_get_press+0xa2>
    	uart_choose_usart2 = 1;
 800459a:	4b3d      	ldr	r3, [pc, #244]	@ (8004690 <Cmd_iou_get_press+0x190>)
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
 80045a0:	e002      	b.n	80045a8 <Cmd_iou_get_press+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80045a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004690 <Cmd_iou_get_press+0x190>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_PRESS;
 80045a8:	2312      	movs	r3, #18
 80045aa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80045ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045b2:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80045b6:	2201      	movs	r2, #1
 80045b8:	2105      	movs	r1, #5
 80045ba:	f007 fdcb 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80045be:	f107 020f 	add.w	r2, r7, #15
 80045c2:	f107 0110 	add.w	r1, r7, #16
 80045c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045ca:	4618      	mov	r0, r3
 80045cc:	f007 fe70 	bl	800c2b0 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 80045d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80045d4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02c      	beq.n	8004638 <Cmd_iou_get_press+0x138>
        for (int i = 0; i < frame_len; i++) {
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80045e4:	e010      	b.n	8004608 <Cmd_iou_get_press+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80045e6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80045ea:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80045ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80045f2:	4413      	add	r3, r2
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	4619      	mov	r1, r3
 80045f8:	4826      	ldr	r0, [pc, #152]	@ (8004694 <Cmd_iou_get_press+0x194>)
 80045fa:	f7fd fba9 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80045fe:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004602:	3301      	adds	r3, #1
 8004604:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004608:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800460c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004618:	4293      	cmp	r3, r2
 800461a:	dbe4      	blt.n	80045e6 <Cmd_iou_get_press+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800461c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004620:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	f107 0310 	add.w	r3, r7, #16
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f7fd fe31 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004632:	f7fd fe17 	bl	8002264 <set_send_flag>
 8004636:	e01d      	b.n	8004674 <Cmd_iou_get_press+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004638:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800463c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004640:	2201      	movs	r2, #1
 8004642:	2105      	movs	r1, #5
 8004644:	f007 fd86 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004648:	f107 020f 	add.w	r2, r7, #15
 800464c:	f107 0110 	add.w	r1, r7, #16
 8004650:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004654:	4618      	mov	r0, r3
 8004656:	f007 fe2b 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800465a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800465e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	f107 0310 	add.w	r3, r7, #16
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f7fd fe12 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004670:	f7fd fdf8 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004674:	2305      	movs	r3, #5
}
 8004676:	4618      	mov	r0, r3
 8004678:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40020000 	.word	0x40020000
 8004684:	40005000 	.word	0x40005000
 8004688:	20005cc0 	.word	0x20005cc0
 800468c:	40004400 	.word	0x40004400
 8004690:	20005cc1 	.word	0x20005cc1
 8004694:	40011000 	.word	0x40011000

08004698 <Cmd_iou_get_parameters>:


int Cmd_iou_get_parameters(int argc, char *argv[])
{
 8004698:	b580      	push	{r7, lr}
 800469a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800469e:	af00      	add	r7, sp, #0
 80046a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046a4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046a8:	6018      	str	r0, [r3, #0]
 80046aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046ae:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80046b2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80046b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046b8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	dc01      	bgt.n	80046c6 <Cmd_iou_get_parameters+0x2e>
 80046c2:	2303      	movs	r3, #3
 80046c4:	e0a3      	b.n	800480e <Cmd_iou_get_parameters+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80046c6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046ca:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	dd01      	ble.n	80046d8 <Cmd_iou_get_parameters+0x40>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e09a      	b.n	800480e <Cmd_iou_get_parameters+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80046d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80046dc:	484e      	ldr	r0, [pc, #312]	@ (8004818 <Cmd_iou_get_parameters+0x180>)
 80046de:	f7fd fe97 	bl	8002410 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80046e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046e6:	484c      	ldr	r0, [pc, #304]	@ (8004818 <Cmd_iou_get_parameters+0x180>)
 80046e8:	f7fd fe92 	bl	8002410 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80046ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046f0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046fa:	3b01      	subs	r3, #1
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004702:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	4413      	add	r3, r2
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004710:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004714:	4a41      	ldr	r2, [pc, #260]	@ (800481c <Cmd_iou_get_parameters+0x184>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d103      	bne.n	8004722 <Cmd_iou_get_parameters+0x8a>
    	uart_choose_uart5 = 1;
 800471a:	4b41      	ldr	r3, [pc, #260]	@ (8004820 <Cmd_iou_get_parameters+0x188>)
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	e002      	b.n	8004728 <Cmd_iou_get_parameters+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004722:	4b3f      	ldr	r3, [pc, #252]	@ (8004820 <Cmd_iou_get_parameters+0x188>)
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004728:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800472c:	4a3d      	ldr	r2, [pc, #244]	@ (8004824 <Cmd_iou_get_parameters+0x18c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d103      	bne.n	800473a <Cmd_iou_get_parameters+0xa2>
    	uart_choose_usart2 = 1;
 8004732:	4b3d      	ldr	r3, [pc, #244]	@ (8004828 <Cmd_iou_get_parameters+0x190>)
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e002      	b.n	8004740 <Cmd_iou_get_parameters+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800473a:	4b3b      	ldr	r3, [pc, #236]	@ (8004828 <Cmd_iou_get_parameters+0x190>)
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_PARAMETERS;
 8004740:	2313      	movs	r3, #19
 8004742:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004746:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800474a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800474e:	2201      	movs	r2, #1
 8004750:	2105      	movs	r1, #5
 8004752:	f007 fcff 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004756:	f107 020f 	add.w	r2, r7, #15
 800475a:	f107 0110 	add.w	r1, r7, #16
 800475e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004762:	4618      	mov	r0, r3
 8004764:	f007 fda4 	bl	800c2b0 <frame_encode>

  //  SCH_Delay(5);.
    if (frame_len > 0) {
 8004768:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800476c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d02c      	beq.n	80047d0 <Cmd_iou_get_parameters+0x138>
        for (int i = 0; i < frame_len; i++) {
 8004776:	2300      	movs	r3, #0
 8004778:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800477c:	e010      	b.n	80047a0 <Cmd_iou_get_parameters+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800477e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004782:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8004786:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800478a:	4413      	add	r3, r2
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	4826      	ldr	r0, [pc, #152]	@ (800482c <Cmd_iou_get_parameters+0x194>)
 8004792:	f7fd fadd 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004796:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800479a:	3301      	adds	r3, #1
 800479c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80047a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80047a4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80047b0:	4293      	cmp	r3, r2
 80047b2:	dbe4      	blt.n	800477e <Cmd_iou_get_parameters+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80047b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80047b8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80047bc:	781a      	ldrb	r2, [r3, #0]
 80047be:	f107 0310 	add.w	r3, r7, #16
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fd fd65 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80047ca:	f7fd fd4b 	bl	8002264 <set_send_flag>
 80047ce:	e01d      	b.n	800480c <Cmd_iou_get_parameters+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80047d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047d4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80047d8:	2201      	movs	r2, #1
 80047da:	2105      	movs	r1, #5
 80047dc:	f007 fcba 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80047e0:	f107 020f 	add.w	r2, r7, #15
 80047e4:	f107 0110 	add.w	r1, r7, #16
 80047e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047ec:	4618      	mov	r0, r3
 80047ee:	f007 fd5f 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80047f2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80047f6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80047fa:	781a      	ldrb	r2, [r3, #0]
 80047fc:	f107 0310 	add.w	r3, r7, #16
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f7fd fd46 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004808:	f7fd fd2c 	bl	8002264 <set_send_flag>

    }

    return CMDLINE_PENDING;
 800480c:	2305      	movs	r3, #5
}
 800480e:	4618      	mov	r0, r3
 8004810:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40020000 	.word	0x40020000
 800481c:	40005000 	.word	0x40005000
 8004820:	20005cc0 	.word	0x20005cc0
 8004824:	40004400 	.word	0x40004400
 8004828:	20005cc1 	.word	0x20005cc1
 800482c:	40011000 	.word	0x40011000

08004830 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	041a      	lsls	r2, r3, #16
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	619a      	str	r2, [r3, #24]
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <PDU_create_task>:
};



void PDU_create_task(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PDU_task_context.taskHandle, &PDU_task_context.taskProperty);
 8004854:	4906      	ldr	r1, [pc, #24]	@ (8004870 <PDU_create_task+0x20>)
 8004856:	4807      	ldr	r0, [pc, #28]	@ (8004874 <PDU_create_task+0x24>)
 8004858:	f007 faf8 	bl	800be4c <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 800485c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004860:	2006      	movs	r0, #6
 8004862:	f007 fac7 	bl	800bdf4 <SCH_TIM_Start>
    Ringbuf_init();
 8004866:	f7fd f8c9 	bl	80019fc <Ringbuf_init>
}
 800486a:	bf00      	nop
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	200000f4 	.word	0x200000f4
 8004874:	200000f0 	.word	0x200000f0

08004878 <PDU_update_task>:


volatile uint8_t timeout_counter_pdu = 0;

void PDU_update_task(void) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 800487e:	4b41      	ldr	r3, [pc, #260]	@ (8004984 <PDU_update_task+0x10c>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d079      	beq.n	800497c <PDU_update_task+0x104>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PDU))
 8004888:	2006      	movs	r0, #6
 800488a:	f007 fac9 	bl	800be20 <SCH_TIM_HasCompleted>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d073      	beq.n	800497c <PDU_update_task+0x104>
		{

			if(!sendFlag){
 8004894:	4b3c      	ldr	r3, [pc, #240]	@ (8004988 <PDU_update_task+0x110>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d16e      	bne.n	800497c <PDU_update_task+0x104>
				if(!send_rs422){
 800489e:	4b3b      	ldr	r3, [pc, #236]	@ (800498c <PDU_update_task+0x114>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d130      	bne.n	800490a <PDU_update_task+0x92>
					if(receive_iouFlag&&receive_pmuFlag){
 80048a8:	4b39      	ldr	r3, [pc, #228]	@ (8004990 <PDU_update_task+0x118>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d02b      	beq.n	800490a <PDU_update_task+0x92>
 80048b2:	4b38      	ldr	r3, [pc, #224]	@ (8004994 <PDU_update_task+0x11c>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d026      	beq.n	800490a <PDU_update_task+0x92>
						switch_board(0);
 80048bc:	2000      	movs	r0, #0
 80048be:	f003 f9a3 	bl	8007c08 <switch_board>
						Uart_flush(USART1);
 80048c2:	4835      	ldr	r0, [pc, #212]	@ (8004998 <PDU_update_task+0x120>)
 80048c4:	f7fd fbb0 	bl	8002028 <Uart_flush>

						frame = pdu_frame;
 80048c8:	4b34      	ldr	r3, [pc, #208]	@ (800499c <PDU_update_task+0x124>)
 80048ca:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(pdu_frame);
 80048cc:	2309      	movs	r3, #9
 80048ce:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e00a      	b.n	80048ec <PDU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4413      	add	r3, r2
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	4619      	mov	r1, r3
 80048e0:	482d      	ldr	r0, [pc, #180]	@ (8004998 <PDU_update_task+0x120>)
 80048e2:	f7fd fa35 	bl	8001d50 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	dbf0      	blt.n	80048d6 <PDU_update_task+0x5e>
						}
						receive_pduFlag = 0;
 80048f4:	4b2a      	ldr	r3, [pc, #168]	@ (80049a0 <PDU_update_task+0x128>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80048fa:	4b24      	ldr	r3, [pc, #144]	@ (800498c <PDU_update_task+0x114>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 8004900:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004904:	2006      	movs	r0, #6
 8004906:	f007 fa75 	bl	800bdf4 <SCH_TIM_Start>
					}
				}
				if(!receive_pduFlag){
 800490a:	4b25      	ldr	r3, [pc, #148]	@ (80049a0 <PDU_update_task+0x128>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d133      	bne.n	800497c <PDU_update_task+0x104>
					timeout_counter_pdu++;
 8004914:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <PDU_update_task+0x12c>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	3301      	adds	r3, #1
 800491c:	b2da      	uxtb	r2, r3
 800491e:	4b21      	ldr	r3, [pc, #132]	@ (80049a4 <PDU_update_task+0x12c>)
 8004920:	701a      	strb	r2, [r3, #0]
					if (timeout_counter_pdu > 2){
 8004922:	4b20      	ldr	r3, [pc, #128]	@ (80049a4 <PDU_update_task+0x12c>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d927      	bls.n	800497c <PDU_update_task+0x104>
						disconnect_counter_pdu++;
 800492c:	4b1e      	ldr	r3, [pc, #120]	@ (80049a8 <PDU_update_task+0x130>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	3301      	adds	r3, #1
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4b1c      	ldr	r3, [pc, #112]	@ (80049a8 <PDU_update_task+0x130>)
 8004938:	701a      	strb	r2, [r3, #0]
						timeout_counter_pdu = 0;
 800493a:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <PDU_update_task+0x12c>)
 800493c:	2200      	movs	r2, #0
 800493e:	701a      	strb	r2, [r3, #0]
						receive_pduFlag = 1;
 8004940:	4b17      	ldr	r3, [pc, #92]	@ (80049a0 <PDU_update_task+0x128>)
 8004942:	2201      	movs	r2, #1
 8004944:	701a      	strb	r2, [r3, #0]
						send_rs422 = 0;
 8004946:	4b11      	ldr	r3, [pc, #68]	@ (800498c <PDU_update_task+0x114>)
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
						if(disconnect_counter_pdu > 4){
 800494c:	4b16      	ldr	r3, [pc, #88]	@ (80049a8 <PDU_update_task+0x130>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b04      	cmp	r3, #4
 8004954:	d912      	bls.n	800497c <PDU_update_task+0x104>
							disconnect_counter_pdu = 5;
 8004956:	4b14      	ldr	r3, [pc, #80]	@ (80049a8 <PDU_update_task+0x130>)
 8004958:	2205      	movs	r2, #5
 800495a:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 54; i++) {
 800495c:	2301      	movs	r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	e009      	b.n	8004976 <PDU_update_task+0xfe>
									nextBuffer[i + 42] = 0xFF; //43   pay1    + 44  pay2        96-<54
 8004962:	4b12      	ldr	r3, [pc, #72]	@ (80049ac <PDU_update_task+0x134>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	332a      	adds	r3, #42	@ 0x2a
 800496a:	4413      	add	r3, r2
 800496c:	22ff      	movs	r2, #255	@ 0xff
 800496e:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 54; i++) {
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	3301      	adds	r3, #1
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b36      	cmp	r3, #54	@ 0x36
 800497a:	ddf2      	ble.n	8004962 <PDU_update_task+0xea>
					}
				}
			}
		}
	}
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20005de9 	.word	0x20005de9
 8004988:	20005bb9 	.word	0x20005bb9
 800498c:	20005cbe 	.word	0x20005cbe
 8004990:	200000e2 	.word	0x200000e2
 8004994:	200000e1 	.word	0x200000e1
 8004998:	40011000 	.word	0x40011000
 800499c:	200000e4 	.word	0x200000e4
 80049a0:	200000e0 	.word	0x200000e0
 80049a4:	20005cc2 	.word	0x20005cc2
 80049a8:	20005cbc 	.word	0x20005cbc
 80049ac:	2000049c 	.word	0x2000049c

080049b0 <Cmd_pdu_set_channel>:


#define DEST_ADDR FSP_ADR_PDU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pdu_set_channel(int argc, char *argv[])
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80049b6:	af02      	add	r7, sp, #8
 80049b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049bc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049c0:	6018      	str	r0, [r3, #0]
 80049c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049c6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80049ca:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80049cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049d0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	dc01      	bgt.n	80049de <Cmd_pdu_set_channel+0x2e>
 80049da:	2303      	movs	r3, #3
 80049dc:	e0db      	b.n	8004b96 <Cmd_pdu_set_channel+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80049de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049e2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	dd01      	ble.n	80049f0 <Cmd_pdu_set_channel+0x40>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e0d2      	b.n	8004b96 <Cmd_pdu_set_channel+0x1e6>
    uint8_t channel = atoi(argv[1]);
 80049f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049f4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3304      	adds	r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f00a fa8c 	bl	800ef1c <atoi>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8004a0a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004a0e:	2b09      	cmp	r3, #9
 8004a10:	d901      	bls.n	8004a16 <Cmd_pdu_set_channel+0x66>
 8004a12:	2304      	movs	r3, #4
 8004a14:	e0bf      	b.n	8004b96 <Cmd_pdu_set_channel+0x1e6>

    uint8_t state = atoi(argv[2]);
 8004a16:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a1a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f00a fa79 	bl	800ef1c <atoi>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004a30:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d901      	bls.n	8004a3c <Cmd_pdu_set_channel+0x8c>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	e0ac      	b.n	8004b96 <Cmd_pdu_set_channel+0x1e6>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004a3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a40:	4857      	ldr	r0, [pc, #348]	@ (8004ba0 <Cmd_pdu_set_channel+0x1f0>)
 8004a42:	f7ff fef5 	bl	8004830 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004a46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004a4a:	4855      	ldr	r0, [pc, #340]	@ (8004ba0 <Cmd_pdu_set_channel+0x1f0>)
 8004a4c:	f7ff fef0 	bl	8004830 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004a50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a54:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004a66:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004a74:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004a78:	4a4a      	ldr	r2, [pc, #296]	@ (8004ba4 <Cmd_pdu_set_channel+0x1f4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d103      	bne.n	8004a86 <Cmd_pdu_set_channel+0xd6>
    	uart_choose_uart5 = 1;
 8004a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba8 <Cmd_pdu_set_channel+0x1f8>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	e002      	b.n	8004a8c <Cmd_pdu_set_channel+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8004a86:	4b48      	ldr	r3, [pc, #288]	@ (8004ba8 <Cmd_pdu_set_channel+0x1f8>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004a8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004a90:	4a46      	ldr	r2, [pc, #280]	@ (8004bac <Cmd_pdu_set_channel+0x1fc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d103      	bne.n	8004a9e <Cmd_pdu_set_channel+0xee>
    	uart_choose_usart2 = 1;
 8004a96:	4b46      	ldr	r3, [pc, #280]	@ (8004bb0 <Cmd_pdu_set_channel+0x200>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e002      	b.n	8004aa4 <Cmd_pdu_set_channel+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 8004a9e:	4b44      	ldr	r3, [pc, #272]	@ (8004bb0 <Cmd_pdu_set_channel+0x200>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_CHANNEL;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = channel;
 8004aaa:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004aae:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 8004ab2:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004ab6:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004aba:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004abe:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004ac2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	2301      	movs	r3, #1
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2303      	movs	r3, #3
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f007 fb68 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004ad4:	f107 020f 	add.w	r2, r7, #15
 8004ad8:	f107 0110 	add.w	r1, r7, #16
 8004adc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f007 fbe5 	bl	800c2b0 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004ae6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004aea:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d02c      	beq.n	8004b4e <Cmd_pdu_set_channel+0x19e>
        for (int i = 0; i < frame_len; i++) {
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004afa:	e010      	b.n	8004b1e <Cmd_pdu_set_channel+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 8004afc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b00:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004b04:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b08:	4413      	add	r3, r2
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4829      	ldr	r0, [pc, #164]	@ (8004bb4 <Cmd_pdu_set_channel+0x204>)
 8004b10:	f7fd f91e 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004b14:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004b1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b22:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	dbe4      	blt.n	8004afc <Cmd_pdu_set_channel+0x14c>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004b32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b36:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b3a:	781a      	ldrb	r2, [r3, #0]
 8004b3c:	f107 0310 	add.w	r3, r7, #16
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd fba6 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8004b48:	f7fd fb8c 	bl	8002264 <set_send_flag>
 8004b4c:	e022      	b.n	8004b94 <Cmd_pdu_set_channel+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004b4e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004b52:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004b56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2303      	movs	r3, #3
 8004b62:	2202      	movs	r2, #2
 8004b64:	f007 fb1e 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004b68:	f107 020f 	add.w	r2, r7, #15
 8004b6c:	f107 0110 	add.w	r1, r7, #16
 8004b70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b74:	4618      	mov	r0, r3
 8004b76:	f007 fb9b 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004b7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b7e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b82:	781a      	ldrb	r2, [r3, #0]
 8004b84:	f107 0310 	add.w	r3, r7, #16
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fb82 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004b90:	f7fd fb68 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004b94:	2305      	movs	r3, #5
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40020000 	.word	0x40020000
 8004ba4:	40005000 	.word	0x40005000
 8004ba8:	20005cc0 	.word	0x20005cc0
 8004bac:	40004400 	.word	0x40004400
 8004bb0:	20005cc1 	.word	0x20005cc1
 8004bb4:	40011000 	.word	0x40011000

08004bb8 <Cmd_pdu_set_buck>:

int Cmd_pdu_set_buck(int argc, char *argv[])
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004bbe:	af02      	add	r7, sp, #8
 8004bc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bc4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004bc8:	6018      	str	r0, [r3, #0]
 8004bca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bce:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004bd2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8004bd4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bd8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	dc01      	bgt.n	8004be6 <Cmd_pdu_set_buck+0x2e>
 8004be2:	2303      	movs	r3, #3
 8004be4:	e0db      	b.n	8004d9e <Cmd_pdu_set_buck+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8004be6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	dd01      	ble.n	8004bf8 <Cmd_pdu_set_buck+0x40>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e0d2      	b.n	8004d9e <Cmd_pdu_set_buck+0x1e6>
    uint8_t buck = atoi(argv[1]);
 8004bf8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bfc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3304      	adds	r3, #4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f00a f988 	bl	800ef1c <atoi>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8004c12:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004c16:	2b06      	cmp	r3, #6
 8004c18:	d901      	bls.n	8004c1e <Cmd_pdu_set_buck+0x66>
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	e0bf      	b.n	8004d9e <Cmd_pdu_set_buck+0x1e6>

    uint8_t state = atoi(argv[2]);
 8004c1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c22:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f00a f975 	bl	800ef1c <atoi>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004c38:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d901      	bls.n	8004c44 <Cmd_pdu_set_buck+0x8c>
 8004c40:	2304      	movs	r3, #4
 8004c42:	e0ac      	b.n	8004d9e <Cmd_pdu_set_buck+0x1e6>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004c44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c48:	4857      	ldr	r0, [pc, #348]	@ (8004da8 <Cmd_pdu_set_buck+0x1f0>)
 8004c4a:	f7ff fdf1 	bl	8004830 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004c4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004c52:	4855      	ldr	r0, [pc, #340]	@ (8004da8 <Cmd_pdu_set_buck+0x1f0>)
 8004c54:	f7ff fdec 	bl	8004830 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004c58:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c5c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c66:	3b01      	subs	r3, #1
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004c6e:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004c7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004c80:	4a4a      	ldr	r2, [pc, #296]	@ (8004dac <Cmd_pdu_set_buck+0x1f4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d103      	bne.n	8004c8e <Cmd_pdu_set_buck+0xd6>
    	uart_choose_uart5 = 1;
 8004c86:	4b4a      	ldr	r3, [pc, #296]	@ (8004db0 <Cmd_pdu_set_buck+0x1f8>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	e002      	b.n	8004c94 <Cmd_pdu_set_buck+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8004c8e:	4b48      	ldr	r3, [pc, #288]	@ (8004db0 <Cmd_pdu_set_buck+0x1f8>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004c94:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004c98:	4a46      	ldr	r2, [pc, #280]	@ (8004db4 <Cmd_pdu_set_buck+0x1fc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d103      	bne.n	8004ca6 <Cmd_pdu_set_buck+0xee>
    	uart_choose_usart2 = 1;
 8004c9e:	4b46      	ldr	r3, [pc, #280]	@ (8004db8 <Cmd_pdu_set_buck+0x200>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e002      	b.n	8004cac <Cmd_pdu_set_buck+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 8004ca6:	4b44      	ldr	r3, [pc, #272]	@ (8004db8 <Cmd_pdu_set_buck+0x200>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_BUCK;
 8004cac:	2302      	movs	r3, #2
 8004cae:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = buck;
 8004cb2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004cb6:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 8004cba:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004cbe:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004cc2:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004cc6:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004cca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f007 fa64 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004cdc:	f107 020f 	add.w	r2, r7, #15
 8004ce0:	f107 0110 	add.w	r1, r7, #16
 8004ce4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f007 fae1 	bl	800c2b0 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004cee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cf2:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02c      	beq.n	8004d56 <Cmd_pdu_set_buck+0x19e>
        for (int i = 0; i < frame_len; i++) {
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004d02:	e010      	b.n	8004d26 <Cmd_pdu_set_buck+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 8004d04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d08:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004d0c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d10:	4413      	add	r3, r2
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	4619      	mov	r1, r3
 8004d16:	4829      	ldr	r0, [pc, #164]	@ (8004dbc <Cmd_pdu_set_buck+0x204>)
 8004d18:	f7fd f81a 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004d1c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d20:	3301      	adds	r3, #1
 8004d22:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004d26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d2a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d36:	4293      	cmp	r3, r2
 8004d38:	dbe4      	blt.n	8004d04 <Cmd_pdu_set_buck+0x14c>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004d3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d3e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d42:	781a      	ldrb	r2, [r3, #0]
 8004d44:	f107 0310 	add.w	r3, r7, #16
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fd faa2 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8004d50:	f7fd fa88 	bl	8002264 <set_send_flag>
 8004d54:	e022      	b.n	8004d9c <Cmd_pdu_set_buck+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004d56:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004d5a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004d5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	2301      	movs	r3, #1
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2303      	movs	r3, #3
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f007 fa1a 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004d70:	f107 020f 	add.w	r2, r7, #15
 8004d74:	f107 0110 	add.w	r1, r7, #16
 8004d78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f007 fa97 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004d82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d86:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fd fa7e 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004d98:	f7fd fa64 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004d9c:	2305      	movs	r3, #5
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40005000 	.word	0x40005000
 8004db0:	20005cc0 	.word	0x20005cc0
 8004db4:	40004400 	.word	0x40004400
 8004db8:	20005cc1 	.word	0x20005cc1
 8004dbc:	40011000 	.word	0x40011000

08004dc0 <Cmd_pdu_set_all>:

int Cmd_pdu_set_all(int argc, char *argv[])
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004dc6:	af02      	add	r7, sp, #8
 8004dc8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dcc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004dd0:	6018      	str	r0, [r3, #0]
 8004dd2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dd6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004dda:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004ddc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004de0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	dc01      	bgt.n	8004dee <Cmd_pdu_set_all+0x2e>
 8004dea:	2303      	movs	r3, #3
 8004dec:	e0c4      	b.n	8004f78 <Cmd_pdu_set_all+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004dee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004df2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	dd01      	ble.n	8004e00 <Cmd_pdu_set_all+0x40>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e0bb      	b.n	8004f78 <Cmd_pdu_set_all+0x1b8>

    uint8_t state = atoi(argv[1]);
 8004e00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e04:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f00a f884 	bl	800ef1c <atoi>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004e1a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d901      	bls.n	8004e26 <Cmd_pdu_set_all+0x66>
 8004e22:	2304      	movs	r3, #4
 8004e24:	e0a8      	b.n	8004f78 <Cmd_pdu_set_all+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004e26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e2a:	4856      	ldr	r0, [pc, #344]	@ (8004f84 <Cmd_pdu_set_all+0x1c4>)
 8004e2c:	f7ff fd00 	bl	8004830 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004e30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e34:	4853      	ldr	r0, [pc, #332]	@ (8004f84 <Cmd_pdu_set_all+0x1c4>)
 8004e36:	f7ff fcfb 	bl	8004830 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004e3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e3e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004e50:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	4413      	add	r3, r2
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004e5e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004e62:	4a49      	ldr	r2, [pc, #292]	@ (8004f88 <Cmd_pdu_set_all+0x1c8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <Cmd_pdu_set_all+0xb0>
    	uart_choose_uart5 = 1;
 8004e68:	4b48      	ldr	r3, [pc, #288]	@ (8004f8c <Cmd_pdu_set_all+0x1cc>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e002      	b.n	8004e76 <Cmd_pdu_set_all+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004e70:	4b46      	ldr	r3, [pc, #280]	@ (8004f8c <Cmd_pdu_set_all+0x1cc>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004e76:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004e7a:	4a45      	ldr	r2, [pc, #276]	@ (8004f90 <Cmd_pdu_set_all+0x1d0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d103      	bne.n	8004e88 <Cmd_pdu_set_all+0xc8>
    	uart_choose_usart2 = 1;
 8004e80:	4b44      	ldr	r3, [pc, #272]	@ (8004f94 <Cmd_pdu_set_all+0x1d4>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e002      	b.n	8004e8e <Cmd_pdu_set_all+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8004e88:	4b42      	ldr	r3, [pc, #264]	@ (8004f94 <Cmd_pdu_set_all+0x1d4>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_ALL;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = state;
 8004e94:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004e98:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004e9c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004ea0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004ea4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2301      	movs	r3, #1
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2303      	movs	r3, #3
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f007 f977 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004eb6:	f107 020f 	add.w	r2, r7, #15
 8004eba:	f107 0110 	add.w	r1, r7, #16
 8004ebe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f007 f9f4 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 8004ec8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ecc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d02c      	beq.n	8004f30 <Cmd_pdu_set_all+0x170>
        for (int i = 0; i < frame_len; i++) {
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004edc:	e010      	b.n	8004f00 <Cmd_pdu_set_all+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8004ede:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ee2:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004ee6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004eea:	4413      	add	r3, r2
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4829      	ldr	r0, [pc, #164]	@ (8004f98 <Cmd_pdu_set_all+0x1d8>)
 8004ef2:	f7fc ff2d 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004ef6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004efa:	3301      	adds	r3, #1
 8004efc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004f00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f04:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004f10:	4293      	cmp	r3, r2
 8004f12:	dbe4      	blt.n	8004ede <Cmd_pdu_set_all+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004f14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f18:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004f1c:	781a      	ldrb	r2, [r3, #0]
 8004f1e:	f107 0310 	add.w	r3, r7, #16
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fd f9b5 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8004f2a:	f7fd f99b 	bl	8002264 <set_send_flag>
 8004f2e:	e022      	b.n	8004f76 <Cmd_pdu_set_all+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004f30:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004f34:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004f38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	2301      	movs	r3, #1
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	2303      	movs	r3, #3
 8004f44:	2201      	movs	r2, #1
 8004f46:	f007 f92d 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004f4a:	f107 020f 	add.w	r2, r7, #15
 8004f4e:	f107 0110 	add.w	r1, r7, #16
 8004f52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f56:	4618      	mov	r0, r3
 8004f58:	f007 f9aa 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004f5c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f60:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	f107 0310 	add.w	r3, r7, #16
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fd f991 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8004f72:	f7fd f977 	bl	8002264 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8004f76:	2305      	movs	r3, #5
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40020000 	.word	0x40020000
 8004f88:	40005000 	.word	0x40005000
 8004f8c:	20005cc0 	.word	0x20005cc0
 8004f90:	40004400 	.word	0x40004400
 8004f94:	20005cc1 	.word	0x20005cc1
 8004f98:	40011000 	.word	0x40011000

08004f9c <Cmd_pdu_get_channel>:

int Cmd_pdu_get_channel(int argc, char *argv[])
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004fa2:	af02      	add	r7, sp, #8
 8004fa4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fa8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004fac:	6018      	str	r0, [r3, #0]
 8004fae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fb2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004fb6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004fb8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fbc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	dc01      	bgt.n	8004fca <Cmd_pdu_get_channel+0x2e>
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0c4      	b.n	8005154 <Cmd_pdu_get_channel+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004fca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fce:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	dd01      	ble.n	8004fdc <Cmd_pdu_get_channel+0x40>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e0bb      	b.n	8005154 <Cmd_pdu_get_channel+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8004fdc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fe0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f009 ff96 	bl	800ef1c <atoi>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8004ff6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	d901      	bls.n	8005002 <Cmd_pdu_get_channel+0x66>
 8004ffe:	2304      	movs	r3, #4
 8005000:	e0a8      	b.n	8005154 <Cmd_pdu_get_channel+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005002:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005006:	4856      	ldr	r0, [pc, #344]	@ (8005160 <Cmd_pdu_get_channel+0x1c4>)
 8005008:	f7ff fc12 	bl	8004830 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800500c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005010:	4853      	ldr	r0, [pc, #332]	@ (8005160 <Cmd_pdu_get_channel+0x1c4>)
 8005012:	f7ff fc0d 	bl	8004830 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005016:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800501a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005024:	3b01      	subs	r3, #1
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800502c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	4413      	add	r3, r2
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800503a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800503e:	4a49      	ldr	r2, [pc, #292]	@ (8005164 <Cmd_pdu_get_channel+0x1c8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d103      	bne.n	800504c <Cmd_pdu_get_channel+0xb0>
    	uart_choose_uart5 = 1;
 8005044:	4b48      	ldr	r3, [pc, #288]	@ (8005168 <Cmd_pdu_get_channel+0x1cc>)
 8005046:	2201      	movs	r2, #1
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e002      	b.n	8005052 <Cmd_pdu_get_channel+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 800504c:	4b46      	ldr	r3, [pc, #280]	@ (8005168 <Cmd_pdu_get_channel+0x1cc>)
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005052:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005056:	4a45      	ldr	r2, [pc, #276]	@ (800516c <Cmd_pdu_get_channel+0x1d0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d103      	bne.n	8005064 <Cmd_pdu_get_channel+0xc8>
    	uart_choose_usart2 = 1;
 800505c:	4b44      	ldr	r3, [pc, #272]	@ (8005170 <Cmd_pdu_get_channel+0x1d4>)
 800505e:	2201      	movs	r2, #1
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e002      	b.n	800506a <Cmd_pdu_get_channel+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8005064:	4b42      	ldr	r3, [pc, #264]	@ (8005170 <Cmd_pdu_get_channel+0x1d4>)
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
    }



    uint8_t cmd  = CMD_CODE_PDU_GET_CHANNEL;
 800506a:	2304      	movs	r3, #4
 800506c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = channel;
 8005070:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005074:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005078:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800507c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005080:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	2301      	movs	r3, #1
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	2303      	movs	r3, #3
 800508c:	2201      	movs	r2, #1
 800508e:	f007 f889 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005092:	f107 020f 	add.w	r2, r7, #15
 8005096:	f107 0110 	add.w	r1, r7, #16
 800509a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800509e:	4618      	mov	r0, r3
 80050a0:	f007 f906 	bl	800c2b0 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 80050a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050a8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d02c      	beq.n	800510c <Cmd_pdu_get_channel+0x170>
        for (int i = 0; i < frame_len; i++) {
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80050b8:	e010      	b.n	80050dc <Cmd_pdu_get_channel+0x140>
            Uart_write(USART1, encoded_frame[i]);
 80050ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050be:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80050c2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050c6:	4413      	add	r3, r2
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	4619      	mov	r1, r3
 80050cc:	4829      	ldr	r0, [pc, #164]	@ (8005174 <Cmd_pdu_get_channel+0x1d8>)
 80050ce:	f7fc fe3f 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80050d2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050d6:	3301      	adds	r3, #1
 80050d8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80050dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050e0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050ec:	4293      	cmp	r3, r2
 80050ee:	dbe4      	blt.n	80050ba <Cmd_pdu_get_channel+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80050f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050f4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80050f8:	781a      	ldrb	r2, [r3, #0]
 80050fa:	f107 0310 	add.w	r3, r7, #16
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f7fd f8c7 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005106:	f7fd f8ad 	bl	8002264 <set_send_flag>
 800510a:	e022      	b.n	8005152 <Cmd_pdu_get_channel+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800510c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8005110:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005114:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	2301      	movs	r3, #1
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	2303      	movs	r3, #3
 8005120:	2201      	movs	r2, #1
 8005122:	f007 f83f 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005126:	f107 020f 	add.w	r2, r7, #15
 800512a:	f107 0110 	add.w	r1, r7, #16
 800512e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005132:	4618      	mov	r0, r3
 8005134:	f007 f8bc 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005138:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800513c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005140:	781a      	ldrb	r2, [r3, #0]
 8005142:	f107 0310 	add.w	r3, r7, #16
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f7fd f8a3 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800514e:	f7fd f889 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005152:	2305      	movs	r3, #5
}
 8005154:	4618      	mov	r0, r3
 8005156:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40020000 	.word	0x40020000
 8005164:	40005000 	.word	0x40005000
 8005168:	20005cc0 	.word	0x20005cc0
 800516c:	40004400 	.word	0x40004400
 8005170:	20005cc1 	.word	0x20005cc1
 8005174:	40011000 	.word	0x40011000

08005178 <Cmd_pdu_get_buck>:

int Cmd_pdu_get_buck(int argc, char *argv[])
{
 8005178:	b580      	push	{r7, lr}
 800517a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800517e:	af02      	add	r7, sp, #8
 8005180:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005184:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005188:	6018      	str	r0, [r3, #0]
 800518a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800518e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005192:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8005194:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005198:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	dc01      	bgt.n	80051a6 <Cmd_pdu_get_buck+0x2e>
 80051a2:	2303      	movs	r3, #3
 80051a4:	e0c4      	b.n	8005330 <Cmd_pdu_get_buck+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80051a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80051aa:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	dd01      	ble.n	80051b8 <Cmd_pdu_get_buck+0x40>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e0bb      	b.n	8005330 <Cmd_pdu_get_buck+0x1b8>
    uint8_t buck = atoi(argv[1]);
 80051b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80051bc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3304      	adds	r3, #4
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f009 fea8 	bl	800ef1c <atoi>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 80051d2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d901      	bls.n	80051de <Cmd_pdu_get_buck+0x66>
 80051da:	2304      	movs	r3, #4
 80051dc:	e0a8      	b.n	8005330 <Cmd_pdu_get_buck+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80051de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051e2:	4856      	ldr	r0, [pc, #344]	@ (800533c <Cmd_pdu_get_buck+0x1c4>)
 80051e4:	f7ff fb24 	bl	8004830 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80051e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051ec:	4853      	ldr	r0, [pc, #332]	@ (800533c <Cmd_pdu_get_buck+0x1c4>)
 80051ee:	f7ff fb1f 	bl	8004830 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80051f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80051f6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005200:	3b01      	subs	r3, #1
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005208:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	4413      	add	r3, r2
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005216:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800521a:	4a49      	ldr	r2, [pc, #292]	@ (8005340 <Cmd_pdu_get_buck+0x1c8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d103      	bne.n	8005228 <Cmd_pdu_get_buck+0xb0>
    	uart_choose_uart5 = 1;
 8005220:	4b48      	ldr	r3, [pc, #288]	@ (8005344 <Cmd_pdu_get_buck+0x1cc>)
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e002      	b.n	800522e <Cmd_pdu_get_buck+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005228:	4b46      	ldr	r3, [pc, #280]	@ (8005344 <Cmd_pdu_get_buck+0x1cc>)
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800522e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005232:	4a45      	ldr	r2, [pc, #276]	@ (8005348 <Cmd_pdu_get_buck+0x1d0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d103      	bne.n	8005240 <Cmd_pdu_get_buck+0xc8>
    	uart_choose_usart2 = 1;
 8005238:	4b44      	ldr	r3, [pc, #272]	@ (800534c <Cmd_pdu_get_buck+0x1d4>)
 800523a:	2201      	movs	r2, #1
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	e002      	b.n	8005246 <Cmd_pdu_get_buck+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8005240:	4b42      	ldr	r3, [pc, #264]	@ (800534c <Cmd_pdu_get_buck+0x1d4>)
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_GET_BUCK;
 8005246:	2305      	movs	r3, #5
 8005248:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = buck;
 800524c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005250:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005254:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8005258:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800525c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	2301      	movs	r3, #1
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	2303      	movs	r3, #3
 8005268:	2201      	movs	r2, #1
 800526a:	f006 ff9b 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800526e:	f107 020f 	add.w	r2, r7, #15
 8005272:	f107 0110 	add.w	r1, r7, #16
 8005276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800527a:	4618      	mov	r0, r3
 800527c:	f007 f818 	bl	800c2b0 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005280:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005284:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d02c      	beq.n	80052e8 <Cmd_pdu_get_buck+0x170>
        for (int i = 0; i < frame_len; i++) {
 800528e:	2300      	movs	r3, #0
 8005290:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005294:	e010      	b.n	80052b8 <Cmd_pdu_get_buck+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8005296:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800529a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800529e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80052a2:	4413      	add	r3, r2
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	4619      	mov	r1, r3
 80052a8:	4829      	ldr	r0, [pc, #164]	@ (8005350 <Cmd_pdu_get_buck+0x1d8>)
 80052aa:	f7fc fd51 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80052ae:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80052b2:	3301      	adds	r3, #1
 80052b4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80052b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052bc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80052c8:	4293      	cmp	r3, r2
 80052ca:	dbe4      	blt.n	8005296 <Cmd_pdu_get_buck+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80052cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052d0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fc ffd9 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 80052e2:	f7fc ffbf 	bl	8002264 <set_send_flag>
 80052e6:	e022      	b.n	800532e <Cmd_pdu_get_buck+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80052e8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80052ec:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80052f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	2301      	movs	r3, #1
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	2303      	movs	r3, #3
 80052fc:	2201      	movs	r2, #1
 80052fe:	f006 ff51 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005302:	f107 020f 	add.w	r2, r7, #15
 8005306:	f107 0110 	add.w	r1, r7, #16
 800530a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800530e:	4618      	mov	r0, r3
 8005310:	f006 ffce 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005314:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005318:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800531c:	781a      	ldrb	r2, [r3, #0]
 800531e:	f107 0310 	add.w	r3, r7, #16
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f7fc ffb5 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 800532a:	f7fc ff9b 	bl	8002264 <set_send_flag>
    }


    return CMDLINE_PENDING;
 800532e:	2305      	movs	r3, #5
}
 8005330:	4618      	mov	r0, r3
 8005332:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40020000 	.word	0x40020000
 8005340:	40005000 	.word	0x40005000
 8005344:	20005cc0 	.word	0x20005cc0
 8005348:	40004400 	.word	0x40004400
 800534c:	20005cc1 	.word	0x20005cc1
 8005350:	40011000 	.word	0x40011000

08005354 <Cmd_pdu_get_all>:

int Cmd_pdu_get_all(int argc, char *argv[])
{
 8005354:	b580      	push	{r7, lr}
 8005356:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800535a:	af00      	add	r7, sp, #0
 800535c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005360:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005364:	6018      	str	r0, [r3, #0]
 8005366:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800536a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800536e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005370:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005374:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b01      	cmp	r3, #1
 800537c:	dc01      	bgt.n	8005382 <Cmd_pdu_get_all+0x2e>
 800537e:	2303      	movs	r3, #3
 8005380:	e0a3      	b.n	80054ca <Cmd_pdu_get_all+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005382:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005386:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b02      	cmp	r3, #2
 800538e:	dd01      	ble.n	8005394 <Cmd_pdu_get_all+0x40>
 8005390:	2302      	movs	r3, #2
 8005392:	e09a      	b.n	80054ca <Cmd_pdu_get_all+0x176>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005394:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005398:	484e      	ldr	r0, [pc, #312]	@ (80054d4 <Cmd_pdu_get_all+0x180>)
 800539a:	f7ff fa49 	bl	8004830 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800539e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053a2:	484c      	ldr	r0, [pc, #304]	@ (80054d4 <Cmd_pdu_get_all+0x180>)
 80053a4:	f7ff fa44 	bl	8004830 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80053a8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80053ac:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053b6:	3b01      	subs	r3, #1
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80053be:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	4413      	add	r3, r2
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80053cc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80053d0:	4a41      	ldr	r2, [pc, #260]	@ (80054d8 <Cmd_pdu_get_all+0x184>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d103      	bne.n	80053de <Cmd_pdu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 80053d6:	4b41      	ldr	r3, [pc, #260]	@ (80054dc <Cmd_pdu_get_all+0x188>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e002      	b.n	80053e4 <Cmd_pdu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80053de:	4b3f      	ldr	r3, [pc, #252]	@ (80054dc <Cmd_pdu_get_all+0x188>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80053e4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80053e8:	4a3d      	ldr	r2, [pc, #244]	@ (80054e0 <Cmd_pdu_get_all+0x18c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d103      	bne.n	80053f6 <Cmd_pdu_get_all+0xa2>
    	uart_choose_usart2 = 1;
 80053ee:	4b3d      	ldr	r3, [pc, #244]	@ (80054e4 <Cmd_pdu_get_all+0x190>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e002      	b.n	80053fc <Cmd_pdu_get_all+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80053f6:	4b3b      	ldr	r3, [pc, #236]	@ (80054e4 <Cmd_pdu_get_all+0x190>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_GET_ALL;
 80053fc:	2306      	movs	r3, #6
 80053fe:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005402:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005406:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800540a:	2201      	movs	r2, #1
 800540c:	2103      	movs	r1, #3
 800540e:	f006 fea1 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005412:	f107 020f 	add.w	r2, r7, #15
 8005416:	f107 0110 	add.w	r1, r7, #16
 800541a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800541e:	4618      	mov	r0, r3
 8005420:	f006 ff46 	bl	800c2b0 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005424:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005428:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d02c      	beq.n	800548c <Cmd_pdu_get_all+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005432:	2300      	movs	r3, #0
 8005434:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005438:	e010      	b.n	800545c <Cmd_pdu_get_all+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800543a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800543e:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005442:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005446:	4413      	add	r3, r2
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	4619      	mov	r1, r3
 800544c:	4826      	ldr	r0, [pc, #152]	@ (80054e8 <Cmd_pdu_get_all+0x194>)
 800544e:	f7fc fc7f 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005452:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005456:	3301      	adds	r3, #1
 8005458:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800545c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005460:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800546c:	4293      	cmp	r3, r2
 800546e:	dbe4      	blt.n	800543a <Cmd_pdu_get_all+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005470:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005474:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005478:	781a      	ldrb	r2, [r3, #0]
 800547a:	f107 0310 	add.w	r3, r7, #16
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f7fc ff07 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005486:	f7fc feed 	bl	8002264 <set_send_flag>
 800548a:	e01d      	b.n	80054c8 <Cmd_pdu_get_all+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800548c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005490:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005494:	2201      	movs	r2, #1
 8005496:	2103      	movs	r1, #3
 8005498:	f006 fe5c 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800549c:	f107 020f 	add.w	r2, r7, #15
 80054a0:	f107 0110 	add.w	r1, r7, #16
 80054a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80054a8:	4618      	mov	r0, r3
 80054aa:	f006 ff01 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80054ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80054b2:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	f107 0310 	add.w	r3, r7, #16
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fc fee8 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80054c4:	f7fc fece 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80054c8:	2305      	movs	r3, #5
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40020000 	.word	0x40020000
 80054d8:	40005000 	.word	0x40005000
 80054dc:	20005cc0 	.word	0x20005cc0
 80054e0:	40004400 	.word	0x40004400
 80054e4:	20005cc1 	.word	0x20005cc1
 80054e8:	40011000 	.word	0x40011000

080054ec <LL_GPIO_SetOutputPin>:
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	619a      	str	r2, [r3, #24]
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <LL_GPIO_ResetOutputPin>:
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	041a      	lsls	r2, r3, #16
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	619a      	str	r2, [r3, #24]
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <PMU_create_task>:
};



void PMU_create_task(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PMU_task_context.taskHandle, &PMU_task_context.taskProperty);
 800552c:	4906      	ldr	r1, [pc, #24]	@ (8005548 <PMU_create_task+0x20>)
 800552e:	4807      	ldr	r0, [pc, #28]	@ (800554c <PMU_create_task+0x24>)
 8005530:	f006 fc8c 	bl	800be4c <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 8005534:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005538:	2005      	movs	r0, #5
 800553a:	f006 fc5b 	bl	800bdf4 <SCH_TIM_Start>
    Ringbuf_init();
 800553e:	f7fc fa5d 	bl	80019fc <Ringbuf_init>
}
 8005542:	bf00      	nop
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000110 	.word	0x20000110
 800554c:	2000010c 	.word	0x2000010c

08005550 <PMU_update_task>:



volatile uint8_t timeout_counter_pmu = 0;

void PMU_update_task(void) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 8005556:	4b41      	ldr	r3, [pc, #260]	@ (800565c <PMU_update_task+0x10c>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d079      	beq.n	8005654 <PMU_update_task+0x104>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PMU))
 8005560:	2005      	movs	r0, #5
 8005562:	f006 fc5d 	bl	800be20 <SCH_TIM_HasCompleted>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d073      	beq.n	8005654 <PMU_update_task+0x104>
		{

			if(!sendFlag){
 800556c:	4b3c      	ldr	r3, [pc, #240]	@ (8005660 <PMU_update_task+0x110>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d16e      	bne.n	8005654 <PMU_update_task+0x104>
				if(!send_rs422){
 8005576:	4b3b      	ldr	r3, [pc, #236]	@ (8005664 <PMU_update_task+0x114>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d130      	bne.n	80055e2 <PMU_update_task+0x92>
					if(receive_iouFlag&&receive_pduFlag){
 8005580:	4b39      	ldr	r3, [pc, #228]	@ (8005668 <PMU_update_task+0x118>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d02b      	beq.n	80055e2 <PMU_update_task+0x92>
 800558a:	4b38      	ldr	r3, [pc, #224]	@ (800566c <PMU_update_task+0x11c>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d026      	beq.n	80055e2 <PMU_update_task+0x92>
						switch_board(1);
 8005594:	2001      	movs	r0, #1
 8005596:	f002 fb37 	bl	8007c08 <switch_board>
						Uart_flush(USART1);
 800559a:	4835      	ldr	r0, [pc, #212]	@ (8005670 <PMU_update_task+0x120>)
 800559c:	f7fc fd44 	bl	8002028 <Uart_flush>

						frame = pmu_frame;
 80055a0:	4b34      	ldr	r3, [pc, #208]	@ (8005674 <PMU_update_task+0x124>)
 80055a2:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(pmu_frame);
 80055a4:	2309      	movs	r3, #9
 80055a6:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	e00a      	b.n	80055c4 <PMU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	4619      	mov	r1, r3
 80055b8:	482d      	ldr	r0, [pc, #180]	@ (8005670 <PMU_update_task+0x120>)
 80055ba:	f7fc fbc9 	bl	8001d50 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3301      	adds	r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	dbf0      	blt.n	80055ae <PMU_update_task+0x5e>
						}
						receive_pmuFlag = 0;
 80055cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005678 <PMU_update_task+0x128>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80055d2:	4b24      	ldr	r3, [pc, #144]	@ (8005664 <PMU_update_task+0x114>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 80055d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80055dc:	2005      	movs	r0, #5
 80055de:	f006 fc09 	bl	800bdf4 <SCH_TIM_Start>
					}
				}
				if(!receive_pmuFlag){
 80055e2:	4b25      	ldr	r3, [pc, #148]	@ (8005678 <PMU_update_task+0x128>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d133      	bne.n	8005654 <PMU_update_task+0x104>
					timeout_counter_pmu++;
 80055ec:	4b23      	ldr	r3, [pc, #140]	@ (800567c <PMU_update_task+0x12c>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	3301      	adds	r3, #1
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	4b21      	ldr	r3, [pc, #132]	@ (800567c <PMU_update_task+0x12c>)
 80055f8:	701a      	strb	r2, [r3, #0]
					if (timeout_counter_pmu > 2){
 80055fa:	4b20      	ldr	r3, [pc, #128]	@ (800567c <PMU_update_task+0x12c>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d927      	bls.n	8005654 <PMU_update_task+0x104>
						disconnect_counter_pmu++;
 8005604:	4b1e      	ldr	r3, [pc, #120]	@ (8005680 <PMU_update_task+0x130>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	3301      	adds	r3, #1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	4b1c      	ldr	r3, [pc, #112]	@ (8005680 <PMU_update_task+0x130>)
 8005610:	701a      	strb	r2, [r3, #0]
						timeout_counter_pmu = 0;
 8005612:	4b1a      	ldr	r3, [pc, #104]	@ (800567c <PMU_update_task+0x12c>)
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
						receive_pmuFlag = 1;
 8005618:	4b17      	ldr	r3, [pc, #92]	@ (8005678 <PMU_update_task+0x128>)
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
						send_rs422 = 0;
 800561e:	4b11      	ldr	r3, [pc, #68]	@ (8005664 <PMU_update_task+0x114>)
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
						if(disconnect_counter_pmu> 4){
 8005624:	4b16      	ldr	r3, [pc, #88]	@ (8005680 <PMU_update_task+0x130>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b04      	cmp	r3, #4
 800562c:	d912      	bls.n	8005654 <PMU_update_task+0x104>
							for (int i = 1; i <= 24; i++) {
 800562e:	2301      	movs	r3, #1
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	e00c      	b.n	800564e <PMU_update_task+0xfe>
								disconnect_counter_pmu = 5;
 8005634:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <PMU_update_task+0x130>)
 8005636:	2205      	movs	r2, #5
 8005638:	701a      	strb	r2, [r3, #0]
								nextBuffer[i + 96] = 0xFF; //97   pay1    + 98 pay2    120    pay24
 800563a:	4b12      	ldr	r3, [pc, #72]	@ (8005684 <PMU_update_task+0x134>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	3360      	adds	r3, #96	@ 0x60
 8005642:	4413      	add	r3, r2
 8005644:	22ff      	movs	r2, #255	@ 0xff
 8005646:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 24; i++) {
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	3301      	adds	r3, #1
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b18      	cmp	r3, #24
 8005652:	ddef      	ble.n	8005634 <PMU_update_task+0xe4>
					}
				}
			}
		}
	}
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20005de9 	.word	0x20005de9
 8005660:	20005bb9 	.word	0x20005bb9
 8005664:	20005cbe 	.word	0x20005cbe
 8005668:	200000e2 	.word	0x200000e2
 800566c:	200000e0 	.word	0x200000e0
 8005670:	40011000 	.word	0x40011000
 8005674:	20000100 	.word	0x20000100
 8005678:	200000e1 	.word	0x200000e1
 800567c:	20005cc3 	.word	0x20005cc3
 8005680:	20005cbd 	.word	0x20005cbd
 8005684:	2000049c 	.word	0x2000049c

08005688 <Cmd_pmu_get_temp>:


#define DEST_ADDR FSP_ADR_PMU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pmu_get_temp(int argc, char *argv[])
{
 8005688:	b580      	push	{r7, lr}
 800568a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800568e:	af00      	add	r7, sp, #0
 8005690:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005694:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005698:	6018      	str	r0, [r3, #0]
 800569a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800569e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80056a2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80056a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80056a8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	dc01      	bgt.n	80056b6 <Cmd_pmu_get_temp+0x2e>
 80056b2:	2303      	movs	r3, #3
 80056b4:	e0a3      	b.n	80057fe <Cmd_pmu_get_temp+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80056b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80056ba:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	dd01      	ble.n	80056c8 <Cmd_pmu_get_temp+0x40>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e09a      	b.n	80057fe <Cmd_pmu_get_temp+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80056c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056cc:	484e      	ldr	r0, [pc, #312]	@ (8005808 <Cmd_pmu_get_temp+0x180>)
 80056ce:	f7ff ff1b 	bl	8005508 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80056d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056d6:	484c      	ldr	r0, [pc, #304]	@ (8005808 <Cmd_pmu_get_temp+0x180>)
 80056d8:	f7ff ff08 	bl	80054ec <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80056dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80056e0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056ea:	3b01      	subs	r3, #1
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80056f2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	4413      	add	r3, r2
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005700:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005704:	4a41      	ldr	r2, [pc, #260]	@ (800580c <Cmd_pmu_get_temp+0x184>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d103      	bne.n	8005712 <Cmd_pmu_get_temp+0x8a>
    	uart_choose_uart5 = 1;
 800570a:	4b41      	ldr	r3, [pc, #260]	@ (8005810 <Cmd_pmu_get_temp+0x188>)
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e002      	b.n	8005718 <Cmd_pmu_get_temp+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005712:	4b3f      	ldr	r3, [pc, #252]	@ (8005810 <Cmd_pmu_get_temp+0x188>)
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005718:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800571c:	4a3d      	ldr	r2, [pc, #244]	@ (8005814 <Cmd_pmu_get_temp+0x18c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d103      	bne.n	800572a <Cmd_pmu_get_temp+0xa2>
    	uart_choose_usart2 = 1;
 8005722:	4b3d      	ldr	r3, [pc, #244]	@ (8005818 <Cmd_pmu_get_temp+0x190>)
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	e002      	b.n	8005730 <Cmd_pmu_get_temp+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800572a:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <Cmd_pmu_get_temp+0x190>)
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PMU_GET_TEMP;
 8005730:	2301      	movs	r3, #1
 8005732:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005736:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800573a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800573e:	2201      	movs	r2, #1
 8005740:	2102      	movs	r1, #2
 8005742:	f006 fd07 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005746:	f107 020f 	add.w	r2, r7, #15
 800574a:	f107 0110 	add.w	r1, r7, #16
 800574e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005752:	4618      	mov	r0, r3
 8005754:	f006 fdac 	bl	800c2b0 <frame_encode>

    if (frame_len > 0) {
 8005758:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800575c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d02c      	beq.n	80057c0 <Cmd_pmu_get_temp+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005766:	2300      	movs	r3, #0
 8005768:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800576c:	e010      	b.n	8005790 <Cmd_pmu_get_temp+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800576e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005772:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005776:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800577a:	4413      	add	r3, r2
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	4619      	mov	r1, r3
 8005780:	4826      	ldr	r0, [pc, #152]	@ (800581c <Cmd_pmu_get_temp+0x194>)
 8005782:	f7fc fae5 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005786:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800578a:	3301      	adds	r3, #1
 800578c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005790:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005794:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80057a0:	4293      	cmp	r3, r2
 80057a2:	dbe4      	blt.n	800576e <Cmd_pmu_get_temp+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80057a4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80057a8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fc fd6d 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 80057ba:	f7fc fd53 	bl	8002264 <set_send_flag>
 80057be:	e01d      	b.n	80057fc <Cmd_pmu_get_temp+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80057c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057c4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80057c8:	2201      	movs	r2, #1
 80057ca:	2102      	movs	r1, #2
 80057cc:	f006 fcc2 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80057d0:	f107 020f 	add.w	r2, r7, #15
 80057d4:	f107 0110 	add.w	r1, r7, #16
 80057d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057dc:	4618      	mov	r0, r3
 80057de:	f006 fd67 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80057e2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80057e6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80057ea:	781a      	ldrb	r2, [r3, #0]
 80057ec:	f107 0310 	add.w	r3, r7, #16
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fc fd4e 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 80057f8:	f7fc fd34 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80057fc:	2305      	movs	r3, #5
}
 80057fe:	4618      	mov	r0, r3
 8005800:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40020000 	.word	0x40020000
 800580c:	40005000 	.word	0x40005000
 8005810:	20005cc0 	.word	0x20005cc0
 8005814:	40004400 	.word	0x40004400
 8005818:	20005cc1 	.word	0x20005cc1
 800581c:	40011000 	.word	0x40011000

08005820 <Cmd_pmu_bat_vol>:

int Cmd_pmu_bat_vol(int argc, char *argv[])
{
 8005820:	b580      	push	{r7, lr}
 8005822:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005826:	af00      	add	r7, sp, #0
 8005828:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800582c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005830:	6018      	str	r0, [r3, #0]
 8005832:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005836:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800583a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800583c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005840:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b01      	cmp	r3, #1
 8005848:	dc01      	bgt.n	800584e <Cmd_pmu_bat_vol+0x2e>
 800584a:	2303      	movs	r3, #3
 800584c:	e0a3      	b.n	8005996 <Cmd_pmu_bat_vol+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800584e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005852:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b02      	cmp	r3, #2
 800585a:	dd01      	ble.n	8005860 <Cmd_pmu_bat_vol+0x40>
 800585c:	2302      	movs	r3, #2
 800585e:	e09a      	b.n	8005996 <Cmd_pmu_bat_vol+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005860:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005864:	484e      	ldr	r0, [pc, #312]	@ (80059a0 <Cmd_pmu_bat_vol+0x180>)
 8005866:	f7ff fe4f 	bl	8005508 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800586a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800586e:	484c      	ldr	r0, [pc, #304]	@ (80059a0 <Cmd_pmu_bat_vol+0x180>)
 8005870:	f7ff fe3c 	bl	80054ec <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005874:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005878:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005882:	3b01      	subs	r3, #1
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800588a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	4413      	add	r3, r2
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005898:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800589c:	4a41      	ldr	r2, [pc, #260]	@ (80059a4 <Cmd_pmu_bat_vol+0x184>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d103      	bne.n	80058aa <Cmd_pmu_bat_vol+0x8a>
    	uart_choose_uart5 = 1;
 80058a2:	4b41      	ldr	r3, [pc, #260]	@ (80059a8 <Cmd_pmu_bat_vol+0x188>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e002      	b.n	80058b0 <Cmd_pmu_bat_vol+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80058aa:	4b3f      	ldr	r3, [pc, #252]	@ (80059a8 <Cmd_pmu_bat_vol+0x188>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80058b0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80058b4:	4a3d      	ldr	r2, [pc, #244]	@ (80059ac <Cmd_pmu_bat_vol+0x18c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d103      	bne.n	80058c2 <Cmd_pmu_bat_vol+0xa2>
    	uart_choose_usart2 = 1;
 80058ba:	4b3d      	ldr	r3, [pc, #244]	@ (80059b0 <Cmd_pmu_bat_vol+0x190>)
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	e002      	b.n	80058c8 <Cmd_pmu_bat_vol+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80058c2:	4b3b      	ldr	r3, [pc, #236]	@ (80059b0 <Cmd_pmu_bat_vol+0x190>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_BAT_VOL;
 80058c8:	2302      	movs	r3, #2
 80058ca:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80058ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058d2:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80058d6:	2201      	movs	r2, #1
 80058d8:	2102      	movs	r1, #2
 80058da:	f006 fc3b 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80058de:	f107 020f 	add.w	r2, r7, #15
 80058e2:	f107 0110 	add.w	r1, r7, #16
 80058e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058ea:	4618      	mov	r0, r3
 80058ec:	f006 fce0 	bl	800c2b0 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80058f0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80058f4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d02c      	beq.n	8005958 <Cmd_pmu_bat_vol+0x138>
        for (int i = 0; i < frame_len; i++) {
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005904:	e010      	b.n	8005928 <Cmd_pmu_bat_vol+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005906:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800590a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800590e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005912:	4413      	add	r3, r2
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	4619      	mov	r1, r3
 8005918:	4826      	ldr	r0, [pc, #152]	@ (80059b4 <Cmd_pmu_bat_vol+0x194>)
 800591a:	f7fc fa19 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800591e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005922:	3301      	adds	r3, #1
 8005924:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005928:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800592c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005938:	4293      	cmp	r3, r2
 800593a:	dbe4      	blt.n	8005906 <Cmd_pmu_bat_vol+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800593c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005940:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005944:	781a      	ldrb	r2, [r3, #0]
 8005946:	f107 0310 	add.w	r3, r7, #16
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f7fc fca1 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005952:	f7fc fc87 	bl	8002264 <set_send_flag>
 8005956:	e01d      	b.n	8005994 <Cmd_pmu_bat_vol+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005958:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800595c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005960:	2201      	movs	r2, #1
 8005962:	2102      	movs	r1, #2
 8005964:	f006 fbf6 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005968:	f107 020f 	add.w	r2, r7, #15
 800596c:	f107 0110 	add.w	r1, r7, #16
 8005970:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005974:	4618      	mov	r0, r3
 8005976:	f006 fc9b 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800597a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800597e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	f107 0310 	add.w	r3, r7, #16
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f7fc fc82 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8005990:	f7fc fc68 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005994:	2305      	movs	r3, #5
}
 8005996:	4618      	mov	r0, r3
 8005998:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40020000 	.word	0x40020000
 80059a4:	40005000 	.word	0x40005000
 80059a8:	20005cc0 	.word	0x20005cc0
 80059ac:	40004400 	.word	0x40004400
 80059b0:	20005cc1 	.word	0x20005cc1
 80059b4:	40011000 	.word	0x40011000

080059b8 <Cmd_pmu_parag_in>:

int Cmd_pmu_parag_in(int argc, char *argv[])
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80059be:	af00      	add	r7, sp, #0
 80059c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80059c8:	6018      	str	r0, [r3, #0]
 80059ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059ce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80059d2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80059d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	dc01      	bgt.n	80059e6 <Cmd_pmu_parag_in+0x2e>
 80059e2:	2303      	movs	r3, #3
 80059e4:	e0a3      	b.n	8005b2e <Cmd_pmu_parag_in+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80059e6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059ea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	dd01      	ble.n	80059f8 <Cmd_pmu_parag_in+0x40>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e09a      	b.n	8005b2e <Cmd_pmu_parag_in+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80059f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059fc:	484e      	ldr	r0, [pc, #312]	@ (8005b38 <Cmd_pmu_parag_in+0x180>)
 80059fe:	f7ff fd83 	bl	8005508 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005a02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a06:	484c      	ldr	r0, [pc, #304]	@ (8005b38 <Cmd_pmu_parag_in+0x180>)
 8005a08:	f7ff fd70 	bl	80054ec <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005a0c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a10:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005a22:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	4413      	add	r3, r2
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005a30:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005a34:	4a41      	ldr	r2, [pc, #260]	@ (8005b3c <Cmd_pmu_parag_in+0x184>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d103      	bne.n	8005a42 <Cmd_pmu_parag_in+0x8a>
    	uart_choose_uart5 = 1;
 8005a3a:	4b41      	ldr	r3, [pc, #260]	@ (8005b40 <Cmd_pmu_parag_in+0x188>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	e002      	b.n	8005a48 <Cmd_pmu_parag_in+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005a42:	4b3f      	ldr	r3, [pc, #252]	@ (8005b40 <Cmd_pmu_parag_in+0x188>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005a48:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005a4c:	4a3d      	ldr	r2, [pc, #244]	@ (8005b44 <Cmd_pmu_parag_in+0x18c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d103      	bne.n	8005a5a <Cmd_pmu_parag_in+0xa2>
    	uart_choose_usart2 = 1;
 8005a52:	4b3d      	ldr	r3, [pc, #244]	@ (8005b48 <Cmd_pmu_parag_in+0x190>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	e002      	b.n	8005a60 <Cmd_pmu_parag_in+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <Cmd_pmu_parag_in+0x190>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PARAG_IN;
 8005a60:	2303      	movs	r3, #3
 8005a62:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005a66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a6a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005a6e:	2201      	movs	r2, #1
 8005a70:	2102      	movs	r1, #2
 8005a72:	f006 fb6f 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005a76:	f107 020f 	add.w	r2, r7, #15
 8005a7a:	f107 0110 	add.w	r1, r7, #16
 8005a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a82:	4618      	mov	r0, r3
 8005a84:	f006 fc14 	bl	800c2b0 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005a88:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a8c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d02c      	beq.n	8005af0 <Cmd_pmu_parag_in+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005a96:	2300      	movs	r3, #0
 8005a98:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005a9c:	e010      	b.n	8005ac0 <Cmd_pmu_parag_in+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005a9e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005aa2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005aa6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005aaa:	4413      	add	r3, r2
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4826      	ldr	r0, [pc, #152]	@ (8005b4c <Cmd_pmu_parag_in+0x194>)
 8005ab2:	f7fc f94d 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005ab6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005aba:	3301      	adds	r3, #1
 8005abc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005ac0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005ac4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	dbe4      	blt.n	8005a9e <Cmd_pmu_parag_in+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005ad4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005ad8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005adc:	781a      	ldrb	r2, [r3, #0]
 8005ade:	f107 0310 	add.w	r3, r7, #16
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fc fbd5 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005aea:	f7fc fbbb 	bl	8002264 <set_send_flag>
 8005aee:	e01d      	b.n	8005b2c <Cmd_pmu_parag_in+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005af0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005af4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005af8:	2201      	movs	r2, #1
 8005afa:	2102      	movs	r1, #2
 8005afc:	f006 fb2a 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005b00:	f107 020f 	add.w	r2, r7, #15
 8005b04:	f107 0110 	add.w	r1, r7, #16
 8005b08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f006 fbcf 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005b12:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b16:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	f107 0310 	add.w	r3, r7, #16
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fc fbb6 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8005b28:	f7fc fb9c 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005b2c:	2305      	movs	r3, #5
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40020000 	.word	0x40020000
 8005b3c:	40005000 	.word	0x40005000
 8005b40:	20005cc0 	.word	0x20005cc0
 8005b44:	40004400 	.word	0x40004400
 8005b48:	20005cc1 	.word	0x20005cc1
 8005b4c:	40011000 	.word	0x40011000

08005b50 <Cmd_pmu_parag_out>:

int Cmd_pmu_parag_out(int argc, char *argv[])
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b5c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005b60:	6018      	str	r0, [r3, #0]
 8005b62:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b66:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005b6a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005b6c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b70:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	dc01      	bgt.n	8005b7e <Cmd_pmu_parag_out+0x2e>
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e0a3      	b.n	8005cc6 <Cmd_pmu_parag_out+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005b7e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b82:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	dd01      	ble.n	8005b90 <Cmd_pmu_parag_out+0x40>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e09a      	b.n	8005cc6 <Cmd_pmu_parag_out+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005b90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b94:	484e      	ldr	r0, [pc, #312]	@ (8005cd0 <Cmd_pmu_parag_out+0x180>)
 8005b96:	f7ff fcb7 	bl	8005508 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005b9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b9e:	484c      	ldr	r0, [pc, #304]	@ (8005cd0 <Cmd_pmu_parag_out+0x180>)
 8005ba0:	f7ff fca4 	bl	80054ec <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005ba4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005ba8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005bba:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005bc8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005bcc:	4a41      	ldr	r2, [pc, #260]	@ (8005cd4 <Cmd_pmu_parag_out+0x184>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d103      	bne.n	8005bda <Cmd_pmu_parag_out+0x8a>
    	uart_choose_uart5 = 1;
 8005bd2:	4b41      	ldr	r3, [pc, #260]	@ (8005cd8 <Cmd_pmu_parag_out+0x188>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	e002      	b.n	8005be0 <Cmd_pmu_parag_out+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005bda:	4b3f      	ldr	r3, [pc, #252]	@ (8005cd8 <Cmd_pmu_parag_out+0x188>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005be0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005be4:	4a3d      	ldr	r2, [pc, #244]	@ (8005cdc <Cmd_pmu_parag_out+0x18c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d103      	bne.n	8005bf2 <Cmd_pmu_parag_out+0xa2>
    	uart_choose_usart2 = 1;
 8005bea:	4b3d      	ldr	r3, [pc, #244]	@ (8005ce0 <Cmd_pmu_parag_out+0x190>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	e002      	b.n	8005bf8 <Cmd_pmu_parag_out+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ce0 <Cmd_pmu_parag_out+0x190>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PARAG_OUT;
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005bfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c02:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005c06:	2201      	movs	r2, #1
 8005c08:	2102      	movs	r1, #2
 8005c0a:	f006 faa3 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005c0e:	f107 020f 	add.w	r2, r7, #15
 8005c12:	f107 0110 	add.w	r1, r7, #16
 8005c16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f006 fb48 	bl	800c2b0 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8005c20:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c24:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d02c      	beq.n	8005c88 <Cmd_pmu_parag_out+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005c34:	e010      	b.n	8005c58 <Cmd_pmu_parag_out+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005c36:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c3a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005c3e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005c42:	4413      	add	r3, r2
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	4619      	mov	r1, r3
 8005c48:	4826      	ldr	r0, [pc, #152]	@ (8005ce4 <Cmd_pmu_parag_out+0x194>)
 8005c4a:	f7fc f881 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005c4e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005c52:	3301      	adds	r3, #1
 8005c54:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005c58:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c5c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	dbe4      	blt.n	8005c36 <Cmd_pmu_parag_out+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005c6c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c70:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	f107 0310 	add.w	r3, r7, #16
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fc fb09 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005c82:	f7fc faef 	bl	8002264 <set_send_flag>
 8005c86:	e01d      	b.n	8005cc4 <Cmd_pmu_parag_out+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005c88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c8c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005c90:	2201      	movs	r2, #1
 8005c92:	2102      	movs	r1, #2
 8005c94:	f006 fa5e 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005c98:	f107 020f 	add.w	r2, r7, #15
 8005c9c:	f107 0110 	add.w	r1, r7, #16
 8005ca0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f006 fb03 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005caa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005cae:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005cb2:	781a      	ldrb	r2, [r3, #0]
 8005cb4:	f107 0310 	add.w	r3, r7, #16
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fc faea 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8005cc0:	f7fc fad0 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005cc4:	2305      	movs	r3, #5
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40020000 	.word	0x40020000
 8005cd4:	40005000 	.word	0x40005000
 8005cd8:	20005cc0 	.word	0x20005cc0
 8005cdc:	40004400 	.word	0x40004400
 8005ce0:	20005cc1 	.word	0x20005cc1
 8005ce4:	40011000 	.word	0x40011000

08005ce8 <Cmd_pmu_set_temppoint>:

int Cmd_pmu_set_temppoint(int argc, char *argv[])
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005cee:	af02      	add	r7, sp, #8
 8005cf0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005cf4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005cf8:	6018      	str	r0, [r3, #0]
 8005cfa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005cfe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005d02:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8005d04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d08:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	dc01      	bgt.n	8005d16 <Cmd_pmu_set_temppoint+0x2e>
 8005d12:	2303      	movs	r3, #3
 8005d14:	e0e7      	b.n	8005ee6 <Cmd_pmu_set_temppoint+0x1fe>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8005d16:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d1a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	dd01      	ble.n	8005d28 <Cmd_pmu_set_temppoint+0x40>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e0de      	b.n	8005ee6 <Cmd_pmu_set_temppoint+0x1fe>
    uint16_t lowpoint = atoi(argv[1]);
 8005d28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d2c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3304      	adds	r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f009 f8f0 	bl	800ef1c <atoi>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
   // if (lowpoint > 6)   return CMDLINE_INVALID_ARG;
    uint16_t highpoint = atoi(argv[2]);
 8005d42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d46:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f009 f8e3 	bl	800ef1c <atoi>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
   // if (highpoint > 6)   return CMDLINE_INVALID_ARG;
    if (highpoint < lowpoint)   return CMDLINE_INVALID_ARG;
 8005d5c:	f8b7 2218 	ldrh.w	r2, [r7, #536]	@ 0x218
 8005d60:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d201      	bcs.n	8005d6c <Cmd_pmu_set_temppoint+0x84>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	e0bc      	b.n	8005ee6 <Cmd_pmu_set_temppoint+0x1fe>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005d6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d70:	485f      	ldr	r0, [pc, #380]	@ (8005ef0 <Cmd_pmu_set_temppoint+0x208>)
 8005d72:	f7ff fbc9 	bl	8005508 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005d76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005d7a:	485d      	ldr	r0, [pc, #372]	@ (8005ef0 <Cmd_pmu_set_temppoint+0x208>)
 8005d7c:	f7ff fbb6 	bl	80054ec <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005d80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d84:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005d96:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005da4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005da8:	4a52      	ldr	r2, [pc, #328]	@ (8005ef4 <Cmd_pmu_set_temppoint+0x20c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d103      	bne.n	8005db6 <Cmd_pmu_set_temppoint+0xce>
    	uart_choose_uart5 = 1;
 8005dae:	4b52      	ldr	r3, [pc, #328]	@ (8005ef8 <Cmd_pmu_set_temppoint+0x210>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	e002      	b.n	8005dbc <Cmd_pmu_set_temppoint+0xd4>
    }else{
    	uart_choose_uart5 = 0;
 8005db6:	4b50      	ldr	r3, [pc, #320]	@ (8005ef8 <Cmd_pmu_set_temppoint+0x210>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	701a      	strb	r2, [r3, #0]
    }
    if (USARTx == USART2) {
 8005dbc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005dc0:	4a4e      	ldr	r2, [pc, #312]	@ (8005efc <Cmd_pmu_set_temppoint+0x214>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d103      	bne.n	8005dce <Cmd_pmu_set_temppoint+0xe6>
    	uart_choose_usart2 = 1;
 8005dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8005f00 <Cmd_pmu_set_temppoint+0x218>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e002      	b.n	8005dd4 <Cmd_pmu_set_temppoint+0xec>
    }else{
    	uart_choose_usart2 = 0;
 8005dce:	4b4c      	ldr	r3, [pc, #304]	@ (8005f00 <Cmd_pmu_set_temppoint+0x218>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_TEMP_POINT;
 8005dd4:	2305      	movs	r3, #5
 8005dd6:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = (uint8_t)(lowpoint >> 8);
 8005dda:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = (uint8_t)(lowpoint & 0xFF);
 8005de8:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(highpoint >> 8);
 8005df2:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(highpoint & 0xFF);
 8005e00:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005e0a:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005e0e:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005e12:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	2204      	movs	r2, #4
 8005e20:	f006 f9c0 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005e24:	f107 020b 	add.w	r2, r7, #11
 8005e28:	f107 010c 	add.w	r1, r7, #12
 8005e2c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005e30:	4618      	mov	r0, r3
 8005e32:	f006 fa3d 	bl	800c2b0 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005e36:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e3a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02c      	beq.n	8005e9e <Cmd_pmu_set_temppoint+0x1b6>
        for (int i = 0; i < frame_len; i++) {
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005e4a:	e010      	b.n	8005e6e <Cmd_pmu_set_temppoint+0x186>
            Uart_write(USART1, encoded_frame[i]);
 8005e4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e50:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8005e54:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005e58:	4413      	add	r3, r2
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4829      	ldr	r0, [pc, #164]	@ (8005f04 <Cmd_pmu_set_temppoint+0x21c>)
 8005e60:	f7fb ff76 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005e64:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005e68:	3301      	adds	r3, #1
 8005e6a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005e6e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e72:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	dbe4      	blt.n	8005e4c <Cmd_pmu_set_temppoint+0x164>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005e82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e86:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	f107 030c 	add.w	r3, r7, #12
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fc f9fe 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8005e98:	f7fc f9e4 	bl	8002264 <set_send_flag>
 8005e9c:	e022      	b.n	8005ee4 <Cmd_pmu_set_temppoint+0x1fc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005e9e:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005ea2:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005ea6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	2301      	movs	r3, #1
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	f006 f976 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005eb8:	f107 020b 	add.w	r2, r7, #11
 8005ebc:	f107 010c 	add.w	r1, r7, #12
 8005ec0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f006 f9f3 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005eca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ece:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	f107 030c 	add.w	r3, r7, #12
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fc f9da 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8005ee0:	f7fc f9c0 	bl	8002264 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005ee4:	2305      	movs	r3, #5
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40020000 	.word	0x40020000
 8005ef4:	40005000 	.word	0x40005000
 8005ef8:	20005cc0 	.word	0x20005cc0
 8005efc:	40004400 	.word	0x40004400
 8005f00:	20005cc1 	.word	0x20005cc1
 8005f04:	40011000 	.word	0x40011000

08005f08 <Cmd_pmu_set_output>:

int Cmd_pmu_set_output(int argc, char *argv[])
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005f0e:	af02      	add	r7, sp, #8
 8005f10:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f14:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f18:	6018      	str	r0, [r3, #0]
 8005f1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f1e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005f22:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8005f24:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f28:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	dc01      	bgt.n	8005f36 <Cmd_pmu_set_output+0x2e>
 8005f32:	2303      	movs	r3, #3
 8005f34:	e0c4      	b.n	80060c0 <Cmd_pmu_set_output+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8005f36:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f3a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	dd01      	ble.n	8005f48 <Cmd_pmu_set_output+0x40>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e0bb      	b.n	80060c0 <Cmd_pmu_set_output+0x1b8>
    uint8_t state = atoi(argv[1]);
 8005f48:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f4c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3304      	adds	r3, #4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f008 ffe0 	bl	800ef1c <atoi>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1)   return CMDLINE_INVALID_ARG;
 8005f62:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d901      	bls.n	8005f6e <Cmd_pmu_set_output+0x66>
 8005f6a:	2304      	movs	r3, #4
 8005f6c:	e0a8      	b.n	80060c0 <Cmd_pmu_set_output+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005f6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f72:	4856      	ldr	r0, [pc, #344]	@ (80060cc <Cmd_pmu_set_output+0x1c4>)
 8005f74:	f7ff fac8 	bl	8005508 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005f78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f7c:	4853      	ldr	r0, [pc, #332]	@ (80060cc <Cmd_pmu_set_output+0x1c4>)
 8005f7e:	f7ff fab5 	bl	80054ec <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005f82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f86:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f90:	3b01      	subs	r3, #1
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005f98:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005fa6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005faa:	4a49      	ldr	r2, [pc, #292]	@ (80060d0 <Cmd_pmu_set_output+0x1c8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d103      	bne.n	8005fb8 <Cmd_pmu_set_output+0xb0>
    	uart_choose_uart5 = 1;
 8005fb0:	4b48      	ldr	r3, [pc, #288]	@ (80060d4 <Cmd_pmu_set_output+0x1cc>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	e002      	b.n	8005fbe <Cmd_pmu_set_output+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005fb8:	4b46      	ldr	r3, [pc, #280]	@ (80060d4 <Cmd_pmu_set_output+0x1cc>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005fbe:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005fc2:	4a45      	ldr	r2, [pc, #276]	@ (80060d8 <Cmd_pmu_set_output+0x1d0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d103      	bne.n	8005fd0 <Cmd_pmu_set_output+0xc8>
    	uart_choose_usart2 = 1;
 8005fc8:	4b44      	ldr	r3, [pc, #272]	@ (80060dc <Cmd_pmu_set_output+0x1d4>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	e002      	b.n	8005fd6 <Cmd_pmu_set_output+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8005fd0:	4b42      	ldr	r3, [pc, #264]	@ (80060dc <Cmd_pmu_set_output+0x1d4>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
    }



    uint8_t cmd  = CMD_CODE_PMU_OUTPUT;
 8005fd6:	2306      	movs	r3, #6
 8005fd8:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = state;
 8005fdc:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005fe0:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005fe4:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005fe8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005fec:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	f006 f8d3 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005ffe:	f107 020b 	add.w	r2, r7, #11
 8006002:	f107 010c 	add.w	r1, r7, #12
 8006006:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800600a:	4618      	mov	r0, r3
 800600c:	f006 f950 	bl	800c2b0 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8006010:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006014:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d02c      	beq.n	8006078 <Cmd_pmu_set_output+0x170>
        for (int i = 0; i < frame_len; i++) {
 800601e:	2300      	movs	r3, #0
 8006020:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8006024:	e010      	b.n	8006048 <Cmd_pmu_set_output+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8006026:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800602a:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 800602e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006032:	4413      	add	r3, r2
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	4619      	mov	r1, r3
 8006038:	4829      	ldr	r0, [pc, #164]	@ (80060e0 <Cmd_pmu_set_output+0x1d8>)
 800603a:	f7fb fe89 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800603e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006042:	3301      	adds	r3, #1
 8006044:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8006048:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800604c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006058:	4293      	cmp	r3, r2
 800605a:	dbe4      	blt.n	8006026 <Cmd_pmu_set_output+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800605c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006060:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	f107 030c 	add.w	r3, r7, #12
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f7fc f911 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8006072:	f7fc f8f7 	bl	8002264 <set_send_flag>
 8006076:	e022      	b.n	80060be <Cmd_pmu_set_output+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8006078:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800607c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8006080:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	2301      	movs	r3, #1
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	2302      	movs	r3, #2
 800608c:	2204      	movs	r2, #4
 800608e:	f006 f889 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006092:	f107 020b 	add.w	r2, r7, #11
 8006096:	f107 010c 	add.w	r1, r7, #12
 800609a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800609e:	4618      	mov	r0, r3
 80060a0:	f006 f906 	bl	800c2b0 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 80060a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060a8:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80060ac:	781a      	ldrb	r2, [r3, #0]
 80060ae:	f107 030c 	add.w	r3, r7, #12
 80060b2:	4611      	mov	r1, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fc f8ed 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 80060ba:	f7fc f8d3 	bl	8002264 <set_send_flag>
    }


    return CMDLINE_PENDING;
 80060be:	2305      	movs	r3, #5
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40020000 	.word	0x40020000
 80060d0:	40005000 	.word	0x40005000
 80060d4:	20005cc0 	.word	0x20005cc0
 80060d8:	40004400 	.word	0x40004400
 80060dc:	20005cc1 	.word	0x20005cc1
 80060e0:	40011000 	.word	0x40011000

080060e4 <Cmd_pmu_set_pwm>:

int Cmd_pmu_set_pwm(int argc, char *argv[])
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80060ea:	af02      	add	r7, sp, #8
 80060ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060f0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80060f4:	6018      	str	r0, [r3, #0]
 80060f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060fa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80060fe:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8006100:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006104:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b02      	cmp	r3, #2
 800610c:	dc01      	bgt.n	8006112 <Cmd_pmu_set_pwm+0x2e>
 800610e:	2303      	movs	r3, #3
 8006110:	e0c4      	b.n	800629c <Cmd_pmu_set_pwm+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8006112:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006116:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b03      	cmp	r3, #3
 800611e:	dd01      	ble.n	8006124 <Cmd_pmu_set_pwm+0x40>
 8006120:	2302      	movs	r3, #2
 8006122:	e0bb      	b.n	800629c <Cmd_pmu_set_pwm+0x1b8>
    uint8_t duty = atoi(argv[1]);
 8006124:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006128:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3304      	adds	r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f008 fef2 	bl	800ef1c <atoi>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (duty > 100)   return CMDLINE_INVALID_ARG;
 800613e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8006142:	2b64      	cmp	r3, #100	@ 0x64
 8006144:	d901      	bls.n	800614a <Cmd_pmu_set_pwm+0x66>
 8006146:	2304      	movs	r3, #4
 8006148:	e0a8      	b.n	800629c <Cmd_pmu_set_pwm+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800614a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800614e:	4856      	ldr	r0, [pc, #344]	@ (80062a8 <Cmd_pmu_set_pwm+0x1c4>)
 8006150:	f7ff f9da 	bl	8005508 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006154:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006158:	4853      	ldr	r0, [pc, #332]	@ (80062a8 <Cmd_pmu_set_pwm+0x1c4>)
 800615a:	f7ff f9c7 	bl	80054ec <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800615e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006162:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800616c:	3b01      	subs	r3, #1
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8006174:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8006178:	6812      	ldr	r2, [r2, #0]
 800617a:	4413      	add	r3, r2
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8006182:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8006186:	4a49      	ldr	r2, [pc, #292]	@ (80062ac <Cmd_pmu_set_pwm+0x1c8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d103      	bne.n	8006194 <Cmd_pmu_set_pwm+0xb0>
    	uart_choose_uart5 = 1;
 800618c:	4b48      	ldr	r3, [pc, #288]	@ (80062b0 <Cmd_pmu_set_pwm+0x1cc>)
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	e002      	b.n	800619a <Cmd_pmu_set_pwm+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8006194:	4b46      	ldr	r3, [pc, #280]	@ (80062b0 <Cmd_pmu_set_pwm+0x1cc>)
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800619a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800619e:	4a45      	ldr	r2, [pc, #276]	@ (80062b4 <Cmd_pmu_set_pwm+0x1d0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d103      	bne.n	80061ac <Cmd_pmu_set_pwm+0xc8>
    	uart_choose_usart2 = 1;
 80061a4:	4b44      	ldr	r3, [pc, #272]	@ (80062b8 <Cmd_pmu_set_pwm+0x1d4>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	e002      	b.n	80061b2 <Cmd_pmu_set_pwm+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80061ac:	4b42      	ldr	r3, [pc, #264]	@ (80062b8 <Cmd_pmu_set_pwm+0x1d4>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PMU_PWM;
 80061b2:	2307      	movs	r3, #7
 80061b4:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = duty;
 80061b8:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80061bc:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80061c0:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80061c4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80061c8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	2301      	movs	r3, #1
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	2302      	movs	r3, #2
 80061d4:	2204      	movs	r2, #4
 80061d6:	f005 ffe5 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80061da:	f107 020b 	add.w	r2, r7, #11
 80061de:	f107 010c 	add.w	r1, r7, #12
 80061e2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80061e6:	4618      	mov	r0, r3
 80061e8:	f006 f862 	bl	800c2b0 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80061ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80061f0:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d02c      	beq.n	8006254 <Cmd_pmu_set_pwm+0x170>
        for (int i = 0; i < frame_len; i++) {
 80061fa:	2300      	movs	r3, #0
 80061fc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8006200:	e010      	b.n	8006224 <Cmd_pmu_set_pwm+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8006202:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006206:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 800620a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800620e:	4413      	add	r3, r2
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	4619      	mov	r1, r3
 8006214:	4829      	ldr	r0, [pc, #164]	@ (80062bc <Cmd_pmu_set_pwm+0x1d8>)
 8006216:	f7fb fd9b 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800621a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800621e:	3301      	adds	r3, #1
 8006220:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8006224:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006228:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006234:	4293      	cmp	r3, r2
 8006236:	dbe4      	blt.n	8006202 <Cmd_pmu_set_pwm+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8006238:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800623c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006240:	781a      	ldrb	r2, [r3, #0]
 8006242:	f107 030c 	add.w	r3, r7, #12
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f7fc f823 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 800624e:	f7fc f809 	bl	8002264 <set_send_flag>
 8006252:	e022      	b.n	800629a <Cmd_pmu_set_pwm+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8006254:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8006258:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800625c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	2301      	movs	r3, #1
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	2302      	movs	r3, #2
 8006268:	2204      	movs	r2, #4
 800626a:	f005 ff9b 	bl	800c1a4 <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800626e:	f107 020b 	add.w	r2, r7, #11
 8006272:	f107 010c 	add.w	r1, r7, #12
 8006276:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800627a:	4618      	mov	r0, r3
 800627c:	f006 f818 	bl	800c2b0 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8006280:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006284:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	f107 030c 	add.w	r3, r7, #12
 800628e:	4611      	mov	r1, r2
 8006290:	4618      	mov	r0, r3
 8006292:	f7fb ffff 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 8006296:	f7fb ffe5 	bl	8002264 <set_send_flag>
    }


    return CMDLINE_PENDING;
 800629a:	2305      	movs	r3, #5
}
 800629c:	4618      	mov	r0, r3
 800629e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40020000 	.word	0x40020000
 80062ac:	40005000 	.word	0x40005000
 80062b0:	20005cc0 	.word	0x20005cc0
 80062b4:	40004400 	.word	0x40004400
 80062b8:	20005cc1 	.word	0x20005cc1
 80062bc:	40011000 	.word	0x40011000

080062c0 <Cmd_pmu_get_all>:

int Cmd_pmu_get_all(int argc, char *argv[])
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062cc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80062d0:	6018      	str	r0, [r3, #0]
 80062d2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062d6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80062da:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80062dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062e0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	dc01      	bgt.n	80062ee <Cmd_pmu_get_all+0x2e>
 80062ea:	2303      	movs	r3, #3
 80062ec:	e0a3      	b.n	8006436 <Cmd_pmu_get_all+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80062ee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062f2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	dd01      	ble.n	8006300 <Cmd_pmu_get_all+0x40>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e09a      	b.n	8006436 <Cmd_pmu_get_all+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006300:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006304:	484e      	ldr	r0, [pc, #312]	@ (8006440 <Cmd_pmu_get_all+0x180>)
 8006306:	f7ff f8ff 	bl	8005508 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800630a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800630e:	484c      	ldr	r0, [pc, #304]	@ (8006440 <Cmd_pmu_get_all+0x180>)
 8006310:	f7ff f8ec 	bl	80054ec <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006314:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006318:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006322:	3b01      	subs	r3, #1
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800632a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	4413      	add	r3, r2
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8006338:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800633c:	4a41      	ldr	r2, [pc, #260]	@ (8006444 <Cmd_pmu_get_all+0x184>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d103      	bne.n	800634a <Cmd_pmu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 8006342:	4b41      	ldr	r3, [pc, #260]	@ (8006448 <Cmd_pmu_get_all+0x188>)
 8006344:	2201      	movs	r2, #1
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	e002      	b.n	8006350 <Cmd_pmu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800634a:	4b3f      	ldr	r3, [pc, #252]	@ (8006448 <Cmd_pmu_get_all+0x188>)
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8006350:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8006354:	4a3d      	ldr	r2, [pc, #244]	@ (800644c <Cmd_pmu_get_all+0x18c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d103      	bne.n	8006362 <Cmd_pmu_get_all+0xa2>
    	uart_choose_usart2 = 1;
 800635a:	4b3d      	ldr	r3, [pc, #244]	@ (8006450 <Cmd_pmu_get_all+0x190>)
 800635c:	2201      	movs	r2, #1
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	e002      	b.n	8006368 <Cmd_pmu_get_all+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8006362:	4b3b      	ldr	r3, [pc, #236]	@ (8006450 <Cmd_pmu_get_all+0x190>)
 8006364:	2200      	movs	r2, #0
 8006366:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_PMU_ALL;
 8006368:	2308      	movs	r3, #8
 800636a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800636e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006372:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8006376:	2201      	movs	r2, #1
 8006378:	2102      	movs	r1, #2
 800637a:	f005 feeb 	bl	800c154 <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800637e:	f107 020f 	add.w	r2, r7, #15
 8006382:	f107 0110 	add.w	r1, r7, #16
 8006386:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800638a:	4618      	mov	r0, r3
 800638c:	f005 ff90 	bl	800c2b0 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8006390:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006394:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d02c      	beq.n	80063f8 <Cmd_pmu_get_all+0x138>
        for (int i = 0; i < frame_len; i++) {
 800639e:	2300      	movs	r3, #0
 80063a0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80063a4:	e010      	b.n	80063c8 <Cmd_pmu_get_all+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80063a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80063aa:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80063ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80063b2:	4413      	add	r3, r2
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	4619      	mov	r1, r3
 80063b8:	4826      	ldr	r0, [pc, #152]	@ (8006454 <Cmd_pmu_get_all+0x194>)
 80063ba:	f7fb fcc9 	bl	8001d50 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80063be:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80063c2:	3301      	adds	r3, #1
 80063c4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80063c8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80063cc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80063d8:	4293      	cmp	r3, r2
 80063da:	dbe4      	blt.n	80063a6 <Cmd_pmu_get_all+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80063dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80063e0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80063e4:	781a      	ldrb	r2, [r3, #0]
 80063e6:	f107 0310 	add.w	r3, r7, #16
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fb ff51 	bl	8002294 <set_fsp_packet>
        set_send_flag();
 80063f2:	f7fb ff37 	bl	8002264 <set_send_flag>
 80063f6:	e01d      	b.n	8006434 <Cmd_pmu_get_all+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80063f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063fc:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8006400:	2201      	movs	r2, #1
 8006402:	2102      	movs	r1, #2
 8006404:	f005 fea6 	bl	800c154 <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006408:	f107 020f 	add.w	r2, r7, #15
 800640c:	f107 0110 	add.w	r1, r7, #16
 8006410:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006414:	4618      	mov	r0, r3
 8006416:	f005 ff4b 	bl	800c2b0 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800641a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800641e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8006422:	781a      	ldrb	r2, [r3, #0]
 8006424:	f107 0310 	add.w	r3, r7, #16
 8006428:	4611      	mov	r1, r2
 800642a:	4618      	mov	r0, r3
 800642c:	f7fb ff32 	bl	8002294 <set_fsp_packet>
		set_send_flag();
 8006430:	f7fb ff18 	bl	8002264 <set_send_flag>
    }
    return CMDLINE_PENDING;
 8006434:	2305      	movs	r3, #5
}
 8006436:	4618      	mov	r0, r3
 8006438:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40020000 	.word	0x40020000
 8006444:	40005000 	.word	0x40005000
 8006448:	20005cc0 	.word	0x20005cc0
 800644c:	40004400 	.word	0x40004400
 8006450:	20005cc1 	.word	0x20005cc1
 8006454:	40011000 	.word	0x40011000

08006458 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 8006462:	2301      	movs	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 800646e:	e01f      	b.n	80064b0 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b20      	cmp	r3, #32
 8006476:	d105      	bne.n	8006484 <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 800647e:	2301      	movs	r3, #1
 8006480:	73fb      	strb	r3, [r7, #15]
 8006482:	e012      	b.n	80064aa <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00f      	beq.n	80064aa <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b07      	cmp	r3, #7
 800648e:	d80a      	bhi.n	80064a6 <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8006490:	4920      	ldr	r1, [pc, #128]	@ (8006514 <CmdLineProcess+0xbc>)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	3301      	adds	r3, #1
 800649e:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 80064a0:	2300      	movs	r3, #0
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	e001      	b.n	80064aa <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 80064a6:	2302      	movs	r3, #2
 80064a8:	e030      	b.n	800650c <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	3301      	adds	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1db      	bne.n	8006470 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d025      	beq.n	800650a <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 80064be:	4915      	ldr	r1, [pc, #84]	@ (8006514 <CmdLineProcess+0xbc>)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	3301      	adds	r3, #1
 80064cc:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 80064ce:	4b12      	ldr	r3, [pc, #72]	@ (8006518 <CmdLineProcess+0xc0>)
 80064d0:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 80064d2:	e016      	b.n	8006502 <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 80064d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006514 <CmdLineProcess+0xbc>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f7f9 fe76 	bl	80001d0 <strcmp>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d108      	bne.n	80064fc <CmdLineProcess+0xa4>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4908      	ldr	r1, [pc, #32]	@ (8006514 <CmdLineProcess+0xbc>)
 80064f2:	4610      	mov	r0, r2
 80064f4:	4798      	blx	r3
 80064f6:	4603      	mov	r3, r0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	e007      	b.n	800650c <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	330c      	adds	r3, #12
 8006500:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e4      	bne.n	80064d4 <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 800650a:	2301      	movs	r3, #1
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20005cc4 	.word	0x20005cc4
 8006518:	20000134 	.word	0x20000134

0800651c <__NVIC_SystemReset>:
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006520:	f3bf 8f4f 	dsb	sy
}
 8006524:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006526:	4b06      	ldr	r3, [pc, #24]	@ (8006540 <__NVIC_SystemReset+0x24>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800652e:	4904      	ldr	r1, [pc, #16]	@ (8006540 <__NVIC_SystemReset+0x24>)
 8006530:	4b04      	ldr	r3, [pc, #16]	@ (8006544 <__NVIC_SystemReset+0x28>)
 8006532:	4313      	orrs	r3, r2
 8006534:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006536:	f3bf 8f4f 	dsb	sy
}
 800653a:	bf00      	nop
    __NOP();
 800653c:	bf00      	nop
 800653e:	e7fd      	b.n	800653c <__NVIC_SystemReset+0x20>
 8006540:	e000ed00 	.word	0xe000ed00
 8006544:	05fa0004 	.word	0x05fa0004

08006548 <LL_USART_Enable>:
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60da      	str	r2, [r3, #12]
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <LL_USART_Disable>:
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60da      	str	r2, [r3, #12]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <LL_USART_SetBaudRate>:
{
 8006588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800658c:	b0c0      	sub	sp, #256	@ 0x100
 800658e:	af00      	add	r7, sp, #0
 8006590:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006594:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8006598:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800659c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a8:	f040 810c 	bne.w	80067c4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80065ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065be:	4622      	mov	r2, r4
 80065c0:	462b      	mov	r3, r5
 80065c2:	1891      	adds	r1, r2, r2
 80065c4:	6639      	str	r1, [r7, #96]	@ 0x60
 80065c6:	415b      	adcs	r3, r3
 80065c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80065ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80065ce:	4621      	mov	r1, r4
 80065d0:	eb12 0801 	adds.w	r8, r2, r1
 80065d4:	4629      	mov	r1, r5
 80065d6:	eb43 0901 	adc.w	r9, r3, r1
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ee:	4690      	mov	r8, r2
 80065f0:	4699      	mov	r9, r3
 80065f2:	4623      	mov	r3, r4
 80065f4:	eb18 0303 	adds.w	r3, r8, r3
 80065f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065fc:	462b      	mov	r3, r5
 80065fe:	eb49 0303 	adc.w	r3, r9, r3
 8006602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006606:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800660a:	2200      	movs	r2, #0
 800660c:	469a      	mov	sl, r3
 800660e:	4693      	mov	fp, r2
 8006610:	eb1a 030a 	adds.w	r3, sl, sl
 8006614:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006616:	eb4b 030b 	adc.w	r3, fp, fp
 800661a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800661c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006620:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006624:	f7fa fb40 	bl	8000ca8 <__aeabi_uldivmod>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4b64      	ldr	r3, [pc, #400]	@ (80067c0 <LL_USART_SetBaudRate+0x238>)
 800662e:	fba3 2302 	umull	r2, r3, r3, r2
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	b29b      	uxth	r3, r3
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	b29c      	uxth	r4, r3
 800663a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800663e:	2200      	movs	r2, #0
 8006640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006644:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006648:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800664c:	4642      	mov	r2, r8
 800664e:	464b      	mov	r3, r9
 8006650:	1891      	adds	r1, r2, r2
 8006652:	6539      	str	r1, [r7, #80]	@ 0x50
 8006654:	415b      	adcs	r3, r3
 8006656:	657b      	str	r3, [r7, #84]	@ 0x54
 8006658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800665c:	4641      	mov	r1, r8
 800665e:	1851      	adds	r1, r2, r1
 8006660:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006662:	4649      	mov	r1, r9
 8006664:	414b      	adcs	r3, r1
 8006666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8006674:	4659      	mov	r1, fp
 8006676:	00cb      	lsls	r3, r1, #3
 8006678:	4651      	mov	r1, sl
 800667a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800667e:	4651      	mov	r1, sl
 8006680:	00ca      	lsls	r2, r1, #3
 8006682:	4610      	mov	r0, r2
 8006684:	4619      	mov	r1, r3
 8006686:	4603      	mov	r3, r0
 8006688:	4642      	mov	r2, r8
 800668a:	189b      	adds	r3, r3, r2
 800668c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006690:	464b      	mov	r3, r9
 8006692:	460a      	mov	r2, r1
 8006694:	eb42 0303 	adc.w	r3, r2, r3
 8006698:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800669c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066a6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80066aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80066ae:	460b      	mov	r3, r1
 80066b0:	18db      	adds	r3, r3, r3
 80066b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80066b4:	4613      	mov	r3, r2
 80066b6:	eb42 0303 	adc.w	r3, r2, r3
 80066ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80066bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066c0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80066c4:	f7fa faf0 	bl	8000ca8 <__aeabi_uldivmod>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4611      	mov	r1, r2
 80066ce:	4b3c      	ldr	r3, [pc, #240]	@ (80067c0 <LL_USART_SetBaudRate+0x238>)
 80066d0:	fba3 2301 	umull	r2, r3, r3, r1
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	2264      	movs	r2, #100	@ 0x64
 80066d8:	fb02 f303 	mul.w	r3, r2, r3
 80066dc:	1acb      	subs	r3, r1, r3
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066e4:	4b36      	ldr	r3, [pc, #216]	@ (80067c0 <LL_USART_SetBaudRate+0x238>)
 80066e6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	4423      	add	r3, r4
 80066fa:	b29c      	uxth	r4, r3
 80066fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006700:	2200      	movs	r2, #0
 8006702:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006706:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800670a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800670e:	4642      	mov	r2, r8
 8006710:	464b      	mov	r3, r9
 8006712:	1891      	adds	r1, r2, r2
 8006714:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006716:	415b      	adcs	r3, r3
 8006718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800671a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800671e:	4641      	mov	r1, r8
 8006720:	1851      	adds	r1, r2, r1
 8006722:	6339      	str	r1, [r7, #48]	@ 0x30
 8006724:	4649      	mov	r1, r9
 8006726:	414b      	adcs	r3, r1
 8006728:	637b      	str	r3, [r7, #52]	@ 0x34
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006736:	4659      	mov	r1, fp
 8006738:	00cb      	lsls	r3, r1, #3
 800673a:	4651      	mov	r1, sl
 800673c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006740:	4651      	mov	r1, sl
 8006742:	00ca      	lsls	r2, r1, #3
 8006744:	4610      	mov	r0, r2
 8006746:	4619      	mov	r1, r3
 8006748:	4603      	mov	r3, r0
 800674a:	4642      	mov	r2, r8
 800674c:	189b      	adds	r3, r3, r2
 800674e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006752:	464b      	mov	r3, r9
 8006754:	460a      	mov	r2, r1
 8006756:	eb42 0303 	adc.w	r3, r2, r3
 800675a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800675e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006762:	2200      	movs	r2, #0
 8006764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006768:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800676c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006770:	460b      	mov	r3, r1
 8006772:	18db      	adds	r3, r3, r3
 8006774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006776:	4613      	mov	r3, r2
 8006778:	eb42 0303 	adc.w	r3, r2, r3
 800677c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800677e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006782:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8006786:	f7fa fa8f 	bl	8000ca8 <__aeabi_uldivmod>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4b0c      	ldr	r3, [pc, #48]	@ (80067c0 <LL_USART_SetBaudRate+0x238>)
 8006790:	fba3 1302 	umull	r1, r3, r3, r2
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	2164      	movs	r1, #100	@ 0x64
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	3332      	adds	r3, #50	@ 0x32
 80067a2:	4a07      	ldr	r2, [pc, #28]	@ (80067c0 <LL_USART_SetBaudRate+0x238>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4423      	add	r3, r4
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067bc:	609a      	str	r2, [r3, #8]
}
 80067be:	e108      	b.n	80069d2 <LL_USART_SetBaudRate+0x44a>
 80067c0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80067c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067ce:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067d2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80067d6:	4642      	mov	r2, r8
 80067d8:	464b      	mov	r3, r9
 80067da:	1891      	adds	r1, r2, r2
 80067dc:	6239      	str	r1, [r7, #32]
 80067de:	415b      	adcs	r3, r3
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067e6:	4641      	mov	r1, r8
 80067e8:	1854      	adds	r4, r2, r1
 80067ea:	4649      	mov	r1, r9
 80067ec:	eb43 0501 	adc.w	r5, r3, r1
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	00eb      	lsls	r3, r5, #3
 80067fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067fe:	00e2      	lsls	r2, r4, #3
 8006800:	4614      	mov	r4, r2
 8006802:	461d      	mov	r5, r3
 8006804:	4643      	mov	r3, r8
 8006806:	18e3      	adds	r3, r4, r3
 8006808:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800680c:	464b      	mov	r3, r9
 800680e:	eb45 0303 	adc.w	r3, r5, r3
 8006812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006816:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800681a:	2200      	movs	r2, #0
 800681c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006820:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8006830:	4629      	mov	r1, r5
 8006832:	008b      	lsls	r3, r1, #2
 8006834:	4621      	mov	r1, r4
 8006836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800683a:	4621      	mov	r1, r4
 800683c:	008a      	lsls	r2, r1, #2
 800683e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8006842:	f7fa fa31 	bl	8000ca8 <__aeabi_uldivmod>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4b65      	ldr	r3, [pc, #404]	@ (80069e0 <LL_USART_SetBaudRate+0x458>)
 800684c:	fba3 2302 	umull	r2, r3, r3, r2
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	b29b      	uxth	r3, r3
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	b29c      	uxth	r4, r3
 8006858:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800685c:	2200      	movs	r2, #0
 800685e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006862:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006866:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800686a:	4642      	mov	r2, r8
 800686c:	464b      	mov	r3, r9
 800686e:	1891      	adds	r1, r2, r2
 8006870:	61b9      	str	r1, [r7, #24]
 8006872:	415b      	adcs	r3, r3
 8006874:	61fb      	str	r3, [r7, #28]
 8006876:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800687a:	4641      	mov	r1, r8
 800687c:	1851      	adds	r1, r2, r1
 800687e:	6139      	str	r1, [r7, #16]
 8006880:	4649      	mov	r1, r9
 8006882:	414b      	adcs	r3, r1
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006892:	4659      	mov	r1, fp
 8006894:	00cb      	lsls	r3, r1, #3
 8006896:	4651      	mov	r1, sl
 8006898:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800689c:	4651      	mov	r1, sl
 800689e:	00ca      	lsls	r2, r1, #3
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	4642      	mov	r2, r8
 80068a8:	189b      	adds	r3, r3, r2
 80068aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068ae:	464b      	mov	r3, r9
 80068b0:	460a      	mov	r2, r1
 80068b2:	eb42 0303 	adc.w	r3, r2, r3
 80068b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068c4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80068d4:	4649      	mov	r1, r9
 80068d6:	008b      	lsls	r3, r1, #2
 80068d8:	4641      	mov	r1, r8
 80068da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068de:	4641      	mov	r1, r8
 80068e0:	008a      	lsls	r2, r1, #2
 80068e2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80068e6:	f7fa f9df 	bl	8000ca8 <__aeabi_uldivmod>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4611      	mov	r1, r2
 80068f0:	4b3b      	ldr	r3, [pc, #236]	@ (80069e0 <LL_USART_SetBaudRate+0x458>)
 80068f2:	fba3 2301 	umull	r2, r3, r3, r1
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	2264      	movs	r2, #100	@ 0x64
 80068fa:	fb02 f303 	mul.w	r3, r2, r3
 80068fe:	1acb      	subs	r3, r1, r3
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	3332      	adds	r3, #50	@ 0x32
 8006904:	4a36      	ldr	r2, [pc, #216]	@ (80069e0 <LL_USART_SetBaudRate+0x458>)
 8006906:	fba2 2303 	umull	r2, r3, r2, r3
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	b29b      	uxth	r3, r3
 800690e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006912:	b29b      	uxth	r3, r3
 8006914:	4423      	add	r3, r4
 8006916:	b29c      	uxth	r4, r3
 8006918:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800691c:	2200      	movs	r2, #0
 800691e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006920:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006922:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006926:	4642      	mov	r2, r8
 8006928:	464b      	mov	r3, r9
 800692a:	1891      	adds	r1, r2, r2
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	415b      	adcs	r3, r3
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006936:	4641      	mov	r1, r8
 8006938:	1851      	adds	r1, r2, r1
 800693a:	6039      	str	r1, [r7, #0]
 800693c:	4649      	mov	r1, r9
 800693e:	414b      	adcs	r3, r1
 8006940:	607b      	str	r3, [r7, #4]
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800694e:	4659      	mov	r1, fp
 8006950:	00cb      	lsls	r3, r1, #3
 8006952:	4651      	mov	r1, sl
 8006954:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006958:	4651      	mov	r1, sl
 800695a:	00ca      	lsls	r2, r1, #3
 800695c:	4610      	mov	r0, r2
 800695e:	4619      	mov	r1, r3
 8006960:	4603      	mov	r3, r0
 8006962:	4642      	mov	r2, r8
 8006964:	189b      	adds	r3, r3, r2
 8006966:	673b      	str	r3, [r7, #112]	@ 0x70
 8006968:	464b      	mov	r3, r9
 800696a:	460a      	mov	r2, r1
 800696c:	eb42 0303 	adc.w	r3, r2, r3
 8006970:	677b      	str	r3, [r7, #116]	@ 0x74
 8006972:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006976:	2200      	movs	r2, #0
 8006978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800697a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8006988:	4649      	mov	r1, r9
 800698a:	008b      	lsls	r3, r1, #2
 800698c:	4641      	mov	r1, r8
 800698e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006992:	4641      	mov	r1, r8
 8006994:	008a      	lsls	r2, r1, #2
 8006996:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800699a:	f7fa f985 	bl	8000ca8 <__aeabi_uldivmod>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4b0f      	ldr	r3, [pc, #60]	@ (80069e0 <LL_USART_SetBaudRate+0x458>)
 80069a4:	fba3 1302 	umull	r1, r3, r3, r2
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	2164      	movs	r1, #100	@ 0x64
 80069ac:	fb01 f303 	mul.w	r3, r1, r3
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	3332      	adds	r3, #50	@ 0x32
 80069b6:	4a0a      	ldr	r2, [pc, #40]	@ (80069e0 <LL_USART_SetBaudRate+0x458>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	4423      	add	r3, r4
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069d0:	609a      	str	r2, [r3, #8]
}
 80069d2:	bf00      	nop
 80069d4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069d8:	46bd      	mov	sp, r7
 80069da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069de:	bf00      	nop
 80069e0:	51eb851f 	.word	0x51eb851f

080069e4 <LL_GPIO_IsOutputPinSet>:
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	4013      	ands	r3, r2
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	bf0c      	ite	eq
 80069fc:	2301      	moveq	r3, #1
 80069fe:	2300      	movne	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <LL_GPIO_SetOutputPin>:
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	619a      	str	r2, [r3, #24]
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <LL_GPIO_ResetOutputPin>:
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	041a      	lsls	r2, r3, #16
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	619a      	str	r2, [r3, #24]
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <command_init>:
		command_task_update                // taskFunction;
	}
};

void	command_init(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8006a4e:	f7fa ffd5 	bl	80019fc <Ringbuf_init>

//	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 8006a52:	22ff      	movs	r2, #255	@ 0xff
 8006a54:	2100      	movs	r1, #0
 8006a56:	4838      	ldr	r0, [pc, #224]	@ (8006b38 <command_init+0xf0>)
 8006a58:	f009 fa7b 	bl	800ff52 <memset>
	s_commandBufferIndex = 0;
 8006a5c:	4b37      	ldr	r3, [pc, #220]	@ (8006b3c <command_init+0xf4>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	701a      	strb	r2, [r3, #0]
//	Uart_sendstring(UART5,"\r\n");
//	Uart_sendstring(UART5,"> CPOC FIRMWARE V1.2.0 \r\n");
//	Uart_sendstring(UART5,"\r\n");

    Uart_sendstring(UART4, "\r\n");
 8006a62:	4937      	ldr	r1, [pc, #220]	@ (8006b40 <command_init+0xf8>)
 8006a64:	4837      	ldr	r0, [pc, #220]	@ (8006b44 <command_init+0xfc>)
 8006a66:	f7fb fac7 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(UART4, "> CPOC FIRMWARE V1.2.0 \r\n");
 8006a6a:	4937      	ldr	r1, [pc, #220]	@ (8006b48 <command_init+0x100>)
 8006a6c:	4835      	ldr	r0, [pc, #212]	@ (8006b44 <command_init+0xfc>)
 8006a6e:	f7fb fac3 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(UART4, "\r\n");
 8006a72:	4933      	ldr	r1, [pc, #204]	@ (8006b40 <command_init+0xf8>)
 8006a74:	4833      	ldr	r0, [pc, #204]	@ (8006b44 <command_init+0xfc>)
 8006a76:	f7fb fabf 	bl	8001ff8 <Uart_sendstring>

    Uart_sendstring(USART2, "B");
 8006a7a:	4934      	ldr	r1, [pc, #208]	@ (8006b4c <command_init+0x104>)
 8006a7c:	4834      	ldr	r0, [pc, #208]	@ (8006b50 <command_init+0x108>)
 8006a7e:	f7fb fabb 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n");
 8006a82:	492f      	ldr	r1, [pc, #188]	@ (8006b40 <command_init+0xf8>)
 8006a84:	4832      	ldr	r0, [pc, #200]	@ (8006b50 <command_init+0x108>)
 8006a86:	f7fb fab7 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "> CPOC FIRMWARE V1.2.0 \r\n");
 8006a8a:	492f      	ldr	r1, [pc, #188]	@ (8006b48 <command_init+0x100>)
 8006a8c:	4830      	ldr	r0, [pc, #192]	@ (8006b50 <command_init+0x108>)
 8006a8e:	f7fb fab3 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n");
 8006a92:	492b      	ldr	r1, [pc, #172]	@ (8006b40 <command_init+0xf8>)
 8006a94:	482e      	ldr	r0, [pc, #184]	@ (8006b50 <command_init+0x108>)
 8006a96:	f7fb faaf 	bl	8001ff8 <Uart_sendstring>

    command_send_splash();
 8006a9a:	f000 ffdb 	bl	8007a54 <command_send_splash>
	tCmdLineEntry *pEntry;


//	Uart_sendstring(UART5, "\nStart with <help_xxxx> command\r\n");
//	Uart_sendstring(UART5, "-------------------------------------\r\n");
    Uart_sendstring(UART4, "\nStart with <help_xxxx> command\r\n");
 8006a9e:	492d      	ldr	r1, [pc, #180]	@ (8006b54 <command_init+0x10c>)
 8006aa0:	4828      	ldr	r0, [pc, #160]	@ (8006b44 <command_init+0xfc>)
 8006aa2:	f7fb faa9 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(UART4, "-------------------------------------\r\n");
 8006aa6:	492c      	ldr	r1, [pc, #176]	@ (8006b58 <command_init+0x110>)
 8006aa8:	4826      	ldr	r0, [pc, #152]	@ (8006b44 <command_init+0xfc>)
 8006aaa:	f7fb faa5 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "\nStart with <help_xxxx> command\r\n");
 8006aae:	4929      	ldr	r1, [pc, #164]	@ (8006b54 <command_init+0x10c>)
 8006ab0:	4827      	ldr	r0, [pc, #156]	@ (8006b50 <command_init+0x108>)
 8006ab2:	f7fb faa1 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "-------------------------------------\r\n");
 8006ab6:	4928      	ldr	r1, [pc, #160]	@ (8006b58 <command_init+0x110>)
 8006ab8:	4825      	ldr	r0, [pc, #148]	@ (8006b50 <command_init+0x108>)
 8006aba:	f7fb fa9d 	bl	8001ff8 <Uart_sendstring>

	pEntry = &g_psCmdTable[0];
 8006abe:	4b27      	ldr	r3, [pc, #156]	@ (8006b5c <command_init+0x114>)
 8006ac0:	607b      	str	r3, [r7, #4]

	while (pEntry->pcCmd) {
 8006ac2:	e026      	b.n	8006b12 <command_init+0xca>
//		Uart_sendstring(UART5, pEntry->pcCmd);
//		Uart_sendstring(UART5, pEntry->pcHelp);
//		Uart_sendstring(UART5, "\r\n");

        Uart_sendstring(UART4, pEntry->pcCmd);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	481e      	ldr	r0, [pc, #120]	@ (8006b44 <command_init+0xfc>)
 8006acc:	f7fb fa94 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(UART4, pEntry->pcHelp);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	481b      	ldr	r0, [pc, #108]	@ (8006b44 <command_init+0xfc>)
 8006ad8:	f7fb fa8e 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(UART4, "\r\n");
 8006adc:	4918      	ldr	r1, [pc, #96]	@ (8006b40 <command_init+0xf8>)
 8006ade:	4819      	ldr	r0, [pc, #100]	@ (8006b44 <command_init+0xfc>)
 8006ae0:	f7fb fa8a 	bl	8001ff8 <Uart_sendstring>

        Uart_sendstring(USART2, pEntry->pcCmd);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4819      	ldr	r0, [pc, #100]	@ (8006b50 <command_init+0x108>)
 8006aec:	f7fb fa84 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(USART2, pEntry->pcHelp);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4619      	mov	r1, r3
 8006af6:	4816      	ldr	r0, [pc, #88]	@ (8006b50 <command_init+0x108>)
 8006af8:	f7fb fa7e 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(USART2, "\r\n");
 8006afc:	4910      	ldr	r1, [pc, #64]	@ (8006b40 <command_init+0xf8>)
 8006afe:	4814      	ldr	r0, [pc, #80]	@ (8006b50 <command_init+0x108>)
 8006b00:	f7fb fa7a 	bl	8001ff8 <Uart_sendstring>

	    if (pEntry == &g_psCmdTable[12]) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a16      	ldr	r2, [pc, #88]	@ (8006b60 <command_init+0x118>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d007      	beq.n	8006b1c <command_init+0xd4>
	        break;
	    }
	    pEntry++;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	330c      	adds	r3, #12
 8006b10:	607b      	str	r3, [r7, #4]
	while (pEntry->pcCmd) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1d4      	bne.n	8006ac4 <command_init+0x7c>
 8006b1a:	e000      	b.n	8006b1e <command_init+0xd6>
	        break;
 8006b1c:	bf00      	nop
	}

//	Uart_sendstring(UART5, "\r\n> ");
    Uart_sendstring(UART4, "\r\n> ");
 8006b1e:	4911      	ldr	r1, [pc, #68]	@ (8006b64 <command_init+0x11c>)
 8006b20:	4808      	ldr	r0, [pc, #32]	@ (8006b44 <command_init+0xfc>)
 8006b22:	f7fb fa69 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n> ");
 8006b26:	490f      	ldr	r1, [pc, #60]	@ (8006b64 <command_init+0x11c>)
 8006b28:	4809      	ldr	r0, [pc, #36]	@ (8006b50 <command_init+0x108>)
 8006b2a:	f7fb fa65 	bl	8001ff8 <Uart_sendstring>
}
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20005ce8 	.word	0x20005ce8
 8006b3c:	20005de7 	.word	0x20005de7
 8006b40:	08014c1c 	.word	0x08014c1c
 8006b44:	40004c00 	.word	0x40004c00
 8006b48:	08014c20 	.word	0x08014c20
 8006b4c:	08014c3c 	.word	0x08014c3c
 8006b50:	40004400 	.word	0x40004400
 8006b54:	08014c40 	.word	0x08014c40
 8006b58:	08014c64 	.word	0x08014c64
 8006b5c:	20000134 	.word	0x20000134
 8006b60:	200001c4 	.word	0x200001c4
 8006b64:	08014c8c 	.word	0x08014c8c

08006b68 <command_task_update>:
volatile uint8_t rs422_report_enable = 0;
void process_command(USART_TypeDef* USARTx, char rxData);


static void command_task_update(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
    char rxData;


    while (IsDataAvailable(UART4) || IsDataAvailable(USART2))
 8006b6e:	e029      	b.n	8006bc4 <command_task_update+0x5c>
//            rxData = Uart_read(UART5);
//            Uart_write(UART5, rxData);
//            process_command(UART5, rxData);
//        }

        if (IsDataAvailable(UART4)) {
 8006b70:	481d      	ldr	r0, [pc, #116]	@ (8006be8 <command_task_update+0x80>)
 8006b72:	f7fb f9e7 	bl	8001f44 <IsDataAvailable>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00e      	beq.n	8006b9a <command_task_update+0x32>
            rxData = Uart_read(UART4);
 8006b7c:	481a      	ldr	r0, [pc, #104]	@ (8006be8 <command_task_update+0x80>)
 8006b7e:	f7fb f823 	bl	8001bc8 <Uart_read>
 8006b82:	4603      	mov	r3, r0
 8006b84:	71fb      	strb	r3, [r7, #7]
            Uart_write(UART4, rxData);
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4817      	ldr	r0, [pc, #92]	@ (8006be8 <command_task_update+0x80>)
 8006b8c:	f7fb f8e0 	bl	8001d50 <Uart_write>
            process_command(UART4, rxData);
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	4619      	mov	r1, r3
 8006b94:	4814      	ldr	r0, [pc, #80]	@ (8006be8 <command_task_update+0x80>)
 8006b96:	f000 f82b 	bl	8006bf0 <process_command>
        }

        if (IsDataAvailable(USART2)) {
 8006b9a:	4814      	ldr	r0, [pc, #80]	@ (8006bec <command_task_update+0x84>)
 8006b9c:	f7fb f9d2 	bl	8001f44 <IsDataAvailable>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00e      	beq.n	8006bc4 <command_task_update+0x5c>
            rxData = Uart_read(USART2);
 8006ba6:	4811      	ldr	r0, [pc, #68]	@ (8006bec <command_task_update+0x84>)
 8006ba8:	f7fb f80e 	bl	8001bc8 <Uart_read>
 8006bac:	4603      	mov	r3, r0
 8006bae:	71fb      	strb	r3, [r7, #7]
            Uart_write(USART2, rxData);
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	480d      	ldr	r0, [pc, #52]	@ (8006bec <command_task_update+0x84>)
 8006bb6:	f7fb f8cb 	bl	8001d50 <Uart_write>
            process_command(USART2, rxData);
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	480b      	ldr	r0, [pc, #44]	@ (8006bec <command_task_update+0x84>)
 8006bc0:	f000 f816 	bl	8006bf0 <process_command>
    while (IsDataAvailable(UART4) || IsDataAvailable(USART2))
 8006bc4:	4808      	ldr	r0, [pc, #32]	@ (8006be8 <command_task_update+0x80>)
 8006bc6:	f7fb f9bd 	bl	8001f44 <IsDataAvailable>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1cf      	bne.n	8006b70 <command_task_update+0x8>
 8006bd0:	4806      	ldr	r0, [pc, #24]	@ (8006bec <command_task_update+0x84>)
 8006bd2:	f7fb f9b7 	bl	8001f44 <IsDataAvailable>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1c9      	bne.n	8006b70 <command_task_update+0x8>
        }
    }
}
 8006bdc:	bf00      	nop
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40004c00 	.word	0x40004c00
 8006bec:	40004400 	.word	0x40004400

08006bf0 <process_command>:

void process_command(USART_TypeDef* USARTx, char rxData)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
    int8_t ret_val;
    if (rxData == 27)  // ASCII code for ESC key
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	2b1b      	cmp	r3, #27
 8006c00:	d10c      	bne.n	8006c1c <process_command+0x2c>
    {
    	auto_report_enabled = 0;
 8006c02:	4b31      	ldr	r3, [pc, #196]	@ (8006cc8 <process_command+0xd8>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
        rs422_report_enable = 0;
 8006c08:	4b30      	ldr	r3, [pc, #192]	@ (8006ccc <process_command+0xdc>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
        rf_report_enable = 0;
 8006c0e:	4b30      	ldr	r3, [pc, #192]	@ (8006cd0 <process_command+0xe0>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
        gps_report_enable = 0;
 8006c14:	4b2f      	ldr	r3, [pc, #188]	@ (8006cd4 <process_command+0xe4>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
        return;
 8006c1a:	e052      	b.n	8006cc2 <process_command+0xd2>
    }

    if ((rxData == '\r') || (rxData == '\n'))
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	2b0d      	cmp	r3, #13
 8006c20:	d002      	beq.n	8006c28 <process_command+0x38>
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	2b0a      	cmp	r3, #10
 8006c26:	d12f      	bne.n	8006c88 <process_command+0x98>
    {
        if (s_commandBufferIndex > 0)
 8006c28:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd8 <process_command+0xe8>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d026      	beq.n	8006c7e <process_command+0x8e>
        {
            s_commandBuffer[s_commandBufferIndex] = 0;
 8006c30:	4b29      	ldr	r3, [pc, #164]	@ (8006cd8 <process_command+0xe8>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	4b29      	ldr	r3, [pc, #164]	@ (8006cdc <process_command+0xec>)
 8006c38:	2100      	movs	r1, #0
 8006c3a:	5499      	strb	r1, [r3, r2]
            s_commandBufferIndex++;
 8006c3c:	4b26      	ldr	r3, [pc, #152]	@ (8006cd8 <process_command+0xe8>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	4b24      	ldr	r3, [pc, #144]	@ (8006cd8 <process_command+0xe8>)
 8006c46:	701a      	strb	r2, [r3, #0]
            ret_val = CmdLineProcess(s_commandBuffer,USARTx);
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4824      	ldr	r0, [pc, #144]	@ (8006cdc <process_command+0xec>)
 8006c4c:	f7ff fc04 	bl	8006458 <CmdLineProcess>
 8006c50:	4603      	mov	r3, r0
 8006c52:	73fb      	strb	r3, [r7, #15]
            s_commandBufferIndex = 0;
 8006c54:	4b20      	ldr	r3, [pc, #128]	@ (8006cd8 <process_command+0xe8>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	701a      	strb	r2, [r3, #0]
            Uart_sendstring(USARTx, "\r\n> ");
 8006c5a:	4921      	ldr	r1, [pc, #132]	@ (8006ce0 <process_command+0xf0>)
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7fb f9cb 	bl	8001ff8 <Uart_sendstring>
            Uart_sendstring(USARTx, ErrorCode[ret_val]);
 8006c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c66:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce4 <process_command+0xf4>)
 8006c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fb f9c2 	bl	8001ff8 <Uart_sendstring>
            Uart_sendstring(USARTx, "> ");
 8006c74:	491c      	ldr	r1, [pc, #112]	@ (8006ce8 <process_command+0xf8>)
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fb f9be 	bl	8001ff8 <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 8006c7c:	e021      	b.n	8006cc2 <process_command+0xd2>
        }
        else
        {
            Uart_sendstring(USARTx, "\r\n> ");
 8006c7e:	4918      	ldr	r1, [pc, #96]	@ (8006ce0 <process_command+0xf0>)
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7fb f9b9 	bl	8001ff8 <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 8006c86:	e01c      	b.n	8006cc2 <process_command+0xd2>
        }
    }
    else if ((rxData == 8) || (rxData == 127))
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	2b08      	cmp	r3, #8
 8006c8c:	d002      	beq.n	8006c94 <process_command+0xa4>
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c92:	d10a      	bne.n	8006caa <process_command+0xba>
    {
        if (s_commandBufferIndex > 0)
 8006c94:	4b10      	ldr	r3, [pc, #64]	@ (8006cd8 <process_command+0xe8>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d012      	beq.n	8006cc2 <process_command+0xd2>
        {
            s_commandBufferIndex--;
 8006c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd8 <process_command+0xe8>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <process_command+0xe8>)
 8006ca6:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > 0)
 8006ca8:	e00b      	b.n	8006cc2 <process_command+0xd2>
        }
    }
    else
    {
        s_commandBuffer[s_commandBufferIndex] = rxData;
 8006caa:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd8 <process_command+0xe8>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8006cdc <process_command+0xec>)
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	5453      	strb	r3, [r2, r1]
        s_commandBufferIndex++;
 8006cb6:	4b08      	ldr	r3, [pc, #32]	@ (8006cd8 <process_command+0xe8>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	4b06      	ldr	r3, [pc, #24]	@ (8006cd8 <process_command+0xe8>)
 8006cc0:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > COMMAND_MAX_LENGTH)
        {
            s_commandBufferIndex = 0;
        }
    }
}
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20005de8 	.word	0x20005de8
 8006ccc:	20005de9 	.word	0x20005de9
 8006cd0:	20005dea 	.word	0x20005dea
 8006cd4:	20005deb 	.word	0x20005deb
 8006cd8:	20005de7 	.word	0x20005de7
 8006cdc:	20005ce8 	.word	0x20005ce8
 8006ce0:	08014c8c 	.word	0x08014c8c
 8006ce4:	2000011c 	.word	0x2000011c
 8006ce8:	08014c94 	.word	0x08014c94

08006cec <Cmd_help>:

//USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];

int Cmd_help(int argc, char *argv[]) {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
    tCmdLineEntry *pEntry;
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	4413      	add	r3, r2
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60bb      	str	r3, [r7, #8]

    Uart_sendstring(USARTx, "\nSimple commands\r\n");
 8006d08:	4916      	ldr	r1, [pc, #88]	@ (8006d64 <Cmd_help+0x78>)
 8006d0a:	68b8      	ldr	r0, [r7, #8]
 8006d0c:	f7fb f974 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(USARTx, "------------------\r\n");
 8006d10:	4915      	ldr	r1, [pc, #84]	@ (8006d68 <Cmd_help+0x7c>)
 8006d12:	68b8      	ldr	r0, [r7, #8]
 8006d14:	f7fb f970 	bl	8001ff8 <Uart_sendstring>
    pEntry = &g_psCmdTable[0];
 8006d18:	4b14      	ldr	r3, [pc, #80]	@ (8006d6c <Cmd_help+0x80>)
 8006d1a:	60fb      	str	r3, [r7, #12]

    while (pEntry->pcCmd) {
 8006d1c:	e016      	b.n	8006d4c <Cmd_help+0x60>
        Uart_sendstring(USARTx, pEntry->pcCmd);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4619      	mov	r1, r3
 8006d24:	68b8      	ldr	r0, [r7, #8]
 8006d26:	f7fb f967 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(USARTx, pEntry->pcHelp);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	68b8      	ldr	r0, [r7, #8]
 8006d32:	f7fb f961 	bl	8001ff8 <Uart_sendstring>
        Uart_sendstring(USARTx, "\r\n");
 8006d36:	490e      	ldr	r1, [pc, #56]	@ (8006d70 <Cmd_help+0x84>)
 8006d38:	68b8      	ldr	r0, [r7, #8]
 8006d3a:	f7fb f95d 	bl	8001ff8 <Uart_sendstring>
        if (pEntry == &g_psCmdTable[12]) {
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4a0c      	ldr	r2, [pc, #48]	@ (8006d74 <Cmd_help+0x88>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d007      	beq.n	8006d56 <Cmd_help+0x6a>
            break;
        }
        pEntry++;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	330c      	adds	r3, #12
 8006d4a:	60fb      	str	r3, [r7, #12]
    while (pEntry->pcCmd) {
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e4      	bne.n	8006d1e <Cmd_help+0x32>
 8006d54:	e000      	b.n	8006d58 <Cmd_help+0x6c>
            break;
 8006d56:	bf00      	nop
    }

    return (CMDLINE_OK);
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	08014c98 	.word	0x08014c98
 8006d68:	08014cac 	.word	0x08014cac
 8006d6c:	20000134 	.word	0x20000134
 8006d70:	08014c1c 	.word	0x08014c1c
 8006d74:	200001c4 	.word	0x200001c4

08006d78 <Cmd_help_all>:

// 9table <-> 8 o day
int Cmd_help_all(int argc, char *argv[]) {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	4413      	add	r3, r2
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60bb      	str	r3, [r7, #8]
	Uart_sendstring(USARTx, "\nAvailable commands\r\n");
 8006d94:	4915      	ldr	r1, [pc, #84]	@ (8006dec <Cmd_help_all+0x74>)
 8006d96:	68b8      	ldr	r0, [r7, #8]
 8006d98:	f7fb f92e 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(USARTx, "------------------\r\n");
 8006d9c:	4914      	ldr	r1, [pc, #80]	@ (8006df0 <Cmd_help_all+0x78>)
 8006d9e:	68b8      	ldr	r0, [r7, #8]
 8006da0:	f7fb f92a 	bl	8001ff8 <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
 8006da4:	4b13      	ldr	r3, [pc, #76]	@ (8006df4 <Cmd_help_all+0x7c>)
 8006da6:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006da8:	e012      	b.n	8006dd0 <Cmd_help_all+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4619      	mov	r1, r3
 8006db0:	68b8      	ldr	r0, [r7, #8]
 8006db2:	f7fb f921 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	68b8      	ldr	r0, [r7, #8]
 8006dbe:	f7fb f91b 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006dc2:	490d      	ldr	r1, [pc, #52]	@ (8006df8 <Cmd_help_all+0x80>)
 8006dc4:	68b8      	ldr	r0, [r7, #8]
 8006dc6:	f7fb f917 	bl	8001ff8 <Uart_sendstring>
//	        Uart_sendstring(USARTx, "\n--------------IOU Command List-------------\r\n");
//	    }


		// Advance to the next entry in the table.
		pEntry++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e8      	bne.n	8006daa <Cmd_help_all+0x32>

	}
	Uart_sendstring(USARTx, "--------------    END    -------------\r\n");
 8006dd8:	4908      	ldr	r1, [pc, #32]	@ (8006dfc <Cmd_help_all+0x84>)
 8006dda:	68b8      	ldr	r0, [r7, #8]
 8006ddc:	f7fb f90c 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	08014cc4 	.word	0x08014cc4
 8006df0:	08014cac 	.word	0x08014cac
 8006df4:	20000134 	.word	0x20000134
 8006df8:	08014c1c 	.word	0x08014c1c
 8006dfc:	08014cdc 	.word	0x08014cdc

08006e00 <Cmd_help_cpoc>:

int Cmd_help_cpoc(int argc, char *argv[]) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e10:	3b01      	subs	r3, #1
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	4413      	add	r3, r2
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CPOC Command List-------------\r\n");
 8006e1c:	4914      	ldr	r1, [pc, #80]	@ (8006e70 <Cmd_help_cpoc+0x70>)
 8006e1e:	68b8      	ldr	r0, [r7, #8]
 8006e20:	f7fb f8ea 	bl	8001ff8 <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[13];
 8006e24:	4b13      	ldr	r3, [pc, #76]	@ (8006e74 <Cmd_help_cpoc+0x74>)
 8006e26:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006e28:	e016      	b.n	8006e58 <Cmd_help_cpoc+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68b8      	ldr	r0, [r7, #8]
 8006e32:	f7fb f8e1 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	68b8      	ldr	r0, [r7, #8]
 8006e3e:	f7fb f8db 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006e42:	490d      	ldr	r1, [pc, #52]	@ (8006e78 <Cmd_help_cpoc+0x78>)
 8006e44:	68b8      	ldr	r0, [r7, #8]
 8006e46:	f7fb f8d7 	bl	8001ff8 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[27]) {
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006e7c <Cmd_help_cpoc+0x7c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d007      	beq.n	8006e62 <Cmd_help_cpoc+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	330c      	adds	r3, #12
 8006e56:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e4      	bne.n	8006e2a <Cmd_help_cpoc+0x2a>
 8006e60:	e000      	b.n	8006e64 <Cmd_help_cpoc+0x64>
	        break;
 8006e62:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006e64:	2300      	movs	r3, #0

}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	08014d08 	.word	0x08014d08
 8006e74:	200001d0 	.word	0x200001d0
 8006e78:	08014c1c 	.word	0x08014c1c
 8006e7c:	20000278 	.word	0x20000278

08006e80 <Cmd_help_pmu>:
int Cmd_help_pmu(int argc, char *argv[]) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e90:	3b01      	subs	r3, #1
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	4413      	add	r3, r2
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PMU Command List-------------\r\n");
 8006e9c:	4914      	ldr	r1, [pc, #80]	@ (8006ef0 <Cmd_help_pmu+0x70>)
 8006e9e:	68b8      	ldr	r0, [r7, #8]
 8006ea0:	f7fb f8aa 	bl	8001ff8 <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[28];
 8006ea4:	4b13      	ldr	r3, [pc, #76]	@ (8006ef4 <Cmd_help_pmu+0x74>)
 8006ea6:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006ea8:	e016      	b.n	8006ed8 <Cmd_help_pmu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	68b8      	ldr	r0, [r7, #8]
 8006eb2:	f7fb f8a1 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	68b8      	ldr	r0, [r7, #8]
 8006ebe:	f7fb f89b 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006ec2:	490d      	ldr	r1, [pc, #52]	@ (8006ef8 <Cmd_help_pmu+0x78>)
 8006ec4:	68b8      	ldr	r0, [r7, #8]
 8006ec6:	f7fb f897 	bl	8001ff8 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[34]) {
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8006efc <Cmd_help_pmu+0x7c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d007      	beq.n	8006ee2 <Cmd_help_pmu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e4      	bne.n	8006eaa <Cmd_help_pmu+0x2a>
 8006ee0:	e000      	b.n	8006ee4 <Cmd_help_pmu+0x64>
	        break;
 8006ee2:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	08014d38 	.word	0x08014d38
 8006ef4:	20000284 	.word	0x20000284
 8006ef8:	08014c1c 	.word	0x08014c1c
 8006efc:	200002cc 	.word	0x200002cc

08006f00 <Cmd_help_pdu>:
int Cmd_help_pdu(int argc, char *argv[]) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f10:	3b01      	subs	r3, #1
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	4413      	add	r3, r2
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PDU Command List-------------\r\n");
 8006f1c:	4914      	ldr	r1, [pc, #80]	@ (8006f70 <Cmd_help_pdu+0x70>)
 8006f1e:	68b8      	ldr	r0, [r7, #8]
 8006f20:	f7fb f86a 	bl	8001ff8 <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[35];
 8006f24:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <Cmd_help_pdu+0x74>)
 8006f26:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006f28:	e016      	b.n	8006f58 <Cmd_help_pdu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68b8      	ldr	r0, [r7, #8]
 8006f32:	f7fb f861 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	68b8      	ldr	r0, [r7, #8]
 8006f3e:	f7fb f85b 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006f42:	490d      	ldr	r1, [pc, #52]	@ (8006f78 <Cmd_help_pdu+0x78>)
 8006f44:	68b8      	ldr	r0, [r7, #8]
 8006f46:	f7fb f857 	bl	8001ff8 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[40]) {
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006f7c <Cmd_help_pdu+0x7c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d007      	beq.n	8006f62 <Cmd_help_pdu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	330c      	adds	r3, #12
 8006f56:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e4      	bne.n	8006f2a <Cmd_help_pdu+0x2a>
 8006f60:	e000      	b.n	8006f64 <Cmd_help_pdu+0x64>
	        break;
 8006f62:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	08014d68 	.word	0x08014d68
 8006f74:	200002d8 	.word	0x200002d8
 8006f78:	08014c1c 	.word	0x08014c1c
 8006f7c:	20000314 	.word	0x20000314

08006f80 <Cmd_help_cam>:
int Cmd_help_cam(int argc, char *argv[]) {
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f90:	3b01      	subs	r3, #1
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	4413      	add	r3, r2
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CAM Command List-------------\r\n");
 8006f9c:	4914      	ldr	r1, [pc, #80]	@ (8006ff0 <Cmd_help_cam+0x70>)
 8006f9e:	68b8      	ldr	r0, [r7, #8]
 8006fa0:	f7fb f82a 	bl	8001ff8 <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[41];
 8006fa4:	4b13      	ldr	r3, [pc, #76]	@ (8006ff4 <Cmd_help_cam+0x74>)
 8006fa6:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006fa8:	e016      	b.n	8006fd8 <Cmd_help_cam+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68b8      	ldr	r0, [r7, #8]
 8006fb2:	f7fb f821 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	68b8      	ldr	r0, [r7, #8]
 8006fbe:	f7fb f81b 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006fc2:	490d      	ldr	r1, [pc, #52]	@ (8006ff8 <Cmd_help_cam+0x78>)
 8006fc4:	68b8      	ldr	r0, [r7, #8]
 8006fc6:	f7fb f817 	bl	8001ff8 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[41]) {
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4a09      	ldr	r2, [pc, #36]	@ (8006ff4 <Cmd_help_cam+0x74>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d007      	beq.n	8006fe2 <Cmd_help_cam+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	330c      	adds	r3, #12
 8006fd6:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e4      	bne.n	8006faa <Cmd_help_cam+0x2a>
 8006fe0:	e000      	b.n	8006fe4 <Cmd_help_cam+0x64>
	        break;
 8006fe2:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	08014d98 	.word	0x08014d98
 8006ff4:	20000320 	.word	0x20000320
 8006ff8:	08014c1c 	.word	0x08014c1c

08006ffc <Cmd_help_iou>:
int Cmd_help_iou(int argc, char *argv[]) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800700c:	3b01      	subs	r3, #1
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	4413      	add	r3, r2
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------IOU Command List-------------\r\n");
 8007018:	4914      	ldr	r1, [pc, #80]	@ (800706c <Cmd_help_iou+0x70>)
 800701a:	68b8      	ldr	r0, [r7, #8]
 800701c:	f7fa ffec 	bl	8001ff8 <Uart_sendstring>


	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[42];
 8007020:	4b13      	ldr	r3, [pc, #76]	@ (8007070 <Cmd_help_iou+0x74>)
 8007022:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8007024:	e016      	b.n	8007054 <Cmd_help_iou+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4619      	mov	r1, r3
 800702c:	68b8      	ldr	r0, [r7, #8]
 800702e:	f7fa ffe3 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	4619      	mov	r1, r3
 8007038:	68b8      	ldr	r0, [r7, #8]
 800703a:	f7fa ffdd 	bl	8001ff8 <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 800703e:	490d      	ldr	r1, [pc, #52]	@ (8007074 <Cmd_help_iou+0x78>)
 8007040:	68b8      	ldr	r0, [r7, #8]
 8007042:	f7fa ffd9 	bl	8001ff8 <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[23]) {
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4a0b      	ldr	r2, [pc, #44]	@ (8007078 <Cmd_help_iou+0x7c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d007      	beq.n	800705e <Cmd_help_iou+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	330c      	adds	r3, #12
 8007052:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e4      	bne.n	8007026 <Cmd_help_iou+0x2a>
 800705c:	e000      	b.n	8007060 <Cmd_help_iou+0x64>
	        break;
 800705e:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	08014dc8 	.word	0x08014dc8
 8007070:	2000032c 	.word	0x2000032c
 8007074:	08014c1c 	.word	0x08014c1c
 8007078:	20000248 	.word	0x20000248

0800707c <NotYetDefine>:





int NotYetDefine(int argc, char *argv[]) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800708c:	3b01      	subs	r3, #1
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	4413      	add	r3, r2
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]
	Uart_sendstring(USARTx, "\nThis function is not defined yet \r\n");
 8007098:	4904      	ldr	r1, [pc, #16]	@ (80070ac <NotYetDefine+0x30>)
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7fa ffac 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	08014df8 	.word	0x08014df8

080070b0 <Cmd_splash>:

int Cmd_splash(int argc, char *argv[]) {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
	command_send_splash();
 80070ba:	f000 fccb 	bl	8007a54 <command_send_splash>
	// Return success.
	return (CMDLINE_OK);
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <Cmd_status_now>:

int Cmd_status_now(int argc, char *argv[]){
 80070c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ca:	b0a5      	sub	sp, #148	@ 0x94
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070d8:	3b01      	subs	r3, #1
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	4413      	add	r3, r2
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint8_t day, date, month, year, hour, min, sec;
    float temp;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 80070e4:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80070e8:	f107 0275 	add.w	r2, r7, #117	@ 0x75
 80070ec:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 80070f0:	f107 0077 	add.w	r0, r7, #119	@ 0x77
 80070f4:	f107 0371 	add.w	r3, r7, #113	@ 0x71
 80070f8:	9302      	str	r3, [sp, #8]
 80070fa:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4623      	mov	r3, r4
 8007108:	f7fa f9ac 	bl	8001464 <DS3231_GetDateTime>

    // Get current temperature from DS3231
    temp = DS3231_GetTemperature();
 800710c:	f7fa fa52 	bl	80015b4 <DS3231_GetTemperature>
 8007110:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78

    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8007114:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8007118:	461d      	mov	r5, r3
 800711a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800711e:	461e      	mov	r6, r3
 8007120:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007124:	461a      	mov	r2, r3
 8007126:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800712a:	4619      	mov	r1, r3
 800712c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8007130:	461c      	mov	r4, r3
 8007132:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8007136:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800713a:	f107 000c 	add.w	r0, r7, #12
 800713e:	9303      	str	r3, [sp, #12]
 8007140:	9402      	str	r4, [sp, #8]
 8007142:	9101      	str	r1, [sp, #4]
 8007144:	9200      	str	r2, [sp, #0]
 8007146:	4633      	mov	r3, r6
 8007148:	462a      	mov	r2, r5
 800714a:	4931      	ldr	r1, [pc, #196]	@ (8007210 <Cmd_status_now+0x148>)
 800714c:	f008 fe9e 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007150:	f107 030c 	add.w	r3, r7, #12
 8007154:	4619      	mov	r1, r3
 8007156:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007158:	f7fa ff4e 	bl	8001ff8 <Uart_sendstring>

    sprintf(buffer, "Temperature: %.2f *C\r\n", temp);
 800715c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800715e:	f7f9 fa03 	bl	8000568 <__aeabi_f2d>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	f107 000c 	add.w	r0, r7, #12
 800716a:	492a      	ldr	r1, [pc, #168]	@ (8007214 <Cmd_status_now+0x14c>)
 800716c:	f008 fe8e 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007170:	f107 030c 	add.w	r3, r7, #12
 8007174:	4619      	mov	r1, r3
 8007176:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007178:	f7fa ff3e 	bl	8001ff8 <Uart_sendstring>
    sprintf(buffer, "HardwareVer: CPOC Hardware 1.2.0\r\n");
 800717c:	f107 030c 	add.w	r3, r7, #12
 8007180:	4925      	ldr	r1, [pc, #148]	@ (8007218 <Cmd_status_now+0x150>)
 8007182:	4618      	mov	r0, r3
 8007184:	f008 fe82 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007188:	f107 030c 	add.w	r3, r7, #12
 800718c:	4619      	mov	r1, r3
 800718e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007190:	f7fa ff32 	bl	8001ff8 <Uart_sendstring>
    sprintf(buffer, "FirmwareVer: CPOC Firmware 1.2.0\r\n");
 8007194:	f107 030c 	add.w	r3, r7, #12
 8007198:	4920      	ldr	r1, [pc, #128]	@ (800721c <Cmd_status_now+0x154>)
 800719a:	4618      	mov	r0, r3
 800719c:	f008 fe76 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, buffer);
 80071a0:	f107 030c 	add.w	r3, r7, #12
 80071a4:	4619      	mov	r1, r3
 80071a6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80071a8:	f7fa ff26 	bl	8001ff8 <Uart_sendstring>

    if (LL_GPIO_IsOutputPinSet(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin)) {
 80071ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80071b0:	481b      	ldr	r0, [pc, #108]	@ (8007220 <Cmd_status_now+0x158>)
 80071b2:	f7ff fc17 	bl	80069e4 <LL_GPIO_IsOutputPinSet>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00c      	beq.n	80071d6 <Cmd_status_now+0x10e>
        sprintf(buffer, "Enable: RF[OFF]\r\n");
 80071bc:	f107 030c 	add.w	r3, r7, #12
 80071c0:	4918      	ldr	r1, [pc, #96]	@ (8007224 <Cmd_status_now+0x15c>)
 80071c2:	4618      	mov	r0, r3
 80071c4:	f008 fe62 	bl	800fe8c <siprintf>
        Uart_sendstring(USARTx, buffer);
 80071c8:	f107 030c 	add.w	r3, r7, #12
 80071cc:	4619      	mov	r1, r3
 80071ce:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80071d0:	f7fa ff12 	bl	8001ff8 <Uart_sendstring>
 80071d4:	e00b      	b.n	80071ee <Cmd_status_now+0x126>
    } else {
        sprintf(buffer, "Enable: RF[ON]\r\n");
 80071d6:	f107 030c 	add.w	r3, r7, #12
 80071da:	4913      	ldr	r1, [pc, #76]	@ (8007228 <Cmd_status_now+0x160>)
 80071dc:	4618      	mov	r0, r3
 80071de:	f008 fe55 	bl	800fe8c <siprintf>
        Uart_sendstring(USARTx, buffer);
 80071e2:	f107 030c 	add.w	r3, r7, #12
 80071e6:	4619      	mov	r1, r3
 80071e8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80071ea:	f7fa ff05 	bl	8001ff8 <Uart_sendstring>
    }

    sprintf(buffer, "MuxMode: Auto\r\n");
 80071ee:	f107 030c 	add.w	r3, r7, #12
 80071f2:	490e      	ldr	r1, [pc, #56]	@ (800722c <Cmd_status_now+0x164>)
 80071f4:	4618      	mov	r0, r3
 80071f6:	f008 fe49 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, buffer);
 80071fa:	f107 030c 	add.w	r3, r7, #12
 80071fe:	4619      	mov	r1, r3
 8007200:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007202:	f7fa fef9 	bl	8001ff8 <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3784      	adds	r7, #132	@ 0x84
 800720c:	46bd      	mov	sp, r7
 800720e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007210:	08014e20 	.word	0x08014e20
 8007214:	08014e44 	.word	0x08014e44
 8007218:	08014e5c 	.word	0x08014e5c
 800721c:	08014e80 	.word	0x08014e80
 8007220:	40020400 	.word	0x40020400
 8007224:	08014ea4 	.word	0x08014ea4
 8007228:	08014eb8 	.word	0x08014eb8
 800722c:	08014ecc 	.word	0x08014ecc

08007230 <Cmd_set_byte_rs422>:
//uint32_t RS422_PERIOD = 3000;

uint16_t ARRAY_SIZE = 282;

int Cmd_set_byte_rs422(int argc, char *argv[])
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b090      	sub	sp, #64	@ 0x40
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b02      	cmp	r3, #2
 800723e:	dc01      	bgt.n	8007244 <Cmd_set_byte_rs422+0x14>
 8007240:	2303      	movs	r3, #3
 8007242:	e03c      	b.n	80072be <Cmd_set_byte_rs422+0x8e>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b03      	cmp	r3, #3
 8007248:	dd01      	ble.n	800724e <Cmd_set_byte_rs422+0x1e>
 800724a:	2302      	movs	r3, #2
 800724c:	e037      	b.n	80072be <Cmd_set_byte_rs422+0x8e>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007254:	3b01      	subs	r3, #1
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	4413      	add	r3, r2
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint16_t size = atoi(argv[1]);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	3304      	adds	r3, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	f007 fe58 	bl	800ef1c <atoi>
 800726c:	4603      	mov	r3, r0
 800726e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    if (size <= 0) {
 8007270:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007272:	2b00      	cmp	r3, #0
 8007274:	d105      	bne.n	8007282 <Cmd_set_byte_rs422+0x52>
        Uart_sendstring(USARTx,"\nPositive integer!!!\n");
 8007276:	4914      	ldr	r1, [pc, #80]	@ (80072c8 <Cmd_set_byte_rs422+0x98>)
 8007278:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800727a:	f7fa febd 	bl	8001ff8 <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 800727e:	2304      	movs	r3, #4
 8007280:	e01d      	b.n	80072be <Cmd_set_byte_rs422+0x8e>
    }

    if ( size > 1000 || size < 150) {
 8007282:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007284:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007288:	d802      	bhi.n	8007290 <Cmd_set_byte_rs422+0x60>
 800728a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800728c:	2b95      	cmp	r3, #149	@ 0x95
 800728e:	d805      	bhi.n	800729c <Cmd_set_byte_rs422+0x6c>
        Uart_sendstring(USARTx,"Array size > 150 or < 1000.\n");
 8007290:	490e      	ldr	r1, [pc, #56]	@ (80072cc <Cmd_set_byte_rs422+0x9c>)
 8007292:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007294:	f7fa feb0 	bl	8001ff8 <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 8007298:	2304      	movs	r3, #4
 800729a:	e010      	b.n	80072be <Cmd_set_byte_rs422+0x8e>
    }

    ARRAY_SIZE = size;
 800729c:	4a0c      	ldr	r2, [pc, #48]	@ (80072d0 <Cmd_set_byte_rs422+0xa0>)
 800729e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80072a0:	8013      	strh	r3, [r2, #0]

    char msg[50];
    sprintf(msg, "\nArray size set to %d bytes.\n", size);
 80072a2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80072a4:	f107 0308 	add.w	r3, r7, #8
 80072a8:	490a      	ldr	r1, [pc, #40]	@ (80072d4 <Cmd_set_byte_rs422+0xa4>)
 80072aa:	4618      	mov	r0, r3
 80072ac:	f008 fdee 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, msg);
 80072b0:	f107 0308 	add.w	r3, r7, #8
 80072b4:	4619      	mov	r1, r3
 80072b6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80072b8:	f7fa fe9e 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3740      	adds	r7, #64	@ 0x40
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	08014edc 	.word	0x08014edc
 80072cc:	08014ef4 	.word	0x08014ef4
 80072d0:	20000480 	.word	0x20000480
 80072d4:	08014f14 	.word	0x08014f14

080072d8 <Cmd_set_baudrate_rs422>:



int Cmd_set_baudrate_rs422(int argc, char *argv[])
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b096      	sub	sp, #88	@ 0x58
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	dc01      	bgt.n	80072ec <Cmd_set_baudrate_rs422+0x14>
 80072e8:	2303      	movs	r3, #3
 80072ea:	e055      	b.n	8007398 <Cmd_set_baudrate_rs422+0xc0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	dd01      	ble.n	80072f6 <Cmd_set_baudrate_rs422+0x1e>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e050      	b.n	8007398 <Cmd_set_baudrate_rs422+0xc0>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072fc:	3b01      	subs	r3, #1
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	4413      	add	r3, r2
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	657b      	str	r3, [r7, #84]	@ 0x54

//	{"set_baudrate_rs422", Cmd_set_baudrate_rs422, ": [9600|19200|38400|115200|230400|460800], Default 115200 | format: set_baudrate_rs422 <size>"},


    uint32_t baudrate = atoi(argv[1]);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	3304      	adds	r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4618      	mov	r0, r3
 8007310:	f007 fe04 	bl	800ef1c <atoi>
 8007314:	4603      	mov	r3, r0
 8007316:	653b      	str	r3, [r7, #80]	@ 0x50

    if (baudrate != 9600 && baudrate != 19200 && baudrate != 38400 &&
 8007318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800731a:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 800731e:	d019      	beq.n	8007354 <Cmd_set_baudrate_rs422+0x7c>
 8007320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007322:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 8007326:	d015      	beq.n	8007354 <Cmd_set_baudrate_rs422+0x7c>
 8007328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800732a:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800732e:	d011      	beq.n	8007354 <Cmd_set_baudrate_rs422+0x7c>
 8007330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007332:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8007336:	d00d      	beq.n	8007354 <Cmd_set_baudrate_rs422+0x7c>
        baudrate != 115200 && baudrate != 230400 && baudrate != 460800) {
 8007338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800733a:	f5b3 3f61 	cmp.w	r3, #230400	@ 0x38400
 800733e:	d009      	beq.n	8007354 <Cmd_set_baudrate_rs422+0x7c>
 8007340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007342:	f5b3 2fe1 	cmp.w	r3, #460800	@ 0x70800
 8007346:	d005      	beq.n	8007354 <Cmd_set_baudrate_rs422+0x7c>
        Uart_sendstring(USARTx, "\n Allowed Baudrates: [9600|19200|38400|115200|230400|460800]\n");
 8007348:	4915      	ldr	r1, [pc, #84]	@ (80073a0 <Cmd_set_baudrate_rs422+0xc8>)
 800734a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800734c:	f7fa fe54 	bl	8001ff8 <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 8007350:	2304      	movs	r3, #4
 8007352:	e021      	b.n	8007398 <Cmd_set_baudrate_rs422+0xc0>
    }

    // Disable UART5
    LL_USART_Disable(UART5);
 8007354:	4813      	ldr	r0, [pc, #76]	@ (80073a4 <Cmd_set_baudrate_rs422+0xcc>)
 8007356:	f7ff f907 	bl	8006568 <LL_USART_Disable>

    LL_RCC_ClocksTypeDef rcc_clocks;
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800735a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800735e:	4618      	mov	r0, r3
 8007360:	f004 f934 	bl	800b5cc <LL_RCC_GetSystemClocksFreq>
    // Configure baudrate
    LL_USART_SetBaudRate(UART5, rcc_clocks.PCLK1_Frequency, LL_USART_OVERSAMPLING_16, baudrate);
 8007364:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007368:	2200      	movs	r2, #0
 800736a:	480e      	ldr	r0, [pc, #56]	@ (80073a4 <Cmd_set_baudrate_rs422+0xcc>)
 800736c:	f7ff f90c 	bl	8006588 <LL_USART_SetBaudRate>

    // Enable UART5
    LL_USART_Enable(UART5);
 8007370:	480c      	ldr	r0, [pc, #48]	@ (80073a4 <Cmd_set_baudrate_rs422+0xcc>)
 8007372:	f7ff f8e9 	bl	8006548 <LL_USART_Enable>

	Uart_flush(UART5);
 8007376:	480b      	ldr	r0, [pc, #44]	@ (80073a4 <Cmd_set_baudrate_rs422+0xcc>)
 8007378:	f7fa fe56 	bl	8002028 <Uart_flush>

    char msg[50];
    sprintf(msg, "\nRS422 Baudrate set to  %ld.\n", baudrate);
 800737c:	f107 030c 	add.w	r3, r7, #12
 8007380:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007382:	4909      	ldr	r1, [pc, #36]	@ (80073a8 <Cmd_set_baudrate_rs422+0xd0>)
 8007384:	4618      	mov	r0, r3
 8007386:	f008 fd81 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, msg);
 800738a:	f107 030c 	add.w	r3, r7, #12
 800738e:	4619      	mov	r1, r3
 8007390:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007392:	f7fa fe31 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3758      	adds	r7, #88	@ 0x58
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	08014f34 	.word	0x08014f34
 80073a4:	40005000 	.word	0x40005000
 80073a8:	08014f74 	.word	0x08014f74

080073ac <Cmd_set_fre_rs422>:


int Cmd_set_fre_rs422(int argc, char *argv[])
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b090      	sub	sp, #64	@ 0x40
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	dc01      	bgt.n	80073c0 <Cmd_set_fre_rs422+0x14>
 80073bc:	2303      	movs	r3, #3
 80073be:	e083      	b.n	80074c8 <Cmd_set_fre_rs422+0x11c>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	dd01      	ble.n	80073ca <Cmd_set_fre_rs422+0x1e>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e07e      	b.n	80074c8 <Cmd_set_fre_rs422+0x11c>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073d0:	3b01      	subs	r3, #1
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	4413      	add	r3, r2
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	63fb      	str	r3, [r7, #60]	@ 0x3c

//	{"set_baudrate_rs422", Cmd_set_baudrate_rs422, ": [9600|19200|38400|115200|230400|460800], Default 115200 | format: set_baudrate_rs422 <size>"},


    uint8_t fre = atoi(argv[1]);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	3304      	adds	r3, #4
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f007 fd9a 	bl	800ef1c <atoi>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    switch (fre) {
 80073ee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80073f2:	2b0c      	cmp	r3, #12
 80073f4:	d854      	bhi.n	80074a0 <Cmd_set_fre_rs422+0xf4>
 80073f6:	a201      	add	r2, pc, #4	@ (adr r2, 80073fc <Cmd_set_fre_rs422+0x50>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	08007431 	.word	0x08007431
 8007400:	0800743b 	.word	0x0800743b
 8007404:	08007445 	.word	0x08007445
 8007408:	0800744f 	.word	0x0800744f
 800740c:	08007459 	.word	0x08007459
 8007410:	08007461 	.word	0x08007461
 8007414:	08007469 	.word	0x08007469
 8007418:	08007471 	.word	0x08007471
 800741c:	08007479 	.word	0x08007479
 8007420:	08007481 	.word	0x08007481
 8007424:	08007489 	.word	0x08007489
 8007428:	08007491 	.word	0x08007491
 800742c:	08007499 	.word	0x08007499
        case 0:
        	rs422_set_task_period(2000);
 8007430:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007434:	f000 fbd6 	bl	8007be4 <rs422_set_task_period>
            break;
 8007438:	e034      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 1:
        	rs422_set_task_period(1000);
 800743a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800743e:	f000 fbd1 	bl	8007be4 <rs422_set_task_period>
            break;
 8007442:	e02f      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 2:
        	rs422_set_task_period(500);
 8007444:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007448:	f000 fbcc 	bl	8007be4 <rs422_set_task_period>
            break;
 800744c:	e02a      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 3:
        	rs422_set_task_period(333);
 800744e:	f240 104d 	movw	r0, #333	@ 0x14d
 8007452:	f000 fbc7 	bl	8007be4 <rs422_set_task_period>
            break;
 8007456:	e025      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 4:
        	rs422_set_task_period(250);
 8007458:	20fa      	movs	r0, #250	@ 0xfa
 800745a:	f000 fbc3 	bl	8007be4 <rs422_set_task_period>
            break;
 800745e:	e021      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 5:
        	rs422_set_task_period(200);
 8007460:	20c8      	movs	r0, #200	@ 0xc8
 8007462:	f000 fbbf 	bl	8007be4 <rs422_set_task_period>
            break;
 8007466:	e01d      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 6:
        	rs422_set_task_period(167);
 8007468:	20a7      	movs	r0, #167	@ 0xa7
 800746a:	f000 fbbb 	bl	8007be4 <rs422_set_task_period>
            break;
 800746e:	e019      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 7:
        	rs422_set_task_period(143);
 8007470:	208f      	movs	r0, #143	@ 0x8f
 8007472:	f000 fbb7 	bl	8007be4 <rs422_set_task_period>
            break;
 8007476:	e015      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 8:
        	rs422_set_task_period(125);
 8007478:	207d      	movs	r0, #125	@ 0x7d
 800747a:	f000 fbb3 	bl	8007be4 <rs422_set_task_period>
            break;
 800747e:	e011      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 9:
        	rs422_set_task_period(111);
 8007480:	206f      	movs	r0, #111	@ 0x6f
 8007482:	f000 fbaf 	bl	8007be4 <rs422_set_task_period>
            break;
 8007486:	e00d      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 10:
        	rs422_set_task_period(100);
 8007488:	2064      	movs	r0, #100	@ 0x64
 800748a:	f000 fbab 	bl	8007be4 <rs422_set_task_period>
            break;
 800748e:	e009      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 11:
        	rs422_set_task_period(91);
 8007490:	205b      	movs	r0, #91	@ 0x5b
 8007492:	f000 fba7 	bl	8007be4 <rs422_set_task_period>
            break;
 8007496:	e005      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        case 12:
        	rs422_set_task_period(83);
 8007498:	2053      	movs	r0, #83	@ 0x53
 800749a:	f000 fba3 	bl	8007be4 <rs422_set_task_period>
            break;
 800749e:	e001      	b.n	80074a4 <Cmd_set_fre_rs422+0xf8>
        default:
        	return CMDLINE_INVALID_ARG;
 80074a0:	2304      	movs	r3, #4
 80074a2:	e011      	b.n	80074c8 <Cmd_set_fre_rs422+0x11c>
            break;
    }


	Uart_flush(USART1);
 80074a4:	480a      	ldr	r0, [pc, #40]	@ (80074d0 <Cmd_set_fre_rs422+0x124>)
 80074a6:	f7fa fdbf 	bl	8002028 <Uart_flush>

    char msg[50];
    sprintf(msg, "\nRS422 Packet per second set to %d.\n", fre);
 80074aa:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80074ae:	f107 0308 	add.w	r3, r7, #8
 80074b2:	4908      	ldr	r1, [pc, #32]	@ (80074d4 <Cmd_set_fre_rs422+0x128>)
 80074b4:	4618      	mov	r0, r3
 80074b6:	f008 fce9 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, msg);
 80074ba:	f107 0308 	add.w	r3, r7, #8
 80074be:	4619      	mov	r1, r3
 80074c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80074c2:	f7fa fd99 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3740      	adds	r7, #64	@ 0x40
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40011000 	.word	0x40011000
 80074d4:	08014f94 	.word	0x08014f94

080074d8 <Cmd_auto_report_ena>:


int Cmd_auto_report_ena(int argc, char *argv[])
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	dc01      	bgt.n	80074ec <Cmd_auto_report_ena+0x14>
 80074e8:	2303      	movs	r3, #3
 80074ea:	e015      	b.n	8007518 <Cmd_auto_report_ena+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	dd01      	ble.n	80074f6 <Cmd_auto_report_ena+0x1e>
 80074f2:	2302      	movs	r3, #2
 80074f4:	e010      	b.n	8007518 <Cmd_auto_report_ena+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074fc:	3b01      	subs	r3, #1
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	4413      	add	r3, r2
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]


    auto_report_enabled = 1;
 8007508:	4b05      	ldr	r3, [pc, #20]	@ (8007520 <Cmd_auto_report_ena+0x48>)
 800750a:	2201      	movs	r2, #1
 800750c:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nAuto report mirror from RS422 Packet, [ESC] to Stop\n");
 800750e:	4905      	ldr	r1, [pc, #20]	@ (8007524 <Cmd_auto_report_ena+0x4c>)
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7fa fd71 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20005de8 	.word	0x20005de8
 8007524:	08014fbc 	.word	0x08014fbc

08007528 <Cmd_rs422_report_ena>:



int Cmd_rs422_report_ena(int argc, char *argv[])
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b090      	sub	sp, #64	@ 0x40
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b01      	cmp	r3, #1
 8007536:	dc01      	bgt.n	800753c <Cmd_rs422_report_ena+0x14>
 8007538:	2303      	movs	r3, #3
 800753a:	e020      	b.n	800757e <Cmd_rs422_report_ena+0x56>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b02      	cmp	r3, #2
 8007540:	dd01      	ble.n	8007546 <Cmd_rs422_report_ena+0x1e>
 8007542:	2302      	movs	r3, #2
 8007544:	e01b      	b.n	800757e <Cmd_rs422_report_ena+0x56>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800754c:	3b01      	subs	r3, #1
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	4413      	add	r3, r2
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	63fb      	str	r3, [r7, #60]	@ 0x3c

    rs422_report_enable = 1;
 8007558:	4b0b      	ldr	r3, [pc, #44]	@ (8007588 <Cmd_rs422_report_ena+0x60>)
 800755a:	2201      	movs	r2, #1
 800755c:	701a      	strb	r2, [r3, #0]
 // Convert seconds to milliseconds
    Uart_flush(USART1);
 800755e:	480b      	ldr	r0, [pc, #44]	@ (800758c <Cmd_rs422_report_ena+0x64>)
 8007560:	f7fa fd62 	bl	8002028 <Uart_flush>

    char msg[50];
    sprintf(msg, "\nAuto report RS422, [ESC] to Stop\n");
 8007564:	f107 0308 	add.w	r3, r7, #8
 8007568:	4909      	ldr	r1, [pc, #36]	@ (8007590 <Cmd_rs422_report_ena+0x68>)
 800756a:	4618      	mov	r0, r3
 800756c:	f008 fc8e 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, msg);
 8007570:	f107 0308 	add.w	r3, r7, #8
 8007574:	4619      	mov	r1, r3
 8007576:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007578:	f7fa fd3e 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3740      	adds	r7, #64	@ 0x40
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20005de9 	.word	0x20005de9
 800758c:	40011000 	.word	0x40011000
 8007590:	08014ff4 	.word	0x08014ff4

08007594 <Cmd_rf_report_ena>:

volatile uint8_t rf_report_enable = 0;
int Cmd_rf_report_ena(int argc, char *argv[])
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b090      	sub	sp, #64	@ 0x40
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	dc01      	bgt.n	80075a8 <Cmd_rf_report_ena+0x14>
 80075a4:	2303      	movs	r3, #3
 80075a6:	e01d      	b.n	80075e4 <Cmd_rf_report_ena+0x50>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	dd01      	ble.n	80075b2 <Cmd_rf_report_ena+0x1e>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e018      	b.n	80075e4 <Cmd_rf_report_ena+0x50>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075b8:	3b01      	subs	r3, #1
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	4413      	add	r3, r2
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    rf_report_enable = 1;
 80075c4:	4b09      	ldr	r3, [pc, #36]	@ (80075ec <Cmd_rf_report_ena+0x58>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	701a      	strb	r2, [r3, #0]
 // Convert seconds to milliseconds

    char msg[50];
    sprintf(msg, "\nAuto report RF, [ESC] to Stop\n");
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	4908      	ldr	r1, [pc, #32]	@ (80075f0 <Cmd_rf_report_ena+0x5c>)
 80075d0:	4618      	mov	r0, r3
 80075d2:	f008 fc5b 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, msg);
 80075d6:	f107 0308 	add.w	r3, r7, #8
 80075da:	4619      	mov	r1, r3
 80075dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80075de:	f7fa fd0b 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3740      	adds	r7, #64	@ 0x40
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20005dea 	.word	0x20005dea
 80075f0:	08015018 	.word	0x08015018

080075f4 <Cmd_swap_byte_ena>:


volatile uint8_t swap_byte_enable = 1;

int Cmd_swap_byte_ena(int argc, char *argv[])
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b01      	cmp	r3, #1
 8007602:	dc01      	bgt.n	8007608 <Cmd_swap_byte_ena+0x14>
 8007604:	2303      	movs	r3, #3
 8007606:	e015      	b.n	8007634 <Cmd_swap_byte_ena+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b02      	cmp	r3, #2
 800760c:	dd01      	ble.n	8007612 <Cmd_swap_byte_ena+0x1e>
 800760e:	2302      	movs	r3, #2
 8007610:	e010      	b.n	8007634 <Cmd_swap_byte_ena+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007618:	3b01      	subs	r3, #1
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	4413      	add	r3, r2
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60fb      	str	r3, [r7, #12]


    swap_byte_enable = 1;
 8007624:	4b05      	ldr	r3, [pc, #20]	@ (800763c <Cmd_swap_byte_ena+0x48>)
 8007626:	2201      	movs	r2, #1
 8007628:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nEnabled swap byte RS422, NOT INCLUDE STX-ETX, 0x02->0xFE, 0x03->0xFD \n");
 800762a:	4905      	ldr	r1, [pc, #20]	@ (8007640 <Cmd_swap_byte_ena+0x4c>)
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f7fa fce3 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000482 	.word	0x20000482
 8007640:	08015038 	.word	0x08015038

08007644 <Cmd_swap_byte_dis>:

int Cmd_swap_byte_dis(int argc, char *argv[])
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b01      	cmp	r3, #1
 8007652:	dc01      	bgt.n	8007658 <Cmd_swap_byte_dis+0x14>
 8007654:	2303      	movs	r3, #3
 8007656:	e015      	b.n	8007684 <Cmd_swap_byte_dis+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b02      	cmp	r3, #2
 800765c:	dd01      	ble.n	8007662 <Cmd_swap_byte_dis+0x1e>
 800765e:	2302      	movs	r3, #2
 8007660:	e010      	b.n	8007684 <Cmd_swap_byte_dis+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007668:	3b01      	subs	r3, #1
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	4413      	add	r3, r2
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]


    swap_byte_enable = 0;
 8007674:	4b05      	ldr	r3, [pc, #20]	@ (800768c <Cmd_swap_byte_dis+0x48>)
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nDISABLE!!!\n");
 800767a:	4905      	ldr	r1, [pc, #20]	@ (8007690 <Cmd_swap_byte_dis+0x4c>)
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7fa fcbb 	bl	8001ff8 <Uart_sendstring>
    return CMDLINE_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	20000482 	.word	0x20000482
 8007690:	08015080 	.word	0x08015080

08007694 <Cmd_memory_usage>:



int Cmd_memory_usage(int argc, char *argv[]) {
 8007694:	b5b0      	push	{r4, r5, r7, lr}
 8007696:	b0a6      	sub	sp, #152	@ 0x98
 8007698:	af02      	add	r7, sp, #8
 800769a:	4674      	mov	r4, lr
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076a6:	3b01      	subs	r3, #1
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4413      	add	r3, r2
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    // STM32F405RGT7 có 192KB SRAM [[5]]
    uint32_t totalRAM = 192 * 1024;
 80076b4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80076b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80076bc:	f3ef 8308 	mrs	r3, MSP
 80076c0:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 80076c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    uint32_t usedRAM = SRAM1_BASE + totalRAM - __get_MSP();
 80076c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80076ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    float ramUsage = (float)usedRAM / totalRAM * 100;
 80076d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800776c <Cmd_memory_usage+0xd8>
 80076f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076f6:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

    // STM32F405RGT7 có 1MB Flash [[1]] [[4]]
    uint32_t totalFlash = 1 * 1024 * 1024;
 80076fa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80076fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t usedFlash = (uint32_t)__builtin_return_address(0) - FLASH_BASE;
 8007700:	4623      	mov	r3, r4
 8007702:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8007706:	67bb      	str	r3, [r7, #120]	@ 0x78
    float flashUsage = (float)usedFlash / totalFlash * 100;
 8007708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007712:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800771c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007720:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800776c <Cmd_memory_usage+0xd8>
 8007724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007728:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74


    char buffer[100];
    sprintf(buffer, "\nRAM: %.2f%% used\r\nFlash: %.2f%% used\r\n", ramUsage, flashUsage);
 800772c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8007730:	f7f8 ff1a 	bl	8000568 <__aeabi_f2d>
 8007734:	4604      	mov	r4, r0
 8007736:	460d      	mov	r5, r1
 8007738:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800773a:	f7f8 ff15 	bl	8000568 <__aeabi_f2d>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	f107 000c 	add.w	r0, r7, #12
 8007746:	e9cd 2300 	strd	r2, r3, [sp]
 800774a:	4622      	mov	r2, r4
 800774c:	462b      	mov	r3, r5
 800774e:	4908      	ldr	r1, [pc, #32]	@ (8007770 <Cmd_memory_usage+0xdc>)
 8007750:	f008 fb9c 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007754:	f107 030c 	add.w	r3, r7, #12
 8007758:	4619      	mov	r1, r3
 800775a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800775e:	f7fa fc4b 	bl	8001ff8 <Uart_sendstring>

    return CMDLINE_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3790      	adds	r7, #144	@ 0x90
 8007768:	46bd      	mov	sp, r7
 800776a:	bdb0      	pop	{r4, r5, r7, pc}
 800776c:	42c80000 	.word	0x42c80000
 8007770:	08015090 	.word	0x08015090

08007774 <Cmd_time_get>:


int Cmd_time_get(int argc, char *argv[]){
 8007774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007776:	b0a3      	sub	sp, #140	@ 0x8c
 8007778:	af04      	add	r7, sp, #16
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    char buffer[100];
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007784:	3b01      	subs	r3, #1
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	4413      	add	r3, r2
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	677b      	str	r3, [r7, #116]	@ 0x74
    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8007790:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8007794:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 8007798:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 800779c:	f107 0073 	add.w	r0, r7, #115	@ 0x73
 80077a0:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 80077a4:	9302      	str	r3, [sp, #8]
 80077a6:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80077aa:	9301      	str	r3, [sp, #4]
 80077ac:	f107 036f 	add.w	r3, r7, #111	@ 0x6f
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	4623      	mov	r3, r4
 80077b4:	f7f9 fe56 	bl	8001464 <DS3231_GetDateTime>
    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 80077b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80077bc:	461d      	mov	r5, r3
 80077be:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077c2:	461e      	mov	r6, r3
 80077c4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80077c8:	461a      	mov	r2, r3
 80077ca:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80077ce:	4619      	mov	r1, r3
 80077d0:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80077d4:	461c      	mov	r4, r3
 80077d6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80077da:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80077de:	f107 0008 	add.w	r0, r7, #8
 80077e2:	9303      	str	r3, [sp, #12]
 80077e4:	9402      	str	r4, [sp, #8]
 80077e6:	9101      	str	r1, [sp, #4]
 80077e8:	9200      	str	r2, [sp, #0]
 80077ea:	4633      	mov	r3, r6
 80077ec:	462a      	mov	r2, r5
 80077ee:	4907      	ldr	r1, [pc, #28]	@ (800780c <Cmd_time_get+0x98>)
 80077f0:	f008 fb4c 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, buffer);
 80077f4:	f107 0308 	add.w	r3, r7, #8
 80077f8:	4619      	mov	r1, r3
 80077fa:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80077fc:	f7fa fbfc 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	377c      	adds	r7, #124	@ 0x7c
 8007806:	46bd      	mov	sp, r7
 8007808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800780a:	bf00      	nop
 800780c:	08014e20 	.word	0x08014e20

08007810 <Cmd_time_set>:

int Cmd_time_set(int argc, char *argv[]){
 8007810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007812:	b0a3      	sub	sp, #140	@ 0x8c
 8007814:	af04      	add	r7, sp, #16
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 7) return CMDLINE_TOO_FEW_ARGS;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b07      	cmp	r3, #7
 800781e:	dc01      	bgt.n	8007824 <Cmd_time_set+0x14>
 8007820:	2303      	movs	r3, #3
 8007822:	e091      	b.n	8007948 <Cmd_time_set+0x138>
    if ((argc-1) > 7) return CMDLINE_TOO_MANY_ARGS;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b08      	cmp	r3, #8
 8007828:	dd01      	ble.n	800782e <Cmd_time_set+0x1e>
 800782a:	2302      	movs	r3, #2
 800782c:	e08c      	b.n	8007948 <Cmd_time_set+0x138>
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007834:	3b01      	subs	r3, #1
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	4413      	add	r3, r2
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	677b      	str	r3, [r7, #116]	@ 0x74
    uint8_t hour = atoi(argv[1]);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	3304      	adds	r3, #4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f007 fb68 	bl	800ef1c <atoi>
 800784c:	4603      	mov	r3, r0
 800784e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    uint8_t min = atoi(argv[2]);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4618      	mov	r0, r3
 800785a:	f007 fb5f 	bl	800ef1c <atoi>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    uint8_t sec = atoi(argv[3]);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	330c      	adds	r3, #12
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f007 fb56 	bl	800ef1c <atoi>
 8007870:	4603      	mov	r3, r0
 8007872:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
    uint8_t date = atoi(argv[4]);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	3310      	adds	r3, #16
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4618      	mov	r0, r3
 800787e:	f007 fb4d 	bl	800ef1c <atoi>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
    uint8_t month = atoi(argv[5]);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	3314      	adds	r3, #20
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4618      	mov	r0, r3
 8007890:	f007 fb44 	bl	800ef1c <atoi>
 8007894:	4603      	mov	r3, r0
 8007896:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t year = atoi(argv[6]);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	3318      	adds	r3, #24
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f007 fb3b 	bl	800ef1c <atoi>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

    if (hour > 23 || min > 59 || sec > 59 || date > 31 || month > 12 || year > 99)
 80078ac:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80078b0:	2b17      	cmp	r3, #23
 80078b2:	d813      	bhi.n	80078dc <Cmd_time_set+0xcc>
 80078b4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80078b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80078ba:	d80f      	bhi.n	80078dc <Cmd_time_set+0xcc>
 80078bc:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80078c0:	2b3b      	cmp	r3, #59	@ 0x3b
 80078c2:	d80b      	bhi.n	80078dc <Cmd_time_set+0xcc>
 80078c4:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80078c8:	2b1f      	cmp	r3, #31
 80078ca:	d807      	bhi.n	80078dc <Cmd_time_set+0xcc>
 80078cc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	d803      	bhi.n	80078dc <Cmd_time_set+0xcc>
 80078d4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80078d8:	2b63      	cmp	r3, #99	@ 0x63
 80078da:	d901      	bls.n	80078e0 <Cmd_time_set+0xd0>
        return CMDLINE_INVALID_ARG;
 80078dc:	2304      	movs	r3, #4
 80078de:	e033      	b.n	8007948 <Cmd_time_set+0x138>

    DS3231_SetDateTime(1, date, month, year, hour, min, sec);
 80078e0:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 80078e4:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 80078e8:	f897 1070 	ldrb.w	r1, [r7, #112]	@ 0x70
 80078ec:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80078f0:	9302      	str	r3, [sp, #8]
 80078f2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4603      	mov	r3, r0
 8007900:	2001      	movs	r0, #1
 8007902:	f7f9 fcf1 	bl	80012e8 <DS3231_SetDateTime>

    char buffer[100];
    sprintf(buffer, "\nTime set to: %02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8007906:	f897 5073 	ldrb.w	r5, [r7, #115]	@ 0x73
 800790a:	f897 6072 	ldrb.w	r6, [r7, #114]	@ 0x72
 800790e:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007912:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8007916:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800791a:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 800791e:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8007922:	f107 0408 	add.w	r4, r7, #8
 8007926:	9003      	str	r0, [sp, #12]
 8007928:	9102      	str	r1, [sp, #8]
 800792a:	9201      	str	r2, [sp, #4]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	4633      	mov	r3, r6
 8007930:	462a      	mov	r2, r5
 8007932:	4907      	ldr	r1, [pc, #28]	@ (8007950 <Cmd_time_set+0x140>)
 8007934:	4620      	mov	r0, r4
 8007936:	f008 faa9 	bl	800fe8c <siprintf>
    Uart_sendstring(USARTx, buffer);
 800793a:	f107 0308 	add.w	r3, r7, #8
 800793e:	4619      	mov	r1, r3
 8007940:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007942:	f7fa fb59 	bl	8001ff8 <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	377c      	adds	r7, #124	@ 0x7c
 800794c:	46bd      	mov	sp, r7
 800794e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007950:	080150b8 	.word	0x080150b8

08007954 <Cmd_cpoc_reset>:

int Cmd_cpoc_reset(int argc, char *argv[]){
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 800795e:	f7fe fddd 	bl	800651c <__NVIC_SystemReset>
	...

08007964 <Cmd_rf_ena>:
//	Cmd_pmu_board_alive();
//	Cmd_pmu_board_alive();
//
//}

int Cmd_rf_ena(int argc, char *argv[]){
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007974:	3b01      	subs	r3, #1
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	4413      	add	r3, r2
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60fb      	str	r3, [r7, #12]
	LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8007980:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007984:	4807      	ldr	r0, [pc, #28]	@ (80079a4 <Cmd_rf_ena+0x40>)
 8007986:	f7ff f850 	bl	8006a2a <LL_GPIO_ResetOutputPin>
	 Uart_sendstring(USARTx, "\nRF Set to Enable\r\n");
 800798a:	4907      	ldr	r1, [pc, #28]	@ (80079a8 <Cmd_rf_ena+0x44>)
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7fa fb33 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	Uart_sendstring(USART2, "B");
 8007992:	4906      	ldr	r1, [pc, #24]	@ (80079ac <Cmd_rf_ena+0x48>)
 8007994:	4806      	ldr	r0, [pc, #24]	@ (80079b0 <Cmd_rf_ena+0x4c>)
 8007996:	f7fa fb2f 	bl	8001ff8 <Uart_sendstring>
	return (CMDLINE_OK);
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	40020400 	.word	0x40020400
 80079a8:	080150e8 	.word	0x080150e8
 80079ac:	08014c3c 	.word	0x08014c3c
 80079b0:	40004400 	.word	0x40004400

080079b4 <Cmd_rf_dis>:

int Cmd_rf_dis(int argc, char *argv[]){
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079c4:	3b01      	subs	r3, #1
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	4413      	add	r3, r2
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]
	LL_GPIO_SetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 80079d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80079d4:	4805      	ldr	r0, [pc, #20]	@ (80079ec <Cmd_rf_dis+0x38>)
 80079d6:	f7ff f81a 	bl	8006a0e <LL_GPIO_SetOutputPin>
	Uart_sendstring(USARTx, "\nRF Disable\r\n");
 80079da:	4905      	ldr	r1, [pc, #20]	@ (80079f0 <Cmd_rf_dis+0x3c>)
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7fa fb0b 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	40020400 	.word	0x40020400
 80079f0:	080150fc 	.word	0x080150fc

080079f4 <Cmd_start_positioining>:

volatile uint8_t gps_report_enable = 0;
int Cmd_start_positioining (int argc, char *argv[]){
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a04:	3b01      	subs	r3, #1
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]
	gps_report_enable = 1;
 8007a10:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <Cmd_start_positioining+0x3c>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	701a      	strb	r2, [r3, #0]
	Uart_flush(USART3);
 8007a16:	4807      	ldr	r0, [pc, #28]	@ (8007a34 <Cmd_start_positioining+0x40>)
 8007a18:	f7fa fb06 	bl	8002028 <Uart_flush>
	Uart_sendstring(USARTx, "\nStart reporting position to RF, [ESC] to Stop\r\n");
 8007a1c:	4906      	ldr	r1, [pc, #24]	@ (8007a38 <Cmd_start_positioining+0x44>)
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7fa faea 	bl	8001ff8 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20005deb 	.word	0x20005deb
 8007a34:	40004800 	.word	0x40004800
 8007a38:	0801510c 	.word	0x0801510c

08007a3c <command_create_task>:


void	command_create_task(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8007a40:	4902      	ldr	r1, [pc, #8]	@ (8007a4c <command_create_task+0x10>)
 8007a42:	4803      	ldr	r0, [pc, #12]	@ (8007a50 <command_create_task+0x14>)
 8007a44:	f004 fa02 	bl	800be4c <SCH_TASK_CreateTask>
}
 8007a48:	bf00      	nop
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000474 	.word	0x20000474
 8007a50:	20000470 	.word	0x20000470

08007a54 <command_send_splash>:

void	command_send_splash(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
	Uart_sendstring(UART4, "------------------------------------------------\r\n");
 8007a58:	4938      	ldr	r1, [pc, #224]	@ (8007b3c <command_send_splash+0xe8>)
 8007a5a:	4839      	ldr	r0, [pc, #228]	@ (8007b40 <command_send_splash+0xec>)
 8007a5c:	f7fa facc 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--        ____                                --\r\n");
 8007a60:	4938      	ldr	r1, [pc, #224]	@ (8007b44 <command_send_splash+0xf0>)
 8007a62:	4837      	ldr	r0, [pc, #220]	@ (8007b40 <command_send_splash+0xec>)
 8007a64:	f7fa fac8 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--       / ___| _ __   __ _  ___ ___          --\r\n");
 8007a68:	4937      	ldr	r1, [pc, #220]	@ (8007b48 <command_send_splash+0xf4>)
 8007a6a:	4835      	ldr	r0, [pc, #212]	@ (8007b40 <command_send_splash+0xec>)
 8007a6c:	f7fa fac4 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--       \\___ \\| '_ \\ / _` |/ __/ _ \\         --  \r\n");
 8007a70:	4936      	ldr	r1, [pc, #216]	@ (8007b4c <command_send_splash+0xf8>)
 8007a72:	4833      	ldr	r0, [pc, #204]	@ (8007b40 <command_send_splash+0xec>)
 8007a74:	f7fa fac0 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--        ___) | |_) | (_| | (_|  __/         --\r\n");
 8007a78:	4935      	ldr	r1, [pc, #212]	@ (8007b50 <command_send_splash+0xfc>)
 8007a7a:	4831      	ldr	r0, [pc, #196]	@ (8007b40 <command_send_splash+0xec>)
 8007a7c:	f7fa fabc 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--       |____/| -__/ \\__,_|\\___\\___|         --  \r\n");
 8007a80:	4934      	ldr	r1, [pc, #208]	@ (8007b54 <command_send_splash+0x100>)
 8007a82:	482f      	ldr	r0, [pc, #188]	@ (8007b40 <command_send_splash+0xec>)
 8007a84:	f7fa fab8 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--             |_|                            --\r\n");
 8007a88:	4933      	ldr	r1, [pc, #204]	@ (8007b58 <command_send_splash+0x104>)
 8007a8a:	482d      	ldr	r0, [pc, #180]	@ (8007b40 <command_send_splash+0xec>)
 8007a8c:	f7fa fab4 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--     _     _ _     _____         _          --\r\n");
 8007a90:	4932      	ldr	r1, [pc, #200]	@ (8007b5c <command_send_splash+0x108>)
 8007a92:	482b      	ldr	r0, [pc, #172]	@ (8007b40 <command_send_splash+0xec>)
 8007a94:	f7fa fab0 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--    | |   (_|_)_ _|_   _|__  ___| |__       --\r\n");
 8007a98:	4931      	ldr	r1, [pc, #196]	@ (8007b60 <command_send_splash+0x10c>)
 8007a9a:	4829      	ldr	r0, [pc, #164]	@ (8007b40 <command_send_splash+0xec>)
 8007a9c:	f7fa faac 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--    | |   | | | '_ \\| |/ _ \\/ __| '_ \\      --\r\n");
 8007aa0:	4930      	ldr	r1, [pc, #192]	@ (8007b64 <command_send_splash+0x110>)
 8007aa2:	4827      	ldr	r0, [pc, #156]	@ (8007b40 <command_send_splash+0xec>)
 8007aa4:	f7fa faa8 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--    | |___| | | | | | |  __/ (__| | | |     --\r\n");
 8007aa8:	492f      	ldr	r1, [pc, #188]	@ (8007b68 <command_send_splash+0x114>)
 8007aaa:	4825      	ldr	r0, [pc, #148]	@ (8007b40 <command_send_splash+0xec>)
 8007aac:	f7fa faa4 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--    |_____|_|_|_| |_|_|\\___|\\___| |_|_|     --\r\n");
 8007ab0:	492e      	ldr	r1, [pc, #184]	@ (8007b6c <command_send_splash+0x118>)
 8007ab2:	4823      	ldr	r0, [pc, #140]	@ (8007b40 <command_send_splash+0xec>)
 8007ab4:	f7fa faa0 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "------------------------------------------------\r\n");
 8007ab8:	4920      	ldr	r1, [pc, #128]	@ (8007b3c <command_send_splash+0xe8>)
 8007aba:	4821      	ldr	r0, [pc, #132]	@ (8007b40 <command_send_splash+0xec>)
 8007abc:	f7fa fa9c 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--           ____ ____   ___   ____           --\r\n");
 8007ac0:	492b      	ldr	r1, [pc, #172]	@ (8007b70 <command_send_splash+0x11c>)
 8007ac2:	481f      	ldr	r0, [pc, #124]	@ (8007b40 <command_send_splash+0xec>)
 8007ac4:	f7fa fa98 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--          / ___|  _ \\ / _ \\ / ___|          --\r\n");
 8007ac8:	492a      	ldr	r1, [pc, #168]	@ (8007b74 <command_send_splash+0x120>)
 8007aca:	481d      	ldr	r0, [pc, #116]	@ (8007b40 <command_send_splash+0xec>)
 8007acc:	f7fa fa94 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--         | |   | |_) | | | | |              --\r\n");
 8007ad0:	4929      	ldr	r1, [pc, #164]	@ (8007b78 <command_send_splash+0x124>)
 8007ad2:	481b      	ldr	r0, [pc, #108]	@ (8007b40 <command_send_splash+0xec>)
 8007ad4:	f7fa fa90 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--         | |___|  __/| |_| | |___           --\r\n");
 8007ad8:	4928      	ldr	r1, [pc, #160]	@ (8007b7c <command_send_splash+0x128>)
 8007ada:	4819      	ldr	r0, [pc, #100]	@ (8007b40 <command_send_splash+0xec>)
 8007adc:	f7fa fa8c 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--          \\____|_|    \\___/ \\____|          -- \r\n");
 8007ae0:	4927      	ldr	r1, [pc, #156]	@ (8007b80 <command_send_splash+0x12c>)
 8007ae2:	4817      	ldr	r0, [pc, #92]	@ (8007b40 <command_send_splash+0xec>)
 8007ae4:	f7fa fa88 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--                  _   ___   ___             --\r\n");
 8007ae8:	4926      	ldr	r1, [pc, #152]	@ (8007b84 <command_send_splash+0x130>)
 8007aea:	4815      	ldr	r0, [pc, #84]	@ (8007b40 <command_send_splash+0xec>)
 8007aec:	f7fa fa84 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--          __   __/ | / _ \\ / _ \\            -- \r\n");
 8007af0:	4925      	ldr	r1, [pc, #148]	@ (8007b88 <command_send_splash+0x134>)
 8007af2:	4813      	ldr	r0, [pc, #76]	@ (8007b40 <command_send_splash+0xec>)
 8007af4:	f7fa fa80 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--          \\ \\ / /| || | | | | | |           --  \r\n");
 8007af8:	4924      	ldr	r1, [pc, #144]	@ (8007b8c <command_send_splash+0x138>)
 8007afa:	4811      	ldr	r0, [pc, #68]	@ (8007b40 <command_send_splash+0xec>)
 8007afc:	f7fa fa7c 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--           \\ V / | || |_| | |_| |           -- \r\n");
 8007b00:	4923      	ldr	r1, [pc, #140]	@ (8007b90 <command_send_splash+0x13c>)
 8007b02:	480f      	ldr	r0, [pc, #60]	@ (8007b40 <command_send_splash+0xec>)
 8007b04:	f7fa fa78 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "--            \\_/  |_(_)___(_)___/            -- \r\n");
 8007b08:	4922      	ldr	r1, [pc, #136]	@ (8007b94 <command_send_splash+0x140>)
 8007b0a:	480d      	ldr	r0, [pc, #52]	@ (8007b40 <command_send_splash+0xec>)
 8007b0c:	f7fa fa74 	bl	8001ff8 <Uart_sendstring>
    Uart_sendstring(UART4, "------------------------------------------------\r\n");
 8007b10:	490a      	ldr	r1, [pc, #40]	@ (8007b3c <command_send_splash+0xe8>)
 8007b12:	480b      	ldr	r0, [pc, #44]	@ (8007b40 <command_send_splash+0xec>)
 8007b14:	f7fa fa70 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(UART4, "> ");
 8007b18:	491f      	ldr	r1, [pc, #124]	@ (8007b98 <command_send_splash+0x144>)
 8007b1a:	4809      	ldr	r0, [pc, #36]	@ (8007b40 <command_send_splash+0xec>)
 8007b1c:	f7fa fa6c 	bl	8001ff8 <Uart_sendstring>

//	Uart_sendstring(UART5, "\r\n");
//	Uart_sendstring(UART5, ">>>>> CPOC V1.2.0 RS422 <<<<<\r\n");
//	Uart_sendstring(UART5, "> ");

	Uart_sendstring(USART2, "\r\n");
 8007b20:	491e      	ldr	r1, [pc, #120]	@ (8007b9c <command_send_splash+0x148>)
 8007b22:	481f      	ldr	r0, [pc, #124]	@ (8007ba0 <command_send_splash+0x14c>)
 8007b24:	f7fa fa68 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(USART2, ">>>>> CPOC V1.2.0 XBEE RF <<<<<\r\n");
 8007b28:	491e      	ldr	r1, [pc, #120]	@ (8007ba4 <command_send_splash+0x150>)
 8007b2a:	481d      	ldr	r0, [pc, #116]	@ (8007ba0 <command_send_splash+0x14c>)
 8007b2c:	f7fa fa64 	bl	8001ff8 <Uart_sendstring>
	Uart_sendstring(USART2, "> ");
 8007b30:	4919      	ldr	r1, [pc, #100]	@ (8007b98 <command_send_splash+0x144>)
 8007b32:	481b      	ldr	r0, [pc, #108]	@ (8007ba0 <command_send_splash+0x14c>)
 8007b34:	f7fa fa60 	bl	8001ff8 <Uart_sendstring>
}
 8007b38:	bf00      	nop
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	08015140 	.word	0x08015140
 8007b40:	40004c00 	.word	0x40004c00
 8007b44:	08015174 	.word	0x08015174
 8007b48:	080151a8 	.word	0x080151a8
 8007b4c:	080151dc 	.word	0x080151dc
 8007b50:	08015214 	.word	0x08015214
 8007b54:	08015248 	.word	0x08015248
 8007b58:	08015280 	.word	0x08015280
 8007b5c:	080152b4 	.word	0x080152b4
 8007b60:	080152e8 	.word	0x080152e8
 8007b64:	0801531c 	.word	0x0801531c
 8007b68:	08015350 	.word	0x08015350
 8007b6c:	08015384 	.word	0x08015384
 8007b70:	080153b8 	.word	0x080153b8
 8007b74:	080153ec 	.word	0x080153ec
 8007b78:	08015420 	.word	0x08015420
 8007b7c:	08015454 	.word	0x08015454
 8007b80:	08015488 	.word	0x08015488
 8007b84:	080154bc 	.word	0x080154bc
 8007b88:	080154f0 	.word	0x080154f0
 8007b8c:	08015524 	.word	0x08015524
 8007b90:	0801555c 	.word	0x0801555c
 8007b94:	08015590 	.word	0x08015590
 8007b98:	08014c94 	.word	0x08014c94
 8007b9c:	08014c1c 	.word	0x08014c1c
 8007ba0:	40004400 	.word	0x40004400
 8007ba4:	080155c4 	.word	0x080155c4

08007ba8 <LL_GPIO_SetOutputPin>:
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	619a      	str	r2, [r3, #24]
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <LL_GPIO_ResetOutputPin>:
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	041a      	lsls	r2, r3, #16
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	619a      	str	r2, [r3, #24]
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
	...

08007be4 <rs422_set_task_period>:
	}
};


void rs422_set_task_period(uint32_t period_ms)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
    RS422_task_context.taskProperty.taskPeriodInMS = period_ms;
 8007bec:	4a05      	ldr	r2, [pc, #20]	@ (8007c04 <rs422_set_task_period+0x20>)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60d3      	str	r3, [r2, #12]

 //    Reset taskTick when changing task period
    RS422_task_context.taskTick = 0;
 8007bf2:	4b04      	ldr	r3, [pc, #16]	@ (8007c04 <rs422_set_task_period+0x20>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	605a      	str	r2, [r3, #4]

}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	20000484 	.word	0x20000484

08007c08 <switch_board>:


void switch_board(uint8_t board_id) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
    switch (board_id) {
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d837      	bhi.n	8007c88 <switch_board+0x80>
 8007c18:	a201      	add	r2, pc, #4	@ (adr r2, 8007c20 <switch_board+0x18>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c47 	.word	0x08007c47
 8007c28:	08007c5d 	.word	0x08007c5d
 8007c2c:	08007c73 	.word	0x08007c73
        case 0: // PDU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c34:	4816      	ldr	r0, [pc, #88]	@ (8007c90 <switch_board+0x88>)
 8007c36:	f7ff ffc5 	bl	8007bc4 <LL_GPIO_ResetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c3e:	4814      	ldr	r0, [pc, #80]	@ (8007c90 <switch_board+0x88>)
 8007c40:	f7ff ffc0 	bl	8007bc4 <LL_GPIO_ResetOutputPin>
            break;
 8007c44:	e020      	b.n	8007c88 <switch_board+0x80>
        case 1: // PMU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c4a:	4811      	ldr	r0, [pc, #68]	@ (8007c90 <switch_board+0x88>)
 8007c4c:	f7ff ffba 	bl	8007bc4 <LL_GPIO_ResetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c54:	480e      	ldr	r0, [pc, #56]	@ (8007c90 <switch_board+0x88>)
 8007c56:	f7ff ffa7 	bl	8007ba8 <LL_GPIO_SetOutputPin>
            break;
 8007c5a:	e015      	b.n	8007c88 <switch_board+0x80>
        case 2: // CAM
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c60:	480b      	ldr	r0, [pc, #44]	@ (8007c90 <switch_board+0x88>)
 8007c62:	f7ff ffa1 	bl	8007ba8 <LL_GPIO_SetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c6a:	4809      	ldr	r0, [pc, #36]	@ (8007c90 <switch_board+0x88>)
 8007c6c:	f7ff ffaa 	bl	8007bc4 <LL_GPIO_ResetOutputPin>
            break;
 8007c70:	e00a      	b.n	8007c88 <switch_board+0x80>
        case 3: // IOU
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007c72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007c76:	4806      	ldr	r0, [pc, #24]	@ (8007c90 <switch_board+0x88>)
 8007c78:	f7ff ff96 	bl	8007ba8 <LL_GPIO_SetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007c7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c80:	4803      	ldr	r0, [pc, #12]	@ (8007c90 <switch_board+0x88>)
 8007c82:	f7ff ff91 	bl	8007ba8 <LL_GPIO_SetOutputPin>
            break;
 8007c86:	bf00      	nop
    }
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40020000 	.word	0x40020000

08007c94 <RS422_periodic_task>:
uint8_t packet_sig = 0;
uint8_t currentSourceBuffer = 0;
volatile uint8_t packet_count = 0x00;


void RS422_periodic_task(void) {
 8007c94:	b590      	push	{r4, r7, lr}
 8007c96:	b091      	sub	sp, #68	@ 0x44
 8007c98:	af04      	add	r7, sp, #16
	if (rs422_report_enable) {
 8007c9a:	4b87      	ldr	r3, [pc, #540]	@ (8007eb8 <RS422_periodic_task+0x224>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 81bd 	beq.w	8008020 <RS422_periodic_task+0x38c>

        packet_count = 0;
 8007ca6:	4b85      	ldr	r3, [pc, #532]	@ (8007ebc <RS422_periodic_task+0x228>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	701a      	strb	r2, [r3, #0]
        uint32_t packets_per_second = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch (RS422_task_context.taskProperty.taskPeriodInMS) {
 8007cb0:	4b83      	ldr	r3, [pc, #524]	@ (8007ec0 <RS422_periodic_task+0x22c>)
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007cb8:	d06f      	beq.n	8007d9a <RS422_periodic_task+0x106>
 8007cba:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007cbe:	f200 8093 	bhi.w	8007de8 <RS422_periodic_task+0x154>
 8007cc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cc6:	d06b      	beq.n	8007da0 <RS422_periodic_task+0x10c>
 8007cc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ccc:	f200 808c 	bhi.w	8007de8 <RS422_periodic_task+0x154>
 8007cd0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007cd4:	d067      	beq.n	8007da6 <RS422_periodic_task+0x112>
 8007cd6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007cda:	f200 8085 	bhi.w	8007de8 <RS422_periodic_task+0x154>
 8007cde:	f240 124d 	movw	r2, #333	@ 0x14d
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d062      	beq.n	8007dac <RS422_periodic_task+0x118>
 8007ce6:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8007cea:	d27d      	bcs.n	8007de8 <RS422_periodic_task+0x154>
 8007cec:	2bfa      	cmp	r3, #250	@ 0xfa
 8007cee:	d060      	beq.n	8007db2 <RS422_periodic_task+0x11e>
 8007cf0:	2bfa      	cmp	r3, #250	@ 0xfa
 8007cf2:	d879      	bhi.n	8007de8 <RS422_periodic_task+0x154>
 8007cf4:	2bc8      	cmp	r3, #200	@ 0xc8
 8007cf6:	d05f      	beq.n	8007db8 <RS422_periodic_task+0x124>
 8007cf8:	2bc8      	cmp	r3, #200	@ 0xc8
 8007cfa:	d875      	bhi.n	8007de8 <RS422_periodic_task+0x154>
 8007cfc:	2ba7      	cmp	r3, #167	@ 0xa7
 8007cfe:	d05e      	beq.n	8007dbe <RS422_periodic_task+0x12a>
 8007d00:	2ba7      	cmp	r3, #167	@ 0xa7
 8007d02:	d871      	bhi.n	8007de8 <RS422_periodic_task+0x154>
 8007d04:	2b8f      	cmp	r3, #143	@ 0x8f
 8007d06:	d05d      	beq.n	8007dc4 <RS422_periodic_task+0x130>
 8007d08:	2b8f      	cmp	r3, #143	@ 0x8f
 8007d0a:	d86d      	bhi.n	8007de8 <RS422_periodic_task+0x154>
 8007d0c:	2b6f      	cmp	r3, #111	@ 0x6f
 8007d0e:	d841      	bhi.n	8007d94 <RS422_periodic_task+0x100>
 8007d10:	2b53      	cmp	r3, #83	@ 0x53
 8007d12:	d369      	bcc.n	8007de8 <RS422_periodic_task+0x154>
 8007d14:	3b53      	subs	r3, #83	@ 0x53
 8007d16:	2b1c      	cmp	r3, #28
 8007d18:	d866      	bhi.n	8007de8 <RS422_periodic_task+0x154>
 8007d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <RS422_periodic_task+0x8c>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007de3 	.word	0x08007de3
 8007d24:	08007de9 	.word	0x08007de9
 8007d28:	08007de9 	.word	0x08007de9
 8007d2c:	08007de9 	.word	0x08007de9
 8007d30:	08007de9 	.word	0x08007de9
 8007d34:	08007de9 	.word	0x08007de9
 8007d38:	08007de9 	.word	0x08007de9
 8007d3c:	08007de9 	.word	0x08007de9
 8007d40:	08007ddd 	.word	0x08007ddd
 8007d44:	08007de9 	.word	0x08007de9
 8007d48:	08007de9 	.word	0x08007de9
 8007d4c:	08007de9 	.word	0x08007de9
 8007d50:	08007de9 	.word	0x08007de9
 8007d54:	08007de9 	.word	0x08007de9
 8007d58:	08007de9 	.word	0x08007de9
 8007d5c:	08007de9 	.word	0x08007de9
 8007d60:	08007de9 	.word	0x08007de9
 8007d64:	08007dd7 	.word	0x08007dd7
 8007d68:	08007de9 	.word	0x08007de9
 8007d6c:	08007de9 	.word	0x08007de9
 8007d70:	08007de9 	.word	0x08007de9
 8007d74:	08007de9 	.word	0x08007de9
 8007d78:	08007de9 	.word	0x08007de9
 8007d7c:	08007de9 	.word	0x08007de9
 8007d80:	08007de9 	.word	0x08007de9
 8007d84:	08007de9 	.word	0x08007de9
 8007d88:	08007de9 	.word	0x08007de9
 8007d8c:	08007de9 	.word	0x08007de9
 8007d90:	08007dd1 	.word	0x08007dd1
 8007d94:	2b7d      	cmp	r3, #125	@ 0x7d
 8007d96:	d018      	beq.n	8007dca <RS422_periodic_task+0x136>
 8007d98:	e026      	b.n	8007de8 <RS422_periodic_task+0x154>
            case 2000:
                packets_per_second = 1;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007d9e:	e026      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 1000:
                packets_per_second = 1;
 8007da0:	2301      	movs	r3, #1
 8007da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007da4:	e023      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 500:
                packets_per_second = 2;
 8007da6:	2302      	movs	r3, #2
 8007da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007daa:	e020      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 333:
                packets_per_second = 3;
 8007dac:	2303      	movs	r3, #3
 8007dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007db0:	e01d      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 250:
                packets_per_second = 4;
 8007db2:	2304      	movs	r3, #4
 8007db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007db6:	e01a      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 200:
                packets_per_second = 5;
 8007db8:	2305      	movs	r3, #5
 8007dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dbc:	e017      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 167:
                packets_per_second = 6;
 8007dbe:	2306      	movs	r3, #6
 8007dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dc2:	e014      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 143:
                packets_per_second = 7;
 8007dc4:	2307      	movs	r3, #7
 8007dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dc8:	e011      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 125:
                packets_per_second = 8;
 8007dca:	2308      	movs	r3, #8
 8007dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dce:	e00e      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 111:
                packets_per_second = 9;
 8007dd0:	2309      	movs	r3, #9
 8007dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dd4:	e00b      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 100:
                packets_per_second = 10;
 8007dd6:	230a      	movs	r3, #10
 8007dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dda:	e008      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 91:
                packets_per_second = 11;
 8007ddc:	230b      	movs	r3, #11
 8007dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007de0:	e005      	b.n	8007dee <RS422_periodic_task+0x15a>
            case 83:
                packets_per_second = 12;
 8007de2:	230c      	movs	r3, #12
 8007de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007de6:	e002      	b.n	8007dee <RS422_periodic_task+0x15a>
            default:
                packets_per_second = 1;
 8007de8:	2301      	movs	r3, #1
 8007dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 8007dec:	bf00      	nop
        }


		if (packet_count == 0)
 8007dee:	4b33      	ldr	r3, [pc, #204]	@ (8007ebc <RS422_periodic_task+0x228>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f040 80a7 	bne.w	8007f48 <RS422_periodic_task+0x2b4>
		{

			nextBuffer[0] = 0x02;
 8007dfa:	4b32      	ldr	r3, [pc, #200]	@ (8007ec4 <RS422_periodic_task+0x230>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	701a      	strb	r2, [r3, #0]
			nextBuffer[ARRAY_SIZE - 1] = 0x03;
 8007e02:	4b30      	ldr	r3, [pc, #192]	@ (8007ec4 <RS422_periodic_task+0x230>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4b30      	ldr	r3, [pc, #192]	@ (8007ec8 <RS422_periodic_task+0x234>)
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	4413      	add	r3, r2
 8007e0e:	2203      	movs	r2, #3
 8007e10:	701a      	strb	r2, [r3, #0]

		    uint8_t day, date, month, year, hour, min, sec;
		    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8007e12:	f107 040c 	add.w	r4, r7, #12
 8007e16:	f107 020d 	add.w	r2, r7, #13
 8007e1a:	f107 010e 	add.w	r1, r7, #14
 8007e1e:	f107 000f 	add.w	r0, r7, #15
 8007e22:	f107 0309 	add.w	r3, r7, #9
 8007e26:	9302      	str	r3, [sp, #8]
 8007e28:	f107 030a 	add.w	r3, r7, #10
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	f107 030b 	add.w	r3, r7, #11
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4623      	mov	r3, r4
 8007e36:	f7f9 fb15 	bl	8001464 <DS3231_GetDateTime>

		    float temp;
		    uint8_t rounded_temp;

		    temp = DS3231_GetTemperature();
 8007e3a:	f7f9 fbbb 	bl	80015b4 <DS3231_GetTemperature>
 8007e3e:	ed87 0a06 	vstr	s0, [r7, #24]
		    rounded_temp = (uint8_t)temp;
 8007e42:	edd7 7a06 	vldr	s15, [r7, #24]
 8007e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4a:	edc7 7a01 	vstr	s15, [r7, #4]
 8007e4e:	793b      	ldrb	r3, [r7, #4]
 8007e50:	75fb      	strb	r3, [r7, #23]

		    nextBuffer[2] = sec;
 8007e52:	4b1c      	ldr	r3, [pc, #112]	@ (8007ec4 <RS422_periodic_task+0x230>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3302      	adds	r3, #2
 8007e58:	7a7a      	ldrb	r2, [r7, #9]
 8007e5a:	701a      	strb	r2, [r3, #0]
		    nextBuffer[3] = min;
 8007e5c:	4b19      	ldr	r3, [pc, #100]	@ (8007ec4 <RS422_periodic_task+0x230>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3303      	adds	r3, #3
 8007e62:	7aba      	ldrb	r2, [r7, #10]
 8007e64:	701a      	strb	r2, [r3, #0]
		    nextBuffer[4] = hour;
 8007e66:	4b17      	ldr	r3, [pc, #92]	@ (8007ec4 <RS422_periodic_task+0x230>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	7afa      	ldrb	r2, [r7, #11]
 8007e6e:	701a      	strb	r2, [r3, #0]
		    nextBuffer[5] = date;
 8007e70:	4b14      	ldr	r3, [pc, #80]	@ (8007ec4 <RS422_periodic_task+0x230>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3305      	adds	r3, #5
 8007e76:	7bba      	ldrb	r2, [r7, #14]
 8007e78:	701a      	strb	r2, [r3, #0]
		    nextBuffer[6] = month;
 8007e7a:	4b12      	ldr	r3, [pc, #72]	@ (8007ec4 <RS422_periodic_task+0x230>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3306      	adds	r3, #6
 8007e80:	7b7a      	ldrb	r2, [r7, #13]
 8007e82:	701a      	strb	r2, [r3, #0]
		    nextBuffer[7] = rounded_temp;
 8007e84:	4b0f      	ldr	r3, [pc, #60]	@ (8007ec4 <RS422_periodic_task+0x230>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3307      	adds	r3, #7
 8007e8a:	7dfa      	ldrb	r2, [r7, #23]
 8007e8c:	701a      	strb	r2, [r3, #0]




			for (int i = 135; i <= 160; i++) {
 8007e8e:	2387      	movs	r3, #135	@ 0x87
 8007e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e92:	e00b      	b.n	8007eac <RS422_periodic_task+0x218>
				nextBuffer[i] = i - 135;
 8007e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec4 <RS422_periodic_task+0x230>)
 8007e9a:	6819      	ldr	r1, [r3, #0]
 8007e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9e:	440b      	add	r3, r1
 8007ea0:	3279      	adds	r2, #121	@ 0x79
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]
			for (int i = 135; i <= 160; i++) {
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eae:	2ba0      	cmp	r3, #160	@ 0xa0
 8007eb0:	ddf0      	ble.n	8007e94 <RS422_periodic_task+0x200>
			}


			for (int i = 161; i <= ARRAY_SIZE-2; i++) {
 8007eb2:	23a1      	movs	r3, #161	@ 0xa1
 8007eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eb6:	e015      	b.n	8007ee4 <RS422_periodic_task+0x250>
 8007eb8:	20005de9 	.word	0x20005de9
 8007ebc:	200065bd 	.word	0x200065bd
 8007ec0:	20000484 	.word	0x20000484
 8007ec4:	2000049c 	.word	0x2000049c
 8007ec8:	20000480 	.word	0x20000480
				nextBuffer[i] = i - 161;
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	4b55      	ldr	r3, [pc, #340]	@ (8008028 <RS422_periodic_task+0x394>)
 8007ed2:	6819      	ldr	r1, [r3, #0]
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed6:	440b      	add	r3, r1
 8007ed8:	325f      	adds	r2, #95	@ 0x5f
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	701a      	strb	r2, [r3, #0]
			for (int i = 161; i <= ARRAY_SIZE-2; i++) {
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee4:	4b51      	ldr	r3, [pc, #324]	@ (800802c <RS422_periodic_task+0x398>)
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eec:	429a      	cmp	r2, r3
 8007eee:	dbed      	blt.n	8007ecc <RS422_periodic_task+0x238>
			}


			uint16_t crc = crc16_CCITT(0xFFFF, &nextBuffer[1], ARRAY_SIZE - 4);
 8007ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8008028 <RS422_periodic_task+0x394>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	1c59      	adds	r1, r3, #1
 8007ef6:	4b4d      	ldr	r3, [pc, #308]	@ (800802c <RS422_periodic_task+0x398>)
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	3b04      	subs	r3, #4
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007f04:	f004 f8d4 	bl	800c0b0 <crc16_CCITT>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	82bb      	strh	r3, [r7, #20]

			nextBuffer[ARRAY_SIZE - 3] = (crc >> 8) & 0xFF;  // CRC#HIGH
 8007f0c:	8abb      	ldrh	r3, [r7, #20]
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	b299      	uxth	r1, r3
 8007f12:	4b45      	ldr	r3, [pc, #276]	@ (8008028 <RS422_periodic_task+0x394>)
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	4b45      	ldr	r3, [pc, #276]	@ (800802c <RS422_periodic_task+0x398>)
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	3b03      	subs	r3, #3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	b2ca      	uxtb	r2, r1
 8007f20:	701a      	strb	r2, [r3, #0]
			nextBuffer[ARRAY_SIZE - 2] = crc & 0xFF;         // CRC#LOW
 8007f22:	4b41      	ldr	r3, [pc, #260]	@ (8008028 <RS422_periodic_task+0x394>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4b41      	ldr	r3, [pc, #260]	@ (800802c <RS422_periodic_task+0x398>)
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	3b02      	subs	r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	8aba      	ldrh	r2, [r7, #20]
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	701a      	strb	r2, [r3, #0]

            // Switch buffers
            uint8_t* tempz = currentBuffer;
 8007f34:	4b3e      	ldr	r3, [pc, #248]	@ (8008030 <RS422_periodic_task+0x39c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	613b      	str	r3, [r7, #16]
            currentBuffer = nextBuffer;
 8007f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8008028 <RS422_periodic_task+0x394>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8008030 <RS422_periodic_task+0x39c>)
 8007f40:	6013      	str	r3, [r2, #0]
            nextBuffer = tempz;
 8007f42:	4a39      	ldr	r2, [pc, #228]	@ (8008028 <RS422_periodic_task+0x394>)
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	6013      	str	r3, [r2, #0]


		}

		currentBuffer[1] = packet_count;
 8007f48:	4b39      	ldr	r3, [pc, #228]	@ (8008030 <RS422_periodic_task+0x39c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	4a39      	ldr	r2, [pc, #228]	@ (8008034 <RS422_periodic_task+0x3a0>)
 8007f50:	7812      	ldrb	r2, [r2, #0]
 8007f52:	b2d2      	uxtb	r2, r2
 8007f54:	701a      	strb	r2, [r3, #0]

		if (swap_byte_enable){
 8007f56:	4b38      	ldr	r3, [pc, #224]	@ (8008038 <RS422_periodic_task+0x3a4>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d026      	beq.n	8007fae <RS422_periodic_task+0x31a>
			for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 8007f60:	2301      	movs	r3, #1
 8007f62:	623b      	str	r3, [r7, #32]
 8007f64:	e01d      	b.n	8007fa2 <RS422_periodic_task+0x30e>
				if (currentBuffer[i] == 0x02) {
 8007f66:	4b32      	ldr	r3, [pc, #200]	@ (8008030 <RS422_periodic_task+0x39c>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d106      	bne.n	8007f82 <RS422_periodic_task+0x2ee>
					currentBuffer[i] = 0xFE;
 8007f74:	4b2e      	ldr	r3, [pc, #184]	@ (8008030 <RS422_periodic_task+0x39c>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	22fe      	movs	r2, #254	@ 0xfe
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	e00c      	b.n	8007f9c <RS422_periodic_task+0x308>
				} else if (currentBuffer[i] == 0x03) {
 8007f82:	4b2b      	ldr	r3, [pc, #172]	@ (8008030 <RS422_periodic_task+0x39c>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	4413      	add	r3, r2
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d105      	bne.n	8007f9c <RS422_periodic_task+0x308>
					currentBuffer[i] = 0xFD;
 8007f90:	4b27      	ldr	r3, [pc, #156]	@ (8008030 <RS422_periodic_task+0x39c>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	4413      	add	r3, r2
 8007f98:	22fd      	movs	r2, #253	@ 0xfd
 8007f9a:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	623b      	str	r3, [r7, #32]
 8007fa2:	4b22      	ldr	r3, [pc, #136]	@ (800802c <RS422_periodic_task+0x398>)
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	6a3a      	ldr	r2, [r7, #32]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	dbdb      	blt.n	8007f66 <RS422_periodic_task+0x2d2>
				}
			}
		}

        for (int i = 0; i < ARRAY_SIZE; i++) {
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61fb      	str	r3, [r7, #28]
 8007fb2:	e00b      	b.n	8007fcc <RS422_periodic_task+0x338>
            Uart_write(UART5, currentBuffer[i]);
 8007fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8008030 <RS422_periodic_task+0x39c>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	4413      	add	r3, r2
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	481e      	ldr	r0, [pc, #120]	@ (800803c <RS422_periodic_task+0x3a8>)
 8007fc2:	f7f9 fec5 	bl	8001d50 <Uart_write>
        for (int i = 0; i < ARRAY_SIZE; i++) {
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	4b17      	ldr	r3, [pc, #92]	@ (800802c <RS422_periodic_task+0x398>)
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	dbed      	blt.n	8007fb4 <RS422_periodic_task+0x320>
        }

        if(packet_sig){
 8007fd8:	4b19      	ldr	r3, [pc, #100]	@ (8008040 <RS422_periodic_task+0x3ac>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d007      	beq.n	8007ff0 <RS422_periodic_task+0x35c>
        	packet_sig = 0;
 8007fe0:	4b17      	ldr	r3, [pc, #92]	@ (8008040 <RS422_periodic_task+0x3ac>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
            LL_GPIO_ResetOutputPin(GPIOA,LORA_IO0_Pin);
 8007fe6:	2110      	movs	r1, #16
 8007fe8:	4816      	ldr	r0, [pc, #88]	@ (8008044 <RS422_periodic_task+0x3b0>)
 8007fea:	f7ff fdeb 	bl	8007bc4 <LL_GPIO_ResetOutputPin>
 8007fee:	e006      	b.n	8007ffe <RS422_periodic_task+0x36a>
        }else{
        	packet_sig = 1;
 8007ff0:	4b13      	ldr	r3, [pc, #76]	@ (8008040 <RS422_periodic_task+0x3ac>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	701a      	strb	r2, [r3, #0]
        	LL_GPIO_SetOutputPin(GPIOA,LORA_IO0_Pin);
 8007ff6:	2110      	movs	r1, #16
 8007ff8:	4812      	ldr	r0, [pc, #72]	@ (8008044 <RS422_periodic_task+0x3b0>)
 8007ffa:	f7ff fdd5 	bl	8007ba8 <LL_GPIO_SetOutputPin>
        }

        packet_count++;
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8008034 <RS422_periodic_task+0x3a0>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	3301      	adds	r3, #1
 8008006:	b2da      	uxtb	r2, r3
 8008008:	4b0a      	ldr	r3, [pc, #40]	@ (8008034 <RS422_periodic_task+0x3a0>)
 800800a:	701a      	strb	r2, [r3, #0]

        if (packet_count >= packets_per_second) {
 800800c:	4b09      	ldr	r3, [pc, #36]	@ (8008034 <RS422_periodic_task+0x3a0>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	b2db      	uxtb	r3, r3
 8008012:	461a      	mov	r2, r3
 8008014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008016:	4293      	cmp	r3, r2
 8008018:	d802      	bhi.n	8008020 <RS422_periodic_task+0x38c>
            packet_count = 0;
 800801a:	4b06      	ldr	r3, [pc, #24]	@ (8008034 <RS422_periodic_task+0x3a0>)
 800801c:	2200      	movs	r2, #0
 800801e:	701a      	strb	r2, [r3, #0]
        }

	}
}
 8008020:	bf00      	nop
 8008022:	3734      	adds	r7, #52	@ 0x34
 8008024:	46bd      	mov	sp, r7
 8008026:	bd90      	pop	{r4, r7, pc}
 8008028:	2000049c 	.word	0x2000049c
 800802c:	20000480 	.word	0x20000480
 8008030:	20000498 	.word	0x20000498
 8008034:	200065bd 	.word	0x200065bd
 8008038:	20000482 	.word	0x20000482
 800803c:	40005000 	.word	0x40005000
 8008040:	200065bc 	.word	0x200065bc
 8008044:	40020000 	.word	0x40020000

08008048 <frame_processing_rs422>:

void frame_processing_rs422(fsp_packet_t *fsp_pkt){
 8008048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800804c:	f5ad 6ddb 	sub.w	sp, sp, #1752	@ 0x6d8
 8008050:	af34      	add	r7, sp, #208	@ 0xd0
 8008052:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008056:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800805a:	6018      	str	r0, [r3, #0]
	switch(fsp_pkt->payload[0])
 800805c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008060:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	795b      	ldrb	r3, [r3, #5]
 8008068:	2b13      	cmp	r3, #19
 800806a:	f000 8629 	beq.w	8008cc0 <frame_processing_rs422+0xc78>
 800806e:	2b13      	cmp	r3, #19
 8008070:	f301 833a 	bgt.w	80096e8 <frame_processing_rs422+0x16a0>
 8008074:	2b06      	cmp	r3, #6
 8008076:	f000 82eb 	beq.w	8008650 <frame_processing_rs422+0x608>
 800807a:	2b08      	cmp	r3, #8
 800807c:	f041 8334 	bne.w	80096e8 <frame_processing_rs422+0x16a0>
	{
		case 0x08:
	    {
			if(auto_report_enabled || rf_report_enable){
 8008080:	4bab      	ldr	r3, [pc, #684]	@ (8008330 <frame_processing_rs422+0x2e8>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <frame_processing_rs422+0x4e>
 800808a:	4baa      	ldr	r3, [pc, #680]	@ (8008334 <frame_processing_rs422+0x2ec>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 82a3 	beq.w	80085dc <frame_processing_rs422+0x594>
				if(auto_report_enabled){
 8008096:	4ba6      	ldr	r3, [pc, #664]	@ (8008330 <frame_processing_rs422+0x2e8>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d004      	beq.n	80080aa <frame_processing_rs422+0x62>
					Uart_sendstring(UART4, "\nPMU:\n");
 80080a0:	49a5      	ldr	r1, [pc, #660]	@ (8008338 <frame_processing_rs422+0x2f0>)
 80080a2:	48a6      	ldr	r0, [pc, #664]	@ (800833c <frame_processing_rs422+0x2f4>)
 80080a4:	f7f9 ffa8 	bl	8001ff8 <Uart_sendstring>
 80080a8:	e003      	b.n	80080b2 <frame_processing_rs422+0x6a>
				}else{
					Uart_sendstring(USART2, "\nPMU:\n");
 80080aa:	49a3      	ldr	r1, [pc, #652]	@ (8008338 <frame_processing_rs422+0x2f0>)
 80080ac:	48a4      	ldr	r0, [pc, #656]	@ (8008340 <frame_processing_rs422+0x2f8>)
 80080ae:	f7f9 ffa3 	bl	8001ff8 <Uart_sendstring>
				}

				int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 80080b2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80080b6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	799b      	ldrb	r3, [r3, #6]
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	b21a      	sxth	r2, r3
 80080c2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80080c6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	79db      	ldrb	r3, [r3, #7]
 80080ce:	b21b      	sxth	r3, r3
 80080d0:	4313      	orrs	r3, r2
 80080d2:	f8a7 35c8 	strh.w	r3, [r7, #1480]	@ 0x5c8
				int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 80080d6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80080da:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	7a1b      	ldrb	r3, [r3, #8]
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	b21a      	sxth	r2, r3
 80080e6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80080ea:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	7a5b      	ldrb	r3, [r3, #9]
 80080f2:	b21b      	sxth	r3, r3
 80080f4:	4313      	orrs	r3, r2
 80080f6:	f8a7 35c6 	strh.w	r3, [r7, #1478]	@ 0x5c6
				int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 80080fa:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80080fe:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	7a9b      	ldrb	r3, [r3, #10]
 8008106:	021b      	lsls	r3, r3, #8
 8008108:	b21a      	sxth	r2, r3
 800810a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800810e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	7adb      	ldrb	r3, [r3, #11]
 8008116:	b21b      	sxth	r3, r3
 8008118:	4313      	orrs	r3, r2
 800811a:	f8a7 35c4 	strh.w	r3, [r7, #1476]	@ 0x5c4
				int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800811e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008122:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	7b1b      	ldrb	r3, [r3, #12]
 800812a:	021b      	lsls	r3, r3, #8
 800812c:	b21a      	sxth	r2, r3
 800812e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008132:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	7b5b      	ldrb	r3, [r3, #13]
 800813a:	b21b      	sxth	r3, r3
 800813c:	4313      	orrs	r3, r2
 800813e:	f8a7 35c2 	strh.w	r3, [r7, #1474]	@ 0x5c2

				uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 8008142:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008146:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	7b9b      	ldrb	r3, [r3, #14]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	b21a      	sxth	r2, r3
 8008152:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008156:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	7bdb      	ldrb	r3, [r3, #15]
 800815e:	b21b      	sxth	r3, r3
 8008160:	4313      	orrs	r3, r2
 8008162:	b21b      	sxth	r3, r3
 8008164:	f8a7 35c0 	strh.w	r3, [r7, #1472]	@ 0x5c0
				uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8008168:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800816c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	7c1b      	ldrb	r3, [r3, #16]
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	b21a      	sxth	r2, r3
 8008178:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800817c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	7c5b      	ldrb	r3, [r3, #17]
 8008184:	b21b      	sxth	r3, r3
 8008186:	4313      	orrs	r3, r2
 8008188:	b21b      	sxth	r3, r3
 800818a:	f8a7 35be 	strh.w	r3, [r7, #1470]	@ 0x5be
				uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800818e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008192:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	7c9b      	ldrb	r3, [r3, #18]
 800819a:	021b      	lsls	r3, r3, #8
 800819c:	b21a      	sxth	r2, r3
 800819e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80081a2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	7cdb      	ldrb	r3, [r3, #19]
 80081aa:	b21b      	sxth	r3, r3
 80081ac:	4313      	orrs	r3, r2
 80081ae:	b21b      	sxth	r3, r3
 80081b0:	f8a7 35bc 	strh.w	r3, [r7, #1468]	@ 0x5bc
				uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 80081b4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80081b8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	7d1b      	ldrb	r3, [r3, #20]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	b21a      	sxth	r2, r3
 80081c4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80081c8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	7d5b      	ldrb	r3, [r3, #21]
 80081d0:	b21b      	sxth	r3, r3
 80081d2:	4313      	orrs	r3, r2
 80081d4:	b21b      	sxth	r3, r3
 80081d6:	f8a7 35ba 	strh.w	r3, [r7, #1466]	@ 0x5ba

				uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 80081da:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80081de:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	7d9b      	ldrb	r3, [r3, #22]
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	b21a      	sxth	r2, r3
 80081ea:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80081ee:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	7ddb      	ldrb	r3, [r3, #23]
 80081f6:	b21b      	sxth	r3, r3
 80081f8:	4313      	orrs	r3, r2
 80081fa:	b21b      	sxth	r3, r3
 80081fc:	f8a7 35b8 	strh.w	r3, [r7, #1464]	@ 0x5b8
				uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 8008200:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008204:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	7e1b      	ldrb	r3, [r3, #24]
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	b21a      	sxth	r2, r3
 8008210:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008214:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	7e5b      	ldrb	r3, [r3, #25]
 800821c:	b21b      	sxth	r3, r3
 800821e:	4313      	orrs	r3, r2
 8008220:	b21b      	sxth	r3, r3
 8008222:	f8a7 35b6 	strh.w	r3, [r7, #1462]	@ 0x5b6

				uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 8008226:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800822a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	7e9b      	ldrb	r3, [r3, #26]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	b21a      	sxth	r2, r3
 8008236:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800823a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	7edb      	ldrb	r3, [r3, #27]
 8008242:	b21b      	sxth	r3, r3
 8008244:	4313      	orrs	r3, r2
 8008246:	b21b      	sxth	r3, r3
 8008248:	f8a7 35b4 	strh.w	r3, [r7, #1460]	@ 0x5b4
				uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800824c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008250:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	7f1b      	ldrb	r3, [r3, #28]
 8008258:	021b      	lsls	r3, r3, #8
 800825a:	b21a      	sxth	r2, r3
 800825c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008260:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	7f5b      	ldrb	r3, [r3, #29]
 8008268:	b21b      	sxth	r3, r3
 800826a:	4313      	orrs	r3, r2
 800826c:	b21b      	sxth	r3, r3
 800826e:	f8a7 35b2 	strh.w	r3, [r7, #1458]	@ 0x5b2

				char buffer_0x08[500];
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008272:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 8008276:	2b00      	cmp	r3, #0
 8008278:	da03      	bge.n	8008282 <frame_processing_rs422+0x23a>
 800827a:	4b32      	ldr	r3, [pc, #200]	@ (8008344 <frame_processing_rs422+0x2fc>)
 800827c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008280:	e002      	b.n	8008288 <frame_processing_rs422+0x240>
 8008282:	4b31      	ldr	r3, [pc, #196]	@ (8008348 <frame_processing_rs422+0x300>)
 8008284:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 8008288:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 800828c:	2b00      	cmp	r3, #0
 800828e:	bfb8      	it	lt
 8008290:	425b      	neglt	r3, r3
 8008292:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008294:	4a2d      	ldr	r2, [pc, #180]	@ (800834c <frame_processing_rs422+0x304>)
 8008296:	fb82 1203 	smull	r1, r2, r2, r3
 800829a:	1152      	asrs	r2, r2, #5
 800829c:	17db      	asrs	r3, r3, #31
 800829e:	eba2 0c03 	sub.w	ip, r2, r3
						ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 80082a2:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfb8      	it	lt
 80082aa:	425b      	neglt	r3, r3
 80082ac:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80082ae:	4a27      	ldr	r2, [pc, #156]	@ (800834c <frame_processing_rs422+0x304>)
 80082b0:	fb82 1203 	smull	r1, r2, r2, r3
 80082b4:	1151      	asrs	r1, r2, #5
 80082b6:	17da      	asrs	r2, r3, #31
 80082b8:	1a8a      	subs	r2, r1, r2
 80082ba:	4611      	mov	r1, r2
 80082bc:	2264      	movs	r2, #100	@ 0x64
 80082be:	fb01 f202 	mul.w	r2, r1, r2
 80082c2:	1a9b      	subs	r3, r3, r2
 80082c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80082c8:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	da03      	bge.n	80082d8 <frame_processing_rs422+0x290>
 80082d0:	4b1c      	ldr	r3, [pc, #112]	@ (8008344 <frame_processing_rs422+0x2fc>)
 80082d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082d6:	e002      	b.n	80082de <frame_processing_rs422+0x296>
 80082d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008348 <frame_processing_rs422+0x300>)
 80082da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 80082de:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bfb8      	it	lt
 80082e6:	425b      	neglt	r3, r3
 80082e8:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80082ea:	4a18      	ldr	r2, [pc, #96]	@ (800834c <frame_processing_rs422+0x304>)
 80082ec:	fb82 1203 	smull	r1, r2, r2, r3
 80082f0:	1152      	asrs	r2, r2, #5
 80082f2:	17db      	asrs	r3, r3, #31
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 80082fa:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bfb8      	it	lt
 8008302:	425b      	neglt	r3, r3
 8008304:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008306:	4a11      	ldr	r2, [pc, #68]	@ (800834c <frame_processing_rs422+0x304>)
 8008308:	fb82 1203 	smull	r1, r2, r2, r3
 800830c:	1151      	asrs	r1, r2, #5
 800830e:	17da      	asrs	r2, r3, #31
 8008310:	1a8a      	subs	r2, r1, r2
 8008312:	4611      	mov	r1, r2
 8008314:	2264      	movs	r2, #100	@ 0x64
 8008316:	fb01 f202 	mul.w	r2, r1, r2
 800831a:	1a9b      	subs	r3, r3, r2
 800831c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008320:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 8008324:	2b00      	cmp	r3, #0
 8008326:	da13      	bge.n	8008350 <frame_processing_rs422+0x308>
 8008328:	4b06      	ldr	r3, [pc, #24]	@ (8008344 <frame_processing_rs422+0x2fc>)
 800832a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800832e:	e012      	b.n	8008356 <frame_processing_rs422+0x30e>
 8008330:	20005de8 	.word	0x20005de8
 8008334:	20005dea 	.word	0x20005dea
 8008338:	080155e8 	.word	0x080155e8
 800833c:	40004c00 	.word	0x40004c00
 8008340:	40004400 	.word	0x40004400
 8008344:	080155f0 	.word	0x080155f0
 8008348:	080155f4 	.word	0x080155f4
 800834c:	51eb851f 	.word	0x51eb851f
 8008350:	4bb5      	ldr	r3, [pc, #724]	@ (8008628 <frame_processing_rs422+0x5e0>)
 8008352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 8008356:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfb8      	it	lt
 800835e:	425b      	neglt	r3, r3
 8008360:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008362:	4ab2      	ldr	r2, [pc, #712]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008364:	fb82 1203 	smull	r1, r2, r2, r3
 8008368:	1152      	asrs	r2, r2, #5
 800836a:	17db      	asrs	r3, r3, #31
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 8008372:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 8008376:	2b00      	cmp	r3, #0
 8008378:	bfb8      	it	lt
 800837a:	425b      	neglt	r3, r3
 800837c:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800837e:	4aab      	ldr	r2, [pc, #684]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008380:	fb82 1203 	smull	r1, r2, r2, r3
 8008384:	1151      	asrs	r1, r2, #5
 8008386:	17da      	asrs	r2, r3, #31
 8008388:	1a8a      	subs	r2, r1, r2
 800838a:	4611      	mov	r1, r2
 800838c:	2264      	movs	r2, #100	@ 0x64
 800838e:	fb01 f202 	mul.w	r2, r1, r2
 8008392:	1a9b      	subs	r3, r3, r2
 8008394:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008398:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 800839c:	2b00      	cmp	r3, #0
 800839e:	da03      	bge.n	80083a8 <frame_processing_rs422+0x360>
 80083a0:	4ba3      	ldr	r3, [pc, #652]	@ (8008630 <frame_processing_rs422+0x5e8>)
 80083a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083a6:	e002      	b.n	80083ae <frame_processing_rs422+0x366>
 80083a8:	4b9f      	ldr	r3, [pc, #636]	@ (8008628 <frame_processing_rs422+0x5e0>)
 80083aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 80083ae:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bfb8      	it	lt
 80083b6:	425b      	neglt	r3, r3
 80083b8:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80083ba:	4a9c      	ldr	r2, [pc, #624]	@ (800862c <frame_processing_rs422+0x5e4>)
 80083bc:	fb82 1203 	smull	r1, r2, r2, r3
 80083c0:	1152      	asrs	r2, r2, #5
 80083c2:	17db      	asrs	r3, r3, #31
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 80083ca:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	bfb8      	it	lt
 80083d2:	425b      	neglt	r3, r3
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	4619      	mov	r1, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80083d8:	4b94      	ldr	r3, [pc, #592]	@ (800862c <frame_processing_rs422+0x5e4>)
 80083da:	fb83 2301 	smull	r2, r3, r3, r1
 80083de:	115a      	asrs	r2, r3, #5
 80083e0:	17cb      	asrs	r3, r1, #31
 80083e2:	1ad6      	subs	r6, r2, r3
 80083e4:	2364      	movs	r3, #100	@ 0x64
 80083e6:	fb06 f303 	mul.w	r3, r6, r3
 80083ea:	1ace      	subs	r6, r1, r3
 80083ec:	f8b7 35c0 	ldrh.w	r3, [r7, #1472]	@ 0x5c0
 80083f0:	4a8e      	ldr	r2, [pc, #568]	@ (800862c <frame_processing_rs422+0x5e4>)
 80083f2:	fba2 2303 	umull	r2, r3, r2, r3
 80083f6:	095b      	lsrs	r3, r3, #5
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083fe:	f8b7 15c0 	ldrh.w	r1, [r7, #1472]	@ 0x5c0
 8008402:	4b8a      	ldr	r3, [pc, #552]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008404:	fba3 2301 	umull	r2, r3, r3, r1
 8008408:	095a      	lsrs	r2, r3, #5
 800840a:	2364      	movs	r3, #100	@ 0x64
 800840c:	fb02 f303 	mul.w	r3, r2, r3
 8008410:	1acb      	subs	r3, r1, r3
 8008412:	b29b      	uxth	r3, r3
 8008414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008418:	f8b7 25be 	ldrh.w	r2, [r7, #1470]	@ 0x5be
 800841c:	4b83      	ldr	r3, [pc, #524]	@ (800862c <frame_processing_rs422+0x5e4>)
 800841e:	fba3 2302 	umull	r2, r3, r3, r2
 8008422:	095b      	lsrs	r3, r3, #5
 8008424:	b29b      	uxth	r3, r3
 8008426:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800842a:	f8b7 15be 	ldrh.w	r1, [r7, #1470]	@ 0x5be
 800842e:	4b7f      	ldr	r3, [pc, #508]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008430:	fba3 2301 	umull	r2, r3, r3, r1
 8008434:	095a      	lsrs	r2, r3, #5
 8008436:	2364      	movs	r3, #100	@ 0x64
 8008438:	fb02 f303 	mul.w	r3, r2, r3
 800843c:	1acb      	subs	r3, r1, r3
 800843e:	b29b      	uxth	r3, r3
 8008440:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008442:	f8b7 25bc 	ldrh.w	r2, [r7, #1468]	@ 0x5bc
 8008446:	4b79      	ldr	r3, [pc, #484]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008448:	fba3 2302 	umull	r2, r3, r3, r2
 800844c:	095b      	lsrs	r3, r3, #5
 800844e:	b29b      	uxth	r3, r3
 8008450:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008452:	f8b7 15bc 	ldrh.w	r1, [r7, #1468]	@ 0x5bc
 8008456:	4b75      	ldr	r3, [pc, #468]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008458:	fba3 2301 	umull	r2, r3, r3, r1
 800845c:	095a      	lsrs	r2, r3, #5
 800845e:	2364      	movs	r3, #100	@ 0x64
 8008460:	fb02 f303 	mul.w	r3, r2, r3
 8008464:	1acb      	subs	r3, r1, r3
 8008466:	b29b      	uxth	r3, r3
 8008468:	677b      	str	r3, [r7, #116]	@ 0x74
 800846a:	f8b7 25ba 	ldrh.w	r2, [r7, #1466]	@ 0x5ba
 800846e:	4b6f      	ldr	r3, [pc, #444]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008470:	fba3 2302 	umull	r2, r3, r3, r2
 8008474:	095b      	lsrs	r3, r3, #5
 8008476:	b29b      	uxth	r3, r3
 8008478:	673b      	str	r3, [r7, #112]	@ 0x70
 800847a:	f8b7 15ba 	ldrh.w	r1, [r7, #1466]	@ 0x5ba
 800847e:	4b6b      	ldr	r3, [pc, #428]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008480:	fba3 2301 	umull	r2, r3, r3, r1
 8008484:	095a      	lsrs	r2, r3, #5
 8008486:	2364      	movs	r3, #100	@ 0x64
 8008488:	fb02 f303 	mul.w	r3, r2, r3
 800848c:	1acb      	subs	r3, r1, r3
 800848e:	b29b      	uxth	r3, r3
 8008490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008492:	f8b7 25b8 	ldrh.w	r2, [r7, #1464]	@ 0x5b8
 8008496:	4b65      	ldr	r3, [pc, #404]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008498:	fba3 2302 	umull	r2, r3, r3, r2
 800849c:	095b      	lsrs	r3, r3, #5
 800849e:	b29b      	uxth	r3, r3
 80084a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084a2:	f8b7 15b8 	ldrh.w	r1, [r7, #1464]	@ 0x5b8
 80084a6:	4b61      	ldr	r3, [pc, #388]	@ (800862c <frame_processing_rs422+0x5e4>)
 80084a8:	fba3 2301 	umull	r2, r3, r3, r1
 80084ac:	095a      	lsrs	r2, r3, #5
 80084ae:	2364      	movs	r3, #100	@ 0x64
 80084b0:	fb02 f303 	mul.w	r3, r2, r3
 80084b4:	1acb      	subs	r3, r1, r3
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80084ba:	f8b7 25b6 	ldrh.w	r2, [r7, #1462]	@ 0x5b6
 80084be:	4b5b      	ldr	r3, [pc, #364]	@ (800862c <frame_processing_rs422+0x5e4>)
 80084c0:	fba3 2302 	umull	r2, r3, r3, r2
 80084c4:	095b      	lsrs	r3, r3, #5
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80084ca:	f8b7 15b6 	ldrh.w	r1, [r7, #1462]	@ 0x5b6
 80084ce:	4b57      	ldr	r3, [pc, #348]	@ (800862c <frame_processing_rs422+0x5e4>)
 80084d0:	fba3 2301 	umull	r2, r3, r3, r1
 80084d4:	095a      	lsrs	r2, r3, #5
 80084d6:	2364      	movs	r3, #100	@ 0x64
 80084d8:	fb02 f303 	mul.w	r3, r2, r3
 80084dc:	1acb      	subs	r3, r1, r3
 80084de:	b29b      	uxth	r3, r3
 80084e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084e2:	f8b7 25b4 	ldrh.w	r2, [r7, #1460]	@ 0x5b4
 80084e6:	4b51      	ldr	r3, [pc, #324]	@ (800862c <frame_processing_rs422+0x5e4>)
 80084e8:	fba3 2302 	umull	r2, r3, r3, r2
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084f2:	f8b7 15b4 	ldrh.w	r1, [r7, #1460]	@ 0x5b4
 80084f6:	4b4d      	ldr	r3, [pc, #308]	@ (800862c <frame_processing_rs422+0x5e4>)
 80084f8:	fba3 2301 	umull	r2, r3, r3, r1
 80084fc:	095a      	lsrs	r2, r3, #5
 80084fe:	2364      	movs	r3, #100	@ 0x64
 8008500:	fb02 f303 	mul.w	r3, r2, r3
 8008504:	1acb      	subs	r3, r1, r3
 8008506:	b29b      	uxth	r3, r3
 8008508:	461d      	mov	r5, r3
 800850a:	f8b7 25b2 	ldrh.w	r2, [r7, #1458]	@ 0x5b2
 800850e:	4b47      	ldr	r3, [pc, #284]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008510:	fba3 2302 	umull	r2, r3, r3, r2
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	b29b      	uxth	r3, r3
 8008518:	461c      	mov	r4, r3
 800851a:	f8b7 15b2 	ldrh.w	r1, [r7, #1458]	@ 0x5b2
 800851e:	4b43      	ldr	r3, [pc, #268]	@ (800862c <frame_processing_rs422+0x5e4>)
 8008520:	fba3 2301 	umull	r2, r3, r3, r1
 8008524:	095a      	lsrs	r2, r3, #5
 8008526:	2364      	movs	r3, #100	@ 0x64
 8008528:	fb02 f303 	mul.w	r3, r2, r3
 800852c:	1acb      	subs	r3, r1, r3
 800852e:	b29b      	uxth	r3, r3
 8008530:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8008534:	9319      	str	r3, [sp, #100]	@ 0x64
 8008536:	9418      	str	r4, [sp, #96]	@ 0x60
 8008538:	9517      	str	r5, [sp, #92]	@ 0x5c
 800853a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800853c:	9216      	str	r2, [sp, #88]	@ 0x58
 800853e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008540:	9215      	str	r2, [sp, #84]	@ 0x54
 8008542:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008544:	9214      	str	r2, [sp, #80]	@ 0x50
 8008546:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008548:	9213      	str	r2, [sp, #76]	@ 0x4c
 800854a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800854c:	9212      	str	r2, [sp, #72]	@ 0x48
 800854e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008550:	9211      	str	r2, [sp, #68]	@ 0x44
 8008552:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008554:	9210      	str	r2, [sp, #64]	@ 0x40
 8008556:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008558:	920f      	str	r2, [sp, #60]	@ 0x3c
 800855a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800855c:	920e      	str	r2, [sp, #56]	@ 0x38
 800855e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008560:	920d      	str	r2, [sp, #52]	@ 0x34
 8008562:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008566:	920c      	str	r2, [sp, #48]	@ 0x30
 8008568:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800856c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800856e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008572:	920a      	str	r2, [sp, #40]	@ 0x28
 8008574:	9609      	str	r6, [sp, #36]	@ 0x24
 8008576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800857a:	9308      	str	r3, [sp, #32]
 800857c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008580:	9307      	str	r3, [sp, #28]
 8008582:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008586:	9306      	str	r3, [sp, #24]
 8008588:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800858c:	9305      	str	r3, [sp, #20]
 800858e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008598:	9303      	str	r3, [sp, #12]
 800859a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800859e:	9302      	str	r3, [sp, #8]
 80085a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	4663      	mov	r3, ip
 80085ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80085b2:	4920      	ldr	r1, [pc, #128]	@ (8008634 <frame_processing_rs422+0x5ec>)
 80085b4:	f007 fc6a 	bl	800fe8c <siprintf>
						bat0 / 100, bat0 % 100, bat1 / 100, bat1 % 100,
						bat2 / 100, bat2 % 100, bat3 / 100, bat3 % 100,
						vin / 100, vin % 100, iin / 100, iin % 100,
						vout / 100, vout % 100, iout / 100, iout % 100);

				if(auto_report_enabled){
 80085b8:	4b1f      	ldr	r3, [pc, #124]	@ (8008638 <frame_processing_rs422+0x5f0>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d006      	beq.n	80085d0 <frame_processing_rs422+0x588>
					Uart_sendstring(UART4, buffer_0x08);
 80085c2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80085c6:	4619      	mov	r1, r3
 80085c8:	481c      	ldr	r0, [pc, #112]	@ (800863c <frame_processing_rs422+0x5f4>)
 80085ca:	f7f9 fd15 	bl	8001ff8 <Uart_sendstring>
 80085ce:	e005      	b.n	80085dc <frame_processing_rs422+0x594>
				}else{
					Uart_sendstring(USART2, buffer_0x08);
 80085d0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80085d4:	4619      	mov	r1, r3
 80085d6:	481a      	ldr	r0, [pc, #104]	@ (8008640 <frame_processing_rs422+0x5f8>)
 80085d8:	f7f9 fd0e 	bl	8001ff8 <Uart_sendstring>
				}
			}
			receive_pmuFlag = 1;
 80085dc:	4b19      	ldr	r3, [pc, #100]	@ (8008644 <frame_processing_rs422+0x5fc>)
 80085de:	2201      	movs	r2, #1
 80085e0:	701a      	strb	r2, [r3, #0]

			for (int i = 1; i <= 24; i++) {
 80085e2:	2301      	movs	r3, #1
 80085e4:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 80085e8:	e015      	b.n	8008616 <frame_processing_rs422+0x5ce>
			    nextBuffer[i + 110] = fsp_pkt->payload[i]; //97   pay1    + 98 pay2    120    pay24
 80085ea:	4b17      	ldr	r3, [pc, #92]	@ (8008648 <frame_processing_rs422+0x600>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 80085f2:	336e      	adds	r3, #110	@ 0x6e
 80085f4:	4413      	add	r3, r2
 80085f6:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 80085fa:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 80085fe:	6811      	ldr	r1, [r2, #0]
 8008600:	f8d7 2604 	ldr.w	r2, [r7, #1540]	@ 0x604
 8008604:	440a      	add	r2, r1
 8008606:	3205      	adds	r2, #5
 8008608:	7812      	ldrb	r2, [r2, #0]
 800860a:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= 24; i++) {
 800860c:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8008610:	3301      	adds	r3, #1
 8008612:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8008616:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 800861a:	2b18      	cmp	r3, #24
 800861c:	dde5      	ble.n	80085ea <frame_processing_rs422+0x5a2>
			}
//			Uart_sendstring(UART4, "\nPMU_Collected\r\n");

			disconnect_counter_pmu = 0;
 800861e:	4b0b      	ldr	r3, [pc, #44]	@ (800864c <frame_processing_rs422+0x604>)
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]

	    }
	    break;
 8008624:	f001 b869 	b.w	80096fa <frame_processing_rs422+0x16b2>
 8008628:	080155f4 	.word	0x080155f4
 800862c:	51eb851f 	.word	0x51eb851f
 8008630:	080155f0 	.word	0x080155f0
 8008634:	080155f8 	.word	0x080155f8
 8008638:	20005de8 	.word	0x20005de8
 800863c:	40004c00 	.word	0x40004c00
 8008640:	40004400 	.word	0x40004400
 8008644:	200000e1 	.word	0x200000e1
 8008648:	2000049c 	.word	0x2000049c
 800864c:	20005cbd 	.word	0x20005cbd

		case 0x06:
		{
			if(auto_report_enabled || rf_report_enable){
 8008650:	4b0a      	ldr	r3, [pc, #40]	@ (800867c <frame_processing_rs422+0x634>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d105      	bne.n	8008666 <frame_processing_rs422+0x61e>
 800865a:	4b09      	ldr	r3, [pc, #36]	@ (8008680 <frame_processing_rs422+0x638>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 8307 	beq.w	8008c74 <frame_processing_rs422+0xc2c>
				if(auto_report_enabled){
 8008666:	4b05      	ldr	r3, [pc, #20]	@ (800867c <frame_processing_rs422+0x634>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00d      	beq.n	800868c <frame_processing_rs422+0x644>
					Uart_sendstring(UART4, "\nPDU:\n");
 8008670:	4904      	ldr	r1, [pc, #16]	@ (8008684 <frame_processing_rs422+0x63c>)
 8008672:	4805      	ldr	r0, [pc, #20]	@ (8008688 <frame_processing_rs422+0x640>)
 8008674:	f7f9 fcc0 	bl	8001ff8 <Uart_sendstring>
 8008678:	e012      	b.n	80086a0 <frame_processing_rs422+0x658>
 800867a:	bf00      	nop
 800867c:	20005de8 	.word	0x20005de8
 8008680:	20005dea 	.word	0x20005dea
 8008684:	080156e8 	.word	0x080156e8
 8008688:	40004c00 	.word	0x40004c00
				}else{
					Uart_sendstring(USART2, "\nPDU:\n");
 800868c:	4902      	ldr	r1, [pc, #8]	@ (8008698 <frame_processing_rs422+0x650>)
 800868e:	4803      	ldr	r0, [pc, #12]	@ (800869c <frame_processing_rs422+0x654>)
 8008690:	f7f9 fcb2 	bl	8001ff8 <Uart_sendstring>
 8008694:	e004      	b.n	80086a0 <frame_processing_rs422+0x658>
 8008696:	bf00      	nop
 8008698:	080156e8 	.word	0x080156e8
 800869c:	40004400 	.word	0x40004400
				}
				uint8_t tec1buck_status = fsp_pkt->payload[1];
 80086a0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086a4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	799b      	ldrb	r3, [r3, #6]
 80086ac:	f887 35b1 	strb.w	r3, [r7, #1457]	@ 0x5b1
				uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 80086b0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086b4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	79db      	ldrb	r3, [r3, #7]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	b21a      	sxth	r2, r3
 80086c0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086c4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	7a1b      	ldrb	r3, [r3, #8]
 80086cc:	b21b      	sxth	r3, r3
 80086ce:	4313      	orrs	r3, r2
 80086d0:	b21b      	sxth	r3, r3
 80086d2:	f8a7 35ae 	strh.w	r3, [r7, #1454]	@ 0x5ae

				uint8_t tec2buck_status = fsp_pkt->payload[4];
 80086d6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086da:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	7a5b      	ldrb	r3, [r3, #9]
 80086e2:	f887 35ad 	strb.w	r3, [r7, #1453]	@ 0x5ad
				uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 80086e6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086ea:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	7a9b      	ldrb	r3, [r3, #10]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	b21a      	sxth	r2, r3
 80086f6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086fa:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	7adb      	ldrb	r3, [r3, #11]
 8008702:	b21b      	sxth	r3, r3
 8008704:	4313      	orrs	r3, r2
 8008706:	b21b      	sxth	r3, r3
 8008708:	f8a7 35aa 	strh.w	r3, [r7, #1450]	@ 0x5aa

				uint8_t tec3buck_status = fsp_pkt->payload[7];
 800870c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008710:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	7b1b      	ldrb	r3, [r3, #12]
 8008718:	f887 35a9 	strb.w	r3, [r7, #1449]	@ 0x5a9
				uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 800871c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008720:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	7b5b      	ldrb	r3, [r3, #13]
 8008728:	021b      	lsls	r3, r3, #8
 800872a:	b21a      	sxth	r2, r3
 800872c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008730:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	7b9b      	ldrb	r3, [r3, #14]
 8008738:	b21b      	sxth	r3, r3
 800873a:	4313      	orrs	r3, r2
 800873c:	b21b      	sxth	r3, r3
 800873e:	f8a7 35a6 	strh.w	r3, [r7, #1446]	@ 0x5a6

				uint8_t tec4buck_status = fsp_pkt->payload[10];
 8008742:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008746:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	7bdb      	ldrb	r3, [r3, #15]
 800874e:	f887 35a5 	strb.w	r3, [r7, #1445]	@ 0x5a5
				uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 8008752:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008756:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	7c1b      	ldrb	r3, [r3, #16]
 800875e:	021b      	lsls	r3, r3, #8
 8008760:	b21a      	sxth	r2, r3
 8008762:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008766:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	7c5b      	ldrb	r3, [r3, #17]
 800876e:	b21b      	sxth	r3, r3
 8008770:	4313      	orrs	r3, r2
 8008772:	b21b      	sxth	r3, r3
 8008774:	f8a7 35a2 	strh.w	r3, [r7, #1442]	@ 0x5a2

				uint8_t mcubuck_status = fsp_pkt->payload[13];
 8008778:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800877c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	7c9b      	ldrb	r3, [r3, #18]
 8008784:	f887 35a1 	strb.w	r3, [r7, #1441]	@ 0x5a1
				uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 8008788:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800878c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	7cdb      	ldrb	r3, [r3, #19]
 8008794:	021b      	lsls	r3, r3, #8
 8008796:	b21a      	sxth	r2, r3
 8008798:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800879c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	7d1b      	ldrb	r3, [r3, #20]
 80087a4:	b21b      	sxth	r3, r3
 80087a6:	4313      	orrs	r3, r2
 80087a8:	b21b      	sxth	r3, r3
 80087aa:	f8a7 359e 	strh.w	r3, [r7, #1438]	@ 0x59e

				uint8_t ledbuck_status = fsp_pkt->payload[16];
 80087ae:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087b2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	7d5b      	ldrb	r3, [r3, #21]
 80087ba:	f887 359d 	strb.w	r3, [r7, #1437]	@ 0x59d
				uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 80087be:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087c2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	7d9b      	ldrb	r3, [r3, #22]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	b21a      	sxth	r2, r3
 80087ce:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087d2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	7ddb      	ldrb	r3, [r3, #23]
 80087da:	b21b      	sxth	r3, r3
 80087dc:	4313      	orrs	r3, r2
 80087de:	b21b      	sxth	r3, r3
 80087e0:	f8a7 359a 	strh.w	r3, [r7, #1434]	@ 0x59a

				uint8_t cm4buck_status = fsp_pkt->payload[19];
 80087e4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087e8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	7e1b      	ldrb	r3, [r3, #24]
 80087f0:	f887 3599 	strb.w	r3, [r7, #1433]	@ 0x599
				uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 80087f4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087f8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	7e5b      	ldrb	r3, [r3, #25]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	b21a      	sxth	r2, r3
 8008804:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008808:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	7e9b      	ldrb	r3, [r3, #26]
 8008810:	b21b      	sxth	r3, r3
 8008812:	4313      	orrs	r3, r2
 8008814:	b21b      	sxth	r3, r3
 8008816:	f8a7 3596 	strh.w	r3, [r7, #1430]	@ 0x596

				uint8_t tec1_status = fsp_pkt->payload[22];
 800881a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800881e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	7edb      	ldrb	r3, [r3, #27]
 8008826:	f887 3595 	strb.w	r3, [r7, #1429]	@ 0x595
				uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 800882a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800882e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	7f1b      	ldrb	r3, [r3, #28]
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	b21a      	sxth	r2, r3
 800883a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800883e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	7f5b      	ldrb	r3, [r3, #29]
 8008846:	b21b      	sxth	r3, r3
 8008848:	4313      	orrs	r3, r2
 800884a:	b21b      	sxth	r3, r3
 800884c:	f8a7 3592 	strh.w	r3, [r7, #1426]	@ 0x592

				uint8_t tec2_status = fsp_pkt->payload[25];
 8008850:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008854:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	7f9b      	ldrb	r3, [r3, #30]
 800885c:	f887 3591 	strb.w	r3, [r7, #1425]	@ 0x591
				uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 8008860:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008864:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	7fdb      	ldrb	r3, [r3, #31]
 800886c:	021b      	lsls	r3, r3, #8
 800886e:	b21a      	sxth	r2, r3
 8008870:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008874:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800887e:	b21b      	sxth	r3, r3
 8008880:	4313      	orrs	r3, r2
 8008882:	b21b      	sxth	r3, r3
 8008884:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e

				uint8_t tec3_status = fsp_pkt->payload[28];
 8008888:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800888c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008896:	f887 358d 	strb.w	r3, [r7, #1421]	@ 0x58d
				uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 800889a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800889e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	b21a      	sxth	r2, r3
 80088ac:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80088b0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80088ba:	b21b      	sxth	r3, r3
 80088bc:	4313      	orrs	r3, r2
 80088be:	b21b      	sxth	r3, r3
 80088c0:	f8a7 358a 	strh.w	r3, [r7, #1418]	@ 0x58a

				uint8_t tec4_status = fsp_pkt->payload[31];
 80088c4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80088c8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80088d2:	f887 3589 	strb.w	r3, [r7, #1417]	@ 0x589
				uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 80088d6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80088da:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80088e4:	021b      	lsls	r3, r3, #8
 80088e6:	b21a      	sxth	r2, r3
 80088e8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80088ec:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80088f6:	b21b      	sxth	r3, r3
 80088f8:	4313      	orrs	r3, r2
 80088fa:	b21b      	sxth	r3, r3
 80088fc:	f8a7 3586 	strh.w	r3, [r7, #1414]	@ 0x586

				uint8_t copc_status = fsp_pkt->payload[34];
 8008900:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008904:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800890e:	f887 3585 	strb.w	r3, [r7, #1413]	@ 0x585
				uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 8008912:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008916:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008920:	021b      	lsls	r3, r3, #8
 8008922:	b21a      	sxth	r2, r3
 8008924:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008928:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008932:	b21b      	sxth	r3, r3
 8008934:	4313      	orrs	r3, r2
 8008936:	b21b      	sxth	r3, r3
 8008938:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582

				uint8_t iou_status = fsp_pkt->payload[37];
 800893c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008940:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800894a:	f887 3581 	strb.w	r3, [r7, #1409]	@ 0x581
				uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800894e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008952:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	b21a      	sxth	r2, r3
 8008960:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008964:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800896e:	b21b      	sxth	r3, r3
 8008970:	4313      	orrs	r3, r2
 8008972:	b21b      	sxth	r3, r3
 8008974:	f8a7 357e 	strh.w	r3, [r7, #1406]	@ 0x57e

				uint8_t rgb_status = fsp_pkt->payload[40];
 8008978:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800897c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008986:	f887 357d 	strb.w	r3, [r7, #1405]	@ 0x57d
				uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 800898a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800898e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8008998:	021b      	lsls	r3, r3, #8
 800899a:	b21a      	sxth	r2, r3
 800899c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80089a0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80089aa:	b21b      	sxth	r3, r3
 80089ac:	4313      	orrs	r3, r2
 80089ae:	b21b      	sxth	r3, r3
 80089b0:	f8a7 357a 	strh.w	r3, [r7, #1402]	@ 0x57a

				uint8_t ir_status = fsp_pkt->payload[43];
 80089b4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80089b8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80089c2:	f887 3579 	strb.w	r3, [r7, #1401]	@ 0x579
				uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 80089c6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80089ca:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	b21a      	sxth	r2, r3
 80089d8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80089dc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80089e6:	b21b      	sxth	r3, r3
 80089e8:	4313      	orrs	r3, r2
 80089ea:	b21b      	sxth	r3, r3
 80089ec:	f8a7 3576 	strh.w	r3, [r7, #1398]	@ 0x576

				uint8_t cm4_status = fsp_pkt->payload[46];
 80089f0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80089f4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80089fe:	f887 3575 	strb.w	r3, [r7, #1397]	@ 0x575
				uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 8008a02:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a06:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008a10:	021b      	lsls	r3, r3, #8
 8008a12:	b21a      	sxth	r2, r3
 8008a14:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a18:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a22:	b21b      	sxth	r3, r3
 8008a24:	4313      	orrs	r3, r2
 8008a26:	b21b      	sxth	r3, r3
 8008a28:	f8a7 3572 	strh.w	r3, [r7, #1394]	@ 0x572

				uint8_t vin_status = fsp_pkt->payload[49];
 8008a2c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a30:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008a3a:	f887 3571 	strb.w	r3, [r7, #1393]	@ 0x571
				uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 8008a3e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a42:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8008a4c:	021b      	lsls	r3, r3, #8
 8008a4e:	b21a      	sxth	r2, r3
 8008a50:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a54:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008a5e:	b21b      	sxth	r3, r3
 8008a60:	4313      	orrs	r3, r2
 8008a62:	b21b      	sxth	r3, r3
 8008a64:	f8a7 356e 	strh.w	r3, [r7, #1390]	@ 0x56e

				uint8_t vbus_status = fsp_pkt->payload[52];
 8008a68:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a6c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008a76:	f887 356d 	strb.w	r3, [r7, #1389]	@ 0x56d
				uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 8008a7a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a7e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008a88:	021b      	lsls	r3, r3, #8
 8008a8a:	b21a      	sxth	r2, r3
 8008a8c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008a90:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8008a9a:	b21b      	sxth	r3, r3
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	b21b      	sxth	r3, r3
 8008aa0:	f8a7 356a 	strh.w	r3, [r7, #1386]	@ 0x56a


						char buffer_0x06[1000];
						sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 8008aa4:	f897 e5b1 	ldrb.w	lr, [r7, #1457]	@ 0x5b1
 8008aa8:	f8b7 85ae 	ldrh.w	r8, [r7, #1454]	@ 0x5ae
 8008aac:	f897 35ad 	ldrb.w	r3, [r7, #1453]	@ 0x5ad
 8008ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ab4:	f8b7 25aa 	ldrh.w	r2, [r7, #1450]	@ 0x5aa
 8008ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008abc:	f897 15a9 	ldrb.w	r1, [r7, #1449]	@ 0x5a9
 8008ac0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8008ac4:	f8b7 05a6 	ldrh.w	r0, [r7, #1446]	@ 0x5a6
 8008ac8:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 8008acc:	f897 45a5 	ldrb.w	r4, [r7, #1445]	@ 0x5a5
 8008ad0:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8008ad4:	f8b7 55a2 	ldrh.w	r5, [r7, #1442]	@ 0x5a2
 8008ad8:	f8c7 509c 	str.w	r5, [r7, #156]	@ 0x9c
 8008adc:	f897 65a1 	ldrb.w	r6, [r7, #1441]	@ 0x5a1
 8008ae0:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 8008ae4:	f8b7 c59e 	ldrh.w	ip, [r7, #1438]	@ 0x59e
 8008ae8:	4663      	mov	r3, ip
 8008aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008aee:	f897 c59d 	ldrb.w	ip, [r7, #1437]	@ 0x59d
 8008af2:	4662      	mov	r2, ip
 8008af4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8008af8:	f8b7 c59a 	ldrh.w	ip, [r7, #1434]	@ 0x59a
 8008afc:	4661      	mov	r1, ip
 8008afe:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8008b02:	f897 c599 	ldrb.w	ip, [r7, #1433]	@ 0x599
 8008b06:	4660      	mov	r0, ip
 8008b08:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8008b0c:	f8b7 c596 	ldrh.w	ip, [r7, #1430]	@ 0x596
 8008b10:	4664      	mov	r4, ip
 8008b12:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
 8008b16:	f897 c595 	ldrb.w	ip, [r7, #1429]	@ 0x595
 8008b1a:	4665      	mov	r5, ip
 8008b1c:	f8c7 5080 	str.w	r5, [r7, #128]	@ 0x80
 8008b20:	f8b7 c592 	ldrh.w	ip, [r7, #1426]	@ 0x592
 8008b24:	4666      	mov	r6, ip
 8008b26:	67fe      	str	r6, [r7, #124]	@ 0x7c
 8008b28:	f897 c591 	ldrb.w	ip, [r7, #1425]	@ 0x591
 8008b2c:	4663      	mov	r3, ip
 8008b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b30:	f8b7 c58e 	ldrh.w	ip, [r7, #1422]	@ 0x58e
 8008b34:	4662      	mov	r2, ip
 8008b36:	677a      	str	r2, [r7, #116]	@ 0x74
 8008b38:	f897 c58d 	ldrb.w	ip, [r7, #1421]	@ 0x58d
 8008b3c:	4661      	mov	r1, ip
 8008b3e:	6739      	str	r1, [r7, #112]	@ 0x70
 8008b40:	f8b7 c58a 	ldrh.w	ip, [r7, #1418]	@ 0x58a
 8008b44:	4660      	mov	r0, ip
 8008b46:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8008b48:	f897 c589 	ldrb.w	ip, [r7, #1417]	@ 0x589
 8008b4c:	4664      	mov	r4, ip
 8008b4e:	66bc      	str	r4, [r7, #104]	@ 0x68
 8008b50:	f8b7 c586 	ldrh.w	ip, [r7, #1414]	@ 0x586
 8008b54:	4665      	mov	r5, ip
 8008b56:	667d      	str	r5, [r7, #100]	@ 0x64
 8008b58:	f897 c585 	ldrb.w	ip, [r7, #1413]	@ 0x585
 8008b5c:	4666      	mov	r6, ip
 8008b5e:	663e      	str	r6, [r7, #96]	@ 0x60
 8008b60:	f8b7 c582 	ldrh.w	ip, [r7, #1410]	@ 0x582
 8008b64:	4663      	mov	r3, ip
 8008b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b68:	f897 c581 	ldrb.w	ip, [r7, #1409]	@ 0x581
 8008b6c:	4662      	mov	r2, ip
 8008b6e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008b70:	f8b7 c57e 	ldrh.w	ip, [r7, #1406]	@ 0x57e
 8008b74:	4661      	mov	r1, ip
 8008b76:	6579      	str	r1, [r7, #84]	@ 0x54
 8008b78:	f897 c57d 	ldrb.w	ip, [r7, #1405]	@ 0x57d
 8008b7c:	4660      	mov	r0, ip
 8008b7e:	6538      	str	r0, [r7, #80]	@ 0x50
 8008b80:	f8b7 c57a 	ldrh.w	ip, [r7, #1402]	@ 0x57a
 8008b84:	4664      	mov	r4, ip
 8008b86:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8008b88:	f897 c579 	ldrb.w	ip, [r7, #1401]	@ 0x579
 8008b8c:	4665      	mov	r5, ip
 8008b8e:	64bd      	str	r5, [r7, #72]	@ 0x48
 8008b90:	f8b7 6576 	ldrh.w	r6, [r7, #1398]	@ 0x576
 8008b94:	f897 5575 	ldrb.w	r5, [r7, #1397]	@ 0x575
 8008b98:	f8b7 4572 	ldrh.w	r4, [r7, #1394]	@ 0x572
 8008b9c:	f897 0571 	ldrb.w	r0, [r7, #1393]	@ 0x571
 8008ba0:	f8b7 156e 	ldrh.w	r1, [r7, #1390]	@ 0x56e
 8008ba4:	f897 256d 	ldrb.w	r2, [r7, #1389]	@ 0x56d
 8008ba8:	f8b7 356a 	ldrh.w	r3, [r7, #1386]	@ 0x56a
 8008bac:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 8008bb0:	9321      	str	r3, [sp, #132]	@ 0x84
 8008bb2:	9220      	str	r2, [sp, #128]	@ 0x80
 8008bb4:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008bb6:	901e      	str	r0, [sp, #120]	@ 0x78
 8008bb8:	941d      	str	r4, [sp, #116]	@ 0x74
 8008bba:	951c      	str	r5, [sp, #112]	@ 0x70
 8008bbc:	961b      	str	r6, [sp, #108]	@ 0x6c
 8008bbe:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 8008bc0:	951a      	str	r5, [sp, #104]	@ 0x68
 8008bc2:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8008bc4:	9419      	str	r4, [sp, #100]	@ 0x64
 8008bc6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008bc8:	9018      	str	r0, [sp, #96]	@ 0x60
 8008bca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008bcc:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008bce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bd0:	9216      	str	r2, [sp, #88]	@ 0x58
 8008bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bd4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008bd6:	6e3e      	ldr	r6, [r7, #96]	@ 0x60
 8008bd8:	9614      	str	r6, [sp, #80]	@ 0x50
 8008bda:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 8008bdc:	9513      	str	r5, [sp, #76]	@ 0x4c
 8008bde:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 8008be0:	9412      	str	r4, [sp, #72]	@ 0x48
 8008be2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008be4:	9011      	str	r0, [sp, #68]	@ 0x44
 8008be6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008be8:	9110      	str	r1, [sp, #64]	@ 0x40
 8008bea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008bec:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bf0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008bf2:	6ffe      	ldr	r6, [r7, #124]	@ 0x7c
 8008bf4:	960d      	str	r6, [sp, #52]	@ 0x34
 8008bf6:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 8008bfa:	950c      	str	r5, [sp, #48]	@ 0x30
 8008bfc:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8008c00:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c02:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8008c06:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c08:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8008c0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c0e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008c12:	9208      	str	r2, [sp, #32]
 8008c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c18:	9307      	str	r3, [sp, #28]
 8008c1a:	f8d7 6098 	ldr.w	r6, [r7, #152]	@ 0x98
 8008c1e:	9606      	str	r6, [sp, #24]
 8008c20:	f8d7 509c 	ldr.w	r5, [r7, #156]	@ 0x9c
 8008c24:	9505      	str	r5, [sp, #20]
 8008c26:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8008c2a:	9404      	str	r4, [sp, #16]
 8008c2c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8008c30:	9003      	str	r0, [sp, #12]
 8008c32:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8008c36:	9102      	str	r1, [sp, #8]
 8008c38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c3c:	9201      	str	r2, [sp, #4]
 8008c3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	4643      	mov	r3, r8
 8008c46:	4672      	mov	r2, lr
 8008c48:	4928      	ldr	r1, [pc, #160]	@ (8008cec <frame_processing_rs422+0xca4>)
 8008c4a:	4660      	mov	r0, ip
 8008c4c:	f007 f91e 	bl	800fe8c <siprintf>
							cm4_status, cm4_current,
							vin_status, vin_voltage,
							vbus_status, vbus_voltage);


					if(auto_report_enabled){
 8008c50:	4b27      	ldr	r3, [pc, #156]	@ (8008cf0 <frame_processing_rs422+0xca8>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d006      	beq.n	8008c68 <frame_processing_rs422+0xc20>
							Uart_sendstring(UART4, buffer_0x06);
 8008c5a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4824      	ldr	r0, [pc, #144]	@ (8008cf4 <frame_processing_rs422+0xcac>)
 8008c62:	f7f9 f9c9 	bl	8001ff8 <Uart_sendstring>
 8008c66:	e005      	b.n	8008c74 <frame_processing_rs422+0xc2c>
					}else{
							Uart_sendstring(USART2, buffer_0x06);
 8008c68:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4822      	ldr	r0, [pc, #136]	@ (8008cf8 <frame_processing_rs422+0xcb0>)
 8008c70:	f7f9 f9c2 	bl	8001ff8 <Uart_sendstring>
					}
			}

					receive_pduFlag = 1;
 8008c74:	4b21      	ldr	r3, [pc, #132]	@ (8008cfc <frame_processing_rs422+0xcb4>)
 8008c76:	2201      	movs	r2, #1
 8008c78:	701a      	strb	r2, [r3, #0]

					for (int i = 1; i <= 54; i++) {
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8008c80:	e015      	b.n	8008cae <frame_processing_rs422+0xc66>
					    nextBuffer[i + 56] = fsp_pkt->payload[i]; //43   pay1    + 44  pay2        96-<54
 8008c82:	4b1f      	ldr	r3, [pc, #124]	@ (8008d00 <frame_processing_rs422+0xcb8>)
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8008c8a:	3338      	adds	r3, #56	@ 0x38
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 8008c92:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 8008c96:	6811      	ldr	r1, [r2, #0]
 8008c98:	f8d7 2600 	ldr.w	r2, [r7, #1536]	@ 0x600
 8008c9c:	440a      	add	r2, r1
 8008c9e:	3205      	adds	r2, #5
 8008ca0:	7812      	ldrb	r2, [r2, #0]
 8008ca2:	701a      	strb	r2, [r3, #0]
					for (int i = 1; i <= 54; i++) {
 8008ca4:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8008ca8:	3301      	adds	r3, #1
 8008caa:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8008cae:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8008cb2:	2b36      	cmp	r3, #54	@ 0x36
 8008cb4:	dde5      	ble.n	8008c82 <frame_processing_rs422+0xc3a>
					}
//					Uart_sendstring(UART4, "\nPDU_Collected\r\n");

					disconnect_counter_pdu = 0;
 8008cb6:	4b13      	ldr	r3, [pc, #76]	@ (8008d04 <frame_processing_rs422+0xcbc>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	701a      	strb	r2, [r3, #0]
		}
		break;
 8008cbc:	f000 bd1d 	b.w	80096fa <frame_processing_rs422+0x16b2>


		case 0x13:
		{
			if(auto_report_enabled || rf_report_enable){
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf0 <frame_processing_rs422+0xca8>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d105      	bne.n	8008cd6 <frame_processing_rs422+0xc8e>
 8008cca:	4b0f      	ldr	r3, [pc, #60]	@ (8008d08 <frame_processing_rs422+0xcc0>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 84e4 	beq.w	800969e <frame_processing_rs422+0x1656>
				if(auto_report_enabled){
 8008cd6:	4b06      	ldr	r3, [pc, #24]	@ (8008cf0 <frame_processing_rs422+0xca8>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d017      	beq.n	8008d10 <frame_processing_rs422+0xcc8>
					Uart_sendstring(UART4, "\nIOU:\n");
 8008ce0:	490a      	ldr	r1, [pc, #40]	@ (8008d0c <frame_processing_rs422+0xcc4>)
 8008ce2:	4804      	ldr	r0, [pc, #16]	@ (8008cf4 <frame_processing_rs422+0xcac>)
 8008ce4:	f7f9 f988 	bl	8001ff8 <Uart_sendstring>
 8008ce8:	e01c      	b.n	8008d24 <frame_processing_rs422+0xcdc>
 8008cea:	bf00      	nop
 8008cec:	080156f0 	.word	0x080156f0
 8008cf0:	20005de8 	.word	0x20005de8
 8008cf4:	40004c00 	.word	0x40004c00
 8008cf8:	40004400 	.word	0x40004400
 8008cfc:	200000e0 	.word	0x200000e0
 8008d00:	2000049c 	.word	0x2000049c
 8008d04:	20005cbc 	.word	0x20005cbc
 8008d08:	20005dea 	.word	0x20005dea
 8008d0c:	08015938 	.word	0x08015938
				}else{
					Uart_sendstring(USART2, "\nIOU:\n");
 8008d10:	4902      	ldr	r1, [pc, #8]	@ (8008d1c <frame_processing_rs422+0xcd4>)
 8008d12:	4803      	ldr	r0, [pc, #12]	@ (8008d20 <frame_processing_rs422+0xcd8>)
 8008d14:	f7f9 f970 	bl	8001ff8 <Uart_sendstring>
 8008d18:	e004      	b.n	8008d24 <frame_processing_rs422+0xcdc>
 8008d1a:	bf00      	nop
 8008d1c:	08015938 	.word	0x08015938
 8008d20:	40004400 	.word	0x40004400
				}

			int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8008d24:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d28:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	799b      	ldrb	r3, [r3, #6]
 8008d30:	021b      	lsls	r3, r3, #8
 8008d32:	b21a      	sxth	r2, r3
 8008d34:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d38:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	79db      	ldrb	r3, [r3, #7]
 8008d40:	b21b      	sxth	r3, r3
 8008d42:	4313      	orrs	r3, r2
 8008d44:	f8a7 35fa 	strh.w	r3, [r7, #1530]	@ 0x5fa
			int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8008d48:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d4c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	7a1b      	ldrb	r3, [r3, #8]
 8008d54:	021b      	lsls	r3, r3, #8
 8008d56:	b21a      	sxth	r2, r3
 8008d58:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d5c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	7a5b      	ldrb	r3, [r3, #9]
 8008d64:	b21b      	sxth	r3, r3
 8008d66:	4313      	orrs	r3, r2
 8008d68:	f8a7 35f8 	strh.w	r3, [r7, #1528]	@ 0x5f8
			int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 8008d6c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d70:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	7a9b      	ldrb	r3, [r3, #10]
 8008d78:	021b      	lsls	r3, r3, #8
 8008d7a:	b21a      	sxth	r2, r3
 8008d7c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d80:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	7adb      	ldrb	r3, [r3, #11]
 8008d88:	b21b      	sxth	r3, r3
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	f8a7 35f6 	strh.w	r3, [r7, #1526]	@ 0x5f6
			int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 8008d90:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d94:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	7b1b      	ldrb	r3, [r3, #12]
 8008d9c:	021b      	lsls	r3, r3, #8
 8008d9e:	b21a      	sxth	r2, r3
 8008da0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008da4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	7b5b      	ldrb	r3, [r3, #13]
 8008dac:	b21b      	sxth	r3, r3
 8008dae:	4313      	orrs	r3, r2
 8008db0:	f8a7 35f4 	strh.w	r3, [r7, #1524]	@ 0x5f4

			int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 8008db4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008db8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	7b9b      	ldrb	r3, [r3, #14]
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	b21a      	sxth	r2, r3
 8008dc4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dc8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	7bdb      	ldrb	r3, [r3, #15]
 8008dd0:	b21b      	sxth	r3, r3
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	f8a7 35f2 	strh.w	r3, [r7, #1522]	@ 0x5f2
			int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8008dd8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ddc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	7c1b      	ldrb	r3, [r3, #16]
 8008de4:	021b      	lsls	r3, r3, #8
 8008de6:	b21a      	sxth	r2, r3
 8008de8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dec:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	7c5b      	ldrb	r3, [r3, #17]
 8008df4:	b21b      	sxth	r3, r3
 8008df6:	4313      	orrs	r3, r2
 8008df8:	f8a7 35f0 	strh.w	r3, [r7, #1520]	@ 0x5f0

			int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 8008dfc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e00:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	7c9b      	ldrb	r3, [r3, #18]
 8008e08:	021b      	lsls	r3, r3, #8
 8008e0a:	b21a      	sxth	r2, r3
 8008e0c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e10:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	7cdb      	ldrb	r3, [r3, #19]
 8008e18:	b21b      	sxth	r3, r3
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	f8a7 35ee 	strh.w	r3, [r7, #1518]	@ 0x5ee

			int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8008e20:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e24:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	7d1b      	ldrb	r3, [r3, #20]
 8008e2c:	021b      	lsls	r3, r3, #8
 8008e2e:	b21a      	sxth	r2, r3
 8008e30:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e34:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	7d5b      	ldrb	r3, [r3, #21]
 8008e3c:	b21b      	sxth	r3, r3
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	f8a7 35ec 	strh.w	r3, [r7, #1516]	@ 0x5ec
			int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 8008e44:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e48:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	7d9b      	ldrb	r3, [r3, #22]
 8008e50:	021b      	lsls	r3, r3, #8
 8008e52:	b21a      	sxth	r2, r3
 8008e54:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e58:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	7ddb      	ldrb	r3, [r3, #23]
 8008e60:	b21b      	sxth	r3, r3
 8008e62:	4313      	orrs	r3, r2
 8008e64:	f8a7 35ea 	strh.w	r3, [r7, #1514]	@ 0x5ea
			int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 8008e68:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e6c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	7e1b      	ldrb	r3, [r3, #24]
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	b21a      	sxth	r2, r3
 8008e78:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e7c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	7e5b      	ldrb	r3, [r3, #25]
 8008e84:	b21b      	sxth	r3, r3
 8008e86:	4313      	orrs	r3, r2
 8008e88:	f8a7 35e8 	strh.w	r3, [r7, #1512]	@ 0x5e8
			int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 8008e8c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e90:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	7e9b      	ldrb	r3, [r3, #26]
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	b21a      	sxth	r2, r3
 8008e9c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ea0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	7edb      	ldrb	r3, [r3, #27]
 8008ea8:	b21b      	sxth	r3, r3
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f8a7 35e6 	strh.w	r3, [r7, #1510]	@ 0x5e6

			uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 8008eb0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008eb4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	7f1b      	ldrb	r3, [r3, #28]
 8008ebc:	021b      	lsls	r3, r3, #8
 8008ebe:	b21a      	sxth	r2, r3
 8008ec0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ec4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	7f5b      	ldrb	r3, [r3, #29]
 8008ecc:	b21b      	sxth	r3, r3
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	b21b      	sxth	r3, r3
 8008ed2:	f8a7 35e4 	strh.w	r3, [r7, #1508]	@ 0x5e4
			uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 8008ed6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008eda:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	7f9b      	ldrb	r3, [r3, #30]
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	b21a      	sxth	r2, r3
 8008ee6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008eea:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	7fdb      	ldrb	r3, [r3, #31]
 8008ef2:	b21b      	sxth	r3, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	b21b      	sxth	r3, r3
 8008ef8:	f8a7 35e2 	strh.w	r3, [r7, #1506]	@ 0x5e2
			uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 8008efc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f00:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f0a:	021b      	lsls	r3, r3, #8
 8008f0c:	b21a      	sxth	r2, r3
 8008f0e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f12:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008f1c:	b21b      	sxth	r3, r3
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	b21b      	sxth	r3, r3
 8008f22:	f8a7 35e0 	strh.w	r3, [r7, #1504]	@ 0x5e0
			uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 8008f26:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f2a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008f34:	021b      	lsls	r3, r3, #8
 8008f36:	b21a      	sxth	r2, r3
 8008f38:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f3c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008f46:	b21b      	sxth	r3, r3
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	b21b      	sxth	r3, r3
 8008f4c:	f8a7 35de 	strh.w	r3, [r7, #1502]	@ 0x5de

			uint8_t neo_led_r = fsp_pkt->payload[31];
 8008f50:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f54:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008f5e:	f887 35dd 	strb.w	r3, [r7, #1501]	@ 0x5dd
			uint8_t neo_led_g = fsp_pkt->payload[32];
 8008f62:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f66:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008f70:	f887 35dc 	strb.w	r3, [r7, #1500]	@ 0x5dc
			uint8_t neo_led_b = fsp_pkt->payload[33];
 8008f74:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f78:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8008f82:	f887 35db 	strb.w	r3, [r7, #1499]	@ 0x5db
			uint8_t neo_led_w = fsp_pkt->payload[34];
 8008f86:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f8a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8008f94:	f887 35da 	strb.w	r3, [r7, #1498]	@ 0x5da

			uint8_t ir_led_duty = fsp_pkt->payload[35];
 8008f98:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008f9c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fa6:	f887 35d9 	strb.w	r3, [r7, #1497]	@ 0x5d9

		    int16_t accel_x = (int16_t)((fsp_pkt->payload[36] << 8) | fsp_pkt->payload[37]);
 8008faa:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008fae:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008fb8:	021b      	lsls	r3, r3, #8
 8008fba:	b21a      	sxth	r2, r3
 8008fbc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008fc0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8008fca:	b21b      	sxth	r3, r3
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	f8a7 35d6 	strh.w	r3, [r7, #1494]	@ 0x5d6
		    int16_t accel_y = (int16_t)((fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39]);
 8008fd2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008fd6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	b21a      	sxth	r2, r3
 8008fe4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008fe8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008ff2:	b21b      	sxth	r3, r3
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	f8a7 35d4 	strh.w	r3, [r7, #1492]	@ 0x5d4
		    int16_t accel_z = (int16_t)((fsp_pkt->payload[40] << 8) | fsp_pkt->payload[41]);
 8008ffa:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ffe:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009008:	021b      	lsls	r3, r3, #8
 800900a:	b21a      	sxth	r2, r3
 800900c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009010:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800901a:	b21b      	sxth	r3, r3
 800901c:	4313      	orrs	r3, r2
 800901e:	f8a7 35d2 	strh.w	r3, [r7, #1490]	@ 0x5d2

		    int16_t gyro_x = (int16_t)((fsp_pkt->payload[42] << 8) | fsp_pkt->payload[43]);
 8009022:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009026:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009030:	021b      	lsls	r3, r3, #8
 8009032:	b21a      	sxth	r2, r3
 8009034:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009038:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009042:	b21b      	sxth	r3, r3
 8009044:	4313      	orrs	r3, r2
 8009046:	f8a7 35d0 	strh.w	r3, [r7, #1488]	@ 0x5d0
		    int16_t gyro_y = (int16_t)((fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45]);
 800904a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800904e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009058:	021b      	lsls	r3, r3, #8
 800905a:	b21a      	sxth	r2, r3
 800905c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009060:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800906a:	b21b      	sxth	r3, r3
 800906c:	4313      	orrs	r3, r2
 800906e:	f8a7 35ce 	strh.w	r3, [r7, #1486]	@ 0x5ce
		    int16_t gyro_z = (int16_t)((fsp_pkt->payload[46] << 8) | fsp_pkt->payload[47]);
 8009072:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009076:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8009080:	021b      	lsls	r3, r3, #8
 8009082:	b21a      	sxth	r2, r3
 8009084:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8009088:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009092:	b21b      	sxth	r3, r3
 8009094:	4313      	orrs	r3, r2
 8009096:	f8a7 35cc 	strh.w	r3, [r7, #1484]	@ 0x5cc

		    int16_t press = (int16_t)((fsp_pkt->payload[48] << 8) | fsp_pkt->payload[49]);
 800909a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800909e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80090a8:	021b      	lsls	r3, r3, #8
 80090aa:	b21a      	sxth	r2, r3
 80090ac:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80090b0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80090ba:	b21b      	sxth	r3, r3
 80090bc:	4313      	orrs	r3, r2
 80090be:	f8a7 35ca 	strh.w	r3, [r7, #1482]	@ 0x5ca


			char buffer_0x13[1200];
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80090c2:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	da03      	bge.n	80090d2 <frame_processing_rs422+0x108a>
 80090ca:	4bb5      	ldr	r3, [pc, #724]	@ (80093a0 <frame_processing_rs422+0x1358>)
 80090cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090d0:	e002      	b.n	80090d8 <frame_processing_rs422+0x1090>
 80090d2:	4bb4      	ldr	r3, [pc, #720]	@ (80093a4 <frame_processing_rs422+0x135c>)
 80090d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			                     "Neo LED: R=%u, G=%u, B=%u, W=%u\n"
			                     "IR LED Duty: %u%%\n"
					 	 	 	 "Accel: X=%d, Y=%d, Z=%d\n"
					             "Gyro: X=%d, Y=%d, Z=%d\n"
					             "Pressure: %d]\n",
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 80090d8:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bfb8      	it	lt
 80090e0:	425b      	neglt	r3, r3
 80090e2:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80090e4:	4ab0      	ldr	r2, [pc, #704]	@ (80093a8 <frame_processing_rs422+0x1360>)
 80090e6:	fb82 1203 	smull	r1, r2, r2, r3
 80090ea:	1092      	asrs	r2, r2, #2
 80090ec:	17db      	asrs	r3, r3, #31
 80090ee:	eba2 0e03 	sub.w	lr, r2, r3
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 80090f2:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bfb8      	it	lt
 80090fa:	425b      	neglt	r3, r3
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009100:	4ba9      	ldr	r3, [pc, #676]	@ (80093a8 <frame_processing_rs422+0x1360>)
 8009102:	fb83 1302 	smull	r1, r3, r3, r2
 8009106:	1099      	asrs	r1, r3, #2
 8009108:	17d3      	asrs	r3, r2, #31
 800910a:	1acb      	subs	r3, r1, r3
 800910c:	4619      	mov	r1, r3
 800910e:	460b      	mov	r3, r1
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	440b      	add	r3, r1
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800911c:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 8009120:	2b00      	cmp	r3, #0
 8009122:	da03      	bge.n	800912c <frame_processing_rs422+0x10e4>
 8009124:	4b9e      	ldr	r3, [pc, #632]	@ (80093a0 <frame_processing_rs422+0x1358>)
 8009126:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800912a:	e002      	b.n	8009132 <frame_processing_rs422+0x10ea>
 800912c:	4b9d      	ldr	r3, [pc, #628]	@ (80093a4 <frame_processing_rs422+0x135c>)
 800912e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 8009132:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfb8      	it	lt
 800913a:	425b      	neglt	r3, r3
 800913c:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800913e:	4a9a      	ldr	r2, [pc, #616]	@ (80093a8 <frame_processing_rs422+0x1360>)
 8009140:	fb82 1203 	smull	r1, r2, r2, r3
 8009144:	1092      	asrs	r2, r2, #2
 8009146:	17db      	asrs	r3, r3, #31
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800914e:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 8009152:	2b00      	cmp	r3, #0
 8009154:	bfb8      	it	lt
 8009156:	425b      	neglt	r3, r3
 8009158:	b29b      	uxth	r3, r3
 800915a:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800915c:	4b92      	ldr	r3, [pc, #584]	@ (80093a8 <frame_processing_rs422+0x1360>)
 800915e:	fb83 1302 	smull	r1, r3, r3, r2
 8009162:	1099      	asrs	r1, r3, #2
 8009164:	17d3      	asrs	r3, r2, #31
 8009166:	1acb      	subs	r3, r1, r3
 8009168:	4619      	mov	r1, r3
 800916a:	460b      	mov	r3, r1
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	440b      	add	r3, r1
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009176:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 800917a:	2b00      	cmp	r3, #0
 800917c:	da03      	bge.n	8009186 <frame_processing_rs422+0x113e>
 800917e:	4b88      	ldr	r3, [pc, #544]	@ (80093a0 <frame_processing_rs422+0x1358>)
 8009180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009184:	e002      	b.n	800918c <frame_processing_rs422+0x1144>
 8009186:	4b87      	ldr	r3, [pc, #540]	@ (80093a4 <frame_processing_rs422+0x135c>)
 8009188:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800918c:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 8009190:	2b00      	cmp	r3, #0
 8009192:	bfb8      	it	lt
 8009194:	425b      	neglt	r3, r3
 8009196:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009198:	4a83      	ldr	r2, [pc, #524]	@ (80093a8 <frame_processing_rs422+0x1360>)
 800919a:	fb82 1203 	smull	r1, r2, r2, r3
 800919e:	1092      	asrs	r2, r2, #2
 80091a0:	17db      	asrs	r3, r3, #31
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	67bb      	str	r3, [r7, #120]	@ 0x78
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 80091a6:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	bfb8      	it	lt
 80091ae:	425b      	neglt	r3, r3
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80091b4:	4b7c      	ldr	r3, [pc, #496]	@ (80093a8 <frame_processing_rs422+0x1360>)
 80091b6:	fb83 1302 	smull	r1, r3, r3, r2
 80091ba:	1099      	asrs	r1, r3, #2
 80091bc:	17d3      	asrs	r3, r2, #31
 80091be:	1acb      	subs	r3, r1, r3
 80091c0:	4619      	mov	r1, r3
 80091c2:	460b      	mov	r3, r1
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	440b      	add	r3, r1
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80091ce:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	da03      	bge.n	80091de <frame_processing_rs422+0x1196>
 80091d6:	4b72      	ldr	r3, [pc, #456]	@ (80093a0 <frame_processing_rs422+0x1358>)
 80091d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80091dc:	e002      	b.n	80091e4 <frame_processing_rs422+0x119c>
 80091de:	4b71      	ldr	r3, [pc, #452]	@ (80093a4 <frame_processing_rs422+0x135c>)
 80091e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 80091e4:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfb8      	it	lt
 80091ec:	425b      	neglt	r3, r3
 80091ee:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80091f0:	4a6d      	ldr	r2, [pc, #436]	@ (80093a8 <frame_processing_rs422+0x1360>)
 80091f2:	fb82 1203 	smull	r1, r2, r2, r3
 80091f6:	1092      	asrs	r2, r2, #2
 80091f8:	17db      	asrs	r3, r3, #31
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	673b      	str	r3, [r7, #112]	@ 0x70
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 80091fe:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 8009202:	2b00      	cmp	r3, #0
 8009204:	bfb8      	it	lt
 8009206:	425b      	neglt	r3, r3
 8009208:	b29b      	uxth	r3, r3
 800920a:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800920c:	4b66      	ldr	r3, [pc, #408]	@ (80093a8 <frame_processing_rs422+0x1360>)
 800920e:	fb83 2301 	smull	r2, r3, r3, r1
 8009212:	109a      	asrs	r2, r3, #2
 8009214:	17cb      	asrs	r3, r1, #31
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	461a      	mov	r2, r3
 800921a:	4613      	mov	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	1acb      	subs	r3, r1, r3
 8009224:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009226:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 800922a:	2b00      	cmp	r3, #0
 800922c:	da03      	bge.n	8009236 <frame_processing_rs422+0x11ee>
 800922e:	4b5c      	ldr	r3, [pc, #368]	@ (80093a0 <frame_processing_rs422+0x1358>)
 8009230:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009234:	e002      	b.n	800923c <frame_processing_rs422+0x11f4>
 8009236:	4b5b      	ldr	r3, [pc, #364]	@ (80093a4 <frame_processing_rs422+0x135c>)
 8009238:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800923c:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 8009240:	2b00      	cmp	r3, #0
 8009242:	bfb8      	it	lt
 8009244:	425b      	neglt	r3, r3
 8009246:	b29b      	uxth	r3, r3
 8009248:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800924a:	4b57      	ldr	r3, [pc, #348]	@ (80093a8 <frame_processing_rs422+0x1360>)
 800924c:	fb83 2301 	smull	r2, r3, r3, r1
 8009250:	109a      	asrs	r2, r3, #2
 8009252:	17cb      	asrs	r3, r1, #31
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	66bb      	str	r3, [r7, #104]	@ 0x68
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 8009258:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 800925c:	2b00      	cmp	r3, #0
 800925e:	bfb8      	it	lt
 8009260:	425b      	neglt	r3, r3
 8009262:	b29b      	uxth	r3, r3
 8009264:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009266:	4b50      	ldr	r3, [pc, #320]	@ (80093a8 <frame_processing_rs422+0x1360>)
 8009268:	fb83 2301 	smull	r2, r3, r3, r1
 800926c:	109a      	asrs	r2, r3, #2
 800926e:	17cb      	asrs	r3, r1, #31
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	461a      	mov	r2, r3
 8009274:	4613      	mov	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	1acb      	subs	r3, r1, r3
 800927e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009280:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 8009284:	2b00      	cmp	r3, #0
 8009286:	da03      	bge.n	8009290 <frame_processing_rs422+0x1248>
 8009288:	4b45      	ldr	r3, [pc, #276]	@ (80093a0 <frame_processing_rs422+0x1358>)
 800928a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800928e:	e002      	b.n	8009296 <frame_processing_rs422+0x124e>
 8009290:	4b44      	ldr	r3, [pc, #272]	@ (80093a4 <frame_processing_rs422+0x135c>)
 8009292:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 8009296:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 800929a:	2b00      	cmp	r3, #0
 800929c:	bfb8      	it	lt
 800929e:	425b      	neglt	r3, r3
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80092a4:	4b40      	ldr	r3, [pc, #256]	@ (80093a8 <frame_processing_rs422+0x1360>)
 80092a6:	fb83 2301 	smull	r2, r3, r3, r1
 80092aa:	109a      	asrs	r2, r3, #2
 80092ac:	17cb      	asrs	r3, r1, #31
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	663b      	str	r3, [r7, #96]	@ 0x60
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 80092b2:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfb8      	it	lt
 80092ba:	425b      	neglt	r3, r3
 80092bc:	b29b      	uxth	r3, r3
 80092be:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80092c0:	4b39      	ldr	r3, [pc, #228]	@ (80093a8 <frame_processing_rs422+0x1360>)
 80092c2:	fb83 2301 	smull	r2, r3, r3, r1
 80092c6:	109a      	asrs	r2, r3, #2
 80092c8:	17cb      	asrs	r3, r1, #31
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	461a      	mov	r2, r3
 80092ce:	4613      	mov	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	1acb      	subs	r3, r1, r3
 80092d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092da:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da03      	bge.n	80092ea <frame_processing_rs422+0x12a2>
 80092e2:	4b2f      	ldr	r3, [pc, #188]	@ (80093a0 <frame_processing_rs422+0x1358>)
 80092e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092e8:	e002      	b.n	80092f0 <frame_processing_rs422+0x12a8>
 80092ea:	4b2e      	ldr	r3, [pc, #184]	@ (80093a4 <frame_processing_rs422+0x135c>)
 80092ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 80092f0:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bfb8      	it	lt
 80092f8:	425b      	neglt	r3, r3
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80092fe:	4b2a      	ldr	r3, [pc, #168]	@ (80093a8 <frame_processing_rs422+0x1360>)
 8009300:	fb83 2301 	smull	r2, r3, r3, r1
 8009304:	109a      	asrs	r2, r3, #2
 8009306:	17cb      	asrs	r3, r1, #31
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	65bb      	str	r3, [r7, #88]	@ 0x58
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800930c:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 8009310:	2b00      	cmp	r3, #0
 8009312:	bfb8      	it	lt
 8009314:	425b      	neglt	r3, r3
 8009316:	b29b      	uxth	r3, r3
 8009318:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800931a:	4b23      	ldr	r3, [pc, #140]	@ (80093a8 <frame_processing_rs422+0x1360>)
 800931c:	fb83 2301 	smull	r2, r3, r3, r1
 8009320:	109a      	asrs	r2, r3, #2
 8009322:	17cb      	asrs	r3, r1, #31
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	461a      	mov	r2, r3
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	1acb      	subs	r3, r1, r3
 8009332:	657b      	str	r3, [r7, #84]	@ 0x54
 8009334:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 8009338:	2b00      	cmp	r3, #0
 800933a:	da03      	bge.n	8009344 <frame_processing_rs422+0x12fc>
 800933c:	4b18      	ldr	r3, [pc, #96]	@ (80093a0 <frame_processing_rs422+0x1358>)
 800933e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009342:	e002      	b.n	800934a <frame_processing_rs422+0x1302>
 8009344:	4b17      	ldr	r3, [pc, #92]	@ (80093a4 <frame_processing_rs422+0x135c>)
 8009346:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800934a:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfb8      	it	lt
 8009352:	425b      	neglt	r3, r3
 8009354:	b29b      	uxth	r3, r3
 8009356:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009358:	4b13      	ldr	r3, [pc, #76]	@ (80093a8 <frame_processing_rs422+0x1360>)
 800935a:	fb83 2301 	smull	r2, r3, r3, r1
 800935e:	109a      	asrs	r2, r3, #2
 8009360:	17cb      	asrs	r3, r1, #31
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	653b      	str	r3, [r7, #80]	@ 0x50
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 8009366:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 800936a:	2b00      	cmp	r3, #0
 800936c:	bfb8      	it	lt
 800936e:	425b      	neglt	r3, r3
 8009370:	b29b      	uxth	r3, r3
 8009372:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009374:	4b0c      	ldr	r3, [pc, #48]	@ (80093a8 <frame_processing_rs422+0x1360>)
 8009376:	fb83 2301 	smull	r2, r3, r3, r1
 800937a:	109a      	asrs	r2, r3, #2
 800937c:	17cb      	asrs	r3, r1, #31
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	461a      	mov	r2, r3
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	1acb      	subs	r3, r1, r3
 800938c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800938e:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 8009392:	2b00      	cmp	r3, #0
 8009394:	da0a      	bge.n	80093ac <frame_processing_rs422+0x1364>
 8009396:	4b02      	ldr	r3, [pc, #8]	@ (80093a0 <frame_processing_rs422+0x1358>)
 8009398:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800939c:	e009      	b.n	80093b2 <frame_processing_rs422+0x136a>
 800939e:	bf00      	nop
 80093a0:	080155f0 	.word	0x080155f0
 80093a4:	080155f4 	.word	0x080155f4
 80093a8:	66666667 	.word	0x66666667
 80093ac:	4b2c      	ldr	r3, [pc, #176]	@ (8009460 <frame_processing_rs422+0x1418>)
 80093ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 80093b2:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bfb8      	it	lt
 80093ba:	425b      	neglt	r3, r3
 80093bc:	b29b      	uxth	r3, r3
 80093be:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80093c0:	4b28      	ldr	r3, [pc, #160]	@ (8009464 <frame_processing_rs422+0x141c>)
 80093c2:	fb83 2301 	smull	r2, r3, r3, r1
 80093c6:	109a      	asrs	r2, r3, #2
 80093c8:	17cb      	asrs	r3, r1, #31
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	64bb      	str	r3, [r7, #72]	@ 0x48
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 80093ce:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	bfb8      	it	lt
 80093d6:	425b      	neglt	r3, r3
 80093d8:	b29b      	uxth	r3, r3
 80093da:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80093dc:	4b21      	ldr	r3, [pc, #132]	@ (8009464 <frame_processing_rs422+0x141c>)
 80093de:	fb83 2301 	smull	r2, r3, r3, r1
 80093e2:	109a      	asrs	r2, r3, #2
 80093e4:	17cb      	asrs	r3, r1, #31
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	461a      	mov	r2, r3
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	1acb      	subs	r3, r1, r3
 80093f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80093f6:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	da03      	bge.n	8009406 <frame_processing_rs422+0x13be>
 80093fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009468 <frame_processing_rs422+0x1420>)
 8009400:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009404:	e002      	b.n	800940c <frame_processing_rs422+0x13c4>
 8009406:	4b16      	ldr	r3, [pc, #88]	@ (8009460 <frame_processing_rs422+0x1418>)
 8009408:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800940c:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 8009410:	2b00      	cmp	r3, #0
 8009412:	bfb8      	it	lt
 8009414:	425b      	neglt	r3, r3
 8009416:	b29b      	uxth	r3, r3
 8009418:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800941a:	4b12      	ldr	r3, [pc, #72]	@ (8009464 <frame_processing_rs422+0x141c>)
 800941c:	fb83 2301 	smull	r2, r3, r3, r1
 8009420:	109a      	asrs	r2, r3, #2
 8009422:	17cb      	asrs	r3, r1, #31
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	643b      	str	r3, [r7, #64]	@ 0x40
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 8009428:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 800942c:	2b00      	cmp	r3, #0
 800942e:	bfb8      	it	lt
 8009430:	425b      	neglt	r3, r3
 8009432:	b29b      	uxth	r3, r3
 8009434:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009436:	4b0b      	ldr	r3, [pc, #44]	@ (8009464 <frame_processing_rs422+0x141c>)
 8009438:	fb83 2301 	smull	r2, r3, r3, r1
 800943c:	109a      	asrs	r2, r3, #2
 800943e:	17cb      	asrs	r3, r1, #31
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	461a      	mov	r2, r3
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	1acb      	subs	r3, r1, r3
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009450:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 8009454:	2b00      	cmp	r3, #0
 8009456:	da09      	bge.n	800946c <frame_processing_rs422+0x1424>
 8009458:	4b03      	ldr	r3, [pc, #12]	@ (8009468 <frame_processing_rs422+0x1420>)
 800945a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800945e:	e008      	b.n	8009472 <frame_processing_rs422+0x142a>
 8009460:	080155f4 	.word	0x080155f4
 8009464:	66666667 	.word	0x66666667
 8009468:	080155f0 	.word	0x080155f0
 800946c:	4ba6      	ldr	r3, [pc, #664]	@ (8009708 <frame_processing_rs422+0x16c0>)
 800946e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 8009472:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfb8      	it	lt
 800947a:	425b      	neglt	r3, r3
 800947c:	b29b      	uxth	r3, r3
 800947e:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009480:	4ba2      	ldr	r3, [pc, #648]	@ (800970c <frame_processing_rs422+0x16c4>)
 8009482:	fb83 2301 	smull	r2, r3, r3, r1
 8009486:	109a      	asrs	r2, r3, #2
 8009488:	17cb      	asrs	r3, r1, #31
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	63bb      	str	r3, [r7, #56]	@ 0x38
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800948e:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 8009492:	2b00      	cmp	r3, #0
 8009494:	bfb8      	it	lt
 8009496:	425b      	neglt	r3, r3
 8009498:	b29b      	uxth	r3, r3
 800949a:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800949c:	4b9b      	ldr	r3, [pc, #620]	@ (800970c <frame_processing_rs422+0x16c4>)
 800949e:	fb83 2301 	smull	r2, r3, r3, r1
 80094a2:	109a      	asrs	r2, r3, #2
 80094a4:	17cb      	asrs	r3, r1, #31
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	461a      	mov	r2, r3
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	1aca      	subs	r2, r1, r3
 80094b4:	637a      	str	r2, [r7, #52]	@ 0x34
 80094b6:	f8b7 25e4 	ldrh.w	r2, [r7, #1508]	@ 0x5e4
 80094ba:	4b95      	ldr	r3, [pc, #596]	@ (8009710 <frame_processing_rs422+0x16c8>)
 80094bc:	fba3 2302 	umull	r2, r3, r3, r2
 80094c0:	095b      	lsrs	r3, r3, #5
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80094c6:	f8b7 15e4 	ldrh.w	r1, [r7, #1508]	@ 0x5e4
 80094ca:	4b91      	ldr	r3, [pc, #580]	@ (8009710 <frame_processing_rs422+0x16c8>)
 80094cc:	fba3 2301 	umull	r2, r3, r3, r1
 80094d0:	095a      	lsrs	r2, r3, #5
 80094d2:	2364      	movs	r3, #100	@ 0x64
 80094d4:	fb02 f303 	mul.w	r3, r2, r3
 80094d8:	1acb      	subs	r3, r1, r3
 80094da:	b29b      	uxth	r3, r3
 80094dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094de:	f8b7 25e2 	ldrh.w	r2, [r7, #1506]	@ 0x5e2
 80094e2:	4b8b      	ldr	r3, [pc, #556]	@ (8009710 <frame_processing_rs422+0x16c8>)
 80094e4:	fba3 2302 	umull	r2, r3, r3, r2
 80094e8:	095b      	lsrs	r3, r3, #5
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094ee:	f8b7 15e2 	ldrh.w	r1, [r7, #1506]	@ 0x5e2
 80094f2:	4b87      	ldr	r3, [pc, #540]	@ (8009710 <frame_processing_rs422+0x16c8>)
 80094f4:	fba3 2301 	umull	r2, r3, r3, r1
 80094f8:	095a      	lsrs	r2, r3, #5
 80094fa:	2364      	movs	r3, #100	@ 0x64
 80094fc:	fb02 f303 	mul.w	r3, r2, r3
 8009500:	1acb      	subs	r3, r1, r3
 8009502:	b29b      	uxth	r3, r3
 8009504:	627b      	str	r3, [r7, #36]	@ 0x24
 8009506:	f8b7 25e0 	ldrh.w	r2, [r7, #1504]	@ 0x5e0
 800950a:	4b81      	ldr	r3, [pc, #516]	@ (8009710 <frame_processing_rs422+0x16c8>)
 800950c:	fba3 2302 	umull	r2, r3, r3, r2
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	b29b      	uxth	r3, r3
 8009514:	623b      	str	r3, [r7, #32]
 8009516:	f8b7 15e0 	ldrh.w	r1, [r7, #1504]	@ 0x5e0
 800951a:	4b7d      	ldr	r3, [pc, #500]	@ (8009710 <frame_processing_rs422+0x16c8>)
 800951c:	fba3 2301 	umull	r2, r3, r3, r1
 8009520:	095a      	lsrs	r2, r3, #5
 8009522:	2364      	movs	r3, #100	@ 0x64
 8009524:	fb02 f303 	mul.w	r3, r2, r3
 8009528:	1acb      	subs	r3, r1, r3
 800952a:	b29b      	uxth	r3, r3
 800952c:	61fb      	str	r3, [r7, #28]
 800952e:	f8b7 25de 	ldrh.w	r2, [r7, #1502]	@ 0x5de
 8009532:	4b77      	ldr	r3, [pc, #476]	@ (8009710 <frame_processing_rs422+0x16c8>)
 8009534:	fba3 2302 	umull	r2, r3, r3, r2
 8009538:	095b      	lsrs	r3, r3, #5
 800953a:	b29b      	uxth	r3, r3
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	f8b7 15de 	ldrh.w	r1, [r7, #1502]	@ 0x5de
 8009542:	4b73      	ldr	r3, [pc, #460]	@ (8009710 <frame_processing_rs422+0x16c8>)
 8009544:	fba3 2301 	umull	r2, r3, r3, r1
 8009548:	095a      	lsrs	r2, r3, #5
 800954a:	2364      	movs	r3, #100	@ 0x64
 800954c:	fb02 f303 	mul.w	r3, r2, r3
 8009550:	1acb      	subs	r3, r1, r3
 8009552:	b29b      	uxth	r3, r3
 8009554:	617b      	str	r3, [r7, #20]
 8009556:	f897 05dd 	ldrb.w	r0, [r7, #1501]	@ 0x5dd
 800955a:	4601      	mov	r1, r0
 800955c:	6139      	str	r1, [r7, #16]
 800955e:	f897 05dc 	ldrb.w	r0, [r7, #1500]	@ 0x5dc
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	f897 45db 	ldrb.w	r4, [r7, #1499]	@ 0x5db
 8009568:	60bc      	str	r4, [r7, #8]
 800956a:	f897 55da 	ldrb.w	r5, [r7, #1498]	@ 0x5da
 800956e:	607d      	str	r5, [r7, #4]
 8009570:	f897 65d9 	ldrb.w	r6, [r7, #1497]	@ 0x5d9
 8009574:	603e      	str	r6, [r7, #0]
 8009576:	f9b7 65d6 	ldrsh.w	r6, [r7, #1494]	@ 0x5d6
 800957a:	f9b7 55d4 	ldrsh.w	r5, [r7, #1492]	@ 0x5d4
 800957e:	f9b7 45d2 	ldrsh.w	r4, [r7, #1490]	@ 0x5d2
 8009582:	f9b7 05d0 	ldrsh.w	r0, [r7, #1488]	@ 0x5d0
 8009586:	f9b7 15ce 	ldrsh.w	r1, [r7, #1486]	@ 0x5ce
 800958a:	f9b7 25cc 	ldrsh.w	r2, [r7, #1484]	@ 0x5cc
 800958e:	f9b7 35ca 	ldrsh.w	r3, [r7, #1482]	@ 0x5ca
 8009592:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 8009596:	9332      	str	r3, [sp, #200]	@ 0xc8
 8009598:	9231      	str	r2, [sp, #196]	@ 0xc4
 800959a:	9130      	str	r1, [sp, #192]	@ 0xc0
 800959c:	902f      	str	r0, [sp, #188]	@ 0xbc
 800959e:	942e      	str	r4, [sp, #184]	@ 0xb8
 80095a0:	952d      	str	r5, [sp, #180]	@ 0xb4
 80095a2:	962c      	str	r6, [sp, #176]	@ 0xb0
 80095a4:	683e      	ldr	r6, [r7, #0]
 80095a6:	962b      	str	r6, [sp, #172]	@ 0xac
 80095a8:	687d      	ldr	r5, [r7, #4]
 80095aa:	952a      	str	r5, [sp, #168]	@ 0xa8
 80095ac:	68bc      	ldr	r4, [r7, #8]
 80095ae:	9429      	str	r4, [sp, #164]	@ 0xa4
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	9028      	str	r0, [sp, #160]	@ 0xa0
 80095b4:	6939      	ldr	r1, [r7, #16]
 80095b6:	9127      	str	r1, [sp, #156]	@ 0x9c
 80095b8:	6979      	ldr	r1, [r7, #20]
 80095ba:	9126      	str	r1, [sp, #152]	@ 0x98
 80095bc:	69b9      	ldr	r1, [r7, #24]
 80095be:	9125      	str	r1, [sp, #148]	@ 0x94
 80095c0:	69f9      	ldr	r1, [r7, #28]
 80095c2:	9124      	str	r1, [sp, #144]	@ 0x90
 80095c4:	6a39      	ldr	r1, [r7, #32]
 80095c6:	9123      	str	r1, [sp, #140]	@ 0x8c
 80095c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80095ca:	9122      	str	r1, [sp, #136]	@ 0x88
 80095cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095ce:	9121      	str	r1, [sp, #132]	@ 0x84
 80095d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095d2:	9120      	str	r1, [sp, #128]	@ 0x80
 80095d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095d6:	911f      	str	r1, [sp, #124]	@ 0x7c
 80095d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095da:	921e      	str	r2, [sp, #120]	@ 0x78
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	931d      	str	r3, [sp, #116]	@ 0x74
 80095e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095e4:	931c      	str	r3, [sp, #112]	@ 0x70
 80095e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80095ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80095ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80095f2:	9319      	str	r3, [sp, #100]	@ 0x64
 80095f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095f6:	9318      	str	r3, [sp, #96]	@ 0x60
 80095f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095fa:	9317      	str	r3, [sp, #92]	@ 0x5c
 80095fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009600:	9316      	str	r3, [sp, #88]	@ 0x58
 8009602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009604:	9315      	str	r3, [sp, #84]	@ 0x54
 8009606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009608:	9314      	str	r3, [sp, #80]	@ 0x50
 800960a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800960e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009612:	9312      	str	r3, [sp, #72]	@ 0x48
 8009614:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009616:	9311      	str	r3, [sp, #68]	@ 0x44
 8009618:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800961c:	9310      	str	r3, [sp, #64]	@ 0x40
 800961e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009620:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009622:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009624:	930e      	str	r3, [sp, #56]	@ 0x38
 8009626:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800962a:	930d      	str	r3, [sp, #52]	@ 0x34
 800962c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800962e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009630:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009632:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009634:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009638:	930a      	str	r3, [sp, #40]	@ 0x28
 800963a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800963c:	9309      	str	r3, [sp, #36]	@ 0x24
 800963e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009640:	9308      	str	r3, [sp, #32]
 8009642:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800964a:	9306      	str	r3, [sp, #24]
 800964c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800964e:	9305      	str	r3, [sp, #20]
 8009650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009658:	9303      	str	r3, [sp, #12]
 800965a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800965e:	9302      	str	r3, [sp, #8]
 8009660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	4673      	mov	r3, lr
 800966e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009672:	4928      	ldr	r1, [pc, #160]	@ (8009714 <frame_processing_rs422+0x16cc>)
 8009674:	4660      	mov	r0, ip
 8009676:	f006 fc09 	bl	800fe8c <siprintf>
			        neo_led_r, neo_led_g, neo_led_b, neo_led_w,
			        ir_led_duty, accel_x, accel_y, accel_z,
		            gyro_x, gyro_y, gyro_z,
		            press);

			if(auto_report_enabled){
 800967a:	4b27      	ldr	r3, [pc, #156]	@ (8009718 <frame_processing_rs422+0x16d0>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <frame_processing_rs422+0x164a>
				Uart_sendstring(UART4, buffer_0x13);
 8009684:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8009688:	4619      	mov	r1, r3
 800968a:	4824      	ldr	r0, [pc, #144]	@ (800971c <frame_processing_rs422+0x16d4>)
 800968c:	f7f8 fcb4 	bl	8001ff8 <Uart_sendstring>
 8009690:	e005      	b.n	800969e <frame_processing_rs422+0x1656>
			}else{
				Uart_sendstring(USART2, buffer_0x13);
 8009692:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8009696:	4619      	mov	r1, r3
 8009698:	4821      	ldr	r0, [pc, #132]	@ (8009720 <frame_processing_rs422+0x16d8>)
 800969a:	f7f8 fcad 	bl	8001ff8 <Uart_sendstring>
			}



			}
			receive_iouFlag = 1;
 800969e:	4b21      	ldr	r3, [pc, #132]	@ (8009724 <frame_processing_rs422+0x16dc>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	701a      	strb	r2, [r3, #0]

			for (int i = 1; i <= 49; i++) {
 80096a4:	2301      	movs	r3, #1
 80096a6:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 80096aa:	e015      	b.n	80096d8 <frame_processing_rs422+0x1690>
					    nextBuffer[i + 7] = fsp_pkt->payload[i]; //42   =  35  + 7      8 -> pay 1   9 -> pay2    43 -< pay35
 80096ac:	4b1e      	ldr	r3, [pc, #120]	@ (8009728 <frame_processing_rs422+0x16e0>)
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 80096b4:	3307      	adds	r3, #7
 80096b6:	4413      	add	r3, r2
 80096b8:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 80096bc:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 80096c0:	6811      	ldr	r1, [r2, #0]
 80096c2:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 80096c6:	440a      	add	r2, r1
 80096c8:	3205      	adds	r2, #5
 80096ca:	7812      	ldrb	r2, [r2, #0]
 80096cc:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= 49; i++) {
 80096ce:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 80096d2:	3301      	adds	r3, #1
 80096d4:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 80096d8:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 80096dc:	2b31      	cmp	r3, #49	@ 0x31
 80096de:	dde5      	ble.n	80096ac <frame_processing_rs422+0x1664>
			}
//			Uart_sendstring(UART4, "\nIOU_Collected\r\n");

			disconnect_counter_iou = 0;
 80096e0:	4b12      	ldr	r3, [pc, #72]	@ (800972c <frame_processing_rs422+0x16e4>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]

		}
		break;
 80096e6:	e008      	b.n	80096fa <frame_processing_rs422+0x16b2>


		default:
			Uart_sendstring(UART4, "Failed to get all");
 80096e8:	4911      	ldr	r1, [pc, #68]	@ (8009730 <frame_processing_rs422+0x16e8>)
 80096ea:	480c      	ldr	r0, [pc, #48]	@ (800971c <frame_processing_rs422+0x16d4>)
 80096ec:	f7f8 fc84 	bl	8001ff8 <Uart_sendstring>
			Uart_sendstring(USART2, "Failed to get all");
 80096f0:	490f      	ldr	r1, [pc, #60]	@ (8009730 <frame_processing_rs422+0x16e8>)
 80096f2:	480b      	ldr	r0, [pc, #44]	@ (8009720 <frame_processing_rs422+0x16d8>)
 80096f4:	f7f8 fc80 	bl	8001ff8 <Uart_sendstring>
			break;
 80096f8:	bf00      	nop
	}

}
 80096fa:	bf00      	nop
 80096fc:	f507 67c1 	add.w	r7, r7, #1544	@ 0x608
 8009700:	46bd      	mov	sp, r7
 8009702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009706:	bf00      	nop
 8009708:	080155f4 	.word	0x080155f4
 800970c:	66666667 	.word	0x66666667
 8009710:	51eb851f 	.word	0x51eb851f
 8009714:	08015940 	.word	0x08015940
 8009718:	20005de8 	.word	0x20005de8
 800971c:	40004c00 	.word	0x40004c00
 8009720:	40004400 	.word	0x40004400
 8009724:	200000e2 	.word	0x200000e2
 8009728:	2000049c 	.word	0x2000049c
 800972c:	20005cbb 	.word	0x20005cbb
 8009730:	08015ac4 	.word	0x08015ac4

08009734 <rs422_create_task>:

void	rs422_create_task(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&RS422_task_context.taskHandle, &RS422_task_context.taskProperty);
 8009738:	4903      	ldr	r1, [pc, #12]	@ (8009748 <rs422_create_task+0x14>)
 800973a:	4804      	ldr	r0, [pc, #16]	@ (800974c <rs422_create_task+0x18>)
 800973c:	f002 fb86 	bl	800be4c <SCH_TASK_CreateTask>
	Ringbuf_init();
 8009740:	f7f8 f95c 	bl	80019fc <Ringbuf_init>

}
 8009744:	bf00      	nop
 8009746:	bd80      	pop	{r7, pc}
 8009748:	2000048c 	.word	0x2000048c
 800974c:	20000484 	.word	0x20000484

08009750 <COPC_init>:
		COPC_task_update                // taskFunction;
	}
};

void	COPC_init(void)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8009754:	f7f8 f952 	bl	80019fc <Ringbuf_init>
	fsp_init(FSP_ADR_CPOC);
 8009758:	2001      	movs	r0, #1
 800975a:	f002 fce5 	bl	800c128 <fsp_init>
	s_pCOPC_Sfp_Payload = (COPC_Sfp_Payload_t *)(&s_COPC_FspPacket.payload);
 800975e:	4b02      	ldr	r3, [pc, #8]	@ (8009768 <COPC_init+0x18>)
 8009760:	4a02      	ldr	r2, [pc, #8]	@ (800976c <COPC_init+0x1c>)
 8009762:	601a      	str	r2, [r3, #0]
}
 8009764:	bf00      	nop
 8009766:	bd80      	pop	{r7, pc}
 8009768:	200066c0 	.word	0x200066c0
 800976c:	200065c5 	.word	0x200065c5

08009770 <COPC_task_update>:
volatile uint8_t receiving = 0;
volatile uint8_t receive_buffer[FSP_PKT_MAX_LENGTH];
volatile uint8_t receive_index = 0;

static void COPC_task_update(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b0d0      	sub	sp, #320	@ 0x140
 8009774:	af00      	add	r7, sp, #0
	uint8_t rxData;


    while (IsDataAvailable(USART1))
 8009776:	e074      	b.n	8009862 <COPC_task_update+0xf2>
    {
        rxData = Uart_read(USART1);
 8009778:	4840      	ldr	r0, [pc, #256]	@ (800987c <COPC_task_update+0x10c>)
 800977a:	f7f8 fa25 	bl	8001bc8 <Uart_read>
 800977e:	4603      	mov	r3, r0
 8009780:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

//		char pos_str2[10];
//		sprintf(pos_str2, "%d", rxData);
//		Uart_sendstring(UART5, pos_str2);

        if (!receiving) {
 8009784:	4b3e      	ldr	r3, [pc, #248]	@ (8009880 <COPC_task_update+0x110>)
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <COPC_task_update+0x34>
            if (rxData == FSP_PKT_SOD) {
 800978e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009792:	2bca      	cmp	r3, #202	@ 0xca
 8009794:	d165      	bne.n	8009862 <COPC_task_update+0xf2>
                receiving = 1;
 8009796:	4b3a      	ldr	r3, [pc, #232]	@ (8009880 <COPC_task_update+0x110>)
 8009798:	2201      	movs	r2, #1
 800979a:	701a      	strb	r2, [r3, #0]
                receive_index = 0;
 800979c:	4b39      	ldr	r3, [pc, #228]	@ (8009884 <COPC_task_update+0x114>)
 800979e:	2200      	movs	r2, #0
 80097a0:	701a      	strb	r2, [r3, #0]
 80097a2:	e05e      	b.n	8009862 <COPC_task_update+0xf2>
            }
        } else {

            if (rxData == FSP_PKT_EOF) {
 80097a4:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80097a8:	2bef      	cmp	r3, #239	@ 0xef
 80097aa:	d146      	bne.n	800983a <COPC_task_update+0xca>
                receiving = 0;
 80097ac:	4b34      	ldr	r3, [pc, #208]	@ (8009880 <COPC_task_update+0x110>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	701a      	strb	r2, [r3, #0]
                fsp_packet_t fsp_pkt;
                if(send_rs422){
 80097b2:	4b35      	ldr	r3, [pc, #212]	@ (8009888 <COPC_task_update+0x118>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d01a      	beq.n	80097f2 <COPC_task_update+0x82>
					frame_decode_rs422((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 80097bc:	4b31      	ldr	r3, [pc, #196]	@ (8009884 <COPC_task_update+0x114>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80097c6:	4619      	mov	r1, r3
 80097c8:	4830      	ldr	r0, [pc, #192]	@ (800988c <COPC_task_update+0x11c>)
 80097ca:	f003 f8d7 	bl	800c97c <frame_decode_rs422>
					frame_processing_rs422(&fsp_pkt);
 80097ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fc38 	bl	8008048 <frame_processing_rs422>
					receive_pduFlag = 1;
 80097d8:	4b2d      	ldr	r3, [pc, #180]	@ (8009890 <COPC_task_update+0x120>)
 80097da:	2201      	movs	r2, #1
 80097dc:	701a      	strb	r2, [r3, #0]
					receive_pmuFlag = 1;
 80097de:	4b2d      	ldr	r3, [pc, #180]	@ (8009894 <COPC_task_update+0x124>)
 80097e0:	2201      	movs	r2, #1
 80097e2:	701a      	strb	r2, [r3, #0]
					receive_iouFlag = 1;
 80097e4:	4b2c      	ldr	r3, [pc, #176]	@ (8009898 <COPC_task_update+0x128>)
 80097e6:	2201      	movs	r2, #1
 80097e8:	701a      	strb	r2, [r3, #0]
					send_rs422 = 0;
 80097ea:	4b27      	ldr	r3, [pc, #156]	@ (8009888 <COPC_task_update+0x118>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	701a      	strb	r2, [r3, #0]
 80097f0:	e02f      	b.n	8009852 <COPC_task_update+0xe2>
                }else{
                    int ret = frame_decode((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 80097f2:	4b24      	ldr	r3, [pc, #144]	@ (8009884 <COPC_task_update+0x114>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80097fc:	4619      	mov	r1, r3
 80097fe:	4823      	ldr	r0, [pc, #140]	@ (800988c <COPC_task_update+0x11c>)
 8009800:	f002 ff5a 	bl	800c6b8 <frame_decode>
 8009804:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138

                    if (ret > 0) {
 8009808:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800980c:	2b00      	cmp	r3, #0
 800980e:	dd20      	ble.n	8009852 <COPC_task_update+0xe2>
                        char error_msg[50];
                        sprintf(error_msg, "Error: %s\r\n", decode_error_msgs[ret]);
 8009810:	4a22      	ldr	r2, [pc, #136]	@ (800989c <COPC_task_update+0x12c>)
 8009812:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009816:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800981a:	1d3b      	adds	r3, r7, #4
 800981c:	4920      	ldr	r1, [pc, #128]	@ (80098a0 <COPC_task_update+0x130>)
 800981e:	4618      	mov	r0, r3
 8009820:	f006 fb34 	bl	800fe8c <siprintf>
//                        Uart_sendstring(UART5, error_msg);
                        Uart_sendstring(UART4, error_msg);
 8009824:	1d3b      	adds	r3, r7, #4
 8009826:	4619      	mov	r1, r3
 8009828:	481e      	ldr	r0, [pc, #120]	@ (80098a4 <COPC_task_update+0x134>)
 800982a:	f7f8 fbe5 	bl	8001ff8 <Uart_sendstring>
                        Uart_sendstring(USART2, error_msg);
 800982e:	1d3b      	adds	r3, r7, #4
 8009830:	4619      	mov	r1, r3
 8009832:	481d      	ldr	r0, [pc, #116]	@ (80098a8 <COPC_task_update+0x138>)
 8009834:	f7f8 fbe0 	bl	8001ff8 <Uart_sendstring>
 8009838:	e00b      	b.n	8009852 <COPC_task_update+0xe2>
                }



            }else{
            	receive_buffer[receive_index++] = rxData;
 800983a:	4b12      	ldr	r3, [pc, #72]	@ (8009884 <COPC_task_update+0x114>)
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	b2d1      	uxtb	r1, r2
 8009844:	4a0f      	ldr	r2, [pc, #60]	@ (8009884 <COPC_task_update+0x114>)
 8009846:	7011      	strb	r1, [r2, #0]
 8009848:	4619      	mov	r1, r3
 800984a:	4a10      	ldr	r2, [pc, #64]	@ (800988c <COPC_task_update+0x11c>)
 800984c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009850:	5453      	strb	r3, [r2, r1]
            }

            if (receive_index >= FSP_PKT_MAX_LENGTH) {
 8009852:	4b0c      	ldr	r3, [pc, #48]	@ (8009884 <COPC_task_update+0x114>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2bff      	cmp	r3, #255	@ 0xff
 800985a:	d102      	bne.n	8009862 <COPC_task_update+0xf2>
                // Frame quá dài, reset lại

                receiving = 0;
 800985c:	4b08      	ldr	r3, [pc, #32]	@ (8009880 <COPC_task_update+0x110>)
 800985e:	2200      	movs	r2, #0
 8009860:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART1))
 8009862:	4806      	ldr	r0, [pc, #24]	@ (800987c <COPC_task_update+0x10c>)
 8009864:	f7f8 fb6e 	bl	8001f44 <IsDataAvailable>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d184      	bne.n	8009778 <COPC_task_update+0x8>
            }
    }
}

}
 800986e:	bf00      	nop
 8009870:	bf00      	nop
 8009872:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	40011000 	.word	0x40011000
 8009880:	200066c4 	.word	0x200066c4
 8009884:	200067c7 	.word	0x200067c7
 8009888:	20005cbe 	.word	0x20005cbe
 800988c:	200066c8 	.word	0x200066c8
 8009890:	200000e0 	.word	0x200000e0
 8009894:	200000e1 	.word	0x200000e1
 8009898:	200000e2 	.word	0x200000e2
 800989c:	200004a0 	.word	0x200004a0
 80098a0:	08015b64 	.word	0x08015b64
 80098a4:	40004c00 	.word	0x40004c00
 80098a8:	40004400 	.word	0x40004400

080098ac <COPC_create_task>:
void	COPC_create_task(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	af00      	add	r7, sp, #0
	COPC_init();
 80098b0:	f7ff ff4e 	bl	8009750 <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
 80098b4:	4902      	ldr	r1, [pc, #8]	@ (80098c0 <COPC_create_task+0x14>)
 80098b6:	4803      	ldr	r0, [pc, #12]	@ (80098c4 <COPC_create_task+0x18>)
 80098b8:	f002 fac8 	bl	800be4c <SCH_TASK_CreateTask>
}
 80098bc:	bf00      	nop
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	200004c0 	.word	0x200004c0
 80098c4:	200004bc 	.word	0x200004bc

080098c8 <GPS_create_task>:
		}
};


void GPS_create_task(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
	Ringbuf_init();
 80098cc:	f7f8 f896 	bl	80019fc <Ringbuf_init>
	SCH_TASK_CreateTask(&gps_task_context.taskHandle, &gps_task_context.taskProperty);
 80098d0:	4902      	ldr	r1, [pc, #8]	@ (80098dc <GPS_create_task+0x14>)
 80098d2:	4803      	ldr	r0, [pc, #12]	@ (80098e0 <GPS_create_task+0x18>)
 80098d4:	f002 faba 	bl	800be4c <SCH_TASK_CreateTask>
}
 80098d8:	bf00      	nop
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	200004d0 	.word	0x200004d0
 80098e0:	200004cc 	.word	0x200004cc

080098e4 <GPS_task_update>:



static void GPS_task_update(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
	if(gps_report_enable){
 80098ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009928 <GPS_task_update+0x44>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d015      	beq.n	8009920 <GPS_task_update+0x3c>
		uint8_t rxData;
		while (IsDataAvailable(USART3))
 80098f4:	e00e      	b.n	8009914 <GPS_task_update+0x30>
		{
			rxData = Uart_read(USART3);
 80098f6:	480d      	ldr	r0, [pc, #52]	@ (800992c <GPS_task_update+0x48>)
 80098f8:	f7f8 f966 	bl	8001bc8 <Uart_read>
 80098fc:	4603      	mov	r3, r0
 80098fe:	71fb      	strb	r3, [r7, #7]
			Uart_write(USART2, rxData);
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	4619      	mov	r1, r3
 8009904:	480a      	ldr	r0, [pc, #40]	@ (8009930 <GPS_task_update+0x4c>)
 8009906:	f7f8 fa23 	bl	8001d50 <Uart_write>
			Uart_write(UART4, rxData);
 800990a:	79fb      	ldrb	r3, [r7, #7]
 800990c:	4619      	mov	r1, r3
 800990e:	4809      	ldr	r0, [pc, #36]	@ (8009934 <GPS_task_update+0x50>)
 8009910:	f7f8 fa1e 	bl	8001d50 <Uart_write>
		while (IsDataAvailable(USART3))
 8009914:	4805      	ldr	r0, [pc, #20]	@ (800992c <GPS_task_update+0x48>)
 8009916:	f7f8 fb15 	bl	8001f44 <IsDataAvailable>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1ea      	bne.n	80098f6 <GPS_task_update+0x12>
		}
	}
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	20005deb 	.word	0x20005deb
 800992c:	40004800 	.word	0x40004800
 8009930:	40004400 	.word	0x40004400
 8009934:	40004c00 	.word	0x40004c00

08009938 <LL_I2C_DisableIT_RX>:
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	605a      	str	r2, [r3, #4]
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <LL_I2C_IsActiveFlag_RXNE>:
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009968:	2b40      	cmp	r3, #64	@ 0x40
 800996a:	bf0c      	ite	eq
 800996c:	2301      	moveq	r3, #1
 800996e:	2300      	movne	r3, #0
 8009970:	b2db      	uxtb	r3, r3
}
 8009972:	4618      	mov	r0, r3
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <LL_I2C_ClearFlag_ADDR>:
{
 800997e:	b480      	push	{r7}
 8009980:	b085      	sub	sp, #20
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  tmpreg = I2Cx->SR1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800998c:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8009994:	68fb      	ldr	r3, [r7, #12]
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <LL_I2C_GenerateStartCondition>:
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	601a      	str	r2, [r3, #0]
}
 80099b6:	bf00      	nop
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <LL_I2C_GenerateStopCondition>:
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	601a      	str	r2, [r3, #0]
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <LL_I2C_ReceiveData8>:
{
 80099e2:	b480      	push	{r7}
 80099e4:	b083      	sub	sp, #12
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	b2db      	uxtb	r3, r3
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <LL_I2C_TransmitData8>:
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	431a      	orrs	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	611a      	str	r2, [r3, #16]
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <I2C_img_task_update>:
    }
};

uint8_t img_read_enable = 0;
static void I2C_img_task_update(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
  //  if (img_read_enable)
    if (img_read_enable)
 8009a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8009ad8 <I2C_img_task_update+0xb4>)
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d042      	beq.n	8009ab8 <I2C_img_task_update+0x94>
    {
        if (currentBlock < NUM_BLOCKS)
 8009a32:	4b2a      	ldr	r3, [pc, #168]	@ (8009adc <I2C_img_task_update+0xb8>)
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	2b38      	cmp	r3, #56	@ 0x38
 8009a38:	d811      	bhi.n	8009a5e <I2C_img_task_update+0x3a>
        {
            if (imgReadIndex == 0)
 8009a3a:	4b29      	ldr	r3, [pc, #164]	@ (8009ae0 <I2C_img_task_update+0xbc>)
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d128      	bne.n	8009a94 <I2C_img_task_update+0x70>
     //           while (!LL_I2C_IsActiveFlag_ADDR(I2C3));
//                LL_I2C_ClearFlag_ADDR(I2C3);
//                LL_I2C_EnableIT_RX(I2C3);


                LL_I2C_GenerateStartCondition(I2C3);
 8009a42:	4828      	ldr	r0, [pc, #160]	@ (8009ae4 <I2C_img_task_update+0xc0>)
 8009a44:	f7ff ffad 	bl	80099a2 <LL_I2C_GenerateStartCondition>

                LL_I2C_TransmitData8(I2C3, IMG_ADDRESS);
 8009a48:	2113      	movs	r1, #19
 8009a4a:	4826      	ldr	r0, [pc, #152]	@ (8009ae4 <I2C_img_task_update+0xc0>)
 8009a4c:	f7ff ffd6 	bl	80099fc <LL_I2C_TransmitData8>
                LL_I2C_ClearFlag_ADDR(I2C3);
 8009a50:	4824      	ldr	r0, [pc, #144]	@ (8009ae4 <I2C_img_task_update+0xc0>)
 8009a52:	f7ff ff94 	bl	800997e <LL_I2C_ClearFlag_ADDR>
                LL_I2C_GenerateStopCondition(I2C3);
 8009a56:	4823      	ldr	r0, [pc, #140]	@ (8009ae4 <I2C_img_task_update+0xc0>)
 8009a58:	f7ff ffb3 	bl	80099c2 <LL_I2C_GenerateStopCondition>
 8009a5c:	e01a      	b.n	8009a94 <I2C_img_task_update+0x70>
            }
        }
        else
        {
            // All blocks have been read
            LL_I2C_DisableIT_RX(I2C3);
 8009a5e:	4821      	ldr	r0, [pc, #132]	@ (8009ae4 <I2C_img_task_update+0xc0>)
 8009a60:	f7ff ff6a 	bl	8009938 <LL_I2C_DisableIT_RX>
            LL_I2C_GenerateStopCondition(I2C3);
 8009a64:	481f      	ldr	r0, [pc, #124]	@ (8009ae4 <I2C_img_task_update+0xc0>)
 8009a66:	f7ff ffac 	bl	80099c2 <LL_I2C_GenerateStopCondition>
            img_read_enable = 0;
 8009a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad8 <I2C_img_task_update+0xb4>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	701a      	strb	r2, [r3, #0]
            // Process the received data
            // Switch block ở đây
            // ...
            for (int i = 0; i < IMG_SIZE; i++) {
 8009a70:	2300      	movs	r3, #0
 8009a72:	607b      	str	r3, [r7, #4]
 8009a74:	e00a      	b.n	8009a8c <I2C_img_task_update+0x68>
                Uart_write(UART4, imgData[i]);
 8009a76:	4a1c      	ldr	r2, [pc, #112]	@ (8009ae8 <I2C_img_task_update+0xc4>)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	481a      	ldr	r0, [pc, #104]	@ (8009aec <I2C_img_task_update+0xc8>)
 8009a82:	f7f8 f965 	bl	8001d50 <Uart_write>
            for (int i = 0; i < IMG_SIZE; i++) {
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	607b      	str	r3, [r7, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f5b3 5fe4 	cmp.w	r3, #7296	@ 0x1c80
 8009a92:	dbf0      	blt.n	8009a76 <I2C_img_task_update+0x52>
            }
        }

        // Check if 1 second has elapsed
        if (SCH_TIM_HasCompleted(SCH_TIM_IMG))
 8009a94:	2008      	movs	r0, #8
 8009a96:	f002 f9c3 	bl	800be20 <SCH_TIM_HasCompleted>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d016      	beq.n	8009ace <I2C_img_task_update+0xaa>
        {
            // Reset the read process
            imgReadIndex = 0;
 8009aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae0 <I2C_img_task_update+0xbc>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	801a      	strh	r2, [r3, #0]
            currentBlock = 0;
 8009aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8009adc <I2C_img_task_update+0xb8>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	801a      	strh	r2, [r3, #0]
            SCH_TIM_Start(SCH_TIM_IMG, IMG_PERIOD);
 8009aac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009ab0:	2008      	movs	r0, #8
 8009ab2:	f002 f99f 	bl	800bdf4 <SCH_TIM_Start>
        // Reset the read process
        imgReadIndex = 0;
        currentBlock = 0;
        SCH_TIM_Start(SCH_TIM_IMG, IMG_PERIOD);
    }
}
 8009ab6:	e00a      	b.n	8009ace <I2C_img_task_update+0xaa>
        imgReadIndex = 0;
 8009ab8:	4b09      	ldr	r3, [pc, #36]	@ (8009ae0 <I2C_img_task_update+0xbc>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	801a      	strh	r2, [r3, #0]
        currentBlock = 0;
 8009abe:	4b07      	ldr	r3, [pc, #28]	@ (8009adc <I2C_img_task_update+0xb8>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	801a      	strh	r2, [r3, #0]
        SCH_TIM_Start(SCH_TIM_IMG, IMG_PERIOD);
 8009ac4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009ac8:	2008      	movs	r0, #8
 8009aca:	f002 f993 	bl	800bdf4 <SCH_TIM_Start>
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	2000844c 	.word	0x2000844c
 8009adc:	2000844a 	.word	0x2000844a
 8009ae0:	20008448 	.word	0x20008448
 8009ae4:	40005c00 	.word	0x40005c00
 8009ae8:	200067c8 	.word	0x200067c8
 8009aec:	40004c00 	.word	0x40004c00

08009af0 <I2C_img_create_task>:


void I2C_img_create_task(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&i2c_img_task_context.taskHandle, &i2c_img_task_context.taskProperty);
 8009af4:	4902      	ldr	r1, [pc, #8]	@ (8009b00 <I2C_img_create_task+0x10>)
 8009af6:	4803      	ldr	r0, [pc, #12]	@ (8009b04 <I2C_img_create_task+0x14>)
 8009af8:	f002 f9a8 	bl	800be4c <SCH_TASK_CreateTask>
}
 8009afc:	bf00      	nop
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	200004e0 	.word	0x200004e0
 8009b04:	200004dc 	.word	0x200004dc

08009b08 <I2C3_IRQHandler>:

void I2C3_IRQHandler(void)
{
 8009b08:	b598      	push	{r3, r4, r7, lr}
 8009b0a:	af00      	add	r7, sp, #0
    if (LL_I2C_IsActiveFlag_RXNE(I2C3))
 8009b0c:	4816      	ldr	r0, [pc, #88]	@ (8009b68 <I2C3_IRQHandler+0x60>)
 8009b0e:	f7ff ff23 	bl	8009958 <LL_I2C_IsActiveFlag_RXNE>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d025      	beq.n	8009b64 <I2C3_IRQHandler+0x5c>
    {
        // Read received data
        imgData[currentBlock * BLOCK_SIZE + imgReadIndex] = LL_I2C_ReceiveData8(I2C3);
 8009b18:	4b14      	ldr	r3, [pc, #80]	@ (8009b6c <I2C3_IRQHandler+0x64>)
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	01db      	lsls	r3, r3, #7
 8009b1e:	4a14      	ldr	r2, [pc, #80]	@ (8009b70 <I2C3_IRQHandler+0x68>)
 8009b20:	8812      	ldrh	r2, [r2, #0]
 8009b22:	189c      	adds	r4, r3, r2
 8009b24:	4810      	ldr	r0, [pc, #64]	@ (8009b68 <I2C3_IRQHandler+0x60>)
 8009b26:	f7ff ff5c 	bl	80099e2 <LL_I2C_ReceiveData8>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4b11      	ldr	r3, [pc, #68]	@ (8009b74 <I2C3_IRQHandler+0x6c>)
 8009b30:	551a      	strb	r2, [r3, r4]
        imgReadIndex++;
 8009b32:	4b0f      	ldr	r3, [pc, #60]	@ (8009b70 <I2C3_IRQHandler+0x68>)
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	3301      	adds	r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b70 <I2C3_IRQHandler+0x68>)
 8009b3c:	801a      	strh	r2, [r3, #0]

        if (imgReadIndex >= BLOCK_SIZE)
 8009b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b70 <I2C3_IRQHandler+0x68>)
 8009b40:	881b      	ldrh	r3, [r3, #0]
 8009b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b44:	d90e      	bls.n	8009b64 <I2C3_IRQHandler+0x5c>
        {
            // Current block is fully read
            LL_I2C_DisableIT_RX(I2C3);
 8009b46:	4808      	ldr	r0, [pc, #32]	@ (8009b68 <I2C3_IRQHandler+0x60>)
 8009b48:	f7ff fef6 	bl	8009938 <LL_I2C_DisableIT_RX>
            LL_I2C_GenerateStopCondition(I2C3);
 8009b4c:	4806      	ldr	r0, [pc, #24]	@ (8009b68 <I2C3_IRQHandler+0x60>)
 8009b4e:	f7ff ff38 	bl	80099c2 <LL_I2C_GenerateStopCondition>
            imgReadIndex = 0;
 8009b52:	4b07      	ldr	r3, [pc, #28]	@ (8009b70 <I2C3_IRQHandler+0x68>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	801a      	strh	r2, [r3, #0]
            currentBlock++;
 8009b58:	4b04      	ldr	r3, [pc, #16]	@ (8009b6c <I2C3_IRQHandler+0x64>)
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	4b02      	ldr	r3, [pc, #8]	@ (8009b6c <I2C3_IRQHandler+0x64>)
 8009b62:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8009b64:	bf00      	nop
 8009b66:	bd98      	pop	{r3, r4, r7, pc}
 8009b68:	40005c00 	.word	0x40005c00
 8009b6c:	2000844a 	.word	0x2000844a
 8009b70:	20008448 	.word	0x20008448
 8009b74:	200067c8 	.word	0x200067c8

08009b78 <LL_GPIO_SetOutputPin>:
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	619a      	str	r2, [r3, #24]
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <LL_GPIO_ResetOutputPin>:
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	041a      	lsls	r2, r3, #16
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	619a      	str	r2, [r3, #24]
}
 8009ba6:	bf00      	nop
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
	...

08009bb4 <status_led_init>:
{
	s_led_display_status.state = status;
}

void status_led_init(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
    // Initialize LED status variable
    s_led_display_status.led = 0;
 8009bb8:	4a06      	ldr	r2, [pc, #24]	@ (8009bd4 <status_led_init+0x20>)
 8009bba:	7813      	ldrb	r3, [r2, #0]
 8009bbc:	f36f 0300 	bfc	r3, #0, #1
 8009bc0:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 8009bc2:	4a04      	ldr	r2, [pc, #16]	@ (8009bd4 <status_led_init+0x20>)
 8009bc4:	7813      	ldrb	r3, [r2, #0]
 8009bc6:	f36f 0347 	bfc	r3, #1, #7
 8009bca:	7013      	strb	r3, [r2, #0]

    // Turn off LED initially
    status_led_off();
 8009bcc:	f000 f804 	bl	8009bd8 <status_led_off>
}
 8009bd0:	bf00      	nop
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20008450 	.word	0x20008450

08009bd8 <status_led_off>:

static void status_led_off(void)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 8009bdc:	2120      	movs	r1, #32
 8009bde:	4802      	ldr	r0, [pc, #8]	@ (8009be8 <status_led_off+0x10>)
 8009be0:	f7ff ffd8 	bl	8009b94 <LL_GPIO_ResetOutputPin>
}
 8009be4:	bf00      	nop
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	40020800 	.word	0x40020800

08009bec <status_led_on>:

static void status_led_on(void)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 8009bf0:	2120      	movs	r1, #32
 8009bf2:	4802      	ldr	r0, [pc, #8]	@ (8009bfc <status_led_on+0x10>)
 8009bf4:	f7ff ffc0 	bl	8009b78 <LL_GPIO_SetOutputPin>
}
 8009bf8:	bf00      	nop
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	40020800 	.word	0x40020800

08009c00 <status_led_update>:

void	status_led_update(void)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	af00      	add	r7, sp, #0
	switch (s_led_display_status.state) {
 8009c04:	4b0d      	ldr	r3, [pc, #52]	@ (8009c3c <status_led_update+0x3c>)
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d811      	bhi.n	8009c36 <status_led_update+0x36>
 8009c12:	a201      	add	r2, pc, #4	@ (adr r2, 8009c18 <status_led_update+0x18>)
 8009c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c18:	08009c29 	.word	0x08009c29
 8009c1c:	08009c2f 	.word	0x08009c2f
 8009c20:	08009c35 	.word	0x08009c35
 8009c24:	08009c35 	.word	0x08009c35
	case POWERUP:
		status_led_powerup();
 8009c28:	f000 f80a 	bl	8009c40 <status_led_powerup>
		break;
 8009c2c:	e003      	b.n	8009c36 <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 8009c2e:	f000 f88d 	bl	8009d4c <status_led_normal>
		break;
 8009c32:	e000      	b.n	8009c36 <status_led_update+0x36>
	case POWERING_SUB:
		break;
 8009c34:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 8009c36:	bf00      	nop
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20008450 	.word	0x20008450

08009c40 <status_led_powerup>:

int count = 0;
int count_ena = 0;
int xflag = 1;
static void status_led_powerup(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 8009c46:	4b3a      	ldr	r3, [pc, #232]	@ (8009d30 <status_led_powerup+0xf0>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d04f      	beq.n	8009cf4 <status_led_powerup+0xb4>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8009c54:	2000      	movs	r0, #0
 8009c56:	f002 f8e3 	bl	800be20 <SCH_TIM_HasCompleted>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d062      	beq.n	8009d26 <status_led_powerup+0xe6>
        {
            s_led_display_status.led = 0;
 8009c60:	4a33      	ldr	r2, [pc, #204]	@ (8009d30 <status_led_powerup+0xf0>)
 8009c62:	7813      	ldrb	r3, [r2, #0]
 8009c64:	f36f 0300 	bfc	r3, #0, #1
 8009c68:	7013      	strb	r3, [r2, #0]
            if(!rs422_report_enable){
 8009c6a:	4b32      	ldr	r3, [pc, #200]	@ (8009d34 <status_led_powerup+0xf4>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d117      	bne.n	8009ca4 <status_led_powerup+0x64>
            	char buffer_0x00[20];

				sprintf(buffer_0x00, "\nAlive[%d]\n", count);
 8009c74:	4b30      	ldr	r3, [pc, #192]	@ (8009d38 <status_led_powerup+0xf8>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	1d3b      	adds	r3, r7, #4
 8009c7a:	4930      	ldr	r1, [pc, #192]	@ (8009d3c <status_led_powerup+0xfc>)
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f006 f905 	bl	800fe8c <siprintf>
				Uart_sendstring(UART5, buffer_0x00);
 8009c82:	1d3b      	adds	r3, r7, #4
 8009c84:	4619      	mov	r1, r3
 8009c86:	482e      	ldr	r0, [pc, #184]	@ (8009d40 <status_led_powerup+0x100>)
 8009c88:	f7f8 f9b6 	bl	8001ff8 <Uart_sendstring>
				count++;
 8009c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8009d38 <status_led_powerup+0xf8>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3301      	adds	r3, #1
 8009c92:	4a29      	ldr	r2, [pc, #164]	@ (8009d38 <status_led_powerup+0xf8>)
 8009c94:	6013      	str	r3, [r2, #0]
				if(count>4){
 8009c96:	4b28      	ldr	r3, [pc, #160]	@ (8009d38 <status_led_powerup+0xf8>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	dd02      	ble.n	8009ca4 <status_led_powerup+0x64>
					count =0;
 8009c9e:	4b26      	ldr	r3, [pc, #152]	@ (8009d38 <status_led_powerup+0xf8>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	601a      	str	r2, [r3, #0]
				}

            }
            count_ena++;
 8009ca4:	4b27      	ldr	r3, [pc, #156]	@ (8009d44 <status_led_powerup+0x104>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	4a26      	ldr	r2, [pc, #152]	@ (8009d44 <status_led_powerup+0x104>)
 8009cac:	6013      	str	r3, [r2, #0]
            if(count_ena>3 || rs422_report_enable){
 8009cae:	4b25      	ldr	r3, [pc, #148]	@ (8009d44 <status_led_powerup+0x104>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	dc04      	bgt.n	8009cc0 <status_led_powerup+0x80>
 8009cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8009d34 <status_led_powerup+0xf4>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d011      	beq.n	8009ce4 <status_led_powerup+0xa4>
            	count_ena = 0;
 8009cc0:	4b20      	ldr	r3, [pc, #128]	@ (8009d44 <status_led_powerup+0x104>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
            	if((!(rs422_report_enable)) && xflag){
 8009cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8009d34 <status_led_powerup+0xf4>)
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <status_led_powerup+0x9e>
 8009cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009d48 <status_led_powerup+0x108>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <status_led_powerup+0x9e>
            		rs422_report_enable = 1;
 8009cd8:	4b16      	ldr	r3, [pc, #88]	@ (8009d34 <status_led_powerup+0xf4>)
 8009cda:	2201      	movs	r2, #1
 8009cdc:	701a      	strb	r2, [r3, #0]
            	}
            	xflag = 0;
 8009cde:	4b1a      	ldr	r3, [pc, #104]	@ (8009d48 <status_led_powerup+0x108>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]
//            char buffered[100];
//            sprintf(buffered, "PMU_INT: %d, PDU_INT: %d, IOU_INT: %d, CAM_INT: %d\r\n",
//                    pmu_int_value, pdu_int_value, iou_int_value, cam_int_value);
//            Uart_sendstring(USART6, buffered);

            status_led_off();
 8009ce4:	f7ff ff78 	bl	8009bd8 <status_led_off>
//            command_send_splash();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8009ce8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009cec:	2000      	movs	r0, #0
 8009cee:	f002 f881 	bl	800bdf4 <SCH_TIM_Start>
            s_led_display_status.led = 1;
            status_led_on();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
        }
    }
}
 8009cf2:	e018      	b.n	8009d26 <status_led_powerup+0xe6>
    else if (s_led_display_status.led == 0) // LED is OFF
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d30 <status_led_powerup+0xf0>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d111      	bne.n	8009d26 <status_led_powerup+0xe6>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8009d02:	2000      	movs	r0, #0
 8009d04:	f002 f88c 	bl	800be20 <SCH_TIM_HasCompleted>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <status_led_powerup+0xe6>
            s_led_display_status.led = 1;
 8009d0e:	4a08      	ldr	r2, [pc, #32]	@ (8009d30 <status_led_powerup+0xf0>)
 8009d10:	7813      	ldrb	r3, [r2, #0]
 8009d12:	f043 0301 	orr.w	r3, r3, #1
 8009d16:	7013      	strb	r3, [r2, #0]
            status_led_on();
 8009d18:	f7ff ff68 	bl	8009bec <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8009d1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009d20:	2000      	movs	r0, #0
 8009d22:	f002 f867 	bl	800bdf4 <SCH_TIM_Start>
}
 8009d26:	bf00      	nop
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20008450 	.word	0x20008450
 8009d34:	20005de9 	.word	0x20005de9
 8009d38:	20008454 	.word	0x20008454
 8009d3c:	08015b70 	.word	0x08015b70
 8009d40:	40005000 	.word	0x40005000
 8009d44:	20008458 	.word	0x20008458
 8009d48:	200004fc 	.word	0x200004fc

08009d4c <status_led_normal>:
//}
//


static void status_led_normal(void)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	af00      	add	r7, sp, #0
//			s_led_display_status.led = 1;
//			status_led_on();
//			SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_ON_PERIOD);	//restart
//		}
//	}
}
 8009d50:	bf00      	nop
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
	...

08009d5c <status_led_create_task>:

void	status_led_create_task(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8009d60:	4902      	ldr	r1, [pc, #8]	@ (8009d6c <status_led_create_task+0x10>)
 8009d62:	4803      	ldr	r0, [pc, #12]	@ (8009d70 <status_led_create_task+0x14>)
 8009d64:	f002 f872 	bl	800be4c <SCH_TASK_CreateTask>
}
 8009d68:	bf00      	nop
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	200004f0 	.word	0x200004f0
 8009d70:	200004ec 	.word	0x200004ec

08009d74 <__NVIC_SetPriorityGrouping>:
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f003 0307 	and.w	r3, r3, #7
 8009d82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d84:	4b0c      	ldr	r3, [pc, #48]	@ (8009db8 <__NVIC_SetPriorityGrouping+0x44>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009d90:	4013      	ands	r3, r2
 8009d92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009da6:	4a04      	ldr	r2, [pc, #16]	@ (8009db8 <__NVIC_SetPriorityGrouping+0x44>)
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	60d3      	str	r3, [r2, #12]
}
 8009dac:	bf00      	nop
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	e000ed00 	.word	0xe000ed00

08009dbc <__NVIC_GetPriorityGrouping>:
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009dc0:	4b04      	ldr	r3, [pc, #16]	@ (8009dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	0a1b      	lsrs	r3, r3, #8
 8009dc6:	f003 0307 	and.w	r3, r3, #7
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	e000ed00 	.word	0xe000ed00

08009dd8 <__NVIC_EnableIRQ>:
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	db0b      	blt.n	8009e02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	f003 021f 	and.w	r2, r3, #31
 8009df0:	4907      	ldr	r1, [pc, #28]	@ (8009e10 <__NVIC_EnableIRQ+0x38>)
 8009df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009df6:	095b      	lsrs	r3, r3, #5
 8009df8:	2001      	movs	r0, #1
 8009dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8009dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009e02:	bf00      	nop
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	e000e100 	.word	0xe000e100

08009e14 <__NVIC_SetPriority>:
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	6039      	str	r1, [r7, #0]
 8009e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	db0a      	blt.n	8009e3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	490c      	ldr	r1, [pc, #48]	@ (8009e60 <__NVIC_SetPriority+0x4c>)
 8009e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e32:	0112      	lsls	r2, r2, #4
 8009e34:	b2d2      	uxtb	r2, r2
 8009e36:	440b      	add	r3, r1
 8009e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009e3c:	e00a      	b.n	8009e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	4908      	ldr	r1, [pc, #32]	@ (8009e64 <__NVIC_SetPriority+0x50>)
 8009e44:	79fb      	ldrb	r3, [r7, #7]
 8009e46:	f003 030f 	and.w	r3, r3, #15
 8009e4a:	3b04      	subs	r3, #4
 8009e4c:	0112      	lsls	r2, r2, #4
 8009e4e:	b2d2      	uxtb	r2, r2
 8009e50:	440b      	add	r3, r1
 8009e52:	761a      	strb	r2, [r3, #24]
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	e000e100 	.word	0xe000e100
 8009e64:	e000ed00 	.word	0xe000ed00

08009e68 <NVIC_EncodePriority>:
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b089      	sub	sp, #36	@ 0x24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	f1c3 0307 	rsb	r3, r3, #7
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	bf28      	it	cs
 8009e86:	2304      	movcs	r3, #4
 8009e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	2b06      	cmp	r3, #6
 8009e90:	d902      	bls.n	8009e98 <NVIC_EncodePriority+0x30>
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	3b03      	subs	r3, #3
 8009e96:	e000      	b.n	8009e9a <NVIC_EncodePriority+0x32>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea6:	43da      	mvns	r2, r3
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	401a      	ands	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eba:	43d9      	mvns	r1, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ec0:	4313      	orrs	r3, r2
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3724      	adds	r7, #36	@ 0x24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <LL_I2C_EnableClockStretching>:
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b083      	sub	sp, #12
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	601a      	str	r2, [r3, #0]
}
 8009ee2:	bf00      	nop
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <LL_I2C_DisableGeneralCall>:
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	601a      	str	r2, [r3, #0]
}
 8009f02:	bf00      	nop
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <LL_I2C_SetOwnAddress2>:
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	431a      	orrs	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	60da      	str	r2, [r3, #12]
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <LL_I2C_DisableOwnAddress2>:
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f023 0201 	bic.w	r2, r3, #1
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	60da      	str	r2, [r3, #12]
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8009f54:	b480      	push	{r7}
 8009f56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009f58:	4b05      	ldr	r3, [pc, #20]	@ (8009f70 <LL_RCC_HSE_Enable+0x1c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a04      	ldr	r2, [pc, #16]	@ (8009f70 <LL_RCC_HSE_Enable+0x1c>)
 8009f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f62:	6013      	str	r3, [r2, #0]
}
 8009f64:	bf00      	nop
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	40023800 	.word	0x40023800

08009f74 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8009f78:	4b07      	ldr	r3, [pc, #28]	@ (8009f98 <LL_RCC_HSE_IsReady+0x24>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f84:	bf0c      	ite	eq
 8009f86:	2301      	moveq	r3, #1
 8009f88:	2300      	movne	r3, #0
 8009f8a:	b2db      	uxtb	r3, r3
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	40023800 	.word	0x40023800

08009f9c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8009fa4:	4b06      	ldr	r3, [pc, #24]	@ (8009fc0 <LL_RCC_SetSysClkSource+0x24>)
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f023 0203 	bic.w	r2, r3, #3
 8009fac:	4904      	ldr	r1, [pc, #16]	@ (8009fc0 <LL_RCC_SetSysClkSource+0x24>)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	608b      	str	r3, [r1, #8]
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	40023800 	.word	0x40023800

08009fc4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009fc8:	4b04      	ldr	r3, [pc, #16]	@ (8009fdc <LL_RCC_GetSysClkSource+0x18>)
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f003 030c 	and.w	r3, r3, #12
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	40023800 	.word	0x40023800

08009fe0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8009fe8:	4b06      	ldr	r3, [pc, #24]	@ (800a004 <LL_RCC_SetAHBPrescaler+0x24>)
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ff0:	4904      	ldr	r1, [pc, #16]	@ (800a004 <LL_RCC_SetAHBPrescaler+0x24>)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	608b      	str	r3, [r1, #8]
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	40023800 	.word	0x40023800

0800a008 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a010:	4b06      	ldr	r3, [pc, #24]	@ (800a02c <LL_RCC_SetAPB1Prescaler+0x24>)
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a018:	4904      	ldr	r1, [pc, #16]	@ (800a02c <LL_RCC_SetAPB1Prescaler+0x24>)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	608b      	str	r3, [r1, #8]
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	40023800 	.word	0x40023800

0800a030 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a038:	4b06      	ldr	r3, [pc, #24]	@ (800a054 <LL_RCC_SetAPB2Prescaler+0x24>)
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a040:	4904      	ldr	r1, [pc, #16]	@ (800a054 <LL_RCC_SetAPB2Prescaler+0x24>)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4313      	orrs	r3, r2
 800a046:	608b      	str	r3, [r1, #8]
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	40023800 	.word	0x40023800

0800a058 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a058:	b480      	push	{r7}
 800a05a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a05c:	4b05      	ldr	r3, [pc, #20]	@ (800a074 <LL_RCC_PLL_Enable+0x1c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a04      	ldr	r2, [pc, #16]	@ (800a074 <LL_RCC_PLL_Enable+0x1c>)
 800a062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a066:	6013      	str	r3, [r2, #0]
}
 800a068:	bf00      	nop
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	40023800 	.word	0x40023800

0800a078 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a078:	b480      	push	{r7}
 800a07a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800a07c:	4b07      	ldr	r3, [pc, #28]	@ (800a09c <LL_RCC_PLL_IsReady+0x24>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a088:	bf0c      	ite	eq
 800a08a:	2301      	moveq	r3, #1
 800a08c:	2300      	movne	r3, #0
 800a08e:	b2db      	uxtb	r3, r3
}
 800a090:	4618      	mov	r0, r3
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	40023800 	.word	0x40023800

0800a0a0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	68f9      	ldr	r1, [r7, #12]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	4311      	orrs	r1, r2
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	0192      	lsls	r2, r2, #6
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	4908      	ldr	r1, [pc, #32]	@ (800a0e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800a0c8:	4b06      	ldr	r3, [pc, #24]	@ (800a0e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a0d0:	4904      	ldr	r1, [pc, #16]	@ (800a0e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800a0d8:	bf00      	nop
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	40023800 	.word	0x40023800
 800a0e8:	ffbf8000 	.word	0xffbf8000

0800a0ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800a0f4:	4b08      	ldr	r3, [pc, #32]	@ (800a118 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a0f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0f8:	4907      	ldr	r1, [pc, #28]	@ (800a118 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800a100:	4b05      	ldr	r3, [pc, #20]	@ (800a118 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800a102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4013      	ands	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a10a:	68fb      	ldr	r3, [r7, #12]
}
 800a10c:	bf00      	nop
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	40023800 	.word	0x40023800

0800a11c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800a124:	4b08      	ldr	r3, [pc, #32]	@ (800a148 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a128:	4907      	ldr	r1, [pc, #28]	@ (800a148 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800a130:	4b05      	ldr	r3, [pc, #20]	@ (800a148 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4013      	ands	r3, r2
 800a138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a13a:	68fb      	ldr	r3, [r7, #12]
}
 800a13c:	bf00      	nop
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	40023800 	.word	0x40023800

0800a14c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a154:	4b08      	ldr	r3, [pc, #32]	@ (800a178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a156:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a158:	4907      	ldr	r1, [pc, #28]	@ (800a178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a160:	4b05      	ldr	r3, [pc, #20]	@ (800a178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4013      	ands	r3, r2
 800a168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a16a:	68fb      	ldr	r3, [r7, #12]
}
 800a16c:	bf00      	nop
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	40023800 	.word	0x40023800

0800a17c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800a184:	4b06      	ldr	r3, [pc, #24]	@ (800a1a0 <LL_FLASH_SetLatency+0x24>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f023 0207 	bic.w	r2, r3, #7
 800a18c:	4904      	ldr	r1, [pc, #16]	@ (800a1a0 <LL_FLASH_SetLatency+0x24>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4313      	orrs	r3, r2
 800a192:	600b      	str	r3, [r1, #0]
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	40023c00 	.word	0x40023c00

0800a1a4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800a1a8:	4b04      	ldr	r3, [pc, #16]	@ (800a1bc <LL_FLASH_GetLatency+0x18>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 0307 	and.w	r3, r3, #7
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	40023c00 	.word	0x40023c00

0800a1c0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800a1c8:	4b06      	ldr	r3, [pc, #24]	@ (800a1e4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a1d0:	4904      	ldr	r1, [pc, #16]	@ (800a1e4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	600b      	str	r3, [r1, #0]
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	40007000 	.word	0x40007000

0800a1e8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800a1ec:	4b07      	ldr	r3, [pc, #28]	@ (800a20c <LL_PWR_IsActiveFlag_VOS+0x24>)
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1f8:	bf0c      	ite	eq
 800a1fa:	2301      	moveq	r3, #1
 800a1fc:	2300      	movne	r3, #0
 800a1fe:	b2db      	uxtb	r3, r3
}
 800a200:	4618      	mov	r0, r3
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	40007000 	.word	0x40007000

0800a210 <LL_USART_Enable>:
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	60da      	str	r2, [r3, #12]
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <LL_USART_ConfigAsyncMode>:
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	695b      	ldr	r3, [r3, #20]
 800a248:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	615a      	str	r2, [r3, #20]
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <LL_GPIO_ResetOutputPin>:
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	041a      	lsls	r2, r3, #16
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	619a      	str	r2, [r3, #24]
}
 800a26e:	bf00      	nop
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
	...

0800a27c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800a280:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a284:	f7ff ff62 	bl	800a14c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800a288:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800a28c:	f7ff ff46 	bl	800a11c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a290:	2003      	movs	r0, #3
 800a292:	f7ff fd6f 	bl	8009d74 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800a296:	f7ff fd91 	bl	8009dbc <__NVIC_GetPriorityGrouping>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2200      	movs	r2, #0
 800a29e:	210f      	movs	r1, #15
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff fde1 	bl	8009e68 <NVIC_EncodePriority>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ae:	f7ff fdb1 	bl	8009e14 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a2b2:	f000 f841 	bl	800a338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a2b6:	f000 fbcd 	bl	800aa54 <MX_GPIO_Init>
  MX_I2C1_Init();
 800a2ba:	f000 f887 	bl	800a3cc <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800a2be:	f000 fb69 	bl	800a994 <MX_USART6_UART_Init>
  MX_UART5_Init();
 800a2c2:	f000 f9cd 	bl	800a660 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800a2c6:	f000 fa43 	bl	800a750 <MX_USART1_UART_Init>
  MX_UART4_Init();
 800a2ca:	f000 f967 	bl	800a59c <MX_UART4_Init>
  MX_USART3_UART_Init();
 800a2ce:	f000 faff 	bl	800a8d0 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 800a2d2:	f000 f8d3 	bl	800a47c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 800a2d6:	f000 fa9b 	bl	800a810 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  command_init();
 800a2da:	f7fc fbb5 	bl	8006a48 <command_init>

  fsp_init(FSP_ADR_CPOC);
 800a2de:	2001      	movs	r0, #1
 800a2e0:	f001 ff22 	bl	800c128 <fsp_init>
  LL_GPIO_ResetOutputPin(GPIOC, ENABLE_MUX_Pin);
 800a2e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a2e8:	4812      	ldr	r0, [pc, #72]	@ (800a334 <main+0xb8>)
 800a2ea:	f7ff ffb7 	bl	800a25c <LL_GPIO_ResetOutputPin>

  status_led_init();
 800a2ee:	f7ff fc61 	bl	8009bb4 <status_led_init>



  WDT_init();
 800a2f2:	f000 fdbf 	bl	800ae74 <WDT_init>

  SCH_Initialize();
 800a2f6:	f001 fd53 	bl	800bda0 <SCH_Initialize>

  status_led_create_task();
 800a2fa:	f7ff fd2f 	bl	8009d5c <status_led_create_task>

  send_packet_init();
 800a2fe:	f7f7 ff9f 	bl	8002240 <send_packet_init>
  send_packet_create_task();
 800a302:	f7f7 fffb 	bl	80022fc <send_packet_create_task>


  command_create_task();
 800a306:	f7fd fb99 	bl	8007a3c <command_create_task>

  COPC_create_task();
 800a30a:	f7ff facf 	bl	80098ac <COPC_create_task>

  WDT_create_task();
 800a30e:	f000 fdbd 	bl	800ae8c <WDT_create_task>

  IOU_create_task();
 800a312:	f7f8 f88b 	bl	800242c <IOU_create_task>
  PMU_create_task();
 800a316:	f7fb f907 	bl	8005528 <PMU_create_task>
  PDU_create_task();
 800a31a:	f7fa fa99 	bl	8004850 <PDU_create_task>
  rs422_create_task();
 800a31e:	f7ff fa09 	bl	8009734 <rs422_create_task>
  GPS_create_task();
 800a322:	f7ff fad1 	bl	80098c8 <GPS_create_task>
  I2C_img_create_task();
 800a326:	f7ff fbe3 	bl	8009af0 <I2C_img_create_task>

  SCH_StartSchedular();
 800a32a:	f001 fe61 	bl	800bff0 <SCH_StartSchedular>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 800a32e:	f001 fe65 	bl	800bffc <SCH_HandleScheduledTask>
 800a332:	e7fc      	b.n	800a32e <main+0xb2>
 800a334:	40020800 	.word	0x40020800

0800a338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 800a33c:	2001      	movs	r0, #1
 800a33e:	f7ff ff1d 	bl	800a17c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800a342:	bf00      	nop
 800a344:	f7ff ff2e 	bl	800a1a4 <LL_FLASH_GetLatency>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d1fa      	bne.n	800a344 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800a34e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a352:	f7ff ff35 	bl	800a1c0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800a356:	f7ff fdfd 	bl	8009f54 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800a35a:	bf00      	nop
 800a35c:	f7ff fe0a 	bl	8009f74 <LL_RCC_HSE_IsReady>
 800a360:	4603      	mov	r3, r0
 800a362:	2b01      	cmp	r3, #1
 800a364:	d1fa      	bne.n	800a35c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 192, LL_RCC_PLLP_DIV_4);
 800a366:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a36a:	22c0      	movs	r2, #192	@ 0xc0
 800a36c:	2104      	movs	r1, #4
 800a36e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800a372:	f7ff fe95 	bl	800a0a0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800a376:	f7ff fe6f 	bl	800a058 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800a37a:	bf00      	nop
 800a37c:	f7ff fe7c 	bl	800a078 <LL_RCC_PLL_IsReady>
 800a380:	4603      	mov	r3, r0
 800a382:	2b01      	cmp	r3, #1
 800a384:	d1fa      	bne.n	800a37c <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800a386:	bf00      	nop
 800a388:	f7ff ff2e 	bl	800a1e8 <LL_PWR_IsActiveFlag_VOS>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0fa      	beq.n	800a388 <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 800a392:	2080      	movs	r0, #128	@ 0x80
 800a394:	f7ff fe24 	bl	8009fe0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800a398:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a39c:	f7ff fe34 	bl	800a008 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	f7ff fe45 	bl	800a030 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800a3a6:	2002      	movs	r0, #2
 800a3a8:	f7ff fdf8 	bl	8009f9c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800a3ac:	bf00      	nop
 800a3ae:	f7ff fe09 	bl	8009fc4 <LL_RCC_GetSysClkSource>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b08      	cmp	r3, #8
 800a3b6:	d1fa      	bne.n	800a3ae <SystemClock_Config+0x76>
  {

  }
  LL_Init1msTick(48000000);
 800a3b8:	4803      	ldr	r0, [pc, #12]	@ (800a3c8 <SystemClock_Config+0x90>)
 800a3ba:	f001 fcd3 	bl	800bd64 <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 800a3be:	4802      	ldr	r0, [pc, #8]	@ (800a3c8 <SystemClock_Config+0x90>)
 800a3c0:	f001 fcde 	bl	800bd80 <LL_SetSystemCoreClock>
}
 800a3c4:	bf00      	nop
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	02dc6c00 	.word	0x02dc6c00

0800a3cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08c      	sub	sp, #48	@ 0x30
 800a3d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800a3d2:	f107 0318 	add.w	r3, r7, #24
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	605a      	str	r2, [r3, #4]
 800a3dc:	609a      	str	r2, [r3, #8]
 800a3de:	60da      	str	r2, [r3, #12]
 800a3e0:	611a      	str	r2, [r3, #16]
 800a3e2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3e4:	463b      	mov	r3, r7
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	605a      	str	r2, [r3, #4]
 800a3ec:	609a      	str	r2, [r3, #8]
 800a3ee:	60da      	str	r2, [r3, #12]
 800a3f0:	611a      	str	r2, [r3, #16]
 800a3f2:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800a3f4:	2002      	movs	r0, #2
 800a3f6:	f7ff fe79 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800a3fa:	23c0      	movs	r3, #192	@ 0xc0
 800a3fc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a3fe:	2302      	movs	r3, #2
 800a400:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a402:	2303      	movs	r3, #3
 800a404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800a406:	2301      	movs	r3, #1
 800a408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a40a:	2300      	movs	r3, #0
 800a40c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800a40e:	2304      	movs	r3, #4
 800a410:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a412:	463b      	mov	r3, r7
 800a414:	4619      	mov	r1, r3
 800a416:	4816      	ldr	r0, [pc, #88]	@ (800a470 <MX_I2C1_Init+0xa4>)
 800a418:	f000 febf 	bl	800b19a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800a41c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a420:	f7ff fe7c 	bl	800a11c <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800a424:	4813      	ldr	r0, [pc, #76]	@ (800a474 <MX_I2C1_Init+0xa8>)
 800a426:	f7ff fd85 	bl	8009f34 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800a42a:	4812      	ldr	r0, [pc, #72]	@ (800a474 <MX_I2C1_Init+0xa8>)
 800a42c:	f7ff fd5f 	bl	8009eee <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800a430:	4810      	ldr	r0, [pc, #64]	@ (800a474 <MX_I2C1_Init+0xa8>)
 800a432:	f7ff fd4c 	bl	8009ece <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800a436:	2300      	movs	r3, #0
 800a438:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 800a43a:	4b0f      	ldr	r3, [pc, #60]	@ (800a478 <MX_I2C1_Init+0xac>)
 800a43c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800a43e:	2300      	movs	r3, #0
 800a440:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800a446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a44a:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800a44c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800a452:	f107 0318 	add.w	r3, r7, #24
 800a456:	4619      	mov	r1, r3
 800a458:	4806      	ldr	r0, [pc, #24]	@ (800a474 <MX_I2C1_Init+0xa8>)
 800a45a:	f001 f815 	bl	800b488 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 800a45e:	2100      	movs	r1, #0
 800a460:	4804      	ldr	r0, [pc, #16]	@ (800a474 <MX_I2C1_Init+0xa8>)
 800a462:	f7ff fd54 	bl	8009f0e <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a466:	bf00      	nop
 800a468:	3730      	adds	r7, #48	@ 0x30
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	40020400 	.word	0x40020400
 800a474:	40005400 	.word	0x40005400
 800a478:	00061a80 	.word	0x00061a80

0800a47c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b08c      	sub	sp, #48	@ 0x30
 800a480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800a482:	f107 0318 	add.w	r3, r7, #24
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	605a      	str	r2, [r3, #4]
 800a48c:	609a      	str	r2, [r3, #8]
 800a48e:	60da      	str	r2, [r3, #12]
 800a490:	611a      	str	r2, [r3, #16]
 800a492:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a494:	463b      	mov	r3, r7
 800a496:	2200      	movs	r2, #0
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	605a      	str	r2, [r3, #4]
 800a49c:	609a      	str	r2, [r3, #8]
 800a49e:	60da      	str	r2, [r3, #12]
 800a4a0:	611a      	str	r2, [r3, #16]
 800a4a2:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a4a4:	2004      	movs	r0, #4
 800a4a6:	f7ff fe21 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a4aa:	2001      	movs	r0, #1
 800a4ac:	f7ff fe1e 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800a4b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800a4c6:	2304      	movs	r3, #4
 800a4c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4ca:	463b      	mov	r3, r7
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	482f      	ldr	r0, [pc, #188]	@ (800a58c <MX_I2C3_Init+0x110>)
 800a4d0:	f000 fe63 	bl	800b19a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800a4d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a4da:	2302      	movs	r3, #2
 800a4dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800a4ea:	2304      	movs	r3, #4
 800a4ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4ee:	463b      	mov	r3, r7
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4827      	ldr	r0, [pc, #156]	@ (800a590 <MX_I2C3_Init+0x114>)
 800a4f4:	f000 fe51 	bl	800b19a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800a4f8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a4fc:	f7ff fe0e 	bl	800a11c <LL_APB1_GRP1_EnableClock>

  /* I2C3 interrupt Init */
  NVIC_SetPriority(I2C3_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a500:	f7ff fc5c 	bl	8009dbc <__NVIC_GetPriorityGrouping>
 800a504:	4603      	mov	r3, r0
 800a506:	2200      	movs	r2, #0
 800a508:	2100      	movs	r1, #0
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff fcac 	bl	8009e68 <NVIC_EncodePriority>
 800a510:	4603      	mov	r3, r0
 800a512:	4619      	mov	r1, r3
 800a514:	2048      	movs	r0, #72	@ 0x48
 800a516:	f7ff fc7d 	bl	8009e14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_EV_IRQn);
 800a51a:	2048      	movs	r0, #72	@ 0x48
 800a51c:	f7ff fc5c 	bl	8009dd8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C3_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a520:	f7ff fc4c 	bl	8009dbc <__NVIC_GetPriorityGrouping>
 800a524:	4603      	mov	r3, r0
 800a526:	2200      	movs	r2, #0
 800a528:	2100      	movs	r1, #0
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff fc9c 	bl	8009e68 <NVIC_EncodePriority>
 800a530:	4603      	mov	r3, r0
 800a532:	4619      	mov	r1, r3
 800a534:	2049      	movs	r0, #73	@ 0x49
 800a536:	f7ff fc6d 	bl	8009e14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C3_ER_IRQn);
 800a53a:	2049      	movs	r0, #73	@ 0x49
 800a53c:	f7ff fc4c 	bl	8009dd8 <__NVIC_EnableIRQ>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 800a540:	4814      	ldr	r0, [pc, #80]	@ (800a594 <MX_I2C3_Init+0x118>)
 800a542:	f7ff fcf7 	bl	8009f34 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 800a546:	4813      	ldr	r0, [pc, #76]	@ (800a594 <MX_I2C3_Init+0x118>)
 800a548:	f7ff fcd1 	bl	8009eee <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 800a54c:	4811      	ldr	r0, [pc, #68]	@ (800a594 <MX_I2C3_Init+0x118>)
 800a54e:	f7ff fcbe 	bl	8009ece <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800a552:	2300      	movs	r3, #0
 800a554:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 800a556:	4b10      	ldr	r3, [pc, #64]	@ (800a598 <MX_I2C3_Init+0x11c>)
 800a558:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800a55a:	2300      	movs	r3, #0
 800a55c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800a562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a566:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800a568:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a56c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 800a56e:	f107 0318 	add.w	r3, r7, #24
 800a572:	4619      	mov	r1, r3
 800a574:	4807      	ldr	r0, [pc, #28]	@ (800a594 <MX_I2C3_Init+0x118>)
 800a576:	f000 ff87 	bl	800b488 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 800a57a:	2100      	movs	r1, #0
 800a57c:	4805      	ldr	r0, [pc, #20]	@ (800a594 <MX_I2C3_Init+0x118>)
 800a57e:	f7ff fcc6 	bl	8009f0e <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800a582:	bf00      	nop
 800a584:	3730      	adds	r7, #48	@ 0x30
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	40020800 	.word	0x40020800
 800a590:	40020000 	.word	0x40020000
 800a594:	40005c00 	.word	0x40005c00
 800a598:	00061a80 	.word	0x00061a80

0800a59c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08e      	sub	sp, #56	@ 0x38
 800a5a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a5a2:	f107 031c 	add.w	r3, r7, #28
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	605a      	str	r2, [r3, #4]
 800a5ac:	609a      	str	r2, [r3, #8]
 800a5ae:	60da      	str	r2, [r3, #12]
 800a5b0:	611a      	str	r2, [r3, #16]
 800a5b2:	615a      	str	r2, [r3, #20]
 800a5b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5b6:	1d3b      	adds	r3, r7, #4
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	605a      	str	r2, [r3, #4]
 800a5be:	609a      	str	r2, [r3, #8]
 800a5c0:	60da      	str	r2, [r3, #12]
 800a5c2:	611a      	str	r2, [r3, #16]
 800a5c4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800a5c6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a5ca:	f7ff fda7 	bl	800a11c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a5ce:	2004      	movs	r0, #4
 800a5d0:	f7ff fd8c 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800a5d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a5d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a5da:	2302      	movs	r3, #2
 800a5dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a5ea:	2308      	movs	r3, #8
 800a5ec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5ee:	1d3b      	adds	r3, r7, #4
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4819      	ldr	r0, [pc, #100]	@ (800a658 <MX_UART4_Init+0xbc>)
 800a5f4:	f000 fdd1 	bl	800b19a <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a5f8:	f7ff fbe0 	bl	8009dbc <__NVIC_GetPriorityGrouping>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2200      	movs	r2, #0
 800a600:	2100      	movs	r1, #0
 800a602:	4618      	mov	r0, r3
 800a604:	f7ff fc30 	bl	8009e68 <NVIC_EncodePriority>
 800a608:	4603      	mov	r3, r0
 800a60a:	4619      	mov	r1, r3
 800a60c:	2034      	movs	r0, #52	@ 0x34
 800a60e:	f7ff fc01 	bl	8009e14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800a612:	2034      	movs	r0, #52	@ 0x34
 800a614:	f7ff fbe0 	bl	8009dd8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a618:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a61c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a61e:	2300      	movs	r3, #0
 800a620:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a622:	2300      	movs	r3, #0
 800a624:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a626:	2300      	movs	r3, #0
 800a628:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a62a:	230c      	movs	r3, #12
 800a62c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a62e:	2300      	movs	r3, #0
 800a630:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a632:	2300      	movs	r3, #0
 800a634:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800a636:	f107 031c 	add.w	r3, r7, #28
 800a63a:	4619      	mov	r1, r3
 800a63c:	4807      	ldr	r0, [pc, #28]	@ (800a65c <MX_UART4_Init+0xc0>)
 800a63e:	f001 faf7 	bl	800bc30 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800a642:	4806      	ldr	r0, [pc, #24]	@ (800a65c <MX_UART4_Init+0xc0>)
 800a644:	f7ff fdf4 	bl	800a230 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800a648:	4804      	ldr	r0, [pc, #16]	@ (800a65c <MX_UART4_Init+0xc0>)
 800a64a:	f7ff fde1 	bl	800a210 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a64e:	bf00      	nop
 800a650:	3738      	adds	r7, #56	@ 0x38
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	40020800 	.word	0x40020800
 800a65c:	40004c00 	.word	0x40004c00

0800a660 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08e      	sub	sp, #56	@ 0x38
 800a664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a666:	f107 031c 	add.w	r3, r7, #28
 800a66a:	2200      	movs	r2, #0
 800a66c:	601a      	str	r2, [r3, #0]
 800a66e:	605a      	str	r2, [r3, #4]
 800a670:	609a      	str	r2, [r3, #8]
 800a672:	60da      	str	r2, [r3, #12]
 800a674:	611a      	str	r2, [r3, #16]
 800a676:	615a      	str	r2, [r3, #20]
 800a678:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a67a:	1d3b      	adds	r3, r7, #4
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	605a      	str	r2, [r3, #4]
 800a682:	609a      	str	r2, [r3, #8]
 800a684:	60da      	str	r2, [r3, #12]
 800a686:	611a      	str	r2, [r3, #16]
 800a688:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800a68a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a68e:	f7ff fd45 	bl	800a11c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a692:	2004      	movs	r0, #4
 800a694:	f7ff fd2a 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800a698:	2008      	movs	r0, #8
 800a69a:	f7ff fd27 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800a69e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a6a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a6b4:	2308      	movs	r3, #8
 800a6b6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6b8:	1d3b      	adds	r3, r7, #4
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4821      	ldr	r0, [pc, #132]	@ (800a744 <MX_UART5_Init+0xe4>)
 800a6be:	f000 fd6c 	bl	800b19a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800a6c2:	2304      	movs	r3, #4
 800a6c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a6d6:	2308      	movs	r3, #8
 800a6d8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a6da:	1d3b      	adds	r3, r7, #4
 800a6dc:	4619      	mov	r1, r3
 800a6de:	481a      	ldr	r0, [pc, #104]	@ (800a748 <MX_UART5_Init+0xe8>)
 800a6e0:	f000 fd5b 	bl	800b19a <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a6e4:	f7ff fb6a 	bl	8009dbc <__NVIC_GetPriorityGrouping>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff fbba 	bl	8009e68 <NVIC_EncodePriority>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	2035      	movs	r0, #53	@ 0x35
 800a6fa:	f7ff fb8b 	bl	8009e14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800a6fe:	2035      	movs	r0, #53	@ 0x35
 800a700:	f7ff fb6a 	bl	8009dd8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a704:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a708:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a70a:	2300      	movs	r3, #0
 800a70c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a70e:	2300      	movs	r3, #0
 800a710:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a712:	2300      	movs	r3, #0
 800a714:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a716:	230c      	movs	r3, #12
 800a718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a71a:	2300      	movs	r3, #0
 800a71c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a71e:	2300      	movs	r3, #0
 800a720:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800a722:	f107 031c 	add.w	r3, r7, #28
 800a726:	4619      	mov	r1, r3
 800a728:	4808      	ldr	r0, [pc, #32]	@ (800a74c <MX_UART5_Init+0xec>)
 800a72a:	f001 fa81 	bl	800bc30 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800a72e:	4807      	ldr	r0, [pc, #28]	@ (800a74c <MX_UART5_Init+0xec>)
 800a730:	f7ff fd7e 	bl	800a230 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800a734:	4805      	ldr	r0, [pc, #20]	@ (800a74c <MX_UART5_Init+0xec>)
 800a736:	f7ff fd6b 	bl	800a210 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800a73a:	bf00      	nop
 800a73c:	3738      	adds	r7, #56	@ 0x38
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	40020800 	.word	0x40020800
 800a748:	40020c00 	.word	0x40020c00
 800a74c:	40005000 	.word	0x40005000

0800a750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b08e      	sub	sp, #56	@ 0x38
 800a754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a756:	f107 031c 	add.w	r3, r7, #28
 800a75a:	2200      	movs	r2, #0
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	605a      	str	r2, [r3, #4]
 800a760:	609a      	str	r2, [r3, #8]
 800a762:	60da      	str	r2, [r3, #12]
 800a764:	611a      	str	r2, [r3, #16]
 800a766:	615a      	str	r2, [r3, #20]
 800a768:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a76a:	1d3b      	adds	r3, r7, #4
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	605a      	str	r2, [r3, #4]
 800a772:	609a      	str	r2, [r3, #8]
 800a774:	60da      	str	r2, [r3, #12]
 800a776:	611a      	str	r2, [r3, #16]
 800a778:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800a77a:	2010      	movs	r0, #16
 800a77c:	f7ff fce6 	bl	800a14c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a780:	2001      	movs	r0, #1
 800a782:	f7ff fcb3 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800a786:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a78a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a78c:	2302      	movs	r3, #2
 800a78e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a790:	2303      	movs	r3, #3
 800a792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a794:	2300      	movs	r3, #0
 800a796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a798:	2300      	movs	r3, #0
 800a79a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a79c:	2307      	movs	r3, #7
 800a79e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7a0:	1d3b      	adds	r3, r7, #4
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4818      	ldr	r0, [pc, #96]	@ (800a808 <MX_USART1_UART_Init+0xb8>)
 800a7a6:	f000 fcf8 	bl	800b19a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a7aa:	f7ff fb07 	bl	8009dbc <__NVIC_GetPriorityGrouping>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fb57 	bl	8009e68 <NVIC_EncodePriority>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	4619      	mov	r1, r3
 800a7be:	2025      	movs	r0, #37	@ 0x25
 800a7c0:	f7ff fb28 	bl	8009e14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800a7c4:	2025      	movs	r0, #37	@ 0x25
 800a7c6:	f7ff fb07 	bl	8009dd8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 800a7ca:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 800a7ce:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a7dc:	230c      	movs	r3, #12
 800a7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800a7e8:	f107 031c 	add.w	r3, r7, #28
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	4807      	ldr	r0, [pc, #28]	@ (800a80c <MX_USART1_UART_Init+0xbc>)
 800a7f0:	f001 fa1e 	bl	800bc30 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800a7f4:	4805      	ldr	r0, [pc, #20]	@ (800a80c <MX_USART1_UART_Init+0xbc>)
 800a7f6:	f7ff fd1b 	bl	800a230 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800a7fa:	4804      	ldr	r0, [pc, #16]	@ (800a80c <MX_USART1_UART_Init+0xbc>)
 800a7fc:	f7ff fd08 	bl	800a210 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a800:	bf00      	nop
 800a802:	3738      	adds	r7, #56	@ 0x38
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	40020000 	.word	0x40020000
 800a80c:	40011000 	.word	0x40011000

0800a810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08e      	sub	sp, #56	@ 0x38
 800a814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a816:	f107 031c 	add.w	r3, r7, #28
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	605a      	str	r2, [r3, #4]
 800a820:	609a      	str	r2, [r3, #8]
 800a822:	60da      	str	r2, [r3, #12]
 800a824:	611a      	str	r2, [r3, #16]
 800a826:	615a      	str	r2, [r3, #20]
 800a828:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a82a:	1d3b      	adds	r3, r7, #4
 800a82c:	2200      	movs	r2, #0
 800a82e:	601a      	str	r2, [r3, #0]
 800a830:	605a      	str	r2, [r3, #4]
 800a832:	609a      	str	r2, [r3, #8]
 800a834:	60da      	str	r2, [r3, #12]
 800a836:	611a      	str	r2, [r3, #16]
 800a838:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800a83a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a83e:	f7ff fc6d 	bl	800a11c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a842:	2001      	movs	r0, #1
 800a844:	f7ff fc52 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800a848:	230c      	movs	r3, #12
 800a84a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a84c:	2302      	movs	r3, #2
 800a84e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a850:	2303      	movs	r3, #3
 800a852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a854:	2300      	movs	r3, #0
 800a856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a858:	2300      	movs	r3, #0
 800a85a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a85c:	2307      	movs	r3, #7
 800a85e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a860:	1d3b      	adds	r3, r7, #4
 800a862:	4619      	mov	r1, r3
 800a864:	4818      	ldr	r0, [pc, #96]	@ (800a8c8 <MX_USART2_UART_Init+0xb8>)
 800a866:	f000 fc98 	bl	800b19a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a86a:	f7ff faa7 	bl	8009dbc <__NVIC_GetPriorityGrouping>
 800a86e:	4603      	mov	r3, r0
 800a870:	2200      	movs	r2, #0
 800a872:	2100      	movs	r1, #0
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff faf7 	bl	8009e68 <NVIC_EncodePriority>
 800a87a:	4603      	mov	r3, r0
 800a87c:	4619      	mov	r1, r3
 800a87e:	2026      	movs	r0, #38	@ 0x26
 800a880:	f7ff fac8 	bl	8009e14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800a884:	2026      	movs	r0, #38	@ 0x26
 800a886:	f7ff faa7 	bl	8009dd8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a88a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a88e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a890:	2300      	movs	r3, #0
 800a892:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a894:	2300      	movs	r3, #0
 800a896:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a898:	2300      	movs	r3, #0
 800a89a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a89c:	230c      	movs	r3, #12
 800a89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800a8a8:	f107 031c 	add.w	r3, r7, #28
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4807      	ldr	r0, [pc, #28]	@ (800a8cc <MX_USART2_UART_Init+0xbc>)
 800a8b0:	f001 f9be 	bl	800bc30 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800a8b4:	4805      	ldr	r0, [pc, #20]	@ (800a8cc <MX_USART2_UART_Init+0xbc>)
 800a8b6:	f7ff fcbb 	bl	800a230 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800a8ba:	4804      	ldr	r0, [pc, #16]	@ (800a8cc <MX_USART2_UART_Init+0xbc>)
 800a8bc:	f7ff fca8 	bl	800a210 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a8c0:	bf00      	nop
 800a8c2:	3738      	adds	r7, #56	@ 0x38
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	40020000 	.word	0x40020000
 800a8cc:	40004400 	.word	0x40004400

0800a8d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08e      	sub	sp, #56	@ 0x38
 800a8d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a8d6:	f107 031c 	add.w	r3, r7, #28
 800a8da:	2200      	movs	r2, #0
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	605a      	str	r2, [r3, #4]
 800a8e0:	609a      	str	r2, [r3, #8]
 800a8e2:	60da      	str	r2, [r3, #12]
 800a8e4:	611a      	str	r2, [r3, #16]
 800a8e6:	615a      	str	r2, [r3, #20]
 800a8e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8ea:	1d3b      	adds	r3, r7, #4
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	605a      	str	r2, [r3, #4]
 800a8f2:	609a      	str	r2, [r3, #8]
 800a8f4:	60da      	str	r2, [r3, #12]
 800a8f6:	611a      	str	r2, [r3, #16]
 800a8f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800a8fa:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a8fe:	f7ff fc0d 	bl	800a11c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800a902:	2002      	movs	r0, #2
 800a904:	f7ff fbf2 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800a908:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a90c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a90e:	2302      	movs	r3, #2
 800a910:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a912:	2303      	movs	r3, #3
 800a914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a916:	2300      	movs	r3, #0
 800a918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a91a:	2300      	movs	r3, #0
 800a91c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a91e:	2307      	movs	r3, #7
 800a920:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a922:	1d3b      	adds	r3, r7, #4
 800a924:	4619      	mov	r1, r3
 800a926:	4819      	ldr	r0, [pc, #100]	@ (800a98c <MX_USART3_UART_Init+0xbc>)
 800a928:	f000 fc37 	bl	800b19a <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a92c:	f7ff fa46 	bl	8009dbc <__NVIC_GetPriorityGrouping>
 800a930:	4603      	mov	r3, r0
 800a932:	2200      	movs	r2, #0
 800a934:	2100      	movs	r1, #0
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff fa96 	bl	8009e68 <NVIC_EncodePriority>
 800a93c:	4603      	mov	r3, r0
 800a93e:	4619      	mov	r1, r3
 800a940:	2027      	movs	r0, #39	@ 0x27
 800a942:	f7ff fa67 	bl	8009e14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800a946:	2027      	movs	r0, #39	@ 0x27
 800a948:	f7ff fa46 	bl	8009dd8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a94c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a950:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a952:	2300      	movs	r3, #0
 800a954:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a956:	2300      	movs	r3, #0
 800a958:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a95a:	2300      	movs	r3, #0
 800a95c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a95e:	230c      	movs	r3, #12
 800a960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a962:	2300      	movs	r3, #0
 800a964:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a966:	2300      	movs	r3, #0
 800a968:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800a96a:	f107 031c 	add.w	r3, r7, #28
 800a96e:	4619      	mov	r1, r3
 800a970:	4807      	ldr	r0, [pc, #28]	@ (800a990 <MX_USART3_UART_Init+0xc0>)
 800a972:	f001 f95d 	bl	800bc30 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800a976:	4806      	ldr	r0, [pc, #24]	@ (800a990 <MX_USART3_UART_Init+0xc0>)
 800a978:	f7ff fc5a 	bl	800a230 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800a97c:	4804      	ldr	r0, [pc, #16]	@ (800a990 <MX_USART3_UART_Init+0xc0>)
 800a97e:	f7ff fc47 	bl	800a210 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a982:	bf00      	nop
 800a984:	3738      	adds	r7, #56	@ 0x38
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	40020400 	.word	0x40020400
 800a990:	40004800 	.word	0x40004800

0800a994 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b08e      	sub	sp, #56	@ 0x38
 800a998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a99a:	f107 031c 	add.w	r3, r7, #28
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	605a      	str	r2, [r3, #4]
 800a9a4:	609a      	str	r2, [r3, #8]
 800a9a6:	60da      	str	r2, [r3, #12]
 800a9a8:	611a      	str	r2, [r3, #16]
 800a9aa:	615a      	str	r2, [r3, #20]
 800a9ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9ae:	1d3b      	adds	r3, r7, #4
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	605a      	str	r2, [r3, #4]
 800a9b6:	609a      	str	r2, [r3, #8]
 800a9b8:	60da      	str	r2, [r3, #12]
 800a9ba:	611a      	str	r2, [r3, #16]
 800a9bc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800a9be:	2020      	movs	r0, #32
 800a9c0:	f7ff fbc4 	bl	800a14c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a9c4:	2004      	movs	r0, #4
 800a9c6:	f7ff fb91 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800a9ca:	23c0      	movs	r3, #192	@ 0xc0
 800a9cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a9de:	2308      	movs	r3, #8
 800a9e0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a9e2:	1d3b      	adds	r3, r7, #4
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4819      	ldr	r0, [pc, #100]	@ (800aa4c <MX_USART6_UART_Init+0xb8>)
 800a9e8:	f000 fbd7 	bl	800b19a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a9ec:	f7ff f9e6 	bl	8009dbc <__NVIC_GetPriorityGrouping>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff fa36 	bl	8009e68 <NVIC_EncodePriority>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	4619      	mov	r1, r3
 800aa00:	2047      	movs	r0, #71	@ 0x47
 800aa02:	f7ff fa07 	bl	8009e14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800aa06:	2047      	movs	r0, #71	@ 0x47
 800aa08:	f7ff f9e6 	bl	8009dd8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800aa0c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800aa10:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800aa12:	2300      	movs	r3, #0
 800aa14:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800aa16:	2300      	movs	r3, #0
 800aa18:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800aa1e:	230c      	movs	r3, #12
 800aa20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800aa26:	2300      	movs	r3, #0
 800aa28:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800aa2a:	f107 031c 	add.w	r3, r7, #28
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4807      	ldr	r0, [pc, #28]	@ (800aa50 <MX_USART6_UART_Init+0xbc>)
 800aa32:	f001 f8fd 	bl	800bc30 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800aa36:	4806      	ldr	r0, [pc, #24]	@ (800aa50 <MX_USART6_UART_Init+0xbc>)
 800aa38:	f7ff fbfa 	bl	800a230 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800aa3c:	4804      	ldr	r0, [pc, #16]	@ (800aa50 <MX_USART6_UART_Init+0xbc>)
 800aa3e:	f7ff fbe7 	bl	800a210 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800aa42:	bf00      	nop
 800aa44:	3738      	adds	r7, #56	@ 0x38
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	40020800 	.word	0x40020800
 800aa50:	40011400 	.word	0x40011400

0800aa54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa5a:	463b      	mov	r3, r7
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	605a      	str	r2, [r3, #4]
 800aa62:	609a      	str	r2, [r3, #8]
 800aa64:	60da      	str	r2, [r3, #12]
 800aa66:	611a      	str	r2, [r3, #16]
 800aa68:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800aa6a:	2004      	movs	r0, #4
 800aa6c:	f7ff fb3e 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800aa70:	2080      	movs	r0, #128	@ 0x80
 800aa72:	f7ff fb3b 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800aa76:	2001      	movs	r0, #1
 800aa78:	f7ff fb38 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800aa7c:	2002      	movs	r0, #2
 800aa7e:	f7ff fb35 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800aa82:	2008      	movs	r0, #8
 800aa84:	f7ff fb32 	bl	800a0ec <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, WD_DONE_Pin|LORA_IO0_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin);
 800aa88:	f641 0112 	movw	r1, #6162	@ 0x1812
 800aa8c:	4826      	ldr	r0, [pc, #152]	@ (800ab28 <MX_GPIO_Init+0xd4>)
 800aa8e:	f7ff fbe5 	bl	800a25c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_busy_Pin|ENABLE_MUX_Pin);
 800aa92:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800aa96:	4825      	ldr	r0, [pc, #148]	@ (800ab2c <MX_GPIO_Init+0xd8>)
 800aa98:	f7ff fbe0 	bl	800a25c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 800aa9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aaa0:	4823      	ldr	r0, [pc, #140]	@ (800ab30 <MX_GPIO_Init+0xdc>)
 800aaa2:	f7ff fbdb 	bl	800a25c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = PMU_INT_MCU_Pin|PDU_INT_MCU_Pin|IOU_INT_MCU_Pin|EJECT_Pin
 800aaa6:	f24e 030c 	movw	r3, #57356	@ 0xe00c
 800aaaa:	603b      	str	r3, [r7, #0]
                          |CAM_INT_MCU_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800aaac:	2300      	movs	r3, #0
 800aaae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aab0:	2300      	movs	r3, #0
 800aab2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aab4:	463b      	mov	r3, r7
 800aab6:	4619      	mov	r1, r3
 800aab8:	481c      	ldr	r0, [pc, #112]	@ (800ab2c <MX_GPIO_Init+0xd8>)
 800aaba:	f000 fb6e 	bl	800b19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin|LORA_IO0_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin;
 800aabe:	f641 0312 	movw	r3, #6162	@ 0x1812
 800aac2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800aac4:	2301      	movs	r3, #1
 800aac6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800aac8:	2300      	movs	r3, #0
 800aaca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800aacc:	2300      	movs	r3, #0
 800aace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aad0:	2300      	movs	r3, #0
 800aad2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aad4:	463b      	mov	r3, r7
 800aad6:	4619      	mov	r1, r3
 800aad8:	4813      	ldr	r0, [pc, #76]	@ (800ab28 <MX_GPIO_Init+0xd4>)
 800aada:	f000 fb5e 	bl	800b19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_busy_Pin|ENABLE_MUX_Pin;
 800aade:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800aae2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800aae4:	2301      	movs	r3, #1
 800aae6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800aae8:	2300      	movs	r3, #0
 800aaea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aaf4:	463b      	mov	r3, r7
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	480c      	ldr	r0, [pc, #48]	@ (800ab2c <MX_GPIO_Init+0xd8>)
 800aafa:	f000 fb4e 	bl	800b19a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_RF_Pin;
 800aafe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab02:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800ab04:	2301      	movs	r3, #1
 800ab06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800ab10:	2300      	movs	r3, #0
 800ab12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENABLE_RF_GPIO_Port, &GPIO_InitStruct);
 800ab14:	463b      	mov	r3, r7
 800ab16:	4619      	mov	r1, r3
 800ab18:	4805      	ldr	r0, [pc, #20]	@ (800ab30 <MX_GPIO_Init+0xdc>)
 800ab1a:	f000 fb3e 	bl	800b19a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800ab1e:	bf00      	nop
 800ab20:	3718      	adds	r7, #24
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	40020000 	.word	0x40020000
 800ab2c:	40020800 	.word	0x40020800
 800ab30:	40020400 	.word	0x40020400

0800ab34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ab34:	b480      	push	{r7}
 800ab36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800ab38:	bf00      	nop
 800ab3a:	e7fd      	b.n	800ab38 <NMI_Handler+0x4>

0800ab3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ab40:	bf00      	nop
 800ab42:	e7fd      	b.n	800ab40 <HardFault_Handler+0x4>

0800ab44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ab44:	b480      	push	{r7}
 800ab46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ab48:	bf00      	nop
 800ab4a:	e7fd      	b.n	800ab48 <MemManage_Handler+0x4>

0800ab4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ab50:	bf00      	nop
 800ab52:	e7fd      	b.n	800ab50 <BusFault_Handler+0x4>

0800ab54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ab54:	b480      	push	{r7}
 800ab56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ab58:	bf00      	nop
 800ab5a:	e7fd      	b.n	800ab58 <UsageFault_Handler+0x4>

0800ab5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ab60:	bf00      	nop
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ab6e:	bf00      	nop
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ab7c:	bf00      	nop
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
	...

0800ab88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    g_systick_count++;
 800ab8c:	4b04      	ldr	r3, [pc, #16]	@ (800aba0 <SysTick_Handler+0x18>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3301      	adds	r3, #1
 800ab92:	4a03      	ldr	r2, [pc, #12]	@ (800aba0 <SysTick_Handler+0x18>)
 800ab94:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 800ab96:	f001 f997 	bl	800bec8 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ab9a:	bf00      	nop
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	2000845c 	.word	0x2000845c

0800aba4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (USART1);
 800aba8:	4802      	ldr	r0, [pc, #8]	@ (800abb4 <USART1_IRQHandler+0x10>)
 800abaa:	f7f7 fa8d 	bl	80020c8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800abae:	bf00      	nop
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	40011000 	.word	0x40011000

0800abb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (USART2);
 800abbc:	4802      	ldr	r0, [pc, #8]	@ (800abc8 <USART2_IRQHandler+0x10>)
 800abbe:	f7f7 fa83 	bl	80020c8 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800abc2:	bf00      	nop
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	40004400 	.word	0x40004400

0800abcc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (USART3);
 800abd0:	4802      	ldr	r0, [pc, #8]	@ (800abdc <USART3_IRQHandler+0x10>)
 800abd2:	f7f7 fa79 	bl	80020c8 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800abd6:	bf00      	nop
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	40004800 	.word	0x40004800

0800abe0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Uart_isr (UART4);
 800abe4:	4802      	ldr	r0, [pc, #8]	@ (800abf0 <UART4_IRQHandler+0x10>)
 800abe6:	f7f7 fa6f 	bl	80020c8 <Uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800abea:	bf00      	nop
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	40004c00 	.word	0x40004c00

0800abf4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr (UART5);
 800abf8:	4802      	ldr	r0, [pc, #8]	@ (800ac04 <UART5_IRQHandler+0x10>)
 800abfa:	f7f7 fa65 	bl	80020c8 <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800abfe:	bf00      	nop
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	40005000 	.word	0x40005000

0800ac08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr (USART6);
 800ac0c:	4802      	ldr	r0, [pc, #8]	@ (800ac18 <USART6_IRQHandler+0x10>)
 800ac0e:	f7f7 fa5b 	bl	80020c8 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800ac12:	bf00      	nop
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	40011400 	.word	0x40011400

0800ac1c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */
	I2C3_IRQHandler();
 800ac20:	f7fe ff72 	bl	8009b08 <I2C3_IRQHandler>
  /* USER CODE END I2C3_EV_IRQn 0 */

  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800ac24:	bf00      	nop
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_ER_IRQn 0 */

  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800ac2c:	bf00      	nop
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ac36:	b480      	push	{r7}
 800ac38:	af00      	add	r7, sp, #0
  return 1;
 800ac3a:	2301      	movs	r3, #1
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <_kill>:

int _kill(int pid, int sig)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800ac50:	f005 f9d2 	bl	800fff8 <__errno>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2216      	movs	r2, #22
 800ac58:	601a      	str	r2, [r3, #0]
  return -1;
 800ac5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <_exit>:

void _exit (int status)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b082      	sub	sp, #8
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ac6e:	f04f 31ff 	mov.w	r1, #4294967295
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff ffe7 	bl	800ac46 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ac78:	bf00      	nop
 800ac7a:	e7fd      	b.n	800ac78 <_exit+0x12>

0800ac7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	617b      	str	r3, [r7, #20]
 800ac8c:	e00a      	b.n	800aca4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ac8e:	f3af 8000 	nop.w
 800ac92:	4601      	mov	r1, r0
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	1c5a      	adds	r2, r3, #1
 800ac98:	60ba      	str	r2, [r7, #8]
 800ac9a:	b2ca      	uxtb	r2, r1
 800ac9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	3301      	adds	r3, #1
 800aca2:	617b      	str	r3, [r7, #20]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	dbf0      	blt.n	800ac8e <_read+0x12>
  }

  return len;
 800acac:	687b      	ldr	r3, [r7, #4]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b086      	sub	sp, #24
 800acba:	af00      	add	r7, sp, #0
 800acbc:	60f8      	str	r0, [r7, #12]
 800acbe:	60b9      	str	r1, [r7, #8]
 800acc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800acc2:	2300      	movs	r3, #0
 800acc4:	617b      	str	r3, [r7, #20]
 800acc6:	e009      	b.n	800acdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	1c5a      	adds	r2, r3, #1
 800accc:	60ba      	str	r2, [r7, #8]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	3301      	adds	r3, #1
 800acda:	617b      	str	r3, [r7, #20]
 800acdc:	697a      	ldr	r2, [r7, #20]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	dbf1      	blt.n	800acc8 <_write+0x12>
  }
  return len;
 800ace4:	687b      	ldr	r3, [r7, #4]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <_close>:

int _close(int file)
{
 800acee:	b480      	push	{r7}
 800acf0:	b083      	sub	sp, #12
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800acf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b083      	sub	sp, #12
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ad16:	605a      	str	r2, [r3, #4]
  return 0;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <_isatty>:

int _isatty(int file)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b083      	sub	sp, #12
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ad2e:	2301      	movs	r3, #1
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
	...

0800ad58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ad60:	4a14      	ldr	r2, [pc, #80]	@ (800adb4 <_sbrk+0x5c>)
 800ad62:	4b15      	ldr	r3, [pc, #84]	@ (800adb8 <_sbrk+0x60>)
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ad6c:	4b13      	ldr	r3, [pc, #76]	@ (800adbc <_sbrk+0x64>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ad74:	4b11      	ldr	r3, [pc, #68]	@ (800adbc <_sbrk+0x64>)
 800ad76:	4a12      	ldr	r2, [pc, #72]	@ (800adc0 <_sbrk+0x68>)
 800ad78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ad7a:	4b10      	ldr	r3, [pc, #64]	@ (800adbc <_sbrk+0x64>)
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4413      	add	r3, r2
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d207      	bcs.n	800ad98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ad88:	f005 f936 	bl	800fff8 <__errno>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	220c      	movs	r2, #12
 800ad90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ad92:	f04f 33ff 	mov.w	r3, #4294967295
 800ad96:	e009      	b.n	800adac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ad98:	4b08      	ldr	r3, [pc, #32]	@ (800adbc <_sbrk+0x64>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ad9e:	4b07      	ldr	r3, [pc, #28]	@ (800adbc <_sbrk+0x64>)
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4413      	add	r3, r2
 800ada6:	4a05      	ldr	r2, [pc, #20]	@ (800adbc <_sbrk+0x64>)
 800ada8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800adaa:	68fb      	ldr	r3, [r7, #12]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	20020000 	.word	0x20020000
 800adb8:	00000400 	.word	0x00000400
 800adbc:	20008460 	.word	0x20008460
 800adc0:	200087c8 	.word	0x200087c8

0800adc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800adc4:	b480      	push	{r7}
 800adc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800adc8:	4b06      	ldr	r3, [pc, #24]	@ (800ade4 <SystemInit+0x20>)
 800adca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adce:	4a05      	ldr	r2, [pc, #20]	@ (800ade4 <SystemInit+0x20>)
 800add0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800add4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800add8:	bf00      	nop
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	e000ed00 	.word	0xe000ed00

0800ade8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ade8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ae20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800adec:	f7ff ffea 	bl	800adc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800adf0:	480c      	ldr	r0, [pc, #48]	@ (800ae24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800adf2:	490d      	ldr	r1, [pc, #52]	@ (800ae28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800adf4:	4a0d      	ldr	r2, [pc, #52]	@ (800ae2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800adf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800adf8:	e002      	b.n	800ae00 <LoopCopyDataInit>

0800adfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800adfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800adfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800adfe:	3304      	adds	r3, #4

0800ae00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ae00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ae02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ae04:	d3f9      	bcc.n	800adfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ae06:	4a0a      	ldr	r2, [pc, #40]	@ (800ae30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ae08:	4c0a      	ldr	r4, [pc, #40]	@ (800ae34 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ae0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ae0c:	e001      	b.n	800ae12 <LoopFillZerobss>

0800ae0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ae0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ae10:	3204      	adds	r2, #4

0800ae12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ae12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ae14:	d3fb      	bcc.n	800ae0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800ae16:	f005 f8f5 	bl	8010004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ae1a:	f7ff fa2f 	bl	800a27c <main>
  bx  lr    
 800ae1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ae20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ae24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ae28:	200006dc 	.word	0x200006dc
  ldr r2, =_sidata
 800ae2c:	08016878 	.word	0x08016878
  ldr r2, =_sbss
 800ae30:	200006dc 	.word	0x200006dc
  ldr r4, =_ebss
 800ae34:	200087c8 	.word	0x200087c8

0800ae38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ae38:	e7fe      	b.n	800ae38 <ADC_IRQHandler>

0800ae3a <LL_GPIO_SetOutputPin>:
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b083      	sub	sp, #12
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	619a      	str	r2, [r3, #24]
}
 800ae4a:	bf00      	nop
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <LL_GPIO_ResetOutputPin>:
{
 800ae56:	b480      	push	{r7}
 800ae58:	b083      	sub	sp, #12
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	041a      	lsls	r2, r3, #16
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	619a      	str	r2, [r3, #24]
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <WDT_init>:




void WDT_init(void)
{
 800ae74:	b480      	push	{r7}
 800ae76:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 800ae78:	4b03      	ldr	r3, [pc, #12]	@ (800ae88 <WDT_init+0x14>)
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]

}
 800ae7e:	bf00      	nop
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	20008464 	.word	0x20008464

0800ae8c <WDT_create_task>:

void WDT_create_task(void)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800ae90:	4902      	ldr	r1, [pc, #8]	@ (800ae9c <WDT_create_task+0x10>)
 800ae92:	4803      	ldr	r0, [pc, #12]	@ (800aea0 <WDT_create_task+0x14>)
 800ae94:	f000 ffda 	bl	800be4c <SCH_TASK_CreateTask>

}
 800ae98:	bf00      	nop
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	20000508 	.word	0x20000508
 800aea0:	20000504 	.word	0x20000504

0800aea4 <status_wdt_update>:

void	status_wdt_update(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0

		if (WDT_Current){
 800aea8:	4b14      	ldr	r3, [pc, #80]	@ (800aefc <status_wdt_update+0x58>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d012      	beq.n	800aed6 <status_wdt_update+0x32>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800aeb0:	2001      	movs	r0, #1
 800aeb2:	f000 ffb5 	bl	800be20 <SCH_TIM_HasCompleted>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d01d      	beq.n	800aef8 <status_wdt_update+0x54>
			{
				WDT_Current = 0;
 800aebc:	4b0f      	ldr	r3, [pc, #60]	@ (800aefc <status_wdt_update+0x58>)
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]
				LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800aec2:	2102      	movs	r1, #2
 800aec4:	480e      	ldr	r0, [pc, #56]	@ (800af00 <status_wdt_update+0x5c>)
 800aec6:	f7ff ffc6 	bl	800ae56 <LL_GPIO_ResetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 800aeca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800aece:	2001      	movs	r0, #1
 800aed0:	f000 ff90 	bl	800bdf4 <SCH_TIM_Start>
				WDT_Current = 1;
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
			}
	}
}
 800aed4:	e010      	b.n	800aef8 <status_wdt_update+0x54>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800aed6:	2001      	movs	r0, #1
 800aed8:	f000 ffa2 	bl	800be20 <SCH_TIM_HasCompleted>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00a      	beq.n	800aef8 <status_wdt_update+0x54>
				WDT_Current = 1;
 800aee2:	4b06      	ldr	r3, [pc, #24]	@ (800aefc <status_wdt_update+0x58>)
 800aee4:	2201      	movs	r2, #1
 800aee6:	701a      	strb	r2, [r3, #0]
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800aee8:	2102      	movs	r1, #2
 800aeea:	4805      	ldr	r0, [pc, #20]	@ (800af00 <status_wdt_update+0x5c>)
 800aeec:	f7ff ffa5 	bl	800ae3a <LL_GPIO_SetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800aef0:	21c8      	movs	r1, #200	@ 0xc8
 800aef2:	2001      	movs	r0, #1
 800aef4:	f000 ff7e 	bl	800bdf4 <SCH_TIM_Start>
}
 800aef8:	bf00      	nop
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20008464 	.word	0x20008464
 800af00:	40020000 	.word	0x40020000

0800af04 <LL_GPIO_SetPinMode>:
{
 800af04:	b480      	push	{r7}
 800af06:	b08b      	sub	sp, #44	@ 0x2c
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	fa93 f3a3 	rbit	r3, r3
 800af1e:	613b      	str	r3, [r7, #16]
  return result;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800af2a:	2320      	movs	r3, #32
 800af2c:	e003      	b.n	800af36 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800af2e:	69bb      	ldr	r3, [r7, #24]
 800af30:	fab3 f383 	clz	r3, r3
 800af34:	b2db      	uxtb	r3, r3
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	2103      	movs	r1, #3
 800af3a:	fa01 f303 	lsl.w	r3, r1, r3
 800af3e:	43db      	mvns	r3, r3
 800af40:	401a      	ands	r2, r3
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	fa93 f3a3 	rbit	r3, r3
 800af4c:	61fb      	str	r3, [r7, #28]
  return result;
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800af52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800af58:	2320      	movs	r3, #32
 800af5a:	e003      	b.n	800af64 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800af5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5e:	fab3 f383 	clz	r3, r3
 800af62:	b2db      	uxtb	r3, r3
 800af64:	005b      	lsls	r3, r3, #1
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	fa01 f303 	lsl.w	r3, r1, r3
 800af6c:	431a      	orrs	r2, r3
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	601a      	str	r2, [r3, #0]
}
 800af72:	bf00      	nop
 800af74:	372c      	adds	r7, #44	@ 0x2c
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <LL_GPIO_SetPinOutputType>:
{
 800af7e:	b480      	push	{r7}
 800af80:	b085      	sub	sp, #20
 800af82:	af00      	add	r7, sp, #0
 800af84:	60f8      	str	r0, [r7, #12]
 800af86:	60b9      	str	r1, [r7, #8]
 800af88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	43db      	mvns	r3, r3
 800af92:	401a      	ands	r2, r3
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6879      	ldr	r1, [r7, #4]
 800af98:	fb01 f303 	mul.w	r3, r1, r3
 800af9c:	431a      	orrs	r2, r3
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	605a      	str	r2, [r3, #4]
}
 800afa2:	bf00      	nop
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <LL_GPIO_SetPinSpeed>:
{
 800afae:	b480      	push	{r7}
 800afb0:	b08b      	sub	sp, #44	@ 0x2c
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689a      	ldr	r2, [r3, #8]
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	fa93 f3a3 	rbit	r3, r3
 800afc8:	613b      	str	r3, [r7, #16]
  return result;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d101      	bne.n	800afd8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800afd4:	2320      	movs	r3, #32
 800afd6:	e003      	b.n	800afe0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	fab3 f383 	clz	r3, r3
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	2103      	movs	r1, #3
 800afe4:	fa01 f303 	lsl.w	r3, r1, r3
 800afe8:	43db      	mvns	r3, r3
 800afea:	401a      	ands	r2, r3
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	fa93 f3a3 	rbit	r3, r3
 800aff6:	61fb      	str	r3, [r7, #28]
  return result;
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800affc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b002:	2320      	movs	r3, #32
 800b004:	e003      	b.n	800b00e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	fab3 f383 	clz	r3, r3
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	005b      	lsls	r3, r3, #1
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	fa01 f303 	lsl.w	r3, r1, r3
 800b016:	431a      	orrs	r2, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	609a      	str	r2, [r3, #8]
}
 800b01c:	bf00      	nop
 800b01e:	372c      	adds	r7, #44	@ 0x2c
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <LL_GPIO_SetPinPull>:
{
 800b028:	b480      	push	{r7}
 800b02a:	b08b      	sub	sp, #44	@ 0x2c
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	68da      	ldr	r2, [r3, #12]
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	fa93 f3a3 	rbit	r3, r3
 800b042:	613b      	str	r3, [r7, #16]
  return result;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d101      	bne.n	800b052 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b04e:	2320      	movs	r3, #32
 800b050:	e003      	b.n	800b05a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	fab3 f383 	clz	r3, r3
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	2103      	movs	r1, #3
 800b05e:	fa01 f303 	lsl.w	r3, r1, r3
 800b062:	43db      	mvns	r3, r3
 800b064:	401a      	ands	r2, r3
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	fa93 f3a3 	rbit	r3, r3
 800b070:	61fb      	str	r3, [r7, #28]
  return result;
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b07c:	2320      	movs	r3, #32
 800b07e:	e003      	b.n	800b088 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b082:	fab3 f383 	clz	r3, r3
 800b086:	b2db      	uxtb	r3, r3
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	6879      	ldr	r1, [r7, #4]
 800b08c:	fa01 f303 	lsl.w	r3, r1, r3
 800b090:	431a      	orrs	r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	60da      	str	r2, [r3, #12]
}
 800b096:	bf00      	nop
 800b098:	372c      	adds	r7, #44	@ 0x2c
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <LL_GPIO_SetAFPin_0_7>:
{
 800b0a2:	b480      	push	{r7}
 800b0a4:	b08b      	sub	sp, #44	@ 0x2c
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6a1a      	ldr	r2, [r3, #32]
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	fa93 f3a3 	rbit	r3, r3
 800b0bc:	613b      	str	r3, [r7, #16]
  return result;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b0c8:	2320      	movs	r3, #32
 800b0ca:	e003      	b.n	800b0d4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	fab3 f383 	clz	r3, r3
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	210f      	movs	r1, #15
 800b0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0dc:	43db      	mvns	r3, r3
 800b0de:	401a      	ands	r2, r3
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	fa93 f3a3 	rbit	r3, r3
 800b0ea:	61fb      	str	r3, [r7, #28]
  return result;
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b0f6:	2320      	movs	r3, #32
 800b0f8:	e003      	b.n	800b102 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fc:	fab3 f383 	clz	r3, r3
 800b100:	b2db      	uxtb	r3, r3
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	6879      	ldr	r1, [r7, #4]
 800b106:	fa01 f303 	lsl.w	r3, r1, r3
 800b10a:	431a      	orrs	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	621a      	str	r2, [r3, #32]
}
 800b110:	bf00      	nop
 800b112:	372c      	adds	r7, #44	@ 0x2c
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <LL_GPIO_SetAFPin_8_15>:
{
 800b11c:	b480      	push	{r7}
 800b11e:	b08b      	sub	sp, #44	@ 0x2c
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	0a1b      	lsrs	r3, r3, #8
 800b130:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	fa93 f3a3 	rbit	r3, r3
 800b138:	613b      	str	r3, [r7, #16]
  return result;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b144:	2320      	movs	r3, #32
 800b146:	e003      	b.n	800b150 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	fab3 f383 	clz	r3, r3
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	210f      	movs	r1, #15
 800b154:	fa01 f303 	lsl.w	r3, r1, r3
 800b158:	43db      	mvns	r3, r3
 800b15a:	401a      	ands	r2, r3
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	0a1b      	lsrs	r3, r3, #8
 800b160:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	fa93 f3a3 	rbit	r3, r3
 800b168:	61fb      	str	r3, [r7, #28]
  return result;
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b174:	2320      	movs	r3, #32
 800b176:	e003      	b.n	800b180 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17a:	fab3 f383 	clz	r3, r3
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	6879      	ldr	r1, [r7, #4]
 800b184:	fa01 f303 	lsl.w	r3, r1, r3
 800b188:	431a      	orrs	r2, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b18e:	bf00      	nop
 800b190:	372c      	adds	r7, #44	@ 0x2c
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b08a      	sub	sp, #40	@ 0x28
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	fa93 f3a3 	rbit	r3, r3
 800b1b8:	617b      	str	r3, [r7, #20]
  return result;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <LL_GPIO_Init+0x2e>
    return 32U;
 800b1c4:	2320      	movs	r3, #32
 800b1c6:	e003      	b.n	800b1d0 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	fab3 f383 	clz	r3, r3
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b1d2:	e057      	b.n	800b284 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	2101      	movs	r1, #1
 800b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d049      	beq.n	800b27e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d003      	beq.n	800b1fa <LL_GPIO_Init+0x60>
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d10d      	bne.n	800b216 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	461a      	mov	r2, r3
 800b200:	6a39      	ldr	r1, [r7, #32]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f7ff fed3 	bl	800afae <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	461a      	mov	r2, r3
 800b20e:	6a39      	ldr	r1, [r7, #32]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff feb4 	bl	800af7e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	461a      	mov	r2, r3
 800b21c:	6a39      	ldr	r1, [r7, #32]
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7ff ff02 	bl	800b028 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d121      	bne.n	800b270 <LL_GPIO_Init+0xd6>
 800b22c:	6a3b      	ldr	r3, [r7, #32]
 800b22e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	fa93 f3a3 	rbit	r3, r3
 800b236:	60bb      	str	r3, [r7, #8]
  return result;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d101      	bne.n	800b246 <LL_GPIO_Init+0xac>
    return 32U;
 800b242:	2320      	movs	r3, #32
 800b244:	e003      	b.n	800b24e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	fab3 f383 	clz	r3, r3
 800b24c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800b24e:	2b07      	cmp	r3, #7
 800b250:	d807      	bhi.n	800b262 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	461a      	mov	r2, r3
 800b258:	6a39      	ldr	r1, [r7, #32]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff ff21 	bl	800b0a2 <LL_GPIO_SetAFPin_0_7>
 800b260:	e006      	b.n	800b270 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	695b      	ldr	r3, [r3, #20]
 800b266:	461a      	mov	r2, r3
 800b268:	6a39      	ldr	r1, [r7, #32]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7ff ff56 	bl	800b11c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	461a      	mov	r2, r3
 800b276:	6a39      	ldr	r1, [r7, #32]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7ff fe43 	bl	800af04 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b280:	3301      	adds	r3, #1
 800b282:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28a:	fa22 f303 	lsr.w	r3, r2, r3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1a0      	bne.n	800b1d4 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3728      	adds	r7, #40	@ 0x28
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <LL_I2C_Enable>:
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f043 0201 	orr.w	r2, r3, #1
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	601a      	str	r2, [r3, #0]
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <LL_I2C_Disable>:
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f023 0201 	bic.w	r2, r3, #1
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	601a      	str	r2, [r3, #0]
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <LL_I2C_SetOwnAddress1>:
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b2f0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b2f4:	68b9      	ldr	r1, [r7, #8]
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	430a      	orrs	r2, r1
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	609a      	str	r2, [r3, #8]
}
 800b300:	bf00      	nop
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <LL_I2C_ConfigSpeed>:
{
 800b30c:	b480      	push	{r7}
 800b30e:	b087      	sub	sp, #28
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	4a42      	ldr	r2, [pc, #264]	@ (800b430 <LL_I2C_ConfigSpeed+0x124>)
 800b326:	fba2 2303 	umull	r2, r3, r2, r3
 800b32a:	0c9b      	lsrs	r3, r3, #18
 800b32c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	431a      	orrs	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6a1b      	ldr	r3, [r3, #32]
 800b342:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	493a      	ldr	r1, [pc, #232]	@ (800b434 <LL_I2C_ConfigSpeed+0x128>)
 800b34a:	428b      	cmp	r3, r1
 800b34c:	d802      	bhi.n	800b354 <LL_I2C_ConfigSpeed+0x48>
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	3301      	adds	r3, #1
 800b352:	e009      	b.n	800b368 <LL_I2C_ConfigSpeed+0x5c>
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800b35a:	fb01 f303 	mul.w	r3, r1, r3
 800b35e:	4936      	ldr	r1, [pc, #216]	@ (800b438 <LL_I2C_ConfigSpeed+0x12c>)
 800b360:	fba1 1303 	umull	r1, r3, r1, r3
 800b364:	099b      	lsrs	r3, r3, #6
 800b366:	3301      	adds	r3, #1
 800b368:	431a      	orrs	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a30      	ldr	r2, [pc, #192]	@ (800b434 <LL_I2C_ConfigSpeed+0x128>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d939      	bls.n	800b3ea <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d117      	bne.n	800b3ac <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	4613      	mov	r3, r2
 800b380:	005b      	lsls	r3, r3, #1
 800b382:	4413      	add	r3, r2
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	fbb2 f3f3 	udiv	r3, r2, r3
 800b38a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d009      	beq.n	800b3a6 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	4613      	mov	r3, r2
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	4413      	add	r3, r2
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b3a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3a4:	e01d      	b.n	800b3e2 <LL_I2C_ConfigSpeed+0xd6>
 800b3a6:	f248 0301 	movw	r3, #32769	@ 0x8001
 800b3aa:	e01a      	b.n	800b3e2 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	009a      	lsls	r2, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3be:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00b      	beq.n	800b3de <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4413      	add	r3, r2
 800b3ce:	009a      	lsls	r2, r3, #2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800b3d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3dc:	e001      	b.n	800b3e2 <LL_I2C_ConfigSpeed+0xd6>
 800b3de:	f248 0301 	movw	r3, #32769	@ 0x8001
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	617b      	str	r3, [r7, #20]
 800b3e8:	e011      	b.n	800b40e <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	005b      	lsls	r3, r3, #1
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	fbb2 f2f3 	udiv	r2, r2, r3
 800b3f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b3f8:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d005      	beq.n	800b40a <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	fbb2 f3f3 	udiv	r3, r2, r3
 800b408:	e000      	b.n	800b40c <LL_I2C_ConfigSpeed+0x100>
 800b40a:	2304      	movs	r3, #4
 800b40c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	69db      	ldr	r3, [r3, #28]
 800b412:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 800b416:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b41a:	697a      	ldr	r2, [r7, #20]
 800b41c:	431a      	orrs	r2, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	61da      	str	r2, [r3, #28]
}
 800b422:	bf00      	nop
 800b424:	371c      	adds	r7, #28
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	431bde83 	.word	0x431bde83
 800b434:	000186a0 	.word	0x000186a0
 800b438:	10624dd3 	.word	0x10624dd3

0800b43c <LL_I2C_SetMode>:
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f023 021a 	bic.w	r2, r3, #26
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	431a      	orrs	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	601a      	str	r2, [r3, #0]
}
 800b456:	bf00      	nop
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr

0800b462 <LL_I2C_AcknowledgeNextData>:
{
 800b462:	b480      	push	{r7}
 800b464:	b083      	sub	sp, #12
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	431a      	orrs	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	601a      	str	r2, [r3, #0]
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff ff12 	bl	800b2bc <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800b498:	f107 0308 	add.w	r3, r7, #8
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 f895 	bl	800b5cc <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800b4a2:	6939      	ldr	r1, [r7, #16]
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	685a      	ldr	r2, [r3, #4]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff ff2d 	bl	800b30c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	68d9      	ldr	r1, [r3, #12]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff ff0d 	bl	800b2dc <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7ff ffb7 	bl	800b43c <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff fee4 	bl	800b29c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7ff ffc1 	bl	800b462 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <LL_RCC_GetSysClkSource>:
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b4f0:	4b04      	ldr	r3, [pc, #16]	@ (800b504 <LL_RCC_GetSysClkSource+0x18>)
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f003 030c 	and.w	r3, r3, #12
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	40023800 	.word	0x40023800

0800b508 <LL_RCC_GetAHBPrescaler>:
{
 800b508:	b480      	push	{r7}
 800b50a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b50c:	4b04      	ldr	r3, [pc, #16]	@ (800b520 <LL_RCC_GetAHBPrescaler+0x18>)
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b514:	4618      	mov	r0, r3
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	40023800 	.word	0x40023800

0800b524 <LL_RCC_GetAPB1Prescaler>:
{
 800b524:	b480      	push	{r7}
 800b526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b528:	4b04      	ldr	r3, [pc, #16]	@ (800b53c <LL_RCC_GetAPB1Prescaler+0x18>)
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800b530:	4618      	mov	r0, r3
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	40023800 	.word	0x40023800

0800b540 <LL_RCC_GetAPB2Prescaler>:
{
 800b540:	b480      	push	{r7}
 800b542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b544:	4b04      	ldr	r3, [pc, #16]	@ (800b558 <LL_RCC_GetAPB2Prescaler+0x18>)
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	40023800 	.word	0x40023800

0800b55c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b560:	4b04      	ldr	r3, [pc, #16]	@ (800b574 <LL_RCC_PLL_GetMainSource+0x18>)
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800b568:	4618      	mov	r0, r3
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	40023800 	.word	0x40023800

0800b578 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b578:	b480      	push	{r7}
 800b57a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b57c:	4b04      	ldr	r3, [pc, #16]	@ (800b590 <LL_RCC_PLL_GetN+0x18>)
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	099b      	lsrs	r3, r3, #6
 800b582:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800b586:	4618      	mov	r0, r3
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr
 800b590:	40023800 	.word	0x40023800

0800b594 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800b594:	b480      	push	{r7}
 800b596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800b598:	4b04      	ldr	r3, [pc, #16]	@ (800b5ac <LL_RCC_PLL_GetP+0x18>)
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	40023800 	.word	0x40023800

0800b5b0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b5b4:	4b04      	ldr	r3, [pc, #16]	@ (800b5c8 <LL_RCC_PLL_GetDivider+0x18>)
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	40023800 	.word	0x40023800

0800b5cc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800b5d4:	f000 f820 	bl	800b618 <RCC_GetSystemClockFreq>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 f840 	bl	800b668 <RCC_GetHCLKClockFreq>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f000 f84e 	bl	800b694 <RCC_GetPCLK1ClockFreq>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	4618      	mov	r0, r3
 800b604:	f000 f85a 	bl	800b6bc <RCC_GetPCLK2ClockFreq>
 800b608:	4602      	mov	r2, r0
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	60da      	str	r2, [r3, #12]
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
	...

0800b618 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b622:	f7ff ff63 	bl	800b4ec <LL_RCC_GetSysClkSource>
 800b626:	4603      	mov	r3, r0
 800b628:	2b08      	cmp	r3, #8
 800b62a:	d00c      	beq.n	800b646 <RCC_GetSystemClockFreq+0x2e>
 800b62c:	2b08      	cmp	r3, #8
 800b62e:	d80f      	bhi.n	800b650 <RCC_GetSystemClockFreq+0x38>
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <RCC_GetSystemClockFreq+0x22>
 800b634:	2b04      	cmp	r3, #4
 800b636:	d003      	beq.n	800b640 <RCC_GetSystemClockFreq+0x28>
 800b638:	e00a      	b.n	800b650 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b63a:	4b09      	ldr	r3, [pc, #36]	@ (800b660 <RCC_GetSystemClockFreq+0x48>)
 800b63c:	607b      	str	r3, [r7, #4]
      break;
 800b63e:	e00a      	b.n	800b656 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b640:	4b08      	ldr	r3, [pc, #32]	@ (800b664 <RCC_GetSystemClockFreq+0x4c>)
 800b642:	607b      	str	r3, [r7, #4]
      break;
 800b644:	e007      	b.n	800b656 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800b646:	2008      	movs	r0, #8
 800b648:	f000 f84c 	bl	800b6e4 <RCC_PLL_GetFreqDomain_SYS>
 800b64c:	6078      	str	r0, [r7, #4]
      break;
 800b64e:	e002      	b.n	800b656 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800b650:	4b03      	ldr	r3, [pc, #12]	@ (800b660 <RCC_GetSystemClockFreq+0x48>)
 800b652:	607b      	str	r3, [r7, #4]
      break;
 800b654:	bf00      	nop
  }

  return frequency;
 800b656:	687b      	ldr	r3, [r7, #4]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	00f42400 	.word	0x00f42400
 800b664:	007a1200 	.word	0x007a1200

0800b668 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b670:	f7ff ff4a 	bl	800b508 <LL_RCC_GetAHBPrescaler>
 800b674:	4603      	mov	r3, r0
 800b676:	091b      	lsrs	r3, r3, #4
 800b678:	f003 030f 	and.w	r3, r3, #15
 800b67c:	4a04      	ldr	r2, [pc, #16]	@ (800b690 <RCC_GetHCLKClockFreq+0x28>)
 800b67e:	5cd3      	ldrb	r3, [r2, r3]
 800b680:	461a      	mov	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	40d3      	lsrs	r3, r2
}
 800b686:	4618      	mov	r0, r3
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	08016424 	.word	0x08016424

0800b694 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b69c:	f7ff ff42 	bl	800b524 <LL_RCC_GetAPB1Prescaler>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	0a9b      	lsrs	r3, r3, #10
 800b6a4:	4a04      	ldr	r2, [pc, #16]	@ (800b6b8 <RCC_GetPCLK1ClockFreq+0x24>)
 800b6a6:	5cd3      	ldrb	r3, [r2, r3]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	40d3      	lsrs	r3, r2
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	08016434 	.word	0x08016434

0800b6bc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800b6c4:	f7ff ff3c 	bl	800b540 <LL_RCC_GetAPB2Prescaler>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	0b5b      	lsrs	r3, r3, #13
 800b6cc:	4a04      	ldr	r2, [pc, #16]	@ (800b6e0 <RCC_GetPCLK2ClockFreq+0x24>)
 800b6ce:	5cd3      	ldrb	r3, [r2, r3]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	40d3      	lsrs	r3, r2
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	08016434 	.word	0x08016434

0800b6e4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800b6e4:	b590      	push	{r4, r7, lr}
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b6f8:	f7ff ff30 	bl	800b55c <LL_RCC_PLL_GetMainSource>
 800b6fc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d004      	beq.n	800b70e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b70a:	d003      	beq.n	800b714 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800b70c:	e005      	b.n	800b71a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800b70e:	4b12      	ldr	r3, [pc, #72]	@ (800b758 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b710:	617b      	str	r3, [r7, #20]
      break;
 800b712:	e005      	b.n	800b720 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800b714:	4b11      	ldr	r3, [pc, #68]	@ (800b75c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800b716:	617b      	str	r3, [r7, #20]
      break;
 800b718:	e002      	b.n	800b720 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800b71a:	4b0f      	ldr	r3, [pc, #60]	@ (800b758 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b71c:	617b      	str	r3, [r7, #20]
      break;
 800b71e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b08      	cmp	r3, #8
 800b724:	d113      	bne.n	800b74e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800b726:	f7ff ff43 	bl	800b5b0 <LL_RCC_PLL_GetDivider>
 800b72a:	4602      	mov	r2, r0
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	fbb3 f4f2 	udiv	r4, r3, r2
 800b732:	f7ff ff21 	bl	800b578 <LL_RCC_PLL_GetN>
 800b736:	4603      	mov	r3, r0
 800b738:	fb03 f404 	mul.w	r4, r3, r4
 800b73c:	f7ff ff2a 	bl	800b594 <LL_RCC_PLL_GetP>
 800b740:	4603      	mov	r3, r0
 800b742:	0c1b      	lsrs	r3, r3, #16
 800b744:	3301      	adds	r3, #1
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	fbb4 f3f3 	udiv	r3, r4, r3
 800b74c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800b74e:	693b      	ldr	r3, [r7, #16]
}
 800b750:	4618      	mov	r0, r3
 800b752:	371c      	adds	r7, #28
 800b754:	46bd      	mov	sp, r7
 800b756:	bd90      	pop	{r4, r7, pc}
 800b758:	00f42400 	.word	0x00f42400
 800b75c:	007a1200 	.word	0x007a1200

0800b760 <LL_USART_IsEnabled>:
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b774:	bf0c      	ite	eq
 800b776:	2301      	moveq	r3, #1
 800b778:	2300      	movne	r3, #0
 800b77a:	b2db      	uxtb	r3, r3
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <LL_USART_SetStopBitsLength>:
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	431a      	orrs	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	611a      	str	r2, [r3, #16]
}
 800b7a2:	bf00      	nop
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <LL_USART_SetHWFlowCtrl>:
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b083      	sub	sp, #12
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	615a      	str	r2, [r3, #20]
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <LL_USART_SetBaudRate>:
{
 800b7d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7d8:	b0c0      	sub	sp, #256	@ 0x100
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b7e0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800b7e4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800b7e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800b7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7f4:	f040 810c 	bne.w	800ba10 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800b7f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b802:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b806:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b80a:	4622      	mov	r2, r4
 800b80c:	462b      	mov	r3, r5
 800b80e:	1891      	adds	r1, r2, r2
 800b810:	6639      	str	r1, [r7, #96]	@ 0x60
 800b812:	415b      	adcs	r3, r3
 800b814:	667b      	str	r3, [r7, #100]	@ 0x64
 800b816:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800b81a:	4621      	mov	r1, r4
 800b81c:	eb12 0801 	adds.w	r8, r2, r1
 800b820:	4629      	mov	r1, r5
 800b822:	eb43 0901 	adc.w	r9, r3, r1
 800b826:	f04f 0200 	mov.w	r2, #0
 800b82a:	f04f 0300 	mov.w	r3, #0
 800b82e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b83a:	4690      	mov	r8, r2
 800b83c:	4699      	mov	r9, r3
 800b83e:	4623      	mov	r3, r4
 800b840:	eb18 0303 	adds.w	r3, r8, r3
 800b844:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b848:	462b      	mov	r3, r5
 800b84a:	eb49 0303 	adc.w	r3, r9, r3
 800b84e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b852:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b856:	2200      	movs	r2, #0
 800b858:	469a      	mov	sl, r3
 800b85a:	4693      	mov	fp, r2
 800b85c:	eb1a 030a 	adds.w	r3, sl, sl
 800b860:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b862:	eb4b 030b 	adc.w	r3, fp, fp
 800b866:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b868:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b86c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b870:	f7f5 fa1a 	bl	8000ca8 <__aeabi_uldivmod>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	4b64      	ldr	r3, [pc, #400]	@ (800ba0c <LL_USART_SetBaudRate+0x238>)
 800b87a:	fba3 2302 	umull	r2, r3, r3, r2
 800b87e:	095b      	lsrs	r3, r3, #5
 800b880:	b29b      	uxth	r3, r3
 800b882:	011b      	lsls	r3, r3, #4
 800b884:	b29c      	uxth	r4, r3
 800b886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b88a:	2200      	movs	r2, #0
 800b88c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b890:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b894:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800b898:	4642      	mov	r2, r8
 800b89a:	464b      	mov	r3, r9
 800b89c:	1891      	adds	r1, r2, r2
 800b89e:	6539      	str	r1, [r7, #80]	@ 0x50
 800b8a0:	415b      	adcs	r3, r3
 800b8a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b8a8:	4641      	mov	r1, r8
 800b8aa:	1851      	adds	r1, r2, r1
 800b8ac:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	414b      	adcs	r3, r1
 800b8b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8b4:	f04f 0200 	mov.w	r2, #0
 800b8b8:	f04f 0300 	mov.w	r3, #0
 800b8bc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800b8c0:	4659      	mov	r1, fp
 800b8c2:	00cb      	lsls	r3, r1, #3
 800b8c4:	4651      	mov	r1, sl
 800b8c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8ca:	4651      	mov	r1, sl
 800b8cc:	00ca      	lsls	r2, r1, #3
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	4642      	mov	r2, r8
 800b8d6:	189b      	adds	r3, r3, r2
 800b8d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b8dc:	464b      	mov	r3, r9
 800b8de:	460a      	mov	r2, r1
 800b8e0:	eb42 0303 	adc.w	r3, r2, r3
 800b8e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b8e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b8f2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800b8f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	18db      	adds	r3, r3, r3
 800b8fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800b900:	4613      	mov	r3, r2
 800b902:	eb42 0303 	adc.w	r3, r2, r3
 800b906:	647b      	str	r3, [r7, #68]	@ 0x44
 800b908:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b90c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800b910:	f7f5 f9ca 	bl	8000ca8 <__aeabi_uldivmod>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4611      	mov	r1, r2
 800b91a:	4b3c      	ldr	r3, [pc, #240]	@ (800ba0c <LL_USART_SetBaudRate+0x238>)
 800b91c:	fba3 2301 	umull	r2, r3, r3, r1
 800b920:	095b      	lsrs	r3, r3, #5
 800b922:	2264      	movs	r2, #100	@ 0x64
 800b924:	fb02 f303 	mul.w	r3, r2, r3
 800b928:	1acb      	subs	r3, r1, r3
 800b92a:	00db      	lsls	r3, r3, #3
 800b92c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b930:	4b36      	ldr	r3, [pc, #216]	@ (800ba0c <LL_USART_SetBaudRate+0x238>)
 800b932:	fba3 2302 	umull	r2, r3, r3, r2
 800b936:	095b      	lsrs	r3, r3, #5
 800b938:	b29b      	uxth	r3, r3
 800b93a:	005b      	lsls	r3, r3, #1
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b942:	b29b      	uxth	r3, r3
 800b944:	4423      	add	r3, r4
 800b946:	b29c      	uxth	r4, r3
 800b948:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b94c:	2200      	movs	r2, #0
 800b94e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b952:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b956:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800b95a:	4642      	mov	r2, r8
 800b95c:	464b      	mov	r3, r9
 800b95e:	1891      	adds	r1, r2, r2
 800b960:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b962:	415b      	adcs	r3, r3
 800b964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b966:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b96a:	4641      	mov	r1, r8
 800b96c:	1851      	adds	r1, r2, r1
 800b96e:	6339      	str	r1, [r7, #48]	@ 0x30
 800b970:	4649      	mov	r1, r9
 800b972:	414b      	adcs	r3, r1
 800b974:	637b      	str	r3, [r7, #52]	@ 0x34
 800b976:	f04f 0200 	mov.w	r2, #0
 800b97a:	f04f 0300 	mov.w	r3, #0
 800b97e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b982:	4659      	mov	r1, fp
 800b984:	00cb      	lsls	r3, r1, #3
 800b986:	4651      	mov	r1, sl
 800b988:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b98c:	4651      	mov	r1, sl
 800b98e:	00ca      	lsls	r2, r1, #3
 800b990:	4610      	mov	r0, r2
 800b992:	4619      	mov	r1, r3
 800b994:	4603      	mov	r3, r0
 800b996:	4642      	mov	r2, r8
 800b998:	189b      	adds	r3, r3, r2
 800b99a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b99e:	464b      	mov	r3, r9
 800b9a0:	460a      	mov	r2, r1
 800b9a2:	eb42 0303 	adc.w	r3, r2, r3
 800b9a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b9aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b9b4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800b9b8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	18db      	adds	r3, r3, r3
 800b9c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	eb42 0303 	adc.w	r3, r2, r3
 800b9c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b9ce:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800b9d2:	f7f5 f969 	bl	8000ca8 <__aeabi_uldivmod>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4b0c      	ldr	r3, [pc, #48]	@ (800ba0c <LL_USART_SetBaudRate+0x238>)
 800b9dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b9e0:	095b      	lsrs	r3, r3, #5
 800b9e2:	2164      	movs	r1, #100	@ 0x64
 800b9e4:	fb01 f303 	mul.w	r3, r1, r3
 800b9e8:	1ad3      	subs	r3, r2, r3
 800b9ea:	00db      	lsls	r3, r3, #3
 800b9ec:	3332      	adds	r3, #50	@ 0x32
 800b9ee:	4a07      	ldr	r2, [pc, #28]	@ (800ba0c <LL_USART_SetBaudRate+0x238>)
 800b9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f4:	095b      	lsrs	r3, r3, #5
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	f003 0307 	and.w	r3, r3, #7
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	4423      	add	r3, r4
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	461a      	mov	r2, r3
 800ba04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba08:	609a      	str	r2, [r3, #8]
}
 800ba0a:	e108      	b.n	800bc1e <LL_USART_SetBaudRate+0x44a>
 800ba0c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800ba10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ba14:	2200      	movs	r2, #0
 800ba16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba1a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ba1e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800ba22:	4642      	mov	r2, r8
 800ba24:	464b      	mov	r3, r9
 800ba26:	1891      	adds	r1, r2, r2
 800ba28:	6239      	str	r1, [r7, #32]
 800ba2a:	415b      	adcs	r3, r3
 800ba2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba32:	4641      	mov	r1, r8
 800ba34:	1854      	adds	r4, r2, r1
 800ba36:	4649      	mov	r1, r9
 800ba38:	eb43 0501 	adc.w	r5, r3, r1
 800ba3c:	f04f 0200 	mov.w	r2, #0
 800ba40:	f04f 0300 	mov.w	r3, #0
 800ba44:	00eb      	lsls	r3, r5, #3
 800ba46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ba4a:	00e2      	lsls	r2, r4, #3
 800ba4c:	4614      	mov	r4, r2
 800ba4e:	461d      	mov	r5, r3
 800ba50:	4643      	mov	r3, r8
 800ba52:	18e3      	adds	r3, r4, r3
 800ba54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ba58:	464b      	mov	r3, r9
 800ba5a:	eb45 0303 	adc.w	r3, r5, r3
 800ba5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ba62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ba66:	2200      	movs	r2, #0
 800ba68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ba6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800ba70:	f04f 0200 	mov.w	r2, #0
 800ba74:	f04f 0300 	mov.w	r3, #0
 800ba78:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	008b      	lsls	r3, r1, #2
 800ba80:	4621      	mov	r1, r4
 800ba82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba86:	4621      	mov	r1, r4
 800ba88:	008a      	lsls	r2, r1, #2
 800ba8a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800ba8e:	f7f5 f90b 	bl	8000ca8 <__aeabi_uldivmod>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	4b65      	ldr	r3, [pc, #404]	@ (800bc2c <LL_USART_SetBaudRate+0x458>)
 800ba98:	fba3 2302 	umull	r2, r3, r3, r2
 800ba9c:	095b      	lsrs	r3, r3, #5
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	011b      	lsls	r3, r3, #4
 800baa2:	b29c      	uxth	r4, r3
 800baa4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800baa8:	2200      	movs	r2, #0
 800baaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800baae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bab2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800bab6:	4642      	mov	r2, r8
 800bab8:	464b      	mov	r3, r9
 800baba:	1891      	adds	r1, r2, r2
 800babc:	61b9      	str	r1, [r7, #24]
 800babe:	415b      	adcs	r3, r3
 800bac0:	61fb      	str	r3, [r7, #28]
 800bac2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bac6:	4641      	mov	r1, r8
 800bac8:	1851      	adds	r1, r2, r1
 800baca:	6139      	str	r1, [r7, #16]
 800bacc:	4649      	mov	r1, r9
 800bace:	414b      	adcs	r3, r1
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	f04f 0200 	mov.w	r2, #0
 800bad6:	f04f 0300 	mov.w	r3, #0
 800bada:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bade:	4659      	mov	r1, fp
 800bae0:	00cb      	lsls	r3, r1, #3
 800bae2:	4651      	mov	r1, sl
 800bae4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bae8:	4651      	mov	r1, sl
 800baea:	00ca      	lsls	r2, r1, #3
 800baec:	4610      	mov	r0, r2
 800baee:	4619      	mov	r1, r3
 800baf0:	4603      	mov	r3, r0
 800baf2:	4642      	mov	r2, r8
 800baf4:	189b      	adds	r3, r3, r2
 800baf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bafa:	464b      	mov	r3, r9
 800bafc:	460a      	mov	r2, r1
 800bafe:	eb42 0303 	adc.w	r3, r2, r3
 800bb02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bb06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bb10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800bb14:	f04f 0200 	mov.w	r2, #0
 800bb18:	f04f 0300 	mov.w	r3, #0
 800bb1c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800bb20:	4649      	mov	r1, r9
 800bb22:	008b      	lsls	r3, r1, #2
 800bb24:	4641      	mov	r1, r8
 800bb26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb2a:	4641      	mov	r1, r8
 800bb2c:	008a      	lsls	r2, r1, #2
 800bb2e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800bb32:	f7f5 f8b9 	bl	8000ca8 <__aeabi_uldivmod>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	4b3b      	ldr	r3, [pc, #236]	@ (800bc2c <LL_USART_SetBaudRate+0x458>)
 800bb3e:	fba3 2301 	umull	r2, r3, r3, r1
 800bb42:	095b      	lsrs	r3, r3, #5
 800bb44:	2264      	movs	r2, #100	@ 0x64
 800bb46:	fb02 f303 	mul.w	r3, r2, r3
 800bb4a:	1acb      	subs	r3, r1, r3
 800bb4c:	011b      	lsls	r3, r3, #4
 800bb4e:	3332      	adds	r3, #50	@ 0x32
 800bb50:	4a36      	ldr	r2, [pc, #216]	@ (800bc2c <LL_USART_SetBaudRate+0x458>)
 800bb52:	fba2 2303 	umull	r2, r3, r2, r3
 800bb56:	095b      	lsrs	r3, r3, #5
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	4423      	add	r3, r4
 800bb62:	b29c      	uxth	r4, r3
 800bb64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bb68:	2200      	movs	r2, #0
 800bb6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb6c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bb6e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bb72:	4642      	mov	r2, r8
 800bb74:	464b      	mov	r3, r9
 800bb76:	1891      	adds	r1, r2, r2
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	415b      	adcs	r3, r3
 800bb7c:	60fb      	str	r3, [r7, #12]
 800bb7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb82:	4641      	mov	r1, r8
 800bb84:	1851      	adds	r1, r2, r1
 800bb86:	6039      	str	r1, [r7, #0]
 800bb88:	4649      	mov	r1, r9
 800bb8a:	414b      	adcs	r3, r1
 800bb8c:	607b      	str	r3, [r7, #4]
 800bb8e:	f04f 0200 	mov.w	r2, #0
 800bb92:	f04f 0300 	mov.w	r3, #0
 800bb96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bb9a:	4659      	mov	r1, fp
 800bb9c:	00cb      	lsls	r3, r1, #3
 800bb9e:	4651      	mov	r1, sl
 800bba0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bba4:	4651      	mov	r1, sl
 800bba6:	00ca      	lsls	r2, r1, #3
 800bba8:	4610      	mov	r0, r2
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4603      	mov	r3, r0
 800bbae:	4642      	mov	r2, r8
 800bbb0:	189b      	adds	r3, r3, r2
 800bbb2:	673b      	str	r3, [r7, #112]	@ 0x70
 800bbb4:	464b      	mov	r3, r9
 800bbb6:	460a      	mov	r2, r1
 800bbb8:	eb42 0303 	adc.w	r3, r2, r3
 800bbbc:	677b      	str	r3, [r7, #116]	@ 0x74
 800bbbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bbc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bbc8:	f04f 0200 	mov.w	r2, #0
 800bbcc:	f04f 0300 	mov.w	r3, #0
 800bbd0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	008b      	lsls	r3, r1, #2
 800bbd8:	4641      	mov	r1, r8
 800bbda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbde:	4641      	mov	r1, r8
 800bbe0:	008a      	lsls	r2, r1, #2
 800bbe2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800bbe6:	f7f5 f85f 	bl	8000ca8 <__aeabi_uldivmod>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	4b0f      	ldr	r3, [pc, #60]	@ (800bc2c <LL_USART_SetBaudRate+0x458>)
 800bbf0:	fba3 1302 	umull	r1, r3, r3, r2
 800bbf4:	095b      	lsrs	r3, r3, #5
 800bbf6:	2164      	movs	r1, #100	@ 0x64
 800bbf8:	fb01 f303 	mul.w	r3, r1, r3
 800bbfc:	1ad3      	subs	r3, r2, r3
 800bbfe:	011b      	lsls	r3, r3, #4
 800bc00:	3332      	adds	r3, #50	@ 0x32
 800bc02:	4a0a      	ldr	r2, [pc, #40]	@ (800bc2c <LL_USART_SetBaudRate+0x458>)
 800bc04:	fba2 2303 	umull	r2, r3, r2, r3
 800bc08:	095b      	lsrs	r3, r3, #5
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	f003 030f 	and.w	r3, r3, #15
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	4423      	add	r3, r4
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	461a      	mov	r2, r3
 800bc18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc1c:	609a      	str	r2, [r3, #8]
}
 800bc1e:	bf00      	nop
 800bc20:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bc24:	46bd      	mov	sp, r7
 800bc26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc2a:	bf00      	nop
 800bc2c:	51eb851f 	.word	0x51eb851f

0800bc30 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff fd8c 	bl	800b760 <LL_USART_IsEnabled>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d15e      	bne.n	800bd0c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800bc56:	f023 030c 	bic.w	r3, r3, #12
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	6851      	ldr	r1, [r2, #4]
 800bc5e:	683a      	ldr	r2, [r7, #0]
 800bc60:	68d2      	ldr	r2, [r2, #12]
 800bc62:	4311      	orrs	r1, r2
 800bc64:	683a      	ldr	r2, [r7, #0]
 800bc66:	6912      	ldr	r2, [r2, #16]
 800bc68:	4311      	orrs	r1, r2
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	6992      	ldr	r2, [r2, #24]
 800bc6e:	430a      	orrs	r2, r1
 800bc70:	431a      	orrs	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff fd83 	bl	800b788 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	695b      	ldr	r3, [r3, #20]
 800bc86:	4619      	mov	r1, r3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7ff fd90 	bl	800b7ae <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800bc8e:	f107 0308 	add.w	r3, r7, #8
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff fc9a 	bl	800b5cc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a1f      	ldr	r2, [pc, #124]	@ (800bd18 <LL_USART_Init+0xe8>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d102      	bne.n	800bca6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	61bb      	str	r3, [r7, #24]
 800bca4:	e021      	b.n	800bcea <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a1c      	ldr	r2, [pc, #112]	@ (800bd1c <LL_USART_Init+0xec>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d102      	bne.n	800bcb4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	61bb      	str	r3, [r7, #24]
 800bcb2:	e01a      	b.n	800bcea <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a1a      	ldr	r2, [pc, #104]	@ (800bd20 <LL_USART_Init+0xf0>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d102      	bne.n	800bcc2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	61bb      	str	r3, [r7, #24]
 800bcc0:	e013      	b.n	800bcea <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a17      	ldr	r2, [pc, #92]	@ (800bd24 <LL_USART_Init+0xf4>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d102      	bne.n	800bcd0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	61bb      	str	r3, [r7, #24]
 800bcce:	e00c      	b.n	800bcea <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a15      	ldr	r2, [pc, #84]	@ (800bd28 <LL_USART_Init+0xf8>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d102      	bne.n	800bcde <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	61bb      	str	r3, [r7, #24]
 800bcdc:	e005      	b.n	800bcea <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a12      	ldr	r2, [pc, #72]	@ (800bd2c <LL_USART_Init+0xfc>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d101      	bne.n	800bcea <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d00d      	beq.n	800bd0c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d009      	beq.n	800bd0c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800bd04:	69b9      	ldr	r1, [r7, #24]
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7ff fd64 	bl	800b7d4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800bd0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3720      	adds	r7, #32
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	40011000 	.word	0x40011000
 800bd1c:	40004400 	.word	0x40004400
 800bd20:	40004800 	.word	0x40004800
 800bd24:	40011400 	.word	0x40011400
 800bd28:	40004c00 	.word	0x40004c00
 800bd2c:	40005000 	.word	0x40005000

0800bd30 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd42:	4a07      	ldr	r2, [pc, #28]	@ (800bd60 <LL_InitTick+0x30>)
 800bd44:	3b01      	subs	r3, #1
 800bd46:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800bd48:	4b05      	ldr	r3, [pc, #20]	@ (800bd60 <LL_InitTick+0x30>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bd4e:	4b04      	ldr	r3, [pc, #16]	@ (800bd60 <LL_InitTick+0x30>)
 800bd50:	2205      	movs	r2, #5
 800bd52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	e000e010 	.word	0xe000e010

0800bd64 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800bd6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f7ff ffdd 	bl	800bd30 <LL_InitTick>
}
 800bd76:	bf00      	nop
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800bd88:	4a04      	ldr	r2, [pc, #16]	@ (800bd9c <LL_SetSystemCoreClock+0x1c>)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6013      	str	r3, [r2, #0]
}
 800bd8e:	bf00      	nop
 800bd90:	370c      	adds	r7, #12
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	20000500 	.word	0x20000500

0800bda0 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 800bda4:	4b0d      	ldr	r3, [pc, #52]	@ (800bddc <SCH_Initialize+0x3c>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 800bdaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bde0 <SCH_Initialize+0x40>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 800bdb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bde4 <SCH_Initialize+0x44>)
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 800bdb6:	22f0      	movs	r2, #240	@ 0xf0
 800bdb8:	2100      	movs	r1, #0
 800bdba:	480b      	ldr	r0, [pc, #44]	@ (800bde8 <SCH_Initialize+0x48>)
 800bdbc:	f004 f8c9 	bl	800ff52 <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 800bdc0:	22f0      	movs	r2, #240	@ 0xf0
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	4809      	ldr	r0, [pc, #36]	@ (800bdec <SCH_Initialize+0x4c>)
 800bdc6:	f004 f8c4 	bl	800ff52 <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 800bdca:	2224      	movs	r2, #36	@ 0x24
 800bdcc:	2100      	movs	r1, #0
 800bdce:	4808      	ldr	r0, [pc, #32]	@ (800bdf0 <SCH_Initialize+0x50>)
 800bdd0:	f004 f8bf 	bl	800ff52 <memset>

    // Initialize Scheduler context
  systick_timer_init();
 800bdd4:	f7f5 fc7a 	bl	80016cc <systick_timer_init>
}
 800bdd8:	bf00      	nop
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	20008650 	.word	0x20008650
 800bde0:	20008558 	.word	0x20008558
 800bde4:	2000864c 	.word	0x2000864c
 800bde8:	20008468 	.word	0x20008468
 800bdec:	2000855c 	.word	0x2000855c
 800bdf0:	20008654 	.word	0x20008654

0800bdf4 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	6039      	str	r1, [r7, #0]
 800bdfe:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	2b08      	cmp	r3, #8
 800be04:	d804      	bhi.n	800be10 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 800be06:	79fb      	ldrb	r3, [r7, #7]
 800be08:	4904      	ldr	r1, [pc, #16]	@ (800be1c <SCH_TIM_Start+0x28>)
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800be10:	bf00      	nop
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	20008654 	.word	0x20008654

0800be20 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800be2a:	79fb      	ldrb	r3, [r7, #7]
 800be2c:	4a06      	ldr	r2, [pc, #24]	@ (800be48 <SCH_TIM_HasCompleted+0x28>)
 800be2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be32:	2b00      	cmp	r3, #0
 800be34:	bf0c      	ite	eq
 800be36:	2301      	moveq	r3, #1
 800be38:	2300      	movne	r3, #0
 800be3a:	b2db      	uxtb	r3, r3
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr
 800be48:	20008654 	.word	0x20008654

0800be4c <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d028      	beq.n	800beb2 <SCH_TASK_CreateTask+0x66>
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d025      	beq.n	800beb2 <SCH_TASK_CreateTask+0x66>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 800be66:	4b16      	ldr	r3, [pc, #88]	@ (800bec0 <SCH_TASK_CreateTask+0x74>)
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	2b12      	cmp	r3, #18
 800be6c:	d821      	bhi.n	800beb2 <SCH_TASK_CreateTask+0x66>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 800be6e:	4b14      	ldr	r3, [pc, #80]	@ (800bec0 <SCH_TASK_CreateTask+0x74>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	461a      	mov	r2, r3
 800be74:	4613      	mov	r3, r2
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	4413      	add	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4a11      	ldr	r2, [pc, #68]	@ (800bec4 <SCH_TASK_CreateTask+0x78>)
 800be7e:	4413      	add	r3, r2
 800be80:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2200      	movs	r2, #0
 800be8c:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = RESET;
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2200      	movs	r2, #0
 800be92:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	2201      	movs	r2, #1
 800be98:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 800be9a:	4b09      	ldr	r3, [pc, #36]	@ (800bec0 <SCH_TASK_CreateTask+0x74>)
 800be9c:	781a      	ldrb	r2, [r3, #0]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800bea2:	4b07      	ldr	r3, [pc, #28]	@ (800bec0 <SCH_TASK_CreateTask+0x74>)
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	3301      	adds	r3, #1
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	4b05      	ldr	r3, [pc, #20]	@ (800bec0 <SCH_TASK_CreateTask+0x74>)
 800beac:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 800beae:	2300      	movs	r3, #0
 800beb0:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr
 800bec0:	20008558 	.word	0x20008558
 800bec4:	20008468 	.word	0x20008468

0800bec8 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 800bece:	4b42      	ldr	r3, [pc, #264]	@ (800bfd8 <SCH_RunSystemTickTimer+0x110>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3301      	adds	r3, #1
 800bed4:	4a40      	ldr	r2, [pc, #256]	@ (800bfd8 <SCH_RunSystemTickTimer+0x110>)
 800bed6:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
 800bedc:	e025      	b.n	800bf2a <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800bede:	7bfa      	ldrb	r2, [r7, #15]
 800bee0:	4613      	mov	r3, r2
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4a3c      	ldr	r2, [pc, #240]	@ (800bfdc <SCH_RunSystemTickTimer+0x114>)
 800beea:	4413      	add	r3, r2
 800beec:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d115      	bne.n	800bf24 <SCH_RunSystemTickTimer+0x5c>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d111      	bne.n	800bf24 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	1c5a      	adds	r2, r3, #1
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d305      	bcc.n	800bf24 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2201      	movs	r2, #1
 800bf22:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
 800bf26:	3301      	adds	r3, #1
 800bf28:	73fb      	strb	r3, [r7, #15]
 800bf2a:	4b2d      	ldr	r3, [pc, #180]	@ (800bfe0 <SCH_RunSystemTickTimer+0x118>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	7bfa      	ldrb	r2, [r7, #15]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d3d4      	bcc.n	800bede <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800bf34:	2300      	movs	r3, #0
 800bf36:	73bb      	strb	r3, [r7, #14]
 800bf38:	e02b      	b.n	800bf92 <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 800bf3a:	7bba      	ldrb	r2, [r7, #14]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4a27      	ldr	r2, [pc, #156]	@ (800bfe4 <SCH_RunSystemTickTimer+0x11c>)
 800bf46:	4413      	add	r3, r2
 800bf48:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d11c      	bne.n	800bf8c <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	685a      	ldr	r2, [r3, #4]
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d310      	bcc.n	800bf8c <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2200      	movs	r2, #0
 800bf74:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	bf0c      	ite	eq
 800bf80:	2301      	moveq	r3, #1
 800bf82:	2300      	movne	r3, #0
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	461a      	mov	r2, r3
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800bf8c:	7bbb      	ldrb	r3, [r7, #14]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	73bb      	strb	r3, [r7, #14]
 800bf92:	4b15      	ldr	r3, [pc, #84]	@ (800bfe8 <SCH_RunSystemTickTimer+0x120>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	7bba      	ldrb	r2, [r7, #14]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d3ce      	bcc.n	800bf3a <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	73bb      	strb	r3, [r7, #14]
 800bfa0:	e010      	b.n	800bfc4 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 800bfa2:	7bbb      	ldrb	r3, [r7, #14]
 800bfa4:	4a11      	ldr	r2, [pc, #68]	@ (800bfec <SCH_RunSystemTickTimer+0x124>)
 800bfa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d007      	beq.n	800bfbe <SCH_RunSystemTickTimer+0xf6>
 800bfae:	7bbb      	ldrb	r3, [r7, #14]
 800bfb0:	4a0e      	ldr	r2, [pc, #56]	@ (800bfec <SCH_RunSystemTickTimer+0x124>)
 800bfb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bfb6:	3a01      	subs	r2, #1
 800bfb8:	490c      	ldr	r1, [pc, #48]	@ (800bfec <SCH_RunSystemTickTimer+0x124>)
 800bfba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800bfbe:	7bbb      	ldrb	r3, [r7, #14]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	73bb      	strb	r3, [r7, #14]
 800bfc4:	7bbb      	ldrb	r3, [r7, #14]
 800bfc6:	2b08      	cmp	r3, #8
 800bfc8:	d9eb      	bls.n	800bfa2 <SCH_RunSystemTickTimer+0xda>
}
 800bfca:	bf00      	nop
 800bfcc:	bf00      	nop
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	20008650 	.word	0x20008650
 800bfdc:	20008468 	.word	0x20008468
 800bfe0:	20008558 	.word	0x20008558
 800bfe4:	2000855c 	.word	0x2000855c
 800bfe8:	2000864c 	.word	0x2000864c
 800bfec:	20008654 	.word	0x20008654

0800bff0 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 800bff4:	f7f5 fb5a 	bl	80016ac <systick_timer_start>
}
 800bff8:	bf00      	nop
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800c002:	2300      	movs	r3, #0
 800c004:	73fb      	strb	r3, [r7, #15]
 800c006:	e01e      	b.n	800c046 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800c008:	7bfa      	ldrb	r2, [r7, #15]
 800c00a:	4613      	mov	r3, r2
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	4413      	add	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4a23      	ldr	r2, [pc, #140]	@ (800c0a0 <SCH_HandleScheduledTask+0xa4>)
 800c014:	4413      	add	r3, r2
 800c016:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	885b      	ldrh	r3, [r3, #2]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d10f      	bne.n	800c040 <SCH_HandleScheduledTask+0x44>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d10b      	bne.n	800c040 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d003      	beq.n	800c040 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800c040:	7bfb      	ldrb	r3, [r7, #15]
 800c042:	3301      	adds	r3, #1
 800c044:	73fb      	strb	r3, [r7, #15]
 800c046:	4b17      	ldr	r3, [pc, #92]	@ (800c0a4 <SCH_HandleScheduledTask+0xa8>)
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	7bfa      	ldrb	r2, [r7, #15]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d3db      	bcc.n	800c008 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c050:	2300      	movs	r3, #0
 800c052:	73bb      	strb	r3, [r7, #14]
 800c054:	e01a      	b.n	800c08c <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 800c056:	7bba      	ldrb	r2, [r7, #14]
 800c058:	4613      	mov	r3, r2
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	4413      	add	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4a11      	ldr	r2, [pc, #68]	@ (800c0a8 <SCH_HandleScheduledTask+0xac>)
 800c062:	4413      	add	r3, r2
 800c064:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	885b      	ldrh	r3, [r3, #2]
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d10b      	bne.n	800c086 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	2200      	movs	r2, #0
 800c072:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d003      	beq.n	800c086 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	3301      	adds	r3, #1
 800c08a:	73bb      	strb	r3, [r7, #14]
 800c08c:	4b07      	ldr	r3, [pc, #28]	@ (800c0ac <SCH_HandleScheduledTask+0xb0>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	7bba      	ldrb	r2, [r7, #14]
 800c092:	429a      	cmp	r2, r3
 800c094:	d3df      	bcc.n	800c056 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800c096:	bf00      	nop
 800c098:	bf00      	nop
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	20008468 	.word	0x20008468
 800c0a4:	20008558 	.word	0x20008558
 800c0a8:	2000855c 	.word	0x2000855c
 800c0ac:	2000864c 	.word	0x2000864c

0800c0b0 <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint16_t size)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	6039      	str	r1, [r7, #0]
 800c0ba:	80fb      	strh	r3, [r7, #6]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	80bb      	strh	r3, [r7, #4]
    uint8_t x;
    uint16_t crc = initial_value;
 800c0c0:	88fb      	ldrh	r3, [r7, #6]
 800c0c2:	81fb      	strh	r3, [r7, #14]

    while(size--)
 800c0c4:	e023      	b.n	800c10e <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 800c0c6:	89fb      	ldrh	r3, [r7, #14]
 800c0c8:	0a1b      	lsrs	r3, r3, #8
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	1c59      	adds	r1, r3, #1
 800c0d2:	6039      	str	r1, [r7, #0]
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	4053      	eors	r3, r2
 800c0d8:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 800c0da:	7b7b      	ldrb	r3, [r7, #13]
 800c0dc:	091b      	lsrs	r3, r3, #4
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	7b7b      	ldrb	r3, [r7, #13]
 800c0e2:	4053      	eors	r3, r2
 800c0e4:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 800c0e6:	89fb      	ldrh	r3, [r7, #14]
 800c0e8:	021b      	lsls	r3, r3, #8
 800c0ea:	b21a      	sxth	r2, r3
 800c0ec:	7b7b      	ldrb	r3, [r7, #13]
 800c0ee:	b21b      	sxth	r3, r3
 800c0f0:	031b      	lsls	r3, r3, #12
 800c0f2:	b21b      	sxth	r3, r3
 800c0f4:	4053      	eors	r3, r2
 800c0f6:	b21a      	sxth	r2, r3
 800c0f8:	7b7b      	ldrb	r3, [r7, #13]
 800c0fa:	b21b      	sxth	r3, r3
 800c0fc:	015b      	lsls	r3, r3, #5
 800c0fe:	b21b      	sxth	r3, r3
 800c100:	4053      	eors	r3, r2
 800c102:	b21a      	sxth	r2, r3
 800c104:	7b7b      	ldrb	r3, [r7, #13]
 800c106:	b21b      	sxth	r3, r3
 800c108:	4053      	eors	r3, r2
 800c10a:	b21b      	sxth	r3, r3
 800c10c:	81fb      	strh	r3, [r7, #14]
    while(size--)
 800c10e:	88bb      	ldrh	r3, [r7, #4]
 800c110:	1e5a      	subs	r2, r3, #1
 800c112:	80ba      	strh	r2, [r7, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1d6      	bne.n	800c0c6 <crc16_CCITT+0x16>
    }

    return crc;
 800c118:	89fb      	ldrh	r3, [r7, #14]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
	...

0800c128 <fsp_init>:
uint8_t fsp_my_adr;

volatile uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	4603      	mov	r3, r0
 800c130:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 800c132:	4a06      	ldr	r2, [pc, #24]	@ (800c14c <fsp_init+0x24>)
 800c134:	79fb      	ldrb	r3, [r7, #7]
 800c136:	7013      	strb	r3, [r2, #0]

    fsp_decode_pos = 0;
 800c138:	4b05      	ldr	r3, [pc, #20]	@ (800c150 <fsp_init+0x28>)
 800c13a:	2200      	movs	r2, #0
 800c13c:	701a      	strb	r2, [r3, #0]
}
 800c13e:	bf00      	nop
 800c140:	370c      	adds	r7, #12
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	20008678 	.word	0x20008678
 800c150:	20008679 	.word	0x20008679

0800c154 <fsp_gen_cmd_pkt>:
        fsp_gen_pkt((void*)0, data, data_len, dst_adr, FSP_PKT_TYPE_DATA, fsp);
    }
}

void fsp_gen_cmd_pkt(uint8_t cmd, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af02      	add	r7, sp, #8
 800c15a:	603b      	str	r3, [r7, #0]
 800c15c:	4603      	mov	r3, r0
 800c15e:	71fb      	strb	r3, [r7, #7]
 800c160:	460b      	mov	r3, r1
 800c162:	71bb      	strb	r3, [r7, #6]
 800c164:	4613      	mov	r3, r2
 800c166:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800c168:	797b      	ldrb	r3, [r7, #5]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d10b      	bne.n	800c186 <fsp_gen_cmd_pkt+0x32>
    {
        fsp_gen_pkt(&cmd,(void*)0, 0, dst_adr, FSP_PKT_TYPE_CMD_WITH_ACK, fsp);
 800c16e:	79ba      	ldrb	r2, [r7, #6]
 800c170:	1df8      	adds	r0, r7, #7
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	9301      	str	r3, [sp, #4]
 800c176:	2304      	movs	r3, #4
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	4613      	mov	r3, r2
 800c17c:	2200      	movs	r2, #0
 800c17e:	2100      	movs	r1, #0
 800c180:	f000 f83a 	bl	800c1f8 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
    }
}
 800c184:	e00a      	b.n	800c19c <fsp_gen_cmd_pkt+0x48>
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
 800c186:	79ba      	ldrb	r2, [r7, #6]
 800c188:	1df8      	adds	r0, r7, #7
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	2303      	movs	r3, #3
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	4613      	mov	r3, r2
 800c194:	2200      	movs	r2, #0
 800c196:	2100      	movs	r1, #0
 800c198:	f000 f82e 	bl	800c1f8 <fsp_gen_pkt>
}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <fsp_gen_cmd_w_data_pkt>:

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af02      	add	r7, sp, #8
 800c1aa:	6039      	str	r1, [r7, #0]
 800c1ac:	4611      	mov	r1, r2
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	71fb      	strb	r3, [r7, #7]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	71bb      	strb	r3, [r7, #6]
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800c1bc:	7c3b      	ldrb	r3, [r7, #16]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d10b      	bne.n	800c1da <fsp_gen_cmd_w_data_pkt+0x36>
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 800c1c2:	7979      	ldrb	r1, [r7, #5]
 800c1c4:	79ba      	ldrb	r2, [r7, #6]
 800c1c6:	1df8      	adds	r0, r7, #7
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	9301      	str	r3, [sp, #4]
 800c1cc:	2308      	movs	r3, #8
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	f000 f810 	bl	800c1f8 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
    }
}
 800c1d8:	e00a      	b.n	800c1f0 <fsp_gen_cmd_w_data_pkt+0x4c>
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 800c1da:	7979      	ldrb	r1, [r7, #5]
 800c1dc:	79ba      	ldrb	r2, [r7, #6]
 800c1de:	1df8      	adds	r0, r7, #7
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	9301      	str	r3, [sp, #4]
 800c1e4:	2307      	movs	r3, #7
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	f000 f804 	bl	800c1f8 <fsp_gen_pkt>
}
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <fsp_gen_pkt>:
    fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}


void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	4611      	mov	r1, r2
 800c204:	461a      	mov	r2, r3
 800c206:	460b      	mov	r3, r1
 800c208:	71fb      	strb	r3, [r7, #7]
 800c20a:	4613      	mov	r3, r2
 800c20c:	71bb      	strb	r3, [r7, #6]
    fsp->sod        = FSP_PKT_SOD;
 800c20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c210:	22ca      	movs	r2, #202	@ 0xca
 800c212:	701a      	strb	r2, [r3, #0]
    fsp->src_adr    = fsp_my_adr;
 800c214:	4b25      	ldr	r3, [pc, #148]	@ (800c2ac <fsp_gen_pkt+0xb4>)
 800c216:	781a      	ldrb	r2, [r3, #0]
 800c218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21a:	705a      	strb	r2, [r3, #1]
    fsp->dst_adr    = dst_adr;
 800c21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21e:	79ba      	ldrb	r2, [r7, #6]
 800c220:	709a      	strb	r2, [r3, #2]
    fsp->length     = payload_len;
 800c222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c224:	79fa      	ldrb	r2, [r7, #7]
 800c226:	70da      	strb	r2, [r3, #3]
    fsp->type       = type;
 800c228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c22a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c22e:	711a      	strb	r2, [r3, #4]

    uint8_t i = 0;
 800c230:	2300      	movs	r3, #0
 800c232:	75fb      	strb	r3, [r7, #23]
    uint8_t j = 0;
 800c234:	2300      	movs	r3, #0
 800c236:	75bb      	strb	r3, [r7, #22]

    // Copy cmd payload
    if (cmd != NULL) {
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00e      	beq.n	800c25c <fsp_gen_pkt+0x64>
        fsp->length++; // length + byte cmd
 800c23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c240:	78db      	ldrb	r3, [r3, #3]
 800c242:	3301      	adds	r3, #1
 800c244:	b2da      	uxtb	r2, r3
 800c246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c248:	70da      	strb	r2, [r3, #3]
        fsp->payload[j++] = *cmd;
 800c24a:	7dbb      	ldrb	r3, [r7, #22]
 800c24c:	1c5a      	adds	r2, r3, #1
 800c24e:	75ba      	strb	r2, [r7, #22]
 800c250:	4619      	mov	r1, r3
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	781a      	ldrb	r2, [r3, #0]
 800c256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c258:	440b      	add	r3, r1
 800c25a:	715a      	strb	r2, [r3, #5]
    }

    // Copy payload fsp->payload
    for(i=0; i<payload_len; i++)
 800c25c:	2300      	movs	r3, #0
 800c25e:	75fb      	strb	r3, [r7, #23]
 800c260:	e00d      	b.n	800c27e <fsp_gen_pkt+0x86>
    {
        fsp->payload[j++] = payload[i];
 800c262:	7dfb      	ldrb	r3, [r7, #23]
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	441a      	add	r2, r3
 800c268:	7dbb      	ldrb	r3, [r7, #22]
 800c26a:	1c59      	adds	r1, r3, #1
 800c26c:	75b9      	strb	r1, [r7, #22]
 800c26e:	4619      	mov	r1, r3
 800c270:	7812      	ldrb	r2, [r2, #0]
 800c272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c274:	440b      	add	r3, r1
 800c276:	715a      	strb	r2, [r3, #5]
    for(i=0; i<payload_len; i++)
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	3301      	adds	r3, #1
 800c27c:	75fb      	strb	r3, [r7, #23]
 800c27e:	7dfa      	ldrb	r2, [r7, #23]
 800c280:	79fb      	ldrb	r3, [r7, #7]
 800c282:	429a      	cmp	r2, r3
 800c284:	d3ed      	bcc.n	800c262 <fsp_gen_pkt+0x6a>
    }

    fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 800c286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c288:	1c59      	adds	r1, r3, #1
 800c28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28c:	78db      	ldrb	r3, [r3, #3]
 800c28e:	3304      	adds	r3, #4
 800c290:	b29b      	uxth	r3, r3
 800c292:	461a      	mov	r2, r3
 800c294:	2000      	movs	r0, #0
 800c296:	f7ff ff0b 	bl	800c0b0 <crc16_CCITT>
 800c29a:	4603      	mov	r3, r0
 800c29c:	461a      	mov	r2, r3
 800c29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a0:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

}
 800c2a4:	bf00      	nop
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20008678 	.word	0x20008678

0800c2b0 <frame_encode>:


void frame_encode(fsp_packet_t *fsp, uint8_t *frame, uint8_t *frame_len)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b0c8      	sub	sp, #288	@ 0x120
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c2be:	6018      	str	r0, [r3, #0]
 800c2c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c2c8:	6019      	str	r1, [r3, #0]
 800c2ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800c2d2:	601a      	str	r2, [r3, #0]
    //frame
    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t encoded_length = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    encoded_frame[encoded_length++] = fsp->sod;
 800c2da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2de:	1c5a      	adds	r2, r3, #1
 800c2e0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	7819      	ldrb	r1, [r3, #0]
 800c2f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c2f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c2fa:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->src_adr;
 800c2fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c306:	461a      	mov	r2, r3
 800c308:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c30c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	7859      	ldrb	r1, [r3, #1]
 800c314:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c318:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c31c:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->dst_adr;
 800c31e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c322:	1c5a      	adds	r2, r3, #1
 800c324:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c328:	461a      	mov	r2, r3
 800c32a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c32e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	7899      	ldrb	r1, [r3, #2]
 800c336:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c33a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c33e:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->length;
 800c340:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c344:	1c5a      	adds	r2, r3, #1
 800c346:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c34a:	461a      	mov	r2, r3
 800c34c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c350:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	78d9      	ldrb	r1, [r3, #3]
 800c358:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c35c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c360:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->type;
 800c362:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c36c:	461a      	mov	r2, r3
 800c36e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c372:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	7919      	ldrb	r1, [r3, #4]
 800c37a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c37e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c382:	5499      	strb	r1, [r3, r2]

    for(int i=0; i<fsp->length; i++)
 800c384:	2300      	movs	r3, #0
 800c386:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c38a:	e088      	b.n	800c49e <frame_encode+0x1ee>
    {
        if (fsp->payload[i] == FSP_PKT_SOD) {
 800c38c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c390:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c39a:	4413      	add	r3, r2
 800c39c:	3305      	adds	r3, #5
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	2bca      	cmp	r3, #202	@ 0xca
 800c3a2:	d118      	bne.n	800c3d6 <frame_encode+0x126>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c3a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3a8:	1c5a      	adds	r2, r3, #1
 800c3aa:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c3b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c3b8:	21bd      	movs	r1, #189	@ 0xbd
 800c3ba:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800c3bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3c0:	1c5a      	adds	r2, r3, #1
 800c3c2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c3cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c3d0:	21dc      	movs	r1, #220	@ 0xdc
 800c3d2:	5499      	strb	r1, [r3, r2]
 800c3d4:	e05e      	b.n	800c494 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_EOF) {
 800c3d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c3da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c3e4:	4413      	add	r3, r2
 800c3e6:	3305      	adds	r3, #5
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2bef      	cmp	r3, #239	@ 0xef
 800c3ec:	d118      	bne.n	800c420 <frame_encode+0x170>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c3ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3f2:	1c5a      	adds	r2, r3, #1
 800c3f4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c3fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c402:	21bd      	movs	r1, #189	@ 0xbd
 800c404:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800c406:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c40a:	1c5a      	adds	r2, r3, #1
 800c40c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c410:	461a      	mov	r2, r3
 800c412:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c416:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c41a:	21de      	movs	r1, #222	@ 0xde
 800c41c:	5499      	strb	r1, [r3, r2]
 800c41e:	e039      	b.n	800c494 <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_ESC) {
 800c420:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c424:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c42e:	4413      	add	r3, r2
 800c430:	3305      	adds	r3, #5
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2bbd      	cmp	r3, #189	@ 0xbd
 800c436:	d118      	bne.n	800c46a <frame_encode+0x1ba>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c438:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c43c:	1c5a      	adds	r2, r3, #1
 800c43e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c442:	461a      	mov	r2, r3
 800c444:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c448:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c44c:	21bd      	movs	r1, #189	@ 0xbd
 800c44e:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800c450:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c454:	1c5a      	adds	r2, r3, #1
 800c456:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c45a:	461a      	mov	r2, r3
 800c45c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c460:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c464:	21db      	movs	r1, #219	@ 0xdb
 800c466:	5499      	strb	r1, [r3, r2]
 800c468:	e014      	b.n	800c494 <frame_encode+0x1e4>
        } else {
            encoded_frame[encoded_length++] = fsp->payload[i];
 800c46a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c46e:	1c5a      	adds	r2, r3, #1
 800c470:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c474:	4619      	mov	r1, r3
 800c476:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c47a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c484:	4413      	add	r3, r2
 800c486:	3305      	adds	r3, #5
 800c488:	781a      	ldrb	r2, [r3, #0]
 800c48a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c48e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c492:	545a      	strb	r2, [r3, r1]
    for(int i=0; i<fsp->length; i++)
 800c494:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c498:	3301      	adds	r3, #1
 800c49a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800c49e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c4a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	78db      	ldrb	r3, [r3, #3]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	f6ff af6b 	blt.w	800c38c <frame_encode+0xdc>
        }
    }

    // CRC16
    uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 800c4b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c4ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800c4c4:	0a1b      	lsrs	r3, r3, #8
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 800c4cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c4d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800c4da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

    if (crc_msb == FSP_PKT_SOD) {
 800c4de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4e2:	2bca      	cmp	r3, #202	@ 0xca
 800c4e4:	d118      	bne.n	800c518 <frame_encode+0x268>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c4e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4ea:	1c5a      	adds	r2, r3, #1
 800c4ec:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c4f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c4fa:	21bd      	movs	r1, #189	@ 0xbd
 800c4fc:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800c4fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c502:	1c5a      	adds	r2, r3, #1
 800c504:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c508:	461a      	mov	r2, r3
 800c50a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c50e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c512:	21dc      	movs	r1, #220	@ 0xdc
 800c514:	5499      	strb	r1, [r3, r2]
 800c516:	e046      	b.n	800c5a6 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_EOF) {
 800c518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c51c:	2bef      	cmp	r3, #239	@ 0xef
 800c51e:	d118      	bne.n	800c552 <frame_encode+0x2a2>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c520:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c524:	1c5a      	adds	r2, r3, #1
 800c526:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c52a:	461a      	mov	r2, r3
 800c52c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c530:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c534:	21bd      	movs	r1, #189	@ 0xbd
 800c536:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800c538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c542:	461a      	mov	r2, r3
 800c544:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c548:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c54c:	21de      	movs	r1, #222	@ 0xde
 800c54e:	5499      	strb	r1, [r3, r2]
 800c550:	e029      	b.n	800c5a6 <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_ESC) {
 800c552:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c556:	2bbd      	cmp	r3, #189	@ 0xbd
 800c558:	d118      	bne.n	800c58c <frame_encode+0x2dc>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c55a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c564:	461a      	mov	r2, r3
 800c566:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c56a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c56e:	21bd      	movs	r1, #189	@ 0xbd
 800c570:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800c572:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c576:	1c5a      	adds	r2, r3, #1
 800c578:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c57c:	461a      	mov	r2, r3
 800c57e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c582:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c586:	21db      	movs	r1, #219	@ 0xdb
 800c588:	5499      	strb	r1, [r3, r2]
 800c58a:	e00c      	b.n	800c5a6 <frame_encode+0x2f6>
    } else {
        encoded_frame[encoded_length++] = crc_msb;
 800c58c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c590:	1c5a      	adds	r2, r3, #1
 800c592:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c596:	4619      	mov	r1, r3
 800c598:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c59c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c5a0:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800c5a4:	545a      	strb	r2, [r3, r1]
    }

    if (crc_lsb == FSP_PKT_SOD) {
 800c5a6:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c5aa:	2bca      	cmp	r3, #202	@ 0xca
 800c5ac:	d118      	bne.n	800c5e0 <frame_encode+0x330>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c5ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5b2:	1c5a      	adds	r2, r3, #1
 800c5b4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c5be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c5c2:	21bd      	movs	r1, #189	@ 0xbd
 800c5c4:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800c5c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c5d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c5da:	21dc      	movs	r1, #220	@ 0xdc
 800c5dc:	5499      	strb	r1, [r3, r2]
 800c5de:	e046      	b.n	800c66e <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_EOF) {
 800c5e0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c5e4:	2bef      	cmp	r3, #239	@ 0xef
 800c5e6:	d118      	bne.n	800c61a <frame_encode+0x36a>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c5e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5ec:	1c5a      	adds	r2, r3, #1
 800c5ee:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c5f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c5fc:	21bd      	movs	r1, #189	@ 0xbd
 800c5fe:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800c600:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c60a:	461a      	mov	r2, r3
 800c60c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c610:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c614:	21de      	movs	r1, #222	@ 0xde
 800c616:	5499      	strb	r1, [r3, r2]
 800c618:	e029      	b.n	800c66e <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_ESC) {
 800c61a:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c61e:	2bbd      	cmp	r3, #189	@ 0xbd
 800c620:	d118      	bne.n	800c654 <frame_encode+0x3a4>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c622:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c62c:	461a      	mov	r2, r3
 800c62e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c632:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c636:	21bd      	movs	r1, #189	@ 0xbd
 800c638:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800c63a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c644:	461a      	mov	r2, r3
 800c646:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c64a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c64e:	21db      	movs	r1, #219	@ 0xdb
 800c650:	5499      	strb	r1, [r3, r2]
 800c652:	e00c      	b.n	800c66e <frame_encode+0x3be>
    } else {
        encoded_frame[encoded_length++] = crc_lsb;
 800c654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c658:	1c5a      	adds	r2, r3, #1
 800c65a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c65e:	4619      	mov	r1, r3
 800c660:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c664:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c668:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800c66c:	545a      	strb	r2, [r3, r1]
    }

    encoded_frame[encoded_length++] = FSP_PKT_EOF;
 800c66e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c672:	1c5a      	adds	r2, r3, #1
 800c674:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c678:	461a      	mov	r2, r3
 800c67a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c67e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c682:	21ef      	movs	r1, #239	@ 0xef
 800c684:	5499      	strb	r1, [r3, r2]

    memcpy(frame, encoded_frame, encoded_length);
 800c686:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800c68a:	f107 0114 	add.w	r1, r7, #20
 800c68e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c692:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c696:	6818      	ldr	r0, [r3, #0]
 800c698:	f003 fcdb 	bl	8010052 <memcpy>
    *frame_len = encoded_length;
 800c69c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c6a0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800c6aa:	701a      	strb	r2, [r3, #0]
}
 800c6ac:	bf00      	nop
 800c6ae:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
	...

0800c6b8 <frame_decode>:
                return FSP_PKT_ERROR;
            }
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c6c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c6c8:	6018      	str	r0, [r3, #0]
 800c6ca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c6ce:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c6d8:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c6dc:	460a      	mov	r2, r1
 800c6de:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];


	if (length < FSP_PKT_MIN_LENGTH - 2) {
 800c6f2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c6f6:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b05      	cmp	r3, #5
 800c6fe:	d862      	bhi.n	800c7c6 <frame_decode+0x10e>
	        return FSP_PKT_INVALID;
 800c700:	2302      	movs	r3, #2
 800c702:	e133      	b.n	800c96c <frame_decode+0x2b4>
	}


	while (i < length){
        uint8_t byte = buffer[i++];
 800c704:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c708:	1c5a      	adds	r2, r3, #1
 800c70a:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c70e:	461a      	mov	r2, r3
 800c710:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c714:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4413      	add	r3, r2
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (escape) {
 800c722:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800c726:	2b00      	cmp	r3, #0
 800c728:	d038      	beq.n	800c79c <frame_decode+0xe4>
            if (byte == FSP_PKT_TSOD) {
 800c72a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c72e:	2bdc      	cmp	r3, #220	@ 0xdc
 800c730:	d10c      	bne.n	800c74c <frame_decode+0x94>
                decoded_payload[j++] = FSP_PKT_SOD;
 800c732:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c73c:	461a      	mov	r2, r3
 800c73e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c742:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c746:	21ca      	movs	r1, #202	@ 0xca
 800c748:	5499      	strb	r1, [r3, r2]
 800c74a:	e023      	b.n	800c794 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TEOF) {
 800c74c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c750:	2bde      	cmp	r3, #222	@ 0xde
 800c752:	d10c      	bne.n	800c76e <frame_decode+0xb6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800c754:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c75e:	461a      	mov	r2, r3
 800c760:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c764:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c768:	21ef      	movs	r1, #239	@ 0xef
 800c76a:	5499      	strb	r1, [r3, r2]
 800c76c:	e012      	b.n	800c794 <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TESC) {
 800c76e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c772:	2bdb      	cmp	r3, #219	@ 0xdb
 800c774:	d10c      	bne.n	800c790 <frame_decode+0xd8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800c776:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c77a:	1c5a      	adds	r2, r3, #1
 800c77c:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c780:	461a      	mov	r2, r3
 800c782:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c786:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c78a:	21bd      	movs	r1, #189	@ 0xbd
 800c78c:	5499      	strb	r1, [r3, r2]
 800c78e:	e001      	b.n	800c794 <frame_decode+0xdc>
            } else {
            	return FSP_PKT_INVALID;
 800c790:	2302      	movs	r3, #2
 800c792:	e0eb      	b.n	800c96c <frame_decode+0x2b4>
            }
            escape = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800c79a:	e014      	b.n	800c7c6 <frame_decode+0x10e>
        } else if (byte == FSP_PKT_ESC) {
 800c79c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c7a0:	2bbd      	cmp	r3, #189	@ 0xbd
 800c7a2:	d103      	bne.n	800c7ac <frame_decode+0xf4>
        	escape = 1;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800c7aa:	e00c      	b.n	800c7c6 <frame_decode+0x10e>
        } else {
            decoded_payload[j++] = byte;
 800c7ac:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c7b0:	1c5a      	adds	r2, r3, #1
 800c7b2:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7bc:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c7c0:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800c7c4:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800c7c6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7ca:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c7ce:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d395      	bcc.n	800c704 <frame_decode+0x4c>
        }
	}

    i = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800c7de:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c7e2:	1c5a      	adds	r2, r3, #1
 800c7e4:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7ee:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c7f2:	5c9a      	ldrb	r2, [r3, r2]
 800c7f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c7f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7fc:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800c7fe:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c802:	1c5a      	adds	r2, r3, #1
 800c804:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c808:	461a      	mov	r2, r3
 800c80a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c80e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c812:	5c9a      	ldrb	r2, [r3, r2]
 800c814:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c81c:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800c81e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c822:	1c5a      	adds	r2, r3, #1
 800c824:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c828:	461a      	mov	r2, r3
 800c82a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c82e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c832:	5c9a      	ldrb	r2, [r3, r2]
 800c834:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c83c:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800c83e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c842:	1c5a      	adds	r2, r3, #1
 800c844:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c848:	461a      	mov	r2, r3
 800c84a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c84e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c852:	5c9a      	ldrb	r2, [r3, r2]
 800c854:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c85c:	711a      	strb	r2, [r3, #4]

    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 800c85e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c866:	78db      	ldrb	r3, [r3, #3]
 800c868:	2bf7      	cmp	r3, #247	@ 0xf7
 800c86a:	d80a      	bhi.n	800c882 <frame_decode+0x1ca>
 800c86c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c874:	78db      	ldrb	r3, [r3, #3]
 800c876:	461a      	mov	r2, r3
 800c878:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c87c:	3b06      	subs	r3, #6
 800c87e:	429a      	cmp	r2, r3
 800c880:	d001      	beq.n	800c886 <frame_decode+0x1ce>
        return FSP_PKT_WRONG_LENGTH;
 800c882:	2306      	movs	r3, #6
 800c884:	e072      	b.n	800c96c <frame_decode+0x2b4>
    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800c886:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c88a:	f107 0210 	add.w	r2, r7, #16
 800c88e:	18d1      	adds	r1, r2, r3
 800c890:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c898:	78db      	ldrb	r3, [r3, #3]
 800c89a:	461a      	mov	r2, r3
 800c89c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a0:	3305      	adds	r3, #5
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f003 fbd5 	bl	8010052 <memcpy>
    i += fsp_pkt.length;
 800c8a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c8ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8b0:	78da      	ldrb	r2, [r3, #3]
 800c8b2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c8b6:	4413      	add	r3, r2
 800c8b8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    //CRC
    uint16_t crc_received = (uint16_t)(decoded_payload[i++] << 8);
 800c8bc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c8c0:	1c5a      	adds	r2, r3, #1
 800c8c2:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c8cc:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c8d0:	5c9b      	ldrb	r3, [r3, r2]
 800c8d2:	021b      	lsls	r3, r3, #8
 800c8d4:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
    crc_received |= (uint16_t)(decoded_payload[i++]);
 800c8d8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c8dc:	1c5a      	adds	r2, r3, #1
 800c8de:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c8e8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c8ec:	5c9b      	ldrb	r3, [r3, r2]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a


    // CAL CRC
    uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp_pkt.src_adr, fsp_pkt.length + 4);
 800c8fa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c8fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c902:	78db      	ldrb	r3, [r3, #3]
 800c904:	3304      	adds	r3, #4
 800c906:	b29a      	uxth	r2, r3
 800c908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c90c:	3301      	adds	r3, #1
 800c90e:	4619      	mov	r1, r3
 800c910:	2000      	movs	r0, #0
 800c912:	f7ff fbcd 	bl	800c0b0 <crc16_CCITT>
 800c916:	4603      	mov	r3, r0
 800c918:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208


    // CHECK CRC
    if (crc_received != crc_calculated) {
 800c91c:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 800c920:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 800c924:	429a      	cmp	r2, r3
 800c926:	d001      	beq.n	800c92c <frame_decode+0x274>
        return FSP_PKT_CRC_FAIL;
 800c928:	2305      	movs	r3, #5
 800c92a:	e01f      	b.n	800c96c <frame_decode+0x2b4>
    }

    // Address
    if (fsp_pkt.dst_adr != fsp_my_adr) {
 800c92c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c934:	789a      	ldrb	r2, [r3, #2]
 800c936:	4b10      	ldr	r3, [pc, #64]	@ (800c978 <frame_decode+0x2c0>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d001      	beq.n	800c942 <frame_decode+0x28a>
        return FSP_PKT_WRONG_ADR;
 800c93e:	2303      	movs	r3, #3
 800c940:	e014      	b.n	800c96c <frame_decode+0x2b4>
    }

    *pkt = fsp_pkt;
 800c942:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c946:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c954:	4610      	mov	r0, r2
 800c956:	4619      	mov	r1, r3
 800c958:	23fe      	movs	r3, #254	@ 0xfe
 800c95a:	461a      	mov	r2, r3
 800c95c:	f003 fb79 	bl	8010052 <memcpy>


    frame_processing(&fsp_pkt);
 800c960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c964:	4618      	mov	r0, r3
 800c966:	f000 f905 	bl	800cb74 <frame_processing>


    return 0;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	20008678 	.word	0x20008678

0800c97c <frame_decode_rs422>:



int frame_decode_rs422(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800c97c:	b580      	push	{r7, lr}
 800c97e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800c982:	af00      	add	r7, sp, #0
 800c984:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c988:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c98c:	6018      	str	r0, [r3, #0]
 800c98e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c992:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800c996:	601a      	str	r2, [r3, #0]
 800c998:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c99c:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c9a0:	460a      	mov	r2, r1
 800c9a2:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
//	if (length < FSP_PKT_MIN_LENGTH - 2) {
//	        return FSP_PKT_INVALID;
//	}


	while (i < length){
 800c9b6:	e060      	b.n	800ca7a <frame_decode_rs422+0xfe>
        uint8_t byte = buffer[i++];
 800c9b8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c9bc:	1c5a      	adds	r2, r3, #1
 800c9be:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c9c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (escape) {
 800c9d6:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d038      	beq.n	800ca50 <frame_decode_rs422+0xd4>
            if (byte == FSP_PKT_TSOD) {
 800c9de:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800c9e2:	2bdc      	cmp	r3, #220	@ 0xdc
 800c9e4:	d10c      	bne.n	800ca00 <frame_decode_rs422+0x84>
                decoded_payload[j++] = FSP_PKT_SOD;
 800c9e6:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c9ea:	1c5a      	adds	r2, r3, #1
 800c9ec:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c9f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c9fa:	21ca      	movs	r1, #202	@ 0xca
 800c9fc:	5499      	strb	r1, [r3, r2]
 800c9fe:	e023      	b.n	800ca48 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TEOF) {
 800ca00:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800ca04:	2bde      	cmp	r3, #222	@ 0xde
 800ca06:	d10c      	bne.n	800ca22 <frame_decode_rs422+0xa6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800ca08:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800ca0c:	1c5a      	adds	r2, r3, #1
 800ca0e:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800ca12:	461a      	mov	r2, r3
 800ca14:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800ca1c:	21ef      	movs	r1, #239	@ 0xef
 800ca1e:	5499      	strb	r1, [r3, r2]
 800ca20:	e012      	b.n	800ca48 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TESC) {
 800ca22:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800ca26:	2bdb      	cmp	r3, #219	@ 0xdb
 800ca28:	d10c      	bne.n	800ca44 <frame_decode_rs422+0xc8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800ca2a:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800ca2e:	1c5a      	adds	r2, r3, #1
 800ca30:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800ca34:	461a      	mov	r2, r3
 800ca36:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800ca3e:	21bd      	movs	r1, #189	@ 0xbd
 800ca40:	5499      	strb	r1, [r3, r2]
 800ca42:	e001      	b.n	800ca48 <frame_decode_rs422+0xcc>
            } else {
            	return FSP_PKT_INVALID;
 800ca44:	2302      	movs	r3, #2
 800ca46:	e08f      	b.n	800cb68 <frame_decode_rs422+0x1ec>
            }
            escape = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800ca4e:	e014      	b.n	800ca7a <frame_decode_rs422+0xfe>
        } else if (byte == FSP_PKT_ESC) {
 800ca50:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800ca54:	2bbd      	cmp	r3, #189	@ 0xbd
 800ca56:	d103      	bne.n	800ca60 <frame_decode_rs422+0xe4>
        	escape = 1;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800ca5e:	e00c      	b.n	800ca7a <frame_decode_rs422+0xfe>
        } else {
            decoded_payload[j++] = byte;
 800ca60:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800ca64:	1c5a      	adds	r2, r3, #1
 800ca66:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800ca74:	f897 220c 	ldrb.w	r2, [r7, #524]	@ 0x20c
 800ca78:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800ca7a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800ca7e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800ca82:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d395      	bcc.n	800c9b8 <frame_decode_rs422+0x3c>
        }
	}

    i = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800ca92:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800ca96:	1c5a      	adds	r2, r3, #1
 800ca98:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800caa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800caa6:	5c9a      	ldrb	r2, [r3, r2]
 800caa8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800caac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cab0:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800cab2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800cab6:	1c5a      	adds	r2, r3, #1
 800cab8:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800cabc:	461a      	mov	r2, r3
 800cabe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cac2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800cac6:	5c9a      	ldrb	r2, [r3, r2]
 800cac8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cacc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cad0:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800cad2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800cadc:	461a      	mov	r2, r3
 800cade:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cae2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800cae6:	5c9a      	ldrb	r2, [r3, r2]
 800cae8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800caec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800caf0:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800caf2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800caf6:	1c5a      	adds	r2, r3, #1
 800caf8:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800cafc:	461a      	mov	r2, r3
 800cafe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cb02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800cb06:	5c9a      	ldrb	r2, [r3, r2]
 800cb08:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cb0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb10:	711a      	strb	r2, [r3, #4]

//    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
//        return FSP_PKT_WRONG_LENGTH;
//    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800cb12:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800cb16:	f107 0214 	add.w	r2, r7, #20
 800cb1a:	18d1      	adds	r1, r2, r3
 800cb1c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cb20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb24:	78db      	ldrb	r3, [r3, #3]
 800cb26:	461a      	mov	r2, r3
 800cb28:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800cb2c:	3305      	adds	r3, #5
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f003 fa8f 	bl	8010052 <memcpy>
    i += fsp_pkt.length;
 800cb34:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cb38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb3c:	78da      	ldrb	r2, [r3, #3]
 800cb3e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800cb42:	4413      	add	r3, r2
 800cb44:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
//    // Address
//    if (fsp_pkt.dst_adr != fsp_my_adr) {
//        return FSP_PKT_WRONG_ADR;
//    }

    *pkt = fsp_pkt;
 800cb48:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cb4c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800cb56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb5a:	4610      	mov	r0, r2
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	23fe      	movs	r3, #254	@ 0xfe
 800cb60:	461a      	mov	r2, r3
 800cb62:	f003 fa76 	bl	8010052 <memcpy>


    return 0;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <frame_processing>:


char pos_str2[10];

int frame_processing(fsp_packet_t *fsp_pkt){
 800cb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb78:	f5ad 6de1 	sub.w	sp, sp, #1800	@ 0x708
 800cb7c:	af34      	add	r7, sp, #208	@ 0xd0
 800cb7e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cb82:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cb86:	6018      	str	r0, [r3, #0]


	switch (fsp_pkt->src_adr){
 800cb88:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cb8c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	785b      	ldrb	r3, [r3, #1]
 800cb94:	3b02      	subs	r3, #2
 800cb96:	2b03      	cmp	r3, #3
 800cb98:	f202 81a6 	bhi.w	800eee8 <frame_processing+0x2374>
 800cb9c:	a201      	add	r2, pc, #4	@ (adr r2, 800cba4 <frame_processing+0x30>)
 800cb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba2:	bf00      	nop
 800cba4:	0800cbb5 	.word	0x0800cbb5
 800cba8:	0800d78f 	.word	0x0800d78f
 800cbac:	0800e021 	.word	0x0800e021
 800cbb0:	0800e029 	.word	0x0800e029
		case FSP_ADR_PMU:
			switch (fsp_pkt->type)
 800cbb4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cbb8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	791b      	ldrb	r3, [r3, #4]
 800cbc0:	2b05      	cmp	r3, #5
 800cbc2:	d003      	beq.n	800cbcc <frame_processing+0x58>
 800cbc4:	2b07      	cmp	r3, #7
 800cbc6:	d010      	beq.n	800cbea <frame_processing+0x76>
 800cbc8:	f000 bdd7 	b.w	800d77a <frame_processing+0xc06>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800cbcc:	f7f5 fb56 	bl	800227c <clear_send_flag>

//                    if (uart_choose_uart5) {
//                    	Uart_sendstring(UART5, "\nPMU_ACK\r\n> ");
//                    }
                    if (uart_choose_usart2) {
 800cbd0:	4b9d      	ldr	r3, [pc, #628]	@ (800ce48 <frame_processing+0x2d4>)
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d003      	beq.n	800cbe2 <frame_processing+0x6e>
                    	Uart_sendstring(USART2, "\nPMU_ACK\r\n> ");
 800cbda:	499c      	ldr	r1, [pc, #624]	@ (800ce4c <frame_processing+0x2d8>)
 800cbdc:	489c      	ldr	r0, [pc, #624]	@ (800ce50 <frame_processing+0x2dc>)
 800cbde:	f7f5 fa0b 	bl	8001ff8 <Uart_sendstring>
                    }
					Uart_sendstring(UART4, "\nPMU_ACK\r\n> ");
 800cbe2:	499a      	ldr	r1, [pc, #616]	@ (800ce4c <frame_processing+0x2d8>)
 800cbe4:	489b      	ldr	r0, [pc, #620]	@ (800ce54 <frame_processing+0x2e0>)
 800cbe6:	f7f5 fa07 	bl	8001ff8 <Uart_sendstring>

				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800cbea:	f7f5 fb47 	bl	800227c <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800cbee:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cbf2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	795b      	ldrb	r3, [r3, #5]
 800cbfa:	2b08      	cmp	r3, #8
 800cbfc:	dc1a      	bgt.n	800cc34 <frame_processing+0xc0>
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f2c0 85c0 	blt.w	800d784 <frame_processing+0xc10>
 800cc04:	2b08      	cmp	r3, #8
 800cc06:	f200 85bd 	bhi.w	800d784 <frame_processing+0xc10>
 800cc0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc10 <frame_processing+0x9c>)
 800cc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc10:	0800cc3d 	.word	0x0800cc3d
 800cc14:	0800ccbd 	.word	0x0800ccbd
 800cc18:	0800cf0f 	.word	0x0800cf0f
 800cc1c:	0800d08f 	.word	0x0800d08f
 800cc20:	0800d181 	.word	0x0800d181
 800cc24:	0800d785 	.word	0x0800d785
 800cc28:	0800d785 	.word	0x0800d785
 800cc2c:	0800d785 	.word	0x0800d785
 800cc30:	0800d251 	.word	0x0800d251
 800cc34:	2bff      	cmp	r3, #255	@ 0xff
 800cc36:	d021      	beq.n	800cc7c <frame_processing+0x108>

							    }
							    break;
					}

					break;
 800cc38:	f000 bda4 	b.w	800d784 <frame_processing+0xc10>
							sprintf(buffer_0x00, "PMU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800cc3c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cc40:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	799b      	ldrb	r3, [r3, #6]
 800cc48:	461a      	mov	r2, r3
 800cc4a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cc4e:	4982      	ldr	r1, [pc, #520]	@ (800ce58 <frame_processing+0x2e4>)
 800cc50:	4618      	mov	r0, r3
 800cc52:	f003 f91b 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800cc56:	4b7c      	ldr	r3, [pc, #496]	@ (800ce48 <frame_processing+0x2d4>)
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d005      	beq.n	800cc6c <frame_processing+0xf8>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800cc60:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cc64:	4619      	mov	r1, r3
 800cc66:	487a      	ldr	r0, [pc, #488]	@ (800ce50 <frame_processing+0x2dc>)
 800cc68:	f7f5 f9c6 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x00);
 800cc6c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cc70:	4619      	mov	r1, r3
 800cc72:	4878      	ldr	r0, [pc, #480]	@ (800ce54 <frame_processing+0x2e0>)
 800cc74:	f7f5 f9c0 	bl	8001ff8 <Uart_sendstring>
							break;
 800cc78:	f000 bd7e 	b.w	800d778 <frame_processing+0xc04>
							sprintf(buffer_0xFF, "PMU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800cc7c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cc80:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	799b      	ldrb	r3, [r3, #6]
 800cc88:	461a      	mov	r2, r3
 800cc8a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cc8e:	4973      	ldr	r1, [pc, #460]	@ (800ce5c <frame_processing+0x2e8>)
 800cc90:	4618      	mov	r0, r3
 800cc92:	f003 f8fb 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800cc96:	4b6c      	ldr	r3, [pc, #432]	@ (800ce48 <frame_processing+0x2d4>)
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d005      	beq.n	800ccac <frame_processing+0x138>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800cca0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cca4:	4619      	mov	r1, r3
 800cca6:	486a      	ldr	r0, [pc, #424]	@ (800ce50 <frame_processing+0x2dc>)
 800cca8:	f7f5 f9a6 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0xFF);
 800ccac:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4868      	ldr	r0, [pc, #416]	@ (800ce54 <frame_processing+0x2e0>)
 800ccb4:	f7f5 f9a0 	bl	8001ff8 <Uart_sendstring>
							break;
 800ccb8:	f000 bd5e 	b.w	800d778 <frame_processing+0xc04>
						    int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800ccbc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ccc0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	799b      	ldrb	r3, [r3, #6]
 800ccc8:	021b      	lsls	r3, r3, #8
 800ccca:	b21a      	sxth	r2, r3
 800cccc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ccd0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	79db      	ldrb	r3, [r3, #7]
 800ccd8:	b21b      	sxth	r3, r3
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	f8a7 356e 	strh.w	r3, [r7, #1390]	@ 0x56e
						    int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800cce0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cce4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	7a1b      	ldrb	r3, [r3, #8]
 800ccec:	021b      	lsls	r3, r3, #8
 800ccee:	b21a      	sxth	r2, r3
 800ccf0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ccf4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	7a5b      	ldrb	r3, [r3, #9]
 800ccfc:	b21b      	sxth	r3, r3
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	f8a7 356c 	strh.w	r3, [r7, #1388]	@ 0x56c
						    int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800cd04:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cd08:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	7a9b      	ldrb	r3, [r3, #10]
 800cd10:	021b      	lsls	r3, r3, #8
 800cd12:	b21a      	sxth	r2, r3
 800cd14:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cd18:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	7adb      	ldrb	r3, [r3, #11]
 800cd20:	b21b      	sxth	r3, r3
 800cd22:	4313      	orrs	r3, r2
 800cd24:	f8a7 356a 	strh.w	r3, [r7, #1386]	@ 0x56a
						    int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800cd28:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cd2c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	7b1b      	ldrb	r3, [r3, #12]
 800cd34:	021b      	lsls	r3, r3, #8
 800cd36:	b21a      	sxth	r2, r3
 800cd38:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cd3c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	7b5b      	ldrb	r3, [r3, #13]
 800cd44:	b21b      	sxth	r3, r3
 800cd46:	4313      	orrs	r3, r2
 800cd48:	f8a7 3568 	strh.w	r3, [r7, #1384]	@ 0x568
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cd4c:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	da03      	bge.n	800cd5c <frame_processing+0x1e8>
 800cd54:	4b42      	ldr	r3, [pc, #264]	@ (800ce60 <frame_processing+0x2ec>)
 800cd56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cd5a:	e002      	b.n	800cd62 <frame_processing+0x1ee>
 800cd5c:	4b41      	ldr	r3, [pc, #260]	@ (800ce64 <frame_processing+0x2f0>)
 800cd5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800cd62:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	bfb8      	it	lt
 800cd6a:	425b      	neglt	r3, r3
 800cd6c:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cd6e:	4a3e      	ldr	r2, [pc, #248]	@ (800ce68 <frame_processing+0x2f4>)
 800cd70:	fb82 1203 	smull	r1, r2, r2, r3
 800cd74:	1152      	asrs	r2, r2, #5
 800cd76:	17db      	asrs	r3, r3, #31
 800cd78:	eba2 0c03 	sub.w	ip, r2, r3
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800cd7c:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	bfb8      	it	lt
 800cd84:	425b      	neglt	r3, r3
 800cd86:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cd88:	4a37      	ldr	r2, [pc, #220]	@ (800ce68 <frame_processing+0x2f4>)
 800cd8a:	fb82 1203 	smull	r1, r2, r2, r3
 800cd8e:	1151      	asrs	r1, r2, #5
 800cd90:	17da      	asrs	r2, r3, #31
 800cd92:	1a8c      	subs	r4, r1, r2
 800cd94:	2264      	movs	r2, #100	@ 0x64
 800cd96:	fb04 f202 	mul.w	r2, r4, r2
 800cd9a:	1a9c      	subs	r4, r3, r2
 800cd9c:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	da01      	bge.n	800cda8 <frame_processing+0x234>
 800cda4:	4e2e      	ldr	r6, [pc, #184]	@ (800ce60 <frame_processing+0x2ec>)
 800cda6:	e000      	b.n	800cdaa <frame_processing+0x236>
 800cda8:	4e2e      	ldr	r6, [pc, #184]	@ (800ce64 <frame_processing+0x2f0>)
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800cdaa:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	bfb8      	it	lt
 800cdb2:	425b      	neglt	r3, r3
 800cdb4:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cdb6:	4a2c      	ldr	r2, [pc, #176]	@ (800ce68 <frame_processing+0x2f4>)
 800cdb8:	fb82 1203 	smull	r1, r2, r2, r3
 800cdbc:	1152      	asrs	r2, r2, #5
 800cdbe:	17db      	asrs	r3, r3, #31
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800cdc6:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	bfb8      	it	lt
 800cdce:	425b      	neglt	r3, r3
 800cdd0:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800cdd2:	4a25      	ldr	r2, [pc, #148]	@ (800ce68 <frame_processing+0x2f4>)
 800cdd4:	fb82 1203 	smull	r1, r2, r2, r3
 800cdd8:	1151      	asrs	r1, r2, #5
 800cdda:	17da      	asrs	r2, r3, #31
 800cddc:	1a8d      	subs	r5, r1, r2
 800cdde:	2264      	movs	r2, #100	@ 0x64
 800cde0:	fb05 f202 	mul.w	r2, r5, r2
 800cde4:	1a9d      	subs	r5, r3, r2
 800cde6:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	da03      	bge.n	800cdf6 <frame_processing+0x282>
 800cdee:	4b1c      	ldr	r3, [pc, #112]	@ (800ce60 <frame_processing+0x2ec>)
 800cdf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cdf4:	e002      	b.n	800cdfc <frame_processing+0x288>
 800cdf6:	4b1b      	ldr	r3, [pc, #108]	@ (800ce64 <frame_processing+0x2f0>)
 800cdf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800cdfc:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	bfb8      	it	lt
 800ce04:	425b      	neglt	r3, r3
 800ce06:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800ce08:	4a17      	ldr	r2, [pc, #92]	@ (800ce68 <frame_processing+0x2f4>)
 800ce0a:	fb82 1203 	smull	r1, r2, r2, r3
 800ce0e:	1152      	asrs	r2, r2, #5
 800ce10:	17db      	asrs	r3, r3, #31
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800ce18:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	bfb8      	it	lt
 800ce20:	425b      	neglt	r3, r3
 800ce22:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800ce24:	4a10      	ldr	r2, [pc, #64]	@ (800ce68 <frame_processing+0x2f4>)
 800ce26:	fb82 1203 	smull	r1, r2, r2, r3
 800ce2a:	1151      	asrs	r1, r2, #5
 800ce2c:	17da      	asrs	r2, r3, #31
 800ce2e:	1a89      	subs	r1, r1, r2
 800ce30:	2264      	movs	r2, #100	@ 0x64
 800ce32:	fb01 f202 	mul.w	r2, r1, r2
 800ce36:	1a99      	subs	r1, r3, r2
 800ce38:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	da15      	bge.n	800ce6c <frame_processing+0x2f8>
 800ce40:	4b07      	ldr	r3, [pc, #28]	@ (800ce60 <frame_processing+0x2ec>)
 800ce42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce46:	e014      	b.n	800ce72 <frame_processing+0x2fe>
 800ce48:	20005cc1 	.word	0x20005cc1
 800ce4c:	08015b7c 	.word	0x08015b7c
 800ce50:	40004400 	.word	0x40004400
 800ce54:	40004c00 	.word	0x40004c00
 800ce58:	08015b8c 	.word	0x08015b8c
 800ce5c:	08015ba8 	.word	0x08015ba8
 800ce60:	08015bc4 	.word	0x08015bc4
 800ce64:	08015bc8 	.word	0x08015bc8
 800ce68:	51eb851f 	.word	0x51eb851f
 800ce6c:	4bbc      	ldr	r3, [pc, #752]	@ (800d160 <frame_processing+0x5ec>)
 800ce6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800ce72:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	bfb8      	it	lt
 800ce7a:	425b      	neglt	r3, r3
 800ce7c:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800ce7e:	4ab9      	ldr	r2, [pc, #740]	@ (800d164 <frame_processing+0x5f0>)
 800ce80:	fb82 0203 	smull	r0, r2, r2, r3
 800ce84:	1152      	asrs	r2, r2, #5
 800ce86:	17db      	asrs	r3, r3, #31
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800ce8e:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	bfb8      	it	lt
 800ce96:	425b      	neglt	r3, r3
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	4618      	mov	r0, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800ce9c:	4bb1      	ldr	r3, [pc, #708]	@ (800d164 <frame_processing+0x5f0>)
 800ce9e:	fb83 2300 	smull	r2, r3, r3, r0
 800cea2:	115a      	asrs	r2, r3, #5
 800cea4:	17c3      	asrs	r3, r0, #31
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	2264      	movs	r2, #100	@ 0x64
 800ceaa:	fb02 f303 	mul.w	r3, r2, r3
 800ceae:	1ac3      	subs	r3, r0, r3
 800ceb0:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800ceb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ceba:	9308      	str	r3, [sp, #32]
 800cebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cec0:	9307      	str	r3, [sp, #28]
 800cec2:	9106      	str	r1, [sp, #24]
 800cec4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cec8:	9305      	str	r3, [sp, #20]
 800ceca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cece:	9304      	str	r3, [sp, #16]
 800ced0:	9503      	str	r5, [sp, #12]
 800ced2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ced6:	9302      	str	r3, [sp, #8]
 800ced8:	9601      	str	r6, [sp, #4]
 800ceda:	9400      	str	r4, [sp, #0]
 800cedc:	4663      	mov	r3, ip
 800cede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cee2:	49a1      	ldr	r1, [pc, #644]	@ (800d168 <frame_processing+0x5f4>)
 800cee4:	f002 ffd2 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800cee8:	4ba0      	ldr	r3, [pc, #640]	@ (800d16c <frame_processing+0x5f8>)
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d005      	beq.n	800cefe <frame_processing+0x38a>
		                    	Uart_sendstring(USART2, buffer_0x01);
 800cef2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cef6:	4619      	mov	r1, r3
 800cef8:	489d      	ldr	r0, [pc, #628]	@ (800d170 <frame_processing+0x5fc>)
 800cefa:	f7f5 f87d 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x01);
 800cefe:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cf02:	4619      	mov	r1, r3
 800cf04:	489b      	ldr	r0, [pc, #620]	@ (800d174 <frame_processing+0x600>)
 800cf06:	f7f5 f877 	bl	8001ff8 <Uart_sendstring>
						break;
 800cf0a:	f000 bc35 	b.w	800d778 <frame_processing+0xc04>
					        uint16_t bat0 = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800cf0e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf12:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	799b      	ldrb	r3, [r3, #6]
 800cf1a:	021b      	lsls	r3, r3, #8
 800cf1c:	b21a      	sxth	r2, r3
 800cf1e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf22:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	79db      	ldrb	r3, [r3, #7]
 800cf2a:	b21b      	sxth	r3, r3
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	b21b      	sxth	r3, r3
 800cf30:	f8a7 3576 	strh.w	r3, [r7, #1398]	@ 0x576
					        uint16_t bat1 = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800cf34:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf38:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	7a1b      	ldrb	r3, [r3, #8]
 800cf40:	021b      	lsls	r3, r3, #8
 800cf42:	b21a      	sxth	r2, r3
 800cf44:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf48:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	7a5b      	ldrb	r3, [r3, #9]
 800cf50:	b21b      	sxth	r3, r3
 800cf52:	4313      	orrs	r3, r2
 800cf54:	b21b      	sxth	r3, r3
 800cf56:	f8a7 3574 	strh.w	r3, [r7, #1396]	@ 0x574
					        uint16_t bat2 = (uint16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800cf5a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf5e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	7a9b      	ldrb	r3, [r3, #10]
 800cf66:	021b      	lsls	r3, r3, #8
 800cf68:	b21a      	sxth	r2, r3
 800cf6a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf6e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	7adb      	ldrb	r3, [r3, #11]
 800cf76:	b21b      	sxth	r3, r3
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	b21b      	sxth	r3, r3
 800cf7c:	f8a7 3572 	strh.w	r3, [r7, #1394]	@ 0x572
					        uint16_t bat3 = (uint16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800cf80:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf84:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	7b1b      	ldrb	r3, [r3, #12]
 800cf8c:	021b      	lsls	r3, r3, #8
 800cf8e:	b21a      	sxth	r2, r3
 800cf90:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf94:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	7b5b      	ldrb	r3, [r3, #13]
 800cf9c:	b21b      	sxth	r3, r3
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	b21b      	sxth	r3, r3
 800cfa2:	f8a7 3570 	strh.w	r3, [r7, #1392]	@ 0x570
					        sprintf(buffer_0x02, "PMU_Res: CMDcode 0x02 [BAT0: %d.%02d V, BAT1: %d.%02d V, BAT2: %d.%02d V, BAT3: %d.%02d V]\n",
 800cfa6:	f8b7 3576 	ldrh.w	r3, [r7, #1398]	@ 0x576
 800cfaa:	4a6e      	ldr	r2, [pc, #440]	@ (800d164 <frame_processing+0x5f0>)
 800cfac:	fba2 2303 	umull	r2, r3, r2, r3
 800cfb0:	095b      	lsrs	r3, r3, #5
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	469c      	mov	ip, r3
 800cfb6:	f8b7 3576 	ldrh.w	r3, [r7, #1398]	@ 0x576
 800cfba:	4a6a      	ldr	r2, [pc, #424]	@ (800d164 <frame_processing+0x5f0>)
 800cfbc:	fba2 1203 	umull	r1, r2, r2, r3
 800cfc0:	0952      	lsrs	r2, r2, #5
 800cfc2:	2164      	movs	r1, #100	@ 0x64
 800cfc4:	fb01 f202 	mul.w	r2, r1, r2
 800cfc8:	1a9b      	subs	r3, r3, r2
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	469e      	mov	lr, r3
 800cfce:	f8b7 3574 	ldrh.w	r3, [r7, #1396]	@ 0x574
 800cfd2:	4a64      	ldr	r2, [pc, #400]	@ (800d164 <frame_processing+0x5f0>)
 800cfd4:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd8:	095b      	lsrs	r3, r3, #5
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	461c      	mov	r4, r3
 800cfde:	f8b7 3574 	ldrh.w	r3, [r7, #1396]	@ 0x574
 800cfe2:	4a60      	ldr	r2, [pc, #384]	@ (800d164 <frame_processing+0x5f0>)
 800cfe4:	fba2 1203 	umull	r1, r2, r2, r3
 800cfe8:	0952      	lsrs	r2, r2, #5
 800cfea:	2164      	movs	r1, #100	@ 0x64
 800cfec:	fb01 f202 	mul.w	r2, r1, r2
 800cff0:	1a9b      	subs	r3, r3, r2
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	461d      	mov	r5, r3
 800cff6:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	@ 0x572
 800cffa:	4a5a      	ldr	r2, [pc, #360]	@ (800d164 <frame_processing+0x5f0>)
 800cffc:	fba2 2303 	umull	r2, r3, r2, r3
 800d000:	095b      	lsrs	r3, r3, #5
 800d002:	b29b      	uxth	r3, r3
 800d004:	461e      	mov	r6, r3
 800d006:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	@ 0x572
 800d00a:	4a56      	ldr	r2, [pc, #344]	@ (800d164 <frame_processing+0x5f0>)
 800d00c:	fba2 1203 	umull	r1, r2, r2, r3
 800d010:	0952      	lsrs	r2, r2, #5
 800d012:	2164      	movs	r1, #100	@ 0x64
 800d014:	fb01 f202 	mul.w	r2, r1, r2
 800d018:	1a9b      	subs	r3, r3, r2
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d020:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	@ 0x570
 800d024:	4a4f      	ldr	r2, [pc, #316]	@ (800d164 <frame_processing+0x5f0>)
 800d026:	fba2 2303 	umull	r2, r3, r2, r3
 800d02a:	095b      	lsrs	r3, r3, #5
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d032:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	@ 0x570
 800d036:	4a4b      	ldr	r2, [pc, #300]	@ (800d164 <frame_processing+0x5f0>)
 800d038:	fba2 1203 	umull	r1, r2, r2, r3
 800d03c:	0952      	lsrs	r2, r2, #5
 800d03e:	2164      	movs	r1, #100	@ 0x64
 800d040:	fb01 f202 	mul.w	r2, r1, r2
 800d044:	1a9b      	subs	r3, r3, r2
 800d046:	b29b      	uxth	r3, r3
 800d048:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d04c:	9305      	str	r3, [sp, #20]
 800d04e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d052:	9204      	str	r2, [sp, #16]
 800d054:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d058:	9303      	str	r3, [sp, #12]
 800d05a:	9602      	str	r6, [sp, #8]
 800d05c:	9501      	str	r5, [sp, #4]
 800d05e:	9400      	str	r4, [sp, #0]
 800d060:	4673      	mov	r3, lr
 800d062:	4662      	mov	r2, ip
 800d064:	4944      	ldr	r1, [pc, #272]	@ (800d178 <frame_processing+0x604>)
 800d066:	f002 ff11 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800d06a:	4b40      	ldr	r3, [pc, #256]	@ (800d16c <frame_processing+0x5f8>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b00      	cmp	r3, #0
 800d072:	d005      	beq.n	800d080 <frame_processing+0x50c>
		                    	Uart_sendstring(USART2, buffer_0x02);
 800d074:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d078:	4619      	mov	r1, r3
 800d07a:	483d      	ldr	r0, [pc, #244]	@ (800d170 <frame_processing+0x5fc>)
 800d07c:	f7f4 ffbc 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x02);
 800d080:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d084:	4619      	mov	r1, r3
 800d086:	483b      	ldr	r0, [pc, #236]	@ (800d174 <frame_processing+0x600>)
 800d088:	f7f4 ffb6 	bl	8001ff8 <Uart_sendstring>
							break;
 800d08c:	e374      	b.n	800d778 <frame_processing+0xc04>
						    uint16_t vin = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800d08e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d092:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	799b      	ldrb	r3, [r3, #6]
 800d09a:	021b      	lsls	r3, r3, #8
 800d09c:	b21a      	sxth	r2, r3
 800d09e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d0a2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	79db      	ldrb	r3, [r3, #7]
 800d0aa:	b21b      	sxth	r3, r3
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	b21b      	sxth	r3, r3
 800d0b0:	f8a7 357a 	strh.w	r3, [r7, #1402]	@ 0x57a
						    uint16_t iin = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800d0b4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d0b8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	7a1b      	ldrb	r3, [r3, #8]
 800d0c0:	021b      	lsls	r3, r3, #8
 800d0c2:	b21a      	sxth	r2, r3
 800d0c4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d0c8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	7a5b      	ldrb	r3, [r3, #9]
 800d0d0:	b21b      	sxth	r3, r3
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	b21b      	sxth	r3, r3
 800d0d6:	f8a7 3578 	strh.w	r3, [r7, #1400]	@ 0x578
						    sprintf(buffer_0x03, "PMU_Res: CMDcode 0x03 [VIN: %d.%02d V, IIN: %d.%02d A]\n",
 800d0da:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	@ 0x57a
 800d0de:	4a21      	ldr	r2, [pc, #132]	@ (800d164 <frame_processing+0x5f0>)
 800d0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e4:	095b      	lsrs	r3, r3, #5
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	461d      	mov	r5, r3
 800d0ea:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	@ 0x57a
 800d0ee:	4a1d      	ldr	r2, [pc, #116]	@ (800d164 <frame_processing+0x5f0>)
 800d0f0:	fba2 1203 	umull	r1, r2, r2, r3
 800d0f4:	0952      	lsrs	r2, r2, #5
 800d0f6:	2164      	movs	r1, #100	@ 0x64
 800d0f8:	fb01 f202 	mul.w	r2, r1, r2
 800d0fc:	1a9b      	subs	r3, r3, r2
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	461e      	mov	r6, r3
 800d102:	f8b7 3578 	ldrh.w	r3, [r7, #1400]	@ 0x578
 800d106:	4a17      	ldr	r2, [pc, #92]	@ (800d164 <frame_processing+0x5f0>)
 800d108:	fba2 2303 	umull	r2, r3, r2, r3
 800d10c:	095b      	lsrs	r3, r3, #5
 800d10e:	b29b      	uxth	r3, r3
 800d110:	461c      	mov	r4, r3
 800d112:	f8b7 3578 	ldrh.w	r3, [r7, #1400]	@ 0x578
 800d116:	4a13      	ldr	r2, [pc, #76]	@ (800d164 <frame_processing+0x5f0>)
 800d118:	fba2 1203 	umull	r1, r2, r2, r3
 800d11c:	0952      	lsrs	r2, r2, #5
 800d11e:	2164      	movs	r1, #100	@ 0x64
 800d120:	fb01 f202 	mul.w	r2, r1, r2
 800d124:	1a9b      	subs	r3, r3, r2
 800d126:	b29b      	uxth	r3, r3
 800d128:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	9400      	str	r4, [sp, #0]
 800d130:	4633      	mov	r3, r6
 800d132:	462a      	mov	r2, r5
 800d134:	4911      	ldr	r1, [pc, #68]	@ (800d17c <frame_processing+0x608>)
 800d136:	f002 fea9 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800d13a:	4b0c      	ldr	r3, [pc, #48]	@ (800d16c <frame_processing+0x5f8>)
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2b00      	cmp	r3, #0
 800d142:	d005      	beq.n	800d150 <frame_processing+0x5dc>
		                    	Uart_sendstring(USART2, buffer_0x03);
 800d144:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d148:	4619      	mov	r1, r3
 800d14a:	4809      	ldr	r0, [pc, #36]	@ (800d170 <frame_processing+0x5fc>)
 800d14c:	f7f4 ff54 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x03);
 800d150:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d154:	4619      	mov	r1, r3
 800d156:	4807      	ldr	r0, [pc, #28]	@ (800d174 <frame_processing+0x600>)
 800d158:	f7f4 ff4e 	bl	8001ff8 <Uart_sendstring>
						    break;
 800d15c:	e30c      	b.n	800d778 <frame_processing+0xc04>
 800d15e:	bf00      	nop
 800d160:	08015bc8 	.word	0x08015bc8
 800d164:	51eb851f 	.word	0x51eb851f
 800d168:	08015bcc 	.word	0x08015bcc
 800d16c:	20005cc1 	.word	0x20005cc1
 800d170:	40004400 	.word	0x40004400
 800d174:	40004c00 	.word	0x40004c00
 800d178:	08015c2c 	.word	0x08015c2c
 800d17c:	08015c88 	.word	0x08015c88
						    uint16_t vout = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800d180:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d184:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	799b      	ldrb	r3, [r3, #6]
 800d18c:	021b      	lsls	r3, r3, #8
 800d18e:	b21a      	sxth	r2, r3
 800d190:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d194:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	79db      	ldrb	r3, [r3, #7]
 800d19c:	b21b      	sxth	r3, r3
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	b21b      	sxth	r3, r3
 800d1a2:	f8a7 357e 	strh.w	r3, [r7, #1406]	@ 0x57e
						    uint16_t iout = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800d1a6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d1aa:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	7a1b      	ldrb	r3, [r3, #8]
 800d1b2:	021b      	lsls	r3, r3, #8
 800d1b4:	b21a      	sxth	r2, r3
 800d1b6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d1ba:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	7a5b      	ldrb	r3, [r3, #9]
 800d1c2:	b21b      	sxth	r3, r3
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	b21b      	sxth	r3, r3
 800d1c8:	f8a7 357c 	strh.w	r3, [r7, #1404]	@ 0x57c
						    sprintf(buffer_0x04_pmu, "PMU_Res: CMDcode 0x04 [VOUT: %d.%02d V, IOUT: %d.%02d A]\n",
 800d1cc:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 800d1d0:	4abf      	ldr	r2, [pc, #764]	@ (800d4d0 <frame_processing+0x95c>)
 800d1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1d6:	095b      	lsrs	r3, r3, #5
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	461d      	mov	r5, r3
 800d1dc:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 800d1e0:	4abb      	ldr	r2, [pc, #748]	@ (800d4d0 <frame_processing+0x95c>)
 800d1e2:	fba2 1203 	umull	r1, r2, r2, r3
 800d1e6:	0952      	lsrs	r2, r2, #5
 800d1e8:	2164      	movs	r1, #100	@ 0x64
 800d1ea:	fb01 f202 	mul.w	r2, r1, r2
 800d1ee:	1a9b      	subs	r3, r3, r2
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	461e      	mov	r6, r3
 800d1f4:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 800d1f8:	4ab5      	ldr	r2, [pc, #724]	@ (800d4d0 <frame_processing+0x95c>)
 800d1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d1fe:	095b      	lsrs	r3, r3, #5
 800d200:	b29b      	uxth	r3, r3
 800d202:	461c      	mov	r4, r3
 800d204:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 800d208:	4ab1      	ldr	r2, [pc, #708]	@ (800d4d0 <frame_processing+0x95c>)
 800d20a:	fba2 1203 	umull	r1, r2, r2, r3
 800d20e:	0952      	lsrs	r2, r2, #5
 800d210:	2164      	movs	r1, #100	@ 0x64
 800d212:	fb01 f202 	mul.w	r2, r1, r2
 800d216:	1a9b      	subs	r3, r3, r2
 800d218:	b29b      	uxth	r3, r3
 800d21a:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d21e:	9301      	str	r3, [sp, #4]
 800d220:	9400      	str	r4, [sp, #0]
 800d222:	4633      	mov	r3, r6
 800d224:	462a      	mov	r2, r5
 800d226:	49ab      	ldr	r1, [pc, #684]	@ (800d4d4 <frame_processing+0x960>)
 800d228:	f002 fe30 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800d22c:	4baa      	ldr	r3, [pc, #680]	@ (800d4d8 <frame_processing+0x964>)
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	b2db      	uxtb	r3, r3
 800d232:	2b00      	cmp	r3, #0
 800d234:	d005      	beq.n	800d242 <frame_processing+0x6ce>
		                    	Uart_sendstring(USART2, buffer_0x04_pmu);
 800d236:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d23a:	4619      	mov	r1, r3
 800d23c:	48a7      	ldr	r0, [pc, #668]	@ (800d4dc <frame_processing+0x968>)
 800d23e:	f7f4 fedb 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x04_pmu);
 800d242:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d246:	4619      	mov	r1, r3
 800d248:	48a5      	ldr	r0, [pc, #660]	@ (800d4e0 <frame_processing+0x96c>)
 800d24a:	f7f4 fed5 	bl	8001ff8 <Uart_sendstring>
							break;
 800d24e:	e293      	b.n	800d778 <frame_processing+0xc04>
							    	int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800d250:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d254:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	799b      	ldrb	r3, [r3, #6]
 800d25c:	021b      	lsls	r3, r3, #8
 800d25e:	b21a      	sxth	r2, r3
 800d260:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d264:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	79db      	ldrb	r3, [r3, #7]
 800d26c:	b21b      	sxth	r3, r3
 800d26e:	4313      	orrs	r3, r2
 800d270:	f8a7 3596 	strh.w	r3, [r7, #1430]	@ 0x596
							    	int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800d274:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d278:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	7a1b      	ldrb	r3, [r3, #8]
 800d280:	021b      	lsls	r3, r3, #8
 800d282:	b21a      	sxth	r2, r3
 800d284:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d288:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	7a5b      	ldrb	r3, [r3, #9]
 800d290:	b21b      	sxth	r3, r3
 800d292:	4313      	orrs	r3, r2
 800d294:	f8a7 3594 	strh.w	r3, [r7, #1428]	@ 0x594
							    	int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800d298:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d29c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	7a9b      	ldrb	r3, [r3, #10]
 800d2a4:	021b      	lsls	r3, r3, #8
 800d2a6:	b21a      	sxth	r2, r3
 800d2a8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d2ac:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	7adb      	ldrb	r3, [r3, #11]
 800d2b4:	b21b      	sxth	r3, r3
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	f8a7 3592 	strh.w	r3, [r7, #1426]	@ 0x592
							    	int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800d2bc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d2c0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	7b1b      	ldrb	r3, [r3, #12]
 800d2c8:	021b      	lsls	r3, r3, #8
 800d2ca:	b21a      	sxth	r2, r3
 800d2cc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d2d0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	7b5b      	ldrb	r3, [r3, #13]
 800d2d8:	b21b      	sxth	r3, r3
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	f8a7 3590 	strh.w	r3, [r7, #1424]	@ 0x590
							    	uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800d2e0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d2e4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	7b9b      	ldrb	r3, [r3, #14]
 800d2ec:	021b      	lsls	r3, r3, #8
 800d2ee:	b21a      	sxth	r2, r3
 800d2f0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d2f4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	7bdb      	ldrb	r3, [r3, #15]
 800d2fc:	b21b      	sxth	r3, r3
 800d2fe:	4313      	orrs	r3, r2
 800d300:	b21b      	sxth	r3, r3
 800d302:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e
							    	uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800d306:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d30a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	7c1b      	ldrb	r3, [r3, #16]
 800d312:	021b      	lsls	r3, r3, #8
 800d314:	b21a      	sxth	r2, r3
 800d316:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d31a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	7c5b      	ldrb	r3, [r3, #17]
 800d322:	b21b      	sxth	r3, r3
 800d324:	4313      	orrs	r3, r2
 800d326:	b21b      	sxth	r3, r3
 800d328:	f8a7 358c 	strh.w	r3, [r7, #1420]	@ 0x58c
							    	uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800d32c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d330:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	7c9b      	ldrb	r3, [r3, #18]
 800d338:	021b      	lsls	r3, r3, #8
 800d33a:	b21a      	sxth	r2, r3
 800d33c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d340:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	7cdb      	ldrb	r3, [r3, #19]
 800d348:	b21b      	sxth	r3, r3
 800d34a:	4313      	orrs	r3, r2
 800d34c:	b21b      	sxth	r3, r3
 800d34e:	f8a7 358a 	strh.w	r3, [r7, #1418]	@ 0x58a
							    	uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800d352:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d356:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	7d1b      	ldrb	r3, [r3, #20]
 800d35e:	021b      	lsls	r3, r3, #8
 800d360:	b21a      	sxth	r2, r3
 800d362:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d366:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	7d5b      	ldrb	r3, [r3, #21]
 800d36e:	b21b      	sxth	r3, r3
 800d370:	4313      	orrs	r3, r2
 800d372:	b21b      	sxth	r3, r3
 800d374:	f8a7 3588 	strh.w	r3, [r7, #1416]	@ 0x588
							    	uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800d378:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d37c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	7d9b      	ldrb	r3, [r3, #22]
 800d384:	021b      	lsls	r3, r3, #8
 800d386:	b21a      	sxth	r2, r3
 800d388:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d38c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	7ddb      	ldrb	r3, [r3, #23]
 800d394:	b21b      	sxth	r3, r3
 800d396:	4313      	orrs	r3, r2
 800d398:	b21b      	sxth	r3, r3
 800d39a:	f8a7 3586 	strh.w	r3, [r7, #1414]	@ 0x586
							    	uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800d39e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d3a2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	7e1b      	ldrb	r3, [r3, #24]
 800d3aa:	021b      	lsls	r3, r3, #8
 800d3ac:	b21a      	sxth	r2, r3
 800d3ae:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d3b2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	7e5b      	ldrb	r3, [r3, #25]
 800d3ba:	b21b      	sxth	r3, r3
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	b21b      	sxth	r3, r3
 800d3c0:	f8a7 3584 	strh.w	r3, [r7, #1412]	@ 0x584
							    	uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800d3c4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d3c8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	7e9b      	ldrb	r3, [r3, #26]
 800d3d0:	021b      	lsls	r3, r3, #8
 800d3d2:	b21a      	sxth	r2, r3
 800d3d4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d3d8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	7edb      	ldrb	r3, [r3, #27]
 800d3e0:	b21b      	sxth	r3, r3
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	b21b      	sxth	r3, r3
 800d3e6:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582
							    	uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800d3ea:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d3ee:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	7f1b      	ldrb	r3, [r3, #28]
 800d3f6:	021b      	lsls	r3, r3, #8
 800d3f8:	b21a      	sxth	r2, r3
 800d3fa:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d3fe:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	7f5b      	ldrb	r3, [r3, #29]
 800d406:	b21b      	sxth	r3, r3
 800d408:	4313      	orrs	r3, r2
 800d40a:	b21b      	sxth	r3, r3
 800d40c:	f8a7 3580 	strh.w	r3, [r7, #1408]	@ 0x580
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d410:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800d414:	2b00      	cmp	r3, #0
 800d416:	da03      	bge.n	800d420 <frame_processing+0x8ac>
 800d418:	4b32      	ldr	r3, [pc, #200]	@ (800d4e4 <frame_processing+0x970>)
 800d41a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d41e:	e002      	b.n	800d426 <frame_processing+0x8b2>
 800d420:	4b31      	ldr	r3, [pc, #196]	@ (800d4e8 <frame_processing+0x974>)
 800d422:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800d426:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	bfb8      	it	lt
 800d42e:	425b      	neglt	r3, r3
 800d430:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d432:	4a27      	ldr	r2, [pc, #156]	@ (800d4d0 <frame_processing+0x95c>)
 800d434:	fb82 1203 	smull	r1, r2, r2, r3
 800d438:	1152      	asrs	r2, r2, #5
 800d43a:	17db      	asrs	r3, r3, #31
 800d43c:	eba2 0c03 	sub.w	ip, r2, r3
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800d440:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800d444:	2b00      	cmp	r3, #0
 800d446:	bfb8      	it	lt
 800d448:	425b      	neglt	r3, r3
 800d44a:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d44c:	4a20      	ldr	r2, [pc, #128]	@ (800d4d0 <frame_processing+0x95c>)
 800d44e:	fb82 1203 	smull	r1, r2, r2, r3
 800d452:	1151      	asrs	r1, r2, #5
 800d454:	17da      	asrs	r2, r3, #31
 800d456:	1a8a      	subs	r2, r1, r2
 800d458:	4611      	mov	r1, r2
 800d45a:	2264      	movs	r2, #100	@ 0x64
 800d45c:	fb01 f202 	mul.w	r2, r1, r2
 800d460:	1a9b      	subs	r3, r3, r2
 800d462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d466:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	da03      	bge.n	800d476 <frame_processing+0x902>
 800d46e:	4b1d      	ldr	r3, [pc, #116]	@ (800d4e4 <frame_processing+0x970>)
 800d470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d474:	e002      	b.n	800d47c <frame_processing+0x908>
 800d476:	4b1c      	ldr	r3, [pc, #112]	@ (800d4e8 <frame_processing+0x974>)
 800d478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800d47c:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800d480:	2b00      	cmp	r3, #0
 800d482:	bfb8      	it	lt
 800d484:	425b      	neglt	r3, r3
 800d486:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d488:	4a11      	ldr	r2, [pc, #68]	@ (800d4d0 <frame_processing+0x95c>)
 800d48a:	fb82 1203 	smull	r1, r2, r2, r3
 800d48e:	1152      	asrs	r2, r2, #5
 800d490:	17db      	asrs	r3, r3, #31
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800d498:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	bfb8      	it	lt
 800d4a0:	425b      	neglt	r3, r3
 800d4a2:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d4a4:	4a0a      	ldr	r2, [pc, #40]	@ (800d4d0 <frame_processing+0x95c>)
 800d4a6:	fb82 1203 	smull	r1, r2, r2, r3
 800d4aa:	1151      	asrs	r1, r2, #5
 800d4ac:	17da      	asrs	r2, r3, #31
 800d4ae:	1a8a      	subs	r2, r1, r2
 800d4b0:	4611      	mov	r1, r2
 800d4b2:	2264      	movs	r2, #100	@ 0x64
 800d4b4:	fb01 f202 	mul.w	r2, r1, r2
 800d4b8:	1a9b      	subs	r3, r3, r2
 800d4ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d4be:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	da12      	bge.n	800d4ec <frame_processing+0x978>
 800d4c6:	4b07      	ldr	r3, [pc, #28]	@ (800d4e4 <frame_processing+0x970>)
 800d4c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d4cc:	e011      	b.n	800d4f2 <frame_processing+0x97e>
 800d4ce:	bf00      	nop
 800d4d0:	51eb851f 	.word	0x51eb851f
 800d4d4:	08015cc0 	.word	0x08015cc0
 800d4d8:	20005cc1 	.word	0x20005cc1
 800d4dc:	40004400 	.word	0x40004400
 800d4e0:	40004c00 	.word	0x40004c00
 800d4e4:	08015bc4 	.word	0x08015bc4
 800d4e8:	08015bc8 	.word	0x08015bc8
 800d4ec:	4bb6      	ldr	r3, [pc, #728]	@ (800d7c8 <frame_processing+0xc54>)
 800d4ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800d4f2:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	bfb8      	it	lt
 800d4fa:	425b      	neglt	r3, r3
 800d4fc:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d4fe:	4ab3      	ldr	r2, [pc, #716]	@ (800d7cc <frame_processing+0xc58>)
 800d500:	fb82 1203 	smull	r1, r2, r2, r3
 800d504:	1152      	asrs	r2, r2, #5
 800d506:	17db      	asrs	r3, r3, #31
 800d508:	1ad3      	subs	r3, r2, r3
 800d50a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800d50e:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800d512:	2b00      	cmp	r3, #0
 800d514:	bfb8      	it	lt
 800d516:	425b      	neglt	r3, r3
 800d518:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d51a:	4aac      	ldr	r2, [pc, #688]	@ (800d7cc <frame_processing+0xc58>)
 800d51c:	fb82 1203 	smull	r1, r2, r2, r3
 800d520:	1151      	asrs	r1, r2, #5
 800d522:	17da      	asrs	r2, r3, #31
 800d524:	1a8a      	subs	r2, r1, r2
 800d526:	4611      	mov	r1, r2
 800d528:	2264      	movs	r2, #100	@ 0x64
 800d52a:	fb01 f202 	mul.w	r2, r1, r2
 800d52e:	1a9b      	subs	r3, r3, r2
 800d530:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d534:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800d538:	2b00      	cmp	r3, #0
 800d53a:	da03      	bge.n	800d544 <frame_processing+0x9d0>
 800d53c:	4ba4      	ldr	r3, [pc, #656]	@ (800d7d0 <frame_processing+0xc5c>)
 800d53e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d542:	e002      	b.n	800d54a <frame_processing+0x9d6>
 800d544:	4ba0      	ldr	r3, [pc, #640]	@ (800d7c8 <frame_processing+0xc54>)
 800d546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800d54a:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800d54e:	2b00      	cmp	r3, #0
 800d550:	bfb8      	it	lt
 800d552:	425b      	neglt	r3, r3
 800d554:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d556:	4a9d      	ldr	r2, [pc, #628]	@ (800d7cc <frame_processing+0xc58>)
 800d558:	fb82 1203 	smull	r1, r2, r2, r3
 800d55c:	1152      	asrs	r2, r2, #5
 800d55e:	17db      	asrs	r3, r3, #31
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800d566:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	bfb8      	it	lt
 800d56e:	425b      	neglt	r3, r3
 800d570:	b29b      	uxth	r3, r3
 800d572:	4619      	mov	r1, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d574:	4b95      	ldr	r3, [pc, #596]	@ (800d7cc <frame_processing+0xc58>)
 800d576:	fb83 2301 	smull	r2, r3, r3, r1
 800d57a:	115a      	asrs	r2, r3, #5
 800d57c:	17cb      	asrs	r3, r1, #31
 800d57e:	1ad6      	subs	r6, r2, r3
 800d580:	2364      	movs	r3, #100	@ 0x64
 800d582:	fb06 f303 	mul.w	r3, r6, r3
 800d586:	1ace      	subs	r6, r1, r3
 800d588:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 800d58c:	4a8f      	ldr	r2, [pc, #572]	@ (800d7cc <frame_processing+0xc58>)
 800d58e:	fba2 2303 	umull	r2, r3, r2, r3
 800d592:	095b      	lsrs	r3, r3, #5
 800d594:	b29b      	uxth	r3, r3
 800d596:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d59a:	f8b7 158e 	ldrh.w	r1, [r7, #1422]	@ 0x58e
 800d59e:	4b8b      	ldr	r3, [pc, #556]	@ (800d7cc <frame_processing+0xc58>)
 800d5a0:	fba3 2301 	umull	r2, r3, r3, r1
 800d5a4:	095a      	lsrs	r2, r3, #5
 800d5a6:	2364      	movs	r3, #100	@ 0x64
 800d5a8:	fb02 f303 	mul.w	r3, r2, r3
 800d5ac:	1acb      	subs	r3, r1, r3
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d5b4:	f8b7 258c 	ldrh.w	r2, [r7, #1420]	@ 0x58c
 800d5b8:	4b84      	ldr	r3, [pc, #528]	@ (800d7cc <frame_processing+0xc58>)
 800d5ba:	fba3 2302 	umull	r2, r3, r3, r2
 800d5be:	095b      	lsrs	r3, r3, #5
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d5c6:	f8b7 158c 	ldrh.w	r1, [r7, #1420]	@ 0x58c
 800d5ca:	4b80      	ldr	r3, [pc, #512]	@ (800d7cc <frame_processing+0xc58>)
 800d5cc:	fba3 2301 	umull	r2, r3, r3, r1
 800d5d0:	095a      	lsrs	r2, r3, #5
 800d5d2:	2364      	movs	r3, #100	@ 0x64
 800d5d4:	fb02 f303 	mul.w	r3, r2, r3
 800d5d8:	1acb      	subs	r3, r1, r3
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d5de:	f8b7 258a 	ldrh.w	r2, [r7, #1418]	@ 0x58a
 800d5e2:	4b7a      	ldr	r3, [pc, #488]	@ (800d7cc <frame_processing+0xc58>)
 800d5e4:	fba3 2302 	umull	r2, r3, r3, r2
 800d5e8:	095b      	lsrs	r3, r3, #5
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d5ee:	f8b7 158a 	ldrh.w	r1, [r7, #1418]	@ 0x58a
 800d5f2:	4b76      	ldr	r3, [pc, #472]	@ (800d7cc <frame_processing+0xc58>)
 800d5f4:	fba3 2301 	umull	r2, r3, r3, r1
 800d5f8:	095a      	lsrs	r2, r3, #5
 800d5fa:	2364      	movs	r3, #100	@ 0x64
 800d5fc:	fb02 f303 	mul.w	r3, r2, r3
 800d600:	1acb      	subs	r3, r1, r3
 800d602:	b29b      	uxth	r3, r3
 800d604:	677b      	str	r3, [r7, #116]	@ 0x74
 800d606:	f8b7 2588 	ldrh.w	r2, [r7, #1416]	@ 0x588
 800d60a:	4b70      	ldr	r3, [pc, #448]	@ (800d7cc <frame_processing+0xc58>)
 800d60c:	fba3 2302 	umull	r2, r3, r3, r2
 800d610:	095b      	lsrs	r3, r3, #5
 800d612:	b29b      	uxth	r3, r3
 800d614:	673b      	str	r3, [r7, #112]	@ 0x70
 800d616:	f8b7 1588 	ldrh.w	r1, [r7, #1416]	@ 0x588
 800d61a:	4b6c      	ldr	r3, [pc, #432]	@ (800d7cc <frame_processing+0xc58>)
 800d61c:	fba3 2301 	umull	r2, r3, r3, r1
 800d620:	095a      	lsrs	r2, r3, #5
 800d622:	2364      	movs	r3, #100	@ 0x64
 800d624:	fb02 f303 	mul.w	r3, r2, r3
 800d628:	1acb      	subs	r3, r1, r3
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d62e:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	@ 0x586
 800d632:	4b66      	ldr	r3, [pc, #408]	@ (800d7cc <frame_processing+0xc58>)
 800d634:	fba3 2302 	umull	r2, r3, r3, r2
 800d638:	095b      	lsrs	r3, r3, #5
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d63e:	f8b7 1586 	ldrh.w	r1, [r7, #1414]	@ 0x586
 800d642:	4b62      	ldr	r3, [pc, #392]	@ (800d7cc <frame_processing+0xc58>)
 800d644:	fba3 2301 	umull	r2, r3, r3, r1
 800d648:	095a      	lsrs	r2, r3, #5
 800d64a:	2364      	movs	r3, #100	@ 0x64
 800d64c:	fb02 f303 	mul.w	r3, r2, r3
 800d650:	1acb      	subs	r3, r1, r3
 800d652:	b29b      	uxth	r3, r3
 800d654:	667b      	str	r3, [r7, #100]	@ 0x64
 800d656:	f8b7 2584 	ldrh.w	r2, [r7, #1412]	@ 0x584
 800d65a:	4b5c      	ldr	r3, [pc, #368]	@ (800d7cc <frame_processing+0xc58>)
 800d65c:	fba3 2302 	umull	r2, r3, r3, r2
 800d660:	095b      	lsrs	r3, r3, #5
 800d662:	b29b      	uxth	r3, r3
 800d664:	663b      	str	r3, [r7, #96]	@ 0x60
 800d666:	f8b7 1584 	ldrh.w	r1, [r7, #1412]	@ 0x584
 800d66a:	4b58      	ldr	r3, [pc, #352]	@ (800d7cc <frame_processing+0xc58>)
 800d66c:	fba3 2301 	umull	r2, r3, r3, r1
 800d670:	095a      	lsrs	r2, r3, #5
 800d672:	2364      	movs	r3, #100	@ 0x64
 800d674:	fb02 f303 	mul.w	r3, r2, r3
 800d678:	1acb      	subs	r3, r1, r3
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d67e:	f8b7 2582 	ldrh.w	r2, [r7, #1410]	@ 0x582
 800d682:	4b52      	ldr	r3, [pc, #328]	@ (800d7cc <frame_processing+0xc58>)
 800d684:	fba3 2302 	umull	r2, r3, r3, r2
 800d688:	095b      	lsrs	r3, r3, #5
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d68e:	f8b7 1582 	ldrh.w	r1, [r7, #1410]	@ 0x582
 800d692:	4b4e      	ldr	r3, [pc, #312]	@ (800d7cc <frame_processing+0xc58>)
 800d694:	fba3 2301 	umull	r2, r3, r3, r1
 800d698:	095a      	lsrs	r2, r3, #5
 800d69a:	2364      	movs	r3, #100	@ 0x64
 800d69c:	fb02 f303 	mul.w	r3, r2, r3
 800d6a0:	1acb      	subs	r3, r1, r3
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	461d      	mov	r5, r3
 800d6a6:	f8b7 2580 	ldrh.w	r2, [r7, #1408]	@ 0x580
 800d6aa:	4b48      	ldr	r3, [pc, #288]	@ (800d7cc <frame_processing+0xc58>)
 800d6ac:	fba3 2302 	umull	r2, r3, r3, r2
 800d6b0:	095b      	lsrs	r3, r3, #5
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	461c      	mov	r4, r3
 800d6b6:	f8b7 1580 	ldrh.w	r1, [r7, #1408]	@ 0x580
 800d6ba:	4b44      	ldr	r3, [pc, #272]	@ (800d7cc <frame_processing+0xc58>)
 800d6bc:	fba3 2301 	umull	r2, r3, r3, r1
 800d6c0:	095a      	lsrs	r2, r3, #5
 800d6c2:	2364      	movs	r3, #100	@ 0x64
 800d6c4:	fb02 f303 	mul.w	r3, r2, r3
 800d6c8:	1acb      	subs	r3, r1, r3
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d6d0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d6d2:	9418      	str	r4, [sp, #96]	@ 0x60
 800d6d4:	9517      	str	r5, [sp, #92]	@ 0x5c
 800d6d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d6d8:	9216      	str	r2, [sp, #88]	@ 0x58
 800d6da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d6dc:	9215      	str	r2, [sp, #84]	@ 0x54
 800d6de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d6e0:	9214      	str	r2, [sp, #80]	@ 0x50
 800d6e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d6e4:	9213      	str	r2, [sp, #76]	@ 0x4c
 800d6e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d6e8:	9212      	str	r2, [sp, #72]	@ 0x48
 800d6ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d6ec:	9211      	str	r2, [sp, #68]	@ 0x44
 800d6ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d6f0:	9210      	str	r2, [sp, #64]	@ 0x40
 800d6f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d6f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d6f6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d6f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6fa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d6fc:	920d      	str	r2, [sp, #52]	@ 0x34
 800d6fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d702:	920c      	str	r2, [sp, #48]	@ 0x30
 800d704:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d708:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d70a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d70e:	920a      	str	r2, [sp, #40]	@ 0x28
 800d710:	9609      	str	r6, [sp, #36]	@ 0x24
 800d712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d716:	9308      	str	r3, [sp, #32]
 800d718:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d71c:	9307      	str	r3, [sp, #28]
 800d71e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d722:	9306      	str	r3, [sp, #24]
 800d724:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d728:	9305      	str	r3, [sp, #20]
 800d72a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d72e:	9304      	str	r3, [sp, #16]
 800d730:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d734:	9303      	str	r3, [sp, #12]
 800d736:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d73a:	9302      	str	r3, [sp, #8]
 800d73c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d740:	9301      	str	r3, [sp, #4]
 800d742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	4663      	mov	r3, ip
 800d74a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d74e:	4921      	ldr	r1, [pc, #132]	@ (800d7d4 <frame_processing+0xc60>)
 800d750:	f002 fb9c 	bl	800fe8c <siprintf>
				                    if (uart_choose_usart2) {
 800d754:	4b20      	ldr	r3, [pc, #128]	@ (800d7d8 <frame_processing+0xc64>)
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d005      	beq.n	800d76a <frame_processing+0xbf6>
				                    	Uart_sendstring(USART2, buffer_0x08);
 800d75e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d762:	4619      	mov	r1, r3
 800d764:	481d      	ldr	r0, [pc, #116]	@ (800d7dc <frame_processing+0xc68>)
 800d766:	f7f4 fc47 	bl	8001ff8 <Uart_sendstring>
									Uart_sendstring(UART4, buffer_0x08);
 800d76a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d76e:	4619      	mov	r1, r3
 800d770:	481b      	ldr	r0, [pc, #108]	@ (800d7e0 <frame_processing+0xc6c>)
 800d772:	f7f4 fc41 	bl	8001ff8 <Uart_sendstring>
							    break;
 800d776:	bf00      	nop
					break;
 800d778:	e004      	b.n	800d784 <frame_processing+0xc10>
				default:
					clear_send_flag();
 800d77a:	f7f4 fd7f 	bl	800227c <clear_send_flag>
					return FSP_PKT_INVALID;
 800d77e:	2302      	movs	r3, #2
 800d780:	f001 bbb7 	b.w	800eef2 <frame_processing+0x237e>
					break;
 800d784:	bf00      	nop
					break;
			}
			clear_send_flag();
 800d786:	f7f4 fd79 	bl	800227c <clear_send_flag>
			break;
 800d78a:	f001 bbb1 	b.w	800eef0 <frame_processing+0x237c>
		case FSP_ADR_PDU:
			switch (fsp_pkt->type)
 800d78e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d792:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	791b      	ldrb	r3, [r3, #4]
 800d79a:	2b05      	cmp	r3, #5
 800d79c:	d003      	beq.n	800d7a6 <frame_processing+0xc32>
 800d79e:	2b07      	cmp	r3, #7
 800d7a0:	d022      	beq.n	800d7e8 <frame_processing+0xc74>
 800d7a2:	f000 bc36 	b.w	800e012 <frame_processing+0x149e>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800d7a6:	f7f4 fd69 	bl	800227c <clear_send_flag>
//					if (uart_choose_uart5) {
//						Uart_sendstring(UART5, "\n> PDU_ACK\r\n> ");
//					}
                    if (uart_choose_usart2) {
 800d7aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d8 <frame_processing+0xc64>)
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d003      	beq.n	800d7bc <frame_processing+0xc48>
                    	Uart_sendstring(USART2, "\n> PDU_ACK\r\n> ");
 800d7b4:	490b      	ldr	r1, [pc, #44]	@ (800d7e4 <frame_processing+0xc70>)
 800d7b6:	4809      	ldr	r0, [pc, #36]	@ (800d7dc <frame_processing+0xc68>)
 800d7b8:	f7f4 fc1e 	bl	8001ff8 <Uart_sendstring>
                    }
					Uart_sendstring(UART4, "\n> PDU_ACK\r\n> ");
 800d7bc:	4909      	ldr	r1, [pc, #36]	@ (800d7e4 <frame_processing+0xc70>)
 800d7be:	4808      	ldr	r0, [pc, #32]	@ (800d7e0 <frame_processing+0xc6c>)
 800d7c0:	f7f4 fc1a 	bl	8001ff8 <Uart_sendstring>

					break;
 800d7c4:	f000 bc2a 	b.w	800e01c <frame_processing+0x14a8>
 800d7c8:	08015bc8 	.word	0x08015bc8
 800d7cc:	51eb851f 	.word	0x51eb851f
 800d7d0:	08015bc4 	.word	0x08015bc4
 800d7d4:	08015cfc 	.word	0x08015cfc
 800d7d8:	20005cc1 	.word	0x20005cc1
 800d7dc:	40004400 	.word	0x40004400
 800d7e0:	40004c00 	.word	0x40004c00
 800d7e4:	08015dec 	.word	0x08015dec
				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800d7e8:	f7f4 fd48 	bl	800227c <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800d7ec:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d7f0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	795b      	ldrb	r3, [r3, #5]
 800d7f8:	2b06      	cmp	r3, #6
 800d7fa:	dc17      	bgt.n	800d82c <frame_processing+0xcb8>
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f2c0 8400 	blt.w	800e002 <frame_processing+0x148e>
 800d802:	2b06      	cmp	r3, #6
 800d804:	f200 83fd 	bhi.w	800e002 <frame_processing+0x148e>
 800d808:	a201      	add	r2, pc, #4	@ (adr r2, 800d810 <frame_processing+0xc9c>)
 800d80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d80e:	bf00      	nop
 800d810:	0800d833 	.word	0x0800d833
 800d814:	0800e003 	.word	0x0800e003
 800d818:	0800e003 	.word	0x0800e003
 800d81c:	0800e003 	.word	0x0800e003
 800d820:	0800d8af 	.word	0x0800d8af
 800d824:	0800d961 	.word	0x0800d961
 800d828:	0800da31 	.word	0x0800da31
 800d82c:	2bff      	cmp	r3, #255	@ 0xff
 800d82e:	d01f      	beq.n	800d870 <frame_processing+0xcfc>
 800d830:	e3e7      	b.n	800e002 <frame_processing+0x148e>
					{
						case 0x00:
						{
							char buffer_0x00[50];
							sprintf(buffer_0x00, "PDU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800d832:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d836:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	799b      	ldrb	r3, [r3, #6]
 800d83e:	461a      	mov	r2, r3
 800d840:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d844:	4973      	ldr	r1, [pc, #460]	@ (800da14 <frame_processing+0xea0>)
 800d846:	4618      	mov	r0, r3
 800d848:	f002 fb20 	bl	800fe8c <siprintf>
//							if (uart_choose_uart5) {
//								Uart_sendstring(UART5, buffer_0x00);
//							}
		                    if (uart_choose_usart2) {
 800d84c:	4b72      	ldr	r3, [pc, #456]	@ (800da18 <frame_processing+0xea4>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	b2db      	uxtb	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d005      	beq.n	800d862 <frame_processing+0xcee>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800d856:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d85a:	4619      	mov	r1, r3
 800d85c:	486f      	ldr	r0, [pc, #444]	@ (800da1c <frame_processing+0xea8>)
 800d85e:	f7f4 fbcb 	bl	8001ff8 <Uart_sendstring>
		                    }
							Uart_sendstring(UART4, buffer_0x00);
 800d862:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d866:	4619      	mov	r1, r3
 800d868:	486d      	ldr	r0, [pc, #436]	@ (800da20 <frame_processing+0xeac>)
 800d86a:	f7f4 fbc5 	bl	8001ff8 <Uart_sendstring>

						}
							break;
 800d86e:	e3cd      	b.n	800e00c <frame_processing+0x1498>
						case 0xFF:
						{
							char buffer_0xFF[50];
							sprintf(buffer_0xFF, "PDU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800d870:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d874:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	799b      	ldrb	r3, [r3, #6]
 800d87c:	461a      	mov	r2, r3
 800d87e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d882:	4968      	ldr	r1, [pc, #416]	@ (800da24 <frame_processing+0xeb0>)
 800d884:	4618      	mov	r0, r3
 800d886:	f002 fb01 	bl	800fe8c <siprintf>
//							if (uart_choose_uart5) {
//								Uart_sendstring(UART5, buffer_0xFF);
//							}
		                    if (uart_choose_usart2) {
 800d88a:	4b63      	ldr	r3, [pc, #396]	@ (800da18 <frame_processing+0xea4>)
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d005      	beq.n	800d8a0 <frame_processing+0xd2c>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800d894:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d898:	4619      	mov	r1, r3
 800d89a:	4860      	ldr	r0, [pc, #384]	@ (800da1c <frame_processing+0xea8>)
 800d89c:	f7f4 fbac 	bl	8001ff8 <Uart_sendstring>
		                    }
							Uart_sendstring(UART4, buffer_0xFF);
 800d8a0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	485e      	ldr	r0, [pc, #376]	@ (800da20 <frame_processing+0xeac>)
 800d8a8:	f7f4 fba6 	bl	8001ff8 <Uart_sendstring>

						}
							break;
 800d8ac:	e3ae      	b.n	800e00c <frame_processing+0x1498>

						case 0x04:
						{
							        uint8_t channel = fsp_pkt->payload[1];
 800d8ae:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8b2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	799b      	ldrb	r3, [r3, #6]
 800d8ba:	f887 359d 	strb.w	r3, [r7, #1437]	@ 0x59d
							        uint8_t status_0x04 = fsp_pkt->payload[2];
 800d8be:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8c2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	79db      	ldrb	r3, [r3, #7]
 800d8ca:	f887 359c 	strb.w	r3, [r7, #1436]	@ 0x59c
							        uint16_t voltage_0x04 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800d8ce:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8d2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	7a1b      	ldrb	r3, [r3, #8]
 800d8da:	021b      	lsls	r3, r3, #8
 800d8dc:	b21a      	sxth	r2, r3
 800d8de:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8e2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	7a5b      	ldrb	r3, [r3, #9]
 800d8ea:	b21b      	sxth	r3, r3
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	b21b      	sxth	r3, r3
 800d8f0:	f8a7 359a 	strh.w	r3, [r7, #1434]	@ 0x59a
							        uint16_t current_0x04 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800d8f4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8f8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	7a9b      	ldrb	r3, [r3, #10]
 800d900:	021b      	lsls	r3, r3, #8
 800d902:	b21a      	sxth	r2, r3
 800d904:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d908:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	7adb      	ldrb	r3, [r3, #11]
 800d910:	b21b      	sxth	r3, r3
 800d912:	4313      	orrs	r3, r2
 800d914:	b21b      	sxth	r3, r3
 800d916:	f8a7 3598 	strh.w	r3, [r7, #1432]	@ 0x598

							        char buffer_0x07[100];
							        sprintf(buffer_0x07, "PDU_Res: CMDcode 0x04 [{Channel %u} Status %u, Voltage: %u, Current: %u]\n", channel, status_0x04, voltage_0x04, current_0x04);
 800d91a:	f897 159d 	ldrb.w	r1, [r7, #1437]	@ 0x59d
 800d91e:	f897 459c 	ldrb.w	r4, [r7, #1436]	@ 0x59c
 800d922:	f8b7 359a 	ldrh.w	r3, [r7, #1434]	@ 0x59a
 800d926:	f8b7 2598 	ldrh.w	r2, [r7, #1432]	@ 0x598
 800d92a:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d92e:	9201      	str	r2, [sp, #4]
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	4623      	mov	r3, r4
 800d934:	460a      	mov	r2, r1
 800d936:	493c      	ldr	r1, [pc, #240]	@ (800da28 <frame_processing+0xeb4>)
 800d938:	f002 faa8 	bl	800fe8c <siprintf>
//									if (uart_choose_uart5) {
//										Uart_sendstring(UART5, buffer_0x07);
//									}
				                    if (uart_choose_usart2) {
 800d93c:	4b36      	ldr	r3, [pc, #216]	@ (800da18 <frame_processing+0xea4>)
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	b2db      	uxtb	r3, r3
 800d942:	2b00      	cmp	r3, #0
 800d944:	d005      	beq.n	800d952 <frame_processing+0xdde>
				                    	Uart_sendstring(USART2, buffer_0x07);
 800d946:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d94a:	4619      	mov	r1, r3
 800d94c:	4833      	ldr	r0, [pc, #204]	@ (800da1c <frame_processing+0xea8>)
 800d94e:	f7f4 fb53 	bl	8001ff8 <Uart_sendstring>
				                    }
									Uart_sendstring(UART4, buffer_0x07);
 800d952:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d956:	4619      	mov	r1, r3
 800d958:	4831      	ldr	r0, [pc, #196]	@ (800da20 <frame_processing+0xeac>)
 800d95a:	f7f4 fb4d 	bl	8001ff8 <Uart_sendstring>

						}
									break;
 800d95e:	e355      	b.n	800e00c <frame_processing+0x1498>
						case 0x05:
						{
						            uint8_t buck = fsp_pkt->payload[1];
 800d960:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d964:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	799b      	ldrb	r3, [r3, #6]
 800d96c:	f887 35a3 	strb.w	r3, [r7, #1443]	@ 0x5a3
						            uint8_t status_0x05 = fsp_pkt->payload[2];
 800d970:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d974:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	79db      	ldrb	r3, [r3, #7]
 800d97c:	f887 35a2 	strb.w	r3, [r7, #1442]	@ 0x5a2
						            uint16_t voltage_0x05 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800d980:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d984:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	7a1b      	ldrb	r3, [r3, #8]
 800d98c:	021b      	lsls	r3, r3, #8
 800d98e:	b21a      	sxth	r2, r3
 800d990:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d994:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	7a5b      	ldrb	r3, [r3, #9]
 800d99c:	b21b      	sxth	r3, r3
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	b21b      	sxth	r3, r3
 800d9a2:	f8a7 35a0 	strh.w	r3, [r7, #1440]	@ 0x5a0
						            uint16_t current_0x05 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800d9a6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d9aa:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	7a9b      	ldrb	r3, [r3, #10]
 800d9b2:	021b      	lsls	r3, r3, #8
 800d9b4:	b21a      	sxth	r2, r3
 800d9b6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d9ba:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	7adb      	ldrb	r3, [r3, #11]
 800d9c2:	b21b      	sxth	r3, r3
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	b21b      	sxth	r3, r3
 800d9c8:	f8a7 359e 	strh.w	r3, [r7, #1438]	@ 0x59e

						            char buffer_0x05[100];
						            sprintf(buffer_0x05, "PDU_Res: CMDcode 0x05 [{Buck %u} Status %u, Voltage: %u, Current: %u]\n", buck, status_0x05, voltage_0x05, current_0x05);
 800d9cc:	f897 15a3 	ldrb.w	r1, [r7, #1443]	@ 0x5a3
 800d9d0:	f897 45a2 	ldrb.w	r4, [r7, #1442]	@ 0x5a2
 800d9d4:	f8b7 35a0 	ldrh.w	r3, [r7, #1440]	@ 0x5a0
 800d9d8:	f8b7 259e 	ldrh.w	r2, [r7, #1438]	@ 0x59e
 800d9dc:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d9e0:	9201      	str	r2, [sp, #4]
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	4623      	mov	r3, r4
 800d9e6:	460a      	mov	r2, r1
 800d9e8:	4910      	ldr	r1, [pc, #64]	@ (800da2c <frame_processing+0xeb8>)
 800d9ea:	f002 fa4f 	bl	800fe8c <siprintf>
//									if (uart_choose_uart5) {
//										Uart_sendstring(UART5, buffer_0x05);
//									}
				                    if (uart_choose_usart2) {
 800d9ee:	4b0a      	ldr	r3, [pc, #40]	@ (800da18 <frame_processing+0xea4>)
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d005      	beq.n	800da04 <frame_processing+0xe90>
				                    	Uart_sendstring(USART2, buffer_0x05);
 800d9f8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	4807      	ldr	r0, [pc, #28]	@ (800da1c <frame_processing+0xea8>)
 800da00:	f7f4 fafa 	bl	8001ff8 <Uart_sendstring>
				                    }
									Uart_sendstring(UART4, buffer_0x05);
 800da04:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800da08:	4619      	mov	r1, r3
 800da0a:	4805      	ldr	r0, [pc, #20]	@ (800da20 <frame_processing+0xeac>)
 800da0c:	f7f4 faf4 	bl	8001ff8 <Uart_sendstring>

						}
									break;
 800da10:	e2fc      	b.n	800e00c <frame_processing+0x1498>
 800da12:	bf00      	nop
 800da14:	08015dfc 	.word	0x08015dfc
 800da18:	20005cc1 	.word	0x20005cc1
 800da1c:	40004400 	.word	0x40004400
 800da20:	40004c00 	.word	0x40004c00
 800da24:	08015e18 	.word	0x08015e18
 800da28:	08015e34 	.word	0x08015e34
 800da2c:	08015e80 	.word	0x08015e80
						case 0x06:
						{
							uint8_t tec1buck_status = fsp_pkt->payload[1];
 800da30:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da34:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	799b      	ldrb	r3, [r3, #6]
 800da3c:	f887 35eb 	strb.w	r3, [r7, #1515]	@ 0x5eb
							uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 800da40:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da44:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	79db      	ldrb	r3, [r3, #7]
 800da4c:	021b      	lsls	r3, r3, #8
 800da4e:	b21a      	sxth	r2, r3
 800da50:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da54:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	7a1b      	ldrb	r3, [r3, #8]
 800da5c:	b21b      	sxth	r3, r3
 800da5e:	4313      	orrs	r3, r2
 800da60:	b21b      	sxth	r3, r3
 800da62:	f8a7 35e8 	strh.w	r3, [r7, #1512]	@ 0x5e8

							uint8_t tec2buck_status = fsp_pkt->payload[4];
 800da66:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da6a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	7a5b      	ldrb	r3, [r3, #9]
 800da72:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
							uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800da76:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da7a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	7a9b      	ldrb	r3, [r3, #10]
 800da82:	021b      	lsls	r3, r3, #8
 800da84:	b21a      	sxth	r2, r3
 800da86:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da8a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	7adb      	ldrb	r3, [r3, #11]
 800da92:	b21b      	sxth	r3, r3
 800da94:	4313      	orrs	r3, r2
 800da96:	b21b      	sxth	r3, r3
 800da98:	f8a7 35e4 	strh.w	r3, [r7, #1508]	@ 0x5e4

							uint8_t tec3buck_status = fsp_pkt->payload[7];
 800da9c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800daa0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	7b1b      	ldrb	r3, [r3, #12]
 800daa8:	f887 35e3 	strb.w	r3, [r7, #1507]	@ 0x5e3
							uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 800daac:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dab0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	7b5b      	ldrb	r3, [r3, #13]
 800dab8:	021b      	lsls	r3, r3, #8
 800daba:	b21a      	sxth	r2, r3
 800dabc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dac0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	7b9b      	ldrb	r3, [r3, #14]
 800dac8:	b21b      	sxth	r3, r3
 800daca:	4313      	orrs	r3, r2
 800dacc:	b21b      	sxth	r3, r3
 800dace:	f8a7 35e0 	strh.w	r3, [r7, #1504]	@ 0x5e0

							uint8_t tec4buck_status = fsp_pkt->payload[10];
 800dad2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dad6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	7bdb      	ldrb	r3, [r3, #15]
 800dade:	f887 35df 	strb.w	r3, [r7, #1503]	@ 0x5df
							uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 800dae2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dae6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	7c1b      	ldrb	r3, [r3, #16]
 800daee:	021b      	lsls	r3, r3, #8
 800daf0:	b21a      	sxth	r2, r3
 800daf2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800daf6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	7c5b      	ldrb	r3, [r3, #17]
 800dafe:	b21b      	sxth	r3, r3
 800db00:	4313      	orrs	r3, r2
 800db02:	b21b      	sxth	r3, r3
 800db04:	f8a7 35dc 	strh.w	r3, [r7, #1500]	@ 0x5dc

							uint8_t mcubuck_status = fsp_pkt->payload[13];
 800db08:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db0c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	7c9b      	ldrb	r3, [r3, #18]
 800db14:	f887 35db 	strb.w	r3, [r7, #1499]	@ 0x5db
							uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 800db18:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db1c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	7cdb      	ldrb	r3, [r3, #19]
 800db24:	021b      	lsls	r3, r3, #8
 800db26:	b21a      	sxth	r2, r3
 800db28:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db2c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	7d1b      	ldrb	r3, [r3, #20]
 800db34:	b21b      	sxth	r3, r3
 800db36:	4313      	orrs	r3, r2
 800db38:	b21b      	sxth	r3, r3
 800db3a:	f8a7 35d8 	strh.w	r3, [r7, #1496]	@ 0x5d8

							uint8_t ledbuck_status = fsp_pkt->payload[16];
 800db3e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db42:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	7d5b      	ldrb	r3, [r3, #21]
 800db4a:	f887 35d7 	strb.w	r3, [r7, #1495]	@ 0x5d7
							uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 800db4e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db52:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	7d9b      	ldrb	r3, [r3, #22]
 800db5a:	021b      	lsls	r3, r3, #8
 800db5c:	b21a      	sxth	r2, r3
 800db5e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db62:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	7ddb      	ldrb	r3, [r3, #23]
 800db6a:	b21b      	sxth	r3, r3
 800db6c:	4313      	orrs	r3, r2
 800db6e:	b21b      	sxth	r3, r3
 800db70:	f8a7 35d4 	strh.w	r3, [r7, #1492]	@ 0x5d4

							uint8_t cm4buck_status = fsp_pkt->payload[19];
 800db74:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db78:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	7e1b      	ldrb	r3, [r3, #24]
 800db80:	f887 35d3 	strb.w	r3, [r7, #1491]	@ 0x5d3
							uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 800db84:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db88:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	7e5b      	ldrb	r3, [r3, #25]
 800db90:	021b      	lsls	r3, r3, #8
 800db92:	b21a      	sxth	r2, r3
 800db94:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800db98:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	7e9b      	ldrb	r3, [r3, #26]
 800dba0:	b21b      	sxth	r3, r3
 800dba2:	4313      	orrs	r3, r2
 800dba4:	b21b      	sxth	r3, r3
 800dba6:	f8a7 35d0 	strh.w	r3, [r7, #1488]	@ 0x5d0

							uint8_t tec1_status = fsp_pkt->payload[22];
 800dbaa:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbae:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	7edb      	ldrb	r3, [r3, #27]
 800dbb6:	f887 35cf 	strb.w	r3, [r7, #1487]	@ 0x5cf
							uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 800dbba:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbbe:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	7f1b      	ldrb	r3, [r3, #28]
 800dbc6:	021b      	lsls	r3, r3, #8
 800dbc8:	b21a      	sxth	r2, r3
 800dbca:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbce:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	7f5b      	ldrb	r3, [r3, #29]
 800dbd6:	b21b      	sxth	r3, r3
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	b21b      	sxth	r3, r3
 800dbdc:	f8a7 35cc 	strh.w	r3, [r7, #1484]	@ 0x5cc

							uint8_t tec2_status = fsp_pkt->payload[25];
 800dbe0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbe4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	7f9b      	ldrb	r3, [r3, #30]
 800dbec:	f887 35cb 	strb.w	r3, [r7, #1483]	@ 0x5cb
							uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 800dbf0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dbf4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	7fdb      	ldrb	r3, [r3, #31]
 800dbfc:	021b      	lsls	r3, r3, #8
 800dbfe:	b21a      	sxth	r2, r3
 800dc00:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc04:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc0e:	b21b      	sxth	r3, r3
 800dc10:	4313      	orrs	r3, r2
 800dc12:	b21b      	sxth	r3, r3
 800dc14:	f8a7 35c8 	strh.w	r3, [r7, #1480]	@ 0x5c8

							uint8_t tec3_status = fsp_pkt->payload[28];
 800dc18:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc1c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800dc26:	f887 35c7 	strb.w	r3, [r7, #1479]	@ 0x5c7
							uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 800dc2a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc2e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800dc38:	021b      	lsls	r3, r3, #8
 800dc3a:	b21a      	sxth	r2, r3
 800dc3c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc40:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800dc4a:	b21b      	sxth	r3, r3
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	b21b      	sxth	r3, r3
 800dc50:	f8a7 35c4 	strh.w	r3, [r7, #1476]	@ 0x5c4

							uint8_t tec4_status = fsp_pkt->payload[31];
 800dc54:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc58:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dc62:	f887 35c3 	strb.w	r3, [r7, #1475]	@ 0x5c3
							uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 800dc66:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc6a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800dc74:	021b      	lsls	r3, r3, #8
 800dc76:	b21a      	sxth	r2, r3
 800dc78:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc7c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800dc86:	b21b      	sxth	r3, r3
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	b21b      	sxth	r3, r3
 800dc8c:	f8a7 35c0 	strh.w	r3, [r7, #1472]	@ 0x5c0

							uint8_t copc_status = fsp_pkt->payload[34];
 800dc90:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc94:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800dc9e:	f887 35bf 	strb.w	r3, [r7, #1471]	@ 0x5bf
							uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 800dca2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dca6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcb0:	021b      	lsls	r3, r3, #8
 800dcb2:	b21a      	sxth	r2, r3
 800dcb4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dcb8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800dcc2:	b21b      	sxth	r3, r3
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	b21b      	sxth	r3, r3
 800dcc8:	f8a7 35bc 	strh.w	r3, [r7, #1468]	@ 0x5bc

							uint8_t iou_status = fsp_pkt->payload[37];
 800dccc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dcd0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800dcda:	f887 35bb 	strb.w	r3, [r7, #1467]	@ 0x5bb
							uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800dcde:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dce2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800dcec:	021b      	lsls	r3, r3, #8
 800dcee:	b21a      	sxth	r2, r3
 800dcf0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dcf4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dcfe:	b21b      	sxth	r3, r3
 800dd00:	4313      	orrs	r3, r2
 800dd02:	b21b      	sxth	r3, r3
 800dd04:	f8a7 35b8 	strh.w	r3, [r7, #1464]	@ 0x5b8

							uint8_t rgb_status = fsp_pkt->payload[40];
 800dd08:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd0c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd16:	f887 35b7 	strb.w	r3, [r7, #1463]	@ 0x5b7
							uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 800dd1a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd1e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800dd28:	021b      	lsls	r3, r3, #8
 800dd2a:	b21a      	sxth	r2, r3
 800dd2c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd30:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dd3a:	b21b      	sxth	r3, r3
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	b21b      	sxth	r3, r3
 800dd40:	f8a7 35b4 	strh.w	r3, [r7, #1460]	@ 0x5b4

							uint8_t ir_status = fsp_pkt->payload[43];
 800dd44:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd48:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd52:	f887 35b3 	strb.w	r3, [r7, #1459]	@ 0x5b3
							uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 800dd56:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd5a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800dd64:	021b      	lsls	r3, r3, #8
 800dd66:	b21a      	sxth	r2, r3
 800dd68:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd6c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800dd76:	b21b      	sxth	r3, r3
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	b21b      	sxth	r3, r3
 800dd7c:	f8a7 35b0 	strh.w	r3, [r7, #1456]	@ 0x5b0

							uint8_t cm4_status = fsp_pkt->payload[46];
 800dd80:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd84:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800dd8e:	f887 35af 	strb.w	r3, [r7, #1455]	@ 0x5af
							uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 800dd92:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd96:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dda0:	021b      	lsls	r3, r3, #8
 800dda2:	b21a      	sxth	r2, r3
 800dda4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dda8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ddb2:	b21b      	sxth	r3, r3
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	b21b      	sxth	r3, r3
 800ddb8:	f8a7 35ac 	strh.w	r3, [r7, #1452]	@ 0x5ac

							uint8_t vin_status = fsp_pkt->payload[49];
 800ddbc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ddc0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ddca:	f887 35ab 	strb.w	r3, [r7, #1451]	@ 0x5ab
							uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 800ddce:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ddd2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800dddc:	021b      	lsls	r3, r3, #8
 800ddde:	b21a      	sxth	r2, r3
 800dde0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dde4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ddee:	b21b      	sxth	r3, r3
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	b21b      	sxth	r3, r3
 800ddf4:	f8a7 35a8 	strh.w	r3, [r7, #1448]	@ 0x5a8

							uint8_t vbus_status = fsp_pkt->payload[52];
 800ddf8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ddfc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800de06:	f887 35a7 	strb.w	r3, [r7, #1447]	@ 0x5a7
							uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 800de0a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800de0e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800de18:	021b      	lsls	r3, r3, #8
 800de1a:	b21a      	sxth	r2, r3
 800de1c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800de20:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800de2a:	b21b      	sxth	r3, r3
 800de2c:	4313      	orrs	r3, r2
 800de2e:	b21b      	sxth	r3, r3
 800de30:	f8a7 35a4 	strh.w	r3, [r7, #1444]	@ 0x5a4


						            char buffer_0x06[1000];
						            sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 800de34:	f897 e5eb 	ldrb.w	lr, [r7, #1515]	@ 0x5eb
 800de38:	f8b7 85e8 	ldrh.w	r8, [r7, #1512]	@ 0x5e8
 800de3c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800de40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800de44:	f8b7 25e4 	ldrh.w	r2, [r7, #1508]	@ 0x5e4
 800de48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800de4c:	f897 15e3 	ldrb.w	r1, [r7, #1507]	@ 0x5e3
 800de50:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800de54:	f8b7 05e0 	ldrh.w	r0, [r7, #1504]	@ 0x5e0
 800de58:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800de5c:	f897 45df 	ldrb.w	r4, [r7, #1503]	@ 0x5df
 800de60:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 800de64:	f8b7 55dc 	ldrh.w	r5, [r7, #1500]	@ 0x5dc
 800de68:	f8c7 509c 	str.w	r5, [r7, #156]	@ 0x9c
 800de6c:	f897 65db 	ldrb.w	r6, [r7, #1499]	@ 0x5db
 800de70:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 800de74:	f8b7 c5d8 	ldrh.w	ip, [r7, #1496]	@ 0x5d8
 800de78:	4663      	mov	r3, ip
 800de7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800de7e:	f897 c5d7 	ldrb.w	ip, [r7, #1495]	@ 0x5d7
 800de82:	4662      	mov	r2, ip
 800de84:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800de88:	f8b7 c5d4 	ldrh.w	ip, [r7, #1492]	@ 0x5d4
 800de8c:	4661      	mov	r1, ip
 800de8e:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 800de92:	f897 c5d3 	ldrb.w	ip, [r7, #1491]	@ 0x5d3
 800de96:	4660      	mov	r0, ip
 800de98:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 800de9c:	f8b7 c5d0 	ldrh.w	ip, [r7, #1488]	@ 0x5d0
 800dea0:	4664      	mov	r4, ip
 800dea2:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
 800dea6:	f897 c5cf 	ldrb.w	ip, [r7, #1487]	@ 0x5cf
 800deaa:	4665      	mov	r5, ip
 800deac:	f8c7 5080 	str.w	r5, [r7, #128]	@ 0x80
 800deb0:	f8b7 c5cc 	ldrh.w	ip, [r7, #1484]	@ 0x5cc
 800deb4:	4666      	mov	r6, ip
 800deb6:	67fe      	str	r6, [r7, #124]	@ 0x7c
 800deb8:	f897 c5cb 	ldrb.w	ip, [r7, #1483]	@ 0x5cb
 800debc:	4663      	mov	r3, ip
 800debe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dec0:	f8b7 c5c8 	ldrh.w	ip, [r7, #1480]	@ 0x5c8
 800dec4:	4662      	mov	r2, ip
 800dec6:	677a      	str	r2, [r7, #116]	@ 0x74
 800dec8:	f897 c5c7 	ldrb.w	ip, [r7, #1479]	@ 0x5c7
 800decc:	4661      	mov	r1, ip
 800dece:	6739      	str	r1, [r7, #112]	@ 0x70
 800ded0:	f8b7 c5c4 	ldrh.w	ip, [r7, #1476]	@ 0x5c4
 800ded4:	4660      	mov	r0, ip
 800ded6:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800ded8:	f897 c5c3 	ldrb.w	ip, [r7, #1475]	@ 0x5c3
 800dedc:	4664      	mov	r4, ip
 800dede:	66bc      	str	r4, [r7, #104]	@ 0x68
 800dee0:	f8b7 c5c0 	ldrh.w	ip, [r7, #1472]	@ 0x5c0
 800dee4:	4665      	mov	r5, ip
 800dee6:	667d      	str	r5, [r7, #100]	@ 0x64
 800dee8:	f897 c5bf 	ldrb.w	ip, [r7, #1471]	@ 0x5bf
 800deec:	4666      	mov	r6, ip
 800deee:	663e      	str	r6, [r7, #96]	@ 0x60
 800def0:	f8b7 c5bc 	ldrh.w	ip, [r7, #1468]	@ 0x5bc
 800def4:	4663      	mov	r3, ip
 800def6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800def8:	f897 c5bb 	ldrb.w	ip, [r7, #1467]	@ 0x5bb
 800defc:	4662      	mov	r2, ip
 800defe:	65ba      	str	r2, [r7, #88]	@ 0x58
 800df00:	f8b7 c5b8 	ldrh.w	ip, [r7, #1464]	@ 0x5b8
 800df04:	4661      	mov	r1, ip
 800df06:	6579      	str	r1, [r7, #84]	@ 0x54
 800df08:	f897 c5b7 	ldrb.w	ip, [r7, #1463]	@ 0x5b7
 800df0c:	4660      	mov	r0, ip
 800df0e:	6538      	str	r0, [r7, #80]	@ 0x50
 800df10:	f8b7 c5b4 	ldrh.w	ip, [r7, #1460]	@ 0x5b4
 800df14:	4664      	mov	r4, ip
 800df16:	64fc      	str	r4, [r7, #76]	@ 0x4c
 800df18:	f897 c5b3 	ldrb.w	ip, [r7, #1459]	@ 0x5b3
 800df1c:	4665      	mov	r5, ip
 800df1e:	64bd      	str	r5, [r7, #72]	@ 0x48
 800df20:	f8b7 65b0 	ldrh.w	r6, [r7, #1456]	@ 0x5b0
 800df24:	f897 55af 	ldrb.w	r5, [r7, #1455]	@ 0x5af
 800df28:	f8b7 45ac 	ldrh.w	r4, [r7, #1452]	@ 0x5ac
 800df2c:	f897 05ab 	ldrb.w	r0, [r7, #1451]	@ 0x5ab
 800df30:	f8b7 15a8 	ldrh.w	r1, [r7, #1448]	@ 0x5a8
 800df34:	f897 25a7 	ldrb.w	r2, [r7, #1447]	@ 0x5a7
 800df38:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	@ 0x5a4
 800df3c:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 800df40:	9321      	str	r3, [sp, #132]	@ 0x84
 800df42:	9220      	str	r2, [sp, #128]	@ 0x80
 800df44:	911f      	str	r1, [sp, #124]	@ 0x7c
 800df46:	901e      	str	r0, [sp, #120]	@ 0x78
 800df48:	941d      	str	r4, [sp, #116]	@ 0x74
 800df4a:	951c      	str	r5, [sp, #112]	@ 0x70
 800df4c:	961b      	str	r6, [sp, #108]	@ 0x6c
 800df4e:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 800df50:	951a      	str	r5, [sp, #104]	@ 0x68
 800df52:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800df54:	9419      	str	r4, [sp, #100]	@ 0x64
 800df56:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800df58:	9018      	str	r0, [sp, #96]	@ 0x60
 800df5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800df5c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800df5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800df60:	9216      	str	r2, [sp, #88]	@ 0x58
 800df62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df64:	9315      	str	r3, [sp, #84]	@ 0x54
 800df66:	6e3e      	ldr	r6, [r7, #96]	@ 0x60
 800df68:	9614      	str	r6, [sp, #80]	@ 0x50
 800df6a:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 800df6c:	9513      	str	r5, [sp, #76]	@ 0x4c
 800df6e:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 800df70:	9412      	str	r4, [sp, #72]	@ 0x48
 800df72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800df74:	9011      	str	r0, [sp, #68]	@ 0x44
 800df76:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800df78:	9110      	str	r1, [sp, #64]	@ 0x40
 800df7a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800df7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800df7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df80:	930e      	str	r3, [sp, #56]	@ 0x38
 800df82:	6ffe      	ldr	r6, [r7, #124]	@ 0x7c
 800df84:	960d      	str	r6, [sp, #52]	@ 0x34
 800df86:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 800df8a:	950c      	str	r5, [sp, #48]	@ 0x30
 800df8c:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800df90:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df92:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800df96:	900a      	str	r0, [sp, #40]	@ 0x28
 800df98:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800df9c:	9109      	str	r1, [sp, #36]	@ 0x24
 800df9e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dfa2:	9208      	str	r2, [sp, #32]
 800dfa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dfa8:	9307      	str	r3, [sp, #28]
 800dfaa:	f8d7 6098 	ldr.w	r6, [r7, #152]	@ 0x98
 800dfae:	9606      	str	r6, [sp, #24]
 800dfb0:	f8d7 509c 	ldr.w	r5, [r7, #156]	@ 0x9c
 800dfb4:	9505      	str	r5, [sp, #20]
 800dfb6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800dfba:	9404      	str	r4, [sp, #16]
 800dfbc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800dfc0:	9003      	str	r0, [sp, #12]
 800dfc2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800dfc6:	9102      	str	r1, [sp, #8]
 800dfc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800dfcc:	9201      	str	r2, [sp, #4]
 800dfce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	4643      	mov	r3, r8
 800dfd6:	4672      	mov	r2, lr
 800dfd8:	49ba      	ldr	r1, [pc, #744]	@ (800e2c4 <frame_processing+0x1750>)
 800dfda:	4660      	mov	r0, ip
 800dfdc:	f001 ff56 	bl	800fe8c <siprintf>
						                vin_status, vin_voltage,
						                vbus_status, vbus_voltage);
//									if (uart_choose_uart5) {
//										Uart_sendstring(UART5, buffer_0x06);
//									}
				                    if (uart_choose_usart2) {
 800dfe0:	4bb9      	ldr	r3, [pc, #740]	@ (800e2c8 <frame_processing+0x1754>)
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d005      	beq.n	800dff6 <frame_processing+0x1482>
				                    	Uart_sendstring(USART2, buffer_0x06);
 800dfea:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dfee:	4619      	mov	r1, r3
 800dff0:	48b6      	ldr	r0, [pc, #728]	@ (800e2cc <frame_processing+0x1758>)
 800dff2:	f7f4 f801 	bl	8001ff8 <Uart_sendstring>
				                    }
									Uart_sendstring(UART4, buffer_0x06);
 800dff6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dffa:	4619      	mov	r1, r3
 800dffc:	48b4      	ldr	r0, [pc, #720]	@ (800e2d0 <frame_processing+0x175c>)
 800dffe:	f7f3 fffb 	bl	8001ff8 <Uart_sendstring>

						}

						default:
							clear_send_flag();
 800e002:	f7f4 f93b 	bl	800227c <clear_send_flag>
							return FSP_PKT_INVALID;
 800e006:	2302      	movs	r3, #2
 800e008:	f000 bf73 	b.w	800eef2 <frame_processing+0x237e>
//													for (int i = 0; i < fsp_pkt->length; i++) {
//													      sprintf(buffer, "\n{%d}", fsp_pkt->payload[i]);
//													      Uart_sendstring(UART5, buffer);
//													}

					clear_send_flag();
 800e00c:	f7f4 f936 	bl	800227c <clear_send_flag>
					break;
 800e010:	e004      	b.n	800e01c <frame_processing+0x14a8>
				default:
					clear_send_flag();
 800e012:	f7f4 f933 	bl	800227c <clear_send_flag>
					return FSP_PKT_INVALID;
 800e016:	2302      	movs	r3, #2
 800e018:	f000 bf6b 	b.w	800eef2 <frame_processing+0x237e>
					break;
			}

			break;
 800e01c:	f000 bf68 	b.w	800eef0 <frame_processing+0x237c>
		case FSP_ADR_CAM:
			clear_send_flag();
 800e020:	f7f4 f92c 	bl	800227c <clear_send_flag>

			break;
 800e024:	f000 bf64 	b.w	800eef0 <frame_processing+0x237c>

		case FSP_ADR_IOU:
			switch (fsp_pkt->type)
 800e028:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e02c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	791b      	ldrb	r3, [r3, #4]
 800e034:	2b05      	cmp	r3, #5
 800e036:	d003      	beq.n	800e040 <frame_processing+0x14cc>
 800e038:	2b07      	cmp	r3, #7
 800e03a:	d015      	beq.n	800e068 <frame_processing+0x14f4>
 800e03c:	f000 bf50 	b.w	800eee0 <frame_processing+0x236c>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800e040:	f7f4 f91c 	bl	800227c <clear_send_flag>
//					if (uart_choose_uart5) {
//						Uart_sendstring(UART5, "\nIOU_ACK\r\n> ");
//					}
                    if (uart_choose_usart2) {
 800e044:	4ba0      	ldr	r3, [pc, #640]	@ (800e2c8 <frame_processing+0x1754>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d003      	beq.n	800e056 <frame_processing+0x14e2>
                    	Uart_sendstring(USART2, "\nIOU_ACK\r\n> ");
 800e04e:	49a1      	ldr	r1, [pc, #644]	@ (800e2d4 <frame_processing+0x1760>)
 800e050:	489e      	ldr	r0, [pc, #632]	@ (800e2cc <frame_processing+0x1758>)
 800e052:	f7f3 ffd1 	bl	8001ff8 <Uart_sendstring>
                    }
					Uart_sendstring(UART4, "\nIOU_ACK\r\n> ");
 800e056:	499f      	ldr	r1, [pc, #636]	@ (800e2d4 <frame_processing+0x1760>)
 800e058:	489d      	ldr	r0, [pc, #628]	@ (800e2d0 <frame_processing+0x175c>)
 800e05a:	f7f3 ffcd 	bl	8001ff8 <Uart_sendstring>

					break;
 800e05e:	bf00      	nop
				default:
					clear_send_flag();
					return FSP_PKT_INVALID;
					break;
			}
			clear_send_flag();
 800e060:	f7f4 f90c 	bl	800227c <clear_send_flag>
			break;
 800e064:	f000 bf44 	b.w	800eef0 <frame_processing+0x237c>
					clear_send_flag();
 800e068:	f7f4 f908 	bl	800227c <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800e06c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e070:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	795b      	ldrb	r3, [r3, #5]
 800e078:	2b13      	cmp	r3, #19
 800e07a:	dc31      	bgt.n	800e0e0 <frame_processing+0x156c>
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f2c0 872c 	blt.w	800eeda <frame_processing+0x2366>
 800e082:	2b13      	cmp	r3, #19
 800e084:	f200 8729 	bhi.w	800eeda <frame_processing+0x2366>
 800e088:	a201      	add	r2, pc, #4	@ (adr r2, 800e090 <frame_processing+0x151c>)
 800e08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08e:	bf00      	nop
 800e090:	0800e0e9 	.word	0x0800e0e9
 800e094:	0800eedb 	.word	0x0800eedb
 800e098:	0800e169 	.word	0x0800e169
 800e09c:	0800e225 	.word	0x0800e225
 800e0a0:	0800eedb 	.word	0x0800eedb
 800e0a4:	0800eedb 	.word	0x0800eedb
 800e0a8:	0800eedb 	.word	0x0800eedb
 800e0ac:	0800eedb 	.word	0x0800eedb
 800e0b0:	0800eedb 	.word	0x0800eedb
 800e0b4:	0800eedb 	.word	0x0800eedb
 800e0b8:	0800eedb 	.word	0x0800eedb
 800e0bc:	0800eedb 	.word	0x0800eedb
 800e0c0:	0800eedb 	.word	0x0800eedb
 800e0c4:	0800eedb 	.word	0x0800eedb
 800e0c8:	0800e2ed 	.word	0x0800e2ed
 800e0cc:	0800eedb 	.word	0x0800eedb
 800e0d0:	0800e375 	.word	0x0800e375
 800e0d4:	0800e3bb 	.word	0x0800e3bb
 800e0d8:	0800e4e9 	.word	0x0800e4e9
 800e0dc:	0800e561 	.word	0x0800e561
 800e0e0:	2bff      	cmp	r3, #255	@ 0xff
 800e0e2:	d021      	beq.n	800e128 <frame_processing+0x15b4>
 800e0e4:	f000 bef9 	b.w	800eeda <frame_processing+0x2366>
							sprintf(buffer_0x00, "IOU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800e0e8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0ec:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	799b      	ldrb	r3, [r3, #6]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e0fa:	4977      	ldr	r1, [pc, #476]	@ (800e2d8 <frame_processing+0x1764>)
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f001 fec5 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800e102:	4b71      	ldr	r3, [pc, #452]	@ (800e2c8 <frame_processing+0x1754>)
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	b2db      	uxtb	r3, r3
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d005      	beq.n	800e118 <frame_processing+0x15a4>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800e10c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e110:	4619      	mov	r1, r3
 800e112:	486e      	ldr	r0, [pc, #440]	@ (800e2cc <frame_processing+0x1758>)
 800e114:	f7f3 ff70 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x00);
 800e118:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e11c:	4619      	mov	r1, r3
 800e11e:	486c      	ldr	r0, [pc, #432]	@ (800e2d0 <frame_processing+0x175c>)
 800e120:	f7f3 ff6a 	bl	8001ff8 <Uart_sendstring>
							break;
 800e124:	f000 bedc 	b.w	800eee0 <frame_processing+0x236c>
							sprintf(buffer_0xFF, "IOU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800e128:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e12c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	799b      	ldrb	r3, [r3, #6]
 800e134:	461a      	mov	r2, r3
 800e136:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e13a:	4968      	ldr	r1, [pc, #416]	@ (800e2dc <frame_processing+0x1768>)
 800e13c:	4618      	mov	r0, r3
 800e13e:	f001 fea5 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800e142:	4b61      	ldr	r3, [pc, #388]	@ (800e2c8 <frame_processing+0x1754>)
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	b2db      	uxtb	r3, r3
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d005      	beq.n	800e158 <frame_processing+0x15e4>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800e14c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e150:	4619      	mov	r1, r3
 800e152:	485e      	ldr	r0, [pc, #376]	@ (800e2cc <frame_processing+0x1758>)
 800e154:	f7f3 ff50 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0xFF);
 800e158:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e15c:	4619      	mov	r1, r3
 800e15e:	485c      	ldr	r0, [pc, #368]	@ (800e2d0 <frame_processing+0x175c>)
 800e160:	f7f3 ff4a 	bl	8001ff8 <Uart_sendstring>
							break;
 800e164:	f000 bebc 	b.w	800eee0 <frame_processing+0x236c>
						    uint8_t device = fsp_pkt->payload[1];
 800e168:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e16c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	799b      	ldrb	r3, [r3, #6]
 800e174:	f887 35ef 	strb.w	r3, [r7, #1519]	@ 0x5ef
						    uint8_t channel = fsp_pkt->payload[2];
 800e178:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e17c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	79db      	ldrb	r3, [r3, #7]
 800e184:	f887 35ee 	strb.w	r3, [r7, #1518]	@ 0x5ee
						    int16_t temp = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800e188:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e18c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	7a1b      	ldrb	r3, [r3, #8]
 800e194:	021b      	lsls	r3, r3, #8
 800e196:	b21a      	sxth	r2, r3
 800e198:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e19c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	7a5b      	ldrb	r3, [r3, #9]
 800e1a4:	b21b      	sxth	r3, r3
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	f8a7 35ec 	strh.w	r3, [r7, #1516]	@ 0x5ec
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800e1ac:	f897 45ef 	ldrb.w	r4, [r7, #1519]	@ 0x5ef
 800e1b0:	f897 55ee 	ldrb.w	r5, [r7, #1518]	@ 0x5ee
 800e1b4:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 800e1b8:	4a49      	ldr	r2, [pc, #292]	@ (800e2e0 <frame_processing+0x176c>)
 800e1ba:	fb82 1203 	smull	r1, r2, r2, r3
 800e1be:	1092      	asrs	r2, r2, #2
 800e1c0:	17db      	asrs	r3, r3, #31
 800e1c2:	1ad3      	subs	r3, r2, r3
 800e1c4:	b21b      	sxth	r3, r3
 800e1c6:	461e      	mov	r6, r3
						            device, channel, temp / 10, abs(temp % 10));
 800e1c8:	f9b7 25ec 	ldrsh.w	r2, [r7, #1516]	@ 0x5ec
 800e1cc:	4b44      	ldr	r3, [pc, #272]	@ (800e2e0 <frame_processing+0x176c>)
 800e1ce:	fb83 1302 	smull	r1, r3, r3, r2
 800e1d2:	1099      	asrs	r1, r3, #2
 800e1d4:	17d3      	asrs	r3, r2, #31
 800e1d6:	1ac9      	subs	r1, r1, r3
 800e1d8:	460b      	mov	r3, r1
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	440b      	add	r3, r1
 800e1de:	005b      	lsls	r3, r3, #1
 800e1e0:	1ad3      	subs	r3, r2, r3
 800e1e2:	b21b      	sxth	r3, r3
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	bfb8      	it	lt
 800e1e8:	425b      	neglt	r3, r3
 800e1ea:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800e1ec:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800e1f0:	9301      	str	r3, [sp, #4]
 800e1f2:	9600      	str	r6, [sp, #0]
 800e1f4:	462b      	mov	r3, r5
 800e1f6:	4622      	mov	r2, r4
 800e1f8:	493a      	ldr	r1, [pc, #232]	@ (800e2e4 <frame_processing+0x1770>)
 800e1fa:	f001 fe47 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800e1fe:	4b32      	ldr	r3, [pc, #200]	@ (800e2c8 <frame_processing+0x1754>)
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b00      	cmp	r3, #0
 800e206:	d005      	beq.n	800e214 <frame_processing+0x16a0>
		                    	Uart_sendstring(USART2, buffer_0x02);
 800e208:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e20c:	4619      	mov	r1, r3
 800e20e:	482f      	ldr	r0, [pc, #188]	@ (800e2cc <frame_processing+0x1758>)
 800e210:	f7f3 fef2 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x02);
 800e214:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e218:	4619      	mov	r1, r3
 800e21a:	482d      	ldr	r0, [pc, #180]	@ (800e2d0 <frame_processing+0x175c>)
 800e21c:	f7f3 feec 	bl	8001ff8 <Uart_sendstring>
						break;
 800e220:	f000 be5e 	b.w	800eee0 <frame_processing+0x236c>
						    uint8_t channel = fsp_pkt->payload[1];
 800e224:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e228:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	799b      	ldrb	r3, [r3, #6]
 800e230:	f887 35f2 	strb.w	r3, [r7, #1522]	@ 0x5f2
						    int16_t temp = (int16_t)((fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3]);
 800e234:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e238:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	79db      	ldrb	r3, [r3, #7]
 800e240:	021b      	lsls	r3, r3, #8
 800e242:	b21a      	sxth	r2, r3
 800e244:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e248:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	7a1b      	ldrb	r3, [r3, #8]
 800e250:	b21b      	sxth	r3, r3
 800e252:	4313      	orrs	r3, r2
 800e254:	f8a7 35f0 	strh.w	r3, [r7, #1520]	@ 0x5f0
						    sprintf(buffer_0x03, "IOU_Res: CMDcode 0x03 [{Channel: %u} Temp: %d.%d]\n",
 800e258:	f897 45f2 	ldrb.w	r4, [r7, #1522]	@ 0x5f2
 800e25c:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 800e260:	4a1f      	ldr	r2, [pc, #124]	@ (800e2e0 <frame_processing+0x176c>)
 800e262:	fb82 1203 	smull	r1, r2, r2, r3
 800e266:	1092      	asrs	r2, r2, #2
 800e268:	17db      	asrs	r3, r3, #31
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	b21b      	sxth	r3, r3
 800e26e:	461d      	mov	r5, r3
 800e270:	f9b7 25f0 	ldrsh.w	r2, [r7, #1520]	@ 0x5f0
 800e274:	4b1a      	ldr	r3, [pc, #104]	@ (800e2e0 <frame_processing+0x176c>)
 800e276:	fb83 1302 	smull	r1, r3, r3, r2
 800e27a:	1099      	asrs	r1, r3, #2
 800e27c:	17d3      	asrs	r3, r2, #31
 800e27e:	1ac9      	subs	r1, r1, r3
 800e280:	460b      	mov	r3, r1
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	440b      	add	r3, r1
 800e286:	005b      	lsls	r3, r3, #1
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	b21b      	sxth	r3, r3
 800e28c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	462b      	mov	r3, r5
 800e294:	4622      	mov	r2, r4
 800e296:	4914      	ldr	r1, [pc, #80]	@ (800e2e8 <frame_processing+0x1774>)
 800e298:	f001 fdf8 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800e29c:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c8 <frame_processing+0x1754>)
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d005      	beq.n	800e2b2 <frame_processing+0x173e>
		                    	Uart_sendstring(USART2, buffer_0x03);
 800e2a6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	4807      	ldr	r0, [pc, #28]	@ (800e2cc <frame_processing+0x1758>)
 800e2ae:	f7f3 fea3 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x03);
 800e2b2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4805      	ldr	r0, [pc, #20]	@ (800e2d0 <frame_processing+0x175c>)
 800e2ba:	f7f3 fe9d 	bl	8001ff8 <Uart_sendstring>
						break;
 800e2be:	f000 be0f 	b.w	800eee0 <frame_processing+0x236c>
 800e2c2:	bf00      	nop
 800e2c4:	08015ec8 	.word	0x08015ec8
 800e2c8:	20005cc1 	.word	0x20005cc1
 800e2cc:	40004400 	.word	0x40004400
 800e2d0:	40004c00 	.word	0x40004c00
 800e2d4:	08016110 	.word	0x08016110
 800e2d8:	08016120 	.word	0x08016120
 800e2dc:	0801613c 	.word	0x0801613c
 800e2e0:	66666667 	.word	0x66666667
 800e2e4:	08016158 	.word	0x08016158
 800e2e8:	08016198 	.word	0x08016198
						    uint8_t red = fsp_pkt->payload[1];
 800e2ec:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2f0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	799b      	ldrb	r3, [r3, #6]
 800e2f8:	f887 35f6 	strb.w	r3, [r7, #1526]	@ 0x5f6
						    uint8_t blue = fsp_pkt->payload[2];
 800e2fc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e300:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	79db      	ldrb	r3, [r3, #7]
 800e308:	f887 35f5 	strb.w	r3, [r7, #1525]	@ 0x5f5
						    uint8_t green = fsp_pkt->payload[3];
 800e30c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e310:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	7a1b      	ldrb	r3, [r3, #8]
 800e318:	f887 35f4 	strb.w	r3, [r7, #1524]	@ 0x5f4
						    uint8_t white = fsp_pkt->payload[4];
 800e31c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e320:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	7a5b      	ldrb	r3, [r3, #9]
 800e328:	f887 35f3 	strb.w	r3, [r7, #1523]	@ 0x5f3
						    sprintf(buffer_0x0E, "IOU_Res: CMDcode 0x0E [Red: %u, Blue: %u, Green: %u, White: %u]\n",
 800e32c:	f897 15f6 	ldrb.w	r1, [r7, #1526]	@ 0x5f6
 800e330:	f897 45f5 	ldrb.w	r4, [r7, #1525]	@ 0x5f5
 800e334:	f897 35f4 	ldrb.w	r3, [r7, #1524]	@ 0x5f4
 800e338:	f897 25f3 	ldrb.w	r2, [r7, #1523]	@ 0x5f3
 800e33c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800e340:	9201      	str	r2, [sp, #4]
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	4623      	mov	r3, r4
 800e346:	460a      	mov	r2, r1
 800e348:	497e      	ldr	r1, [pc, #504]	@ (800e544 <frame_processing+0x19d0>)
 800e34a:	f001 fd9f 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800e34e:	4b7e      	ldr	r3, [pc, #504]	@ (800e548 <frame_processing+0x19d4>)
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	b2db      	uxtb	r3, r3
 800e354:	2b00      	cmp	r3, #0
 800e356:	d005      	beq.n	800e364 <frame_processing+0x17f0>
		                    	Uart_sendstring(USART2, buffer_0x0E);
 800e358:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e35c:	4619      	mov	r1, r3
 800e35e:	487b      	ldr	r0, [pc, #492]	@ (800e54c <frame_processing+0x19d8>)
 800e360:	f7f3 fe4a 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x0E);
 800e364:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e368:	4619      	mov	r1, r3
 800e36a:	4879      	ldr	r0, [pc, #484]	@ (800e550 <frame_processing+0x19dc>)
 800e36c:	f7f3 fe44 	bl	8001ff8 <Uart_sendstring>
						break;
 800e370:	f000 bdb6 	b.w	800eee0 <frame_processing+0x236c>
						    uint8_t duty = fsp_pkt->payload[1];
 800e374:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e378:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	799b      	ldrb	r3, [r3, #6]
 800e380:	f887 35f7 	strb.w	r3, [r7, #1527]	@ 0x5f7
						    sprintf(buffer_0x10, "IOU_Res: CMDcode 0x10 [Duty: %u%%]\n", duty);
 800e384:	f897 25f7 	ldrb.w	r2, [r7, #1527]	@ 0x5f7
 800e388:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e38c:	4971      	ldr	r1, [pc, #452]	@ (800e554 <frame_processing+0x19e0>)
 800e38e:	4618      	mov	r0, r3
 800e390:	f001 fd7c 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800e394:	4b6c      	ldr	r3, [pc, #432]	@ (800e548 <frame_processing+0x19d4>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d005      	beq.n	800e3aa <frame_processing+0x1836>
		                    	Uart_sendstring(USART2, buffer_0x10);
 800e39e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	4869      	ldr	r0, [pc, #420]	@ (800e54c <frame_processing+0x19d8>)
 800e3a6:	f7f3 fe27 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x10);
 800e3aa:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	4867      	ldr	r0, [pc, #412]	@ (800e550 <frame_processing+0x19dc>)
 800e3b2:	f7f3 fe21 	bl	8001ff8 <Uart_sendstring>
						break;
 800e3b6:	f000 bd93 	b.w	800eee0 <frame_processing+0x236c>
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800e3ba:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3be:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	799b      	ldrb	r3, [r3, #6]
 800e3c6:	021b      	lsls	r3, r3, #8
 800e3c8:	b21a      	sxth	r2, r3
 800e3ca:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3ce:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	79db      	ldrb	r3, [r3, #7]
 800e3d6:	b21b      	sxth	r3, r3
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	f8a7 3602 	strh.w	r3, [r7, #1538]	@ 0x602
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800e3de:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3e2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	7a1b      	ldrb	r3, [r3, #8]
 800e3ea:	021b      	lsls	r3, r3, #8
 800e3ec:	b21a      	sxth	r2, r3
 800e3ee:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3f2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	7a5b      	ldrb	r3, [r3, #9]
 800e3fa:	b21b      	sxth	r3, r3
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	f8a7 3600 	strh.w	r3, [r7, #1536]	@ 0x600
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800e402:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e406:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	7a9b      	ldrb	r3, [r3, #10]
 800e40e:	021b      	lsls	r3, r3, #8
 800e410:	b21a      	sxth	r2, r3
 800e412:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e416:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	7adb      	ldrb	r3, [r3, #11]
 800e41e:	b21b      	sxth	r3, r3
 800e420:	4313      	orrs	r3, r2
 800e422:	f8a7 35fe 	strh.w	r3, [r7, #1534]	@ 0x5fe
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800e426:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e42a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	7b1b      	ldrb	r3, [r3, #12]
 800e432:	021b      	lsls	r3, r3, #8
 800e434:	b21a      	sxth	r2, r3
 800e436:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e43a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	7b5b      	ldrb	r3, [r3, #13]
 800e442:	b21b      	sxth	r3, r3
 800e444:	4313      	orrs	r3, r2
 800e446:	f8a7 35fc 	strh.w	r3, [r7, #1532]	@ 0x5fc
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800e44a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e44e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	7b9b      	ldrb	r3, [r3, #14]
 800e456:	021b      	lsls	r3, r3, #8
 800e458:	b21a      	sxth	r2, r3
 800e45a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e45e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	7bdb      	ldrb	r3, [r3, #15]
 800e466:	b21b      	sxth	r3, r3
 800e468:	4313      	orrs	r3, r2
 800e46a:	f8a7 35fa 	strh.w	r3, [r7, #1530]	@ 0x5fa
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800e46e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e472:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	7c1b      	ldrb	r3, [r3, #16]
 800e47a:	021b      	lsls	r3, r3, #8
 800e47c:	b21a      	sxth	r2, r3
 800e47e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e482:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	7c5b      	ldrb	r3, [r3, #17]
 800e48a:	b21b      	sxth	r3, r3
 800e48c:	4313      	orrs	r3, r2
 800e48e:	f8a7 35f8 	strh.w	r3, [r7, #1528]	@ 0x5f8
						    sprintf(buffer_0x11, "IOU_Res: CMDcode 0x11 [Accel: X=%d, Y=%d, Z=%d\nGyro: X=%d, Y=%d, Z=%d]\n",
 800e492:	f9b7 5602 	ldrsh.w	r5, [r7, #1538]	@ 0x602
 800e496:	f9b7 6600 	ldrsh.w	r6, [r7, #1536]	@ 0x600
 800e49a:	f9b7 35fe 	ldrsh.w	r3, [r7, #1534]	@ 0x5fe
 800e49e:	f9b7 25fc 	ldrsh.w	r2, [r7, #1532]	@ 0x5fc
 800e4a2:	f9b7 15fa 	ldrsh.w	r1, [r7, #1530]	@ 0x5fa
 800e4a6:	f9b7 05f8 	ldrsh.w	r0, [r7, #1528]	@ 0x5f8
 800e4aa:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 800e4ae:	9003      	str	r0, [sp, #12]
 800e4b0:	9102      	str	r1, [sp, #8]
 800e4b2:	9201      	str	r2, [sp, #4]
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	4633      	mov	r3, r6
 800e4b8:	462a      	mov	r2, r5
 800e4ba:	4927      	ldr	r1, [pc, #156]	@ (800e558 <frame_processing+0x19e4>)
 800e4bc:	4620      	mov	r0, r4
 800e4be:	f001 fce5 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800e4c2:	4b21      	ldr	r3, [pc, #132]	@ (800e548 <frame_processing+0x19d4>)
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d005      	beq.n	800e4d8 <frame_processing+0x1964>
		                    	Uart_sendstring(USART2, buffer_0x11);
 800e4cc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	481e      	ldr	r0, [pc, #120]	@ (800e54c <frame_processing+0x19d8>)
 800e4d4:	f7f3 fd90 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x11);
 800e4d8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e4dc:	4619      	mov	r1, r3
 800e4de:	481c      	ldr	r0, [pc, #112]	@ (800e550 <frame_processing+0x19dc>)
 800e4e0:	f7f3 fd8a 	bl	8001ff8 <Uart_sendstring>
						break;
 800e4e4:	f000 bcfc 	b.w	800eee0 <frame_processing+0x236c>
						    uint16_t pressure = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800e4e8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4ec:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	799b      	ldrb	r3, [r3, #6]
 800e4f4:	021b      	lsls	r3, r3, #8
 800e4f6:	b21a      	sxth	r2, r3
 800e4f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	79db      	ldrb	r3, [r3, #7]
 800e504:	b21b      	sxth	r3, r3
 800e506:	4313      	orrs	r3, r2
 800e508:	b21b      	sxth	r3, r3
 800e50a:	f8a7 3604 	strh.w	r3, [r7, #1540]	@ 0x604
						    sprintf(buffer_0x12, "IOU_Res: CMDcode 0x12 [Press: %u]\n", pressure);
 800e50e:	f8b7 2604 	ldrh.w	r2, [r7, #1540]	@ 0x604
 800e512:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e516:	4911      	ldr	r1, [pc, #68]	@ (800e55c <frame_processing+0x19e8>)
 800e518:	4618      	mov	r0, r3
 800e51a:	f001 fcb7 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800e51e:	4b0a      	ldr	r3, [pc, #40]	@ (800e548 <frame_processing+0x19d4>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	b2db      	uxtb	r3, r3
 800e524:	2b00      	cmp	r3, #0
 800e526:	d005      	beq.n	800e534 <frame_processing+0x19c0>
		                    	Uart_sendstring(USART2, buffer_0x12);
 800e528:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e52c:	4619      	mov	r1, r3
 800e52e:	4807      	ldr	r0, [pc, #28]	@ (800e54c <frame_processing+0x19d8>)
 800e530:	f7f3 fd62 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x12);
 800e534:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e538:	4619      	mov	r1, r3
 800e53a:	4805      	ldr	r0, [pc, #20]	@ (800e550 <frame_processing+0x19dc>)
 800e53c:	f7f3 fd5c 	bl	8001ff8 <Uart_sendstring>
						break;
 800e540:	f000 bcce 	b.w	800eee0 <frame_processing+0x236c>
 800e544:	080161cc 	.word	0x080161cc
 800e548:	20005cc1 	.word	0x20005cc1
 800e54c:	40004400 	.word	0x40004400
 800e550:	40004c00 	.word	0x40004c00
 800e554:	08016210 	.word	0x08016210
 800e558:	08016234 	.word	0x08016234
 800e55c:	0801627c 	.word	0x0801627c
							int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800e560:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e564:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	799b      	ldrb	r3, [r3, #6]
 800e56c:	021b      	lsls	r3, r3, #8
 800e56e:	b21a      	sxth	r2, r3
 800e570:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e574:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	79db      	ldrb	r3, [r3, #7]
 800e57c:	b21b      	sxth	r3, r3
 800e57e:	4313      	orrs	r3, r2
 800e580:	f8a7 3636 	strh.w	r3, [r7, #1590]	@ 0x636
							int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800e584:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e588:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	7a1b      	ldrb	r3, [r3, #8]
 800e590:	021b      	lsls	r3, r3, #8
 800e592:	b21a      	sxth	r2, r3
 800e594:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e598:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	7a5b      	ldrb	r3, [r3, #9]
 800e5a0:	b21b      	sxth	r3, r3
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	f8a7 3634 	strh.w	r3, [r7, #1588]	@ 0x634
							int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800e5a8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5ac:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	7a9b      	ldrb	r3, [r3, #10]
 800e5b4:	021b      	lsls	r3, r3, #8
 800e5b6:	b21a      	sxth	r2, r3
 800e5b8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5bc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	7adb      	ldrb	r3, [r3, #11]
 800e5c4:	b21b      	sxth	r3, r3
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	f8a7 3632 	strh.w	r3, [r7, #1586]	@ 0x632
							int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800e5cc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5d0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	7b1b      	ldrb	r3, [r3, #12]
 800e5d8:	021b      	lsls	r3, r3, #8
 800e5da:	b21a      	sxth	r2, r3
 800e5dc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5e0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	7b5b      	ldrb	r3, [r3, #13]
 800e5e8:	b21b      	sxth	r3, r3
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	f8a7 3630 	strh.w	r3, [r7, #1584]	@ 0x630
							int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800e5f0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5f4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	7b9b      	ldrb	r3, [r3, #14]
 800e5fc:	021b      	lsls	r3, r3, #8
 800e5fe:	b21a      	sxth	r2, r3
 800e600:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e604:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	7bdb      	ldrb	r3, [r3, #15]
 800e60c:	b21b      	sxth	r3, r3
 800e60e:	4313      	orrs	r3, r2
 800e610:	f8a7 362e 	strh.w	r3, [r7, #1582]	@ 0x62e
							int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800e614:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e618:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	7c1b      	ldrb	r3, [r3, #16]
 800e620:	021b      	lsls	r3, r3, #8
 800e622:	b21a      	sxth	r2, r3
 800e624:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e628:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	7c5b      	ldrb	r3, [r3, #17]
 800e630:	b21b      	sxth	r3, r3
 800e632:	4313      	orrs	r3, r2
 800e634:	f8a7 362c 	strh.w	r3, [r7, #1580]	@ 0x62c
							int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800e638:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e63c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	7c9b      	ldrb	r3, [r3, #18]
 800e644:	021b      	lsls	r3, r3, #8
 800e646:	b21a      	sxth	r2, r3
 800e648:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e64c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	7cdb      	ldrb	r3, [r3, #19]
 800e654:	b21b      	sxth	r3, r3
 800e656:	4313      	orrs	r3, r2
 800e658:	f8a7 362a 	strh.w	r3, [r7, #1578]	@ 0x62a
							int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800e65c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e660:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	7d1b      	ldrb	r3, [r3, #20]
 800e668:	021b      	lsls	r3, r3, #8
 800e66a:	b21a      	sxth	r2, r3
 800e66c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e670:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	7d5b      	ldrb	r3, [r3, #21]
 800e678:	b21b      	sxth	r3, r3
 800e67a:	4313      	orrs	r3, r2
 800e67c:	f8a7 3628 	strh.w	r3, [r7, #1576]	@ 0x628
							int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800e680:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e684:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	7d9b      	ldrb	r3, [r3, #22]
 800e68c:	021b      	lsls	r3, r3, #8
 800e68e:	b21a      	sxth	r2, r3
 800e690:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e694:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	7ddb      	ldrb	r3, [r3, #23]
 800e69c:	b21b      	sxth	r3, r3
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	f8a7 3626 	strh.w	r3, [r7, #1574]	@ 0x626
							int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800e6a4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e6a8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	7e1b      	ldrb	r3, [r3, #24]
 800e6b0:	021b      	lsls	r3, r3, #8
 800e6b2:	b21a      	sxth	r2, r3
 800e6b4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e6b8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	7e5b      	ldrb	r3, [r3, #25]
 800e6c0:	b21b      	sxth	r3, r3
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	f8a7 3624 	strh.w	r3, [r7, #1572]	@ 0x624
							int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800e6c8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e6cc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	7e9b      	ldrb	r3, [r3, #26]
 800e6d4:	021b      	lsls	r3, r3, #8
 800e6d6:	b21a      	sxth	r2, r3
 800e6d8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e6dc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	7edb      	ldrb	r3, [r3, #27]
 800e6e4:	b21b      	sxth	r3, r3
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	f8a7 3622 	strh.w	r3, [r7, #1570]	@ 0x622
							uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800e6ec:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e6f0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	7f1b      	ldrb	r3, [r3, #28]
 800e6f8:	021b      	lsls	r3, r3, #8
 800e6fa:	b21a      	sxth	r2, r3
 800e6fc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e700:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	7f5b      	ldrb	r3, [r3, #29]
 800e708:	b21b      	sxth	r3, r3
 800e70a:	4313      	orrs	r3, r2
 800e70c:	b21b      	sxth	r3, r3
 800e70e:	f8a7 3620 	strh.w	r3, [r7, #1568]	@ 0x620
							uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 800e712:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e716:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	7f9b      	ldrb	r3, [r3, #30]
 800e71e:	021b      	lsls	r3, r3, #8
 800e720:	b21a      	sxth	r2, r3
 800e722:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e726:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	7fdb      	ldrb	r3, [r3, #31]
 800e72e:	b21b      	sxth	r3, r3
 800e730:	4313      	orrs	r3, r2
 800e732:	b21b      	sxth	r3, r3
 800e734:	f8a7 361e 	strh.w	r3, [r7, #1566]	@ 0x61e
							uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 800e738:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e73c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e746:	021b      	lsls	r3, r3, #8
 800e748:	b21a      	sxth	r2, r3
 800e74a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e74e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800e758:	b21b      	sxth	r3, r3
 800e75a:	4313      	orrs	r3, r2
 800e75c:	b21b      	sxth	r3, r3
 800e75e:	f8a7 361c 	strh.w	r3, [r7, #1564]	@ 0x61c
							uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 800e762:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e766:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800e770:	021b      	lsls	r3, r3, #8
 800e772:	b21a      	sxth	r2, r3
 800e774:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e778:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800e782:	b21b      	sxth	r3, r3
 800e784:	4313      	orrs	r3, r2
 800e786:	b21b      	sxth	r3, r3
 800e788:	f8a7 361a 	strh.w	r3, [r7, #1562]	@ 0x61a
							uint8_t neo_led_r = fsp_pkt->payload[31];
 800e78c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e790:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e79a:	f887 3619 	strb.w	r3, [r7, #1561]	@ 0x619
							uint8_t neo_led_g = fsp_pkt->payload[32];
 800e79e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7a2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e7ac:	f887 3618 	strb.w	r3, [r7, #1560]	@ 0x618
							uint8_t neo_led_b = fsp_pkt->payload[33];
 800e7b0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7b4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e7be:	f887 3617 	strb.w	r3, [r7, #1559]	@ 0x617
							uint8_t neo_led_w = fsp_pkt->payload[34];
 800e7c2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7c6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e7d0:	f887 3616 	strb.w	r3, [r7, #1558]	@ 0x616
							uint8_t ir_led_duty = fsp_pkt->payload[35];
 800e7d4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7d8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7e2:	f887 3615 	strb.w	r3, [r7, #1557]	@ 0x615
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[36] << 8) | fsp_pkt->payload[37]);
 800e7e6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7ea:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800e7f4:	021b      	lsls	r3, r3, #8
 800e7f6:	b21a      	sxth	r2, r3
 800e7f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e7fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800e806:	b21b      	sxth	r3, r3
 800e808:	4313      	orrs	r3, r2
 800e80a:	f8a7 3612 	strh.w	r3, [r7, #1554]	@ 0x612
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39]);
 800e80e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e812:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800e81c:	021b      	lsls	r3, r3, #8
 800e81e:	b21a      	sxth	r2, r3
 800e820:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e824:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e82e:	b21b      	sxth	r3, r3
 800e830:	4313      	orrs	r3, r2
 800e832:	f8a7 3610 	strh.w	r3, [r7, #1552]	@ 0x610
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[40] << 8) | fsp_pkt->payload[41]);
 800e836:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e83a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e844:	021b      	lsls	r3, r3, #8
 800e846:	b21a      	sxth	r2, r3
 800e848:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e84c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800e856:	b21b      	sxth	r3, r3
 800e858:	4313      	orrs	r3, r2
 800e85a:	f8a7 360e 	strh.w	r3, [r7, #1550]	@ 0x60e
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[42] << 8) | fsp_pkt->payload[43]);
 800e85e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e862:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e86c:	021b      	lsls	r3, r3, #8
 800e86e:	b21a      	sxth	r2, r3
 800e870:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e874:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e87e:	b21b      	sxth	r3, r3
 800e880:	4313      	orrs	r3, r2
 800e882:	f8a7 360c 	strh.w	r3, [r7, #1548]	@ 0x60c
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45]);
 800e886:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e88a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e894:	021b      	lsls	r3, r3, #8
 800e896:	b21a      	sxth	r2, r3
 800e898:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e89c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e8a6:	b21b      	sxth	r3, r3
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	f8a7 360a 	strh.w	r3, [r7, #1546]	@ 0x60a
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[46] << 8) | fsp_pkt->payload[47]);
 800e8ae:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e8b2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e8bc:	021b      	lsls	r3, r3, #8
 800e8be:	b21a      	sxth	r2, r3
 800e8c0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e8c4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e8ce:	b21b      	sxth	r3, r3
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	f8a7 3608 	strh.w	r3, [r7, #1544]	@ 0x608
						    int16_t press = (int16_t)((fsp_pkt->payload[48] << 8) | fsp_pkt->payload[49]);
 800e8d6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e8da:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e8e4:	021b      	lsls	r3, r3, #8
 800e8e6:	b21a      	sxth	r2, r3
 800e8e8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e8ec:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e8f6:	b21b      	sxth	r3, r3
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	f8a7 3606 	strh.w	r3, [r7, #1542]	@ 0x606
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e8fe:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800e902:	2b00      	cmp	r3, #0
 800e904:	da03      	bge.n	800e90e <frame_processing+0x1d9a>
 800e906:	4bb5      	ldr	r3, [pc, #724]	@ (800ebdc <frame_processing+0x2068>)
 800e908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e90c:	e002      	b.n	800e914 <frame_processing+0x1da0>
 800e90e:	4bb4      	ldr	r3, [pc, #720]	@ (800ebe0 <frame_processing+0x206c>)
 800e910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800e914:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800e918:	2b00      	cmp	r3, #0
 800e91a:	bfb8      	it	lt
 800e91c:	425b      	neglt	r3, r3
 800e91e:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e920:	4ab0      	ldr	r2, [pc, #704]	@ (800ebe4 <frame_processing+0x2070>)
 800e922:	fb82 1203 	smull	r1, r2, r2, r3
 800e926:	1092      	asrs	r2, r2, #2
 800e928:	17db      	asrs	r3, r3, #31
 800e92a:	eba2 0e03 	sub.w	lr, r2, r3
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800e92e:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800e932:	2b00      	cmp	r3, #0
 800e934:	bfb8      	it	lt
 800e936:	425b      	neglt	r3, r3
 800e938:	b29b      	uxth	r3, r3
 800e93a:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e93c:	4ba9      	ldr	r3, [pc, #676]	@ (800ebe4 <frame_processing+0x2070>)
 800e93e:	fb83 1302 	smull	r1, r3, r3, r2
 800e942:	1099      	asrs	r1, r3, #2
 800e944:	17d3      	asrs	r3, r2, #31
 800e946:	1acb      	subs	r3, r1, r3
 800e948:	4619      	mov	r1, r3
 800e94a:	460b      	mov	r3, r1
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	440b      	add	r3, r1
 800e950:	005b      	lsls	r3, r3, #1
 800e952:	1ad3      	subs	r3, r2, r3
 800e954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e958:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	da03      	bge.n	800e968 <frame_processing+0x1df4>
 800e960:	4b9e      	ldr	r3, [pc, #632]	@ (800ebdc <frame_processing+0x2068>)
 800e962:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e966:	e002      	b.n	800e96e <frame_processing+0x1dfa>
 800e968:	4b9d      	ldr	r3, [pc, #628]	@ (800ebe0 <frame_processing+0x206c>)
 800e96a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800e96e:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800e972:	2b00      	cmp	r3, #0
 800e974:	bfb8      	it	lt
 800e976:	425b      	neglt	r3, r3
 800e978:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e97a:	4a9a      	ldr	r2, [pc, #616]	@ (800ebe4 <frame_processing+0x2070>)
 800e97c:	fb82 1203 	smull	r1, r2, r2, r3
 800e980:	1092      	asrs	r2, r2, #2
 800e982:	17db      	asrs	r3, r3, #31
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800e98a:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800e98e:	2b00      	cmp	r3, #0
 800e990:	bfb8      	it	lt
 800e992:	425b      	neglt	r3, r3
 800e994:	b29b      	uxth	r3, r3
 800e996:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e998:	4b92      	ldr	r3, [pc, #584]	@ (800ebe4 <frame_processing+0x2070>)
 800e99a:	fb83 1302 	smull	r1, r3, r3, r2
 800e99e:	1099      	asrs	r1, r3, #2
 800e9a0:	17d3      	asrs	r3, r2, #31
 800e9a2:	1acb      	subs	r3, r1, r3
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	440b      	add	r3, r1
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e9b2:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	da03      	bge.n	800e9c2 <frame_processing+0x1e4e>
 800e9ba:	4b88      	ldr	r3, [pc, #544]	@ (800ebdc <frame_processing+0x2068>)
 800e9bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e9c0:	e002      	b.n	800e9c8 <frame_processing+0x1e54>
 800e9c2:	4b87      	ldr	r3, [pc, #540]	@ (800ebe0 <frame_processing+0x206c>)
 800e9c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800e9c8:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	bfb8      	it	lt
 800e9d0:	425b      	neglt	r3, r3
 800e9d2:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e9d4:	4a83      	ldr	r2, [pc, #524]	@ (800ebe4 <frame_processing+0x2070>)
 800e9d6:	fb82 1203 	smull	r1, r2, r2, r3
 800e9da:	1092      	asrs	r2, r2, #2
 800e9dc:	17db      	asrs	r3, r3, #31
 800e9de:	1ad3      	subs	r3, r2, r3
 800e9e0:	67bb      	str	r3, [r7, #120]	@ 0x78
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800e9e2:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	bfb8      	it	lt
 800e9ea:	425b      	neglt	r3, r3
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e9f0:	4b7c      	ldr	r3, [pc, #496]	@ (800ebe4 <frame_processing+0x2070>)
 800e9f2:	fb83 1302 	smull	r1, r3, r3, r2
 800e9f6:	1099      	asrs	r1, r3, #2
 800e9f8:	17d3      	asrs	r3, r2, #31
 800e9fa:	1acb      	subs	r3, r1, r3
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	460b      	mov	r3, r1
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	440b      	add	r3, r1
 800ea04:	005b      	lsls	r3, r3, #1
 800ea06:	1ad3      	subs	r3, r2, r3
 800ea08:	677b      	str	r3, [r7, #116]	@ 0x74
 800ea0a:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	da03      	bge.n	800ea1a <frame_processing+0x1ea6>
 800ea12:	4b72      	ldr	r3, [pc, #456]	@ (800ebdc <frame_processing+0x2068>)
 800ea14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ea18:	e002      	b.n	800ea20 <frame_processing+0x1eac>
 800ea1a:	4b71      	ldr	r3, [pc, #452]	@ (800ebe0 <frame_processing+0x206c>)
 800ea1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800ea20:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	bfb8      	it	lt
 800ea28:	425b      	neglt	r3, r3
 800ea2a:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ea2c:	4a6d      	ldr	r2, [pc, #436]	@ (800ebe4 <frame_processing+0x2070>)
 800ea2e:	fb82 1203 	smull	r1, r2, r2, r3
 800ea32:	1092      	asrs	r2, r2, #2
 800ea34:	17db      	asrs	r3, r3, #31
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	673b      	str	r3, [r7, #112]	@ 0x70
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800ea3a:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	bfb8      	it	lt
 800ea42:	425b      	neglt	r3, r3
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ea48:	4b66      	ldr	r3, [pc, #408]	@ (800ebe4 <frame_processing+0x2070>)
 800ea4a:	fb83 2301 	smull	r2, r3, r3, r1
 800ea4e:	109a      	asrs	r2, r3, #2
 800ea50:	17cb      	asrs	r3, r1, #31
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	461a      	mov	r2, r3
 800ea56:	4613      	mov	r3, r2
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	4413      	add	r3, r2
 800ea5c:	005b      	lsls	r3, r3, #1
 800ea5e:	1acb      	subs	r3, r1, r3
 800ea60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ea62:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	da03      	bge.n	800ea72 <frame_processing+0x1efe>
 800ea6a:	4b5c      	ldr	r3, [pc, #368]	@ (800ebdc <frame_processing+0x2068>)
 800ea6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ea70:	e002      	b.n	800ea78 <frame_processing+0x1f04>
 800ea72:	4b5b      	ldr	r3, [pc, #364]	@ (800ebe0 <frame_processing+0x206c>)
 800ea74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800ea78:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	bfb8      	it	lt
 800ea80:	425b      	neglt	r3, r3
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ea86:	4b57      	ldr	r3, [pc, #348]	@ (800ebe4 <frame_processing+0x2070>)
 800ea88:	fb83 2301 	smull	r2, r3, r3, r1
 800ea8c:	109a      	asrs	r2, r3, #2
 800ea8e:	17cb      	asrs	r3, r1, #31
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	66bb      	str	r3, [r7, #104]	@ 0x68
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800ea94:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	bfb8      	it	lt
 800ea9c:	425b      	neglt	r3, r3
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800eaa2:	4b50      	ldr	r3, [pc, #320]	@ (800ebe4 <frame_processing+0x2070>)
 800eaa4:	fb83 2301 	smull	r2, r3, r3, r1
 800eaa8:	109a      	asrs	r2, r3, #2
 800eaaa:	17cb      	asrs	r3, r1, #31
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	461a      	mov	r2, r3
 800eab0:	4613      	mov	r3, r2
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	4413      	add	r3, r2
 800eab6:	005b      	lsls	r3, r3, #1
 800eab8:	1acb      	subs	r3, r1, r3
 800eaba:	667b      	str	r3, [r7, #100]	@ 0x64
 800eabc:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	da03      	bge.n	800eacc <frame_processing+0x1f58>
 800eac4:	4b45      	ldr	r3, [pc, #276]	@ (800ebdc <frame_processing+0x2068>)
 800eac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eaca:	e002      	b.n	800ead2 <frame_processing+0x1f5e>
 800eacc:	4b44      	ldr	r3, [pc, #272]	@ (800ebe0 <frame_processing+0x206c>)
 800eace:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800ead2:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	bfb8      	it	lt
 800eada:	425b      	neglt	r3, r3
 800eadc:	b29b      	uxth	r3, r3
 800eade:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800eae0:	4b40      	ldr	r3, [pc, #256]	@ (800ebe4 <frame_processing+0x2070>)
 800eae2:	fb83 2301 	smull	r2, r3, r3, r1
 800eae6:	109a      	asrs	r2, r3, #2
 800eae8:	17cb      	asrs	r3, r1, #31
 800eaea:	1ad3      	subs	r3, r2, r3
 800eaec:	663b      	str	r3, [r7, #96]	@ 0x60
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800eaee:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	bfb8      	it	lt
 800eaf6:	425b      	neglt	r3, r3
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800eafc:	4b39      	ldr	r3, [pc, #228]	@ (800ebe4 <frame_processing+0x2070>)
 800eafe:	fb83 2301 	smull	r2, r3, r3, r1
 800eb02:	109a      	asrs	r2, r3, #2
 800eb04:	17cb      	asrs	r3, r1, #31
 800eb06:	1ad3      	subs	r3, r2, r3
 800eb08:	461a      	mov	r2, r3
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	4413      	add	r3, r2
 800eb10:	005b      	lsls	r3, r3, #1
 800eb12:	1acb      	subs	r3, r1, r3
 800eb14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eb16:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	da03      	bge.n	800eb26 <frame_processing+0x1fb2>
 800eb1e:	4b2f      	ldr	r3, [pc, #188]	@ (800ebdc <frame_processing+0x2068>)
 800eb20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb24:	e002      	b.n	800eb2c <frame_processing+0x1fb8>
 800eb26:	4b2e      	ldr	r3, [pc, #184]	@ (800ebe0 <frame_processing+0x206c>)
 800eb28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800eb2c:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bfb8      	it	lt
 800eb34:	425b      	neglt	r3, r3
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800eb3a:	4b2a      	ldr	r3, [pc, #168]	@ (800ebe4 <frame_processing+0x2070>)
 800eb3c:	fb83 2301 	smull	r2, r3, r3, r1
 800eb40:	109a      	asrs	r2, r3, #2
 800eb42:	17cb      	asrs	r3, r1, #31
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	65bb      	str	r3, [r7, #88]	@ 0x58
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800eb48:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	bfb8      	it	lt
 800eb50:	425b      	neglt	r3, r3
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800eb56:	4b23      	ldr	r3, [pc, #140]	@ (800ebe4 <frame_processing+0x2070>)
 800eb58:	fb83 2301 	smull	r2, r3, r3, r1
 800eb5c:	109a      	asrs	r2, r3, #2
 800eb5e:	17cb      	asrs	r3, r1, #31
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	461a      	mov	r2, r3
 800eb64:	4613      	mov	r3, r2
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	4413      	add	r3, r2
 800eb6a:	005b      	lsls	r3, r3, #1
 800eb6c:	1acb      	subs	r3, r1, r3
 800eb6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb70:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	da03      	bge.n	800eb80 <frame_processing+0x200c>
 800eb78:	4b18      	ldr	r3, [pc, #96]	@ (800ebdc <frame_processing+0x2068>)
 800eb7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eb7e:	e002      	b.n	800eb86 <frame_processing+0x2012>
 800eb80:	4b17      	ldr	r3, [pc, #92]	@ (800ebe0 <frame_processing+0x206c>)
 800eb82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800eb86:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	bfb8      	it	lt
 800eb8e:	425b      	neglt	r3, r3
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800eb94:	4b13      	ldr	r3, [pc, #76]	@ (800ebe4 <frame_processing+0x2070>)
 800eb96:	fb83 2301 	smull	r2, r3, r3, r1
 800eb9a:	109a      	asrs	r2, r3, #2
 800eb9c:	17cb      	asrs	r3, r1, #31
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	653b      	str	r3, [r7, #80]	@ 0x50
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800eba2:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	bfb8      	it	lt
 800ebaa:	425b      	neglt	r3, r3
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ebb0:	4b0c      	ldr	r3, [pc, #48]	@ (800ebe4 <frame_processing+0x2070>)
 800ebb2:	fb83 2301 	smull	r2, r3, r3, r1
 800ebb6:	109a      	asrs	r2, r3, #2
 800ebb8:	17cb      	asrs	r3, r1, #31
 800ebba:	1ad3      	subs	r3, r2, r3
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	4413      	add	r3, r2
 800ebc4:	005b      	lsls	r3, r3, #1
 800ebc6:	1acb      	subs	r3, r1, r3
 800ebc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ebca:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	da0a      	bge.n	800ebe8 <frame_processing+0x2074>
 800ebd2:	4b02      	ldr	r3, [pc, #8]	@ (800ebdc <frame_processing+0x2068>)
 800ebd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ebd8:	e009      	b.n	800ebee <frame_processing+0x207a>
 800ebda:	bf00      	nop
 800ebdc:	08015bc4 	.word	0x08015bc4
 800ebe0:	08015bc8 	.word	0x08015bc8
 800ebe4:	66666667 	.word	0x66666667
 800ebe8:	4b2c      	ldr	r3, [pc, #176]	@ (800ec9c <frame_processing+0x2128>)
 800ebea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800ebee:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	bfb8      	it	lt
 800ebf6:	425b      	neglt	r3, r3
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ebfc:	4b28      	ldr	r3, [pc, #160]	@ (800eca0 <frame_processing+0x212c>)
 800ebfe:	fb83 2301 	smull	r2, r3, r3, r1
 800ec02:	109a      	asrs	r2, r3, #2
 800ec04:	17cb      	asrs	r3, r1, #31
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	64bb      	str	r3, [r7, #72]	@ 0x48
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800ec0a:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	bfb8      	it	lt
 800ec12:	425b      	neglt	r3, r3
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ec18:	4b21      	ldr	r3, [pc, #132]	@ (800eca0 <frame_processing+0x212c>)
 800ec1a:	fb83 2301 	smull	r2, r3, r3, r1
 800ec1e:	109a      	asrs	r2, r3, #2
 800ec20:	17cb      	asrs	r3, r1, #31
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	461a      	mov	r2, r3
 800ec26:	4613      	mov	r3, r2
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	4413      	add	r3, r2
 800ec2c:	005b      	lsls	r3, r3, #1
 800ec2e:	1acb      	subs	r3, r1, r3
 800ec30:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec32:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	da03      	bge.n	800ec42 <frame_processing+0x20ce>
 800ec3a:	4b1a      	ldr	r3, [pc, #104]	@ (800eca4 <frame_processing+0x2130>)
 800ec3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ec40:	e002      	b.n	800ec48 <frame_processing+0x20d4>
 800ec42:	4b16      	ldr	r3, [pc, #88]	@ (800ec9c <frame_processing+0x2128>)
 800ec44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800ec48:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	bfb8      	it	lt
 800ec50:	425b      	neglt	r3, r3
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ec56:	4b12      	ldr	r3, [pc, #72]	@ (800eca0 <frame_processing+0x212c>)
 800ec58:	fb83 2301 	smull	r2, r3, r3, r1
 800ec5c:	109a      	asrs	r2, r3, #2
 800ec5e:	17cb      	asrs	r3, r1, #31
 800ec60:	1ad3      	subs	r3, r2, r3
 800ec62:	643b      	str	r3, [r7, #64]	@ 0x40
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800ec64:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	bfb8      	it	lt
 800ec6c:	425b      	neglt	r3, r3
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ec72:	4b0b      	ldr	r3, [pc, #44]	@ (800eca0 <frame_processing+0x212c>)
 800ec74:	fb83 2301 	smull	r2, r3, r3, r1
 800ec78:	109a      	asrs	r2, r3, #2
 800ec7a:	17cb      	asrs	r3, r1, #31
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	461a      	mov	r2, r3
 800ec80:	4613      	mov	r3, r2
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	4413      	add	r3, r2
 800ec86:	005b      	lsls	r3, r3, #1
 800ec88:	1acb      	subs	r3, r1, r3
 800ec8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec8c:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	da09      	bge.n	800eca8 <frame_processing+0x2134>
 800ec94:	4b03      	ldr	r3, [pc, #12]	@ (800eca4 <frame_processing+0x2130>)
 800ec96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ec9a:	e008      	b.n	800ecae <frame_processing+0x213a>
 800ec9c:	08015bc8 	.word	0x08015bc8
 800eca0:	66666667 	.word	0x66666667
 800eca4:	08015bc4 	.word	0x08015bc4
 800eca8:	4b95      	ldr	r3, [pc, #596]	@ (800ef00 <frame_processing+0x238c>)
 800ecaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800ecae:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	bfb8      	it	lt
 800ecb6:	425b      	neglt	r3, r3
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ecbc:	4b91      	ldr	r3, [pc, #580]	@ (800ef04 <frame_processing+0x2390>)
 800ecbe:	fb83 2301 	smull	r2, r3, r3, r1
 800ecc2:	109a      	asrs	r2, r3, #2
 800ecc4:	17cb      	asrs	r3, r1, #31
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	63bb      	str	r3, [r7, #56]	@ 0x38
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800ecca:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	bfb8      	it	lt
 800ecd2:	425b      	neglt	r3, r3
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800ecd8:	4b8a      	ldr	r3, [pc, #552]	@ (800ef04 <frame_processing+0x2390>)
 800ecda:	fb83 2301 	smull	r2, r3, r3, r1
 800ecde:	109a      	asrs	r2, r3, #2
 800ece0:	17cb      	asrs	r3, r1, #31
 800ece2:	1ad3      	subs	r3, r2, r3
 800ece4:	461a      	mov	r2, r3
 800ece6:	4613      	mov	r3, r2
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	4413      	add	r3, r2
 800ecec:	005b      	lsls	r3, r3, #1
 800ecee:	1aca      	subs	r2, r1, r3
 800ecf0:	637a      	str	r2, [r7, #52]	@ 0x34
 800ecf2:	f8b7 2620 	ldrh.w	r2, [r7, #1568]	@ 0x620
 800ecf6:	4b84      	ldr	r3, [pc, #528]	@ (800ef08 <frame_processing+0x2394>)
 800ecf8:	fba3 2302 	umull	r2, r3, r3, r2
 800ecfc:	095b      	lsrs	r3, r3, #5
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed02:	f8b7 1620 	ldrh.w	r1, [r7, #1568]	@ 0x620
 800ed06:	4b80      	ldr	r3, [pc, #512]	@ (800ef08 <frame_processing+0x2394>)
 800ed08:	fba3 2301 	umull	r2, r3, r3, r1
 800ed0c:	095a      	lsrs	r2, r3, #5
 800ed0e:	2364      	movs	r3, #100	@ 0x64
 800ed10:	fb02 f303 	mul.w	r3, r2, r3
 800ed14:	1acb      	subs	r3, r1, r3
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed1a:	f8b7 261e 	ldrh.w	r2, [r7, #1566]	@ 0x61e
 800ed1e:	4b7a      	ldr	r3, [pc, #488]	@ (800ef08 <frame_processing+0x2394>)
 800ed20:	fba3 2302 	umull	r2, r3, r3, r2
 800ed24:	095b      	lsrs	r3, r3, #5
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed2a:	f8b7 161e 	ldrh.w	r1, [r7, #1566]	@ 0x61e
 800ed2e:	4b76      	ldr	r3, [pc, #472]	@ (800ef08 <frame_processing+0x2394>)
 800ed30:	fba3 2301 	umull	r2, r3, r3, r1
 800ed34:	095a      	lsrs	r2, r3, #5
 800ed36:	2364      	movs	r3, #100	@ 0x64
 800ed38:	fb02 f303 	mul.w	r3, r2, r3
 800ed3c:	1acb      	subs	r3, r1, r3
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed42:	f8b7 261c 	ldrh.w	r2, [r7, #1564]	@ 0x61c
 800ed46:	4b70      	ldr	r3, [pc, #448]	@ (800ef08 <frame_processing+0x2394>)
 800ed48:	fba3 2302 	umull	r2, r3, r3, r2
 800ed4c:	095b      	lsrs	r3, r3, #5
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	623b      	str	r3, [r7, #32]
 800ed52:	f8b7 161c 	ldrh.w	r1, [r7, #1564]	@ 0x61c
 800ed56:	4b6c      	ldr	r3, [pc, #432]	@ (800ef08 <frame_processing+0x2394>)
 800ed58:	fba3 2301 	umull	r2, r3, r3, r1
 800ed5c:	095a      	lsrs	r2, r3, #5
 800ed5e:	2364      	movs	r3, #100	@ 0x64
 800ed60:	fb02 f303 	mul.w	r3, r2, r3
 800ed64:	1acb      	subs	r3, r1, r3
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	61fb      	str	r3, [r7, #28]
 800ed6a:	f8b7 261a 	ldrh.w	r2, [r7, #1562]	@ 0x61a
 800ed6e:	4b66      	ldr	r3, [pc, #408]	@ (800ef08 <frame_processing+0x2394>)
 800ed70:	fba3 2302 	umull	r2, r3, r3, r2
 800ed74:	095b      	lsrs	r3, r3, #5
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	61bb      	str	r3, [r7, #24]
 800ed7a:	f8b7 161a 	ldrh.w	r1, [r7, #1562]	@ 0x61a
 800ed7e:	4b62      	ldr	r3, [pc, #392]	@ (800ef08 <frame_processing+0x2394>)
 800ed80:	fba3 2301 	umull	r2, r3, r3, r1
 800ed84:	095a      	lsrs	r2, r3, #5
 800ed86:	2364      	movs	r3, #100	@ 0x64
 800ed88:	fb02 f303 	mul.w	r3, r2, r3
 800ed8c:	1acb      	subs	r3, r1, r3
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	617b      	str	r3, [r7, #20]
 800ed92:	f897 0619 	ldrb.w	r0, [r7, #1561]	@ 0x619
 800ed96:	4601      	mov	r1, r0
 800ed98:	6139      	str	r1, [r7, #16]
 800ed9a:	f897 0618 	ldrb.w	r0, [r7, #1560]	@ 0x618
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	f897 4617 	ldrb.w	r4, [r7, #1559]	@ 0x617
 800eda4:	60bc      	str	r4, [r7, #8]
 800eda6:	f897 5616 	ldrb.w	r5, [r7, #1558]	@ 0x616
 800edaa:	607d      	str	r5, [r7, #4]
 800edac:	f897 6615 	ldrb.w	r6, [r7, #1557]	@ 0x615
 800edb0:	603e      	str	r6, [r7, #0]
 800edb2:	f9b7 6612 	ldrsh.w	r6, [r7, #1554]	@ 0x612
 800edb6:	f9b7 5610 	ldrsh.w	r5, [r7, #1552]	@ 0x610
 800edba:	f9b7 460e 	ldrsh.w	r4, [r7, #1550]	@ 0x60e
 800edbe:	f9b7 060c 	ldrsh.w	r0, [r7, #1548]	@ 0x60c
 800edc2:	f9b7 160a 	ldrsh.w	r1, [r7, #1546]	@ 0x60a
 800edc6:	f9b7 2608 	ldrsh.w	r2, [r7, #1544]	@ 0x608
 800edca:	f9b7 3606 	ldrsh.w	r3, [r7, #1542]	@ 0x606
 800edce:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 800edd2:	9332      	str	r3, [sp, #200]	@ 0xc8
 800edd4:	9231      	str	r2, [sp, #196]	@ 0xc4
 800edd6:	9130      	str	r1, [sp, #192]	@ 0xc0
 800edd8:	902f      	str	r0, [sp, #188]	@ 0xbc
 800edda:	942e      	str	r4, [sp, #184]	@ 0xb8
 800eddc:	952d      	str	r5, [sp, #180]	@ 0xb4
 800edde:	962c      	str	r6, [sp, #176]	@ 0xb0
 800ede0:	683e      	ldr	r6, [r7, #0]
 800ede2:	962b      	str	r6, [sp, #172]	@ 0xac
 800ede4:	687d      	ldr	r5, [r7, #4]
 800ede6:	952a      	str	r5, [sp, #168]	@ 0xa8
 800ede8:	68bc      	ldr	r4, [r7, #8]
 800edea:	9429      	str	r4, [sp, #164]	@ 0xa4
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	9028      	str	r0, [sp, #160]	@ 0xa0
 800edf0:	6939      	ldr	r1, [r7, #16]
 800edf2:	9127      	str	r1, [sp, #156]	@ 0x9c
 800edf4:	6979      	ldr	r1, [r7, #20]
 800edf6:	9126      	str	r1, [sp, #152]	@ 0x98
 800edf8:	69b9      	ldr	r1, [r7, #24]
 800edfa:	9125      	str	r1, [sp, #148]	@ 0x94
 800edfc:	69f9      	ldr	r1, [r7, #28]
 800edfe:	9124      	str	r1, [sp, #144]	@ 0x90
 800ee00:	6a39      	ldr	r1, [r7, #32]
 800ee02:	9123      	str	r1, [sp, #140]	@ 0x8c
 800ee04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ee06:	9122      	str	r1, [sp, #136]	@ 0x88
 800ee08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee0a:	9121      	str	r1, [sp, #132]	@ 0x84
 800ee0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee0e:	9120      	str	r1, [sp, #128]	@ 0x80
 800ee10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ee12:	911f      	str	r1, [sp, #124]	@ 0x7c
 800ee14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee16:	921e      	str	r2, [sp, #120]	@ 0x78
 800ee18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee1a:	931d      	str	r3, [sp, #116]	@ 0x74
 800ee1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ee20:	931c      	str	r3, [sp, #112]	@ 0x70
 800ee22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee24:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ee26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee28:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ee2e:	9319      	str	r3, [sp, #100]	@ 0x64
 800ee30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee32:	9318      	str	r3, [sp, #96]	@ 0x60
 800ee34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee36:	9317      	str	r3, [sp, #92]	@ 0x5c
 800ee38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ee3c:	9316      	str	r3, [sp, #88]	@ 0x58
 800ee3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee40:	9315      	str	r3, [sp, #84]	@ 0x54
 800ee42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee44:	9314      	str	r3, [sp, #80]	@ 0x50
 800ee46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ee4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee4e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ee50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee52:	9311      	str	r3, [sp, #68]	@ 0x44
 800ee54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ee58:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee60:	930e      	str	r3, [sp, #56]	@ 0x38
 800ee62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ee66:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee6a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ee6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee74:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ee78:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ee7c:	9308      	str	r3, [sp, #32]
 800ee7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee82:	9307      	str	r3, [sp, #28]
 800ee84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee86:	9306      	str	r3, [sp, #24]
 800ee88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ee8a:	9305      	str	r3, [sp, #20]
 800ee8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ee90:	9304      	str	r3, [sp, #16]
 800ee92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ee94:	9303      	str	r3, [sp, #12]
 800ee96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ee9a:	9302      	str	r3, [sp, #8]
 800ee9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eea0:	9301      	str	r3, [sp, #4]
 800eea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eea6:	9300      	str	r3, [sp, #0]
 800eea8:	4673      	mov	r3, lr
 800eeaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800eeae:	4917      	ldr	r1, [pc, #92]	@ (800ef0c <frame_processing+0x2398>)
 800eeb0:	4660      	mov	r0, ip
 800eeb2:	f000 ffeb 	bl	800fe8c <siprintf>
		                    if (uart_choose_usart2) {
 800eeb6:	4b16      	ldr	r3, [pc, #88]	@ (800ef10 <frame_processing+0x239c>)
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d005      	beq.n	800eecc <frame_processing+0x2358>
		                    	Uart_sendstring(USART2, buffer_0x13);
 800eec0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800eec4:	4619      	mov	r1, r3
 800eec6:	4813      	ldr	r0, [pc, #76]	@ (800ef14 <frame_processing+0x23a0>)
 800eec8:	f7f3 f896 	bl	8001ff8 <Uart_sendstring>
							Uart_sendstring(UART4, buffer_0x13);
 800eecc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800eed0:	4619      	mov	r1, r3
 800eed2:	4811      	ldr	r0, [pc, #68]	@ (800ef18 <frame_processing+0x23a4>)
 800eed4:	f7f3 f890 	bl	8001ff8 <Uart_sendstring>
						break;
 800eed8:	e002      	b.n	800eee0 <frame_processing+0x236c>
							clear_send_flag();
 800eeda:	f7f3 f9cf 	bl	800227c <clear_send_flag>
							break;
 800eede:	bf00      	nop
					clear_send_flag();
 800eee0:	f7f3 f9cc 	bl	800227c <clear_send_flag>
					return FSP_PKT_INVALID;
 800eee4:	2302      	movs	r3, #2
 800eee6:	e004      	b.n	800eef2 <frame_processing+0x237e>
		default:
			clear_send_flag();
 800eee8:	f7f3 f9c8 	bl	800227c <clear_send_flag>
			return FSP_PKT_WRONG_ADR;
 800eeec:	2303      	movs	r3, #3
 800eeee:	e000      	b.n	800eef2 <frame_processing+0x237e>
			break;

	}
	return 0;
 800eef0:	2300      	movs	r3, #0

}
 800eef2:	4618      	mov	r0, r3
 800eef4:	f507 67c7 	add.w	r7, r7, #1592	@ 0x638
 800eef8:	46bd      	mov	sp, r7
 800eefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eefe:	bf00      	nop
 800ef00:	08015bc8 	.word	0x08015bc8
 800ef04:	66666667 	.word	0x66666667
 800ef08:	51eb851f 	.word	0x51eb851f
 800ef0c:	080162a0 	.word	0x080162a0
 800ef10:	20005cc1 	.word	0x20005cc1
 800ef14:	40004400 	.word	0x40004400
 800ef18:	40004c00 	.word	0x40004c00

0800ef1c <atoi>:
 800ef1c:	220a      	movs	r2, #10
 800ef1e:	2100      	movs	r1, #0
 800ef20:	f000 b87c 	b.w	800f01c <strtol>

0800ef24 <_strtol_l.constprop.0>:
 800ef24:	2b24      	cmp	r3, #36	@ 0x24
 800ef26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef2a:	4686      	mov	lr, r0
 800ef2c:	4690      	mov	r8, r2
 800ef2e:	d801      	bhi.n	800ef34 <_strtol_l.constprop.0+0x10>
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d106      	bne.n	800ef42 <_strtol_l.constprop.0+0x1e>
 800ef34:	f001 f860 	bl	800fff8 <__errno>
 800ef38:	2316      	movs	r3, #22
 800ef3a:	6003      	str	r3, [r0, #0]
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef42:	4834      	ldr	r0, [pc, #208]	@ (800f014 <_strtol_l.constprop.0+0xf0>)
 800ef44:	460d      	mov	r5, r1
 800ef46:	462a      	mov	r2, r5
 800ef48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef4c:	5d06      	ldrb	r6, [r0, r4]
 800ef4e:	f016 0608 	ands.w	r6, r6, #8
 800ef52:	d1f8      	bne.n	800ef46 <_strtol_l.constprop.0+0x22>
 800ef54:	2c2d      	cmp	r4, #45	@ 0x2d
 800ef56:	d12d      	bne.n	800efb4 <_strtol_l.constprop.0+0x90>
 800ef58:	782c      	ldrb	r4, [r5, #0]
 800ef5a:	2601      	movs	r6, #1
 800ef5c:	1c95      	adds	r5, r2, #2
 800ef5e:	f033 0210 	bics.w	r2, r3, #16
 800ef62:	d109      	bne.n	800ef78 <_strtol_l.constprop.0+0x54>
 800ef64:	2c30      	cmp	r4, #48	@ 0x30
 800ef66:	d12a      	bne.n	800efbe <_strtol_l.constprop.0+0x9a>
 800ef68:	782a      	ldrb	r2, [r5, #0]
 800ef6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef6e:	2a58      	cmp	r2, #88	@ 0x58
 800ef70:	d125      	bne.n	800efbe <_strtol_l.constprop.0+0x9a>
 800ef72:	786c      	ldrb	r4, [r5, #1]
 800ef74:	2310      	movs	r3, #16
 800ef76:	3502      	adds	r5, #2
 800ef78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ef7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ef80:	2200      	movs	r2, #0
 800ef82:	fbbc f9f3 	udiv	r9, ip, r3
 800ef86:	4610      	mov	r0, r2
 800ef88:	fb03 ca19 	mls	sl, r3, r9, ip
 800ef8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ef90:	2f09      	cmp	r7, #9
 800ef92:	d81b      	bhi.n	800efcc <_strtol_l.constprop.0+0xa8>
 800ef94:	463c      	mov	r4, r7
 800ef96:	42a3      	cmp	r3, r4
 800ef98:	dd27      	ble.n	800efea <_strtol_l.constprop.0+0xc6>
 800ef9a:	1c57      	adds	r7, r2, #1
 800ef9c:	d007      	beq.n	800efae <_strtol_l.constprop.0+0x8a>
 800ef9e:	4581      	cmp	r9, r0
 800efa0:	d320      	bcc.n	800efe4 <_strtol_l.constprop.0+0xc0>
 800efa2:	d101      	bne.n	800efa8 <_strtol_l.constprop.0+0x84>
 800efa4:	45a2      	cmp	sl, r4
 800efa6:	db1d      	blt.n	800efe4 <_strtol_l.constprop.0+0xc0>
 800efa8:	fb00 4003 	mla	r0, r0, r3, r4
 800efac:	2201      	movs	r2, #1
 800efae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efb2:	e7eb      	b.n	800ef8c <_strtol_l.constprop.0+0x68>
 800efb4:	2c2b      	cmp	r4, #43	@ 0x2b
 800efb6:	bf04      	itt	eq
 800efb8:	782c      	ldrbeq	r4, [r5, #0]
 800efba:	1c95      	addeq	r5, r2, #2
 800efbc:	e7cf      	b.n	800ef5e <_strtol_l.constprop.0+0x3a>
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1da      	bne.n	800ef78 <_strtol_l.constprop.0+0x54>
 800efc2:	2c30      	cmp	r4, #48	@ 0x30
 800efc4:	bf0c      	ite	eq
 800efc6:	2308      	moveq	r3, #8
 800efc8:	230a      	movne	r3, #10
 800efca:	e7d5      	b.n	800ef78 <_strtol_l.constprop.0+0x54>
 800efcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800efd0:	2f19      	cmp	r7, #25
 800efd2:	d801      	bhi.n	800efd8 <_strtol_l.constprop.0+0xb4>
 800efd4:	3c37      	subs	r4, #55	@ 0x37
 800efd6:	e7de      	b.n	800ef96 <_strtol_l.constprop.0+0x72>
 800efd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800efdc:	2f19      	cmp	r7, #25
 800efde:	d804      	bhi.n	800efea <_strtol_l.constprop.0+0xc6>
 800efe0:	3c57      	subs	r4, #87	@ 0x57
 800efe2:	e7d8      	b.n	800ef96 <_strtol_l.constprop.0+0x72>
 800efe4:	f04f 32ff 	mov.w	r2, #4294967295
 800efe8:	e7e1      	b.n	800efae <_strtol_l.constprop.0+0x8a>
 800efea:	1c53      	adds	r3, r2, #1
 800efec:	d108      	bne.n	800f000 <_strtol_l.constprop.0+0xdc>
 800efee:	2322      	movs	r3, #34	@ 0x22
 800eff0:	f8ce 3000 	str.w	r3, [lr]
 800eff4:	4660      	mov	r0, ip
 800eff6:	f1b8 0f00 	cmp.w	r8, #0
 800effa:	d0a0      	beq.n	800ef3e <_strtol_l.constprop.0+0x1a>
 800effc:	1e69      	subs	r1, r5, #1
 800effe:	e006      	b.n	800f00e <_strtol_l.constprop.0+0xea>
 800f000:	b106      	cbz	r6, 800f004 <_strtol_l.constprop.0+0xe0>
 800f002:	4240      	negs	r0, r0
 800f004:	f1b8 0f00 	cmp.w	r8, #0
 800f008:	d099      	beq.n	800ef3e <_strtol_l.constprop.0+0x1a>
 800f00a:	2a00      	cmp	r2, #0
 800f00c:	d1f6      	bne.n	800effc <_strtol_l.constprop.0+0xd8>
 800f00e:	f8c8 1000 	str.w	r1, [r8]
 800f012:	e794      	b.n	800ef3e <_strtol_l.constprop.0+0x1a>
 800f014:	0801643d 	.word	0x0801643d

0800f018 <_strtol_r>:
 800f018:	f7ff bf84 	b.w	800ef24 <_strtol_l.constprop.0>

0800f01c <strtol>:
 800f01c:	4613      	mov	r3, r2
 800f01e:	460a      	mov	r2, r1
 800f020:	4601      	mov	r1, r0
 800f022:	4802      	ldr	r0, [pc, #8]	@ (800f02c <strtol+0x10>)
 800f024:	6800      	ldr	r0, [r0, #0]
 800f026:	f7ff bf7d 	b.w	800ef24 <_strtol_l.constprop.0>
 800f02a:	bf00      	nop
 800f02c:	20000520 	.word	0x20000520

0800f030 <__cvt>:
 800f030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f034:	ec57 6b10 	vmov	r6, r7, d0
 800f038:	2f00      	cmp	r7, #0
 800f03a:	460c      	mov	r4, r1
 800f03c:	4619      	mov	r1, r3
 800f03e:	463b      	mov	r3, r7
 800f040:	bfbb      	ittet	lt
 800f042:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f046:	461f      	movlt	r7, r3
 800f048:	2300      	movge	r3, #0
 800f04a:	232d      	movlt	r3, #45	@ 0x2d
 800f04c:	700b      	strb	r3, [r1, #0]
 800f04e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f050:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f054:	4691      	mov	r9, r2
 800f056:	f023 0820 	bic.w	r8, r3, #32
 800f05a:	bfbc      	itt	lt
 800f05c:	4632      	movlt	r2, r6
 800f05e:	4616      	movlt	r6, r2
 800f060:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f064:	d005      	beq.n	800f072 <__cvt+0x42>
 800f066:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f06a:	d100      	bne.n	800f06e <__cvt+0x3e>
 800f06c:	3401      	adds	r4, #1
 800f06e:	2102      	movs	r1, #2
 800f070:	e000      	b.n	800f074 <__cvt+0x44>
 800f072:	2103      	movs	r1, #3
 800f074:	ab03      	add	r3, sp, #12
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	ab02      	add	r3, sp, #8
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	ec47 6b10 	vmov	d0, r6, r7
 800f080:	4653      	mov	r3, sl
 800f082:	4622      	mov	r2, r4
 800f084:	f001 f884 	bl	8010190 <_dtoa_r>
 800f088:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f08c:	4605      	mov	r5, r0
 800f08e:	d119      	bne.n	800f0c4 <__cvt+0x94>
 800f090:	f019 0f01 	tst.w	r9, #1
 800f094:	d00e      	beq.n	800f0b4 <__cvt+0x84>
 800f096:	eb00 0904 	add.w	r9, r0, r4
 800f09a:	2200      	movs	r2, #0
 800f09c:	2300      	movs	r3, #0
 800f09e:	4630      	mov	r0, r6
 800f0a0:	4639      	mov	r1, r7
 800f0a2:	f7f1 fd21 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0a6:	b108      	cbz	r0, 800f0ac <__cvt+0x7c>
 800f0a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0ac:	2230      	movs	r2, #48	@ 0x30
 800f0ae:	9b03      	ldr	r3, [sp, #12]
 800f0b0:	454b      	cmp	r3, r9
 800f0b2:	d31e      	bcc.n	800f0f2 <__cvt+0xc2>
 800f0b4:	9b03      	ldr	r3, [sp, #12]
 800f0b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0b8:	1b5b      	subs	r3, r3, r5
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	6013      	str	r3, [r2, #0]
 800f0be:	b004      	add	sp, #16
 800f0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f0c8:	eb00 0904 	add.w	r9, r0, r4
 800f0cc:	d1e5      	bne.n	800f09a <__cvt+0x6a>
 800f0ce:	7803      	ldrb	r3, [r0, #0]
 800f0d0:	2b30      	cmp	r3, #48	@ 0x30
 800f0d2:	d10a      	bne.n	800f0ea <__cvt+0xba>
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	4630      	mov	r0, r6
 800f0da:	4639      	mov	r1, r7
 800f0dc:	f7f1 fd04 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0e0:	b918      	cbnz	r0, 800f0ea <__cvt+0xba>
 800f0e2:	f1c4 0401 	rsb	r4, r4, #1
 800f0e6:	f8ca 4000 	str.w	r4, [sl]
 800f0ea:	f8da 3000 	ldr.w	r3, [sl]
 800f0ee:	4499      	add	r9, r3
 800f0f0:	e7d3      	b.n	800f09a <__cvt+0x6a>
 800f0f2:	1c59      	adds	r1, r3, #1
 800f0f4:	9103      	str	r1, [sp, #12]
 800f0f6:	701a      	strb	r2, [r3, #0]
 800f0f8:	e7d9      	b.n	800f0ae <__cvt+0x7e>

0800f0fa <__exponent>:
 800f0fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0fc:	2900      	cmp	r1, #0
 800f0fe:	bfba      	itte	lt
 800f100:	4249      	neglt	r1, r1
 800f102:	232d      	movlt	r3, #45	@ 0x2d
 800f104:	232b      	movge	r3, #43	@ 0x2b
 800f106:	2909      	cmp	r1, #9
 800f108:	7002      	strb	r2, [r0, #0]
 800f10a:	7043      	strb	r3, [r0, #1]
 800f10c:	dd29      	ble.n	800f162 <__exponent+0x68>
 800f10e:	f10d 0307 	add.w	r3, sp, #7
 800f112:	461d      	mov	r5, r3
 800f114:	270a      	movs	r7, #10
 800f116:	461a      	mov	r2, r3
 800f118:	fbb1 f6f7 	udiv	r6, r1, r7
 800f11c:	fb07 1416 	mls	r4, r7, r6, r1
 800f120:	3430      	adds	r4, #48	@ 0x30
 800f122:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f126:	460c      	mov	r4, r1
 800f128:	2c63      	cmp	r4, #99	@ 0x63
 800f12a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f12e:	4631      	mov	r1, r6
 800f130:	dcf1      	bgt.n	800f116 <__exponent+0x1c>
 800f132:	3130      	adds	r1, #48	@ 0x30
 800f134:	1e94      	subs	r4, r2, #2
 800f136:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f13a:	1c41      	adds	r1, r0, #1
 800f13c:	4623      	mov	r3, r4
 800f13e:	42ab      	cmp	r3, r5
 800f140:	d30a      	bcc.n	800f158 <__exponent+0x5e>
 800f142:	f10d 0309 	add.w	r3, sp, #9
 800f146:	1a9b      	subs	r3, r3, r2
 800f148:	42ac      	cmp	r4, r5
 800f14a:	bf88      	it	hi
 800f14c:	2300      	movhi	r3, #0
 800f14e:	3302      	adds	r3, #2
 800f150:	4403      	add	r3, r0
 800f152:	1a18      	subs	r0, r3, r0
 800f154:	b003      	add	sp, #12
 800f156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f158:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f15c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f160:	e7ed      	b.n	800f13e <__exponent+0x44>
 800f162:	2330      	movs	r3, #48	@ 0x30
 800f164:	3130      	adds	r1, #48	@ 0x30
 800f166:	7083      	strb	r3, [r0, #2]
 800f168:	70c1      	strb	r1, [r0, #3]
 800f16a:	1d03      	adds	r3, r0, #4
 800f16c:	e7f1      	b.n	800f152 <__exponent+0x58>
	...

0800f170 <_printf_float>:
 800f170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f174:	b08d      	sub	sp, #52	@ 0x34
 800f176:	460c      	mov	r4, r1
 800f178:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f17c:	4616      	mov	r6, r2
 800f17e:	461f      	mov	r7, r3
 800f180:	4605      	mov	r5, r0
 800f182:	f000 feef 	bl	800ff64 <_localeconv_r>
 800f186:	6803      	ldr	r3, [r0, #0]
 800f188:	9304      	str	r3, [sp, #16]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7f1 f880 	bl	8000290 <strlen>
 800f190:	2300      	movs	r3, #0
 800f192:	930a      	str	r3, [sp, #40]	@ 0x28
 800f194:	f8d8 3000 	ldr.w	r3, [r8]
 800f198:	9005      	str	r0, [sp, #20]
 800f19a:	3307      	adds	r3, #7
 800f19c:	f023 0307 	bic.w	r3, r3, #7
 800f1a0:	f103 0208 	add.w	r2, r3, #8
 800f1a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f1a8:	f8d4 b000 	ldr.w	fp, [r4]
 800f1ac:	f8c8 2000 	str.w	r2, [r8]
 800f1b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f1b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f1b8:	9307      	str	r3, [sp, #28]
 800f1ba:	f8cd 8018 	str.w	r8, [sp, #24]
 800f1be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f1c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1c6:	4b9c      	ldr	r3, [pc, #624]	@ (800f438 <_printf_float+0x2c8>)
 800f1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1cc:	f7f1 fcbe 	bl	8000b4c <__aeabi_dcmpun>
 800f1d0:	bb70      	cbnz	r0, 800f230 <_printf_float+0xc0>
 800f1d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1d6:	4b98      	ldr	r3, [pc, #608]	@ (800f438 <_printf_float+0x2c8>)
 800f1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1dc:	f7f1 fc98 	bl	8000b10 <__aeabi_dcmple>
 800f1e0:	bb30      	cbnz	r0, 800f230 <_printf_float+0xc0>
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	4640      	mov	r0, r8
 800f1e8:	4649      	mov	r1, r9
 800f1ea:	f7f1 fc87 	bl	8000afc <__aeabi_dcmplt>
 800f1ee:	b110      	cbz	r0, 800f1f6 <_printf_float+0x86>
 800f1f0:	232d      	movs	r3, #45	@ 0x2d
 800f1f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1f6:	4a91      	ldr	r2, [pc, #580]	@ (800f43c <_printf_float+0x2cc>)
 800f1f8:	4b91      	ldr	r3, [pc, #580]	@ (800f440 <_printf_float+0x2d0>)
 800f1fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f1fe:	bf94      	ite	ls
 800f200:	4690      	movls	r8, r2
 800f202:	4698      	movhi	r8, r3
 800f204:	2303      	movs	r3, #3
 800f206:	6123      	str	r3, [r4, #16]
 800f208:	f02b 0304 	bic.w	r3, fp, #4
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	f04f 0900 	mov.w	r9, #0
 800f212:	9700      	str	r7, [sp, #0]
 800f214:	4633      	mov	r3, r6
 800f216:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f218:	4621      	mov	r1, r4
 800f21a:	4628      	mov	r0, r5
 800f21c:	f000 f9d2 	bl	800f5c4 <_printf_common>
 800f220:	3001      	adds	r0, #1
 800f222:	f040 808d 	bne.w	800f340 <_printf_float+0x1d0>
 800f226:	f04f 30ff 	mov.w	r0, #4294967295
 800f22a:	b00d      	add	sp, #52	@ 0x34
 800f22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f230:	4642      	mov	r2, r8
 800f232:	464b      	mov	r3, r9
 800f234:	4640      	mov	r0, r8
 800f236:	4649      	mov	r1, r9
 800f238:	f7f1 fc88 	bl	8000b4c <__aeabi_dcmpun>
 800f23c:	b140      	cbz	r0, 800f250 <_printf_float+0xe0>
 800f23e:	464b      	mov	r3, r9
 800f240:	2b00      	cmp	r3, #0
 800f242:	bfbc      	itt	lt
 800f244:	232d      	movlt	r3, #45	@ 0x2d
 800f246:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f24a:	4a7e      	ldr	r2, [pc, #504]	@ (800f444 <_printf_float+0x2d4>)
 800f24c:	4b7e      	ldr	r3, [pc, #504]	@ (800f448 <_printf_float+0x2d8>)
 800f24e:	e7d4      	b.n	800f1fa <_printf_float+0x8a>
 800f250:	6863      	ldr	r3, [r4, #4]
 800f252:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f256:	9206      	str	r2, [sp, #24]
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	d13b      	bne.n	800f2d4 <_printf_float+0x164>
 800f25c:	2306      	movs	r3, #6
 800f25e:	6063      	str	r3, [r4, #4]
 800f260:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f264:	2300      	movs	r3, #0
 800f266:	6022      	str	r2, [r4, #0]
 800f268:	9303      	str	r3, [sp, #12]
 800f26a:	ab0a      	add	r3, sp, #40	@ 0x28
 800f26c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f270:	ab09      	add	r3, sp, #36	@ 0x24
 800f272:	9300      	str	r3, [sp, #0]
 800f274:	6861      	ldr	r1, [r4, #4]
 800f276:	ec49 8b10 	vmov	d0, r8, r9
 800f27a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f27e:	4628      	mov	r0, r5
 800f280:	f7ff fed6 	bl	800f030 <__cvt>
 800f284:	9b06      	ldr	r3, [sp, #24]
 800f286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f288:	2b47      	cmp	r3, #71	@ 0x47
 800f28a:	4680      	mov	r8, r0
 800f28c:	d129      	bne.n	800f2e2 <_printf_float+0x172>
 800f28e:	1cc8      	adds	r0, r1, #3
 800f290:	db02      	blt.n	800f298 <_printf_float+0x128>
 800f292:	6863      	ldr	r3, [r4, #4]
 800f294:	4299      	cmp	r1, r3
 800f296:	dd41      	ble.n	800f31c <_printf_float+0x1ac>
 800f298:	f1aa 0a02 	sub.w	sl, sl, #2
 800f29c:	fa5f fa8a 	uxtb.w	sl, sl
 800f2a0:	3901      	subs	r1, #1
 800f2a2:	4652      	mov	r2, sl
 800f2a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f2a8:	9109      	str	r1, [sp, #36]	@ 0x24
 800f2aa:	f7ff ff26 	bl	800f0fa <__exponent>
 800f2ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2b0:	1813      	adds	r3, r2, r0
 800f2b2:	2a01      	cmp	r2, #1
 800f2b4:	4681      	mov	r9, r0
 800f2b6:	6123      	str	r3, [r4, #16]
 800f2b8:	dc02      	bgt.n	800f2c0 <_printf_float+0x150>
 800f2ba:	6822      	ldr	r2, [r4, #0]
 800f2bc:	07d2      	lsls	r2, r2, #31
 800f2be:	d501      	bpl.n	800f2c4 <_printf_float+0x154>
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	6123      	str	r3, [r4, #16]
 800f2c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d0a2      	beq.n	800f212 <_printf_float+0xa2>
 800f2cc:	232d      	movs	r3, #45	@ 0x2d
 800f2ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2d2:	e79e      	b.n	800f212 <_printf_float+0xa2>
 800f2d4:	9a06      	ldr	r2, [sp, #24]
 800f2d6:	2a47      	cmp	r2, #71	@ 0x47
 800f2d8:	d1c2      	bne.n	800f260 <_printf_float+0xf0>
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1c0      	bne.n	800f260 <_printf_float+0xf0>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e7bd      	b.n	800f25e <_printf_float+0xee>
 800f2e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f2e6:	d9db      	bls.n	800f2a0 <_printf_float+0x130>
 800f2e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f2ec:	d118      	bne.n	800f320 <_printf_float+0x1b0>
 800f2ee:	2900      	cmp	r1, #0
 800f2f0:	6863      	ldr	r3, [r4, #4]
 800f2f2:	dd0b      	ble.n	800f30c <_printf_float+0x19c>
 800f2f4:	6121      	str	r1, [r4, #16]
 800f2f6:	b913      	cbnz	r3, 800f2fe <_printf_float+0x18e>
 800f2f8:	6822      	ldr	r2, [r4, #0]
 800f2fa:	07d0      	lsls	r0, r2, #31
 800f2fc:	d502      	bpl.n	800f304 <_printf_float+0x194>
 800f2fe:	3301      	adds	r3, #1
 800f300:	440b      	add	r3, r1
 800f302:	6123      	str	r3, [r4, #16]
 800f304:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f306:	f04f 0900 	mov.w	r9, #0
 800f30a:	e7db      	b.n	800f2c4 <_printf_float+0x154>
 800f30c:	b913      	cbnz	r3, 800f314 <_printf_float+0x1a4>
 800f30e:	6822      	ldr	r2, [r4, #0]
 800f310:	07d2      	lsls	r2, r2, #31
 800f312:	d501      	bpl.n	800f318 <_printf_float+0x1a8>
 800f314:	3302      	adds	r3, #2
 800f316:	e7f4      	b.n	800f302 <_printf_float+0x192>
 800f318:	2301      	movs	r3, #1
 800f31a:	e7f2      	b.n	800f302 <_printf_float+0x192>
 800f31c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f322:	4299      	cmp	r1, r3
 800f324:	db05      	blt.n	800f332 <_printf_float+0x1c2>
 800f326:	6823      	ldr	r3, [r4, #0]
 800f328:	6121      	str	r1, [r4, #16]
 800f32a:	07d8      	lsls	r0, r3, #31
 800f32c:	d5ea      	bpl.n	800f304 <_printf_float+0x194>
 800f32e:	1c4b      	adds	r3, r1, #1
 800f330:	e7e7      	b.n	800f302 <_printf_float+0x192>
 800f332:	2900      	cmp	r1, #0
 800f334:	bfd4      	ite	le
 800f336:	f1c1 0202 	rsble	r2, r1, #2
 800f33a:	2201      	movgt	r2, #1
 800f33c:	4413      	add	r3, r2
 800f33e:	e7e0      	b.n	800f302 <_printf_float+0x192>
 800f340:	6823      	ldr	r3, [r4, #0]
 800f342:	055a      	lsls	r2, r3, #21
 800f344:	d407      	bmi.n	800f356 <_printf_float+0x1e6>
 800f346:	6923      	ldr	r3, [r4, #16]
 800f348:	4642      	mov	r2, r8
 800f34a:	4631      	mov	r1, r6
 800f34c:	4628      	mov	r0, r5
 800f34e:	47b8      	blx	r7
 800f350:	3001      	adds	r0, #1
 800f352:	d12b      	bne.n	800f3ac <_printf_float+0x23c>
 800f354:	e767      	b.n	800f226 <_printf_float+0xb6>
 800f356:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f35a:	f240 80dd 	bls.w	800f518 <_printf_float+0x3a8>
 800f35e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f362:	2200      	movs	r2, #0
 800f364:	2300      	movs	r3, #0
 800f366:	f7f1 fbbf 	bl	8000ae8 <__aeabi_dcmpeq>
 800f36a:	2800      	cmp	r0, #0
 800f36c:	d033      	beq.n	800f3d6 <_printf_float+0x266>
 800f36e:	4a37      	ldr	r2, [pc, #220]	@ (800f44c <_printf_float+0x2dc>)
 800f370:	2301      	movs	r3, #1
 800f372:	4631      	mov	r1, r6
 800f374:	4628      	mov	r0, r5
 800f376:	47b8      	blx	r7
 800f378:	3001      	adds	r0, #1
 800f37a:	f43f af54 	beq.w	800f226 <_printf_float+0xb6>
 800f37e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f382:	4543      	cmp	r3, r8
 800f384:	db02      	blt.n	800f38c <_printf_float+0x21c>
 800f386:	6823      	ldr	r3, [r4, #0]
 800f388:	07d8      	lsls	r0, r3, #31
 800f38a:	d50f      	bpl.n	800f3ac <_printf_float+0x23c>
 800f38c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f390:	4631      	mov	r1, r6
 800f392:	4628      	mov	r0, r5
 800f394:	47b8      	blx	r7
 800f396:	3001      	adds	r0, #1
 800f398:	f43f af45 	beq.w	800f226 <_printf_float+0xb6>
 800f39c:	f04f 0900 	mov.w	r9, #0
 800f3a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3a4:	f104 0a1a 	add.w	sl, r4, #26
 800f3a8:	45c8      	cmp	r8, r9
 800f3aa:	dc09      	bgt.n	800f3c0 <_printf_float+0x250>
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	079b      	lsls	r3, r3, #30
 800f3b0:	f100 8103 	bmi.w	800f5ba <_printf_float+0x44a>
 800f3b4:	68e0      	ldr	r0, [r4, #12]
 800f3b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3b8:	4298      	cmp	r0, r3
 800f3ba:	bfb8      	it	lt
 800f3bc:	4618      	movlt	r0, r3
 800f3be:	e734      	b.n	800f22a <_printf_float+0xba>
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	4652      	mov	r2, sl
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	47b8      	blx	r7
 800f3ca:	3001      	adds	r0, #1
 800f3cc:	f43f af2b 	beq.w	800f226 <_printf_float+0xb6>
 800f3d0:	f109 0901 	add.w	r9, r9, #1
 800f3d4:	e7e8      	b.n	800f3a8 <_printf_float+0x238>
 800f3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	dc39      	bgt.n	800f450 <_printf_float+0x2e0>
 800f3dc:	4a1b      	ldr	r2, [pc, #108]	@ (800f44c <_printf_float+0x2dc>)
 800f3de:	2301      	movs	r3, #1
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	47b8      	blx	r7
 800f3e6:	3001      	adds	r0, #1
 800f3e8:	f43f af1d 	beq.w	800f226 <_printf_float+0xb6>
 800f3ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f3f0:	ea59 0303 	orrs.w	r3, r9, r3
 800f3f4:	d102      	bne.n	800f3fc <_printf_float+0x28c>
 800f3f6:	6823      	ldr	r3, [r4, #0]
 800f3f8:	07d9      	lsls	r1, r3, #31
 800f3fa:	d5d7      	bpl.n	800f3ac <_printf_float+0x23c>
 800f3fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f400:	4631      	mov	r1, r6
 800f402:	4628      	mov	r0, r5
 800f404:	47b8      	blx	r7
 800f406:	3001      	adds	r0, #1
 800f408:	f43f af0d 	beq.w	800f226 <_printf_float+0xb6>
 800f40c:	f04f 0a00 	mov.w	sl, #0
 800f410:	f104 0b1a 	add.w	fp, r4, #26
 800f414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f416:	425b      	negs	r3, r3
 800f418:	4553      	cmp	r3, sl
 800f41a:	dc01      	bgt.n	800f420 <_printf_float+0x2b0>
 800f41c:	464b      	mov	r3, r9
 800f41e:	e793      	b.n	800f348 <_printf_float+0x1d8>
 800f420:	2301      	movs	r3, #1
 800f422:	465a      	mov	r2, fp
 800f424:	4631      	mov	r1, r6
 800f426:	4628      	mov	r0, r5
 800f428:	47b8      	blx	r7
 800f42a:	3001      	adds	r0, #1
 800f42c:	f43f aefb 	beq.w	800f226 <_printf_float+0xb6>
 800f430:	f10a 0a01 	add.w	sl, sl, #1
 800f434:	e7ee      	b.n	800f414 <_printf_float+0x2a4>
 800f436:	bf00      	nop
 800f438:	7fefffff 	.word	0x7fefffff
 800f43c:	0801653d 	.word	0x0801653d
 800f440:	08016541 	.word	0x08016541
 800f444:	08016545 	.word	0x08016545
 800f448:	08016549 	.word	0x08016549
 800f44c:	0801654d 	.word	0x0801654d
 800f450:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f452:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f456:	4553      	cmp	r3, sl
 800f458:	bfa8      	it	ge
 800f45a:	4653      	movge	r3, sl
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	4699      	mov	r9, r3
 800f460:	dc36      	bgt.n	800f4d0 <_printf_float+0x360>
 800f462:	f04f 0b00 	mov.w	fp, #0
 800f466:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f46a:	f104 021a 	add.w	r2, r4, #26
 800f46e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f470:	9306      	str	r3, [sp, #24]
 800f472:	eba3 0309 	sub.w	r3, r3, r9
 800f476:	455b      	cmp	r3, fp
 800f478:	dc31      	bgt.n	800f4de <_printf_float+0x36e>
 800f47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f47c:	459a      	cmp	sl, r3
 800f47e:	dc3a      	bgt.n	800f4f6 <_printf_float+0x386>
 800f480:	6823      	ldr	r3, [r4, #0]
 800f482:	07da      	lsls	r2, r3, #31
 800f484:	d437      	bmi.n	800f4f6 <_printf_float+0x386>
 800f486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f488:	ebaa 0903 	sub.w	r9, sl, r3
 800f48c:	9b06      	ldr	r3, [sp, #24]
 800f48e:	ebaa 0303 	sub.w	r3, sl, r3
 800f492:	4599      	cmp	r9, r3
 800f494:	bfa8      	it	ge
 800f496:	4699      	movge	r9, r3
 800f498:	f1b9 0f00 	cmp.w	r9, #0
 800f49c:	dc33      	bgt.n	800f506 <_printf_float+0x396>
 800f49e:	f04f 0800 	mov.w	r8, #0
 800f4a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4a6:	f104 0b1a 	add.w	fp, r4, #26
 800f4aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4ac:	ebaa 0303 	sub.w	r3, sl, r3
 800f4b0:	eba3 0309 	sub.w	r3, r3, r9
 800f4b4:	4543      	cmp	r3, r8
 800f4b6:	f77f af79 	ble.w	800f3ac <_printf_float+0x23c>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	465a      	mov	r2, fp
 800f4be:	4631      	mov	r1, r6
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	47b8      	blx	r7
 800f4c4:	3001      	adds	r0, #1
 800f4c6:	f43f aeae 	beq.w	800f226 <_printf_float+0xb6>
 800f4ca:	f108 0801 	add.w	r8, r8, #1
 800f4ce:	e7ec      	b.n	800f4aa <_printf_float+0x33a>
 800f4d0:	4642      	mov	r2, r8
 800f4d2:	4631      	mov	r1, r6
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	47b8      	blx	r7
 800f4d8:	3001      	adds	r0, #1
 800f4da:	d1c2      	bne.n	800f462 <_printf_float+0x2f2>
 800f4dc:	e6a3      	b.n	800f226 <_printf_float+0xb6>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	4631      	mov	r1, r6
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	9206      	str	r2, [sp, #24]
 800f4e6:	47b8      	blx	r7
 800f4e8:	3001      	adds	r0, #1
 800f4ea:	f43f ae9c 	beq.w	800f226 <_printf_float+0xb6>
 800f4ee:	9a06      	ldr	r2, [sp, #24]
 800f4f0:	f10b 0b01 	add.w	fp, fp, #1
 800f4f4:	e7bb      	b.n	800f46e <_printf_float+0x2fe>
 800f4f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b8      	blx	r7
 800f500:	3001      	adds	r0, #1
 800f502:	d1c0      	bne.n	800f486 <_printf_float+0x316>
 800f504:	e68f      	b.n	800f226 <_printf_float+0xb6>
 800f506:	9a06      	ldr	r2, [sp, #24]
 800f508:	464b      	mov	r3, r9
 800f50a:	4442      	add	r2, r8
 800f50c:	4631      	mov	r1, r6
 800f50e:	4628      	mov	r0, r5
 800f510:	47b8      	blx	r7
 800f512:	3001      	adds	r0, #1
 800f514:	d1c3      	bne.n	800f49e <_printf_float+0x32e>
 800f516:	e686      	b.n	800f226 <_printf_float+0xb6>
 800f518:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f51c:	f1ba 0f01 	cmp.w	sl, #1
 800f520:	dc01      	bgt.n	800f526 <_printf_float+0x3b6>
 800f522:	07db      	lsls	r3, r3, #31
 800f524:	d536      	bpl.n	800f594 <_printf_float+0x424>
 800f526:	2301      	movs	r3, #1
 800f528:	4642      	mov	r2, r8
 800f52a:	4631      	mov	r1, r6
 800f52c:	4628      	mov	r0, r5
 800f52e:	47b8      	blx	r7
 800f530:	3001      	adds	r0, #1
 800f532:	f43f ae78 	beq.w	800f226 <_printf_float+0xb6>
 800f536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f53a:	4631      	mov	r1, r6
 800f53c:	4628      	mov	r0, r5
 800f53e:	47b8      	blx	r7
 800f540:	3001      	adds	r0, #1
 800f542:	f43f ae70 	beq.w	800f226 <_printf_float+0xb6>
 800f546:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f54a:	2200      	movs	r2, #0
 800f54c:	2300      	movs	r3, #0
 800f54e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f552:	f7f1 fac9 	bl	8000ae8 <__aeabi_dcmpeq>
 800f556:	b9c0      	cbnz	r0, 800f58a <_printf_float+0x41a>
 800f558:	4653      	mov	r3, sl
 800f55a:	f108 0201 	add.w	r2, r8, #1
 800f55e:	4631      	mov	r1, r6
 800f560:	4628      	mov	r0, r5
 800f562:	47b8      	blx	r7
 800f564:	3001      	adds	r0, #1
 800f566:	d10c      	bne.n	800f582 <_printf_float+0x412>
 800f568:	e65d      	b.n	800f226 <_printf_float+0xb6>
 800f56a:	2301      	movs	r3, #1
 800f56c:	465a      	mov	r2, fp
 800f56e:	4631      	mov	r1, r6
 800f570:	4628      	mov	r0, r5
 800f572:	47b8      	blx	r7
 800f574:	3001      	adds	r0, #1
 800f576:	f43f ae56 	beq.w	800f226 <_printf_float+0xb6>
 800f57a:	f108 0801 	add.w	r8, r8, #1
 800f57e:	45d0      	cmp	r8, sl
 800f580:	dbf3      	blt.n	800f56a <_printf_float+0x3fa>
 800f582:	464b      	mov	r3, r9
 800f584:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f588:	e6df      	b.n	800f34a <_printf_float+0x1da>
 800f58a:	f04f 0800 	mov.w	r8, #0
 800f58e:	f104 0b1a 	add.w	fp, r4, #26
 800f592:	e7f4      	b.n	800f57e <_printf_float+0x40e>
 800f594:	2301      	movs	r3, #1
 800f596:	4642      	mov	r2, r8
 800f598:	e7e1      	b.n	800f55e <_printf_float+0x3ee>
 800f59a:	2301      	movs	r3, #1
 800f59c:	464a      	mov	r2, r9
 800f59e:	4631      	mov	r1, r6
 800f5a0:	4628      	mov	r0, r5
 800f5a2:	47b8      	blx	r7
 800f5a4:	3001      	adds	r0, #1
 800f5a6:	f43f ae3e 	beq.w	800f226 <_printf_float+0xb6>
 800f5aa:	f108 0801 	add.w	r8, r8, #1
 800f5ae:	68e3      	ldr	r3, [r4, #12]
 800f5b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5b2:	1a5b      	subs	r3, r3, r1
 800f5b4:	4543      	cmp	r3, r8
 800f5b6:	dcf0      	bgt.n	800f59a <_printf_float+0x42a>
 800f5b8:	e6fc      	b.n	800f3b4 <_printf_float+0x244>
 800f5ba:	f04f 0800 	mov.w	r8, #0
 800f5be:	f104 0919 	add.w	r9, r4, #25
 800f5c2:	e7f4      	b.n	800f5ae <_printf_float+0x43e>

0800f5c4 <_printf_common>:
 800f5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5c8:	4616      	mov	r6, r2
 800f5ca:	4698      	mov	r8, r3
 800f5cc:	688a      	ldr	r2, [r1, #8]
 800f5ce:	690b      	ldr	r3, [r1, #16]
 800f5d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	bfb8      	it	lt
 800f5d8:	4613      	movlt	r3, r2
 800f5da:	6033      	str	r3, [r6, #0]
 800f5dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f5e0:	4607      	mov	r7, r0
 800f5e2:	460c      	mov	r4, r1
 800f5e4:	b10a      	cbz	r2, 800f5ea <_printf_common+0x26>
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	6033      	str	r3, [r6, #0]
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	0699      	lsls	r1, r3, #26
 800f5ee:	bf42      	ittt	mi
 800f5f0:	6833      	ldrmi	r3, [r6, #0]
 800f5f2:	3302      	addmi	r3, #2
 800f5f4:	6033      	strmi	r3, [r6, #0]
 800f5f6:	6825      	ldr	r5, [r4, #0]
 800f5f8:	f015 0506 	ands.w	r5, r5, #6
 800f5fc:	d106      	bne.n	800f60c <_printf_common+0x48>
 800f5fe:	f104 0a19 	add.w	sl, r4, #25
 800f602:	68e3      	ldr	r3, [r4, #12]
 800f604:	6832      	ldr	r2, [r6, #0]
 800f606:	1a9b      	subs	r3, r3, r2
 800f608:	42ab      	cmp	r3, r5
 800f60a:	dc26      	bgt.n	800f65a <_printf_common+0x96>
 800f60c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f610:	6822      	ldr	r2, [r4, #0]
 800f612:	3b00      	subs	r3, #0
 800f614:	bf18      	it	ne
 800f616:	2301      	movne	r3, #1
 800f618:	0692      	lsls	r2, r2, #26
 800f61a:	d42b      	bmi.n	800f674 <_printf_common+0xb0>
 800f61c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f620:	4641      	mov	r1, r8
 800f622:	4638      	mov	r0, r7
 800f624:	47c8      	blx	r9
 800f626:	3001      	adds	r0, #1
 800f628:	d01e      	beq.n	800f668 <_printf_common+0xa4>
 800f62a:	6823      	ldr	r3, [r4, #0]
 800f62c:	6922      	ldr	r2, [r4, #16]
 800f62e:	f003 0306 	and.w	r3, r3, #6
 800f632:	2b04      	cmp	r3, #4
 800f634:	bf02      	ittt	eq
 800f636:	68e5      	ldreq	r5, [r4, #12]
 800f638:	6833      	ldreq	r3, [r6, #0]
 800f63a:	1aed      	subeq	r5, r5, r3
 800f63c:	68a3      	ldr	r3, [r4, #8]
 800f63e:	bf0c      	ite	eq
 800f640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f644:	2500      	movne	r5, #0
 800f646:	4293      	cmp	r3, r2
 800f648:	bfc4      	itt	gt
 800f64a:	1a9b      	subgt	r3, r3, r2
 800f64c:	18ed      	addgt	r5, r5, r3
 800f64e:	2600      	movs	r6, #0
 800f650:	341a      	adds	r4, #26
 800f652:	42b5      	cmp	r5, r6
 800f654:	d11a      	bne.n	800f68c <_printf_common+0xc8>
 800f656:	2000      	movs	r0, #0
 800f658:	e008      	b.n	800f66c <_printf_common+0xa8>
 800f65a:	2301      	movs	r3, #1
 800f65c:	4652      	mov	r2, sl
 800f65e:	4641      	mov	r1, r8
 800f660:	4638      	mov	r0, r7
 800f662:	47c8      	blx	r9
 800f664:	3001      	adds	r0, #1
 800f666:	d103      	bne.n	800f670 <_printf_common+0xac>
 800f668:	f04f 30ff 	mov.w	r0, #4294967295
 800f66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f670:	3501      	adds	r5, #1
 800f672:	e7c6      	b.n	800f602 <_printf_common+0x3e>
 800f674:	18e1      	adds	r1, r4, r3
 800f676:	1c5a      	adds	r2, r3, #1
 800f678:	2030      	movs	r0, #48	@ 0x30
 800f67a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f67e:	4422      	add	r2, r4
 800f680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f688:	3302      	adds	r3, #2
 800f68a:	e7c7      	b.n	800f61c <_printf_common+0x58>
 800f68c:	2301      	movs	r3, #1
 800f68e:	4622      	mov	r2, r4
 800f690:	4641      	mov	r1, r8
 800f692:	4638      	mov	r0, r7
 800f694:	47c8      	blx	r9
 800f696:	3001      	adds	r0, #1
 800f698:	d0e6      	beq.n	800f668 <_printf_common+0xa4>
 800f69a:	3601      	adds	r6, #1
 800f69c:	e7d9      	b.n	800f652 <_printf_common+0x8e>
	...

0800f6a0 <_printf_i>:
 800f6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a4:	7e0f      	ldrb	r7, [r1, #24]
 800f6a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f6a8:	2f78      	cmp	r7, #120	@ 0x78
 800f6aa:	4691      	mov	r9, r2
 800f6ac:	4680      	mov	r8, r0
 800f6ae:	460c      	mov	r4, r1
 800f6b0:	469a      	mov	sl, r3
 800f6b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f6b6:	d807      	bhi.n	800f6c8 <_printf_i+0x28>
 800f6b8:	2f62      	cmp	r7, #98	@ 0x62
 800f6ba:	d80a      	bhi.n	800f6d2 <_printf_i+0x32>
 800f6bc:	2f00      	cmp	r7, #0
 800f6be:	f000 80d2 	beq.w	800f866 <_printf_i+0x1c6>
 800f6c2:	2f58      	cmp	r7, #88	@ 0x58
 800f6c4:	f000 80b9 	beq.w	800f83a <_printf_i+0x19a>
 800f6c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f6cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f6d0:	e03a      	b.n	800f748 <_printf_i+0xa8>
 800f6d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f6d6:	2b15      	cmp	r3, #21
 800f6d8:	d8f6      	bhi.n	800f6c8 <_printf_i+0x28>
 800f6da:	a101      	add	r1, pc, #4	@ (adr r1, 800f6e0 <_printf_i+0x40>)
 800f6dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6e0:	0800f739 	.word	0x0800f739
 800f6e4:	0800f74d 	.word	0x0800f74d
 800f6e8:	0800f6c9 	.word	0x0800f6c9
 800f6ec:	0800f6c9 	.word	0x0800f6c9
 800f6f0:	0800f6c9 	.word	0x0800f6c9
 800f6f4:	0800f6c9 	.word	0x0800f6c9
 800f6f8:	0800f74d 	.word	0x0800f74d
 800f6fc:	0800f6c9 	.word	0x0800f6c9
 800f700:	0800f6c9 	.word	0x0800f6c9
 800f704:	0800f6c9 	.word	0x0800f6c9
 800f708:	0800f6c9 	.word	0x0800f6c9
 800f70c:	0800f84d 	.word	0x0800f84d
 800f710:	0800f777 	.word	0x0800f777
 800f714:	0800f807 	.word	0x0800f807
 800f718:	0800f6c9 	.word	0x0800f6c9
 800f71c:	0800f6c9 	.word	0x0800f6c9
 800f720:	0800f86f 	.word	0x0800f86f
 800f724:	0800f6c9 	.word	0x0800f6c9
 800f728:	0800f777 	.word	0x0800f777
 800f72c:	0800f6c9 	.word	0x0800f6c9
 800f730:	0800f6c9 	.word	0x0800f6c9
 800f734:	0800f80f 	.word	0x0800f80f
 800f738:	6833      	ldr	r3, [r6, #0]
 800f73a:	1d1a      	adds	r2, r3, #4
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6032      	str	r2, [r6, #0]
 800f740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f748:	2301      	movs	r3, #1
 800f74a:	e09d      	b.n	800f888 <_printf_i+0x1e8>
 800f74c:	6833      	ldr	r3, [r6, #0]
 800f74e:	6820      	ldr	r0, [r4, #0]
 800f750:	1d19      	adds	r1, r3, #4
 800f752:	6031      	str	r1, [r6, #0]
 800f754:	0606      	lsls	r6, r0, #24
 800f756:	d501      	bpl.n	800f75c <_printf_i+0xbc>
 800f758:	681d      	ldr	r5, [r3, #0]
 800f75a:	e003      	b.n	800f764 <_printf_i+0xc4>
 800f75c:	0645      	lsls	r5, r0, #25
 800f75e:	d5fb      	bpl.n	800f758 <_printf_i+0xb8>
 800f760:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f764:	2d00      	cmp	r5, #0
 800f766:	da03      	bge.n	800f770 <_printf_i+0xd0>
 800f768:	232d      	movs	r3, #45	@ 0x2d
 800f76a:	426d      	negs	r5, r5
 800f76c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f770:	4859      	ldr	r0, [pc, #356]	@ (800f8d8 <_printf_i+0x238>)
 800f772:	230a      	movs	r3, #10
 800f774:	e011      	b.n	800f79a <_printf_i+0xfa>
 800f776:	6821      	ldr	r1, [r4, #0]
 800f778:	6833      	ldr	r3, [r6, #0]
 800f77a:	0608      	lsls	r0, r1, #24
 800f77c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f780:	d402      	bmi.n	800f788 <_printf_i+0xe8>
 800f782:	0649      	lsls	r1, r1, #25
 800f784:	bf48      	it	mi
 800f786:	b2ad      	uxthmi	r5, r5
 800f788:	2f6f      	cmp	r7, #111	@ 0x6f
 800f78a:	4853      	ldr	r0, [pc, #332]	@ (800f8d8 <_printf_i+0x238>)
 800f78c:	6033      	str	r3, [r6, #0]
 800f78e:	bf14      	ite	ne
 800f790:	230a      	movne	r3, #10
 800f792:	2308      	moveq	r3, #8
 800f794:	2100      	movs	r1, #0
 800f796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f79a:	6866      	ldr	r6, [r4, #4]
 800f79c:	60a6      	str	r6, [r4, #8]
 800f79e:	2e00      	cmp	r6, #0
 800f7a0:	bfa2      	ittt	ge
 800f7a2:	6821      	ldrge	r1, [r4, #0]
 800f7a4:	f021 0104 	bicge.w	r1, r1, #4
 800f7a8:	6021      	strge	r1, [r4, #0]
 800f7aa:	b90d      	cbnz	r5, 800f7b0 <_printf_i+0x110>
 800f7ac:	2e00      	cmp	r6, #0
 800f7ae:	d04b      	beq.n	800f848 <_printf_i+0x1a8>
 800f7b0:	4616      	mov	r6, r2
 800f7b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f7b6:	fb03 5711 	mls	r7, r3, r1, r5
 800f7ba:	5dc7      	ldrb	r7, [r0, r7]
 800f7bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f7c0:	462f      	mov	r7, r5
 800f7c2:	42bb      	cmp	r3, r7
 800f7c4:	460d      	mov	r5, r1
 800f7c6:	d9f4      	bls.n	800f7b2 <_printf_i+0x112>
 800f7c8:	2b08      	cmp	r3, #8
 800f7ca:	d10b      	bne.n	800f7e4 <_printf_i+0x144>
 800f7cc:	6823      	ldr	r3, [r4, #0]
 800f7ce:	07df      	lsls	r7, r3, #31
 800f7d0:	d508      	bpl.n	800f7e4 <_printf_i+0x144>
 800f7d2:	6923      	ldr	r3, [r4, #16]
 800f7d4:	6861      	ldr	r1, [r4, #4]
 800f7d6:	4299      	cmp	r1, r3
 800f7d8:	bfde      	ittt	le
 800f7da:	2330      	movle	r3, #48	@ 0x30
 800f7dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f7e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f7e4:	1b92      	subs	r2, r2, r6
 800f7e6:	6122      	str	r2, [r4, #16]
 800f7e8:	f8cd a000 	str.w	sl, [sp]
 800f7ec:	464b      	mov	r3, r9
 800f7ee:	aa03      	add	r2, sp, #12
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	4640      	mov	r0, r8
 800f7f4:	f7ff fee6 	bl	800f5c4 <_printf_common>
 800f7f8:	3001      	adds	r0, #1
 800f7fa:	d14a      	bne.n	800f892 <_printf_i+0x1f2>
 800f7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f800:	b004      	add	sp, #16
 800f802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	f043 0320 	orr.w	r3, r3, #32
 800f80c:	6023      	str	r3, [r4, #0]
 800f80e:	4833      	ldr	r0, [pc, #204]	@ (800f8dc <_printf_i+0x23c>)
 800f810:	2778      	movs	r7, #120	@ 0x78
 800f812:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	6831      	ldr	r1, [r6, #0]
 800f81a:	061f      	lsls	r7, r3, #24
 800f81c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f820:	d402      	bmi.n	800f828 <_printf_i+0x188>
 800f822:	065f      	lsls	r7, r3, #25
 800f824:	bf48      	it	mi
 800f826:	b2ad      	uxthmi	r5, r5
 800f828:	6031      	str	r1, [r6, #0]
 800f82a:	07d9      	lsls	r1, r3, #31
 800f82c:	bf44      	itt	mi
 800f82e:	f043 0320 	orrmi.w	r3, r3, #32
 800f832:	6023      	strmi	r3, [r4, #0]
 800f834:	b11d      	cbz	r5, 800f83e <_printf_i+0x19e>
 800f836:	2310      	movs	r3, #16
 800f838:	e7ac      	b.n	800f794 <_printf_i+0xf4>
 800f83a:	4827      	ldr	r0, [pc, #156]	@ (800f8d8 <_printf_i+0x238>)
 800f83c:	e7e9      	b.n	800f812 <_printf_i+0x172>
 800f83e:	6823      	ldr	r3, [r4, #0]
 800f840:	f023 0320 	bic.w	r3, r3, #32
 800f844:	6023      	str	r3, [r4, #0]
 800f846:	e7f6      	b.n	800f836 <_printf_i+0x196>
 800f848:	4616      	mov	r6, r2
 800f84a:	e7bd      	b.n	800f7c8 <_printf_i+0x128>
 800f84c:	6833      	ldr	r3, [r6, #0]
 800f84e:	6825      	ldr	r5, [r4, #0]
 800f850:	6961      	ldr	r1, [r4, #20]
 800f852:	1d18      	adds	r0, r3, #4
 800f854:	6030      	str	r0, [r6, #0]
 800f856:	062e      	lsls	r6, r5, #24
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	d501      	bpl.n	800f860 <_printf_i+0x1c0>
 800f85c:	6019      	str	r1, [r3, #0]
 800f85e:	e002      	b.n	800f866 <_printf_i+0x1c6>
 800f860:	0668      	lsls	r0, r5, #25
 800f862:	d5fb      	bpl.n	800f85c <_printf_i+0x1bc>
 800f864:	8019      	strh	r1, [r3, #0]
 800f866:	2300      	movs	r3, #0
 800f868:	6123      	str	r3, [r4, #16]
 800f86a:	4616      	mov	r6, r2
 800f86c:	e7bc      	b.n	800f7e8 <_printf_i+0x148>
 800f86e:	6833      	ldr	r3, [r6, #0]
 800f870:	1d1a      	adds	r2, r3, #4
 800f872:	6032      	str	r2, [r6, #0]
 800f874:	681e      	ldr	r6, [r3, #0]
 800f876:	6862      	ldr	r2, [r4, #4]
 800f878:	2100      	movs	r1, #0
 800f87a:	4630      	mov	r0, r6
 800f87c:	f7f0 fcb8 	bl	80001f0 <memchr>
 800f880:	b108      	cbz	r0, 800f886 <_printf_i+0x1e6>
 800f882:	1b80      	subs	r0, r0, r6
 800f884:	6060      	str	r0, [r4, #4]
 800f886:	6863      	ldr	r3, [r4, #4]
 800f888:	6123      	str	r3, [r4, #16]
 800f88a:	2300      	movs	r3, #0
 800f88c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f890:	e7aa      	b.n	800f7e8 <_printf_i+0x148>
 800f892:	6923      	ldr	r3, [r4, #16]
 800f894:	4632      	mov	r2, r6
 800f896:	4649      	mov	r1, r9
 800f898:	4640      	mov	r0, r8
 800f89a:	47d0      	blx	sl
 800f89c:	3001      	adds	r0, #1
 800f89e:	d0ad      	beq.n	800f7fc <_printf_i+0x15c>
 800f8a0:	6823      	ldr	r3, [r4, #0]
 800f8a2:	079b      	lsls	r3, r3, #30
 800f8a4:	d413      	bmi.n	800f8ce <_printf_i+0x22e>
 800f8a6:	68e0      	ldr	r0, [r4, #12]
 800f8a8:	9b03      	ldr	r3, [sp, #12]
 800f8aa:	4298      	cmp	r0, r3
 800f8ac:	bfb8      	it	lt
 800f8ae:	4618      	movlt	r0, r3
 800f8b0:	e7a6      	b.n	800f800 <_printf_i+0x160>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	4632      	mov	r2, r6
 800f8b6:	4649      	mov	r1, r9
 800f8b8:	4640      	mov	r0, r8
 800f8ba:	47d0      	blx	sl
 800f8bc:	3001      	adds	r0, #1
 800f8be:	d09d      	beq.n	800f7fc <_printf_i+0x15c>
 800f8c0:	3501      	adds	r5, #1
 800f8c2:	68e3      	ldr	r3, [r4, #12]
 800f8c4:	9903      	ldr	r1, [sp, #12]
 800f8c6:	1a5b      	subs	r3, r3, r1
 800f8c8:	42ab      	cmp	r3, r5
 800f8ca:	dcf2      	bgt.n	800f8b2 <_printf_i+0x212>
 800f8cc:	e7eb      	b.n	800f8a6 <_printf_i+0x206>
 800f8ce:	2500      	movs	r5, #0
 800f8d0:	f104 0619 	add.w	r6, r4, #25
 800f8d4:	e7f5      	b.n	800f8c2 <_printf_i+0x222>
 800f8d6:	bf00      	nop
 800f8d8:	0801654f 	.word	0x0801654f
 800f8dc:	08016560 	.word	0x08016560

0800f8e0 <_scanf_float>:
 800f8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e4:	b087      	sub	sp, #28
 800f8e6:	4617      	mov	r7, r2
 800f8e8:	9303      	str	r3, [sp, #12]
 800f8ea:	688b      	ldr	r3, [r1, #8]
 800f8ec:	1e5a      	subs	r2, r3, #1
 800f8ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f8f2:	bf81      	itttt	hi
 800f8f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f8f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800f8fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f900:	608b      	strhi	r3, [r1, #8]
 800f902:	680b      	ldr	r3, [r1, #0]
 800f904:	460a      	mov	r2, r1
 800f906:	f04f 0500 	mov.w	r5, #0
 800f90a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f90e:	f842 3b1c 	str.w	r3, [r2], #28
 800f912:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f916:	4680      	mov	r8, r0
 800f918:	460c      	mov	r4, r1
 800f91a:	bf98      	it	ls
 800f91c:	f04f 0b00 	movls.w	fp, #0
 800f920:	9201      	str	r2, [sp, #4]
 800f922:	4616      	mov	r6, r2
 800f924:	46aa      	mov	sl, r5
 800f926:	46a9      	mov	r9, r5
 800f928:	9502      	str	r5, [sp, #8]
 800f92a:	68a2      	ldr	r2, [r4, #8]
 800f92c:	b152      	cbz	r2, 800f944 <_scanf_float+0x64>
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	2b4e      	cmp	r3, #78	@ 0x4e
 800f934:	d864      	bhi.n	800fa00 <_scanf_float+0x120>
 800f936:	2b40      	cmp	r3, #64	@ 0x40
 800f938:	d83c      	bhi.n	800f9b4 <_scanf_float+0xd4>
 800f93a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f93e:	b2c8      	uxtb	r0, r1
 800f940:	280e      	cmp	r0, #14
 800f942:	d93a      	bls.n	800f9ba <_scanf_float+0xda>
 800f944:	f1b9 0f00 	cmp.w	r9, #0
 800f948:	d003      	beq.n	800f952 <_scanf_float+0x72>
 800f94a:	6823      	ldr	r3, [r4, #0]
 800f94c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f950:	6023      	str	r3, [r4, #0]
 800f952:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f956:	f1ba 0f01 	cmp.w	sl, #1
 800f95a:	f200 8117 	bhi.w	800fb8c <_scanf_float+0x2ac>
 800f95e:	9b01      	ldr	r3, [sp, #4]
 800f960:	429e      	cmp	r6, r3
 800f962:	f200 8108 	bhi.w	800fb76 <_scanf_float+0x296>
 800f966:	2001      	movs	r0, #1
 800f968:	b007      	add	sp, #28
 800f96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f96e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f972:	2a0d      	cmp	r2, #13
 800f974:	d8e6      	bhi.n	800f944 <_scanf_float+0x64>
 800f976:	a101      	add	r1, pc, #4	@ (adr r1, 800f97c <_scanf_float+0x9c>)
 800f978:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f97c:	0800fac3 	.word	0x0800fac3
 800f980:	0800f945 	.word	0x0800f945
 800f984:	0800f945 	.word	0x0800f945
 800f988:	0800f945 	.word	0x0800f945
 800f98c:	0800fb23 	.word	0x0800fb23
 800f990:	0800fafb 	.word	0x0800fafb
 800f994:	0800f945 	.word	0x0800f945
 800f998:	0800f945 	.word	0x0800f945
 800f99c:	0800fad1 	.word	0x0800fad1
 800f9a0:	0800f945 	.word	0x0800f945
 800f9a4:	0800f945 	.word	0x0800f945
 800f9a8:	0800f945 	.word	0x0800f945
 800f9ac:	0800f945 	.word	0x0800f945
 800f9b0:	0800fa89 	.word	0x0800fa89
 800f9b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f9b8:	e7db      	b.n	800f972 <_scanf_float+0x92>
 800f9ba:	290e      	cmp	r1, #14
 800f9bc:	d8c2      	bhi.n	800f944 <_scanf_float+0x64>
 800f9be:	a001      	add	r0, pc, #4	@ (adr r0, 800f9c4 <_scanf_float+0xe4>)
 800f9c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f9c4:	0800fa79 	.word	0x0800fa79
 800f9c8:	0800f945 	.word	0x0800f945
 800f9cc:	0800fa79 	.word	0x0800fa79
 800f9d0:	0800fb0f 	.word	0x0800fb0f
 800f9d4:	0800f945 	.word	0x0800f945
 800f9d8:	0800fa21 	.word	0x0800fa21
 800f9dc:	0800fa5f 	.word	0x0800fa5f
 800f9e0:	0800fa5f 	.word	0x0800fa5f
 800f9e4:	0800fa5f 	.word	0x0800fa5f
 800f9e8:	0800fa5f 	.word	0x0800fa5f
 800f9ec:	0800fa5f 	.word	0x0800fa5f
 800f9f0:	0800fa5f 	.word	0x0800fa5f
 800f9f4:	0800fa5f 	.word	0x0800fa5f
 800f9f8:	0800fa5f 	.word	0x0800fa5f
 800f9fc:	0800fa5f 	.word	0x0800fa5f
 800fa00:	2b6e      	cmp	r3, #110	@ 0x6e
 800fa02:	d809      	bhi.n	800fa18 <_scanf_float+0x138>
 800fa04:	2b60      	cmp	r3, #96	@ 0x60
 800fa06:	d8b2      	bhi.n	800f96e <_scanf_float+0x8e>
 800fa08:	2b54      	cmp	r3, #84	@ 0x54
 800fa0a:	d07b      	beq.n	800fb04 <_scanf_float+0x224>
 800fa0c:	2b59      	cmp	r3, #89	@ 0x59
 800fa0e:	d199      	bne.n	800f944 <_scanf_float+0x64>
 800fa10:	2d07      	cmp	r5, #7
 800fa12:	d197      	bne.n	800f944 <_scanf_float+0x64>
 800fa14:	2508      	movs	r5, #8
 800fa16:	e02c      	b.n	800fa72 <_scanf_float+0x192>
 800fa18:	2b74      	cmp	r3, #116	@ 0x74
 800fa1a:	d073      	beq.n	800fb04 <_scanf_float+0x224>
 800fa1c:	2b79      	cmp	r3, #121	@ 0x79
 800fa1e:	e7f6      	b.n	800fa0e <_scanf_float+0x12e>
 800fa20:	6821      	ldr	r1, [r4, #0]
 800fa22:	05c8      	lsls	r0, r1, #23
 800fa24:	d51b      	bpl.n	800fa5e <_scanf_float+0x17e>
 800fa26:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fa2a:	6021      	str	r1, [r4, #0]
 800fa2c:	f109 0901 	add.w	r9, r9, #1
 800fa30:	f1bb 0f00 	cmp.w	fp, #0
 800fa34:	d003      	beq.n	800fa3e <_scanf_float+0x15e>
 800fa36:	3201      	adds	r2, #1
 800fa38:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa3c:	60a2      	str	r2, [r4, #8]
 800fa3e:	68a3      	ldr	r3, [r4, #8]
 800fa40:	3b01      	subs	r3, #1
 800fa42:	60a3      	str	r3, [r4, #8]
 800fa44:	6923      	ldr	r3, [r4, #16]
 800fa46:	3301      	adds	r3, #1
 800fa48:	6123      	str	r3, [r4, #16]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	607b      	str	r3, [r7, #4]
 800fa52:	f340 8087 	ble.w	800fb64 <_scanf_float+0x284>
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	603b      	str	r3, [r7, #0]
 800fa5c:	e765      	b.n	800f92a <_scanf_float+0x4a>
 800fa5e:	eb1a 0105 	adds.w	r1, sl, r5
 800fa62:	f47f af6f 	bne.w	800f944 <_scanf_float+0x64>
 800fa66:	6822      	ldr	r2, [r4, #0]
 800fa68:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fa6c:	6022      	str	r2, [r4, #0]
 800fa6e:	460d      	mov	r5, r1
 800fa70:	468a      	mov	sl, r1
 800fa72:	f806 3b01 	strb.w	r3, [r6], #1
 800fa76:	e7e2      	b.n	800fa3e <_scanf_float+0x15e>
 800fa78:	6822      	ldr	r2, [r4, #0]
 800fa7a:	0610      	lsls	r0, r2, #24
 800fa7c:	f57f af62 	bpl.w	800f944 <_scanf_float+0x64>
 800fa80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fa84:	6022      	str	r2, [r4, #0]
 800fa86:	e7f4      	b.n	800fa72 <_scanf_float+0x192>
 800fa88:	f1ba 0f00 	cmp.w	sl, #0
 800fa8c:	d10e      	bne.n	800faac <_scanf_float+0x1cc>
 800fa8e:	f1b9 0f00 	cmp.w	r9, #0
 800fa92:	d10e      	bne.n	800fab2 <_scanf_float+0x1d2>
 800fa94:	6822      	ldr	r2, [r4, #0]
 800fa96:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fa9a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fa9e:	d108      	bne.n	800fab2 <_scanf_float+0x1d2>
 800faa0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800faa4:	6022      	str	r2, [r4, #0]
 800faa6:	f04f 0a01 	mov.w	sl, #1
 800faaa:	e7e2      	b.n	800fa72 <_scanf_float+0x192>
 800faac:	f1ba 0f02 	cmp.w	sl, #2
 800fab0:	d055      	beq.n	800fb5e <_scanf_float+0x27e>
 800fab2:	2d01      	cmp	r5, #1
 800fab4:	d002      	beq.n	800fabc <_scanf_float+0x1dc>
 800fab6:	2d04      	cmp	r5, #4
 800fab8:	f47f af44 	bne.w	800f944 <_scanf_float+0x64>
 800fabc:	3501      	adds	r5, #1
 800fabe:	b2ed      	uxtb	r5, r5
 800fac0:	e7d7      	b.n	800fa72 <_scanf_float+0x192>
 800fac2:	f1ba 0f01 	cmp.w	sl, #1
 800fac6:	f47f af3d 	bne.w	800f944 <_scanf_float+0x64>
 800faca:	f04f 0a02 	mov.w	sl, #2
 800face:	e7d0      	b.n	800fa72 <_scanf_float+0x192>
 800fad0:	b97d      	cbnz	r5, 800faf2 <_scanf_float+0x212>
 800fad2:	f1b9 0f00 	cmp.w	r9, #0
 800fad6:	f47f af38 	bne.w	800f94a <_scanf_float+0x6a>
 800fada:	6822      	ldr	r2, [r4, #0]
 800fadc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fae0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fae4:	f040 8108 	bne.w	800fcf8 <_scanf_float+0x418>
 800fae8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800faec:	6022      	str	r2, [r4, #0]
 800faee:	2501      	movs	r5, #1
 800faf0:	e7bf      	b.n	800fa72 <_scanf_float+0x192>
 800faf2:	2d03      	cmp	r5, #3
 800faf4:	d0e2      	beq.n	800fabc <_scanf_float+0x1dc>
 800faf6:	2d05      	cmp	r5, #5
 800faf8:	e7de      	b.n	800fab8 <_scanf_float+0x1d8>
 800fafa:	2d02      	cmp	r5, #2
 800fafc:	f47f af22 	bne.w	800f944 <_scanf_float+0x64>
 800fb00:	2503      	movs	r5, #3
 800fb02:	e7b6      	b.n	800fa72 <_scanf_float+0x192>
 800fb04:	2d06      	cmp	r5, #6
 800fb06:	f47f af1d 	bne.w	800f944 <_scanf_float+0x64>
 800fb0a:	2507      	movs	r5, #7
 800fb0c:	e7b1      	b.n	800fa72 <_scanf_float+0x192>
 800fb0e:	6822      	ldr	r2, [r4, #0]
 800fb10:	0591      	lsls	r1, r2, #22
 800fb12:	f57f af17 	bpl.w	800f944 <_scanf_float+0x64>
 800fb16:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fb1a:	6022      	str	r2, [r4, #0]
 800fb1c:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb20:	e7a7      	b.n	800fa72 <_scanf_float+0x192>
 800fb22:	6822      	ldr	r2, [r4, #0]
 800fb24:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fb28:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fb2c:	d006      	beq.n	800fb3c <_scanf_float+0x25c>
 800fb2e:	0550      	lsls	r0, r2, #21
 800fb30:	f57f af08 	bpl.w	800f944 <_scanf_float+0x64>
 800fb34:	f1b9 0f00 	cmp.w	r9, #0
 800fb38:	f000 80de 	beq.w	800fcf8 <_scanf_float+0x418>
 800fb3c:	0591      	lsls	r1, r2, #22
 800fb3e:	bf58      	it	pl
 800fb40:	9902      	ldrpl	r1, [sp, #8]
 800fb42:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb46:	bf58      	it	pl
 800fb48:	eba9 0101 	subpl.w	r1, r9, r1
 800fb4c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fb50:	bf58      	it	pl
 800fb52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fb56:	6022      	str	r2, [r4, #0]
 800fb58:	f04f 0900 	mov.w	r9, #0
 800fb5c:	e789      	b.n	800fa72 <_scanf_float+0x192>
 800fb5e:	f04f 0a03 	mov.w	sl, #3
 800fb62:	e786      	b.n	800fa72 <_scanf_float+0x192>
 800fb64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fb68:	4639      	mov	r1, r7
 800fb6a:	4640      	mov	r0, r8
 800fb6c:	4798      	blx	r3
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	f43f aedb 	beq.w	800f92a <_scanf_float+0x4a>
 800fb74:	e6e6      	b.n	800f944 <_scanf_float+0x64>
 800fb76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fb7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fb7e:	463a      	mov	r2, r7
 800fb80:	4640      	mov	r0, r8
 800fb82:	4798      	blx	r3
 800fb84:	6923      	ldr	r3, [r4, #16]
 800fb86:	3b01      	subs	r3, #1
 800fb88:	6123      	str	r3, [r4, #16]
 800fb8a:	e6e8      	b.n	800f95e <_scanf_float+0x7e>
 800fb8c:	1e6b      	subs	r3, r5, #1
 800fb8e:	2b06      	cmp	r3, #6
 800fb90:	d824      	bhi.n	800fbdc <_scanf_float+0x2fc>
 800fb92:	2d02      	cmp	r5, #2
 800fb94:	d836      	bhi.n	800fc04 <_scanf_float+0x324>
 800fb96:	9b01      	ldr	r3, [sp, #4]
 800fb98:	429e      	cmp	r6, r3
 800fb9a:	f67f aee4 	bls.w	800f966 <_scanf_float+0x86>
 800fb9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fba2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fba6:	463a      	mov	r2, r7
 800fba8:	4640      	mov	r0, r8
 800fbaa:	4798      	blx	r3
 800fbac:	6923      	ldr	r3, [r4, #16]
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	6123      	str	r3, [r4, #16]
 800fbb2:	e7f0      	b.n	800fb96 <_scanf_float+0x2b6>
 800fbb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbb8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fbbc:	463a      	mov	r2, r7
 800fbbe:	4640      	mov	r0, r8
 800fbc0:	4798      	blx	r3
 800fbc2:	6923      	ldr	r3, [r4, #16]
 800fbc4:	3b01      	subs	r3, #1
 800fbc6:	6123      	str	r3, [r4, #16]
 800fbc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbcc:	fa5f fa8a 	uxtb.w	sl, sl
 800fbd0:	f1ba 0f02 	cmp.w	sl, #2
 800fbd4:	d1ee      	bne.n	800fbb4 <_scanf_float+0x2d4>
 800fbd6:	3d03      	subs	r5, #3
 800fbd8:	b2ed      	uxtb	r5, r5
 800fbda:	1b76      	subs	r6, r6, r5
 800fbdc:	6823      	ldr	r3, [r4, #0]
 800fbde:	05da      	lsls	r2, r3, #23
 800fbe0:	d530      	bpl.n	800fc44 <_scanf_float+0x364>
 800fbe2:	055b      	lsls	r3, r3, #21
 800fbe4:	d511      	bpl.n	800fc0a <_scanf_float+0x32a>
 800fbe6:	9b01      	ldr	r3, [sp, #4]
 800fbe8:	429e      	cmp	r6, r3
 800fbea:	f67f aebc 	bls.w	800f966 <_scanf_float+0x86>
 800fbee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fbf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fbf6:	463a      	mov	r2, r7
 800fbf8:	4640      	mov	r0, r8
 800fbfa:	4798      	blx	r3
 800fbfc:	6923      	ldr	r3, [r4, #16]
 800fbfe:	3b01      	subs	r3, #1
 800fc00:	6123      	str	r3, [r4, #16]
 800fc02:	e7f0      	b.n	800fbe6 <_scanf_float+0x306>
 800fc04:	46aa      	mov	sl, r5
 800fc06:	46b3      	mov	fp, r6
 800fc08:	e7de      	b.n	800fbc8 <_scanf_float+0x2e8>
 800fc0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fc0e:	6923      	ldr	r3, [r4, #16]
 800fc10:	2965      	cmp	r1, #101	@ 0x65
 800fc12:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc16:	f106 35ff 	add.w	r5, r6, #4294967295
 800fc1a:	6123      	str	r3, [r4, #16]
 800fc1c:	d00c      	beq.n	800fc38 <_scanf_float+0x358>
 800fc1e:	2945      	cmp	r1, #69	@ 0x45
 800fc20:	d00a      	beq.n	800fc38 <_scanf_float+0x358>
 800fc22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc26:	463a      	mov	r2, r7
 800fc28:	4640      	mov	r0, r8
 800fc2a:	4798      	blx	r3
 800fc2c:	6923      	ldr	r3, [r4, #16]
 800fc2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fc32:	3b01      	subs	r3, #1
 800fc34:	1eb5      	subs	r5, r6, #2
 800fc36:	6123      	str	r3, [r4, #16]
 800fc38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc3c:	463a      	mov	r2, r7
 800fc3e:	4640      	mov	r0, r8
 800fc40:	4798      	blx	r3
 800fc42:	462e      	mov	r6, r5
 800fc44:	6822      	ldr	r2, [r4, #0]
 800fc46:	f012 0210 	ands.w	r2, r2, #16
 800fc4a:	d001      	beq.n	800fc50 <_scanf_float+0x370>
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	e68b      	b.n	800f968 <_scanf_float+0x88>
 800fc50:	7032      	strb	r2, [r6, #0]
 800fc52:	6823      	ldr	r3, [r4, #0]
 800fc54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fc58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc5c:	d11c      	bne.n	800fc98 <_scanf_float+0x3b8>
 800fc5e:	9b02      	ldr	r3, [sp, #8]
 800fc60:	454b      	cmp	r3, r9
 800fc62:	eba3 0209 	sub.w	r2, r3, r9
 800fc66:	d123      	bne.n	800fcb0 <_scanf_float+0x3d0>
 800fc68:	9901      	ldr	r1, [sp, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	4640      	mov	r0, r8
 800fc6e:	f002 fc07 	bl	8012480 <_strtod_r>
 800fc72:	9b03      	ldr	r3, [sp, #12]
 800fc74:	6821      	ldr	r1, [r4, #0]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f011 0f02 	tst.w	r1, #2
 800fc7c:	ec57 6b10 	vmov	r6, r7, d0
 800fc80:	f103 0204 	add.w	r2, r3, #4
 800fc84:	d01f      	beq.n	800fcc6 <_scanf_float+0x3e6>
 800fc86:	9903      	ldr	r1, [sp, #12]
 800fc88:	600a      	str	r2, [r1, #0]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	e9c3 6700 	strd	r6, r7, [r3]
 800fc90:	68e3      	ldr	r3, [r4, #12]
 800fc92:	3301      	adds	r3, #1
 800fc94:	60e3      	str	r3, [r4, #12]
 800fc96:	e7d9      	b.n	800fc4c <_scanf_float+0x36c>
 800fc98:	9b04      	ldr	r3, [sp, #16]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d0e4      	beq.n	800fc68 <_scanf_float+0x388>
 800fc9e:	9905      	ldr	r1, [sp, #20]
 800fca0:	230a      	movs	r3, #10
 800fca2:	3101      	adds	r1, #1
 800fca4:	4640      	mov	r0, r8
 800fca6:	f7ff f9b7 	bl	800f018 <_strtol_r>
 800fcaa:	9b04      	ldr	r3, [sp, #16]
 800fcac:	9e05      	ldr	r6, [sp, #20]
 800fcae:	1ac2      	subs	r2, r0, r3
 800fcb0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fcb4:	429e      	cmp	r6, r3
 800fcb6:	bf28      	it	cs
 800fcb8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fcbc:	4910      	ldr	r1, [pc, #64]	@ (800fd00 <_scanf_float+0x420>)
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f000 f8e4 	bl	800fe8c <siprintf>
 800fcc4:	e7d0      	b.n	800fc68 <_scanf_float+0x388>
 800fcc6:	f011 0f04 	tst.w	r1, #4
 800fcca:	9903      	ldr	r1, [sp, #12]
 800fccc:	600a      	str	r2, [r1, #0]
 800fcce:	d1dc      	bne.n	800fc8a <_scanf_float+0x3aa>
 800fcd0:	681d      	ldr	r5, [r3, #0]
 800fcd2:	4632      	mov	r2, r6
 800fcd4:	463b      	mov	r3, r7
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	4639      	mov	r1, r7
 800fcda:	f7f0 ff37 	bl	8000b4c <__aeabi_dcmpun>
 800fcde:	b128      	cbz	r0, 800fcec <_scanf_float+0x40c>
 800fce0:	4808      	ldr	r0, [pc, #32]	@ (800fd04 <_scanf_float+0x424>)
 800fce2:	f000 f9c5 	bl	8010070 <nanf>
 800fce6:	ed85 0a00 	vstr	s0, [r5]
 800fcea:	e7d1      	b.n	800fc90 <_scanf_float+0x3b0>
 800fcec:	4630      	mov	r0, r6
 800fcee:	4639      	mov	r1, r7
 800fcf0:	f7f0 ff8a 	bl	8000c08 <__aeabi_d2f>
 800fcf4:	6028      	str	r0, [r5, #0]
 800fcf6:	e7cb      	b.n	800fc90 <_scanf_float+0x3b0>
 800fcf8:	f04f 0900 	mov.w	r9, #0
 800fcfc:	e629      	b.n	800f952 <_scanf_float+0x72>
 800fcfe:	bf00      	nop
 800fd00:	08016571 	.word	0x08016571
 800fd04:	08016804 	.word	0x08016804

0800fd08 <std>:
 800fd08:	2300      	movs	r3, #0
 800fd0a:	b510      	push	{r4, lr}
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	e9c0 3300 	strd	r3, r3, [r0]
 800fd12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd16:	6083      	str	r3, [r0, #8]
 800fd18:	8181      	strh	r1, [r0, #12]
 800fd1a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd1c:	81c2      	strh	r2, [r0, #14]
 800fd1e:	6183      	str	r3, [r0, #24]
 800fd20:	4619      	mov	r1, r3
 800fd22:	2208      	movs	r2, #8
 800fd24:	305c      	adds	r0, #92	@ 0x5c
 800fd26:	f000 f914 	bl	800ff52 <memset>
 800fd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd60 <std+0x58>)
 800fd2c:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd64 <std+0x5c>)
 800fd30:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd32:	4b0d      	ldr	r3, [pc, #52]	@ (800fd68 <std+0x60>)
 800fd34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd36:	4b0d      	ldr	r3, [pc, #52]	@ (800fd6c <std+0x64>)
 800fd38:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd70 <std+0x68>)
 800fd3c:	6224      	str	r4, [r4, #32]
 800fd3e:	429c      	cmp	r4, r3
 800fd40:	d006      	beq.n	800fd50 <std+0x48>
 800fd42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd46:	4294      	cmp	r4, r2
 800fd48:	d002      	beq.n	800fd50 <std+0x48>
 800fd4a:	33d0      	adds	r3, #208	@ 0xd0
 800fd4c:	429c      	cmp	r4, r3
 800fd4e:	d105      	bne.n	800fd5c <std+0x54>
 800fd50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd58:	f000 b978 	b.w	801004c <__retarget_lock_init_recursive>
 800fd5c:	bd10      	pop	{r4, pc}
 800fd5e:	bf00      	nop
 800fd60:	0800fecd 	.word	0x0800fecd
 800fd64:	0800feef 	.word	0x0800feef
 800fd68:	0800ff27 	.word	0x0800ff27
 800fd6c:	0800ff4b 	.word	0x0800ff4b
 800fd70:	2000867c 	.word	0x2000867c

0800fd74 <stdio_exit_handler>:
 800fd74:	4a02      	ldr	r2, [pc, #8]	@ (800fd80 <stdio_exit_handler+0xc>)
 800fd76:	4903      	ldr	r1, [pc, #12]	@ (800fd84 <stdio_exit_handler+0x10>)
 800fd78:	4803      	ldr	r0, [pc, #12]	@ (800fd88 <stdio_exit_handler+0x14>)
 800fd7a:	f000 b869 	b.w	800fe50 <_fwalk_sglue>
 800fd7e:	bf00      	nop
 800fd80:	20000514 	.word	0x20000514
 800fd84:	08012845 	.word	0x08012845
 800fd88:	20000524 	.word	0x20000524

0800fd8c <cleanup_stdio>:
 800fd8c:	6841      	ldr	r1, [r0, #4]
 800fd8e:	4b0c      	ldr	r3, [pc, #48]	@ (800fdc0 <cleanup_stdio+0x34>)
 800fd90:	4299      	cmp	r1, r3
 800fd92:	b510      	push	{r4, lr}
 800fd94:	4604      	mov	r4, r0
 800fd96:	d001      	beq.n	800fd9c <cleanup_stdio+0x10>
 800fd98:	f002 fd54 	bl	8012844 <_fflush_r>
 800fd9c:	68a1      	ldr	r1, [r4, #8]
 800fd9e:	4b09      	ldr	r3, [pc, #36]	@ (800fdc4 <cleanup_stdio+0x38>)
 800fda0:	4299      	cmp	r1, r3
 800fda2:	d002      	beq.n	800fdaa <cleanup_stdio+0x1e>
 800fda4:	4620      	mov	r0, r4
 800fda6:	f002 fd4d 	bl	8012844 <_fflush_r>
 800fdaa:	68e1      	ldr	r1, [r4, #12]
 800fdac:	4b06      	ldr	r3, [pc, #24]	@ (800fdc8 <cleanup_stdio+0x3c>)
 800fdae:	4299      	cmp	r1, r3
 800fdb0:	d004      	beq.n	800fdbc <cleanup_stdio+0x30>
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdb8:	f002 bd44 	b.w	8012844 <_fflush_r>
 800fdbc:	bd10      	pop	{r4, pc}
 800fdbe:	bf00      	nop
 800fdc0:	2000867c 	.word	0x2000867c
 800fdc4:	200086e4 	.word	0x200086e4
 800fdc8:	2000874c 	.word	0x2000874c

0800fdcc <global_stdio_init.part.0>:
 800fdcc:	b510      	push	{r4, lr}
 800fdce:	4b0b      	ldr	r3, [pc, #44]	@ (800fdfc <global_stdio_init.part.0+0x30>)
 800fdd0:	4c0b      	ldr	r4, [pc, #44]	@ (800fe00 <global_stdio_init.part.0+0x34>)
 800fdd2:	4a0c      	ldr	r2, [pc, #48]	@ (800fe04 <global_stdio_init.part.0+0x38>)
 800fdd4:	601a      	str	r2, [r3, #0]
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	2200      	movs	r2, #0
 800fdda:	2104      	movs	r1, #4
 800fddc:	f7ff ff94 	bl	800fd08 <std>
 800fde0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fde4:	2201      	movs	r2, #1
 800fde6:	2109      	movs	r1, #9
 800fde8:	f7ff ff8e 	bl	800fd08 <std>
 800fdec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fdf0:	2202      	movs	r2, #2
 800fdf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdf6:	2112      	movs	r1, #18
 800fdf8:	f7ff bf86 	b.w	800fd08 <std>
 800fdfc:	200087b4 	.word	0x200087b4
 800fe00:	2000867c 	.word	0x2000867c
 800fe04:	0800fd75 	.word	0x0800fd75

0800fe08 <__sfp_lock_acquire>:
 800fe08:	4801      	ldr	r0, [pc, #4]	@ (800fe10 <__sfp_lock_acquire+0x8>)
 800fe0a:	f000 b920 	b.w	801004e <__retarget_lock_acquire_recursive>
 800fe0e:	bf00      	nop
 800fe10:	200087bd 	.word	0x200087bd

0800fe14 <__sfp_lock_release>:
 800fe14:	4801      	ldr	r0, [pc, #4]	@ (800fe1c <__sfp_lock_release+0x8>)
 800fe16:	f000 b91b 	b.w	8010050 <__retarget_lock_release_recursive>
 800fe1a:	bf00      	nop
 800fe1c:	200087bd 	.word	0x200087bd

0800fe20 <__sinit>:
 800fe20:	b510      	push	{r4, lr}
 800fe22:	4604      	mov	r4, r0
 800fe24:	f7ff fff0 	bl	800fe08 <__sfp_lock_acquire>
 800fe28:	6a23      	ldr	r3, [r4, #32]
 800fe2a:	b11b      	cbz	r3, 800fe34 <__sinit+0x14>
 800fe2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe30:	f7ff bff0 	b.w	800fe14 <__sfp_lock_release>
 800fe34:	4b04      	ldr	r3, [pc, #16]	@ (800fe48 <__sinit+0x28>)
 800fe36:	6223      	str	r3, [r4, #32]
 800fe38:	4b04      	ldr	r3, [pc, #16]	@ (800fe4c <__sinit+0x2c>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1f5      	bne.n	800fe2c <__sinit+0xc>
 800fe40:	f7ff ffc4 	bl	800fdcc <global_stdio_init.part.0>
 800fe44:	e7f2      	b.n	800fe2c <__sinit+0xc>
 800fe46:	bf00      	nop
 800fe48:	0800fd8d 	.word	0x0800fd8d
 800fe4c:	200087b4 	.word	0x200087b4

0800fe50 <_fwalk_sglue>:
 800fe50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe54:	4607      	mov	r7, r0
 800fe56:	4688      	mov	r8, r1
 800fe58:	4614      	mov	r4, r2
 800fe5a:	2600      	movs	r6, #0
 800fe5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe60:	f1b9 0901 	subs.w	r9, r9, #1
 800fe64:	d505      	bpl.n	800fe72 <_fwalk_sglue+0x22>
 800fe66:	6824      	ldr	r4, [r4, #0]
 800fe68:	2c00      	cmp	r4, #0
 800fe6a:	d1f7      	bne.n	800fe5c <_fwalk_sglue+0xc>
 800fe6c:	4630      	mov	r0, r6
 800fe6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe72:	89ab      	ldrh	r3, [r5, #12]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d907      	bls.n	800fe88 <_fwalk_sglue+0x38>
 800fe78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	d003      	beq.n	800fe88 <_fwalk_sglue+0x38>
 800fe80:	4629      	mov	r1, r5
 800fe82:	4638      	mov	r0, r7
 800fe84:	47c0      	blx	r8
 800fe86:	4306      	orrs	r6, r0
 800fe88:	3568      	adds	r5, #104	@ 0x68
 800fe8a:	e7e9      	b.n	800fe60 <_fwalk_sglue+0x10>

0800fe8c <siprintf>:
 800fe8c:	b40e      	push	{r1, r2, r3}
 800fe8e:	b500      	push	{lr}
 800fe90:	b09c      	sub	sp, #112	@ 0x70
 800fe92:	ab1d      	add	r3, sp, #116	@ 0x74
 800fe94:	9002      	str	r0, [sp, #8]
 800fe96:	9006      	str	r0, [sp, #24]
 800fe98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe9c:	4809      	ldr	r0, [pc, #36]	@ (800fec4 <siprintf+0x38>)
 800fe9e:	9107      	str	r1, [sp, #28]
 800fea0:	9104      	str	r1, [sp, #16]
 800fea2:	4909      	ldr	r1, [pc, #36]	@ (800fec8 <siprintf+0x3c>)
 800fea4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fea8:	9105      	str	r1, [sp, #20]
 800feaa:	6800      	ldr	r0, [r0, #0]
 800feac:	9301      	str	r3, [sp, #4]
 800feae:	a902      	add	r1, sp, #8
 800feb0:	f002 fb48 	bl	8012544 <_svfiprintf_r>
 800feb4:	9b02      	ldr	r3, [sp, #8]
 800feb6:	2200      	movs	r2, #0
 800feb8:	701a      	strb	r2, [r3, #0]
 800feba:	b01c      	add	sp, #112	@ 0x70
 800febc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fec0:	b003      	add	sp, #12
 800fec2:	4770      	bx	lr
 800fec4:	20000520 	.word	0x20000520
 800fec8:	ffff0208 	.word	0xffff0208

0800fecc <__sread>:
 800fecc:	b510      	push	{r4, lr}
 800fece:	460c      	mov	r4, r1
 800fed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fed4:	f000 f86c 	bl	800ffb0 <_read_r>
 800fed8:	2800      	cmp	r0, #0
 800feda:	bfab      	itete	ge
 800fedc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fede:	89a3      	ldrhlt	r3, [r4, #12]
 800fee0:	181b      	addge	r3, r3, r0
 800fee2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fee6:	bfac      	ite	ge
 800fee8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800feea:	81a3      	strhlt	r3, [r4, #12]
 800feec:	bd10      	pop	{r4, pc}

0800feee <__swrite>:
 800feee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef2:	461f      	mov	r7, r3
 800fef4:	898b      	ldrh	r3, [r1, #12]
 800fef6:	05db      	lsls	r3, r3, #23
 800fef8:	4605      	mov	r5, r0
 800fefa:	460c      	mov	r4, r1
 800fefc:	4616      	mov	r6, r2
 800fefe:	d505      	bpl.n	800ff0c <__swrite+0x1e>
 800ff00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff04:	2302      	movs	r3, #2
 800ff06:	2200      	movs	r2, #0
 800ff08:	f000 f840 	bl	800ff8c <_lseek_r>
 800ff0c:	89a3      	ldrh	r3, [r4, #12]
 800ff0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff16:	81a3      	strh	r3, [r4, #12]
 800ff18:	4632      	mov	r2, r6
 800ff1a:	463b      	mov	r3, r7
 800ff1c:	4628      	mov	r0, r5
 800ff1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff22:	f000 b857 	b.w	800ffd4 <_write_r>

0800ff26 <__sseek>:
 800ff26:	b510      	push	{r4, lr}
 800ff28:	460c      	mov	r4, r1
 800ff2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff2e:	f000 f82d 	bl	800ff8c <_lseek_r>
 800ff32:	1c43      	adds	r3, r0, #1
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	bf15      	itete	ne
 800ff38:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff42:	81a3      	strheq	r3, [r4, #12]
 800ff44:	bf18      	it	ne
 800ff46:	81a3      	strhne	r3, [r4, #12]
 800ff48:	bd10      	pop	{r4, pc}

0800ff4a <__sclose>:
 800ff4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff4e:	f000 b80d 	b.w	800ff6c <_close_r>

0800ff52 <memset>:
 800ff52:	4402      	add	r2, r0
 800ff54:	4603      	mov	r3, r0
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d100      	bne.n	800ff5c <memset+0xa>
 800ff5a:	4770      	bx	lr
 800ff5c:	f803 1b01 	strb.w	r1, [r3], #1
 800ff60:	e7f9      	b.n	800ff56 <memset+0x4>
	...

0800ff64 <_localeconv_r>:
 800ff64:	4800      	ldr	r0, [pc, #0]	@ (800ff68 <_localeconv_r+0x4>)
 800ff66:	4770      	bx	lr
 800ff68:	20000660 	.word	0x20000660

0800ff6c <_close_r>:
 800ff6c:	b538      	push	{r3, r4, r5, lr}
 800ff6e:	4d06      	ldr	r5, [pc, #24]	@ (800ff88 <_close_r+0x1c>)
 800ff70:	2300      	movs	r3, #0
 800ff72:	4604      	mov	r4, r0
 800ff74:	4608      	mov	r0, r1
 800ff76:	602b      	str	r3, [r5, #0]
 800ff78:	f7fa feb9 	bl	800acee <_close>
 800ff7c:	1c43      	adds	r3, r0, #1
 800ff7e:	d102      	bne.n	800ff86 <_close_r+0x1a>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	b103      	cbz	r3, 800ff86 <_close_r+0x1a>
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	bd38      	pop	{r3, r4, r5, pc}
 800ff88:	200087b8 	.word	0x200087b8

0800ff8c <_lseek_r>:
 800ff8c:	b538      	push	{r3, r4, r5, lr}
 800ff8e:	4d07      	ldr	r5, [pc, #28]	@ (800ffac <_lseek_r+0x20>)
 800ff90:	4604      	mov	r4, r0
 800ff92:	4608      	mov	r0, r1
 800ff94:	4611      	mov	r1, r2
 800ff96:	2200      	movs	r2, #0
 800ff98:	602a      	str	r2, [r5, #0]
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	f7fa fece 	bl	800ad3c <_lseek>
 800ffa0:	1c43      	adds	r3, r0, #1
 800ffa2:	d102      	bne.n	800ffaa <_lseek_r+0x1e>
 800ffa4:	682b      	ldr	r3, [r5, #0]
 800ffa6:	b103      	cbz	r3, 800ffaa <_lseek_r+0x1e>
 800ffa8:	6023      	str	r3, [r4, #0]
 800ffaa:	bd38      	pop	{r3, r4, r5, pc}
 800ffac:	200087b8 	.word	0x200087b8

0800ffb0 <_read_r>:
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	4d07      	ldr	r5, [pc, #28]	@ (800ffd0 <_read_r+0x20>)
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	4608      	mov	r0, r1
 800ffb8:	4611      	mov	r1, r2
 800ffba:	2200      	movs	r2, #0
 800ffbc:	602a      	str	r2, [r5, #0]
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	f7fa fe5c 	bl	800ac7c <_read>
 800ffc4:	1c43      	adds	r3, r0, #1
 800ffc6:	d102      	bne.n	800ffce <_read_r+0x1e>
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	b103      	cbz	r3, 800ffce <_read_r+0x1e>
 800ffcc:	6023      	str	r3, [r4, #0]
 800ffce:	bd38      	pop	{r3, r4, r5, pc}
 800ffd0:	200087b8 	.word	0x200087b8

0800ffd4 <_write_r>:
 800ffd4:	b538      	push	{r3, r4, r5, lr}
 800ffd6:	4d07      	ldr	r5, [pc, #28]	@ (800fff4 <_write_r+0x20>)
 800ffd8:	4604      	mov	r4, r0
 800ffda:	4608      	mov	r0, r1
 800ffdc:	4611      	mov	r1, r2
 800ffde:	2200      	movs	r2, #0
 800ffe0:	602a      	str	r2, [r5, #0]
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	f7fa fe67 	bl	800acb6 <_write>
 800ffe8:	1c43      	adds	r3, r0, #1
 800ffea:	d102      	bne.n	800fff2 <_write_r+0x1e>
 800ffec:	682b      	ldr	r3, [r5, #0]
 800ffee:	b103      	cbz	r3, 800fff2 <_write_r+0x1e>
 800fff0:	6023      	str	r3, [r4, #0]
 800fff2:	bd38      	pop	{r3, r4, r5, pc}
 800fff4:	200087b8 	.word	0x200087b8

0800fff8 <__errno>:
 800fff8:	4b01      	ldr	r3, [pc, #4]	@ (8010000 <__errno+0x8>)
 800fffa:	6818      	ldr	r0, [r3, #0]
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop
 8010000:	20000520 	.word	0x20000520

08010004 <__libc_init_array>:
 8010004:	b570      	push	{r4, r5, r6, lr}
 8010006:	4d0d      	ldr	r5, [pc, #52]	@ (801003c <__libc_init_array+0x38>)
 8010008:	4c0d      	ldr	r4, [pc, #52]	@ (8010040 <__libc_init_array+0x3c>)
 801000a:	1b64      	subs	r4, r4, r5
 801000c:	10a4      	asrs	r4, r4, #2
 801000e:	2600      	movs	r6, #0
 8010010:	42a6      	cmp	r6, r4
 8010012:	d109      	bne.n	8010028 <__libc_init_array+0x24>
 8010014:	4d0b      	ldr	r5, [pc, #44]	@ (8010044 <__libc_init_array+0x40>)
 8010016:	4c0c      	ldr	r4, [pc, #48]	@ (8010048 <__libc_init_array+0x44>)
 8010018:	f003 faf8 	bl	801360c <_init>
 801001c:	1b64      	subs	r4, r4, r5
 801001e:	10a4      	asrs	r4, r4, #2
 8010020:	2600      	movs	r6, #0
 8010022:	42a6      	cmp	r6, r4
 8010024:	d105      	bne.n	8010032 <__libc_init_array+0x2e>
 8010026:	bd70      	pop	{r4, r5, r6, pc}
 8010028:	f855 3b04 	ldr.w	r3, [r5], #4
 801002c:	4798      	blx	r3
 801002e:	3601      	adds	r6, #1
 8010030:	e7ee      	b.n	8010010 <__libc_init_array+0xc>
 8010032:	f855 3b04 	ldr.w	r3, [r5], #4
 8010036:	4798      	blx	r3
 8010038:	3601      	adds	r6, #1
 801003a:	e7f2      	b.n	8010022 <__libc_init_array+0x1e>
 801003c:	08016870 	.word	0x08016870
 8010040:	08016870 	.word	0x08016870
 8010044:	08016870 	.word	0x08016870
 8010048:	08016874 	.word	0x08016874

0801004c <__retarget_lock_init_recursive>:
 801004c:	4770      	bx	lr

0801004e <__retarget_lock_acquire_recursive>:
 801004e:	4770      	bx	lr

08010050 <__retarget_lock_release_recursive>:
 8010050:	4770      	bx	lr

08010052 <memcpy>:
 8010052:	440a      	add	r2, r1
 8010054:	4291      	cmp	r1, r2
 8010056:	f100 33ff 	add.w	r3, r0, #4294967295
 801005a:	d100      	bne.n	801005e <memcpy+0xc>
 801005c:	4770      	bx	lr
 801005e:	b510      	push	{r4, lr}
 8010060:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010068:	4291      	cmp	r1, r2
 801006a:	d1f9      	bne.n	8010060 <memcpy+0xe>
 801006c:	bd10      	pop	{r4, pc}
	...

08010070 <nanf>:
 8010070:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010078 <nanf+0x8>
 8010074:	4770      	bx	lr
 8010076:	bf00      	nop
 8010078:	7fc00000 	.word	0x7fc00000

0801007c <quorem>:
 801007c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010080:	6903      	ldr	r3, [r0, #16]
 8010082:	690c      	ldr	r4, [r1, #16]
 8010084:	42a3      	cmp	r3, r4
 8010086:	4607      	mov	r7, r0
 8010088:	db7e      	blt.n	8010188 <quorem+0x10c>
 801008a:	3c01      	subs	r4, #1
 801008c:	f101 0814 	add.w	r8, r1, #20
 8010090:	00a3      	lsls	r3, r4, #2
 8010092:	f100 0514 	add.w	r5, r0, #20
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100a6:	3301      	adds	r3, #1
 80100a8:	429a      	cmp	r2, r3
 80100aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80100b2:	d32e      	bcc.n	8010112 <quorem+0x96>
 80100b4:	f04f 0a00 	mov.w	sl, #0
 80100b8:	46c4      	mov	ip, r8
 80100ba:	46ae      	mov	lr, r5
 80100bc:	46d3      	mov	fp, sl
 80100be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80100c2:	b298      	uxth	r0, r3
 80100c4:	fb06 a000 	mla	r0, r6, r0, sl
 80100c8:	0c02      	lsrs	r2, r0, #16
 80100ca:	0c1b      	lsrs	r3, r3, #16
 80100cc:	fb06 2303 	mla	r3, r6, r3, r2
 80100d0:	f8de 2000 	ldr.w	r2, [lr]
 80100d4:	b280      	uxth	r0, r0
 80100d6:	b292      	uxth	r2, r2
 80100d8:	1a12      	subs	r2, r2, r0
 80100da:	445a      	add	r2, fp
 80100dc:	f8de 0000 	ldr.w	r0, [lr]
 80100e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80100ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80100ee:	b292      	uxth	r2, r2
 80100f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80100f4:	45e1      	cmp	r9, ip
 80100f6:	f84e 2b04 	str.w	r2, [lr], #4
 80100fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80100fe:	d2de      	bcs.n	80100be <quorem+0x42>
 8010100:	9b00      	ldr	r3, [sp, #0]
 8010102:	58eb      	ldr	r3, [r5, r3]
 8010104:	b92b      	cbnz	r3, 8010112 <quorem+0x96>
 8010106:	9b01      	ldr	r3, [sp, #4]
 8010108:	3b04      	subs	r3, #4
 801010a:	429d      	cmp	r5, r3
 801010c:	461a      	mov	r2, r3
 801010e:	d32f      	bcc.n	8010170 <quorem+0xf4>
 8010110:	613c      	str	r4, [r7, #16]
 8010112:	4638      	mov	r0, r7
 8010114:	f001 f9c4 	bl	80114a0 <__mcmp>
 8010118:	2800      	cmp	r0, #0
 801011a:	db25      	blt.n	8010168 <quorem+0xec>
 801011c:	4629      	mov	r1, r5
 801011e:	2000      	movs	r0, #0
 8010120:	f858 2b04 	ldr.w	r2, [r8], #4
 8010124:	f8d1 c000 	ldr.w	ip, [r1]
 8010128:	fa1f fe82 	uxth.w	lr, r2
 801012c:	fa1f f38c 	uxth.w	r3, ip
 8010130:	eba3 030e 	sub.w	r3, r3, lr
 8010134:	4403      	add	r3, r0
 8010136:	0c12      	lsrs	r2, r2, #16
 8010138:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801013c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010140:	b29b      	uxth	r3, r3
 8010142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010146:	45c1      	cmp	r9, r8
 8010148:	f841 3b04 	str.w	r3, [r1], #4
 801014c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010150:	d2e6      	bcs.n	8010120 <quorem+0xa4>
 8010152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801015a:	b922      	cbnz	r2, 8010166 <quorem+0xea>
 801015c:	3b04      	subs	r3, #4
 801015e:	429d      	cmp	r5, r3
 8010160:	461a      	mov	r2, r3
 8010162:	d30b      	bcc.n	801017c <quorem+0x100>
 8010164:	613c      	str	r4, [r7, #16]
 8010166:	3601      	adds	r6, #1
 8010168:	4630      	mov	r0, r6
 801016a:	b003      	add	sp, #12
 801016c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010170:	6812      	ldr	r2, [r2, #0]
 8010172:	3b04      	subs	r3, #4
 8010174:	2a00      	cmp	r2, #0
 8010176:	d1cb      	bne.n	8010110 <quorem+0x94>
 8010178:	3c01      	subs	r4, #1
 801017a:	e7c6      	b.n	801010a <quorem+0x8e>
 801017c:	6812      	ldr	r2, [r2, #0]
 801017e:	3b04      	subs	r3, #4
 8010180:	2a00      	cmp	r2, #0
 8010182:	d1ef      	bne.n	8010164 <quorem+0xe8>
 8010184:	3c01      	subs	r4, #1
 8010186:	e7ea      	b.n	801015e <quorem+0xe2>
 8010188:	2000      	movs	r0, #0
 801018a:	e7ee      	b.n	801016a <quorem+0xee>
 801018c:	0000      	movs	r0, r0
	...

08010190 <_dtoa_r>:
 8010190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010194:	69c7      	ldr	r7, [r0, #28]
 8010196:	b099      	sub	sp, #100	@ 0x64
 8010198:	ed8d 0b02 	vstr	d0, [sp, #8]
 801019c:	ec55 4b10 	vmov	r4, r5, d0
 80101a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80101a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80101a4:	4683      	mov	fp, r0
 80101a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80101a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80101aa:	b97f      	cbnz	r7, 80101cc <_dtoa_r+0x3c>
 80101ac:	2010      	movs	r0, #16
 80101ae:	f000 fdfd 	bl	8010dac <malloc>
 80101b2:	4602      	mov	r2, r0
 80101b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80101b8:	b920      	cbnz	r0, 80101c4 <_dtoa_r+0x34>
 80101ba:	4ba7      	ldr	r3, [pc, #668]	@ (8010458 <_dtoa_r+0x2c8>)
 80101bc:	21ef      	movs	r1, #239	@ 0xef
 80101be:	48a7      	ldr	r0, [pc, #668]	@ (801045c <_dtoa_r+0x2cc>)
 80101c0:	f002 fbae 	bl	8012920 <__assert_func>
 80101c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80101c8:	6007      	str	r7, [r0, #0]
 80101ca:	60c7      	str	r7, [r0, #12]
 80101cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80101d0:	6819      	ldr	r1, [r3, #0]
 80101d2:	b159      	cbz	r1, 80101ec <_dtoa_r+0x5c>
 80101d4:	685a      	ldr	r2, [r3, #4]
 80101d6:	604a      	str	r2, [r1, #4]
 80101d8:	2301      	movs	r3, #1
 80101da:	4093      	lsls	r3, r2
 80101dc:	608b      	str	r3, [r1, #8]
 80101de:	4658      	mov	r0, fp
 80101e0:	f000 feda 	bl	8010f98 <_Bfree>
 80101e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80101e8:	2200      	movs	r2, #0
 80101ea:	601a      	str	r2, [r3, #0]
 80101ec:	1e2b      	subs	r3, r5, #0
 80101ee:	bfb9      	ittee	lt
 80101f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80101f4:	9303      	strlt	r3, [sp, #12]
 80101f6:	2300      	movge	r3, #0
 80101f8:	6033      	strge	r3, [r6, #0]
 80101fa:	9f03      	ldr	r7, [sp, #12]
 80101fc:	4b98      	ldr	r3, [pc, #608]	@ (8010460 <_dtoa_r+0x2d0>)
 80101fe:	bfbc      	itt	lt
 8010200:	2201      	movlt	r2, #1
 8010202:	6032      	strlt	r2, [r6, #0]
 8010204:	43bb      	bics	r3, r7
 8010206:	d112      	bne.n	801022e <_dtoa_r+0x9e>
 8010208:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801020a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801020e:	6013      	str	r3, [r2, #0]
 8010210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010214:	4323      	orrs	r3, r4
 8010216:	f000 854d 	beq.w	8010cb4 <_dtoa_r+0xb24>
 801021a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801021c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010474 <_dtoa_r+0x2e4>
 8010220:	2b00      	cmp	r3, #0
 8010222:	f000 854f 	beq.w	8010cc4 <_dtoa_r+0xb34>
 8010226:	f10a 0303 	add.w	r3, sl, #3
 801022a:	f000 bd49 	b.w	8010cc0 <_dtoa_r+0xb30>
 801022e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010232:	2200      	movs	r2, #0
 8010234:	ec51 0b17 	vmov	r0, r1, d7
 8010238:	2300      	movs	r3, #0
 801023a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801023e:	f7f0 fc53 	bl	8000ae8 <__aeabi_dcmpeq>
 8010242:	4680      	mov	r8, r0
 8010244:	b158      	cbz	r0, 801025e <_dtoa_r+0xce>
 8010246:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010248:	2301      	movs	r3, #1
 801024a:	6013      	str	r3, [r2, #0]
 801024c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801024e:	b113      	cbz	r3, 8010256 <_dtoa_r+0xc6>
 8010250:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010252:	4b84      	ldr	r3, [pc, #528]	@ (8010464 <_dtoa_r+0x2d4>)
 8010254:	6013      	str	r3, [r2, #0]
 8010256:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010478 <_dtoa_r+0x2e8>
 801025a:	f000 bd33 	b.w	8010cc4 <_dtoa_r+0xb34>
 801025e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010262:	aa16      	add	r2, sp, #88	@ 0x58
 8010264:	a917      	add	r1, sp, #92	@ 0x5c
 8010266:	4658      	mov	r0, fp
 8010268:	f001 fa3a 	bl	80116e0 <__d2b>
 801026c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010270:	4681      	mov	r9, r0
 8010272:	2e00      	cmp	r6, #0
 8010274:	d077      	beq.n	8010366 <_dtoa_r+0x1d6>
 8010276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010278:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801027c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010284:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010288:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801028c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010290:	4619      	mov	r1, r3
 8010292:	2200      	movs	r2, #0
 8010294:	4b74      	ldr	r3, [pc, #464]	@ (8010468 <_dtoa_r+0x2d8>)
 8010296:	f7f0 f807 	bl	80002a8 <__aeabi_dsub>
 801029a:	a369      	add	r3, pc, #420	@ (adr r3, 8010440 <_dtoa_r+0x2b0>)
 801029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a0:	f7f0 f9ba 	bl	8000618 <__aeabi_dmul>
 80102a4:	a368      	add	r3, pc, #416	@ (adr r3, 8010448 <_dtoa_r+0x2b8>)
 80102a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102aa:	f7ef ffff 	bl	80002ac <__adddf3>
 80102ae:	4604      	mov	r4, r0
 80102b0:	4630      	mov	r0, r6
 80102b2:	460d      	mov	r5, r1
 80102b4:	f7f0 f946 	bl	8000544 <__aeabi_i2d>
 80102b8:	a365      	add	r3, pc, #404	@ (adr r3, 8010450 <_dtoa_r+0x2c0>)
 80102ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102be:	f7f0 f9ab 	bl	8000618 <__aeabi_dmul>
 80102c2:	4602      	mov	r2, r0
 80102c4:	460b      	mov	r3, r1
 80102c6:	4620      	mov	r0, r4
 80102c8:	4629      	mov	r1, r5
 80102ca:	f7ef ffef 	bl	80002ac <__adddf3>
 80102ce:	4604      	mov	r4, r0
 80102d0:	460d      	mov	r5, r1
 80102d2:	f7f0 fc51 	bl	8000b78 <__aeabi_d2iz>
 80102d6:	2200      	movs	r2, #0
 80102d8:	4607      	mov	r7, r0
 80102da:	2300      	movs	r3, #0
 80102dc:	4620      	mov	r0, r4
 80102de:	4629      	mov	r1, r5
 80102e0:	f7f0 fc0c 	bl	8000afc <__aeabi_dcmplt>
 80102e4:	b140      	cbz	r0, 80102f8 <_dtoa_r+0x168>
 80102e6:	4638      	mov	r0, r7
 80102e8:	f7f0 f92c 	bl	8000544 <__aeabi_i2d>
 80102ec:	4622      	mov	r2, r4
 80102ee:	462b      	mov	r3, r5
 80102f0:	f7f0 fbfa 	bl	8000ae8 <__aeabi_dcmpeq>
 80102f4:	b900      	cbnz	r0, 80102f8 <_dtoa_r+0x168>
 80102f6:	3f01      	subs	r7, #1
 80102f8:	2f16      	cmp	r7, #22
 80102fa:	d851      	bhi.n	80103a0 <_dtoa_r+0x210>
 80102fc:	4b5b      	ldr	r3, [pc, #364]	@ (801046c <_dtoa_r+0x2dc>)
 80102fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801030a:	f7f0 fbf7 	bl	8000afc <__aeabi_dcmplt>
 801030e:	2800      	cmp	r0, #0
 8010310:	d048      	beq.n	80103a4 <_dtoa_r+0x214>
 8010312:	3f01      	subs	r7, #1
 8010314:	2300      	movs	r3, #0
 8010316:	9312      	str	r3, [sp, #72]	@ 0x48
 8010318:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801031a:	1b9b      	subs	r3, r3, r6
 801031c:	1e5a      	subs	r2, r3, #1
 801031e:	bf44      	itt	mi
 8010320:	f1c3 0801 	rsbmi	r8, r3, #1
 8010324:	2300      	movmi	r3, #0
 8010326:	9208      	str	r2, [sp, #32]
 8010328:	bf54      	ite	pl
 801032a:	f04f 0800 	movpl.w	r8, #0
 801032e:	9308      	strmi	r3, [sp, #32]
 8010330:	2f00      	cmp	r7, #0
 8010332:	db39      	blt.n	80103a8 <_dtoa_r+0x218>
 8010334:	9b08      	ldr	r3, [sp, #32]
 8010336:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010338:	443b      	add	r3, r7
 801033a:	9308      	str	r3, [sp, #32]
 801033c:	2300      	movs	r3, #0
 801033e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010342:	2b09      	cmp	r3, #9
 8010344:	d864      	bhi.n	8010410 <_dtoa_r+0x280>
 8010346:	2b05      	cmp	r3, #5
 8010348:	bfc4      	itt	gt
 801034a:	3b04      	subgt	r3, #4
 801034c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801034e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010350:	f1a3 0302 	sub.w	r3, r3, #2
 8010354:	bfcc      	ite	gt
 8010356:	2400      	movgt	r4, #0
 8010358:	2401      	movle	r4, #1
 801035a:	2b03      	cmp	r3, #3
 801035c:	d863      	bhi.n	8010426 <_dtoa_r+0x296>
 801035e:	e8df f003 	tbb	[pc, r3]
 8010362:	372a      	.short	0x372a
 8010364:	5535      	.short	0x5535
 8010366:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801036a:	441e      	add	r6, r3
 801036c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010370:	2b20      	cmp	r3, #32
 8010372:	bfc1      	itttt	gt
 8010374:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010378:	409f      	lslgt	r7, r3
 801037a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801037e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010382:	bfd6      	itet	le
 8010384:	f1c3 0320 	rsble	r3, r3, #32
 8010388:	ea47 0003 	orrgt.w	r0, r7, r3
 801038c:	fa04 f003 	lslle.w	r0, r4, r3
 8010390:	f7f0 f8c8 	bl	8000524 <__aeabi_ui2d>
 8010394:	2201      	movs	r2, #1
 8010396:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801039a:	3e01      	subs	r6, #1
 801039c:	9214      	str	r2, [sp, #80]	@ 0x50
 801039e:	e777      	b.n	8010290 <_dtoa_r+0x100>
 80103a0:	2301      	movs	r3, #1
 80103a2:	e7b8      	b.n	8010316 <_dtoa_r+0x186>
 80103a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80103a6:	e7b7      	b.n	8010318 <_dtoa_r+0x188>
 80103a8:	427b      	negs	r3, r7
 80103aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80103ac:	2300      	movs	r3, #0
 80103ae:	eba8 0807 	sub.w	r8, r8, r7
 80103b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80103b4:	e7c4      	b.n	8010340 <_dtoa_r+0x1b0>
 80103b6:	2300      	movs	r3, #0
 80103b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103bc:	2b00      	cmp	r3, #0
 80103be:	dc35      	bgt.n	801042c <_dtoa_r+0x29c>
 80103c0:	2301      	movs	r3, #1
 80103c2:	9300      	str	r3, [sp, #0]
 80103c4:	9307      	str	r3, [sp, #28]
 80103c6:	461a      	mov	r2, r3
 80103c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80103ca:	e00b      	b.n	80103e4 <_dtoa_r+0x254>
 80103cc:	2301      	movs	r3, #1
 80103ce:	e7f3      	b.n	80103b8 <_dtoa_r+0x228>
 80103d0:	2300      	movs	r3, #0
 80103d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103d6:	18fb      	adds	r3, r7, r3
 80103d8:	9300      	str	r3, [sp, #0]
 80103da:	3301      	adds	r3, #1
 80103dc:	2b01      	cmp	r3, #1
 80103de:	9307      	str	r3, [sp, #28]
 80103e0:	bfb8      	it	lt
 80103e2:	2301      	movlt	r3, #1
 80103e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80103e8:	2100      	movs	r1, #0
 80103ea:	2204      	movs	r2, #4
 80103ec:	f102 0514 	add.w	r5, r2, #20
 80103f0:	429d      	cmp	r5, r3
 80103f2:	d91f      	bls.n	8010434 <_dtoa_r+0x2a4>
 80103f4:	6041      	str	r1, [r0, #4]
 80103f6:	4658      	mov	r0, fp
 80103f8:	f000 fd8e 	bl	8010f18 <_Balloc>
 80103fc:	4682      	mov	sl, r0
 80103fe:	2800      	cmp	r0, #0
 8010400:	d13c      	bne.n	801047c <_dtoa_r+0x2ec>
 8010402:	4b1b      	ldr	r3, [pc, #108]	@ (8010470 <_dtoa_r+0x2e0>)
 8010404:	4602      	mov	r2, r0
 8010406:	f240 11af 	movw	r1, #431	@ 0x1af
 801040a:	e6d8      	b.n	80101be <_dtoa_r+0x2e>
 801040c:	2301      	movs	r3, #1
 801040e:	e7e0      	b.n	80103d2 <_dtoa_r+0x242>
 8010410:	2401      	movs	r4, #1
 8010412:	2300      	movs	r3, #0
 8010414:	9309      	str	r3, [sp, #36]	@ 0x24
 8010416:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010418:	f04f 33ff 	mov.w	r3, #4294967295
 801041c:	9300      	str	r3, [sp, #0]
 801041e:	9307      	str	r3, [sp, #28]
 8010420:	2200      	movs	r2, #0
 8010422:	2312      	movs	r3, #18
 8010424:	e7d0      	b.n	80103c8 <_dtoa_r+0x238>
 8010426:	2301      	movs	r3, #1
 8010428:	930b      	str	r3, [sp, #44]	@ 0x2c
 801042a:	e7f5      	b.n	8010418 <_dtoa_r+0x288>
 801042c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	9307      	str	r3, [sp, #28]
 8010432:	e7d7      	b.n	80103e4 <_dtoa_r+0x254>
 8010434:	3101      	adds	r1, #1
 8010436:	0052      	lsls	r2, r2, #1
 8010438:	e7d8      	b.n	80103ec <_dtoa_r+0x25c>
 801043a:	bf00      	nop
 801043c:	f3af 8000 	nop.w
 8010440:	636f4361 	.word	0x636f4361
 8010444:	3fd287a7 	.word	0x3fd287a7
 8010448:	8b60c8b3 	.word	0x8b60c8b3
 801044c:	3fc68a28 	.word	0x3fc68a28
 8010450:	509f79fb 	.word	0x509f79fb
 8010454:	3fd34413 	.word	0x3fd34413
 8010458:	08016583 	.word	0x08016583
 801045c:	0801659a 	.word	0x0801659a
 8010460:	7ff00000 	.word	0x7ff00000
 8010464:	0801654e 	.word	0x0801654e
 8010468:	3ff80000 	.word	0x3ff80000
 801046c:	08016690 	.word	0x08016690
 8010470:	080165f2 	.word	0x080165f2
 8010474:	0801657f 	.word	0x0801657f
 8010478:	0801654d 	.word	0x0801654d
 801047c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010480:	6018      	str	r0, [r3, #0]
 8010482:	9b07      	ldr	r3, [sp, #28]
 8010484:	2b0e      	cmp	r3, #14
 8010486:	f200 80a4 	bhi.w	80105d2 <_dtoa_r+0x442>
 801048a:	2c00      	cmp	r4, #0
 801048c:	f000 80a1 	beq.w	80105d2 <_dtoa_r+0x442>
 8010490:	2f00      	cmp	r7, #0
 8010492:	dd33      	ble.n	80104fc <_dtoa_r+0x36c>
 8010494:	4bad      	ldr	r3, [pc, #692]	@ (801074c <_dtoa_r+0x5bc>)
 8010496:	f007 020f 	and.w	r2, r7, #15
 801049a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801049e:	ed93 7b00 	vldr	d7, [r3]
 80104a2:	05f8      	lsls	r0, r7, #23
 80104a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80104a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80104ac:	d516      	bpl.n	80104dc <_dtoa_r+0x34c>
 80104ae:	4ba8      	ldr	r3, [pc, #672]	@ (8010750 <_dtoa_r+0x5c0>)
 80104b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80104b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104b8:	f7f0 f9d8 	bl	800086c <__aeabi_ddiv>
 80104bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104c0:	f004 040f 	and.w	r4, r4, #15
 80104c4:	2603      	movs	r6, #3
 80104c6:	4da2      	ldr	r5, [pc, #648]	@ (8010750 <_dtoa_r+0x5c0>)
 80104c8:	b954      	cbnz	r4, 80104e0 <_dtoa_r+0x350>
 80104ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104d2:	f7f0 f9cb 	bl	800086c <__aeabi_ddiv>
 80104d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104da:	e028      	b.n	801052e <_dtoa_r+0x39e>
 80104dc:	2602      	movs	r6, #2
 80104de:	e7f2      	b.n	80104c6 <_dtoa_r+0x336>
 80104e0:	07e1      	lsls	r1, r4, #31
 80104e2:	d508      	bpl.n	80104f6 <_dtoa_r+0x366>
 80104e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80104e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80104ec:	f7f0 f894 	bl	8000618 <__aeabi_dmul>
 80104f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80104f4:	3601      	adds	r6, #1
 80104f6:	1064      	asrs	r4, r4, #1
 80104f8:	3508      	adds	r5, #8
 80104fa:	e7e5      	b.n	80104c8 <_dtoa_r+0x338>
 80104fc:	f000 80d2 	beq.w	80106a4 <_dtoa_r+0x514>
 8010500:	427c      	negs	r4, r7
 8010502:	4b92      	ldr	r3, [pc, #584]	@ (801074c <_dtoa_r+0x5bc>)
 8010504:	4d92      	ldr	r5, [pc, #584]	@ (8010750 <_dtoa_r+0x5c0>)
 8010506:	f004 020f 	and.w	r2, r4, #15
 801050a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010512:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010516:	f7f0 f87f 	bl	8000618 <__aeabi_dmul>
 801051a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801051e:	1124      	asrs	r4, r4, #4
 8010520:	2300      	movs	r3, #0
 8010522:	2602      	movs	r6, #2
 8010524:	2c00      	cmp	r4, #0
 8010526:	f040 80b2 	bne.w	801068e <_dtoa_r+0x4fe>
 801052a:	2b00      	cmp	r3, #0
 801052c:	d1d3      	bne.n	80104d6 <_dtoa_r+0x346>
 801052e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010530:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010534:	2b00      	cmp	r3, #0
 8010536:	f000 80b7 	beq.w	80106a8 <_dtoa_r+0x518>
 801053a:	4b86      	ldr	r3, [pc, #536]	@ (8010754 <_dtoa_r+0x5c4>)
 801053c:	2200      	movs	r2, #0
 801053e:	4620      	mov	r0, r4
 8010540:	4629      	mov	r1, r5
 8010542:	f7f0 fadb 	bl	8000afc <__aeabi_dcmplt>
 8010546:	2800      	cmp	r0, #0
 8010548:	f000 80ae 	beq.w	80106a8 <_dtoa_r+0x518>
 801054c:	9b07      	ldr	r3, [sp, #28]
 801054e:	2b00      	cmp	r3, #0
 8010550:	f000 80aa 	beq.w	80106a8 <_dtoa_r+0x518>
 8010554:	9b00      	ldr	r3, [sp, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	dd37      	ble.n	80105ca <_dtoa_r+0x43a>
 801055a:	1e7b      	subs	r3, r7, #1
 801055c:	9304      	str	r3, [sp, #16]
 801055e:	4620      	mov	r0, r4
 8010560:	4b7d      	ldr	r3, [pc, #500]	@ (8010758 <_dtoa_r+0x5c8>)
 8010562:	2200      	movs	r2, #0
 8010564:	4629      	mov	r1, r5
 8010566:	f7f0 f857 	bl	8000618 <__aeabi_dmul>
 801056a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801056e:	9c00      	ldr	r4, [sp, #0]
 8010570:	3601      	adds	r6, #1
 8010572:	4630      	mov	r0, r6
 8010574:	f7ef ffe6 	bl	8000544 <__aeabi_i2d>
 8010578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801057c:	f7f0 f84c 	bl	8000618 <__aeabi_dmul>
 8010580:	4b76      	ldr	r3, [pc, #472]	@ (801075c <_dtoa_r+0x5cc>)
 8010582:	2200      	movs	r2, #0
 8010584:	f7ef fe92 	bl	80002ac <__adddf3>
 8010588:	4605      	mov	r5, r0
 801058a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801058e:	2c00      	cmp	r4, #0
 8010590:	f040 808d 	bne.w	80106ae <_dtoa_r+0x51e>
 8010594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010598:	4b71      	ldr	r3, [pc, #452]	@ (8010760 <_dtoa_r+0x5d0>)
 801059a:	2200      	movs	r2, #0
 801059c:	f7ef fe84 	bl	80002a8 <__aeabi_dsub>
 80105a0:	4602      	mov	r2, r0
 80105a2:	460b      	mov	r3, r1
 80105a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80105a8:	462a      	mov	r2, r5
 80105aa:	4633      	mov	r3, r6
 80105ac:	f7f0 fac4 	bl	8000b38 <__aeabi_dcmpgt>
 80105b0:	2800      	cmp	r0, #0
 80105b2:	f040 828b 	bne.w	8010acc <_dtoa_r+0x93c>
 80105b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105ba:	462a      	mov	r2, r5
 80105bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80105c0:	f7f0 fa9c 	bl	8000afc <__aeabi_dcmplt>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	f040 8128 	bne.w	801081a <_dtoa_r+0x68a>
 80105ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80105ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80105d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f2c0 815a 	blt.w	801088e <_dtoa_r+0x6fe>
 80105da:	2f0e      	cmp	r7, #14
 80105dc:	f300 8157 	bgt.w	801088e <_dtoa_r+0x6fe>
 80105e0:	4b5a      	ldr	r3, [pc, #360]	@ (801074c <_dtoa_r+0x5bc>)
 80105e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80105e6:	ed93 7b00 	vldr	d7, [r3]
 80105ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	ed8d 7b00 	vstr	d7, [sp]
 80105f2:	da03      	bge.n	80105fc <_dtoa_r+0x46c>
 80105f4:	9b07      	ldr	r3, [sp, #28]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f340 8101 	ble.w	80107fe <_dtoa_r+0x66e>
 80105fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010600:	4656      	mov	r6, sl
 8010602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010606:	4620      	mov	r0, r4
 8010608:	4629      	mov	r1, r5
 801060a:	f7f0 f92f 	bl	800086c <__aeabi_ddiv>
 801060e:	f7f0 fab3 	bl	8000b78 <__aeabi_d2iz>
 8010612:	4680      	mov	r8, r0
 8010614:	f7ef ff96 	bl	8000544 <__aeabi_i2d>
 8010618:	e9dd 2300 	ldrd	r2, r3, [sp]
 801061c:	f7ef fffc 	bl	8000618 <__aeabi_dmul>
 8010620:	4602      	mov	r2, r0
 8010622:	460b      	mov	r3, r1
 8010624:	4620      	mov	r0, r4
 8010626:	4629      	mov	r1, r5
 8010628:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801062c:	f7ef fe3c 	bl	80002a8 <__aeabi_dsub>
 8010630:	f806 4b01 	strb.w	r4, [r6], #1
 8010634:	9d07      	ldr	r5, [sp, #28]
 8010636:	eba6 040a 	sub.w	r4, r6, sl
 801063a:	42a5      	cmp	r5, r4
 801063c:	4602      	mov	r2, r0
 801063e:	460b      	mov	r3, r1
 8010640:	f040 8117 	bne.w	8010872 <_dtoa_r+0x6e2>
 8010644:	f7ef fe32 	bl	80002ac <__adddf3>
 8010648:	e9dd 2300 	ldrd	r2, r3, [sp]
 801064c:	4604      	mov	r4, r0
 801064e:	460d      	mov	r5, r1
 8010650:	f7f0 fa72 	bl	8000b38 <__aeabi_dcmpgt>
 8010654:	2800      	cmp	r0, #0
 8010656:	f040 80f9 	bne.w	801084c <_dtoa_r+0x6bc>
 801065a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801065e:	4620      	mov	r0, r4
 8010660:	4629      	mov	r1, r5
 8010662:	f7f0 fa41 	bl	8000ae8 <__aeabi_dcmpeq>
 8010666:	b118      	cbz	r0, 8010670 <_dtoa_r+0x4e0>
 8010668:	f018 0f01 	tst.w	r8, #1
 801066c:	f040 80ee 	bne.w	801084c <_dtoa_r+0x6bc>
 8010670:	4649      	mov	r1, r9
 8010672:	4658      	mov	r0, fp
 8010674:	f000 fc90 	bl	8010f98 <_Bfree>
 8010678:	2300      	movs	r3, #0
 801067a:	7033      	strb	r3, [r6, #0]
 801067c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801067e:	3701      	adds	r7, #1
 8010680:	601f      	str	r7, [r3, #0]
 8010682:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010684:	2b00      	cmp	r3, #0
 8010686:	f000 831d 	beq.w	8010cc4 <_dtoa_r+0xb34>
 801068a:	601e      	str	r6, [r3, #0]
 801068c:	e31a      	b.n	8010cc4 <_dtoa_r+0xb34>
 801068e:	07e2      	lsls	r2, r4, #31
 8010690:	d505      	bpl.n	801069e <_dtoa_r+0x50e>
 8010692:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010696:	f7ef ffbf 	bl	8000618 <__aeabi_dmul>
 801069a:	3601      	adds	r6, #1
 801069c:	2301      	movs	r3, #1
 801069e:	1064      	asrs	r4, r4, #1
 80106a0:	3508      	adds	r5, #8
 80106a2:	e73f      	b.n	8010524 <_dtoa_r+0x394>
 80106a4:	2602      	movs	r6, #2
 80106a6:	e742      	b.n	801052e <_dtoa_r+0x39e>
 80106a8:	9c07      	ldr	r4, [sp, #28]
 80106aa:	9704      	str	r7, [sp, #16]
 80106ac:	e761      	b.n	8010572 <_dtoa_r+0x3e2>
 80106ae:	4b27      	ldr	r3, [pc, #156]	@ (801074c <_dtoa_r+0x5bc>)
 80106b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106ba:	4454      	add	r4, sl
 80106bc:	2900      	cmp	r1, #0
 80106be:	d053      	beq.n	8010768 <_dtoa_r+0x5d8>
 80106c0:	4928      	ldr	r1, [pc, #160]	@ (8010764 <_dtoa_r+0x5d4>)
 80106c2:	2000      	movs	r0, #0
 80106c4:	f7f0 f8d2 	bl	800086c <__aeabi_ddiv>
 80106c8:	4633      	mov	r3, r6
 80106ca:	462a      	mov	r2, r5
 80106cc:	f7ef fdec 	bl	80002a8 <__aeabi_dsub>
 80106d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80106d4:	4656      	mov	r6, sl
 80106d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106da:	f7f0 fa4d 	bl	8000b78 <__aeabi_d2iz>
 80106de:	4605      	mov	r5, r0
 80106e0:	f7ef ff30 	bl	8000544 <__aeabi_i2d>
 80106e4:	4602      	mov	r2, r0
 80106e6:	460b      	mov	r3, r1
 80106e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106ec:	f7ef fddc 	bl	80002a8 <__aeabi_dsub>
 80106f0:	3530      	adds	r5, #48	@ 0x30
 80106f2:	4602      	mov	r2, r0
 80106f4:	460b      	mov	r3, r1
 80106f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80106fa:	f806 5b01 	strb.w	r5, [r6], #1
 80106fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010702:	f7f0 f9fb 	bl	8000afc <__aeabi_dcmplt>
 8010706:	2800      	cmp	r0, #0
 8010708:	d171      	bne.n	80107ee <_dtoa_r+0x65e>
 801070a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801070e:	4911      	ldr	r1, [pc, #68]	@ (8010754 <_dtoa_r+0x5c4>)
 8010710:	2000      	movs	r0, #0
 8010712:	f7ef fdc9 	bl	80002a8 <__aeabi_dsub>
 8010716:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801071a:	f7f0 f9ef 	bl	8000afc <__aeabi_dcmplt>
 801071e:	2800      	cmp	r0, #0
 8010720:	f040 8095 	bne.w	801084e <_dtoa_r+0x6be>
 8010724:	42a6      	cmp	r6, r4
 8010726:	f43f af50 	beq.w	80105ca <_dtoa_r+0x43a>
 801072a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801072e:	4b0a      	ldr	r3, [pc, #40]	@ (8010758 <_dtoa_r+0x5c8>)
 8010730:	2200      	movs	r2, #0
 8010732:	f7ef ff71 	bl	8000618 <__aeabi_dmul>
 8010736:	4b08      	ldr	r3, [pc, #32]	@ (8010758 <_dtoa_r+0x5c8>)
 8010738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801073c:	2200      	movs	r2, #0
 801073e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010742:	f7ef ff69 	bl	8000618 <__aeabi_dmul>
 8010746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801074a:	e7c4      	b.n	80106d6 <_dtoa_r+0x546>
 801074c:	08016690 	.word	0x08016690
 8010750:	08016668 	.word	0x08016668
 8010754:	3ff00000 	.word	0x3ff00000
 8010758:	40240000 	.word	0x40240000
 801075c:	401c0000 	.word	0x401c0000
 8010760:	40140000 	.word	0x40140000
 8010764:	3fe00000 	.word	0x3fe00000
 8010768:	4631      	mov	r1, r6
 801076a:	4628      	mov	r0, r5
 801076c:	f7ef ff54 	bl	8000618 <__aeabi_dmul>
 8010770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010774:	9415      	str	r4, [sp, #84]	@ 0x54
 8010776:	4656      	mov	r6, sl
 8010778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801077c:	f7f0 f9fc 	bl	8000b78 <__aeabi_d2iz>
 8010780:	4605      	mov	r5, r0
 8010782:	f7ef fedf 	bl	8000544 <__aeabi_i2d>
 8010786:	4602      	mov	r2, r0
 8010788:	460b      	mov	r3, r1
 801078a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801078e:	f7ef fd8b 	bl	80002a8 <__aeabi_dsub>
 8010792:	3530      	adds	r5, #48	@ 0x30
 8010794:	f806 5b01 	strb.w	r5, [r6], #1
 8010798:	4602      	mov	r2, r0
 801079a:	460b      	mov	r3, r1
 801079c:	42a6      	cmp	r6, r4
 801079e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107a2:	f04f 0200 	mov.w	r2, #0
 80107a6:	d124      	bne.n	80107f2 <_dtoa_r+0x662>
 80107a8:	4bac      	ldr	r3, [pc, #688]	@ (8010a5c <_dtoa_r+0x8cc>)
 80107aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80107ae:	f7ef fd7d 	bl	80002ac <__adddf3>
 80107b2:	4602      	mov	r2, r0
 80107b4:	460b      	mov	r3, r1
 80107b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107ba:	f7f0 f9bd 	bl	8000b38 <__aeabi_dcmpgt>
 80107be:	2800      	cmp	r0, #0
 80107c0:	d145      	bne.n	801084e <_dtoa_r+0x6be>
 80107c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80107c6:	49a5      	ldr	r1, [pc, #660]	@ (8010a5c <_dtoa_r+0x8cc>)
 80107c8:	2000      	movs	r0, #0
 80107ca:	f7ef fd6d 	bl	80002a8 <__aeabi_dsub>
 80107ce:	4602      	mov	r2, r0
 80107d0:	460b      	mov	r3, r1
 80107d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107d6:	f7f0 f991 	bl	8000afc <__aeabi_dcmplt>
 80107da:	2800      	cmp	r0, #0
 80107dc:	f43f aef5 	beq.w	80105ca <_dtoa_r+0x43a>
 80107e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80107e2:	1e73      	subs	r3, r6, #1
 80107e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80107e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80107ea:	2b30      	cmp	r3, #48	@ 0x30
 80107ec:	d0f8      	beq.n	80107e0 <_dtoa_r+0x650>
 80107ee:	9f04      	ldr	r7, [sp, #16]
 80107f0:	e73e      	b.n	8010670 <_dtoa_r+0x4e0>
 80107f2:	4b9b      	ldr	r3, [pc, #620]	@ (8010a60 <_dtoa_r+0x8d0>)
 80107f4:	f7ef ff10 	bl	8000618 <__aeabi_dmul>
 80107f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107fc:	e7bc      	b.n	8010778 <_dtoa_r+0x5e8>
 80107fe:	d10c      	bne.n	801081a <_dtoa_r+0x68a>
 8010800:	4b98      	ldr	r3, [pc, #608]	@ (8010a64 <_dtoa_r+0x8d4>)
 8010802:	2200      	movs	r2, #0
 8010804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010808:	f7ef ff06 	bl	8000618 <__aeabi_dmul>
 801080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010810:	f7f0 f988 	bl	8000b24 <__aeabi_dcmpge>
 8010814:	2800      	cmp	r0, #0
 8010816:	f000 8157 	beq.w	8010ac8 <_dtoa_r+0x938>
 801081a:	2400      	movs	r4, #0
 801081c:	4625      	mov	r5, r4
 801081e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010820:	43db      	mvns	r3, r3
 8010822:	9304      	str	r3, [sp, #16]
 8010824:	4656      	mov	r6, sl
 8010826:	2700      	movs	r7, #0
 8010828:	4621      	mov	r1, r4
 801082a:	4658      	mov	r0, fp
 801082c:	f000 fbb4 	bl	8010f98 <_Bfree>
 8010830:	2d00      	cmp	r5, #0
 8010832:	d0dc      	beq.n	80107ee <_dtoa_r+0x65e>
 8010834:	b12f      	cbz	r7, 8010842 <_dtoa_r+0x6b2>
 8010836:	42af      	cmp	r7, r5
 8010838:	d003      	beq.n	8010842 <_dtoa_r+0x6b2>
 801083a:	4639      	mov	r1, r7
 801083c:	4658      	mov	r0, fp
 801083e:	f000 fbab 	bl	8010f98 <_Bfree>
 8010842:	4629      	mov	r1, r5
 8010844:	4658      	mov	r0, fp
 8010846:	f000 fba7 	bl	8010f98 <_Bfree>
 801084a:	e7d0      	b.n	80107ee <_dtoa_r+0x65e>
 801084c:	9704      	str	r7, [sp, #16]
 801084e:	4633      	mov	r3, r6
 8010850:	461e      	mov	r6, r3
 8010852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010856:	2a39      	cmp	r2, #57	@ 0x39
 8010858:	d107      	bne.n	801086a <_dtoa_r+0x6da>
 801085a:	459a      	cmp	sl, r3
 801085c:	d1f8      	bne.n	8010850 <_dtoa_r+0x6c0>
 801085e:	9a04      	ldr	r2, [sp, #16]
 8010860:	3201      	adds	r2, #1
 8010862:	9204      	str	r2, [sp, #16]
 8010864:	2230      	movs	r2, #48	@ 0x30
 8010866:	f88a 2000 	strb.w	r2, [sl]
 801086a:	781a      	ldrb	r2, [r3, #0]
 801086c:	3201      	adds	r2, #1
 801086e:	701a      	strb	r2, [r3, #0]
 8010870:	e7bd      	b.n	80107ee <_dtoa_r+0x65e>
 8010872:	4b7b      	ldr	r3, [pc, #492]	@ (8010a60 <_dtoa_r+0x8d0>)
 8010874:	2200      	movs	r2, #0
 8010876:	f7ef fecf 	bl	8000618 <__aeabi_dmul>
 801087a:	2200      	movs	r2, #0
 801087c:	2300      	movs	r3, #0
 801087e:	4604      	mov	r4, r0
 8010880:	460d      	mov	r5, r1
 8010882:	f7f0 f931 	bl	8000ae8 <__aeabi_dcmpeq>
 8010886:	2800      	cmp	r0, #0
 8010888:	f43f aebb 	beq.w	8010602 <_dtoa_r+0x472>
 801088c:	e6f0      	b.n	8010670 <_dtoa_r+0x4e0>
 801088e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010890:	2a00      	cmp	r2, #0
 8010892:	f000 80db 	beq.w	8010a4c <_dtoa_r+0x8bc>
 8010896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010898:	2a01      	cmp	r2, #1
 801089a:	f300 80bf 	bgt.w	8010a1c <_dtoa_r+0x88c>
 801089e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80108a0:	2a00      	cmp	r2, #0
 80108a2:	f000 80b7 	beq.w	8010a14 <_dtoa_r+0x884>
 80108a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80108aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80108ac:	4646      	mov	r6, r8
 80108ae:	9a08      	ldr	r2, [sp, #32]
 80108b0:	2101      	movs	r1, #1
 80108b2:	441a      	add	r2, r3
 80108b4:	4658      	mov	r0, fp
 80108b6:	4498      	add	r8, r3
 80108b8:	9208      	str	r2, [sp, #32]
 80108ba:	f000 fc6b 	bl	8011194 <__i2b>
 80108be:	4605      	mov	r5, r0
 80108c0:	b15e      	cbz	r6, 80108da <_dtoa_r+0x74a>
 80108c2:	9b08      	ldr	r3, [sp, #32]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	dd08      	ble.n	80108da <_dtoa_r+0x74a>
 80108c8:	42b3      	cmp	r3, r6
 80108ca:	9a08      	ldr	r2, [sp, #32]
 80108cc:	bfa8      	it	ge
 80108ce:	4633      	movge	r3, r6
 80108d0:	eba8 0803 	sub.w	r8, r8, r3
 80108d4:	1af6      	subs	r6, r6, r3
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	9308      	str	r3, [sp, #32]
 80108da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108dc:	b1f3      	cbz	r3, 801091c <_dtoa_r+0x78c>
 80108de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f000 80b7 	beq.w	8010a54 <_dtoa_r+0x8c4>
 80108e6:	b18c      	cbz	r4, 801090c <_dtoa_r+0x77c>
 80108e8:	4629      	mov	r1, r5
 80108ea:	4622      	mov	r2, r4
 80108ec:	4658      	mov	r0, fp
 80108ee:	f000 fd11 	bl	8011314 <__pow5mult>
 80108f2:	464a      	mov	r2, r9
 80108f4:	4601      	mov	r1, r0
 80108f6:	4605      	mov	r5, r0
 80108f8:	4658      	mov	r0, fp
 80108fa:	f000 fc61 	bl	80111c0 <__multiply>
 80108fe:	4649      	mov	r1, r9
 8010900:	9004      	str	r0, [sp, #16]
 8010902:	4658      	mov	r0, fp
 8010904:	f000 fb48 	bl	8010f98 <_Bfree>
 8010908:	9b04      	ldr	r3, [sp, #16]
 801090a:	4699      	mov	r9, r3
 801090c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801090e:	1b1a      	subs	r2, r3, r4
 8010910:	d004      	beq.n	801091c <_dtoa_r+0x78c>
 8010912:	4649      	mov	r1, r9
 8010914:	4658      	mov	r0, fp
 8010916:	f000 fcfd 	bl	8011314 <__pow5mult>
 801091a:	4681      	mov	r9, r0
 801091c:	2101      	movs	r1, #1
 801091e:	4658      	mov	r0, fp
 8010920:	f000 fc38 	bl	8011194 <__i2b>
 8010924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010926:	4604      	mov	r4, r0
 8010928:	2b00      	cmp	r3, #0
 801092a:	f000 81cf 	beq.w	8010ccc <_dtoa_r+0xb3c>
 801092e:	461a      	mov	r2, r3
 8010930:	4601      	mov	r1, r0
 8010932:	4658      	mov	r0, fp
 8010934:	f000 fcee 	bl	8011314 <__pow5mult>
 8010938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801093a:	2b01      	cmp	r3, #1
 801093c:	4604      	mov	r4, r0
 801093e:	f300 8095 	bgt.w	8010a6c <_dtoa_r+0x8dc>
 8010942:	9b02      	ldr	r3, [sp, #8]
 8010944:	2b00      	cmp	r3, #0
 8010946:	f040 8087 	bne.w	8010a58 <_dtoa_r+0x8c8>
 801094a:	9b03      	ldr	r3, [sp, #12]
 801094c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010950:	2b00      	cmp	r3, #0
 8010952:	f040 8089 	bne.w	8010a68 <_dtoa_r+0x8d8>
 8010956:	9b03      	ldr	r3, [sp, #12]
 8010958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801095c:	0d1b      	lsrs	r3, r3, #20
 801095e:	051b      	lsls	r3, r3, #20
 8010960:	b12b      	cbz	r3, 801096e <_dtoa_r+0x7de>
 8010962:	9b08      	ldr	r3, [sp, #32]
 8010964:	3301      	adds	r3, #1
 8010966:	9308      	str	r3, [sp, #32]
 8010968:	f108 0801 	add.w	r8, r8, #1
 801096c:	2301      	movs	r3, #1
 801096e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010972:	2b00      	cmp	r3, #0
 8010974:	f000 81b0 	beq.w	8010cd8 <_dtoa_r+0xb48>
 8010978:	6923      	ldr	r3, [r4, #16]
 801097a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801097e:	6918      	ldr	r0, [r3, #16]
 8010980:	f000 fbbc 	bl	80110fc <__hi0bits>
 8010984:	f1c0 0020 	rsb	r0, r0, #32
 8010988:	9b08      	ldr	r3, [sp, #32]
 801098a:	4418      	add	r0, r3
 801098c:	f010 001f 	ands.w	r0, r0, #31
 8010990:	d077      	beq.n	8010a82 <_dtoa_r+0x8f2>
 8010992:	f1c0 0320 	rsb	r3, r0, #32
 8010996:	2b04      	cmp	r3, #4
 8010998:	dd6b      	ble.n	8010a72 <_dtoa_r+0x8e2>
 801099a:	9b08      	ldr	r3, [sp, #32]
 801099c:	f1c0 001c 	rsb	r0, r0, #28
 80109a0:	4403      	add	r3, r0
 80109a2:	4480      	add	r8, r0
 80109a4:	4406      	add	r6, r0
 80109a6:	9308      	str	r3, [sp, #32]
 80109a8:	f1b8 0f00 	cmp.w	r8, #0
 80109ac:	dd05      	ble.n	80109ba <_dtoa_r+0x82a>
 80109ae:	4649      	mov	r1, r9
 80109b0:	4642      	mov	r2, r8
 80109b2:	4658      	mov	r0, fp
 80109b4:	f000 fd08 	bl	80113c8 <__lshift>
 80109b8:	4681      	mov	r9, r0
 80109ba:	9b08      	ldr	r3, [sp, #32]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	dd05      	ble.n	80109cc <_dtoa_r+0x83c>
 80109c0:	4621      	mov	r1, r4
 80109c2:	461a      	mov	r2, r3
 80109c4:	4658      	mov	r0, fp
 80109c6:	f000 fcff 	bl	80113c8 <__lshift>
 80109ca:	4604      	mov	r4, r0
 80109cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d059      	beq.n	8010a86 <_dtoa_r+0x8f6>
 80109d2:	4621      	mov	r1, r4
 80109d4:	4648      	mov	r0, r9
 80109d6:	f000 fd63 	bl	80114a0 <__mcmp>
 80109da:	2800      	cmp	r0, #0
 80109dc:	da53      	bge.n	8010a86 <_dtoa_r+0x8f6>
 80109de:	1e7b      	subs	r3, r7, #1
 80109e0:	9304      	str	r3, [sp, #16]
 80109e2:	4649      	mov	r1, r9
 80109e4:	2300      	movs	r3, #0
 80109e6:	220a      	movs	r2, #10
 80109e8:	4658      	mov	r0, fp
 80109ea:	f000 faf7 	bl	8010fdc <__multadd>
 80109ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109f0:	4681      	mov	r9, r0
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	f000 8172 	beq.w	8010cdc <_dtoa_r+0xb4c>
 80109f8:	2300      	movs	r3, #0
 80109fa:	4629      	mov	r1, r5
 80109fc:	220a      	movs	r2, #10
 80109fe:	4658      	mov	r0, fp
 8010a00:	f000 faec 	bl	8010fdc <__multadd>
 8010a04:	9b00      	ldr	r3, [sp, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	4605      	mov	r5, r0
 8010a0a:	dc67      	bgt.n	8010adc <_dtoa_r+0x94c>
 8010a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a0e:	2b02      	cmp	r3, #2
 8010a10:	dc41      	bgt.n	8010a96 <_dtoa_r+0x906>
 8010a12:	e063      	b.n	8010adc <_dtoa_r+0x94c>
 8010a14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010a16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010a1a:	e746      	b.n	80108aa <_dtoa_r+0x71a>
 8010a1c:	9b07      	ldr	r3, [sp, #28]
 8010a1e:	1e5c      	subs	r4, r3, #1
 8010a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a22:	42a3      	cmp	r3, r4
 8010a24:	bfbf      	itttt	lt
 8010a26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010a28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010a2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010a2c:	1ae3      	sublt	r3, r4, r3
 8010a2e:	bfb4      	ite	lt
 8010a30:	18d2      	addlt	r2, r2, r3
 8010a32:	1b1c      	subge	r4, r3, r4
 8010a34:	9b07      	ldr	r3, [sp, #28]
 8010a36:	bfbc      	itt	lt
 8010a38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010a3a:	2400      	movlt	r4, #0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	bfb5      	itete	lt
 8010a40:	eba8 0603 	sublt.w	r6, r8, r3
 8010a44:	9b07      	ldrge	r3, [sp, #28]
 8010a46:	2300      	movlt	r3, #0
 8010a48:	4646      	movge	r6, r8
 8010a4a:	e730      	b.n	80108ae <_dtoa_r+0x71e>
 8010a4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010a4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010a50:	4646      	mov	r6, r8
 8010a52:	e735      	b.n	80108c0 <_dtoa_r+0x730>
 8010a54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a56:	e75c      	b.n	8010912 <_dtoa_r+0x782>
 8010a58:	2300      	movs	r3, #0
 8010a5a:	e788      	b.n	801096e <_dtoa_r+0x7de>
 8010a5c:	3fe00000 	.word	0x3fe00000
 8010a60:	40240000 	.word	0x40240000
 8010a64:	40140000 	.word	0x40140000
 8010a68:	9b02      	ldr	r3, [sp, #8]
 8010a6a:	e780      	b.n	801096e <_dtoa_r+0x7de>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a70:	e782      	b.n	8010978 <_dtoa_r+0x7e8>
 8010a72:	d099      	beq.n	80109a8 <_dtoa_r+0x818>
 8010a74:	9a08      	ldr	r2, [sp, #32]
 8010a76:	331c      	adds	r3, #28
 8010a78:	441a      	add	r2, r3
 8010a7a:	4498      	add	r8, r3
 8010a7c:	441e      	add	r6, r3
 8010a7e:	9208      	str	r2, [sp, #32]
 8010a80:	e792      	b.n	80109a8 <_dtoa_r+0x818>
 8010a82:	4603      	mov	r3, r0
 8010a84:	e7f6      	b.n	8010a74 <_dtoa_r+0x8e4>
 8010a86:	9b07      	ldr	r3, [sp, #28]
 8010a88:	9704      	str	r7, [sp, #16]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	dc20      	bgt.n	8010ad0 <_dtoa_r+0x940>
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	dd1e      	ble.n	8010ad4 <_dtoa_r+0x944>
 8010a96:	9b00      	ldr	r3, [sp, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	f47f aec0 	bne.w	801081e <_dtoa_r+0x68e>
 8010a9e:	4621      	mov	r1, r4
 8010aa0:	2205      	movs	r2, #5
 8010aa2:	4658      	mov	r0, fp
 8010aa4:	f000 fa9a 	bl	8010fdc <__multadd>
 8010aa8:	4601      	mov	r1, r0
 8010aaa:	4604      	mov	r4, r0
 8010aac:	4648      	mov	r0, r9
 8010aae:	f000 fcf7 	bl	80114a0 <__mcmp>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	f77f aeb3 	ble.w	801081e <_dtoa_r+0x68e>
 8010ab8:	4656      	mov	r6, sl
 8010aba:	2331      	movs	r3, #49	@ 0x31
 8010abc:	f806 3b01 	strb.w	r3, [r6], #1
 8010ac0:	9b04      	ldr	r3, [sp, #16]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	9304      	str	r3, [sp, #16]
 8010ac6:	e6ae      	b.n	8010826 <_dtoa_r+0x696>
 8010ac8:	9c07      	ldr	r4, [sp, #28]
 8010aca:	9704      	str	r7, [sp, #16]
 8010acc:	4625      	mov	r5, r4
 8010ace:	e7f3      	b.n	8010ab8 <_dtoa_r+0x928>
 8010ad0:	9b07      	ldr	r3, [sp, #28]
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f000 8104 	beq.w	8010ce4 <_dtoa_r+0xb54>
 8010adc:	2e00      	cmp	r6, #0
 8010ade:	dd05      	ble.n	8010aec <_dtoa_r+0x95c>
 8010ae0:	4629      	mov	r1, r5
 8010ae2:	4632      	mov	r2, r6
 8010ae4:	4658      	mov	r0, fp
 8010ae6:	f000 fc6f 	bl	80113c8 <__lshift>
 8010aea:	4605      	mov	r5, r0
 8010aec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d05a      	beq.n	8010ba8 <_dtoa_r+0xa18>
 8010af2:	6869      	ldr	r1, [r5, #4]
 8010af4:	4658      	mov	r0, fp
 8010af6:	f000 fa0f 	bl	8010f18 <_Balloc>
 8010afa:	4606      	mov	r6, r0
 8010afc:	b928      	cbnz	r0, 8010b0a <_dtoa_r+0x97a>
 8010afe:	4b84      	ldr	r3, [pc, #528]	@ (8010d10 <_dtoa_r+0xb80>)
 8010b00:	4602      	mov	r2, r0
 8010b02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b06:	f7ff bb5a 	b.w	80101be <_dtoa_r+0x2e>
 8010b0a:	692a      	ldr	r2, [r5, #16]
 8010b0c:	3202      	adds	r2, #2
 8010b0e:	0092      	lsls	r2, r2, #2
 8010b10:	f105 010c 	add.w	r1, r5, #12
 8010b14:	300c      	adds	r0, #12
 8010b16:	f7ff fa9c 	bl	8010052 <memcpy>
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	4631      	mov	r1, r6
 8010b1e:	4658      	mov	r0, fp
 8010b20:	f000 fc52 	bl	80113c8 <__lshift>
 8010b24:	f10a 0301 	add.w	r3, sl, #1
 8010b28:	9307      	str	r3, [sp, #28]
 8010b2a:	9b00      	ldr	r3, [sp, #0]
 8010b2c:	4453      	add	r3, sl
 8010b2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b30:	9b02      	ldr	r3, [sp, #8]
 8010b32:	f003 0301 	and.w	r3, r3, #1
 8010b36:	462f      	mov	r7, r5
 8010b38:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	9b07      	ldr	r3, [sp, #28]
 8010b3e:	4621      	mov	r1, r4
 8010b40:	3b01      	subs	r3, #1
 8010b42:	4648      	mov	r0, r9
 8010b44:	9300      	str	r3, [sp, #0]
 8010b46:	f7ff fa99 	bl	801007c <quorem>
 8010b4a:	4639      	mov	r1, r7
 8010b4c:	9002      	str	r0, [sp, #8]
 8010b4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010b52:	4648      	mov	r0, r9
 8010b54:	f000 fca4 	bl	80114a0 <__mcmp>
 8010b58:	462a      	mov	r2, r5
 8010b5a:	9008      	str	r0, [sp, #32]
 8010b5c:	4621      	mov	r1, r4
 8010b5e:	4658      	mov	r0, fp
 8010b60:	f000 fcba 	bl	80114d8 <__mdiff>
 8010b64:	68c2      	ldr	r2, [r0, #12]
 8010b66:	4606      	mov	r6, r0
 8010b68:	bb02      	cbnz	r2, 8010bac <_dtoa_r+0xa1c>
 8010b6a:	4601      	mov	r1, r0
 8010b6c:	4648      	mov	r0, r9
 8010b6e:	f000 fc97 	bl	80114a0 <__mcmp>
 8010b72:	4602      	mov	r2, r0
 8010b74:	4631      	mov	r1, r6
 8010b76:	4658      	mov	r0, fp
 8010b78:	920e      	str	r2, [sp, #56]	@ 0x38
 8010b7a:	f000 fa0d 	bl	8010f98 <_Bfree>
 8010b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b82:	9e07      	ldr	r6, [sp, #28]
 8010b84:	ea43 0102 	orr.w	r1, r3, r2
 8010b88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b8a:	4319      	orrs	r1, r3
 8010b8c:	d110      	bne.n	8010bb0 <_dtoa_r+0xa20>
 8010b8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b92:	d029      	beq.n	8010be8 <_dtoa_r+0xa58>
 8010b94:	9b08      	ldr	r3, [sp, #32]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	dd02      	ble.n	8010ba0 <_dtoa_r+0xa10>
 8010b9a:	9b02      	ldr	r3, [sp, #8]
 8010b9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010ba0:	9b00      	ldr	r3, [sp, #0]
 8010ba2:	f883 8000 	strb.w	r8, [r3]
 8010ba6:	e63f      	b.n	8010828 <_dtoa_r+0x698>
 8010ba8:	4628      	mov	r0, r5
 8010baa:	e7bb      	b.n	8010b24 <_dtoa_r+0x994>
 8010bac:	2201      	movs	r2, #1
 8010bae:	e7e1      	b.n	8010b74 <_dtoa_r+0x9e4>
 8010bb0:	9b08      	ldr	r3, [sp, #32]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	db04      	blt.n	8010bc0 <_dtoa_r+0xa30>
 8010bb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010bb8:	430b      	orrs	r3, r1
 8010bba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010bbc:	430b      	orrs	r3, r1
 8010bbe:	d120      	bne.n	8010c02 <_dtoa_r+0xa72>
 8010bc0:	2a00      	cmp	r2, #0
 8010bc2:	dded      	ble.n	8010ba0 <_dtoa_r+0xa10>
 8010bc4:	4649      	mov	r1, r9
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	4658      	mov	r0, fp
 8010bca:	f000 fbfd 	bl	80113c8 <__lshift>
 8010bce:	4621      	mov	r1, r4
 8010bd0:	4681      	mov	r9, r0
 8010bd2:	f000 fc65 	bl	80114a0 <__mcmp>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	dc03      	bgt.n	8010be2 <_dtoa_r+0xa52>
 8010bda:	d1e1      	bne.n	8010ba0 <_dtoa_r+0xa10>
 8010bdc:	f018 0f01 	tst.w	r8, #1
 8010be0:	d0de      	beq.n	8010ba0 <_dtoa_r+0xa10>
 8010be2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010be6:	d1d8      	bne.n	8010b9a <_dtoa_r+0xa0a>
 8010be8:	9a00      	ldr	r2, [sp, #0]
 8010bea:	2339      	movs	r3, #57	@ 0x39
 8010bec:	7013      	strb	r3, [r2, #0]
 8010bee:	4633      	mov	r3, r6
 8010bf0:	461e      	mov	r6, r3
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010bf8:	2a39      	cmp	r2, #57	@ 0x39
 8010bfa:	d052      	beq.n	8010ca2 <_dtoa_r+0xb12>
 8010bfc:	3201      	adds	r2, #1
 8010bfe:	701a      	strb	r2, [r3, #0]
 8010c00:	e612      	b.n	8010828 <_dtoa_r+0x698>
 8010c02:	2a00      	cmp	r2, #0
 8010c04:	dd07      	ble.n	8010c16 <_dtoa_r+0xa86>
 8010c06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c0a:	d0ed      	beq.n	8010be8 <_dtoa_r+0xa58>
 8010c0c:	9a00      	ldr	r2, [sp, #0]
 8010c0e:	f108 0301 	add.w	r3, r8, #1
 8010c12:	7013      	strb	r3, [r2, #0]
 8010c14:	e608      	b.n	8010828 <_dtoa_r+0x698>
 8010c16:	9b07      	ldr	r3, [sp, #28]
 8010c18:	9a07      	ldr	r2, [sp, #28]
 8010c1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d028      	beq.n	8010c76 <_dtoa_r+0xae6>
 8010c24:	4649      	mov	r1, r9
 8010c26:	2300      	movs	r3, #0
 8010c28:	220a      	movs	r2, #10
 8010c2a:	4658      	mov	r0, fp
 8010c2c:	f000 f9d6 	bl	8010fdc <__multadd>
 8010c30:	42af      	cmp	r7, r5
 8010c32:	4681      	mov	r9, r0
 8010c34:	f04f 0300 	mov.w	r3, #0
 8010c38:	f04f 020a 	mov.w	r2, #10
 8010c3c:	4639      	mov	r1, r7
 8010c3e:	4658      	mov	r0, fp
 8010c40:	d107      	bne.n	8010c52 <_dtoa_r+0xac2>
 8010c42:	f000 f9cb 	bl	8010fdc <__multadd>
 8010c46:	4607      	mov	r7, r0
 8010c48:	4605      	mov	r5, r0
 8010c4a:	9b07      	ldr	r3, [sp, #28]
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	9307      	str	r3, [sp, #28]
 8010c50:	e774      	b.n	8010b3c <_dtoa_r+0x9ac>
 8010c52:	f000 f9c3 	bl	8010fdc <__multadd>
 8010c56:	4629      	mov	r1, r5
 8010c58:	4607      	mov	r7, r0
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	220a      	movs	r2, #10
 8010c5e:	4658      	mov	r0, fp
 8010c60:	f000 f9bc 	bl	8010fdc <__multadd>
 8010c64:	4605      	mov	r5, r0
 8010c66:	e7f0      	b.n	8010c4a <_dtoa_r+0xaba>
 8010c68:	9b00      	ldr	r3, [sp, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	bfcc      	ite	gt
 8010c6e:	461e      	movgt	r6, r3
 8010c70:	2601      	movle	r6, #1
 8010c72:	4456      	add	r6, sl
 8010c74:	2700      	movs	r7, #0
 8010c76:	4649      	mov	r1, r9
 8010c78:	2201      	movs	r2, #1
 8010c7a:	4658      	mov	r0, fp
 8010c7c:	f000 fba4 	bl	80113c8 <__lshift>
 8010c80:	4621      	mov	r1, r4
 8010c82:	4681      	mov	r9, r0
 8010c84:	f000 fc0c 	bl	80114a0 <__mcmp>
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	dcb0      	bgt.n	8010bee <_dtoa_r+0xa5e>
 8010c8c:	d102      	bne.n	8010c94 <_dtoa_r+0xb04>
 8010c8e:	f018 0f01 	tst.w	r8, #1
 8010c92:	d1ac      	bne.n	8010bee <_dtoa_r+0xa5e>
 8010c94:	4633      	mov	r3, r6
 8010c96:	461e      	mov	r6, r3
 8010c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c9c:	2a30      	cmp	r2, #48	@ 0x30
 8010c9e:	d0fa      	beq.n	8010c96 <_dtoa_r+0xb06>
 8010ca0:	e5c2      	b.n	8010828 <_dtoa_r+0x698>
 8010ca2:	459a      	cmp	sl, r3
 8010ca4:	d1a4      	bne.n	8010bf0 <_dtoa_r+0xa60>
 8010ca6:	9b04      	ldr	r3, [sp, #16]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	9304      	str	r3, [sp, #16]
 8010cac:	2331      	movs	r3, #49	@ 0x31
 8010cae:	f88a 3000 	strb.w	r3, [sl]
 8010cb2:	e5b9      	b.n	8010828 <_dtoa_r+0x698>
 8010cb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010cb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010d14 <_dtoa_r+0xb84>
 8010cba:	b11b      	cbz	r3, 8010cc4 <_dtoa_r+0xb34>
 8010cbc:	f10a 0308 	add.w	r3, sl, #8
 8010cc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010cc2:	6013      	str	r3, [r2, #0]
 8010cc4:	4650      	mov	r0, sl
 8010cc6:	b019      	add	sp, #100	@ 0x64
 8010cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	f77f ae37 	ble.w	8010942 <_dtoa_r+0x7b2>
 8010cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cd8:	2001      	movs	r0, #1
 8010cda:	e655      	b.n	8010988 <_dtoa_r+0x7f8>
 8010cdc:	9b00      	ldr	r3, [sp, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	f77f aed6 	ble.w	8010a90 <_dtoa_r+0x900>
 8010ce4:	4656      	mov	r6, sl
 8010ce6:	4621      	mov	r1, r4
 8010ce8:	4648      	mov	r0, r9
 8010cea:	f7ff f9c7 	bl	801007c <quorem>
 8010cee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010cf2:	f806 8b01 	strb.w	r8, [r6], #1
 8010cf6:	9b00      	ldr	r3, [sp, #0]
 8010cf8:	eba6 020a 	sub.w	r2, r6, sl
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	ddb3      	ble.n	8010c68 <_dtoa_r+0xad8>
 8010d00:	4649      	mov	r1, r9
 8010d02:	2300      	movs	r3, #0
 8010d04:	220a      	movs	r2, #10
 8010d06:	4658      	mov	r0, fp
 8010d08:	f000 f968 	bl	8010fdc <__multadd>
 8010d0c:	4681      	mov	r9, r0
 8010d0e:	e7ea      	b.n	8010ce6 <_dtoa_r+0xb56>
 8010d10:	080165f2 	.word	0x080165f2
 8010d14:	08016576 	.word	0x08016576

08010d18 <_free_r>:
 8010d18:	b538      	push	{r3, r4, r5, lr}
 8010d1a:	4605      	mov	r5, r0
 8010d1c:	2900      	cmp	r1, #0
 8010d1e:	d041      	beq.n	8010da4 <_free_r+0x8c>
 8010d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d24:	1f0c      	subs	r4, r1, #4
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	bfb8      	it	lt
 8010d2a:	18e4      	addlt	r4, r4, r3
 8010d2c:	f000 f8e8 	bl	8010f00 <__malloc_lock>
 8010d30:	4a1d      	ldr	r2, [pc, #116]	@ (8010da8 <_free_r+0x90>)
 8010d32:	6813      	ldr	r3, [r2, #0]
 8010d34:	b933      	cbnz	r3, 8010d44 <_free_r+0x2c>
 8010d36:	6063      	str	r3, [r4, #4]
 8010d38:	6014      	str	r4, [r2, #0]
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d40:	f000 b8e4 	b.w	8010f0c <__malloc_unlock>
 8010d44:	42a3      	cmp	r3, r4
 8010d46:	d908      	bls.n	8010d5a <_free_r+0x42>
 8010d48:	6820      	ldr	r0, [r4, #0]
 8010d4a:	1821      	adds	r1, r4, r0
 8010d4c:	428b      	cmp	r3, r1
 8010d4e:	bf01      	itttt	eq
 8010d50:	6819      	ldreq	r1, [r3, #0]
 8010d52:	685b      	ldreq	r3, [r3, #4]
 8010d54:	1809      	addeq	r1, r1, r0
 8010d56:	6021      	streq	r1, [r4, #0]
 8010d58:	e7ed      	b.n	8010d36 <_free_r+0x1e>
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	b10b      	cbz	r3, 8010d64 <_free_r+0x4c>
 8010d60:	42a3      	cmp	r3, r4
 8010d62:	d9fa      	bls.n	8010d5a <_free_r+0x42>
 8010d64:	6811      	ldr	r1, [r2, #0]
 8010d66:	1850      	adds	r0, r2, r1
 8010d68:	42a0      	cmp	r0, r4
 8010d6a:	d10b      	bne.n	8010d84 <_free_r+0x6c>
 8010d6c:	6820      	ldr	r0, [r4, #0]
 8010d6e:	4401      	add	r1, r0
 8010d70:	1850      	adds	r0, r2, r1
 8010d72:	4283      	cmp	r3, r0
 8010d74:	6011      	str	r1, [r2, #0]
 8010d76:	d1e0      	bne.n	8010d3a <_free_r+0x22>
 8010d78:	6818      	ldr	r0, [r3, #0]
 8010d7a:	685b      	ldr	r3, [r3, #4]
 8010d7c:	6053      	str	r3, [r2, #4]
 8010d7e:	4408      	add	r0, r1
 8010d80:	6010      	str	r0, [r2, #0]
 8010d82:	e7da      	b.n	8010d3a <_free_r+0x22>
 8010d84:	d902      	bls.n	8010d8c <_free_r+0x74>
 8010d86:	230c      	movs	r3, #12
 8010d88:	602b      	str	r3, [r5, #0]
 8010d8a:	e7d6      	b.n	8010d3a <_free_r+0x22>
 8010d8c:	6820      	ldr	r0, [r4, #0]
 8010d8e:	1821      	adds	r1, r4, r0
 8010d90:	428b      	cmp	r3, r1
 8010d92:	bf04      	itt	eq
 8010d94:	6819      	ldreq	r1, [r3, #0]
 8010d96:	685b      	ldreq	r3, [r3, #4]
 8010d98:	6063      	str	r3, [r4, #4]
 8010d9a:	bf04      	itt	eq
 8010d9c:	1809      	addeq	r1, r1, r0
 8010d9e:	6021      	streq	r1, [r4, #0]
 8010da0:	6054      	str	r4, [r2, #4]
 8010da2:	e7ca      	b.n	8010d3a <_free_r+0x22>
 8010da4:	bd38      	pop	{r3, r4, r5, pc}
 8010da6:	bf00      	nop
 8010da8:	200087c4 	.word	0x200087c4

08010dac <malloc>:
 8010dac:	4b02      	ldr	r3, [pc, #8]	@ (8010db8 <malloc+0xc>)
 8010dae:	4601      	mov	r1, r0
 8010db0:	6818      	ldr	r0, [r3, #0]
 8010db2:	f000 b825 	b.w	8010e00 <_malloc_r>
 8010db6:	bf00      	nop
 8010db8:	20000520 	.word	0x20000520

08010dbc <sbrk_aligned>:
 8010dbc:	b570      	push	{r4, r5, r6, lr}
 8010dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8010dfc <sbrk_aligned+0x40>)
 8010dc0:	460c      	mov	r4, r1
 8010dc2:	6831      	ldr	r1, [r6, #0]
 8010dc4:	4605      	mov	r5, r0
 8010dc6:	b911      	cbnz	r1, 8010dce <sbrk_aligned+0x12>
 8010dc8:	f001 fd90 	bl	80128ec <_sbrk_r>
 8010dcc:	6030      	str	r0, [r6, #0]
 8010dce:	4621      	mov	r1, r4
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	f001 fd8b 	bl	80128ec <_sbrk_r>
 8010dd6:	1c43      	adds	r3, r0, #1
 8010dd8:	d103      	bne.n	8010de2 <sbrk_aligned+0x26>
 8010dda:	f04f 34ff 	mov.w	r4, #4294967295
 8010dde:	4620      	mov	r0, r4
 8010de0:	bd70      	pop	{r4, r5, r6, pc}
 8010de2:	1cc4      	adds	r4, r0, #3
 8010de4:	f024 0403 	bic.w	r4, r4, #3
 8010de8:	42a0      	cmp	r0, r4
 8010dea:	d0f8      	beq.n	8010dde <sbrk_aligned+0x22>
 8010dec:	1a21      	subs	r1, r4, r0
 8010dee:	4628      	mov	r0, r5
 8010df0:	f001 fd7c 	bl	80128ec <_sbrk_r>
 8010df4:	3001      	adds	r0, #1
 8010df6:	d1f2      	bne.n	8010dde <sbrk_aligned+0x22>
 8010df8:	e7ef      	b.n	8010dda <sbrk_aligned+0x1e>
 8010dfa:	bf00      	nop
 8010dfc:	200087c0 	.word	0x200087c0

08010e00 <_malloc_r>:
 8010e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e04:	1ccd      	adds	r5, r1, #3
 8010e06:	f025 0503 	bic.w	r5, r5, #3
 8010e0a:	3508      	adds	r5, #8
 8010e0c:	2d0c      	cmp	r5, #12
 8010e0e:	bf38      	it	cc
 8010e10:	250c      	movcc	r5, #12
 8010e12:	2d00      	cmp	r5, #0
 8010e14:	4606      	mov	r6, r0
 8010e16:	db01      	blt.n	8010e1c <_malloc_r+0x1c>
 8010e18:	42a9      	cmp	r1, r5
 8010e1a:	d904      	bls.n	8010e26 <_malloc_r+0x26>
 8010e1c:	230c      	movs	r3, #12
 8010e1e:	6033      	str	r3, [r6, #0]
 8010e20:	2000      	movs	r0, #0
 8010e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010efc <_malloc_r+0xfc>
 8010e2a:	f000 f869 	bl	8010f00 <__malloc_lock>
 8010e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8010e32:	461c      	mov	r4, r3
 8010e34:	bb44      	cbnz	r4, 8010e88 <_malloc_r+0x88>
 8010e36:	4629      	mov	r1, r5
 8010e38:	4630      	mov	r0, r6
 8010e3a:	f7ff ffbf 	bl	8010dbc <sbrk_aligned>
 8010e3e:	1c43      	adds	r3, r0, #1
 8010e40:	4604      	mov	r4, r0
 8010e42:	d158      	bne.n	8010ef6 <_malloc_r+0xf6>
 8010e44:	f8d8 4000 	ldr.w	r4, [r8]
 8010e48:	4627      	mov	r7, r4
 8010e4a:	2f00      	cmp	r7, #0
 8010e4c:	d143      	bne.n	8010ed6 <_malloc_r+0xd6>
 8010e4e:	2c00      	cmp	r4, #0
 8010e50:	d04b      	beq.n	8010eea <_malloc_r+0xea>
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	4639      	mov	r1, r7
 8010e56:	4630      	mov	r0, r6
 8010e58:	eb04 0903 	add.w	r9, r4, r3
 8010e5c:	f001 fd46 	bl	80128ec <_sbrk_r>
 8010e60:	4581      	cmp	r9, r0
 8010e62:	d142      	bne.n	8010eea <_malloc_r+0xea>
 8010e64:	6821      	ldr	r1, [r4, #0]
 8010e66:	1a6d      	subs	r5, r5, r1
 8010e68:	4629      	mov	r1, r5
 8010e6a:	4630      	mov	r0, r6
 8010e6c:	f7ff ffa6 	bl	8010dbc <sbrk_aligned>
 8010e70:	3001      	adds	r0, #1
 8010e72:	d03a      	beq.n	8010eea <_malloc_r+0xea>
 8010e74:	6823      	ldr	r3, [r4, #0]
 8010e76:	442b      	add	r3, r5
 8010e78:	6023      	str	r3, [r4, #0]
 8010e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8010e7e:	685a      	ldr	r2, [r3, #4]
 8010e80:	bb62      	cbnz	r2, 8010edc <_malloc_r+0xdc>
 8010e82:	f8c8 7000 	str.w	r7, [r8]
 8010e86:	e00f      	b.n	8010ea8 <_malloc_r+0xa8>
 8010e88:	6822      	ldr	r2, [r4, #0]
 8010e8a:	1b52      	subs	r2, r2, r5
 8010e8c:	d420      	bmi.n	8010ed0 <_malloc_r+0xd0>
 8010e8e:	2a0b      	cmp	r2, #11
 8010e90:	d917      	bls.n	8010ec2 <_malloc_r+0xc2>
 8010e92:	1961      	adds	r1, r4, r5
 8010e94:	42a3      	cmp	r3, r4
 8010e96:	6025      	str	r5, [r4, #0]
 8010e98:	bf18      	it	ne
 8010e9a:	6059      	strne	r1, [r3, #4]
 8010e9c:	6863      	ldr	r3, [r4, #4]
 8010e9e:	bf08      	it	eq
 8010ea0:	f8c8 1000 	streq.w	r1, [r8]
 8010ea4:	5162      	str	r2, [r4, r5]
 8010ea6:	604b      	str	r3, [r1, #4]
 8010ea8:	4630      	mov	r0, r6
 8010eaa:	f000 f82f 	bl	8010f0c <__malloc_unlock>
 8010eae:	f104 000b 	add.w	r0, r4, #11
 8010eb2:	1d23      	adds	r3, r4, #4
 8010eb4:	f020 0007 	bic.w	r0, r0, #7
 8010eb8:	1ac2      	subs	r2, r0, r3
 8010eba:	bf1c      	itt	ne
 8010ebc:	1a1b      	subne	r3, r3, r0
 8010ebe:	50a3      	strne	r3, [r4, r2]
 8010ec0:	e7af      	b.n	8010e22 <_malloc_r+0x22>
 8010ec2:	6862      	ldr	r2, [r4, #4]
 8010ec4:	42a3      	cmp	r3, r4
 8010ec6:	bf0c      	ite	eq
 8010ec8:	f8c8 2000 	streq.w	r2, [r8]
 8010ecc:	605a      	strne	r2, [r3, #4]
 8010ece:	e7eb      	b.n	8010ea8 <_malloc_r+0xa8>
 8010ed0:	4623      	mov	r3, r4
 8010ed2:	6864      	ldr	r4, [r4, #4]
 8010ed4:	e7ae      	b.n	8010e34 <_malloc_r+0x34>
 8010ed6:	463c      	mov	r4, r7
 8010ed8:	687f      	ldr	r7, [r7, #4]
 8010eda:	e7b6      	b.n	8010e4a <_malloc_r+0x4a>
 8010edc:	461a      	mov	r2, r3
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	42a3      	cmp	r3, r4
 8010ee2:	d1fb      	bne.n	8010edc <_malloc_r+0xdc>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	6053      	str	r3, [r2, #4]
 8010ee8:	e7de      	b.n	8010ea8 <_malloc_r+0xa8>
 8010eea:	230c      	movs	r3, #12
 8010eec:	6033      	str	r3, [r6, #0]
 8010eee:	4630      	mov	r0, r6
 8010ef0:	f000 f80c 	bl	8010f0c <__malloc_unlock>
 8010ef4:	e794      	b.n	8010e20 <_malloc_r+0x20>
 8010ef6:	6005      	str	r5, [r0, #0]
 8010ef8:	e7d6      	b.n	8010ea8 <_malloc_r+0xa8>
 8010efa:	bf00      	nop
 8010efc:	200087c4 	.word	0x200087c4

08010f00 <__malloc_lock>:
 8010f00:	4801      	ldr	r0, [pc, #4]	@ (8010f08 <__malloc_lock+0x8>)
 8010f02:	f7ff b8a4 	b.w	801004e <__retarget_lock_acquire_recursive>
 8010f06:	bf00      	nop
 8010f08:	200087bc 	.word	0x200087bc

08010f0c <__malloc_unlock>:
 8010f0c:	4801      	ldr	r0, [pc, #4]	@ (8010f14 <__malloc_unlock+0x8>)
 8010f0e:	f7ff b89f 	b.w	8010050 <__retarget_lock_release_recursive>
 8010f12:	bf00      	nop
 8010f14:	200087bc 	.word	0x200087bc

08010f18 <_Balloc>:
 8010f18:	b570      	push	{r4, r5, r6, lr}
 8010f1a:	69c6      	ldr	r6, [r0, #28]
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	460d      	mov	r5, r1
 8010f20:	b976      	cbnz	r6, 8010f40 <_Balloc+0x28>
 8010f22:	2010      	movs	r0, #16
 8010f24:	f7ff ff42 	bl	8010dac <malloc>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	61e0      	str	r0, [r4, #28]
 8010f2c:	b920      	cbnz	r0, 8010f38 <_Balloc+0x20>
 8010f2e:	4b18      	ldr	r3, [pc, #96]	@ (8010f90 <_Balloc+0x78>)
 8010f30:	4818      	ldr	r0, [pc, #96]	@ (8010f94 <_Balloc+0x7c>)
 8010f32:	216b      	movs	r1, #107	@ 0x6b
 8010f34:	f001 fcf4 	bl	8012920 <__assert_func>
 8010f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f3c:	6006      	str	r6, [r0, #0]
 8010f3e:	60c6      	str	r6, [r0, #12]
 8010f40:	69e6      	ldr	r6, [r4, #28]
 8010f42:	68f3      	ldr	r3, [r6, #12]
 8010f44:	b183      	cbz	r3, 8010f68 <_Balloc+0x50>
 8010f46:	69e3      	ldr	r3, [r4, #28]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f4e:	b9b8      	cbnz	r0, 8010f80 <_Balloc+0x68>
 8010f50:	2101      	movs	r1, #1
 8010f52:	fa01 f605 	lsl.w	r6, r1, r5
 8010f56:	1d72      	adds	r2, r6, #5
 8010f58:	0092      	lsls	r2, r2, #2
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f001 fcfe 	bl	801295c <_calloc_r>
 8010f60:	b160      	cbz	r0, 8010f7c <_Balloc+0x64>
 8010f62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f66:	e00e      	b.n	8010f86 <_Balloc+0x6e>
 8010f68:	2221      	movs	r2, #33	@ 0x21
 8010f6a:	2104      	movs	r1, #4
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	f001 fcf5 	bl	801295c <_calloc_r>
 8010f72:	69e3      	ldr	r3, [r4, #28]
 8010f74:	60f0      	str	r0, [r6, #12]
 8010f76:	68db      	ldr	r3, [r3, #12]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d1e4      	bne.n	8010f46 <_Balloc+0x2e>
 8010f7c:	2000      	movs	r0, #0
 8010f7e:	bd70      	pop	{r4, r5, r6, pc}
 8010f80:	6802      	ldr	r2, [r0, #0]
 8010f82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010f86:	2300      	movs	r3, #0
 8010f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f8c:	e7f7      	b.n	8010f7e <_Balloc+0x66>
 8010f8e:	bf00      	nop
 8010f90:	08016583 	.word	0x08016583
 8010f94:	08016603 	.word	0x08016603

08010f98 <_Bfree>:
 8010f98:	b570      	push	{r4, r5, r6, lr}
 8010f9a:	69c6      	ldr	r6, [r0, #28]
 8010f9c:	4605      	mov	r5, r0
 8010f9e:	460c      	mov	r4, r1
 8010fa0:	b976      	cbnz	r6, 8010fc0 <_Bfree+0x28>
 8010fa2:	2010      	movs	r0, #16
 8010fa4:	f7ff ff02 	bl	8010dac <malloc>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	61e8      	str	r0, [r5, #28]
 8010fac:	b920      	cbnz	r0, 8010fb8 <_Bfree+0x20>
 8010fae:	4b09      	ldr	r3, [pc, #36]	@ (8010fd4 <_Bfree+0x3c>)
 8010fb0:	4809      	ldr	r0, [pc, #36]	@ (8010fd8 <_Bfree+0x40>)
 8010fb2:	218f      	movs	r1, #143	@ 0x8f
 8010fb4:	f001 fcb4 	bl	8012920 <__assert_func>
 8010fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fbc:	6006      	str	r6, [r0, #0]
 8010fbe:	60c6      	str	r6, [r0, #12]
 8010fc0:	b13c      	cbz	r4, 8010fd2 <_Bfree+0x3a>
 8010fc2:	69eb      	ldr	r3, [r5, #28]
 8010fc4:	6862      	ldr	r2, [r4, #4]
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010fcc:	6021      	str	r1, [r4, #0]
 8010fce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010fd2:	bd70      	pop	{r4, r5, r6, pc}
 8010fd4:	08016583 	.word	0x08016583
 8010fd8:	08016603 	.word	0x08016603

08010fdc <__multadd>:
 8010fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe0:	690d      	ldr	r5, [r1, #16]
 8010fe2:	4607      	mov	r7, r0
 8010fe4:	460c      	mov	r4, r1
 8010fe6:	461e      	mov	r6, r3
 8010fe8:	f101 0c14 	add.w	ip, r1, #20
 8010fec:	2000      	movs	r0, #0
 8010fee:	f8dc 3000 	ldr.w	r3, [ip]
 8010ff2:	b299      	uxth	r1, r3
 8010ff4:	fb02 6101 	mla	r1, r2, r1, r6
 8010ff8:	0c1e      	lsrs	r6, r3, #16
 8010ffa:	0c0b      	lsrs	r3, r1, #16
 8010ffc:	fb02 3306 	mla	r3, r2, r6, r3
 8011000:	b289      	uxth	r1, r1
 8011002:	3001      	adds	r0, #1
 8011004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011008:	4285      	cmp	r5, r0
 801100a:	f84c 1b04 	str.w	r1, [ip], #4
 801100e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011012:	dcec      	bgt.n	8010fee <__multadd+0x12>
 8011014:	b30e      	cbz	r6, 801105a <__multadd+0x7e>
 8011016:	68a3      	ldr	r3, [r4, #8]
 8011018:	42ab      	cmp	r3, r5
 801101a:	dc19      	bgt.n	8011050 <__multadd+0x74>
 801101c:	6861      	ldr	r1, [r4, #4]
 801101e:	4638      	mov	r0, r7
 8011020:	3101      	adds	r1, #1
 8011022:	f7ff ff79 	bl	8010f18 <_Balloc>
 8011026:	4680      	mov	r8, r0
 8011028:	b928      	cbnz	r0, 8011036 <__multadd+0x5a>
 801102a:	4602      	mov	r2, r0
 801102c:	4b0c      	ldr	r3, [pc, #48]	@ (8011060 <__multadd+0x84>)
 801102e:	480d      	ldr	r0, [pc, #52]	@ (8011064 <__multadd+0x88>)
 8011030:	21ba      	movs	r1, #186	@ 0xba
 8011032:	f001 fc75 	bl	8012920 <__assert_func>
 8011036:	6922      	ldr	r2, [r4, #16]
 8011038:	3202      	adds	r2, #2
 801103a:	f104 010c 	add.w	r1, r4, #12
 801103e:	0092      	lsls	r2, r2, #2
 8011040:	300c      	adds	r0, #12
 8011042:	f7ff f806 	bl	8010052 <memcpy>
 8011046:	4621      	mov	r1, r4
 8011048:	4638      	mov	r0, r7
 801104a:	f7ff ffa5 	bl	8010f98 <_Bfree>
 801104e:	4644      	mov	r4, r8
 8011050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011054:	3501      	adds	r5, #1
 8011056:	615e      	str	r6, [r3, #20]
 8011058:	6125      	str	r5, [r4, #16]
 801105a:	4620      	mov	r0, r4
 801105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011060:	080165f2 	.word	0x080165f2
 8011064:	08016603 	.word	0x08016603

08011068 <__s2b>:
 8011068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801106c:	460c      	mov	r4, r1
 801106e:	4615      	mov	r5, r2
 8011070:	461f      	mov	r7, r3
 8011072:	2209      	movs	r2, #9
 8011074:	3308      	adds	r3, #8
 8011076:	4606      	mov	r6, r0
 8011078:	fb93 f3f2 	sdiv	r3, r3, r2
 801107c:	2100      	movs	r1, #0
 801107e:	2201      	movs	r2, #1
 8011080:	429a      	cmp	r2, r3
 8011082:	db09      	blt.n	8011098 <__s2b+0x30>
 8011084:	4630      	mov	r0, r6
 8011086:	f7ff ff47 	bl	8010f18 <_Balloc>
 801108a:	b940      	cbnz	r0, 801109e <__s2b+0x36>
 801108c:	4602      	mov	r2, r0
 801108e:	4b19      	ldr	r3, [pc, #100]	@ (80110f4 <__s2b+0x8c>)
 8011090:	4819      	ldr	r0, [pc, #100]	@ (80110f8 <__s2b+0x90>)
 8011092:	21d3      	movs	r1, #211	@ 0xd3
 8011094:	f001 fc44 	bl	8012920 <__assert_func>
 8011098:	0052      	lsls	r2, r2, #1
 801109a:	3101      	adds	r1, #1
 801109c:	e7f0      	b.n	8011080 <__s2b+0x18>
 801109e:	9b08      	ldr	r3, [sp, #32]
 80110a0:	6143      	str	r3, [r0, #20]
 80110a2:	2d09      	cmp	r5, #9
 80110a4:	f04f 0301 	mov.w	r3, #1
 80110a8:	6103      	str	r3, [r0, #16]
 80110aa:	dd16      	ble.n	80110da <__s2b+0x72>
 80110ac:	f104 0909 	add.w	r9, r4, #9
 80110b0:	46c8      	mov	r8, r9
 80110b2:	442c      	add	r4, r5
 80110b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80110b8:	4601      	mov	r1, r0
 80110ba:	3b30      	subs	r3, #48	@ 0x30
 80110bc:	220a      	movs	r2, #10
 80110be:	4630      	mov	r0, r6
 80110c0:	f7ff ff8c 	bl	8010fdc <__multadd>
 80110c4:	45a0      	cmp	r8, r4
 80110c6:	d1f5      	bne.n	80110b4 <__s2b+0x4c>
 80110c8:	f1a5 0408 	sub.w	r4, r5, #8
 80110cc:	444c      	add	r4, r9
 80110ce:	1b2d      	subs	r5, r5, r4
 80110d0:	1963      	adds	r3, r4, r5
 80110d2:	42bb      	cmp	r3, r7
 80110d4:	db04      	blt.n	80110e0 <__s2b+0x78>
 80110d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110da:	340a      	adds	r4, #10
 80110dc:	2509      	movs	r5, #9
 80110de:	e7f6      	b.n	80110ce <__s2b+0x66>
 80110e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80110e4:	4601      	mov	r1, r0
 80110e6:	3b30      	subs	r3, #48	@ 0x30
 80110e8:	220a      	movs	r2, #10
 80110ea:	4630      	mov	r0, r6
 80110ec:	f7ff ff76 	bl	8010fdc <__multadd>
 80110f0:	e7ee      	b.n	80110d0 <__s2b+0x68>
 80110f2:	bf00      	nop
 80110f4:	080165f2 	.word	0x080165f2
 80110f8:	08016603 	.word	0x08016603

080110fc <__hi0bits>:
 80110fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011100:	4603      	mov	r3, r0
 8011102:	bf36      	itet	cc
 8011104:	0403      	lslcc	r3, r0, #16
 8011106:	2000      	movcs	r0, #0
 8011108:	2010      	movcc	r0, #16
 801110a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801110e:	bf3c      	itt	cc
 8011110:	021b      	lslcc	r3, r3, #8
 8011112:	3008      	addcc	r0, #8
 8011114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011118:	bf3c      	itt	cc
 801111a:	011b      	lslcc	r3, r3, #4
 801111c:	3004      	addcc	r0, #4
 801111e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011122:	bf3c      	itt	cc
 8011124:	009b      	lslcc	r3, r3, #2
 8011126:	3002      	addcc	r0, #2
 8011128:	2b00      	cmp	r3, #0
 801112a:	db05      	blt.n	8011138 <__hi0bits+0x3c>
 801112c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011130:	f100 0001 	add.w	r0, r0, #1
 8011134:	bf08      	it	eq
 8011136:	2020      	moveq	r0, #32
 8011138:	4770      	bx	lr

0801113a <__lo0bits>:
 801113a:	6803      	ldr	r3, [r0, #0]
 801113c:	4602      	mov	r2, r0
 801113e:	f013 0007 	ands.w	r0, r3, #7
 8011142:	d00b      	beq.n	801115c <__lo0bits+0x22>
 8011144:	07d9      	lsls	r1, r3, #31
 8011146:	d421      	bmi.n	801118c <__lo0bits+0x52>
 8011148:	0798      	lsls	r0, r3, #30
 801114a:	bf49      	itett	mi
 801114c:	085b      	lsrmi	r3, r3, #1
 801114e:	089b      	lsrpl	r3, r3, #2
 8011150:	2001      	movmi	r0, #1
 8011152:	6013      	strmi	r3, [r2, #0]
 8011154:	bf5c      	itt	pl
 8011156:	6013      	strpl	r3, [r2, #0]
 8011158:	2002      	movpl	r0, #2
 801115a:	4770      	bx	lr
 801115c:	b299      	uxth	r1, r3
 801115e:	b909      	cbnz	r1, 8011164 <__lo0bits+0x2a>
 8011160:	0c1b      	lsrs	r3, r3, #16
 8011162:	2010      	movs	r0, #16
 8011164:	b2d9      	uxtb	r1, r3
 8011166:	b909      	cbnz	r1, 801116c <__lo0bits+0x32>
 8011168:	3008      	adds	r0, #8
 801116a:	0a1b      	lsrs	r3, r3, #8
 801116c:	0719      	lsls	r1, r3, #28
 801116e:	bf04      	itt	eq
 8011170:	091b      	lsreq	r3, r3, #4
 8011172:	3004      	addeq	r0, #4
 8011174:	0799      	lsls	r1, r3, #30
 8011176:	bf04      	itt	eq
 8011178:	089b      	lsreq	r3, r3, #2
 801117a:	3002      	addeq	r0, #2
 801117c:	07d9      	lsls	r1, r3, #31
 801117e:	d403      	bmi.n	8011188 <__lo0bits+0x4e>
 8011180:	085b      	lsrs	r3, r3, #1
 8011182:	f100 0001 	add.w	r0, r0, #1
 8011186:	d003      	beq.n	8011190 <__lo0bits+0x56>
 8011188:	6013      	str	r3, [r2, #0]
 801118a:	4770      	bx	lr
 801118c:	2000      	movs	r0, #0
 801118e:	4770      	bx	lr
 8011190:	2020      	movs	r0, #32
 8011192:	4770      	bx	lr

08011194 <__i2b>:
 8011194:	b510      	push	{r4, lr}
 8011196:	460c      	mov	r4, r1
 8011198:	2101      	movs	r1, #1
 801119a:	f7ff febd 	bl	8010f18 <_Balloc>
 801119e:	4602      	mov	r2, r0
 80111a0:	b928      	cbnz	r0, 80111ae <__i2b+0x1a>
 80111a2:	4b05      	ldr	r3, [pc, #20]	@ (80111b8 <__i2b+0x24>)
 80111a4:	4805      	ldr	r0, [pc, #20]	@ (80111bc <__i2b+0x28>)
 80111a6:	f240 1145 	movw	r1, #325	@ 0x145
 80111aa:	f001 fbb9 	bl	8012920 <__assert_func>
 80111ae:	2301      	movs	r3, #1
 80111b0:	6144      	str	r4, [r0, #20]
 80111b2:	6103      	str	r3, [r0, #16]
 80111b4:	bd10      	pop	{r4, pc}
 80111b6:	bf00      	nop
 80111b8:	080165f2 	.word	0x080165f2
 80111bc:	08016603 	.word	0x08016603

080111c0 <__multiply>:
 80111c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c4:	4614      	mov	r4, r2
 80111c6:	690a      	ldr	r2, [r1, #16]
 80111c8:	6923      	ldr	r3, [r4, #16]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	bfa8      	it	ge
 80111ce:	4623      	movge	r3, r4
 80111d0:	460f      	mov	r7, r1
 80111d2:	bfa4      	itt	ge
 80111d4:	460c      	movge	r4, r1
 80111d6:	461f      	movge	r7, r3
 80111d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80111dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80111e0:	68a3      	ldr	r3, [r4, #8]
 80111e2:	6861      	ldr	r1, [r4, #4]
 80111e4:	eb0a 0609 	add.w	r6, sl, r9
 80111e8:	42b3      	cmp	r3, r6
 80111ea:	b085      	sub	sp, #20
 80111ec:	bfb8      	it	lt
 80111ee:	3101      	addlt	r1, #1
 80111f0:	f7ff fe92 	bl	8010f18 <_Balloc>
 80111f4:	b930      	cbnz	r0, 8011204 <__multiply+0x44>
 80111f6:	4602      	mov	r2, r0
 80111f8:	4b44      	ldr	r3, [pc, #272]	@ (801130c <__multiply+0x14c>)
 80111fa:	4845      	ldr	r0, [pc, #276]	@ (8011310 <__multiply+0x150>)
 80111fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011200:	f001 fb8e 	bl	8012920 <__assert_func>
 8011204:	f100 0514 	add.w	r5, r0, #20
 8011208:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801120c:	462b      	mov	r3, r5
 801120e:	2200      	movs	r2, #0
 8011210:	4543      	cmp	r3, r8
 8011212:	d321      	bcc.n	8011258 <__multiply+0x98>
 8011214:	f107 0114 	add.w	r1, r7, #20
 8011218:	f104 0214 	add.w	r2, r4, #20
 801121c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011220:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011224:	9302      	str	r3, [sp, #8]
 8011226:	1b13      	subs	r3, r2, r4
 8011228:	3b15      	subs	r3, #21
 801122a:	f023 0303 	bic.w	r3, r3, #3
 801122e:	3304      	adds	r3, #4
 8011230:	f104 0715 	add.w	r7, r4, #21
 8011234:	42ba      	cmp	r2, r7
 8011236:	bf38      	it	cc
 8011238:	2304      	movcc	r3, #4
 801123a:	9301      	str	r3, [sp, #4]
 801123c:	9b02      	ldr	r3, [sp, #8]
 801123e:	9103      	str	r1, [sp, #12]
 8011240:	428b      	cmp	r3, r1
 8011242:	d80c      	bhi.n	801125e <__multiply+0x9e>
 8011244:	2e00      	cmp	r6, #0
 8011246:	dd03      	ble.n	8011250 <__multiply+0x90>
 8011248:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801124c:	2b00      	cmp	r3, #0
 801124e:	d05b      	beq.n	8011308 <__multiply+0x148>
 8011250:	6106      	str	r6, [r0, #16]
 8011252:	b005      	add	sp, #20
 8011254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011258:	f843 2b04 	str.w	r2, [r3], #4
 801125c:	e7d8      	b.n	8011210 <__multiply+0x50>
 801125e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011262:	f1ba 0f00 	cmp.w	sl, #0
 8011266:	d024      	beq.n	80112b2 <__multiply+0xf2>
 8011268:	f104 0e14 	add.w	lr, r4, #20
 801126c:	46a9      	mov	r9, r5
 801126e:	f04f 0c00 	mov.w	ip, #0
 8011272:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011276:	f8d9 3000 	ldr.w	r3, [r9]
 801127a:	fa1f fb87 	uxth.w	fp, r7
 801127e:	b29b      	uxth	r3, r3
 8011280:	fb0a 330b 	mla	r3, sl, fp, r3
 8011284:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011288:	f8d9 7000 	ldr.w	r7, [r9]
 801128c:	4463      	add	r3, ip
 801128e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011292:	fb0a c70b 	mla	r7, sl, fp, ip
 8011296:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801129a:	b29b      	uxth	r3, r3
 801129c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80112a0:	4572      	cmp	r2, lr
 80112a2:	f849 3b04 	str.w	r3, [r9], #4
 80112a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80112aa:	d8e2      	bhi.n	8011272 <__multiply+0xb2>
 80112ac:	9b01      	ldr	r3, [sp, #4]
 80112ae:	f845 c003 	str.w	ip, [r5, r3]
 80112b2:	9b03      	ldr	r3, [sp, #12]
 80112b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80112b8:	3104      	adds	r1, #4
 80112ba:	f1b9 0f00 	cmp.w	r9, #0
 80112be:	d021      	beq.n	8011304 <__multiply+0x144>
 80112c0:	682b      	ldr	r3, [r5, #0]
 80112c2:	f104 0c14 	add.w	ip, r4, #20
 80112c6:	46ae      	mov	lr, r5
 80112c8:	f04f 0a00 	mov.w	sl, #0
 80112cc:	f8bc b000 	ldrh.w	fp, [ip]
 80112d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80112d4:	fb09 770b 	mla	r7, r9, fp, r7
 80112d8:	4457      	add	r7, sl
 80112da:	b29b      	uxth	r3, r3
 80112dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80112e0:	f84e 3b04 	str.w	r3, [lr], #4
 80112e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80112e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112ec:	f8be 3000 	ldrh.w	r3, [lr]
 80112f0:	fb09 330a 	mla	r3, r9, sl, r3
 80112f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80112f8:	4562      	cmp	r2, ip
 80112fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112fe:	d8e5      	bhi.n	80112cc <__multiply+0x10c>
 8011300:	9f01      	ldr	r7, [sp, #4]
 8011302:	51eb      	str	r3, [r5, r7]
 8011304:	3504      	adds	r5, #4
 8011306:	e799      	b.n	801123c <__multiply+0x7c>
 8011308:	3e01      	subs	r6, #1
 801130a:	e79b      	b.n	8011244 <__multiply+0x84>
 801130c:	080165f2 	.word	0x080165f2
 8011310:	08016603 	.word	0x08016603

08011314 <__pow5mult>:
 8011314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011318:	4615      	mov	r5, r2
 801131a:	f012 0203 	ands.w	r2, r2, #3
 801131e:	4607      	mov	r7, r0
 8011320:	460e      	mov	r6, r1
 8011322:	d007      	beq.n	8011334 <__pow5mult+0x20>
 8011324:	4c25      	ldr	r4, [pc, #148]	@ (80113bc <__pow5mult+0xa8>)
 8011326:	3a01      	subs	r2, #1
 8011328:	2300      	movs	r3, #0
 801132a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801132e:	f7ff fe55 	bl	8010fdc <__multadd>
 8011332:	4606      	mov	r6, r0
 8011334:	10ad      	asrs	r5, r5, #2
 8011336:	d03d      	beq.n	80113b4 <__pow5mult+0xa0>
 8011338:	69fc      	ldr	r4, [r7, #28]
 801133a:	b97c      	cbnz	r4, 801135c <__pow5mult+0x48>
 801133c:	2010      	movs	r0, #16
 801133e:	f7ff fd35 	bl	8010dac <malloc>
 8011342:	4602      	mov	r2, r0
 8011344:	61f8      	str	r0, [r7, #28]
 8011346:	b928      	cbnz	r0, 8011354 <__pow5mult+0x40>
 8011348:	4b1d      	ldr	r3, [pc, #116]	@ (80113c0 <__pow5mult+0xac>)
 801134a:	481e      	ldr	r0, [pc, #120]	@ (80113c4 <__pow5mult+0xb0>)
 801134c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011350:	f001 fae6 	bl	8012920 <__assert_func>
 8011354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011358:	6004      	str	r4, [r0, #0]
 801135a:	60c4      	str	r4, [r0, #12]
 801135c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011364:	b94c      	cbnz	r4, 801137a <__pow5mult+0x66>
 8011366:	f240 2171 	movw	r1, #625	@ 0x271
 801136a:	4638      	mov	r0, r7
 801136c:	f7ff ff12 	bl	8011194 <__i2b>
 8011370:	2300      	movs	r3, #0
 8011372:	f8c8 0008 	str.w	r0, [r8, #8]
 8011376:	4604      	mov	r4, r0
 8011378:	6003      	str	r3, [r0, #0]
 801137a:	f04f 0900 	mov.w	r9, #0
 801137e:	07eb      	lsls	r3, r5, #31
 8011380:	d50a      	bpl.n	8011398 <__pow5mult+0x84>
 8011382:	4631      	mov	r1, r6
 8011384:	4622      	mov	r2, r4
 8011386:	4638      	mov	r0, r7
 8011388:	f7ff ff1a 	bl	80111c0 <__multiply>
 801138c:	4631      	mov	r1, r6
 801138e:	4680      	mov	r8, r0
 8011390:	4638      	mov	r0, r7
 8011392:	f7ff fe01 	bl	8010f98 <_Bfree>
 8011396:	4646      	mov	r6, r8
 8011398:	106d      	asrs	r5, r5, #1
 801139a:	d00b      	beq.n	80113b4 <__pow5mult+0xa0>
 801139c:	6820      	ldr	r0, [r4, #0]
 801139e:	b938      	cbnz	r0, 80113b0 <__pow5mult+0x9c>
 80113a0:	4622      	mov	r2, r4
 80113a2:	4621      	mov	r1, r4
 80113a4:	4638      	mov	r0, r7
 80113a6:	f7ff ff0b 	bl	80111c0 <__multiply>
 80113aa:	6020      	str	r0, [r4, #0]
 80113ac:	f8c0 9000 	str.w	r9, [r0]
 80113b0:	4604      	mov	r4, r0
 80113b2:	e7e4      	b.n	801137e <__pow5mult+0x6a>
 80113b4:	4630      	mov	r0, r6
 80113b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113ba:	bf00      	nop
 80113bc:	0801665c 	.word	0x0801665c
 80113c0:	08016583 	.word	0x08016583
 80113c4:	08016603 	.word	0x08016603

080113c8 <__lshift>:
 80113c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113cc:	460c      	mov	r4, r1
 80113ce:	6849      	ldr	r1, [r1, #4]
 80113d0:	6923      	ldr	r3, [r4, #16]
 80113d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80113d6:	68a3      	ldr	r3, [r4, #8]
 80113d8:	4607      	mov	r7, r0
 80113da:	4691      	mov	r9, r2
 80113dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80113e0:	f108 0601 	add.w	r6, r8, #1
 80113e4:	42b3      	cmp	r3, r6
 80113e6:	db0b      	blt.n	8011400 <__lshift+0x38>
 80113e8:	4638      	mov	r0, r7
 80113ea:	f7ff fd95 	bl	8010f18 <_Balloc>
 80113ee:	4605      	mov	r5, r0
 80113f0:	b948      	cbnz	r0, 8011406 <__lshift+0x3e>
 80113f2:	4602      	mov	r2, r0
 80113f4:	4b28      	ldr	r3, [pc, #160]	@ (8011498 <__lshift+0xd0>)
 80113f6:	4829      	ldr	r0, [pc, #164]	@ (801149c <__lshift+0xd4>)
 80113f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80113fc:	f001 fa90 	bl	8012920 <__assert_func>
 8011400:	3101      	adds	r1, #1
 8011402:	005b      	lsls	r3, r3, #1
 8011404:	e7ee      	b.n	80113e4 <__lshift+0x1c>
 8011406:	2300      	movs	r3, #0
 8011408:	f100 0114 	add.w	r1, r0, #20
 801140c:	f100 0210 	add.w	r2, r0, #16
 8011410:	4618      	mov	r0, r3
 8011412:	4553      	cmp	r3, sl
 8011414:	db33      	blt.n	801147e <__lshift+0xb6>
 8011416:	6920      	ldr	r0, [r4, #16]
 8011418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801141c:	f104 0314 	add.w	r3, r4, #20
 8011420:	f019 091f 	ands.w	r9, r9, #31
 8011424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011428:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801142c:	d02b      	beq.n	8011486 <__lshift+0xbe>
 801142e:	f1c9 0e20 	rsb	lr, r9, #32
 8011432:	468a      	mov	sl, r1
 8011434:	2200      	movs	r2, #0
 8011436:	6818      	ldr	r0, [r3, #0]
 8011438:	fa00 f009 	lsl.w	r0, r0, r9
 801143c:	4310      	orrs	r0, r2
 801143e:	f84a 0b04 	str.w	r0, [sl], #4
 8011442:	f853 2b04 	ldr.w	r2, [r3], #4
 8011446:	459c      	cmp	ip, r3
 8011448:	fa22 f20e 	lsr.w	r2, r2, lr
 801144c:	d8f3      	bhi.n	8011436 <__lshift+0x6e>
 801144e:	ebac 0304 	sub.w	r3, ip, r4
 8011452:	3b15      	subs	r3, #21
 8011454:	f023 0303 	bic.w	r3, r3, #3
 8011458:	3304      	adds	r3, #4
 801145a:	f104 0015 	add.w	r0, r4, #21
 801145e:	4584      	cmp	ip, r0
 8011460:	bf38      	it	cc
 8011462:	2304      	movcc	r3, #4
 8011464:	50ca      	str	r2, [r1, r3]
 8011466:	b10a      	cbz	r2, 801146c <__lshift+0xa4>
 8011468:	f108 0602 	add.w	r6, r8, #2
 801146c:	3e01      	subs	r6, #1
 801146e:	4638      	mov	r0, r7
 8011470:	612e      	str	r6, [r5, #16]
 8011472:	4621      	mov	r1, r4
 8011474:	f7ff fd90 	bl	8010f98 <_Bfree>
 8011478:	4628      	mov	r0, r5
 801147a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801147e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011482:	3301      	adds	r3, #1
 8011484:	e7c5      	b.n	8011412 <__lshift+0x4a>
 8011486:	3904      	subs	r1, #4
 8011488:	f853 2b04 	ldr.w	r2, [r3], #4
 801148c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011490:	459c      	cmp	ip, r3
 8011492:	d8f9      	bhi.n	8011488 <__lshift+0xc0>
 8011494:	e7ea      	b.n	801146c <__lshift+0xa4>
 8011496:	bf00      	nop
 8011498:	080165f2 	.word	0x080165f2
 801149c:	08016603 	.word	0x08016603

080114a0 <__mcmp>:
 80114a0:	690a      	ldr	r2, [r1, #16]
 80114a2:	4603      	mov	r3, r0
 80114a4:	6900      	ldr	r0, [r0, #16]
 80114a6:	1a80      	subs	r0, r0, r2
 80114a8:	b530      	push	{r4, r5, lr}
 80114aa:	d10e      	bne.n	80114ca <__mcmp+0x2a>
 80114ac:	3314      	adds	r3, #20
 80114ae:	3114      	adds	r1, #20
 80114b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80114b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80114b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80114bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80114c0:	4295      	cmp	r5, r2
 80114c2:	d003      	beq.n	80114cc <__mcmp+0x2c>
 80114c4:	d205      	bcs.n	80114d2 <__mcmp+0x32>
 80114c6:	f04f 30ff 	mov.w	r0, #4294967295
 80114ca:	bd30      	pop	{r4, r5, pc}
 80114cc:	42a3      	cmp	r3, r4
 80114ce:	d3f3      	bcc.n	80114b8 <__mcmp+0x18>
 80114d0:	e7fb      	b.n	80114ca <__mcmp+0x2a>
 80114d2:	2001      	movs	r0, #1
 80114d4:	e7f9      	b.n	80114ca <__mcmp+0x2a>
	...

080114d8 <__mdiff>:
 80114d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114dc:	4689      	mov	r9, r1
 80114de:	4606      	mov	r6, r0
 80114e0:	4611      	mov	r1, r2
 80114e2:	4648      	mov	r0, r9
 80114e4:	4614      	mov	r4, r2
 80114e6:	f7ff ffdb 	bl	80114a0 <__mcmp>
 80114ea:	1e05      	subs	r5, r0, #0
 80114ec:	d112      	bne.n	8011514 <__mdiff+0x3c>
 80114ee:	4629      	mov	r1, r5
 80114f0:	4630      	mov	r0, r6
 80114f2:	f7ff fd11 	bl	8010f18 <_Balloc>
 80114f6:	4602      	mov	r2, r0
 80114f8:	b928      	cbnz	r0, 8011506 <__mdiff+0x2e>
 80114fa:	4b3f      	ldr	r3, [pc, #252]	@ (80115f8 <__mdiff+0x120>)
 80114fc:	f240 2137 	movw	r1, #567	@ 0x237
 8011500:	483e      	ldr	r0, [pc, #248]	@ (80115fc <__mdiff+0x124>)
 8011502:	f001 fa0d 	bl	8012920 <__assert_func>
 8011506:	2301      	movs	r3, #1
 8011508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801150c:	4610      	mov	r0, r2
 801150e:	b003      	add	sp, #12
 8011510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011514:	bfbc      	itt	lt
 8011516:	464b      	movlt	r3, r9
 8011518:	46a1      	movlt	r9, r4
 801151a:	4630      	mov	r0, r6
 801151c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011520:	bfba      	itte	lt
 8011522:	461c      	movlt	r4, r3
 8011524:	2501      	movlt	r5, #1
 8011526:	2500      	movge	r5, #0
 8011528:	f7ff fcf6 	bl	8010f18 <_Balloc>
 801152c:	4602      	mov	r2, r0
 801152e:	b918      	cbnz	r0, 8011538 <__mdiff+0x60>
 8011530:	4b31      	ldr	r3, [pc, #196]	@ (80115f8 <__mdiff+0x120>)
 8011532:	f240 2145 	movw	r1, #581	@ 0x245
 8011536:	e7e3      	b.n	8011500 <__mdiff+0x28>
 8011538:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801153c:	6926      	ldr	r6, [r4, #16]
 801153e:	60c5      	str	r5, [r0, #12]
 8011540:	f109 0310 	add.w	r3, r9, #16
 8011544:	f109 0514 	add.w	r5, r9, #20
 8011548:	f104 0e14 	add.w	lr, r4, #20
 801154c:	f100 0b14 	add.w	fp, r0, #20
 8011550:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011554:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011558:	9301      	str	r3, [sp, #4]
 801155a:	46d9      	mov	r9, fp
 801155c:	f04f 0c00 	mov.w	ip, #0
 8011560:	9b01      	ldr	r3, [sp, #4]
 8011562:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011566:	f853 af04 	ldr.w	sl, [r3, #4]!
 801156a:	9301      	str	r3, [sp, #4]
 801156c:	fa1f f38a 	uxth.w	r3, sl
 8011570:	4619      	mov	r1, r3
 8011572:	b283      	uxth	r3, r0
 8011574:	1acb      	subs	r3, r1, r3
 8011576:	0c00      	lsrs	r0, r0, #16
 8011578:	4463      	add	r3, ip
 801157a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801157e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011582:	b29b      	uxth	r3, r3
 8011584:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011588:	4576      	cmp	r6, lr
 801158a:	f849 3b04 	str.w	r3, [r9], #4
 801158e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011592:	d8e5      	bhi.n	8011560 <__mdiff+0x88>
 8011594:	1b33      	subs	r3, r6, r4
 8011596:	3b15      	subs	r3, #21
 8011598:	f023 0303 	bic.w	r3, r3, #3
 801159c:	3415      	adds	r4, #21
 801159e:	3304      	adds	r3, #4
 80115a0:	42a6      	cmp	r6, r4
 80115a2:	bf38      	it	cc
 80115a4:	2304      	movcc	r3, #4
 80115a6:	441d      	add	r5, r3
 80115a8:	445b      	add	r3, fp
 80115aa:	461e      	mov	r6, r3
 80115ac:	462c      	mov	r4, r5
 80115ae:	4544      	cmp	r4, r8
 80115b0:	d30e      	bcc.n	80115d0 <__mdiff+0xf8>
 80115b2:	f108 0103 	add.w	r1, r8, #3
 80115b6:	1b49      	subs	r1, r1, r5
 80115b8:	f021 0103 	bic.w	r1, r1, #3
 80115bc:	3d03      	subs	r5, #3
 80115be:	45a8      	cmp	r8, r5
 80115c0:	bf38      	it	cc
 80115c2:	2100      	movcc	r1, #0
 80115c4:	440b      	add	r3, r1
 80115c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80115ca:	b191      	cbz	r1, 80115f2 <__mdiff+0x11a>
 80115cc:	6117      	str	r7, [r2, #16]
 80115ce:	e79d      	b.n	801150c <__mdiff+0x34>
 80115d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80115d4:	46e6      	mov	lr, ip
 80115d6:	0c08      	lsrs	r0, r1, #16
 80115d8:	fa1c fc81 	uxtah	ip, ip, r1
 80115dc:	4471      	add	r1, lr
 80115de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80115e2:	b289      	uxth	r1, r1
 80115e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80115e8:	f846 1b04 	str.w	r1, [r6], #4
 80115ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80115f0:	e7dd      	b.n	80115ae <__mdiff+0xd6>
 80115f2:	3f01      	subs	r7, #1
 80115f4:	e7e7      	b.n	80115c6 <__mdiff+0xee>
 80115f6:	bf00      	nop
 80115f8:	080165f2 	.word	0x080165f2
 80115fc:	08016603 	.word	0x08016603

08011600 <__ulp>:
 8011600:	b082      	sub	sp, #8
 8011602:	ed8d 0b00 	vstr	d0, [sp]
 8011606:	9a01      	ldr	r2, [sp, #4]
 8011608:	4b0f      	ldr	r3, [pc, #60]	@ (8011648 <__ulp+0x48>)
 801160a:	4013      	ands	r3, r2
 801160c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011610:	2b00      	cmp	r3, #0
 8011612:	dc08      	bgt.n	8011626 <__ulp+0x26>
 8011614:	425b      	negs	r3, r3
 8011616:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801161a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801161e:	da04      	bge.n	801162a <__ulp+0x2a>
 8011620:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011624:	4113      	asrs	r3, r2
 8011626:	2200      	movs	r2, #0
 8011628:	e008      	b.n	801163c <__ulp+0x3c>
 801162a:	f1a2 0314 	sub.w	r3, r2, #20
 801162e:	2b1e      	cmp	r3, #30
 8011630:	bfda      	itte	le
 8011632:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011636:	40da      	lsrle	r2, r3
 8011638:	2201      	movgt	r2, #1
 801163a:	2300      	movs	r3, #0
 801163c:	4619      	mov	r1, r3
 801163e:	4610      	mov	r0, r2
 8011640:	ec41 0b10 	vmov	d0, r0, r1
 8011644:	b002      	add	sp, #8
 8011646:	4770      	bx	lr
 8011648:	7ff00000 	.word	0x7ff00000

0801164c <__b2d>:
 801164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011650:	6906      	ldr	r6, [r0, #16]
 8011652:	f100 0814 	add.w	r8, r0, #20
 8011656:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801165a:	1f37      	subs	r7, r6, #4
 801165c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011660:	4610      	mov	r0, r2
 8011662:	f7ff fd4b 	bl	80110fc <__hi0bits>
 8011666:	f1c0 0320 	rsb	r3, r0, #32
 801166a:	280a      	cmp	r0, #10
 801166c:	600b      	str	r3, [r1, #0]
 801166e:	491b      	ldr	r1, [pc, #108]	@ (80116dc <__b2d+0x90>)
 8011670:	dc15      	bgt.n	801169e <__b2d+0x52>
 8011672:	f1c0 0c0b 	rsb	ip, r0, #11
 8011676:	fa22 f30c 	lsr.w	r3, r2, ip
 801167a:	45b8      	cmp	r8, r7
 801167c:	ea43 0501 	orr.w	r5, r3, r1
 8011680:	bf34      	ite	cc
 8011682:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011686:	2300      	movcs	r3, #0
 8011688:	3015      	adds	r0, #21
 801168a:	fa02 f000 	lsl.w	r0, r2, r0
 801168e:	fa23 f30c 	lsr.w	r3, r3, ip
 8011692:	4303      	orrs	r3, r0
 8011694:	461c      	mov	r4, r3
 8011696:	ec45 4b10 	vmov	d0, r4, r5
 801169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801169e:	45b8      	cmp	r8, r7
 80116a0:	bf3a      	itte	cc
 80116a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80116aa:	2300      	movcs	r3, #0
 80116ac:	380b      	subs	r0, #11
 80116ae:	d012      	beq.n	80116d6 <__b2d+0x8a>
 80116b0:	f1c0 0120 	rsb	r1, r0, #32
 80116b4:	fa23 f401 	lsr.w	r4, r3, r1
 80116b8:	4082      	lsls	r2, r0
 80116ba:	4322      	orrs	r2, r4
 80116bc:	4547      	cmp	r7, r8
 80116be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80116c2:	bf8c      	ite	hi
 80116c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80116c8:	2200      	movls	r2, #0
 80116ca:	4083      	lsls	r3, r0
 80116cc:	40ca      	lsrs	r2, r1
 80116ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80116d2:	4313      	orrs	r3, r2
 80116d4:	e7de      	b.n	8011694 <__b2d+0x48>
 80116d6:	ea42 0501 	orr.w	r5, r2, r1
 80116da:	e7db      	b.n	8011694 <__b2d+0x48>
 80116dc:	3ff00000 	.word	0x3ff00000

080116e0 <__d2b>:
 80116e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80116e4:	460f      	mov	r7, r1
 80116e6:	2101      	movs	r1, #1
 80116e8:	ec59 8b10 	vmov	r8, r9, d0
 80116ec:	4616      	mov	r6, r2
 80116ee:	f7ff fc13 	bl	8010f18 <_Balloc>
 80116f2:	4604      	mov	r4, r0
 80116f4:	b930      	cbnz	r0, 8011704 <__d2b+0x24>
 80116f6:	4602      	mov	r2, r0
 80116f8:	4b23      	ldr	r3, [pc, #140]	@ (8011788 <__d2b+0xa8>)
 80116fa:	4824      	ldr	r0, [pc, #144]	@ (801178c <__d2b+0xac>)
 80116fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8011700:	f001 f90e 	bl	8012920 <__assert_func>
 8011704:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801170c:	b10d      	cbz	r5, 8011712 <__d2b+0x32>
 801170e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011712:	9301      	str	r3, [sp, #4]
 8011714:	f1b8 0300 	subs.w	r3, r8, #0
 8011718:	d023      	beq.n	8011762 <__d2b+0x82>
 801171a:	4668      	mov	r0, sp
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	f7ff fd0c 	bl	801113a <__lo0bits>
 8011722:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011726:	b1d0      	cbz	r0, 801175e <__d2b+0x7e>
 8011728:	f1c0 0320 	rsb	r3, r0, #32
 801172c:	fa02 f303 	lsl.w	r3, r2, r3
 8011730:	430b      	orrs	r3, r1
 8011732:	40c2      	lsrs	r2, r0
 8011734:	6163      	str	r3, [r4, #20]
 8011736:	9201      	str	r2, [sp, #4]
 8011738:	9b01      	ldr	r3, [sp, #4]
 801173a:	61a3      	str	r3, [r4, #24]
 801173c:	2b00      	cmp	r3, #0
 801173e:	bf0c      	ite	eq
 8011740:	2201      	moveq	r2, #1
 8011742:	2202      	movne	r2, #2
 8011744:	6122      	str	r2, [r4, #16]
 8011746:	b1a5      	cbz	r5, 8011772 <__d2b+0x92>
 8011748:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801174c:	4405      	add	r5, r0
 801174e:	603d      	str	r5, [r7, #0]
 8011750:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011754:	6030      	str	r0, [r6, #0]
 8011756:	4620      	mov	r0, r4
 8011758:	b003      	add	sp, #12
 801175a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801175e:	6161      	str	r1, [r4, #20]
 8011760:	e7ea      	b.n	8011738 <__d2b+0x58>
 8011762:	a801      	add	r0, sp, #4
 8011764:	f7ff fce9 	bl	801113a <__lo0bits>
 8011768:	9b01      	ldr	r3, [sp, #4]
 801176a:	6163      	str	r3, [r4, #20]
 801176c:	3020      	adds	r0, #32
 801176e:	2201      	movs	r2, #1
 8011770:	e7e8      	b.n	8011744 <__d2b+0x64>
 8011772:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011776:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801177a:	6038      	str	r0, [r7, #0]
 801177c:	6918      	ldr	r0, [r3, #16]
 801177e:	f7ff fcbd 	bl	80110fc <__hi0bits>
 8011782:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011786:	e7e5      	b.n	8011754 <__d2b+0x74>
 8011788:	080165f2 	.word	0x080165f2
 801178c:	08016603 	.word	0x08016603

08011790 <__ratio>:
 8011790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011794:	b085      	sub	sp, #20
 8011796:	e9cd 1000 	strd	r1, r0, [sp]
 801179a:	a902      	add	r1, sp, #8
 801179c:	f7ff ff56 	bl	801164c <__b2d>
 80117a0:	9800      	ldr	r0, [sp, #0]
 80117a2:	a903      	add	r1, sp, #12
 80117a4:	ec55 4b10 	vmov	r4, r5, d0
 80117a8:	f7ff ff50 	bl	801164c <__b2d>
 80117ac:	9b01      	ldr	r3, [sp, #4]
 80117ae:	6919      	ldr	r1, [r3, #16]
 80117b0:	9b00      	ldr	r3, [sp, #0]
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	1ac9      	subs	r1, r1, r3
 80117b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80117ba:	1a9b      	subs	r3, r3, r2
 80117bc:	ec5b ab10 	vmov	sl, fp, d0
 80117c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	bfce      	itee	gt
 80117c8:	462a      	movgt	r2, r5
 80117ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80117ce:	465a      	movle	r2, fp
 80117d0:	462f      	mov	r7, r5
 80117d2:	46d9      	mov	r9, fp
 80117d4:	bfcc      	ite	gt
 80117d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80117da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80117de:	464b      	mov	r3, r9
 80117e0:	4652      	mov	r2, sl
 80117e2:	4620      	mov	r0, r4
 80117e4:	4639      	mov	r1, r7
 80117e6:	f7ef f841 	bl	800086c <__aeabi_ddiv>
 80117ea:	ec41 0b10 	vmov	d0, r0, r1
 80117ee:	b005      	add	sp, #20
 80117f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080117f4 <__copybits>:
 80117f4:	3901      	subs	r1, #1
 80117f6:	b570      	push	{r4, r5, r6, lr}
 80117f8:	1149      	asrs	r1, r1, #5
 80117fa:	6914      	ldr	r4, [r2, #16]
 80117fc:	3101      	adds	r1, #1
 80117fe:	f102 0314 	add.w	r3, r2, #20
 8011802:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011806:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801180a:	1f05      	subs	r5, r0, #4
 801180c:	42a3      	cmp	r3, r4
 801180e:	d30c      	bcc.n	801182a <__copybits+0x36>
 8011810:	1aa3      	subs	r3, r4, r2
 8011812:	3b11      	subs	r3, #17
 8011814:	f023 0303 	bic.w	r3, r3, #3
 8011818:	3211      	adds	r2, #17
 801181a:	42a2      	cmp	r2, r4
 801181c:	bf88      	it	hi
 801181e:	2300      	movhi	r3, #0
 8011820:	4418      	add	r0, r3
 8011822:	2300      	movs	r3, #0
 8011824:	4288      	cmp	r0, r1
 8011826:	d305      	bcc.n	8011834 <__copybits+0x40>
 8011828:	bd70      	pop	{r4, r5, r6, pc}
 801182a:	f853 6b04 	ldr.w	r6, [r3], #4
 801182e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011832:	e7eb      	b.n	801180c <__copybits+0x18>
 8011834:	f840 3b04 	str.w	r3, [r0], #4
 8011838:	e7f4      	b.n	8011824 <__copybits+0x30>

0801183a <__any_on>:
 801183a:	f100 0214 	add.w	r2, r0, #20
 801183e:	6900      	ldr	r0, [r0, #16]
 8011840:	114b      	asrs	r3, r1, #5
 8011842:	4298      	cmp	r0, r3
 8011844:	b510      	push	{r4, lr}
 8011846:	db11      	blt.n	801186c <__any_on+0x32>
 8011848:	dd0a      	ble.n	8011860 <__any_on+0x26>
 801184a:	f011 011f 	ands.w	r1, r1, #31
 801184e:	d007      	beq.n	8011860 <__any_on+0x26>
 8011850:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011854:	fa24 f001 	lsr.w	r0, r4, r1
 8011858:	fa00 f101 	lsl.w	r1, r0, r1
 801185c:	428c      	cmp	r4, r1
 801185e:	d10b      	bne.n	8011878 <__any_on+0x3e>
 8011860:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011864:	4293      	cmp	r3, r2
 8011866:	d803      	bhi.n	8011870 <__any_on+0x36>
 8011868:	2000      	movs	r0, #0
 801186a:	bd10      	pop	{r4, pc}
 801186c:	4603      	mov	r3, r0
 801186e:	e7f7      	b.n	8011860 <__any_on+0x26>
 8011870:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011874:	2900      	cmp	r1, #0
 8011876:	d0f5      	beq.n	8011864 <__any_on+0x2a>
 8011878:	2001      	movs	r0, #1
 801187a:	e7f6      	b.n	801186a <__any_on+0x30>

0801187c <sulp>:
 801187c:	b570      	push	{r4, r5, r6, lr}
 801187e:	4604      	mov	r4, r0
 8011880:	460d      	mov	r5, r1
 8011882:	ec45 4b10 	vmov	d0, r4, r5
 8011886:	4616      	mov	r6, r2
 8011888:	f7ff feba 	bl	8011600 <__ulp>
 801188c:	ec51 0b10 	vmov	r0, r1, d0
 8011890:	b17e      	cbz	r6, 80118b2 <sulp+0x36>
 8011892:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011896:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801189a:	2b00      	cmp	r3, #0
 801189c:	dd09      	ble.n	80118b2 <sulp+0x36>
 801189e:	051b      	lsls	r3, r3, #20
 80118a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80118a4:	2400      	movs	r4, #0
 80118a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80118aa:	4622      	mov	r2, r4
 80118ac:	462b      	mov	r3, r5
 80118ae:	f7ee feb3 	bl	8000618 <__aeabi_dmul>
 80118b2:	ec41 0b10 	vmov	d0, r0, r1
 80118b6:	bd70      	pop	{r4, r5, r6, pc}

080118b8 <_strtod_l>:
 80118b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118bc:	b09f      	sub	sp, #124	@ 0x7c
 80118be:	460c      	mov	r4, r1
 80118c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80118c2:	2200      	movs	r2, #0
 80118c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80118c6:	9005      	str	r0, [sp, #20]
 80118c8:	f04f 0a00 	mov.w	sl, #0
 80118cc:	f04f 0b00 	mov.w	fp, #0
 80118d0:	460a      	mov	r2, r1
 80118d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80118d4:	7811      	ldrb	r1, [r2, #0]
 80118d6:	292b      	cmp	r1, #43	@ 0x2b
 80118d8:	d04a      	beq.n	8011970 <_strtod_l+0xb8>
 80118da:	d838      	bhi.n	801194e <_strtod_l+0x96>
 80118dc:	290d      	cmp	r1, #13
 80118de:	d832      	bhi.n	8011946 <_strtod_l+0x8e>
 80118e0:	2908      	cmp	r1, #8
 80118e2:	d832      	bhi.n	801194a <_strtod_l+0x92>
 80118e4:	2900      	cmp	r1, #0
 80118e6:	d03b      	beq.n	8011960 <_strtod_l+0xa8>
 80118e8:	2200      	movs	r2, #0
 80118ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80118ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80118ee:	782a      	ldrb	r2, [r5, #0]
 80118f0:	2a30      	cmp	r2, #48	@ 0x30
 80118f2:	f040 80b3 	bne.w	8011a5c <_strtod_l+0x1a4>
 80118f6:	786a      	ldrb	r2, [r5, #1]
 80118f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80118fc:	2a58      	cmp	r2, #88	@ 0x58
 80118fe:	d16e      	bne.n	80119de <_strtod_l+0x126>
 8011900:	9302      	str	r3, [sp, #8]
 8011902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	ab1a      	add	r3, sp, #104	@ 0x68
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	4a8e      	ldr	r2, [pc, #568]	@ (8011b44 <_strtod_l+0x28c>)
 801190c:	9805      	ldr	r0, [sp, #20]
 801190e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011910:	a919      	add	r1, sp, #100	@ 0x64
 8011912:	f001 f89f 	bl	8012a54 <__gethex>
 8011916:	f010 060f 	ands.w	r6, r0, #15
 801191a:	4604      	mov	r4, r0
 801191c:	d005      	beq.n	801192a <_strtod_l+0x72>
 801191e:	2e06      	cmp	r6, #6
 8011920:	d128      	bne.n	8011974 <_strtod_l+0xbc>
 8011922:	3501      	adds	r5, #1
 8011924:	2300      	movs	r3, #0
 8011926:	9519      	str	r5, [sp, #100]	@ 0x64
 8011928:	930b      	str	r3, [sp, #44]	@ 0x2c
 801192a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801192c:	2b00      	cmp	r3, #0
 801192e:	f040 858e 	bne.w	801244e <_strtod_l+0xb96>
 8011932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011934:	b1cb      	cbz	r3, 801196a <_strtod_l+0xb2>
 8011936:	4652      	mov	r2, sl
 8011938:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801193c:	ec43 2b10 	vmov	d0, r2, r3
 8011940:	b01f      	add	sp, #124	@ 0x7c
 8011942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011946:	2920      	cmp	r1, #32
 8011948:	d1ce      	bne.n	80118e8 <_strtod_l+0x30>
 801194a:	3201      	adds	r2, #1
 801194c:	e7c1      	b.n	80118d2 <_strtod_l+0x1a>
 801194e:	292d      	cmp	r1, #45	@ 0x2d
 8011950:	d1ca      	bne.n	80118e8 <_strtod_l+0x30>
 8011952:	2101      	movs	r1, #1
 8011954:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011956:	1c51      	adds	r1, r2, #1
 8011958:	9119      	str	r1, [sp, #100]	@ 0x64
 801195a:	7852      	ldrb	r2, [r2, #1]
 801195c:	2a00      	cmp	r2, #0
 801195e:	d1c5      	bne.n	80118ec <_strtod_l+0x34>
 8011960:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011962:	9419      	str	r4, [sp, #100]	@ 0x64
 8011964:	2b00      	cmp	r3, #0
 8011966:	f040 8570 	bne.w	801244a <_strtod_l+0xb92>
 801196a:	4652      	mov	r2, sl
 801196c:	465b      	mov	r3, fp
 801196e:	e7e5      	b.n	801193c <_strtod_l+0x84>
 8011970:	2100      	movs	r1, #0
 8011972:	e7ef      	b.n	8011954 <_strtod_l+0x9c>
 8011974:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011976:	b13a      	cbz	r2, 8011988 <_strtod_l+0xd0>
 8011978:	2135      	movs	r1, #53	@ 0x35
 801197a:	a81c      	add	r0, sp, #112	@ 0x70
 801197c:	f7ff ff3a 	bl	80117f4 <__copybits>
 8011980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011982:	9805      	ldr	r0, [sp, #20]
 8011984:	f7ff fb08 	bl	8010f98 <_Bfree>
 8011988:	3e01      	subs	r6, #1
 801198a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801198c:	2e04      	cmp	r6, #4
 801198e:	d806      	bhi.n	801199e <_strtod_l+0xe6>
 8011990:	e8df f006 	tbb	[pc, r6]
 8011994:	201d0314 	.word	0x201d0314
 8011998:	14          	.byte	0x14
 8011999:	00          	.byte	0x00
 801199a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801199e:	05e1      	lsls	r1, r4, #23
 80119a0:	bf48      	it	mi
 80119a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80119a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80119aa:	0d1b      	lsrs	r3, r3, #20
 80119ac:	051b      	lsls	r3, r3, #20
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d1bb      	bne.n	801192a <_strtod_l+0x72>
 80119b2:	f7fe fb21 	bl	800fff8 <__errno>
 80119b6:	2322      	movs	r3, #34	@ 0x22
 80119b8:	6003      	str	r3, [r0, #0]
 80119ba:	e7b6      	b.n	801192a <_strtod_l+0x72>
 80119bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80119c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80119c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80119c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80119cc:	e7e7      	b.n	801199e <_strtod_l+0xe6>
 80119ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011b4c <_strtod_l+0x294>
 80119d2:	e7e4      	b.n	801199e <_strtod_l+0xe6>
 80119d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80119d8:	f04f 3aff 	mov.w	sl, #4294967295
 80119dc:	e7df      	b.n	801199e <_strtod_l+0xe6>
 80119de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119e0:	1c5a      	adds	r2, r3, #1
 80119e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80119e4:	785b      	ldrb	r3, [r3, #1]
 80119e6:	2b30      	cmp	r3, #48	@ 0x30
 80119e8:	d0f9      	beq.n	80119de <_strtod_l+0x126>
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d09d      	beq.n	801192a <_strtod_l+0x72>
 80119ee:	2301      	movs	r3, #1
 80119f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80119f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80119f6:	2300      	movs	r3, #0
 80119f8:	9308      	str	r3, [sp, #32]
 80119fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80119fc:	461f      	mov	r7, r3
 80119fe:	220a      	movs	r2, #10
 8011a00:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011a02:	7805      	ldrb	r5, [r0, #0]
 8011a04:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011a08:	b2d9      	uxtb	r1, r3
 8011a0a:	2909      	cmp	r1, #9
 8011a0c:	d928      	bls.n	8011a60 <_strtod_l+0x1a8>
 8011a0e:	494e      	ldr	r1, [pc, #312]	@ (8011b48 <_strtod_l+0x290>)
 8011a10:	2201      	movs	r2, #1
 8011a12:	f000 ff59 	bl	80128c8 <strncmp>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d032      	beq.n	8011a80 <_strtod_l+0x1c8>
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	462a      	mov	r2, r5
 8011a1e:	4681      	mov	r9, r0
 8011a20:	463d      	mov	r5, r7
 8011a22:	4603      	mov	r3, r0
 8011a24:	2a65      	cmp	r2, #101	@ 0x65
 8011a26:	d001      	beq.n	8011a2c <_strtod_l+0x174>
 8011a28:	2a45      	cmp	r2, #69	@ 0x45
 8011a2a:	d114      	bne.n	8011a56 <_strtod_l+0x19e>
 8011a2c:	b91d      	cbnz	r5, 8011a36 <_strtod_l+0x17e>
 8011a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a30:	4302      	orrs	r2, r0
 8011a32:	d095      	beq.n	8011960 <_strtod_l+0xa8>
 8011a34:	2500      	movs	r5, #0
 8011a36:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011a38:	1c62      	adds	r2, r4, #1
 8011a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a3c:	7862      	ldrb	r2, [r4, #1]
 8011a3e:	2a2b      	cmp	r2, #43	@ 0x2b
 8011a40:	d077      	beq.n	8011b32 <_strtod_l+0x27a>
 8011a42:	2a2d      	cmp	r2, #45	@ 0x2d
 8011a44:	d07b      	beq.n	8011b3e <_strtod_l+0x286>
 8011a46:	f04f 0c00 	mov.w	ip, #0
 8011a4a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011a4e:	2909      	cmp	r1, #9
 8011a50:	f240 8082 	bls.w	8011b58 <_strtod_l+0x2a0>
 8011a54:	9419      	str	r4, [sp, #100]	@ 0x64
 8011a56:	f04f 0800 	mov.w	r8, #0
 8011a5a:	e0a2      	b.n	8011ba2 <_strtod_l+0x2ea>
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	e7c7      	b.n	80119f0 <_strtod_l+0x138>
 8011a60:	2f08      	cmp	r7, #8
 8011a62:	bfd5      	itete	le
 8011a64:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011a66:	9908      	ldrgt	r1, [sp, #32]
 8011a68:	fb02 3301 	mlale	r3, r2, r1, r3
 8011a6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011a70:	f100 0001 	add.w	r0, r0, #1
 8011a74:	bfd4      	ite	le
 8011a76:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011a78:	9308      	strgt	r3, [sp, #32]
 8011a7a:	3701      	adds	r7, #1
 8011a7c:	9019      	str	r0, [sp, #100]	@ 0x64
 8011a7e:	e7bf      	b.n	8011a00 <_strtod_l+0x148>
 8011a80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a82:	1c5a      	adds	r2, r3, #1
 8011a84:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a86:	785a      	ldrb	r2, [r3, #1]
 8011a88:	b37f      	cbz	r7, 8011aea <_strtod_l+0x232>
 8011a8a:	4681      	mov	r9, r0
 8011a8c:	463d      	mov	r5, r7
 8011a8e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011a92:	2b09      	cmp	r3, #9
 8011a94:	d912      	bls.n	8011abc <_strtod_l+0x204>
 8011a96:	2301      	movs	r3, #1
 8011a98:	e7c4      	b.n	8011a24 <_strtod_l+0x16c>
 8011a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a9c:	1c5a      	adds	r2, r3, #1
 8011a9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011aa0:	785a      	ldrb	r2, [r3, #1]
 8011aa2:	3001      	adds	r0, #1
 8011aa4:	2a30      	cmp	r2, #48	@ 0x30
 8011aa6:	d0f8      	beq.n	8011a9a <_strtod_l+0x1e2>
 8011aa8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011aac:	2b08      	cmp	r3, #8
 8011aae:	f200 84d3 	bhi.w	8012458 <_strtod_l+0xba0>
 8011ab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8011ab6:	4681      	mov	r9, r0
 8011ab8:	2000      	movs	r0, #0
 8011aba:	4605      	mov	r5, r0
 8011abc:	3a30      	subs	r2, #48	@ 0x30
 8011abe:	f100 0301 	add.w	r3, r0, #1
 8011ac2:	d02a      	beq.n	8011b1a <_strtod_l+0x262>
 8011ac4:	4499      	add	r9, r3
 8011ac6:	eb00 0c05 	add.w	ip, r0, r5
 8011aca:	462b      	mov	r3, r5
 8011acc:	210a      	movs	r1, #10
 8011ace:	4563      	cmp	r3, ip
 8011ad0:	d10d      	bne.n	8011aee <_strtod_l+0x236>
 8011ad2:	1c69      	adds	r1, r5, #1
 8011ad4:	4401      	add	r1, r0
 8011ad6:	4428      	add	r0, r5
 8011ad8:	2808      	cmp	r0, #8
 8011ada:	dc16      	bgt.n	8011b0a <_strtod_l+0x252>
 8011adc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011ade:	230a      	movs	r3, #10
 8011ae0:	fb03 2300 	mla	r3, r3, r0, r2
 8011ae4:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	e018      	b.n	8011b1c <_strtod_l+0x264>
 8011aea:	4638      	mov	r0, r7
 8011aec:	e7da      	b.n	8011aa4 <_strtod_l+0x1ec>
 8011aee:	2b08      	cmp	r3, #8
 8011af0:	f103 0301 	add.w	r3, r3, #1
 8011af4:	dc03      	bgt.n	8011afe <_strtod_l+0x246>
 8011af6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011af8:	434e      	muls	r6, r1
 8011afa:	960a      	str	r6, [sp, #40]	@ 0x28
 8011afc:	e7e7      	b.n	8011ace <_strtod_l+0x216>
 8011afe:	2b10      	cmp	r3, #16
 8011b00:	bfde      	ittt	le
 8011b02:	9e08      	ldrle	r6, [sp, #32]
 8011b04:	434e      	mulle	r6, r1
 8011b06:	9608      	strle	r6, [sp, #32]
 8011b08:	e7e1      	b.n	8011ace <_strtod_l+0x216>
 8011b0a:	280f      	cmp	r0, #15
 8011b0c:	dceb      	bgt.n	8011ae6 <_strtod_l+0x22e>
 8011b0e:	9808      	ldr	r0, [sp, #32]
 8011b10:	230a      	movs	r3, #10
 8011b12:	fb03 2300 	mla	r3, r3, r0, r2
 8011b16:	9308      	str	r3, [sp, #32]
 8011b18:	e7e5      	b.n	8011ae6 <_strtod_l+0x22e>
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b1e:	1c50      	adds	r0, r2, #1
 8011b20:	9019      	str	r0, [sp, #100]	@ 0x64
 8011b22:	7852      	ldrb	r2, [r2, #1]
 8011b24:	4618      	mov	r0, r3
 8011b26:	460d      	mov	r5, r1
 8011b28:	e7b1      	b.n	8011a8e <_strtod_l+0x1d6>
 8011b2a:	f04f 0900 	mov.w	r9, #0
 8011b2e:	2301      	movs	r3, #1
 8011b30:	e77d      	b.n	8011a2e <_strtod_l+0x176>
 8011b32:	f04f 0c00 	mov.w	ip, #0
 8011b36:	1ca2      	adds	r2, r4, #2
 8011b38:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b3a:	78a2      	ldrb	r2, [r4, #2]
 8011b3c:	e785      	b.n	8011a4a <_strtod_l+0x192>
 8011b3e:	f04f 0c01 	mov.w	ip, #1
 8011b42:	e7f8      	b.n	8011b36 <_strtod_l+0x27e>
 8011b44:	08016770 	.word	0x08016770
 8011b48:	08016758 	.word	0x08016758
 8011b4c:	7ff00000 	.word	0x7ff00000
 8011b50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b52:	1c51      	adds	r1, r2, #1
 8011b54:	9119      	str	r1, [sp, #100]	@ 0x64
 8011b56:	7852      	ldrb	r2, [r2, #1]
 8011b58:	2a30      	cmp	r2, #48	@ 0x30
 8011b5a:	d0f9      	beq.n	8011b50 <_strtod_l+0x298>
 8011b5c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011b60:	2908      	cmp	r1, #8
 8011b62:	f63f af78 	bhi.w	8011a56 <_strtod_l+0x19e>
 8011b66:	3a30      	subs	r2, #48	@ 0x30
 8011b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8011b6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b6c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011b6e:	f04f 080a 	mov.w	r8, #10
 8011b72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b74:	1c56      	adds	r6, r2, #1
 8011b76:	9619      	str	r6, [sp, #100]	@ 0x64
 8011b78:	7852      	ldrb	r2, [r2, #1]
 8011b7a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011b7e:	f1be 0f09 	cmp.w	lr, #9
 8011b82:	d939      	bls.n	8011bf8 <_strtod_l+0x340>
 8011b84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011b86:	1a76      	subs	r6, r6, r1
 8011b88:	2e08      	cmp	r6, #8
 8011b8a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011b8e:	dc03      	bgt.n	8011b98 <_strtod_l+0x2e0>
 8011b90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011b92:	4588      	cmp	r8, r1
 8011b94:	bfa8      	it	ge
 8011b96:	4688      	movge	r8, r1
 8011b98:	f1bc 0f00 	cmp.w	ip, #0
 8011b9c:	d001      	beq.n	8011ba2 <_strtod_l+0x2ea>
 8011b9e:	f1c8 0800 	rsb	r8, r8, #0
 8011ba2:	2d00      	cmp	r5, #0
 8011ba4:	d14e      	bne.n	8011c44 <_strtod_l+0x38c>
 8011ba6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011ba8:	4308      	orrs	r0, r1
 8011baa:	f47f aebe 	bne.w	801192a <_strtod_l+0x72>
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	f47f aed6 	bne.w	8011960 <_strtod_l+0xa8>
 8011bb4:	2a69      	cmp	r2, #105	@ 0x69
 8011bb6:	d028      	beq.n	8011c0a <_strtod_l+0x352>
 8011bb8:	dc25      	bgt.n	8011c06 <_strtod_l+0x34e>
 8011bba:	2a49      	cmp	r2, #73	@ 0x49
 8011bbc:	d025      	beq.n	8011c0a <_strtod_l+0x352>
 8011bbe:	2a4e      	cmp	r2, #78	@ 0x4e
 8011bc0:	f47f aece 	bne.w	8011960 <_strtod_l+0xa8>
 8011bc4:	499b      	ldr	r1, [pc, #620]	@ (8011e34 <_strtod_l+0x57c>)
 8011bc6:	a819      	add	r0, sp, #100	@ 0x64
 8011bc8:	f001 f966 	bl	8012e98 <__match>
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	f43f aec7 	beq.w	8011960 <_strtod_l+0xa8>
 8011bd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	2b28      	cmp	r3, #40	@ 0x28
 8011bd8:	d12e      	bne.n	8011c38 <_strtod_l+0x380>
 8011bda:	4997      	ldr	r1, [pc, #604]	@ (8011e38 <_strtod_l+0x580>)
 8011bdc:	aa1c      	add	r2, sp, #112	@ 0x70
 8011bde:	a819      	add	r0, sp, #100	@ 0x64
 8011be0:	f001 f96e 	bl	8012ec0 <__hexnan>
 8011be4:	2805      	cmp	r0, #5
 8011be6:	d127      	bne.n	8011c38 <_strtod_l+0x380>
 8011be8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011bea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011bee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011bf2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011bf6:	e698      	b.n	801192a <_strtod_l+0x72>
 8011bf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011bfa:	fb08 2101 	mla	r1, r8, r1, r2
 8011bfe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011c02:	920e      	str	r2, [sp, #56]	@ 0x38
 8011c04:	e7b5      	b.n	8011b72 <_strtod_l+0x2ba>
 8011c06:	2a6e      	cmp	r2, #110	@ 0x6e
 8011c08:	e7da      	b.n	8011bc0 <_strtod_l+0x308>
 8011c0a:	498c      	ldr	r1, [pc, #560]	@ (8011e3c <_strtod_l+0x584>)
 8011c0c:	a819      	add	r0, sp, #100	@ 0x64
 8011c0e:	f001 f943 	bl	8012e98 <__match>
 8011c12:	2800      	cmp	r0, #0
 8011c14:	f43f aea4 	beq.w	8011960 <_strtod_l+0xa8>
 8011c18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c1a:	4989      	ldr	r1, [pc, #548]	@ (8011e40 <_strtod_l+0x588>)
 8011c1c:	3b01      	subs	r3, #1
 8011c1e:	a819      	add	r0, sp, #100	@ 0x64
 8011c20:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c22:	f001 f939 	bl	8012e98 <__match>
 8011c26:	b910      	cbnz	r0, 8011c2e <_strtod_l+0x376>
 8011c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c2a:	3301      	adds	r3, #1
 8011c2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c2e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011e50 <_strtod_l+0x598>
 8011c32:	f04f 0a00 	mov.w	sl, #0
 8011c36:	e678      	b.n	801192a <_strtod_l+0x72>
 8011c38:	4882      	ldr	r0, [pc, #520]	@ (8011e44 <_strtod_l+0x58c>)
 8011c3a:	f000 fe69 	bl	8012910 <nan>
 8011c3e:	ec5b ab10 	vmov	sl, fp, d0
 8011c42:	e672      	b.n	801192a <_strtod_l+0x72>
 8011c44:	eba8 0309 	sub.w	r3, r8, r9
 8011c48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c4c:	2f00      	cmp	r7, #0
 8011c4e:	bf08      	it	eq
 8011c50:	462f      	moveq	r7, r5
 8011c52:	2d10      	cmp	r5, #16
 8011c54:	462c      	mov	r4, r5
 8011c56:	bfa8      	it	ge
 8011c58:	2410      	movge	r4, #16
 8011c5a:	f7ee fc63 	bl	8000524 <__aeabi_ui2d>
 8011c5e:	2d09      	cmp	r5, #9
 8011c60:	4682      	mov	sl, r0
 8011c62:	468b      	mov	fp, r1
 8011c64:	dc13      	bgt.n	8011c8e <_strtod_l+0x3d6>
 8011c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	f43f ae5e 	beq.w	801192a <_strtod_l+0x72>
 8011c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c70:	dd78      	ble.n	8011d64 <_strtod_l+0x4ac>
 8011c72:	2b16      	cmp	r3, #22
 8011c74:	dc5f      	bgt.n	8011d36 <_strtod_l+0x47e>
 8011c76:	4974      	ldr	r1, [pc, #464]	@ (8011e48 <_strtod_l+0x590>)
 8011c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c80:	4652      	mov	r2, sl
 8011c82:	465b      	mov	r3, fp
 8011c84:	f7ee fcc8 	bl	8000618 <__aeabi_dmul>
 8011c88:	4682      	mov	sl, r0
 8011c8a:	468b      	mov	fp, r1
 8011c8c:	e64d      	b.n	801192a <_strtod_l+0x72>
 8011c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8011e48 <_strtod_l+0x590>)
 8011c90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011c94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011c98:	f7ee fcbe 	bl	8000618 <__aeabi_dmul>
 8011c9c:	4682      	mov	sl, r0
 8011c9e:	9808      	ldr	r0, [sp, #32]
 8011ca0:	468b      	mov	fp, r1
 8011ca2:	f7ee fc3f 	bl	8000524 <__aeabi_ui2d>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	460b      	mov	r3, r1
 8011caa:	4650      	mov	r0, sl
 8011cac:	4659      	mov	r1, fp
 8011cae:	f7ee fafd 	bl	80002ac <__adddf3>
 8011cb2:	2d0f      	cmp	r5, #15
 8011cb4:	4682      	mov	sl, r0
 8011cb6:	468b      	mov	fp, r1
 8011cb8:	ddd5      	ble.n	8011c66 <_strtod_l+0x3ae>
 8011cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cbc:	1b2c      	subs	r4, r5, r4
 8011cbe:	441c      	add	r4, r3
 8011cc0:	2c00      	cmp	r4, #0
 8011cc2:	f340 8096 	ble.w	8011df2 <_strtod_l+0x53a>
 8011cc6:	f014 030f 	ands.w	r3, r4, #15
 8011cca:	d00a      	beq.n	8011ce2 <_strtod_l+0x42a>
 8011ccc:	495e      	ldr	r1, [pc, #376]	@ (8011e48 <_strtod_l+0x590>)
 8011cce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011cd2:	4652      	mov	r2, sl
 8011cd4:	465b      	mov	r3, fp
 8011cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cda:	f7ee fc9d 	bl	8000618 <__aeabi_dmul>
 8011cde:	4682      	mov	sl, r0
 8011ce0:	468b      	mov	fp, r1
 8011ce2:	f034 040f 	bics.w	r4, r4, #15
 8011ce6:	d073      	beq.n	8011dd0 <_strtod_l+0x518>
 8011ce8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011cec:	dd48      	ble.n	8011d80 <_strtod_l+0x4c8>
 8011cee:	2400      	movs	r4, #0
 8011cf0:	46a0      	mov	r8, r4
 8011cf2:	940a      	str	r4, [sp, #40]	@ 0x28
 8011cf4:	46a1      	mov	r9, r4
 8011cf6:	9a05      	ldr	r2, [sp, #20]
 8011cf8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011e50 <_strtod_l+0x598>
 8011cfc:	2322      	movs	r3, #34	@ 0x22
 8011cfe:	6013      	str	r3, [r2, #0]
 8011d00:	f04f 0a00 	mov.w	sl, #0
 8011d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	f43f ae0f 	beq.w	801192a <_strtod_l+0x72>
 8011d0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d0e:	9805      	ldr	r0, [sp, #20]
 8011d10:	f7ff f942 	bl	8010f98 <_Bfree>
 8011d14:	9805      	ldr	r0, [sp, #20]
 8011d16:	4649      	mov	r1, r9
 8011d18:	f7ff f93e 	bl	8010f98 <_Bfree>
 8011d1c:	9805      	ldr	r0, [sp, #20]
 8011d1e:	4641      	mov	r1, r8
 8011d20:	f7ff f93a 	bl	8010f98 <_Bfree>
 8011d24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011d26:	9805      	ldr	r0, [sp, #20]
 8011d28:	f7ff f936 	bl	8010f98 <_Bfree>
 8011d2c:	9805      	ldr	r0, [sp, #20]
 8011d2e:	4621      	mov	r1, r4
 8011d30:	f7ff f932 	bl	8010f98 <_Bfree>
 8011d34:	e5f9      	b.n	801192a <_strtod_l+0x72>
 8011d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011d3c:	4293      	cmp	r3, r2
 8011d3e:	dbbc      	blt.n	8011cba <_strtod_l+0x402>
 8011d40:	4c41      	ldr	r4, [pc, #260]	@ (8011e48 <_strtod_l+0x590>)
 8011d42:	f1c5 050f 	rsb	r5, r5, #15
 8011d46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011d4a:	4652      	mov	r2, sl
 8011d4c:	465b      	mov	r3, fp
 8011d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d52:	f7ee fc61 	bl	8000618 <__aeabi_dmul>
 8011d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d58:	1b5d      	subs	r5, r3, r5
 8011d5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011d5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011d62:	e78f      	b.n	8011c84 <_strtod_l+0x3cc>
 8011d64:	3316      	adds	r3, #22
 8011d66:	dba8      	blt.n	8011cba <_strtod_l+0x402>
 8011d68:	4b37      	ldr	r3, [pc, #220]	@ (8011e48 <_strtod_l+0x590>)
 8011d6a:	eba9 0808 	sub.w	r8, r9, r8
 8011d6e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011d72:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011d76:	4650      	mov	r0, sl
 8011d78:	4659      	mov	r1, fp
 8011d7a:	f7ee fd77 	bl	800086c <__aeabi_ddiv>
 8011d7e:	e783      	b.n	8011c88 <_strtod_l+0x3d0>
 8011d80:	4b32      	ldr	r3, [pc, #200]	@ (8011e4c <_strtod_l+0x594>)
 8011d82:	9308      	str	r3, [sp, #32]
 8011d84:	2300      	movs	r3, #0
 8011d86:	1124      	asrs	r4, r4, #4
 8011d88:	4650      	mov	r0, sl
 8011d8a:	4659      	mov	r1, fp
 8011d8c:	461e      	mov	r6, r3
 8011d8e:	2c01      	cmp	r4, #1
 8011d90:	dc21      	bgt.n	8011dd6 <_strtod_l+0x51e>
 8011d92:	b10b      	cbz	r3, 8011d98 <_strtod_l+0x4e0>
 8011d94:	4682      	mov	sl, r0
 8011d96:	468b      	mov	fp, r1
 8011d98:	492c      	ldr	r1, [pc, #176]	@ (8011e4c <_strtod_l+0x594>)
 8011d9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011d9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011da2:	4652      	mov	r2, sl
 8011da4:	465b      	mov	r3, fp
 8011da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011daa:	f7ee fc35 	bl	8000618 <__aeabi_dmul>
 8011dae:	4b28      	ldr	r3, [pc, #160]	@ (8011e50 <_strtod_l+0x598>)
 8011db0:	460a      	mov	r2, r1
 8011db2:	400b      	ands	r3, r1
 8011db4:	4927      	ldr	r1, [pc, #156]	@ (8011e54 <_strtod_l+0x59c>)
 8011db6:	428b      	cmp	r3, r1
 8011db8:	4682      	mov	sl, r0
 8011dba:	d898      	bhi.n	8011cee <_strtod_l+0x436>
 8011dbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011dc0:	428b      	cmp	r3, r1
 8011dc2:	bf86      	itte	hi
 8011dc4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011e58 <_strtod_l+0x5a0>
 8011dc8:	f04f 3aff 	movhi.w	sl, #4294967295
 8011dcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	9308      	str	r3, [sp, #32]
 8011dd4:	e07a      	b.n	8011ecc <_strtod_l+0x614>
 8011dd6:	07e2      	lsls	r2, r4, #31
 8011dd8:	d505      	bpl.n	8011de6 <_strtod_l+0x52e>
 8011dda:	9b08      	ldr	r3, [sp, #32]
 8011ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de0:	f7ee fc1a 	bl	8000618 <__aeabi_dmul>
 8011de4:	2301      	movs	r3, #1
 8011de6:	9a08      	ldr	r2, [sp, #32]
 8011de8:	3208      	adds	r2, #8
 8011dea:	3601      	adds	r6, #1
 8011dec:	1064      	asrs	r4, r4, #1
 8011dee:	9208      	str	r2, [sp, #32]
 8011df0:	e7cd      	b.n	8011d8e <_strtod_l+0x4d6>
 8011df2:	d0ed      	beq.n	8011dd0 <_strtod_l+0x518>
 8011df4:	4264      	negs	r4, r4
 8011df6:	f014 020f 	ands.w	r2, r4, #15
 8011dfa:	d00a      	beq.n	8011e12 <_strtod_l+0x55a>
 8011dfc:	4b12      	ldr	r3, [pc, #72]	@ (8011e48 <_strtod_l+0x590>)
 8011dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e02:	4650      	mov	r0, sl
 8011e04:	4659      	mov	r1, fp
 8011e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e0a:	f7ee fd2f 	bl	800086c <__aeabi_ddiv>
 8011e0e:	4682      	mov	sl, r0
 8011e10:	468b      	mov	fp, r1
 8011e12:	1124      	asrs	r4, r4, #4
 8011e14:	d0dc      	beq.n	8011dd0 <_strtod_l+0x518>
 8011e16:	2c1f      	cmp	r4, #31
 8011e18:	dd20      	ble.n	8011e5c <_strtod_l+0x5a4>
 8011e1a:	2400      	movs	r4, #0
 8011e1c:	46a0      	mov	r8, r4
 8011e1e:	940a      	str	r4, [sp, #40]	@ 0x28
 8011e20:	46a1      	mov	r9, r4
 8011e22:	9a05      	ldr	r2, [sp, #20]
 8011e24:	2322      	movs	r3, #34	@ 0x22
 8011e26:	f04f 0a00 	mov.w	sl, #0
 8011e2a:	f04f 0b00 	mov.w	fp, #0
 8011e2e:	6013      	str	r3, [r2, #0]
 8011e30:	e768      	b.n	8011d04 <_strtod_l+0x44c>
 8011e32:	bf00      	nop
 8011e34:	0801654a 	.word	0x0801654a
 8011e38:	0801675c 	.word	0x0801675c
 8011e3c:	08016542 	.word	0x08016542
 8011e40:	08016579 	.word	0x08016579
 8011e44:	08016804 	.word	0x08016804
 8011e48:	08016690 	.word	0x08016690
 8011e4c:	08016668 	.word	0x08016668
 8011e50:	7ff00000 	.word	0x7ff00000
 8011e54:	7ca00000 	.word	0x7ca00000
 8011e58:	7fefffff 	.word	0x7fefffff
 8011e5c:	f014 0310 	ands.w	r3, r4, #16
 8011e60:	bf18      	it	ne
 8011e62:	236a      	movne	r3, #106	@ 0x6a
 8011e64:	4ea9      	ldr	r6, [pc, #676]	@ (801210c <_strtod_l+0x854>)
 8011e66:	9308      	str	r3, [sp, #32]
 8011e68:	4650      	mov	r0, sl
 8011e6a:	4659      	mov	r1, fp
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	07e2      	lsls	r2, r4, #31
 8011e70:	d504      	bpl.n	8011e7c <_strtod_l+0x5c4>
 8011e72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e76:	f7ee fbcf 	bl	8000618 <__aeabi_dmul>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	1064      	asrs	r4, r4, #1
 8011e7e:	f106 0608 	add.w	r6, r6, #8
 8011e82:	d1f4      	bne.n	8011e6e <_strtod_l+0x5b6>
 8011e84:	b10b      	cbz	r3, 8011e8a <_strtod_l+0x5d2>
 8011e86:	4682      	mov	sl, r0
 8011e88:	468b      	mov	fp, r1
 8011e8a:	9b08      	ldr	r3, [sp, #32]
 8011e8c:	b1b3      	cbz	r3, 8011ebc <_strtod_l+0x604>
 8011e8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011e92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	4659      	mov	r1, fp
 8011e9a:	dd0f      	ble.n	8011ebc <_strtod_l+0x604>
 8011e9c:	2b1f      	cmp	r3, #31
 8011e9e:	dd55      	ble.n	8011f4c <_strtod_l+0x694>
 8011ea0:	2b34      	cmp	r3, #52	@ 0x34
 8011ea2:	bfde      	ittt	le
 8011ea4:	f04f 33ff 	movle.w	r3, #4294967295
 8011ea8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011eac:	4093      	lslle	r3, r2
 8011eae:	f04f 0a00 	mov.w	sl, #0
 8011eb2:	bfcc      	ite	gt
 8011eb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011eb8:	ea03 0b01 	andle.w	fp, r3, r1
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	4650      	mov	r0, sl
 8011ec2:	4659      	mov	r1, fp
 8011ec4:	f7ee fe10 	bl	8000ae8 <__aeabi_dcmpeq>
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d1a6      	bne.n	8011e1a <_strtod_l+0x562>
 8011ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ece:	9300      	str	r3, [sp, #0]
 8011ed0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011ed2:	9805      	ldr	r0, [sp, #20]
 8011ed4:	462b      	mov	r3, r5
 8011ed6:	463a      	mov	r2, r7
 8011ed8:	f7ff f8c6 	bl	8011068 <__s2b>
 8011edc:	900a      	str	r0, [sp, #40]	@ 0x28
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	f43f af05 	beq.w	8011cee <_strtod_l+0x436>
 8011ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ee6:	2a00      	cmp	r2, #0
 8011ee8:	eba9 0308 	sub.w	r3, r9, r8
 8011eec:	bfa8      	it	ge
 8011eee:	2300      	movge	r3, #0
 8011ef0:	9312      	str	r3, [sp, #72]	@ 0x48
 8011ef2:	2400      	movs	r4, #0
 8011ef4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011ef8:	9316      	str	r3, [sp, #88]	@ 0x58
 8011efa:	46a0      	mov	r8, r4
 8011efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011efe:	9805      	ldr	r0, [sp, #20]
 8011f00:	6859      	ldr	r1, [r3, #4]
 8011f02:	f7ff f809 	bl	8010f18 <_Balloc>
 8011f06:	4681      	mov	r9, r0
 8011f08:	2800      	cmp	r0, #0
 8011f0a:	f43f aef4 	beq.w	8011cf6 <_strtod_l+0x43e>
 8011f0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f10:	691a      	ldr	r2, [r3, #16]
 8011f12:	3202      	adds	r2, #2
 8011f14:	f103 010c 	add.w	r1, r3, #12
 8011f18:	0092      	lsls	r2, r2, #2
 8011f1a:	300c      	adds	r0, #12
 8011f1c:	f7fe f899 	bl	8010052 <memcpy>
 8011f20:	ec4b ab10 	vmov	d0, sl, fp
 8011f24:	9805      	ldr	r0, [sp, #20]
 8011f26:	aa1c      	add	r2, sp, #112	@ 0x70
 8011f28:	a91b      	add	r1, sp, #108	@ 0x6c
 8011f2a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011f2e:	f7ff fbd7 	bl	80116e0 <__d2b>
 8011f32:	901a      	str	r0, [sp, #104]	@ 0x68
 8011f34:	2800      	cmp	r0, #0
 8011f36:	f43f aede 	beq.w	8011cf6 <_strtod_l+0x43e>
 8011f3a:	9805      	ldr	r0, [sp, #20]
 8011f3c:	2101      	movs	r1, #1
 8011f3e:	f7ff f929 	bl	8011194 <__i2b>
 8011f42:	4680      	mov	r8, r0
 8011f44:	b948      	cbnz	r0, 8011f5a <_strtod_l+0x6a2>
 8011f46:	f04f 0800 	mov.w	r8, #0
 8011f4a:	e6d4      	b.n	8011cf6 <_strtod_l+0x43e>
 8011f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8011f50:	fa02 f303 	lsl.w	r3, r2, r3
 8011f54:	ea03 0a0a 	and.w	sl, r3, sl
 8011f58:	e7b0      	b.n	8011ebc <_strtod_l+0x604>
 8011f5a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011f5c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011f5e:	2d00      	cmp	r5, #0
 8011f60:	bfab      	itete	ge
 8011f62:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011f64:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011f66:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011f68:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011f6a:	bfac      	ite	ge
 8011f6c:	18ef      	addge	r7, r5, r3
 8011f6e:	1b5e      	sublt	r6, r3, r5
 8011f70:	9b08      	ldr	r3, [sp, #32]
 8011f72:	1aed      	subs	r5, r5, r3
 8011f74:	4415      	add	r5, r2
 8011f76:	4b66      	ldr	r3, [pc, #408]	@ (8012110 <_strtod_l+0x858>)
 8011f78:	3d01      	subs	r5, #1
 8011f7a:	429d      	cmp	r5, r3
 8011f7c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011f80:	da50      	bge.n	8012024 <_strtod_l+0x76c>
 8011f82:	1b5b      	subs	r3, r3, r5
 8011f84:	2b1f      	cmp	r3, #31
 8011f86:	eba2 0203 	sub.w	r2, r2, r3
 8011f8a:	f04f 0101 	mov.w	r1, #1
 8011f8e:	dc3d      	bgt.n	801200c <_strtod_l+0x754>
 8011f90:	fa01 f303 	lsl.w	r3, r1, r3
 8011f94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011f96:	2300      	movs	r3, #0
 8011f98:	9310      	str	r3, [sp, #64]	@ 0x40
 8011f9a:	18bd      	adds	r5, r7, r2
 8011f9c:	9b08      	ldr	r3, [sp, #32]
 8011f9e:	42af      	cmp	r7, r5
 8011fa0:	4416      	add	r6, r2
 8011fa2:	441e      	add	r6, r3
 8011fa4:	463b      	mov	r3, r7
 8011fa6:	bfa8      	it	ge
 8011fa8:	462b      	movge	r3, r5
 8011faa:	42b3      	cmp	r3, r6
 8011fac:	bfa8      	it	ge
 8011fae:	4633      	movge	r3, r6
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	bfc2      	ittt	gt
 8011fb4:	1aed      	subgt	r5, r5, r3
 8011fb6:	1af6      	subgt	r6, r6, r3
 8011fb8:	1aff      	subgt	r7, r7, r3
 8011fba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	dd16      	ble.n	8011fee <_strtod_l+0x736>
 8011fc0:	4641      	mov	r1, r8
 8011fc2:	9805      	ldr	r0, [sp, #20]
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	f7ff f9a5 	bl	8011314 <__pow5mult>
 8011fca:	4680      	mov	r8, r0
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d0ba      	beq.n	8011f46 <_strtod_l+0x68e>
 8011fd0:	4601      	mov	r1, r0
 8011fd2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011fd4:	9805      	ldr	r0, [sp, #20]
 8011fd6:	f7ff f8f3 	bl	80111c0 <__multiply>
 8011fda:	900e      	str	r0, [sp, #56]	@ 0x38
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	f43f ae8a 	beq.w	8011cf6 <_strtod_l+0x43e>
 8011fe2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011fe4:	9805      	ldr	r0, [sp, #20]
 8011fe6:	f7fe ffd7 	bl	8010f98 <_Bfree>
 8011fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011fec:	931a      	str	r3, [sp, #104]	@ 0x68
 8011fee:	2d00      	cmp	r5, #0
 8011ff0:	dc1d      	bgt.n	801202e <_strtod_l+0x776>
 8011ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	dd23      	ble.n	8012040 <_strtod_l+0x788>
 8011ff8:	4649      	mov	r1, r9
 8011ffa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011ffc:	9805      	ldr	r0, [sp, #20]
 8011ffe:	f7ff f989 	bl	8011314 <__pow5mult>
 8012002:	4681      	mov	r9, r0
 8012004:	b9e0      	cbnz	r0, 8012040 <_strtod_l+0x788>
 8012006:	f04f 0900 	mov.w	r9, #0
 801200a:	e674      	b.n	8011cf6 <_strtod_l+0x43e>
 801200c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012010:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012014:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012018:	35e2      	adds	r5, #226	@ 0xe2
 801201a:	fa01 f305 	lsl.w	r3, r1, r5
 801201e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012020:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012022:	e7ba      	b.n	8011f9a <_strtod_l+0x6e2>
 8012024:	2300      	movs	r3, #0
 8012026:	9310      	str	r3, [sp, #64]	@ 0x40
 8012028:	2301      	movs	r3, #1
 801202a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801202c:	e7b5      	b.n	8011f9a <_strtod_l+0x6e2>
 801202e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012030:	9805      	ldr	r0, [sp, #20]
 8012032:	462a      	mov	r2, r5
 8012034:	f7ff f9c8 	bl	80113c8 <__lshift>
 8012038:	901a      	str	r0, [sp, #104]	@ 0x68
 801203a:	2800      	cmp	r0, #0
 801203c:	d1d9      	bne.n	8011ff2 <_strtod_l+0x73a>
 801203e:	e65a      	b.n	8011cf6 <_strtod_l+0x43e>
 8012040:	2e00      	cmp	r6, #0
 8012042:	dd07      	ble.n	8012054 <_strtod_l+0x79c>
 8012044:	4649      	mov	r1, r9
 8012046:	9805      	ldr	r0, [sp, #20]
 8012048:	4632      	mov	r2, r6
 801204a:	f7ff f9bd 	bl	80113c8 <__lshift>
 801204e:	4681      	mov	r9, r0
 8012050:	2800      	cmp	r0, #0
 8012052:	d0d8      	beq.n	8012006 <_strtod_l+0x74e>
 8012054:	2f00      	cmp	r7, #0
 8012056:	dd08      	ble.n	801206a <_strtod_l+0x7b2>
 8012058:	4641      	mov	r1, r8
 801205a:	9805      	ldr	r0, [sp, #20]
 801205c:	463a      	mov	r2, r7
 801205e:	f7ff f9b3 	bl	80113c8 <__lshift>
 8012062:	4680      	mov	r8, r0
 8012064:	2800      	cmp	r0, #0
 8012066:	f43f ae46 	beq.w	8011cf6 <_strtod_l+0x43e>
 801206a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801206c:	9805      	ldr	r0, [sp, #20]
 801206e:	464a      	mov	r2, r9
 8012070:	f7ff fa32 	bl	80114d8 <__mdiff>
 8012074:	4604      	mov	r4, r0
 8012076:	2800      	cmp	r0, #0
 8012078:	f43f ae3d 	beq.w	8011cf6 <_strtod_l+0x43e>
 801207c:	68c3      	ldr	r3, [r0, #12]
 801207e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012080:	2300      	movs	r3, #0
 8012082:	60c3      	str	r3, [r0, #12]
 8012084:	4641      	mov	r1, r8
 8012086:	f7ff fa0b 	bl	80114a0 <__mcmp>
 801208a:	2800      	cmp	r0, #0
 801208c:	da46      	bge.n	801211c <_strtod_l+0x864>
 801208e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012090:	ea53 030a 	orrs.w	r3, r3, sl
 8012094:	d16c      	bne.n	8012170 <_strtod_l+0x8b8>
 8012096:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801209a:	2b00      	cmp	r3, #0
 801209c:	d168      	bne.n	8012170 <_strtod_l+0x8b8>
 801209e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80120a2:	0d1b      	lsrs	r3, r3, #20
 80120a4:	051b      	lsls	r3, r3, #20
 80120a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80120aa:	d961      	bls.n	8012170 <_strtod_l+0x8b8>
 80120ac:	6963      	ldr	r3, [r4, #20]
 80120ae:	b913      	cbnz	r3, 80120b6 <_strtod_l+0x7fe>
 80120b0:	6923      	ldr	r3, [r4, #16]
 80120b2:	2b01      	cmp	r3, #1
 80120b4:	dd5c      	ble.n	8012170 <_strtod_l+0x8b8>
 80120b6:	4621      	mov	r1, r4
 80120b8:	2201      	movs	r2, #1
 80120ba:	9805      	ldr	r0, [sp, #20]
 80120bc:	f7ff f984 	bl	80113c8 <__lshift>
 80120c0:	4641      	mov	r1, r8
 80120c2:	4604      	mov	r4, r0
 80120c4:	f7ff f9ec 	bl	80114a0 <__mcmp>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	dd51      	ble.n	8012170 <_strtod_l+0x8b8>
 80120cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80120d0:	9a08      	ldr	r2, [sp, #32]
 80120d2:	0d1b      	lsrs	r3, r3, #20
 80120d4:	051b      	lsls	r3, r3, #20
 80120d6:	2a00      	cmp	r2, #0
 80120d8:	d06b      	beq.n	80121b2 <_strtod_l+0x8fa>
 80120da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80120de:	d868      	bhi.n	80121b2 <_strtod_l+0x8fa>
 80120e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80120e4:	f67f ae9d 	bls.w	8011e22 <_strtod_l+0x56a>
 80120e8:	4b0a      	ldr	r3, [pc, #40]	@ (8012114 <_strtod_l+0x85c>)
 80120ea:	4650      	mov	r0, sl
 80120ec:	4659      	mov	r1, fp
 80120ee:	2200      	movs	r2, #0
 80120f0:	f7ee fa92 	bl	8000618 <__aeabi_dmul>
 80120f4:	4b08      	ldr	r3, [pc, #32]	@ (8012118 <_strtod_l+0x860>)
 80120f6:	400b      	ands	r3, r1
 80120f8:	4682      	mov	sl, r0
 80120fa:	468b      	mov	fp, r1
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f47f ae05 	bne.w	8011d0c <_strtod_l+0x454>
 8012102:	9a05      	ldr	r2, [sp, #20]
 8012104:	2322      	movs	r3, #34	@ 0x22
 8012106:	6013      	str	r3, [r2, #0]
 8012108:	e600      	b.n	8011d0c <_strtod_l+0x454>
 801210a:	bf00      	nop
 801210c:	08016788 	.word	0x08016788
 8012110:	fffffc02 	.word	0xfffffc02
 8012114:	39500000 	.word	0x39500000
 8012118:	7ff00000 	.word	0x7ff00000
 801211c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012120:	d165      	bne.n	80121ee <_strtod_l+0x936>
 8012122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012128:	b35a      	cbz	r2, 8012182 <_strtod_l+0x8ca>
 801212a:	4a9f      	ldr	r2, [pc, #636]	@ (80123a8 <_strtod_l+0xaf0>)
 801212c:	4293      	cmp	r3, r2
 801212e:	d12b      	bne.n	8012188 <_strtod_l+0x8d0>
 8012130:	9b08      	ldr	r3, [sp, #32]
 8012132:	4651      	mov	r1, sl
 8012134:	b303      	cbz	r3, 8012178 <_strtod_l+0x8c0>
 8012136:	4b9d      	ldr	r3, [pc, #628]	@ (80123ac <_strtod_l+0xaf4>)
 8012138:	465a      	mov	r2, fp
 801213a:	4013      	ands	r3, r2
 801213c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012140:	f04f 32ff 	mov.w	r2, #4294967295
 8012144:	d81b      	bhi.n	801217e <_strtod_l+0x8c6>
 8012146:	0d1b      	lsrs	r3, r3, #20
 8012148:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801214c:	fa02 f303 	lsl.w	r3, r2, r3
 8012150:	4299      	cmp	r1, r3
 8012152:	d119      	bne.n	8012188 <_strtod_l+0x8d0>
 8012154:	4b96      	ldr	r3, [pc, #600]	@ (80123b0 <_strtod_l+0xaf8>)
 8012156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012158:	429a      	cmp	r2, r3
 801215a:	d102      	bne.n	8012162 <_strtod_l+0x8aa>
 801215c:	3101      	adds	r1, #1
 801215e:	f43f adca 	beq.w	8011cf6 <_strtod_l+0x43e>
 8012162:	4b92      	ldr	r3, [pc, #584]	@ (80123ac <_strtod_l+0xaf4>)
 8012164:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012166:	401a      	ands	r2, r3
 8012168:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801216c:	f04f 0a00 	mov.w	sl, #0
 8012170:	9b08      	ldr	r3, [sp, #32]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d1b8      	bne.n	80120e8 <_strtod_l+0x830>
 8012176:	e5c9      	b.n	8011d0c <_strtod_l+0x454>
 8012178:	f04f 33ff 	mov.w	r3, #4294967295
 801217c:	e7e8      	b.n	8012150 <_strtod_l+0x898>
 801217e:	4613      	mov	r3, r2
 8012180:	e7e6      	b.n	8012150 <_strtod_l+0x898>
 8012182:	ea53 030a 	orrs.w	r3, r3, sl
 8012186:	d0a1      	beq.n	80120cc <_strtod_l+0x814>
 8012188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801218a:	b1db      	cbz	r3, 80121c4 <_strtod_l+0x90c>
 801218c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801218e:	4213      	tst	r3, r2
 8012190:	d0ee      	beq.n	8012170 <_strtod_l+0x8b8>
 8012192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012194:	9a08      	ldr	r2, [sp, #32]
 8012196:	4650      	mov	r0, sl
 8012198:	4659      	mov	r1, fp
 801219a:	b1bb      	cbz	r3, 80121cc <_strtod_l+0x914>
 801219c:	f7ff fb6e 	bl	801187c <sulp>
 80121a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121a4:	ec53 2b10 	vmov	r2, r3, d0
 80121a8:	f7ee f880 	bl	80002ac <__adddf3>
 80121ac:	4682      	mov	sl, r0
 80121ae:	468b      	mov	fp, r1
 80121b0:	e7de      	b.n	8012170 <_strtod_l+0x8b8>
 80121b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80121b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80121ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80121be:	f04f 3aff 	mov.w	sl, #4294967295
 80121c2:	e7d5      	b.n	8012170 <_strtod_l+0x8b8>
 80121c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80121c6:	ea13 0f0a 	tst.w	r3, sl
 80121ca:	e7e1      	b.n	8012190 <_strtod_l+0x8d8>
 80121cc:	f7ff fb56 	bl	801187c <sulp>
 80121d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121d4:	ec53 2b10 	vmov	r2, r3, d0
 80121d8:	f7ee f866 	bl	80002a8 <__aeabi_dsub>
 80121dc:	2200      	movs	r2, #0
 80121de:	2300      	movs	r3, #0
 80121e0:	4682      	mov	sl, r0
 80121e2:	468b      	mov	fp, r1
 80121e4:	f7ee fc80 	bl	8000ae8 <__aeabi_dcmpeq>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d0c1      	beq.n	8012170 <_strtod_l+0x8b8>
 80121ec:	e619      	b.n	8011e22 <_strtod_l+0x56a>
 80121ee:	4641      	mov	r1, r8
 80121f0:	4620      	mov	r0, r4
 80121f2:	f7ff facd 	bl	8011790 <__ratio>
 80121f6:	ec57 6b10 	vmov	r6, r7, d0
 80121fa:	2200      	movs	r2, #0
 80121fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012200:	4630      	mov	r0, r6
 8012202:	4639      	mov	r1, r7
 8012204:	f7ee fc84 	bl	8000b10 <__aeabi_dcmple>
 8012208:	2800      	cmp	r0, #0
 801220a:	d06f      	beq.n	80122ec <_strtod_l+0xa34>
 801220c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801220e:	2b00      	cmp	r3, #0
 8012210:	d17a      	bne.n	8012308 <_strtod_l+0xa50>
 8012212:	f1ba 0f00 	cmp.w	sl, #0
 8012216:	d158      	bne.n	80122ca <_strtod_l+0xa12>
 8012218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801221a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801221e:	2b00      	cmp	r3, #0
 8012220:	d15a      	bne.n	80122d8 <_strtod_l+0xa20>
 8012222:	4b64      	ldr	r3, [pc, #400]	@ (80123b4 <_strtod_l+0xafc>)
 8012224:	2200      	movs	r2, #0
 8012226:	4630      	mov	r0, r6
 8012228:	4639      	mov	r1, r7
 801222a:	f7ee fc67 	bl	8000afc <__aeabi_dcmplt>
 801222e:	2800      	cmp	r0, #0
 8012230:	d159      	bne.n	80122e6 <_strtod_l+0xa2e>
 8012232:	4630      	mov	r0, r6
 8012234:	4639      	mov	r1, r7
 8012236:	4b60      	ldr	r3, [pc, #384]	@ (80123b8 <_strtod_l+0xb00>)
 8012238:	2200      	movs	r2, #0
 801223a:	f7ee f9ed 	bl	8000618 <__aeabi_dmul>
 801223e:	4606      	mov	r6, r0
 8012240:	460f      	mov	r7, r1
 8012242:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012246:	9606      	str	r6, [sp, #24]
 8012248:	9307      	str	r3, [sp, #28]
 801224a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801224e:	4d57      	ldr	r5, [pc, #348]	@ (80123ac <_strtod_l+0xaf4>)
 8012250:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012256:	401d      	ands	r5, r3
 8012258:	4b58      	ldr	r3, [pc, #352]	@ (80123bc <_strtod_l+0xb04>)
 801225a:	429d      	cmp	r5, r3
 801225c:	f040 80b2 	bne.w	80123c4 <_strtod_l+0xb0c>
 8012260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012262:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012266:	ec4b ab10 	vmov	d0, sl, fp
 801226a:	f7ff f9c9 	bl	8011600 <__ulp>
 801226e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012272:	ec51 0b10 	vmov	r0, r1, d0
 8012276:	f7ee f9cf 	bl	8000618 <__aeabi_dmul>
 801227a:	4652      	mov	r2, sl
 801227c:	465b      	mov	r3, fp
 801227e:	f7ee f815 	bl	80002ac <__adddf3>
 8012282:	460b      	mov	r3, r1
 8012284:	4949      	ldr	r1, [pc, #292]	@ (80123ac <_strtod_l+0xaf4>)
 8012286:	4a4e      	ldr	r2, [pc, #312]	@ (80123c0 <_strtod_l+0xb08>)
 8012288:	4019      	ands	r1, r3
 801228a:	4291      	cmp	r1, r2
 801228c:	4682      	mov	sl, r0
 801228e:	d942      	bls.n	8012316 <_strtod_l+0xa5e>
 8012290:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012292:	4b47      	ldr	r3, [pc, #284]	@ (80123b0 <_strtod_l+0xaf8>)
 8012294:	429a      	cmp	r2, r3
 8012296:	d103      	bne.n	80122a0 <_strtod_l+0x9e8>
 8012298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801229a:	3301      	adds	r3, #1
 801229c:	f43f ad2b 	beq.w	8011cf6 <_strtod_l+0x43e>
 80122a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80123b0 <_strtod_l+0xaf8>
 80122a4:	f04f 3aff 	mov.w	sl, #4294967295
 80122a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80122aa:	9805      	ldr	r0, [sp, #20]
 80122ac:	f7fe fe74 	bl	8010f98 <_Bfree>
 80122b0:	9805      	ldr	r0, [sp, #20]
 80122b2:	4649      	mov	r1, r9
 80122b4:	f7fe fe70 	bl	8010f98 <_Bfree>
 80122b8:	9805      	ldr	r0, [sp, #20]
 80122ba:	4641      	mov	r1, r8
 80122bc:	f7fe fe6c 	bl	8010f98 <_Bfree>
 80122c0:	9805      	ldr	r0, [sp, #20]
 80122c2:	4621      	mov	r1, r4
 80122c4:	f7fe fe68 	bl	8010f98 <_Bfree>
 80122c8:	e618      	b.n	8011efc <_strtod_l+0x644>
 80122ca:	f1ba 0f01 	cmp.w	sl, #1
 80122ce:	d103      	bne.n	80122d8 <_strtod_l+0xa20>
 80122d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	f43f ada5 	beq.w	8011e22 <_strtod_l+0x56a>
 80122d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012388 <_strtod_l+0xad0>
 80122dc:	4f35      	ldr	r7, [pc, #212]	@ (80123b4 <_strtod_l+0xafc>)
 80122de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80122e2:	2600      	movs	r6, #0
 80122e4:	e7b1      	b.n	801224a <_strtod_l+0x992>
 80122e6:	4f34      	ldr	r7, [pc, #208]	@ (80123b8 <_strtod_l+0xb00>)
 80122e8:	2600      	movs	r6, #0
 80122ea:	e7aa      	b.n	8012242 <_strtod_l+0x98a>
 80122ec:	4b32      	ldr	r3, [pc, #200]	@ (80123b8 <_strtod_l+0xb00>)
 80122ee:	4630      	mov	r0, r6
 80122f0:	4639      	mov	r1, r7
 80122f2:	2200      	movs	r2, #0
 80122f4:	f7ee f990 	bl	8000618 <__aeabi_dmul>
 80122f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122fa:	4606      	mov	r6, r0
 80122fc:	460f      	mov	r7, r1
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d09f      	beq.n	8012242 <_strtod_l+0x98a>
 8012302:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012306:	e7a0      	b.n	801224a <_strtod_l+0x992>
 8012308:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012390 <_strtod_l+0xad8>
 801230c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012310:	ec57 6b17 	vmov	r6, r7, d7
 8012314:	e799      	b.n	801224a <_strtod_l+0x992>
 8012316:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801231a:	9b08      	ldr	r3, [sp, #32]
 801231c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012320:	2b00      	cmp	r3, #0
 8012322:	d1c1      	bne.n	80122a8 <_strtod_l+0x9f0>
 8012324:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012328:	0d1b      	lsrs	r3, r3, #20
 801232a:	051b      	lsls	r3, r3, #20
 801232c:	429d      	cmp	r5, r3
 801232e:	d1bb      	bne.n	80122a8 <_strtod_l+0x9f0>
 8012330:	4630      	mov	r0, r6
 8012332:	4639      	mov	r1, r7
 8012334:	f7ee fcd0 	bl	8000cd8 <__aeabi_d2lz>
 8012338:	f7ee f940 	bl	80005bc <__aeabi_l2d>
 801233c:	4602      	mov	r2, r0
 801233e:	460b      	mov	r3, r1
 8012340:	4630      	mov	r0, r6
 8012342:	4639      	mov	r1, r7
 8012344:	f7ed ffb0 	bl	80002a8 <__aeabi_dsub>
 8012348:	460b      	mov	r3, r1
 801234a:	4602      	mov	r2, r0
 801234c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012350:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012356:	ea46 060a 	orr.w	r6, r6, sl
 801235a:	431e      	orrs	r6, r3
 801235c:	d06f      	beq.n	801243e <_strtod_l+0xb86>
 801235e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012398 <_strtod_l+0xae0>)
 8012360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012364:	f7ee fbca 	bl	8000afc <__aeabi_dcmplt>
 8012368:	2800      	cmp	r0, #0
 801236a:	f47f accf 	bne.w	8011d0c <_strtod_l+0x454>
 801236e:	a30c      	add	r3, pc, #48	@ (adr r3, 80123a0 <_strtod_l+0xae8>)
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012378:	f7ee fbde 	bl	8000b38 <__aeabi_dcmpgt>
 801237c:	2800      	cmp	r0, #0
 801237e:	d093      	beq.n	80122a8 <_strtod_l+0x9f0>
 8012380:	e4c4      	b.n	8011d0c <_strtod_l+0x454>
 8012382:	bf00      	nop
 8012384:	f3af 8000 	nop.w
 8012388:	00000000 	.word	0x00000000
 801238c:	bff00000 	.word	0xbff00000
 8012390:	00000000 	.word	0x00000000
 8012394:	3ff00000 	.word	0x3ff00000
 8012398:	94a03595 	.word	0x94a03595
 801239c:	3fdfffff 	.word	0x3fdfffff
 80123a0:	35afe535 	.word	0x35afe535
 80123a4:	3fe00000 	.word	0x3fe00000
 80123a8:	000fffff 	.word	0x000fffff
 80123ac:	7ff00000 	.word	0x7ff00000
 80123b0:	7fefffff 	.word	0x7fefffff
 80123b4:	3ff00000 	.word	0x3ff00000
 80123b8:	3fe00000 	.word	0x3fe00000
 80123bc:	7fe00000 	.word	0x7fe00000
 80123c0:	7c9fffff 	.word	0x7c9fffff
 80123c4:	9b08      	ldr	r3, [sp, #32]
 80123c6:	b323      	cbz	r3, 8012412 <_strtod_l+0xb5a>
 80123c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80123cc:	d821      	bhi.n	8012412 <_strtod_l+0xb5a>
 80123ce:	a328      	add	r3, pc, #160	@ (adr r3, 8012470 <_strtod_l+0xbb8>)
 80123d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d4:	4630      	mov	r0, r6
 80123d6:	4639      	mov	r1, r7
 80123d8:	f7ee fb9a 	bl	8000b10 <__aeabi_dcmple>
 80123dc:	b1a0      	cbz	r0, 8012408 <_strtod_l+0xb50>
 80123de:	4639      	mov	r1, r7
 80123e0:	4630      	mov	r0, r6
 80123e2:	f7ee fbf1 	bl	8000bc8 <__aeabi_d2uiz>
 80123e6:	2801      	cmp	r0, #1
 80123e8:	bf38      	it	cc
 80123ea:	2001      	movcc	r0, #1
 80123ec:	f7ee f89a 	bl	8000524 <__aeabi_ui2d>
 80123f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123f2:	4606      	mov	r6, r0
 80123f4:	460f      	mov	r7, r1
 80123f6:	b9fb      	cbnz	r3, 8012438 <_strtod_l+0xb80>
 80123f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80123fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80123fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8012400:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012404:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012408:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801240a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801240e:	1b5b      	subs	r3, r3, r5
 8012410:	9311      	str	r3, [sp, #68]	@ 0x44
 8012412:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012416:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801241a:	f7ff f8f1 	bl	8011600 <__ulp>
 801241e:	4650      	mov	r0, sl
 8012420:	ec53 2b10 	vmov	r2, r3, d0
 8012424:	4659      	mov	r1, fp
 8012426:	f7ee f8f7 	bl	8000618 <__aeabi_dmul>
 801242a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801242e:	f7ed ff3d 	bl	80002ac <__adddf3>
 8012432:	4682      	mov	sl, r0
 8012434:	468b      	mov	fp, r1
 8012436:	e770      	b.n	801231a <_strtod_l+0xa62>
 8012438:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801243c:	e7e0      	b.n	8012400 <_strtod_l+0xb48>
 801243e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012478 <_strtod_l+0xbc0>)
 8012440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012444:	f7ee fb5a 	bl	8000afc <__aeabi_dcmplt>
 8012448:	e798      	b.n	801237c <_strtod_l+0xac4>
 801244a:	2300      	movs	r3, #0
 801244c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801244e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012452:	6013      	str	r3, [r2, #0]
 8012454:	f7ff ba6d 	b.w	8011932 <_strtod_l+0x7a>
 8012458:	2a65      	cmp	r2, #101	@ 0x65
 801245a:	f43f ab66 	beq.w	8011b2a <_strtod_l+0x272>
 801245e:	2a45      	cmp	r2, #69	@ 0x45
 8012460:	f43f ab63 	beq.w	8011b2a <_strtod_l+0x272>
 8012464:	2301      	movs	r3, #1
 8012466:	f7ff bb9e 	b.w	8011ba6 <_strtod_l+0x2ee>
 801246a:	bf00      	nop
 801246c:	f3af 8000 	nop.w
 8012470:	ffc00000 	.word	0xffc00000
 8012474:	41dfffff 	.word	0x41dfffff
 8012478:	94a03595 	.word	0x94a03595
 801247c:	3fcfffff 	.word	0x3fcfffff

08012480 <_strtod_r>:
 8012480:	4b01      	ldr	r3, [pc, #4]	@ (8012488 <_strtod_r+0x8>)
 8012482:	f7ff ba19 	b.w	80118b8 <_strtod_l>
 8012486:	bf00      	nop
 8012488:	20000570 	.word	0x20000570

0801248c <__ssputs_r>:
 801248c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012490:	688e      	ldr	r6, [r1, #8]
 8012492:	461f      	mov	r7, r3
 8012494:	42be      	cmp	r6, r7
 8012496:	680b      	ldr	r3, [r1, #0]
 8012498:	4682      	mov	sl, r0
 801249a:	460c      	mov	r4, r1
 801249c:	4690      	mov	r8, r2
 801249e:	d82d      	bhi.n	80124fc <__ssputs_r+0x70>
 80124a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80124a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80124a8:	d026      	beq.n	80124f8 <__ssputs_r+0x6c>
 80124aa:	6965      	ldr	r5, [r4, #20]
 80124ac:	6909      	ldr	r1, [r1, #16]
 80124ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80124b2:	eba3 0901 	sub.w	r9, r3, r1
 80124b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80124ba:	1c7b      	adds	r3, r7, #1
 80124bc:	444b      	add	r3, r9
 80124be:	106d      	asrs	r5, r5, #1
 80124c0:	429d      	cmp	r5, r3
 80124c2:	bf38      	it	cc
 80124c4:	461d      	movcc	r5, r3
 80124c6:	0553      	lsls	r3, r2, #21
 80124c8:	d527      	bpl.n	801251a <__ssputs_r+0x8e>
 80124ca:	4629      	mov	r1, r5
 80124cc:	f7fe fc98 	bl	8010e00 <_malloc_r>
 80124d0:	4606      	mov	r6, r0
 80124d2:	b360      	cbz	r0, 801252e <__ssputs_r+0xa2>
 80124d4:	6921      	ldr	r1, [r4, #16]
 80124d6:	464a      	mov	r2, r9
 80124d8:	f7fd fdbb 	bl	8010052 <memcpy>
 80124dc:	89a3      	ldrh	r3, [r4, #12]
 80124de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80124e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124e6:	81a3      	strh	r3, [r4, #12]
 80124e8:	6126      	str	r6, [r4, #16]
 80124ea:	6165      	str	r5, [r4, #20]
 80124ec:	444e      	add	r6, r9
 80124ee:	eba5 0509 	sub.w	r5, r5, r9
 80124f2:	6026      	str	r6, [r4, #0]
 80124f4:	60a5      	str	r5, [r4, #8]
 80124f6:	463e      	mov	r6, r7
 80124f8:	42be      	cmp	r6, r7
 80124fa:	d900      	bls.n	80124fe <__ssputs_r+0x72>
 80124fc:	463e      	mov	r6, r7
 80124fe:	6820      	ldr	r0, [r4, #0]
 8012500:	4632      	mov	r2, r6
 8012502:	4641      	mov	r1, r8
 8012504:	f000 f9c6 	bl	8012894 <memmove>
 8012508:	68a3      	ldr	r3, [r4, #8]
 801250a:	1b9b      	subs	r3, r3, r6
 801250c:	60a3      	str	r3, [r4, #8]
 801250e:	6823      	ldr	r3, [r4, #0]
 8012510:	4433      	add	r3, r6
 8012512:	6023      	str	r3, [r4, #0]
 8012514:	2000      	movs	r0, #0
 8012516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801251a:	462a      	mov	r2, r5
 801251c:	f000 fd7d 	bl	801301a <_realloc_r>
 8012520:	4606      	mov	r6, r0
 8012522:	2800      	cmp	r0, #0
 8012524:	d1e0      	bne.n	80124e8 <__ssputs_r+0x5c>
 8012526:	6921      	ldr	r1, [r4, #16]
 8012528:	4650      	mov	r0, sl
 801252a:	f7fe fbf5 	bl	8010d18 <_free_r>
 801252e:	230c      	movs	r3, #12
 8012530:	f8ca 3000 	str.w	r3, [sl]
 8012534:	89a3      	ldrh	r3, [r4, #12]
 8012536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801253a:	81a3      	strh	r3, [r4, #12]
 801253c:	f04f 30ff 	mov.w	r0, #4294967295
 8012540:	e7e9      	b.n	8012516 <__ssputs_r+0x8a>
	...

08012544 <_svfiprintf_r>:
 8012544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012548:	4698      	mov	r8, r3
 801254a:	898b      	ldrh	r3, [r1, #12]
 801254c:	061b      	lsls	r3, r3, #24
 801254e:	b09d      	sub	sp, #116	@ 0x74
 8012550:	4607      	mov	r7, r0
 8012552:	460d      	mov	r5, r1
 8012554:	4614      	mov	r4, r2
 8012556:	d510      	bpl.n	801257a <_svfiprintf_r+0x36>
 8012558:	690b      	ldr	r3, [r1, #16]
 801255a:	b973      	cbnz	r3, 801257a <_svfiprintf_r+0x36>
 801255c:	2140      	movs	r1, #64	@ 0x40
 801255e:	f7fe fc4f 	bl	8010e00 <_malloc_r>
 8012562:	6028      	str	r0, [r5, #0]
 8012564:	6128      	str	r0, [r5, #16]
 8012566:	b930      	cbnz	r0, 8012576 <_svfiprintf_r+0x32>
 8012568:	230c      	movs	r3, #12
 801256a:	603b      	str	r3, [r7, #0]
 801256c:	f04f 30ff 	mov.w	r0, #4294967295
 8012570:	b01d      	add	sp, #116	@ 0x74
 8012572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012576:	2340      	movs	r3, #64	@ 0x40
 8012578:	616b      	str	r3, [r5, #20]
 801257a:	2300      	movs	r3, #0
 801257c:	9309      	str	r3, [sp, #36]	@ 0x24
 801257e:	2320      	movs	r3, #32
 8012580:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012584:	f8cd 800c 	str.w	r8, [sp, #12]
 8012588:	2330      	movs	r3, #48	@ 0x30
 801258a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012728 <_svfiprintf_r+0x1e4>
 801258e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012592:	f04f 0901 	mov.w	r9, #1
 8012596:	4623      	mov	r3, r4
 8012598:	469a      	mov	sl, r3
 801259a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801259e:	b10a      	cbz	r2, 80125a4 <_svfiprintf_r+0x60>
 80125a0:	2a25      	cmp	r2, #37	@ 0x25
 80125a2:	d1f9      	bne.n	8012598 <_svfiprintf_r+0x54>
 80125a4:	ebba 0b04 	subs.w	fp, sl, r4
 80125a8:	d00b      	beq.n	80125c2 <_svfiprintf_r+0x7e>
 80125aa:	465b      	mov	r3, fp
 80125ac:	4622      	mov	r2, r4
 80125ae:	4629      	mov	r1, r5
 80125b0:	4638      	mov	r0, r7
 80125b2:	f7ff ff6b 	bl	801248c <__ssputs_r>
 80125b6:	3001      	adds	r0, #1
 80125b8:	f000 80a7 	beq.w	801270a <_svfiprintf_r+0x1c6>
 80125bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80125be:	445a      	add	r2, fp
 80125c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80125c2:	f89a 3000 	ldrb.w	r3, [sl]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	f000 809f 	beq.w	801270a <_svfiprintf_r+0x1c6>
 80125cc:	2300      	movs	r3, #0
 80125ce:	f04f 32ff 	mov.w	r2, #4294967295
 80125d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125d6:	f10a 0a01 	add.w	sl, sl, #1
 80125da:	9304      	str	r3, [sp, #16]
 80125dc:	9307      	str	r3, [sp, #28]
 80125de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80125e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80125e4:	4654      	mov	r4, sl
 80125e6:	2205      	movs	r2, #5
 80125e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125ec:	484e      	ldr	r0, [pc, #312]	@ (8012728 <_svfiprintf_r+0x1e4>)
 80125ee:	f7ed fdff 	bl	80001f0 <memchr>
 80125f2:	9a04      	ldr	r2, [sp, #16]
 80125f4:	b9d8      	cbnz	r0, 801262e <_svfiprintf_r+0xea>
 80125f6:	06d0      	lsls	r0, r2, #27
 80125f8:	bf44      	itt	mi
 80125fa:	2320      	movmi	r3, #32
 80125fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012600:	0711      	lsls	r1, r2, #28
 8012602:	bf44      	itt	mi
 8012604:	232b      	movmi	r3, #43	@ 0x2b
 8012606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801260a:	f89a 3000 	ldrb.w	r3, [sl]
 801260e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012610:	d015      	beq.n	801263e <_svfiprintf_r+0xfa>
 8012612:	9a07      	ldr	r2, [sp, #28]
 8012614:	4654      	mov	r4, sl
 8012616:	2000      	movs	r0, #0
 8012618:	f04f 0c0a 	mov.w	ip, #10
 801261c:	4621      	mov	r1, r4
 801261e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012622:	3b30      	subs	r3, #48	@ 0x30
 8012624:	2b09      	cmp	r3, #9
 8012626:	d94b      	bls.n	80126c0 <_svfiprintf_r+0x17c>
 8012628:	b1b0      	cbz	r0, 8012658 <_svfiprintf_r+0x114>
 801262a:	9207      	str	r2, [sp, #28]
 801262c:	e014      	b.n	8012658 <_svfiprintf_r+0x114>
 801262e:	eba0 0308 	sub.w	r3, r0, r8
 8012632:	fa09 f303 	lsl.w	r3, r9, r3
 8012636:	4313      	orrs	r3, r2
 8012638:	9304      	str	r3, [sp, #16]
 801263a:	46a2      	mov	sl, r4
 801263c:	e7d2      	b.n	80125e4 <_svfiprintf_r+0xa0>
 801263e:	9b03      	ldr	r3, [sp, #12]
 8012640:	1d19      	adds	r1, r3, #4
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	9103      	str	r1, [sp, #12]
 8012646:	2b00      	cmp	r3, #0
 8012648:	bfbb      	ittet	lt
 801264a:	425b      	neglt	r3, r3
 801264c:	f042 0202 	orrlt.w	r2, r2, #2
 8012650:	9307      	strge	r3, [sp, #28]
 8012652:	9307      	strlt	r3, [sp, #28]
 8012654:	bfb8      	it	lt
 8012656:	9204      	strlt	r2, [sp, #16]
 8012658:	7823      	ldrb	r3, [r4, #0]
 801265a:	2b2e      	cmp	r3, #46	@ 0x2e
 801265c:	d10a      	bne.n	8012674 <_svfiprintf_r+0x130>
 801265e:	7863      	ldrb	r3, [r4, #1]
 8012660:	2b2a      	cmp	r3, #42	@ 0x2a
 8012662:	d132      	bne.n	80126ca <_svfiprintf_r+0x186>
 8012664:	9b03      	ldr	r3, [sp, #12]
 8012666:	1d1a      	adds	r2, r3, #4
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	9203      	str	r2, [sp, #12]
 801266c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012670:	3402      	adds	r4, #2
 8012672:	9305      	str	r3, [sp, #20]
 8012674:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012738 <_svfiprintf_r+0x1f4>
 8012678:	7821      	ldrb	r1, [r4, #0]
 801267a:	2203      	movs	r2, #3
 801267c:	4650      	mov	r0, sl
 801267e:	f7ed fdb7 	bl	80001f0 <memchr>
 8012682:	b138      	cbz	r0, 8012694 <_svfiprintf_r+0x150>
 8012684:	9b04      	ldr	r3, [sp, #16]
 8012686:	eba0 000a 	sub.w	r0, r0, sl
 801268a:	2240      	movs	r2, #64	@ 0x40
 801268c:	4082      	lsls	r2, r0
 801268e:	4313      	orrs	r3, r2
 8012690:	3401      	adds	r4, #1
 8012692:	9304      	str	r3, [sp, #16]
 8012694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012698:	4824      	ldr	r0, [pc, #144]	@ (801272c <_svfiprintf_r+0x1e8>)
 801269a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801269e:	2206      	movs	r2, #6
 80126a0:	f7ed fda6 	bl	80001f0 <memchr>
 80126a4:	2800      	cmp	r0, #0
 80126a6:	d036      	beq.n	8012716 <_svfiprintf_r+0x1d2>
 80126a8:	4b21      	ldr	r3, [pc, #132]	@ (8012730 <_svfiprintf_r+0x1ec>)
 80126aa:	bb1b      	cbnz	r3, 80126f4 <_svfiprintf_r+0x1b0>
 80126ac:	9b03      	ldr	r3, [sp, #12]
 80126ae:	3307      	adds	r3, #7
 80126b0:	f023 0307 	bic.w	r3, r3, #7
 80126b4:	3308      	adds	r3, #8
 80126b6:	9303      	str	r3, [sp, #12]
 80126b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126ba:	4433      	add	r3, r6
 80126bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80126be:	e76a      	b.n	8012596 <_svfiprintf_r+0x52>
 80126c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80126c4:	460c      	mov	r4, r1
 80126c6:	2001      	movs	r0, #1
 80126c8:	e7a8      	b.n	801261c <_svfiprintf_r+0xd8>
 80126ca:	2300      	movs	r3, #0
 80126cc:	3401      	adds	r4, #1
 80126ce:	9305      	str	r3, [sp, #20]
 80126d0:	4619      	mov	r1, r3
 80126d2:	f04f 0c0a 	mov.w	ip, #10
 80126d6:	4620      	mov	r0, r4
 80126d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126dc:	3a30      	subs	r2, #48	@ 0x30
 80126de:	2a09      	cmp	r2, #9
 80126e0:	d903      	bls.n	80126ea <_svfiprintf_r+0x1a6>
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d0c6      	beq.n	8012674 <_svfiprintf_r+0x130>
 80126e6:	9105      	str	r1, [sp, #20]
 80126e8:	e7c4      	b.n	8012674 <_svfiprintf_r+0x130>
 80126ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80126ee:	4604      	mov	r4, r0
 80126f0:	2301      	movs	r3, #1
 80126f2:	e7f0      	b.n	80126d6 <_svfiprintf_r+0x192>
 80126f4:	ab03      	add	r3, sp, #12
 80126f6:	9300      	str	r3, [sp, #0]
 80126f8:	462a      	mov	r2, r5
 80126fa:	4b0e      	ldr	r3, [pc, #56]	@ (8012734 <_svfiprintf_r+0x1f0>)
 80126fc:	a904      	add	r1, sp, #16
 80126fe:	4638      	mov	r0, r7
 8012700:	f7fc fd36 	bl	800f170 <_printf_float>
 8012704:	1c42      	adds	r2, r0, #1
 8012706:	4606      	mov	r6, r0
 8012708:	d1d6      	bne.n	80126b8 <_svfiprintf_r+0x174>
 801270a:	89ab      	ldrh	r3, [r5, #12]
 801270c:	065b      	lsls	r3, r3, #25
 801270e:	f53f af2d 	bmi.w	801256c <_svfiprintf_r+0x28>
 8012712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012714:	e72c      	b.n	8012570 <_svfiprintf_r+0x2c>
 8012716:	ab03      	add	r3, sp, #12
 8012718:	9300      	str	r3, [sp, #0]
 801271a:	462a      	mov	r2, r5
 801271c:	4b05      	ldr	r3, [pc, #20]	@ (8012734 <_svfiprintf_r+0x1f0>)
 801271e:	a904      	add	r1, sp, #16
 8012720:	4638      	mov	r0, r7
 8012722:	f7fc ffbd 	bl	800f6a0 <_printf_i>
 8012726:	e7ed      	b.n	8012704 <_svfiprintf_r+0x1c0>
 8012728:	080167b0 	.word	0x080167b0
 801272c:	080167ba 	.word	0x080167ba
 8012730:	0800f171 	.word	0x0800f171
 8012734:	0801248d 	.word	0x0801248d
 8012738:	080167b6 	.word	0x080167b6

0801273c <__sflush_r>:
 801273c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012744:	0716      	lsls	r6, r2, #28
 8012746:	4605      	mov	r5, r0
 8012748:	460c      	mov	r4, r1
 801274a:	d454      	bmi.n	80127f6 <__sflush_r+0xba>
 801274c:	684b      	ldr	r3, [r1, #4]
 801274e:	2b00      	cmp	r3, #0
 8012750:	dc02      	bgt.n	8012758 <__sflush_r+0x1c>
 8012752:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012754:	2b00      	cmp	r3, #0
 8012756:	dd48      	ble.n	80127ea <__sflush_r+0xae>
 8012758:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801275a:	2e00      	cmp	r6, #0
 801275c:	d045      	beq.n	80127ea <__sflush_r+0xae>
 801275e:	2300      	movs	r3, #0
 8012760:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012764:	682f      	ldr	r7, [r5, #0]
 8012766:	6a21      	ldr	r1, [r4, #32]
 8012768:	602b      	str	r3, [r5, #0]
 801276a:	d030      	beq.n	80127ce <__sflush_r+0x92>
 801276c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801276e:	89a3      	ldrh	r3, [r4, #12]
 8012770:	0759      	lsls	r1, r3, #29
 8012772:	d505      	bpl.n	8012780 <__sflush_r+0x44>
 8012774:	6863      	ldr	r3, [r4, #4]
 8012776:	1ad2      	subs	r2, r2, r3
 8012778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801277a:	b10b      	cbz	r3, 8012780 <__sflush_r+0x44>
 801277c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801277e:	1ad2      	subs	r2, r2, r3
 8012780:	2300      	movs	r3, #0
 8012782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012784:	6a21      	ldr	r1, [r4, #32]
 8012786:	4628      	mov	r0, r5
 8012788:	47b0      	blx	r6
 801278a:	1c43      	adds	r3, r0, #1
 801278c:	89a3      	ldrh	r3, [r4, #12]
 801278e:	d106      	bne.n	801279e <__sflush_r+0x62>
 8012790:	6829      	ldr	r1, [r5, #0]
 8012792:	291d      	cmp	r1, #29
 8012794:	d82b      	bhi.n	80127ee <__sflush_r+0xb2>
 8012796:	4a2a      	ldr	r2, [pc, #168]	@ (8012840 <__sflush_r+0x104>)
 8012798:	410a      	asrs	r2, r1
 801279a:	07d6      	lsls	r6, r2, #31
 801279c:	d427      	bmi.n	80127ee <__sflush_r+0xb2>
 801279e:	2200      	movs	r2, #0
 80127a0:	6062      	str	r2, [r4, #4]
 80127a2:	04d9      	lsls	r1, r3, #19
 80127a4:	6922      	ldr	r2, [r4, #16]
 80127a6:	6022      	str	r2, [r4, #0]
 80127a8:	d504      	bpl.n	80127b4 <__sflush_r+0x78>
 80127aa:	1c42      	adds	r2, r0, #1
 80127ac:	d101      	bne.n	80127b2 <__sflush_r+0x76>
 80127ae:	682b      	ldr	r3, [r5, #0]
 80127b0:	b903      	cbnz	r3, 80127b4 <__sflush_r+0x78>
 80127b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80127b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80127b6:	602f      	str	r7, [r5, #0]
 80127b8:	b1b9      	cbz	r1, 80127ea <__sflush_r+0xae>
 80127ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80127be:	4299      	cmp	r1, r3
 80127c0:	d002      	beq.n	80127c8 <__sflush_r+0x8c>
 80127c2:	4628      	mov	r0, r5
 80127c4:	f7fe faa8 	bl	8010d18 <_free_r>
 80127c8:	2300      	movs	r3, #0
 80127ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80127cc:	e00d      	b.n	80127ea <__sflush_r+0xae>
 80127ce:	2301      	movs	r3, #1
 80127d0:	4628      	mov	r0, r5
 80127d2:	47b0      	blx	r6
 80127d4:	4602      	mov	r2, r0
 80127d6:	1c50      	adds	r0, r2, #1
 80127d8:	d1c9      	bne.n	801276e <__sflush_r+0x32>
 80127da:	682b      	ldr	r3, [r5, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d0c6      	beq.n	801276e <__sflush_r+0x32>
 80127e0:	2b1d      	cmp	r3, #29
 80127e2:	d001      	beq.n	80127e8 <__sflush_r+0xac>
 80127e4:	2b16      	cmp	r3, #22
 80127e6:	d11e      	bne.n	8012826 <__sflush_r+0xea>
 80127e8:	602f      	str	r7, [r5, #0]
 80127ea:	2000      	movs	r0, #0
 80127ec:	e022      	b.n	8012834 <__sflush_r+0xf8>
 80127ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127f2:	b21b      	sxth	r3, r3
 80127f4:	e01b      	b.n	801282e <__sflush_r+0xf2>
 80127f6:	690f      	ldr	r7, [r1, #16]
 80127f8:	2f00      	cmp	r7, #0
 80127fa:	d0f6      	beq.n	80127ea <__sflush_r+0xae>
 80127fc:	0793      	lsls	r3, r2, #30
 80127fe:	680e      	ldr	r6, [r1, #0]
 8012800:	bf08      	it	eq
 8012802:	694b      	ldreq	r3, [r1, #20]
 8012804:	600f      	str	r7, [r1, #0]
 8012806:	bf18      	it	ne
 8012808:	2300      	movne	r3, #0
 801280a:	eba6 0807 	sub.w	r8, r6, r7
 801280e:	608b      	str	r3, [r1, #8]
 8012810:	f1b8 0f00 	cmp.w	r8, #0
 8012814:	dde9      	ble.n	80127ea <__sflush_r+0xae>
 8012816:	6a21      	ldr	r1, [r4, #32]
 8012818:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801281a:	4643      	mov	r3, r8
 801281c:	463a      	mov	r2, r7
 801281e:	4628      	mov	r0, r5
 8012820:	47b0      	blx	r6
 8012822:	2800      	cmp	r0, #0
 8012824:	dc08      	bgt.n	8012838 <__sflush_r+0xfc>
 8012826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801282a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801282e:	81a3      	strh	r3, [r4, #12]
 8012830:	f04f 30ff 	mov.w	r0, #4294967295
 8012834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012838:	4407      	add	r7, r0
 801283a:	eba8 0800 	sub.w	r8, r8, r0
 801283e:	e7e7      	b.n	8012810 <__sflush_r+0xd4>
 8012840:	dfbffffe 	.word	0xdfbffffe

08012844 <_fflush_r>:
 8012844:	b538      	push	{r3, r4, r5, lr}
 8012846:	690b      	ldr	r3, [r1, #16]
 8012848:	4605      	mov	r5, r0
 801284a:	460c      	mov	r4, r1
 801284c:	b913      	cbnz	r3, 8012854 <_fflush_r+0x10>
 801284e:	2500      	movs	r5, #0
 8012850:	4628      	mov	r0, r5
 8012852:	bd38      	pop	{r3, r4, r5, pc}
 8012854:	b118      	cbz	r0, 801285e <_fflush_r+0x1a>
 8012856:	6a03      	ldr	r3, [r0, #32]
 8012858:	b90b      	cbnz	r3, 801285e <_fflush_r+0x1a>
 801285a:	f7fd fae1 	bl	800fe20 <__sinit>
 801285e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d0f3      	beq.n	801284e <_fflush_r+0xa>
 8012866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012868:	07d0      	lsls	r0, r2, #31
 801286a:	d404      	bmi.n	8012876 <_fflush_r+0x32>
 801286c:	0599      	lsls	r1, r3, #22
 801286e:	d402      	bmi.n	8012876 <_fflush_r+0x32>
 8012870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012872:	f7fd fbec 	bl	801004e <__retarget_lock_acquire_recursive>
 8012876:	4628      	mov	r0, r5
 8012878:	4621      	mov	r1, r4
 801287a:	f7ff ff5f 	bl	801273c <__sflush_r>
 801287e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012880:	07da      	lsls	r2, r3, #31
 8012882:	4605      	mov	r5, r0
 8012884:	d4e4      	bmi.n	8012850 <_fflush_r+0xc>
 8012886:	89a3      	ldrh	r3, [r4, #12]
 8012888:	059b      	lsls	r3, r3, #22
 801288a:	d4e1      	bmi.n	8012850 <_fflush_r+0xc>
 801288c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801288e:	f7fd fbdf 	bl	8010050 <__retarget_lock_release_recursive>
 8012892:	e7dd      	b.n	8012850 <_fflush_r+0xc>

08012894 <memmove>:
 8012894:	4288      	cmp	r0, r1
 8012896:	b510      	push	{r4, lr}
 8012898:	eb01 0402 	add.w	r4, r1, r2
 801289c:	d902      	bls.n	80128a4 <memmove+0x10>
 801289e:	4284      	cmp	r4, r0
 80128a0:	4623      	mov	r3, r4
 80128a2:	d807      	bhi.n	80128b4 <memmove+0x20>
 80128a4:	1e43      	subs	r3, r0, #1
 80128a6:	42a1      	cmp	r1, r4
 80128a8:	d008      	beq.n	80128bc <memmove+0x28>
 80128aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80128b2:	e7f8      	b.n	80128a6 <memmove+0x12>
 80128b4:	4402      	add	r2, r0
 80128b6:	4601      	mov	r1, r0
 80128b8:	428a      	cmp	r2, r1
 80128ba:	d100      	bne.n	80128be <memmove+0x2a>
 80128bc:	bd10      	pop	{r4, pc}
 80128be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80128c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80128c6:	e7f7      	b.n	80128b8 <memmove+0x24>

080128c8 <strncmp>:
 80128c8:	b510      	push	{r4, lr}
 80128ca:	b16a      	cbz	r2, 80128e8 <strncmp+0x20>
 80128cc:	3901      	subs	r1, #1
 80128ce:	1884      	adds	r4, r0, r2
 80128d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80128d8:	429a      	cmp	r2, r3
 80128da:	d103      	bne.n	80128e4 <strncmp+0x1c>
 80128dc:	42a0      	cmp	r0, r4
 80128de:	d001      	beq.n	80128e4 <strncmp+0x1c>
 80128e0:	2a00      	cmp	r2, #0
 80128e2:	d1f5      	bne.n	80128d0 <strncmp+0x8>
 80128e4:	1ad0      	subs	r0, r2, r3
 80128e6:	bd10      	pop	{r4, pc}
 80128e8:	4610      	mov	r0, r2
 80128ea:	e7fc      	b.n	80128e6 <strncmp+0x1e>

080128ec <_sbrk_r>:
 80128ec:	b538      	push	{r3, r4, r5, lr}
 80128ee:	4d06      	ldr	r5, [pc, #24]	@ (8012908 <_sbrk_r+0x1c>)
 80128f0:	2300      	movs	r3, #0
 80128f2:	4604      	mov	r4, r0
 80128f4:	4608      	mov	r0, r1
 80128f6:	602b      	str	r3, [r5, #0]
 80128f8:	f7f8 fa2e 	bl	800ad58 <_sbrk>
 80128fc:	1c43      	adds	r3, r0, #1
 80128fe:	d102      	bne.n	8012906 <_sbrk_r+0x1a>
 8012900:	682b      	ldr	r3, [r5, #0]
 8012902:	b103      	cbz	r3, 8012906 <_sbrk_r+0x1a>
 8012904:	6023      	str	r3, [r4, #0]
 8012906:	bd38      	pop	{r3, r4, r5, pc}
 8012908:	200087b8 	.word	0x200087b8
 801290c:	00000000 	.word	0x00000000

08012910 <nan>:
 8012910:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012918 <nan+0x8>
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	00000000 	.word	0x00000000
 801291c:	7ff80000 	.word	0x7ff80000

08012920 <__assert_func>:
 8012920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012922:	4614      	mov	r4, r2
 8012924:	461a      	mov	r2, r3
 8012926:	4b09      	ldr	r3, [pc, #36]	@ (801294c <__assert_func+0x2c>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	4605      	mov	r5, r0
 801292c:	68d8      	ldr	r0, [r3, #12]
 801292e:	b954      	cbnz	r4, 8012946 <__assert_func+0x26>
 8012930:	4b07      	ldr	r3, [pc, #28]	@ (8012950 <__assert_func+0x30>)
 8012932:	461c      	mov	r4, r3
 8012934:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012938:	9100      	str	r1, [sp, #0]
 801293a:	462b      	mov	r3, r5
 801293c:	4905      	ldr	r1, [pc, #20]	@ (8012954 <__assert_func+0x34>)
 801293e:	f000 fba7 	bl	8013090 <fiprintf>
 8012942:	f000 fbb7 	bl	80130b4 <abort>
 8012946:	4b04      	ldr	r3, [pc, #16]	@ (8012958 <__assert_func+0x38>)
 8012948:	e7f4      	b.n	8012934 <__assert_func+0x14>
 801294a:	bf00      	nop
 801294c:	20000520 	.word	0x20000520
 8012950:	08016804 	.word	0x08016804
 8012954:	080167d6 	.word	0x080167d6
 8012958:	080167c9 	.word	0x080167c9

0801295c <_calloc_r>:
 801295c:	b570      	push	{r4, r5, r6, lr}
 801295e:	fba1 5402 	umull	r5, r4, r1, r2
 8012962:	b93c      	cbnz	r4, 8012974 <_calloc_r+0x18>
 8012964:	4629      	mov	r1, r5
 8012966:	f7fe fa4b 	bl	8010e00 <_malloc_r>
 801296a:	4606      	mov	r6, r0
 801296c:	b928      	cbnz	r0, 801297a <_calloc_r+0x1e>
 801296e:	2600      	movs	r6, #0
 8012970:	4630      	mov	r0, r6
 8012972:	bd70      	pop	{r4, r5, r6, pc}
 8012974:	220c      	movs	r2, #12
 8012976:	6002      	str	r2, [r0, #0]
 8012978:	e7f9      	b.n	801296e <_calloc_r+0x12>
 801297a:	462a      	mov	r2, r5
 801297c:	4621      	mov	r1, r4
 801297e:	f7fd fae8 	bl	800ff52 <memset>
 8012982:	e7f5      	b.n	8012970 <_calloc_r+0x14>

08012984 <rshift>:
 8012984:	6903      	ldr	r3, [r0, #16]
 8012986:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801298a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801298e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012992:	f100 0414 	add.w	r4, r0, #20
 8012996:	dd45      	ble.n	8012a24 <rshift+0xa0>
 8012998:	f011 011f 	ands.w	r1, r1, #31
 801299c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80129a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80129a4:	d10c      	bne.n	80129c0 <rshift+0x3c>
 80129a6:	f100 0710 	add.w	r7, r0, #16
 80129aa:	4629      	mov	r1, r5
 80129ac:	42b1      	cmp	r1, r6
 80129ae:	d334      	bcc.n	8012a1a <rshift+0x96>
 80129b0:	1a9b      	subs	r3, r3, r2
 80129b2:	009b      	lsls	r3, r3, #2
 80129b4:	1eea      	subs	r2, r5, #3
 80129b6:	4296      	cmp	r6, r2
 80129b8:	bf38      	it	cc
 80129ba:	2300      	movcc	r3, #0
 80129bc:	4423      	add	r3, r4
 80129be:	e015      	b.n	80129ec <rshift+0x68>
 80129c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80129c4:	f1c1 0820 	rsb	r8, r1, #32
 80129c8:	40cf      	lsrs	r7, r1
 80129ca:	f105 0e04 	add.w	lr, r5, #4
 80129ce:	46a1      	mov	r9, r4
 80129d0:	4576      	cmp	r6, lr
 80129d2:	46f4      	mov	ip, lr
 80129d4:	d815      	bhi.n	8012a02 <rshift+0x7e>
 80129d6:	1a9a      	subs	r2, r3, r2
 80129d8:	0092      	lsls	r2, r2, #2
 80129da:	3a04      	subs	r2, #4
 80129dc:	3501      	adds	r5, #1
 80129de:	42ae      	cmp	r6, r5
 80129e0:	bf38      	it	cc
 80129e2:	2200      	movcc	r2, #0
 80129e4:	18a3      	adds	r3, r4, r2
 80129e6:	50a7      	str	r7, [r4, r2]
 80129e8:	b107      	cbz	r7, 80129ec <rshift+0x68>
 80129ea:	3304      	adds	r3, #4
 80129ec:	1b1a      	subs	r2, r3, r4
 80129ee:	42a3      	cmp	r3, r4
 80129f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80129f4:	bf08      	it	eq
 80129f6:	2300      	moveq	r3, #0
 80129f8:	6102      	str	r2, [r0, #16]
 80129fa:	bf08      	it	eq
 80129fc:	6143      	streq	r3, [r0, #20]
 80129fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a02:	f8dc c000 	ldr.w	ip, [ip]
 8012a06:	fa0c fc08 	lsl.w	ip, ip, r8
 8012a0a:	ea4c 0707 	orr.w	r7, ip, r7
 8012a0e:	f849 7b04 	str.w	r7, [r9], #4
 8012a12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012a16:	40cf      	lsrs	r7, r1
 8012a18:	e7da      	b.n	80129d0 <rshift+0x4c>
 8012a1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8012a1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012a22:	e7c3      	b.n	80129ac <rshift+0x28>
 8012a24:	4623      	mov	r3, r4
 8012a26:	e7e1      	b.n	80129ec <rshift+0x68>

08012a28 <__hexdig_fun>:
 8012a28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012a2c:	2b09      	cmp	r3, #9
 8012a2e:	d802      	bhi.n	8012a36 <__hexdig_fun+0xe>
 8012a30:	3820      	subs	r0, #32
 8012a32:	b2c0      	uxtb	r0, r0
 8012a34:	4770      	bx	lr
 8012a36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012a3a:	2b05      	cmp	r3, #5
 8012a3c:	d801      	bhi.n	8012a42 <__hexdig_fun+0x1a>
 8012a3e:	3847      	subs	r0, #71	@ 0x47
 8012a40:	e7f7      	b.n	8012a32 <__hexdig_fun+0xa>
 8012a42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012a46:	2b05      	cmp	r3, #5
 8012a48:	d801      	bhi.n	8012a4e <__hexdig_fun+0x26>
 8012a4a:	3827      	subs	r0, #39	@ 0x27
 8012a4c:	e7f1      	b.n	8012a32 <__hexdig_fun+0xa>
 8012a4e:	2000      	movs	r0, #0
 8012a50:	4770      	bx	lr
	...

08012a54 <__gethex>:
 8012a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a58:	b085      	sub	sp, #20
 8012a5a:	468a      	mov	sl, r1
 8012a5c:	9302      	str	r3, [sp, #8]
 8012a5e:	680b      	ldr	r3, [r1, #0]
 8012a60:	9001      	str	r0, [sp, #4]
 8012a62:	4690      	mov	r8, r2
 8012a64:	1c9c      	adds	r4, r3, #2
 8012a66:	46a1      	mov	r9, r4
 8012a68:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012a6c:	2830      	cmp	r0, #48	@ 0x30
 8012a6e:	d0fa      	beq.n	8012a66 <__gethex+0x12>
 8012a70:	eba9 0303 	sub.w	r3, r9, r3
 8012a74:	f1a3 0b02 	sub.w	fp, r3, #2
 8012a78:	f7ff ffd6 	bl	8012a28 <__hexdig_fun>
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	2800      	cmp	r0, #0
 8012a80:	d168      	bne.n	8012b54 <__gethex+0x100>
 8012a82:	49a0      	ldr	r1, [pc, #640]	@ (8012d04 <__gethex+0x2b0>)
 8012a84:	2201      	movs	r2, #1
 8012a86:	4648      	mov	r0, r9
 8012a88:	f7ff ff1e 	bl	80128c8 <strncmp>
 8012a8c:	4607      	mov	r7, r0
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	d167      	bne.n	8012b62 <__gethex+0x10e>
 8012a92:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012a96:	4626      	mov	r6, r4
 8012a98:	f7ff ffc6 	bl	8012a28 <__hexdig_fun>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	d062      	beq.n	8012b66 <__gethex+0x112>
 8012aa0:	4623      	mov	r3, r4
 8012aa2:	7818      	ldrb	r0, [r3, #0]
 8012aa4:	2830      	cmp	r0, #48	@ 0x30
 8012aa6:	4699      	mov	r9, r3
 8012aa8:	f103 0301 	add.w	r3, r3, #1
 8012aac:	d0f9      	beq.n	8012aa2 <__gethex+0x4e>
 8012aae:	f7ff ffbb 	bl	8012a28 <__hexdig_fun>
 8012ab2:	fab0 f580 	clz	r5, r0
 8012ab6:	096d      	lsrs	r5, r5, #5
 8012ab8:	f04f 0b01 	mov.w	fp, #1
 8012abc:	464a      	mov	r2, r9
 8012abe:	4616      	mov	r6, r2
 8012ac0:	3201      	adds	r2, #1
 8012ac2:	7830      	ldrb	r0, [r6, #0]
 8012ac4:	f7ff ffb0 	bl	8012a28 <__hexdig_fun>
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	d1f8      	bne.n	8012abe <__gethex+0x6a>
 8012acc:	498d      	ldr	r1, [pc, #564]	@ (8012d04 <__gethex+0x2b0>)
 8012ace:	2201      	movs	r2, #1
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	f7ff fef9 	bl	80128c8 <strncmp>
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	d13f      	bne.n	8012b5a <__gethex+0x106>
 8012ada:	b944      	cbnz	r4, 8012aee <__gethex+0x9a>
 8012adc:	1c74      	adds	r4, r6, #1
 8012ade:	4622      	mov	r2, r4
 8012ae0:	4616      	mov	r6, r2
 8012ae2:	3201      	adds	r2, #1
 8012ae4:	7830      	ldrb	r0, [r6, #0]
 8012ae6:	f7ff ff9f 	bl	8012a28 <__hexdig_fun>
 8012aea:	2800      	cmp	r0, #0
 8012aec:	d1f8      	bne.n	8012ae0 <__gethex+0x8c>
 8012aee:	1ba4      	subs	r4, r4, r6
 8012af0:	00a7      	lsls	r7, r4, #2
 8012af2:	7833      	ldrb	r3, [r6, #0]
 8012af4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012af8:	2b50      	cmp	r3, #80	@ 0x50
 8012afa:	d13e      	bne.n	8012b7a <__gethex+0x126>
 8012afc:	7873      	ldrb	r3, [r6, #1]
 8012afe:	2b2b      	cmp	r3, #43	@ 0x2b
 8012b00:	d033      	beq.n	8012b6a <__gethex+0x116>
 8012b02:	2b2d      	cmp	r3, #45	@ 0x2d
 8012b04:	d034      	beq.n	8012b70 <__gethex+0x11c>
 8012b06:	1c71      	adds	r1, r6, #1
 8012b08:	2400      	movs	r4, #0
 8012b0a:	7808      	ldrb	r0, [r1, #0]
 8012b0c:	f7ff ff8c 	bl	8012a28 <__hexdig_fun>
 8012b10:	1e43      	subs	r3, r0, #1
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	2b18      	cmp	r3, #24
 8012b16:	d830      	bhi.n	8012b7a <__gethex+0x126>
 8012b18:	f1a0 0210 	sub.w	r2, r0, #16
 8012b1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012b20:	f7ff ff82 	bl	8012a28 <__hexdig_fun>
 8012b24:	f100 3cff 	add.w	ip, r0, #4294967295
 8012b28:	fa5f fc8c 	uxtb.w	ip, ip
 8012b2c:	f1bc 0f18 	cmp.w	ip, #24
 8012b30:	f04f 030a 	mov.w	r3, #10
 8012b34:	d91e      	bls.n	8012b74 <__gethex+0x120>
 8012b36:	b104      	cbz	r4, 8012b3a <__gethex+0xe6>
 8012b38:	4252      	negs	r2, r2
 8012b3a:	4417      	add	r7, r2
 8012b3c:	f8ca 1000 	str.w	r1, [sl]
 8012b40:	b1ed      	cbz	r5, 8012b7e <__gethex+0x12a>
 8012b42:	f1bb 0f00 	cmp.w	fp, #0
 8012b46:	bf0c      	ite	eq
 8012b48:	2506      	moveq	r5, #6
 8012b4a:	2500      	movne	r5, #0
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	b005      	add	sp, #20
 8012b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b54:	2500      	movs	r5, #0
 8012b56:	462c      	mov	r4, r5
 8012b58:	e7b0      	b.n	8012abc <__gethex+0x68>
 8012b5a:	2c00      	cmp	r4, #0
 8012b5c:	d1c7      	bne.n	8012aee <__gethex+0x9a>
 8012b5e:	4627      	mov	r7, r4
 8012b60:	e7c7      	b.n	8012af2 <__gethex+0x9e>
 8012b62:	464e      	mov	r6, r9
 8012b64:	462f      	mov	r7, r5
 8012b66:	2501      	movs	r5, #1
 8012b68:	e7c3      	b.n	8012af2 <__gethex+0x9e>
 8012b6a:	2400      	movs	r4, #0
 8012b6c:	1cb1      	adds	r1, r6, #2
 8012b6e:	e7cc      	b.n	8012b0a <__gethex+0xb6>
 8012b70:	2401      	movs	r4, #1
 8012b72:	e7fb      	b.n	8012b6c <__gethex+0x118>
 8012b74:	fb03 0002 	mla	r0, r3, r2, r0
 8012b78:	e7ce      	b.n	8012b18 <__gethex+0xc4>
 8012b7a:	4631      	mov	r1, r6
 8012b7c:	e7de      	b.n	8012b3c <__gethex+0xe8>
 8012b7e:	eba6 0309 	sub.w	r3, r6, r9
 8012b82:	3b01      	subs	r3, #1
 8012b84:	4629      	mov	r1, r5
 8012b86:	2b07      	cmp	r3, #7
 8012b88:	dc0a      	bgt.n	8012ba0 <__gethex+0x14c>
 8012b8a:	9801      	ldr	r0, [sp, #4]
 8012b8c:	f7fe f9c4 	bl	8010f18 <_Balloc>
 8012b90:	4604      	mov	r4, r0
 8012b92:	b940      	cbnz	r0, 8012ba6 <__gethex+0x152>
 8012b94:	4b5c      	ldr	r3, [pc, #368]	@ (8012d08 <__gethex+0x2b4>)
 8012b96:	4602      	mov	r2, r0
 8012b98:	21e4      	movs	r1, #228	@ 0xe4
 8012b9a:	485c      	ldr	r0, [pc, #368]	@ (8012d0c <__gethex+0x2b8>)
 8012b9c:	f7ff fec0 	bl	8012920 <__assert_func>
 8012ba0:	3101      	adds	r1, #1
 8012ba2:	105b      	asrs	r3, r3, #1
 8012ba4:	e7ef      	b.n	8012b86 <__gethex+0x132>
 8012ba6:	f100 0a14 	add.w	sl, r0, #20
 8012baa:	2300      	movs	r3, #0
 8012bac:	4655      	mov	r5, sl
 8012bae:	469b      	mov	fp, r3
 8012bb0:	45b1      	cmp	r9, r6
 8012bb2:	d337      	bcc.n	8012c24 <__gethex+0x1d0>
 8012bb4:	f845 bb04 	str.w	fp, [r5], #4
 8012bb8:	eba5 050a 	sub.w	r5, r5, sl
 8012bbc:	10ad      	asrs	r5, r5, #2
 8012bbe:	6125      	str	r5, [r4, #16]
 8012bc0:	4658      	mov	r0, fp
 8012bc2:	f7fe fa9b 	bl	80110fc <__hi0bits>
 8012bc6:	016d      	lsls	r5, r5, #5
 8012bc8:	f8d8 6000 	ldr.w	r6, [r8]
 8012bcc:	1a2d      	subs	r5, r5, r0
 8012bce:	42b5      	cmp	r5, r6
 8012bd0:	dd54      	ble.n	8012c7c <__gethex+0x228>
 8012bd2:	1bad      	subs	r5, r5, r6
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f7fe fe2f 	bl	801183a <__any_on>
 8012bdc:	4681      	mov	r9, r0
 8012bde:	b178      	cbz	r0, 8012c00 <__gethex+0x1ac>
 8012be0:	1e6b      	subs	r3, r5, #1
 8012be2:	1159      	asrs	r1, r3, #5
 8012be4:	f003 021f 	and.w	r2, r3, #31
 8012be8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012bec:	f04f 0901 	mov.w	r9, #1
 8012bf0:	fa09 f202 	lsl.w	r2, r9, r2
 8012bf4:	420a      	tst	r2, r1
 8012bf6:	d003      	beq.n	8012c00 <__gethex+0x1ac>
 8012bf8:	454b      	cmp	r3, r9
 8012bfa:	dc36      	bgt.n	8012c6a <__gethex+0x216>
 8012bfc:	f04f 0902 	mov.w	r9, #2
 8012c00:	4629      	mov	r1, r5
 8012c02:	4620      	mov	r0, r4
 8012c04:	f7ff febe 	bl	8012984 <rshift>
 8012c08:	442f      	add	r7, r5
 8012c0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012c0e:	42bb      	cmp	r3, r7
 8012c10:	da42      	bge.n	8012c98 <__gethex+0x244>
 8012c12:	9801      	ldr	r0, [sp, #4]
 8012c14:	4621      	mov	r1, r4
 8012c16:	f7fe f9bf 	bl	8010f98 <_Bfree>
 8012c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	6013      	str	r3, [r2, #0]
 8012c20:	25a3      	movs	r5, #163	@ 0xa3
 8012c22:	e793      	b.n	8012b4c <__gethex+0xf8>
 8012c24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012c28:	2a2e      	cmp	r2, #46	@ 0x2e
 8012c2a:	d012      	beq.n	8012c52 <__gethex+0x1fe>
 8012c2c:	2b20      	cmp	r3, #32
 8012c2e:	d104      	bne.n	8012c3a <__gethex+0x1e6>
 8012c30:	f845 bb04 	str.w	fp, [r5], #4
 8012c34:	f04f 0b00 	mov.w	fp, #0
 8012c38:	465b      	mov	r3, fp
 8012c3a:	7830      	ldrb	r0, [r6, #0]
 8012c3c:	9303      	str	r3, [sp, #12]
 8012c3e:	f7ff fef3 	bl	8012a28 <__hexdig_fun>
 8012c42:	9b03      	ldr	r3, [sp, #12]
 8012c44:	f000 000f 	and.w	r0, r0, #15
 8012c48:	4098      	lsls	r0, r3
 8012c4a:	ea4b 0b00 	orr.w	fp, fp, r0
 8012c4e:	3304      	adds	r3, #4
 8012c50:	e7ae      	b.n	8012bb0 <__gethex+0x15c>
 8012c52:	45b1      	cmp	r9, r6
 8012c54:	d8ea      	bhi.n	8012c2c <__gethex+0x1d8>
 8012c56:	492b      	ldr	r1, [pc, #172]	@ (8012d04 <__gethex+0x2b0>)
 8012c58:	9303      	str	r3, [sp, #12]
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	4630      	mov	r0, r6
 8012c5e:	f7ff fe33 	bl	80128c8 <strncmp>
 8012c62:	9b03      	ldr	r3, [sp, #12]
 8012c64:	2800      	cmp	r0, #0
 8012c66:	d1e1      	bne.n	8012c2c <__gethex+0x1d8>
 8012c68:	e7a2      	b.n	8012bb0 <__gethex+0x15c>
 8012c6a:	1ea9      	subs	r1, r5, #2
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	f7fe fde4 	bl	801183a <__any_on>
 8012c72:	2800      	cmp	r0, #0
 8012c74:	d0c2      	beq.n	8012bfc <__gethex+0x1a8>
 8012c76:	f04f 0903 	mov.w	r9, #3
 8012c7a:	e7c1      	b.n	8012c00 <__gethex+0x1ac>
 8012c7c:	da09      	bge.n	8012c92 <__gethex+0x23e>
 8012c7e:	1b75      	subs	r5, r6, r5
 8012c80:	4621      	mov	r1, r4
 8012c82:	9801      	ldr	r0, [sp, #4]
 8012c84:	462a      	mov	r2, r5
 8012c86:	f7fe fb9f 	bl	80113c8 <__lshift>
 8012c8a:	1b7f      	subs	r7, r7, r5
 8012c8c:	4604      	mov	r4, r0
 8012c8e:	f100 0a14 	add.w	sl, r0, #20
 8012c92:	f04f 0900 	mov.w	r9, #0
 8012c96:	e7b8      	b.n	8012c0a <__gethex+0x1b6>
 8012c98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012c9c:	42bd      	cmp	r5, r7
 8012c9e:	dd6f      	ble.n	8012d80 <__gethex+0x32c>
 8012ca0:	1bed      	subs	r5, r5, r7
 8012ca2:	42ae      	cmp	r6, r5
 8012ca4:	dc34      	bgt.n	8012d10 <__gethex+0x2bc>
 8012ca6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012caa:	2b02      	cmp	r3, #2
 8012cac:	d022      	beq.n	8012cf4 <__gethex+0x2a0>
 8012cae:	2b03      	cmp	r3, #3
 8012cb0:	d024      	beq.n	8012cfc <__gethex+0x2a8>
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d115      	bne.n	8012ce2 <__gethex+0x28e>
 8012cb6:	42ae      	cmp	r6, r5
 8012cb8:	d113      	bne.n	8012ce2 <__gethex+0x28e>
 8012cba:	2e01      	cmp	r6, #1
 8012cbc:	d10b      	bne.n	8012cd6 <__gethex+0x282>
 8012cbe:	9a02      	ldr	r2, [sp, #8]
 8012cc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012cc4:	6013      	str	r3, [r2, #0]
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	6123      	str	r3, [r4, #16]
 8012cca:	f8ca 3000 	str.w	r3, [sl]
 8012cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012cd0:	2562      	movs	r5, #98	@ 0x62
 8012cd2:	601c      	str	r4, [r3, #0]
 8012cd4:	e73a      	b.n	8012b4c <__gethex+0xf8>
 8012cd6:	1e71      	subs	r1, r6, #1
 8012cd8:	4620      	mov	r0, r4
 8012cda:	f7fe fdae 	bl	801183a <__any_on>
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	d1ed      	bne.n	8012cbe <__gethex+0x26a>
 8012ce2:	9801      	ldr	r0, [sp, #4]
 8012ce4:	4621      	mov	r1, r4
 8012ce6:	f7fe f957 	bl	8010f98 <_Bfree>
 8012cea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012cec:	2300      	movs	r3, #0
 8012cee:	6013      	str	r3, [r2, #0]
 8012cf0:	2550      	movs	r5, #80	@ 0x50
 8012cf2:	e72b      	b.n	8012b4c <__gethex+0xf8>
 8012cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d1f3      	bne.n	8012ce2 <__gethex+0x28e>
 8012cfa:	e7e0      	b.n	8012cbe <__gethex+0x26a>
 8012cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d1dd      	bne.n	8012cbe <__gethex+0x26a>
 8012d02:	e7ee      	b.n	8012ce2 <__gethex+0x28e>
 8012d04:	08016758 	.word	0x08016758
 8012d08:	080165f2 	.word	0x080165f2
 8012d0c:	08016805 	.word	0x08016805
 8012d10:	1e6f      	subs	r7, r5, #1
 8012d12:	f1b9 0f00 	cmp.w	r9, #0
 8012d16:	d130      	bne.n	8012d7a <__gethex+0x326>
 8012d18:	b127      	cbz	r7, 8012d24 <__gethex+0x2d0>
 8012d1a:	4639      	mov	r1, r7
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f7fe fd8c 	bl	801183a <__any_on>
 8012d22:	4681      	mov	r9, r0
 8012d24:	117a      	asrs	r2, r7, #5
 8012d26:	2301      	movs	r3, #1
 8012d28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012d2c:	f007 071f 	and.w	r7, r7, #31
 8012d30:	40bb      	lsls	r3, r7
 8012d32:	4213      	tst	r3, r2
 8012d34:	4629      	mov	r1, r5
 8012d36:	4620      	mov	r0, r4
 8012d38:	bf18      	it	ne
 8012d3a:	f049 0902 	orrne.w	r9, r9, #2
 8012d3e:	f7ff fe21 	bl	8012984 <rshift>
 8012d42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012d46:	1b76      	subs	r6, r6, r5
 8012d48:	2502      	movs	r5, #2
 8012d4a:	f1b9 0f00 	cmp.w	r9, #0
 8012d4e:	d047      	beq.n	8012de0 <__gethex+0x38c>
 8012d50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012d54:	2b02      	cmp	r3, #2
 8012d56:	d015      	beq.n	8012d84 <__gethex+0x330>
 8012d58:	2b03      	cmp	r3, #3
 8012d5a:	d017      	beq.n	8012d8c <__gethex+0x338>
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	d109      	bne.n	8012d74 <__gethex+0x320>
 8012d60:	f019 0f02 	tst.w	r9, #2
 8012d64:	d006      	beq.n	8012d74 <__gethex+0x320>
 8012d66:	f8da 3000 	ldr.w	r3, [sl]
 8012d6a:	ea49 0903 	orr.w	r9, r9, r3
 8012d6e:	f019 0f01 	tst.w	r9, #1
 8012d72:	d10e      	bne.n	8012d92 <__gethex+0x33e>
 8012d74:	f045 0510 	orr.w	r5, r5, #16
 8012d78:	e032      	b.n	8012de0 <__gethex+0x38c>
 8012d7a:	f04f 0901 	mov.w	r9, #1
 8012d7e:	e7d1      	b.n	8012d24 <__gethex+0x2d0>
 8012d80:	2501      	movs	r5, #1
 8012d82:	e7e2      	b.n	8012d4a <__gethex+0x2f6>
 8012d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d86:	f1c3 0301 	rsb	r3, r3, #1
 8012d8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d0f0      	beq.n	8012d74 <__gethex+0x320>
 8012d92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012d96:	f104 0314 	add.w	r3, r4, #20
 8012d9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012d9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012da2:	f04f 0c00 	mov.w	ip, #0
 8012da6:	4618      	mov	r0, r3
 8012da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012db0:	d01b      	beq.n	8012dea <__gethex+0x396>
 8012db2:	3201      	adds	r2, #1
 8012db4:	6002      	str	r2, [r0, #0]
 8012db6:	2d02      	cmp	r5, #2
 8012db8:	f104 0314 	add.w	r3, r4, #20
 8012dbc:	d13c      	bne.n	8012e38 <__gethex+0x3e4>
 8012dbe:	f8d8 2000 	ldr.w	r2, [r8]
 8012dc2:	3a01      	subs	r2, #1
 8012dc4:	42b2      	cmp	r2, r6
 8012dc6:	d109      	bne.n	8012ddc <__gethex+0x388>
 8012dc8:	1171      	asrs	r1, r6, #5
 8012dca:	2201      	movs	r2, #1
 8012dcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012dd0:	f006 061f 	and.w	r6, r6, #31
 8012dd4:	fa02 f606 	lsl.w	r6, r2, r6
 8012dd8:	421e      	tst	r6, r3
 8012dda:	d13a      	bne.n	8012e52 <__gethex+0x3fe>
 8012ddc:	f045 0520 	orr.w	r5, r5, #32
 8012de0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012de2:	601c      	str	r4, [r3, #0]
 8012de4:	9b02      	ldr	r3, [sp, #8]
 8012de6:	601f      	str	r7, [r3, #0]
 8012de8:	e6b0      	b.n	8012b4c <__gethex+0xf8>
 8012dea:	4299      	cmp	r1, r3
 8012dec:	f843 cc04 	str.w	ip, [r3, #-4]
 8012df0:	d8d9      	bhi.n	8012da6 <__gethex+0x352>
 8012df2:	68a3      	ldr	r3, [r4, #8]
 8012df4:	459b      	cmp	fp, r3
 8012df6:	db17      	blt.n	8012e28 <__gethex+0x3d4>
 8012df8:	6861      	ldr	r1, [r4, #4]
 8012dfa:	9801      	ldr	r0, [sp, #4]
 8012dfc:	3101      	adds	r1, #1
 8012dfe:	f7fe f88b 	bl	8010f18 <_Balloc>
 8012e02:	4681      	mov	r9, r0
 8012e04:	b918      	cbnz	r0, 8012e0e <__gethex+0x3ba>
 8012e06:	4b1a      	ldr	r3, [pc, #104]	@ (8012e70 <__gethex+0x41c>)
 8012e08:	4602      	mov	r2, r0
 8012e0a:	2184      	movs	r1, #132	@ 0x84
 8012e0c:	e6c5      	b.n	8012b9a <__gethex+0x146>
 8012e0e:	6922      	ldr	r2, [r4, #16]
 8012e10:	3202      	adds	r2, #2
 8012e12:	f104 010c 	add.w	r1, r4, #12
 8012e16:	0092      	lsls	r2, r2, #2
 8012e18:	300c      	adds	r0, #12
 8012e1a:	f7fd f91a 	bl	8010052 <memcpy>
 8012e1e:	4621      	mov	r1, r4
 8012e20:	9801      	ldr	r0, [sp, #4]
 8012e22:	f7fe f8b9 	bl	8010f98 <_Bfree>
 8012e26:	464c      	mov	r4, r9
 8012e28:	6923      	ldr	r3, [r4, #16]
 8012e2a:	1c5a      	adds	r2, r3, #1
 8012e2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012e30:	6122      	str	r2, [r4, #16]
 8012e32:	2201      	movs	r2, #1
 8012e34:	615a      	str	r2, [r3, #20]
 8012e36:	e7be      	b.n	8012db6 <__gethex+0x362>
 8012e38:	6922      	ldr	r2, [r4, #16]
 8012e3a:	455a      	cmp	r2, fp
 8012e3c:	dd0b      	ble.n	8012e56 <__gethex+0x402>
 8012e3e:	2101      	movs	r1, #1
 8012e40:	4620      	mov	r0, r4
 8012e42:	f7ff fd9f 	bl	8012984 <rshift>
 8012e46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e4a:	3701      	adds	r7, #1
 8012e4c:	42bb      	cmp	r3, r7
 8012e4e:	f6ff aee0 	blt.w	8012c12 <__gethex+0x1be>
 8012e52:	2501      	movs	r5, #1
 8012e54:	e7c2      	b.n	8012ddc <__gethex+0x388>
 8012e56:	f016 061f 	ands.w	r6, r6, #31
 8012e5a:	d0fa      	beq.n	8012e52 <__gethex+0x3fe>
 8012e5c:	4453      	add	r3, sl
 8012e5e:	f1c6 0620 	rsb	r6, r6, #32
 8012e62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012e66:	f7fe f949 	bl	80110fc <__hi0bits>
 8012e6a:	42b0      	cmp	r0, r6
 8012e6c:	dbe7      	blt.n	8012e3e <__gethex+0x3ea>
 8012e6e:	e7f0      	b.n	8012e52 <__gethex+0x3fe>
 8012e70:	080165f2 	.word	0x080165f2

08012e74 <L_shift>:
 8012e74:	f1c2 0208 	rsb	r2, r2, #8
 8012e78:	0092      	lsls	r2, r2, #2
 8012e7a:	b570      	push	{r4, r5, r6, lr}
 8012e7c:	f1c2 0620 	rsb	r6, r2, #32
 8012e80:	6843      	ldr	r3, [r0, #4]
 8012e82:	6804      	ldr	r4, [r0, #0]
 8012e84:	fa03 f506 	lsl.w	r5, r3, r6
 8012e88:	432c      	orrs	r4, r5
 8012e8a:	40d3      	lsrs	r3, r2
 8012e8c:	6004      	str	r4, [r0, #0]
 8012e8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012e92:	4288      	cmp	r0, r1
 8012e94:	d3f4      	bcc.n	8012e80 <L_shift+0xc>
 8012e96:	bd70      	pop	{r4, r5, r6, pc}

08012e98 <__match>:
 8012e98:	b530      	push	{r4, r5, lr}
 8012e9a:	6803      	ldr	r3, [r0, #0]
 8012e9c:	3301      	adds	r3, #1
 8012e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ea2:	b914      	cbnz	r4, 8012eaa <__match+0x12>
 8012ea4:	6003      	str	r3, [r0, #0]
 8012ea6:	2001      	movs	r0, #1
 8012ea8:	bd30      	pop	{r4, r5, pc}
 8012eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012eae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012eb2:	2d19      	cmp	r5, #25
 8012eb4:	bf98      	it	ls
 8012eb6:	3220      	addls	r2, #32
 8012eb8:	42a2      	cmp	r2, r4
 8012eba:	d0f0      	beq.n	8012e9e <__match+0x6>
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	e7f3      	b.n	8012ea8 <__match+0x10>

08012ec0 <__hexnan>:
 8012ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec4:	680b      	ldr	r3, [r1, #0]
 8012ec6:	6801      	ldr	r1, [r0, #0]
 8012ec8:	115e      	asrs	r6, r3, #5
 8012eca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012ece:	f013 031f 	ands.w	r3, r3, #31
 8012ed2:	b087      	sub	sp, #28
 8012ed4:	bf18      	it	ne
 8012ed6:	3604      	addne	r6, #4
 8012ed8:	2500      	movs	r5, #0
 8012eda:	1f37      	subs	r7, r6, #4
 8012edc:	4682      	mov	sl, r0
 8012ede:	4690      	mov	r8, r2
 8012ee0:	9301      	str	r3, [sp, #4]
 8012ee2:	f846 5c04 	str.w	r5, [r6, #-4]
 8012ee6:	46b9      	mov	r9, r7
 8012ee8:	463c      	mov	r4, r7
 8012eea:	9502      	str	r5, [sp, #8]
 8012eec:	46ab      	mov	fp, r5
 8012eee:	784a      	ldrb	r2, [r1, #1]
 8012ef0:	1c4b      	adds	r3, r1, #1
 8012ef2:	9303      	str	r3, [sp, #12]
 8012ef4:	b342      	cbz	r2, 8012f48 <__hexnan+0x88>
 8012ef6:	4610      	mov	r0, r2
 8012ef8:	9105      	str	r1, [sp, #20]
 8012efa:	9204      	str	r2, [sp, #16]
 8012efc:	f7ff fd94 	bl	8012a28 <__hexdig_fun>
 8012f00:	2800      	cmp	r0, #0
 8012f02:	d151      	bne.n	8012fa8 <__hexnan+0xe8>
 8012f04:	9a04      	ldr	r2, [sp, #16]
 8012f06:	9905      	ldr	r1, [sp, #20]
 8012f08:	2a20      	cmp	r2, #32
 8012f0a:	d818      	bhi.n	8012f3e <__hexnan+0x7e>
 8012f0c:	9b02      	ldr	r3, [sp, #8]
 8012f0e:	459b      	cmp	fp, r3
 8012f10:	dd13      	ble.n	8012f3a <__hexnan+0x7a>
 8012f12:	454c      	cmp	r4, r9
 8012f14:	d206      	bcs.n	8012f24 <__hexnan+0x64>
 8012f16:	2d07      	cmp	r5, #7
 8012f18:	dc04      	bgt.n	8012f24 <__hexnan+0x64>
 8012f1a:	462a      	mov	r2, r5
 8012f1c:	4649      	mov	r1, r9
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f7ff ffa8 	bl	8012e74 <L_shift>
 8012f24:	4544      	cmp	r4, r8
 8012f26:	d952      	bls.n	8012fce <__hexnan+0x10e>
 8012f28:	2300      	movs	r3, #0
 8012f2a:	f1a4 0904 	sub.w	r9, r4, #4
 8012f2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012f32:	f8cd b008 	str.w	fp, [sp, #8]
 8012f36:	464c      	mov	r4, r9
 8012f38:	461d      	mov	r5, r3
 8012f3a:	9903      	ldr	r1, [sp, #12]
 8012f3c:	e7d7      	b.n	8012eee <__hexnan+0x2e>
 8012f3e:	2a29      	cmp	r2, #41	@ 0x29
 8012f40:	d157      	bne.n	8012ff2 <__hexnan+0x132>
 8012f42:	3102      	adds	r1, #2
 8012f44:	f8ca 1000 	str.w	r1, [sl]
 8012f48:	f1bb 0f00 	cmp.w	fp, #0
 8012f4c:	d051      	beq.n	8012ff2 <__hexnan+0x132>
 8012f4e:	454c      	cmp	r4, r9
 8012f50:	d206      	bcs.n	8012f60 <__hexnan+0xa0>
 8012f52:	2d07      	cmp	r5, #7
 8012f54:	dc04      	bgt.n	8012f60 <__hexnan+0xa0>
 8012f56:	462a      	mov	r2, r5
 8012f58:	4649      	mov	r1, r9
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f7ff ff8a 	bl	8012e74 <L_shift>
 8012f60:	4544      	cmp	r4, r8
 8012f62:	d936      	bls.n	8012fd2 <__hexnan+0x112>
 8012f64:	f1a8 0204 	sub.w	r2, r8, #4
 8012f68:	4623      	mov	r3, r4
 8012f6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8012f6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012f72:	429f      	cmp	r7, r3
 8012f74:	d2f9      	bcs.n	8012f6a <__hexnan+0xaa>
 8012f76:	1b3b      	subs	r3, r7, r4
 8012f78:	f023 0303 	bic.w	r3, r3, #3
 8012f7c:	3304      	adds	r3, #4
 8012f7e:	3401      	adds	r4, #1
 8012f80:	3e03      	subs	r6, #3
 8012f82:	42b4      	cmp	r4, r6
 8012f84:	bf88      	it	hi
 8012f86:	2304      	movhi	r3, #4
 8012f88:	4443      	add	r3, r8
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	f843 2b04 	str.w	r2, [r3], #4
 8012f90:	429f      	cmp	r7, r3
 8012f92:	d2fb      	bcs.n	8012f8c <__hexnan+0xcc>
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	b91b      	cbnz	r3, 8012fa0 <__hexnan+0xe0>
 8012f98:	4547      	cmp	r7, r8
 8012f9a:	d128      	bne.n	8012fee <__hexnan+0x12e>
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	603b      	str	r3, [r7, #0]
 8012fa0:	2005      	movs	r0, #5
 8012fa2:	b007      	add	sp, #28
 8012fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fa8:	3501      	adds	r5, #1
 8012faa:	2d08      	cmp	r5, #8
 8012fac:	f10b 0b01 	add.w	fp, fp, #1
 8012fb0:	dd06      	ble.n	8012fc0 <__hexnan+0x100>
 8012fb2:	4544      	cmp	r4, r8
 8012fb4:	d9c1      	bls.n	8012f3a <__hexnan+0x7a>
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8012fbc:	2501      	movs	r5, #1
 8012fbe:	3c04      	subs	r4, #4
 8012fc0:	6822      	ldr	r2, [r4, #0]
 8012fc2:	f000 000f 	and.w	r0, r0, #15
 8012fc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012fca:	6020      	str	r0, [r4, #0]
 8012fcc:	e7b5      	b.n	8012f3a <__hexnan+0x7a>
 8012fce:	2508      	movs	r5, #8
 8012fd0:	e7b3      	b.n	8012f3a <__hexnan+0x7a>
 8012fd2:	9b01      	ldr	r3, [sp, #4]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d0dd      	beq.n	8012f94 <__hexnan+0xd4>
 8012fd8:	f1c3 0320 	rsb	r3, r3, #32
 8012fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8012fe0:	40da      	lsrs	r2, r3
 8012fe2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012fe6:	4013      	ands	r3, r2
 8012fe8:	f846 3c04 	str.w	r3, [r6, #-4]
 8012fec:	e7d2      	b.n	8012f94 <__hexnan+0xd4>
 8012fee:	3f04      	subs	r7, #4
 8012ff0:	e7d0      	b.n	8012f94 <__hexnan+0xd4>
 8012ff2:	2004      	movs	r0, #4
 8012ff4:	e7d5      	b.n	8012fa2 <__hexnan+0xe2>

08012ff6 <__ascii_mbtowc>:
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	b901      	cbnz	r1, 8012ffc <__ascii_mbtowc+0x6>
 8012ffa:	a901      	add	r1, sp, #4
 8012ffc:	b142      	cbz	r2, 8013010 <__ascii_mbtowc+0x1a>
 8012ffe:	b14b      	cbz	r3, 8013014 <__ascii_mbtowc+0x1e>
 8013000:	7813      	ldrb	r3, [r2, #0]
 8013002:	600b      	str	r3, [r1, #0]
 8013004:	7812      	ldrb	r2, [r2, #0]
 8013006:	1e10      	subs	r0, r2, #0
 8013008:	bf18      	it	ne
 801300a:	2001      	movne	r0, #1
 801300c:	b002      	add	sp, #8
 801300e:	4770      	bx	lr
 8013010:	4610      	mov	r0, r2
 8013012:	e7fb      	b.n	801300c <__ascii_mbtowc+0x16>
 8013014:	f06f 0001 	mvn.w	r0, #1
 8013018:	e7f8      	b.n	801300c <__ascii_mbtowc+0x16>

0801301a <_realloc_r>:
 801301a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801301e:	4680      	mov	r8, r0
 8013020:	4615      	mov	r5, r2
 8013022:	460c      	mov	r4, r1
 8013024:	b921      	cbnz	r1, 8013030 <_realloc_r+0x16>
 8013026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801302a:	4611      	mov	r1, r2
 801302c:	f7fd bee8 	b.w	8010e00 <_malloc_r>
 8013030:	b92a      	cbnz	r2, 801303e <_realloc_r+0x24>
 8013032:	f7fd fe71 	bl	8010d18 <_free_r>
 8013036:	2400      	movs	r4, #0
 8013038:	4620      	mov	r0, r4
 801303a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801303e:	f000 f840 	bl	80130c2 <_malloc_usable_size_r>
 8013042:	4285      	cmp	r5, r0
 8013044:	4606      	mov	r6, r0
 8013046:	d802      	bhi.n	801304e <_realloc_r+0x34>
 8013048:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801304c:	d8f4      	bhi.n	8013038 <_realloc_r+0x1e>
 801304e:	4629      	mov	r1, r5
 8013050:	4640      	mov	r0, r8
 8013052:	f7fd fed5 	bl	8010e00 <_malloc_r>
 8013056:	4607      	mov	r7, r0
 8013058:	2800      	cmp	r0, #0
 801305a:	d0ec      	beq.n	8013036 <_realloc_r+0x1c>
 801305c:	42b5      	cmp	r5, r6
 801305e:	462a      	mov	r2, r5
 8013060:	4621      	mov	r1, r4
 8013062:	bf28      	it	cs
 8013064:	4632      	movcs	r2, r6
 8013066:	f7fc fff4 	bl	8010052 <memcpy>
 801306a:	4621      	mov	r1, r4
 801306c:	4640      	mov	r0, r8
 801306e:	f7fd fe53 	bl	8010d18 <_free_r>
 8013072:	463c      	mov	r4, r7
 8013074:	e7e0      	b.n	8013038 <_realloc_r+0x1e>

08013076 <__ascii_wctomb>:
 8013076:	4603      	mov	r3, r0
 8013078:	4608      	mov	r0, r1
 801307a:	b141      	cbz	r1, 801308e <__ascii_wctomb+0x18>
 801307c:	2aff      	cmp	r2, #255	@ 0xff
 801307e:	d904      	bls.n	801308a <__ascii_wctomb+0x14>
 8013080:	228a      	movs	r2, #138	@ 0x8a
 8013082:	601a      	str	r2, [r3, #0]
 8013084:	f04f 30ff 	mov.w	r0, #4294967295
 8013088:	4770      	bx	lr
 801308a:	700a      	strb	r2, [r1, #0]
 801308c:	2001      	movs	r0, #1
 801308e:	4770      	bx	lr

08013090 <fiprintf>:
 8013090:	b40e      	push	{r1, r2, r3}
 8013092:	b503      	push	{r0, r1, lr}
 8013094:	4601      	mov	r1, r0
 8013096:	ab03      	add	r3, sp, #12
 8013098:	4805      	ldr	r0, [pc, #20]	@ (80130b0 <fiprintf+0x20>)
 801309a:	f853 2b04 	ldr.w	r2, [r3], #4
 801309e:	6800      	ldr	r0, [r0, #0]
 80130a0:	9301      	str	r3, [sp, #4]
 80130a2:	f000 f83f 	bl	8013124 <_vfiprintf_r>
 80130a6:	b002      	add	sp, #8
 80130a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80130ac:	b003      	add	sp, #12
 80130ae:	4770      	bx	lr
 80130b0:	20000520 	.word	0x20000520

080130b4 <abort>:
 80130b4:	b508      	push	{r3, lr}
 80130b6:	2006      	movs	r0, #6
 80130b8:	f000 fa08 	bl	80134cc <raise>
 80130bc:	2001      	movs	r0, #1
 80130be:	f7f7 fdd2 	bl	800ac66 <_exit>

080130c2 <_malloc_usable_size_r>:
 80130c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130c6:	1f18      	subs	r0, r3, #4
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	bfbc      	itt	lt
 80130cc:	580b      	ldrlt	r3, [r1, r0]
 80130ce:	18c0      	addlt	r0, r0, r3
 80130d0:	4770      	bx	lr

080130d2 <__sfputc_r>:
 80130d2:	6893      	ldr	r3, [r2, #8]
 80130d4:	3b01      	subs	r3, #1
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	b410      	push	{r4}
 80130da:	6093      	str	r3, [r2, #8]
 80130dc:	da08      	bge.n	80130f0 <__sfputc_r+0x1e>
 80130de:	6994      	ldr	r4, [r2, #24]
 80130e0:	42a3      	cmp	r3, r4
 80130e2:	db01      	blt.n	80130e8 <__sfputc_r+0x16>
 80130e4:	290a      	cmp	r1, #10
 80130e6:	d103      	bne.n	80130f0 <__sfputc_r+0x1e>
 80130e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130ec:	f000 b932 	b.w	8013354 <__swbuf_r>
 80130f0:	6813      	ldr	r3, [r2, #0]
 80130f2:	1c58      	adds	r0, r3, #1
 80130f4:	6010      	str	r0, [r2, #0]
 80130f6:	7019      	strb	r1, [r3, #0]
 80130f8:	4608      	mov	r0, r1
 80130fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130fe:	4770      	bx	lr

08013100 <__sfputs_r>:
 8013100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013102:	4606      	mov	r6, r0
 8013104:	460f      	mov	r7, r1
 8013106:	4614      	mov	r4, r2
 8013108:	18d5      	adds	r5, r2, r3
 801310a:	42ac      	cmp	r4, r5
 801310c:	d101      	bne.n	8013112 <__sfputs_r+0x12>
 801310e:	2000      	movs	r0, #0
 8013110:	e007      	b.n	8013122 <__sfputs_r+0x22>
 8013112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013116:	463a      	mov	r2, r7
 8013118:	4630      	mov	r0, r6
 801311a:	f7ff ffda 	bl	80130d2 <__sfputc_r>
 801311e:	1c43      	adds	r3, r0, #1
 8013120:	d1f3      	bne.n	801310a <__sfputs_r+0xa>
 8013122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013124 <_vfiprintf_r>:
 8013124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013128:	460d      	mov	r5, r1
 801312a:	b09d      	sub	sp, #116	@ 0x74
 801312c:	4614      	mov	r4, r2
 801312e:	4698      	mov	r8, r3
 8013130:	4606      	mov	r6, r0
 8013132:	b118      	cbz	r0, 801313c <_vfiprintf_r+0x18>
 8013134:	6a03      	ldr	r3, [r0, #32]
 8013136:	b90b      	cbnz	r3, 801313c <_vfiprintf_r+0x18>
 8013138:	f7fc fe72 	bl	800fe20 <__sinit>
 801313c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801313e:	07d9      	lsls	r1, r3, #31
 8013140:	d405      	bmi.n	801314e <_vfiprintf_r+0x2a>
 8013142:	89ab      	ldrh	r3, [r5, #12]
 8013144:	059a      	lsls	r2, r3, #22
 8013146:	d402      	bmi.n	801314e <_vfiprintf_r+0x2a>
 8013148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801314a:	f7fc ff80 	bl	801004e <__retarget_lock_acquire_recursive>
 801314e:	89ab      	ldrh	r3, [r5, #12]
 8013150:	071b      	lsls	r3, r3, #28
 8013152:	d501      	bpl.n	8013158 <_vfiprintf_r+0x34>
 8013154:	692b      	ldr	r3, [r5, #16]
 8013156:	b99b      	cbnz	r3, 8013180 <_vfiprintf_r+0x5c>
 8013158:	4629      	mov	r1, r5
 801315a:	4630      	mov	r0, r6
 801315c:	f000 f938 	bl	80133d0 <__swsetup_r>
 8013160:	b170      	cbz	r0, 8013180 <_vfiprintf_r+0x5c>
 8013162:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013164:	07dc      	lsls	r4, r3, #31
 8013166:	d504      	bpl.n	8013172 <_vfiprintf_r+0x4e>
 8013168:	f04f 30ff 	mov.w	r0, #4294967295
 801316c:	b01d      	add	sp, #116	@ 0x74
 801316e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013172:	89ab      	ldrh	r3, [r5, #12]
 8013174:	0598      	lsls	r0, r3, #22
 8013176:	d4f7      	bmi.n	8013168 <_vfiprintf_r+0x44>
 8013178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801317a:	f7fc ff69 	bl	8010050 <__retarget_lock_release_recursive>
 801317e:	e7f3      	b.n	8013168 <_vfiprintf_r+0x44>
 8013180:	2300      	movs	r3, #0
 8013182:	9309      	str	r3, [sp, #36]	@ 0x24
 8013184:	2320      	movs	r3, #32
 8013186:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801318a:	f8cd 800c 	str.w	r8, [sp, #12]
 801318e:	2330      	movs	r3, #48	@ 0x30
 8013190:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013340 <_vfiprintf_r+0x21c>
 8013194:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013198:	f04f 0901 	mov.w	r9, #1
 801319c:	4623      	mov	r3, r4
 801319e:	469a      	mov	sl, r3
 80131a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131a4:	b10a      	cbz	r2, 80131aa <_vfiprintf_r+0x86>
 80131a6:	2a25      	cmp	r2, #37	@ 0x25
 80131a8:	d1f9      	bne.n	801319e <_vfiprintf_r+0x7a>
 80131aa:	ebba 0b04 	subs.w	fp, sl, r4
 80131ae:	d00b      	beq.n	80131c8 <_vfiprintf_r+0xa4>
 80131b0:	465b      	mov	r3, fp
 80131b2:	4622      	mov	r2, r4
 80131b4:	4629      	mov	r1, r5
 80131b6:	4630      	mov	r0, r6
 80131b8:	f7ff ffa2 	bl	8013100 <__sfputs_r>
 80131bc:	3001      	adds	r0, #1
 80131be:	f000 80a7 	beq.w	8013310 <_vfiprintf_r+0x1ec>
 80131c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80131c4:	445a      	add	r2, fp
 80131c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80131c8:	f89a 3000 	ldrb.w	r3, [sl]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	f000 809f 	beq.w	8013310 <_vfiprintf_r+0x1ec>
 80131d2:	2300      	movs	r3, #0
 80131d4:	f04f 32ff 	mov.w	r2, #4294967295
 80131d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131dc:	f10a 0a01 	add.w	sl, sl, #1
 80131e0:	9304      	str	r3, [sp, #16]
 80131e2:	9307      	str	r3, [sp, #28]
 80131e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80131e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80131ea:	4654      	mov	r4, sl
 80131ec:	2205      	movs	r2, #5
 80131ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131f2:	4853      	ldr	r0, [pc, #332]	@ (8013340 <_vfiprintf_r+0x21c>)
 80131f4:	f7ec fffc 	bl	80001f0 <memchr>
 80131f8:	9a04      	ldr	r2, [sp, #16]
 80131fa:	b9d8      	cbnz	r0, 8013234 <_vfiprintf_r+0x110>
 80131fc:	06d1      	lsls	r1, r2, #27
 80131fe:	bf44      	itt	mi
 8013200:	2320      	movmi	r3, #32
 8013202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013206:	0713      	lsls	r3, r2, #28
 8013208:	bf44      	itt	mi
 801320a:	232b      	movmi	r3, #43	@ 0x2b
 801320c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013210:	f89a 3000 	ldrb.w	r3, [sl]
 8013214:	2b2a      	cmp	r3, #42	@ 0x2a
 8013216:	d015      	beq.n	8013244 <_vfiprintf_r+0x120>
 8013218:	9a07      	ldr	r2, [sp, #28]
 801321a:	4654      	mov	r4, sl
 801321c:	2000      	movs	r0, #0
 801321e:	f04f 0c0a 	mov.w	ip, #10
 8013222:	4621      	mov	r1, r4
 8013224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013228:	3b30      	subs	r3, #48	@ 0x30
 801322a:	2b09      	cmp	r3, #9
 801322c:	d94b      	bls.n	80132c6 <_vfiprintf_r+0x1a2>
 801322e:	b1b0      	cbz	r0, 801325e <_vfiprintf_r+0x13a>
 8013230:	9207      	str	r2, [sp, #28]
 8013232:	e014      	b.n	801325e <_vfiprintf_r+0x13a>
 8013234:	eba0 0308 	sub.w	r3, r0, r8
 8013238:	fa09 f303 	lsl.w	r3, r9, r3
 801323c:	4313      	orrs	r3, r2
 801323e:	9304      	str	r3, [sp, #16]
 8013240:	46a2      	mov	sl, r4
 8013242:	e7d2      	b.n	80131ea <_vfiprintf_r+0xc6>
 8013244:	9b03      	ldr	r3, [sp, #12]
 8013246:	1d19      	adds	r1, r3, #4
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	9103      	str	r1, [sp, #12]
 801324c:	2b00      	cmp	r3, #0
 801324e:	bfbb      	ittet	lt
 8013250:	425b      	neglt	r3, r3
 8013252:	f042 0202 	orrlt.w	r2, r2, #2
 8013256:	9307      	strge	r3, [sp, #28]
 8013258:	9307      	strlt	r3, [sp, #28]
 801325a:	bfb8      	it	lt
 801325c:	9204      	strlt	r2, [sp, #16]
 801325e:	7823      	ldrb	r3, [r4, #0]
 8013260:	2b2e      	cmp	r3, #46	@ 0x2e
 8013262:	d10a      	bne.n	801327a <_vfiprintf_r+0x156>
 8013264:	7863      	ldrb	r3, [r4, #1]
 8013266:	2b2a      	cmp	r3, #42	@ 0x2a
 8013268:	d132      	bne.n	80132d0 <_vfiprintf_r+0x1ac>
 801326a:	9b03      	ldr	r3, [sp, #12]
 801326c:	1d1a      	adds	r2, r3, #4
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	9203      	str	r2, [sp, #12]
 8013272:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013276:	3402      	adds	r4, #2
 8013278:	9305      	str	r3, [sp, #20]
 801327a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013350 <_vfiprintf_r+0x22c>
 801327e:	7821      	ldrb	r1, [r4, #0]
 8013280:	2203      	movs	r2, #3
 8013282:	4650      	mov	r0, sl
 8013284:	f7ec ffb4 	bl	80001f0 <memchr>
 8013288:	b138      	cbz	r0, 801329a <_vfiprintf_r+0x176>
 801328a:	9b04      	ldr	r3, [sp, #16]
 801328c:	eba0 000a 	sub.w	r0, r0, sl
 8013290:	2240      	movs	r2, #64	@ 0x40
 8013292:	4082      	lsls	r2, r0
 8013294:	4313      	orrs	r3, r2
 8013296:	3401      	adds	r4, #1
 8013298:	9304      	str	r3, [sp, #16]
 801329a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801329e:	4829      	ldr	r0, [pc, #164]	@ (8013344 <_vfiprintf_r+0x220>)
 80132a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80132a4:	2206      	movs	r2, #6
 80132a6:	f7ec ffa3 	bl	80001f0 <memchr>
 80132aa:	2800      	cmp	r0, #0
 80132ac:	d03f      	beq.n	801332e <_vfiprintf_r+0x20a>
 80132ae:	4b26      	ldr	r3, [pc, #152]	@ (8013348 <_vfiprintf_r+0x224>)
 80132b0:	bb1b      	cbnz	r3, 80132fa <_vfiprintf_r+0x1d6>
 80132b2:	9b03      	ldr	r3, [sp, #12]
 80132b4:	3307      	adds	r3, #7
 80132b6:	f023 0307 	bic.w	r3, r3, #7
 80132ba:	3308      	adds	r3, #8
 80132bc:	9303      	str	r3, [sp, #12]
 80132be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132c0:	443b      	add	r3, r7
 80132c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80132c4:	e76a      	b.n	801319c <_vfiprintf_r+0x78>
 80132c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80132ca:	460c      	mov	r4, r1
 80132cc:	2001      	movs	r0, #1
 80132ce:	e7a8      	b.n	8013222 <_vfiprintf_r+0xfe>
 80132d0:	2300      	movs	r3, #0
 80132d2:	3401      	adds	r4, #1
 80132d4:	9305      	str	r3, [sp, #20]
 80132d6:	4619      	mov	r1, r3
 80132d8:	f04f 0c0a 	mov.w	ip, #10
 80132dc:	4620      	mov	r0, r4
 80132de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132e2:	3a30      	subs	r2, #48	@ 0x30
 80132e4:	2a09      	cmp	r2, #9
 80132e6:	d903      	bls.n	80132f0 <_vfiprintf_r+0x1cc>
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d0c6      	beq.n	801327a <_vfiprintf_r+0x156>
 80132ec:	9105      	str	r1, [sp, #20]
 80132ee:	e7c4      	b.n	801327a <_vfiprintf_r+0x156>
 80132f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80132f4:	4604      	mov	r4, r0
 80132f6:	2301      	movs	r3, #1
 80132f8:	e7f0      	b.n	80132dc <_vfiprintf_r+0x1b8>
 80132fa:	ab03      	add	r3, sp, #12
 80132fc:	9300      	str	r3, [sp, #0]
 80132fe:	462a      	mov	r2, r5
 8013300:	4b12      	ldr	r3, [pc, #72]	@ (801334c <_vfiprintf_r+0x228>)
 8013302:	a904      	add	r1, sp, #16
 8013304:	4630      	mov	r0, r6
 8013306:	f7fb ff33 	bl	800f170 <_printf_float>
 801330a:	4607      	mov	r7, r0
 801330c:	1c78      	adds	r0, r7, #1
 801330e:	d1d6      	bne.n	80132be <_vfiprintf_r+0x19a>
 8013310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013312:	07d9      	lsls	r1, r3, #31
 8013314:	d405      	bmi.n	8013322 <_vfiprintf_r+0x1fe>
 8013316:	89ab      	ldrh	r3, [r5, #12]
 8013318:	059a      	lsls	r2, r3, #22
 801331a:	d402      	bmi.n	8013322 <_vfiprintf_r+0x1fe>
 801331c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801331e:	f7fc fe97 	bl	8010050 <__retarget_lock_release_recursive>
 8013322:	89ab      	ldrh	r3, [r5, #12]
 8013324:	065b      	lsls	r3, r3, #25
 8013326:	f53f af1f 	bmi.w	8013168 <_vfiprintf_r+0x44>
 801332a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801332c:	e71e      	b.n	801316c <_vfiprintf_r+0x48>
 801332e:	ab03      	add	r3, sp, #12
 8013330:	9300      	str	r3, [sp, #0]
 8013332:	462a      	mov	r2, r5
 8013334:	4b05      	ldr	r3, [pc, #20]	@ (801334c <_vfiprintf_r+0x228>)
 8013336:	a904      	add	r1, sp, #16
 8013338:	4630      	mov	r0, r6
 801333a:	f7fc f9b1 	bl	800f6a0 <_printf_i>
 801333e:	e7e4      	b.n	801330a <_vfiprintf_r+0x1e6>
 8013340:	080167b0 	.word	0x080167b0
 8013344:	080167ba 	.word	0x080167ba
 8013348:	0800f171 	.word	0x0800f171
 801334c:	08013101 	.word	0x08013101
 8013350:	080167b6 	.word	0x080167b6

08013354 <__swbuf_r>:
 8013354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013356:	460e      	mov	r6, r1
 8013358:	4614      	mov	r4, r2
 801335a:	4605      	mov	r5, r0
 801335c:	b118      	cbz	r0, 8013366 <__swbuf_r+0x12>
 801335e:	6a03      	ldr	r3, [r0, #32]
 8013360:	b90b      	cbnz	r3, 8013366 <__swbuf_r+0x12>
 8013362:	f7fc fd5d 	bl	800fe20 <__sinit>
 8013366:	69a3      	ldr	r3, [r4, #24]
 8013368:	60a3      	str	r3, [r4, #8]
 801336a:	89a3      	ldrh	r3, [r4, #12]
 801336c:	071a      	lsls	r2, r3, #28
 801336e:	d501      	bpl.n	8013374 <__swbuf_r+0x20>
 8013370:	6923      	ldr	r3, [r4, #16]
 8013372:	b943      	cbnz	r3, 8013386 <__swbuf_r+0x32>
 8013374:	4621      	mov	r1, r4
 8013376:	4628      	mov	r0, r5
 8013378:	f000 f82a 	bl	80133d0 <__swsetup_r>
 801337c:	b118      	cbz	r0, 8013386 <__swbuf_r+0x32>
 801337e:	f04f 37ff 	mov.w	r7, #4294967295
 8013382:	4638      	mov	r0, r7
 8013384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013386:	6823      	ldr	r3, [r4, #0]
 8013388:	6922      	ldr	r2, [r4, #16]
 801338a:	1a98      	subs	r0, r3, r2
 801338c:	6963      	ldr	r3, [r4, #20]
 801338e:	b2f6      	uxtb	r6, r6
 8013390:	4283      	cmp	r3, r0
 8013392:	4637      	mov	r7, r6
 8013394:	dc05      	bgt.n	80133a2 <__swbuf_r+0x4e>
 8013396:	4621      	mov	r1, r4
 8013398:	4628      	mov	r0, r5
 801339a:	f7ff fa53 	bl	8012844 <_fflush_r>
 801339e:	2800      	cmp	r0, #0
 80133a0:	d1ed      	bne.n	801337e <__swbuf_r+0x2a>
 80133a2:	68a3      	ldr	r3, [r4, #8]
 80133a4:	3b01      	subs	r3, #1
 80133a6:	60a3      	str	r3, [r4, #8]
 80133a8:	6823      	ldr	r3, [r4, #0]
 80133aa:	1c5a      	adds	r2, r3, #1
 80133ac:	6022      	str	r2, [r4, #0]
 80133ae:	701e      	strb	r6, [r3, #0]
 80133b0:	6962      	ldr	r2, [r4, #20]
 80133b2:	1c43      	adds	r3, r0, #1
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d004      	beq.n	80133c2 <__swbuf_r+0x6e>
 80133b8:	89a3      	ldrh	r3, [r4, #12]
 80133ba:	07db      	lsls	r3, r3, #31
 80133bc:	d5e1      	bpl.n	8013382 <__swbuf_r+0x2e>
 80133be:	2e0a      	cmp	r6, #10
 80133c0:	d1df      	bne.n	8013382 <__swbuf_r+0x2e>
 80133c2:	4621      	mov	r1, r4
 80133c4:	4628      	mov	r0, r5
 80133c6:	f7ff fa3d 	bl	8012844 <_fflush_r>
 80133ca:	2800      	cmp	r0, #0
 80133cc:	d0d9      	beq.n	8013382 <__swbuf_r+0x2e>
 80133ce:	e7d6      	b.n	801337e <__swbuf_r+0x2a>

080133d0 <__swsetup_r>:
 80133d0:	b538      	push	{r3, r4, r5, lr}
 80133d2:	4b29      	ldr	r3, [pc, #164]	@ (8013478 <__swsetup_r+0xa8>)
 80133d4:	4605      	mov	r5, r0
 80133d6:	6818      	ldr	r0, [r3, #0]
 80133d8:	460c      	mov	r4, r1
 80133da:	b118      	cbz	r0, 80133e4 <__swsetup_r+0x14>
 80133dc:	6a03      	ldr	r3, [r0, #32]
 80133de:	b90b      	cbnz	r3, 80133e4 <__swsetup_r+0x14>
 80133e0:	f7fc fd1e 	bl	800fe20 <__sinit>
 80133e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133e8:	0719      	lsls	r1, r3, #28
 80133ea:	d422      	bmi.n	8013432 <__swsetup_r+0x62>
 80133ec:	06da      	lsls	r2, r3, #27
 80133ee:	d407      	bmi.n	8013400 <__swsetup_r+0x30>
 80133f0:	2209      	movs	r2, #9
 80133f2:	602a      	str	r2, [r5, #0]
 80133f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80133f8:	81a3      	strh	r3, [r4, #12]
 80133fa:	f04f 30ff 	mov.w	r0, #4294967295
 80133fe:	e033      	b.n	8013468 <__swsetup_r+0x98>
 8013400:	0758      	lsls	r0, r3, #29
 8013402:	d512      	bpl.n	801342a <__swsetup_r+0x5a>
 8013404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013406:	b141      	cbz	r1, 801341a <__swsetup_r+0x4a>
 8013408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801340c:	4299      	cmp	r1, r3
 801340e:	d002      	beq.n	8013416 <__swsetup_r+0x46>
 8013410:	4628      	mov	r0, r5
 8013412:	f7fd fc81 	bl	8010d18 <_free_r>
 8013416:	2300      	movs	r3, #0
 8013418:	6363      	str	r3, [r4, #52]	@ 0x34
 801341a:	89a3      	ldrh	r3, [r4, #12]
 801341c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013420:	81a3      	strh	r3, [r4, #12]
 8013422:	2300      	movs	r3, #0
 8013424:	6063      	str	r3, [r4, #4]
 8013426:	6923      	ldr	r3, [r4, #16]
 8013428:	6023      	str	r3, [r4, #0]
 801342a:	89a3      	ldrh	r3, [r4, #12]
 801342c:	f043 0308 	orr.w	r3, r3, #8
 8013430:	81a3      	strh	r3, [r4, #12]
 8013432:	6923      	ldr	r3, [r4, #16]
 8013434:	b94b      	cbnz	r3, 801344a <__swsetup_r+0x7a>
 8013436:	89a3      	ldrh	r3, [r4, #12]
 8013438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801343c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013440:	d003      	beq.n	801344a <__swsetup_r+0x7a>
 8013442:	4621      	mov	r1, r4
 8013444:	4628      	mov	r0, r5
 8013446:	f000 f883 	bl	8013550 <__smakebuf_r>
 801344a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801344e:	f013 0201 	ands.w	r2, r3, #1
 8013452:	d00a      	beq.n	801346a <__swsetup_r+0x9a>
 8013454:	2200      	movs	r2, #0
 8013456:	60a2      	str	r2, [r4, #8]
 8013458:	6962      	ldr	r2, [r4, #20]
 801345a:	4252      	negs	r2, r2
 801345c:	61a2      	str	r2, [r4, #24]
 801345e:	6922      	ldr	r2, [r4, #16]
 8013460:	b942      	cbnz	r2, 8013474 <__swsetup_r+0xa4>
 8013462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013466:	d1c5      	bne.n	80133f4 <__swsetup_r+0x24>
 8013468:	bd38      	pop	{r3, r4, r5, pc}
 801346a:	0799      	lsls	r1, r3, #30
 801346c:	bf58      	it	pl
 801346e:	6962      	ldrpl	r2, [r4, #20]
 8013470:	60a2      	str	r2, [r4, #8]
 8013472:	e7f4      	b.n	801345e <__swsetup_r+0x8e>
 8013474:	2000      	movs	r0, #0
 8013476:	e7f7      	b.n	8013468 <__swsetup_r+0x98>
 8013478:	20000520 	.word	0x20000520

0801347c <_raise_r>:
 801347c:	291f      	cmp	r1, #31
 801347e:	b538      	push	{r3, r4, r5, lr}
 8013480:	4605      	mov	r5, r0
 8013482:	460c      	mov	r4, r1
 8013484:	d904      	bls.n	8013490 <_raise_r+0x14>
 8013486:	2316      	movs	r3, #22
 8013488:	6003      	str	r3, [r0, #0]
 801348a:	f04f 30ff 	mov.w	r0, #4294967295
 801348e:	bd38      	pop	{r3, r4, r5, pc}
 8013490:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013492:	b112      	cbz	r2, 801349a <_raise_r+0x1e>
 8013494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013498:	b94b      	cbnz	r3, 80134ae <_raise_r+0x32>
 801349a:	4628      	mov	r0, r5
 801349c:	f000 f830 	bl	8013500 <_getpid_r>
 80134a0:	4622      	mov	r2, r4
 80134a2:	4601      	mov	r1, r0
 80134a4:	4628      	mov	r0, r5
 80134a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134aa:	f000 b817 	b.w	80134dc <_kill_r>
 80134ae:	2b01      	cmp	r3, #1
 80134b0:	d00a      	beq.n	80134c8 <_raise_r+0x4c>
 80134b2:	1c59      	adds	r1, r3, #1
 80134b4:	d103      	bne.n	80134be <_raise_r+0x42>
 80134b6:	2316      	movs	r3, #22
 80134b8:	6003      	str	r3, [r0, #0]
 80134ba:	2001      	movs	r0, #1
 80134bc:	e7e7      	b.n	801348e <_raise_r+0x12>
 80134be:	2100      	movs	r1, #0
 80134c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80134c4:	4620      	mov	r0, r4
 80134c6:	4798      	blx	r3
 80134c8:	2000      	movs	r0, #0
 80134ca:	e7e0      	b.n	801348e <_raise_r+0x12>

080134cc <raise>:
 80134cc:	4b02      	ldr	r3, [pc, #8]	@ (80134d8 <raise+0xc>)
 80134ce:	4601      	mov	r1, r0
 80134d0:	6818      	ldr	r0, [r3, #0]
 80134d2:	f7ff bfd3 	b.w	801347c <_raise_r>
 80134d6:	bf00      	nop
 80134d8:	20000520 	.word	0x20000520

080134dc <_kill_r>:
 80134dc:	b538      	push	{r3, r4, r5, lr}
 80134de:	4d07      	ldr	r5, [pc, #28]	@ (80134fc <_kill_r+0x20>)
 80134e0:	2300      	movs	r3, #0
 80134e2:	4604      	mov	r4, r0
 80134e4:	4608      	mov	r0, r1
 80134e6:	4611      	mov	r1, r2
 80134e8:	602b      	str	r3, [r5, #0]
 80134ea:	f7f7 fbac 	bl	800ac46 <_kill>
 80134ee:	1c43      	adds	r3, r0, #1
 80134f0:	d102      	bne.n	80134f8 <_kill_r+0x1c>
 80134f2:	682b      	ldr	r3, [r5, #0]
 80134f4:	b103      	cbz	r3, 80134f8 <_kill_r+0x1c>
 80134f6:	6023      	str	r3, [r4, #0]
 80134f8:	bd38      	pop	{r3, r4, r5, pc}
 80134fa:	bf00      	nop
 80134fc:	200087b8 	.word	0x200087b8

08013500 <_getpid_r>:
 8013500:	f7f7 bb99 	b.w	800ac36 <_getpid>

08013504 <__swhatbuf_r>:
 8013504:	b570      	push	{r4, r5, r6, lr}
 8013506:	460c      	mov	r4, r1
 8013508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801350c:	2900      	cmp	r1, #0
 801350e:	b096      	sub	sp, #88	@ 0x58
 8013510:	4615      	mov	r5, r2
 8013512:	461e      	mov	r6, r3
 8013514:	da0d      	bge.n	8013532 <__swhatbuf_r+0x2e>
 8013516:	89a3      	ldrh	r3, [r4, #12]
 8013518:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801351c:	f04f 0100 	mov.w	r1, #0
 8013520:	bf14      	ite	ne
 8013522:	2340      	movne	r3, #64	@ 0x40
 8013524:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013528:	2000      	movs	r0, #0
 801352a:	6031      	str	r1, [r6, #0]
 801352c:	602b      	str	r3, [r5, #0]
 801352e:	b016      	add	sp, #88	@ 0x58
 8013530:	bd70      	pop	{r4, r5, r6, pc}
 8013532:	466a      	mov	r2, sp
 8013534:	f000 f848 	bl	80135c8 <_fstat_r>
 8013538:	2800      	cmp	r0, #0
 801353a:	dbec      	blt.n	8013516 <__swhatbuf_r+0x12>
 801353c:	9901      	ldr	r1, [sp, #4]
 801353e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013542:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013546:	4259      	negs	r1, r3
 8013548:	4159      	adcs	r1, r3
 801354a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801354e:	e7eb      	b.n	8013528 <__swhatbuf_r+0x24>

08013550 <__smakebuf_r>:
 8013550:	898b      	ldrh	r3, [r1, #12]
 8013552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013554:	079d      	lsls	r5, r3, #30
 8013556:	4606      	mov	r6, r0
 8013558:	460c      	mov	r4, r1
 801355a:	d507      	bpl.n	801356c <__smakebuf_r+0x1c>
 801355c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013560:	6023      	str	r3, [r4, #0]
 8013562:	6123      	str	r3, [r4, #16]
 8013564:	2301      	movs	r3, #1
 8013566:	6163      	str	r3, [r4, #20]
 8013568:	b003      	add	sp, #12
 801356a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801356c:	ab01      	add	r3, sp, #4
 801356e:	466a      	mov	r2, sp
 8013570:	f7ff ffc8 	bl	8013504 <__swhatbuf_r>
 8013574:	9f00      	ldr	r7, [sp, #0]
 8013576:	4605      	mov	r5, r0
 8013578:	4639      	mov	r1, r7
 801357a:	4630      	mov	r0, r6
 801357c:	f7fd fc40 	bl	8010e00 <_malloc_r>
 8013580:	b948      	cbnz	r0, 8013596 <__smakebuf_r+0x46>
 8013582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013586:	059a      	lsls	r2, r3, #22
 8013588:	d4ee      	bmi.n	8013568 <__smakebuf_r+0x18>
 801358a:	f023 0303 	bic.w	r3, r3, #3
 801358e:	f043 0302 	orr.w	r3, r3, #2
 8013592:	81a3      	strh	r3, [r4, #12]
 8013594:	e7e2      	b.n	801355c <__smakebuf_r+0xc>
 8013596:	89a3      	ldrh	r3, [r4, #12]
 8013598:	6020      	str	r0, [r4, #0]
 801359a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801359e:	81a3      	strh	r3, [r4, #12]
 80135a0:	9b01      	ldr	r3, [sp, #4]
 80135a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80135a6:	b15b      	cbz	r3, 80135c0 <__smakebuf_r+0x70>
 80135a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135ac:	4630      	mov	r0, r6
 80135ae:	f000 f81d 	bl	80135ec <_isatty_r>
 80135b2:	b128      	cbz	r0, 80135c0 <__smakebuf_r+0x70>
 80135b4:	89a3      	ldrh	r3, [r4, #12]
 80135b6:	f023 0303 	bic.w	r3, r3, #3
 80135ba:	f043 0301 	orr.w	r3, r3, #1
 80135be:	81a3      	strh	r3, [r4, #12]
 80135c0:	89a3      	ldrh	r3, [r4, #12]
 80135c2:	431d      	orrs	r5, r3
 80135c4:	81a5      	strh	r5, [r4, #12]
 80135c6:	e7cf      	b.n	8013568 <__smakebuf_r+0x18>

080135c8 <_fstat_r>:
 80135c8:	b538      	push	{r3, r4, r5, lr}
 80135ca:	4d07      	ldr	r5, [pc, #28]	@ (80135e8 <_fstat_r+0x20>)
 80135cc:	2300      	movs	r3, #0
 80135ce:	4604      	mov	r4, r0
 80135d0:	4608      	mov	r0, r1
 80135d2:	4611      	mov	r1, r2
 80135d4:	602b      	str	r3, [r5, #0]
 80135d6:	f7f7 fb96 	bl	800ad06 <_fstat>
 80135da:	1c43      	adds	r3, r0, #1
 80135dc:	d102      	bne.n	80135e4 <_fstat_r+0x1c>
 80135de:	682b      	ldr	r3, [r5, #0]
 80135e0:	b103      	cbz	r3, 80135e4 <_fstat_r+0x1c>
 80135e2:	6023      	str	r3, [r4, #0]
 80135e4:	bd38      	pop	{r3, r4, r5, pc}
 80135e6:	bf00      	nop
 80135e8:	200087b8 	.word	0x200087b8

080135ec <_isatty_r>:
 80135ec:	b538      	push	{r3, r4, r5, lr}
 80135ee:	4d06      	ldr	r5, [pc, #24]	@ (8013608 <_isatty_r+0x1c>)
 80135f0:	2300      	movs	r3, #0
 80135f2:	4604      	mov	r4, r0
 80135f4:	4608      	mov	r0, r1
 80135f6:	602b      	str	r3, [r5, #0]
 80135f8:	f7f7 fb95 	bl	800ad26 <_isatty>
 80135fc:	1c43      	adds	r3, r0, #1
 80135fe:	d102      	bne.n	8013606 <_isatty_r+0x1a>
 8013600:	682b      	ldr	r3, [r5, #0]
 8013602:	b103      	cbz	r3, 8013606 <_isatty_r+0x1a>
 8013604:	6023      	str	r3, [r4, #0]
 8013606:	bd38      	pop	{r3, r4, r5, pc}
 8013608:	200087b8 	.word	0x200087b8

0801360c <_init>:
 801360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801360e:	bf00      	nop
 8013610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013612:	bc08      	pop	{r3}
 8013614:	469e      	mov	lr, r3
 8013616:	4770      	bx	lr

08013618 <_fini>:
 8013618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801361a:	bf00      	nop
 801361c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801361e:	bc08      	pop	{r3}
 8013620:	469e      	mov	lr, r3
 8013622:	4770      	bx	lr
