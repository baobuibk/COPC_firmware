
cpoc_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b34c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d20  0800b4e0  0800b4e0  0000c4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d200  0800d200  0000f4bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d200  0800d200  0000e200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d208  0800d208  0000f4bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d208  0800d208  0000e208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d20c  0800d20c  0000e20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004bc  20000000  0800d210  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f4bc  2**0
                  CONTENTS
 10 .bss          00000a78  200004bc  200004bc  0000f4bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f34  20000f34  0000f4bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f4bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af58  00000000  00000000  0000f4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea1  00000000  00000000  0001a444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0001d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000931  00000000  00000000  0001df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d100  00000000  00000000  0001e881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e830  00000000  00000000  0003b981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000948f6  00000000  00000000  0004a1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000deaa7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044d8  00000000  00000000  000deaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000e2fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004bc 	.word	0x200004bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b4c4 	.word	0x0800b4c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004c0 	.word	0x200004c0
 80001cc:	0800b4c4 	.word	0x0800b4c4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001014:	2b80      	cmp	r3, #128	@ 0x80
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103a:	2b40      	cmp	r3, #64	@ 0x40
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <DS3231_Write>:
#include "ds3231.h"

#define DS3231_ADDRESS 0xD0

void DS3231_Write(uint8_t reg, uint8_t data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 80011a0:	bf00      	nop
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <DS3231_Write+0x8c>)
 80011a4:	f7ff ff7a 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <DS3231_Write+0x12>
    LL_I2C_GenerateStartCondition(I2C1);
 80011ae:	481b      	ldr	r0, [pc, #108]	@ (800121c <DS3231_Write+0x8c>)
 80011b0:	f7ff ffac 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 80011b4:	bf00      	nop
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <DS3231_Write+0x8c>)
 80011b8:	f7ff ff4a 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <DS3231_Write+0x26>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 80011c2:	21d0      	movs	r1, #208	@ 0xd0
 80011c4:	4815      	ldr	r0, [pc, #84]	@ (800121c <DS3231_Write+0x8c>)
 80011c6:	f7ff ffce 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80011ca:	bf00      	nop
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <DS3231_Write+0x8c>)
 80011ce:	f7ff ff52 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <DS3231_Write+0x3c>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <DS3231_Write+0x8c>)
 80011da:	f7ff ff72 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <DS3231_Write+0x8c>)
 80011e4:	f7ff ffbf 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011e8:	bf00      	nop
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <DS3231_Write+0x8c>)
 80011ec:	f7ff ff0a 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f9      	beq.n	80011ea <DS3231_Write+0x5a>
    LL_I2C_TransmitData8(I2C1, data);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <DS3231_Write+0x8c>)
 80011fc:	f7ff ffb3 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001200:	bf00      	nop
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <DS3231_Write+0x8c>)
 8001204:	f7ff fefe 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <DS3231_Write+0x72>
    LL_I2C_GenerateStopCondition(I2C1);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <DS3231_Write+0x8c>)
 8001210:	f7ff ff8c 	bl	800112c <LL_I2C_GenerateStopCondition>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400

08001220 <DS3231_Read>:

uint8_t DS3231_Read(uint8_t reg)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 800122e:	bf00      	nop
 8001230:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <DS3231_Read+0xc4>)
 8001232:	f7ff ff33 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <DS3231_Read+0x10>
    LL_I2C_GenerateStartCondition(I2C1);
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <DS3231_Read+0xc4>)
 800123e:	f7ff ff65 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001242:	bf00      	nop
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <DS3231_Read+0xc4>)
 8001246:	f7ff ff03 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <DS3231_Read+0x24>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 8001250:	21d0      	movs	r1, #208	@ 0xd0
 8001252:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <DS3231_Read+0xc4>)
 8001254:	f7ff ff87 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001258:	bf00      	nop
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <DS3231_Read+0xc4>)
 800125c:	f7ff ff0b 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <DS3231_Read+0x3a>
    LL_I2C_ClearFlag_ADDR(I2C1);
 8001266:	481f      	ldr	r0, [pc, #124]	@ (80012e4 <DS3231_Read+0xc4>)
 8001268:	f7ff ff2b 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <DS3231_Read+0xc4>)
 8001272:	f7ff ff78 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001276:	bf00      	nop
 8001278:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <DS3231_Read+0xc4>)
 800127a:	f7ff fec3 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <DS3231_Read+0x58>
    LL_I2C_GenerateStartCondition(I2C1);
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <DS3231_Read+0xc4>)
 8001286:	f7ff ff41 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800128a:	bf00      	nop
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <DS3231_Read+0xc4>)
 800128e:	f7ff fedf 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <DS3231_Read+0x6c>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS | 1);
 8001298:	21d1      	movs	r1, #209	@ 0xd1
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <DS3231_Read+0xc4>)
 800129c:	f7ff ff63 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80012a0:	bf00      	nop
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <DS3231_Read+0xc4>)
 80012a4:	f7ff fee7 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f9      	beq.n	80012a2 <DS3231_Read+0x82>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b0:	f7ff ff07 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80012b4:	2100      	movs	r1, #0
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b8:	f7ff ff15 	bl	80010e6 <LL_I2C_AcknowledgeNextData>
    while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80012bc:	bf00      	nop
 80012be:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <DS3231_Read+0xc4>)
 80012c0:	f7ff feb3 	bl	800102a <LL_I2C_IsActiveFlag_RXNE>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <DS3231_Read+0x9e>
    data = LL_I2C_ReceiveData8(I2C1);
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <DS3231_Read+0xc4>)
 80012cc:	f7ff ff3e 	bl	800114c <LL_I2C_ReceiveData8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
    LL_I2C_GenerateStopCondition(I2C1);
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <DS3231_Read+0xc4>)
 80012d6:	f7ff ff29 	bl	800112c <LL_I2C_GenerateStopCondition>
    return data;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400

080012e8 <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t hour, uint8_t min, uint8_t sec)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	460b      	mov	r3, r1
 8001300:	717b      	strb	r3, [r7, #5]
 8001302:	4613      	mov	r3, r2
 8001304:	713b      	strb	r3, [r7, #4]
    DS3231_Write(0x00, ((sec / 10) << 4) | (sec % 10));
 8001306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130a:	4a55      	ldr	r2, [pc, #340]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b258      	sxtb	r0, r3
 8001318:	f897 2020 	ldrb.w	r2, [r7, #32]
 800131c:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4303      	orrs	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff28 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x01, ((min / 10) << 4) | (min % 10));
 8001340:	7f3b      	ldrb	r3, [r7, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	b258      	sxtb	r0, r3
 8001350:	7f3a      	ldrb	r2, [r7, #28]
 8001352:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001354:	fba3 1302 	umull	r1, r3, r3, r2
 8001358:	08d9      	lsrs	r1, r3, #3
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4303      	orrs	r3, r0
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff0d 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x02, ((hour / 10) << 4) | (hour % 10));
 8001376:	7e3b      	ldrb	r3, [r7, #24]
 8001378:	4a39      	ldr	r2, [pc, #228]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b258      	sxtb	r0, r3
 8001386:	7e3a      	ldrb	r2, [r7, #24]
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800138a:	fba3 1302 	umull	r1, r3, r3, r2
 800138e:	08d9      	lsrs	r1, r3, #3
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4303      	orrs	r3, r0
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fef2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x03, day);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2003      	movs	r0, #3
 80013b2:	f7ff feed 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x04, ((date / 10) << 4) | (date % 10));
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b258      	sxtb	r0, r3
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4303      	orrs	r3, r0
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff fed2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x05, ((month / 10) << 4) | (month % 10));
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b258      	sxtb	r0, r3
 80013fc:	797a      	ldrb	r2, [r7, #5]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001400:	fba3 1302 	umull	r1, r3, r3, r2
 8001404:	08d9      	lsrs	r1, r3, #3
 8001406:	460b      	mov	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4303      	orrs	r3, r0
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff feb7 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x06, ((year / 10) << 4) | (year % 10));
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b258      	sxtb	r0, r3
 8001432:	793a      	ldrb	r2, [r7, #4]
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001436:	fba3 1302 	umull	r1, r3, r3, r2
 800143a:	08d9      	lsrs	r1, r3, #3
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4303      	orrs	r3, r0
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2006      	movs	r0, #6
 8001454:	f7ff fe9c 	bl	8001190 <DS3231_Write>
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	cccccccd 	.word	0xcccccccd

08001464 <DS3231_GetDateTime>:

void DS3231_GetDateTime(uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year, uint8_t *hour, uint8_t *min, uint8_t *sec)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    *sec = DS3231_Read(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fed4 	bl	8001220 <DS3231_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	701a      	strb	r2, [r3, #0]
    *min = DS3231_Read(0x01);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fecd 	bl	8001220 <DS3231_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	701a      	strb	r2, [r3, #0]
    *hour = DS3231_Read(0x02);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fec6 	bl	8001220 <DS3231_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	701a      	strb	r2, [r3, #0]
    *day = DS3231_Read(0x03);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff febf 	bl	8001220 <DS3231_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
    *date = DS3231_Read(0x04);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff feb8 	bl	8001220 <DS3231_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	701a      	strb	r2, [r3, #0]
    *month = DS3231_Read(0x05);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f7ff feb1 	bl	8001220 <DS3231_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	701a      	strb	r2, [r3, #0]
    *year = DS3231_Read(0x06);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff feaa 	bl	8001220 <DS3231_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]

    *sec = ((*sec >> 4) * 10) + (*sec & 0x0F);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	701a      	strb	r2, [r3, #0]
    *min = ((*min >> 4) * 10) + (*min & 0x0F);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	701a      	strb	r2, [r3, #0]
    *hour = ((*hour >> 4) * 10) + (*hour & 0x0F);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	701a      	strb	r2, [r3, #0]
    *date = ((*date >> 4) * 10) + (*date & 0x0F);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	701a      	strb	r2, [r3, #0]
    *month = ((*month >> 4) * 10) + (*month & 0x0F);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	701a      	strb	r2, [r3, #0]
    *year = ((*year >> 4) * 10) + (*year & 0x0F);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <DS3231_GetTemperature>:

float DS3231_GetTemperature(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
    uint8_t temp_msb = DS3231_Read(0x11);
 80015ba:	2011      	movs	r0, #17
 80015bc:	f7ff fe30 	bl	8001220 <DS3231_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_lsb = DS3231_Read(0x12);
 80015c4:	2012      	movs	r0, #18
 80015c6:	f7ff fe2b 	bl	8001220 <DS3231_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71bb      	strb	r3, [r7, #6]
    int16_t temp = (temp_msb << 8) | temp_lsb;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
    float temperature = temp / 256.0;
 80015dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffaf 	bl	8000544 <__aeabi_i2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <DS3231_GetTemperature+0x5c>)
 80015ec:	f7ff f93e 	bl	800086c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb06 	bl	8000c08 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	603b      	str	r3, [r7, #0]
    return temperature;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40700000 	.word	0x40700000

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	@ (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ffc2 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <systick_timer_init+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <systick_timer_init+0x20>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffc3 	bl	8001668 <SysTick_Config>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200002e0 	.word	0x200002e0
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b20      	cmp	r3, #32
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	2b80      	cmp	r3, #128	@ 0x80
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	330c      	adds	r3, #12
 8001748:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	e853 3f00 	ldrex	r3, [r3]
 8001750:	60bb      	str	r3, [r7, #8]
   return(result);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	330c      	adds	r3, #12
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	61ba      	str	r2, [r7, #24]
 8001762:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001764:	6979      	ldr	r1, [r7, #20]
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	e841 2300 	strex	r3, r2, [r1]
 800176c:	613b      	str	r3, [r7, #16]
   return(result);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e7      	bne.n	8001744 <LL_USART_EnableIT_RXNE+0x8>
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3724      	adds	r7, #36	@ 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001782:	b480      	push	{r7}
 8001784:	b089      	sub	sp, #36	@ 0x24
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	330c      	adds	r3, #12
 800178e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	e853 3f00 	ldrex	r3, [r3]
 8001796:	60bb      	str	r3, [r7, #8]
   return(result);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	330c      	adds	r3, #12
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	61ba      	str	r2, [r7, #24]
 80017a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	e841 2300 	strex	r3, r2, [r1]
 80017b2:	613b      	str	r3, [r7, #16]
   return(result);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1e7      	bne.n	800178a <LL_USART_EnableIT_TXE+0x8>
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	3724      	adds	r7, #36	@ 0x24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3314      	adds	r3, #20
 80017d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	e853 3f00 	ldrex	r3, [r3]
 80017dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3314      	adds	r3, #20
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	61ba      	str	r2, [r7, #24]
 80017ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017f0:	6979      	ldr	r1, [r7, #20]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	e841 2300 	strex	r3, r2, [r1]
 80017f8:	613b      	str	r3, [r7, #16]
   return(result);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e7      	bne.n	80017d0 <LL_USART_EnableIT_ERROR+0x8>
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 800180e:	b480      	push	{r7}
 8001810:	b089      	sub	sp, #36	@ 0x24
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	330c      	adds	r3, #12
 800181a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	e853 3f00 	ldrex	r3, [r3]
 8001822:	60bb      	str	r3, [r7, #8]
   return(result);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f023 0320 	bic.w	r3, r3, #32
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	330c      	adds	r3, #12
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	61ba      	str	r2, [r7, #24]
 8001834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001836:	6979      	ldr	r1, [r7, #20]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	e841 2300 	strex	r3, r2, [r1]
 800183e:	613b      	str	r3, [r7, #16]
   return(result);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e7      	bne.n	8001816 <LL_USART_DisableIT_RXNE+0x8>
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	3724      	adds	r7, #36	@ 0x24
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	330c      	adds	r3, #12
 8001860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	e853 3f00 	ldrex	r3, [r3]
 8001868:	60bb      	str	r3, [r7, #8]
   return(result);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	330c      	adds	r3, #12
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	61ba      	str	r2, [r7, #24]
 800187a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	e841 2300 	strex	r3, r2, [r1]
 8001884:	613b      	str	r3, [r7, #16]
   return(result);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e7      	bne.n	800185c <LL_USART_DisableIT_TXE+0x8>
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3724      	adds	r7, #36	@ 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	2b20      	cmp	r3, #32
 80018ac:	bf0c      	ite	eq
 80018ae:	2301      	moveq	r3, #1
 80018b0:	2300      	movne	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d0:	2b80      	cmp	r3, #128	@ 0x80
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	b2db      	uxtb	r3, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	605a      	str	r2, [r3, #4]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <Ringbuf_init>:
ring_buffer *_tx_buffer6;

void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <Ringbuf_init+0x48>)
 8001926:	4a11      	ldr	r2, [pc, #68]	@ (800196c <Ringbuf_init+0x4c>)
 8001928:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 800192a:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <Ringbuf_init+0x50>)
 800192c:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <Ringbuf_init+0x54>)
 800192e:	601a      	str	r2, [r3, #0]
  _rx_buffer6 = &rx_buffer6;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <Ringbuf_init+0x58>)
 8001932:	4a12      	ldr	r2, [pc, #72]	@ (800197c <Ringbuf_init+0x5c>)
 8001934:	601a      	str	r2, [r3, #0]
  _tx_buffer6 = &tx_buffer6;
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <Ringbuf_init+0x60>)
 8001938:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <Ringbuf_init+0x64>)
 800193a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  LL_USART_EnableIT_ERROR(uart1);
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <Ringbuf_init+0x68>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff41 	bl	80017c8 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart6);
 8001946:	4b11      	ldr	r3, [pc, #68]	@ (800198c <Ringbuf_init+0x6c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff3c 	bl	80017c8 <LL_USART_EnableIT_ERROR>

  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart1);
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <Ringbuf_init+0x68>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fef1 	bl	800173c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart6);
 800195a:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <Ringbuf_init+0x6c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff feec 	bl	800173c <LL_USART_EnableIT_RXNE>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200008f8 	.word	0x200008f8
 800196c:	200004d8 	.word	0x200004d8
 8001970:	200008fc 	.word	0x200008fc
 8001974:	200005e0 	.word	0x200005e0
 8001978:	20000900 	.word	0x20000900
 800197c:	200006e8 	.word	0x200006e8
 8001980:	20000904 	.word	0x20000904
 8001984:	200007f0 	.word	0x200007f0
 8001988:	20000000 	.word	0x20000000
 800198c:	20000004 	.word	0x20000004

08001990 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80019a2:	1c59      	adds	r1, r3, #1
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <store_char+0x78>)
 80019a6:	fba3 2301 	umull	r2, r3, r3, r1
 80019aa:	09da      	lsrs	r2, r3, #7
 80019ac:	4613      	mov	r3, r2
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	1aca      	subs	r2, r1, r3
 80019b4:	60fa      	str	r2, [r7, #12]

  if(i != buffer->tail) {
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d01d      	beq.n	80019fe <store_char+0x6e>
	ATOMIC_BLOCK_START(UART5)
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <store_char+0x7c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff21 	bl	800180e <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(USART6)
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <store_char+0x80>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff1c 	bl	800180e <LL_USART_DisableIT_RXNE>
    buffer->buffer[buffer->head] = c;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	79f9      	ldrb	r1, [r7, #7]
 80019e0:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    ATOMIC_BLOCK_END(UART5)
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <store_char+0x7c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fea4 	bl	800173c <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART6)
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <store_char+0x80>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe9f 	bl	800173c <LL_USART_EnableIT_RXNE>
  }

}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	80808081 	.word	0x80808081
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(USART_TypeDef *uart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  ring_buffer *_rx_buffer;
  if (uart == UART5)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a26      	ldr	r2, [pc, #152]	@ (8001ab8 <Uart_read+0xa4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d103      	bne.n	8001a2c <Uart_read+0x18>
    _rx_buffer = _rx_buffer1;
 8001a24:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <Uart_read+0xa8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e002      	b.n	8001a32 <Uart_read+0x1e>
  else
    _rx_buffer = _rx_buffer6;
 8001a2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <Uart_read+0xac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]

  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d102      	bne.n	8001a48 <Uart_read+0x34>
  {
    return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e033      	b.n	8001ab0 <Uart_read+0x9c>
  }
  else
  {
    ATOMIC_BLOCK_START(uart)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab8 <Uart_read+0xa4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d105      	bne.n	8001a5c <Uart_read+0x48>
 8001a50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <Uart_read+0xb0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff feda 	bl	800180e <LL_USART_DisableIT_RXNE>
 8001a5a:	e004      	b.n	8001a66 <Uart_read+0x52>
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <Uart_read+0xb4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fed4 	bl	800180e <LL_USART_DisableIT_RXNE>
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	72fb      	strb	r3, [r7, #11]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001a78:	1c59      	adds	r1, r3, #1
 8001a7a:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <Uart_read+0xb8>)
 8001a7c:	fba3 2301 	umull	r2, r3, r3, r1
 8001a80:	09da      	lsrs	r2, r3, #7
 8001a82:	4613      	mov	r3, r2
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	1aca      	subs	r2, r1, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    ATOMIC_BLOCK_END(uart)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a09      	ldr	r2, [pc, #36]	@ (8001ab8 <Uart_read+0xa4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d105      	bne.n	8001aa4 <Uart_read+0x90>
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <Uart_read+0xb0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fe4d 	bl	800173c <LL_USART_EnableIT_RXNE>
 8001aa2:	e004      	b.n	8001aae <Uart_read+0x9a>
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <Uart_read+0xb4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fe47 	bl	800173c <LL_USART_EnableIT_RXNE>
    return c;
 8001aae:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40005000 	.word	0x40005000
 8001abc:	200008f8 	.word	0x200008f8
 8001ac0:	20000900 	.word	0x20000900
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	80808081 	.word	0x80808081

08001ad0 <Uart_write>:

void Uart_write(USART_TypeDef *uart, int c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  ring_buffer *_tx_buffer;
  if (uart == UART5)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a2e      	ldr	r2, [pc, #184]	@ (8001b98 <Uart_write+0xc8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d103      	bne.n	8001aea <Uart_write+0x1a>
    _tx_buffer = _tx_buffer1;
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b9c <Uart_write+0xcc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e002      	b.n	8001af0 <Uart_write+0x20>
  else
    _tx_buffer = _tx_buffer6;
 8001aea:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <Uart_write+0xd0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]

	if (c>=0)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db4b      	blt.n	8001b8e <Uart_write+0xbe>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001afc:	1c59      	adds	r1, r3, #1
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <Uart_write+0xd4>)
 8001b00:	fba3 2301 	umull	r2, r3, r3, r1
 8001b04:	09da      	lsrs	r2, r3, #7
 8001b06:	4613      	mov	r3, r2
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	1aca      	subs	r2, r1, r3
 8001b0e:	60ba      	str	r2, [r7, #8]

		ATOMIC_BLOCK_START(uart)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a21      	ldr	r2, [pc, #132]	@ (8001b98 <Uart_write+0xc8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d105      	bne.n	8001b24 <Uart_write+0x54>
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <Uart_write+0xd8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fe76 	bl	800180e <LL_USART_DisableIT_RXNE>
 8001b22:	e004      	b.n	8001b2e <Uart_write+0x5e>
 8001b24:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <Uart_write+0xdc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fe70 	bl	800180e <LL_USART_DisableIT_RXNE>
		while (i == _tx_buffer->tail);
 8001b2e:	bf00      	nop
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d0f9      	beq.n	8001b30 <Uart_write+0x60>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	b2d1      	uxtb	r1, r2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
		ATOMIC_BLOCK_END(uart)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a10      	ldr	r2, [pc, #64]	@ (8001b98 <Uart_write+0xc8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d105      	bne.n	8001b66 <Uart_write+0x96>
 8001b5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <Uart_write+0xd8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fdec 	bl	800173c <LL_USART_EnableIT_RXNE>
 8001b64:	e004      	b.n	8001b70 <Uart_write+0xa0>
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <Uart_write+0xdc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fde6 	bl	800173c <LL_USART_EnableIT_RXNE>

	if (uart == UART5)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <Uart_write+0xc8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d105      	bne.n	8001b84 <Uart_write+0xb4>
      LL_USART_EnableIT_TXE(uart1); // Enable UART transmission interrupt
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <Uart_write+0xd8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fe00 	bl	8001782 <LL_USART_EnableIT_TXE>
    else
      LL_USART_EnableIT_TXE(uart6);
	}
}
 8001b82:	e004      	b.n	8001b8e <Uart_write+0xbe>
      LL_USART_EnableIT_TXE(uart6);
 8001b84:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <Uart_write+0xdc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fdfa 	bl	8001782 <LL_USART_EnableIT_TXE>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40005000 	.word	0x40005000
 8001b9c:	200008fc 	.word	0x200008fc
 8001ba0:	20000904 	.word	0x20000904
 8001ba4:	80808081 	.word	0x80808081
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004

08001bb0 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  ring_buffer *_rx_buffer;
  if (uart == UART5)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <IsDataAvailable+0x54>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d103      	bne.n	8001bc8 <IsDataAvailable+0x18>
    _rx_buffer = _rx_buffer1;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <IsDataAvailable+0x58>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	e002      	b.n	8001bce <IsDataAvailable+0x1e>
  else
    _rx_buffer = _rx_buffer6;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <IsDataAvailable+0x5c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]

  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	33ff      	adds	r3, #255	@ 0xff
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <IsDataAvailable+0x60>)
 8001be8:	fba3 1302 	umull	r1, r3, r3, r2
 8001bec:	09d9      	lsrs	r1, r3, #7
 8001bee:	460b      	mov	r3, r1
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	1a5b      	subs	r3, r3, r1
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29b      	uxth	r3, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40005000 	.word	0x40005000
 8001c08:	200008f8 	.word	0x200008f8
 8001c0c:	20000900 	.word	0x20000900
 8001c10:	80808081 	.word	0x80808081

08001c14 <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (USART_TypeDef *uart, const char *s)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
	while(*s) Uart_write(uart, *s++);
 8001c1e:	e007      	b.n	8001c30 <Uart_sendstring+0x1c>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	603a      	str	r2, [r7, #0]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ff50 	bl	8001ad0 <Uart_write>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f3      	bne.n	8001c20 <Uart_sendstring+0xc>
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <Uart_isr>:
	if (so_far == len) return 1;
	else return 0;
}

void Uart_isr (USART_TypeDef *uart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  //  uint32_t isrflags   = LL_USART_ReadReg(uart, SR);
    ring_buffer *_rx_buffer;
    ring_buffer *_tx_buffer;

    if (uart == UART5) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a30      	ldr	r2, [pc, #192]	@ (8001d10 <Uart_isr+0xcc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d106      	bne.n	8001c62 <Uart_isr+0x1e>
      _rx_buffer = _rx_buffer1;
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <Uart_isr+0xd0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	617b      	str	r3, [r7, #20]
      _tx_buffer = _tx_buffer1;
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <Uart_isr+0xd4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	e005      	b.n	8001c6e <Uart_isr+0x2a>
    } else {
      _rx_buffer = _rx_buffer6;
 8001c62:	4b2e      	ldr	r3, [pc, #184]	@ (8001d1c <Uart_isr+0xd8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	617b      	str	r3, [r7, #20]
      _tx_buffer = _tx_buffer6;
 8001c68:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <Uart_isr+0xdc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	613b      	str	r3, [r7, #16]
    }

    /* if DR is not empty and the Rx Int is enabled */
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fd3e 	bl	80016f0 <LL_USART_IsActiveFlag_RXNE>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d013      	beq.n	8001ca2 <Uart_isr+0x5e>
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fe0d 	bl	800189a <LL_USART_IsEnabledIT_RXNE>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <Uart_isr+0x5e>
    {
        LL_USART_ReceiveData8(uart);                /* Read status register */
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fe2d 	bl	80018e6 <LL_USART_ReceiveData8>
        unsigned char c = LL_USART_ReceiveData8(uart);    /* Read data register */
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fe2a 	bl	80018e6 <LL_USART_ReceiveData8>
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	6979      	ldr	r1, [r7, #20]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fe78 	bl	8001990 <store_char>
        return;
 8001ca0:	e032      	b.n	8001d08 <Uart_isr+0xc4>
    }
    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fd37 	bl	8001716 <LL_USART_IsActiveFlag_TXE>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d02c      	beq.n	8001d08 <Uart_isr+0xc4>
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fe06 	bl	80018c0 <LL_USART_IsEnabledIT_TXE>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d026      	beq.n	8001d08 <Uart_isr+0xc4>
    {
        if(_tx_buffer->head == _tx_buffer->tail)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d103      	bne.n	8001cd2 <Uart_isr+0x8e>
        {
          // Buffer empty, so disable interrupts
          LL_USART_DisableIT_TXE(uart);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fdc2 	bl	8001854 <LL_USART_DisableIT_TXE>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;

          LL_USART_TransmitData8(uart, c);
        }
        return;
 8001cd0:	e019      	b.n	8001d06 <Uart_isr+0xc2>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	73bb      	strb	r3, [r7, #14]
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001ce4:	1c59      	adds	r1, r3, #1
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <Uart_isr+0xe0>)
 8001ce8:	fba3 2301 	umull	r2, r3, r3, r1
 8001cec:	09da      	lsrs	r2, r3, #7
 8001cee:	4613      	mov	r3, r2
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	1aca      	subs	r2, r1, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
          LL_USART_TransmitData8(uart, c);
 8001cfc:	7bbb      	ldrb	r3, [r7, #14]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fdfd 	bl	8001900 <LL_USART_TransmitData8>
        return;
 8001d06:	bf00      	nop
    }
}
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40005000 	.word	0x40005000
 8001d14:	200008f8 	.word	0x200008f8
 8001d18:	200008fc 	.word	0x200008fc
 8001d1c:	20000900 	.word	0x20000900
 8001d20:	20000904 	.word	0x20000904
 8001d24:	80808081 	.word	0x80808081

08001d28 <send_packet_init>:
		status_ACKsend_update					// taskFunction;
	}
};

void send_packet_init(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <send_packet_init+0x1c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
    retryCount = 0;
 8001d32:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <send_packet_init+0x20>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000a08 	.word	0x20000a08
 8001d48:	20000a09 	.word	0x20000a09

08001d4c <set_send_flag>:

void set_send_flag(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
    sendFlag = 1;
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <set_send_flag+0x14>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	20000a08 	.word	0x20000a08

08001d64 <clear_send_flag>:

void clear_send_flag(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <clear_send_flag+0x14>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	20000a08 	.word	0x20000a08

08001d7c <set_fsp_packet>:


void set_fsp_packet(uint8_t *encoded_pkt, uint8_t encoded_len)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
	memset(g_encoded_pkt, 0, sizeof(g_encoded_pkt));
 8001d88:	22ff      	movs	r2, #255	@ 0xff
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4807      	ldr	r0, [pc, #28]	@ (8001dac <set_fsp_packet+0x30>)
 8001d8e:	f006 f83e 	bl	8007e0e <memset>
    memcpy(g_encoded_pkt, encoded_pkt, encoded_len);
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	461a      	mov	r2, r3
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4804      	ldr	r0, [pc, #16]	@ (8001dac <set_fsp_packet+0x30>)
 8001d9a:	f006 f8b8 	bl	8007f0e <memcpy>
    g_encoded_len = encoded_len;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <set_fsp_packet+0x34>)
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	7013      	strb	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000908 	.word	0x20000908
 8001db0:	20000a07 	.word	0x20000a07

08001db4 <send_packet_create_task>:

void send_packet_create_task(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&ACKsend_task_context.taskHandle, &ACKsend_task_context.taskProperty);
 8001db8:	4902      	ldr	r1, [pc, #8]	@ (8001dc4 <send_packet_create_task+0x10>)
 8001dba:	4803      	ldr	r0, [pc, #12]	@ (8001dc8 <send_packet_create_task+0x14>)
 8001dbc:	f004 f95e 	bl	800607c <SCH_TASK_CreateTask>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	20000008 	.word	0x20000008

08001dcc <status_ACKsend_update>:

void	status_ACKsend_update(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0

			if (SCH_TIM_HasCompleted(SCH_TIM_ACK))
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f004 f93c 	bl	8006050 <SCH_TIM_HasCompleted>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d037      	beq.n	8001e4e <status_ACKsend_update+0x82>
			{

			    if (sendFlag)
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <status_ACKsend_update+0x8c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d02d      	beq.n	8001e44 <status_ACKsend_update+0x78>
			    {
			    	if(retryCount < MAX_RETRIES){
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <status_ACKsend_update+0x90>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d81b      	bhi.n	8001e2a <status_ACKsend_update+0x5e>

						for (int i = 0; i < g_encoded_len; i++) {
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	e00a      	b.n	8001e0e <status_ACKsend_update+0x42>
							Uart_write(USART1, g_encoded_pkt[i]);
 8001df8:	4a19      	ldr	r2, [pc, #100]	@ (8001e60 <status_ACKsend_update+0x94>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	4818      	ldr	r0, [pc, #96]	@ (8001e64 <status_ACKsend_update+0x98>)
 8001e04:	f7ff fe64 	bl	8001ad0 <Uart_write>
						for (int i = 0; i < g_encoded_len; i++) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <status_ACKsend_update+0x9c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4293      	cmp	r3, r2
 8001e18:	dbee      	blt.n	8001df8 <status_ACKsend_update+0x2c>
						}
						retryCount++;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <status_ACKsend_update+0x90>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <status_ACKsend_update+0x90>)
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e00c      	b.n	8001e44 <status_ACKsend_update+0x78>
			    	}
			    	else {
			    		retryCount = 0;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <status_ACKsend_update+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
			    		clear_send_flag();
 8001e30:	f7ff ff98 	bl	8001d64 <clear_send_flag>
			    		Uart_sendstring(USART6, "TIMEOUT_NORESPONE");
 8001e34:	490d      	ldr	r1, [pc, #52]	@ (8001e6c <status_ACKsend_update+0xa0>)
 8001e36:	480e      	ldr	r0, [pc, #56]	@ (8001e70 <status_ACKsend_update+0xa4>)
 8001e38:	f7ff feec 	bl	8001c14 <Uart_sendstring>
			    		Uart_sendstring(USART6, "\r\n> ");
 8001e3c:	490d      	ldr	r1, [pc, #52]	@ (8001e74 <status_ACKsend_update+0xa8>)
 8001e3e:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <status_ACKsend_update+0xa4>)
 8001e40:	f7ff fee8 	bl	8001c14 <Uart_sendstring>
			        }


			    }

				SCH_TIM_Start(SCH_TIM_ACK,ACK_TIMEOUT);	//restart
 8001e44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f004 f8eb 	bl	8006024 <SCH_TIM_Start>

			}


		//	[set trang thai]
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000a08 	.word	0x20000a08
 8001e5c:	20000a09 	.word	0x20000a09
 8001e60:	20000908 	.word	0x20000908
 8001e64:	40011000 	.word	0x40011000
 8001e68:	20000a07 	.word	0x20000a07
 8001e6c:	0800b4e0 	.word	0x0800b4e0
 8001e70:	40011400 	.word	0x40011400
 8001e74:	0800b4f4 	.word	0x0800b4f4

08001e78 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	619a      	str	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <Cmd_iou_set_temp>:
//
//    return CMDLINE_PENDING;
//}

int Cmd_iou_set_temp(int argc, char *argv[])
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8001e9a:	af02      	add	r7, sp, #8
 8001e9c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ea0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001ea4:	6018      	str	r0, [r3, #0]
 8001ea6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001eaa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001eae:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8001eb0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001eb4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	dc01      	bgt.n	8001ec2 <Cmd_iou_set_temp+0x2e>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e06c      	b.n	8001f9c <Cmd_iou_set_temp+0x108>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8001ec2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ec6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	dd01      	ble.n	8001ed4 <Cmd_iou_set_temp+0x40>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e063      	b.n	8001f9c <Cmd_iou_set_temp+0x108>

    uint8_t channel = atoi(argv[1]);
 8001ed4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ed8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f004 ff78 	bl	8006dd8 <atoi>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (channel > 4)    return CMDLINE_INVALID_ARG;
 8001eee:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d901      	bls.n	8001efa <Cmd_iou_set_temp+0x66>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e050      	b.n	8001f9c <Cmd_iou_set_temp+0x108>

    uint16_t temp = atoi(argv[2]);
 8001efa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001efe:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3308      	adds	r3, #8
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 ff65 	bl	8006dd8 <atoi>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214

    // Create the command payload
    uint8_t cmd  = CMD_CODE_SET_TEMP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0]  = (uint8_t)(temp & 0xFF); //low
 8001f1a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(temp >> 8);   //high
 8001f24:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  =  channel;
 8001f32:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8001f36:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    fsp_packet_t  fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8001f3a:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8001f3e:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8001f42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	2203      	movs	r2, #3
 8001f50:	f004 fa54 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8001f54:	f107 020f 	add.w	r2, r7, #15
 8001f58:	f107 0110 	add.w	r1, r7, #16
 8001f5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 fad1 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8001f66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f6a:	480f      	ldr	r0, [pc, #60]	@ (8001fa8 <Cmd_iou_set_temp+0x114>)
 8001f6c:	f7ff ff84 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8001f70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f74:	480c      	ldr	r0, [pc, #48]	@ (8001fa8 <Cmd_iou_set_temp+0x114>)
 8001f76:	f7ff ff7f 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8001f7a:	2005      	movs	r0, #5
 8001f7c:	f004 f9b0 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8001f80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001f84:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fef3 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8001f96:	f7ff fed9 	bl	8001d4c <set_send_flag>
//  ==>>>> khi gui thi mo cong ra, + delay vai ms -> Set co`
//	==>>>> Neu vay thi luon luon mo cong, khi mà nhắn bên 1 2 3 4, nhắn bên 1 thì mở luôn bên 1
//	==>>>> Nhắn bên 2 thì mở luôn bên 2 nếu mà chưa nhận được ack -> busy please wait (processing...)
//  ==>>>> Đoạn đấy bỏ vào trong timeout -> Sau đó mới hiện ok, hoặc done gì đó

    return CMDLINE_PENDING;
 8001f9a:	2305      	movs	r3, #5
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40020000 	.word	0x40020000

08001fac <Cmd_iou_get_temp>:


int Cmd_iou_get_temp(int argc, char *argv[])
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8001fb2:	af02      	add	r7, sp, #8
 8001fb4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001fb8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001fbc:	6018      	str	r0, [r3, #0]
 8001fbe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001fc2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001fc6:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8001fc8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001fcc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	dc01      	bgt.n	8001fda <Cmd_iou_get_temp+0x2e>
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e06a      	b.n	80020b0 <Cmd_iou_get_temp+0x104>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8001fda:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001fde:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	dd01      	ble.n	8001fec <Cmd_iou_get_temp+0x40>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e061      	b.n	80020b0 <Cmd_iou_get_temp+0x104>

    uint8_t channel = atoi(argv[1]);
 8001fec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ff0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 feec 	bl	8006dd8 <atoi>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (channel > 4)    return CMDLINE_INVALID_ARG;
 8002006:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800200a:	2b04      	cmp	r3, #4
 800200c:	d901      	bls.n	8002012 <Cmd_iou_get_temp+0x66>
 800200e:	2304      	movs	r3, #4
 8002010:	e04e      	b.n	80020b0 <Cmd_iou_get_temp+0x104>
    uint8_t sensor = atoi(argv[2]);
 8002012:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002016:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3308      	adds	r3, #8
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f004 fed9 	bl	8006dd8 <atoi>
 8002026:	4603      	mov	r3, r0
 8002028:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
    if (sensor > 1)    return CMDLINE_INVALID_ARG;
 800202c:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8002030:	2b01      	cmp	r3, #1
 8002032:	d901      	bls.n	8002038 <Cmd_iou_get_temp+0x8c>
 8002034:	2304      	movs	r3, #4
 8002036:	e03b      	b.n	80020b0 <Cmd_iou_get_temp+0x104>

    uint8_t cmd  = CMD_CODE_GET_TEMP;
 8002038:	2302      	movs	r3, #2
 800203a:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    uint8_t payload[2];

    payload[0] = sensor;
 800203e:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8002042:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1] = channel;
 8002046:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800204a:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800204e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002052:	f897 0215 	ldrb.w	r0, [r7, #533]	@ 0x215
 8002056:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	2301      	movs	r3, #1
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2305      	movs	r3, #5
 8002062:	2202      	movs	r2, #2
 8002064:	f004 f9ca 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002068:	f107 020f 	add.w	r2, r7, #15
 800206c:	f107 0110 	add.w	r1, r7, #16
 8002070:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002074:	4618      	mov	r0, r3
 8002076:	f004 fa47 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800207a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800207e:	480f      	ldr	r0, [pc, #60]	@ (80020bc <Cmd_iou_get_temp+0x110>)
 8002080:	f7ff fefa 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002084:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002088:	480c      	ldr	r0, [pc, #48]	@ (80020bc <Cmd_iou_get_temp+0x110>)
 800208a:	f7ff fef5 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 800208e:	2005      	movs	r0, #5
 8002090:	f004 f926 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002094:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002098:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fe69 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 80020aa:	f7ff fe4f 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 80020ae:	2305      	movs	r3, #5
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40020000 	.word	0x40020000

080020c0 <Cmd_iou_temp_setpoint>:

int Cmd_iou_temp_setpoint(int argc, char *argv[])
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80020c6:	af02      	add	r7, sp, #8
 80020c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80020cc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80020d0:	6018      	str	r0, [r3, #0]
 80020d2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80020d6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80020da:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80020dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80020e0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	dc01      	bgt.n	80020ee <Cmd_iou_temp_setpoint+0x2e>
 80020ea:	2303      	movs	r3, #3
 80020ec:	e053      	b.n	8002196 <Cmd_iou_temp_setpoint+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80020ee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80020f2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	dd01      	ble.n	8002100 <Cmd_iou_temp_setpoint+0x40>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e04a      	b.n	8002196 <Cmd_iou_temp_setpoint+0xd6>
    uint8_t channel = atoi(argv[1]);
 8002100:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002104:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3304      	adds	r3, #4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f004 fe62 	bl	8006dd8 <atoi>
 8002114:	4603      	mov	r3, r0
 8002116:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 4)    return CMDLINE_INVALID_ARG;
 800211a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800211e:	2b04      	cmp	r3, #4
 8002120:	d901      	bls.n	8002126 <Cmd_iou_temp_setpoint+0x66>
 8002122:	2304      	movs	r3, #4
 8002124:	e037      	b.n	8002196 <Cmd_iou_temp_setpoint+0xd6>

    uint8_t cmd  = CMD_CODE_TEMP_SETPOINT;
 8002126:	2303      	movs	r3, #3
 8002128:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0] = channel;
 800212c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002130:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002134:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002138:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 800213c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	2301      	movs	r3, #1
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2305      	movs	r3, #5
 8002148:	2201      	movs	r2, #1
 800214a:	f004 f957 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800214e:	f107 020b 	add.w	r2, r7, #11
 8002152:	f107 010c 	add.w	r1, r7, #12
 8002156:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800215a:	4618      	mov	r0, r3
 800215c:	f004 f9d4 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002160:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002164:	480e      	ldr	r0, [pc, #56]	@ (80021a0 <Cmd_iou_temp_setpoint+0xe0>)
 8002166:	f7ff fe87 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800216a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800216e:	480c      	ldr	r0, [pc, #48]	@ (80021a0 <Cmd_iou_temp_setpoint+0xe0>)
 8002170:	f7ff fe82 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002174:	2005      	movs	r0, #5
 8002176:	f004 f8b3 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800217a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800217e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fdf6 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002190:	f7ff fddc 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002194:	2305      	movs	r3, #5
}
 8002196:	4618      	mov	r0, r3
 8002198:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40020000 	.word	0x40020000

080021a4 <Cmd_iou_tec_ena>:

int Cmd_iou_tec_ena(int argc, char *argv[])
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80021aa:	af02      	add	r7, sp, #8
 80021ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80021b0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80021b4:	6018      	str	r0, [r3, #0]
 80021b6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80021ba:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80021be:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80021c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80021c4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	dc01      	bgt.n	80021d2 <Cmd_iou_tec_ena+0x2e>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e053      	b.n	800227a <Cmd_iou_tec_ena+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80021d2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80021d6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	dd01      	ble.n	80021e4 <Cmd_iou_tec_ena+0x40>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e04a      	b.n	800227a <Cmd_iou_tec_ena+0xd6>
    uint8_t channel = atoi(argv[1]);
 80021e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80021e8:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3304      	adds	r3, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 fdf0 	bl	8006dd8 <atoi>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 4)    return CMDLINE_INVALID_ARG;
 80021fe:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002202:	2b04      	cmp	r3, #4
 8002204:	d901      	bls.n	800220a <Cmd_iou_tec_ena+0x66>
 8002206:	2304      	movs	r3, #4
 8002208:	e037      	b.n	800227a <Cmd_iou_tec_ena+0xd6>

    uint8_t cmd  = CMD_CODE_TEC_ENA;
 800220a:	2304      	movs	r3, #4
 800220c:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0] = channel;
 8002210:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002214:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002218:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800221c:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002220:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	2301      	movs	r3, #1
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2305      	movs	r3, #5
 800222c:	2201      	movs	r2, #1
 800222e:	f004 f8e5 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002232:	f107 020b 	add.w	r2, r7, #11
 8002236:	f107 010c 	add.w	r1, r7, #12
 800223a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f962 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002244:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002248:	480e      	ldr	r0, [pc, #56]	@ (8002284 <Cmd_iou_tec_ena+0xe0>)
 800224a:	f7ff fe15 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800224e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002252:	480c      	ldr	r0, [pc, #48]	@ (8002284 <Cmd_iou_tec_ena+0xe0>)
 8002254:	f7ff fe10 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002258:	2005      	movs	r0, #5
 800225a:	f004 f841 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800225e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002262:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fd84 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002274:	f7ff fd6a 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002278:	2305      	movs	r3, #5
}
 800227a:	4618      	mov	r0, r3
 800227c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40020000 	.word	0x40020000

08002288 <Cmd_iou_tec_dis>:

int Cmd_iou_tec_dis(int argc, char *argv[])
{
 8002288:	b580      	push	{r7, lr}
 800228a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800228e:	af02      	add	r7, sp, #8
 8002290:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002294:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002298:	6018      	str	r0, [r3, #0]
 800229a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800229e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80022a2:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80022a4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80022a8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	dc01      	bgt.n	80022b6 <Cmd_iou_tec_dis+0x2e>
 80022b2:	2303      	movs	r3, #3
 80022b4:	e053      	b.n	800235e <Cmd_iou_tec_dis+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80022b6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80022ba:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	dd01      	ble.n	80022c8 <Cmd_iou_tec_dis+0x40>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e04a      	b.n	800235e <Cmd_iou_tec_dis+0xd6>
    uint8_t channel = atoi(argv[1]);
 80022c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80022cc:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3304      	adds	r3, #4
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 fd7e 	bl	8006dd8 <atoi>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 4)    return CMDLINE_INVALID_ARG;
 80022e2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d901      	bls.n	80022ee <Cmd_iou_tec_dis+0x66>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e037      	b.n	800235e <Cmd_iou_tec_dis+0xd6>

    uint8_t cmd  = CMD_CODE_TEC_DIS;
 80022ee:	2305      	movs	r3, #5
 80022f0:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0] = channel;
 80022f4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80022f8:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80022fc:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002300:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002304:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	2301      	movs	r3, #1
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2305      	movs	r3, #5
 8002310:	2201      	movs	r2, #1
 8002312:	f004 f873 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002316:	f107 020b 	add.w	r2, r7, #11
 800231a:	f107 010c 	add.w	r1, r7, #12
 800231e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002322:	4618      	mov	r0, r3
 8002324:	f004 f8f0 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002328:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800232c:	480e      	ldr	r0, [pc, #56]	@ (8002368 <Cmd_iou_tec_dis+0xe0>)
 800232e:	f7ff fda3 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002332:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002336:	480c      	ldr	r0, [pc, #48]	@ (8002368 <Cmd_iou_tec_dis+0xe0>)
 8002338:	f7ff fd9e 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 800233c:	2005      	movs	r0, #5
 800233e:	f003 ffcf 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002342:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002346:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fd12 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002358:	f7ff fcf8 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 800235c:	2305      	movs	r3, #5
}
 800235e:	4618      	mov	r0, r3
 8002360:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40020000 	.word	0x40020000

0800236c <Cmd_iou_tec_ena_auto>:

int Cmd_iou_tec_ena_auto(int argc, char *argv[])
{
 800236c:	b580      	push	{r7, lr}
 800236e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002372:	af02      	add	r7, sp, #8
 8002374:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002378:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800237c:	6018      	str	r0, [r3, #0]
 800237e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002382:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002386:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8002388:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800238c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	dc01      	bgt.n	800239a <Cmd_iou_tec_ena_auto+0x2e>
 8002396:	2303      	movs	r3, #3
 8002398:	e053      	b.n	8002442 <Cmd_iou_tec_ena_auto+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 800239a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800239e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	dd01      	ble.n	80023ac <Cmd_iou_tec_ena_auto+0x40>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e04a      	b.n	8002442 <Cmd_iou_tec_ena_auto+0xd6>
    uint8_t channel = atoi(argv[1]);
 80023ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80023b0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3304      	adds	r3, #4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 fd0c 	bl	8006dd8 <atoi>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 4)    return CMDLINE_INVALID_ARG;
 80023c6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d901      	bls.n	80023d2 <Cmd_iou_tec_ena_auto+0x66>
 80023ce:	2304      	movs	r3, #4
 80023d0:	e037      	b.n	8002442 <Cmd_iou_tec_ena_auto+0xd6>

    uint8_t cmd  = CMD_CODE_TEC_ENA_AUTO;
 80023d2:	2306      	movs	r3, #6
 80023d4:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0] = channel;
 80023d8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80023dc:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80023e0:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80023e4:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 80023e8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	2301      	movs	r3, #1
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2305      	movs	r3, #5
 80023f4:	2201      	movs	r2, #1
 80023f6:	f004 f801 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80023fa:	f107 020b 	add.w	r2, r7, #11
 80023fe:	f107 010c 	add.w	r1, r7, #12
 8002402:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002406:	4618      	mov	r0, r3
 8002408:	f004 f87e 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800240c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002410:	480e      	ldr	r0, [pc, #56]	@ (800244c <Cmd_iou_tec_ena_auto+0xe0>)
 8002412:	f7ff fd31 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002416:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800241a:	480c      	ldr	r0, [pc, #48]	@ (800244c <Cmd_iou_tec_ena_auto+0xe0>)
 800241c:	f7ff fd2c 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002420:	2005      	movs	r0, #5
 8002422:	f003 ff5d 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002426:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800242a:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fca0 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 800243c:	f7ff fc86 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002440:	2305      	movs	r3, #5
}
 8002442:	4618      	mov	r0, r3
 8002444:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40020000 	.word	0x40020000

08002450 <Cmd_iou_tec_dis_auto>:

int Cmd_iou_tec_dis_auto(int argc, char *argv[])
{
 8002450:	b580      	push	{r7, lr}
 8002452:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002456:	af02      	add	r7, sp, #8
 8002458:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800245c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002460:	6018      	str	r0, [r3, #0]
 8002462:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002466:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800246a:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 800246c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002470:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	dc01      	bgt.n	800247e <Cmd_iou_tec_dis_auto+0x2e>
 800247a:	2303      	movs	r3, #3
 800247c:	e053      	b.n	8002526 <Cmd_iou_tec_dis_auto+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 800247e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002482:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b02      	cmp	r3, #2
 800248a:	dd01      	ble.n	8002490 <Cmd_iou_tec_dis_auto+0x40>
 800248c:	2302      	movs	r3, #2
 800248e:	e04a      	b.n	8002526 <Cmd_iou_tec_dis_auto+0xd6>
    uint8_t channel = atoi(argv[1]);
 8002490:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002494:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3304      	adds	r3, #4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 fc9a 	bl	8006dd8 <atoi>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 4)    return CMDLINE_INVALID_ARG;
 80024aa:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d901      	bls.n	80024b6 <Cmd_iou_tec_dis_auto+0x66>
 80024b2:	2304      	movs	r3, #4
 80024b4:	e037      	b.n	8002526 <Cmd_iou_tec_dis_auto+0xd6>

    uint8_t cmd  = CMD_CODE_TEC_DIS_AUTO;
 80024b6:	2307      	movs	r3, #7
 80024b8:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0] = channel;
 80024bc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80024c0:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80024c4:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80024c8:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 80024cc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	2301      	movs	r3, #1
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2305      	movs	r3, #5
 80024d8:	2201      	movs	r2, #1
 80024da:	f003 ff8f 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80024de:	f107 020b 	add.w	r2, r7, #11
 80024e2:	f107 010c 	add.w	r1, r7, #12
 80024e6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 f80c 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80024f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024f4:	480e      	ldr	r0, [pc, #56]	@ (8002530 <Cmd_iou_tec_dis_auto+0xe0>)
 80024f6:	f7ff fcbf 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80024fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024fe:	480c      	ldr	r0, [pc, #48]	@ (8002530 <Cmd_iou_tec_dis_auto+0xe0>)
 8002500:	f7ff fcba 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002504:	2005      	movs	r0, #5
 8002506:	f003 feeb 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800250a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800250e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fc2e 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002520:	f7ff fc14 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002524:	2305      	movs	r3, #5
}
 8002526:	4618      	mov	r0, r3
 8002528:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40020000 	.word	0x40020000

08002534 <Cmd_iou_tec_set_output>:


int Cmd_iou_tec_set_output(int argc, char *argv[])
{
 8002534:	b580      	push	{r7, lr}
 8002536:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800253a:	af02      	add	r7, sp, #8
 800253c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002540:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002544:	6018      	str	r0, [r3, #0]
 8002546:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800254a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800254e:	6019      	str	r1, [r3, #0]
    if (argc < 4) return CMDLINE_TOO_FEW_ARGS;
 8002550:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002554:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b03      	cmp	r3, #3
 800255c:	dc01      	bgt.n	8002562 <Cmd_iou_tec_set_output+0x2e>
 800255e:	2303      	movs	r3, #3
 8002560:	e083      	b.n	800266a <Cmd_iou_tec_set_output+0x136>
    if (argc > 4) return CMDLINE_TOO_MANY_ARGS;
 8002562:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002566:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b04      	cmp	r3, #4
 800256e:	dd01      	ble.n	8002574 <Cmd_iou_tec_set_output+0x40>
 8002570:	2302      	movs	r3, #2
 8002572:	e07a      	b.n	800266a <Cmd_iou_tec_set_output+0x136>
    uint8_t channel = atoi(argv[1]);
 8002574:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002578:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3304      	adds	r3, #4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f004 fc28 	bl	8006dd8 <atoi>
 8002588:	4603      	mov	r3, r0
 800258a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (channel > 4)    return CMDLINE_INVALID_ARG;
 800258e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002592:	2b04      	cmp	r3, #4
 8002594:	d901      	bls.n	800259a <Cmd_iou_tec_set_output+0x66>
 8002596:	2304      	movs	r3, #4
 8002598:	e067      	b.n	800266a <Cmd_iou_tec_set_output+0x136>

    uint8_t mode = atoi(argv[2]);
 800259a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800259e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3308      	adds	r3, #8
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f004 fc15 	bl	8006dd8 <atoi>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
    if (mode > 1)    return CMDLINE_INVALID_ARG;
 80025b4:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d901      	bls.n	80025c0 <Cmd_iou_tec_set_output+0x8c>
 80025bc:	2304      	movs	r3, #4
 80025be:	e054      	b.n	800266a <Cmd_iou_tec_set_output+0x136>

    uint16_t vol = atoi(argv[3]);
 80025c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80025c4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 fc02 	bl	8006dd8 <atoi>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214



    uint8_t cmd  = CMD_CODE_TEC_SET_OUTPUT;
 80025da:	2308      	movs	r3, #8
 80025dc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];
    payload[0]  = (uint8_t)(vol & 0xFF); //low
 80025e0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = (uint8_t)(vol >> 8);   //high
 80025ea:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2] = mode;
 80025f8:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80025fc:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3] = channel;
 8002600:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002604:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002608:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800260c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002610:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	2301      	movs	r3, #1
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2305      	movs	r3, #5
 800261c:	2204      	movs	r2, #4
 800261e:	f003 feed 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002622:	f107 020b 	add.w	r2, r7, #11
 8002626:	f107 010c 	add.w	r1, r7, #12
 800262a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800262e:	4618      	mov	r0, r3
 8002630:	f003 ff6a 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002634:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002638:	480e      	ldr	r0, [pc, #56]	@ (8002674 <Cmd_iou_tec_set_output+0x140>)
 800263a:	f7ff fc1d 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800263e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002642:	480c      	ldr	r0, [pc, #48]	@ (8002674 <Cmd_iou_tec_set_output+0x140>)
 8002644:	f7ff fc18 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002648:	2005      	movs	r0, #5
 800264a:	f003 fe49 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800264e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002652:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fb8c 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002664:	f7ff fb72 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002668:	2305      	movs	r3, #5
}
 800266a:	4618      	mov	r0, r3
 800266c:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40020000 	.word	0x40020000

08002678 <Cmd_iou_tec_auto_vol>:

int Cmd_iou_tec_auto_vol(int argc, char *argv[])
{
 8002678:	b580      	push	{r7, lr}
 800267a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800267e:	af02      	add	r7, sp, #8
 8002680:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002684:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002688:	6018      	str	r0, [r3, #0]
 800268a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800268e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002692:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8002694:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002698:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	dc01      	bgt.n	80026a6 <Cmd_iou_tec_auto_vol+0x2e>
 80026a2:	2303      	movs	r3, #3
 80026a4:	e06c      	b.n	8002780 <Cmd_iou_tec_auto_vol+0x108>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 80026a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80026aa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	dd01      	ble.n	80026b8 <Cmd_iou_tec_auto_vol+0x40>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e063      	b.n	8002780 <Cmd_iou_tec_auto_vol+0x108>
    uint8_t channel = atoi(argv[1]);
 80026b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80026bc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3304      	adds	r3, #4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 fb86 	bl	8006dd8 <atoi>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (channel > 4)    return CMDLINE_INVALID_ARG;
 80026d2:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d901      	bls.n	80026de <Cmd_iou_tec_auto_vol+0x66>
 80026da:	2304      	movs	r3, #4
 80026dc:	e050      	b.n	8002780 <Cmd_iou_tec_auto_vol+0x108>

    uint16_t vol = atoi(argv[2]);
 80026de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80026e2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3308      	adds	r3, #8
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f004 fb73 	bl	8006dd8 <atoi>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214

    uint8_t cmd  = CMD_CODE_TEC_AUTO_VOL;
 80026f8:	2309      	movs	r3, #9
 80026fa:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0]  = (uint8_t)(vol & 0xFF); //low
 80026fe:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(vol >> 8);   //high
 8002708:	f8b7 3214 	ldrh.w	r3, [r7, #532]	@ 0x214
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	b29b      	uxth	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2] = channel;
 8002716:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800271a:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800271e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002722:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002726:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	2301      	movs	r3, #1
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2305      	movs	r3, #5
 8002732:	2203      	movs	r2, #3
 8002734:	f003 fe62 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002738:	f107 020f 	add.w	r2, r7, #15
 800273c:	f107 0110 	add.w	r1, r7, #16
 8002740:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fedf 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800274a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800274e:	480f      	ldr	r0, [pc, #60]	@ (800278c <Cmd_iou_tec_auto_vol+0x114>)
 8002750:	f7ff fb92 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002754:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002758:	480c      	ldr	r0, [pc, #48]	@ (800278c <Cmd_iou_tec_auto_vol+0x114>)
 800275a:	f7ff fb8d 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 800275e:	2005      	movs	r0, #5
 8002760:	f003 fdbe 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002764:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002768:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	f107 0310 	add.w	r3, r7, #16
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fb01 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 800277a:	f7ff fae7 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 800277e:	2305      	movs	r3, #5
}
 8002780:	4618      	mov	r0, r3
 8002782:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40020000 	.word	0x40020000

08002790 <Cmd_iou_tec_status>:

int Cmd_iou_tec_status(int argc, char *argv[])
{
 8002790:	b580      	push	{r7, lr}
 8002792:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8002796:	af00      	add	r7, sp, #0
 8002798:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800279c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80027a0:	6018      	str	r0, [r3, #0]
 80027a2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80027a6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80027aa:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 80027ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80027b0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	dc01      	bgt.n	80027be <Cmd_iou_tec_status+0x2e>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e037      	b.n	800282e <Cmd_iou_tec_status+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80027be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80027c2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	dd01      	ble.n	80027d0 <Cmd_iou_tec_status+0x40>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e02e      	b.n	800282e <Cmd_iou_tec_status+0x9e>

    uint8_t cmd  = CMD_CODE_TEC_STATUS;
 80027d0:	230a      	movs	r3, #10
 80027d2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80027d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80027da:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80027de:	2201      	movs	r2, #1
 80027e0:	2105      	movs	r1, #5
 80027e2:	f003 fde3 	bl	80063ac <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80027e6:	f107 020f 	add.w	r2, r7, #15
 80027ea:	f107 0110 	add.w	r1, r7, #16
 80027ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fe88 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80027f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027fc:	480e      	ldr	r0, [pc, #56]	@ (8002838 <Cmd_iou_tec_status+0xa8>)
 80027fe:	f7ff fb3b 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002806:	480c      	ldr	r0, [pc, #48]	@ (8002838 <Cmd_iou_tec_status+0xa8>)
 8002808:	f7ff fb36 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 800280c:	2005      	movs	r0, #5
 800280e:	f003 fd67 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002812:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002816:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff faaa 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002828:	f7ff fa90 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 800282c:	2305      	movs	r3, #5
}
 800282e:	4618      	mov	r0, r3
 8002830:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40020000 	.word	0x40020000

0800283c <Cmd_iou_tec_log_ena>:

int Cmd_iou_tec_log_ena(int argc, char *argv[])
{
 800283c:	b580      	push	{r7, lr}
 800283e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8002842:	af00      	add	r7, sp, #0
 8002844:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002848:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800284c:	6018      	str	r0, [r3, #0]
 800284e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002852:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002856:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8002858:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800285c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	dc01      	bgt.n	800286a <Cmd_iou_tec_log_ena+0x2e>
 8002866:	2303      	movs	r3, #3
 8002868:	e037      	b.n	80028da <Cmd_iou_tec_log_ena+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 800286a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800286e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	dd01      	ble.n	800287c <Cmd_iou_tec_log_ena+0x40>
 8002878:	2302      	movs	r3, #2
 800287a:	e02e      	b.n	80028da <Cmd_iou_tec_log_ena+0x9e>

    uint8_t cmd  = CMD_CODE_TEC_LOG_ENA;
 800287c:	230b      	movs	r3, #11
 800287e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002882:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002886:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800288a:	2201      	movs	r2, #1
 800288c:	2105      	movs	r1, #5
 800288e:	f003 fd8d 	bl	80063ac <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002892:	f107 020f 	add.w	r2, r7, #15
 8002896:	f107 0110 	add.w	r1, r7, #16
 800289a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fe32 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80028a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028a8:	480e      	ldr	r0, [pc, #56]	@ (80028e4 <Cmd_iou_tec_log_ena+0xa8>)
 80028aa:	f7ff fae5 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80028ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028b2:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <Cmd_iou_tec_log_ena+0xa8>)
 80028b4:	f7ff fae0 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 80028b8:	2005      	movs	r0, #5
 80028ba:	f003 fd11 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80028be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80028c2:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fa54 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 80028d4:	f7ff fa3a 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 80028d8:	2305      	movs	r3, #5
}
 80028da:	4618      	mov	r0, r3
 80028dc:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40020000 	.word	0x40020000

080028e8 <Cmd_iou_tec_log_dis>:

int Cmd_iou_tec_log_dis(int argc, char *argv[])
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80028f4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80028f8:	6018      	str	r0, [r3, #0]
 80028fa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80028fe:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002902:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8002904:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002908:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	dc01      	bgt.n	8002916 <Cmd_iou_tec_log_dis+0x2e>
 8002912:	2303      	movs	r3, #3
 8002914:	e037      	b.n	8002986 <Cmd_iou_tec_log_dis+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8002916:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800291a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	dd01      	ble.n	8002928 <Cmd_iou_tec_log_dis+0x40>
 8002924:	2302      	movs	r3, #2
 8002926:	e02e      	b.n	8002986 <Cmd_iou_tec_log_dis+0x9e>

    uint8_t cmd  = CMD_CODE_TEC_LOG_DIS;
 8002928:	230c      	movs	r3, #12
 800292a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800292e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002932:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8002936:	2201      	movs	r2, #1
 8002938:	2105      	movs	r1, #5
 800293a:	f003 fd37 	bl	80063ac <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800293e:	f107 020f 	add.w	r2, r7, #15
 8002942:	f107 0110 	add.w	r1, r7, #16
 8002946:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fddc 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002950:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002954:	480e      	ldr	r0, [pc, #56]	@ (8002990 <Cmd_iou_tec_log_dis+0xa8>)
 8002956:	f7ff fa8f 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800295a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800295e:	480c      	ldr	r0, [pc, #48]	@ (8002990 <Cmd_iou_tec_log_dis+0xa8>)
 8002960:	f7ff fa8a 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002964:	2005      	movs	r0, #5
 8002966:	f003 fcbb 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 800296a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800296e:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff f9fe 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002980:	f7ff f9e4 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002984:	2305      	movs	r3, #5
}
 8002986:	4618      	mov	r0, r3
 8002988:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40020000 	.word	0x40020000

08002994 <Cmd_iou_ringled_mode>:

int Cmd_iou_ringled_mode(int argc, char *argv[])
{
 8002994:	b580      	push	{r7, lr}
 8002996:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800299a:	af02      	add	r7, sp, #8
 800299c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80029a0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80029a4:	6018      	str	r0, [r3, #0]
 80029a6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80029aa:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80029ae:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 80029b0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80029b4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	dc01      	bgt.n	80029c2 <Cmd_iou_ringled_mode+0x2e>
 80029be:	2303      	movs	r3, #3
 80029c0:	e053      	b.n	8002a6a <Cmd_iou_ringled_mode+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 80029c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80029c6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	dd01      	ble.n	80029d4 <Cmd_iou_ringled_mode+0x40>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e04a      	b.n	8002a6a <Cmd_iou_ringled_mode+0xd6>
    uint8_t mode = atoi(argv[1]);
 80029d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80029d8:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3304      	adds	r3, #4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 f9f8 	bl	8006dd8 <atoi>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (mode > 2)    return CMDLINE_INVALID_ARG;
 80029ee:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <Cmd_iou_ringled_mode+0x66>
 80029f6:	2304      	movs	r3, #4
 80029f8:	e037      	b.n	8002a6a <Cmd_iou_ringled_mode+0xd6>

    uint8_t cmd  = CMD_CODE_RINGLED_MODE;
 80029fa:	230d      	movs	r3, #13
 80029fc:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];

    payload[0]  = mode; //low
 8002a00:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002a04:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002a08:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002a0c:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002a10:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	2301      	movs	r3, #1
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f003 fced 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002a22:	f107 020b 	add.w	r2, r7, #11
 8002a26:	f107 010c 	add.w	r1, r7, #12
 8002a2a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fd6a 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002a34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a38:	480e      	ldr	r0, [pc, #56]	@ (8002a74 <Cmd_iou_ringled_mode+0xe0>)
 8002a3a:	f7ff fa1d 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002a3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a42:	480c      	ldr	r0, [pc, #48]	@ (8002a74 <Cmd_iou_ringled_mode+0xe0>)
 8002a44:	f7ff fa18 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002a48:	2005      	movs	r0, #5
 8002a4a:	f003 fc49 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002a4e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002a52:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002a56:	781a      	ldrb	r2, [r3, #0]
 8002a58:	f107 030c 	add.w	r3, r7, #12
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f98c 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002a64:	f7ff f972 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002a68:	2305      	movs	r3, #5
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40020000 	.word	0x40020000

08002a78 <Cmd_iou_irled_set_bright>:

int Cmd_iou_irled_set_bright(int argc, char *argv[])
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002a7e:	af02      	add	r7, sp, #8
 8002a80:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002a84:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002a88:	6018      	str	r0, [r3, #0]
 8002a8a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002a8e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002a92:	6019      	str	r1, [r3, #0]
    if (argc < 2) return CMDLINE_TOO_FEW_ARGS;
 8002a94:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002a98:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	dc01      	bgt.n	8002aa6 <Cmd_iou_irled_set_bright+0x2e>
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e053      	b.n	8002b4e <Cmd_iou_irled_set_bright+0xd6>
    if (argc > 2) return CMDLINE_TOO_MANY_ARGS;
 8002aa6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002aaa:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	dd01      	ble.n	8002ab8 <Cmd_iou_irled_set_bright+0x40>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e04a      	b.n	8002b4e <Cmd_iou_irled_set_bright+0xd6>
    uint8_t percent = atoi(argv[1]);
 8002ab8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002abc:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 f986 	bl	8006dd8 <atoi>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (percent > 100)    return CMDLINE_INVALID_ARG;
 8002ad2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <Cmd_iou_irled_set_bright+0x66>
 8002ada:	2304      	movs	r3, #4
 8002adc:	e037      	b.n	8002b4e <Cmd_iou_irled_set_bright+0xd6>

    uint8_t cmd  = CMD_CODE_IRLED_SET_BRIGHT;
 8002ade:	230e      	movs	r3, #14
 8002ae0:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];

    payload[0]  = percent; //low
 8002ae4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002ae8:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002aec:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002af0:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002af4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	2301      	movs	r3, #1
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2305      	movs	r3, #5
 8002b00:	2201      	movs	r2, #1
 8002b02:	f003 fc7b 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002b06:	f107 020b 	add.w	r2, r7, #11
 8002b0a:	f107 010c 	add.w	r1, r7, #12
 8002b0e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 fcf8 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002b18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b1c:	480e      	ldr	r0, [pc, #56]	@ (8002b58 <Cmd_iou_irled_set_bright+0xe0>)
 8002b1e:	f7ff f9ab 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002b22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b26:	480c      	ldr	r0, [pc, #48]	@ (8002b58 <Cmd_iou_irled_set_bright+0xe0>)
 8002b28:	f7ff f9a6 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002b2c:	2005      	movs	r0, #5
 8002b2e:	f003 fbd7 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002b32:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002b36:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002b3a:	781a      	ldrb	r2, [r3, #0]
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f91a 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002b48:	f7ff f900 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002b4c:	2305      	movs	r3, #5
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40020000 	.word	0x40020000

08002b5c <Cmd_iou_irled_get_bright>:

int Cmd_iou_irled_get_bright(int argc, char *argv[])
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002b68:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002b6c:	6018      	str	r0, [r3, #0]
 8002b6e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002b72:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002b76:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8002b78:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002b7c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	dc01      	bgt.n	8002b8a <Cmd_iou_irled_get_bright+0x2e>
 8002b86:	2303      	movs	r3, #3
 8002b88:	e037      	b.n	8002bfa <Cmd_iou_irled_get_bright+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8002b8a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002b8e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	dd01      	ble.n	8002b9c <Cmd_iou_irled_get_bright+0x40>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e02e      	b.n	8002bfa <Cmd_iou_irled_get_bright+0x9e>

    uint8_t cmd  = CMD_CODE_IRLED_GET_BRIGHT;
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002ba2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ba6:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8002baa:	2201      	movs	r2, #1
 8002bac:	2105      	movs	r1, #5
 8002bae:	f003 fbfd 	bl	80063ac <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002bb2:	f107 020f 	add.w	r2, r7, #15
 8002bb6:	f107 0110 	add.w	r1, r7, #16
 8002bba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fca2 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002bc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bc8:	480e      	ldr	r0, [pc, #56]	@ (8002c04 <Cmd_iou_irled_get_bright+0xa8>)
 8002bca:	f7ff f955 	bl	8001e78 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002bce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bd2:	480c      	ldr	r0, [pc, #48]	@ (8002c04 <Cmd_iou_irled_get_bright+0xa8>)
 8002bd4:	f7ff f950 	bl	8001e78 <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8002bd8:	2005      	movs	r0, #5
 8002bda:	f003 fb81 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002bde:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002be2:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff f8c4 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002bf4:	f7ff f8aa 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002bf8:	2305      	movs	r3, #5
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40020000 	.word	0x40020000

08002c08 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	041a      	lsls	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	619a      	str	r2, [r3, #24]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <Cmd_pdu_set_channel>:


#define DEST_ADDR FSP_ADR_PDU

int Cmd_pdu_set_channel(int argc, char *argv[])
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8002c2e:	af02      	add	r7, sp, #8
 8002c30:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c34:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002c38:	6018      	str	r0, [r3, #0]
 8002c3a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c3e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002c42:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8002c44:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c48:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	dc01      	bgt.n	8002c56 <Cmd_pdu_set_channel+0x2e>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e06a      	b.n	8002d2c <Cmd_pdu_set_channel+0x104>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8002c56:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c5a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	dd01      	ble.n	8002c68 <Cmd_pdu_set_channel+0x40>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e061      	b.n	8002d2c <Cmd_pdu_set_channel+0x104>
    uint8_t channel = atoi(argv[1]);
 8002c68:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c6c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3304      	adds	r3, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 f8ae 	bl	8006dd8 <atoi>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8002c82:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002c86:	2b09      	cmp	r3, #9
 8002c88:	d901      	bls.n	8002c8e <Cmd_pdu_set_channel+0x66>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e04e      	b.n	8002d2c <Cmd_pdu_set_channel+0x104>

    uint8_t state = atoi(argv[2]);
 8002c8e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c92:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3308      	adds	r3, #8
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f004 f89b 	bl	8006dd8 <atoi>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
    if (state > 1) return CMDLINE_INVALID_ARG;
 8002ca8:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d901      	bls.n	8002cb4 <Cmd_pdu_set_channel+0x8c>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e03b      	b.n	8002d2c <Cmd_pdu_set_channel+0x104>

    uint8_t cmd  = CMD_CODE_PDU_SET_CHANNEL;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    uint8_t payload[2];
    payload[0]  = state;
 8002cba:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8002cbe:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = channel;
 8002cc2:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002cc6:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002cca:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002cce:	f897 0215 	ldrb.w	r0, [r7, #533]	@ 0x215
 8002cd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	2301      	movs	r3, #1
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2303      	movs	r3, #3
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f003 fb8c 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002ce4:	f107 020f 	add.w	r2, r7, #15
 8002ce8:	f107 0110 	add.w	r1, r7, #16
 8002cec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f003 fc09 	bl	8006508 <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002cf6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002cfa:	480f      	ldr	r0, [pc, #60]	@ (8002d38 <Cmd_pdu_set_channel+0x110>)
 8002cfc:	f7ff ff84 	bl	8002c08 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002d00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d04:	480c      	ldr	r0, [pc, #48]	@ (8002d38 <Cmd_pdu_set_channel+0x110>)
 8002d06:	f7ff ff7f 	bl	8002c08 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 8002d0a:	2005      	movs	r0, #5
 8002d0c:	f003 fae8 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002d10:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002d14:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	f107 0310 	add.w	r3, r7, #16
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff f82b 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002d26:	f7ff f811 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002d2a:	2305      	movs	r3, #5
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40020000 	.word	0x40020000

08002d3c <Cmd_pdu_set_buck>:

int Cmd_pdu_set_buck(int argc, char *argv[])
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8002d42:	af02      	add	r7, sp, #8
 8002d44:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002d48:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002d4c:	6018      	str	r0, [r3, #0]
 8002d4e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002d52:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002d56:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8002d58:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002d5c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	dc01      	bgt.n	8002d6a <Cmd_pdu_set_buck+0x2e>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e06a      	b.n	8002e40 <Cmd_pdu_set_buck+0x104>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8002d6a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002d6e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	dd01      	ble.n	8002d7c <Cmd_pdu_set_buck+0x40>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e061      	b.n	8002e40 <Cmd_pdu_set_buck+0x104>
    uint8_t buck = atoi(argv[1]);
 8002d7c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002d80:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3304      	adds	r3, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f004 f824 	bl	8006dd8 <atoi>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8002d96:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d901      	bls.n	8002da2 <Cmd_pdu_set_buck+0x66>
 8002d9e:	2304      	movs	r3, #4
 8002da0:	e04e      	b.n	8002e40 <Cmd_pdu_set_buck+0x104>

    uint8_t state = atoi(argv[2]);
 8002da2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002da6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3308      	adds	r3, #8
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 f811 	bl	8006dd8 <atoi>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
    if (state > 1) return CMDLINE_INVALID_ARG;
 8002dbc:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d901      	bls.n	8002dc8 <Cmd_pdu_set_buck+0x8c>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e03b      	b.n	8002e40 <Cmd_pdu_set_buck+0x104>

    uint8_t cmd  = CMD_CODE_PDU_SET_BUCK;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    uint8_t payload[2];
    payload[0]  = state;
 8002dce:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8002dd2:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = buck;
 8002dd6:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8002dda:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002dde:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002de2:	f897 0215 	ldrb.w	r0, [r7, #533]	@ 0x215
 8002de6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	2301      	movs	r3, #1
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2303      	movs	r3, #3
 8002df2:	2202      	movs	r2, #2
 8002df4:	f003 fb02 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002df8:	f107 020f 	add.w	r2, r7, #15
 8002dfc:	f107 0110 	add.w	r1, r7, #16
 8002e00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 fb7f 	bl	8006508 <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002e0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e0e:	480f      	ldr	r0, [pc, #60]	@ (8002e4c <Cmd_pdu_set_buck+0x110>)
 8002e10:	f7ff fefa 	bl	8002c08 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002e14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e18:	480c      	ldr	r0, [pc, #48]	@ (8002e4c <Cmd_pdu_set_buck+0x110>)
 8002e1a:	f7ff fef5 	bl	8002c08 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 8002e1e:	2005      	movs	r0, #5
 8002e20:	f003 fa5e 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002e24:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002e28:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe ffa1 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002e3a:	f7fe ff87 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002e3e:	2305      	movs	r3, #5
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40020000 	.word	0x40020000

08002e50 <Cmd_pdu_set_all>:

int Cmd_pdu_set_all(int argc, char *argv[])
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002e56:	af02      	add	r7, sp, #8
 8002e58:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e5c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002e60:	6018      	str	r0, [r3, #0]
 8002e62:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e66:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002e6a:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8002e6c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e70:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	dc01      	bgt.n	8002e7e <Cmd_pdu_set_all+0x2e>
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e053      	b.n	8002f26 <Cmd_pdu_set_all+0xd6>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8002e7e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e82:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	dd01      	ble.n	8002e90 <Cmd_pdu_set_all+0x40>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e04a      	b.n	8002f26 <Cmd_pdu_set_all+0xd6>

    uint8_t state = atoi(argv[1]);
 8002e90:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e94:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 ff9a 	bl	8006dd8 <atoi>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (state > 1) return CMDLINE_INVALID_ARG;
 8002eaa:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d901      	bls.n	8002eb6 <Cmd_pdu_set_all+0x66>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e037      	b.n	8002f26 <Cmd_pdu_set_all+0xd6>

    uint8_t cmd  = CMD_CODE_PDU_SET_ALL;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0]  = state;
 8002ebc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002ec0:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002ec4:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002ec8:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002ecc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f003 fa8f 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002ede:	f107 020b 	add.w	r2, r7, #11
 8002ee2:	f107 010c 	add.w	r1, r7, #12
 8002ee6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 fb0c 	bl	8006508 <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002ef0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ef4:	480e      	ldr	r0, [pc, #56]	@ (8002f30 <Cmd_pdu_set_all+0xe0>)
 8002ef6:	f7ff fe87 	bl	8002c08 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002efa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002efe:	480c      	ldr	r0, [pc, #48]	@ (8002f30 <Cmd_pdu_set_all+0xe0>)
 8002f00:	f7ff fe82 	bl	8002c08 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 8002f04:	2005      	movs	r0, #5
 8002f06:	f003 f9eb 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002f0a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f0e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002f12:	781a      	ldrb	r2, [r3, #0]
 8002f14:	f107 030c 	add.w	r3, r7, #12
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe ff2e 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8002f20:	f7fe ff14 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8002f24:	2305      	movs	r3, #5
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40020000 	.word	0x40020000

08002f34 <Cmd_pdu_get_channel>:

int Cmd_pdu_get_channel(int argc, char *argv[])
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002f3a:	af02      	add	r7, sp, #8
 8002f3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f40:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002f44:	6018      	str	r0, [r3, #0]
 8002f46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f4a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002f4e:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8002f50:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f54:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	dc01      	bgt.n	8002f62 <Cmd_pdu_get_channel+0x2e>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e053      	b.n	800300a <Cmd_pdu_get_channel+0xd6>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8002f62:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f66:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	dd01      	ble.n	8002f74 <Cmd_pdu_get_channel+0x40>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e04a      	b.n	800300a <Cmd_pdu_get_channel+0xd6>
    uint8_t channel = atoi(argv[1]);
 8002f74:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f78:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 ff28 	bl	8006dd8 <atoi>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8002f8e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	d901      	bls.n	8002f9a <Cmd_pdu_get_channel+0x66>
 8002f96:	2304      	movs	r3, #4
 8002f98:	e037      	b.n	800300a <Cmd_pdu_get_channel+0xd6>


    uint8_t cmd  = CMD_CODE_PDU_GET_CHANNEL;
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0]  = channel;
 8002fa0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8002fa4:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002fa8:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8002fac:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8002fb0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2303      	movs	r3, #3
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f003 fa1d 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002fc2:	f107 020b 	add.w	r2, r7, #11
 8002fc6:	f107 010c 	add.w	r1, r7, #12
 8002fca:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 fa9a 	bl	8006508 <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002fd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fd8:	480e      	ldr	r0, [pc, #56]	@ (8003014 <Cmd_pdu_get_channel+0xe0>)
 8002fda:	f7ff fe15 	bl	8002c08 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002fde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fe2:	480c      	ldr	r0, [pc, #48]	@ (8003014 <Cmd_pdu_get_channel+0xe0>)
 8002fe4:	f7ff fe10 	bl	8002c08 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 8002fe8:	2005      	movs	r0, #5
 8002fea:	f003 f979 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8002fee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002ff2:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe febc 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8003004:	f7fe fea2 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8003008:	2305      	movs	r3, #5
}
 800300a:	4618      	mov	r0, r3
 800300c:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40020000 	.word	0x40020000

08003018 <Cmd_pdu_get_buck>:

int Cmd_pdu_get_buck(int argc, char *argv[])
{
 8003018:	b580      	push	{r7, lr}
 800301a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800301e:	af02      	add	r7, sp, #8
 8003020:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003024:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003028:	6018      	str	r0, [r3, #0]
 800302a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800302e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003032:	6019      	str	r1, [r3, #0]
    if (argc < 3) return CMDLINE_TOO_FEW_ARGS;
 8003034:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003038:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	dc01      	bgt.n	8003046 <Cmd_pdu_get_buck+0x2e>
 8003042:	2303      	movs	r3, #3
 8003044:	e053      	b.n	80030ee <Cmd_pdu_get_buck+0xd6>
    if (argc > 3) return CMDLINE_TOO_MANY_ARGS;
 8003046:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800304a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b03      	cmp	r3, #3
 8003052:	dd01      	ble.n	8003058 <Cmd_pdu_get_buck+0x40>
 8003054:	2302      	movs	r3, #2
 8003056:	e04a      	b.n	80030ee <Cmd_pdu_get_buck+0xd6>
    uint8_t buck = atoi(argv[1]);
 8003058:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800305c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3304      	adds	r3, #4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f003 feb6 	bl	8006dd8 <atoi>
 800306c:	4603      	mov	r3, r0
 800306e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8003072:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003076:	2b06      	cmp	r3, #6
 8003078:	d901      	bls.n	800307e <Cmd_pdu_get_buck+0x66>
 800307a:	2304      	movs	r3, #4
 800307c:	e037      	b.n	80030ee <Cmd_pdu_get_buck+0xd6>

    uint8_t cmd  = CMD_CODE_PDU_GET_BUCK;
 800307e:	2305      	movs	r3, #5
 8003080:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t payload[1];
    payload[0]  = buck;
 8003084:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003088:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800308c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003090:	f897 020e 	ldrb.w	r0, [r7, #526]	@ 0x20e
 8003094:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	2301      	movs	r3, #1
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2303      	movs	r3, #3
 80030a0:	2201      	movs	r2, #1
 80030a2:	f003 f9ab 	bl	80063fc <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80030a6:	f107 020b 	add.w	r2, r7, #11
 80030aa:	f107 010c 	add.w	r1, r7, #12
 80030ae:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fa28 	bl	8006508 <frame_encode>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80030b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030bc:	480e      	ldr	r0, [pc, #56]	@ (80030f8 <Cmd_pdu_get_buck+0xe0>)
 80030be:	f7ff fda3 	bl	8002c08 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80030c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030c6:	480c      	ldr	r0, [pc, #48]	@ (80030f8 <Cmd_pdu_get_buck+0xe0>)
 80030c8:	f7ff fd9e 	bl	8002c08 <LL_GPIO_ResetOutputPin>
    SCH_Delay(5);
 80030cc:	2005      	movs	r0, #5
 80030ce:	f003 f907 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80030d2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80030d6:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fe4a 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 80030e8:	f7fe fe30 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 80030ec:	2305      	movs	r3, #5
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40020000 	.word	0x40020000

080030fc <LL_GPIO_SetOutputPin>:
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	619a      	str	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_GPIO_ResetOutputPin>:
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	041a      	lsls	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	619a      	str	r2, [r3, #24]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <Cmd_pmu_get_temp>:
#include "../ACK_packet/ACKsend_packet.h"

#define DEST_ADDR FSP_ADR_PMU

int Cmd_pmu_get_temp(int argc, char *argv[])
{
 8003138:	b580      	push	{r7, lr}
 800313a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800313e:	af00      	add	r7, sp, #0
 8003140:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003144:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003148:	6018      	str	r0, [r3, #0]
 800314a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800314e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003152:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003154:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003158:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	dc01      	bgt.n	8003166 <Cmd_pmu_get_temp+0x2e>
 8003162:	2303      	movs	r3, #3
 8003164:	e037      	b.n	80031d6 <Cmd_pmu_get_temp+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003166:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800316a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	dd01      	ble.n	8003178 <Cmd_pmu_get_temp+0x40>
 8003174:	2302      	movs	r3, #2
 8003176:	e02e      	b.n	80031d6 <Cmd_pmu_get_temp+0x9e>

    uint8_t cmd  = CMD_CODE_PMU_GET_TEMP;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800317e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003182:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003186:	2201      	movs	r2, #1
 8003188:	2102      	movs	r1, #2
 800318a:	f003 f90f 	bl	80063ac <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800318e:	f107 020f 	add.w	r2, r7, #15
 8003192:	f107 0110 	add.w	r1, r7, #16
 8003196:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800319a:	4618      	mov	r0, r3
 800319c:	f003 f9b4 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80031a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031a4:	480e      	ldr	r0, [pc, #56]	@ (80031e0 <Cmd_pmu_get_temp+0xa8>)
 80031a6:	f7ff ffb7 	bl	8003118 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80031aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031ae:	480c      	ldr	r0, [pc, #48]	@ (80031e0 <Cmd_pmu_get_temp+0xa8>)
 80031b0:	f7ff ffa4 	bl	80030fc <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 80031b4:	2005      	movs	r0, #5
 80031b6:	f003 f893 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80031ba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80031be:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	f107 0310 	add.w	r3, r7, #16
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fdd6 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 80031d0:	f7fe fdbc 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 80031d4:	2305      	movs	r3, #5
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40020000 	.word	0x40020000

080031e4 <Cmd_pmu_bat_vol>:

int Cmd_pmu_bat_vol(int argc, char *argv[])
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80031f0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80031f4:	6018      	str	r0, [r3, #0]
 80031f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80031fa:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80031fe:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003200:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003204:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	dc01      	bgt.n	8003212 <Cmd_pmu_bat_vol+0x2e>
 800320e:	2303      	movs	r3, #3
 8003210:	e037      	b.n	8003282 <Cmd_pmu_bat_vol+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 8003212:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003216:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	dd01      	ble.n	8003224 <Cmd_pmu_bat_vol+0x40>
 8003220:	2302      	movs	r3, #2
 8003222:	e02e      	b.n	8003282 <Cmd_pmu_bat_vol+0x9e>

    uint8_t cmd  = CMD_CODE_BAT_VOL;
 8003224:	2302      	movs	r3, #2
 8003226:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800322a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800322e:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003232:	2201      	movs	r2, #1
 8003234:	2102      	movs	r1, #2
 8003236:	f003 f8b9 	bl	80063ac <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800323a:	f107 020f 	add.w	r2, r7, #15
 800323e:	f107 0110 	add.w	r1, r7, #16
 8003242:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003246:	4618      	mov	r0, r3
 8003248:	f003 f95e 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800324c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003250:	480e      	ldr	r0, [pc, #56]	@ (800328c <Cmd_pmu_bat_vol+0xa8>)
 8003252:	f7ff ff61 	bl	8003118 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003256:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800325a:	480c      	ldr	r0, [pc, #48]	@ (800328c <Cmd_pmu_bat_vol+0xa8>)
 800325c:	f7ff ff4e 	bl	80030fc <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 8003260:	2005      	movs	r0, #5
 8003262:	f003 f83d 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8003266:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800326a:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fd80 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 800327c:	f7fe fd66 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 8003280:	2305      	movs	r3, #5
}
 8003282:	4618      	mov	r0, r3
 8003284:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40020000 	.word	0x40020000

08003290 <Cmd_pmu_parag_in>:

int Cmd_pmu_parag_in(int argc, char *argv[])
{
 8003290:	b580      	push	{r7, lr}
 8003292:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8003296:	af00      	add	r7, sp, #0
 8003298:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800329c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80032a0:	6018      	str	r0, [r3, #0]
 80032a2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80032a6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80032aa:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 80032ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80032b0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	dc01      	bgt.n	80032be <Cmd_pmu_parag_in+0x2e>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e037      	b.n	800332e <Cmd_pmu_parag_in+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 80032be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80032c2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	dd01      	ble.n	80032d0 <Cmd_pmu_parag_in+0x40>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e02e      	b.n	800332e <Cmd_pmu_parag_in+0x9e>

    uint8_t cmd  = CMD_CODE_PARAG_IN;
 80032d0:	2303      	movs	r3, #3
 80032d2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80032d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032da:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80032de:	2201      	movs	r2, #1
 80032e0:	2102      	movs	r1, #2
 80032e2:	f003 f863 	bl	80063ac <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80032e6:	f107 020f 	add.w	r2, r7, #15
 80032ea:	f107 0110 	add.w	r1, r7, #16
 80032ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 f908 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80032f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032fc:	480e      	ldr	r0, [pc, #56]	@ (8003338 <Cmd_pmu_parag_in+0xa8>)
 80032fe:	f7ff ff0b 	bl	8003118 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003302:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003306:	480c      	ldr	r0, [pc, #48]	@ (8003338 <Cmd_pmu_parag_in+0xa8>)
 8003308:	f7ff fef8 	bl	80030fc <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 800330c:	2005      	movs	r0, #5
 800330e:	f002 ffe7 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 8003312:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003316:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800331a:	781a      	ldrb	r2, [r3, #0]
 800331c:	f107 0310 	add.w	r3, r7, #16
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fd2a 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 8003328:	f7fe fd10 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 800332c:	2305      	movs	r3, #5
}
 800332e:	4618      	mov	r0, r3
 8003330:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40020000 	.word	0x40020000

0800333c <Cmd_pmu_parag_out>:

int Cmd_pmu_parag_out(int argc, char *argv[])
{
 800333c:	b580      	push	{r7, lr}
 800333e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8003342:	af00      	add	r7, sp, #0
 8003344:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003348:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800334c:	6018      	str	r0, [r3, #0]
 800334e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003352:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003356:	6019      	str	r1, [r3, #0]
    if (argc < 1) return CMDLINE_TOO_FEW_ARGS;
 8003358:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800335c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	dc01      	bgt.n	800336a <Cmd_pmu_parag_out+0x2e>
 8003366:	2303      	movs	r3, #3
 8003368:	e037      	b.n	80033da <Cmd_pmu_parag_out+0x9e>
    if (argc > 1) return CMDLINE_TOO_MANY_ARGS;
 800336a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800336e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	dd01      	ble.n	800337c <Cmd_pmu_parag_out+0x40>
 8003378:	2302      	movs	r3, #2
 800337a:	e02e      	b.n	80033da <Cmd_pmu_parag_out+0x9e>

    uint8_t cmd  = CMD_CODE_PARAG_OUT;
 800337c:	2304      	movs	r3, #4
 800337e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003382:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003386:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800338a:	2201      	movs	r2, #1
 800338c:	2102      	movs	r1, #2
 800338e:	f003 f80d 	bl	80063ac <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003392:	f107 020f 	add.w	r2, r7, #15
 8003396:	f107 0110 	add.w	r1, r7, #16
 800339a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 f8b2 	bl	8006508 <frame_encode>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80033a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80033a8:	480e      	ldr	r0, [pc, #56]	@ (80033e4 <Cmd_pmu_parag_out+0xa8>)
 80033aa:	f7ff feb5 	bl	8003118 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80033ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033b2:	480c      	ldr	r0, [pc, #48]	@ (80033e4 <Cmd_pmu_parag_out+0xa8>)
 80033b4:	f7ff fea2 	bl	80030fc <LL_GPIO_SetOutputPin>
    SCH_Delay(5);
 80033b8:	2005      	movs	r0, #5
 80033ba:	f002 ff91 	bl	80062e0 <SCH_Delay>
    set_fsp_packet(encoded_frame, frame_len);
 80033be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80033c2:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	f107 0310 	add.w	r3, r7, #16
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fcd4 	bl	8001d7c <set_fsp_packet>
    set_send_flag();
 80033d4:	f7fe fcba 	bl	8001d4c <set_send_flag>

    return CMDLINE_PENDING;
 80033d8:	2305      	movs	r3, #5
}
 80033da:	4618      	mov	r0, r3
 80033dc:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40020000 	.word	0x40020000

080033e8 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 80033fc:	e01f      	b.n	800343e <CmdLineProcess+0x56>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b20      	cmp	r3, #32
 8003404:	d105      	bne.n	8003412 <CmdLineProcess+0x2a>
        {
            *pcChar = 0;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	e012      	b.n	8003438 <CmdLineProcess+0x50>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00f      	beq.n	8003438 <CmdLineProcess+0x50>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b07      	cmp	r3, #7
 800341c:	d80a      	bhi.n	8003434 <CmdLineProcess+0x4c>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 800341e:	491d      	ldr	r1, [pc, #116]	@ (8003494 <CmdLineProcess+0xac>)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	3301      	adds	r3, #1
 800342c:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e001      	b.n	8003438 <CmdLineProcess+0x50>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 8003434:	2302      	movs	r3, #2
 8003436:	e028      	b.n	800348a <CmdLineProcess+0xa2>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3301      	adds	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1db      	bne.n	80033fe <CmdLineProcess+0x16>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01d      	beq.n	8003488 <CmdLineProcess+0xa0>
    {
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 800344c:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <CmdLineProcess+0xb0>)
 800344e:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 8003450:	e016      	b.n	8003480 <CmdLineProcess+0x98>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8003452:	4b10      	ldr	r3, [pc, #64]	@ (8003494 <CmdLineProcess+0xac>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f7fc feb7 	bl	80001d0 <strcmp>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d108      	bne.n	800347a <CmdLineProcess+0x92>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4909      	ldr	r1, [pc, #36]	@ (8003494 <CmdLineProcess+0xac>)
 8003470:	4610      	mov	r0, r2
 8003472:	4798      	blx	r3
 8003474:	4603      	mov	r3, r0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	e007      	b.n	800348a <CmdLineProcess+0xa2>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	330c      	adds	r3, #12
 800347e:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e4      	bne.n	8003452 <CmdLineProcess+0x6a>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8003488:	2301      	movs	r3, #1
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000a0c 	.word	0x20000a0c
 8003498:	20000030 	.word	0x20000030

0800349c <__NVIC_SystemReset>:
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80034a0:	f3bf 8f4f 	dsb	sy
}
 80034a4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <__NVIC_SystemReset+0x24>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80034ae:	4904      	ldr	r1, [pc, #16]	@ (80034c0 <__NVIC_SystemReset+0x24>)
 80034b0:	4b04      	ldr	r3, [pc, #16]	@ (80034c4 <__NVIC_SystemReset+0x28>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80034b6:	f3bf 8f4f 	dsb	sy
}
 80034ba:	bf00      	nop
    __NOP();
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <__NVIC_SystemReset+0x20>
 80034c0:	e000ed00 	.word	0xe000ed00
 80034c4:	05fa0004 	.word	0x05fa0004

080034c8 <LL_GPIO_SetOutputPin>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	619a      	str	r2, [r3, #24]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_GPIO_ResetOutputPin>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	041a      	lsls	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	619a      	str	r2, [r3, #24]
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <command_init>:
		command_task_update                // taskFunction;
	}
};

void	command_init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
	Ringbuf_init();
 800350a:	f7fe fa09 	bl	8001920 <Ringbuf_init>

//	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 800350e:	2280      	movs	r2, #128	@ 0x80
 8003510:	2100      	movs	r1, #0
 8003512:	4824      	ldr	r0, [pc, #144]	@ (80035a4 <command_init+0xa0>)
 8003514:	f004 fc7b 	bl	8007e0e <memset>
	s_commandBufferIndex = 0;
 8003518:	4b23      	ldr	r3, [pc, #140]	@ (80035a8 <command_init+0xa4>)
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
	Uart_sendstring(USART6,"\r\n");
 800351e:	4923      	ldr	r1, [pc, #140]	@ (80035ac <command_init+0xa8>)
 8003520:	4823      	ldr	r0, [pc, #140]	@ (80035b0 <command_init+0xac>)
 8003522:	f7fe fb77 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6,"\r\n");
 8003526:	4921      	ldr	r1, [pc, #132]	@ (80035ac <command_init+0xa8>)
 8003528:	4821      	ldr	r0, [pc, #132]	@ (80035b0 <command_init+0xac>)
 800352a:	f7fe fb73 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6,"> CPOC FIRMWARE V1.0.0 \r\n");
 800352e:	4921      	ldr	r1, [pc, #132]	@ (80035b4 <command_init+0xb0>)
 8003530:	481f      	ldr	r0, [pc, #124]	@ (80035b0 <command_init+0xac>)
 8003532:	f7fe fb6f 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6,"\r\n");
 8003536:	491d      	ldr	r1, [pc, #116]	@ (80035ac <command_init+0xa8>)
 8003538:	481d      	ldr	r0, [pc, #116]	@ (80035b0 <command_init+0xac>)
 800353a:	f7fe fb6b 	bl	8001c14 <Uart_sendstring>
	command_send_splash();
 800353e:	f000 fc6f 	bl	8003e20 <command_send_splash>

	tCmdLineEntry *pEntry;


	Uart_sendstring(USART6, "\nStart with <help_xxxx> command\r\n");
 8003542:	491d      	ldr	r1, [pc, #116]	@ (80035b8 <command_init+0xb4>)
 8003544:	481a      	ldr	r0, [pc, #104]	@ (80035b0 <command_init+0xac>)
 8003546:	f7fe fb65 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "---------------------------\r\n");
 800354a:	491c      	ldr	r1, [pc, #112]	@ (80035bc <command_init+0xb8>)
 800354c:	4818      	ldr	r0, [pc, #96]	@ (80035b0 <command_init+0xac>)
 800354e:	f7fe fb61 	bl	8001c14 <Uart_sendstring>
	pEntry = &g_psCmdTable[0];
 8003552:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <command_init+0xbc>)
 8003554:	607b      	str	r3, [r7, #4]

	while (pEntry->pcCmd) {
 8003556:	e016      	b.n	8003586 <command_init+0x82>
		Uart_sendstring(USART6, pEntry->pcCmd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	4814      	ldr	r0, [pc, #80]	@ (80035b0 <command_init+0xac>)
 8003560:	f7fe fb58 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4619      	mov	r1, r3
 800356a:	4811      	ldr	r0, [pc, #68]	@ (80035b0 <command_init+0xac>)
 800356c:	f7fe fb52 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 8003570:	490e      	ldr	r1, [pc, #56]	@ (80035ac <command_init+0xa8>)
 8003572:	480f      	ldr	r0, [pc, #60]	@ (80035b0 <command_init+0xac>)
 8003574:	f7fe fb4e 	bl	8001c14 <Uart_sendstring>
	    if (pEntry == &g_psCmdTable[8]) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a12      	ldr	r2, [pc, #72]	@ (80035c4 <command_init+0xc0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <command_init+0x8c>
	        break;
	    }
	    pEntry++;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	330c      	adds	r3, #12
 8003584:	607b      	str	r3, [r7, #4]
	while (pEntry->pcCmd) {
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e4      	bne.n	8003558 <command_init+0x54>
 800358e:	e000      	b.n	8003592 <command_init+0x8e>
	        break;
 8003590:	bf00      	nop
	}



	Uart_sendstring(USART6, "\r\n> ");
 8003592:	490d      	ldr	r1, [pc, #52]	@ (80035c8 <command_init+0xc4>)
 8003594:	4806      	ldr	r0, [pc, #24]	@ (80035b0 <command_init+0xac>)
 8003596:	f7fe fb3d 	bl	8001c14 <Uart_sendstring>


}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000a30 	.word	0x20000a30
 80035a8:	20000ab0 	.word	0x20000ab0
 80035ac:	0800c4cc 	.word	0x0800c4cc
 80035b0:	40011400 	.word	0x40011400
 80035b4:	0800c4d0 	.word	0x0800c4d0
 80035b8:	0800c4ec 	.word	0x0800c4ec
 80035bc:	0800c510 	.word	0x0800c510
 80035c0:	20000030 	.word	0x20000030
 80035c4:	20000090 	.word	0x20000090
 80035c8:	0800c530 	.word	0x0800c530

080035cc <command_task_update>:

static void command_task_update(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
    char rxData;
    int8_t ret_val;

    while (IsDataAvailable(USART6))
 80035d2:	e062      	b.n	800369a <command_task_update+0xce>
    {

        rxData = Uart_read(USART6);
 80035d4:	4836      	ldr	r0, [pc, #216]	@ (80036b0 <command_task_update+0xe4>)
 80035d6:	f7fe fa1d 	bl	8001a14 <Uart_read>
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
        Uart_write(USART6, rxData);
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	4619      	mov	r1, r3
 80035e2:	4833      	ldr	r0, [pc, #204]	@ (80036b0 <command_task_update+0xe4>)
 80035e4:	f7fe fa74 	bl	8001ad0 <Uart_write>
        if ((rxData == '\r') || (rxData == '\n'))
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	2b0d      	cmp	r3, #13
 80035ec:	d002      	beq.n	80035f4 <command_task_update+0x28>
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	2b0a      	cmp	r3, #10
 80035f2:	d12e      	bne.n	8003652 <command_task_update+0x86>
        {
            if (s_commandBufferIndex > 0)
 80035f4:	4b2f      	ldr	r3, [pc, #188]	@ (80036b4 <command_task_update+0xe8>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d025      	beq.n	8003648 <command_task_update+0x7c>
            {
                s_commandBuffer[s_commandBufferIndex] = 0;
 80035fc:	4b2d      	ldr	r3, [pc, #180]	@ (80036b4 <command_task_update+0xe8>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	4b2d      	ldr	r3, [pc, #180]	@ (80036b8 <command_task_update+0xec>)
 8003604:	2100      	movs	r1, #0
 8003606:	5499      	strb	r1, [r3, r2]
                s_commandBufferIndex++;
 8003608:	4b2a      	ldr	r3, [pc, #168]	@ (80036b4 <command_task_update+0xe8>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	b2da      	uxtb	r2, r3
 8003610:	4b28      	ldr	r3, [pc, #160]	@ (80036b4 <command_task_update+0xe8>)
 8003612:	701a      	strb	r2, [r3, #0]
                ret_val = CmdLineProcess(s_commandBuffer);
 8003614:	4828      	ldr	r0, [pc, #160]	@ (80036b8 <command_task_update+0xec>)
 8003616:	f7ff fee7 	bl	80033e8 <CmdLineProcess>
 800361a:	4603      	mov	r3, r0
 800361c:	71bb      	strb	r3, [r7, #6]
                s_commandBufferIndex = 0;
 800361e:	4b25      	ldr	r3, [pc, #148]	@ (80036b4 <command_task_update+0xe8>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
                Uart_sendstring(USART6, "\r\n> ");
 8003624:	4925      	ldr	r1, [pc, #148]	@ (80036bc <command_task_update+0xf0>)
 8003626:	4822      	ldr	r0, [pc, #136]	@ (80036b0 <command_task_update+0xe4>)
 8003628:	f7fe faf4 	bl	8001c14 <Uart_sendstring>
                Uart_sendstring(USART6, ErrorCode[ret_val]);
 800362c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003630:	4a23      	ldr	r2, [pc, #140]	@ (80036c0 <command_task_update+0xf4>)
 8003632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003636:	4619      	mov	r1, r3
 8003638:	481d      	ldr	r0, [pc, #116]	@ (80036b0 <command_task_update+0xe4>)
 800363a:	f7fe faeb 	bl	8001c14 <Uart_sendstring>
                Uart_sendstring(USART6, "> ");
 800363e:	4921      	ldr	r1, [pc, #132]	@ (80036c4 <command_task_update+0xf8>)
 8003640:	481b      	ldr	r0, [pc, #108]	@ (80036b0 <command_task_update+0xe4>)
 8003642:	f7fe fae7 	bl	8001c14 <Uart_sendstring>
            if (s_commandBufferIndex > 0)
 8003646:	e028      	b.n	800369a <command_task_update+0xce>
            }
            else
            {
                Uart_sendstring(USART6, "\r\n> ");
 8003648:	491c      	ldr	r1, [pc, #112]	@ (80036bc <command_task_update+0xf0>)
 800364a:	4819      	ldr	r0, [pc, #100]	@ (80036b0 <command_task_update+0xe4>)
 800364c:	f7fe fae2 	bl	8001c14 <Uart_sendstring>
            if (s_commandBufferIndex > 0)
 8003650:	e023      	b.n	800369a <command_task_update+0xce>
            }
        }
        else if ((rxData == 8) || (rxData == 127))
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d002      	beq.n	800365e <command_task_update+0x92>
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	2b7f      	cmp	r3, #127	@ 0x7f
 800365c:	d10a      	bne.n	8003674 <command_task_update+0xa8>
        {
            if (s_commandBufferIndex > 0)
 800365e:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <command_task_update+0xe8>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d019      	beq.n	800369a <command_task_update+0xce>
            {
                s_commandBufferIndex--;
 8003666:	4b13      	ldr	r3, [pc, #76]	@ (80036b4 <command_task_update+0xe8>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	3b01      	subs	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <command_task_update+0xe8>)
 8003670:	701a      	strb	r2, [r3, #0]
            if (s_commandBufferIndex > 0)
 8003672:	e012      	b.n	800369a <command_task_update+0xce>
            }
        }
        else
        {
            s_commandBuffer[s_commandBufferIndex] = rxData;
 8003674:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <command_task_update+0xe8>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4619      	mov	r1, r3
 800367a:	4a0f      	ldr	r2, [pc, #60]	@ (80036b8 <command_task_update+0xec>)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	5453      	strb	r3, [r2, r1]
            s_commandBufferIndex++;
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <command_task_update+0xe8>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <command_task_update+0xe8>)
 800368a:	701a      	strb	r2, [r3, #0]
            if (s_commandBufferIndex > COMMAND_MAX_LENGTH)
 800368c:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <command_task_update+0xe8>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b80      	cmp	r3, #128	@ 0x80
 8003692:	d902      	bls.n	800369a <command_task_update+0xce>
            {
                s_commandBufferIndex = 0;
 8003694:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <command_task_update+0xe8>)
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART6))
 800369a:	4805      	ldr	r0, [pc, #20]	@ (80036b0 <command_task_update+0xe4>)
 800369c:	f7fe fa88 	bl	8001bb0 <IsDataAvailable>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d196      	bne.n	80035d4 <command_task_update+0x8>
            }
        }
    }
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40011400 	.word	0x40011400
 80036b4:	20000ab0 	.word	0x20000ab0
 80036b8:	20000a30 	.word	0x20000a30
 80036bc:	0800c530 	.word	0x0800c530
 80036c0:	20000018 	.word	0x20000018
 80036c4:	0800c538 	.word	0x0800c538

080036c8 <Cmd_help>:


int Cmd_help(int argc, char *argv[]) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	Uart_sendstring(USART6, "\nSimple commands\r\n");
 80036d2:	4916      	ldr	r1, [pc, #88]	@ (800372c <Cmd_help+0x64>)
 80036d4:	4816      	ldr	r0, [pc, #88]	@ (8003730 <Cmd_help+0x68>)
 80036d6:	f7fe fa9d 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "------------------\r\n");
 80036da:	4916      	ldr	r1, [pc, #88]	@ (8003734 <Cmd_help+0x6c>)
 80036dc:	4814      	ldr	r0, [pc, #80]	@ (8003730 <Cmd_help+0x68>)
 80036de:	f7fe fa99 	bl	8001c14 <Uart_sendstring>
	pEntry = &g_psCmdTable[0];
 80036e2:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <Cmd_help+0x70>)
 80036e4:	60fb      	str	r3, [r7, #12]


	while (pEntry->pcCmd) {
 80036e6:	e016      	b.n	8003716 <Cmd_help+0x4e>
		Uart_sendstring(USART6, pEntry->pcCmd);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4619      	mov	r1, r3
 80036ee:	4810      	ldr	r0, [pc, #64]	@ (8003730 <Cmd_help+0x68>)
 80036f0:	f7fe fa90 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4619      	mov	r1, r3
 80036fa:	480d      	ldr	r0, [pc, #52]	@ (8003730 <Cmd_help+0x68>)
 80036fc:	f7fe fa8a 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 8003700:	490e      	ldr	r1, [pc, #56]	@ (800373c <Cmd_help+0x74>)
 8003702:	480b      	ldr	r0, [pc, #44]	@ (8003730 <Cmd_help+0x68>)
 8003704:	f7fe fa86 	bl	8001c14 <Uart_sendstring>
	    if (pEntry == &g_psCmdTable[8]) {
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a0d      	ldr	r2, [pc, #52]	@ (8003740 <Cmd_help+0x78>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <Cmd_help+0x58>
	        break;
	    }
	    pEntry++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	330c      	adds	r3, #12
 8003714:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e4      	bne.n	80036e8 <Cmd_help+0x20>
 800371e:	e000      	b.n	8003722 <Cmd_help+0x5a>
	        break;
 8003720:	bf00      	nop
	}

	// Return success.
	return (CMDLINE_OK);
 8003722:	2300      	movs	r3, #0

}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	0800c53c 	.word	0x0800c53c
 8003730:	40011400 	.word	0x40011400
 8003734:	0800c550 	.word	0x0800c550
 8003738:	20000030 	.word	0x20000030
 800373c:	0800c4cc 	.word	0x0800c4cc
 8003740:	20000090 	.word	0x20000090

08003744 <Cmd_help_all>:


int Cmd_help_all(int argc, char *argv[]) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;

	Uart_sendstring(USART6, "\nAvailable commands\r\n");
 800374e:	492b      	ldr	r1, [pc, #172]	@ (80037fc <Cmd_help_all+0xb8>)
 8003750:	482b      	ldr	r0, [pc, #172]	@ (8003800 <Cmd_help_all+0xbc>)
 8003752:	f7fe fa5f 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "------------------\r\n");
 8003756:	492b      	ldr	r1, [pc, #172]	@ (8003804 <Cmd_help_all+0xc0>)
 8003758:	4829      	ldr	r0, [pc, #164]	@ (8003800 <Cmd_help_all+0xbc>)
 800375a:	f7fe fa5b 	bl	8001c14 <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
 800375e:	4b2a      	ldr	r3, [pc, #168]	@ (8003808 <Cmd_help_all+0xc4>)
 8003760:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8003762:	e03e      	b.n	80037e2 <Cmd_help_all+0x9e>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	4825      	ldr	r0, [pc, #148]	@ (8003800 <Cmd_help_all+0xbc>)
 800376c:	f7fe fa52 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4619      	mov	r1, r3
 8003776:	4822      	ldr	r0, [pc, #136]	@ (8003800 <Cmd_help_all+0xbc>)
 8003778:	f7fe fa4c 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 800377c:	4923      	ldr	r1, [pc, #140]	@ (800380c <Cmd_help_all+0xc8>)
 800377e:	4820      	ldr	r0, [pc, #128]	@ (8003800 <Cmd_help_all+0xbc>)
 8003780:	f7fe fa48 	bl	8001c14 <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[8]) {
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a22      	ldr	r2, [pc, #136]	@ (8003810 <Cmd_help_all+0xcc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d104      	bne.n	8003796 <Cmd_help_all+0x52>
	        Uart_sendstring(USART6, "\n---------CPOC Command List--------\r\n");
 800378c:	4921      	ldr	r1, [pc, #132]	@ (8003814 <Cmd_help_all+0xd0>)
 800378e:	481c      	ldr	r0, [pc, #112]	@ (8003800 <Cmd_help_all+0xbc>)
 8003790:	f7fe fa40 	bl	8001c14 <Uart_sendstring>
 8003794:	e022      	b.n	80037dc <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[24]) {
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a1f      	ldr	r2, [pc, #124]	@ (8003818 <Cmd_help_all+0xd4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d104      	bne.n	80037a8 <Cmd_help_all+0x64>
	        Uart_sendstring(USART6, "\n---------PMU Command List--------\r\n");
 800379e:	491f      	ldr	r1, [pc, #124]	@ (800381c <Cmd_help_all+0xd8>)
 80037a0:	4817      	ldr	r0, [pc, #92]	@ (8003800 <Cmd_help_all+0xbc>)
 80037a2:	f7fe fa37 	bl	8001c14 <Uart_sendstring>
 80037a6:	e019      	b.n	80037dc <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[28]) {
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003820 <Cmd_help_all+0xdc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d104      	bne.n	80037ba <Cmd_help_all+0x76>
	        Uart_sendstring(USART6, "\n---------PDU Command List--------\r\n");
 80037b0:	491c      	ldr	r1, [pc, #112]	@ (8003824 <Cmd_help_all+0xe0>)
 80037b2:	4813      	ldr	r0, [pc, #76]	@ (8003800 <Cmd_help_all+0xbc>)
 80037b4:	f7fe fa2e 	bl	8001c14 <Uart_sendstring>
 80037b8:	e010      	b.n	80037dc <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[33]) {
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003828 <Cmd_help_all+0xe4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d104      	bne.n	80037cc <Cmd_help_all+0x88>
	        Uart_sendstring(USART6, "\n---------CAM Command List--------\r\n");
 80037c2:	491a      	ldr	r1, [pc, #104]	@ (800382c <Cmd_help_all+0xe8>)
 80037c4:	480e      	ldr	r0, [pc, #56]	@ (8003800 <Cmd_help_all+0xbc>)
 80037c6:	f7fe fa25 	bl	8001c14 <Uart_sendstring>
 80037ca:	e007      	b.n	80037dc <Cmd_help_all+0x98>
	    }

	    else if (pEntry == &g_psCmdTable[34]) {
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a18      	ldr	r2, [pc, #96]	@ (8003830 <Cmd_help_all+0xec>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d103      	bne.n	80037dc <Cmd_help_all+0x98>
	        Uart_sendstring(USART6, "\n---------IOU Command List--------\r\n");
 80037d4:	4917      	ldr	r1, [pc, #92]	@ (8003834 <Cmd_help_all+0xf0>)
 80037d6:	480a      	ldr	r0, [pc, #40]	@ (8003800 <Cmd_help_all+0xbc>)
 80037d8:	f7fe fa1c 	bl	8001c14 <Uart_sendstring>
	    }


		// Advance to the next entry in the table.
		pEntry++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	330c      	adds	r3, #12
 80037e0:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1bc      	bne.n	8003764 <Cmd_help_all+0x20>

	}
	Uart_sendstring(USART6, "---------    END    --------\r\n");
 80037ea:	4913      	ldr	r1, [pc, #76]	@ (8003838 <Cmd_help_all+0xf4>)
 80037ec:	4804      	ldr	r0, [pc, #16]	@ (8003800 <Cmd_help_all+0xbc>)
 80037ee:	f7fe fa11 	bl	8001c14 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	0800c568 	.word	0x0800c568
 8003800:	40011400 	.word	0x40011400
 8003804:	0800c550 	.word	0x0800c550
 8003808:	20000030 	.word	0x20000030
 800380c:	0800c4cc 	.word	0x0800c4cc
 8003810:	20000090 	.word	0x20000090
 8003814:	0800c580 	.word	0x0800c580
 8003818:	20000150 	.word	0x20000150
 800381c:	0800c5a8 	.word	0x0800c5a8
 8003820:	20000180 	.word	0x20000180
 8003824:	0800c5d0 	.word	0x0800c5d0
 8003828:	200001bc 	.word	0x200001bc
 800382c:	0800c5f8 	.word	0x0800c5f8
 8003830:	200001c8 	.word	0x200001c8
 8003834:	0800c620 	.word	0x0800c620
 8003838:	0800c648 	.word	0x0800c648

0800383c <Cmd_help_cpoc>:

int Cmd_help_cpoc(int argc, char *argv[]) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(USART6, "---------CPOC Command List--------\r\n");
 8003846:	4914      	ldr	r1, [pc, #80]	@ (8003898 <Cmd_help_cpoc+0x5c>)
 8003848:	4814      	ldr	r0, [pc, #80]	@ (800389c <Cmd_help_cpoc+0x60>)
 800384a:	f7fe f9e3 	bl	8001c14 <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[9];
 800384e:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <Cmd_help_cpoc+0x64>)
 8003850:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8003852:	e016      	b.n	8003882 <Cmd_help_cpoc+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	4810      	ldr	r0, [pc, #64]	@ (800389c <Cmd_help_cpoc+0x60>)
 800385c:	f7fe f9da 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4619      	mov	r1, r3
 8003866:	480d      	ldr	r0, [pc, #52]	@ (800389c <Cmd_help_cpoc+0x60>)
 8003868:	f7fe f9d4 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 800386c:	490d      	ldr	r1, [pc, #52]	@ (80038a4 <Cmd_help_cpoc+0x68>)
 800386e:	480b      	ldr	r0, [pc, #44]	@ (800389c <Cmd_help_cpoc+0x60>)
 8003870:	f7fe f9d0 	bl	8001c14 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[24]) {
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a0c      	ldr	r2, [pc, #48]	@ (80038a8 <Cmd_help_cpoc+0x6c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <Cmd_help_cpoc+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	330c      	adds	r3, #12
 8003880:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e4      	bne.n	8003854 <Cmd_help_cpoc+0x18>
 800388a:	e000      	b.n	800388e <Cmd_help_cpoc+0x52>
	        break;
 800388c:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 800388e:	2300      	movs	r3, #0

}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	0800c668 	.word	0x0800c668
 800389c:	40011400 	.word	0x40011400
 80038a0:	2000009c 	.word	0x2000009c
 80038a4:	0800c4cc 	.word	0x0800c4cc
 80038a8:	20000150 	.word	0x20000150

080038ac <Cmd_help_pmu>:
int Cmd_help_pmu(int argc, char *argv[]) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(USART6, "---------PMU Command List--------\r\n");
 80038b6:	4914      	ldr	r1, [pc, #80]	@ (8003908 <Cmd_help_pmu+0x5c>)
 80038b8:	4814      	ldr	r0, [pc, #80]	@ (800390c <Cmd_help_pmu+0x60>)
 80038ba:	f7fe f9ab 	bl	8001c14 <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[25];
 80038be:	4b14      	ldr	r3, [pc, #80]	@ (8003910 <Cmd_help_pmu+0x64>)
 80038c0:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80038c2:	e016      	b.n	80038f2 <Cmd_help_pmu+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4619      	mov	r1, r3
 80038ca:	4810      	ldr	r0, [pc, #64]	@ (800390c <Cmd_help_pmu+0x60>)
 80038cc:	f7fe f9a2 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4619      	mov	r1, r3
 80038d6:	480d      	ldr	r0, [pc, #52]	@ (800390c <Cmd_help_pmu+0x60>)
 80038d8:	f7fe f99c 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 80038dc:	490d      	ldr	r1, [pc, #52]	@ (8003914 <Cmd_help_pmu+0x68>)
 80038de:	480b      	ldr	r0, [pc, #44]	@ (800390c <Cmd_help_pmu+0x60>)
 80038e0:	f7fe f998 	bl	8001c14 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[28]) {
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003918 <Cmd_help_pmu+0x6c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <Cmd_help_pmu+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	330c      	adds	r3, #12
 80038f0:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e4      	bne.n	80038c4 <Cmd_help_pmu+0x18>
 80038fa:	e000      	b.n	80038fe <Cmd_help_pmu+0x52>
	        break;
 80038fc:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	0800c690 	.word	0x0800c690
 800390c:	40011400 	.word	0x40011400
 8003910:	2000015c 	.word	0x2000015c
 8003914:	0800c4cc 	.word	0x0800c4cc
 8003918:	20000180 	.word	0x20000180

0800391c <Cmd_help_pdu>:
int Cmd_help_pdu(int argc, char *argv[]) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(USART6, "---------PDU Command List--------\r\n");
 8003926:	4914      	ldr	r1, [pc, #80]	@ (8003978 <Cmd_help_pdu+0x5c>)
 8003928:	4814      	ldr	r0, [pc, #80]	@ (800397c <Cmd_help_pdu+0x60>)
 800392a:	f7fe f973 	bl	8001c14 <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[29];
 800392e:	4b14      	ldr	r3, [pc, #80]	@ (8003980 <Cmd_help_pdu+0x64>)
 8003930:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8003932:	e016      	b.n	8003962 <Cmd_help_pdu+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4619      	mov	r1, r3
 800393a:	4810      	ldr	r0, [pc, #64]	@ (800397c <Cmd_help_pdu+0x60>)
 800393c:	f7fe f96a 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4619      	mov	r1, r3
 8003946:	480d      	ldr	r0, [pc, #52]	@ (800397c <Cmd_help_pdu+0x60>)
 8003948:	f7fe f964 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 800394c:	490d      	ldr	r1, [pc, #52]	@ (8003984 <Cmd_help_pdu+0x68>)
 800394e:	480b      	ldr	r0, [pc, #44]	@ (800397c <Cmd_help_pdu+0x60>)
 8003950:	f7fe f960 	bl	8001c14 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[33]) {
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a0c      	ldr	r2, [pc, #48]	@ (8003988 <Cmd_help_pdu+0x6c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <Cmd_help_pdu+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	330c      	adds	r3, #12
 8003960:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e4      	bne.n	8003934 <Cmd_help_pdu+0x18>
 800396a:	e000      	b.n	800396e <Cmd_help_pdu+0x52>
	        break;
 800396c:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	0800c6b4 	.word	0x0800c6b4
 800397c:	40011400 	.word	0x40011400
 8003980:	2000018c 	.word	0x2000018c
 8003984:	0800c4cc 	.word	0x0800c4cc
 8003988:	200001bc 	.word	0x200001bc

0800398c <Cmd_help_cam>:
int Cmd_help_cam(int argc, char *argv[]) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(USART6, "---------CAM Command List--------\r\n");
 8003996:	4914      	ldr	r1, [pc, #80]	@ (80039e8 <Cmd_help_cam+0x5c>)
 8003998:	4814      	ldr	r0, [pc, #80]	@ (80039ec <Cmd_help_cam+0x60>)
 800399a:	f7fe f93b 	bl	8001c14 <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[34];
 800399e:	4b14      	ldr	r3, [pc, #80]	@ (80039f0 <Cmd_help_cam+0x64>)
 80039a0:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80039a2:	e016      	b.n	80039d2 <Cmd_help_cam+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
 80039aa:	4810      	ldr	r0, [pc, #64]	@ (80039ec <Cmd_help_cam+0x60>)
 80039ac:	f7fe f932 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4619      	mov	r1, r3
 80039b6:	480d      	ldr	r0, [pc, #52]	@ (80039ec <Cmd_help_cam+0x60>)
 80039b8:	f7fe f92c 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 80039bc:	490d      	ldr	r1, [pc, #52]	@ (80039f4 <Cmd_help_cam+0x68>)
 80039be:	480b      	ldr	r0, [pc, #44]	@ (80039ec <Cmd_help_cam+0x60>)
 80039c0:	f7fe f928 	bl	8001c14 <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[34]) {
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a0a      	ldr	r2, [pc, #40]	@ (80039f0 <Cmd_help_cam+0x64>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <Cmd_help_cam+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	330c      	adds	r3, #12
 80039d0:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e4      	bne.n	80039a4 <Cmd_help_cam+0x18>
 80039da:	e000      	b.n	80039de <Cmd_help_cam+0x52>
	        break;
 80039dc:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	0800c6d8 	.word	0x0800c6d8
 80039ec:	40011400 	.word	0x40011400
 80039f0:	200001c8 	.word	0x200001c8
 80039f4:	0800c4cc 	.word	0x0800c4cc

080039f8 <Cmd_help_iou>:
int Cmd_help_iou(int argc, char *argv[]) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
    Uart_sendstring(USART6, "---------IOU Command List--------\r\n");
 8003a02:	4914      	ldr	r1, [pc, #80]	@ (8003a54 <Cmd_help_iou+0x5c>)
 8003a04:	4814      	ldr	r0, [pc, #80]	@ (8003a58 <Cmd_help_iou+0x60>)
 8003a06:	f7fe f905 	bl	8001c14 <Uart_sendstring>


	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[35];
 8003a0a:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <Cmd_help_iou+0x64>)
 8003a0c:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8003a0e:	e016      	b.n	8003a3e <Cmd_help_iou+0x46>
		// Print the command name and the brief description.
		Uart_sendstring(USART6, pEntry->pcCmd);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4619      	mov	r1, r3
 8003a16:	4810      	ldr	r0, [pc, #64]	@ (8003a58 <Cmd_help_iou+0x60>)
 8003a18:	f7fe f8fc 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, pEntry->pcHelp);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4619      	mov	r1, r3
 8003a22:	480d      	ldr	r0, [pc, #52]	@ (8003a58 <Cmd_help_iou+0x60>)
 8003a24:	f7fe f8f6 	bl	8001c14 <Uart_sendstring>
		Uart_sendstring(USART6, "\r\n");
 8003a28:	490d      	ldr	r1, [pc, #52]	@ (8003a60 <Cmd_help_iou+0x68>)
 8003a2a:	480b      	ldr	r0, [pc, #44]	@ (8003a58 <Cmd_help_iou+0x60>)
 8003a2c:	f7fe f8f2 	bl	8001c14 <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[23]) {
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a0c      	ldr	r2, [pc, #48]	@ (8003a64 <Cmd_help_iou+0x6c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d007      	beq.n	8003a48 <Cmd_help_iou+0x50>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e4      	bne.n	8003a10 <Cmd_help_iou+0x18>
 8003a46:	e000      	b.n	8003a4a <Cmd_help_iou+0x52>
	        break;
 8003a48:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	0800c6fc 	.word	0x0800c6fc
 8003a58:	40011400 	.word	0x40011400
 8003a5c:	200001d4 	.word	0x200001d4
 8003a60:	0800c4cc 	.word	0x0800c4cc
 8003a64:	20000144 	.word	0x20000144

08003a68 <NotYetDefine>:





int NotYetDefine(int argc, char *argv[]) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	Uart_sendstring(USART6, "\nThis function is not defined yet \r\n");
 8003a72:	4904      	ldr	r1, [pc, #16]	@ (8003a84 <NotYetDefine+0x1c>)
 8003a74:	4804      	ldr	r0, [pc, #16]	@ (8003a88 <NotYetDefine+0x20>)
 8003a76:	f7fe f8cd 	bl	8001c14 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	0800c720 	.word	0x0800c720
 8003a88:	40011400 	.word	0x40011400

08003a8c <Cmd_splash>:

int Cmd_splash(int argc, char *argv[]) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
	command_send_splash();
 8003a96:	f000 f9c3 	bl	8003e20 <command_send_splash>
	// Return success.
	return (CMDLINE_OK);
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <Cmd_status_now>:

int Cmd_status_now(int argc, char *argv[]){
 8003aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa6:	b0a3      	sub	sp, #140	@ 0x8c
 8003aa8:	af04      	add	r7, sp, #16
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    float temp;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8003aae:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8003ab2:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 8003ab6:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 8003aba:	f107 0073 	add.w	r0, r7, #115	@ 0x73
 8003abe:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 8003ac2:	9302      	str	r3, [sp, #8]
 8003ac4:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	f107 036f 	add.w	r3, r7, #111	@ 0x6f
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	f7fd fcc7 	bl	8001464 <DS3231_GetDateTime>

    // Get current temperature from DS3231
    temp = DS3231_GetTemperature();
 8003ad6:	f7fd fd6d 	bl	80015b4 <DS3231_GetTemperature>
 8003ada:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74

    sprintf(buffer, "%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8003ade:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003ae8:	461e      	mov	r6, r3
 8003aea:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003aee:	461a      	mov	r2, r3
 8003af0:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8003af4:	4619      	mov	r1, r3
 8003af6:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8003afa:	461c      	mov	r4, r3
 8003afc:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003b00:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003b04:	f107 0008 	add.w	r0, r7, #8
 8003b08:	9303      	str	r3, [sp, #12]
 8003b0a:	9402      	str	r4, [sp, #8]
 8003b0c:	9101      	str	r1, [sp, #4]
 8003b0e:	9200      	str	r2, [sp, #0]
 8003b10:	4633      	mov	r3, r6
 8003b12:	462a      	mov	r2, r5
 8003b14:	4926      	ldr	r1, [pc, #152]	@ (8003bb0 <Cmd_status_now+0x10c>)
 8003b16:	f004 f917 	bl	8007d48 <siprintf>
    Uart_sendstring(USART6, buffer);
 8003b1a:	f107 0308 	add.w	r3, r7, #8
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4824      	ldr	r0, [pc, #144]	@ (8003bb4 <Cmd_status_now+0x110>)
 8003b22:	f7fe f877 	bl	8001c14 <Uart_sendstring>

    sprintf(buffer, "Temperature: %.2f°C\r\n", temp);
 8003b26:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003b28:	f7fc fd1e 	bl	8000568 <__aeabi_f2d>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	f107 0008 	add.w	r0, r7, #8
 8003b34:	4920      	ldr	r1, [pc, #128]	@ (8003bb8 <Cmd_status_now+0x114>)
 8003b36:	f004 f907 	bl	8007d48 <siprintf>
    Uart_sendstring(USART6, buffer);
 8003b3a:	f107 0308 	add.w	r3, r7, #8
 8003b3e:	4619      	mov	r1, r3
 8003b40:	481c      	ldr	r0, [pc, #112]	@ (8003bb4 <Cmd_status_now+0x110>)
 8003b42:	f7fe f867 	bl	8001c14 <Uart_sendstring>
    sprintf(buffer, "HardwareVer: CPOC Hardware 1.2.0\r\n");
 8003b46:	f107 0308 	add.w	r3, r7, #8
 8003b4a:	491c      	ldr	r1, [pc, #112]	@ (8003bbc <Cmd_status_now+0x118>)
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f004 f8fb 	bl	8007d48 <siprintf>
    Uart_sendstring(USART6, buffer);
 8003b52:	f107 0308 	add.w	r3, r7, #8
 8003b56:	4619      	mov	r1, r3
 8003b58:	4816      	ldr	r0, [pc, #88]	@ (8003bb4 <Cmd_status_now+0x110>)
 8003b5a:	f7fe f85b 	bl	8001c14 <Uart_sendstring>
    sprintf(buffer, "FirmwareVer: CPOC Firmware 1.0.0\r\n");
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	4917      	ldr	r1, [pc, #92]	@ (8003bc0 <Cmd_status_now+0x11c>)
 8003b64:	4618      	mov	r0, r3
 8003b66:	f004 f8ef 	bl	8007d48 <siprintf>
    Uart_sendstring(USART6, buffer);
 8003b6a:	f107 0308 	add.w	r3, r7, #8
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4810      	ldr	r0, [pc, #64]	@ (8003bb4 <Cmd_status_now+0x110>)
 8003b72:	f7fe f84f 	bl	8001c14 <Uart_sendstring>

    sprintf(buffer, "Enable: Yes\r\n");
 8003b76:	f107 0308 	add.w	r3, r7, #8
 8003b7a:	4912      	ldr	r1, [pc, #72]	@ (8003bc4 <Cmd_status_now+0x120>)
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f004 f8e3 	bl	8007d48 <siprintf>
    Uart_sendstring(USART6, buffer);
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	4619      	mov	r1, r3
 8003b88:	480a      	ldr	r0, [pc, #40]	@ (8003bb4 <Cmd_status_now+0x110>)
 8003b8a:	f7fe f843 	bl	8001c14 <Uart_sendstring>

    sprintf(buffer, "Mode: Normal\r\n");
 8003b8e:	f107 0308 	add.w	r3, r7, #8
 8003b92:	490d      	ldr	r1, [pc, #52]	@ (8003bc8 <Cmd_status_now+0x124>)
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 f8d7 	bl	8007d48 <siprintf>
    Uart_sendstring(USART6, buffer);
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4804      	ldr	r0, [pc, #16]	@ (8003bb4 <Cmd_status_now+0x110>)
 8003ba2:	f7fe f837 	bl	8001c14 <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	377c      	adds	r7, #124	@ 0x7c
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb0:	0800c748 	.word	0x0800c748
 8003bb4:	40011400 	.word	0x40011400
 8003bb8:	0800c768 	.word	0x0800c768
 8003bbc:	0800c780 	.word	0x0800c780
 8003bc0:	0800c7a4 	.word	0x0800c7a4
 8003bc4:	0800c7c8 	.word	0x0800c7c8
 8003bc8:	0800c7d8 	.word	0x0800c7d8

08003bcc <Cmd_time_get>:

int Cmd_time_get(int argc, char *argv[]){
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	b0a3      	sub	sp, #140	@ 0x8c
 8003bd0:	af04      	add	r7, sp, #16
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8003bd6:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8003bda:	f107 0275 	add.w	r2, r7, #117	@ 0x75
 8003bde:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 8003be2:	f107 0077 	add.w	r0, r7, #119	@ 0x77
 8003be6:	f107 0371 	add.w	r3, r7, #113	@ 0x71
 8003bea:	9302      	str	r3, [sp, #8]
 8003bec:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	f7fd fc33 	bl	8001464 <DS3231_GetDateTime>
    sprintf(buffer, "%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);    Uart_sendstring(USART6, buffer);
 8003bfe:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003c02:	461d      	mov	r5, r3
 8003c04:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8003c08:	461e      	mov	r6, r3
 8003c0a:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003c14:	4619      	mov	r1, r3
 8003c16:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003c1a:	461c      	mov	r4, r3
 8003c1c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003c20:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003c24:	f107 000c 	add.w	r0, r7, #12
 8003c28:	9303      	str	r3, [sp, #12]
 8003c2a:	9402      	str	r4, [sp, #8]
 8003c2c:	9101      	str	r1, [sp, #4]
 8003c2e:	9200      	str	r2, [sp, #0]
 8003c30:	4633      	mov	r3, r6
 8003c32:	462a      	mov	r2, r5
 8003c34:	4906      	ldr	r1, [pc, #24]	@ (8003c50 <Cmd_time_get+0x84>)
 8003c36:	f004 f887 	bl	8007d48 <siprintf>
 8003c3a:	f107 030c 	add.w	r3, r7, #12
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4804      	ldr	r0, [pc, #16]	@ (8003c54 <Cmd_time_get+0x88>)
 8003c42:	f7fd ffe7 	bl	8001c14 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	377c      	adds	r7, #124	@ 0x7c
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c50:	0800c748 	.word	0x0800c748
 8003c54:	40011400 	.word	0x40011400

08003c58 <Cmd_time_set>:

int Cmd_time_set(int argc, char *argv[]){
 8003c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5a:	b0a3      	sub	sp, #140	@ 0x8c
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
    if (argc < 7) return CMDLINE_TOO_FEW_ARGS;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b06      	cmp	r3, #6
 8003c66:	dc01      	bgt.n	8003c6c <Cmd_time_set+0x14>
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e088      	b.n	8003d7e <Cmd_time_set+0x126>
    if (argc > 7) return CMDLINE_TOO_MANY_ARGS;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b07      	cmp	r3, #7
 8003c70:	dd01      	ble.n	8003c76 <Cmd_time_set+0x1e>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e083      	b.n	8003d7e <Cmd_time_set+0x126>

    uint8_t hour = atoi(argv[1]);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 f8ab 	bl	8006dd8 <atoi>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    uint8_t min = atoi(argv[2]);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f003 f8a2 	bl	8006dd8 <atoi>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    uint8_t sec = atoi(argv[3]);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f003 f899 	bl	8006dd8 <atoi>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
    uint8_t date = atoi(argv[4]);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	3310      	adds	r3, #16
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f003 f890 	bl	8006dd8 <atoi>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    uint8_t month = atoi(argv[5]);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f003 f887 	bl	8006dd8 <atoi>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    uint8_t year = atoi(argv[6]);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f003 f87e 	bl	8006dd8 <atoi>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

    if (hour > 23 || min > 59 || sec > 59 || date > 31 || month > 12 || year > 99)
 8003ce2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003ce6:	2b17      	cmp	r3, #23
 8003ce8:	d813      	bhi.n	8003d12 <Cmd_time_set+0xba>
 8003cea:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003cee:	2b3b      	cmp	r3, #59	@ 0x3b
 8003cf0:	d80f      	bhi.n	8003d12 <Cmd_time_set+0xba>
 8003cf2:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003cf6:	2b3b      	cmp	r3, #59	@ 0x3b
 8003cf8:	d80b      	bhi.n	8003d12 <Cmd_time_set+0xba>
 8003cfa:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003cfe:	2b1f      	cmp	r3, #31
 8003d00:	d807      	bhi.n	8003d12 <Cmd_time_set+0xba>
 8003d02:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d803      	bhi.n	8003d12 <Cmd_time_set+0xba>
 8003d0a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8003d0e:	2b63      	cmp	r3, #99	@ 0x63
 8003d10:	d901      	bls.n	8003d16 <Cmd_time_set+0xbe>
        return CMDLINE_INVALID_ARG;
 8003d12:	2304      	movs	r3, #4
 8003d14:	e033      	b.n	8003d7e <Cmd_time_set+0x126>

    DS3231_SetDateTime(1, date, month, year, hour, min, sec);
 8003d16:	f897 0072 	ldrb.w	r0, [r7, #114]	@ 0x72
 8003d1a:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8003d1e:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 8003d22:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003d26:	9302      	str	r3, [sp, #8]
 8003d28:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	4603      	mov	r3, r0
 8003d36:	2001      	movs	r0, #1
 8003d38:	f7fd fad6 	bl	80012e8 <DS3231_SetDateTime>

    char buffer[100];
    sprintf(buffer, "Time set to: %02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8003d3c:	f897 5077 	ldrb.w	r5, [r7, #119]	@ 0x77
 8003d40:	f897 6076 	ldrb.w	r6, [r7, #118]	@ 0x76
 8003d44:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003d48:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8003d4c:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8003d50:	f897 0072 	ldrb.w	r0, [r7, #114]	@ 0x72
 8003d54:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8003d58:	f107 040c 	add.w	r4, r7, #12
 8003d5c:	9003      	str	r0, [sp, #12]
 8003d5e:	9102      	str	r1, [sp, #8]
 8003d60:	9201      	str	r2, [sp, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4633      	mov	r3, r6
 8003d66:	462a      	mov	r2, r5
 8003d68:	4907      	ldr	r1, [pc, #28]	@ (8003d88 <Cmd_time_set+0x130>)
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f003 ffec 	bl	8007d48 <siprintf>
    Uart_sendstring(USART6, buffer);
 8003d70:	f107 030c 	add.w	r3, r7, #12
 8003d74:	4619      	mov	r1, r3
 8003d76:	4805      	ldr	r0, [pc, #20]	@ (8003d8c <Cmd_time_set+0x134>)
 8003d78:	f7fd ff4c 	bl	8001c14 <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	377c      	adds	r7, #124	@ 0x7c
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d86:	bf00      	nop
 8003d88:	0800c7e8 	.word	0x0800c7e8
 8003d8c:	40011400 	.word	0x40011400

08003d90 <Cmd_cpoc_reset>:

int Cmd_cpoc_reset(int argc, char *argv[]){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 8003d9a:	f7ff fb7f 	bl	800349c <__NVIC_SystemReset>
	...

08003da0 <Cmd_rf_ena>:
	// Return success.
	return (CMDLINE_OK);
}

int Cmd_rf_ena(int argc, char *argv[]){
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
	LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8003daa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003dae:	4806      	ldr	r0, [pc, #24]	@ (8003dc8 <Cmd_rf_ena+0x28>)
 8003db0:	f7ff fb98 	bl	80034e4 <LL_GPIO_ResetOutputPin>
	 Uart_sendstring(USART6, "\nRF Set to Enable\r\n");
 8003db4:	4905      	ldr	r1, [pc, #20]	@ (8003dcc <Cmd_rf_ena+0x2c>)
 8003db6:	4806      	ldr	r0, [pc, #24]	@ (8003dd0 <Cmd_rf_ena+0x30>)
 8003db8:	f7fd ff2c 	bl	8001c14 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40020400 	.word	0x40020400
 8003dcc:	0800c818 	.word	0x0800c818
 8003dd0:	40011400 	.word	0x40011400

08003dd4 <Cmd_rf_dis>:

int Cmd_rf_dis(int argc, char *argv[]){
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
	LL_GPIO_SetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8003dde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003de2:	4806      	ldr	r0, [pc, #24]	@ (8003dfc <Cmd_rf_dis+0x28>)
 8003de4:	f7ff fb70 	bl	80034c8 <LL_GPIO_SetOutputPin>
	Uart_sendstring(USART6, "\nRF Disable\r\n");
 8003de8:	4905      	ldr	r1, [pc, #20]	@ (8003e00 <Cmd_rf_dis+0x2c>)
 8003dea:	4806      	ldr	r0, [pc, #24]	@ (8003e04 <Cmd_rf_dis+0x30>)
 8003dec:	f7fd ff12 	bl	8001c14 <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40020400 	.word	0x40020400
 8003e00:	0800c82c 	.word	0x0800c82c
 8003e04:	40011400 	.word	0x40011400

08003e08 <command_create_task>:




void	command_create_task(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8003e0c:	4902      	ldr	r1, [pc, #8]	@ (8003e18 <command_create_task+0x10>)
 8003e0e:	4803      	ldr	r0, [pc, #12]	@ (8003e1c <command_create_task+0x14>)
 8003e10:	f002 f934 	bl	800607c <SCH_TASK_CreateTask>
}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000298 	.word	0x20000298
 8003e1c:	20000294 	.word	0x20000294

08003e20 <command_send_splash>:

void	command_send_splash(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
	Uart_sendstring(USART6, "\r\n");
 8003e24:	4934      	ldr	r1, [pc, #208]	@ (8003ef8 <command_send_splash+0xd8>)
 8003e26:	4835      	ldr	r0, [pc, #212]	@ (8003efc <command_send_splash+0xdc>)
 8003e28:	f7fd fef4 	bl	8001c14 <Uart_sendstring>

	Uart_sendstring(USART6, "................................................\r\n");
 8003e2c:	4934      	ldr	r1, [pc, #208]	@ (8003f00 <command_send_splash+0xe0>)
 8003e2e:	4833      	ldr	r0, [pc, #204]	@ (8003efc <command_send_splash+0xdc>)
 8003e30:	f7fd fef0 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..        ____                                ..\r\n");
 8003e34:	4933      	ldr	r1, [pc, #204]	@ (8003f04 <command_send_splash+0xe4>)
 8003e36:	4831      	ldr	r0, [pc, #196]	@ (8003efc <command_send_splash+0xdc>)
 8003e38:	f7fd feec 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..       / ___| _ __   __ _  ___ ___          ..\r\n");
 8003e3c:	4932      	ldr	r1, [pc, #200]	@ (8003f08 <command_send_splash+0xe8>)
 8003e3e:	482f      	ldr	r0, [pc, #188]	@ (8003efc <command_send_splash+0xdc>)
 8003e40:	f7fd fee8 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..       \\___ \\| '_ \\ / _` |/ __/ _ \\         ..  \r\n");
 8003e44:	4931      	ldr	r1, [pc, #196]	@ (8003f0c <command_send_splash+0xec>)
 8003e46:	482d      	ldr	r0, [pc, #180]	@ (8003efc <command_send_splash+0xdc>)
 8003e48:	f7fd fee4 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..        ___) | |_) | (_| | (_|  __/         ..\r\n");
 8003e4c:	4930      	ldr	r1, [pc, #192]	@ (8003f10 <command_send_splash+0xf0>)
 8003e4e:	482b      	ldr	r0, [pc, #172]	@ (8003efc <command_send_splash+0xdc>)
 8003e50:	f7fd fee0 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..       |____/| .__/ \\__,_|\\___\\___|         ..  \r\n");
 8003e54:	492f      	ldr	r1, [pc, #188]	@ (8003f14 <command_send_splash+0xf4>)
 8003e56:	4829      	ldr	r0, [pc, #164]	@ (8003efc <command_send_splash+0xdc>)
 8003e58:	f7fd fedc 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..             |_|                            ..\r\n");
 8003e5c:	492e      	ldr	r1, [pc, #184]	@ (8003f18 <command_send_splash+0xf8>)
 8003e5e:	4827      	ldr	r0, [pc, #156]	@ (8003efc <command_send_splash+0xdc>)
 8003e60:	f7fd fed8 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..     _     _ _     _____         _          ..\r\n");
 8003e64:	492d      	ldr	r1, [pc, #180]	@ (8003f1c <command_send_splash+0xfc>)
 8003e66:	4825      	ldr	r0, [pc, #148]	@ (8003efc <command_send_splash+0xdc>)
 8003e68:	f7fd fed4 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..    | |   (_|_)_ _|_   _|__  ___| |__       ..\r\n");
 8003e6c:	492c      	ldr	r1, [pc, #176]	@ (8003f20 <command_send_splash+0x100>)
 8003e6e:	4823      	ldr	r0, [pc, #140]	@ (8003efc <command_send_splash+0xdc>)
 8003e70:	f7fd fed0 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..    | |   | | | '_ \\| |/ _ \\/ __| '_ \\      ..\r\n");
 8003e74:	492b      	ldr	r1, [pc, #172]	@ (8003f24 <command_send_splash+0x104>)
 8003e76:	4821      	ldr	r0, [pc, #132]	@ (8003efc <command_send_splash+0xdc>)
 8003e78:	f7fd fecc 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..    | |___| | | | | | |  __/ (__| | | |     ..\r\n");
 8003e7c:	492a      	ldr	r1, [pc, #168]	@ (8003f28 <command_send_splash+0x108>)
 8003e7e:	481f      	ldr	r0, [pc, #124]	@ (8003efc <command_send_splash+0xdc>)
 8003e80:	f7fd fec8 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..    |_____|_|_|_| |_|_|\\___|\\___| |_|_|     ..\r\n");
 8003e84:	4929      	ldr	r1, [pc, #164]	@ (8003f2c <command_send_splash+0x10c>)
 8003e86:	481d      	ldr	r0, [pc, #116]	@ (8003efc <command_send_splash+0xdc>)
 8003e88:	f7fd fec4 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "................................................\r\n");
 8003e8c:	491c      	ldr	r1, [pc, #112]	@ (8003f00 <command_send_splash+0xe0>)
 8003e8e:	481b      	ldr	r0, [pc, #108]	@ (8003efc <command_send_splash+0xdc>)
 8003e90:	f7fd fec0 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..           ____ ____   ___   ____           ..\r\n");
 8003e94:	4926      	ldr	r1, [pc, #152]	@ (8003f30 <command_send_splash+0x110>)
 8003e96:	4819      	ldr	r0, [pc, #100]	@ (8003efc <command_send_splash+0xdc>)
 8003e98:	f7fd febc 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..          / ___|  _ \\ / _ \\ / ___|          ..\r\n");
 8003e9c:	4925      	ldr	r1, [pc, #148]	@ (8003f34 <command_send_splash+0x114>)
 8003e9e:	4817      	ldr	r0, [pc, #92]	@ (8003efc <command_send_splash+0xdc>)
 8003ea0:	f7fd feb8 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..         | |   | |_) | | | | |              ..\r\n");
 8003ea4:	4924      	ldr	r1, [pc, #144]	@ (8003f38 <command_send_splash+0x118>)
 8003ea6:	4815      	ldr	r0, [pc, #84]	@ (8003efc <command_send_splash+0xdc>)
 8003ea8:	f7fd feb4 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..         | |___|  __/| |_| | |___           ..\r\n");
 8003eac:	4923      	ldr	r1, [pc, #140]	@ (8003f3c <command_send_splash+0x11c>)
 8003eae:	4813      	ldr	r0, [pc, #76]	@ (8003efc <command_send_splash+0xdc>)
 8003eb0:	f7fd feb0 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..          \\____|_|    \\___/ \\____|          .. \r\n");
 8003eb4:	4922      	ldr	r1, [pc, #136]	@ (8003f40 <command_send_splash+0x120>)
 8003eb6:	4811      	ldr	r0, [pc, #68]	@ (8003efc <command_send_splash+0xdc>)
 8003eb8:	f7fd feac 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..                  _   ___   ___             ..\r\n");
 8003ebc:	4921      	ldr	r1, [pc, #132]	@ (8003f44 <command_send_splash+0x124>)
 8003ebe:	480f      	ldr	r0, [pc, #60]	@ (8003efc <command_send_splash+0xdc>)
 8003ec0:	f7fd fea8 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..          __   __/ | / _ \\ / _ \\            .. \r\n");
 8003ec4:	4920      	ldr	r1, [pc, #128]	@ (8003f48 <command_send_splash+0x128>)
 8003ec6:	480d      	ldr	r0, [pc, #52]	@ (8003efc <command_send_splash+0xdc>)
 8003ec8:	f7fd fea4 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..          \\ \\ / /| || | | | | | |           ..  \r\n");
 8003ecc:	491f      	ldr	r1, [pc, #124]	@ (8003f4c <command_send_splash+0x12c>)
 8003ece:	480b      	ldr	r0, [pc, #44]	@ (8003efc <command_send_splash+0xdc>)
 8003ed0:	f7fd fea0 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..           \\ V / | || |_| | |_| |           .. \r\n");
 8003ed4:	491e      	ldr	r1, [pc, #120]	@ (8003f50 <command_send_splash+0x130>)
 8003ed6:	4809      	ldr	r0, [pc, #36]	@ (8003efc <command_send_splash+0xdc>)
 8003ed8:	f7fd fe9c 	bl	8001c14 <Uart_sendstring>
	Uart_sendstring(USART6, "..            \\_/  |_(_)___(_)___/            .. \r\n");
 8003edc:	491d      	ldr	r1, [pc, #116]	@ (8003f54 <command_send_splash+0x134>)
 8003ede:	4807      	ldr	r0, [pc, #28]	@ (8003efc <command_send_splash+0xdc>)
 8003ee0:	f7fd fe98 	bl	8001c14 <Uart_sendstring>
    Uart_sendstring(USART6, "................................................\r\n");
 8003ee4:	4906      	ldr	r1, [pc, #24]	@ (8003f00 <command_send_splash+0xe0>)
 8003ee6:	4805      	ldr	r0, [pc, #20]	@ (8003efc <command_send_splash+0xdc>)
 8003ee8:	f7fd fe94 	bl	8001c14 <Uart_sendstring>

	Uart_sendstring(USART6, "> ");
 8003eec:	491a      	ldr	r1, [pc, #104]	@ (8003f58 <command_send_splash+0x138>)
 8003eee:	4803      	ldr	r0, [pc, #12]	@ (8003efc <command_send_splash+0xdc>)
 8003ef0:	f7fd fe90 	bl	8001c14 <Uart_sendstring>
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	0800c4cc 	.word	0x0800c4cc
 8003efc:	40011400 	.word	0x40011400
 8003f00:	0800c83c 	.word	0x0800c83c
 8003f04:	0800c870 	.word	0x0800c870
 8003f08:	0800c8a4 	.word	0x0800c8a4
 8003f0c:	0800c8d8 	.word	0x0800c8d8
 8003f10:	0800c910 	.word	0x0800c910
 8003f14:	0800c944 	.word	0x0800c944
 8003f18:	0800c97c 	.word	0x0800c97c
 8003f1c:	0800c9b0 	.word	0x0800c9b0
 8003f20:	0800c9e4 	.word	0x0800c9e4
 8003f24:	0800ca18 	.word	0x0800ca18
 8003f28:	0800ca4c 	.word	0x0800ca4c
 8003f2c:	0800ca80 	.word	0x0800ca80
 8003f30:	0800cab4 	.word	0x0800cab4
 8003f34:	0800cae8 	.word	0x0800cae8
 8003f38:	0800cb1c 	.word	0x0800cb1c
 8003f3c:	0800cb50 	.word	0x0800cb50
 8003f40:	0800cb84 	.word	0x0800cb84
 8003f44:	0800cbb8 	.word	0x0800cbb8
 8003f48:	0800cbec 	.word	0x0800cbec
 8003f4c:	0800cc20 	.word	0x0800cc20
 8003f50:	0800cc58 	.word	0x0800cc58
 8003f54:	0800cc8c 	.word	0x0800cc8c
 8003f58:	0800c538 	.word	0x0800c538

08003f5c <COPC_init>:
		COPC_task_update                // taskFunction;
	}
};

void	COPC_init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8003f60:	f7fd fcde 	bl	8001920 <Ringbuf_init>
	fsp_init(FSP_ADR_CPOC);
 8003f64:	2001      	movs	r0, #1
 8003f66:	f002 fa0b 	bl	8006380 <fsp_init>
	s_pCOPC_Sfp_Payload = (COPC_Sfp_Payload_t *)(&s_COPC_FspPacket.payload);
 8003f6a:	4b02      	ldr	r3, [pc, #8]	@ (8003f74 <COPC_init+0x18>)
 8003f6c:	4a02      	ldr	r2, [pc, #8]	@ (8003f78 <COPC_init+0x1c>)
 8003f6e:	601a      	str	r2, [r3, #0]
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000bb4 	.word	0x20000bb4
 8003f78:	20000ab9 	.word	0x20000ab9

08003f7c <COPC_task_update>:
volatile uint8_t receiving = 0;
volatile uint8_t receive_buffer[FSP_PKT_MAX_LENGTH];
volatile uint8_t receive_index = 0;

static void COPC_task_update(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b0d0      	sub	sp, #320	@ 0x140
 8003f80:	af00      	add	r7, sp, #0
	uint8_t rxData;


    while (IsDataAvailable(USART1))
 8003f82:	e04f      	b.n	8004024 <COPC_task_update+0xa8>
    {
        rxData = Uart_read(USART1);
 8003f84:	482d      	ldr	r0, [pc, #180]	@ (800403c <COPC_task_update+0xc0>)
 8003f86:	f7fd fd45 	bl	8001a14 <Uart_read>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

//		char pos_str2[10];
//		sprintf(pos_str2, "%d", rxData);
//		Uart_sendstring(USART6, pos_str2);

        if (!receiving) {
 8003f90:	4b2b      	ldr	r3, [pc, #172]	@ (8004040 <COPC_task_update+0xc4>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <COPC_task_update+0x34>
            if (rxData == FSP_PKT_SOD) {
 8003f9a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8003f9e:	2bca      	cmp	r3, #202	@ 0xca
 8003fa0:	d140      	bne.n	8004024 <COPC_task_update+0xa8>
                receiving = 1;
 8003fa2:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <COPC_task_update+0xc4>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
                receive_index = 0;
 8003fa8:	4b26      	ldr	r3, [pc, #152]	@ (8004044 <COPC_task_update+0xc8>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e039      	b.n	8004024 <COPC_task_update+0xa8>
            }
        } else {

            if (rxData == FSP_PKT_EOF) {
 8003fb0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8003fb4:	2bef      	cmp	r3, #239	@ 0xef
 8003fb6:	d121      	bne.n	8003ffc <COPC_task_update+0x80>
                receiving = 0;
 8003fb8:	4b21      	ldr	r3, [pc, #132]	@ (8004040 <COPC_task_update+0xc4>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
                fsp_packet_t fsp_pkt;
                int ret = frame_decode((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 8003fbe:	4b21      	ldr	r3, [pc, #132]	@ (8004044 <COPC_task_update+0xc8>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8003fc8:	4619      	mov	r1, r3
 8003fca:	481f      	ldr	r0, [pc, #124]	@ (8004048 <COPC_task_update+0xcc>)
 8003fcc:	f002 fca0 	bl	8006910 <frame_decode>
 8003fd0:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138

                if (ret > 0) {
 8003fd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	dd1b      	ble.n	8004014 <COPC_task_update+0x98>
                    char error_msg[50];
                    sprintf(error_msg, "Error: %s\r\n", decode_error_msgs[ret]);
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <COPC_task_update+0xd0>)
 8003fde:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003fe2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003fe6:	1d3b      	adds	r3, r7, #4
 8003fe8:	4919      	ldr	r1, [pc, #100]	@ (8004050 <COPC_task_update+0xd4>)
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 feac 	bl	8007d48 <siprintf>
                    Uart_sendstring(USART6, error_msg);
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4817      	ldr	r0, [pc, #92]	@ (8004054 <COPC_task_update+0xd8>)
 8003ff6:	f7fd fe0d 	bl	8001c14 <Uart_sendstring>
 8003ffa:	e00b      	b.n	8004014 <COPC_task_update+0x98>
                }


            }else{
            	receive_buffer[receive_index++] = rxData;
 8003ffc:	4b11      	ldr	r3, [pc, #68]	@ (8004044 <COPC_task_update+0xc8>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	b2d1      	uxtb	r1, r2
 8004006:	4a0f      	ldr	r2, [pc, #60]	@ (8004044 <COPC_task_update+0xc8>)
 8004008:	7011      	strb	r1, [r2, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	4a0e      	ldr	r2, [pc, #56]	@ (8004048 <COPC_task_update+0xcc>)
 800400e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8004012:	5453      	strb	r3, [r2, r1]
            }

            if (receive_index >= FSP_PKT_MAX_LENGTH) {
 8004014:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <COPC_task_update+0xc8>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2bff      	cmp	r3, #255	@ 0xff
 800401c:	d102      	bne.n	8004024 <COPC_task_update+0xa8>
                // Frame quá dài, reset lại

                receiving = 0;
 800401e:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <COPC_task_update+0xc4>)
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART1))
 8004024:	4805      	ldr	r0, [pc, #20]	@ (800403c <COPC_task_update+0xc0>)
 8004026:	f7fd fdc3 	bl	8001bb0 <IsDataAvailable>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1a9      	bne.n	8003f84 <COPC_task_update+0x8>
            }
    }
}

}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40011000 	.word	0x40011000
 8004040:	20000bb8 	.word	0x20000bb8
 8004044:	20000cbb 	.word	0x20000cbb
 8004048:	20000bbc 	.word	0x20000bbc
 800404c:	200002a4 	.word	0x200002a4
 8004050:	0800cd4c 	.word	0x0800cd4c
 8004054:	40011400 	.word	0x40011400

08004058 <COPC_create_task>:
void	COPC_create_task(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
	COPC_init();
 800405c:	f7ff ff7e 	bl	8003f5c <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
 8004060:	4902      	ldr	r1, [pc, #8]	@ (800406c <COPC_create_task+0x14>)
 8004062:	4803      	ldr	r0, [pc, #12]	@ (8004070 <COPC_create_task+0x18>)
 8004064:	f002 f80a 	bl	800607c <SCH_TASK_CreateTask>
}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	200002c4 	.word	0x200002c4
 8004070:	200002c0 	.word	0x200002c0

08004074 <LL_GPIO_SetOutputPin>:
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	619a      	str	r2, [r3, #24]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_GPIO_ResetOutputPin>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	041a      	lsls	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	619a      	str	r2, [r3, #24]
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <status_led_init>:
{
	s_led_display_status.state = status;
}

void status_led_init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
    // Initialize LED status variable
    s_led_display_status.led = 0;
 80040b4:	4a06      	ldr	r2, [pc, #24]	@ (80040d0 <status_led_init+0x20>)
 80040b6:	7813      	ldrb	r3, [r2, #0]
 80040b8:	f36f 0300 	bfc	r3, #0, #1
 80040bc:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 80040be:	4a04      	ldr	r2, [pc, #16]	@ (80040d0 <status_led_init+0x20>)
 80040c0:	7813      	ldrb	r3, [r2, #0]
 80040c2:	f36f 0347 	bfc	r3, #1, #7
 80040c6:	7013      	strb	r3, [r2, #0]

    // Turn off LED initially
    status_led_off();
 80040c8:	f000 f804 	bl	80040d4 <status_led_off>
}
 80040cc:	bf00      	nop
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000cbc 	.word	0x20000cbc

080040d4 <status_led_off>:

static void status_led_off(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 80040d8:	2120      	movs	r1, #32
 80040da:	4802      	ldr	r0, [pc, #8]	@ (80040e4 <status_led_off+0x10>)
 80040dc:	f7ff ffd8 	bl	8004090 <LL_GPIO_ResetOutputPin>
}
 80040e0:	bf00      	nop
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40020800 	.word	0x40020800

080040e8 <status_led_on>:

static void status_led_on(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 80040ec:	2120      	movs	r1, #32
 80040ee:	4802      	ldr	r0, [pc, #8]	@ (80040f8 <status_led_on+0x10>)
 80040f0:	f7ff ffc0 	bl	8004074 <LL_GPIO_SetOutputPin>
}
 80040f4:	bf00      	nop
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40020800 	.word	0x40020800

080040fc <status_led_update>:

void	status_led_update(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
	switch (s_led_display_status.state) {
 8004100:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <status_led_update+0x3c>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b03      	cmp	r3, #3
 800410c:	d811      	bhi.n	8004132 <status_led_update+0x36>
 800410e:	a201      	add	r2, pc, #4	@ (adr r2, 8004114 <status_led_update+0x18>)
 8004110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004114:	08004125 	.word	0x08004125
 8004118:	0800412b 	.word	0x0800412b
 800411c:	08004131 	.word	0x08004131
 8004120:	08004131 	.word	0x08004131
	case POWERUP:
		status_led_powerup();
 8004124:	f000 f80a 	bl	800413c <status_led_powerup>
		break;
 8004128:	e003      	b.n	8004132 <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 800412a:	f000 f841 	bl	80041b0 <status_led_normal>
		break;
 800412e:	e000      	b.n	8004132 <status_led_update+0x36>
	case POWERING_SUB:
		break;
 8004130:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000cbc 	.word	0x20000cbc

0800413c <status_led_powerup>:

static void status_led_powerup(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 8004140:	4b1a      	ldr	r3, [pc, #104]	@ (80041ac <status_led_powerup+0x70>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d012      	beq.n	8004174 <status_led_powerup+0x38>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 800414e:	2000      	movs	r0, #0
 8004150:	f001 ff7e 	bl	8006050 <SCH_TIM_HasCompleted>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d025      	beq.n	80041a6 <status_led_powerup+0x6a>
        {
            s_led_display_status.led = 0;
 800415a:	4a14      	ldr	r2, [pc, #80]	@ (80041ac <status_led_powerup+0x70>)
 800415c:	7813      	ldrb	r3, [r2, #0]
 800415e:	f36f 0300 	bfc	r3, #0, #1
 8004162:	7013      	strb	r3, [r2, #0]
//            char buffered[100];
//            sprintf(buffered, "PMU_INT: %d, PDU_INT: %d, IOU_INT: %d, CAM_INT: %d\r\n",
//                    pmu_int_value, pdu_int_value, iou_int_value, cam_int_value);
//            Uart_sendstring(USART6, buffered);

            status_led_off();
 8004164:	f7ff ffb6 	bl	80040d4 <status_led_off>
//            command_send_splash();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8004168:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800416c:	2000      	movs	r0, #0
 800416e:	f001 ff59 	bl	8006024 <SCH_TIM_Start>
            s_led_display_status.led = 1;
            status_led_on();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
        }
    }
}
 8004172:	e018      	b.n	80041a6 <status_led_powerup+0x6a>
    else if (s_led_display_status.led == 0) // LED is OFF
 8004174:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <status_led_powerup+0x70>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d111      	bne.n	80041a6 <status_led_powerup+0x6a>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8004182:	2000      	movs	r0, #0
 8004184:	f001 ff64 	bl	8006050 <SCH_TIM_HasCompleted>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <status_led_powerup+0x6a>
            s_led_display_status.led = 1;
 800418e:	4a07      	ldr	r2, [pc, #28]	@ (80041ac <status_led_powerup+0x70>)
 8004190:	7813      	ldrb	r3, [r2, #0]
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	7013      	strb	r3, [r2, #0]
            status_led_on();
 8004198:	f7ff ffa6 	bl	80040e8 <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 800419c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80041a0:	2000      	movs	r0, #0
 80041a2:	f001 ff3f 	bl	8006024 <SCH_TIM_Start>
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000cbc 	.word	0x20000cbc

080041b0 <status_led_normal>:
//}
//


static void status_led_normal(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
//			s_led_display_status.led = 1;
//			status_led_on();
//			SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_ON_PERIOD);	//restart
//		}
//	}
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <status_led_create_task>:

void	status_led_create_task(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 80041c4:	4902      	ldr	r1, [pc, #8]	@ (80041d0 <status_led_create_task+0x10>)
 80041c6:	4803      	ldr	r0, [pc, #12]	@ (80041d4 <status_led_create_task+0x14>)
 80041c8:	f001 ff58 	bl	800607c <SCH_TASK_CreateTask>
}
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	200002d4 	.word	0x200002d4
 80041d4:	200002d0 	.word	0x200002d0

080041d8 <__NVIC_SetPriorityGrouping>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041e8:	4b0c      	ldr	r3, [pc, #48]	@ (800421c <__NVIC_SetPriorityGrouping+0x44>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041f4:	4013      	ands	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800420a:	4a04      	ldr	r2, [pc, #16]	@ (800421c <__NVIC_SetPriorityGrouping+0x44>)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	60d3      	str	r3, [r2, #12]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <__NVIC_GetPriorityGrouping>:
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004224:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <__NVIC_GetPriorityGrouping+0x18>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	0a1b      	lsrs	r3, r3, #8
 800422a:	f003 0307 	and.w	r3, r3, #7
}
 800422e:	4618      	mov	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000ed00 	.word	0xe000ed00

0800423c <__NVIC_EnableIRQ>:
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	2b00      	cmp	r3, #0
 800424c:	db0b      	blt.n	8004266 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	f003 021f 	and.w	r2, r3, #31
 8004254:	4907      	ldr	r1, [pc, #28]	@ (8004274 <__NVIC_EnableIRQ+0x38>)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2001      	movs	r0, #1
 800425e:	fa00 f202 	lsl.w	r2, r0, r2
 8004262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	e000e100 	.word	0xe000e100

08004278 <__NVIC_SetPriority>:
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	6039      	str	r1, [r7, #0]
 8004282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004288:	2b00      	cmp	r3, #0
 800428a:	db0a      	blt.n	80042a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	490c      	ldr	r1, [pc, #48]	@ (80042c4 <__NVIC_SetPriority+0x4c>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	0112      	lsls	r2, r2, #4
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	440b      	add	r3, r1
 800429c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80042a0:	e00a      	b.n	80042b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	4908      	ldr	r1, [pc, #32]	@ (80042c8 <__NVIC_SetPriority+0x50>)
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	3b04      	subs	r3, #4
 80042b0:	0112      	lsls	r2, r2, #4
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	440b      	add	r3, r1
 80042b6:	761a      	strb	r2, [r3, #24]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000e100 	.word	0xe000e100
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <NVIC_EncodePriority>:
{
 80042cc:	b480      	push	{r7}
 80042ce:	b089      	sub	sp, #36	@ 0x24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f1c3 0307 	rsb	r3, r3, #7
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	bf28      	it	cs
 80042ea:	2304      	movcs	r3, #4
 80042ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2b06      	cmp	r3, #6
 80042f4:	d902      	bls.n	80042fc <NVIC_EncodePriority+0x30>
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3b03      	subs	r3, #3
 80042fa:	e000      	b.n	80042fe <NVIC_EncodePriority+0x32>
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004300:	f04f 32ff 	mov.w	r2, #4294967295
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43da      	mvns	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	401a      	ands	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004314:	f04f 31ff 	mov.w	r1, #4294967295
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	fa01 f303 	lsl.w	r3, r1, r3
 800431e:	43d9      	mvns	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004324:	4313      	orrs	r3, r2
}
 8004326:	4618      	mov	r0, r3
 8004328:	3724      	adds	r7, #36	@ 0x24
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <LL_I2C_EnableClockStretching>:
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	601a      	str	r2, [r3, #0]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_I2C_DisableGeneralCall>:
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_I2C_SetOwnAddress2>:
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_I2C_DisableOwnAddress2>:
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f023 0201 	bic.w	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80043bc:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <LL_RCC_HSE_Enable+0x1c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a04      	ldr	r2, [pc, #16]	@ (80043d4 <LL_RCC_HSE_Enable+0x1c>)
 80043c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
}
 80043c8:	bf00      	nop
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800

080043d8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80043dc:	4b07      	ldr	r3, [pc, #28]	@ (80043fc <LL_RCC_HSE_IsReady+0x24>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800

08004400 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <LL_RCC_SetSysClkSource+0x24>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f023 0203 	bic.w	r2, r3, #3
 8004410:	4904      	ldr	r1, [pc, #16]	@ (8004424 <LL_RCC_SetSysClkSource+0x24>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4313      	orrs	r3, r2
 8004416:	608b      	str	r3, [r1, #8]
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40023800 	.word	0x40023800

08004428 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800442c:	4b04      	ldr	r3, [pc, #16]	@ (8004440 <LL_RCC_GetSysClkSource+0x18>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 030c 	and.w	r3, r3, #12
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800

08004444 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800444c:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <LL_RCC_SetAHBPrescaler+0x24>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004454:	4904      	ldr	r1, [pc, #16]	@ (8004468 <LL_RCC_SetAHBPrescaler+0x24>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4313      	orrs	r3, r2
 800445a:	608b      	str	r3, [r1, #8]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40023800 	.word	0x40023800

0800446c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004474:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <LL_RCC_SetAPB1Prescaler+0x24>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800447c:	4904      	ldr	r1, [pc, #16]	@ (8004490 <LL_RCC_SetAPB1Prescaler+0x24>)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40023800 	.word	0x40023800

08004494 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800449c:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044a4:	4904      	ldr	r1, [pc, #16]	@ (80044b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	608b      	str	r3, [r1, #8]
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40023800 	.word	0x40023800

080044bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80044c4:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80044c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044c8:	4907      	ldr	r1, [pc, #28]	@ (80044e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80044d0:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80044d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4013      	ands	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80044da:	68fb      	ldr	r3, [r7, #12]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40023800 	.word	0x40023800

080044ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80044f4:	4b08      	ldr	r3, [pc, #32]	@ (8004518 <LL_APB1_GRP1_EnableClock+0x2c>)
 80044f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044f8:	4907      	ldr	r1, [pc, #28]	@ (8004518 <LL_APB1_GRP1_EnableClock+0x2c>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004500:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4013      	ands	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800450a:	68fb      	ldr	r3, [r7, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	40023800 	.word	0x40023800

0800451c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004524:	4b08      	ldr	r3, [pc, #32]	@ (8004548 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004526:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004528:	4907      	ldr	r1, [pc, #28]	@ (8004548 <LL_APB2_GRP1_EnableClock+0x2c>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4313      	orrs	r3, r2
 800452e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004530:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004532:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4013      	ands	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800453a:	68fb      	ldr	r3, [r7, #12]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40023800 	.word	0x40023800

0800454c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <LL_FLASH_SetLatency+0x24>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 0207 	bic.w	r2, r3, #7
 800455c:	4904      	ldr	r1, [pc, #16]	@ (8004570 <LL_FLASH_SetLatency+0x24>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4313      	orrs	r3, r2
 8004562:	600b      	str	r3, [r1, #0]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40023c00 	.word	0x40023c00

08004574 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004578:	4b04      	ldr	r3, [pc, #16]	@ (800458c <LL_FLASH_GetLatency+0x18>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0307 	and.w	r3, r3, #7
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40023c00 	.word	0x40023c00

08004590 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8004598:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045a0:	4904      	ldr	r1, [pc, #16]	@ (80045b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	40007000 	.word	0x40007000

080045b8 <LL_USART_Enable>:
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	60da      	str	r2, [r3, #12]
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <LL_USART_ConfigAsyncMode>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	615a      	str	r2, [r3, #20]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <LL_GPIO_ResetOutputPin>:
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	041a      	lsls	r2, r3, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	619a      	str	r2, [r3, #24]
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8004628:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800462c:	f7ff ff76 	bl	800451c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8004630:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004634:	f7ff ff5a 	bl	80044ec <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004638:	2003      	movs	r0, #3
 800463a:	f7ff fdcd 	bl	80041d8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800463e:	f7ff fdef 	bl	8004220 <__NVIC_GetPriorityGrouping>
 8004642:	4603      	mov	r3, r0
 8004644:	2200      	movs	r2, #0
 8004646:	210f      	movs	r1, #15
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fe3f 	bl	80042cc <NVIC_EncodePriority>
 800464e:	4603      	mov	r3, r0
 8004650:	4619      	mov	r1, r3
 8004652:	f04f 30ff 	mov.w	r0, #4294967295
 8004656:	f7ff fe0f 	bl	8004278 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800465a:	f000 f833 	bl	80046c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800465e:	f000 fb29 	bl	8004cb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004662:	f000 f863 	bl	800472c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8004666:	f000 fac5 	bl	8004bf4 <MX_USART6_UART_Init>
  MX_UART5_Init();
 800466a:	f000 f989 	bl	8004980 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800466e:	f000 f9ff 	bl	8004a70 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8004672:	f000 f923 	bl	80048bc <MX_UART4_Init>
  MX_USART3_UART_Init();
 8004676:	f000 fa5b 	bl	8004b30 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 800467a:	f000 f8af 	bl	80047dc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  command_init();
 800467e:	f7fe ff41 	bl	8003504 <command_init>

  fsp_init(FSP_ADR_CPOC);
 8004682:	2001      	movs	r0, #1
 8004684:	f001 fe7c 	bl	8006380 <fsp_init>
  LL_GPIO_ResetOutputPin(GPIOC, ENABLE_MUX_Pin);
 8004688:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800468c:	480c      	ldr	r0, [pc, #48]	@ (80046c0 <main+0x9c>)
 800468e:	f7ff ffb9 	bl	8004604 <LL_GPIO_ResetOutputPin>

  status_led_init();
 8004692:	f7ff fd0d 	bl	80040b0 <status_led_init>



  WDT_init();
 8004696:	f000 fd05 	bl	80050a4 <WDT_init>

  SCH_Initialize();
 800469a:	f001 fc99 	bl	8005fd0 <SCH_Initialize>

  status_led_create_task();
 800469e:	f7ff fd8f 	bl	80041c0 <status_led_create_task>

  send_packet_init();
 80046a2:	f7fd fb41 	bl	8001d28 <send_packet_init>
  send_packet_create_task();
 80046a6:	f7fd fb85 	bl	8001db4 <send_packet_create_task>


  command_create_task();
 80046aa:	f7ff fbad 	bl	8003e08 <command_create_task>

  COPC_create_task();
 80046ae:	f7ff fcd3 	bl	8004058 <COPC_create_task>

  WDT_create_task();
 80046b2:	f000 fd03 	bl	80050bc <WDT_create_task>

  SCH_StartSchedular();
 80046b6:	f001 fdb3 	bl	8006220 <SCH_StartSchedular>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 80046ba:	f001 fdb7 	bl	800622c <SCH_HandleScheduledTask>
 80046be:	e7fc      	b.n	80046ba <main+0x96>
 80046c0:	40020800 	.word	0x40020800

080046c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80046c8:	2000      	movs	r0, #0
 80046ca:	f7ff ff3f 	bl	800454c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80046ce:	bf00      	nop
 80046d0:	f7ff ff50 	bl	8004574 <LL_FLASH_GetLatency>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1fa      	bne.n	80046d0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80046da:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80046de:	f7ff ff57 	bl	8004590 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80046e2:	f7ff fe69 	bl	80043b8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80046e6:	bf00      	nop
 80046e8:	f7ff fe76 	bl	80043d8 <LL_RCC_HSE_IsReady>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d1fa      	bne.n	80046e8 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80046f2:	2000      	movs	r0, #0
 80046f4:	f7ff fea6 	bl	8004444 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80046f8:	2000      	movs	r0, #0
 80046fa:	f7ff feb7 	bl	800446c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80046fe:	2000      	movs	r0, #0
 8004700:	f7ff fec8 	bl	8004494 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8004704:	2001      	movs	r0, #1
 8004706:	f7ff fe7b 	bl	8004400 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 800470a:	bf00      	nop
 800470c:	f7ff fe8c 	bl	8004428 <LL_RCC_GetSysClkSource>
 8004710:	4603      	mov	r3, r0
 8004712:	2b04      	cmp	r3, #4
 8004714:	d1fa      	bne.n	800470c <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8004716:	4804      	ldr	r0, [pc, #16]	@ (8004728 <SystemClock_Config+0x64>)
 8004718:	f001 fc3c 	bl	8005f94 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800471c:	4802      	ldr	r0, [pc, #8]	@ (8004728 <SystemClock_Config+0x64>)
 800471e:	f001 fc47 	bl	8005fb0 <LL_SetSystemCoreClock>
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	007a1200 	.word	0x007a1200

0800472c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08c      	sub	sp, #48	@ 0x30
 8004730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8004732:	f107 0318 	add.w	r3, r7, #24
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	609a      	str	r2, [r3, #8]
 800473e:	60da      	str	r2, [r3, #12]
 8004740:	611a      	str	r2, [r3, #16]
 8004742:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004744:	463b      	mov	r3, r7
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	609a      	str	r2, [r3, #8]
 800474e:	60da      	str	r2, [r3, #12]
 8004750:	611a      	str	r2, [r3, #16]
 8004752:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004754:	2002      	movs	r0, #2
 8004756:	f7ff feb1 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800475a:	23c0      	movs	r3, #192	@ 0xc0
 800475c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800475e:	2302      	movs	r3, #2
 8004760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004762:	2303      	movs	r3, #3
 8004764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004766:	2301      	movs	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800476e:	2304      	movs	r3, #4
 8004770:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004772:	463b      	mov	r3, r7
 8004774:	4619      	mov	r1, r3
 8004776:	4816      	ldr	r0, [pc, #88]	@ (80047d0 <MX_I2C1_Init+0xa4>)
 8004778:	f000 fe27 	bl	80053ca <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800477c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004780:	f7ff feb4 	bl	80044ec <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8004784:	4813      	ldr	r0, [pc, #76]	@ (80047d4 <MX_I2C1_Init+0xa8>)
 8004786:	f7ff fe07 	bl	8004398 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800478a:	4812      	ldr	r0, [pc, #72]	@ (80047d4 <MX_I2C1_Init+0xa8>)
 800478c:	f7ff fde1 	bl	8004352 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8004790:	4810      	ldr	r0, [pc, #64]	@ (80047d4 <MX_I2C1_Init+0xa8>)
 8004792:	f7ff fdce 	bl	8004332 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800479a:	4b0f      	ldr	r3, [pc, #60]	@ (80047d8 <MX_I2C1_Init+0xac>)
 800479c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800479e:	2300      	movs	r3, #0
 80047a0:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80047a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80047ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80047b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80047b2:	f107 0318 	add.w	r3, r7, #24
 80047b6:	4619      	mov	r1, r3
 80047b8:	4806      	ldr	r0, [pc, #24]	@ (80047d4 <MX_I2C1_Init+0xa8>)
 80047ba:	f000 ff7d 	bl	80056b8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80047be:	2100      	movs	r1, #0
 80047c0:	4804      	ldr	r0, [pc, #16]	@ (80047d4 <MX_I2C1_Init+0xa8>)
 80047c2:	f7ff fdd6 	bl	8004372 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80047c6:	bf00      	nop
 80047c8:	3730      	adds	r7, #48	@ 0x30
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40020400 	.word	0x40020400
 80047d4:	40005400 	.word	0x40005400
 80047d8:	000186a0 	.word	0x000186a0

080047dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	@ 0x30
 80047e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80047e2:	f107 0318 	add.w	r3, r7, #24
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	609a      	str	r2, [r3, #8]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	611a      	str	r2, [r3, #16]
 80047f2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f4:	463b      	mov	r3, r7
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	609a      	str	r2, [r3, #8]
 80047fe:	60da      	str	r2, [r3, #12]
 8004800:	611a      	str	r2, [r3, #16]
 8004802:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004804:	2004      	movs	r0, #4
 8004806:	f7ff fe59 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800480a:	2001      	movs	r0, #1
 800480c:	f7ff fe56 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004814:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004816:	2302      	movs	r3, #2
 8004818:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800481a:	2303      	movs	r3, #3
 800481c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800481e:	2301      	movs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8004826:	2304      	movs	r3, #4
 8004828:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800482a:	463b      	mov	r3, r7
 800482c:	4619      	mov	r1, r3
 800482e:	481f      	ldr	r0, [pc, #124]	@ (80048ac <MX_I2C3_Init+0xd0>)
 8004830:	f000 fdcb 	bl	80053ca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8004834:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004838:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800483a:	2302      	movs	r3, #2
 800483c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800483e:	2303      	movs	r3, #3
 8004840:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004842:	2301      	movs	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800484a:	2304      	movs	r3, #4
 800484c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484e:	463b      	mov	r3, r7
 8004850:	4619      	mov	r1, r3
 8004852:	4817      	ldr	r0, [pc, #92]	@ (80048b0 <MX_I2C3_Init+0xd4>)
 8004854:	f000 fdb9 	bl	80053ca <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 8004858:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800485c:	f7ff fe46 	bl	80044ec <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 8004860:	4814      	ldr	r0, [pc, #80]	@ (80048b4 <MX_I2C3_Init+0xd8>)
 8004862:	f7ff fd99 	bl	8004398 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 8004866:	4813      	ldr	r0, [pc, #76]	@ (80048b4 <MX_I2C3_Init+0xd8>)
 8004868:	f7ff fd73 	bl	8004352 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 800486c:	4811      	ldr	r0, [pc, #68]	@ (80048b4 <MX_I2C3_Init+0xd8>)
 800486e:	f7ff fd60 	bl	8004332 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8004876:	4b10      	ldr	r3, [pc, #64]	@ (80048b8 <MX_I2C3_Init+0xdc>)
 8004878:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800487a:	2300      	movs	r3, #0
 800487c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8004882:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004886:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8004888:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800488c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 800488e:	f107 0318 	add.w	r3, r7, #24
 8004892:	4619      	mov	r1, r3
 8004894:	4807      	ldr	r0, [pc, #28]	@ (80048b4 <MX_I2C3_Init+0xd8>)
 8004896:	f000 ff0f 	bl	80056b8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 800489a:	2100      	movs	r1, #0
 800489c:	4805      	ldr	r0, [pc, #20]	@ (80048b4 <MX_I2C3_Init+0xd8>)
 800489e:	f7ff fd68 	bl	8004372 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80048a2:	bf00      	nop
 80048a4:	3730      	adds	r7, #48	@ 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40020800 	.word	0x40020800
 80048b0:	40020000 	.word	0x40020000
 80048b4:	40005c00 	.word	0x40005c00
 80048b8:	000186a0 	.word	0x000186a0

080048bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08e      	sub	sp, #56	@ 0x38
 80048c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80048c2:	f107 031c 	add.w	r3, r7, #28
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	605a      	str	r2, [r3, #4]
 80048cc:	609a      	str	r2, [r3, #8]
 80048ce:	60da      	str	r2, [r3, #12]
 80048d0:	611a      	str	r2, [r3, #16]
 80048d2:	615a      	str	r2, [r3, #20]
 80048d4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d6:	1d3b      	adds	r3, r7, #4
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	611a      	str	r2, [r3, #16]
 80048e4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80048e6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80048ea:	f7ff fdff 	bl	80044ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80048ee:	2004      	movs	r0, #4
 80048f0:	f7ff fde4 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80048f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80048f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80048fa:	2302      	movs	r3, #2
 80048fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80048fe:	2303      	movs	r3, #3
 8004900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800490a:	2308      	movs	r3, #8
 800490c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800490e:	1d3b      	adds	r3, r7, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4819      	ldr	r0, [pc, #100]	@ (8004978 <MX_UART4_Init+0xbc>)
 8004914:	f000 fd59 	bl	80053ca <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004918:	f7ff fc82 	bl	8004220 <__NVIC_GetPriorityGrouping>
 800491c:	4603      	mov	r3, r0
 800491e:	2200      	movs	r2, #0
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fcd2 	bl	80042cc <NVIC_EncodePriority>
 8004928:	4603      	mov	r3, r0
 800492a:	4619      	mov	r1, r3
 800492c:	2034      	movs	r0, #52	@ 0x34
 800492e:	f7ff fca3 	bl	8004278 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8004932:	2034      	movs	r0, #52	@ 0x34
 8004934:	f7ff fc82 	bl	800423c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8004938:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800493c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800493e:	2300      	movs	r3, #0
 8004940:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004946:	2300      	movs	r3, #0
 8004948:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800494a:	230c      	movs	r3, #12
 800494c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800494e:	2300      	movs	r3, #0
 8004950:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004952:	2300      	movs	r3, #0
 8004954:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8004956:	f107 031c 	add.w	r3, r7, #28
 800495a:	4619      	mov	r1, r3
 800495c:	4807      	ldr	r0, [pc, #28]	@ (800497c <MX_UART4_Init+0xc0>)
 800495e:	f001 fa7f 	bl	8005e60 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8004962:	4806      	ldr	r0, [pc, #24]	@ (800497c <MX_UART4_Init+0xc0>)
 8004964:	f7ff fe38 	bl	80045d8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8004968:	4804      	ldr	r0, [pc, #16]	@ (800497c <MX_UART4_Init+0xc0>)
 800496a:	f7ff fe25 	bl	80045b8 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800496e:	bf00      	nop
 8004970:	3738      	adds	r7, #56	@ 0x38
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40020800 	.word	0x40020800
 800497c:	40004c00 	.word	0x40004c00

08004980 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08e      	sub	sp, #56	@ 0x38
 8004984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004986:	f107 031c 	add.w	r3, r7, #28
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	605a      	str	r2, [r3, #4]
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	611a      	str	r2, [r3, #16]
 8004996:	615a      	str	r2, [r3, #20]
 8004998:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499a:	1d3b      	adds	r3, r7, #4
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	611a      	str	r2, [r3, #16]
 80049a8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80049aa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80049ae:	f7ff fd9d 	bl	80044ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80049b2:	2004      	movs	r0, #4
 80049b4:	f7ff fd82 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80049b8:	2008      	movs	r0, #8
 80049ba:	f7ff fd7f 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80049be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049c4:	2302      	movs	r3, #2
 80049c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80049c8:	2303      	movs	r3, #3
 80049ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80049d4:	2308      	movs	r3, #8
 80049d6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049d8:	1d3b      	adds	r3, r7, #4
 80049da:	4619      	mov	r1, r3
 80049dc:	4821      	ldr	r0, [pc, #132]	@ (8004a64 <MX_UART5_Init+0xe4>)
 80049de:	f000 fcf4 	bl	80053ca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80049e2:	2304      	movs	r3, #4
 80049e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80049e6:	2302      	movs	r3, #2
 80049e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80049ea:	2303      	movs	r3, #3
 80049ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80049f6:	2308      	movs	r3, #8
 80049f8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049fa:	1d3b      	adds	r3, r7, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	481a      	ldr	r0, [pc, #104]	@ (8004a68 <MX_UART5_Init+0xe8>)
 8004a00:	f000 fce3 	bl	80053ca <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004a04:	f7ff fc0c 	bl	8004220 <__NVIC_GetPriorityGrouping>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fc5c 	bl	80042cc <NVIC_EncodePriority>
 8004a14:	4603      	mov	r3, r0
 8004a16:	4619      	mov	r1, r3
 8004a18:	2035      	movs	r0, #53	@ 0x35
 8004a1a:	f7ff fc2d 	bl	8004278 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8004a1e:	2035      	movs	r0, #53	@ 0x35
 8004a20:	f7ff fc0c 	bl	800423c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 460800;
 8004a24:	f44f 23e1 	mov.w	r3, #460800	@ 0x70800
 8004a28:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004a36:	230c      	movs	r3, #12
 8004a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8004a42:	f107 031c 	add.w	r3, r7, #28
 8004a46:	4619      	mov	r1, r3
 8004a48:	4808      	ldr	r0, [pc, #32]	@ (8004a6c <MX_UART5_Init+0xec>)
 8004a4a:	f001 fa09 	bl	8005e60 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8004a4e:	4807      	ldr	r0, [pc, #28]	@ (8004a6c <MX_UART5_Init+0xec>)
 8004a50:	f7ff fdc2 	bl	80045d8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8004a54:	4805      	ldr	r0, [pc, #20]	@ (8004a6c <MX_UART5_Init+0xec>)
 8004a56:	f7ff fdaf 	bl	80045b8 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004a5a:	bf00      	nop
 8004a5c:	3738      	adds	r7, #56	@ 0x38
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40020800 	.word	0x40020800
 8004a68:	40020c00 	.word	0x40020c00
 8004a6c:	40005000 	.word	0x40005000

08004a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08e      	sub	sp, #56	@ 0x38
 8004a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004a76:	f107 031c 	add.w	r3, r7, #28
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	605a      	str	r2, [r3, #4]
 8004a80:	609a      	str	r2, [r3, #8]
 8004a82:	60da      	str	r2, [r3, #12]
 8004a84:	611a      	str	r2, [r3, #16]
 8004a86:	615a      	str	r2, [r3, #20]
 8004a88:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	611a      	str	r2, [r3, #16]
 8004a98:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004a9a:	2010      	movs	r0, #16
 8004a9c:	f7ff fd3e 	bl	800451c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	f7ff fd0b 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8004aa6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004aaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004aac:	2302      	movs	r3, #2
 8004aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004abc:	2307      	movs	r3, #7
 8004abe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac0:	1d3b      	adds	r3, r7, #4
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4818      	ldr	r0, [pc, #96]	@ (8004b28 <MX_USART1_UART_Init+0xb8>)
 8004ac6:	f000 fc80 	bl	80053ca <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004aca:	f7ff fba9 	bl	8004220 <__NVIC_GetPriorityGrouping>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fbf9 	bl	80042cc <NVIC_EncodePriority>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4619      	mov	r1, r3
 8004ade:	2025      	movs	r0, #37	@ 0x25
 8004ae0:	f7ff fbca 	bl	8004278 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8004ae4:	2025      	movs	r0, #37	@ 0x25
 8004ae6:	f7ff fba9 	bl	800423c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8004aea:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8004aee:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004af0:	2300      	movs	r3, #0
 8004af2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004afc:	230c      	movs	r3, #12
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004b04:	2300      	movs	r3, #0
 8004b06:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8004b08:	f107 031c 	add.w	r3, r7, #28
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4807      	ldr	r0, [pc, #28]	@ (8004b2c <MX_USART1_UART_Init+0xbc>)
 8004b10:	f001 f9a6 	bl	8005e60 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8004b14:	4805      	ldr	r0, [pc, #20]	@ (8004b2c <MX_USART1_UART_Init+0xbc>)
 8004b16:	f7ff fd5f 	bl	80045d8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8004b1a:	4804      	ldr	r0, [pc, #16]	@ (8004b2c <MX_USART1_UART_Init+0xbc>)
 8004b1c:	f7ff fd4c 	bl	80045b8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b20:	bf00      	nop
 8004b22:	3738      	adds	r7, #56	@ 0x38
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	40011000 	.word	0x40011000

08004b30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08e      	sub	sp, #56	@ 0x38
 8004b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004b36:	f107 031c 	add.w	r3, r7, #28
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
 8004b40:	609a      	str	r2, [r3, #8]
 8004b42:	60da      	str	r2, [r3, #12]
 8004b44:	611a      	str	r2, [r3, #16]
 8004b46:	615a      	str	r2, [r3, #20]
 8004b48:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b4a:	1d3b      	adds	r3, r7, #4
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	60da      	str	r2, [r3, #12]
 8004b56:	611a      	str	r2, [r3, #16]
 8004b58:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8004b5a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004b5e:	f7ff fcc5 	bl	80044ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004b62:	2002      	movs	r0, #2
 8004b64:	f7ff fcaa 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8004b68:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004b6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004b72:	2303      	movs	r3, #3
 8004b74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004b7e:	2307      	movs	r3, #7
 8004b80:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b82:	1d3b      	adds	r3, r7, #4
 8004b84:	4619      	mov	r1, r3
 8004b86:	4819      	ldr	r0, [pc, #100]	@ (8004bec <MX_USART3_UART_Init+0xbc>)
 8004b88:	f000 fc1f 	bl	80053ca <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004b8c:	f7ff fb48 	bl	8004220 <__NVIC_GetPriorityGrouping>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2200      	movs	r2, #0
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fb98 	bl	80042cc <NVIC_EncodePriority>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	2027      	movs	r0, #39	@ 0x27
 8004ba2:	f7ff fb69 	bl	8004278 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8004ba6:	2027      	movs	r0, #39	@ 0x27
 8004ba8:	f7ff fb48 	bl	800423c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8004bac:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8004bb0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8004bca:	f107 031c 	add.w	r3, r7, #28
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4807      	ldr	r0, [pc, #28]	@ (8004bf0 <MX_USART3_UART_Init+0xc0>)
 8004bd2:	f001 f945 	bl	8005e60 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8004bd6:	4806      	ldr	r0, [pc, #24]	@ (8004bf0 <MX_USART3_UART_Init+0xc0>)
 8004bd8:	f7ff fcfe 	bl	80045d8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8004bdc:	4804      	ldr	r0, [pc, #16]	@ (8004bf0 <MX_USART3_UART_Init+0xc0>)
 8004bde:	f7ff fceb 	bl	80045b8 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004be2:	bf00      	nop
 8004be4:	3738      	adds	r7, #56	@ 0x38
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40020400 	.word	0x40020400
 8004bf0:	40004800 	.word	0x40004800

08004bf4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08e      	sub	sp, #56	@ 0x38
 8004bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004bfa:	f107 031c 	add.w	r3, r7, #28
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	609a      	str	r2, [r3, #8]
 8004c06:	60da      	str	r2, [r3, #12]
 8004c08:	611a      	str	r2, [r3, #16]
 8004c0a:	615a      	str	r2, [r3, #20]
 8004c0c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c0e:	1d3b      	adds	r3, r7, #4
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	609a      	str	r2, [r3, #8]
 8004c18:	60da      	str	r2, [r3, #12]
 8004c1a:	611a      	str	r2, [r3, #16]
 8004c1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8004c1e:	2020      	movs	r0, #32
 8004c20:	f7ff fc7c 	bl	800451c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004c24:	2004      	movs	r0, #4
 8004c26:	f7ff fc49 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004c2a:	23c0      	movs	r3, #192	@ 0xc0
 8004c2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004c32:	2303      	movs	r3, #3
 8004c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004c3e:	2308      	movs	r3, #8
 8004c40:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c42:	1d3b      	adds	r3, r7, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4819      	ldr	r0, [pc, #100]	@ (8004cac <MX_USART6_UART_Init+0xb8>)
 8004c48:	f000 fbbf 	bl	80053ca <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c4c:	f7ff fae8 	bl	8004220 <__NVIC_GetPriorityGrouping>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2200      	movs	r2, #0
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fb38 	bl	80042cc <NVIC_EncodePriority>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4619      	mov	r1, r3
 8004c60:	2047      	movs	r0, #71	@ 0x47
 8004c62:	f7ff fb09 	bl	8004278 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8004c66:	2047      	movs	r0, #71	@ 0x47
 8004c68:	f7ff fae8 	bl	800423c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8004c6c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8004c70:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004c7e:	230c      	movs	r3, #12
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004c86:	2300      	movs	r3, #0
 8004c88:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8004c8a:	f107 031c 	add.w	r3, r7, #28
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4807      	ldr	r0, [pc, #28]	@ (8004cb0 <MX_USART6_UART_Init+0xbc>)
 8004c92:	f001 f8e5 	bl	8005e60 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8004c96:	4806      	ldr	r0, [pc, #24]	@ (8004cb0 <MX_USART6_UART_Init+0xbc>)
 8004c98:	f7ff fc9e 	bl	80045d8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8004c9c:	4804      	ldr	r0, [pc, #16]	@ (8004cb0 <MX_USART6_UART_Init+0xbc>)
 8004c9e:	f7ff fc8b 	bl	80045b8 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004ca2:	bf00      	nop
 8004ca4:	3738      	adds	r7, #56	@ 0x38
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40020800 	.word	0x40020800
 8004cb0:	40011400 	.word	0x40011400

08004cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cba:	463b      	mov	r3, r7
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	60da      	str	r2, [r3, #12]
 8004cc6:	611a      	str	r2, [r3, #16]
 8004cc8:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004cca:	2004      	movs	r0, #4
 8004ccc:	f7ff fbf6 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8004cd0:	2080      	movs	r0, #128	@ 0x80
 8004cd2:	f7ff fbf3 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	f7ff fbf0 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004cdc:	2002      	movs	r0, #2
 8004cde:	f7ff fbed 	bl	80044bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004ce2:	2008      	movs	r0, #8
 8004ce4:	f7ff fbea 	bl	80044bc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, WD_DONE_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin);
 8004ce8:	f641 0102 	movw	r1, #6146	@ 0x1802
 8004cec:	4826      	ldr	r0, [pc, #152]	@ (8004d88 <MX_GPIO_Init+0xd4>)
 8004cee:	f7ff fc89 	bl	8004604 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_busy_Pin|ENABLE_MUX_Pin);
 8004cf2:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8004cf6:	4825      	ldr	r0, [pc, #148]	@ (8004d8c <MX_GPIO_Init+0xd8>)
 8004cf8:	f7ff fc84 	bl	8004604 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8004cfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d00:	4823      	ldr	r0, [pc, #140]	@ (8004d90 <MX_GPIO_Init+0xdc>)
 8004d02:	f7ff fc7f 	bl	8004604 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = PMU_INT_MCU_Pin|PDU_INT_MCU_Pin|IOU_INT_MCU_Pin|EJECT_Pin
 8004d06:	f24e 030c 	movw	r3, #57356	@ 0xe00c
 8004d0a:	603b      	str	r3, [r7, #0]
                          |CAM_INT_MCU_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d14:	463b      	mov	r3, r7
 8004d16:	4619      	mov	r1, r3
 8004d18:	481c      	ldr	r0, [pc, #112]	@ (8004d8c <MX_GPIO_Init+0xd8>)
 8004d1a:	f000 fb56 	bl	80053ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin;
 8004d1e:	f641 0302 	movw	r3, #6146	@ 0x1802
 8004d22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004d24:	2301      	movs	r3, #1
 8004d26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d30:	2300      	movs	r3, #0
 8004d32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d34:	463b      	mov	r3, r7
 8004d36:	4619      	mov	r1, r3
 8004d38:	4813      	ldr	r0, [pc, #76]	@ (8004d88 <MX_GPIO_Init+0xd4>)
 8004d3a:	f000 fb46 	bl	80053ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_busy_Pin|ENABLE_MUX_Pin;
 8004d3e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8004d42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004d44:	2301      	movs	r3, #1
 8004d46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d54:	463b      	mov	r3, r7
 8004d56:	4619      	mov	r1, r3
 8004d58:	480c      	ldr	r0, [pc, #48]	@ (8004d8c <MX_GPIO_Init+0xd8>)
 8004d5a:	f000 fb36 	bl	80053ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_RF_Pin;
 8004d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004d64:	2301      	movs	r3, #1
 8004d66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENABLE_RF_GPIO_Port, &GPIO_InitStruct);
 8004d74:	463b      	mov	r3, r7
 8004d76:	4619      	mov	r1, r3
 8004d78:	4805      	ldr	r0, [pc, #20]	@ (8004d90 <MX_GPIO_Init+0xdc>)
 8004d7a:	f000 fb26 	bl	80053ca <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004d7e:	bf00      	nop
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40020000 	.word	0x40020000
 8004d8c:	40020800 	.word	0x40020800
 8004d90:	40020400 	.word	0x40020400

08004d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <NMI_Handler+0x4>

08004d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004da0:	bf00      	nop
 8004da2:	e7fd      	b.n	8004da0 <HardFault_Handler+0x4>

08004da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <MemManage_Handler+0x4>

08004dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <BusFault_Handler+0x4>

08004db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <UsageFault_Handler+0x4>

08004dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ddc:	bf00      	nop
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    g_systick_count++;
 8004dec:	4b04      	ldr	r3, [pc, #16]	@ (8004e00 <SysTick_Handler+0x18>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	4a03      	ldr	r2, [pc, #12]	@ (8004e00 <SysTick_Handler+0x18>)
 8004df4:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 8004df6:	f001 f97f 	bl	80060f8 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000cc0 	.word	0x20000cc0

08004e04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (USART1);
 8004e08:	4802      	ldr	r0, [pc, #8]	@ (8004e14 <USART1_IRQHandler+0x10>)
 8004e0a:	f7fc ff1b 	bl	8001c44 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40011000 	.word	0x40011000

08004e18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (USART3);
 8004e1c:	4802      	ldr	r0, [pc, #8]	@ (8004e28 <USART3_IRQHandler+0x10>)
 8004e1e:	f7fc ff11 	bl	8001c44 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40004800 	.word	0x40004800

08004e2c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Uart_isr (UART4);
 8004e30:	4802      	ldr	r0, [pc, #8]	@ (8004e3c <UART4_IRQHandler+0x10>)
 8004e32:	f7fc ff07 	bl	8001c44 <Uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40004c00 	.word	0x40004c00

08004e40 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr (UART5);
 8004e44:	4802      	ldr	r0, [pc, #8]	@ (8004e50 <UART5_IRQHandler+0x10>)
 8004e46:	f7fc fefd 	bl	8001c44 <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40005000 	.word	0x40005000

08004e54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr (USART6);
 8004e58:	4802      	ldr	r0, [pc, #8]	@ (8004e64 <USART6_IRQHandler+0x10>)
 8004e5a:	f7fc fef3 	bl	8001c44 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40011400 	.word	0x40011400

08004e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return 1;
 8004e6c:	2301      	movs	r3, #1
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <_kill>:

int _kill(int pid, int sig)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e82:	f003 f817 	bl	8007eb4 <__errno>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2216      	movs	r2, #22
 8004e8a:	601a      	str	r2, [r3, #0]
  return -1;
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <_exit>:

void _exit (int status)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff ffe7 	bl	8004e78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <_exit+0x12>

08004eae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e00a      	b.n	8004ed6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ec0:	f3af 8000 	nop.w
 8004ec4:	4601      	mov	r1, r0
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	60ba      	str	r2, [r7, #8]
 8004ecc:	b2ca      	uxtb	r2, r1
 8004ece:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	dbf0      	blt.n	8004ec0 <_read+0x12>
  }

  return len;
 8004ede:	687b      	ldr	r3, [r7, #4]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e009      	b.n	8004f0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	60ba      	str	r2, [r7, #8]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	dbf1      	blt.n	8004efa <_write+0x12>
  }
  return len;
 8004f16:	687b      	ldr	r3, [r7, #4]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_close>:

int _close(int file)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f48:	605a      	str	r2, [r3, #4]
  return 0;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <_isatty>:

int _isatty(int file)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f60:	2301      	movs	r3, #1
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f90:	4a14      	ldr	r2, [pc, #80]	@ (8004fe4 <_sbrk+0x5c>)
 8004f92:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <_sbrk+0x60>)
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f9c:	4b13      	ldr	r3, [pc, #76]	@ (8004fec <_sbrk+0x64>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fa4:	4b11      	ldr	r3, [pc, #68]	@ (8004fec <_sbrk+0x64>)
 8004fa6:	4a12      	ldr	r2, [pc, #72]	@ (8004ff0 <_sbrk+0x68>)
 8004fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004faa:	4b10      	ldr	r3, [pc, #64]	@ (8004fec <_sbrk+0x64>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d207      	bcs.n	8004fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fb8:	f002 ff7c 	bl	8007eb4 <__errno>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	220c      	movs	r2, #12
 8004fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc6:	e009      	b.n	8004fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fc8:	4b08      	ldr	r3, [pc, #32]	@ (8004fec <_sbrk+0x64>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fce:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <_sbrk+0x64>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	4a05      	ldr	r2, [pc, #20]	@ (8004fec <_sbrk+0x64>)
 8004fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20020000 	.word	0x20020000
 8004fe8:	00000400 	.word	0x00000400
 8004fec:	20000cc4 	.word	0x20000cc4
 8004ff0:	20000f38 	.word	0x20000f38

08004ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ff8:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <SystemInit+0x20>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffe:	4a05      	ldr	r2, [pc, #20]	@ (8005014 <SystemInit+0x20>)
 8005000:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005008:	bf00      	nop
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	e000ed00 	.word	0xe000ed00

08005018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005050 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800501c:	f7ff ffea 	bl	8004ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005020:	480c      	ldr	r0, [pc, #48]	@ (8005054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005022:	490d      	ldr	r1, [pc, #52]	@ (8005058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005024:	4a0d      	ldr	r2, [pc, #52]	@ (800505c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005028:	e002      	b.n	8005030 <LoopCopyDataInit>

0800502a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800502a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800502c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800502e:	3304      	adds	r3, #4

08005030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005034:	d3f9      	bcc.n	800502a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005036:	4a0a      	ldr	r2, [pc, #40]	@ (8005060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005038:	4c0a      	ldr	r4, [pc, #40]	@ (8005064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800503a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800503c:	e001      	b.n	8005042 <LoopFillZerobss>

0800503e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800503e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005040:	3204      	adds	r2, #4

08005042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005044:	d3fb      	bcc.n	800503e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8005046:	f002 ff3b 	bl	8007ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800504a:	f7ff faeb 	bl	8004624 <main>
  bx  lr    
 800504e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005058:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 800505c:	0800d210 	.word	0x0800d210
  ldr r2, =_sbss
 8005060:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 8005064:	20000f34 	.word	0x20000f34

08005068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005068:	e7fe      	b.n	8005068 <ADC_IRQHandler>

0800506a <LL_GPIO_SetOutputPin>:
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	619a      	str	r2, [r3, #24]
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <LL_GPIO_ResetOutputPin>:
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	041a      	lsls	r2, r3, #16
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	619a      	str	r2, [r3, #24]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <WDT_init>:




void WDT_init(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 80050a8:	4b03      	ldr	r3, [pc, #12]	@ (80050b8 <WDT_init+0x14>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]

}
 80050ae:	bf00      	nop
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	20000cc8 	.word	0x20000cc8

080050bc <WDT_create_task>:

void WDT_create_task(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 80050c0:	4902      	ldr	r1, [pc, #8]	@ (80050cc <WDT_create_task+0x10>)
 80050c2:	4803      	ldr	r0, [pc, #12]	@ (80050d0 <WDT_create_task+0x14>)
 80050c4:	f000 ffda 	bl	800607c <SCH_TASK_CreateTask>

}
 80050c8:	bf00      	nop
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	200002e8 	.word	0x200002e8
 80050d0:	200002e4 	.word	0x200002e4

080050d4 <status_wdt_update>:

void	status_wdt_update(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0

		if (WDT_Current){
 80050d8:	4b14      	ldr	r3, [pc, #80]	@ (800512c <status_wdt_update+0x58>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d012      	beq.n	8005106 <status_wdt_update+0x32>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 80050e0:	2001      	movs	r0, #1
 80050e2:	f000 ffb5 	bl	8006050 <SCH_TIM_HasCompleted>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01d      	beq.n	8005128 <status_wdt_update+0x54>
			{
				WDT_Current = 0;
 80050ec:	4b0f      	ldr	r3, [pc, #60]	@ (800512c <status_wdt_update+0x58>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
				LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 80050f2:	2102      	movs	r1, #2
 80050f4:	480e      	ldr	r0, [pc, #56]	@ (8005130 <status_wdt_update+0x5c>)
 80050f6:	f7ff ffc6 	bl	8005086 <LL_GPIO_ResetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 80050fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80050fe:	2001      	movs	r0, #1
 8005100:	f000 ff90 	bl	8006024 <SCH_TIM_Start>
				WDT_Current = 1;
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
			}
	}
}
 8005104:	e010      	b.n	8005128 <status_wdt_update+0x54>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 8005106:	2001      	movs	r0, #1
 8005108:	f000 ffa2 	bl	8006050 <SCH_TIM_HasCompleted>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <status_wdt_update+0x54>
				WDT_Current = 1;
 8005112:	4b06      	ldr	r3, [pc, #24]	@ (800512c <status_wdt_update+0x58>)
 8005114:	2201      	movs	r2, #1
 8005116:	701a      	strb	r2, [r3, #0]
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8005118:	2102      	movs	r1, #2
 800511a:	4805      	ldr	r0, [pc, #20]	@ (8005130 <status_wdt_update+0x5c>)
 800511c:	f7ff ffa5 	bl	800506a <LL_GPIO_SetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 8005120:	21c8      	movs	r1, #200	@ 0xc8
 8005122:	2001      	movs	r0, #1
 8005124:	f000 ff7e 	bl	8006024 <SCH_TIM_Start>
}
 8005128:	bf00      	nop
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000cc8 	.word	0x20000cc8
 8005130:	40020000 	.word	0x40020000

08005134 <LL_GPIO_SetPinMode>:
{
 8005134:	b480      	push	{r7}
 8005136:	b08b      	sub	sp, #44	@ 0x2c
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	fa93 f3a3 	rbit	r3, r3
 800514e:	613b      	str	r3, [r7, #16]
  return result;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800515a:	2320      	movs	r3, #32
 800515c:	e003      	b.n	8005166 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	fab3 f383 	clz	r3, r3
 8005164:	b2db      	uxtb	r3, r3
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	2103      	movs	r1, #3
 800516a:	fa01 f303 	lsl.w	r3, r1, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	401a      	ands	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	fa93 f3a3 	rbit	r3, r3
 800517c:	61fb      	str	r3, [r7, #28]
  return result;
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005188:	2320      	movs	r3, #32
 800518a:	e003      	b.n	8005194 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	fab3 f383 	clz	r3, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	fa01 f303 	lsl.w	r3, r1, r3
 800519c:	431a      	orrs	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	601a      	str	r2, [r3, #0]
}
 80051a2:	bf00      	nop
 80051a4:	372c      	adds	r7, #44	@ 0x2c
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <LL_GPIO_SetPinOutputType>:
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	431a      	orrs	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	605a      	str	r2, [r3, #4]
}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <LL_GPIO_SetPinSpeed>:
{
 80051de:	b480      	push	{r7}
 80051e0:	b08b      	sub	sp, #44	@ 0x2c
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	fa93 f3a3 	rbit	r3, r3
 80051f8:	613b      	str	r3, [r7, #16]
  return result;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005204:	2320      	movs	r3, #32
 8005206:	e003      	b.n	8005210 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	fab3 f383 	clz	r3, r3
 800520e:	b2db      	uxtb	r3, r3
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	2103      	movs	r1, #3
 8005214:	fa01 f303 	lsl.w	r3, r1, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	401a      	ands	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	fa93 f3a3 	rbit	r3, r3
 8005226:	61fb      	str	r3, [r7, #28]
  return result;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005232:	2320      	movs	r3, #32
 8005234:	e003      	b.n	800523e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	fab3 f383 	clz	r3, r3
 800523c:	b2db      	uxtb	r3, r3
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	431a      	orrs	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	609a      	str	r2, [r3, #8]
}
 800524c:	bf00      	nop
 800524e:	372c      	adds	r7, #44	@ 0x2c
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_GPIO_SetPinPull>:
{
 8005258:	b480      	push	{r7}
 800525a:	b08b      	sub	sp, #44	@ 0x2c
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	fa93 f3a3 	rbit	r3, r3
 8005272:	613b      	str	r3, [r7, #16]
  return result;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800527e:	2320      	movs	r3, #32
 8005280:	e003      	b.n	800528a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	fab3 f383 	clz	r3, r3
 8005288:	b2db      	uxtb	r3, r3
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	2103      	movs	r1, #3
 800528e:	fa01 f303 	lsl.w	r3, r1, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	401a      	ands	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	fa93 f3a3 	rbit	r3, r3
 80052a0:	61fb      	str	r3, [r7, #28]
  return result;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80052ac:	2320      	movs	r3, #32
 80052ae:	e003      	b.n	80052b8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	fab3 f383 	clz	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	fa01 f303 	lsl.w	r3, r1, r3
 80052c0:	431a      	orrs	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	60da      	str	r2, [r3, #12]
}
 80052c6:	bf00      	nop
 80052c8:	372c      	adds	r7, #44	@ 0x2c
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <LL_GPIO_SetAFPin_0_7>:
{
 80052d2:	b480      	push	{r7}
 80052d4:	b08b      	sub	sp, #44	@ 0x2c
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1a      	ldr	r2, [r3, #32]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	fa93 f3a3 	rbit	r3, r3
 80052ec:	613b      	str	r3, [r7, #16]
  return result;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80052f8:	2320      	movs	r3, #32
 80052fa:	e003      	b.n	8005304 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	fab3 f383 	clz	r3, r3
 8005302:	b2db      	uxtb	r3, r3
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	210f      	movs	r1, #15
 8005308:	fa01 f303 	lsl.w	r3, r1, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	401a      	ands	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	61fb      	str	r3, [r7, #28]
  return result;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005326:	2320      	movs	r3, #32
 8005328:	e003      	b.n	8005332 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	fab3 f383 	clz	r3, r3
 8005330:	b2db      	uxtb	r3, r3
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	fa01 f303 	lsl.w	r3, r1, r3
 800533a:	431a      	orrs	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]
}
 8005340:	bf00      	nop
 8005342:	372c      	adds	r7, #44	@ 0x2c
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <LL_GPIO_SetAFPin_8_15>:
{
 800534c:	b480      	push	{r7}
 800534e:	b08b      	sub	sp, #44	@ 0x2c
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	0a1b      	lsrs	r3, r3, #8
 8005360:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	fa93 f3a3 	rbit	r3, r3
 8005368:	613b      	str	r3, [r7, #16]
  return result;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005374:	2320      	movs	r3, #32
 8005376:	e003      	b.n	8005380 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	fab3 f383 	clz	r3, r3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	210f      	movs	r1, #15
 8005384:	fa01 f303 	lsl.w	r3, r1, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	401a      	ands	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	0a1b      	lsrs	r3, r3, #8
 8005390:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	fa93 f3a3 	rbit	r3, r3
 8005398:	61fb      	str	r3, [r7, #28]
  return result;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80053a4:	2320      	movs	r3, #32
 80053a6:	e003      	b.n	80053b0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	fab3 f383 	clz	r3, r3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80053be:	bf00      	nop
 80053c0:	372c      	adds	r7, #44	@ 0x2c
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b08a      	sub	sp, #40	@ 0x28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80053d8:	2300      	movs	r3, #0
 80053da:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	fa93 f3a3 	rbit	r3, r3
 80053e8:	617b      	str	r3, [r7, #20]
  return result;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <LL_GPIO_Init+0x2e>
    return 32U;
 80053f4:	2320      	movs	r3, #32
 80053f6:	e003      	b.n	8005400 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	fab3 f383 	clz	r3, r3
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005402:	e057      	b.n	80054b4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	2101      	movs	r1, #1
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	4013      	ands	r3, r2
 8005412:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d049      	beq.n	80054ae <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d003      	beq.n	800542a <LL_GPIO_Init+0x60>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d10d      	bne.n	8005446 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	461a      	mov	r2, r3
 8005430:	6a39      	ldr	r1, [r7, #32]
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff fed3 	bl	80051de <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	461a      	mov	r2, r3
 800543e:	6a39      	ldr	r1, [r7, #32]
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff feb4 	bl	80051ae <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	461a      	mov	r2, r3
 800544c:	6a39      	ldr	r1, [r7, #32]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ff02 	bl	8005258 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d121      	bne.n	80054a0 <LL_GPIO_Init+0xd6>
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	60bb      	str	r3, [r7, #8]
  return result;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <LL_GPIO_Init+0xac>
    return 32U;
 8005472:	2320      	movs	r3, #32
 8005474:	e003      	b.n	800547e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	fab3 f383 	clz	r3, r3
 800547c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800547e:	2b07      	cmp	r3, #7
 8005480:	d807      	bhi.n	8005492 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	461a      	mov	r2, r3
 8005488:	6a39      	ldr	r1, [r7, #32]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ff21 	bl	80052d2 <LL_GPIO_SetAFPin_0_7>
 8005490:	e006      	b.n	80054a0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	461a      	mov	r2, r3
 8005498:	6a39      	ldr	r1, [r7, #32]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff ff56 	bl	800534c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6a39      	ldr	r1, [r7, #32]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff fe43 	bl	8005134 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	3301      	adds	r3, #1
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1a0      	bne.n	8005404 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3728      	adds	r7, #40	@ 0x28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <LL_I2C_Enable>:
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	601a      	str	r2, [r3, #0]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <LL_I2C_Disable>:
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f023 0201 	bic.w	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <LL_I2C_SetOwnAddress1>:
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005520:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	430a      	orrs	r2, r1
 800552a:	431a      	orrs	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <LL_I2C_ConfigSpeed>:
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4a42      	ldr	r2, [pc, #264]	@ (8005660 <LL_I2C_ConfigSpeed+0x124>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	0c9b      	lsrs	r3, r3, #18
 800555c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	431a      	orrs	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	493a      	ldr	r1, [pc, #232]	@ (8005664 <LL_I2C_ConfigSpeed+0x128>)
 800557a:	428b      	cmp	r3, r1
 800557c:	d802      	bhi.n	8005584 <LL_I2C_ConfigSpeed+0x48>
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	3301      	adds	r3, #1
 8005582:	e009      	b.n	8005598 <LL_I2C_ConfigSpeed+0x5c>
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	4936      	ldr	r1, [pc, #216]	@ (8005668 <LL_I2C_ConfigSpeed+0x12c>)
 8005590:	fba1 1303 	umull	r1, r3, r1, r3
 8005594:	099b      	lsrs	r3, r3, #6
 8005596:	3301      	adds	r3, #1
 8005598:	431a      	orrs	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a30      	ldr	r2, [pc, #192]	@ (8005664 <LL_I2C_ConfigSpeed+0x128>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d939      	bls.n	800561a <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d117      	bne.n	80055dc <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	4413      	add	r3, r2
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80055d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055d4:	e01d      	b.n	8005612 <LL_I2C_ConfigSpeed+0xd6>
 80055d6:	f248 0301 	movw	r3, #32769	@ 0x8001
 80055da:	e01a      	b.n	8005612 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009a      	lsls	r2, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009a      	lsls	r2, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800560c:	e001      	b.n	8005612 <LL_I2C_ConfigSpeed+0xd6>
 800560e:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e011      	b.n	800563e <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	fbb2 f2f3 	udiv	r2, r2, r3
 8005624:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005628:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	e000      	b.n	800563c <LL_I2C_ConfigSpeed+0x100>
 800563a:	2304      	movs	r3, #4
 800563c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8005646:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	431a      	orrs	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	61da      	str	r2, [r3, #28]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	431bde83 	.word	0x431bde83
 8005664:	000186a0 	.word	0x000186a0
 8005668:	10624dd3 	.word	0x10624dd3

0800566c <LL_I2C_SetMode>:
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 021a 	bic.w	r2, r3, #26
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <LL_I2C_AcknowledgeNextData>:
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	601a      	str	r2, [r3, #0]
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff ff12 	bl	80054ec <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f895 	bl	80057fc <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80056d2:	6939      	ldr	r1, [r7, #16]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff ff2d 	bl	800553c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68d9      	ldr	r1, [r3, #12]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	461a      	mov	r2, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff ff0d 	bl	800550c <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ffb7 	bl	800566c <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff fee4 	bl	80054cc <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff ffc1 	bl	8005692 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <LL_RCC_GetSysClkSource>:
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005720:	4b04      	ldr	r3, [pc, #16]	@ (8005734 <LL_RCC_GetSysClkSource+0x18>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 030c 	and.w	r3, r3, #12
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40023800 	.word	0x40023800

08005738 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800573c:	4b04      	ldr	r3, [pc, #16]	@ (8005750 <LL_RCC_GetAHBPrescaler+0x18>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005744:	4618      	mov	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40023800 	.word	0x40023800

08005754 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005758:	4b04      	ldr	r3, [pc, #16]	@ (800576c <LL_RCC_GetAPB1Prescaler+0x18>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40023800 	.word	0x40023800

08005770 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005774:	4b04      	ldr	r3, [pc, #16]	@ (8005788 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40023800 	.word	0x40023800

0800578c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005790:	4b04      	ldr	r3, [pc, #16]	@ (80057a4 <LL_RCC_PLL_GetMainSource+0x18>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8005798:	4618      	mov	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40023800 	.word	0x40023800

080057a8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80057ac:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <LL_RCC_PLL_GetN+0x18>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	099b      	lsrs	r3, r3, #6
 80057b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	40023800 	.word	0x40023800

080057c4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80057c8:	4b04      	ldr	r3, [pc, #16]	@ (80057dc <LL_RCC_PLL_GetP+0x18>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40023800 	.word	0x40023800

080057e0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80057e4:	4b04      	ldr	r3, [pc, #16]	@ (80057f8 <LL_RCC_PLL_GetDivider+0x18>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40023800 	.word	0x40023800

080057fc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005804:	f000 f820 	bl	8005848 <RCC_GetSystemClockFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f840 	bl	8005898 <RCC_GetHCLKClockFreq>
 8005818:	4602      	mov	r2, r0
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f84e 	bl	80058c4 <RCC_GetPCLK1ClockFreq>
 8005828:	4602      	mov	r2, r0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 f85a 	bl	80058ec <RCC_GetPCLK2ClockFreq>
 8005838:	4602      	mov	r2, r0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60da      	str	r2, [r3, #12]
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005852:	f7ff ff63 	bl	800571c <LL_RCC_GetSysClkSource>
 8005856:	4603      	mov	r3, r0
 8005858:	2b08      	cmp	r3, #8
 800585a:	d00c      	beq.n	8005876 <RCC_GetSystemClockFreq+0x2e>
 800585c:	2b08      	cmp	r3, #8
 800585e:	d80f      	bhi.n	8005880 <RCC_GetSystemClockFreq+0x38>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <RCC_GetSystemClockFreq+0x22>
 8005864:	2b04      	cmp	r3, #4
 8005866:	d003      	beq.n	8005870 <RCC_GetSystemClockFreq+0x28>
 8005868:	e00a      	b.n	8005880 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800586a:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <RCC_GetSystemClockFreq+0x48>)
 800586c:	607b      	str	r3, [r7, #4]
      break;
 800586e:	e00a      	b.n	8005886 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005870:	4b08      	ldr	r3, [pc, #32]	@ (8005894 <RCC_GetSystemClockFreq+0x4c>)
 8005872:	607b      	str	r3, [r7, #4]
      break;
 8005874:	e007      	b.n	8005886 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005876:	2008      	movs	r0, #8
 8005878:	f000 f84c 	bl	8005914 <RCC_PLL_GetFreqDomain_SYS>
 800587c:	6078      	str	r0, [r7, #4]
      break;
 800587e:	e002      	b.n	8005886 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005880:	4b03      	ldr	r3, [pc, #12]	@ (8005890 <RCC_GetSystemClockFreq+0x48>)
 8005882:	607b      	str	r3, [r7, #4]
      break;
 8005884:	bf00      	nop
  }

  return frequency;
 8005886:	687b      	ldr	r3, [r7, #4]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	00f42400 	.word	0x00f42400
 8005894:	007a1200 	.word	0x007a1200

08005898 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80058a0:	f7ff ff4a 	bl	8005738 <LL_RCC_GetAHBPrescaler>
 80058a4:	4603      	mov	r3, r0
 80058a6:	091b      	lsrs	r3, r3, #4
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	4a04      	ldr	r2, [pc, #16]	@ (80058c0 <RCC_GetHCLKClockFreq+0x28>)
 80058ae:	5cd3      	ldrb	r3, [r2, r3]
 80058b0:	461a      	mov	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	40d3      	lsrs	r3, r2
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	0800cdb8 	.word	0x0800cdb8

080058c4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80058cc:	f7ff ff42 	bl	8005754 <LL_RCC_GetAPB1Prescaler>
 80058d0:	4603      	mov	r3, r0
 80058d2:	0a9b      	lsrs	r3, r3, #10
 80058d4:	4a04      	ldr	r2, [pc, #16]	@ (80058e8 <RCC_GetPCLK1ClockFreq+0x24>)
 80058d6:	5cd3      	ldrb	r3, [r2, r3]
 80058d8:	461a      	mov	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	40d3      	lsrs	r3, r2
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	0800cdc8 	.word	0x0800cdc8

080058ec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80058f4:	f7ff ff3c 	bl	8005770 <LL_RCC_GetAPB2Prescaler>
 80058f8:	4603      	mov	r3, r0
 80058fa:	0b5b      	lsrs	r3, r3, #13
 80058fc:	4a04      	ldr	r2, [pc, #16]	@ (8005910 <RCC_GetPCLK2ClockFreq+0x24>)
 80058fe:	5cd3      	ldrb	r3, [r2, r3]
 8005900:	461a      	mov	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	40d3      	lsrs	r3, r2
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	0800cdc8 	.word	0x0800cdc8

08005914 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005928:	f7ff ff30 	bl	800578c <LL_RCC_PLL_GetMainSource>
 800592c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800593a:	d003      	beq.n	8005944 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800593c:	e005      	b.n	800594a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800593e:	4b12      	ldr	r3, [pc, #72]	@ (8005988 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005940:	617b      	str	r3, [r7, #20]
      break;
 8005942:	e005      	b.n	8005950 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005944:	4b11      	ldr	r3, [pc, #68]	@ (800598c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8005946:	617b      	str	r3, [r7, #20]
      break;
 8005948:	e002      	b.n	8005950 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800594a:	4b0f      	ldr	r3, [pc, #60]	@ (8005988 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800594c:	617b      	str	r3, [r7, #20]
      break;
 800594e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b08      	cmp	r3, #8
 8005954:	d113      	bne.n	800597e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005956:	f7ff ff43 	bl	80057e0 <LL_RCC_PLL_GetDivider>
 800595a:	4602      	mov	r2, r0
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	fbb3 f4f2 	udiv	r4, r3, r2
 8005962:	f7ff ff21 	bl	80057a8 <LL_RCC_PLL_GetN>
 8005966:	4603      	mov	r3, r0
 8005968:	fb03 f404 	mul.w	r4, r3, r4
 800596c:	f7ff ff2a 	bl	80057c4 <LL_RCC_PLL_GetP>
 8005970:	4603      	mov	r3, r0
 8005972:	0c1b      	lsrs	r3, r3, #16
 8005974:	3301      	adds	r3, #1
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	fbb4 f3f3 	udiv	r3, r4, r3
 800597c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800597e:	693b      	ldr	r3, [r7, #16]
}
 8005980:	4618      	mov	r0, r3
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	bd90      	pop	{r4, r7, pc}
 8005988:	00f42400 	.word	0x00f42400
 800598c:	007a1200 	.word	0x007a1200

08005990 <LL_USART_IsEnabled>:
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a4:	bf0c      	ite	eq
 80059a6:	2301      	moveq	r3, #1
 80059a8:	2300      	movne	r3, #0
 80059aa:	b2db      	uxtb	r3, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <LL_USART_SetStopBitsLength>:
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	611a      	str	r2, [r3, #16]
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <LL_USART_SetHWFlowCtrl>:
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	615a      	str	r2, [r3, #20]
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <LL_USART_SetBaudRate>:
{
 8005a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a08:	b0c0      	sub	sp, #256	@ 0x100
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a10:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8005a14:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8005a18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a24:	f040 810c 	bne.w	8005c40 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005a28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a3a:	4622      	mov	r2, r4
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	1891      	adds	r1, r2, r2
 8005a40:	6639      	str	r1, [r7, #96]	@ 0x60
 8005a42:	415b      	adcs	r3, r3
 8005a44:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a46:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	eb12 0801 	adds.w	r8, r2, r1
 8005a50:	4629      	mov	r1, r5
 8005a52:	eb43 0901 	adc.w	r9, r3, r1
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a6a:	4690      	mov	r8, r2
 8005a6c:	4699      	mov	r9, r3
 8005a6e:	4623      	mov	r3, r4
 8005a70:	eb18 0303 	adds.w	r3, r8, r3
 8005a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a78:	462b      	mov	r3, r5
 8005a7a:	eb49 0303 	adc.w	r3, r9, r3
 8005a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005a86:	2200      	movs	r2, #0
 8005a88:	469a      	mov	sl, r3
 8005a8a:	4693      	mov	fp, r2
 8005a8c:	eb1a 030a 	adds.w	r3, sl, sl
 8005a90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a92:	eb4b 030b 	adc.w	r3, fp, fp
 8005a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005aa0:	f7fb f902 	bl	8000ca8 <__aeabi_uldivmod>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4b64      	ldr	r3, [pc, #400]	@ (8005c3c <LL_USART_SetBaudRate+0x238>)
 8005aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	b29c      	uxth	r4, r3
 8005ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ac0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ac4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005ac8:	4642      	mov	r2, r8
 8005aca:	464b      	mov	r3, r9
 8005acc:	1891      	adds	r1, r2, r2
 8005ace:	6539      	str	r1, [r7, #80]	@ 0x50
 8005ad0:	415b      	adcs	r3, r3
 8005ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ad8:	4641      	mov	r1, r8
 8005ada:	1851      	adds	r1, r2, r1
 8005adc:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ade:	4649      	mov	r1, r9
 8005ae0:	414b      	adcs	r3, r1
 8005ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8005af0:	4659      	mov	r1, fp
 8005af2:	00cb      	lsls	r3, r1, #3
 8005af4:	4651      	mov	r1, sl
 8005af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005afa:	4651      	mov	r1, sl
 8005afc:	00ca      	lsls	r2, r1, #3
 8005afe:	4610      	mov	r0, r2
 8005b00:	4619      	mov	r1, r3
 8005b02:	4603      	mov	r3, r0
 8005b04:	4642      	mov	r2, r8
 8005b06:	189b      	adds	r3, r3, r2
 8005b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	460a      	mov	r2, r1
 8005b10:	eb42 0303 	adc.w	r3, r2, r3
 8005b14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b22:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8005b26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	18db      	adds	r3, r3, r3
 8005b2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b30:	4613      	mov	r3, r2
 8005b32:	eb42 0303 	adc.w	r3, r2, r3
 8005b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b3c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8005b40:	f7fb f8b2 	bl	8000ca8 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4611      	mov	r1, r2
 8005b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8005c3c <LL_USART_SetBaudRate+0x238>)
 8005b4c:	fba3 2301 	umull	r2, r3, r3, r1
 8005b50:	095b      	lsrs	r3, r3, #5
 8005b52:	2264      	movs	r2, #100	@ 0x64
 8005b54:	fb02 f303 	mul.w	r3, r2, r3
 8005b58:	1acb      	subs	r3, r1, r3
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b60:	4b36      	ldr	r3, [pc, #216]	@ (8005c3c <LL_USART_SetBaudRate+0x238>)
 8005b62:	fba3 2302 	umull	r2, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4423      	add	r3, r4
 8005b76:	b29c      	uxth	r4, r3
 8005b78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b82:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b86:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8005b8a:	4642      	mov	r2, r8
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	1891      	adds	r1, r2, r2
 8005b90:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b92:	415b      	adcs	r3, r3
 8005b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b96:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b9a:	4641      	mov	r1, r8
 8005b9c:	1851      	adds	r1, r2, r1
 8005b9e:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	414b      	adcs	r3, r1
 8005ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bb2:	4659      	mov	r1, fp
 8005bb4:	00cb      	lsls	r3, r1, #3
 8005bb6:	4651      	mov	r1, sl
 8005bb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bbc:	4651      	mov	r1, sl
 8005bbe:	00ca      	lsls	r2, r1, #3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	189b      	adds	r3, r3, r2
 8005bca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bce:	464b      	mov	r3, r9
 8005bd0:	460a      	mov	r2, r1
 8005bd2:	eb42 0303 	adc.w	r3, r2, r3
 8005bd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005bda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005be4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005be8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005bec:	460b      	mov	r3, r1
 8005bee:	18db      	adds	r3, r3, r3
 8005bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	eb42 0303 	adc.w	r3, r2, r3
 8005bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005bfe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005c02:	f7fb f851 	bl	8000ca8 <__aeabi_uldivmod>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <LL_USART_SetBaudRate+0x238>)
 8005c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	2164      	movs	r1, #100	@ 0x64
 8005c14:	fb01 f303 	mul.w	r3, r1, r3
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	3332      	adds	r3, #50	@ 0x32
 8005c1e:	4a07      	ldr	r2, [pc, #28]	@ (8005c3c <LL_USART_SetBaudRate+0x238>)
 8005c20:	fba2 2303 	umull	r2, r3, r2, r3
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	4423      	add	r3, r4
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c38:	609a      	str	r2, [r3, #8]
}
 8005c3a:	e108      	b.n	8005e4e <LL_USART_SetBaudRate+0x44a>
 8005c3c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005c40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c44:	2200      	movs	r2, #0
 8005c46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c4a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c4e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8005c52:	4642      	mov	r2, r8
 8005c54:	464b      	mov	r3, r9
 8005c56:	1891      	adds	r1, r2, r2
 8005c58:	6239      	str	r1, [r7, #32]
 8005c5a:	415b      	adcs	r3, r3
 8005c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c62:	4641      	mov	r1, r8
 8005c64:	1854      	adds	r4, r2, r1
 8005c66:	4649      	mov	r1, r9
 8005c68:	eb43 0501 	adc.w	r5, r3, r1
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	00eb      	lsls	r3, r5, #3
 8005c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c7a:	00e2      	lsls	r2, r4, #3
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	461d      	mov	r5, r3
 8005c80:	4643      	mov	r3, r8
 8005c82:	18e3      	adds	r3, r4, r3
 8005c84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c88:	464b      	mov	r3, r9
 8005c8a:	eb45 0303 	adc.w	r3, r5, r3
 8005c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c9c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8005cac:	4629      	mov	r1, r5
 8005cae:	008b      	lsls	r3, r1, #2
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	008a      	lsls	r2, r1, #2
 8005cba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8005cbe:	f7fa fff3 	bl	8000ca8 <__aeabi_uldivmod>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4b65      	ldr	r3, [pc, #404]	@ (8005e5c <LL_USART_SetBaudRate+0x458>)
 8005cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	b29c      	uxth	r4, r3
 8005cd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ce2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	464b      	mov	r3, r9
 8005cea:	1891      	adds	r1, r2, r2
 8005cec:	61b9      	str	r1, [r7, #24]
 8005cee:	415b      	adcs	r3, r3
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	1851      	adds	r1, r2, r1
 8005cfa:	6139      	str	r1, [r7, #16]
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	414b      	adcs	r3, r1
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	f04f 0300 	mov.w	r3, #0
 8005d0a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d0e:	4659      	mov	r1, fp
 8005d10:	00cb      	lsls	r3, r1, #3
 8005d12:	4651      	mov	r1, sl
 8005d14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d18:	4651      	mov	r1, sl
 8005d1a:	00ca      	lsls	r2, r1, #3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	4642      	mov	r2, r8
 8005d24:	189b      	adds	r3, r3, r2
 8005d26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	460a      	mov	r2, r1
 8005d2e:	eb42 0303 	adc.w	r3, r2, r3
 8005d32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d40:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8005d50:	4649      	mov	r1, r9
 8005d52:	008b      	lsls	r3, r1, #2
 8005d54:	4641      	mov	r1, r8
 8005d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	008a      	lsls	r2, r1, #2
 8005d5e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005d62:	f7fa ffa1 	bl	8000ca8 <__aeabi_uldivmod>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e5c <LL_USART_SetBaudRate+0x458>)
 8005d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	2264      	movs	r2, #100	@ 0x64
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	1acb      	subs	r3, r1, r3
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	3332      	adds	r3, #50	@ 0x32
 8005d80:	4a36      	ldr	r2, [pc, #216]	@ (8005e5c <LL_USART_SetBaudRate+0x458>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	4423      	add	r3, r4
 8005d92:	b29c      	uxth	r4, r3
 8005d94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d98:	2200      	movs	r2, #0
 8005d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d9c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d9e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005da2:	4642      	mov	r2, r8
 8005da4:	464b      	mov	r3, r9
 8005da6:	1891      	adds	r1, r2, r2
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	415b      	adcs	r3, r3
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005db2:	4641      	mov	r1, r8
 8005db4:	1851      	adds	r1, r2, r1
 8005db6:	6039      	str	r1, [r7, #0]
 8005db8:	4649      	mov	r1, r9
 8005dba:	414b      	adcs	r3, r1
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	f04f 0300 	mov.w	r3, #0
 8005dc6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dca:	4659      	mov	r1, fp
 8005dcc:	00cb      	lsls	r3, r1, #3
 8005dce:	4651      	mov	r1, sl
 8005dd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dd4:	4651      	mov	r1, sl
 8005dd6:	00ca      	lsls	r2, r1, #3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4603      	mov	r3, r0
 8005dde:	4642      	mov	r2, r8
 8005de0:	189b      	adds	r3, r3, r2
 8005de2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005de4:	464b      	mov	r3, r9
 8005de6:	460a      	mov	r2, r1
 8005de8:	eb42 0303 	adc.w	r3, r2, r3
 8005dec:	677b      	str	r3, [r7, #116]	@ 0x74
 8005dee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005df2:	2200      	movs	r2, #0
 8005df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005df6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8005e04:	4649      	mov	r1, r9
 8005e06:	008b      	lsls	r3, r1, #2
 8005e08:	4641      	mov	r1, r8
 8005e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e0e:	4641      	mov	r1, r8
 8005e10:	008a      	lsls	r2, r1, #2
 8005e12:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005e16:	f7fa ff47 	bl	8000ca8 <__aeabi_uldivmod>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e5c <LL_USART_SetBaudRate+0x458>)
 8005e20:	fba3 1302 	umull	r1, r3, r3, r2
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	2164      	movs	r1, #100	@ 0x64
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	3332      	adds	r3, #50	@ 0x32
 8005e32:	4a0a      	ldr	r2, [pc, #40]	@ (8005e5c <LL_USART_SetBaudRate+0x458>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	4423      	add	r3, r4
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4c:	609a      	str	r2, [r3, #8]
}
 8005e4e:	bf00      	nop
 8005e50:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e54:	46bd      	mov	sp, r7
 8005e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e5a:	bf00      	nop
 8005e5c:	51eb851f 	.word	0x51eb851f

08005e60 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff fd8c 	bl	8005990 <LL_USART_IsEnabled>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d15e      	bne.n	8005f3c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005e86:	f023 030c 	bic.w	r3, r3, #12
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	6851      	ldr	r1, [r2, #4]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	68d2      	ldr	r2, [r2, #12]
 8005e92:	4311      	orrs	r1, r2
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	6912      	ldr	r2, [r2, #16]
 8005e98:	4311      	orrs	r1, r2
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	6992      	ldr	r2, [r2, #24]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fd83 	bl	80059b8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff fd90 	bl	80059de <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005ebe:	f107 0308 	add.w	r3, r7, #8
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fc9a 	bl	80057fc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a1f      	ldr	r2, [pc, #124]	@ (8005f48 <LL_USART_Init+0xe8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d102      	bne.n	8005ed6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e021      	b.n	8005f1a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f4c <LL_USART_Init+0xec>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d102      	bne.n	8005ee4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e01a      	b.n	8005f1a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8005f50 <LL_USART_Init+0xf0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d102      	bne.n	8005ef2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	61bb      	str	r3, [r7, #24]
 8005ef0:	e013      	b.n	8005f1a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a17      	ldr	r2, [pc, #92]	@ (8005f54 <LL_USART_Init+0xf4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d102      	bne.n	8005f00 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	e00c      	b.n	8005f1a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a15      	ldr	r2, [pc, #84]	@ (8005f58 <LL_USART_Init+0xf8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d102      	bne.n	8005f0e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	e005      	b.n	8005f1a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a12      	ldr	r2, [pc, #72]	@ (8005f5c <LL_USART_Init+0xfc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d101      	bne.n	8005f1a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00d      	beq.n	8005f3c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d009      	beq.n	8005f3c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005f34:	69b9      	ldr	r1, [r7, #24]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff fd64 	bl	8005a04 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005f3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40011000 	.word	0x40011000
 8005f4c:	40004400 	.word	0x40004400
 8005f50:	40004800 	.word	0x40004800
 8005f54:	40011400 	.word	0x40011400
 8005f58:	40004c00 	.word	0x40004c00
 8005f5c:	40005000 	.word	0x40005000

08005f60 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	4a07      	ldr	r2, [pc, #28]	@ (8005f90 <LL_InitTick+0x30>)
 8005f74:	3b01      	subs	r3, #1
 8005f76:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005f78:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <LL_InitTick+0x30>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f7e:	4b04      	ldr	r3, [pc, #16]	@ (8005f90 <LL_InitTick+0x30>)
 8005f80:	2205      	movs	r2, #5
 8005f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	e000e010 	.word	0xe000e010

08005f94 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8005f9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff ffdd 	bl	8005f60 <LL_InitTick>
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005fb8:	4a04      	ldr	r2, [pc, #16]	@ (8005fcc <LL_SetSystemCoreClock+0x1c>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6013      	str	r3, [r2, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	200002e0 	.word	0x200002e0

08005fd0 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 8005fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <SCH_Initialize+0x3c>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 8005fda:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <SCH_Initialize+0x40>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8006014 <SCH_Initialize+0x44>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8005fe6:	2278      	movs	r2, #120	@ 0x78
 8005fe8:	2100      	movs	r1, #0
 8005fea:	480b      	ldr	r0, [pc, #44]	@ (8006018 <SCH_Initialize+0x48>)
 8005fec:	f001 ff0f 	bl	8007e0e <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 8005ff0:	2278      	movs	r2, #120	@ 0x78
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4809      	ldr	r0, [pc, #36]	@ (800601c <SCH_Initialize+0x4c>)
 8005ff6:	f001 ff0a 	bl	8007e0e <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4808      	ldr	r0, [pc, #32]	@ (8006020 <SCH_Initialize+0x50>)
 8006000:	f001 ff05 	bl	8007e0e <memset>

    // Initialize Scheduler context
  systick_timer_init();
 8006004:	f7fb fb62 	bl	80016cc <systick_timer_init>
}
 8006008:	bf00      	nop
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20000dc4 	.word	0x20000dc4
 8006010:	20000d44 	.word	0x20000d44
 8006014:	20000dc0 	.word	0x20000dc0
 8006018:	20000ccc 	.word	0x20000ccc
 800601c:	20000d48 	.word	0x20000d48
 8006020:	20000dc8 	.word	0x20000dc8

08006024 <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	6039      	str	r1, [r7, #0]
 800602e:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	2b03      	cmp	r3, #3
 8006034:	d804      	bhi.n	8006040 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	4904      	ldr	r1, [pc, #16]	@ (800604c <SCH_TIM_Start+0x28>)
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	20000dc8 	.word	0x20000dc8

08006050 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	4a06      	ldr	r2, [pc, #24]	@ (8006078 <SCH_TIM_HasCompleted+0x28>)
 800605e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006062:	2b00      	cmp	r3, #0
 8006064:	bf0c      	ite	eq
 8006066:	2301      	moveq	r3, #1
 8006068:	2300      	movne	r3, #0
 800606a:	b2db      	uxtb	r3, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	20000dc8 	.word	0x20000dc8

0800607c <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d028      	beq.n	80060e2 <SCH_TASK_CreateTask+0x66>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d025      	beq.n	80060e2 <SCH_TASK_CreateTask+0x66>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 8006096:	4b16      	ldr	r3, [pc, #88]	@ (80060f0 <SCH_TASK_CreateTask+0x74>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b08      	cmp	r3, #8
 800609c:	d821      	bhi.n	80060e2 <SCH_TASK_CreateTask+0x66>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 800609e:	4b14      	ldr	r3, [pc, #80]	@ (80060f0 <SCH_TASK_CreateTask+0x74>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	4613      	mov	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4a11      	ldr	r2, [pc, #68]	@ (80060f4 <SCH_TASK_CreateTask+0x78>)
 80060ae:	4413      	add	r3, r2
 80060b0:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2200      	movs	r2, #0
 80060bc:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = RESET;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2200      	movs	r2, #0
 80060c2:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2201      	movs	r2, #1
 80060c8:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 80060ca:	4b09      	ldr	r3, [pc, #36]	@ (80060f0 <SCH_TASK_CreateTask+0x74>)
 80060cc:	781a      	ldrb	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 80060d2:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <SCH_TASK_CreateTask+0x74>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	3301      	adds	r3, #1
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <SCH_TASK_CreateTask+0x74>)
 80060dc:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 80060de:	2300      	movs	r3, #0
 80060e0:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	20000d44 	.word	0x20000d44
 80060f4:	20000ccc 	.word	0x20000ccc

080060f8 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 80060fe:	4b42      	ldr	r3, [pc, #264]	@ (8006208 <SCH_RunSystemTickTimer+0x110>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	4a40      	ldr	r2, [pc, #256]	@ (8006208 <SCH_RunSystemTickTimer+0x110>)
 8006106:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
 800610c:	e025      	b.n	800615a <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800610e:	7bfa      	ldrb	r2, [r7, #15]
 8006110:	4613      	mov	r3, r2
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4a3c      	ldr	r2, [pc, #240]	@ (800620c <SCH_RunSystemTickTimer+0x114>)
 800611a:	4413      	add	r3, r2
 800611c:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d115      	bne.n	8006154 <SCH_RunSystemTickTimer+0x5c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d111      	bne.n	8006154 <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d305      	bcc.n	8006154 <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	3301      	adds	r3, #1
 8006158:	73fb      	strb	r3, [r7, #15]
 800615a:	4b2d      	ldr	r3, [pc, #180]	@ (8006210 <SCH_RunSystemTickTimer+0x118>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	7bfa      	ldrb	r2, [r7, #15]
 8006160:	429a      	cmp	r2, r3
 8006162:	d3d4      	bcc.n	800610e <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8006164:	2300      	movs	r3, #0
 8006166:	73bb      	strb	r3, [r7, #14]
 8006168:	e02b      	b.n	80061c2 <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 800616a:	7bba      	ldrb	r2, [r7, #14]
 800616c:	4613      	mov	r3, r2
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4a27      	ldr	r2, [pc, #156]	@ (8006214 <SCH_RunSystemTickTimer+0x11c>)
 8006176:	4413      	add	r3, r2
 8006178:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d11c      	bne.n	80061bc <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	429a      	cmp	r2, r3
 8006198:	d310      	bcc.n	80061bc <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2201      	movs	r2, #1
 800619e:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2200      	movs	r2, #0
 80061a4:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	bf0c      	ite	eq
 80061b0:	2301      	moveq	r3, #1
 80061b2:	2300      	movne	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80061bc:	7bbb      	ldrb	r3, [r7, #14]
 80061be:	3301      	adds	r3, #1
 80061c0:	73bb      	strb	r3, [r7, #14]
 80061c2:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <SCH_RunSystemTickTimer+0x120>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	7bba      	ldrb	r2, [r7, #14]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d3ce      	bcc.n	800616a <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80061cc:	2300      	movs	r3, #0
 80061ce:	73bb      	strb	r3, [r7, #14]
 80061d0:	e010      	b.n	80061f4 <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
 80061d4:	4a11      	ldr	r2, [pc, #68]	@ (800621c <SCH_RunSystemTickTimer+0x124>)
 80061d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <SCH_RunSystemTickTimer+0xf6>
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	4a0e      	ldr	r2, [pc, #56]	@ (800621c <SCH_RunSystemTickTimer+0x124>)
 80061e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80061e6:	3a01      	subs	r2, #1
 80061e8:	490c      	ldr	r1, [pc, #48]	@ (800621c <SCH_RunSystemTickTimer+0x124>)
 80061ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	3301      	adds	r3, #1
 80061f2:	73bb      	strb	r3, [r7, #14]
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d9eb      	bls.n	80061d2 <SCH_RunSystemTickTimer+0xda>
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	20000dc4 	.word	0x20000dc4
 800620c:	20000ccc 	.word	0x20000ccc
 8006210:	20000d44 	.word	0x20000d44
 8006214:	20000d48 	.word	0x20000d48
 8006218:	20000dc0 	.word	0x20000dc0
 800621c:	20000dc8 	.word	0x20000dc8

08006220 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 8006224:	f7fb fa42 	bl	80016ac <systick_timer_start>
}
 8006228:	bf00      	nop
 800622a:	bd80      	pop	{r7, pc}

0800622c <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
 8006236:	e01e      	b.n	8006276 <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 8006238:	7bfa      	ldrb	r2, [r7, #15]
 800623a:	4613      	mov	r3, r2
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	4413      	add	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4a23      	ldr	r2, [pc, #140]	@ (80062d0 <SCH_HandleScheduledTask+0xa4>)
 8006244:	4413      	add	r3, r2
 8006246:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	885b      	ldrh	r3, [r3, #2]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10f      	bne.n	8006270 <SCH_HandleScheduledTask+0x44>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d10b      	bne.n	8006270 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	3301      	adds	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
 8006276:	4b17      	ldr	r3, [pc, #92]	@ (80062d4 <SCH_HandleScheduledTask+0xa8>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	7bfa      	ldrb	r2, [r7, #15]
 800627c:	429a      	cmp	r2, r3
 800627e:	d3db      	bcc.n	8006238 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8006280:	2300      	movs	r3, #0
 8006282:	73bb      	strb	r3, [r7, #14]
 8006284:	e01a      	b.n	80062bc <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 8006286:	7bba      	ldrb	r2, [r7, #14]
 8006288:	4613      	mov	r3, r2
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4a11      	ldr	r2, [pc, #68]	@ (80062d8 <SCH_HandleScheduledTask+0xac>)
 8006292:	4413      	add	r3, r2
 8006294:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	885b      	ldrh	r3, [r3, #2]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10b      	bne.n	80062b6 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2200      	movs	r2, #0
 80062a2:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	3301      	adds	r3, #1
 80062ba:	73bb      	strb	r3, [r7, #14]
 80062bc:	4b07      	ldr	r3, [pc, #28]	@ (80062dc <SCH_HandleScheduledTask+0xb0>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	7bba      	ldrb	r2, [r7, #14]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d3df      	bcc.n	8006286 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000ccc 	.word	0x20000ccc
 80062d4:	20000d44 	.word	0x20000d44
 80062d8:	20000d48 	.word	0x20000d48
 80062dc:	20000dc0 	.word	0x20000dc0

080062e0 <SCH_Delay>:
  * @brief  Function to create a delay without affecting other tasks
  * @param  uint32_t delayInMs - delay time in milliseconds
  * @retval None
  *****************************************************************************/
void SCH_Delay(uint32_t delayInMs)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
    // Start the delay timer
    SCH_TIM_Start(SCH_TIM_DELAY, delayInMs);
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	2002      	movs	r0, #2
 80062ec:	f7ff fe9a 	bl	8006024 <SCH_TIM_Start>

    // Wait until the delay timer completes
    while(!SCH_TIM_HasCompleted(SCH_TIM_DELAY));
 80062f0:	bf00      	nop
 80062f2:	2002      	movs	r0, #2
 80062f4:	f7ff feac 	bl	8006050 <SCH_TIM_HasCompleted>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0f9      	beq.n	80062f2 <SCH_Delay+0x12>
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint8_t size)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	6039      	str	r1, [r7, #0]
 8006312:	80fb      	strh	r3, [r7, #6]
 8006314:	4613      	mov	r3, r2
 8006316:	717b      	strb	r3, [r7, #5]
    uint8_t x;
    uint16_t crc = initial_value;
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	81fb      	strh	r3, [r7, #14]

    while(size--)
 800631c:	e023      	b.n	8006366 <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 800631e:	89fb      	ldrh	r3, [r7, #14]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	b29b      	uxth	r3, r3
 8006324:	b2da      	uxtb	r2, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	1c59      	adds	r1, r3, #1
 800632a:	6039      	str	r1, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	4053      	eors	r3, r2
 8006330:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 8006332:	7b7b      	ldrb	r3, [r7, #13]
 8006334:	091b      	lsrs	r3, r3, #4
 8006336:	b2da      	uxtb	r2, r3
 8006338:	7b7b      	ldrb	r3, [r7, #13]
 800633a:	4053      	eors	r3, r2
 800633c:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 800633e:	89fb      	ldrh	r3, [r7, #14]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	b21a      	sxth	r2, r3
 8006344:	7b7b      	ldrb	r3, [r7, #13]
 8006346:	b21b      	sxth	r3, r3
 8006348:	031b      	lsls	r3, r3, #12
 800634a:	b21b      	sxth	r3, r3
 800634c:	4053      	eors	r3, r2
 800634e:	b21a      	sxth	r2, r3
 8006350:	7b7b      	ldrb	r3, [r7, #13]
 8006352:	b21b      	sxth	r3, r3
 8006354:	015b      	lsls	r3, r3, #5
 8006356:	b21b      	sxth	r3, r3
 8006358:	4053      	eors	r3, r2
 800635a:	b21a      	sxth	r2, r3
 800635c:	7b7b      	ldrb	r3, [r7, #13]
 800635e:	b21b      	sxth	r3, r3
 8006360:	4053      	eors	r3, r2
 8006362:	b21b      	sxth	r3, r3
 8006364:	81fb      	strh	r3, [r7, #14]
    while(size--)
 8006366:	797b      	ldrb	r3, [r7, #5]
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	717a      	strb	r2, [r7, #5]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1d6      	bne.n	800631e <crc16_CCITT+0x16>
    }

    return crc;
 8006370:	89fb      	ldrh	r3, [r7, #14]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
	...

08006380 <fsp_init>:
uint8_t fsp_my_adr;

volatile uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 800638a:	4a06      	ldr	r2, [pc, #24]	@ (80063a4 <fsp_init+0x24>)
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	7013      	strb	r3, [r2, #0]

    fsp_decode_pos = 0;
 8006390:	4b05      	ldr	r3, [pc, #20]	@ (80063a8 <fsp_init+0x28>)
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000dd8 	.word	0x20000dd8
 80063a8:	20000dd9 	.word	0x20000dd9

080063ac <fsp_gen_cmd_pkt>:
        fsp_gen_pkt((void*)0, data, data_len, dst_adr, FSP_PKT_TYPE_DATA, fsp);
    }
}

void fsp_gen_cmd_pkt(uint8_t cmd, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	4603      	mov	r3, r0
 80063b6:	71fb      	strb	r3, [r7, #7]
 80063b8:	460b      	mov	r3, r1
 80063ba:	71bb      	strb	r3, [r7, #6]
 80063bc:	4613      	mov	r3, r2
 80063be:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 80063c0:	797b      	ldrb	r3, [r7, #5]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d10b      	bne.n	80063de <fsp_gen_cmd_pkt+0x32>
    {
        fsp_gen_pkt(&cmd,(void*)0, 0, dst_adr, FSP_PKT_TYPE_CMD_WITH_ACK, fsp);
 80063c6:	79ba      	ldrb	r2, [r7, #6]
 80063c8:	1df8      	adds	r0, r7, #7
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	2304      	movs	r3, #4
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	4613      	mov	r3, r2
 80063d4:	2200      	movs	r2, #0
 80063d6:	2100      	movs	r1, #0
 80063d8:	f000 f83a 	bl	8006450 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
    }
}
 80063dc:	e00a      	b.n	80063f4 <fsp_gen_cmd_pkt+0x48>
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
 80063de:	79ba      	ldrb	r2, [r7, #6]
 80063e0:	1df8      	adds	r0, r7, #7
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	2303      	movs	r3, #3
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	4613      	mov	r3, r2
 80063ec:	2200      	movs	r2, #0
 80063ee:	2100      	movs	r1, #0
 80063f0:	f000 f82e 	bl	8006450 <fsp_gen_pkt>
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <fsp_gen_cmd_w_data_pkt>:

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af02      	add	r7, sp, #8
 8006402:	6039      	str	r1, [r7, #0]
 8006404:	4611      	mov	r1, r2
 8006406:	461a      	mov	r2, r3
 8006408:	4603      	mov	r3, r0
 800640a:	71fb      	strb	r3, [r7, #7]
 800640c:	460b      	mov	r3, r1
 800640e:	71bb      	strb	r3, [r7, #6]
 8006410:	4613      	mov	r3, r2
 8006412:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 8006414:	7c3b      	ldrb	r3, [r7, #16]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10b      	bne.n	8006432 <fsp_gen_cmd_w_data_pkt+0x36>
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 800641a:	7979      	ldrb	r1, [r7, #5]
 800641c:	79ba      	ldrb	r2, [r7, #6]
 800641e:	1df8      	adds	r0, r7, #7
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	9301      	str	r3, [sp, #4]
 8006424:	2308      	movs	r3, #8
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	460b      	mov	r3, r1
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	f000 f810 	bl	8006450 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
    }
}
 8006430:	e00a      	b.n	8006448 <fsp_gen_cmd_w_data_pkt+0x4c>
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 8006432:	7979      	ldrb	r1, [r7, #5]
 8006434:	79ba      	ldrb	r2, [r7, #6]
 8006436:	1df8      	adds	r0, r7, #7
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	2307      	movs	r3, #7
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	460b      	mov	r3, r1
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	f000 f804 	bl	8006450 <fsp_gen_pkt>
}
 8006448:	bf00      	nop
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <fsp_gen_pkt>:
    fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}


void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4611      	mov	r1, r2
 800645c:	461a      	mov	r2, r3
 800645e:	460b      	mov	r3, r1
 8006460:	71fb      	strb	r3, [r7, #7]
 8006462:	4613      	mov	r3, r2
 8006464:	71bb      	strb	r3, [r7, #6]
    fsp->sod        = FSP_PKT_SOD;
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	22ca      	movs	r2, #202	@ 0xca
 800646a:	701a      	strb	r2, [r3, #0]
    fsp->src_adr    = fsp_my_adr;
 800646c:	4b25      	ldr	r3, [pc, #148]	@ (8006504 <fsp_gen_pkt+0xb4>)
 800646e:	781a      	ldrb	r2, [r3, #0]
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	705a      	strb	r2, [r3, #1]
    fsp->dst_adr    = dst_adr;
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	79ba      	ldrb	r2, [r7, #6]
 8006478:	709a      	strb	r2, [r3, #2]
    fsp->length     = payload_len;
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	79fa      	ldrb	r2, [r7, #7]
 800647e:	70da      	strb	r2, [r3, #3]
    fsp->type       = type;
 8006480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006482:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006486:	711a      	strb	r2, [r3, #4]

    uint8_t i = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	75fb      	strb	r3, [r7, #23]
    uint8_t j = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	75bb      	strb	r3, [r7, #22]

    // Copy cmd payload
    if (cmd != NULL) {
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00e      	beq.n	80064b4 <fsp_gen_pkt+0x64>
        fsp->length++; // length + byte cmd
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	78db      	ldrb	r3, [r3, #3]
 800649a:	3301      	adds	r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	70da      	strb	r2, [r3, #3]
        fsp->payload[j++] = *cmd;
 80064a2:	7dbb      	ldrb	r3, [r7, #22]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	75ba      	strb	r2, [r7, #22]
 80064a8:	4619      	mov	r1, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	781a      	ldrb	r2, [r3, #0]
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	440b      	add	r3, r1
 80064b2:	715a      	strb	r2, [r3, #5]
    }

    // Copy payload fsp->payload
    for(i=0; i<payload_len; i++)
 80064b4:	2300      	movs	r3, #0
 80064b6:	75fb      	strb	r3, [r7, #23]
 80064b8:	e00d      	b.n	80064d6 <fsp_gen_pkt+0x86>
    {
        fsp->payload[j++] = payload[i];
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	441a      	add	r2, r3
 80064c0:	7dbb      	ldrb	r3, [r7, #22]
 80064c2:	1c59      	adds	r1, r3, #1
 80064c4:	75b9      	strb	r1, [r7, #22]
 80064c6:	4619      	mov	r1, r3
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	440b      	add	r3, r1
 80064ce:	715a      	strb	r2, [r3, #5]
    for(i=0; i<payload_len; i++)
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	3301      	adds	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
 80064d6:	7dfa      	ldrb	r2, [r7, #23]
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d3ed      	bcc.n	80064ba <fsp_gen_pkt+0x6a>
    }

    fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	1c59      	adds	r1, r3, #1
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	78db      	ldrb	r3, [r3, #3]
 80064e6:	3304      	adds	r3, #4
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	2000      	movs	r0, #0
 80064ee:	f7ff ff0b 	bl	8006308 <crc16_CCITT>
 80064f2:	4603      	mov	r3, r0
 80064f4:	461a      	mov	r2, r3
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

}
 80064fc:	bf00      	nop
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000dd8 	.word	0x20000dd8

08006508 <frame_encode>:


void frame_encode(fsp_packet_t *fsp, uint8_t *frame, uint8_t *frame_len)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b0c8      	sub	sp, #288	@ 0x120
 800650c:	af00      	add	r7, sp, #0
 800650e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006512:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006516:	6018      	str	r0, [r3, #0]
 8006518:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800651c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006520:	6019      	str	r1, [r3, #0]
 8006522:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006526:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800652a:	601a      	str	r2, [r3, #0]
    //frame
    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t encoded_length = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    encoded_frame[encoded_length++] = fsp->sod;
 8006532:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800653c:	461a      	mov	r2, r3
 800653e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006542:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	7819      	ldrb	r1, [r3, #0]
 800654a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800654e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006552:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->src_adr;
 8006554:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800655e:	461a      	mov	r2, r3
 8006560:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006564:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	7859      	ldrb	r1, [r3, #1]
 800656c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006570:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006574:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->dst_adr;
 8006576:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006580:	461a      	mov	r2, r3
 8006582:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006586:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	7899      	ldrb	r1, [r3, #2]
 800658e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006592:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006596:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->length;
 8006598:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80065a2:	461a      	mov	r2, r3
 80065a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80065a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	78d9      	ldrb	r1, [r3, #3]
 80065b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80065b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80065b8:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->type;
 80065ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80065c4:	461a      	mov	r2, r3
 80065c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80065ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	7919      	ldrb	r1, [r3, #4]
 80065d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80065d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80065da:	5499      	strb	r1, [r3, r2]

    for(int i=0; i<fsp->length; i++)
 80065dc:	2300      	movs	r3, #0
 80065de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80065e2:	e088      	b.n	80066f6 <frame_encode+0x1ee>
    {
        if (fsp->payload[i] == FSP_PKT_SOD) {
 80065e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80065e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80065f2:	4413      	add	r3, r2
 80065f4:	3305      	adds	r3, #5
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2bca      	cmp	r3, #202	@ 0xca
 80065fa:	d118      	bne.n	800662e <frame_encode+0x126>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 80065fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006606:	461a      	mov	r2, r3
 8006608:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800660c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006610:	21bd      	movs	r1, #189	@ 0xbd
 8006612:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 8006614:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800661e:	461a      	mov	r2, r3
 8006620:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006624:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006628:	21dc      	movs	r1, #220	@ 0xdc
 800662a:	5499      	strb	r1, [r3, r2]
 800662c:	e05e      	b.n	80066ec <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_EOF) {
 800662e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006632:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800663c:	4413      	add	r3, r2
 800663e:	3305      	adds	r3, #5
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2bef      	cmp	r3, #239	@ 0xef
 8006644:	d118      	bne.n	8006678 <frame_encode+0x170>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8006646:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006650:	461a      	mov	r2, r3
 8006652:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006656:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800665a:	21bd      	movs	r1, #189	@ 0xbd
 800665c:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800665e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006668:	461a      	mov	r2, r3
 800666a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800666e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006672:	21de      	movs	r1, #222	@ 0xde
 8006674:	5499      	strb	r1, [r3, r2]
 8006676:	e039      	b.n	80066ec <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_ESC) {
 8006678:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800667c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006686:	4413      	add	r3, r2
 8006688:	3305      	adds	r3, #5
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2bbd      	cmp	r3, #189	@ 0xbd
 800668e:	d118      	bne.n	80066c2 <frame_encode+0x1ba>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8006690:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800669a:	461a      	mov	r2, r3
 800669c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80066a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80066a4:	21bd      	movs	r1, #189	@ 0xbd
 80066a6:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TESC;
 80066a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80066b2:	461a      	mov	r2, r3
 80066b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80066b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80066bc:	21db      	movs	r1, #219	@ 0xdb
 80066be:	5499      	strb	r1, [r3, r2]
 80066c0:	e014      	b.n	80066ec <frame_encode+0x1e4>
        } else {
            encoded_frame[encoded_length++] = fsp->payload[i];
 80066c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80066cc:	4619      	mov	r1, r3
 80066ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80066d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80066dc:	4413      	add	r3, r2
 80066de:	3305      	adds	r3, #5
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80066e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80066ea:	545a      	strb	r2, [r3, r1]
    for(int i=0; i<fsp->length; i++)
 80066ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80066f0:	3301      	adds	r3, #1
 80066f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80066f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80066fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	78db      	ldrb	r3, [r3, #3]
 8006702:	461a      	mov	r2, r3
 8006704:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006708:	4293      	cmp	r3, r2
 800670a:	f6ff af6b 	blt.w	80065e4 <frame_encode+0xdc>
        }
    }

    // CRC16
    uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 800670e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006712:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800671c:	0a1b      	lsrs	r3, r3, #8
 800671e:	b29b      	uxth	r3, r3
 8006720:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 8006724:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006728:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 8006732:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

    if (crc_msb == FSP_PKT_SOD) {
 8006736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800673a:	2bca      	cmp	r3, #202	@ 0xca
 800673c:	d118      	bne.n	8006770 <frame_encode+0x268>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800673e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006748:	461a      	mov	r2, r3
 800674a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800674e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006752:	21bd      	movs	r1, #189	@ 0xbd
 8006754:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 8006756:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006760:	461a      	mov	r2, r3
 8006762:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006766:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800676a:	21dc      	movs	r1, #220	@ 0xdc
 800676c:	5499      	strb	r1, [r3, r2]
 800676e:	e046      	b.n	80067fe <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_EOF) {
 8006770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006774:	2bef      	cmp	r3, #239	@ 0xef
 8006776:	d118      	bne.n	80067aa <frame_encode+0x2a2>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8006778:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006782:	461a      	mov	r2, r3
 8006784:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006788:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800678c:	21bd      	movs	r1, #189	@ 0xbd
 800678e:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 8006790:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800679a:	461a      	mov	r2, r3
 800679c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80067a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80067a4:	21de      	movs	r1, #222	@ 0xde
 80067a6:	5499      	strb	r1, [r3, r2]
 80067a8:	e029      	b.n	80067fe <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_ESC) {
 80067aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ae:	2bbd      	cmp	r3, #189	@ 0xbd
 80067b0:	d118      	bne.n	80067e4 <frame_encode+0x2dc>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 80067b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80067bc:	461a      	mov	r2, r3
 80067be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80067c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80067c6:	21bd      	movs	r1, #189	@ 0xbd
 80067c8:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 80067ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80067d4:	461a      	mov	r2, r3
 80067d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80067da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80067de:	21db      	movs	r1, #219	@ 0xdb
 80067e0:	5499      	strb	r1, [r3, r2]
 80067e2:	e00c      	b.n	80067fe <frame_encode+0x2f6>
    } else {
        encoded_frame[encoded_length++] = crc_msb;
 80067e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80067ee:	4619      	mov	r1, r3
 80067f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80067f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80067f8:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 80067fc:	545a      	strb	r2, [r3, r1]
    }

    if (crc_lsb == FSP_PKT_SOD) {
 80067fe:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006802:	2bca      	cmp	r3, #202	@ 0xca
 8006804:	d118      	bne.n	8006838 <frame_encode+0x330>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8006806:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006810:	461a      	mov	r2, r3
 8006812:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006816:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800681a:	21bd      	movs	r1, #189	@ 0xbd
 800681c:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800681e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006828:	461a      	mov	r2, r3
 800682a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800682e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006832:	21dc      	movs	r1, #220	@ 0xdc
 8006834:	5499      	strb	r1, [r3, r2]
 8006836:	e046      	b.n	80068c6 <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_EOF) {
 8006838:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800683c:	2bef      	cmp	r3, #239	@ 0xef
 800683e:	d118      	bne.n	8006872 <frame_encode+0x36a>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 8006840:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800684a:	461a      	mov	r2, r3
 800684c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006850:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006854:	21bd      	movs	r1, #189	@ 0xbd
 8006856:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 8006858:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006862:	461a      	mov	r2, r3
 8006864:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006868:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800686c:	21de      	movs	r1, #222	@ 0xde
 800686e:	5499      	strb	r1, [r3, r2]
 8006870:	e029      	b.n	80068c6 <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_ESC) {
 8006872:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006876:	2bbd      	cmp	r3, #189	@ 0xbd
 8006878:	d118      	bne.n	80068ac <frame_encode+0x3a4>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800687a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 8006884:	461a      	mov	r2, r3
 8006886:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800688a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800688e:	21bd      	movs	r1, #189	@ 0xbd
 8006890:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 8006892:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800689c:	461a      	mov	r2, r3
 800689e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80068a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80068a6:	21db      	movs	r1, #219	@ 0xdb
 80068a8:	5499      	strb	r1, [r3, r2]
 80068aa:	e00c      	b.n	80068c6 <frame_encode+0x3be>
    } else {
        encoded_frame[encoded_length++] = crc_lsb;
 80068ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80068b6:	4619      	mov	r1, r3
 80068b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80068bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80068c0:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 80068c4:	545a      	strb	r2, [r3, r1]
    }

    encoded_frame[encoded_length++] = FSP_PKT_EOF;
 80068c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 80068d0:	461a      	mov	r2, r3
 80068d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80068d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80068da:	21ef      	movs	r1, #239	@ 0xef
 80068dc:	5499      	strb	r1, [r3, r2]

    memcpy(frame, encoded_frame, encoded_length);
 80068de:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 80068e2:	f107 0114 	add.w	r1, r7, #20
 80068e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80068ea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	f001 fb0d 	bl	8007f0e <memcpy>
    *frame_len = encoded_length;
 80068f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80068f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8006902:	701a      	strb	r2, [r3, #0]
}
 8006904:	bf00      	nop
 8006906:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <frame_decode>:
                return FSP_PKT_ERROR;
            }
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 8006910:	b580      	push	{r7, lr}
 8006912:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8006916:	af00      	add	r7, sp, #0
 8006918:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800691c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006920:	6018      	str	r0, [r3, #0]
 8006922:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006926:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006930:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8006934:	460a      	mov	r2, r1
 8006936:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];


	if (length < FSP_PKT_MIN_LENGTH - 2) {
 800694a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800694e:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b05      	cmp	r3, #5
 8006956:	d862      	bhi.n	8006a1e <frame_decode+0x10e>
	        return FSP_PKT_INVALID;
 8006958:	2302      	movs	r3, #2
 800695a:	e133      	b.n	8006bc4 <frame_decode+0x2b4>
	}


	while (i < length){
        uint8_t byte = buffer[i++];
 800695c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 8006966:	461a      	mov	r2, r3
 8006968:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800696c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4413      	add	r3, r2
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (escape) {
 800697a:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800697e:	2b00      	cmp	r3, #0
 8006980:	d038      	beq.n	80069f4 <frame_decode+0xe4>
            if (byte == FSP_PKT_TSOD) {
 8006982:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8006986:	2bdc      	cmp	r3, #220	@ 0xdc
 8006988:	d10c      	bne.n	80069a4 <frame_decode+0x94>
                decoded_payload[j++] = FSP_PKT_SOD;
 800698a:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 8006994:	461a      	mov	r2, r3
 8006996:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800699a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800699e:	21ca      	movs	r1, #202	@ 0xca
 80069a0:	5499      	strb	r1, [r3, r2]
 80069a2:	e023      	b.n	80069ec <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TEOF) {
 80069a4:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80069a8:	2bde      	cmp	r3, #222	@ 0xde
 80069aa:	d10c      	bne.n	80069c6 <frame_decode+0xb6>
                decoded_payload[j++] = FSP_PKT_EOF;
 80069ac:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 80069b6:	461a      	mov	r2, r3
 80069b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80069bc:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80069c0:	21ef      	movs	r1, #239	@ 0xef
 80069c2:	5499      	strb	r1, [r3, r2]
 80069c4:	e012      	b.n	80069ec <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TESC) {
 80069c6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80069ca:	2bdb      	cmp	r3, #219	@ 0xdb
 80069cc:	d10c      	bne.n	80069e8 <frame_decode+0xd8>
                decoded_payload[j++] = FSP_PKT_ESC;
 80069ce:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 80069d8:	461a      	mov	r2, r3
 80069da:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80069de:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80069e2:	21bd      	movs	r1, #189	@ 0xbd
 80069e4:	5499      	strb	r1, [r3, r2]
 80069e6:	e001      	b.n	80069ec <frame_decode+0xdc>
            } else {
            	return FSP_PKT_INVALID;
 80069e8:	2302      	movs	r3, #2
 80069ea:	e0eb      	b.n	8006bc4 <frame_decode+0x2b4>
            }
            escape = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 80069f2:	e014      	b.n	8006a1e <frame_decode+0x10e>
        } else if (byte == FSP_PKT_ESC) {
 80069f4:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80069f8:	2bbd      	cmp	r3, #189	@ 0xbd
 80069fa:	d103      	bne.n	8006a04 <frame_decode+0xf4>
        	escape = 1;
 80069fc:	2301      	movs	r3, #1
 80069fe:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 8006a02:	e00c      	b.n	8006a1e <frame_decode+0x10e>
        } else {
            decoded_payload[j++] = byte;
 8006a04:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 8006a0e:	4619      	mov	r1, r3
 8006a10:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006a14:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8006a18:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 8006a1c:	545a      	strb	r2, [r3, r1]
	while (i < length){
 8006a1e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006a22:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 8006a26:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d395      	bcc.n	800695c <frame_decode+0x4c>
        }
	}

    i = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 8006a36:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 8006a40:	461a      	mov	r2, r3
 8006a42:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006a46:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8006a4a:	5c9a      	ldrb	r2, [r3, r2]
 8006a4c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a54:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 8006a56:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 8006a60:	461a      	mov	r2, r3
 8006a62:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006a66:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8006a6a:	5c9a      	ldrb	r2, [r3, r2]
 8006a6c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a74:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 8006a76:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 8006a80:	461a      	mov	r2, r3
 8006a82:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006a86:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8006a8a:	5c9a      	ldrb	r2, [r3, r2]
 8006a8c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a94:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 8006a96:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006aa6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8006aaa:	5c9a      	ldrb	r2, [r3, r2]
 8006aac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab4:	711a      	strb	r2, [r3, #4]

    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 8006ab6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abe:	78db      	ldrb	r3, [r3, #3]
 8006ac0:	2bf7      	cmp	r3, #247	@ 0xf7
 8006ac2:	d80a      	bhi.n	8006ada <frame_decode+0x1ca>
 8006ac4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006acc:	78db      	ldrb	r3, [r3, #3]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8006ad4:	3b06      	subs	r3, #6
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d001      	beq.n	8006ade <frame_decode+0x1ce>
        return FSP_PKT_WRONG_LENGTH;
 8006ada:	2306      	movs	r3, #6
 8006adc:	e072      	b.n	8006bc4 <frame_decode+0x2b4>
    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 8006ade:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8006ae2:	f107 0210 	add.w	r2, r7, #16
 8006ae6:	18d1      	adds	r1, r2, r3
 8006ae8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af0:	78db      	ldrb	r3, [r3, #3]
 8006af2:	461a      	mov	r2, r3
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	3305      	adds	r3, #5
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 fa07 	bl	8007f0e <memcpy>
    i += fsp_pkt.length;
 8006b00:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b08:	78da      	ldrb	r2, [r3, #3]
 8006b0a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8006b0e:	4413      	add	r3, r2
 8006b10:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    //CRC
    uint16_t crc_received = (uint16_t)(decoded_payload[i++] << 8);
 8006b14:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b24:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8006b28:	5c9b      	ldrb	r3, [r3, r2]
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
    crc_received |= (uint16_t)(decoded_payload[i++]);
 8006b30:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b40:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8006b44:	5c9b      	ldrb	r3, [r3, r2]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a


    // CAL CRC
    uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp_pkt.src_adr, fsp_pkt.length + 4);
 8006b52:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b5a:	78db      	ldrb	r3, [r3, #3]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	3301      	adds	r3, #1
 8006b66:	4619      	mov	r1, r3
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f7ff fbcd 	bl	8006308 <crc16_CCITT>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208


    // CHECK CRC
    if (crc_received != crc_calculated) {
 8006b74:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 8006b78:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d001      	beq.n	8006b84 <frame_decode+0x274>
        return FSP_PKT_CRC_FAIL;
 8006b80:	2305      	movs	r3, #5
 8006b82:	e01f      	b.n	8006bc4 <frame_decode+0x2b4>
    }

    // Address
    if (fsp_pkt.dst_adr != fsp_my_adr) {
 8006b84:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8c:	789a      	ldrb	r2, [r3, #2]
 8006b8e:	4b10      	ldr	r3, [pc, #64]	@ (8006bd0 <frame_decode+0x2c0>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d001      	beq.n	8006b9a <frame_decode+0x28a>
        return FSP_PKT_WRONG_ADR;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e014      	b.n	8006bc4 <frame_decode+0x2b4>
    }

    *pkt = fsp_pkt;
 8006b9a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006b9e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8006ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bac:	4610      	mov	r0, r2
 8006bae:	4619      	mov	r1, r3
 8006bb0:	23fe      	movs	r3, #254	@ 0xfe
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f001 f9ab 	bl	8007f0e <memcpy>

    frame_processing(&fsp_pkt);
 8006bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 f809 	bl	8006bd4 <frame_processing>
    return 0;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000dd8 	.word	0x20000dd8

08006bd4 <frame_processing>:

char pos_str2[10];

int frame_processing(fsp_packet_t *fsp_pkt){
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
	switch (fsp_pkt->type)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	791b      	ldrb	r3, [r3, #4]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	2b07      	cmp	r3, #7
 8006be4:	f200 80d6 	bhi.w	8006d94 <frame_processing+0x1c0>
 8006be8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf0 <frame_processing+0x1c>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c11 	.word	0x08006c11
 8006bf4:	08006c5d 	.word	0x08006c5d
 8006bf8:	08006ca9 	.word	0x08006ca9
 8006bfc:	08006cc9 	.word	0x08006cc9
 8006c00:	08006ce9 	.word	0x08006ce9
 8006c04:	08006cf3 	.word	0x08006cf3
 8006c08:	08006cfd 	.word	0x08006cfd
 8006c0c:	08006d49 	.word	0x08006d49
	{
		case FSP_PKT_TYPE_DATA:

			Uart_sendstring(USART6, "DATA: ");
 8006c10:	4965      	ldr	r1, [pc, #404]	@ (8006da8 <frame_processing+0x1d4>)
 8006c12:	4866      	ldr	r0, [pc, #408]	@ (8006dac <frame_processing+0x1d8>)
 8006c14:	f7fa fffe 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[0]);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	795b      	ldrb	r3, [r3, #5]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	4964      	ldr	r1, [pc, #400]	@ (8006db0 <frame_processing+0x1dc>)
 8006c20:	4864      	ldr	r0, [pc, #400]	@ (8006db4 <frame_processing+0x1e0>)
 8006c22:	f001 f891 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006c26:	4963      	ldr	r1, [pc, #396]	@ (8006db4 <frame_processing+0x1e0>)
 8006c28:	4860      	ldr	r0, [pc, #384]	@ (8006dac <frame_processing+0x1d8>)
 8006c2a:	f7fa fff3 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[1]);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	799b      	ldrb	r3, [r3, #6]
 8006c32:	461a      	mov	r2, r3
 8006c34:	495e      	ldr	r1, [pc, #376]	@ (8006db0 <frame_processing+0x1dc>)
 8006c36:	485f      	ldr	r0, [pc, #380]	@ (8006db4 <frame_processing+0x1e0>)
 8006c38:	f001 f886 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006c3c:	495d      	ldr	r1, [pc, #372]	@ (8006db4 <frame_processing+0x1e0>)
 8006c3e:	485b      	ldr	r0, [pc, #364]	@ (8006dac <frame_processing+0x1d8>)
 8006c40:	f7fa ffe8 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[2]);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	79db      	ldrb	r3, [r3, #7]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4959      	ldr	r1, [pc, #356]	@ (8006db0 <frame_processing+0x1dc>)
 8006c4c:	4859      	ldr	r0, [pc, #356]	@ (8006db4 <frame_processing+0x1e0>)
 8006c4e:	f001 f87b 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006c52:	4958      	ldr	r1, [pc, #352]	@ (8006db4 <frame_processing+0x1e0>)
 8006c54:	4855      	ldr	r0, [pc, #340]	@ (8006dac <frame_processing+0x1d8>)
 8006c56:	f7fa ffdd 	bl	8001c14 <Uart_sendstring>

			break;
 8006c5a:	e0a0      	b.n	8006d9e <frame_processing+0x1ca>
		case FSP_PKT_TYPE_DATA_WITH_ACK:

			Uart_sendstring(USART6, "DATA ACK:");
 8006c5c:	4956      	ldr	r1, [pc, #344]	@ (8006db8 <frame_processing+0x1e4>)
 8006c5e:	4853      	ldr	r0, [pc, #332]	@ (8006dac <frame_processing+0x1d8>)
 8006c60:	f7fa ffd8 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[0]);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	795b      	ldrb	r3, [r3, #5]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4951      	ldr	r1, [pc, #324]	@ (8006db0 <frame_processing+0x1dc>)
 8006c6c:	4851      	ldr	r0, [pc, #324]	@ (8006db4 <frame_processing+0x1e0>)
 8006c6e:	f001 f86b 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006c72:	4950      	ldr	r1, [pc, #320]	@ (8006db4 <frame_processing+0x1e0>)
 8006c74:	484d      	ldr	r0, [pc, #308]	@ (8006dac <frame_processing+0x1d8>)
 8006c76:	f7fa ffcd 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[1]);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	799b      	ldrb	r3, [r3, #6]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	494b      	ldr	r1, [pc, #300]	@ (8006db0 <frame_processing+0x1dc>)
 8006c82:	484c      	ldr	r0, [pc, #304]	@ (8006db4 <frame_processing+0x1e0>)
 8006c84:	f001 f860 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006c88:	494a      	ldr	r1, [pc, #296]	@ (8006db4 <frame_processing+0x1e0>)
 8006c8a:	4848      	ldr	r0, [pc, #288]	@ (8006dac <frame_processing+0x1d8>)
 8006c8c:	f7fa ffc2 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[2]);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	79db      	ldrb	r3, [r3, #7]
 8006c94:	461a      	mov	r2, r3
 8006c96:	4946      	ldr	r1, [pc, #280]	@ (8006db0 <frame_processing+0x1dc>)
 8006c98:	4846      	ldr	r0, [pc, #280]	@ (8006db4 <frame_processing+0x1e0>)
 8006c9a:	f001 f855 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006c9e:	4945      	ldr	r1, [pc, #276]	@ (8006db4 <frame_processing+0x1e0>)
 8006ca0:	4842      	ldr	r0, [pc, #264]	@ (8006dac <frame_processing+0x1d8>)
 8006ca2:	f7fa ffb7 	bl	8001c14 <Uart_sendstring>

			break;
 8006ca6:	e07a      	b.n	8006d9e <frame_processing+0x1ca>
		case FSP_PKT_TYPE_CMD:

			Uart_sendstring(USART6, "CMD: ");
 8006ca8:	4944      	ldr	r1, [pc, #272]	@ (8006dbc <frame_processing+0x1e8>)
 8006caa:	4840      	ldr	r0, [pc, #256]	@ (8006dac <frame_processing+0x1d8>)
 8006cac:	f7fa ffb2 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[0]);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	795b      	ldrb	r3, [r3, #5]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	493e      	ldr	r1, [pc, #248]	@ (8006db0 <frame_processing+0x1dc>)
 8006cb8:	483e      	ldr	r0, [pc, #248]	@ (8006db4 <frame_processing+0x1e0>)
 8006cba:	f001 f845 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006cbe:	493d      	ldr	r1, [pc, #244]	@ (8006db4 <frame_processing+0x1e0>)
 8006cc0:	483a      	ldr	r0, [pc, #232]	@ (8006dac <frame_processing+0x1d8>)
 8006cc2:	f7fa ffa7 	bl	8001c14 <Uart_sendstring>

			break;
 8006cc6:	e06a      	b.n	8006d9e <frame_processing+0x1ca>
		case FSP_PKT_TYPE_CMD_WITH_ACK:

			Uart_sendstring(USART6, "CMD ACK:");
 8006cc8:	493d      	ldr	r1, [pc, #244]	@ (8006dc0 <frame_processing+0x1ec>)
 8006cca:	4838      	ldr	r0, [pc, #224]	@ (8006dac <frame_processing+0x1d8>)
 8006ccc:	f7fa ffa2 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[0]);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	795b      	ldrb	r3, [r3, #5]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4936      	ldr	r1, [pc, #216]	@ (8006db0 <frame_processing+0x1dc>)
 8006cd8:	4836      	ldr	r0, [pc, #216]	@ (8006db4 <frame_processing+0x1e0>)
 8006cda:	f001 f835 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006cde:	4935      	ldr	r1, [pc, #212]	@ (8006db4 <frame_processing+0x1e0>)
 8006ce0:	4832      	ldr	r0, [pc, #200]	@ (8006dac <frame_processing+0x1d8>)
 8006ce2:	f7fa ff97 	bl	8001c14 <Uart_sendstring>

			break;
 8006ce6:	e05a      	b.n	8006d9e <frame_processing+0x1ca>
		case FSP_PKT_TYPE_ACK:

    		Uart_sendstring(USART6, "ACK: ");
 8006ce8:	4936      	ldr	r1, [pc, #216]	@ (8006dc4 <frame_processing+0x1f0>)
 8006cea:	4830      	ldr	r0, [pc, #192]	@ (8006dac <frame_processing+0x1d8>)
 8006cec:	f7fa ff92 	bl	8001c14 <Uart_sendstring>

			break;
 8006cf0:	e055      	b.n	8006d9e <frame_processing+0x1ca>
		case FSP_PKT_TYPE_NACK:

    		Uart_sendstring(USART6, "NACK: ");
 8006cf2:	4935      	ldr	r1, [pc, #212]	@ (8006dc8 <frame_processing+0x1f4>)
 8006cf4:	482d      	ldr	r0, [pc, #180]	@ (8006dac <frame_processing+0x1d8>)
 8006cf6:	f7fa ff8d 	bl	8001c14 <Uart_sendstring>

			break;
 8006cfa:	e050      	b.n	8006d9e <frame_processing+0x1ca>
		case FSP_PKT_TYPE_CMD_W_DATA:

    		Uart_sendstring(USART6, "DATA CMD: ");
 8006cfc:	4933      	ldr	r1, [pc, #204]	@ (8006dcc <frame_processing+0x1f8>)
 8006cfe:	482b      	ldr	r0, [pc, #172]	@ (8006dac <frame_processing+0x1d8>)
 8006d00:	f7fa ff88 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[0]);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	795b      	ldrb	r3, [r3, #5]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4929      	ldr	r1, [pc, #164]	@ (8006db0 <frame_processing+0x1dc>)
 8006d0c:	4829      	ldr	r0, [pc, #164]	@ (8006db4 <frame_processing+0x1e0>)
 8006d0e:	f001 f81b 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006d12:	4928      	ldr	r1, [pc, #160]	@ (8006db4 <frame_processing+0x1e0>)
 8006d14:	4825      	ldr	r0, [pc, #148]	@ (8006dac <frame_processing+0x1d8>)
 8006d16:	f7fa ff7d 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[1]);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	799b      	ldrb	r3, [r3, #6]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4923      	ldr	r1, [pc, #140]	@ (8006db0 <frame_processing+0x1dc>)
 8006d22:	4824      	ldr	r0, [pc, #144]	@ (8006db4 <frame_processing+0x1e0>)
 8006d24:	f001 f810 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006d28:	4922      	ldr	r1, [pc, #136]	@ (8006db4 <frame_processing+0x1e0>)
 8006d2a:	4820      	ldr	r0, [pc, #128]	@ (8006dac <frame_processing+0x1d8>)
 8006d2c:	f7fa ff72 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[2]);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	79db      	ldrb	r3, [r3, #7]
 8006d34:	461a      	mov	r2, r3
 8006d36:	491e      	ldr	r1, [pc, #120]	@ (8006db0 <frame_processing+0x1dc>)
 8006d38:	481e      	ldr	r0, [pc, #120]	@ (8006db4 <frame_processing+0x1e0>)
 8006d3a:	f001 f805 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006d3e:	491d      	ldr	r1, [pc, #116]	@ (8006db4 <frame_processing+0x1e0>)
 8006d40:	481a      	ldr	r0, [pc, #104]	@ (8006dac <frame_processing+0x1d8>)
 8006d42:	f7fa ff67 	bl	8001c14 <Uart_sendstring>

			break;
 8006d46:	e02a      	b.n	8006d9e <frame_processing+0x1ca>
		case FSP_PKT_TYPE_CMD_W_DATA_ACK:

    		Uart_sendstring(USART6, "DATA CMD ACK: ");
 8006d48:	4921      	ldr	r1, [pc, #132]	@ (8006dd0 <frame_processing+0x1fc>)
 8006d4a:	4818      	ldr	r0, [pc, #96]	@ (8006dac <frame_processing+0x1d8>)
 8006d4c:	f7fa ff62 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[0]);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	795b      	ldrb	r3, [r3, #5]
 8006d54:	461a      	mov	r2, r3
 8006d56:	4916      	ldr	r1, [pc, #88]	@ (8006db0 <frame_processing+0x1dc>)
 8006d58:	4816      	ldr	r0, [pc, #88]	@ (8006db4 <frame_processing+0x1e0>)
 8006d5a:	f000 fff5 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006d5e:	4915      	ldr	r1, [pc, #84]	@ (8006db4 <frame_processing+0x1e0>)
 8006d60:	4812      	ldr	r0, [pc, #72]	@ (8006dac <frame_processing+0x1d8>)
 8006d62:	f7fa ff57 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[1]);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	799b      	ldrb	r3, [r3, #6]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	4910      	ldr	r1, [pc, #64]	@ (8006db0 <frame_processing+0x1dc>)
 8006d6e:	4811      	ldr	r0, [pc, #68]	@ (8006db4 <frame_processing+0x1e0>)
 8006d70:	f000 ffea 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006d74:	490f      	ldr	r1, [pc, #60]	@ (8006db4 <frame_processing+0x1e0>)
 8006d76:	480d      	ldr	r0, [pc, #52]	@ (8006dac <frame_processing+0x1d8>)
 8006d78:	f7fa ff4c 	bl	8001c14 <Uart_sendstring>
			sprintf(pos_str2, "%d", fsp_pkt->payload[2]);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	79db      	ldrb	r3, [r3, #7]
 8006d80:	461a      	mov	r2, r3
 8006d82:	490b      	ldr	r1, [pc, #44]	@ (8006db0 <frame_processing+0x1dc>)
 8006d84:	480b      	ldr	r0, [pc, #44]	@ (8006db4 <frame_processing+0x1e0>)
 8006d86:	f000 ffdf 	bl	8007d48 <siprintf>
			Uart_sendstring(USART6, pos_str2);
 8006d8a:	490a      	ldr	r1, [pc, #40]	@ (8006db4 <frame_processing+0x1e0>)
 8006d8c:	4807      	ldr	r0, [pc, #28]	@ (8006dac <frame_processing+0x1d8>)
 8006d8e:	f7fa ff41 	bl	8001c14 <Uart_sendstring>

			break;
 8006d92:	e004      	b.n	8006d9e <frame_processing+0x1ca>

		default:

			Uart_sendstring(USART6, "DEFAULT");
 8006d94:	490f      	ldr	r1, [pc, #60]	@ (8006dd4 <frame_processing+0x200>)
 8006d96:	4805      	ldr	r0, [pc, #20]	@ (8006dac <frame_processing+0x1d8>)
 8006d98:	f7fa ff3c 	bl	8001c14 <Uart_sendstring>

			break;
 8006d9c:	bf00      	nop


	}
	return 0;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	0800cd58 	.word	0x0800cd58
 8006dac:	40011400 	.word	0x40011400
 8006db0:	0800cd60 	.word	0x0800cd60
 8006db4:	20000ddc 	.word	0x20000ddc
 8006db8:	0800cd64 	.word	0x0800cd64
 8006dbc:	0800cd70 	.word	0x0800cd70
 8006dc0:	0800cd78 	.word	0x0800cd78
 8006dc4:	0800cd84 	.word	0x0800cd84
 8006dc8:	0800cd8c 	.word	0x0800cd8c
 8006dcc:	0800cd94 	.word	0x0800cd94
 8006dd0:	0800cda0 	.word	0x0800cda0
 8006dd4:	0800cdb0 	.word	0x0800cdb0

08006dd8 <atoi>:
 8006dd8:	220a      	movs	r2, #10
 8006dda:	2100      	movs	r1, #0
 8006ddc:	f000 b87c 	b.w	8006ed8 <strtol>

08006de0 <_strtol_l.constprop.0>:
 8006de0:	2b24      	cmp	r3, #36	@ 0x24
 8006de2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de6:	4686      	mov	lr, r0
 8006de8:	4690      	mov	r8, r2
 8006dea:	d801      	bhi.n	8006df0 <_strtol_l.constprop.0+0x10>
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d106      	bne.n	8006dfe <_strtol_l.constprop.0+0x1e>
 8006df0:	f001 f860 	bl	8007eb4 <__errno>
 8006df4:	2316      	movs	r3, #22
 8006df6:	6003      	str	r3, [r0, #0]
 8006df8:	2000      	movs	r0, #0
 8006dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfe:	4834      	ldr	r0, [pc, #208]	@ (8006ed0 <_strtol_l.constprop.0+0xf0>)
 8006e00:	460d      	mov	r5, r1
 8006e02:	462a      	mov	r2, r5
 8006e04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e08:	5d06      	ldrb	r6, [r0, r4]
 8006e0a:	f016 0608 	ands.w	r6, r6, #8
 8006e0e:	d1f8      	bne.n	8006e02 <_strtol_l.constprop.0+0x22>
 8006e10:	2c2d      	cmp	r4, #45	@ 0x2d
 8006e12:	d12d      	bne.n	8006e70 <_strtol_l.constprop.0+0x90>
 8006e14:	782c      	ldrb	r4, [r5, #0]
 8006e16:	2601      	movs	r6, #1
 8006e18:	1c95      	adds	r5, r2, #2
 8006e1a:	f033 0210 	bics.w	r2, r3, #16
 8006e1e:	d109      	bne.n	8006e34 <_strtol_l.constprop.0+0x54>
 8006e20:	2c30      	cmp	r4, #48	@ 0x30
 8006e22:	d12a      	bne.n	8006e7a <_strtol_l.constprop.0+0x9a>
 8006e24:	782a      	ldrb	r2, [r5, #0]
 8006e26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006e2a:	2a58      	cmp	r2, #88	@ 0x58
 8006e2c:	d125      	bne.n	8006e7a <_strtol_l.constprop.0+0x9a>
 8006e2e:	786c      	ldrb	r4, [r5, #1]
 8006e30:	2310      	movs	r3, #16
 8006e32:	3502      	adds	r5, #2
 8006e34:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006e38:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	fbbc f9f3 	udiv	r9, ip, r3
 8006e42:	4610      	mov	r0, r2
 8006e44:	fb03 ca19 	mls	sl, r3, r9, ip
 8006e48:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006e4c:	2f09      	cmp	r7, #9
 8006e4e:	d81b      	bhi.n	8006e88 <_strtol_l.constprop.0+0xa8>
 8006e50:	463c      	mov	r4, r7
 8006e52:	42a3      	cmp	r3, r4
 8006e54:	dd27      	ble.n	8006ea6 <_strtol_l.constprop.0+0xc6>
 8006e56:	1c57      	adds	r7, r2, #1
 8006e58:	d007      	beq.n	8006e6a <_strtol_l.constprop.0+0x8a>
 8006e5a:	4581      	cmp	r9, r0
 8006e5c:	d320      	bcc.n	8006ea0 <_strtol_l.constprop.0+0xc0>
 8006e5e:	d101      	bne.n	8006e64 <_strtol_l.constprop.0+0x84>
 8006e60:	45a2      	cmp	sl, r4
 8006e62:	db1d      	blt.n	8006ea0 <_strtol_l.constprop.0+0xc0>
 8006e64:	fb00 4003 	mla	r0, r0, r3, r4
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e6e:	e7eb      	b.n	8006e48 <_strtol_l.constprop.0+0x68>
 8006e70:	2c2b      	cmp	r4, #43	@ 0x2b
 8006e72:	bf04      	itt	eq
 8006e74:	782c      	ldrbeq	r4, [r5, #0]
 8006e76:	1c95      	addeq	r5, r2, #2
 8006e78:	e7cf      	b.n	8006e1a <_strtol_l.constprop.0+0x3a>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1da      	bne.n	8006e34 <_strtol_l.constprop.0+0x54>
 8006e7e:	2c30      	cmp	r4, #48	@ 0x30
 8006e80:	bf0c      	ite	eq
 8006e82:	2308      	moveq	r3, #8
 8006e84:	230a      	movne	r3, #10
 8006e86:	e7d5      	b.n	8006e34 <_strtol_l.constprop.0+0x54>
 8006e88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006e8c:	2f19      	cmp	r7, #25
 8006e8e:	d801      	bhi.n	8006e94 <_strtol_l.constprop.0+0xb4>
 8006e90:	3c37      	subs	r4, #55	@ 0x37
 8006e92:	e7de      	b.n	8006e52 <_strtol_l.constprop.0+0x72>
 8006e94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006e98:	2f19      	cmp	r7, #25
 8006e9a:	d804      	bhi.n	8006ea6 <_strtol_l.constprop.0+0xc6>
 8006e9c:	3c57      	subs	r4, #87	@ 0x57
 8006e9e:	e7d8      	b.n	8006e52 <_strtol_l.constprop.0+0x72>
 8006ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea4:	e7e1      	b.n	8006e6a <_strtol_l.constprop.0+0x8a>
 8006ea6:	1c53      	adds	r3, r2, #1
 8006ea8:	d108      	bne.n	8006ebc <_strtol_l.constprop.0+0xdc>
 8006eaa:	2322      	movs	r3, #34	@ 0x22
 8006eac:	f8ce 3000 	str.w	r3, [lr]
 8006eb0:	4660      	mov	r0, ip
 8006eb2:	f1b8 0f00 	cmp.w	r8, #0
 8006eb6:	d0a0      	beq.n	8006dfa <_strtol_l.constprop.0+0x1a>
 8006eb8:	1e69      	subs	r1, r5, #1
 8006eba:	e006      	b.n	8006eca <_strtol_l.constprop.0+0xea>
 8006ebc:	b106      	cbz	r6, 8006ec0 <_strtol_l.constprop.0+0xe0>
 8006ebe:	4240      	negs	r0, r0
 8006ec0:	f1b8 0f00 	cmp.w	r8, #0
 8006ec4:	d099      	beq.n	8006dfa <_strtol_l.constprop.0+0x1a>
 8006ec6:	2a00      	cmp	r2, #0
 8006ec8:	d1f6      	bne.n	8006eb8 <_strtol_l.constprop.0+0xd8>
 8006eca:	f8c8 1000 	str.w	r1, [r8]
 8006ece:	e794      	b.n	8006dfa <_strtol_l.constprop.0+0x1a>
 8006ed0:	0800cdd1 	.word	0x0800cdd1

08006ed4 <_strtol_r>:
 8006ed4:	f7ff bf84 	b.w	8006de0 <_strtol_l.constprop.0>

08006ed8 <strtol>:
 8006ed8:	4613      	mov	r3, r2
 8006eda:	460a      	mov	r2, r1
 8006edc:	4601      	mov	r1, r0
 8006ede:	4802      	ldr	r0, [pc, #8]	@ (8006ee8 <strtol+0x10>)
 8006ee0:	6800      	ldr	r0, [r0, #0]
 8006ee2:	f7ff bf7d 	b.w	8006de0 <_strtol_l.constprop.0>
 8006ee6:	bf00      	nop
 8006ee8:	20000300 	.word	0x20000300

08006eec <__cvt>:
 8006eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef0:	ec57 6b10 	vmov	r6, r7, d0
 8006ef4:	2f00      	cmp	r7, #0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	4619      	mov	r1, r3
 8006efa:	463b      	mov	r3, r7
 8006efc:	bfbb      	ittet	lt
 8006efe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f02:	461f      	movlt	r7, r3
 8006f04:	2300      	movge	r3, #0
 8006f06:	232d      	movlt	r3, #45	@ 0x2d
 8006f08:	700b      	strb	r3, [r1, #0]
 8006f0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f10:	4691      	mov	r9, r2
 8006f12:	f023 0820 	bic.w	r8, r3, #32
 8006f16:	bfbc      	itt	lt
 8006f18:	4632      	movlt	r2, r6
 8006f1a:	4616      	movlt	r6, r2
 8006f1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f20:	d005      	beq.n	8006f2e <__cvt+0x42>
 8006f22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f26:	d100      	bne.n	8006f2a <__cvt+0x3e>
 8006f28:	3401      	adds	r4, #1
 8006f2a:	2102      	movs	r1, #2
 8006f2c:	e000      	b.n	8006f30 <__cvt+0x44>
 8006f2e:	2103      	movs	r1, #3
 8006f30:	ab03      	add	r3, sp, #12
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	ab02      	add	r3, sp, #8
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	ec47 6b10 	vmov	d0, r6, r7
 8006f3c:	4653      	mov	r3, sl
 8006f3e:	4622      	mov	r2, r4
 8006f40:	f001 f882 	bl	8008048 <_dtoa_r>
 8006f44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f48:	4605      	mov	r5, r0
 8006f4a:	d119      	bne.n	8006f80 <__cvt+0x94>
 8006f4c:	f019 0f01 	tst.w	r9, #1
 8006f50:	d00e      	beq.n	8006f70 <__cvt+0x84>
 8006f52:	eb00 0904 	add.w	r9, r0, r4
 8006f56:	2200      	movs	r2, #0
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	f7f9 fdc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f62:	b108      	cbz	r0, 8006f68 <__cvt+0x7c>
 8006f64:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f68:	2230      	movs	r2, #48	@ 0x30
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	454b      	cmp	r3, r9
 8006f6e:	d31e      	bcc.n	8006fae <__cvt+0xc2>
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f74:	1b5b      	subs	r3, r3, r5
 8006f76:	4628      	mov	r0, r5
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	b004      	add	sp, #16
 8006f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f84:	eb00 0904 	add.w	r9, r0, r4
 8006f88:	d1e5      	bne.n	8006f56 <__cvt+0x6a>
 8006f8a:	7803      	ldrb	r3, [r0, #0]
 8006f8c:	2b30      	cmp	r3, #48	@ 0x30
 8006f8e:	d10a      	bne.n	8006fa6 <__cvt+0xba>
 8006f90:	2200      	movs	r2, #0
 8006f92:	2300      	movs	r3, #0
 8006f94:	4630      	mov	r0, r6
 8006f96:	4639      	mov	r1, r7
 8006f98:	f7f9 fda6 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f9c:	b918      	cbnz	r0, 8006fa6 <__cvt+0xba>
 8006f9e:	f1c4 0401 	rsb	r4, r4, #1
 8006fa2:	f8ca 4000 	str.w	r4, [sl]
 8006fa6:	f8da 3000 	ldr.w	r3, [sl]
 8006faa:	4499      	add	r9, r3
 8006fac:	e7d3      	b.n	8006f56 <__cvt+0x6a>
 8006fae:	1c59      	adds	r1, r3, #1
 8006fb0:	9103      	str	r1, [sp, #12]
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	e7d9      	b.n	8006f6a <__cvt+0x7e>

08006fb6 <__exponent>:
 8006fb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	bfba      	itte	lt
 8006fbc:	4249      	neglt	r1, r1
 8006fbe:	232d      	movlt	r3, #45	@ 0x2d
 8006fc0:	232b      	movge	r3, #43	@ 0x2b
 8006fc2:	2909      	cmp	r1, #9
 8006fc4:	7002      	strb	r2, [r0, #0]
 8006fc6:	7043      	strb	r3, [r0, #1]
 8006fc8:	dd29      	ble.n	800701e <__exponent+0x68>
 8006fca:	f10d 0307 	add.w	r3, sp, #7
 8006fce:	461d      	mov	r5, r3
 8006fd0:	270a      	movs	r7, #10
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8006fd8:	fb07 1416 	mls	r4, r7, r6, r1
 8006fdc:	3430      	adds	r4, #48	@ 0x30
 8006fde:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	2c63      	cmp	r4, #99	@ 0x63
 8006fe6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fea:	4631      	mov	r1, r6
 8006fec:	dcf1      	bgt.n	8006fd2 <__exponent+0x1c>
 8006fee:	3130      	adds	r1, #48	@ 0x30
 8006ff0:	1e94      	subs	r4, r2, #2
 8006ff2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ff6:	1c41      	adds	r1, r0, #1
 8006ff8:	4623      	mov	r3, r4
 8006ffa:	42ab      	cmp	r3, r5
 8006ffc:	d30a      	bcc.n	8007014 <__exponent+0x5e>
 8006ffe:	f10d 0309 	add.w	r3, sp, #9
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	42ac      	cmp	r4, r5
 8007006:	bf88      	it	hi
 8007008:	2300      	movhi	r3, #0
 800700a:	3302      	adds	r3, #2
 800700c:	4403      	add	r3, r0
 800700e:	1a18      	subs	r0, r3, r0
 8007010:	b003      	add	sp, #12
 8007012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007014:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007018:	f801 6f01 	strb.w	r6, [r1, #1]!
 800701c:	e7ed      	b.n	8006ffa <__exponent+0x44>
 800701e:	2330      	movs	r3, #48	@ 0x30
 8007020:	3130      	adds	r1, #48	@ 0x30
 8007022:	7083      	strb	r3, [r0, #2]
 8007024:	70c1      	strb	r1, [r0, #3]
 8007026:	1d03      	adds	r3, r0, #4
 8007028:	e7f1      	b.n	800700e <__exponent+0x58>
	...

0800702c <_printf_float>:
 800702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007030:	b08d      	sub	sp, #52	@ 0x34
 8007032:	460c      	mov	r4, r1
 8007034:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007038:	4616      	mov	r6, r2
 800703a:	461f      	mov	r7, r3
 800703c:	4605      	mov	r5, r0
 800703e:	f000 feef 	bl	8007e20 <_localeconv_r>
 8007042:	6803      	ldr	r3, [r0, #0]
 8007044:	9304      	str	r3, [sp, #16]
 8007046:	4618      	mov	r0, r3
 8007048:	f7f9 f922 	bl	8000290 <strlen>
 800704c:	2300      	movs	r3, #0
 800704e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007050:	f8d8 3000 	ldr.w	r3, [r8]
 8007054:	9005      	str	r0, [sp, #20]
 8007056:	3307      	adds	r3, #7
 8007058:	f023 0307 	bic.w	r3, r3, #7
 800705c:	f103 0208 	add.w	r2, r3, #8
 8007060:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007064:	f8d4 b000 	ldr.w	fp, [r4]
 8007068:	f8c8 2000 	str.w	r2, [r8]
 800706c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007070:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007074:	9307      	str	r3, [sp, #28]
 8007076:	f8cd 8018 	str.w	r8, [sp, #24]
 800707a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800707e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007082:	4b9c      	ldr	r3, [pc, #624]	@ (80072f4 <_printf_float+0x2c8>)
 8007084:	f04f 32ff 	mov.w	r2, #4294967295
 8007088:	f7f9 fd60 	bl	8000b4c <__aeabi_dcmpun>
 800708c:	bb70      	cbnz	r0, 80070ec <_printf_float+0xc0>
 800708e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007092:	4b98      	ldr	r3, [pc, #608]	@ (80072f4 <_printf_float+0x2c8>)
 8007094:	f04f 32ff 	mov.w	r2, #4294967295
 8007098:	f7f9 fd3a 	bl	8000b10 <__aeabi_dcmple>
 800709c:	bb30      	cbnz	r0, 80070ec <_printf_float+0xc0>
 800709e:	2200      	movs	r2, #0
 80070a0:	2300      	movs	r3, #0
 80070a2:	4640      	mov	r0, r8
 80070a4:	4649      	mov	r1, r9
 80070a6:	f7f9 fd29 	bl	8000afc <__aeabi_dcmplt>
 80070aa:	b110      	cbz	r0, 80070b2 <_printf_float+0x86>
 80070ac:	232d      	movs	r3, #45	@ 0x2d
 80070ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070b2:	4a91      	ldr	r2, [pc, #580]	@ (80072f8 <_printf_float+0x2cc>)
 80070b4:	4b91      	ldr	r3, [pc, #580]	@ (80072fc <_printf_float+0x2d0>)
 80070b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80070ba:	bf94      	ite	ls
 80070bc:	4690      	movls	r8, r2
 80070be:	4698      	movhi	r8, r3
 80070c0:	2303      	movs	r3, #3
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	f02b 0304 	bic.w	r3, fp, #4
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	f04f 0900 	mov.w	r9, #0
 80070ce:	9700      	str	r7, [sp, #0]
 80070d0:	4633      	mov	r3, r6
 80070d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80070d4:	4621      	mov	r1, r4
 80070d6:	4628      	mov	r0, r5
 80070d8:	f000 f9d2 	bl	8007480 <_printf_common>
 80070dc:	3001      	adds	r0, #1
 80070de:	f040 808d 	bne.w	80071fc <_printf_float+0x1d0>
 80070e2:	f04f 30ff 	mov.w	r0, #4294967295
 80070e6:	b00d      	add	sp, #52	@ 0x34
 80070e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ec:	4642      	mov	r2, r8
 80070ee:	464b      	mov	r3, r9
 80070f0:	4640      	mov	r0, r8
 80070f2:	4649      	mov	r1, r9
 80070f4:	f7f9 fd2a 	bl	8000b4c <__aeabi_dcmpun>
 80070f8:	b140      	cbz	r0, 800710c <_printf_float+0xe0>
 80070fa:	464b      	mov	r3, r9
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bfbc      	itt	lt
 8007100:	232d      	movlt	r3, #45	@ 0x2d
 8007102:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007106:	4a7e      	ldr	r2, [pc, #504]	@ (8007300 <_printf_float+0x2d4>)
 8007108:	4b7e      	ldr	r3, [pc, #504]	@ (8007304 <_printf_float+0x2d8>)
 800710a:	e7d4      	b.n	80070b6 <_printf_float+0x8a>
 800710c:	6863      	ldr	r3, [r4, #4]
 800710e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007112:	9206      	str	r2, [sp, #24]
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	d13b      	bne.n	8007190 <_printf_float+0x164>
 8007118:	2306      	movs	r3, #6
 800711a:	6063      	str	r3, [r4, #4]
 800711c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007120:	2300      	movs	r3, #0
 8007122:	6022      	str	r2, [r4, #0]
 8007124:	9303      	str	r3, [sp, #12]
 8007126:	ab0a      	add	r3, sp, #40	@ 0x28
 8007128:	e9cd a301 	strd	sl, r3, [sp, #4]
 800712c:	ab09      	add	r3, sp, #36	@ 0x24
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	6861      	ldr	r1, [r4, #4]
 8007132:	ec49 8b10 	vmov	d0, r8, r9
 8007136:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800713a:	4628      	mov	r0, r5
 800713c:	f7ff fed6 	bl	8006eec <__cvt>
 8007140:	9b06      	ldr	r3, [sp, #24]
 8007142:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007144:	2b47      	cmp	r3, #71	@ 0x47
 8007146:	4680      	mov	r8, r0
 8007148:	d129      	bne.n	800719e <_printf_float+0x172>
 800714a:	1cc8      	adds	r0, r1, #3
 800714c:	db02      	blt.n	8007154 <_printf_float+0x128>
 800714e:	6863      	ldr	r3, [r4, #4]
 8007150:	4299      	cmp	r1, r3
 8007152:	dd41      	ble.n	80071d8 <_printf_float+0x1ac>
 8007154:	f1aa 0a02 	sub.w	sl, sl, #2
 8007158:	fa5f fa8a 	uxtb.w	sl, sl
 800715c:	3901      	subs	r1, #1
 800715e:	4652      	mov	r2, sl
 8007160:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007164:	9109      	str	r1, [sp, #36]	@ 0x24
 8007166:	f7ff ff26 	bl	8006fb6 <__exponent>
 800716a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800716c:	1813      	adds	r3, r2, r0
 800716e:	2a01      	cmp	r2, #1
 8007170:	4681      	mov	r9, r0
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	dc02      	bgt.n	800717c <_printf_float+0x150>
 8007176:	6822      	ldr	r2, [r4, #0]
 8007178:	07d2      	lsls	r2, r2, #31
 800717a:	d501      	bpl.n	8007180 <_printf_float+0x154>
 800717c:	3301      	adds	r3, #1
 800717e:	6123      	str	r3, [r4, #16]
 8007180:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0a2      	beq.n	80070ce <_printf_float+0xa2>
 8007188:	232d      	movs	r3, #45	@ 0x2d
 800718a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800718e:	e79e      	b.n	80070ce <_printf_float+0xa2>
 8007190:	9a06      	ldr	r2, [sp, #24]
 8007192:	2a47      	cmp	r2, #71	@ 0x47
 8007194:	d1c2      	bne.n	800711c <_printf_float+0xf0>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1c0      	bne.n	800711c <_printf_float+0xf0>
 800719a:	2301      	movs	r3, #1
 800719c:	e7bd      	b.n	800711a <_printf_float+0xee>
 800719e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071a2:	d9db      	bls.n	800715c <_printf_float+0x130>
 80071a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80071a8:	d118      	bne.n	80071dc <_printf_float+0x1b0>
 80071aa:	2900      	cmp	r1, #0
 80071ac:	6863      	ldr	r3, [r4, #4]
 80071ae:	dd0b      	ble.n	80071c8 <_printf_float+0x19c>
 80071b0:	6121      	str	r1, [r4, #16]
 80071b2:	b913      	cbnz	r3, 80071ba <_printf_float+0x18e>
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	07d0      	lsls	r0, r2, #31
 80071b8:	d502      	bpl.n	80071c0 <_printf_float+0x194>
 80071ba:	3301      	adds	r3, #1
 80071bc:	440b      	add	r3, r1
 80071be:	6123      	str	r3, [r4, #16]
 80071c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80071c2:	f04f 0900 	mov.w	r9, #0
 80071c6:	e7db      	b.n	8007180 <_printf_float+0x154>
 80071c8:	b913      	cbnz	r3, 80071d0 <_printf_float+0x1a4>
 80071ca:	6822      	ldr	r2, [r4, #0]
 80071cc:	07d2      	lsls	r2, r2, #31
 80071ce:	d501      	bpl.n	80071d4 <_printf_float+0x1a8>
 80071d0:	3302      	adds	r3, #2
 80071d2:	e7f4      	b.n	80071be <_printf_float+0x192>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7f2      	b.n	80071be <_printf_float+0x192>
 80071d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80071dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071de:	4299      	cmp	r1, r3
 80071e0:	db05      	blt.n	80071ee <_printf_float+0x1c2>
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	6121      	str	r1, [r4, #16]
 80071e6:	07d8      	lsls	r0, r3, #31
 80071e8:	d5ea      	bpl.n	80071c0 <_printf_float+0x194>
 80071ea:	1c4b      	adds	r3, r1, #1
 80071ec:	e7e7      	b.n	80071be <_printf_float+0x192>
 80071ee:	2900      	cmp	r1, #0
 80071f0:	bfd4      	ite	le
 80071f2:	f1c1 0202 	rsble	r2, r1, #2
 80071f6:	2201      	movgt	r2, #1
 80071f8:	4413      	add	r3, r2
 80071fa:	e7e0      	b.n	80071be <_printf_float+0x192>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	055a      	lsls	r2, r3, #21
 8007200:	d407      	bmi.n	8007212 <_printf_float+0x1e6>
 8007202:	6923      	ldr	r3, [r4, #16]
 8007204:	4642      	mov	r2, r8
 8007206:	4631      	mov	r1, r6
 8007208:	4628      	mov	r0, r5
 800720a:	47b8      	blx	r7
 800720c:	3001      	adds	r0, #1
 800720e:	d12b      	bne.n	8007268 <_printf_float+0x23c>
 8007210:	e767      	b.n	80070e2 <_printf_float+0xb6>
 8007212:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007216:	f240 80dd 	bls.w	80073d4 <_printf_float+0x3a8>
 800721a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800721e:	2200      	movs	r2, #0
 8007220:	2300      	movs	r3, #0
 8007222:	f7f9 fc61 	bl	8000ae8 <__aeabi_dcmpeq>
 8007226:	2800      	cmp	r0, #0
 8007228:	d033      	beq.n	8007292 <_printf_float+0x266>
 800722a:	4a37      	ldr	r2, [pc, #220]	@ (8007308 <_printf_float+0x2dc>)
 800722c:	2301      	movs	r3, #1
 800722e:	4631      	mov	r1, r6
 8007230:	4628      	mov	r0, r5
 8007232:	47b8      	blx	r7
 8007234:	3001      	adds	r0, #1
 8007236:	f43f af54 	beq.w	80070e2 <_printf_float+0xb6>
 800723a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800723e:	4543      	cmp	r3, r8
 8007240:	db02      	blt.n	8007248 <_printf_float+0x21c>
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	07d8      	lsls	r0, r3, #31
 8007246:	d50f      	bpl.n	8007268 <_printf_float+0x23c>
 8007248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f af45 	beq.w	80070e2 <_printf_float+0xb6>
 8007258:	f04f 0900 	mov.w	r9, #0
 800725c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007260:	f104 0a1a 	add.w	sl, r4, #26
 8007264:	45c8      	cmp	r8, r9
 8007266:	dc09      	bgt.n	800727c <_printf_float+0x250>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	079b      	lsls	r3, r3, #30
 800726c:	f100 8103 	bmi.w	8007476 <_printf_float+0x44a>
 8007270:	68e0      	ldr	r0, [r4, #12]
 8007272:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007274:	4298      	cmp	r0, r3
 8007276:	bfb8      	it	lt
 8007278:	4618      	movlt	r0, r3
 800727a:	e734      	b.n	80070e6 <_printf_float+0xba>
 800727c:	2301      	movs	r3, #1
 800727e:	4652      	mov	r2, sl
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f af2b 	beq.w	80070e2 <_printf_float+0xb6>
 800728c:	f109 0901 	add.w	r9, r9, #1
 8007290:	e7e8      	b.n	8007264 <_printf_float+0x238>
 8007292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	dc39      	bgt.n	800730c <_printf_float+0x2e0>
 8007298:	4a1b      	ldr	r2, [pc, #108]	@ (8007308 <_printf_float+0x2dc>)
 800729a:	2301      	movs	r3, #1
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	f43f af1d 	beq.w	80070e2 <_printf_float+0xb6>
 80072a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80072ac:	ea59 0303 	orrs.w	r3, r9, r3
 80072b0:	d102      	bne.n	80072b8 <_printf_float+0x28c>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	07d9      	lsls	r1, r3, #31
 80072b6:	d5d7      	bpl.n	8007268 <_printf_float+0x23c>
 80072b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072bc:	4631      	mov	r1, r6
 80072be:	4628      	mov	r0, r5
 80072c0:	47b8      	blx	r7
 80072c2:	3001      	adds	r0, #1
 80072c4:	f43f af0d 	beq.w	80070e2 <_printf_float+0xb6>
 80072c8:	f04f 0a00 	mov.w	sl, #0
 80072cc:	f104 0b1a 	add.w	fp, r4, #26
 80072d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d2:	425b      	negs	r3, r3
 80072d4:	4553      	cmp	r3, sl
 80072d6:	dc01      	bgt.n	80072dc <_printf_float+0x2b0>
 80072d8:	464b      	mov	r3, r9
 80072da:	e793      	b.n	8007204 <_printf_float+0x1d8>
 80072dc:	2301      	movs	r3, #1
 80072de:	465a      	mov	r2, fp
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f aefb 	beq.w	80070e2 <_printf_float+0xb6>
 80072ec:	f10a 0a01 	add.w	sl, sl, #1
 80072f0:	e7ee      	b.n	80072d0 <_printf_float+0x2a4>
 80072f2:	bf00      	nop
 80072f4:	7fefffff 	.word	0x7fefffff
 80072f8:	0800ced1 	.word	0x0800ced1
 80072fc:	0800ced5 	.word	0x0800ced5
 8007300:	0800ced9 	.word	0x0800ced9
 8007304:	0800cedd 	.word	0x0800cedd
 8007308:	0800cee1 	.word	0x0800cee1
 800730c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800730e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007312:	4553      	cmp	r3, sl
 8007314:	bfa8      	it	ge
 8007316:	4653      	movge	r3, sl
 8007318:	2b00      	cmp	r3, #0
 800731a:	4699      	mov	r9, r3
 800731c:	dc36      	bgt.n	800738c <_printf_float+0x360>
 800731e:	f04f 0b00 	mov.w	fp, #0
 8007322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007326:	f104 021a 	add.w	r2, r4, #26
 800732a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800732c:	9306      	str	r3, [sp, #24]
 800732e:	eba3 0309 	sub.w	r3, r3, r9
 8007332:	455b      	cmp	r3, fp
 8007334:	dc31      	bgt.n	800739a <_printf_float+0x36e>
 8007336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007338:	459a      	cmp	sl, r3
 800733a:	dc3a      	bgt.n	80073b2 <_printf_float+0x386>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	07da      	lsls	r2, r3, #31
 8007340:	d437      	bmi.n	80073b2 <_printf_float+0x386>
 8007342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007344:	ebaa 0903 	sub.w	r9, sl, r3
 8007348:	9b06      	ldr	r3, [sp, #24]
 800734a:	ebaa 0303 	sub.w	r3, sl, r3
 800734e:	4599      	cmp	r9, r3
 8007350:	bfa8      	it	ge
 8007352:	4699      	movge	r9, r3
 8007354:	f1b9 0f00 	cmp.w	r9, #0
 8007358:	dc33      	bgt.n	80073c2 <_printf_float+0x396>
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007362:	f104 0b1a 	add.w	fp, r4, #26
 8007366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007368:	ebaa 0303 	sub.w	r3, sl, r3
 800736c:	eba3 0309 	sub.w	r3, r3, r9
 8007370:	4543      	cmp	r3, r8
 8007372:	f77f af79 	ble.w	8007268 <_printf_float+0x23c>
 8007376:	2301      	movs	r3, #1
 8007378:	465a      	mov	r2, fp
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	47b8      	blx	r7
 8007380:	3001      	adds	r0, #1
 8007382:	f43f aeae 	beq.w	80070e2 <_printf_float+0xb6>
 8007386:	f108 0801 	add.w	r8, r8, #1
 800738a:	e7ec      	b.n	8007366 <_printf_float+0x33a>
 800738c:	4642      	mov	r2, r8
 800738e:	4631      	mov	r1, r6
 8007390:	4628      	mov	r0, r5
 8007392:	47b8      	blx	r7
 8007394:	3001      	adds	r0, #1
 8007396:	d1c2      	bne.n	800731e <_printf_float+0x2f2>
 8007398:	e6a3      	b.n	80070e2 <_printf_float+0xb6>
 800739a:	2301      	movs	r3, #1
 800739c:	4631      	mov	r1, r6
 800739e:	4628      	mov	r0, r5
 80073a0:	9206      	str	r2, [sp, #24]
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	f43f ae9c 	beq.w	80070e2 <_printf_float+0xb6>
 80073aa:	9a06      	ldr	r2, [sp, #24]
 80073ac:	f10b 0b01 	add.w	fp, fp, #1
 80073b0:	e7bb      	b.n	800732a <_printf_float+0x2fe>
 80073b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b6:	4631      	mov	r1, r6
 80073b8:	4628      	mov	r0, r5
 80073ba:	47b8      	blx	r7
 80073bc:	3001      	adds	r0, #1
 80073be:	d1c0      	bne.n	8007342 <_printf_float+0x316>
 80073c0:	e68f      	b.n	80070e2 <_printf_float+0xb6>
 80073c2:	9a06      	ldr	r2, [sp, #24]
 80073c4:	464b      	mov	r3, r9
 80073c6:	4442      	add	r2, r8
 80073c8:	4631      	mov	r1, r6
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b8      	blx	r7
 80073ce:	3001      	adds	r0, #1
 80073d0:	d1c3      	bne.n	800735a <_printf_float+0x32e>
 80073d2:	e686      	b.n	80070e2 <_printf_float+0xb6>
 80073d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073d8:	f1ba 0f01 	cmp.w	sl, #1
 80073dc:	dc01      	bgt.n	80073e2 <_printf_float+0x3b6>
 80073de:	07db      	lsls	r3, r3, #31
 80073e0:	d536      	bpl.n	8007450 <_printf_float+0x424>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4642      	mov	r2, r8
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f ae78 	beq.w	80070e2 <_printf_float+0xb6>
 80073f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073f6:	4631      	mov	r1, r6
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	f43f ae70 	beq.w	80070e2 <_printf_float+0xb6>
 8007402:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007406:	2200      	movs	r2, #0
 8007408:	2300      	movs	r3, #0
 800740a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800740e:	f7f9 fb6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007412:	b9c0      	cbnz	r0, 8007446 <_printf_float+0x41a>
 8007414:	4653      	mov	r3, sl
 8007416:	f108 0201 	add.w	r2, r8, #1
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	d10c      	bne.n	800743e <_printf_float+0x412>
 8007424:	e65d      	b.n	80070e2 <_printf_float+0xb6>
 8007426:	2301      	movs	r3, #1
 8007428:	465a      	mov	r2, fp
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	f43f ae56 	beq.w	80070e2 <_printf_float+0xb6>
 8007436:	f108 0801 	add.w	r8, r8, #1
 800743a:	45d0      	cmp	r8, sl
 800743c:	dbf3      	blt.n	8007426 <_printf_float+0x3fa>
 800743e:	464b      	mov	r3, r9
 8007440:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007444:	e6df      	b.n	8007206 <_printf_float+0x1da>
 8007446:	f04f 0800 	mov.w	r8, #0
 800744a:	f104 0b1a 	add.w	fp, r4, #26
 800744e:	e7f4      	b.n	800743a <_printf_float+0x40e>
 8007450:	2301      	movs	r3, #1
 8007452:	4642      	mov	r2, r8
 8007454:	e7e1      	b.n	800741a <_printf_float+0x3ee>
 8007456:	2301      	movs	r3, #1
 8007458:	464a      	mov	r2, r9
 800745a:	4631      	mov	r1, r6
 800745c:	4628      	mov	r0, r5
 800745e:	47b8      	blx	r7
 8007460:	3001      	adds	r0, #1
 8007462:	f43f ae3e 	beq.w	80070e2 <_printf_float+0xb6>
 8007466:	f108 0801 	add.w	r8, r8, #1
 800746a:	68e3      	ldr	r3, [r4, #12]
 800746c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800746e:	1a5b      	subs	r3, r3, r1
 8007470:	4543      	cmp	r3, r8
 8007472:	dcf0      	bgt.n	8007456 <_printf_float+0x42a>
 8007474:	e6fc      	b.n	8007270 <_printf_float+0x244>
 8007476:	f04f 0800 	mov.w	r8, #0
 800747a:	f104 0919 	add.w	r9, r4, #25
 800747e:	e7f4      	b.n	800746a <_printf_float+0x43e>

08007480 <_printf_common>:
 8007480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007484:	4616      	mov	r6, r2
 8007486:	4698      	mov	r8, r3
 8007488:	688a      	ldr	r2, [r1, #8]
 800748a:	690b      	ldr	r3, [r1, #16]
 800748c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007490:	4293      	cmp	r3, r2
 8007492:	bfb8      	it	lt
 8007494:	4613      	movlt	r3, r2
 8007496:	6033      	str	r3, [r6, #0]
 8007498:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800749c:	4607      	mov	r7, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	b10a      	cbz	r2, 80074a6 <_printf_common+0x26>
 80074a2:	3301      	adds	r3, #1
 80074a4:	6033      	str	r3, [r6, #0]
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	0699      	lsls	r1, r3, #26
 80074aa:	bf42      	ittt	mi
 80074ac:	6833      	ldrmi	r3, [r6, #0]
 80074ae:	3302      	addmi	r3, #2
 80074b0:	6033      	strmi	r3, [r6, #0]
 80074b2:	6825      	ldr	r5, [r4, #0]
 80074b4:	f015 0506 	ands.w	r5, r5, #6
 80074b8:	d106      	bne.n	80074c8 <_printf_common+0x48>
 80074ba:	f104 0a19 	add.w	sl, r4, #25
 80074be:	68e3      	ldr	r3, [r4, #12]
 80074c0:	6832      	ldr	r2, [r6, #0]
 80074c2:	1a9b      	subs	r3, r3, r2
 80074c4:	42ab      	cmp	r3, r5
 80074c6:	dc26      	bgt.n	8007516 <_printf_common+0x96>
 80074c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074cc:	6822      	ldr	r2, [r4, #0]
 80074ce:	3b00      	subs	r3, #0
 80074d0:	bf18      	it	ne
 80074d2:	2301      	movne	r3, #1
 80074d4:	0692      	lsls	r2, r2, #26
 80074d6:	d42b      	bmi.n	8007530 <_printf_common+0xb0>
 80074d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074dc:	4641      	mov	r1, r8
 80074de:	4638      	mov	r0, r7
 80074e0:	47c8      	blx	r9
 80074e2:	3001      	adds	r0, #1
 80074e4:	d01e      	beq.n	8007524 <_printf_common+0xa4>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	6922      	ldr	r2, [r4, #16]
 80074ea:	f003 0306 	and.w	r3, r3, #6
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	bf02      	ittt	eq
 80074f2:	68e5      	ldreq	r5, [r4, #12]
 80074f4:	6833      	ldreq	r3, [r6, #0]
 80074f6:	1aed      	subeq	r5, r5, r3
 80074f8:	68a3      	ldr	r3, [r4, #8]
 80074fa:	bf0c      	ite	eq
 80074fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007500:	2500      	movne	r5, #0
 8007502:	4293      	cmp	r3, r2
 8007504:	bfc4      	itt	gt
 8007506:	1a9b      	subgt	r3, r3, r2
 8007508:	18ed      	addgt	r5, r5, r3
 800750a:	2600      	movs	r6, #0
 800750c:	341a      	adds	r4, #26
 800750e:	42b5      	cmp	r5, r6
 8007510:	d11a      	bne.n	8007548 <_printf_common+0xc8>
 8007512:	2000      	movs	r0, #0
 8007514:	e008      	b.n	8007528 <_printf_common+0xa8>
 8007516:	2301      	movs	r3, #1
 8007518:	4652      	mov	r2, sl
 800751a:	4641      	mov	r1, r8
 800751c:	4638      	mov	r0, r7
 800751e:	47c8      	blx	r9
 8007520:	3001      	adds	r0, #1
 8007522:	d103      	bne.n	800752c <_printf_common+0xac>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752c:	3501      	adds	r5, #1
 800752e:	e7c6      	b.n	80074be <_printf_common+0x3e>
 8007530:	18e1      	adds	r1, r4, r3
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	2030      	movs	r0, #48	@ 0x30
 8007536:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800753a:	4422      	add	r2, r4
 800753c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007540:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007544:	3302      	adds	r3, #2
 8007546:	e7c7      	b.n	80074d8 <_printf_common+0x58>
 8007548:	2301      	movs	r3, #1
 800754a:	4622      	mov	r2, r4
 800754c:	4641      	mov	r1, r8
 800754e:	4638      	mov	r0, r7
 8007550:	47c8      	blx	r9
 8007552:	3001      	adds	r0, #1
 8007554:	d0e6      	beq.n	8007524 <_printf_common+0xa4>
 8007556:	3601      	adds	r6, #1
 8007558:	e7d9      	b.n	800750e <_printf_common+0x8e>
	...

0800755c <_printf_i>:
 800755c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	7e0f      	ldrb	r7, [r1, #24]
 8007562:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007564:	2f78      	cmp	r7, #120	@ 0x78
 8007566:	4691      	mov	r9, r2
 8007568:	4680      	mov	r8, r0
 800756a:	460c      	mov	r4, r1
 800756c:	469a      	mov	sl, r3
 800756e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007572:	d807      	bhi.n	8007584 <_printf_i+0x28>
 8007574:	2f62      	cmp	r7, #98	@ 0x62
 8007576:	d80a      	bhi.n	800758e <_printf_i+0x32>
 8007578:	2f00      	cmp	r7, #0
 800757a:	f000 80d2 	beq.w	8007722 <_printf_i+0x1c6>
 800757e:	2f58      	cmp	r7, #88	@ 0x58
 8007580:	f000 80b9 	beq.w	80076f6 <_printf_i+0x19a>
 8007584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007588:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800758c:	e03a      	b.n	8007604 <_printf_i+0xa8>
 800758e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007592:	2b15      	cmp	r3, #21
 8007594:	d8f6      	bhi.n	8007584 <_printf_i+0x28>
 8007596:	a101      	add	r1, pc, #4	@ (adr r1, 800759c <_printf_i+0x40>)
 8007598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800759c:	080075f5 	.word	0x080075f5
 80075a0:	08007609 	.word	0x08007609
 80075a4:	08007585 	.word	0x08007585
 80075a8:	08007585 	.word	0x08007585
 80075ac:	08007585 	.word	0x08007585
 80075b0:	08007585 	.word	0x08007585
 80075b4:	08007609 	.word	0x08007609
 80075b8:	08007585 	.word	0x08007585
 80075bc:	08007585 	.word	0x08007585
 80075c0:	08007585 	.word	0x08007585
 80075c4:	08007585 	.word	0x08007585
 80075c8:	08007709 	.word	0x08007709
 80075cc:	08007633 	.word	0x08007633
 80075d0:	080076c3 	.word	0x080076c3
 80075d4:	08007585 	.word	0x08007585
 80075d8:	08007585 	.word	0x08007585
 80075dc:	0800772b 	.word	0x0800772b
 80075e0:	08007585 	.word	0x08007585
 80075e4:	08007633 	.word	0x08007633
 80075e8:	08007585 	.word	0x08007585
 80075ec:	08007585 	.word	0x08007585
 80075f0:	080076cb 	.word	0x080076cb
 80075f4:	6833      	ldr	r3, [r6, #0]
 80075f6:	1d1a      	adds	r2, r3, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6032      	str	r2, [r6, #0]
 80075fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007600:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007604:	2301      	movs	r3, #1
 8007606:	e09d      	b.n	8007744 <_printf_i+0x1e8>
 8007608:	6833      	ldr	r3, [r6, #0]
 800760a:	6820      	ldr	r0, [r4, #0]
 800760c:	1d19      	adds	r1, r3, #4
 800760e:	6031      	str	r1, [r6, #0]
 8007610:	0606      	lsls	r6, r0, #24
 8007612:	d501      	bpl.n	8007618 <_printf_i+0xbc>
 8007614:	681d      	ldr	r5, [r3, #0]
 8007616:	e003      	b.n	8007620 <_printf_i+0xc4>
 8007618:	0645      	lsls	r5, r0, #25
 800761a:	d5fb      	bpl.n	8007614 <_printf_i+0xb8>
 800761c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007620:	2d00      	cmp	r5, #0
 8007622:	da03      	bge.n	800762c <_printf_i+0xd0>
 8007624:	232d      	movs	r3, #45	@ 0x2d
 8007626:	426d      	negs	r5, r5
 8007628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800762c:	4859      	ldr	r0, [pc, #356]	@ (8007794 <_printf_i+0x238>)
 800762e:	230a      	movs	r3, #10
 8007630:	e011      	b.n	8007656 <_printf_i+0xfa>
 8007632:	6821      	ldr	r1, [r4, #0]
 8007634:	6833      	ldr	r3, [r6, #0]
 8007636:	0608      	lsls	r0, r1, #24
 8007638:	f853 5b04 	ldr.w	r5, [r3], #4
 800763c:	d402      	bmi.n	8007644 <_printf_i+0xe8>
 800763e:	0649      	lsls	r1, r1, #25
 8007640:	bf48      	it	mi
 8007642:	b2ad      	uxthmi	r5, r5
 8007644:	2f6f      	cmp	r7, #111	@ 0x6f
 8007646:	4853      	ldr	r0, [pc, #332]	@ (8007794 <_printf_i+0x238>)
 8007648:	6033      	str	r3, [r6, #0]
 800764a:	bf14      	ite	ne
 800764c:	230a      	movne	r3, #10
 800764e:	2308      	moveq	r3, #8
 8007650:	2100      	movs	r1, #0
 8007652:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007656:	6866      	ldr	r6, [r4, #4]
 8007658:	60a6      	str	r6, [r4, #8]
 800765a:	2e00      	cmp	r6, #0
 800765c:	bfa2      	ittt	ge
 800765e:	6821      	ldrge	r1, [r4, #0]
 8007660:	f021 0104 	bicge.w	r1, r1, #4
 8007664:	6021      	strge	r1, [r4, #0]
 8007666:	b90d      	cbnz	r5, 800766c <_printf_i+0x110>
 8007668:	2e00      	cmp	r6, #0
 800766a:	d04b      	beq.n	8007704 <_printf_i+0x1a8>
 800766c:	4616      	mov	r6, r2
 800766e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007672:	fb03 5711 	mls	r7, r3, r1, r5
 8007676:	5dc7      	ldrb	r7, [r0, r7]
 8007678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800767c:	462f      	mov	r7, r5
 800767e:	42bb      	cmp	r3, r7
 8007680:	460d      	mov	r5, r1
 8007682:	d9f4      	bls.n	800766e <_printf_i+0x112>
 8007684:	2b08      	cmp	r3, #8
 8007686:	d10b      	bne.n	80076a0 <_printf_i+0x144>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	07df      	lsls	r7, r3, #31
 800768c:	d508      	bpl.n	80076a0 <_printf_i+0x144>
 800768e:	6923      	ldr	r3, [r4, #16]
 8007690:	6861      	ldr	r1, [r4, #4]
 8007692:	4299      	cmp	r1, r3
 8007694:	bfde      	ittt	le
 8007696:	2330      	movle	r3, #48	@ 0x30
 8007698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800769c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076a0:	1b92      	subs	r2, r2, r6
 80076a2:	6122      	str	r2, [r4, #16]
 80076a4:	f8cd a000 	str.w	sl, [sp]
 80076a8:	464b      	mov	r3, r9
 80076aa:	aa03      	add	r2, sp, #12
 80076ac:	4621      	mov	r1, r4
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7ff fee6 	bl	8007480 <_printf_common>
 80076b4:	3001      	adds	r0, #1
 80076b6:	d14a      	bne.n	800774e <_printf_i+0x1f2>
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	b004      	add	sp, #16
 80076be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	f043 0320 	orr.w	r3, r3, #32
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	4833      	ldr	r0, [pc, #204]	@ (8007798 <_printf_i+0x23c>)
 80076cc:	2778      	movs	r7, #120	@ 0x78
 80076ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	6831      	ldr	r1, [r6, #0]
 80076d6:	061f      	lsls	r7, r3, #24
 80076d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80076dc:	d402      	bmi.n	80076e4 <_printf_i+0x188>
 80076de:	065f      	lsls	r7, r3, #25
 80076e0:	bf48      	it	mi
 80076e2:	b2ad      	uxthmi	r5, r5
 80076e4:	6031      	str	r1, [r6, #0]
 80076e6:	07d9      	lsls	r1, r3, #31
 80076e8:	bf44      	itt	mi
 80076ea:	f043 0320 	orrmi.w	r3, r3, #32
 80076ee:	6023      	strmi	r3, [r4, #0]
 80076f0:	b11d      	cbz	r5, 80076fa <_printf_i+0x19e>
 80076f2:	2310      	movs	r3, #16
 80076f4:	e7ac      	b.n	8007650 <_printf_i+0xf4>
 80076f6:	4827      	ldr	r0, [pc, #156]	@ (8007794 <_printf_i+0x238>)
 80076f8:	e7e9      	b.n	80076ce <_printf_i+0x172>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	f023 0320 	bic.w	r3, r3, #32
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	e7f6      	b.n	80076f2 <_printf_i+0x196>
 8007704:	4616      	mov	r6, r2
 8007706:	e7bd      	b.n	8007684 <_printf_i+0x128>
 8007708:	6833      	ldr	r3, [r6, #0]
 800770a:	6825      	ldr	r5, [r4, #0]
 800770c:	6961      	ldr	r1, [r4, #20]
 800770e:	1d18      	adds	r0, r3, #4
 8007710:	6030      	str	r0, [r6, #0]
 8007712:	062e      	lsls	r6, r5, #24
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	d501      	bpl.n	800771c <_printf_i+0x1c0>
 8007718:	6019      	str	r1, [r3, #0]
 800771a:	e002      	b.n	8007722 <_printf_i+0x1c6>
 800771c:	0668      	lsls	r0, r5, #25
 800771e:	d5fb      	bpl.n	8007718 <_printf_i+0x1bc>
 8007720:	8019      	strh	r1, [r3, #0]
 8007722:	2300      	movs	r3, #0
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	4616      	mov	r6, r2
 8007728:	e7bc      	b.n	80076a4 <_printf_i+0x148>
 800772a:	6833      	ldr	r3, [r6, #0]
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	6032      	str	r2, [r6, #0]
 8007730:	681e      	ldr	r6, [r3, #0]
 8007732:	6862      	ldr	r2, [r4, #4]
 8007734:	2100      	movs	r1, #0
 8007736:	4630      	mov	r0, r6
 8007738:	f7f8 fd5a 	bl	80001f0 <memchr>
 800773c:	b108      	cbz	r0, 8007742 <_printf_i+0x1e6>
 800773e:	1b80      	subs	r0, r0, r6
 8007740:	6060      	str	r0, [r4, #4]
 8007742:	6863      	ldr	r3, [r4, #4]
 8007744:	6123      	str	r3, [r4, #16]
 8007746:	2300      	movs	r3, #0
 8007748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800774c:	e7aa      	b.n	80076a4 <_printf_i+0x148>
 800774e:	6923      	ldr	r3, [r4, #16]
 8007750:	4632      	mov	r2, r6
 8007752:	4649      	mov	r1, r9
 8007754:	4640      	mov	r0, r8
 8007756:	47d0      	blx	sl
 8007758:	3001      	adds	r0, #1
 800775a:	d0ad      	beq.n	80076b8 <_printf_i+0x15c>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	079b      	lsls	r3, r3, #30
 8007760:	d413      	bmi.n	800778a <_printf_i+0x22e>
 8007762:	68e0      	ldr	r0, [r4, #12]
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	4298      	cmp	r0, r3
 8007768:	bfb8      	it	lt
 800776a:	4618      	movlt	r0, r3
 800776c:	e7a6      	b.n	80076bc <_printf_i+0x160>
 800776e:	2301      	movs	r3, #1
 8007770:	4632      	mov	r2, r6
 8007772:	4649      	mov	r1, r9
 8007774:	4640      	mov	r0, r8
 8007776:	47d0      	blx	sl
 8007778:	3001      	adds	r0, #1
 800777a:	d09d      	beq.n	80076b8 <_printf_i+0x15c>
 800777c:	3501      	adds	r5, #1
 800777e:	68e3      	ldr	r3, [r4, #12]
 8007780:	9903      	ldr	r1, [sp, #12]
 8007782:	1a5b      	subs	r3, r3, r1
 8007784:	42ab      	cmp	r3, r5
 8007786:	dcf2      	bgt.n	800776e <_printf_i+0x212>
 8007788:	e7eb      	b.n	8007762 <_printf_i+0x206>
 800778a:	2500      	movs	r5, #0
 800778c:	f104 0619 	add.w	r6, r4, #25
 8007790:	e7f5      	b.n	800777e <_printf_i+0x222>
 8007792:	bf00      	nop
 8007794:	0800cee3 	.word	0x0800cee3
 8007798:	0800cef4 	.word	0x0800cef4

0800779c <_scanf_float>:
 800779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a0:	b087      	sub	sp, #28
 80077a2:	4617      	mov	r7, r2
 80077a4:	9303      	str	r3, [sp, #12]
 80077a6:	688b      	ldr	r3, [r1, #8]
 80077a8:	1e5a      	subs	r2, r3, #1
 80077aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80077ae:	bf81      	itttt	hi
 80077b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80077b4:	eb03 0b05 	addhi.w	fp, r3, r5
 80077b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80077bc:	608b      	strhi	r3, [r1, #8]
 80077be:	680b      	ldr	r3, [r1, #0]
 80077c0:	460a      	mov	r2, r1
 80077c2:	f04f 0500 	mov.w	r5, #0
 80077c6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80077ca:	f842 3b1c 	str.w	r3, [r2], #28
 80077ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80077d2:	4680      	mov	r8, r0
 80077d4:	460c      	mov	r4, r1
 80077d6:	bf98      	it	ls
 80077d8:	f04f 0b00 	movls.w	fp, #0
 80077dc:	9201      	str	r2, [sp, #4]
 80077de:	4616      	mov	r6, r2
 80077e0:	46aa      	mov	sl, r5
 80077e2:	46a9      	mov	r9, r5
 80077e4:	9502      	str	r5, [sp, #8]
 80077e6:	68a2      	ldr	r2, [r4, #8]
 80077e8:	b152      	cbz	r2, 8007800 <_scanf_float+0x64>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b4e      	cmp	r3, #78	@ 0x4e
 80077f0:	d864      	bhi.n	80078bc <_scanf_float+0x120>
 80077f2:	2b40      	cmp	r3, #64	@ 0x40
 80077f4:	d83c      	bhi.n	8007870 <_scanf_float+0xd4>
 80077f6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80077fa:	b2c8      	uxtb	r0, r1
 80077fc:	280e      	cmp	r0, #14
 80077fe:	d93a      	bls.n	8007876 <_scanf_float+0xda>
 8007800:	f1b9 0f00 	cmp.w	r9, #0
 8007804:	d003      	beq.n	800780e <_scanf_float+0x72>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007812:	f1ba 0f01 	cmp.w	sl, #1
 8007816:	f200 8117 	bhi.w	8007a48 <_scanf_float+0x2ac>
 800781a:	9b01      	ldr	r3, [sp, #4]
 800781c:	429e      	cmp	r6, r3
 800781e:	f200 8108 	bhi.w	8007a32 <_scanf_float+0x296>
 8007822:	2001      	movs	r0, #1
 8007824:	b007      	add	sp, #28
 8007826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800782e:	2a0d      	cmp	r2, #13
 8007830:	d8e6      	bhi.n	8007800 <_scanf_float+0x64>
 8007832:	a101      	add	r1, pc, #4	@ (adr r1, 8007838 <_scanf_float+0x9c>)
 8007834:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007838:	0800797f 	.word	0x0800797f
 800783c:	08007801 	.word	0x08007801
 8007840:	08007801 	.word	0x08007801
 8007844:	08007801 	.word	0x08007801
 8007848:	080079df 	.word	0x080079df
 800784c:	080079b7 	.word	0x080079b7
 8007850:	08007801 	.word	0x08007801
 8007854:	08007801 	.word	0x08007801
 8007858:	0800798d 	.word	0x0800798d
 800785c:	08007801 	.word	0x08007801
 8007860:	08007801 	.word	0x08007801
 8007864:	08007801 	.word	0x08007801
 8007868:	08007801 	.word	0x08007801
 800786c:	08007945 	.word	0x08007945
 8007870:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007874:	e7db      	b.n	800782e <_scanf_float+0x92>
 8007876:	290e      	cmp	r1, #14
 8007878:	d8c2      	bhi.n	8007800 <_scanf_float+0x64>
 800787a:	a001      	add	r0, pc, #4	@ (adr r0, 8007880 <_scanf_float+0xe4>)
 800787c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007880:	08007935 	.word	0x08007935
 8007884:	08007801 	.word	0x08007801
 8007888:	08007935 	.word	0x08007935
 800788c:	080079cb 	.word	0x080079cb
 8007890:	08007801 	.word	0x08007801
 8007894:	080078dd 	.word	0x080078dd
 8007898:	0800791b 	.word	0x0800791b
 800789c:	0800791b 	.word	0x0800791b
 80078a0:	0800791b 	.word	0x0800791b
 80078a4:	0800791b 	.word	0x0800791b
 80078a8:	0800791b 	.word	0x0800791b
 80078ac:	0800791b 	.word	0x0800791b
 80078b0:	0800791b 	.word	0x0800791b
 80078b4:	0800791b 	.word	0x0800791b
 80078b8:	0800791b 	.word	0x0800791b
 80078bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80078be:	d809      	bhi.n	80078d4 <_scanf_float+0x138>
 80078c0:	2b60      	cmp	r3, #96	@ 0x60
 80078c2:	d8b2      	bhi.n	800782a <_scanf_float+0x8e>
 80078c4:	2b54      	cmp	r3, #84	@ 0x54
 80078c6:	d07b      	beq.n	80079c0 <_scanf_float+0x224>
 80078c8:	2b59      	cmp	r3, #89	@ 0x59
 80078ca:	d199      	bne.n	8007800 <_scanf_float+0x64>
 80078cc:	2d07      	cmp	r5, #7
 80078ce:	d197      	bne.n	8007800 <_scanf_float+0x64>
 80078d0:	2508      	movs	r5, #8
 80078d2:	e02c      	b.n	800792e <_scanf_float+0x192>
 80078d4:	2b74      	cmp	r3, #116	@ 0x74
 80078d6:	d073      	beq.n	80079c0 <_scanf_float+0x224>
 80078d8:	2b79      	cmp	r3, #121	@ 0x79
 80078da:	e7f6      	b.n	80078ca <_scanf_float+0x12e>
 80078dc:	6821      	ldr	r1, [r4, #0]
 80078de:	05c8      	lsls	r0, r1, #23
 80078e0:	d51b      	bpl.n	800791a <_scanf_float+0x17e>
 80078e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80078e6:	6021      	str	r1, [r4, #0]
 80078e8:	f109 0901 	add.w	r9, r9, #1
 80078ec:	f1bb 0f00 	cmp.w	fp, #0
 80078f0:	d003      	beq.n	80078fa <_scanf_float+0x15e>
 80078f2:	3201      	adds	r2, #1
 80078f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078f8:	60a2      	str	r2, [r4, #8]
 80078fa:	68a3      	ldr	r3, [r4, #8]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	60a3      	str	r3, [r4, #8]
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	3301      	adds	r3, #1
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	3b01      	subs	r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	607b      	str	r3, [r7, #4]
 800790e:	f340 8087 	ble.w	8007a20 <_scanf_float+0x284>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	3301      	adds	r3, #1
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	e765      	b.n	80077e6 <_scanf_float+0x4a>
 800791a:	eb1a 0105 	adds.w	r1, sl, r5
 800791e:	f47f af6f 	bne.w	8007800 <_scanf_float+0x64>
 8007922:	6822      	ldr	r2, [r4, #0]
 8007924:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007928:	6022      	str	r2, [r4, #0]
 800792a:	460d      	mov	r5, r1
 800792c:	468a      	mov	sl, r1
 800792e:	f806 3b01 	strb.w	r3, [r6], #1
 8007932:	e7e2      	b.n	80078fa <_scanf_float+0x15e>
 8007934:	6822      	ldr	r2, [r4, #0]
 8007936:	0610      	lsls	r0, r2, #24
 8007938:	f57f af62 	bpl.w	8007800 <_scanf_float+0x64>
 800793c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007940:	6022      	str	r2, [r4, #0]
 8007942:	e7f4      	b.n	800792e <_scanf_float+0x192>
 8007944:	f1ba 0f00 	cmp.w	sl, #0
 8007948:	d10e      	bne.n	8007968 <_scanf_float+0x1cc>
 800794a:	f1b9 0f00 	cmp.w	r9, #0
 800794e:	d10e      	bne.n	800796e <_scanf_float+0x1d2>
 8007950:	6822      	ldr	r2, [r4, #0]
 8007952:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007956:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800795a:	d108      	bne.n	800796e <_scanf_float+0x1d2>
 800795c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007960:	6022      	str	r2, [r4, #0]
 8007962:	f04f 0a01 	mov.w	sl, #1
 8007966:	e7e2      	b.n	800792e <_scanf_float+0x192>
 8007968:	f1ba 0f02 	cmp.w	sl, #2
 800796c:	d055      	beq.n	8007a1a <_scanf_float+0x27e>
 800796e:	2d01      	cmp	r5, #1
 8007970:	d002      	beq.n	8007978 <_scanf_float+0x1dc>
 8007972:	2d04      	cmp	r5, #4
 8007974:	f47f af44 	bne.w	8007800 <_scanf_float+0x64>
 8007978:	3501      	adds	r5, #1
 800797a:	b2ed      	uxtb	r5, r5
 800797c:	e7d7      	b.n	800792e <_scanf_float+0x192>
 800797e:	f1ba 0f01 	cmp.w	sl, #1
 8007982:	f47f af3d 	bne.w	8007800 <_scanf_float+0x64>
 8007986:	f04f 0a02 	mov.w	sl, #2
 800798a:	e7d0      	b.n	800792e <_scanf_float+0x192>
 800798c:	b97d      	cbnz	r5, 80079ae <_scanf_float+0x212>
 800798e:	f1b9 0f00 	cmp.w	r9, #0
 8007992:	f47f af38 	bne.w	8007806 <_scanf_float+0x6a>
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800799c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80079a0:	f040 8108 	bne.w	8007bb4 <_scanf_float+0x418>
 80079a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	2501      	movs	r5, #1
 80079ac:	e7bf      	b.n	800792e <_scanf_float+0x192>
 80079ae:	2d03      	cmp	r5, #3
 80079b0:	d0e2      	beq.n	8007978 <_scanf_float+0x1dc>
 80079b2:	2d05      	cmp	r5, #5
 80079b4:	e7de      	b.n	8007974 <_scanf_float+0x1d8>
 80079b6:	2d02      	cmp	r5, #2
 80079b8:	f47f af22 	bne.w	8007800 <_scanf_float+0x64>
 80079bc:	2503      	movs	r5, #3
 80079be:	e7b6      	b.n	800792e <_scanf_float+0x192>
 80079c0:	2d06      	cmp	r5, #6
 80079c2:	f47f af1d 	bne.w	8007800 <_scanf_float+0x64>
 80079c6:	2507      	movs	r5, #7
 80079c8:	e7b1      	b.n	800792e <_scanf_float+0x192>
 80079ca:	6822      	ldr	r2, [r4, #0]
 80079cc:	0591      	lsls	r1, r2, #22
 80079ce:	f57f af17 	bpl.w	8007800 <_scanf_float+0x64>
 80079d2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80079d6:	6022      	str	r2, [r4, #0]
 80079d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80079dc:	e7a7      	b.n	800792e <_scanf_float+0x192>
 80079de:	6822      	ldr	r2, [r4, #0]
 80079e0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80079e4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80079e8:	d006      	beq.n	80079f8 <_scanf_float+0x25c>
 80079ea:	0550      	lsls	r0, r2, #21
 80079ec:	f57f af08 	bpl.w	8007800 <_scanf_float+0x64>
 80079f0:	f1b9 0f00 	cmp.w	r9, #0
 80079f4:	f000 80de 	beq.w	8007bb4 <_scanf_float+0x418>
 80079f8:	0591      	lsls	r1, r2, #22
 80079fa:	bf58      	it	pl
 80079fc:	9902      	ldrpl	r1, [sp, #8]
 80079fe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a02:	bf58      	it	pl
 8007a04:	eba9 0101 	subpl.w	r1, r9, r1
 8007a08:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007a0c:	bf58      	it	pl
 8007a0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a12:	6022      	str	r2, [r4, #0]
 8007a14:	f04f 0900 	mov.w	r9, #0
 8007a18:	e789      	b.n	800792e <_scanf_float+0x192>
 8007a1a:	f04f 0a03 	mov.w	sl, #3
 8007a1e:	e786      	b.n	800792e <_scanf_float+0x192>
 8007a20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007a24:	4639      	mov	r1, r7
 8007a26:	4640      	mov	r0, r8
 8007a28:	4798      	blx	r3
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	f43f aedb 	beq.w	80077e6 <_scanf_float+0x4a>
 8007a30:	e6e6      	b.n	8007800 <_scanf_float+0x64>
 8007a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a3a:	463a      	mov	r2, r7
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	4798      	blx	r3
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	e6e8      	b.n	800781a <_scanf_float+0x7e>
 8007a48:	1e6b      	subs	r3, r5, #1
 8007a4a:	2b06      	cmp	r3, #6
 8007a4c:	d824      	bhi.n	8007a98 <_scanf_float+0x2fc>
 8007a4e:	2d02      	cmp	r5, #2
 8007a50:	d836      	bhi.n	8007ac0 <_scanf_float+0x324>
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	429e      	cmp	r6, r3
 8007a56:	f67f aee4 	bls.w	8007822 <_scanf_float+0x86>
 8007a5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a62:	463a      	mov	r2, r7
 8007a64:	4640      	mov	r0, r8
 8007a66:	4798      	blx	r3
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	6123      	str	r3, [r4, #16]
 8007a6e:	e7f0      	b.n	8007a52 <_scanf_float+0x2b6>
 8007a70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a74:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007a78:	463a      	mov	r2, r7
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	4798      	blx	r3
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a88:	fa5f fa8a 	uxtb.w	sl, sl
 8007a8c:	f1ba 0f02 	cmp.w	sl, #2
 8007a90:	d1ee      	bne.n	8007a70 <_scanf_float+0x2d4>
 8007a92:	3d03      	subs	r5, #3
 8007a94:	b2ed      	uxtb	r5, r5
 8007a96:	1b76      	subs	r6, r6, r5
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	05da      	lsls	r2, r3, #23
 8007a9c:	d530      	bpl.n	8007b00 <_scanf_float+0x364>
 8007a9e:	055b      	lsls	r3, r3, #21
 8007aa0:	d511      	bpl.n	8007ac6 <_scanf_float+0x32a>
 8007aa2:	9b01      	ldr	r3, [sp, #4]
 8007aa4:	429e      	cmp	r6, r3
 8007aa6:	f67f aebc 	bls.w	8007822 <_scanf_float+0x86>
 8007aaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007aae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ab2:	463a      	mov	r2, r7
 8007ab4:	4640      	mov	r0, r8
 8007ab6:	4798      	blx	r3
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	6123      	str	r3, [r4, #16]
 8007abe:	e7f0      	b.n	8007aa2 <_scanf_float+0x306>
 8007ac0:	46aa      	mov	sl, r5
 8007ac2:	46b3      	mov	fp, r6
 8007ac4:	e7de      	b.n	8007a84 <_scanf_float+0x2e8>
 8007ac6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	2965      	cmp	r1, #101	@ 0x65
 8007ace:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ad2:	f106 35ff 	add.w	r5, r6, #4294967295
 8007ad6:	6123      	str	r3, [r4, #16]
 8007ad8:	d00c      	beq.n	8007af4 <_scanf_float+0x358>
 8007ada:	2945      	cmp	r1, #69	@ 0x45
 8007adc:	d00a      	beq.n	8007af4 <_scanf_float+0x358>
 8007ade:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ae2:	463a      	mov	r2, r7
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4798      	blx	r3
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	1eb5      	subs	r5, r6, #2
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007af8:	463a      	mov	r2, r7
 8007afa:	4640      	mov	r0, r8
 8007afc:	4798      	blx	r3
 8007afe:	462e      	mov	r6, r5
 8007b00:	6822      	ldr	r2, [r4, #0]
 8007b02:	f012 0210 	ands.w	r2, r2, #16
 8007b06:	d001      	beq.n	8007b0c <_scanf_float+0x370>
 8007b08:	2000      	movs	r0, #0
 8007b0a:	e68b      	b.n	8007824 <_scanf_float+0x88>
 8007b0c:	7032      	strb	r2, [r6, #0]
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b18:	d11c      	bne.n	8007b54 <_scanf_float+0x3b8>
 8007b1a:	9b02      	ldr	r3, [sp, #8]
 8007b1c:	454b      	cmp	r3, r9
 8007b1e:	eba3 0209 	sub.w	r2, r3, r9
 8007b22:	d123      	bne.n	8007b6c <_scanf_float+0x3d0>
 8007b24:	9901      	ldr	r1, [sp, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	4640      	mov	r0, r8
 8007b2a:	f002 fc05 	bl	800a338 <_strtod_r>
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	6821      	ldr	r1, [r4, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f011 0f02 	tst.w	r1, #2
 8007b38:	ec57 6b10 	vmov	r6, r7, d0
 8007b3c:	f103 0204 	add.w	r2, r3, #4
 8007b40:	d01f      	beq.n	8007b82 <_scanf_float+0x3e6>
 8007b42:	9903      	ldr	r1, [sp, #12]
 8007b44:	600a      	str	r2, [r1, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	e9c3 6700 	strd	r6, r7, [r3]
 8007b4c:	68e3      	ldr	r3, [r4, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60e3      	str	r3, [r4, #12]
 8007b52:	e7d9      	b.n	8007b08 <_scanf_float+0x36c>
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0e4      	beq.n	8007b24 <_scanf_float+0x388>
 8007b5a:	9905      	ldr	r1, [sp, #20]
 8007b5c:	230a      	movs	r3, #10
 8007b5e:	3101      	adds	r1, #1
 8007b60:	4640      	mov	r0, r8
 8007b62:	f7ff f9b7 	bl	8006ed4 <_strtol_r>
 8007b66:	9b04      	ldr	r3, [sp, #16]
 8007b68:	9e05      	ldr	r6, [sp, #20]
 8007b6a:	1ac2      	subs	r2, r0, r3
 8007b6c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007b70:	429e      	cmp	r6, r3
 8007b72:	bf28      	it	cs
 8007b74:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007b78:	4910      	ldr	r1, [pc, #64]	@ (8007bbc <_scanf_float+0x420>)
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f000 f8e4 	bl	8007d48 <siprintf>
 8007b80:	e7d0      	b.n	8007b24 <_scanf_float+0x388>
 8007b82:	f011 0f04 	tst.w	r1, #4
 8007b86:	9903      	ldr	r1, [sp, #12]
 8007b88:	600a      	str	r2, [r1, #0]
 8007b8a:	d1dc      	bne.n	8007b46 <_scanf_float+0x3aa>
 8007b8c:	681d      	ldr	r5, [r3, #0]
 8007b8e:	4632      	mov	r2, r6
 8007b90:	463b      	mov	r3, r7
 8007b92:	4630      	mov	r0, r6
 8007b94:	4639      	mov	r1, r7
 8007b96:	f7f8 ffd9 	bl	8000b4c <__aeabi_dcmpun>
 8007b9a:	b128      	cbz	r0, 8007ba8 <_scanf_float+0x40c>
 8007b9c:	4808      	ldr	r0, [pc, #32]	@ (8007bc0 <_scanf_float+0x424>)
 8007b9e:	f000 f9c5 	bl	8007f2c <nanf>
 8007ba2:	ed85 0a00 	vstr	s0, [r5]
 8007ba6:	e7d1      	b.n	8007b4c <_scanf_float+0x3b0>
 8007ba8:	4630      	mov	r0, r6
 8007baa:	4639      	mov	r1, r7
 8007bac:	f7f9 f82c 	bl	8000c08 <__aeabi_d2f>
 8007bb0:	6028      	str	r0, [r5, #0]
 8007bb2:	e7cb      	b.n	8007b4c <_scanf_float+0x3b0>
 8007bb4:	f04f 0900 	mov.w	r9, #0
 8007bb8:	e629      	b.n	800780e <_scanf_float+0x72>
 8007bba:	bf00      	nop
 8007bbc:	0800cf05 	.word	0x0800cf05
 8007bc0:	0800d19c 	.word	0x0800d19c

08007bc4 <std>:
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	4604      	mov	r4, r0
 8007bca:	e9c0 3300 	strd	r3, r3, [r0]
 8007bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bd2:	6083      	str	r3, [r0, #8]
 8007bd4:	8181      	strh	r1, [r0, #12]
 8007bd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bd8:	81c2      	strh	r2, [r0, #14]
 8007bda:	6183      	str	r3, [r0, #24]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	2208      	movs	r2, #8
 8007be0:	305c      	adds	r0, #92	@ 0x5c
 8007be2:	f000 f914 	bl	8007e0e <memset>
 8007be6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c1c <std+0x58>)
 8007be8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bea:	4b0d      	ldr	r3, [pc, #52]	@ (8007c20 <std+0x5c>)
 8007bec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bee:	4b0d      	ldr	r3, [pc, #52]	@ (8007c24 <std+0x60>)
 8007bf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c28 <std+0x64>)
 8007bf4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c2c <std+0x68>)
 8007bf8:	6224      	str	r4, [r4, #32]
 8007bfa:	429c      	cmp	r4, r3
 8007bfc:	d006      	beq.n	8007c0c <std+0x48>
 8007bfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c02:	4294      	cmp	r4, r2
 8007c04:	d002      	beq.n	8007c0c <std+0x48>
 8007c06:	33d0      	adds	r3, #208	@ 0xd0
 8007c08:	429c      	cmp	r4, r3
 8007c0a:	d105      	bne.n	8007c18 <std+0x54>
 8007c0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c14:	f000 b978 	b.w	8007f08 <__retarget_lock_init_recursive>
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	bf00      	nop
 8007c1c:	08007d89 	.word	0x08007d89
 8007c20:	08007dab 	.word	0x08007dab
 8007c24:	08007de3 	.word	0x08007de3
 8007c28:	08007e07 	.word	0x08007e07
 8007c2c:	20000de8 	.word	0x20000de8

08007c30 <stdio_exit_handler>:
 8007c30:	4a02      	ldr	r2, [pc, #8]	@ (8007c3c <stdio_exit_handler+0xc>)
 8007c32:	4903      	ldr	r1, [pc, #12]	@ (8007c40 <stdio_exit_handler+0x10>)
 8007c34:	4803      	ldr	r0, [pc, #12]	@ (8007c44 <stdio_exit_handler+0x14>)
 8007c36:	f000 b869 	b.w	8007d0c <_fwalk_sglue>
 8007c3a:	bf00      	nop
 8007c3c:	200002f4 	.word	0x200002f4
 8007c40:	0800a6fd 	.word	0x0800a6fd
 8007c44:	20000304 	.word	0x20000304

08007c48 <cleanup_stdio>:
 8007c48:	6841      	ldr	r1, [r0, #4]
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c7c <cleanup_stdio+0x34>)
 8007c4c:	4299      	cmp	r1, r3
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	4604      	mov	r4, r0
 8007c52:	d001      	beq.n	8007c58 <cleanup_stdio+0x10>
 8007c54:	f002 fd52 	bl	800a6fc <_fflush_r>
 8007c58:	68a1      	ldr	r1, [r4, #8]
 8007c5a:	4b09      	ldr	r3, [pc, #36]	@ (8007c80 <cleanup_stdio+0x38>)
 8007c5c:	4299      	cmp	r1, r3
 8007c5e:	d002      	beq.n	8007c66 <cleanup_stdio+0x1e>
 8007c60:	4620      	mov	r0, r4
 8007c62:	f002 fd4b 	bl	800a6fc <_fflush_r>
 8007c66:	68e1      	ldr	r1, [r4, #12]
 8007c68:	4b06      	ldr	r3, [pc, #24]	@ (8007c84 <cleanup_stdio+0x3c>)
 8007c6a:	4299      	cmp	r1, r3
 8007c6c:	d004      	beq.n	8007c78 <cleanup_stdio+0x30>
 8007c6e:	4620      	mov	r0, r4
 8007c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c74:	f002 bd42 	b.w	800a6fc <_fflush_r>
 8007c78:	bd10      	pop	{r4, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000de8 	.word	0x20000de8
 8007c80:	20000e50 	.word	0x20000e50
 8007c84:	20000eb8 	.word	0x20000eb8

08007c88 <global_stdio_init.part.0>:
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb8 <global_stdio_init.part.0+0x30>)
 8007c8c:	4c0b      	ldr	r4, [pc, #44]	@ (8007cbc <global_stdio_init.part.0+0x34>)
 8007c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc0 <global_stdio_init.part.0+0x38>)
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	4620      	mov	r0, r4
 8007c94:	2200      	movs	r2, #0
 8007c96:	2104      	movs	r1, #4
 8007c98:	f7ff ff94 	bl	8007bc4 <std>
 8007c9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	2109      	movs	r1, #9
 8007ca4:	f7ff ff8e 	bl	8007bc4 <std>
 8007ca8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007cac:	2202      	movs	r2, #2
 8007cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb2:	2112      	movs	r1, #18
 8007cb4:	f7ff bf86 	b.w	8007bc4 <std>
 8007cb8:	20000f20 	.word	0x20000f20
 8007cbc:	20000de8 	.word	0x20000de8
 8007cc0:	08007c31 	.word	0x08007c31

08007cc4 <__sfp_lock_acquire>:
 8007cc4:	4801      	ldr	r0, [pc, #4]	@ (8007ccc <__sfp_lock_acquire+0x8>)
 8007cc6:	f000 b920 	b.w	8007f0a <__retarget_lock_acquire_recursive>
 8007cca:	bf00      	nop
 8007ccc:	20000f29 	.word	0x20000f29

08007cd0 <__sfp_lock_release>:
 8007cd0:	4801      	ldr	r0, [pc, #4]	@ (8007cd8 <__sfp_lock_release+0x8>)
 8007cd2:	f000 b91b 	b.w	8007f0c <__retarget_lock_release_recursive>
 8007cd6:	bf00      	nop
 8007cd8:	20000f29 	.word	0x20000f29

08007cdc <__sinit>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	4604      	mov	r4, r0
 8007ce0:	f7ff fff0 	bl	8007cc4 <__sfp_lock_acquire>
 8007ce4:	6a23      	ldr	r3, [r4, #32]
 8007ce6:	b11b      	cbz	r3, 8007cf0 <__sinit+0x14>
 8007ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cec:	f7ff bff0 	b.w	8007cd0 <__sfp_lock_release>
 8007cf0:	4b04      	ldr	r3, [pc, #16]	@ (8007d04 <__sinit+0x28>)
 8007cf2:	6223      	str	r3, [r4, #32]
 8007cf4:	4b04      	ldr	r3, [pc, #16]	@ (8007d08 <__sinit+0x2c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1f5      	bne.n	8007ce8 <__sinit+0xc>
 8007cfc:	f7ff ffc4 	bl	8007c88 <global_stdio_init.part.0>
 8007d00:	e7f2      	b.n	8007ce8 <__sinit+0xc>
 8007d02:	bf00      	nop
 8007d04:	08007c49 	.word	0x08007c49
 8007d08:	20000f20 	.word	0x20000f20

08007d0c <_fwalk_sglue>:
 8007d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d10:	4607      	mov	r7, r0
 8007d12:	4688      	mov	r8, r1
 8007d14:	4614      	mov	r4, r2
 8007d16:	2600      	movs	r6, #0
 8007d18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d1c:	f1b9 0901 	subs.w	r9, r9, #1
 8007d20:	d505      	bpl.n	8007d2e <_fwalk_sglue+0x22>
 8007d22:	6824      	ldr	r4, [r4, #0]
 8007d24:	2c00      	cmp	r4, #0
 8007d26:	d1f7      	bne.n	8007d18 <_fwalk_sglue+0xc>
 8007d28:	4630      	mov	r0, r6
 8007d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2e:	89ab      	ldrh	r3, [r5, #12]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d907      	bls.n	8007d44 <_fwalk_sglue+0x38>
 8007d34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	d003      	beq.n	8007d44 <_fwalk_sglue+0x38>
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	4638      	mov	r0, r7
 8007d40:	47c0      	blx	r8
 8007d42:	4306      	orrs	r6, r0
 8007d44:	3568      	adds	r5, #104	@ 0x68
 8007d46:	e7e9      	b.n	8007d1c <_fwalk_sglue+0x10>

08007d48 <siprintf>:
 8007d48:	b40e      	push	{r1, r2, r3}
 8007d4a:	b500      	push	{lr}
 8007d4c:	b09c      	sub	sp, #112	@ 0x70
 8007d4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d50:	9002      	str	r0, [sp, #8]
 8007d52:	9006      	str	r0, [sp, #24]
 8007d54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d58:	4809      	ldr	r0, [pc, #36]	@ (8007d80 <siprintf+0x38>)
 8007d5a:	9107      	str	r1, [sp, #28]
 8007d5c:	9104      	str	r1, [sp, #16]
 8007d5e:	4909      	ldr	r1, [pc, #36]	@ (8007d84 <siprintf+0x3c>)
 8007d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d64:	9105      	str	r1, [sp, #20]
 8007d66:	6800      	ldr	r0, [r0, #0]
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	a902      	add	r1, sp, #8
 8007d6c:	f002 fb46 	bl	800a3fc <_svfiprintf_r>
 8007d70:	9b02      	ldr	r3, [sp, #8]
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	b01c      	add	sp, #112	@ 0x70
 8007d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d7c:	b003      	add	sp, #12
 8007d7e:	4770      	bx	lr
 8007d80:	20000300 	.word	0x20000300
 8007d84:	ffff0208 	.word	0xffff0208

08007d88 <__sread>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d90:	f000 f86c 	bl	8007e6c <_read_r>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	bfab      	itete	ge
 8007d98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d9c:	181b      	addge	r3, r3, r0
 8007d9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007da2:	bfac      	ite	ge
 8007da4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007da6:	81a3      	strhlt	r3, [r4, #12]
 8007da8:	bd10      	pop	{r4, pc}

08007daa <__swrite>:
 8007daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dae:	461f      	mov	r7, r3
 8007db0:	898b      	ldrh	r3, [r1, #12]
 8007db2:	05db      	lsls	r3, r3, #23
 8007db4:	4605      	mov	r5, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	4616      	mov	r6, r2
 8007dba:	d505      	bpl.n	8007dc8 <__swrite+0x1e>
 8007dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f000 f840 	bl	8007e48 <_lseek_r>
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dd2:	81a3      	strh	r3, [r4, #12]
 8007dd4:	4632      	mov	r2, r6
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	4628      	mov	r0, r5
 8007dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dde:	f000 b857 	b.w	8007e90 <_write_r>

08007de2 <__sseek>:
 8007de2:	b510      	push	{r4, lr}
 8007de4:	460c      	mov	r4, r1
 8007de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dea:	f000 f82d 	bl	8007e48 <_lseek_r>
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	bf15      	itete	ne
 8007df4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007df6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007dfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007dfe:	81a3      	strheq	r3, [r4, #12]
 8007e00:	bf18      	it	ne
 8007e02:	81a3      	strhne	r3, [r4, #12]
 8007e04:	bd10      	pop	{r4, pc}

08007e06 <__sclose>:
 8007e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e0a:	f000 b80d 	b.w	8007e28 <_close_r>

08007e0e <memset>:
 8007e0e:	4402      	add	r2, r0
 8007e10:	4603      	mov	r3, r0
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d100      	bne.n	8007e18 <memset+0xa>
 8007e16:	4770      	bx	lr
 8007e18:	f803 1b01 	strb.w	r1, [r3], #1
 8007e1c:	e7f9      	b.n	8007e12 <memset+0x4>
	...

08007e20 <_localeconv_r>:
 8007e20:	4800      	ldr	r0, [pc, #0]	@ (8007e24 <_localeconv_r+0x4>)
 8007e22:	4770      	bx	lr
 8007e24:	20000440 	.word	0x20000440

08007e28 <_close_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4d06      	ldr	r5, [pc, #24]	@ (8007e44 <_close_r+0x1c>)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4604      	mov	r4, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	602b      	str	r3, [r5, #0]
 8007e34:	f7fd f874 	bl	8004f20 <_close>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_close_r+0x1a>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_close_r+0x1a>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	20000f24 	.word	0x20000f24

08007e48 <_lseek_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4d07      	ldr	r5, [pc, #28]	@ (8007e68 <_lseek_r+0x20>)
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	4608      	mov	r0, r1
 8007e50:	4611      	mov	r1, r2
 8007e52:	2200      	movs	r2, #0
 8007e54:	602a      	str	r2, [r5, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f7fd f889 	bl	8004f6e <_lseek>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_lseek_r+0x1e>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_lseek_r+0x1e>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20000f24 	.word	0x20000f24

08007e6c <_read_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d07      	ldr	r5, [pc, #28]	@ (8007e8c <_read_r+0x20>)
 8007e70:	4604      	mov	r4, r0
 8007e72:	4608      	mov	r0, r1
 8007e74:	4611      	mov	r1, r2
 8007e76:	2200      	movs	r2, #0
 8007e78:	602a      	str	r2, [r5, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f7fd f817 	bl	8004eae <_read>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_read_r+0x1e>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_read_r+0x1e>
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	20000f24 	.word	0x20000f24

08007e90 <_write_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d07      	ldr	r5, [pc, #28]	@ (8007eb0 <_write_r+0x20>)
 8007e94:	4604      	mov	r4, r0
 8007e96:	4608      	mov	r0, r1
 8007e98:	4611      	mov	r1, r2
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	602a      	str	r2, [r5, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f7fd f822 	bl	8004ee8 <_write>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	d102      	bne.n	8007eae <_write_r+0x1e>
 8007ea8:	682b      	ldr	r3, [r5, #0]
 8007eaa:	b103      	cbz	r3, 8007eae <_write_r+0x1e>
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
 8007eb0:	20000f24 	.word	0x20000f24

08007eb4 <__errno>:
 8007eb4:	4b01      	ldr	r3, [pc, #4]	@ (8007ebc <__errno+0x8>)
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	20000300 	.word	0x20000300

08007ec0 <__libc_init_array>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8007ef8 <__libc_init_array+0x38>)
 8007ec4:	4c0d      	ldr	r4, [pc, #52]	@ (8007efc <__libc_init_array+0x3c>)
 8007ec6:	1b64      	subs	r4, r4, r5
 8007ec8:	10a4      	asrs	r4, r4, #2
 8007eca:	2600      	movs	r6, #0
 8007ecc:	42a6      	cmp	r6, r4
 8007ece:	d109      	bne.n	8007ee4 <__libc_init_array+0x24>
 8007ed0:	4d0b      	ldr	r5, [pc, #44]	@ (8007f00 <__libc_init_array+0x40>)
 8007ed2:	4c0c      	ldr	r4, [pc, #48]	@ (8007f04 <__libc_init_array+0x44>)
 8007ed4:	f003 faf6 	bl	800b4c4 <_init>
 8007ed8:	1b64      	subs	r4, r4, r5
 8007eda:	10a4      	asrs	r4, r4, #2
 8007edc:	2600      	movs	r6, #0
 8007ede:	42a6      	cmp	r6, r4
 8007ee0:	d105      	bne.n	8007eee <__libc_init_array+0x2e>
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee8:	4798      	blx	r3
 8007eea:	3601      	adds	r6, #1
 8007eec:	e7ee      	b.n	8007ecc <__libc_init_array+0xc>
 8007eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef2:	4798      	blx	r3
 8007ef4:	3601      	adds	r6, #1
 8007ef6:	e7f2      	b.n	8007ede <__libc_init_array+0x1e>
 8007ef8:	0800d208 	.word	0x0800d208
 8007efc:	0800d208 	.word	0x0800d208
 8007f00:	0800d208 	.word	0x0800d208
 8007f04:	0800d20c 	.word	0x0800d20c

08007f08 <__retarget_lock_init_recursive>:
 8007f08:	4770      	bx	lr

08007f0a <__retarget_lock_acquire_recursive>:
 8007f0a:	4770      	bx	lr

08007f0c <__retarget_lock_release_recursive>:
 8007f0c:	4770      	bx	lr

08007f0e <memcpy>:
 8007f0e:	440a      	add	r2, r1
 8007f10:	4291      	cmp	r1, r2
 8007f12:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f16:	d100      	bne.n	8007f1a <memcpy+0xc>
 8007f18:	4770      	bx	lr
 8007f1a:	b510      	push	{r4, lr}
 8007f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f24:	4291      	cmp	r1, r2
 8007f26:	d1f9      	bne.n	8007f1c <memcpy+0xe>
 8007f28:	bd10      	pop	{r4, pc}
	...

08007f2c <nanf>:
 8007f2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007f34 <nanf+0x8>
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	7fc00000 	.word	0x7fc00000

08007f38 <quorem>:
 8007f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	6903      	ldr	r3, [r0, #16]
 8007f3e:	690c      	ldr	r4, [r1, #16]
 8007f40:	42a3      	cmp	r3, r4
 8007f42:	4607      	mov	r7, r0
 8007f44:	db7e      	blt.n	8008044 <quorem+0x10c>
 8007f46:	3c01      	subs	r4, #1
 8007f48:	f101 0814 	add.w	r8, r1, #20
 8007f4c:	00a3      	lsls	r3, r4, #2
 8007f4e:	f100 0514 	add.w	r5, r0, #20
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f62:	3301      	adds	r3, #1
 8007f64:	429a      	cmp	r2, r3
 8007f66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f6e:	d32e      	bcc.n	8007fce <quorem+0x96>
 8007f70:	f04f 0a00 	mov.w	sl, #0
 8007f74:	46c4      	mov	ip, r8
 8007f76:	46ae      	mov	lr, r5
 8007f78:	46d3      	mov	fp, sl
 8007f7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f7e:	b298      	uxth	r0, r3
 8007f80:	fb06 a000 	mla	r0, r6, r0, sl
 8007f84:	0c02      	lsrs	r2, r0, #16
 8007f86:	0c1b      	lsrs	r3, r3, #16
 8007f88:	fb06 2303 	mla	r3, r6, r3, r2
 8007f8c:	f8de 2000 	ldr.w	r2, [lr]
 8007f90:	b280      	uxth	r0, r0
 8007f92:	b292      	uxth	r2, r2
 8007f94:	1a12      	subs	r2, r2, r0
 8007f96:	445a      	add	r2, fp
 8007f98:	f8de 0000 	ldr.w	r0, [lr]
 8007f9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007fa6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007faa:	b292      	uxth	r2, r2
 8007fac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fb0:	45e1      	cmp	r9, ip
 8007fb2:	f84e 2b04 	str.w	r2, [lr], #4
 8007fb6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fba:	d2de      	bcs.n	8007f7a <quorem+0x42>
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	58eb      	ldr	r3, [r5, r3]
 8007fc0:	b92b      	cbnz	r3, 8007fce <quorem+0x96>
 8007fc2:	9b01      	ldr	r3, [sp, #4]
 8007fc4:	3b04      	subs	r3, #4
 8007fc6:	429d      	cmp	r5, r3
 8007fc8:	461a      	mov	r2, r3
 8007fca:	d32f      	bcc.n	800802c <quorem+0xf4>
 8007fcc:	613c      	str	r4, [r7, #16]
 8007fce:	4638      	mov	r0, r7
 8007fd0:	f001 f9c2 	bl	8009358 <__mcmp>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	db25      	blt.n	8008024 <quorem+0xec>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fe0:	f8d1 c000 	ldr.w	ip, [r1]
 8007fe4:	fa1f fe82 	uxth.w	lr, r2
 8007fe8:	fa1f f38c 	uxth.w	r3, ip
 8007fec:	eba3 030e 	sub.w	r3, r3, lr
 8007ff0:	4403      	add	r3, r0
 8007ff2:	0c12      	lsrs	r2, r2, #16
 8007ff4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ff8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008002:	45c1      	cmp	r9, r8
 8008004:	f841 3b04 	str.w	r3, [r1], #4
 8008008:	ea4f 4022 	mov.w	r0, r2, asr #16
 800800c:	d2e6      	bcs.n	8007fdc <quorem+0xa4>
 800800e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008016:	b922      	cbnz	r2, 8008022 <quorem+0xea>
 8008018:	3b04      	subs	r3, #4
 800801a:	429d      	cmp	r5, r3
 800801c:	461a      	mov	r2, r3
 800801e:	d30b      	bcc.n	8008038 <quorem+0x100>
 8008020:	613c      	str	r4, [r7, #16]
 8008022:	3601      	adds	r6, #1
 8008024:	4630      	mov	r0, r6
 8008026:	b003      	add	sp, #12
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	6812      	ldr	r2, [r2, #0]
 800802e:	3b04      	subs	r3, #4
 8008030:	2a00      	cmp	r2, #0
 8008032:	d1cb      	bne.n	8007fcc <quorem+0x94>
 8008034:	3c01      	subs	r4, #1
 8008036:	e7c6      	b.n	8007fc6 <quorem+0x8e>
 8008038:	6812      	ldr	r2, [r2, #0]
 800803a:	3b04      	subs	r3, #4
 800803c:	2a00      	cmp	r2, #0
 800803e:	d1ef      	bne.n	8008020 <quorem+0xe8>
 8008040:	3c01      	subs	r4, #1
 8008042:	e7ea      	b.n	800801a <quorem+0xe2>
 8008044:	2000      	movs	r0, #0
 8008046:	e7ee      	b.n	8008026 <quorem+0xee>

08008048 <_dtoa_r>:
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	69c7      	ldr	r7, [r0, #28]
 800804e:	b099      	sub	sp, #100	@ 0x64
 8008050:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008054:	ec55 4b10 	vmov	r4, r5, d0
 8008058:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800805a:	9109      	str	r1, [sp, #36]	@ 0x24
 800805c:	4683      	mov	fp, r0
 800805e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008060:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008062:	b97f      	cbnz	r7, 8008084 <_dtoa_r+0x3c>
 8008064:	2010      	movs	r0, #16
 8008066:	f000 fdfd 	bl	8008c64 <malloc>
 800806a:	4602      	mov	r2, r0
 800806c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008070:	b920      	cbnz	r0, 800807c <_dtoa_r+0x34>
 8008072:	4ba7      	ldr	r3, [pc, #668]	@ (8008310 <_dtoa_r+0x2c8>)
 8008074:	21ef      	movs	r1, #239	@ 0xef
 8008076:	48a7      	ldr	r0, [pc, #668]	@ (8008314 <_dtoa_r+0x2cc>)
 8008078:	f002 fbae 	bl	800a7d8 <__assert_func>
 800807c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008080:	6007      	str	r7, [r0, #0]
 8008082:	60c7      	str	r7, [r0, #12]
 8008084:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008088:	6819      	ldr	r1, [r3, #0]
 800808a:	b159      	cbz	r1, 80080a4 <_dtoa_r+0x5c>
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	604a      	str	r2, [r1, #4]
 8008090:	2301      	movs	r3, #1
 8008092:	4093      	lsls	r3, r2
 8008094:	608b      	str	r3, [r1, #8]
 8008096:	4658      	mov	r0, fp
 8008098:	f000 feda 	bl	8008e50 <_Bfree>
 800809c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	1e2b      	subs	r3, r5, #0
 80080a6:	bfb9      	ittee	lt
 80080a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80080ac:	9303      	strlt	r3, [sp, #12]
 80080ae:	2300      	movge	r3, #0
 80080b0:	6033      	strge	r3, [r6, #0]
 80080b2:	9f03      	ldr	r7, [sp, #12]
 80080b4:	4b98      	ldr	r3, [pc, #608]	@ (8008318 <_dtoa_r+0x2d0>)
 80080b6:	bfbc      	itt	lt
 80080b8:	2201      	movlt	r2, #1
 80080ba:	6032      	strlt	r2, [r6, #0]
 80080bc:	43bb      	bics	r3, r7
 80080be:	d112      	bne.n	80080e6 <_dtoa_r+0x9e>
 80080c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80080c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080cc:	4323      	orrs	r3, r4
 80080ce:	f000 854d 	beq.w	8008b6c <_dtoa_r+0xb24>
 80080d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800832c <_dtoa_r+0x2e4>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 854f 	beq.w	8008b7c <_dtoa_r+0xb34>
 80080de:	f10a 0303 	add.w	r3, sl, #3
 80080e2:	f000 bd49 	b.w	8008b78 <_dtoa_r+0xb30>
 80080e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080ea:	2200      	movs	r2, #0
 80080ec:	ec51 0b17 	vmov	r0, r1, d7
 80080f0:	2300      	movs	r3, #0
 80080f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80080f6:	f7f8 fcf7 	bl	8000ae8 <__aeabi_dcmpeq>
 80080fa:	4680      	mov	r8, r0
 80080fc:	b158      	cbz	r0, 8008116 <_dtoa_r+0xce>
 80080fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008100:	2301      	movs	r3, #1
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008106:	b113      	cbz	r3, 800810e <_dtoa_r+0xc6>
 8008108:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800810a:	4b84      	ldr	r3, [pc, #528]	@ (800831c <_dtoa_r+0x2d4>)
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008330 <_dtoa_r+0x2e8>
 8008112:	f000 bd33 	b.w	8008b7c <_dtoa_r+0xb34>
 8008116:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800811a:	aa16      	add	r2, sp, #88	@ 0x58
 800811c:	a917      	add	r1, sp, #92	@ 0x5c
 800811e:	4658      	mov	r0, fp
 8008120:	f001 fa3a 	bl	8009598 <__d2b>
 8008124:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008128:	4681      	mov	r9, r0
 800812a:	2e00      	cmp	r6, #0
 800812c:	d077      	beq.n	800821e <_dtoa_r+0x1d6>
 800812e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008130:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800813c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008140:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008144:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008148:	4619      	mov	r1, r3
 800814a:	2200      	movs	r2, #0
 800814c:	4b74      	ldr	r3, [pc, #464]	@ (8008320 <_dtoa_r+0x2d8>)
 800814e:	f7f8 f8ab 	bl	80002a8 <__aeabi_dsub>
 8008152:	a369      	add	r3, pc, #420	@ (adr r3, 80082f8 <_dtoa_r+0x2b0>)
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f7f8 fa5e 	bl	8000618 <__aeabi_dmul>
 800815c:	a368      	add	r3, pc, #416	@ (adr r3, 8008300 <_dtoa_r+0x2b8>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f8 f8a3 	bl	80002ac <__adddf3>
 8008166:	4604      	mov	r4, r0
 8008168:	4630      	mov	r0, r6
 800816a:	460d      	mov	r5, r1
 800816c:	f7f8 f9ea 	bl	8000544 <__aeabi_i2d>
 8008170:	a365      	add	r3, pc, #404	@ (adr r3, 8008308 <_dtoa_r+0x2c0>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 fa4f 	bl	8000618 <__aeabi_dmul>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 f893 	bl	80002ac <__adddf3>
 8008186:	4604      	mov	r4, r0
 8008188:	460d      	mov	r5, r1
 800818a:	f7f8 fcf5 	bl	8000b78 <__aeabi_d2iz>
 800818e:	2200      	movs	r2, #0
 8008190:	4607      	mov	r7, r0
 8008192:	2300      	movs	r3, #0
 8008194:	4620      	mov	r0, r4
 8008196:	4629      	mov	r1, r5
 8008198:	f7f8 fcb0 	bl	8000afc <__aeabi_dcmplt>
 800819c:	b140      	cbz	r0, 80081b0 <_dtoa_r+0x168>
 800819e:	4638      	mov	r0, r7
 80081a0:	f7f8 f9d0 	bl	8000544 <__aeabi_i2d>
 80081a4:	4622      	mov	r2, r4
 80081a6:	462b      	mov	r3, r5
 80081a8:	f7f8 fc9e 	bl	8000ae8 <__aeabi_dcmpeq>
 80081ac:	b900      	cbnz	r0, 80081b0 <_dtoa_r+0x168>
 80081ae:	3f01      	subs	r7, #1
 80081b0:	2f16      	cmp	r7, #22
 80081b2:	d851      	bhi.n	8008258 <_dtoa_r+0x210>
 80081b4:	4b5b      	ldr	r3, [pc, #364]	@ (8008324 <_dtoa_r+0x2dc>)
 80081b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081c2:	f7f8 fc9b 	bl	8000afc <__aeabi_dcmplt>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d048      	beq.n	800825c <_dtoa_r+0x214>
 80081ca:	3f01      	subs	r7, #1
 80081cc:	2300      	movs	r3, #0
 80081ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80081d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80081d2:	1b9b      	subs	r3, r3, r6
 80081d4:	1e5a      	subs	r2, r3, #1
 80081d6:	bf44      	itt	mi
 80081d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80081dc:	2300      	movmi	r3, #0
 80081de:	9208      	str	r2, [sp, #32]
 80081e0:	bf54      	ite	pl
 80081e2:	f04f 0800 	movpl.w	r8, #0
 80081e6:	9308      	strmi	r3, [sp, #32]
 80081e8:	2f00      	cmp	r7, #0
 80081ea:	db39      	blt.n	8008260 <_dtoa_r+0x218>
 80081ec:	9b08      	ldr	r3, [sp, #32]
 80081ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80081f0:	443b      	add	r3, r7
 80081f2:	9308      	str	r3, [sp, #32]
 80081f4:	2300      	movs	r3, #0
 80081f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80081f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081fa:	2b09      	cmp	r3, #9
 80081fc:	d864      	bhi.n	80082c8 <_dtoa_r+0x280>
 80081fe:	2b05      	cmp	r3, #5
 8008200:	bfc4      	itt	gt
 8008202:	3b04      	subgt	r3, #4
 8008204:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008208:	f1a3 0302 	sub.w	r3, r3, #2
 800820c:	bfcc      	ite	gt
 800820e:	2400      	movgt	r4, #0
 8008210:	2401      	movle	r4, #1
 8008212:	2b03      	cmp	r3, #3
 8008214:	d863      	bhi.n	80082de <_dtoa_r+0x296>
 8008216:	e8df f003 	tbb	[pc, r3]
 800821a:	372a      	.short	0x372a
 800821c:	5535      	.short	0x5535
 800821e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008222:	441e      	add	r6, r3
 8008224:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008228:	2b20      	cmp	r3, #32
 800822a:	bfc1      	itttt	gt
 800822c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008230:	409f      	lslgt	r7, r3
 8008232:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008236:	fa24 f303 	lsrgt.w	r3, r4, r3
 800823a:	bfd6      	itet	le
 800823c:	f1c3 0320 	rsble	r3, r3, #32
 8008240:	ea47 0003 	orrgt.w	r0, r7, r3
 8008244:	fa04 f003 	lslle.w	r0, r4, r3
 8008248:	f7f8 f96c 	bl	8000524 <__aeabi_ui2d>
 800824c:	2201      	movs	r2, #1
 800824e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008252:	3e01      	subs	r6, #1
 8008254:	9214      	str	r2, [sp, #80]	@ 0x50
 8008256:	e777      	b.n	8008148 <_dtoa_r+0x100>
 8008258:	2301      	movs	r3, #1
 800825a:	e7b8      	b.n	80081ce <_dtoa_r+0x186>
 800825c:	9012      	str	r0, [sp, #72]	@ 0x48
 800825e:	e7b7      	b.n	80081d0 <_dtoa_r+0x188>
 8008260:	427b      	negs	r3, r7
 8008262:	930a      	str	r3, [sp, #40]	@ 0x28
 8008264:	2300      	movs	r3, #0
 8008266:	eba8 0807 	sub.w	r8, r8, r7
 800826a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800826c:	e7c4      	b.n	80081f8 <_dtoa_r+0x1b0>
 800826e:	2300      	movs	r3, #0
 8008270:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008274:	2b00      	cmp	r3, #0
 8008276:	dc35      	bgt.n	80082e4 <_dtoa_r+0x29c>
 8008278:	2301      	movs	r3, #1
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	9307      	str	r3, [sp, #28]
 800827e:	461a      	mov	r2, r3
 8008280:	920e      	str	r2, [sp, #56]	@ 0x38
 8008282:	e00b      	b.n	800829c <_dtoa_r+0x254>
 8008284:	2301      	movs	r3, #1
 8008286:	e7f3      	b.n	8008270 <_dtoa_r+0x228>
 8008288:	2300      	movs	r3, #0
 800828a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800828c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800828e:	18fb      	adds	r3, r7, r3
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	3301      	adds	r3, #1
 8008294:	2b01      	cmp	r3, #1
 8008296:	9307      	str	r3, [sp, #28]
 8008298:	bfb8      	it	lt
 800829a:	2301      	movlt	r3, #1
 800829c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80082a0:	2100      	movs	r1, #0
 80082a2:	2204      	movs	r2, #4
 80082a4:	f102 0514 	add.w	r5, r2, #20
 80082a8:	429d      	cmp	r5, r3
 80082aa:	d91f      	bls.n	80082ec <_dtoa_r+0x2a4>
 80082ac:	6041      	str	r1, [r0, #4]
 80082ae:	4658      	mov	r0, fp
 80082b0:	f000 fd8e 	bl	8008dd0 <_Balloc>
 80082b4:	4682      	mov	sl, r0
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d13c      	bne.n	8008334 <_dtoa_r+0x2ec>
 80082ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008328 <_dtoa_r+0x2e0>)
 80082bc:	4602      	mov	r2, r0
 80082be:	f240 11af 	movw	r1, #431	@ 0x1af
 80082c2:	e6d8      	b.n	8008076 <_dtoa_r+0x2e>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e7e0      	b.n	800828a <_dtoa_r+0x242>
 80082c8:	2401      	movs	r4, #1
 80082ca:	2300      	movs	r3, #0
 80082cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80082d0:	f04f 33ff 	mov.w	r3, #4294967295
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	9307      	str	r3, [sp, #28]
 80082d8:	2200      	movs	r2, #0
 80082da:	2312      	movs	r3, #18
 80082dc:	e7d0      	b.n	8008280 <_dtoa_r+0x238>
 80082de:	2301      	movs	r3, #1
 80082e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082e2:	e7f5      	b.n	80082d0 <_dtoa_r+0x288>
 80082e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	9307      	str	r3, [sp, #28]
 80082ea:	e7d7      	b.n	800829c <_dtoa_r+0x254>
 80082ec:	3101      	adds	r1, #1
 80082ee:	0052      	lsls	r2, r2, #1
 80082f0:	e7d8      	b.n	80082a4 <_dtoa_r+0x25c>
 80082f2:	bf00      	nop
 80082f4:	f3af 8000 	nop.w
 80082f8:	636f4361 	.word	0x636f4361
 80082fc:	3fd287a7 	.word	0x3fd287a7
 8008300:	8b60c8b3 	.word	0x8b60c8b3
 8008304:	3fc68a28 	.word	0x3fc68a28
 8008308:	509f79fb 	.word	0x509f79fb
 800830c:	3fd34413 	.word	0x3fd34413
 8008310:	0800cf17 	.word	0x0800cf17
 8008314:	0800cf2e 	.word	0x0800cf2e
 8008318:	7ff00000 	.word	0x7ff00000
 800831c:	0800cee2 	.word	0x0800cee2
 8008320:	3ff80000 	.word	0x3ff80000
 8008324:	0800d028 	.word	0x0800d028
 8008328:	0800cf86 	.word	0x0800cf86
 800832c:	0800cf13 	.word	0x0800cf13
 8008330:	0800cee1 	.word	0x0800cee1
 8008334:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008338:	6018      	str	r0, [r3, #0]
 800833a:	9b07      	ldr	r3, [sp, #28]
 800833c:	2b0e      	cmp	r3, #14
 800833e:	f200 80a4 	bhi.w	800848a <_dtoa_r+0x442>
 8008342:	2c00      	cmp	r4, #0
 8008344:	f000 80a1 	beq.w	800848a <_dtoa_r+0x442>
 8008348:	2f00      	cmp	r7, #0
 800834a:	dd33      	ble.n	80083b4 <_dtoa_r+0x36c>
 800834c:	4bad      	ldr	r3, [pc, #692]	@ (8008604 <_dtoa_r+0x5bc>)
 800834e:	f007 020f 	and.w	r2, r7, #15
 8008352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008356:	ed93 7b00 	vldr	d7, [r3]
 800835a:	05f8      	lsls	r0, r7, #23
 800835c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008360:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008364:	d516      	bpl.n	8008394 <_dtoa_r+0x34c>
 8008366:	4ba8      	ldr	r3, [pc, #672]	@ (8008608 <_dtoa_r+0x5c0>)
 8008368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800836c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008370:	f7f8 fa7c 	bl	800086c <__aeabi_ddiv>
 8008374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008378:	f004 040f 	and.w	r4, r4, #15
 800837c:	2603      	movs	r6, #3
 800837e:	4da2      	ldr	r5, [pc, #648]	@ (8008608 <_dtoa_r+0x5c0>)
 8008380:	b954      	cbnz	r4, 8008398 <_dtoa_r+0x350>
 8008382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800838a:	f7f8 fa6f 	bl	800086c <__aeabi_ddiv>
 800838e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008392:	e028      	b.n	80083e6 <_dtoa_r+0x39e>
 8008394:	2602      	movs	r6, #2
 8008396:	e7f2      	b.n	800837e <_dtoa_r+0x336>
 8008398:	07e1      	lsls	r1, r4, #31
 800839a:	d508      	bpl.n	80083ae <_dtoa_r+0x366>
 800839c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083a4:	f7f8 f938 	bl	8000618 <__aeabi_dmul>
 80083a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083ac:	3601      	adds	r6, #1
 80083ae:	1064      	asrs	r4, r4, #1
 80083b0:	3508      	adds	r5, #8
 80083b2:	e7e5      	b.n	8008380 <_dtoa_r+0x338>
 80083b4:	f000 80d2 	beq.w	800855c <_dtoa_r+0x514>
 80083b8:	427c      	negs	r4, r7
 80083ba:	4b92      	ldr	r3, [pc, #584]	@ (8008604 <_dtoa_r+0x5bc>)
 80083bc:	4d92      	ldr	r5, [pc, #584]	@ (8008608 <_dtoa_r+0x5c0>)
 80083be:	f004 020f 	and.w	r2, r4, #15
 80083c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083ce:	f7f8 f923 	bl	8000618 <__aeabi_dmul>
 80083d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083d6:	1124      	asrs	r4, r4, #4
 80083d8:	2300      	movs	r3, #0
 80083da:	2602      	movs	r6, #2
 80083dc:	2c00      	cmp	r4, #0
 80083de:	f040 80b2 	bne.w	8008546 <_dtoa_r+0x4fe>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1d3      	bne.n	800838e <_dtoa_r+0x346>
 80083e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 80b7 	beq.w	8008560 <_dtoa_r+0x518>
 80083f2:	4b86      	ldr	r3, [pc, #536]	@ (800860c <_dtoa_r+0x5c4>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	4620      	mov	r0, r4
 80083f8:	4629      	mov	r1, r5
 80083fa:	f7f8 fb7f 	bl	8000afc <__aeabi_dcmplt>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f000 80ae 	beq.w	8008560 <_dtoa_r+0x518>
 8008404:	9b07      	ldr	r3, [sp, #28]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 80aa 	beq.w	8008560 <_dtoa_r+0x518>
 800840c:	9b00      	ldr	r3, [sp, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	dd37      	ble.n	8008482 <_dtoa_r+0x43a>
 8008412:	1e7b      	subs	r3, r7, #1
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	4620      	mov	r0, r4
 8008418:	4b7d      	ldr	r3, [pc, #500]	@ (8008610 <_dtoa_r+0x5c8>)
 800841a:	2200      	movs	r2, #0
 800841c:	4629      	mov	r1, r5
 800841e:	f7f8 f8fb 	bl	8000618 <__aeabi_dmul>
 8008422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008426:	9c00      	ldr	r4, [sp, #0]
 8008428:	3601      	adds	r6, #1
 800842a:	4630      	mov	r0, r6
 800842c:	f7f8 f88a 	bl	8000544 <__aeabi_i2d>
 8008430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008434:	f7f8 f8f0 	bl	8000618 <__aeabi_dmul>
 8008438:	4b76      	ldr	r3, [pc, #472]	@ (8008614 <_dtoa_r+0x5cc>)
 800843a:	2200      	movs	r2, #0
 800843c:	f7f7 ff36 	bl	80002ac <__adddf3>
 8008440:	4605      	mov	r5, r0
 8008442:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008446:	2c00      	cmp	r4, #0
 8008448:	f040 808d 	bne.w	8008566 <_dtoa_r+0x51e>
 800844c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008450:	4b71      	ldr	r3, [pc, #452]	@ (8008618 <_dtoa_r+0x5d0>)
 8008452:	2200      	movs	r2, #0
 8008454:	f7f7 ff28 	bl	80002a8 <__aeabi_dsub>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008460:	462a      	mov	r2, r5
 8008462:	4633      	mov	r3, r6
 8008464:	f7f8 fb68 	bl	8000b38 <__aeabi_dcmpgt>
 8008468:	2800      	cmp	r0, #0
 800846a:	f040 828b 	bne.w	8008984 <_dtoa_r+0x93c>
 800846e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008472:	462a      	mov	r2, r5
 8008474:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008478:	f7f8 fb40 	bl	8000afc <__aeabi_dcmplt>
 800847c:	2800      	cmp	r0, #0
 800847e:	f040 8128 	bne.w	80086d2 <_dtoa_r+0x68a>
 8008482:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008486:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800848a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800848c:	2b00      	cmp	r3, #0
 800848e:	f2c0 815a 	blt.w	8008746 <_dtoa_r+0x6fe>
 8008492:	2f0e      	cmp	r7, #14
 8008494:	f300 8157 	bgt.w	8008746 <_dtoa_r+0x6fe>
 8008498:	4b5a      	ldr	r3, [pc, #360]	@ (8008604 <_dtoa_r+0x5bc>)
 800849a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800849e:	ed93 7b00 	vldr	d7, [r3]
 80084a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	ed8d 7b00 	vstr	d7, [sp]
 80084aa:	da03      	bge.n	80084b4 <_dtoa_r+0x46c>
 80084ac:	9b07      	ldr	r3, [sp, #28]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f340 8101 	ble.w	80086b6 <_dtoa_r+0x66e>
 80084b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084b8:	4656      	mov	r6, sl
 80084ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084be:	4620      	mov	r0, r4
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7f8 f9d3 	bl	800086c <__aeabi_ddiv>
 80084c6:	f7f8 fb57 	bl	8000b78 <__aeabi_d2iz>
 80084ca:	4680      	mov	r8, r0
 80084cc:	f7f8 f83a 	bl	8000544 <__aeabi_i2d>
 80084d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084d4:	f7f8 f8a0 	bl	8000618 <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4620      	mov	r0, r4
 80084de:	4629      	mov	r1, r5
 80084e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80084e4:	f7f7 fee0 	bl	80002a8 <__aeabi_dsub>
 80084e8:	f806 4b01 	strb.w	r4, [r6], #1
 80084ec:	9d07      	ldr	r5, [sp, #28]
 80084ee:	eba6 040a 	sub.w	r4, r6, sl
 80084f2:	42a5      	cmp	r5, r4
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	f040 8117 	bne.w	800872a <_dtoa_r+0x6e2>
 80084fc:	f7f7 fed6 	bl	80002ac <__adddf3>
 8008500:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008504:	4604      	mov	r4, r0
 8008506:	460d      	mov	r5, r1
 8008508:	f7f8 fb16 	bl	8000b38 <__aeabi_dcmpgt>
 800850c:	2800      	cmp	r0, #0
 800850e:	f040 80f9 	bne.w	8008704 <_dtoa_r+0x6bc>
 8008512:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008516:	4620      	mov	r0, r4
 8008518:	4629      	mov	r1, r5
 800851a:	f7f8 fae5 	bl	8000ae8 <__aeabi_dcmpeq>
 800851e:	b118      	cbz	r0, 8008528 <_dtoa_r+0x4e0>
 8008520:	f018 0f01 	tst.w	r8, #1
 8008524:	f040 80ee 	bne.w	8008704 <_dtoa_r+0x6bc>
 8008528:	4649      	mov	r1, r9
 800852a:	4658      	mov	r0, fp
 800852c:	f000 fc90 	bl	8008e50 <_Bfree>
 8008530:	2300      	movs	r3, #0
 8008532:	7033      	strb	r3, [r6, #0]
 8008534:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008536:	3701      	adds	r7, #1
 8008538:	601f      	str	r7, [r3, #0]
 800853a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 831d 	beq.w	8008b7c <_dtoa_r+0xb34>
 8008542:	601e      	str	r6, [r3, #0]
 8008544:	e31a      	b.n	8008b7c <_dtoa_r+0xb34>
 8008546:	07e2      	lsls	r2, r4, #31
 8008548:	d505      	bpl.n	8008556 <_dtoa_r+0x50e>
 800854a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800854e:	f7f8 f863 	bl	8000618 <__aeabi_dmul>
 8008552:	3601      	adds	r6, #1
 8008554:	2301      	movs	r3, #1
 8008556:	1064      	asrs	r4, r4, #1
 8008558:	3508      	adds	r5, #8
 800855a:	e73f      	b.n	80083dc <_dtoa_r+0x394>
 800855c:	2602      	movs	r6, #2
 800855e:	e742      	b.n	80083e6 <_dtoa_r+0x39e>
 8008560:	9c07      	ldr	r4, [sp, #28]
 8008562:	9704      	str	r7, [sp, #16]
 8008564:	e761      	b.n	800842a <_dtoa_r+0x3e2>
 8008566:	4b27      	ldr	r3, [pc, #156]	@ (8008604 <_dtoa_r+0x5bc>)
 8008568:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800856a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800856e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008572:	4454      	add	r4, sl
 8008574:	2900      	cmp	r1, #0
 8008576:	d053      	beq.n	8008620 <_dtoa_r+0x5d8>
 8008578:	4928      	ldr	r1, [pc, #160]	@ (800861c <_dtoa_r+0x5d4>)
 800857a:	2000      	movs	r0, #0
 800857c:	f7f8 f976 	bl	800086c <__aeabi_ddiv>
 8008580:	4633      	mov	r3, r6
 8008582:	462a      	mov	r2, r5
 8008584:	f7f7 fe90 	bl	80002a8 <__aeabi_dsub>
 8008588:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800858c:	4656      	mov	r6, sl
 800858e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008592:	f7f8 faf1 	bl	8000b78 <__aeabi_d2iz>
 8008596:	4605      	mov	r5, r0
 8008598:	f7f7 ffd4 	bl	8000544 <__aeabi_i2d>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a4:	f7f7 fe80 	bl	80002a8 <__aeabi_dsub>
 80085a8:	3530      	adds	r5, #48	@ 0x30
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085b2:	f806 5b01 	strb.w	r5, [r6], #1
 80085b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085ba:	f7f8 fa9f 	bl	8000afc <__aeabi_dcmplt>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d171      	bne.n	80086a6 <_dtoa_r+0x65e>
 80085c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085c6:	4911      	ldr	r1, [pc, #68]	@ (800860c <_dtoa_r+0x5c4>)
 80085c8:	2000      	movs	r0, #0
 80085ca:	f7f7 fe6d 	bl	80002a8 <__aeabi_dsub>
 80085ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085d2:	f7f8 fa93 	bl	8000afc <__aeabi_dcmplt>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f040 8095 	bne.w	8008706 <_dtoa_r+0x6be>
 80085dc:	42a6      	cmp	r6, r4
 80085de:	f43f af50 	beq.w	8008482 <_dtoa_r+0x43a>
 80085e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008610 <_dtoa_r+0x5c8>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	f7f8 f815 	bl	8000618 <__aeabi_dmul>
 80085ee:	4b08      	ldr	r3, [pc, #32]	@ (8008610 <_dtoa_r+0x5c8>)
 80085f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085f4:	2200      	movs	r2, #0
 80085f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085fa:	f7f8 f80d 	bl	8000618 <__aeabi_dmul>
 80085fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008602:	e7c4      	b.n	800858e <_dtoa_r+0x546>
 8008604:	0800d028 	.word	0x0800d028
 8008608:	0800d000 	.word	0x0800d000
 800860c:	3ff00000 	.word	0x3ff00000
 8008610:	40240000 	.word	0x40240000
 8008614:	401c0000 	.word	0x401c0000
 8008618:	40140000 	.word	0x40140000
 800861c:	3fe00000 	.word	0x3fe00000
 8008620:	4631      	mov	r1, r6
 8008622:	4628      	mov	r0, r5
 8008624:	f7f7 fff8 	bl	8000618 <__aeabi_dmul>
 8008628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800862c:	9415      	str	r4, [sp, #84]	@ 0x54
 800862e:	4656      	mov	r6, sl
 8008630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008634:	f7f8 faa0 	bl	8000b78 <__aeabi_d2iz>
 8008638:	4605      	mov	r5, r0
 800863a:	f7f7 ff83 	bl	8000544 <__aeabi_i2d>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008646:	f7f7 fe2f 	bl	80002a8 <__aeabi_dsub>
 800864a:	3530      	adds	r5, #48	@ 0x30
 800864c:	f806 5b01 	strb.w	r5, [r6], #1
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	42a6      	cmp	r6, r4
 8008656:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	d124      	bne.n	80086aa <_dtoa_r+0x662>
 8008660:	4bac      	ldr	r3, [pc, #688]	@ (8008914 <_dtoa_r+0x8cc>)
 8008662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008666:	f7f7 fe21 	bl	80002ac <__adddf3>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008672:	f7f8 fa61 	bl	8000b38 <__aeabi_dcmpgt>
 8008676:	2800      	cmp	r0, #0
 8008678:	d145      	bne.n	8008706 <_dtoa_r+0x6be>
 800867a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800867e:	49a5      	ldr	r1, [pc, #660]	@ (8008914 <_dtoa_r+0x8cc>)
 8008680:	2000      	movs	r0, #0
 8008682:	f7f7 fe11 	bl	80002a8 <__aeabi_dsub>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800868e:	f7f8 fa35 	bl	8000afc <__aeabi_dcmplt>
 8008692:	2800      	cmp	r0, #0
 8008694:	f43f aef5 	beq.w	8008482 <_dtoa_r+0x43a>
 8008698:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800869a:	1e73      	subs	r3, r6, #1
 800869c:	9315      	str	r3, [sp, #84]	@ 0x54
 800869e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80086a2:	2b30      	cmp	r3, #48	@ 0x30
 80086a4:	d0f8      	beq.n	8008698 <_dtoa_r+0x650>
 80086a6:	9f04      	ldr	r7, [sp, #16]
 80086a8:	e73e      	b.n	8008528 <_dtoa_r+0x4e0>
 80086aa:	4b9b      	ldr	r3, [pc, #620]	@ (8008918 <_dtoa_r+0x8d0>)
 80086ac:	f7f7 ffb4 	bl	8000618 <__aeabi_dmul>
 80086b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086b4:	e7bc      	b.n	8008630 <_dtoa_r+0x5e8>
 80086b6:	d10c      	bne.n	80086d2 <_dtoa_r+0x68a>
 80086b8:	4b98      	ldr	r3, [pc, #608]	@ (800891c <_dtoa_r+0x8d4>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c0:	f7f7 ffaa 	bl	8000618 <__aeabi_dmul>
 80086c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086c8:	f7f8 fa2c 	bl	8000b24 <__aeabi_dcmpge>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f000 8157 	beq.w	8008980 <_dtoa_r+0x938>
 80086d2:	2400      	movs	r4, #0
 80086d4:	4625      	mov	r5, r4
 80086d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086d8:	43db      	mvns	r3, r3
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	4656      	mov	r6, sl
 80086de:	2700      	movs	r7, #0
 80086e0:	4621      	mov	r1, r4
 80086e2:	4658      	mov	r0, fp
 80086e4:	f000 fbb4 	bl	8008e50 <_Bfree>
 80086e8:	2d00      	cmp	r5, #0
 80086ea:	d0dc      	beq.n	80086a6 <_dtoa_r+0x65e>
 80086ec:	b12f      	cbz	r7, 80086fa <_dtoa_r+0x6b2>
 80086ee:	42af      	cmp	r7, r5
 80086f0:	d003      	beq.n	80086fa <_dtoa_r+0x6b2>
 80086f2:	4639      	mov	r1, r7
 80086f4:	4658      	mov	r0, fp
 80086f6:	f000 fbab 	bl	8008e50 <_Bfree>
 80086fa:	4629      	mov	r1, r5
 80086fc:	4658      	mov	r0, fp
 80086fe:	f000 fba7 	bl	8008e50 <_Bfree>
 8008702:	e7d0      	b.n	80086a6 <_dtoa_r+0x65e>
 8008704:	9704      	str	r7, [sp, #16]
 8008706:	4633      	mov	r3, r6
 8008708:	461e      	mov	r6, r3
 800870a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800870e:	2a39      	cmp	r2, #57	@ 0x39
 8008710:	d107      	bne.n	8008722 <_dtoa_r+0x6da>
 8008712:	459a      	cmp	sl, r3
 8008714:	d1f8      	bne.n	8008708 <_dtoa_r+0x6c0>
 8008716:	9a04      	ldr	r2, [sp, #16]
 8008718:	3201      	adds	r2, #1
 800871a:	9204      	str	r2, [sp, #16]
 800871c:	2230      	movs	r2, #48	@ 0x30
 800871e:	f88a 2000 	strb.w	r2, [sl]
 8008722:	781a      	ldrb	r2, [r3, #0]
 8008724:	3201      	adds	r2, #1
 8008726:	701a      	strb	r2, [r3, #0]
 8008728:	e7bd      	b.n	80086a6 <_dtoa_r+0x65e>
 800872a:	4b7b      	ldr	r3, [pc, #492]	@ (8008918 <_dtoa_r+0x8d0>)
 800872c:	2200      	movs	r2, #0
 800872e:	f7f7 ff73 	bl	8000618 <__aeabi_dmul>
 8008732:	2200      	movs	r2, #0
 8008734:	2300      	movs	r3, #0
 8008736:	4604      	mov	r4, r0
 8008738:	460d      	mov	r5, r1
 800873a:	f7f8 f9d5 	bl	8000ae8 <__aeabi_dcmpeq>
 800873e:	2800      	cmp	r0, #0
 8008740:	f43f aebb 	beq.w	80084ba <_dtoa_r+0x472>
 8008744:	e6f0      	b.n	8008528 <_dtoa_r+0x4e0>
 8008746:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008748:	2a00      	cmp	r2, #0
 800874a:	f000 80db 	beq.w	8008904 <_dtoa_r+0x8bc>
 800874e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008750:	2a01      	cmp	r2, #1
 8008752:	f300 80bf 	bgt.w	80088d4 <_dtoa_r+0x88c>
 8008756:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008758:	2a00      	cmp	r2, #0
 800875a:	f000 80b7 	beq.w	80088cc <_dtoa_r+0x884>
 800875e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008762:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008764:	4646      	mov	r6, r8
 8008766:	9a08      	ldr	r2, [sp, #32]
 8008768:	2101      	movs	r1, #1
 800876a:	441a      	add	r2, r3
 800876c:	4658      	mov	r0, fp
 800876e:	4498      	add	r8, r3
 8008770:	9208      	str	r2, [sp, #32]
 8008772:	f000 fc6b 	bl	800904c <__i2b>
 8008776:	4605      	mov	r5, r0
 8008778:	b15e      	cbz	r6, 8008792 <_dtoa_r+0x74a>
 800877a:	9b08      	ldr	r3, [sp, #32]
 800877c:	2b00      	cmp	r3, #0
 800877e:	dd08      	ble.n	8008792 <_dtoa_r+0x74a>
 8008780:	42b3      	cmp	r3, r6
 8008782:	9a08      	ldr	r2, [sp, #32]
 8008784:	bfa8      	it	ge
 8008786:	4633      	movge	r3, r6
 8008788:	eba8 0803 	sub.w	r8, r8, r3
 800878c:	1af6      	subs	r6, r6, r3
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	9308      	str	r3, [sp, #32]
 8008792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008794:	b1f3      	cbz	r3, 80087d4 <_dtoa_r+0x78c>
 8008796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 80b7 	beq.w	800890c <_dtoa_r+0x8c4>
 800879e:	b18c      	cbz	r4, 80087c4 <_dtoa_r+0x77c>
 80087a0:	4629      	mov	r1, r5
 80087a2:	4622      	mov	r2, r4
 80087a4:	4658      	mov	r0, fp
 80087a6:	f000 fd11 	bl	80091cc <__pow5mult>
 80087aa:	464a      	mov	r2, r9
 80087ac:	4601      	mov	r1, r0
 80087ae:	4605      	mov	r5, r0
 80087b0:	4658      	mov	r0, fp
 80087b2:	f000 fc61 	bl	8009078 <__multiply>
 80087b6:	4649      	mov	r1, r9
 80087b8:	9004      	str	r0, [sp, #16]
 80087ba:	4658      	mov	r0, fp
 80087bc:	f000 fb48 	bl	8008e50 <_Bfree>
 80087c0:	9b04      	ldr	r3, [sp, #16]
 80087c2:	4699      	mov	r9, r3
 80087c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087c6:	1b1a      	subs	r2, r3, r4
 80087c8:	d004      	beq.n	80087d4 <_dtoa_r+0x78c>
 80087ca:	4649      	mov	r1, r9
 80087cc:	4658      	mov	r0, fp
 80087ce:	f000 fcfd 	bl	80091cc <__pow5mult>
 80087d2:	4681      	mov	r9, r0
 80087d4:	2101      	movs	r1, #1
 80087d6:	4658      	mov	r0, fp
 80087d8:	f000 fc38 	bl	800904c <__i2b>
 80087dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087de:	4604      	mov	r4, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 81cf 	beq.w	8008b84 <_dtoa_r+0xb3c>
 80087e6:	461a      	mov	r2, r3
 80087e8:	4601      	mov	r1, r0
 80087ea:	4658      	mov	r0, fp
 80087ec:	f000 fcee 	bl	80091cc <__pow5mult>
 80087f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	4604      	mov	r4, r0
 80087f6:	f300 8095 	bgt.w	8008924 <_dtoa_r+0x8dc>
 80087fa:	9b02      	ldr	r3, [sp, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f040 8087 	bne.w	8008910 <_dtoa_r+0x8c8>
 8008802:	9b03      	ldr	r3, [sp, #12]
 8008804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008808:	2b00      	cmp	r3, #0
 800880a:	f040 8089 	bne.w	8008920 <_dtoa_r+0x8d8>
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008814:	0d1b      	lsrs	r3, r3, #20
 8008816:	051b      	lsls	r3, r3, #20
 8008818:	b12b      	cbz	r3, 8008826 <_dtoa_r+0x7de>
 800881a:	9b08      	ldr	r3, [sp, #32]
 800881c:	3301      	adds	r3, #1
 800881e:	9308      	str	r3, [sp, #32]
 8008820:	f108 0801 	add.w	r8, r8, #1
 8008824:	2301      	movs	r3, #1
 8008826:	930a      	str	r3, [sp, #40]	@ 0x28
 8008828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 81b0 	beq.w	8008b90 <_dtoa_r+0xb48>
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008836:	6918      	ldr	r0, [r3, #16]
 8008838:	f000 fbbc 	bl	8008fb4 <__hi0bits>
 800883c:	f1c0 0020 	rsb	r0, r0, #32
 8008840:	9b08      	ldr	r3, [sp, #32]
 8008842:	4418      	add	r0, r3
 8008844:	f010 001f 	ands.w	r0, r0, #31
 8008848:	d077      	beq.n	800893a <_dtoa_r+0x8f2>
 800884a:	f1c0 0320 	rsb	r3, r0, #32
 800884e:	2b04      	cmp	r3, #4
 8008850:	dd6b      	ble.n	800892a <_dtoa_r+0x8e2>
 8008852:	9b08      	ldr	r3, [sp, #32]
 8008854:	f1c0 001c 	rsb	r0, r0, #28
 8008858:	4403      	add	r3, r0
 800885a:	4480      	add	r8, r0
 800885c:	4406      	add	r6, r0
 800885e:	9308      	str	r3, [sp, #32]
 8008860:	f1b8 0f00 	cmp.w	r8, #0
 8008864:	dd05      	ble.n	8008872 <_dtoa_r+0x82a>
 8008866:	4649      	mov	r1, r9
 8008868:	4642      	mov	r2, r8
 800886a:	4658      	mov	r0, fp
 800886c:	f000 fd08 	bl	8009280 <__lshift>
 8008870:	4681      	mov	r9, r0
 8008872:	9b08      	ldr	r3, [sp, #32]
 8008874:	2b00      	cmp	r3, #0
 8008876:	dd05      	ble.n	8008884 <_dtoa_r+0x83c>
 8008878:	4621      	mov	r1, r4
 800887a:	461a      	mov	r2, r3
 800887c:	4658      	mov	r0, fp
 800887e:	f000 fcff 	bl	8009280 <__lshift>
 8008882:	4604      	mov	r4, r0
 8008884:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008886:	2b00      	cmp	r3, #0
 8008888:	d059      	beq.n	800893e <_dtoa_r+0x8f6>
 800888a:	4621      	mov	r1, r4
 800888c:	4648      	mov	r0, r9
 800888e:	f000 fd63 	bl	8009358 <__mcmp>
 8008892:	2800      	cmp	r0, #0
 8008894:	da53      	bge.n	800893e <_dtoa_r+0x8f6>
 8008896:	1e7b      	subs	r3, r7, #1
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	4649      	mov	r1, r9
 800889c:	2300      	movs	r3, #0
 800889e:	220a      	movs	r2, #10
 80088a0:	4658      	mov	r0, fp
 80088a2:	f000 faf7 	bl	8008e94 <__multadd>
 80088a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088a8:	4681      	mov	r9, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 8172 	beq.w	8008b94 <_dtoa_r+0xb4c>
 80088b0:	2300      	movs	r3, #0
 80088b2:	4629      	mov	r1, r5
 80088b4:	220a      	movs	r2, #10
 80088b6:	4658      	mov	r0, fp
 80088b8:	f000 faec 	bl	8008e94 <__multadd>
 80088bc:	9b00      	ldr	r3, [sp, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	4605      	mov	r5, r0
 80088c2:	dc67      	bgt.n	8008994 <_dtoa_r+0x94c>
 80088c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	dc41      	bgt.n	800894e <_dtoa_r+0x906>
 80088ca:	e063      	b.n	8008994 <_dtoa_r+0x94c>
 80088cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80088ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80088d2:	e746      	b.n	8008762 <_dtoa_r+0x71a>
 80088d4:	9b07      	ldr	r3, [sp, #28]
 80088d6:	1e5c      	subs	r4, r3, #1
 80088d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088da:	42a3      	cmp	r3, r4
 80088dc:	bfbf      	itttt	lt
 80088de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80088e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80088e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80088e4:	1ae3      	sublt	r3, r4, r3
 80088e6:	bfb4      	ite	lt
 80088e8:	18d2      	addlt	r2, r2, r3
 80088ea:	1b1c      	subge	r4, r3, r4
 80088ec:	9b07      	ldr	r3, [sp, #28]
 80088ee:	bfbc      	itt	lt
 80088f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80088f2:	2400      	movlt	r4, #0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bfb5      	itete	lt
 80088f8:	eba8 0603 	sublt.w	r6, r8, r3
 80088fc:	9b07      	ldrge	r3, [sp, #28]
 80088fe:	2300      	movlt	r3, #0
 8008900:	4646      	movge	r6, r8
 8008902:	e730      	b.n	8008766 <_dtoa_r+0x71e>
 8008904:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008906:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008908:	4646      	mov	r6, r8
 800890a:	e735      	b.n	8008778 <_dtoa_r+0x730>
 800890c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800890e:	e75c      	b.n	80087ca <_dtoa_r+0x782>
 8008910:	2300      	movs	r3, #0
 8008912:	e788      	b.n	8008826 <_dtoa_r+0x7de>
 8008914:	3fe00000 	.word	0x3fe00000
 8008918:	40240000 	.word	0x40240000
 800891c:	40140000 	.word	0x40140000
 8008920:	9b02      	ldr	r3, [sp, #8]
 8008922:	e780      	b.n	8008826 <_dtoa_r+0x7de>
 8008924:	2300      	movs	r3, #0
 8008926:	930a      	str	r3, [sp, #40]	@ 0x28
 8008928:	e782      	b.n	8008830 <_dtoa_r+0x7e8>
 800892a:	d099      	beq.n	8008860 <_dtoa_r+0x818>
 800892c:	9a08      	ldr	r2, [sp, #32]
 800892e:	331c      	adds	r3, #28
 8008930:	441a      	add	r2, r3
 8008932:	4498      	add	r8, r3
 8008934:	441e      	add	r6, r3
 8008936:	9208      	str	r2, [sp, #32]
 8008938:	e792      	b.n	8008860 <_dtoa_r+0x818>
 800893a:	4603      	mov	r3, r0
 800893c:	e7f6      	b.n	800892c <_dtoa_r+0x8e4>
 800893e:	9b07      	ldr	r3, [sp, #28]
 8008940:	9704      	str	r7, [sp, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	dc20      	bgt.n	8008988 <_dtoa_r+0x940>
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894a:	2b02      	cmp	r3, #2
 800894c:	dd1e      	ble.n	800898c <_dtoa_r+0x944>
 800894e:	9b00      	ldr	r3, [sp, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f47f aec0 	bne.w	80086d6 <_dtoa_r+0x68e>
 8008956:	4621      	mov	r1, r4
 8008958:	2205      	movs	r2, #5
 800895a:	4658      	mov	r0, fp
 800895c:	f000 fa9a 	bl	8008e94 <__multadd>
 8008960:	4601      	mov	r1, r0
 8008962:	4604      	mov	r4, r0
 8008964:	4648      	mov	r0, r9
 8008966:	f000 fcf7 	bl	8009358 <__mcmp>
 800896a:	2800      	cmp	r0, #0
 800896c:	f77f aeb3 	ble.w	80086d6 <_dtoa_r+0x68e>
 8008970:	4656      	mov	r6, sl
 8008972:	2331      	movs	r3, #49	@ 0x31
 8008974:	f806 3b01 	strb.w	r3, [r6], #1
 8008978:	9b04      	ldr	r3, [sp, #16]
 800897a:	3301      	adds	r3, #1
 800897c:	9304      	str	r3, [sp, #16]
 800897e:	e6ae      	b.n	80086de <_dtoa_r+0x696>
 8008980:	9c07      	ldr	r4, [sp, #28]
 8008982:	9704      	str	r7, [sp, #16]
 8008984:	4625      	mov	r5, r4
 8008986:	e7f3      	b.n	8008970 <_dtoa_r+0x928>
 8008988:	9b07      	ldr	r3, [sp, #28]
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 8104 	beq.w	8008b9c <_dtoa_r+0xb54>
 8008994:	2e00      	cmp	r6, #0
 8008996:	dd05      	ble.n	80089a4 <_dtoa_r+0x95c>
 8008998:	4629      	mov	r1, r5
 800899a:	4632      	mov	r2, r6
 800899c:	4658      	mov	r0, fp
 800899e:	f000 fc6f 	bl	8009280 <__lshift>
 80089a2:	4605      	mov	r5, r0
 80089a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d05a      	beq.n	8008a60 <_dtoa_r+0xa18>
 80089aa:	6869      	ldr	r1, [r5, #4]
 80089ac:	4658      	mov	r0, fp
 80089ae:	f000 fa0f 	bl	8008dd0 <_Balloc>
 80089b2:	4606      	mov	r6, r0
 80089b4:	b928      	cbnz	r0, 80089c2 <_dtoa_r+0x97a>
 80089b6:	4b84      	ldr	r3, [pc, #528]	@ (8008bc8 <_dtoa_r+0xb80>)
 80089b8:	4602      	mov	r2, r0
 80089ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089be:	f7ff bb5a 	b.w	8008076 <_dtoa_r+0x2e>
 80089c2:	692a      	ldr	r2, [r5, #16]
 80089c4:	3202      	adds	r2, #2
 80089c6:	0092      	lsls	r2, r2, #2
 80089c8:	f105 010c 	add.w	r1, r5, #12
 80089cc:	300c      	adds	r0, #12
 80089ce:	f7ff fa9e 	bl	8007f0e <memcpy>
 80089d2:	2201      	movs	r2, #1
 80089d4:	4631      	mov	r1, r6
 80089d6:	4658      	mov	r0, fp
 80089d8:	f000 fc52 	bl	8009280 <__lshift>
 80089dc:	f10a 0301 	add.w	r3, sl, #1
 80089e0:	9307      	str	r3, [sp, #28]
 80089e2:	9b00      	ldr	r3, [sp, #0]
 80089e4:	4453      	add	r3, sl
 80089e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089e8:	9b02      	ldr	r3, [sp, #8]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	462f      	mov	r7, r5
 80089f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80089f2:	4605      	mov	r5, r0
 80089f4:	9b07      	ldr	r3, [sp, #28]
 80089f6:	4621      	mov	r1, r4
 80089f8:	3b01      	subs	r3, #1
 80089fa:	4648      	mov	r0, r9
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	f7ff fa9b 	bl	8007f38 <quorem>
 8008a02:	4639      	mov	r1, r7
 8008a04:	9002      	str	r0, [sp, #8]
 8008a06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a0a:	4648      	mov	r0, r9
 8008a0c:	f000 fca4 	bl	8009358 <__mcmp>
 8008a10:	462a      	mov	r2, r5
 8008a12:	9008      	str	r0, [sp, #32]
 8008a14:	4621      	mov	r1, r4
 8008a16:	4658      	mov	r0, fp
 8008a18:	f000 fcba 	bl	8009390 <__mdiff>
 8008a1c:	68c2      	ldr	r2, [r0, #12]
 8008a1e:	4606      	mov	r6, r0
 8008a20:	bb02      	cbnz	r2, 8008a64 <_dtoa_r+0xa1c>
 8008a22:	4601      	mov	r1, r0
 8008a24:	4648      	mov	r0, r9
 8008a26:	f000 fc97 	bl	8009358 <__mcmp>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4658      	mov	r0, fp
 8008a30:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a32:	f000 fa0d 	bl	8008e50 <_Bfree>
 8008a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a3a:	9e07      	ldr	r6, [sp, #28]
 8008a3c:	ea43 0102 	orr.w	r1, r3, r2
 8008a40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a42:	4319      	orrs	r1, r3
 8008a44:	d110      	bne.n	8008a68 <_dtoa_r+0xa20>
 8008a46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a4a:	d029      	beq.n	8008aa0 <_dtoa_r+0xa58>
 8008a4c:	9b08      	ldr	r3, [sp, #32]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	dd02      	ble.n	8008a58 <_dtoa_r+0xa10>
 8008a52:	9b02      	ldr	r3, [sp, #8]
 8008a54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	f883 8000 	strb.w	r8, [r3]
 8008a5e:	e63f      	b.n	80086e0 <_dtoa_r+0x698>
 8008a60:	4628      	mov	r0, r5
 8008a62:	e7bb      	b.n	80089dc <_dtoa_r+0x994>
 8008a64:	2201      	movs	r2, #1
 8008a66:	e7e1      	b.n	8008a2c <_dtoa_r+0x9e4>
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	db04      	blt.n	8008a78 <_dtoa_r+0xa30>
 8008a6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a70:	430b      	orrs	r3, r1
 8008a72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a74:	430b      	orrs	r3, r1
 8008a76:	d120      	bne.n	8008aba <_dtoa_r+0xa72>
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	dded      	ble.n	8008a58 <_dtoa_r+0xa10>
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	2201      	movs	r2, #1
 8008a80:	4658      	mov	r0, fp
 8008a82:	f000 fbfd 	bl	8009280 <__lshift>
 8008a86:	4621      	mov	r1, r4
 8008a88:	4681      	mov	r9, r0
 8008a8a:	f000 fc65 	bl	8009358 <__mcmp>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	dc03      	bgt.n	8008a9a <_dtoa_r+0xa52>
 8008a92:	d1e1      	bne.n	8008a58 <_dtoa_r+0xa10>
 8008a94:	f018 0f01 	tst.w	r8, #1
 8008a98:	d0de      	beq.n	8008a58 <_dtoa_r+0xa10>
 8008a9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a9e:	d1d8      	bne.n	8008a52 <_dtoa_r+0xa0a>
 8008aa0:	9a00      	ldr	r2, [sp, #0]
 8008aa2:	2339      	movs	r3, #57	@ 0x39
 8008aa4:	7013      	strb	r3, [r2, #0]
 8008aa6:	4633      	mov	r3, r6
 8008aa8:	461e      	mov	r6, r3
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ab0:	2a39      	cmp	r2, #57	@ 0x39
 8008ab2:	d052      	beq.n	8008b5a <_dtoa_r+0xb12>
 8008ab4:	3201      	adds	r2, #1
 8008ab6:	701a      	strb	r2, [r3, #0]
 8008ab8:	e612      	b.n	80086e0 <_dtoa_r+0x698>
 8008aba:	2a00      	cmp	r2, #0
 8008abc:	dd07      	ble.n	8008ace <_dtoa_r+0xa86>
 8008abe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ac2:	d0ed      	beq.n	8008aa0 <_dtoa_r+0xa58>
 8008ac4:	9a00      	ldr	r2, [sp, #0]
 8008ac6:	f108 0301 	add.w	r3, r8, #1
 8008aca:	7013      	strb	r3, [r2, #0]
 8008acc:	e608      	b.n	80086e0 <_dtoa_r+0x698>
 8008ace:	9b07      	ldr	r3, [sp, #28]
 8008ad0:	9a07      	ldr	r2, [sp, #28]
 8008ad2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d028      	beq.n	8008b2e <_dtoa_r+0xae6>
 8008adc:	4649      	mov	r1, r9
 8008ade:	2300      	movs	r3, #0
 8008ae0:	220a      	movs	r2, #10
 8008ae2:	4658      	mov	r0, fp
 8008ae4:	f000 f9d6 	bl	8008e94 <__multadd>
 8008ae8:	42af      	cmp	r7, r5
 8008aea:	4681      	mov	r9, r0
 8008aec:	f04f 0300 	mov.w	r3, #0
 8008af0:	f04f 020a 	mov.w	r2, #10
 8008af4:	4639      	mov	r1, r7
 8008af6:	4658      	mov	r0, fp
 8008af8:	d107      	bne.n	8008b0a <_dtoa_r+0xac2>
 8008afa:	f000 f9cb 	bl	8008e94 <__multadd>
 8008afe:	4607      	mov	r7, r0
 8008b00:	4605      	mov	r5, r0
 8008b02:	9b07      	ldr	r3, [sp, #28]
 8008b04:	3301      	adds	r3, #1
 8008b06:	9307      	str	r3, [sp, #28]
 8008b08:	e774      	b.n	80089f4 <_dtoa_r+0x9ac>
 8008b0a:	f000 f9c3 	bl	8008e94 <__multadd>
 8008b0e:	4629      	mov	r1, r5
 8008b10:	4607      	mov	r7, r0
 8008b12:	2300      	movs	r3, #0
 8008b14:	220a      	movs	r2, #10
 8008b16:	4658      	mov	r0, fp
 8008b18:	f000 f9bc 	bl	8008e94 <__multadd>
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	e7f0      	b.n	8008b02 <_dtoa_r+0xaba>
 8008b20:	9b00      	ldr	r3, [sp, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	bfcc      	ite	gt
 8008b26:	461e      	movgt	r6, r3
 8008b28:	2601      	movle	r6, #1
 8008b2a:	4456      	add	r6, sl
 8008b2c:	2700      	movs	r7, #0
 8008b2e:	4649      	mov	r1, r9
 8008b30:	2201      	movs	r2, #1
 8008b32:	4658      	mov	r0, fp
 8008b34:	f000 fba4 	bl	8009280 <__lshift>
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4681      	mov	r9, r0
 8008b3c:	f000 fc0c 	bl	8009358 <__mcmp>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	dcb0      	bgt.n	8008aa6 <_dtoa_r+0xa5e>
 8008b44:	d102      	bne.n	8008b4c <_dtoa_r+0xb04>
 8008b46:	f018 0f01 	tst.w	r8, #1
 8008b4a:	d1ac      	bne.n	8008aa6 <_dtoa_r+0xa5e>
 8008b4c:	4633      	mov	r3, r6
 8008b4e:	461e      	mov	r6, r3
 8008b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b54:	2a30      	cmp	r2, #48	@ 0x30
 8008b56:	d0fa      	beq.n	8008b4e <_dtoa_r+0xb06>
 8008b58:	e5c2      	b.n	80086e0 <_dtoa_r+0x698>
 8008b5a:	459a      	cmp	sl, r3
 8008b5c:	d1a4      	bne.n	8008aa8 <_dtoa_r+0xa60>
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	3301      	adds	r3, #1
 8008b62:	9304      	str	r3, [sp, #16]
 8008b64:	2331      	movs	r3, #49	@ 0x31
 8008b66:	f88a 3000 	strb.w	r3, [sl]
 8008b6a:	e5b9      	b.n	80086e0 <_dtoa_r+0x698>
 8008b6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008bcc <_dtoa_r+0xb84>
 8008b72:	b11b      	cbz	r3, 8008b7c <_dtoa_r+0xb34>
 8008b74:	f10a 0308 	add.w	r3, sl, #8
 8008b78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	4650      	mov	r0, sl
 8008b7e:	b019      	add	sp, #100	@ 0x64
 8008b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	f77f ae37 	ble.w	80087fa <_dtoa_r+0x7b2>
 8008b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b90:	2001      	movs	r0, #1
 8008b92:	e655      	b.n	8008840 <_dtoa_r+0x7f8>
 8008b94:	9b00      	ldr	r3, [sp, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f77f aed6 	ble.w	8008948 <_dtoa_r+0x900>
 8008b9c:	4656      	mov	r6, sl
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	4648      	mov	r0, r9
 8008ba2:	f7ff f9c9 	bl	8007f38 <quorem>
 8008ba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008baa:	f806 8b01 	strb.w	r8, [r6], #1
 8008bae:	9b00      	ldr	r3, [sp, #0]
 8008bb0:	eba6 020a 	sub.w	r2, r6, sl
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	ddb3      	ble.n	8008b20 <_dtoa_r+0xad8>
 8008bb8:	4649      	mov	r1, r9
 8008bba:	2300      	movs	r3, #0
 8008bbc:	220a      	movs	r2, #10
 8008bbe:	4658      	mov	r0, fp
 8008bc0:	f000 f968 	bl	8008e94 <__multadd>
 8008bc4:	4681      	mov	r9, r0
 8008bc6:	e7ea      	b.n	8008b9e <_dtoa_r+0xb56>
 8008bc8:	0800cf86 	.word	0x0800cf86
 8008bcc:	0800cf0a 	.word	0x0800cf0a

08008bd0 <_free_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d041      	beq.n	8008c5c <_free_r+0x8c>
 8008bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bdc:	1f0c      	subs	r4, r1, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bfb8      	it	lt
 8008be2:	18e4      	addlt	r4, r4, r3
 8008be4:	f000 f8e8 	bl	8008db8 <__malloc_lock>
 8008be8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c60 <_free_r+0x90>)
 8008bea:	6813      	ldr	r3, [r2, #0]
 8008bec:	b933      	cbnz	r3, 8008bfc <_free_r+0x2c>
 8008bee:	6063      	str	r3, [r4, #4]
 8008bf0:	6014      	str	r4, [r2, #0]
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf8:	f000 b8e4 	b.w	8008dc4 <__malloc_unlock>
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	d908      	bls.n	8008c12 <_free_r+0x42>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	1821      	adds	r1, r4, r0
 8008c04:	428b      	cmp	r3, r1
 8008c06:	bf01      	itttt	eq
 8008c08:	6819      	ldreq	r1, [r3, #0]
 8008c0a:	685b      	ldreq	r3, [r3, #4]
 8008c0c:	1809      	addeq	r1, r1, r0
 8008c0e:	6021      	streq	r1, [r4, #0]
 8008c10:	e7ed      	b.n	8008bee <_free_r+0x1e>
 8008c12:	461a      	mov	r2, r3
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	b10b      	cbz	r3, 8008c1c <_free_r+0x4c>
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	d9fa      	bls.n	8008c12 <_free_r+0x42>
 8008c1c:	6811      	ldr	r1, [r2, #0]
 8008c1e:	1850      	adds	r0, r2, r1
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d10b      	bne.n	8008c3c <_free_r+0x6c>
 8008c24:	6820      	ldr	r0, [r4, #0]
 8008c26:	4401      	add	r1, r0
 8008c28:	1850      	adds	r0, r2, r1
 8008c2a:	4283      	cmp	r3, r0
 8008c2c:	6011      	str	r1, [r2, #0]
 8008c2e:	d1e0      	bne.n	8008bf2 <_free_r+0x22>
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	6053      	str	r3, [r2, #4]
 8008c36:	4408      	add	r0, r1
 8008c38:	6010      	str	r0, [r2, #0]
 8008c3a:	e7da      	b.n	8008bf2 <_free_r+0x22>
 8008c3c:	d902      	bls.n	8008c44 <_free_r+0x74>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	602b      	str	r3, [r5, #0]
 8008c42:	e7d6      	b.n	8008bf2 <_free_r+0x22>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	1821      	adds	r1, r4, r0
 8008c48:	428b      	cmp	r3, r1
 8008c4a:	bf04      	itt	eq
 8008c4c:	6819      	ldreq	r1, [r3, #0]
 8008c4e:	685b      	ldreq	r3, [r3, #4]
 8008c50:	6063      	str	r3, [r4, #4]
 8008c52:	bf04      	itt	eq
 8008c54:	1809      	addeq	r1, r1, r0
 8008c56:	6021      	streq	r1, [r4, #0]
 8008c58:	6054      	str	r4, [r2, #4]
 8008c5a:	e7ca      	b.n	8008bf2 <_free_r+0x22>
 8008c5c:	bd38      	pop	{r3, r4, r5, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000f30 	.word	0x20000f30

08008c64 <malloc>:
 8008c64:	4b02      	ldr	r3, [pc, #8]	@ (8008c70 <malloc+0xc>)
 8008c66:	4601      	mov	r1, r0
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f000 b825 	b.w	8008cb8 <_malloc_r>
 8008c6e:	bf00      	nop
 8008c70:	20000300 	.word	0x20000300

08008c74 <sbrk_aligned>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	4e0f      	ldr	r6, [pc, #60]	@ (8008cb4 <sbrk_aligned+0x40>)
 8008c78:	460c      	mov	r4, r1
 8008c7a:	6831      	ldr	r1, [r6, #0]
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	b911      	cbnz	r1, 8008c86 <sbrk_aligned+0x12>
 8008c80:	f001 fd90 	bl	800a7a4 <_sbrk_r>
 8008c84:	6030      	str	r0, [r6, #0]
 8008c86:	4621      	mov	r1, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f001 fd8b 	bl	800a7a4 <_sbrk_r>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d103      	bne.n	8008c9a <sbrk_aligned+0x26>
 8008c92:	f04f 34ff 	mov.w	r4, #4294967295
 8008c96:	4620      	mov	r0, r4
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
 8008c9a:	1cc4      	adds	r4, r0, #3
 8008c9c:	f024 0403 	bic.w	r4, r4, #3
 8008ca0:	42a0      	cmp	r0, r4
 8008ca2:	d0f8      	beq.n	8008c96 <sbrk_aligned+0x22>
 8008ca4:	1a21      	subs	r1, r4, r0
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f001 fd7c 	bl	800a7a4 <_sbrk_r>
 8008cac:	3001      	adds	r0, #1
 8008cae:	d1f2      	bne.n	8008c96 <sbrk_aligned+0x22>
 8008cb0:	e7ef      	b.n	8008c92 <sbrk_aligned+0x1e>
 8008cb2:	bf00      	nop
 8008cb4:	20000f2c 	.word	0x20000f2c

08008cb8 <_malloc_r>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	1ccd      	adds	r5, r1, #3
 8008cbe:	f025 0503 	bic.w	r5, r5, #3
 8008cc2:	3508      	adds	r5, #8
 8008cc4:	2d0c      	cmp	r5, #12
 8008cc6:	bf38      	it	cc
 8008cc8:	250c      	movcc	r5, #12
 8008cca:	2d00      	cmp	r5, #0
 8008ccc:	4606      	mov	r6, r0
 8008cce:	db01      	blt.n	8008cd4 <_malloc_r+0x1c>
 8008cd0:	42a9      	cmp	r1, r5
 8008cd2:	d904      	bls.n	8008cde <_malloc_r+0x26>
 8008cd4:	230c      	movs	r3, #12
 8008cd6:	6033      	str	r3, [r6, #0]
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008db4 <_malloc_r+0xfc>
 8008ce2:	f000 f869 	bl	8008db8 <__malloc_lock>
 8008ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8008cea:	461c      	mov	r4, r3
 8008cec:	bb44      	cbnz	r4, 8008d40 <_malloc_r+0x88>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff ffbf 	bl	8008c74 <sbrk_aligned>
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	d158      	bne.n	8008dae <_malloc_r+0xf6>
 8008cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8008d00:	4627      	mov	r7, r4
 8008d02:	2f00      	cmp	r7, #0
 8008d04:	d143      	bne.n	8008d8e <_malloc_r+0xd6>
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	d04b      	beq.n	8008da2 <_malloc_r+0xea>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	4630      	mov	r0, r6
 8008d10:	eb04 0903 	add.w	r9, r4, r3
 8008d14:	f001 fd46 	bl	800a7a4 <_sbrk_r>
 8008d18:	4581      	cmp	r9, r0
 8008d1a:	d142      	bne.n	8008da2 <_malloc_r+0xea>
 8008d1c:	6821      	ldr	r1, [r4, #0]
 8008d1e:	1a6d      	subs	r5, r5, r1
 8008d20:	4629      	mov	r1, r5
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff ffa6 	bl	8008c74 <sbrk_aligned>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d03a      	beq.n	8008da2 <_malloc_r+0xea>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	442b      	add	r3, r5
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	f8d8 3000 	ldr.w	r3, [r8]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	bb62      	cbnz	r2, 8008d94 <_malloc_r+0xdc>
 8008d3a:	f8c8 7000 	str.w	r7, [r8]
 8008d3e:	e00f      	b.n	8008d60 <_malloc_r+0xa8>
 8008d40:	6822      	ldr	r2, [r4, #0]
 8008d42:	1b52      	subs	r2, r2, r5
 8008d44:	d420      	bmi.n	8008d88 <_malloc_r+0xd0>
 8008d46:	2a0b      	cmp	r2, #11
 8008d48:	d917      	bls.n	8008d7a <_malloc_r+0xc2>
 8008d4a:	1961      	adds	r1, r4, r5
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	6025      	str	r5, [r4, #0]
 8008d50:	bf18      	it	ne
 8008d52:	6059      	strne	r1, [r3, #4]
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	bf08      	it	eq
 8008d58:	f8c8 1000 	streq.w	r1, [r8]
 8008d5c:	5162      	str	r2, [r4, r5]
 8008d5e:	604b      	str	r3, [r1, #4]
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f82f 	bl	8008dc4 <__malloc_unlock>
 8008d66:	f104 000b 	add.w	r0, r4, #11
 8008d6a:	1d23      	adds	r3, r4, #4
 8008d6c:	f020 0007 	bic.w	r0, r0, #7
 8008d70:	1ac2      	subs	r2, r0, r3
 8008d72:	bf1c      	itt	ne
 8008d74:	1a1b      	subne	r3, r3, r0
 8008d76:	50a3      	strne	r3, [r4, r2]
 8008d78:	e7af      	b.n	8008cda <_malloc_r+0x22>
 8008d7a:	6862      	ldr	r2, [r4, #4]
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	bf0c      	ite	eq
 8008d80:	f8c8 2000 	streq.w	r2, [r8]
 8008d84:	605a      	strne	r2, [r3, #4]
 8008d86:	e7eb      	b.n	8008d60 <_malloc_r+0xa8>
 8008d88:	4623      	mov	r3, r4
 8008d8a:	6864      	ldr	r4, [r4, #4]
 8008d8c:	e7ae      	b.n	8008cec <_malloc_r+0x34>
 8008d8e:	463c      	mov	r4, r7
 8008d90:	687f      	ldr	r7, [r7, #4]
 8008d92:	e7b6      	b.n	8008d02 <_malloc_r+0x4a>
 8008d94:	461a      	mov	r2, r3
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	d1fb      	bne.n	8008d94 <_malloc_r+0xdc>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	6053      	str	r3, [r2, #4]
 8008da0:	e7de      	b.n	8008d60 <_malloc_r+0xa8>
 8008da2:	230c      	movs	r3, #12
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	4630      	mov	r0, r6
 8008da8:	f000 f80c 	bl	8008dc4 <__malloc_unlock>
 8008dac:	e794      	b.n	8008cd8 <_malloc_r+0x20>
 8008dae:	6005      	str	r5, [r0, #0]
 8008db0:	e7d6      	b.n	8008d60 <_malloc_r+0xa8>
 8008db2:	bf00      	nop
 8008db4:	20000f30 	.word	0x20000f30

08008db8 <__malloc_lock>:
 8008db8:	4801      	ldr	r0, [pc, #4]	@ (8008dc0 <__malloc_lock+0x8>)
 8008dba:	f7ff b8a6 	b.w	8007f0a <__retarget_lock_acquire_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20000f28 	.word	0x20000f28

08008dc4 <__malloc_unlock>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	@ (8008dcc <__malloc_unlock+0x8>)
 8008dc6:	f7ff b8a1 	b.w	8007f0c <__retarget_lock_release_recursive>
 8008dca:	bf00      	nop
 8008dcc:	20000f28 	.word	0x20000f28

08008dd0 <_Balloc>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	69c6      	ldr	r6, [r0, #28]
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	b976      	cbnz	r6, 8008df8 <_Balloc+0x28>
 8008dda:	2010      	movs	r0, #16
 8008ddc:	f7ff ff42 	bl	8008c64 <malloc>
 8008de0:	4602      	mov	r2, r0
 8008de2:	61e0      	str	r0, [r4, #28]
 8008de4:	b920      	cbnz	r0, 8008df0 <_Balloc+0x20>
 8008de6:	4b18      	ldr	r3, [pc, #96]	@ (8008e48 <_Balloc+0x78>)
 8008de8:	4818      	ldr	r0, [pc, #96]	@ (8008e4c <_Balloc+0x7c>)
 8008dea:	216b      	movs	r1, #107	@ 0x6b
 8008dec:	f001 fcf4 	bl	800a7d8 <__assert_func>
 8008df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008df4:	6006      	str	r6, [r0, #0]
 8008df6:	60c6      	str	r6, [r0, #12]
 8008df8:	69e6      	ldr	r6, [r4, #28]
 8008dfa:	68f3      	ldr	r3, [r6, #12]
 8008dfc:	b183      	cbz	r3, 8008e20 <_Balloc+0x50>
 8008dfe:	69e3      	ldr	r3, [r4, #28]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e06:	b9b8      	cbnz	r0, 8008e38 <_Balloc+0x68>
 8008e08:	2101      	movs	r1, #1
 8008e0a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e0e:	1d72      	adds	r2, r6, #5
 8008e10:	0092      	lsls	r2, r2, #2
 8008e12:	4620      	mov	r0, r4
 8008e14:	f001 fcfe 	bl	800a814 <_calloc_r>
 8008e18:	b160      	cbz	r0, 8008e34 <_Balloc+0x64>
 8008e1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e1e:	e00e      	b.n	8008e3e <_Balloc+0x6e>
 8008e20:	2221      	movs	r2, #33	@ 0x21
 8008e22:	2104      	movs	r1, #4
 8008e24:	4620      	mov	r0, r4
 8008e26:	f001 fcf5 	bl	800a814 <_calloc_r>
 8008e2a:	69e3      	ldr	r3, [r4, #28]
 8008e2c:	60f0      	str	r0, [r6, #12]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e4      	bne.n	8008dfe <_Balloc+0x2e>
 8008e34:	2000      	movs	r0, #0
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	6802      	ldr	r2, [r0, #0]
 8008e3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e44:	e7f7      	b.n	8008e36 <_Balloc+0x66>
 8008e46:	bf00      	nop
 8008e48:	0800cf17 	.word	0x0800cf17
 8008e4c:	0800cf97 	.word	0x0800cf97

08008e50 <_Bfree>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	69c6      	ldr	r6, [r0, #28]
 8008e54:	4605      	mov	r5, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	b976      	cbnz	r6, 8008e78 <_Bfree+0x28>
 8008e5a:	2010      	movs	r0, #16
 8008e5c:	f7ff ff02 	bl	8008c64 <malloc>
 8008e60:	4602      	mov	r2, r0
 8008e62:	61e8      	str	r0, [r5, #28]
 8008e64:	b920      	cbnz	r0, 8008e70 <_Bfree+0x20>
 8008e66:	4b09      	ldr	r3, [pc, #36]	@ (8008e8c <_Bfree+0x3c>)
 8008e68:	4809      	ldr	r0, [pc, #36]	@ (8008e90 <_Bfree+0x40>)
 8008e6a:	218f      	movs	r1, #143	@ 0x8f
 8008e6c:	f001 fcb4 	bl	800a7d8 <__assert_func>
 8008e70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e74:	6006      	str	r6, [r0, #0]
 8008e76:	60c6      	str	r6, [r0, #12]
 8008e78:	b13c      	cbz	r4, 8008e8a <_Bfree+0x3a>
 8008e7a:	69eb      	ldr	r3, [r5, #28]
 8008e7c:	6862      	ldr	r2, [r4, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e84:	6021      	str	r1, [r4, #0]
 8008e86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	0800cf17 	.word	0x0800cf17
 8008e90:	0800cf97 	.word	0x0800cf97

08008e94 <__multadd>:
 8008e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	690d      	ldr	r5, [r1, #16]
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	461e      	mov	r6, r3
 8008ea0:	f101 0c14 	add.w	ip, r1, #20
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	f8dc 3000 	ldr.w	r3, [ip]
 8008eaa:	b299      	uxth	r1, r3
 8008eac:	fb02 6101 	mla	r1, r2, r1, r6
 8008eb0:	0c1e      	lsrs	r6, r3, #16
 8008eb2:	0c0b      	lsrs	r3, r1, #16
 8008eb4:	fb02 3306 	mla	r3, r2, r6, r3
 8008eb8:	b289      	uxth	r1, r1
 8008eba:	3001      	adds	r0, #1
 8008ebc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ec0:	4285      	cmp	r5, r0
 8008ec2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008eca:	dcec      	bgt.n	8008ea6 <__multadd+0x12>
 8008ecc:	b30e      	cbz	r6, 8008f12 <__multadd+0x7e>
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	42ab      	cmp	r3, r5
 8008ed2:	dc19      	bgt.n	8008f08 <__multadd+0x74>
 8008ed4:	6861      	ldr	r1, [r4, #4]
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	3101      	adds	r1, #1
 8008eda:	f7ff ff79 	bl	8008dd0 <_Balloc>
 8008ede:	4680      	mov	r8, r0
 8008ee0:	b928      	cbnz	r0, 8008eee <__multadd+0x5a>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8008f18 <__multadd+0x84>)
 8008ee6:	480d      	ldr	r0, [pc, #52]	@ (8008f1c <__multadd+0x88>)
 8008ee8:	21ba      	movs	r1, #186	@ 0xba
 8008eea:	f001 fc75 	bl	800a7d8 <__assert_func>
 8008eee:	6922      	ldr	r2, [r4, #16]
 8008ef0:	3202      	adds	r2, #2
 8008ef2:	f104 010c 	add.w	r1, r4, #12
 8008ef6:	0092      	lsls	r2, r2, #2
 8008ef8:	300c      	adds	r0, #12
 8008efa:	f7ff f808 	bl	8007f0e <memcpy>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff ffa5 	bl	8008e50 <_Bfree>
 8008f06:	4644      	mov	r4, r8
 8008f08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	615e      	str	r6, [r3, #20]
 8008f10:	6125      	str	r5, [r4, #16]
 8008f12:	4620      	mov	r0, r4
 8008f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f18:	0800cf86 	.word	0x0800cf86
 8008f1c:	0800cf97 	.word	0x0800cf97

08008f20 <__s2b>:
 8008f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f24:	460c      	mov	r4, r1
 8008f26:	4615      	mov	r5, r2
 8008f28:	461f      	mov	r7, r3
 8008f2a:	2209      	movs	r2, #9
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	4606      	mov	r6, r0
 8008f30:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f34:	2100      	movs	r1, #0
 8008f36:	2201      	movs	r2, #1
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	db09      	blt.n	8008f50 <__s2b+0x30>
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7ff ff47 	bl	8008dd0 <_Balloc>
 8008f42:	b940      	cbnz	r0, 8008f56 <__s2b+0x36>
 8008f44:	4602      	mov	r2, r0
 8008f46:	4b19      	ldr	r3, [pc, #100]	@ (8008fac <__s2b+0x8c>)
 8008f48:	4819      	ldr	r0, [pc, #100]	@ (8008fb0 <__s2b+0x90>)
 8008f4a:	21d3      	movs	r1, #211	@ 0xd3
 8008f4c:	f001 fc44 	bl	800a7d8 <__assert_func>
 8008f50:	0052      	lsls	r2, r2, #1
 8008f52:	3101      	adds	r1, #1
 8008f54:	e7f0      	b.n	8008f38 <__s2b+0x18>
 8008f56:	9b08      	ldr	r3, [sp, #32]
 8008f58:	6143      	str	r3, [r0, #20]
 8008f5a:	2d09      	cmp	r5, #9
 8008f5c:	f04f 0301 	mov.w	r3, #1
 8008f60:	6103      	str	r3, [r0, #16]
 8008f62:	dd16      	ble.n	8008f92 <__s2b+0x72>
 8008f64:	f104 0909 	add.w	r9, r4, #9
 8008f68:	46c8      	mov	r8, r9
 8008f6a:	442c      	add	r4, r5
 8008f6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f70:	4601      	mov	r1, r0
 8008f72:	3b30      	subs	r3, #48	@ 0x30
 8008f74:	220a      	movs	r2, #10
 8008f76:	4630      	mov	r0, r6
 8008f78:	f7ff ff8c 	bl	8008e94 <__multadd>
 8008f7c:	45a0      	cmp	r8, r4
 8008f7e:	d1f5      	bne.n	8008f6c <__s2b+0x4c>
 8008f80:	f1a5 0408 	sub.w	r4, r5, #8
 8008f84:	444c      	add	r4, r9
 8008f86:	1b2d      	subs	r5, r5, r4
 8008f88:	1963      	adds	r3, r4, r5
 8008f8a:	42bb      	cmp	r3, r7
 8008f8c:	db04      	blt.n	8008f98 <__s2b+0x78>
 8008f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f92:	340a      	adds	r4, #10
 8008f94:	2509      	movs	r5, #9
 8008f96:	e7f6      	b.n	8008f86 <__s2b+0x66>
 8008f98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	3b30      	subs	r3, #48	@ 0x30
 8008fa0:	220a      	movs	r2, #10
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7ff ff76 	bl	8008e94 <__multadd>
 8008fa8:	e7ee      	b.n	8008f88 <__s2b+0x68>
 8008faa:	bf00      	nop
 8008fac:	0800cf86 	.word	0x0800cf86
 8008fb0:	0800cf97 	.word	0x0800cf97

08008fb4 <__hi0bits>:
 8008fb4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008fb8:	4603      	mov	r3, r0
 8008fba:	bf36      	itet	cc
 8008fbc:	0403      	lslcc	r3, r0, #16
 8008fbe:	2000      	movcs	r0, #0
 8008fc0:	2010      	movcc	r0, #16
 8008fc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fc6:	bf3c      	itt	cc
 8008fc8:	021b      	lslcc	r3, r3, #8
 8008fca:	3008      	addcc	r0, #8
 8008fcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fd0:	bf3c      	itt	cc
 8008fd2:	011b      	lslcc	r3, r3, #4
 8008fd4:	3004      	addcc	r0, #4
 8008fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fda:	bf3c      	itt	cc
 8008fdc:	009b      	lslcc	r3, r3, #2
 8008fde:	3002      	addcc	r0, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	db05      	blt.n	8008ff0 <__hi0bits+0x3c>
 8008fe4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008fe8:	f100 0001 	add.w	r0, r0, #1
 8008fec:	bf08      	it	eq
 8008fee:	2020      	moveq	r0, #32
 8008ff0:	4770      	bx	lr

08008ff2 <__lo0bits>:
 8008ff2:	6803      	ldr	r3, [r0, #0]
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	f013 0007 	ands.w	r0, r3, #7
 8008ffa:	d00b      	beq.n	8009014 <__lo0bits+0x22>
 8008ffc:	07d9      	lsls	r1, r3, #31
 8008ffe:	d421      	bmi.n	8009044 <__lo0bits+0x52>
 8009000:	0798      	lsls	r0, r3, #30
 8009002:	bf49      	itett	mi
 8009004:	085b      	lsrmi	r3, r3, #1
 8009006:	089b      	lsrpl	r3, r3, #2
 8009008:	2001      	movmi	r0, #1
 800900a:	6013      	strmi	r3, [r2, #0]
 800900c:	bf5c      	itt	pl
 800900e:	6013      	strpl	r3, [r2, #0]
 8009010:	2002      	movpl	r0, #2
 8009012:	4770      	bx	lr
 8009014:	b299      	uxth	r1, r3
 8009016:	b909      	cbnz	r1, 800901c <__lo0bits+0x2a>
 8009018:	0c1b      	lsrs	r3, r3, #16
 800901a:	2010      	movs	r0, #16
 800901c:	b2d9      	uxtb	r1, r3
 800901e:	b909      	cbnz	r1, 8009024 <__lo0bits+0x32>
 8009020:	3008      	adds	r0, #8
 8009022:	0a1b      	lsrs	r3, r3, #8
 8009024:	0719      	lsls	r1, r3, #28
 8009026:	bf04      	itt	eq
 8009028:	091b      	lsreq	r3, r3, #4
 800902a:	3004      	addeq	r0, #4
 800902c:	0799      	lsls	r1, r3, #30
 800902e:	bf04      	itt	eq
 8009030:	089b      	lsreq	r3, r3, #2
 8009032:	3002      	addeq	r0, #2
 8009034:	07d9      	lsls	r1, r3, #31
 8009036:	d403      	bmi.n	8009040 <__lo0bits+0x4e>
 8009038:	085b      	lsrs	r3, r3, #1
 800903a:	f100 0001 	add.w	r0, r0, #1
 800903e:	d003      	beq.n	8009048 <__lo0bits+0x56>
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	4770      	bx	lr
 8009044:	2000      	movs	r0, #0
 8009046:	4770      	bx	lr
 8009048:	2020      	movs	r0, #32
 800904a:	4770      	bx	lr

0800904c <__i2b>:
 800904c:	b510      	push	{r4, lr}
 800904e:	460c      	mov	r4, r1
 8009050:	2101      	movs	r1, #1
 8009052:	f7ff febd 	bl	8008dd0 <_Balloc>
 8009056:	4602      	mov	r2, r0
 8009058:	b928      	cbnz	r0, 8009066 <__i2b+0x1a>
 800905a:	4b05      	ldr	r3, [pc, #20]	@ (8009070 <__i2b+0x24>)
 800905c:	4805      	ldr	r0, [pc, #20]	@ (8009074 <__i2b+0x28>)
 800905e:	f240 1145 	movw	r1, #325	@ 0x145
 8009062:	f001 fbb9 	bl	800a7d8 <__assert_func>
 8009066:	2301      	movs	r3, #1
 8009068:	6144      	str	r4, [r0, #20]
 800906a:	6103      	str	r3, [r0, #16]
 800906c:	bd10      	pop	{r4, pc}
 800906e:	bf00      	nop
 8009070:	0800cf86 	.word	0x0800cf86
 8009074:	0800cf97 	.word	0x0800cf97

08009078 <__multiply>:
 8009078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	4614      	mov	r4, r2
 800907e:	690a      	ldr	r2, [r1, #16]
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	429a      	cmp	r2, r3
 8009084:	bfa8      	it	ge
 8009086:	4623      	movge	r3, r4
 8009088:	460f      	mov	r7, r1
 800908a:	bfa4      	itt	ge
 800908c:	460c      	movge	r4, r1
 800908e:	461f      	movge	r7, r3
 8009090:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009094:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009098:	68a3      	ldr	r3, [r4, #8]
 800909a:	6861      	ldr	r1, [r4, #4]
 800909c:	eb0a 0609 	add.w	r6, sl, r9
 80090a0:	42b3      	cmp	r3, r6
 80090a2:	b085      	sub	sp, #20
 80090a4:	bfb8      	it	lt
 80090a6:	3101      	addlt	r1, #1
 80090a8:	f7ff fe92 	bl	8008dd0 <_Balloc>
 80090ac:	b930      	cbnz	r0, 80090bc <__multiply+0x44>
 80090ae:	4602      	mov	r2, r0
 80090b0:	4b44      	ldr	r3, [pc, #272]	@ (80091c4 <__multiply+0x14c>)
 80090b2:	4845      	ldr	r0, [pc, #276]	@ (80091c8 <__multiply+0x150>)
 80090b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80090b8:	f001 fb8e 	bl	800a7d8 <__assert_func>
 80090bc:	f100 0514 	add.w	r5, r0, #20
 80090c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090c4:	462b      	mov	r3, r5
 80090c6:	2200      	movs	r2, #0
 80090c8:	4543      	cmp	r3, r8
 80090ca:	d321      	bcc.n	8009110 <__multiply+0x98>
 80090cc:	f107 0114 	add.w	r1, r7, #20
 80090d0:	f104 0214 	add.w	r2, r4, #20
 80090d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80090d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80090dc:	9302      	str	r3, [sp, #8]
 80090de:	1b13      	subs	r3, r2, r4
 80090e0:	3b15      	subs	r3, #21
 80090e2:	f023 0303 	bic.w	r3, r3, #3
 80090e6:	3304      	adds	r3, #4
 80090e8:	f104 0715 	add.w	r7, r4, #21
 80090ec:	42ba      	cmp	r2, r7
 80090ee:	bf38      	it	cc
 80090f0:	2304      	movcc	r3, #4
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	9b02      	ldr	r3, [sp, #8]
 80090f6:	9103      	str	r1, [sp, #12]
 80090f8:	428b      	cmp	r3, r1
 80090fa:	d80c      	bhi.n	8009116 <__multiply+0x9e>
 80090fc:	2e00      	cmp	r6, #0
 80090fe:	dd03      	ble.n	8009108 <__multiply+0x90>
 8009100:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009104:	2b00      	cmp	r3, #0
 8009106:	d05b      	beq.n	80091c0 <__multiply+0x148>
 8009108:	6106      	str	r6, [r0, #16]
 800910a:	b005      	add	sp, #20
 800910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009110:	f843 2b04 	str.w	r2, [r3], #4
 8009114:	e7d8      	b.n	80090c8 <__multiply+0x50>
 8009116:	f8b1 a000 	ldrh.w	sl, [r1]
 800911a:	f1ba 0f00 	cmp.w	sl, #0
 800911e:	d024      	beq.n	800916a <__multiply+0xf2>
 8009120:	f104 0e14 	add.w	lr, r4, #20
 8009124:	46a9      	mov	r9, r5
 8009126:	f04f 0c00 	mov.w	ip, #0
 800912a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800912e:	f8d9 3000 	ldr.w	r3, [r9]
 8009132:	fa1f fb87 	uxth.w	fp, r7
 8009136:	b29b      	uxth	r3, r3
 8009138:	fb0a 330b 	mla	r3, sl, fp, r3
 800913c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009140:	f8d9 7000 	ldr.w	r7, [r9]
 8009144:	4463      	add	r3, ip
 8009146:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800914a:	fb0a c70b 	mla	r7, sl, fp, ip
 800914e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009152:	b29b      	uxth	r3, r3
 8009154:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009158:	4572      	cmp	r2, lr
 800915a:	f849 3b04 	str.w	r3, [r9], #4
 800915e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009162:	d8e2      	bhi.n	800912a <__multiply+0xb2>
 8009164:	9b01      	ldr	r3, [sp, #4]
 8009166:	f845 c003 	str.w	ip, [r5, r3]
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009170:	3104      	adds	r1, #4
 8009172:	f1b9 0f00 	cmp.w	r9, #0
 8009176:	d021      	beq.n	80091bc <__multiply+0x144>
 8009178:	682b      	ldr	r3, [r5, #0]
 800917a:	f104 0c14 	add.w	ip, r4, #20
 800917e:	46ae      	mov	lr, r5
 8009180:	f04f 0a00 	mov.w	sl, #0
 8009184:	f8bc b000 	ldrh.w	fp, [ip]
 8009188:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800918c:	fb09 770b 	mla	r7, r9, fp, r7
 8009190:	4457      	add	r7, sl
 8009192:	b29b      	uxth	r3, r3
 8009194:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009198:	f84e 3b04 	str.w	r3, [lr], #4
 800919c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091a4:	f8be 3000 	ldrh.w	r3, [lr]
 80091a8:	fb09 330a 	mla	r3, r9, sl, r3
 80091ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80091b0:	4562      	cmp	r2, ip
 80091b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091b6:	d8e5      	bhi.n	8009184 <__multiply+0x10c>
 80091b8:	9f01      	ldr	r7, [sp, #4]
 80091ba:	51eb      	str	r3, [r5, r7]
 80091bc:	3504      	adds	r5, #4
 80091be:	e799      	b.n	80090f4 <__multiply+0x7c>
 80091c0:	3e01      	subs	r6, #1
 80091c2:	e79b      	b.n	80090fc <__multiply+0x84>
 80091c4:	0800cf86 	.word	0x0800cf86
 80091c8:	0800cf97 	.word	0x0800cf97

080091cc <__pow5mult>:
 80091cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d0:	4615      	mov	r5, r2
 80091d2:	f012 0203 	ands.w	r2, r2, #3
 80091d6:	4607      	mov	r7, r0
 80091d8:	460e      	mov	r6, r1
 80091da:	d007      	beq.n	80091ec <__pow5mult+0x20>
 80091dc:	4c25      	ldr	r4, [pc, #148]	@ (8009274 <__pow5mult+0xa8>)
 80091de:	3a01      	subs	r2, #1
 80091e0:	2300      	movs	r3, #0
 80091e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091e6:	f7ff fe55 	bl	8008e94 <__multadd>
 80091ea:	4606      	mov	r6, r0
 80091ec:	10ad      	asrs	r5, r5, #2
 80091ee:	d03d      	beq.n	800926c <__pow5mult+0xa0>
 80091f0:	69fc      	ldr	r4, [r7, #28]
 80091f2:	b97c      	cbnz	r4, 8009214 <__pow5mult+0x48>
 80091f4:	2010      	movs	r0, #16
 80091f6:	f7ff fd35 	bl	8008c64 <malloc>
 80091fa:	4602      	mov	r2, r0
 80091fc:	61f8      	str	r0, [r7, #28]
 80091fe:	b928      	cbnz	r0, 800920c <__pow5mult+0x40>
 8009200:	4b1d      	ldr	r3, [pc, #116]	@ (8009278 <__pow5mult+0xac>)
 8009202:	481e      	ldr	r0, [pc, #120]	@ (800927c <__pow5mult+0xb0>)
 8009204:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009208:	f001 fae6 	bl	800a7d8 <__assert_func>
 800920c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009210:	6004      	str	r4, [r0, #0]
 8009212:	60c4      	str	r4, [r0, #12]
 8009214:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009218:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800921c:	b94c      	cbnz	r4, 8009232 <__pow5mult+0x66>
 800921e:	f240 2171 	movw	r1, #625	@ 0x271
 8009222:	4638      	mov	r0, r7
 8009224:	f7ff ff12 	bl	800904c <__i2b>
 8009228:	2300      	movs	r3, #0
 800922a:	f8c8 0008 	str.w	r0, [r8, #8]
 800922e:	4604      	mov	r4, r0
 8009230:	6003      	str	r3, [r0, #0]
 8009232:	f04f 0900 	mov.w	r9, #0
 8009236:	07eb      	lsls	r3, r5, #31
 8009238:	d50a      	bpl.n	8009250 <__pow5mult+0x84>
 800923a:	4631      	mov	r1, r6
 800923c:	4622      	mov	r2, r4
 800923e:	4638      	mov	r0, r7
 8009240:	f7ff ff1a 	bl	8009078 <__multiply>
 8009244:	4631      	mov	r1, r6
 8009246:	4680      	mov	r8, r0
 8009248:	4638      	mov	r0, r7
 800924a:	f7ff fe01 	bl	8008e50 <_Bfree>
 800924e:	4646      	mov	r6, r8
 8009250:	106d      	asrs	r5, r5, #1
 8009252:	d00b      	beq.n	800926c <__pow5mult+0xa0>
 8009254:	6820      	ldr	r0, [r4, #0]
 8009256:	b938      	cbnz	r0, 8009268 <__pow5mult+0x9c>
 8009258:	4622      	mov	r2, r4
 800925a:	4621      	mov	r1, r4
 800925c:	4638      	mov	r0, r7
 800925e:	f7ff ff0b 	bl	8009078 <__multiply>
 8009262:	6020      	str	r0, [r4, #0]
 8009264:	f8c0 9000 	str.w	r9, [r0]
 8009268:	4604      	mov	r4, r0
 800926a:	e7e4      	b.n	8009236 <__pow5mult+0x6a>
 800926c:	4630      	mov	r0, r6
 800926e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009272:	bf00      	nop
 8009274:	0800cff0 	.word	0x0800cff0
 8009278:	0800cf17 	.word	0x0800cf17
 800927c:	0800cf97 	.word	0x0800cf97

08009280 <__lshift>:
 8009280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	460c      	mov	r4, r1
 8009286:	6849      	ldr	r1, [r1, #4]
 8009288:	6923      	ldr	r3, [r4, #16]
 800928a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800928e:	68a3      	ldr	r3, [r4, #8]
 8009290:	4607      	mov	r7, r0
 8009292:	4691      	mov	r9, r2
 8009294:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009298:	f108 0601 	add.w	r6, r8, #1
 800929c:	42b3      	cmp	r3, r6
 800929e:	db0b      	blt.n	80092b8 <__lshift+0x38>
 80092a0:	4638      	mov	r0, r7
 80092a2:	f7ff fd95 	bl	8008dd0 <_Balloc>
 80092a6:	4605      	mov	r5, r0
 80092a8:	b948      	cbnz	r0, 80092be <__lshift+0x3e>
 80092aa:	4602      	mov	r2, r0
 80092ac:	4b28      	ldr	r3, [pc, #160]	@ (8009350 <__lshift+0xd0>)
 80092ae:	4829      	ldr	r0, [pc, #164]	@ (8009354 <__lshift+0xd4>)
 80092b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80092b4:	f001 fa90 	bl	800a7d8 <__assert_func>
 80092b8:	3101      	adds	r1, #1
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	e7ee      	b.n	800929c <__lshift+0x1c>
 80092be:	2300      	movs	r3, #0
 80092c0:	f100 0114 	add.w	r1, r0, #20
 80092c4:	f100 0210 	add.w	r2, r0, #16
 80092c8:	4618      	mov	r0, r3
 80092ca:	4553      	cmp	r3, sl
 80092cc:	db33      	blt.n	8009336 <__lshift+0xb6>
 80092ce:	6920      	ldr	r0, [r4, #16]
 80092d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092d4:	f104 0314 	add.w	r3, r4, #20
 80092d8:	f019 091f 	ands.w	r9, r9, #31
 80092dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092e4:	d02b      	beq.n	800933e <__lshift+0xbe>
 80092e6:	f1c9 0e20 	rsb	lr, r9, #32
 80092ea:	468a      	mov	sl, r1
 80092ec:	2200      	movs	r2, #0
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	fa00 f009 	lsl.w	r0, r0, r9
 80092f4:	4310      	orrs	r0, r2
 80092f6:	f84a 0b04 	str.w	r0, [sl], #4
 80092fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fe:	459c      	cmp	ip, r3
 8009300:	fa22 f20e 	lsr.w	r2, r2, lr
 8009304:	d8f3      	bhi.n	80092ee <__lshift+0x6e>
 8009306:	ebac 0304 	sub.w	r3, ip, r4
 800930a:	3b15      	subs	r3, #21
 800930c:	f023 0303 	bic.w	r3, r3, #3
 8009310:	3304      	adds	r3, #4
 8009312:	f104 0015 	add.w	r0, r4, #21
 8009316:	4584      	cmp	ip, r0
 8009318:	bf38      	it	cc
 800931a:	2304      	movcc	r3, #4
 800931c:	50ca      	str	r2, [r1, r3]
 800931e:	b10a      	cbz	r2, 8009324 <__lshift+0xa4>
 8009320:	f108 0602 	add.w	r6, r8, #2
 8009324:	3e01      	subs	r6, #1
 8009326:	4638      	mov	r0, r7
 8009328:	612e      	str	r6, [r5, #16]
 800932a:	4621      	mov	r1, r4
 800932c:	f7ff fd90 	bl	8008e50 <_Bfree>
 8009330:	4628      	mov	r0, r5
 8009332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009336:	f842 0f04 	str.w	r0, [r2, #4]!
 800933a:	3301      	adds	r3, #1
 800933c:	e7c5      	b.n	80092ca <__lshift+0x4a>
 800933e:	3904      	subs	r1, #4
 8009340:	f853 2b04 	ldr.w	r2, [r3], #4
 8009344:	f841 2f04 	str.w	r2, [r1, #4]!
 8009348:	459c      	cmp	ip, r3
 800934a:	d8f9      	bhi.n	8009340 <__lshift+0xc0>
 800934c:	e7ea      	b.n	8009324 <__lshift+0xa4>
 800934e:	bf00      	nop
 8009350:	0800cf86 	.word	0x0800cf86
 8009354:	0800cf97 	.word	0x0800cf97

08009358 <__mcmp>:
 8009358:	690a      	ldr	r2, [r1, #16]
 800935a:	4603      	mov	r3, r0
 800935c:	6900      	ldr	r0, [r0, #16]
 800935e:	1a80      	subs	r0, r0, r2
 8009360:	b530      	push	{r4, r5, lr}
 8009362:	d10e      	bne.n	8009382 <__mcmp+0x2a>
 8009364:	3314      	adds	r3, #20
 8009366:	3114      	adds	r1, #20
 8009368:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800936c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009370:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009374:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009378:	4295      	cmp	r5, r2
 800937a:	d003      	beq.n	8009384 <__mcmp+0x2c>
 800937c:	d205      	bcs.n	800938a <__mcmp+0x32>
 800937e:	f04f 30ff 	mov.w	r0, #4294967295
 8009382:	bd30      	pop	{r4, r5, pc}
 8009384:	42a3      	cmp	r3, r4
 8009386:	d3f3      	bcc.n	8009370 <__mcmp+0x18>
 8009388:	e7fb      	b.n	8009382 <__mcmp+0x2a>
 800938a:	2001      	movs	r0, #1
 800938c:	e7f9      	b.n	8009382 <__mcmp+0x2a>
	...

08009390 <__mdiff>:
 8009390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	4689      	mov	r9, r1
 8009396:	4606      	mov	r6, r0
 8009398:	4611      	mov	r1, r2
 800939a:	4648      	mov	r0, r9
 800939c:	4614      	mov	r4, r2
 800939e:	f7ff ffdb 	bl	8009358 <__mcmp>
 80093a2:	1e05      	subs	r5, r0, #0
 80093a4:	d112      	bne.n	80093cc <__mdiff+0x3c>
 80093a6:	4629      	mov	r1, r5
 80093a8:	4630      	mov	r0, r6
 80093aa:	f7ff fd11 	bl	8008dd0 <_Balloc>
 80093ae:	4602      	mov	r2, r0
 80093b0:	b928      	cbnz	r0, 80093be <__mdiff+0x2e>
 80093b2:	4b3f      	ldr	r3, [pc, #252]	@ (80094b0 <__mdiff+0x120>)
 80093b4:	f240 2137 	movw	r1, #567	@ 0x237
 80093b8:	483e      	ldr	r0, [pc, #248]	@ (80094b4 <__mdiff+0x124>)
 80093ba:	f001 fa0d 	bl	800a7d8 <__assert_func>
 80093be:	2301      	movs	r3, #1
 80093c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093c4:	4610      	mov	r0, r2
 80093c6:	b003      	add	sp, #12
 80093c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093cc:	bfbc      	itt	lt
 80093ce:	464b      	movlt	r3, r9
 80093d0:	46a1      	movlt	r9, r4
 80093d2:	4630      	mov	r0, r6
 80093d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093d8:	bfba      	itte	lt
 80093da:	461c      	movlt	r4, r3
 80093dc:	2501      	movlt	r5, #1
 80093de:	2500      	movge	r5, #0
 80093e0:	f7ff fcf6 	bl	8008dd0 <_Balloc>
 80093e4:	4602      	mov	r2, r0
 80093e6:	b918      	cbnz	r0, 80093f0 <__mdiff+0x60>
 80093e8:	4b31      	ldr	r3, [pc, #196]	@ (80094b0 <__mdiff+0x120>)
 80093ea:	f240 2145 	movw	r1, #581	@ 0x245
 80093ee:	e7e3      	b.n	80093b8 <__mdiff+0x28>
 80093f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80093f4:	6926      	ldr	r6, [r4, #16]
 80093f6:	60c5      	str	r5, [r0, #12]
 80093f8:	f109 0310 	add.w	r3, r9, #16
 80093fc:	f109 0514 	add.w	r5, r9, #20
 8009400:	f104 0e14 	add.w	lr, r4, #20
 8009404:	f100 0b14 	add.w	fp, r0, #20
 8009408:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800940c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009410:	9301      	str	r3, [sp, #4]
 8009412:	46d9      	mov	r9, fp
 8009414:	f04f 0c00 	mov.w	ip, #0
 8009418:	9b01      	ldr	r3, [sp, #4]
 800941a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800941e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	fa1f f38a 	uxth.w	r3, sl
 8009428:	4619      	mov	r1, r3
 800942a:	b283      	uxth	r3, r0
 800942c:	1acb      	subs	r3, r1, r3
 800942e:	0c00      	lsrs	r0, r0, #16
 8009430:	4463      	add	r3, ip
 8009432:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009436:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800943a:	b29b      	uxth	r3, r3
 800943c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009440:	4576      	cmp	r6, lr
 8009442:	f849 3b04 	str.w	r3, [r9], #4
 8009446:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800944a:	d8e5      	bhi.n	8009418 <__mdiff+0x88>
 800944c:	1b33      	subs	r3, r6, r4
 800944e:	3b15      	subs	r3, #21
 8009450:	f023 0303 	bic.w	r3, r3, #3
 8009454:	3415      	adds	r4, #21
 8009456:	3304      	adds	r3, #4
 8009458:	42a6      	cmp	r6, r4
 800945a:	bf38      	it	cc
 800945c:	2304      	movcc	r3, #4
 800945e:	441d      	add	r5, r3
 8009460:	445b      	add	r3, fp
 8009462:	461e      	mov	r6, r3
 8009464:	462c      	mov	r4, r5
 8009466:	4544      	cmp	r4, r8
 8009468:	d30e      	bcc.n	8009488 <__mdiff+0xf8>
 800946a:	f108 0103 	add.w	r1, r8, #3
 800946e:	1b49      	subs	r1, r1, r5
 8009470:	f021 0103 	bic.w	r1, r1, #3
 8009474:	3d03      	subs	r5, #3
 8009476:	45a8      	cmp	r8, r5
 8009478:	bf38      	it	cc
 800947a:	2100      	movcc	r1, #0
 800947c:	440b      	add	r3, r1
 800947e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009482:	b191      	cbz	r1, 80094aa <__mdiff+0x11a>
 8009484:	6117      	str	r7, [r2, #16]
 8009486:	e79d      	b.n	80093c4 <__mdiff+0x34>
 8009488:	f854 1b04 	ldr.w	r1, [r4], #4
 800948c:	46e6      	mov	lr, ip
 800948e:	0c08      	lsrs	r0, r1, #16
 8009490:	fa1c fc81 	uxtah	ip, ip, r1
 8009494:	4471      	add	r1, lr
 8009496:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800949a:	b289      	uxth	r1, r1
 800949c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80094a0:	f846 1b04 	str.w	r1, [r6], #4
 80094a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094a8:	e7dd      	b.n	8009466 <__mdiff+0xd6>
 80094aa:	3f01      	subs	r7, #1
 80094ac:	e7e7      	b.n	800947e <__mdiff+0xee>
 80094ae:	bf00      	nop
 80094b0:	0800cf86 	.word	0x0800cf86
 80094b4:	0800cf97 	.word	0x0800cf97

080094b8 <__ulp>:
 80094b8:	b082      	sub	sp, #8
 80094ba:	ed8d 0b00 	vstr	d0, [sp]
 80094be:	9a01      	ldr	r2, [sp, #4]
 80094c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009500 <__ulp+0x48>)
 80094c2:	4013      	ands	r3, r2
 80094c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dc08      	bgt.n	80094de <__ulp+0x26>
 80094cc:	425b      	negs	r3, r3
 80094ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80094d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094d6:	da04      	bge.n	80094e2 <__ulp+0x2a>
 80094d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80094dc:	4113      	asrs	r3, r2
 80094de:	2200      	movs	r2, #0
 80094e0:	e008      	b.n	80094f4 <__ulp+0x3c>
 80094e2:	f1a2 0314 	sub.w	r3, r2, #20
 80094e6:	2b1e      	cmp	r3, #30
 80094e8:	bfda      	itte	le
 80094ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80094ee:	40da      	lsrle	r2, r3
 80094f0:	2201      	movgt	r2, #1
 80094f2:	2300      	movs	r3, #0
 80094f4:	4619      	mov	r1, r3
 80094f6:	4610      	mov	r0, r2
 80094f8:	ec41 0b10 	vmov	d0, r0, r1
 80094fc:	b002      	add	sp, #8
 80094fe:	4770      	bx	lr
 8009500:	7ff00000 	.word	0x7ff00000

08009504 <__b2d>:
 8009504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009508:	6906      	ldr	r6, [r0, #16]
 800950a:	f100 0814 	add.w	r8, r0, #20
 800950e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009512:	1f37      	subs	r7, r6, #4
 8009514:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009518:	4610      	mov	r0, r2
 800951a:	f7ff fd4b 	bl	8008fb4 <__hi0bits>
 800951e:	f1c0 0320 	rsb	r3, r0, #32
 8009522:	280a      	cmp	r0, #10
 8009524:	600b      	str	r3, [r1, #0]
 8009526:	491b      	ldr	r1, [pc, #108]	@ (8009594 <__b2d+0x90>)
 8009528:	dc15      	bgt.n	8009556 <__b2d+0x52>
 800952a:	f1c0 0c0b 	rsb	ip, r0, #11
 800952e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009532:	45b8      	cmp	r8, r7
 8009534:	ea43 0501 	orr.w	r5, r3, r1
 8009538:	bf34      	ite	cc
 800953a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800953e:	2300      	movcs	r3, #0
 8009540:	3015      	adds	r0, #21
 8009542:	fa02 f000 	lsl.w	r0, r2, r0
 8009546:	fa23 f30c 	lsr.w	r3, r3, ip
 800954a:	4303      	orrs	r3, r0
 800954c:	461c      	mov	r4, r3
 800954e:	ec45 4b10 	vmov	d0, r4, r5
 8009552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009556:	45b8      	cmp	r8, r7
 8009558:	bf3a      	itte	cc
 800955a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800955e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009562:	2300      	movcs	r3, #0
 8009564:	380b      	subs	r0, #11
 8009566:	d012      	beq.n	800958e <__b2d+0x8a>
 8009568:	f1c0 0120 	rsb	r1, r0, #32
 800956c:	fa23 f401 	lsr.w	r4, r3, r1
 8009570:	4082      	lsls	r2, r0
 8009572:	4322      	orrs	r2, r4
 8009574:	4547      	cmp	r7, r8
 8009576:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800957a:	bf8c      	ite	hi
 800957c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009580:	2200      	movls	r2, #0
 8009582:	4083      	lsls	r3, r0
 8009584:	40ca      	lsrs	r2, r1
 8009586:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800958a:	4313      	orrs	r3, r2
 800958c:	e7de      	b.n	800954c <__b2d+0x48>
 800958e:	ea42 0501 	orr.w	r5, r2, r1
 8009592:	e7db      	b.n	800954c <__b2d+0x48>
 8009594:	3ff00000 	.word	0x3ff00000

08009598 <__d2b>:
 8009598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800959c:	460f      	mov	r7, r1
 800959e:	2101      	movs	r1, #1
 80095a0:	ec59 8b10 	vmov	r8, r9, d0
 80095a4:	4616      	mov	r6, r2
 80095a6:	f7ff fc13 	bl	8008dd0 <_Balloc>
 80095aa:	4604      	mov	r4, r0
 80095ac:	b930      	cbnz	r0, 80095bc <__d2b+0x24>
 80095ae:	4602      	mov	r2, r0
 80095b0:	4b23      	ldr	r3, [pc, #140]	@ (8009640 <__d2b+0xa8>)
 80095b2:	4824      	ldr	r0, [pc, #144]	@ (8009644 <__d2b+0xac>)
 80095b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80095b8:	f001 f90e 	bl	800a7d8 <__assert_func>
 80095bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095c4:	b10d      	cbz	r5, 80095ca <__d2b+0x32>
 80095c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	f1b8 0300 	subs.w	r3, r8, #0
 80095d0:	d023      	beq.n	800961a <__d2b+0x82>
 80095d2:	4668      	mov	r0, sp
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	f7ff fd0c 	bl	8008ff2 <__lo0bits>
 80095da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095de:	b1d0      	cbz	r0, 8009616 <__d2b+0x7e>
 80095e0:	f1c0 0320 	rsb	r3, r0, #32
 80095e4:	fa02 f303 	lsl.w	r3, r2, r3
 80095e8:	430b      	orrs	r3, r1
 80095ea:	40c2      	lsrs	r2, r0
 80095ec:	6163      	str	r3, [r4, #20]
 80095ee:	9201      	str	r2, [sp, #4]
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	61a3      	str	r3, [r4, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bf0c      	ite	eq
 80095f8:	2201      	moveq	r2, #1
 80095fa:	2202      	movne	r2, #2
 80095fc:	6122      	str	r2, [r4, #16]
 80095fe:	b1a5      	cbz	r5, 800962a <__d2b+0x92>
 8009600:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009604:	4405      	add	r5, r0
 8009606:	603d      	str	r5, [r7, #0]
 8009608:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800960c:	6030      	str	r0, [r6, #0]
 800960e:	4620      	mov	r0, r4
 8009610:	b003      	add	sp, #12
 8009612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009616:	6161      	str	r1, [r4, #20]
 8009618:	e7ea      	b.n	80095f0 <__d2b+0x58>
 800961a:	a801      	add	r0, sp, #4
 800961c:	f7ff fce9 	bl	8008ff2 <__lo0bits>
 8009620:	9b01      	ldr	r3, [sp, #4]
 8009622:	6163      	str	r3, [r4, #20]
 8009624:	3020      	adds	r0, #32
 8009626:	2201      	movs	r2, #1
 8009628:	e7e8      	b.n	80095fc <__d2b+0x64>
 800962a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800962e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009632:	6038      	str	r0, [r7, #0]
 8009634:	6918      	ldr	r0, [r3, #16]
 8009636:	f7ff fcbd 	bl	8008fb4 <__hi0bits>
 800963a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800963e:	e7e5      	b.n	800960c <__d2b+0x74>
 8009640:	0800cf86 	.word	0x0800cf86
 8009644:	0800cf97 	.word	0x0800cf97

08009648 <__ratio>:
 8009648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964c:	b085      	sub	sp, #20
 800964e:	e9cd 1000 	strd	r1, r0, [sp]
 8009652:	a902      	add	r1, sp, #8
 8009654:	f7ff ff56 	bl	8009504 <__b2d>
 8009658:	9800      	ldr	r0, [sp, #0]
 800965a:	a903      	add	r1, sp, #12
 800965c:	ec55 4b10 	vmov	r4, r5, d0
 8009660:	f7ff ff50 	bl	8009504 <__b2d>
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	6919      	ldr	r1, [r3, #16]
 8009668:	9b00      	ldr	r3, [sp, #0]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	1ac9      	subs	r1, r1, r3
 800966e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	ec5b ab10 	vmov	sl, fp, d0
 8009678:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800967c:	2b00      	cmp	r3, #0
 800967e:	bfce      	itee	gt
 8009680:	462a      	movgt	r2, r5
 8009682:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009686:	465a      	movle	r2, fp
 8009688:	462f      	mov	r7, r5
 800968a:	46d9      	mov	r9, fp
 800968c:	bfcc      	ite	gt
 800968e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009692:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009696:	464b      	mov	r3, r9
 8009698:	4652      	mov	r2, sl
 800969a:	4620      	mov	r0, r4
 800969c:	4639      	mov	r1, r7
 800969e:	f7f7 f8e5 	bl	800086c <__aeabi_ddiv>
 80096a2:	ec41 0b10 	vmov	d0, r0, r1
 80096a6:	b005      	add	sp, #20
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096ac <__copybits>:
 80096ac:	3901      	subs	r1, #1
 80096ae:	b570      	push	{r4, r5, r6, lr}
 80096b0:	1149      	asrs	r1, r1, #5
 80096b2:	6914      	ldr	r4, [r2, #16]
 80096b4:	3101      	adds	r1, #1
 80096b6:	f102 0314 	add.w	r3, r2, #20
 80096ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80096be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096c2:	1f05      	subs	r5, r0, #4
 80096c4:	42a3      	cmp	r3, r4
 80096c6:	d30c      	bcc.n	80096e2 <__copybits+0x36>
 80096c8:	1aa3      	subs	r3, r4, r2
 80096ca:	3b11      	subs	r3, #17
 80096cc:	f023 0303 	bic.w	r3, r3, #3
 80096d0:	3211      	adds	r2, #17
 80096d2:	42a2      	cmp	r2, r4
 80096d4:	bf88      	it	hi
 80096d6:	2300      	movhi	r3, #0
 80096d8:	4418      	add	r0, r3
 80096da:	2300      	movs	r3, #0
 80096dc:	4288      	cmp	r0, r1
 80096de:	d305      	bcc.n	80096ec <__copybits+0x40>
 80096e0:	bd70      	pop	{r4, r5, r6, pc}
 80096e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80096e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80096ea:	e7eb      	b.n	80096c4 <__copybits+0x18>
 80096ec:	f840 3b04 	str.w	r3, [r0], #4
 80096f0:	e7f4      	b.n	80096dc <__copybits+0x30>

080096f2 <__any_on>:
 80096f2:	f100 0214 	add.w	r2, r0, #20
 80096f6:	6900      	ldr	r0, [r0, #16]
 80096f8:	114b      	asrs	r3, r1, #5
 80096fa:	4298      	cmp	r0, r3
 80096fc:	b510      	push	{r4, lr}
 80096fe:	db11      	blt.n	8009724 <__any_on+0x32>
 8009700:	dd0a      	ble.n	8009718 <__any_on+0x26>
 8009702:	f011 011f 	ands.w	r1, r1, #31
 8009706:	d007      	beq.n	8009718 <__any_on+0x26>
 8009708:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800970c:	fa24 f001 	lsr.w	r0, r4, r1
 8009710:	fa00 f101 	lsl.w	r1, r0, r1
 8009714:	428c      	cmp	r4, r1
 8009716:	d10b      	bne.n	8009730 <__any_on+0x3e>
 8009718:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800971c:	4293      	cmp	r3, r2
 800971e:	d803      	bhi.n	8009728 <__any_on+0x36>
 8009720:	2000      	movs	r0, #0
 8009722:	bd10      	pop	{r4, pc}
 8009724:	4603      	mov	r3, r0
 8009726:	e7f7      	b.n	8009718 <__any_on+0x26>
 8009728:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800972c:	2900      	cmp	r1, #0
 800972e:	d0f5      	beq.n	800971c <__any_on+0x2a>
 8009730:	2001      	movs	r0, #1
 8009732:	e7f6      	b.n	8009722 <__any_on+0x30>

08009734 <sulp>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	4604      	mov	r4, r0
 8009738:	460d      	mov	r5, r1
 800973a:	ec45 4b10 	vmov	d0, r4, r5
 800973e:	4616      	mov	r6, r2
 8009740:	f7ff feba 	bl	80094b8 <__ulp>
 8009744:	ec51 0b10 	vmov	r0, r1, d0
 8009748:	b17e      	cbz	r6, 800976a <sulp+0x36>
 800974a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800974e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009752:	2b00      	cmp	r3, #0
 8009754:	dd09      	ble.n	800976a <sulp+0x36>
 8009756:	051b      	lsls	r3, r3, #20
 8009758:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800975c:	2400      	movs	r4, #0
 800975e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009762:	4622      	mov	r2, r4
 8009764:	462b      	mov	r3, r5
 8009766:	f7f6 ff57 	bl	8000618 <__aeabi_dmul>
 800976a:	ec41 0b10 	vmov	d0, r0, r1
 800976e:	bd70      	pop	{r4, r5, r6, pc}

08009770 <_strtod_l>:
 8009770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	b09f      	sub	sp, #124	@ 0x7c
 8009776:	460c      	mov	r4, r1
 8009778:	9217      	str	r2, [sp, #92]	@ 0x5c
 800977a:	2200      	movs	r2, #0
 800977c:	921a      	str	r2, [sp, #104]	@ 0x68
 800977e:	9005      	str	r0, [sp, #20]
 8009780:	f04f 0a00 	mov.w	sl, #0
 8009784:	f04f 0b00 	mov.w	fp, #0
 8009788:	460a      	mov	r2, r1
 800978a:	9219      	str	r2, [sp, #100]	@ 0x64
 800978c:	7811      	ldrb	r1, [r2, #0]
 800978e:	292b      	cmp	r1, #43	@ 0x2b
 8009790:	d04a      	beq.n	8009828 <_strtod_l+0xb8>
 8009792:	d838      	bhi.n	8009806 <_strtod_l+0x96>
 8009794:	290d      	cmp	r1, #13
 8009796:	d832      	bhi.n	80097fe <_strtod_l+0x8e>
 8009798:	2908      	cmp	r1, #8
 800979a:	d832      	bhi.n	8009802 <_strtod_l+0x92>
 800979c:	2900      	cmp	r1, #0
 800979e:	d03b      	beq.n	8009818 <_strtod_l+0xa8>
 80097a0:	2200      	movs	r2, #0
 80097a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80097a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80097a6:	782a      	ldrb	r2, [r5, #0]
 80097a8:	2a30      	cmp	r2, #48	@ 0x30
 80097aa:	f040 80b3 	bne.w	8009914 <_strtod_l+0x1a4>
 80097ae:	786a      	ldrb	r2, [r5, #1]
 80097b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80097b4:	2a58      	cmp	r2, #88	@ 0x58
 80097b6:	d16e      	bne.n	8009896 <_strtod_l+0x126>
 80097b8:	9302      	str	r3, [sp, #8]
 80097ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	ab1a      	add	r3, sp, #104	@ 0x68
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	4a8e      	ldr	r2, [pc, #568]	@ (80099fc <_strtod_l+0x28c>)
 80097c4:	9805      	ldr	r0, [sp, #20]
 80097c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80097c8:	a919      	add	r1, sp, #100	@ 0x64
 80097ca:	f001 f89f 	bl	800a90c <__gethex>
 80097ce:	f010 060f 	ands.w	r6, r0, #15
 80097d2:	4604      	mov	r4, r0
 80097d4:	d005      	beq.n	80097e2 <_strtod_l+0x72>
 80097d6:	2e06      	cmp	r6, #6
 80097d8:	d128      	bne.n	800982c <_strtod_l+0xbc>
 80097da:	3501      	adds	r5, #1
 80097dc:	2300      	movs	r3, #0
 80097de:	9519      	str	r5, [sp, #100]	@ 0x64
 80097e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f040 858e 	bne.w	800a306 <_strtod_l+0xb96>
 80097ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097ec:	b1cb      	cbz	r3, 8009822 <_strtod_l+0xb2>
 80097ee:	4652      	mov	r2, sl
 80097f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80097f4:	ec43 2b10 	vmov	d0, r2, r3
 80097f8:	b01f      	add	sp, #124	@ 0x7c
 80097fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fe:	2920      	cmp	r1, #32
 8009800:	d1ce      	bne.n	80097a0 <_strtod_l+0x30>
 8009802:	3201      	adds	r2, #1
 8009804:	e7c1      	b.n	800978a <_strtod_l+0x1a>
 8009806:	292d      	cmp	r1, #45	@ 0x2d
 8009808:	d1ca      	bne.n	80097a0 <_strtod_l+0x30>
 800980a:	2101      	movs	r1, #1
 800980c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800980e:	1c51      	adds	r1, r2, #1
 8009810:	9119      	str	r1, [sp, #100]	@ 0x64
 8009812:	7852      	ldrb	r2, [r2, #1]
 8009814:	2a00      	cmp	r2, #0
 8009816:	d1c5      	bne.n	80097a4 <_strtod_l+0x34>
 8009818:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800981a:	9419      	str	r4, [sp, #100]	@ 0x64
 800981c:	2b00      	cmp	r3, #0
 800981e:	f040 8570 	bne.w	800a302 <_strtod_l+0xb92>
 8009822:	4652      	mov	r2, sl
 8009824:	465b      	mov	r3, fp
 8009826:	e7e5      	b.n	80097f4 <_strtod_l+0x84>
 8009828:	2100      	movs	r1, #0
 800982a:	e7ef      	b.n	800980c <_strtod_l+0x9c>
 800982c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800982e:	b13a      	cbz	r2, 8009840 <_strtod_l+0xd0>
 8009830:	2135      	movs	r1, #53	@ 0x35
 8009832:	a81c      	add	r0, sp, #112	@ 0x70
 8009834:	f7ff ff3a 	bl	80096ac <__copybits>
 8009838:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800983a:	9805      	ldr	r0, [sp, #20]
 800983c:	f7ff fb08 	bl	8008e50 <_Bfree>
 8009840:	3e01      	subs	r6, #1
 8009842:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009844:	2e04      	cmp	r6, #4
 8009846:	d806      	bhi.n	8009856 <_strtod_l+0xe6>
 8009848:	e8df f006 	tbb	[pc, r6]
 800984c:	201d0314 	.word	0x201d0314
 8009850:	14          	.byte	0x14
 8009851:	00          	.byte	0x00
 8009852:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009856:	05e1      	lsls	r1, r4, #23
 8009858:	bf48      	it	mi
 800985a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800985e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009862:	0d1b      	lsrs	r3, r3, #20
 8009864:	051b      	lsls	r3, r3, #20
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1bb      	bne.n	80097e2 <_strtod_l+0x72>
 800986a:	f7fe fb23 	bl	8007eb4 <__errno>
 800986e:	2322      	movs	r3, #34	@ 0x22
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	e7b6      	b.n	80097e2 <_strtod_l+0x72>
 8009874:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009878:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800987c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009880:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009884:	e7e7      	b.n	8009856 <_strtod_l+0xe6>
 8009886:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009a04 <_strtod_l+0x294>
 800988a:	e7e4      	b.n	8009856 <_strtod_l+0xe6>
 800988c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009890:	f04f 3aff 	mov.w	sl, #4294967295
 8009894:	e7df      	b.n	8009856 <_strtod_l+0xe6>
 8009896:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	9219      	str	r2, [sp, #100]	@ 0x64
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	2b30      	cmp	r3, #48	@ 0x30
 80098a0:	d0f9      	beq.n	8009896 <_strtod_l+0x126>
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d09d      	beq.n	80097e2 <_strtod_l+0x72>
 80098a6:	2301      	movs	r3, #1
 80098a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80098ae:	2300      	movs	r3, #0
 80098b0:	9308      	str	r3, [sp, #32]
 80098b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b4:	461f      	mov	r7, r3
 80098b6:	220a      	movs	r2, #10
 80098b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80098ba:	7805      	ldrb	r5, [r0, #0]
 80098bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80098c0:	b2d9      	uxtb	r1, r3
 80098c2:	2909      	cmp	r1, #9
 80098c4:	d928      	bls.n	8009918 <_strtod_l+0x1a8>
 80098c6:	494e      	ldr	r1, [pc, #312]	@ (8009a00 <_strtod_l+0x290>)
 80098c8:	2201      	movs	r2, #1
 80098ca:	f000 ff59 	bl	800a780 <strncmp>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d032      	beq.n	8009938 <_strtod_l+0x1c8>
 80098d2:	2000      	movs	r0, #0
 80098d4:	462a      	mov	r2, r5
 80098d6:	4681      	mov	r9, r0
 80098d8:	463d      	mov	r5, r7
 80098da:	4603      	mov	r3, r0
 80098dc:	2a65      	cmp	r2, #101	@ 0x65
 80098de:	d001      	beq.n	80098e4 <_strtod_l+0x174>
 80098e0:	2a45      	cmp	r2, #69	@ 0x45
 80098e2:	d114      	bne.n	800990e <_strtod_l+0x19e>
 80098e4:	b91d      	cbnz	r5, 80098ee <_strtod_l+0x17e>
 80098e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098e8:	4302      	orrs	r2, r0
 80098ea:	d095      	beq.n	8009818 <_strtod_l+0xa8>
 80098ec:	2500      	movs	r5, #0
 80098ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80098f0:	1c62      	adds	r2, r4, #1
 80098f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80098f4:	7862      	ldrb	r2, [r4, #1]
 80098f6:	2a2b      	cmp	r2, #43	@ 0x2b
 80098f8:	d077      	beq.n	80099ea <_strtod_l+0x27a>
 80098fa:	2a2d      	cmp	r2, #45	@ 0x2d
 80098fc:	d07b      	beq.n	80099f6 <_strtod_l+0x286>
 80098fe:	f04f 0c00 	mov.w	ip, #0
 8009902:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009906:	2909      	cmp	r1, #9
 8009908:	f240 8082 	bls.w	8009a10 <_strtod_l+0x2a0>
 800990c:	9419      	str	r4, [sp, #100]	@ 0x64
 800990e:	f04f 0800 	mov.w	r8, #0
 8009912:	e0a2      	b.n	8009a5a <_strtod_l+0x2ea>
 8009914:	2300      	movs	r3, #0
 8009916:	e7c7      	b.n	80098a8 <_strtod_l+0x138>
 8009918:	2f08      	cmp	r7, #8
 800991a:	bfd5      	itete	le
 800991c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800991e:	9908      	ldrgt	r1, [sp, #32]
 8009920:	fb02 3301 	mlale	r3, r2, r1, r3
 8009924:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009928:	f100 0001 	add.w	r0, r0, #1
 800992c:	bfd4      	ite	le
 800992e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009930:	9308      	strgt	r3, [sp, #32]
 8009932:	3701      	adds	r7, #1
 8009934:	9019      	str	r0, [sp, #100]	@ 0x64
 8009936:	e7bf      	b.n	80098b8 <_strtod_l+0x148>
 8009938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800993a:	1c5a      	adds	r2, r3, #1
 800993c:	9219      	str	r2, [sp, #100]	@ 0x64
 800993e:	785a      	ldrb	r2, [r3, #1]
 8009940:	b37f      	cbz	r7, 80099a2 <_strtod_l+0x232>
 8009942:	4681      	mov	r9, r0
 8009944:	463d      	mov	r5, r7
 8009946:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800994a:	2b09      	cmp	r3, #9
 800994c:	d912      	bls.n	8009974 <_strtod_l+0x204>
 800994e:	2301      	movs	r3, #1
 8009950:	e7c4      	b.n	80098dc <_strtod_l+0x16c>
 8009952:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	9219      	str	r2, [sp, #100]	@ 0x64
 8009958:	785a      	ldrb	r2, [r3, #1]
 800995a:	3001      	adds	r0, #1
 800995c:	2a30      	cmp	r2, #48	@ 0x30
 800995e:	d0f8      	beq.n	8009952 <_strtod_l+0x1e2>
 8009960:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009964:	2b08      	cmp	r3, #8
 8009966:	f200 84d3 	bhi.w	800a310 <_strtod_l+0xba0>
 800996a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800996c:	930c      	str	r3, [sp, #48]	@ 0x30
 800996e:	4681      	mov	r9, r0
 8009970:	2000      	movs	r0, #0
 8009972:	4605      	mov	r5, r0
 8009974:	3a30      	subs	r2, #48	@ 0x30
 8009976:	f100 0301 	add.w	r3, r0, #1
 800997a:	d02a      	beq.n	80099d2 <_strtod_l+0x262>
 800997c:	4499      	add	r9, r3
 800997e:	eb00 0c05 	add.w	ip, r0, r5
 8009982:	462b      	mov	r3, r5
 8009984:	210a      	movs	r1, #10
 8009986:	4563      	cmp	r3, ip
 8009988:	d10d      	bne.n	80099a6 <_strtod_l+0x236>
 800998a:	1c69      	adds	r1, r5, #1
 800998c:	4401      	add	r1, r0
 800998e:	4428      	add	r0, r5
 8009990:	2808      	cmp	r0, #8
 8009992:	dc16      	bgt.n	80099c2 <_strtod_l+0x252>
 8009994:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009996:	230a      	movs	r3, #10
 8009998:	fb03 2300 	mla	r3, r3, r0, r2
 800999c:	930a      	str	r3, [sp, #40]	@ 0x28
 800999e:	2300      	movs	r3, #0
 80099a0:	e018      	b.n	80099d4 <_strtod_l+0x264>
 80099a2:	4638      	mov	r0, r7
 80099a4:	e7da      	b.n	800995c <_strtod_l+0x1ec>
 80099a6:	2b08      	cmp	r3, #8
 80099a8:	f103 0301 	add.w	r3, r3, #1
 80099ac:	dc03      	bgt.n	80099b6 <_strtod_l+0x246>
 80099ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80099b0:	434e      	muls	r6, r1
 80099b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80099b4:	e7e7      	b.n	8009986 <_strtod_l+0x216>
 80099b6:	2b10      	cmp	r3, #16
 80099b8:	bfde      	ittt	le
 80099ba:	9e08      	ldrle	r6, [sp, #32]
 80099bc:	434e      	mulle	r6, r1
 80099be:	9608      	strle	r6, [sp, #32]
 80099c0:	e7e1      	b.n	8009986 <_strtod_l+0x216>
 80099c2:	280f      	cmp	r0, #15
 80099c4:	dceb      	bgt.n	800999e <_strtod_l+0x22e>
 80099c6:	9808      	ldr	r0, [sp, #32]
 80099c8:	230a      	movs	r3, #10
 80099ca:	fb03 2300 	mla	r3, r3, r0, r2
 80099ce:	9308      	str	r3, [sp, #32]
 80099d0:	e7e5      	b.n	800999e <_strtod_l+0x22e>
 80099d2:	4629      	mov	r1, r5
 80099d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099d6:	1c50      	adds	r0, r2, #1
 80099d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80099da:	7852      	ldrb	r2, [r2, #1]
 80099dc:	4618      	mov	r0, r3
 80099de:	460d      	mov	r5, r1
 80099e0:	e7b1      	b.n	8009946 <_strtod_l+0x1d6>
 80099e2:	f04f 0900 	mov.w	r9, #0
 80099e6:	2301      	movs	r3, #1
 80099e8:	e77d      	b.n	80098e6 <_strtod_l+0x176>
 80099ea:	f04f 0c00 	mov.w	ip, #0
 80099ee:	1ca2      	adds	r2, r4, #2
 80099f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80099f2:	78a2      	ldrb	r2, [r4, #2]
 80099f4:	e785      	b.n	8009902 <_strtod_l+0x192>
 80099f6:	f04f 0c01 	mov.w	ip, #1
 80099fa:	e7f8      	b.n	80099ee <_strtod_l+0x27e>
 80099fc:	0800d108 	.word	0x0800d108
 8009a00:	0800d0f0 	.word	0x0800d0f0
 8009a04:	7ff00000 	.word	0x7ff00000
 8009a08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a0a:	1c51      	adds	r1, r2, #1
 8009a0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a0e:	7852      	ldrb	r2, [r2, #1]
 8009a10:	2a30      	cmp	r2, #48	@ 0x30
 8009a12:	d0f9      	beq.n	8009a08 <_strtod_l+0x298>
 8009a14:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009a18:	2908      	cmp	r1, #8
 8009a1a:	f63f af78 	bhi.w	800990e <_strtod_l+0x19e>
 8009a1e:	3a30      	subs	r2, #48	@ 0x30
 8009a20:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a24:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009a26:	f04f 080a 	mov.w	r8, #10
 8009a2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a2c:	1c56      	adds	r6, r2, #1
 8009a2e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009a30:	7852      	ldrb	r2, [r2, #1]
 8009a32:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009a36:	f1be 0f09 	cmp.w	lr, #9
 8009a3a:	d939      	bls.n	8009ab0 <_strtod_l+0x340>
 8009a3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009a3e:	1a76      	subs	r6, r6, r1
 8009a40:	2e08      	cmp	r6, #8
 8009a42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009a46:	dc03      	bgt.n	8009a50 <_strtod_l+0x2e0>
 8009a48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a4a:	4588      	cmp	r8, r1
 8009a4c:	bfa8      	it	ge
 8009a4e:	4688      	movge	r8, r1
 8009a50:	f1bc 0f00 	cmp.w	ip, #0
 8009a54:	d001      	beq.n	8009a5a <_strtod_l+0x2ea>
 8009a56:	f1c8 0800 	rsb	r8, r8, #0
 8009a5a:	2d00      	cmp	r5, #0
 8009a5c:	d14e      	bne.n	8009afc <_strtod_l+0x38c>
 8009a5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a60:	4308      	orrs	r0, r1
 8009a62:	f47f aebe 	bne.w	80097e2 <_strtod_l+0x72>
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f47f aed6 	bne.w	8009818 <_strtod_l+0xa8>
 8009a6c:	2a69      	cmp	r2, #105	@ 0x69
 8009a6e:	d028      	beq.n	8009ac2 <_strtod_l+0x352>
 8009a70:	dc25      	bgt.n	8009abe <_strtod_l+0x34e>
 8009a72:	2a49      	cmp	r2, #73	@ 0x49
 8009a74:	d025      	beq.n	8009ac2 <_strtod_l+0x352>
 8009a76:	2a4e      	cmp	r2, #78	@ 0x4e
 8009a78:	f47f aece 	bne.w	8009818 <_strtod_l+0xa8>
 8009a7c:	499b      	ldr	r1, [pc, #620]	@ (8009cec <_strtod_l+0x57c>)
 8009a7e:	a819      	add	r0, sp, #100	@ 0x64
 8009a80:	f001 f966 	bl	800ad50 <__match>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	f43f aec7 	beq.w	8009818 <_strtod_l+0xa8>
 8009a8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b28      	cmp	r3, #40	@ 0x28
 8009a90:	d12e      	bne.n	8009af0 <_strtod_l+0x380>
 8009a92:	4997      	ldr	r1, [pc, #604]	@ (8009cf0 <_strtod_l+0x580>)
 8009a94:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a96:	a819      	add	r0, sp, #100	@ 0x64
 8009a98:	f001 f96e 	bl	800ad78 <__hexnan>
 8009a9c:	2805      	cmp	r0, #5
 8009a9e:	d127      	bne.n	8009af0 <_strtod_l+0x380>
 8009aa0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009aa2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009aa6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009aaa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009aae:	e698      	b.n	80097e2 <_strtod_l+0x72>
 8009ab0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009ab2:	fb08 2101 	mla	r1, r8, r1, r2
 8009ab6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009aba:	920e      	str	r2, [sp, #56]	@ 0x38
 8009abc:	e7b5      	b.n	8009a2a <_strtod_l+0x2ba>
 8009abe:	2a6e      	cmp	r2, #110	@ 0x6e
 8009ac0:	e7da      	b.n	8009a78 <_strtod_l+0x308>
 8009ac2:	498c      	ldr	r1, [pc, #560]	@ (8009cf4 <_strtod_l+0x584>)
 8009ac4:	a819      	add	r0, sp, #100	@ 0x64
 8009ac6:	f001 f943 	bl	800ad50 <__match>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	f43f aea4 	beq.w	8009818 <_strtod_l+0xa8>
 8009ad0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ad2:	4989      	ldr	r1, [pc, #548]	@ (8009cf8 <_strtod_l+0x588>)
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	a819      	add	r0, sp, #100	@ 0x64
 8009ad8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ada:	f001 f939 	bl	800ad50 <__match>
 8009ade:	b910      	cbnz	r0, 8009ae6 <_strtod_l+0x376>
 8009ae0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ae6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009d08 <_strtod_l+0x598>
 8009aea:	f04f 0a00 	mov.w	sl, #0
 8009aee:	e678      	b.n	80097e2 <_strtod_l+0x72>
 8009af0:	4882      	ldr	r0, [pc, #520]	@ (8009cfc <_strtod_l+0x58c>)
 8009af2:	f000 fe69 	bl	800a7c8 <nan>
 8009af6:	ec5b ab10 	vmov	sl, fp, d0
 8009afa:	e672      	b.n	80097e2 <_strtod_l+0x72>
 8009afc:	eba8 0309 	sub.w	r3, r8, r9
 8009b00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b04:	2f00      	cmp	r7, #0
 8009b06:	bf08      	it	eq
 8009b08:	462f      	moveq	r7, r5
 8009b0a:	2d10      	cmp	r5, #16
 8009b0c:	462c      	mov	r4, r5
 8009b0e:	bfa8      	it	ge
 8009b10:	2410      	movge	r4, #16
 8009b12:	f7f6 fd07 	bl	8000524 <__aeabi_ui2d>
 8009b16:	2d09      	cmp	r5, #9
 8009b18:	4682      	mov	sl, r0
 8009b1a:	468b      	mov	fp, r1
 8009b1c:	dc13      	bgt.n	8009b46 <_strtod_l+0x3d6>
 8009b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f43f ae5e 	beq.w	80097e2 <_strtod_l+0x72>
 8009b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b28:	dd78      	ble.n	8009c1c <_strtod_l+0x4ac>
 8009b2a:	2b16      	cmp	r3, #22
 8009b2c:	dc5f      	bgt.n	8009bee <_strtod_l+0x47e>
 8009b2e:	4974      	ldr	r1, [pc, #464]	@ (8009d00 <_strtod_l+0x590>)
 8009b30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b38:	4652      	mov	r2, sl
 8009b3a:	465b      	mov	r3, fp
 8009b3c:	f7f6 fd6c 	bl	8000618 <__aeabi_dmul>
 8009b40:	4682      	mov	sl, r0
 8009b42:	468b      	mov	fp, r1
 8009b44:	e64d      	b.n	80097e2 <_strtod_l+0x72>
 8009b46:	4b6e      	ldr	r3, [pc, #440]	@ (8009d00 <_strtod_l+0x590>)
 8009b48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009b50:	f7f6 fd62 	bl	8000618 <__aeabi_dmul>
 8009b54:	4682      	mov	sl, r0
 8009b56:	9808      	ldr	r0, [sp, #32]
 8009b58:	468b      	mov	fp, r1
 8009b5a:	f7f6 fce3 	bl	8000524 <__aeabi_ui2d>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4650      	mov	r0, sl
 8009b64:	4659      	mov	r1, fp
 8009b66:	f7f6 fba1 	bl	80002ac <__adddf3>
 8009b6a:	2d0f      	cmp	r5, #15
 8009b6c:	4682      	mov	sl, r0
 8009b6e:	468b      	mov	fp, r1
 8009b70:	ddd5      	ble.n	8009b1e <_strtod_l+0x3ae>
 8009b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b74:	1b2c      	subs	r4, r5, r4
 8009b76:	441c      	add	r4, r3
 8009b78:	2c00      	cmp	r4, #0
 8009b7a:	f340 8096 	ble.w	8009caa <_strtod_l+0x53a>
 8009b7e:	f014 030f 	ands.w	r3, r4, #15
 8009b82:	d00a      	beq.n	8009b9a <_strtod_l+0x42a>
 8009b84:	495e      	ldr	r1, [pc, #376]	@ (8009d00 <_strtod_l+0x590>)
 8009b86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	465b      	mov	r3, fp
 8009b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b92:	f7f6 fd41 	bl	8000618 <__aeabi_dmul>
 8009b96:	4682      	mov	sl, r0
 8009b98:	468b      	mov	fp, r1
 8009b9a:	f034 040f 	bics.w	r4, r4, #15
 8009b9e:	d073      	beq.n	8009c88 <_strtod_l+0x518>
 8009ba0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009ba4:	dd48      	ble.n	8009c38 <_strtod_l+0x4c8>
 8009ba6:	2400      	movs	r4, #0
 8009ba8:	46a0      	mov	r8, r4
 8009baa:	940a      	str	r4, [sp, #40]	@ 0x28
 8009bac:	46a1      	mov	r9, r4
 8009bae:	9a05      	ldr	r2, [sp, #20]
 8009bb0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009d08 <_strtod_l+0x598>
 8009bb4:	2322      	movs	r3, #34	@ 0x22
 8009bb6:	6013      	str	r3, [r2, #0]
 8009bb8:	f04f 0a00 	mov.w	sl, #0
 8009bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f43f ae0f 	beq.w	80097e2 <_strtod_l+0x72>
 8009bc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bc6:	9805      	ldr	r0, [sp, #20]
 8009bc8:	f7ff f942 	bl	8008e50 <_Bfree>
 8009bcc:	9805      	ldr	r0, [sp, #20]
 8009bce:	4649      	mov	r1, r9
 8009bd0:	f7ff f93e 	bl	8008e50 <_Bfree>
 8009bd4:	9805      	ldr	r0, [sp, #20]
 8009bd6:	4641      	mov	r1, r8
 8009bd8:	f7ff f93a 	bl	8008e50 <_Bfree>
 8009bdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bde:	9805      	ldr	r0, [sp, #20]
 8009be0:	f7ff f936 	bl	8008e50 <_Bfree>
 8009be4:	9805      	ldr	r0, [sp, #20]
 8009be6:	4621      	mov	r1, r4
 8009be8:	f7ff f932 	bl	8008e50 <_Bfree>
 8009bec:	e5f9      	b.n	80097e2 <_strtod_l+0x72>
 8009bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bf0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	dbbc      	blt.n	8009b72 <_strtod_l+0x402>
 8009bf8:	4c41      	ldr	r4, [pc, #260]	@ (8009d00 <_strtod_l+0x590>)
 8009bfa:	f1c5 050f 	rsb	r5, r5, #15
 8009bfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009c02:	4652      	mov	r2, sl
 8009c04:	465b      	mov	r3, fp
 8009c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c0a:	f7f6 fd05 	bl	8000618 <__aeabi_dmul>
 8009c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c10:	1b5d      	subs	r5, r3, r5
 8009c12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009c16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c1a:	e78f      	b.n	8009b3c <_strtod_l+0x3cc>
 8009c1c:	3316      	adds	r3, #22
 8009c1e:	dba8      	blt.n	8009b72 <_strtod_l+0x402>
 8009c20:	4b37      	ldr	r3, [pc, #220]	@ (8009d00 <_strtod_l+0x590>)
 8009c22:	eba9 0808 	sub.w	r8, r9, r8
 8009c26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009c2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009c2e:	4650      	mov	r0, sl
 8009c30:	4659      	mov	r1, fp
 8009c32:	f7f6 fe1b 	bl	800086c <__aeabi_ddiv>
 8009c36:	e783      	b.n	8009b40 <_strtod_l+0x3d0>
 8009c38:	4b32      	ldr	r3, [pc, #200]	@ (8009d04 <_strtod_l+0x594>)
 8009c3a:	9308      	str	r3, [sp, #32]
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	1124      	asrs	r4, r4, #4
 8009c40:	4650      	mov	r0, sl
 8009c42:	4659      	mov	r1, fp
 8009c44:	461e      	mov	r6, r3
 8009c46:	2c01      	cmp	r4, #1
 8009c48:	dc21      	bgt.n	8009c8e <_strtod_l+0x51e>
 8009c4a:	b10b      	cbz	r3, 8009c50 <_strtod_l+0x4e0>
 8009c4c:	4682      	mov	sl, r0
 8009c4e:	468b      	mov	fp, r1
 8009c50:	492c      	ldr	r1, [pc, #176]	@ (8009d04 <_strtod_l+0x594>)
 8009c52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009c56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009c5a:	4652      	mov	r2, sl
 8009c5c:	465b      	mov	r3, fp
 8009c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c62:	f7f6 fcd9 	bl	8000618 <__aeabi_dmul>
 8009c66:	4b28      	ldr	r3, [pc, #160]	@ (8009d08 <_strtod_l+0x598>)
 8009c68:	460a      	mov	r2, r1
 8009c6a:	400b      	ands	r3, r1
 8009c6c:	4927      	ldr	r1, [pc, #156]	@ (8009d0c <_strtod_l+0x59c>)
 8009c6e:	428b      	cmp	r3, r1
 8009c70:	4682      	mov	sl, r0
 8009c72:	d898      	bhi.n	8009ba6 <_strtod_l+0x436>
 8009c74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009c78:	428b      	cmp	r3, r1
 8009c7a:	bf86      	itte	hi
 8009c7c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009d10 <_strtod_l+0x5a0>
 8009c80:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9308      	str	r3, [sp, #32]
 8009c8c:	e07a      	b.n	8009d84 <_strtod_l+0x614>
 8009c8e:	07e2      	lsls	r2, r4, #31
 8009c90:	d505      	bpl.n	8009c9e <_strtod_l+0x52e>
 8009c92:	9b08      	ldr	r3, [sp, #32]
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f7f6 fcbe 	bl	8000618 <__aeabi_dmul>
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	9a08      	ldr	r2, [sp, #32]
 8009ca0:	3208      	adds	r2, #8
 8009ca2:	3601      	adds	r6, #1
 8009ca4:	1064      	asrs	r4, r4, #1
 8009ca6:	9208      	str	r2, [sp, #32]
 8009ca8:	e7cd      	b.n	8009c46 <_strtod_l+0x4d6>
 8009caa:	d0ed      	beq.n	8009c88 <_strtod_l+0x518>
 8009cac:	4264      	negs	r4, r4
 8009cae:	f014 020f 	ands.w	r2, r4, #15
 8009cb2:	d00a      	beq.n	8009cca <_strtod_l+0x55a>
 8009cb4:	4b12      	ldr	r3, [pc, #72]	@ (8009d00 <_strtod_l+0x590>)
 8009cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cba:	4650      	mov	r0, sl
 8009cbc:	4659      	mov	r1, fp
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	f7f6 fdd3 	bl	800086c <__aeabi_ddiv>
 8009cc6:	4682      	mov	sl, r0
 8009cc8:	468b      	mov	fp, r1
 8009cca:	1124      	asrs	r4, r4, #4
 8009ccc:	d0dc      	beq.n	8009c88 <_strtod_l+0x518>
 8009cce:	2c1f      	cmp	r4, #31
 8009cd0:	dd20      	ble.n	8009d14 <_strtod_l+0x5a4>
 8009cd2:	2400      	movs	r4, #0
 8009cd4:	46a0      	mov	r8, r4
 8009cd6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009cd8:	46a1      	mov	r9, r4
 8009cda:	9a05      	ldr	r2, [sp, #20]
 8009cdc:	2322      	movs	r3, #34	@ 0x22
 8009cde:	f04f 0a00 	mov.w	sl, #0
 8009ce2:	f04f 0b00 	mov.w	fp, #0
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	e768      	b.n	8009bbc <_strtod_l+0x44c>
 8009cea:	bf00      	nop
 8009cec:	0800cede 	.word	0x0800cede
 8009cf0:	0800d0f4 	.word	0x0800d0f4
 8009cf4:	0800ced6 	.word	0x0800ced6
 8009cf8:	0800cf0d 	.word	0x0800cf0d
 8009cfc:	0800d19c 	.word	0x0800d19c
 8009d00:	0800d028 	.word	0x0800d028
 8009d04:	0800d000 	.word	0x0800d000
 8009d08:	7ff00000 	.word	0x7ff00000
 8009d0c:	7ca00000 	.word	0x7ca00000
 8009d10:	7fefffff 	.word	0x7fefffff
 8009d14:	f014 0310 	ands.w	r3, r4, #16
 8009d18:	bf18      	it	ne
 8009d1a:	236a      	movne	r3, #106	@ 0x6a
 8009d1c:	4ea9      	ldr	r6, [pc, #676]	@ (8009fc4 <_strtod_l+0x854>)
 8009d1e:	9308      	str	r3, [sp, #32]
 8009d20:	4650      	mov	r0, sl
 8009d22:	4659      	mov	r1, fp
 8009d24:	2300      	movs	r3, #0
 8009d26:	07e2      	lsls	r2, r4, #31
 8009d28:	d504      	bpl.n	8009d34 <_strtod_l+0x5c4>
 8009d2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d2e:	f7f6 fc73 	bl	8000618 <__aeabi_dmul>
 8009d32:	2301      	movs	r3, #1
 8009d34:	1064      	asrs	r4, r4, #1
 8009d36:	f106 0608 	add.w	r6, r6, #8
 8009d3a:	d1f4      	bne.n	8009d26 <_strtod_l+0x5b6>
 8009d3c:	b10b      	cbz	r3, 8009d42 <_strtod_l+0x5d2>
 8009d3e:	4682      	mov	sl, r0
 8009d40:	468b      	mov	fp, r1
 8009d42:	9b08      	ldr	r3, [sp, #32]
 8009d44:	b1b3      	cbz	r3, 8009d74 <_strtod_l+0x604>
 8009d46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	4659      	mov	r1, fp
 8009d52:	dd0f      	ble.n	8009d74 <_strtod_l+0x604>
 8009d54:	2b1f      	cmp	r3, #31
 8009d56:	dd55      	ble.n	8009e04 <_strtod_l+0x694>
 8009d58:	2b34      	cmp	r3, #52	@ 0x34
 8009d5a:	bfde      	ittt	le
 8009d5c:	f04f 33ff 	movle.w	r3, #4294967295
 8009d60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009d64:	4093      	lslle	r3, r2
 8009d66:	f04f 0a00 	mov.w	sl, #0
 8009d6a:	bfcc      	ite	gt
 8009d6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009d70:	ea03 0b01 	andle.w	fp, r3, r1
 8009d74:	2200      	movs	r2, #0
 8009d76:	2300      	movs	r3, #0
 8009d78:	4650      	mov	r0, sl
 8009d7a:	4659      	mov	r1, fp
 8009d7c:	f7f6 feb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d1a6      	bne.n	8009cd2 <_strtod_l+0x562>
 8009d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009d8a:	9805      	ldr	r0, [sp, #20]
 8009d8c:	462b      	mov	r3, r5
 8009d8e:	463a      	mov	r2, r7
 8009d90:	f7ff f8c6 	bl	8008f20 <__s2b>
 8009d94:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f43f af05 	beq.w	8009ba6 <_strtod_l+0x436>
 8009d9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d9e:	2a00      	cmp	r2, #0
 8009da0:	eba9 0308 	sub.w	r3, r9, r8
 8009da4:	bfa8      	it	ge
 8009da6:	2300      	movge	r3, #0
 8009da8:	9312      	str	r3, [sp, #72]	@ 0x48
 8009daa:	2400      	movs	r4, #0
 8009dac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009db0:	9316      	str	r3, [sp, #88]	@ 0x58
 8009db2:	46a0      	mov	r8, r4
 8009db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009db6:	9805      	ldr	r0, [sp, #20]
 8009db8:	6859      	ldr	r1, [r3, #4]
 8009dba:	f7ff f809 	bl	8008dd0 <_Balloc>
 8009dbe:	4681      	mov	r9, r0
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f43f aef4 	beq.w	8009bae <_strtod_l+0x43e>
 8009dc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dc8:	691a      	ldr	r2, [r3, #16]
 8009dca:	3202      	adds	r2, #2
 8009dcc:	f103 010c 	add.w	r1, r3, #12
 8009dd0:	0092      	lsls	r2, r2, #2
 8009dd2:	300c      	adds	r0, #12
 8009dd4:	f7fe f89b 	bl	8007f0e <memcpy>
 8009dd8:	ec4b ab10 	vmov	d0, sl, fp
 8009ddc:	9805      	ldr	r0, [sp, #20]
 8009dde:	aa1c      	add	r2, sp, #112	@ 0x70
 8009de0:	a91b      	add	r1, sp, #108	@ 0x6c
 8009de2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009de6:	f7ff fbd7 	bl	8009598 <__d2b>
 8009dea:	901a      	str	r0, [sp, #104]	@ 0x68
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f43f aede 	beq.w	8009bae <_strtod_l+0x43e>
 8009df2:	9805      	ldr	r0, [sp, #20]
 8009df4:	2101      	movs	r1, #1
 8009df6:	f7ff f929 	bl	800904c <__i2b>
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	b948      	cbnz	r0, 8009e12 <_strtod_l+0x6a2>
 8009dfe:	f04f 0800 	mov.w	r8, #0
 8009e02:	e6d4      	b.n	8009bae <_strtod_l+0x43e>
 8009e04:	f04f 32ff 	mov.w	r2, #4294967295
 8009e08:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0c:	ea03 0a0a 	and.w	sl, r3, sl
 8009e10:	e7b0      	b.n	8009d74 <_strtod_l+0x604>
 8009e12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009e14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009e16:	2d00      	cmp	r5, #0
 8009e18:	bfab      	itete	ge
 8009e1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009e1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009e1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009e20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009e22:	bfac      	ite	ge
 8009e24:	18ef      	addge	r7, r5, r3
 8009e26:	1b5e      	sublt	r6, r3, r5
 8009e28:	9b08      	ldr	r3, [sp, #32]
 8009e2a:	1aed      	subs	r5, r5, r3
 8009e2c:	4415      	add	r5, r2
 8009e2e:	4b66      	ldr	r3, [pc, #408]	@ (8009fc8 <_strtod_l+0x858>)
 8009e30:	3d01      	subs	r5, #1
 8009e32:	429d      	cmp	r5, r3
 8009e34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009e38:	da50      	bge.n	8009edc <_strtod_l+0x76c>
 8009e3a:	1b5b      	subs	r3, r3, r5
 8009e3c:	2b1f      	cmp	r3, #31
 8009e3e:	eba2 0203 	sub.w	r2, r2, r3
 8009e42:	f04f 0101 	mov.w	r1, #1
 8009e46:	dc3d      	bgt.n	8009ec4 <_strtod_l+0x754>
 8009e48:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e4e:	2300      	movs	r3, #0
 8009e50:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e52:	18bd      	adds	r5, r7, r2
 8009e54:	9b08      	ldr	r3, [sp, #32]
 8009e56:	42af      	cmp	r7, r5
 8009e58:	4416      	add	r6, r2
 8009e5a:	441e      	add	r6, r3
 8009e5c:	463b      	mov	r3, r7
 8009e5e:	bfa8      	it	ge
 8009e60:	462b      	movge	r3, r5
 8009e62:	42b3      	cmp	r3, r6
 8009e64:	bfa8      	it	ge
 8009e66:	4633      	movge	r3, r6
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	bfc2      	ittt	gt
 8009e6c:	1aed      	subgt	r5, r5, r3
 8009e6e:	1af6      	subgt	r6, r6, r3
 8009e70:	1aff      	subgt	r7, r7, r3
 8009e72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dd16      	ble.n	8009ea6 <_strtod_l+0x736>
 8009e78:	4641      	mov	r1, r8
 8009e7a:	9805      	ldr	r0, [sp, #20]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	f7ff f9a5 	bl	80091cc <__pow5mult>
 8009e82:	4680      	mov	r8, r0
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d0ba      	beq.n	8009dfe <_strtod_l+0x68e>
 8009e88:	4601      	mov	r1, r0
 8009e8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e8c:	9805      	ldr	r0, [sp, #20]
 8009e8e:	f7ff f8f3 	bl	8009078 <__multiply>
 8009e92:	900e      	str	r0, [sp, #56]	@ 0x38
 8009e94:	2800      	cmp	r0, #0
 8009e96:	f43f ae8a 	beq.w	8009bae <_strtod_l+0x43e>
 8009e9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e9c:	9805      	ldr	r0, [sp, #20]
 8009e9e:	f7fe ffd7 	bl	8008e50 <_Bfree>
 8009ea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ea4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ea6:	2d00      	cmp	r5, #0
 8009ea8:	dc1d      	bgt.n	8009ee6 <_strtod_l+0x776>
 8009eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	dd23      	ble.n	8009ef8 <_strtod_l+0x788>
 8009eb0:	4649      	mov	r1, r9
 8009eb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009eb4:	9805      	ldr	r0, [sp, #20]
 8009eb6:	f7ff f989 	bl	80091cc <__pow5mult>
 8009eba:	4681      	mov	r9, r0
 8009ebc:	b9e0      	cbnz	r0, 8009ef8 <_strtod_l+0x788>
 8009ebe:	f04f 0900 	mov.w	r9, #0
 8009ec2:	e674      	b.n	8009bae <_strtod_l+0x43e>
 8009ec4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009ec8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009ecc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009ed0:	35e2      	adds	r5, #226	@ 0xe2
 8009ed2:	fa01 f305 	lsl.w	r3, r1, r5
 8009ed6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ed8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009eda:	e7ba      	b.n	8009e52 <_strtod_l+0x6e2>
 8009edc:	2300      	movs	r3, #0
 8009ede:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ee4:	e7b5      	b.n	8009e52 <_strtod_l+0x6e2>
 8009ee6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ee8:	9805      	ldr	r0, [sp, #20]
 8009eea:	462a      	mov	r2, r5
 8009eec:	f7ff f9c8 	bl	8009280 <__lshift>
 8009ef0:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d1d9      	bne.n	8009eaa <_strtod_l+0x73a>
 8009ef6:	e65a      	b.n	8009bae <_strtod_l+0x43e>
 8009ef8:	2e00      	cmp	r6, #0
 8009efa:	dd07      	ble.n	8009f0c <_strtod_l+0x79c>
 8009efc:	4649      	mov	r1, r9
 8009efe:	9805      	ldr	r0, [sp, #20]
 8009f00:	4632      	mov	r2, r6
 8009f02:	f7ff f9bd 	bl	8009280 <__lshift>
 8009f06:	4681      	mov	r9, r0
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d0d8      	beq.n	8009ebe <_strtod_l+0x74e>
 8009f0c:	2f00      	cmp	r7, #0
 8009f0e:	dd08      	ble.n	8009f22 <_strtod_l+0x7b2>
 8009f10:	4641      	mov	r1, r8
 8009f12:	9805      	ldr	r0, [sp, #20]
 8009f14:	463a      	mov	r2, r7
 8009f16:	f7ff f9b3 	bl	8009280 <__lshift>
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	f43f ae46 	beq.w	8009bae <_strtod_l+0x43e>
 8009f22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f24:	9805      	ldr	r0, [sp, #20]
 8009f26:	464a      	mov	r2, r9
 8009f28:	f7ff fa32 	bl	8009390 <__mdiff>
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f43f ae3d 	beq.w	8009bae <_strtod_l+0x43e>
 8009f34:	68c3      	ldr	r3, [r0, #12]
 8009f36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60c3      	str	r3, [r0, #12]
 8009f3c:	4641      	mov	r1, r8
 8009f3e:	f7ff fa0b 	bl	8009358 <__mcmp>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	da46      	bge.n	8009fd4 <_strtod_l+0x864>
 8009f46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f48:	ea53 030a 	orrs.w	r3, r3, sl
 8009f4c:	d16c      	bne.n	800a028 <_strtod_l+0x8b8>
 8009f4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d168      	bne.n	800a028 <_strtod_l+0x8b8>
 8009f56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f5a:	0d1b      	lsrs	r3, r3, #20
 8009f5c:	051b      	lsls	r3, r3, #20
 8009f5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f62:	d961      	bls.n	800a028 <_strtod_l+0x8b8>
 8009f64:	6963      	ldr	r3, [r4, #20]
 8009f66:	b913      	cbnz	r3, 8009f6e <_strtod_l+0x7fe>
 8009f68:	6923      	ldr	r3, [r4, #16]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	dd5c      	ble.n	800a028 <_strtod_l+0x8b8>
 8009f6e:	4621      	mov	r1, r4
 8009f70:	2201      	movs	r2, #1
 8009f72:	9805      	ldr	r0, [sp, #20]
 8009f74:	f7ff f984 	bl	8009280 <__lshift>
 8009f78:	4641      	mov	r1, r8
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	f7ff f9ec 	bl	8009358 <__mcmp>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	dd51      	ble.n	800a028 <_strtod_l+0x8b8>
 8009f84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f88:	9a08      	ldr	r2, [sp, #32]
 8009f8a:	0d1b      	lsrs	r3, r3, #20
 8009f8c:	051b      	lsls	r3, r3, #20
 8009f8e:	2a00      	cmp	r2, #0
 8009f90:	d06b      	beq.n	800a06a <_strtod_l+0x8fa>
 8009f92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f96:	d868      	bhi.n	800a06a <_strtod_l+0x8fa>
 8009f98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009f9c:	f67f ae9d 	bls.w	8009cda <_strtod_l+0x56a>
 8009fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8009fcc <_strtod_l+0x85c>)
 8009fa2:	4650      	mov	r0, sl
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f7f6 fb36 	bl	8000618 <__aeabi_dmul>
 8009fac:	4b08      	ldr	r3, [pc, #32]	@ (8009fd0 <_strtod_l+0x860>)
 8009fae:	400b      	ands	r3, r1
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	468b      	mov	fp, r1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f47f ae05 	bne.w	8009bc4 <_strtod_l+0x454>
 8009fba:	9a05      	ldr	r2, [sp, #20]
 8009fbc:	2322      	movs	r3, #34	@ 0x22
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	e600      	b.n	8009bc4 <_strtod_l+0x454>
 8009fc2:	bf00      	nop
 8009fc4:	0800d120 	.word	0x0800d120
 8009fc8:	fffffc02 	.word	0xfffffc02
 8009fcc:	39500000 	.word	0x39500000
 8009fd0:	7ff00000 	.word	0x7ff00000
 8009fd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009fd8:	d165      	bne.n	800a0a6 <_strtod_l+0x936>
 8009fda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009fdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fe0:	b35a      	cbz	r2, 800a03a <_strtod_l+0x8ca>
 8009fe2:	4a9f      	ldr	r2, [pc, #636]	@ (800a260 <_strtod_l+0xaf0>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d12b      	bne.n	800a040 <_strtod_l+0x8d0>
 8009fe8:	9b08      	ldr	r3, [sp, #32]
 8009fea:	4651      	mov	r1, sl
 8009fec:	b303      	cbz	r3, 800a030 <_strtod_l+0x8c0>
 8009fee:	4b9d      	ldr	r3, [pc, #628]	@ (800a264 <_strtod_l+0xaf4>)
 8009ff0:	465a      	mov	r2, fp
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ffc:	d81b      	bhi.n	800a036 <_strtod_l+0x8c6>
 8009ffe:	0d1b      	lsrs	r3, r3, #20
 800a000:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a004:	fa02 f303 	lsl.w	r3, r2, r3
 800a008:	4299      	cmp	r1, r3
 800a00a:	d119      	bne.n	800a040 <_strtod_l+0x8d0>
 800a00c:	4b96      	ldr	r3, [pc, #600]	@ (800a268 <_strtod_l+0xaf8>)
 800a00e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a010:	429a      	cmp	r2, r3
 800a012:	d102      	bne.n	800a01a <_strtod_l+0x8aa>
 800a014:	3101      	adds	r1, #1
 800a016:	f43f adca 	beq.w	8009bae <_strtod_l+0x43e>
 800a01a:	4b92      	ldr	r3, [pc, #584]	@ (800a264 <_strtod_l+0xaf4>)
 800a01c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a01e:	401a      	ands	r2, r3
 800a020:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a024:	f04f 0a00 	mov.w	sl, #0
 800a028:	9b08      	ldr	r3, [sp, #32]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1b8      	bne.n	8009fa0 <_strtod_l+0x830>
 800a02e:	e5c9      	b.n	8009bc4 <_strtod_l+0x454>
 800a030:	f04f 33ff 	mov.w	r3, #4294967295
 800a034:	e7e8      	b.n	800a008 <_strtod_l+0x898>
 800a036:	4613      	mov	r3, r2
 800a038:	e7e6      	b.n	800a008 <_strtod_l+0x898>
 800a03a:	ea53 030a 	orrs.w	r3, r3, sl
 800a03e:	d0a1      	beq.n	8009f84 <_strtod_l+0x814>
 800a040:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a042:	b1db      	cbz	r3, 800a07c <_strtod_l+0x90c>
 800a044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a046:	4213      	tst	r3, r2
 800a048:	d0ee      	beq.n	800a028 <_strtod_l+0x8b8>
 800a04a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a04c:	9a08      	ldr	r2, [sp, #32]
 800a04e:	4650      	mov	r0, sl
 800a050:	4659      	mov	r1, fp
 800a052:	b1bb      	cbz	r3, 800a084 <_strtod_l+0x914>
 800a054:	f7ff fb6e 	bl	8009734 <sulp>
 800a058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a05c:	ec53 2b10 	vmov	r2, r3, d0
 800a060:	f7f6 f924 	bl	80002ac <__adddf3>
 800a064:	4682      	mov	sl, r0
 800a066:	468b      	mov	fp, r1
 800a068:	e7de      	b.n	800a028 <_strtod_l+0x8b8>
 800a06a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a06e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a072:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a076:	f04f 3aff 	mov.w	sl, #4294967295
 800a07a:	e7d5      	b.n	800a028 <_strtod_l+0x8b8>
 800a07c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a07e:	ea13 0f0a 	tst.w	r3, sl
 800a082:	e7e1      	b.n	800a048 <_strtod_l+0x8d8>
 800a084:	f7ff fb56 	bl	8009734 <sulp>
 800a088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a08c:	ec53 2b10 	vmov	r2, r3, d0
 800a090:	f7f6 f90a 	bl	80002a8 <__aeabi_dsub>
 800a094:	2200      	movs	r2, #0
 800a096:	2300      	movs	r3, #0
 800a098:	4682      	mov	sl, r0
 800a09a:	468b      	mov	fp, r1
 800a09c:	f7f6 fd24 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d0c1      	beq.n	800a028 <_strtod_l+0x8b8>
 800a0a4:	e619      	b.n	8009cda <_strtod_l+0x56a>
 800a0a6:	4641      	mov	r1, r8
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f7ff facd 	bl	8009648 <__ratio>
 800a0ae:	ec57 6b10 	vmov	r6, r7, d0
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f7f6 fd28 	bl	8000b10 <__aeabi_dcmple>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d06f      	beq.n	800a1a4 <_strtod_l+0xa34>
 800a0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d17a      	bne.n	800a1c0 <_strtod_l+0xa50>
 800a0ca:	f1ba 0f00 	cmp.w	sl, #0
 800a0ce:	d158      	bne.n	800a182 <_strtod_l+0xa12>
 800a0d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d15a      	bne.n	800a190 <_strtod_l+0xa20>
 800a0da:	4b64      	ldr	r3, [pc, #400]	@ (800a26c <_strtod_l+0xafc>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4630      	mov	r0, r6
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	f7f6 fd0b 	bl	8000afc <__aeabi_dcmplt>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d159      	bne.n	800a19e <_strtod_l+0xa2e>
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	4b60      	ldr	r3, [pc, #384]	@ (800a270 <_strtod_l+0xb00>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f7f6 fa91 	bl	8000618 <__aeabi_dmul>
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	460f      	mov	r7, r1
 800a0fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a0fe:	9606      	str	r6, [sp, #24]
 800a100:	9307      	str	r3, [sp, #28]
 800a102:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a106:	4d57      	ldr	r5, [pc, #348]	@ (800a264 <_strtod_l+0xaf4>)
 800a108:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a10c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a10e:	401d      	ands	r5, r3
 800a110:	4b58      	ldr	r3, [pc, #352]	@ (800a274 <_strtod_l+0xb04>)
 800a112:	429d      	cmp	r5, r3
 800a114:	f040 80b2 	bne.w	800a27c <_strtod_l+0xb0c>
 800a118:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a11e:	ec4b ab10 	vmov	d0, sl, fp
 800a122:	f7ff f9c9 	bl	80094b8 <__ulp>
 800a126:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a12a:	ec51 0b10 	vmov	r0, r1, d0
 800a12e:	f7f6 fa73 	bl	8000618 <__aeabi_dmul>
 800a132:	4652      	mov	r2, sl
 800a134:	465b      	mov	r3, fp
 800a136:	f7f6 f8b9 	bl	80002ac <__adddf3>
 800a13a:	460b      	mov	r3, r1
 800a13c:	4949      	ldr	r1, [pc, #292]	@ (800a264 <_strtod_l+0xaf4>)
 800a13e:	4a4e      	ldr	r2, [pc, #312]	@ (800a278 <_strtod_l+0xb08>)
 800a140:	4019      	ands	r1, r3
 800a142:	4291      	cmp	r1, r2
 800a144:	4682      	mov	sl, r0
 800a146:	d942      	bls.n	800a1ce <_strtod_l+0xa5e>
 800a148:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a14a:	4b47      	ldr	r3, [pc, #284]	@ (800a268 <_strtod_l+0xaf8>)
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d103      	bne.n	800a158 <_strtod_l+0x9e8>
 800a150:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a152:	3301      	adds	r3, #1
 800a154:	f43f ad2b 	beq.w	8009bae <_strtod_l+0x43e>
 800a158:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a268 <_strtod_l+0xaf8>
 800a15c:	f04f 3aff 	mov.w	sl, #4294967295
 800a160:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a162:	9805      	ldr	r0, [sp, #20]
 800a164:	f7fe fe74 	bl	8008e50 <_Bfree>
 800a168:	9805      	ldr	r0, [sp, #20]
 800a16a:	4649      	mov	r1, r9
 800a16c:	f7fe fe70 	bl	8008e50 <_Bfree>
 800a170:	9805      	ldr	r0, [sp, #20]
 800a172:	4641      	mov	r1, r8
 800a174:	f7fe fe6c 	bl	8008e50 <_Bfree>
 800a178:	9805      	ldr	r0, [sp, #20]
 800a17a:	4621      	mov	r1, r4
 800a17c:	f7fe fe68 	bl	8008e50 <_Bfree>
 800a180:	e618      	b.n	8009db4 <_strtod_l+0x644>
 800a182:	f1ba 0f01 	cmp.w	sl, #1
 800a186:	d103      	bne.n	800a190 <_strtod_l+0xa20>
 800a188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f43f ada5 	beq.w	8009cda <_strtod_l+0x56a>
 800a190:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a240 <_strtod_l+0xad0>
 800a194:	4f35      	ldr	r7, [pc, #212]	@ (800a26c <_strtod_l+0xafc>)
 800a196:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a19a:	2600      	movs	r6, #0
 800a19c:	e7b1      	b.n	800a102 <_strtod_l+0x992>
 800a19e:	4f34      	ldr	r7, [pc, #208]	@ (800a270 <_strtod_l+0xb00>)
 800a1a0:	2600      	movs	r6, #0
 800a1a2:	e7aa      	b.n	800a0fa <_strtod_l+0x98a>
 800a1a4:	4b32      	ldr	r3, [pc, #200]	@ (800a270 <_strtod_l+0xb00>)
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f7f6 fa34 	bl	8000618 <__aeabi_dmul>
 800a1b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	460f      	mov	r7, r1
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d09f      	beq.n	800a0fa <_strtod_l+0x98a>
 800a1ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a1be:	e7a0      	b.n	800a102 <_strtod_l+0x992>
 800a1c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a248 <_strtod_l+0xad8>
 800a1c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1c8:	ec57 6b17 	vmov	r6, r7, d7
 800a1cc:	e799      	b.n	800a102 <_strtod_l+0x992>
 800a1ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a1d2:	9b08      	ldr	r3, [sp, #32]
 800a1d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1c1      	bne.n	800a160 <_strtod_l+0x9f0>
 800a1dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1e0:	0d1b      	lsrs	r3, r3, #20
 800a1e2:	051b      	lsls	r3, r3, #20
 800a1e4:	429d      	cmp	r5, r3
 800a1e6:	d1bb      	bne.n	800a160 <_strtod_l+0x9f0>
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	f7f6 fd74 	bl	8000cd8 <__aeabi_d2lz>
 800a1f0:	f7f6 f9e4 	bl	80005bc <__aeabi_l2d>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	f7f6 f854 	bl	80002a8 <__aeabi_dsub>
 800a200:	460b      	mov	r3, r1
 800a202:	4602      	mov	r2, r0
 800a204:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a208:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a20e:	ea46 060a 	orr.w	r6, r6, sl
 800a212:	431e      	orrs	r6, r3
 800a214:	d06f      	beq.n	800a2f6 <_strtod_l+0xb86>
 800a216:	a30e      	add	r3, pc, #56	@ (adr r3, 800a250 <_strtod_l+0xae0>)
 800a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21c:	f7f6 fc6e 	bl	8000afc <__aeabi_dcmplt>
 800a220:	2800      	cmp	r0, #0
 800a222:	f47f accf 	bne.w	8009bc4 <_strtod_l+0x454>
 800a226:	a30c      	add	r3, pc, #48	@ (adr r3, 800a258 <_strtod_l+0xae8>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a230:	f7f6 fc82 	bl	8000b38 <__aeabi_dcmpgt>
 800a234:	2800      	cmp	r0, #0
 800a236:	d093      	beq.n	800a160 <_strtod_l+0x9f0>
 800a238:	e4c4      	b.n	8009bc4 <_strtod_l+0x454>
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w
 800a240:	00000000 	.word	0x00000000
 800a244:	bff00000 	.word	0xbff00000
 800a248:	00000000 	.word	0x00000000
 800a24c:	3ff00000 	.word	0x3ff00000
 800a250:	94a03595 	.word	0x94a03595
 800a254:	3fdfffff 	.word	0x3fdfffff
 800a258:	35afe535 	.word	0x35afe535
 800a25c:	3fe00000 	.word	0x3fe00000
 800a260:	000fffff 	.word	0x000fffff
 800a264:	7ff00000 	.word	0x7ff00000
 800a268:	7fefffff 	.word	0x7fefffff
 800a26c:	3ff00000 	.word	0x3ff00000
 800a270:	3fe00000 	.word	0x3fe00000
 800a274:	7fe00000 	.word	0x7fe00000
 800a278:	7c9fffff 	.word	0x7c9fffff
 800a27c:	9b08      	ldr	r3, [sp, #32]
 800a27e:	b323      	cbz	r3, 800a2ca <_strtod_l+0xb5a>
 800a280:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a284:	d821      	bhi.n	800a2ca <_strtod_l+0xb5a>
 800a286:	a328      	add	r3, pc, #160	@ (adr r3, 800a328 <_strtod_l+0xbb8>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	4630      	mov	r0, r6
 800a28e:	4639      	mov	r1, r7
 800a290:	f7f6 fc3e 	bl	8000b10 <__aeabi_dcmple>
 800a294:	b1a0      	cbz	r0, 800a2c0 <_strtod_l+0xb50>
 800a296:	4639      	mov	r1, r7
 800a298:	4630      	mov	r0, r6
 800a29a:	f7f6 fc95 	bl	8000bc8 <__aeabi_d2uiz>
 800a29e:	2801      	cmp	r0, #1
 800a2a0:	bf38      	it	cc
 800a2a2:	2001      	movcc	r0, #1
 800a2a4:	f7f6 f93e 	bl	8000524 <__aeabi_ui2d>
 800a2a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	b9fb      	cbnz	r3, 800a2f0 <_strtod_l+0xb80>
 800a2b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a2b4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a2b6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a2b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a2bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a2c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a2c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a2c6:	1b5b      	subs	r3, r3, r5
 800a2c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a2ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a2ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a2d2:	f7ff f8f1 	bl	80094b8 <__ulp>
 800a2d6:	4650      	mov	r0, sl
 800a2d8:	ec53 2b10 	vmov	r2, r3, d0
 800a2dc:	4659      	mov	r1, fp
 800a2de:	f7f6 f99b 	bl	8000618 <__aeabi_dmul>
 800a2e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a2e6:	f7f5 ffe1 	bl	80002ac <__adddf3>
 800a2ea:	4682      	mov	sl, r0
 800a2ec:	468b      	mov	fp, r1
 800a2ee:	e770      	b.n	800a1d2 <_strtod_l+0xa62>
 800a2f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a2f4:	e7e0      	b.n	800a2b8 <_strtod_l+0xb48>
 800a2f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a330 <_strtod_l+0xbc0>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f6 fbfe 	bl	8000afc <__aeabi_dcmplt>
 800a300:	e798      	b.n	800a234 <_strtod_l+0xac4>
 800a302:	2300      	movs	r3, #0
 800a304:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a306:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a308:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a30a:	6013      	str	r3, [r2, #0]
 800a30c:	f7ff ba6d 	b.w	80097ea <_strtod_l+0x7a>
 800a310:	2a65      	cmp	r2, #101	@ 0x65
 800a312:	f43f ab66 	beq.w	80099e2 <_strtod_l+0x272>
 800a316:	2a45      	cmp	r2, #69	@ 0x45
 800a318:	f43f ab63 	beq.w	80099e2 <_strtod_l+0x272>
 800a31c:	2301      	movs	r3, #1
 800a31e:	f7ff bb9e 	b.w	8009a5e <_strtod_l+0x2ee>
 800a322:	bf00      	nop
 800a324:	f3af 8000 	nop.w
 800a328:	ffc00000 	.word	0xffc00000
 800a32c:	41dfffff 	.word	0x41dfffff
 800a330:	94a03595 	.word	0x94a03595
 800a334:	3fcfffff 	.word	0x3fcfffff

0800a338 <_strtod_r>:
 800a338:	4b01      	ldr	r3, [pc, #4]	@ (800a340 <_strtod_r+0x8>)
 800a33a:	f7ff ba19 	b.w	8009770 <_strtod_l>
 800a33e:	bf00      	nop
 800a340:	20000350 	.word	0x20000350

0800a344 <__ssputs_r>:
 800a344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a348:	688e      	ldr	r6, [r1, #8]
 800a34a:	461f      	mov	r7, r3
 800a34c:	42be      	cmp	r6, r7
 800a34e:	680b      	ldr	r3, [r1, #0]
 800a350:	4682      	mov	sl, r0
 800a352:	460c      	mov	r4, r1
 800a354:	4690      	mov	r8, r2
 800a356:	d82d      	bhi.n	800a3b4 <__ssputs_r+0x70>
 800a358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a35c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a360:	d026      	beq.n	800a3b0 <__ssputs_r+0x6c>
 800a362:	6965      	ldr	r5, [r4, #20]
 800a364:	6909      	ldr	r1, [r1, #16]
 800a366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a36a:	eba3 0901 	sub.w	r9, r3, r1
 800a36e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a372:	1c7b      	adds	r3, r7, #1
 800a374:	444b      	add	r3, r9
 800a376:	106d      	asrs	r5, r5, #1
 800a378:	429d      	cmp	r5, r3
 800a37a:	bf38      	it	cc
 800a37c:	461d      	movcc	r5, r3
 800a37e:	0553      	lsls	r3, r2, #21
 800a380:	d527      	bpl.n	800a3d2 <__ssputs_r+0x8e>
 800a382:	4629      	mov	r1, r5
 800a384:	f7fe fc98 	bl	8008cb8 <_malloc_r>
 800a388:	4606      	mov	r6, r0
 800a38a:	b360      	cbz	r0, 800a3e6 <__ssputs_r+0xa2>
 800a38c:	6921      	ldr	r1, [r4, #16]
 800a38e:	464a      	mov	r2, r9
 800a390:	f7fd fdbd 	bl	8007f0e <memcpy>
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a39a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a39e:	81a3      	strh	r3, [r4, #12]
 800a3a0:	6126      	str	r6, [r4, #16]
 800a3a2:	6165      	str	r5, [r4, #20]
 800a3a4:	444e      	add	r6, r9
 800a3a6:	eba5 0509 	sub.w	r5, r5, r9
 800a3aa:	6026      	str	r6, [r4, #0]
 800a3ac:	60a5      	str	r5, [r4, #8]
 800a3ae:	463e      	mov	r6, r7
 800a3b0:	42be      	cmp	r6, r7
 800a3b2:	d900      	bls.n	800a3b6 <__ssputs_r+0x72>
 800a3b4:	463e      	mov	r6, r7
 800a3b6:	6820      	ldr	r0, [r4, #0]
 800a3b8:	4632      	mov	r2, r6
 800a3ba:	4641      	mov	r1, r8
 800a3bc:	f000 f9c6 	bl	800a74c <memmove>
 800a3c0:	68a3      	ldr	r3, [r4, #8]
 800a3c2:	1b9b      	subs	r3, r3, r6
 800a3c4:	60a3      	str	r3, [r4, #8]
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	4433      	add	r3, r6
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d2:	462a      	mov	r2, r5
 800a3d4:	f000 fd7d 	bl	800aed2 <_realloc_r>
 800a3d8:	4606      	mov	r6, r0
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	d1e0      	bne.n	800a3a0 <__ssputs_r+0x5c>
 800a3de:	6921      	ldr	r1, [r4, #16]
 800a3e0:	4650      	mov	r0, sl
 800a3e2:	f7fe fbf5 	bl	8008bd0 <_free_r>
 800a3e6:	230c      	movs	r3, #12
 800a3e8:	f8ca 3000 	str.w	r3, [sl]
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3f2:	81a3      	strh	r3, [r4, #12]
 800a3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f8:	e7e9      	b.n	800a3ce <__ssputs_r+0x8a>
	...

0800a3fc <_svfiprintf_r>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	4698      	mov	r8, r3
 800a402:	898b      	ldrh	r3, [r1, #12]
 800a404:	061b      	lsls	r3, r3, #24
 800a406:	b09d      	sub	sp, #116	@ 0x74
 800a408:	4607      	mov	r7, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	4614      	mov	r4, r2
 800a40e:	d510      	bpl.n	800a432 <_svfiprintf_r+0x36>
 800a410:	690b      	ldr	r3, [r1, #16]
 800a412:	b973      	cbnz	r3, 800a432 <_svfiprintf_r+0x36>
 800a414:	2140      	movs	r1, #64	@ 0x40
 800a416:	f7fe fc4f 	bl	8008cb8 <_malloc_r>
 800a41a:	6028      	str	r0, [r5, #0]
 800a41c:	6128      	str	r0, [r5, #16]
 800a41e:	b930      	cbnz	r0, 800a42e <_svfiprintf_r+0x32>
 800a420:	230c      	movs	r3, #12
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	f04f 30ff 	mov.w	r0, #4294967295
 800a428:	b01d      	add	sp, #116	@ 0x74
 800a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42e:	2340      	movs	r3, #64	@ 0x40
 800a430:	616b      	str	r3, [r5, #20]
 800a432:	2300      	movs	r3, #0
 800a434:	9309      	str	r3, [sp, #36]	@ 0x24
 800a436:	2320      	movs	r3, #32
 800a438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a43c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a440:	2330      	movs	r3, #48	@ 0x30
 800a442:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a5e0 <_svfiprintf_r+0x1e4>
 800a446:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a44a:	f04f 0901 	mov.w	r9, #1
 800a44e:	4623      	mov	r3, r4
 800a450:	469a      	mov	sl, r3
 800a452:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a456:	b10a      	cbz	r2, 800a45c <_svfiprintf_r+0x60>
 800a458:	2a25      	cmp	r2, #37	@ 0x25
 800a45a:	d1f9      	bne.n	800a450 <_svfiprintf_r+0x54>
 800a45c:	ebba 0b04 	subs.w	fp, sl, r4
 800a460:	d00b      	beq.n	800a47a <_svfiprintf_r+0x7e>
 800a462:	465b      	mov	r3, fp
 800a464:	4622      	mov	r2, r4
 800a466:	4629      	mov	r1, r5
 800a468:	4638      	mov	r0, r7
 800a46a:	f7ff ff6b 	bl	800a344 <__ssputs_r>
 800a46e:	3001      	adds	r0, #1
 800a470:	f000 80a7 	beq.w	800a5c2 <_svfiprintf_r+0x1c6>
 800a474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a476:	445a      	add	r2, fp
 800a478:	9209      	str	r2, [sp, #36]	@ 0x24
 800a47a:	f89a 3000 	ldrb.w	r3, [sl]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 809f 	beq.w	800a5c2 <_svfiprintf_r+0x1c6>
 800a484:	2300      	movs	r3, #0
 800a486:	f04f 32ff 	mov.w	r2, #4294967295
 800a48a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a48e:	f10a 0a01 	add.w	sl, sl, #1
 800a492:	9304      	str	r3, [sp, #16]
 800a494:	9307      	str	r3, [sp, #28]
 800a496:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a49a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a49c:	4654      	mov	r4, sl
 800a49e:	2205      	movs	r2, #5
 800a4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a4:	484e      	ldr	r0, [pc, #312]	@ (800a5e0 <_svfiprintf_r+0x1e4>)
 800a4a6:	f7f5 fea3 	bl	80001f0 <memchr>
 800a4aa:	9a04      	ldr	r2, [sp, #16]
 800a4ac:	b9d8      	cbnz	r0, 800a4e6 <_svfiprintf_r+0xea>
 800a4ae:	06d0      	lsls	r0, r2, #27
 800a4b0:	bf44      	itt	mi
 800a4b2:	2320      	movmi	r3, #32
 800a4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4b8:	0711      	lsls	r1, r2, #28
 800a4ba:	bf44      	itt	mi
 800a4bc:	232b      	movmi	r3, #43	@ 0x2b
 800a4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4c8:	d015      	beq.n	800a4f6 <_svfiprintf_r+0xfa>
 800a4ca:	9a07      	ldr	r2, [sp, #28]
 800a4cc:	4654      	mov	r4, sl
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	f04f 0c0a 	mov.w	ip, #10
 800a4d4:	4621      	mov	r1, r4
 800a4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4da:	3b30      	subs	r3, #48	@ 0x30
 800a4dc:	2b09      	cmp	r3, #9
 800a4de:	d94b      	bls.n	800a578 <_svfiprintf_r+0x17c>
 800a4e0:	b1b0      	cbz	r0, 800a510 <_svfiprintf_r+0x114>
 800a4e2:	9207      	str	r2, [sp, #28]
 800a4e4:	e014      	b.n	800a510 <_svfiprintf_r+0x114>
 800a4e6:	eba0 0308 	sub.w	r3, r0, r8
 800a4ea:	fa09 f303 	lsl.w	r3, r9, r3
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	9304      	str	r3, [sp, #16]
 800a4f2:	46a2      	mov	sl, r4
 800a4f4:	e7d2      	b.n	800a49c <_svfiprintf_r+0xa0>
 800a4f6:	9b03      	ldr	r3, [sp, #12]
 800a4f8:	1d19      	adds	r1, r3, #4
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	9103      	str	r1, [sp, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	bfbb      	ittet	lt
 800a502:	425b      	neglt	r3, r3
 800a504:	f042 0202 	orrlt.w	r2, r2, #2
 800a508:	9307      	strge	r3, [sp, #28]
 800a50a:	9307      	strlt	r3, [sp, #28]
 800a50c:	bfb8      	it	lt
 800a50e:	9204      	strlt	r2, [sp, #16]
 800a510:	7823      	ldrb	r3, [r4, #0]
 800a512:	2b2e      	cmp	r3, #46	@ 0x2e
 800a514:	d10a      	bne.n	800a52c <_svfiprintf_r+0x130>
 800a516:	7863      	ldrb	r3, [r4, #1]
 800a518:	2b2a      	cmp	r3, #42	@ 0x2a
 800a51a:	d132      	bne.n	800a582 <_svfiprintf_r+0x186>
 800a51c:	9b03      	ldr	r3, [sp, #12]
 800a51e:	1d1a      	adds	r2, r3, #4
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	9203      	str	r2, [sp, #12]
 800a524:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a528:	3402      	adds	r4, #2
 800a52a:	9305      	str	r3, [sp, #20]
 800a52c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a5f0 <_svfiprintf_r+0x1f4>
 800a530:	7821      	ldrb	r1, [r4, #0]
 800a532:	2203      	movs	r2, #3
 800a534:	4650      	mov	r0, sl
 800a536:	f7f5 fe5b 	bl	80001f0 <memchr>
 800a53a:	b138      	cbz	r0, 800a54c <_svfiprintf_r+0x150>
 800a53c:	9b04      	ldr	r3, [sp, #16]
 800a53e:	eba0 000a 	sub.w	r0, r0, sl
 800a542:	2240      	movs	r2, #64	@ 0x40
 800a544:	4082      	lsls	r2, r0
 800a546:	4313      	orrs	r3, r2
 800a548:	3401      	adds	r4, #1
 800a54a:	9304      	str	r3, [sp, #16]
 800a54c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a550:	4824      	ldr	r0, [pc, #144]	@ (800a5e4 <_svfiprintf_r+0x1e8>)
 800a552:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a556:	2206      	movs	r2, #6
 800a558:	f7f5 fe4a 	bl	80001f0 <memchr>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d036      	beq.n	800a5ce <_svfiprintf_r+0x1d2>
 800a560:	4b21      	ldr	r3, [pc, #132]	@ (800a5e8 <_svfiprintf_r+0x1ec>)
 800a562:	bb1b      	cbnz	r3, 800a5ac <_svfiprintf_r+0x1b0>
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	3307      	adds	r3, #7
 800a568:	f023 0307 	bic.w	r3, r3, #7
 800a56c:	3308      	adds	r3, #8
 800a56e:	9303      	str	r3, [sp, #12]
 800a570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a572:	4433      	add	r3, r6
 800a574:	9309      	str	r3, [sp, #36]	@ 0x24
 800a576:	e76a      	b.n	800a44e <_svfiprintf_r+0x52>
 800a578:	fb0c 3202 	mla	r2, ip, r2, r3
 800a57c:	460c      	mov	r4, r1
 800a57e:	2001      	movs	r0, #1
 800a580:	e7a8      	b.n	800a4d4 <_svfiprintf_r+0xd8>
 800a582:	2300      	movs	r3, #0
 800a584:	3401      	adds	r4, #1
 800a586:	9305      	str	r3, [sp, #20]
 800a588:	4619      	mov	r1, r3
 800a58a:	f04f 0c0a 	mov.w	ip, #10
 800a58e:	4620      	mov	r0, r4
 800a590:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a594:	3a30      	subs	r2, #48	@ 0x30
 800a596:	2a09      	cmp	r2, #9
 800a598:	d903      	bls.n	800a5a2 <_svfiprintf_r+0x1a6>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d0c6      	beq.n	800a52c <_svfiprintf_r+0x130>
 800a59e:	9105      	str	r1, [sp, #20]
 800a5a0:	e7c4      	b.n	800a52c <_svfiprintf_r+0x130>
 800a5a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e7f0      	b.n	800a58e <_svfiprintf_r+0x192>
 800a5ac:	ab03      	add	r3, sp, #12
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	462a      	mov	r2, r5
 800a5b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a5ec <_svfiprintf_r+0x1f0>)
 800a5b4:	a904      	add	r1, sp, #16
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	f7fc fd38 	bl	800702c <_printf_float>
 800a5bc:	1c42      	adds	r2, r0, #1
 800a5be:	4606      	mov	r6, r0
 800a5c0:	d1d6      	bne.n	800a570 <_svfiprintf_r+0x174>
 800a5c2:	89ab      	ldrh	r3, [r5, #12]
 800a5c4:	065b      	lsls	r3, r3, #25
 800a5c6:	f53f af2d 	bmi.w	800a424 <_svfiprintf_r+0x28>
 800a5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5cc:	e72c      	b.n	800a428 <_svfiprintf_r+0x2c>
 800a5ce:	ab03      	add	r3, sp, #12
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	462a      	mov	r2, r5
 800a5d4:	4b05      	ldr	r3, [pc, #20]	@ (800a5ec <_svfiprintf_r+0x1f0>)
 800a5d6:	a904      	add	r1, sp, #16
 800a5d8:	4638      	mov	r0, r7
 800a5da:	f7fc ffbf 	bl	800755c <_printf_i>
 800a5de:	e7ed      	b.n	800a5bc <_svfiprintf_r+0x1c0>
 800a5e0:	0800d148 	.word	0x0800d148
 800a5e4:	0800d152 	.word	0x0800d152
 800a5e8:	0800702d 	.word	0x0800702d
 800a5ec:	0800a345 	.word	0x0800a345
 800a5f0:	0800d14e 	.word	0x0800d14e

0800a5f4 <__sflush_r>:
 800a5f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fc:	0716      	lsls	r6, r2, #28
 800a5fe:	4605      	mov	r5, r0
 800a600:	460c      	mov	r4, r1
 800a602:	d454      	bmi.n	800a6ae <__sflush_r+0xba>
 800a604:	684b      	ldr	r3, [r1, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	dc02      	bgt.n	800a610 <__sflush_r+0x1c>
 800a60a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	dd48      	ble.n	800a6a2 <__sflush_r+0xae>
 800a610:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a612:	2e00      	cmp	r6, #0
 800a614:	d045      	beq.n	800a6a2 <__sflush_r+0xae>
 800a616:	2300      	movs	r3, #0
 800a618:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a61c:	682f      	ldr	r7, [r5, #0]
 800a61e:	6a21      	ldr	r1, [r4, #32]
 800a620:	602b      	str	r3, [r5, #0]
 800a622:	d030      	beq.n	800a686 <__sflush_r+0x92>
 800a624:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	0759      	lsls	r1, r3, #29
 800a62a:	d505      	bpl.n	800a638 <__sflush_r+0x44>
 800a62c:	6863      	ldr	r3, [r4, #4]
 800a62e:	1ad2      	subs	r2, r2, r3
 800a630:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a632:	b10b      	cbz	r3, 800a638 <__sflush_r+0x44>
 800a634:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a636:	1ad2      	subs	r2, r2, r3
 800a638:	2300      	movs	r3, #0
 800a63a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a63c:	6a21      	ldr	r1, [r4, #32]
 800a63e:	4628      	mov	r0, r5
 800a640:	47b0      	blx	r6
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	d106      	bne.n	800a656 <__sflush_r+0x62>
 800a648:	6829      	ldr	r1, [r5, #0]
 800a64a:	291d      	cmp	r1, #29
 800a64c:	d82b      	bhi.n	800a6a6 <__sflush_r+0xb2>
 800a64e:	4a2a      	ldr	r2, [pc, #168]	@ (800a6f8 <__sflush_r+0x104>)
 800a650:	410a      	asrs	r2, r1
 800a652:	07d6      	lsls	r6, r2, #31
 800a654:	d427      	bmi.n	800a6a6 <__sflush_r+0xb2>
 800a656:	2200      	movs	r2, #0
 800a658:	6062      	str	r2, [r4, #4]
 800a65a:	04d9      	lsls	r1, r3, #19
 800a65c:	6922      	ldr	r2, [r4, #16]
 800a65e:	6022      	str	r2, [r4, #0]
 800a660:	d504      	bpl.n	800a66c <__sflush_r+0x78>
 800a662:	1c42      	adds	r2, r0, #1
 800a664:	d101      	bne.n	800a66a <__sflush_r+0x76>
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	b903      	cbnz	r3, 800a66c <__sflush_r+0x78>
 800a66a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a66c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a66e:	602f      	str	r7, [r5, #0]
 800a670:	b1b9      	cbz	r1, 800a6a2 <__sflush_r+0xae>
 800a672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a676:	4299      	cmp	r1, r3
 800a678:	d002      	beq.n	800a680 <__sflush_r+0x8c>
 800a67a:	4628      	mov	r0, r5
 800a67c:	f7fe faa8 	bl	8008bd0 <_free_r>
 800a680:	2300      	movs	r3, #0
 800a682:	6363      	str	r3, [r4, #52]	@ 0x34
 800a684:	e00d      	b.n	800a6a2 <__sflush_r+0xae>
 800a686:	2301      	movs	r3, #1
 800a688:	4628      	mov	r0, r5
 800a68a:	47b0      	blx	r6
 800a68c:	4602      	mov	r2, r0
 800a68e:	1c50      	adds	r0, r2, #1
 800a690:	d1c9      	bne.n	800a626 <__sflush_r+0x32>
 800a692:	682b      	ldr	r3, [r5, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0c6      	beq.n	800a626 <__sflush_r+0x32>
 800a698:	2b1d      	cmp	r3, #29
 800a69a:	d001      	beq.n	800a6a0 <__sflush_r+0xac>
 800a69c:	2b16      	cmp	r3, #22
 800a69e:	d11e      	bne.n	800a6de <__sflush_r+0xea>
 800a6a0:	602f      	str	r7, [r5, #0]
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e022      	b.n	800a6ec <__sflush_r+0xf8>
 800a6a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6aa:	b21b      	sxth	r3, r3
 800a6ac:	e01b      	b.n	800a6e6 <__sflush_r+0xf2>
 800a6ae:	690f      	ldr	r7, [r1, #16]
 800a6b0:	2f00      	cmp	r7, #0
 800a6b2:	d0f6      	beq.n	800a6a2 <__sflush_r+0xae>
 800a6b4:	0793      	lsls	r3, r2, #30
 800a6b6:	680e      	ldr	r6, [r1, #0]
 800a6b8:	bf08      	it	eq
 800a6ba:	694b      	ldreq	r3, [r1, #20]
 800a6bc:	600f      	str	r7, [r1, #0]
 800a6be:	bf18      	it	ne
 800a6c0:	2300      	movne	r3, #0
 800a6c2:	eba6 0807 	sub.w	r8, r6, r7
 800a6c6:	608b      	str	r3, [r1, #8]
 800a6c8:	f1b8 0f00 	cmp.w	r8, #0
 800a6cc:	dde9      	ble.n	800a6a2 <__sflush_r+0xae>
 800a6ce:	6a21      	ldr	r1, [r4, #32]
 800a6d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a6d2:	4643      	mov	r3, r8
 800a6d4:	463a      	mov	r2, r7
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	47b0      	blx	r6
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	dc08      	bgt.n	800a6f0 <__sflush_r+0xfc>
 800a6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f0:	4407      	add	r7, r0
 800a6f2:	eba8 0800 	sub.w	r8, r8, r0
 800a6f6:	e7e7      	b.n	800a6c8 <__sflush_r+0xd4>
 800a6f8:	dfbffffe 	.word	0xdfbffffe

0800a6fc <_fflush_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	690b      	ldr	r3, [r1, #16]
 800a700:	4605      	mov	r5, r0
 800a702:	460c      	mov	r4, r1
 800a704:	b913      	cbnz	r3, 800a70c <_fflush_r+0x10>
 800a706:	2500      	movs	r5, #0
 800a708:	4628      	mov	r0, r5
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	b118      	cbz	r0, 800a716 <_fflush_r+0x1a>
 800a70e:	6a03      	ldr	r3, [r0, #32]
 800a710:	b90b      	cbnz	r3, 800a716 <_fflush_r+0x1a>
 800a712:	f7fd fae3 	bl	8007cdc <__sinit>
 800a716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0f3      	beq.n	800a706 <_fflush_r+0xa>
 800a71e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a720:	07d0      	lsls	r0, r2, #31
 800a722:	d404      	bmi.n	800a72e <_fflush_r+0x32>
 800a724:	0599      	lsls	r1, r3, #22
 800a726:	d402      	bmi.n	800a72e <_fflush_r+0x32>
 800a728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a72a:	f7fd fbee 	bl	8007f0a <__retarget_lock_acquire_recursive>
 800a72e:	4628      	mov	r0, r5
 800a730:	4621      	mov	r1, r4
 800a732:	f7ff ff5f 	bl	800a5f4 <__sflush_r>
 800a736:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a738:	07da      	lsls	r2, r3, #31
 800a73a:	4605      	mov	r5, r0
 800a73c:	d4e4      	bmi.n	800a708 <_fflush_r+0xc>
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	059b      	lsls	r3, r3, #22
 800a742:	d4e1      	bmi.n	800a708 <_fflush_r+0xc>
 800a744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a746:	f7fd fbe1 	bl	8007f0c <__retarget_lock_release_recursive>
 800a74a:	e7dd      	b.n	800a708 <_fflush_r+0xc>

0800a74c <memmove>:
 800a74c:	4288      	cmp	r0, r1
 800a74e:	b510      	push	{r4, lr}
 800a750:	eb01 0402 	add.w	r4, r1, r2
 800a754:	d902      	bls.n	800a75c <memmove+0x10>
 800a756:	4284      	cmp	r4, r0
 800a758:	4623      	mov	r3, r4
 800a75a:	d807      	bhi.n	800a76c <memmove+0x20>
 800a75c:	1e43      	subs	r3, r0, #1
 800a75e:	42a1      	cmp	r1, r4
 800a760:	d008      	beq.n	800a774 <memmove+0x28>
 800a762:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a76a:	e7f8      	b.n	800a75e <memmove+0x12>
 800a76c:	4402      	add	r2, r0
 800a76e:	4601      	mov	r1, r0
 800a770:	428a      	cmp	r2, r1
 800a772:	d100      	bne.n	800a776 <memmove+0x2a>
 800a774:	bd10      	pop	{r4, pc}
 800a776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a77a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a77e:	e7f7      	b.n	800a770 <memmove+0x24>

0800a780 <strncmp>:
 800a780:	b510      	push	{r4, lr}
 800a782:	b16a      	cbz	r2, 800a7a0 <strncmp+0x20>
 800a784:	3901      	subs	r1, #1
 800a786:	1884      	adds	r4, r0, r2
 800a788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a790:	429a      	cmp	r2, r3
 800a792:	d103      	bne.n	800a79c <strncmp+0x1c>
 800a794:	42a0      	cmp	r0, r4
 800a796:	d001      	beq.n	800a79c <strncmp+0x1c>
 800a798:	2a00      	cmp	r2, #0
 800a79a:	d1f5      	bne.n	800a788 <strncmp+0x8>
 800a79c:	1ad0      	subs	r0, r2, r3
 800a79e:	bd10      	pop	{r4, pc}
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	e7fc      	b.n	800a79e <strncmp+0x1e>

0800a7a4 <_sbrk_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4d06      	ldr	r5, [pc, #24]	@ (800a7c0 <_sbrk_r+0x1c>)
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	602b      	str	r3, [r5, #0]
 800a7b0:	f7fa fbea 	bl	8004f88 <_sbrk>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_sbrk_r+0x1a>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_sbrk_r+0x1a>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	20000f24 	.word	0x20000f24
 800a7c4:	00000000 	.word	0x00000000

0800a7c8 <nan>:
 800a7c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a7d0 <nan+0x8>
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	00000000 	.word	0x00000000
 800a7d4:	7ff80000 	.word	0x7ff80000

0800a7d8 <__assert_func>:
 800a7d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7da:	4614      	mov	r4, r2
 800a7dc:	461a      	mov	r2, r3
 800a7de:	4b09      	ldr	r3, [pc, #36]	@ (800a804 <__assert_func+0x2c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	68d8      	ldr	r0, [r3, #12]
 800a7e6:	b954      	cbnz	r4, 800a7fe <__assert_func+0x26>
 800a7e8:	4b07      	ldr	r3, [pc, #28]	@ (800a808 <__assert_func+0x30>)
 800a7ea:	461c      	mov	r4, r3
 800a7ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7f0:	9100      	str	r1, [sp, #0]
 800a7f2:	462b      	mov	r3, r5
 800a7f4:	4905      	ldr	r1, [pc, #20]	@ (800a80c <__assert_func+0x34>)
 800a7f6:	f000 fba7 	bl	800af48 <fiprintf>
 800a7fa:	f000 fbb7 	bl	800af6c <abort>
 800a7fe:	4b04      	ldr	r3, [pc, #16]	@ (800a810 <__assert_func+0x38>)
 800a800:	e7f4      	b.n	800a7ec <__assert_func+0x14>
 800a802:	bf00      	nop
 800a804:	20000300 	.word	0x20000300
 800a808:	0800d19c 	.word	0x0800d19c
 800a80c:	0800d16e 	.word	0x0800d16e
 800a810:	0800d161 	.word	0x0800d161

0800a814 <_calloc_r>:
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	fba1 5402 	umull	r5, r4, r1, r2
 800a81a:	b93c      	cbnz	r4, 800a82c <_calloc_r+0x18>
 800a81c:	4629      	mov	r1, r5
 800a81e:	f7fe fa4b 	bl	8008cb8 <_malloc_r>
 800a822:	4606      	mov	r6, r0
 800a824:	b928      	cbnz	r0, 800a832 <_calloc_r+0x1e>
 800a826:	2600      	movs	r6, #0
 800a828:	4630      	mov	r0, r6
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	220c      	movs	r2, #12
 800a82e:	6002      	str	r2, [r0, #0]
 800a830:	e7f9      	b.n	800a826 <_calloc_r+0x12>
 800a832:	462a      	mov	r2, r5
 800a834:	4621      	mov	r1, r4
 800a836:	f7fd faea 	bl	8007e0e <memset>
 800a83a:	e7f5      	b.n	800a828 <_calloc_r+0x14>

0800a83c <rshift>:
 800a83c:	6903      	ldr	r3, [r0, #16]
 800a83e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a846:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a84a:	f100 0414 	add.w	r4, r0, #20
 800a84e:	dd45      	ble.n	800a8dc <rshift+0xa0>
 800a850:	f011 011f 	ands.w	r1, r1, #31
 800a854:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a858:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a85c:	d10c      	bne.n	800a878 <rshift+0x3c>
 800a85e:	f100 0710 	add.w	r7, r0, #16
 800a862:	4629      	mov	r1, r5
 800a864:	42b1      	cmp	r1, r6
 800a866:	d334      	bcc.n	800a8d2 <rshift+0x96>
 800a868:	1a9b      	subs	r3, r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	1eea      	subs	r2, r5, #3
 800a86e:	4296      	cmp	r6, r2
 800a870:	bf38      	it	cc
 800a872:	2300      	movcc	r3, #0
 800a874:	4423      	add	r3, r4
 800a876:	e015      	b.n	800a8a4 <rshift+0x68>
 800a878:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a87c:	f1c1 0820 	rsb	r8, r1, #32
 800a880:	40cf      	lsrs	r7, r1
 800a882:	f105 0e04 	add.w	lr, r5, #4
 800a886:	46a1      	mov	r9, r4
 800a888:	4576      	cmp	r6, lr
 800a88a:	46f4      	mov	ip, lr
 800a88c:	d815      	bhi.n	800a8ba <rshift+0x7e>
 800a88e:	1a9a      	subs	r2, r3, r2
 800a890:	0092      	lsls	r2, r2, #2
 800a892:	3a04      	subs	r2, #4
 800a894:	3501      	adds	r5, #1
 800a896:	42ae      	cmp	r6, r5
 800a898:	bf38      	it	cc
 800a89a:	2200      	movcc	r2, #0
 800a89c:	18a3      	adds	r3, r4, r2
 800a89e:	50a7      	str	r7, [r4, r2]
 800a8a0:	b107      	cbz	r7, 800a8a4 <rshift+0x68>
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	1b1a      	subs	r2, r3, r4
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8ac:	bf08      	it	eq
 800a8ae:	2300      	moveq	r3, #0
 800a8b0:	6102      	str	r2, [r0, #16]
 800a8b2:	bf08      	it	eq
 800a8b4:	6143      	streq	r3, [r0, #20]
 800a8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ba:	f8dc c000 	ldr.w	ip, [ip]
 800a8be:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8c2:	ea4c 0707 	orr.w	r7, ip, r7
 800a8c6:	f849 7b04 	str.w	r7, [r9], #4
 800a8ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8ce:	40cf      	lsrs	r7, r1
 800a8d0:	e7da      	b.n	800a888 <rshift+0x4c>
 800a8d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8da:	e7c3      	b.n	800a864 <rshift+0x28>
 800a8dc:	4623      	mov	r3, r4
 800a8de:	e7e1      	b.n	800a8a4 <rshift+0x68>

0800a8e0 <__hexdig_fun>:
 800a8e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a8e4:	2b09      	cmp	r3, #9
 800a8e6:	d802      	bhi.n	800a8ee <__hexdig_fun+0xe>
 800a8e8:	3820      	subs	r0, #32
 800a8ea:	b2c0      	uxtb	r0, r0
 800a8ec:	4770      	bx	lr
 800a8ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a8f2:	2b05      	cmp	r3, #5
 800a8f4:	d801      	bhi.n	800a8fa <__hexdig_fun+0x1a>
 800a8f6:	3847      	subs	r0, #71	@ 0x47
 800a8f8:	e7f7      	b.n	800a8ea <__hexdig_fun+0xa>
 800a8fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a8fe:	2b05      	cmp	r3, #5
 800a900:	d801      	bhi.n	800a906 <__hexdig_fun+0x26>
 800a902:	3827      	subs	r0, #39	@ 0x27
 800a904:	e7f1      	b.n	800a8ea <__hexdig_fun+0xa>
 800a906:	2000      	movs	r0, #0
 800a908:	4770      	bx	lr
	...

0800a90c <__gethex>:
 800a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a910:	b085      	sub	sp, #20
 800a912:	468a      	mov	sl, r1
 800a914:	9302      	str	r3, [sp, #8]
 800a916:	680b      	ldr	r3, [r1, #0]
 800a918:	9001      	str	r0, [sp, #4]
 800a91a:	4690      	mov	r8, r2
 800a91c:	1c9c      	adds	r4, r3, #2
 800a91e:	46a1      	mov	r9, r4
 800a920:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a924:	2830      	cmp	r0, #48	@ 0x30
 800a926:	d0fa      	beq.n	800a91e <__gethex+0x12>
 800a928:	eba9 0303 	sub.w	r3, r9, r3
 800a92c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a930:	f7ff ffd6 	bl	800a8e0 <__hexdig_fun>
 800a934:	4605      	mov	r5, r0
 800a936:	2800      	cmp	r0, #0
 800a938:	d168      	bne.n	800aa0c <__gethex+0x100>
 800a93a:	49a0      	ldr	r1, [pc, #640]	@ (800abbc <__gethex+0x2b0>)
 800a93c:	2201      	movs	r2, #1
 800a93e:	4648      	mov	r0, r9
 800a940:	f7ff ff1e 	bl	800a780 <strncmp>
 800a944:	4607      	mov	r7, r0
 800a946:	2800      	cmp	r0, #0
 800a948:	d167      	bne.n	800aa1a <__gethex+0x10e>
 800a94a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a94e:	4626      	mov	r6, r4
 800a950:	f7ff ffc6 	bl	800a8e0 <__hexdig_fun>
 800a954:	2800      	cmp	r0, #0
 800a956:	d062      	beq.n	800aa1e <__gethex+0x112>
 800a958:	4623      	mov	r3, r4
 800a95a:	7818      	ldrb	r0, [r3, #0]
 800a95c:	2830      	cmp	r0, #48	@ 0x30
 800a95e:	4699      	mov	r9, r3
 800a960:	f103 0301 	add.w	r3, r3, #1
 800a964:	d0f9      	beq.n	800a95a <__gethex+0x4e>
 800a966:	f7ff ffbb 	bl	800a8e0 <__hexdig_fun>
 800a96a:	fab0 f580 	clz	r5, r0
 800a96e:	096d      	lsrs	r5, r5, #5
 800a970:	f04f 0b01 	mov.w	fp, #1
 800a974:	464a      	mov	r2, r9
 800a976:	4616      	mov	r6, r2
 800a978:	3201      	adds	r2, #1
 800a97a:	7830      	ldrb	r0, [r6, #0]
 800a97c:	f7ff ffb0 	bl	800a8e0 <__hexdig_fun>
 800a980:	2800      	cmp	r0, #0
 800a982:	d1f8      	bne.n	800a976 <__gethex+0x6a>
 800a984:	498d      	ldr	r1, [pc, #564]	@ (800abbc <__gethex+0x2b0>)
 800a986:	2201      	movs	r2, #1
 800a988:	4630      	mov	r0, r6
 800a98a:	f7ff fef9 	bl	800a780 <strncmp>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d13f      	bne.n	800aa12 <__gethex+0x106>
 800a992:	b944      	cbnz	r4, 800a9a6 <__gethex+0x9a>
 800a994:	1c74      	adds	r4, r6, #1
 800a996:	4622      	mov	r2, r4
 800a998:	4616      	mov	r6, r2
 800a99a:	3201      	adds	r2, #1
 800a99c:	7830      	ldrb	r0, [r6, #0]
 800a99e:	f7ff ff9f 	bl	800a8e0 <__hexdig_fun>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d1f8      	bne.n	800a998 <__gethex+0x8c>
 800a9a6:	1ba4      	subs	r4, r4, r6
 800a9a8:	00a7      	lsls	r7, r4, #2
 800a9aa:	7833      	ldrb	r3, [r6, #0]
 800a9ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a9b0:	2b50      	cmp	r3, #80	@ 0x50
 800a9b2:	d13e      	bne.n	800aa32 <__gethex+0x126>
 800a9b4:	7873      	ldrb	r3, [r6, #1]
 800a9b6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a9b8:	d033      	beq.n	800aa22 <__gethex+0x116>
 800a9ba:	2b2d      	cmp	r3, #45	@ 0x2d
 800a9bc:	d034      	beq.n	800aa28 <__gethex+0x11c>
 800a9be:	1c71      	adds	r1, r6, #1
 800a9c0:	2400      	movs	r4, #0
 800a9c2:	7808      	ldrb	r0, [r1, #0]
 800a9c4:	f7ff ff8c 	bl	800a8e0 <__hexdig_fun>
 800a9c8:	1e43      	subs	r3, r0, #1
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b18      	cmp	r3, #24
 800a9ce:	d830      	bhi.n	800aa32 <__gethex+0x126>
 800a9d0:	f1a0 0210 	sub.w	r2, r0, #16
 800a9d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9d8:	f7ff ff82 	bl	800a8e0 <__hexdig_fun>
 800a9dc:	f100 3cff 	add.w	ip, r0, #4294967295
 800a9e0:	fa5f fc8c 	uxtb.w	ip, ip
 800a9e4:	f1bc 0f18 	cmp.w	ip, #24
 800a9e8:	f04f 030a 	mov.w	r3, #10
 800a9ec:	d91e      	bls.n	800aa2c <__gethex+0x120>
 800a9ee:	b104      	cbz	r4, 800a9f2 <__gethex+0xe6>
 800a9f0:	4252      	negs	r2, r2
 800a9f2:	4417      	add	r7, r2
 800a9f4:	f8ca 1000 	str.w	r1, [sl]
 800a9f8:	b1ed      	cbz	r5, 800aa36 <__gethex+0x12a>
 800a9fa:	f1bb 0f00 	cmp.w	fp, #0
 800a9fe:	bf0c      	ite	eq
 800aa00:	2506      	moveq	r5, #6
 800aa02:	2500      	movne	r5, #0
 800aa04:	4628      	mov	r0, r5
 800aa06:	b005      	add	sp, #20
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	462c      	mov	r4, r5
 800aa10:	e7b0      	b.n	800a974 <__gethex+0x68>
 800aa12:	2c00      	cmp	r4, #0
 800aa14:	d1c7      	bne.n	800a9a6 <__gethex+0x9a>
 800aa16:	4627      	mov	r7, r4
 800aa18:	e7c7      	b.n	800a9aa <__gethex+0x9e>
 800aa1a:	464e      	mov	r6, r9
 800aa1c:	462f      	mov	r7, r5
 800aa1e:	2501      	movs	r5, #1
 800aa20:	e7c3      	b.n	800a9aa <__gethex+0x9e>
 800aa22:	2400      	movs	r4, #0
 800aa24:	1cb1      	adds	r1, r6, #2
 800aa26:	e7cc      	b.n	800a9c2 <__gethex+0xb6>
 800aa28:	2401      	movs	r4, #1
 800aa2a:	e7fb      	b.n	800aa24 <__gethex+0x118>
 800aa2c:	fb03 0002 	mla	r0, r3, r2, r0
 800aa30:	e7ce      	b.n	800a9d0 <__gethex+0xc4>
 800aa32:	4631      	mov	r1, r6
 800aa34:	e7de      	b.n	800a9f4 <__gethex+0xe8>
 800aa36:	eba6 0309 	sub.w	r3, r6, r9
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	2b07      	cmp	r3, #7
 800aa40:	dc0a      	bgt.n	800aa58 <__gethex+0x14c>
 800aa42:	9801      	ldr	r0, [sp, #4]
 800aa44:	f7fe f9c4 	bl	8008dd0 <_Balloc>
 800aa48:	4604      	mov	r4, r0
 800aa4a:	b940      	cbnz	r0, 800aa5e <__gethex+0x152>
 800aa4c:	4b5c      	ldr	r3, [pc, #368]	@ (800abc0 <__gethex+0x2b4>)
 800aa4e:	4602      	mov	r2, r0
 800aa50:	21e4      	movs	r1, #228	@ 0xe4
 800aa52:	485c      	ldr	r0, [pc, #368]	@ (800abc4 <__gethex+0x2b8>)
 800aa54:	f7ff fec0 	bl	800a7d8 <__assert_func>
 800aa58:	3101      	adds	r1, #1
 800aa5a:	105b      	asrs	r3, r3, #1
 800aa5c:	e7ef      	b.n	800aa3e <__gethex+0x132>
 800aa5e:	f100 0a14 	add.w	sl, r0, #20
 800aa62:	2300      	movs	r3, #0
 800aa64:	4655      	mov	r5, sl
 800aa66:	469b      	mov	fp, r3
 800aa68:	45b1      	cmp	r9, r6
 800aa6a:	d337      	bcc.n	800aadc <__gethex+0x1d0>
 800aa6c:	f845 bb04 	str.w	fp, [r5], #4
 800aa70:	eba5 050a 	sub.w	r5, r5, sl
 800aa74:	10ad      	asrs	r5, r5, #2
 800aa76:	6125      	str	r5, [r4, #16]
 800aa78:	4658      	mov	r0, fp
 800aa7a:	f7fe fa9b 	bl	8008fb4 <__hi0bits>
 800aa7e:	016d      	lsls	r5, r5, #5
 800aa80:	f8d8 6000 	ldr.w	r6, [r8]
 800aa84:	1a2d      	subs	r5, r5, r0
 800aa86:	42b5      	cmp	r5, r6
 800aa88:	dd54      	ble.n	800ab34 <__gethex+0x228>
 800aa8a:	1bad      	subs	r5, r5, r6
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f7fe fe2f 	bl	80096f2 <__any_on>
 800aa94:	4681      	mov	r9, r0
 800aa96:	b178      	cbz	r0, 800aab8 <__gethex+0x1ac>
 800aa98:	1e6b      	subs	r3, r5, #1
 800aa9a:	1159      	asrs	r1, r3, #5
 800aa9c:	f003 021f 	and.w	r2, r3, #31
 800aaa0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aaa4:	f04f 0901 	mov.w	r9, #1
 800aaa8:	fa09 f202 	lsl.w	r2, r9, r2
 800aaac:	420a      	tst	r2, r1
 800aaae:	d003      	beq.n	800aab8 <__gethex+0x1ac>
 800aab0:	454b      	cmp	r3, r9
 800aab2:	dc36      	bgt.n	800ab22 <__gethex+0x216>
 800aab4:	f04f 0902 	mov.w	r9, #2
 800aab8:	4629      	mov	r1, r5
 800aaba:	4620      	mov	r0, r4
 800aabc:	f7ff febe 	bl	800a83c <rshift>
 800aac0:	442f      	add	r7, r5
 800aac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aac6:	42bb      	cmp	r3, r7
 800aac8:	da42      	bge.n	800ab50 <__gethex+0x244>
 800aaca:	9801      	ldr	r0, [sp, #4]
 800aacc:	4621      	mov	r1, r4
 800aace:	f7fe f9bf 	bl	8008e50 <_Bfree>
 800aad2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aad4:	2300      	movs	r3, #0
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	25a3      	movs	r5, #163	@ 0xa3
 800aada:	e793      	b.n	800aa04 <__gethex+0xf8>
 800aadc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aae0:	2a2e      	cmp	r2, #46	@ 0x2e
 800aae2:	d012      	beq.n	800ab0a <__gethex+0x1fe>
 800aae4:	2b20      	cmp	r3, #32
 800aae6:	d104      	bne.n	800aaf2 <__gethex+0x1e6>
 800aae8:	f845 bb04 	str.w	fp, [r5], #4
 800aaec:	f04f 0b00 	mov.w	fp, #0
 800aaf0:	465b      	mov	r3, fp
 800aaf2:	7830      	ldrb	r0, [r6, #0]
 800aaf4:	9303      	str	r3, [sp, #12]
 800aaf6:	f7ff fef3 	bl	800a8e0 <__hexdig_fun>
 800aafa:	9b03      	ldr	r3, [sp, #12]
 800aafc:	f000 000f 	and.w	r0, r0, #15
 800ab00:	4098      	lsls	r0, r3
 800ab02:	ea4b 0b00 	orr.w	fp, fp, r0
 800ab06:	3304      	adds	r3, #4
 800ab08:	e7ae      	b.n	800aa68 <__gethex+0x15c>
 800ab0a:	45b1      	cmp	r9, r6
 800ab0c:	d8ea      	bhi.n	800aae4 <__gethex+0x1d8>
 800ab0e:	492b      	ldr	r1, [pc, #172]	@ (800abbc <__gethex+0x2b0>)
 800ab10:	9303      	str	r3, [sp, #12]
 800ab12:	2201      	movs	r2, #1
 800ab14:	4630      	mov	r0, r6
 800ab16:	f7ff fe33 	bl	800a780 <strncmp>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d1e1      	bne.n	800aae4 <__gethex+0x1d8>
 800ab20:	e7a2      	b.n	800aa68 <__gethex+0x15c>
 800ab22:	1ea9      	subs	r1, r5, #2
 800ab24:	4620      	mov	r0, r4
 800ab26:	f7fe fde4 	bl	80096f2 <__any_on>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d0c2      	beq.n	800aab4 <__gethex+0x1a8>
 800ab2e:	f04f 0903 	mov.w	r9, #3
 800ab32:	e7c1      	b.n	800aab8 <__gethex+0x1ac>
 800ab34:	da09      	bge.n	800ab4a <__gethex+0x23e>
 800ab36:	1b75      	subs	r5, r6, r5
 800ab38:	4621      	mov	r1, r4
 800ab3a:	9801      	ldr	r0, [sp, #4]
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	f7fe fb9f 	bl	8009280 <__lshift>
 800ab42:	1b7f      	subs	r7, r7, r5
 800ab44:	4604      	mov	r4, r0
 800ab46:	f100 0a14 	add.w	sl, r0, #20
 800ab4a:	f04f 0900 	mov.w	r9, #0
 800ab4e:	e7b8      	b.n	800aac2 <__gethex+0x1b6>
 800ab50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab54:	42bd      	cmp	r5, r7
 800ab56:	dd6f      	ble.n	800ac38 <__gethex+0x32c>
 800ab58:	1bed      	subs	r5, r5, r7
 800ab5a:	42ae      	cmp	r6, r5
 800ab5c:	dc34      	bgt.n	800abc8 <__gethex+0x2bc>
 800ab5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d022      	beq.n	800abac <__gethex+0x2a0>
 800ab66:	2b03      	cmp	r3, #3
 800ab68:	d024      	beq.n	800abb4 <__gethex+0x2a8>
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d115      	bne.n	800ab9a <__gethex+0x28e>
 800ab6e:	42ae      	cmp	r6, r5
 800ab70:	d113      	bne.n	800ab9a <__gethex+0x28e>
 800ab72:	2e01      	cmp	r6, #1
 800ab74:	d10b      	bne.n	800ab8e <__gethex+0x282>
 800ab76:	9a02      	ldr	r2, [sp, #8]
 800ab78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab7c:	6013      	str	r3, [r2, #0]
 800ab7e:	2301      	movs	r3, #1
 800ab80:	6123      	str	r3, [r4, #16]
 800ab82:	f8ca 3000 	str.w	r3, [sl]
 800ab86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab88:	2562      	movs	r5, #98	@ 0x62
 800ab8a:	601c      	str	r4, [r3, #0]
 800ab8c:	e73a      	b.n	800aa04 <__gethex+0xf8>
 800ab8e:	1e71      	subs	r1, r6, #1
 800ab90:	4620      	mov	r0, r4
 800ab92:	f7fe fdae 	bl	80096f2 <__any_on>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d1ed      	bne.n	800ab76 <__gethex+0x26a>
 800ab9a:	9801      	ldr	r0, [sp, #4]
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	f7fe f957 	bl	8008e50 <_Bfree>
 800aba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aba4:	2300      	movs	r3, #0
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	2550      	movs	r5, #80	@ 0x50
 800abaa:	e72b      	b.n	800aa04 <__gethex+0xf8>
 800abac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f3      	bne.n	800ab9a <__gethex+0x28e>
 800abb2:	e7e0      	b.n	800ab76 <__gethex+0x26a>
 800abb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1dd      	bne.n	800ab76 <__gethex+0x26a>
 800abba:	e7ee      	b.n	800ab9a <__gethex+0x28e>
 800abbc:	0800d0f0 	.word	0x0800d0f0
 800abc0:	0800cf86 	.word	0x0800cf86
 800abc4:	0800d19d 	.word	0x0800d19d
 800abc8:	1e6f      	subs	r7, r5, #1
 800abca:	f1b9 0f00 	cmp.w	r9, #0
 800abce:	d130      	bne.n	800ac32 <__gethex+0x326>
 800abd0:	b127      	cbz	r7, 800abdc <__gethex+0x2d0>
 800abd2:	4639      	mov	r1, r7
 800abd4:	4620      	mov	r0, r4
 800abd6:	f7fe fd8c 	bl	80096f2 <__any_on>
 800abda:	4681      	mov	r9, r0
 800abdc:	117a      	asrs	r2, r7, #5
 800abde:	2301      	movs	r3, #1
 800abe0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800abe4:	f007 071f 	and.w	r7, r7, #31
 800abe8:	40bb      	lsls	r3, r7
 800abea:	4213      	tst	r3, r2
 800abec:	4629      	mov	r1, r5
 800abee:	4620      	mov	r0, r4
 800abf0:	bf18      	it	ne
 800abf2:	f049 0902 	orrne.w	r9, r9, #2
 800abf6:	f7ff fe21 	bl	800a83c <rshift>
 800abfa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800abfe:	1b76      	subs	r6, r6, r5
 800ac00:	2502      	movs	r5, #2
 800ac02:	f1b9 0f00 	cmp.w	r9, #0
 800ac06:	d047      	beq.n	800ac98 <__gethex+0x38c>
 800ac08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d015      	beq.n	800ac3c <__gethex+0x330>
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d017      	beq.n	800ac44 <__gethex+0x338>
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d109      	bne.n	800ac2c <__gethex+0x320>
 800ac18:	f019 0f02 	tst.w	r9, #2
 800ac1c:	d006      	beq.n	800ac2c <__gethex+0x320>
 800ac1e:	f8da 3000 	ldr.w	r3, [sl]
 800ac22:	ea49 0903 	orr.w	r9, r9, r3
 800ac26:	f019 0f01 	tst.w	r9, #1
 800ac2a:	d10e      	bne.n	800ac4a <__gethex+0x33e>
 800ac2c:	f045 0510 	orr.w	r5, r5, #16
 800ac30:	e032      	b.n	800ac98 <__gethex+0x38c>
 800ac32:	f04f 0901 	mov.w	r9, #1
 800ac36:	e7d1      	b.n	800abdc <__gethex+0x2d0>
 800ac38:	2501      	movs	r5, #1
 800ac3a:	e7e2      	b.n	800ac02 <__gethex+0x2f6>
 800ac3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac3e:	f1c3 0301 	rsb	r3, r3, #1
 800ac42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0f0      	beq.n	800ac2c <__gethex+0x320>
 800ac4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac4e:	f104 0314 	add.w	r3, r4, #20
 800ac52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac5a:	f04f 0c00 	mov.w	ip, #0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac64:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac68:	d01b      	beq.n	800aca2 <__gethex+0x396>
 800ac6a:	3201      	adds	r2, #1
 800ac6c:	6002      	str	r2, [r0, #0]
 800ac6e:	2d02      	cmp	r5, #2
 800ac70:	f104 0314 	add.w	r3, r4, #20
 800ac74:	d13c      	bne.n	800acf0 <__gethex+0x3e4>
 800ac76:	f8d8 2000 	ldr.w	r2, [r8]
 800ac7a:	3a01      	subs	r2, #1
 800ac7c:	42b2      	cmp	r2, r6
 800ac7e:	d109      	bne.n	800ac94 <__gethex+0x388>
 800ac80:	1171      	asrs	r1, r6, #5
 800ac82:	2201      	movs	r2, #1
 800ac84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac88:	f006 061f 	and.w	r6, r6, #31
 800ac8c:	fa02 f606 	lsl.w	r6, r2, r6
 800ac90:	421e      	tst	r6, r3
 800ac92:	d13a      	bne.n	800ad0a <__gethex+0x3fe>
 800ac94:	f045 0520 	orr.w	r5, r5, #32
 800ac98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac9a:	601c      	str	r4, [r3, #0]
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	601f      	str	r7, [r3, #0]
 800aca0:	e6b0      	b.n	800aa04 <__gethex+0xf8>
 800aca2:	4299      	cmp	r1, r3
 800aca4:	f843 cc04 	str.w	ip, [r3, #-4]
 800aca8:	d8d9      	bhi.n	800ac5e <__gethex+0x352>
 800acaa:	68a3      	ldr	r3, [r4, #8]
 800acac:	459b      	cmp	fp, r3
 800acae:	db17      	blt.n	800ace0 <__gethex+0x3d4>
 800acb0:	6861      	ldr	r1, [r4, #4]
 800acb2:	9801      	ldr	r0, [sp, #4]
 800acb4:	3101      	adds	r1, #1
 800acb6:	f7fe f88b 	bl	8008dd0 <_Balloc>
 800acba:	4681      	mov	r9, r0
 800acbc:	b918      	cbnz	r0, 800acc6 <__gethex+0x3ba>
 800acbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ad28 <__gethex+0x41c>)
 800acc0:	4602      	mov	r2, r0
 800acc2:	2184      	movs	r1, #132	@ 0x84
 800acc4:	e6c5      	b.n	800aa52 <__gethex+0x146>
 800acc6:	6922      	ldr	r2, [r4, #16]
 800acc8:	3202      	adds	r2, #2
 800acca:	f104 010c 	add.w	r1, r4, #12
 800acce:	0092      	lsls	r2, r2, #2
 800acd0:	300c      	adds	r0, #12
 800acd2:	f7fd f91c 	bl	8007f0e <memcpy>
 800acd6:	4621      	mov	r1, r4
 800acd8:	9801      	ldr	r0, [sp, #4]
 800acda:	f7fe f8b9 	bl	8008e50 <_Bfree>
 800acde:	464c      	mov	r4, r9
 800ace0:	6923      	ldr	r3, [r4, #16]
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ace8:	6122      	str	r2, [r4, #16]
 800acea:	2201      	movs	r2, #1
 800acec:	615a      	str	r2, [r3, #20]
 800acee:	e7be      	b.n	800ac6e <__gethex+0x362>
 800acf0:	6922      	ldr	r2, [r4, #16]
 800acf2:	455a      	cmp	r2, fp
 800acf4:	dd0b      	ble.n	800ad0e <__gethex+0x402>
 800acf6:	2101      	movs	r1, #1
 800acf8:	4620      	mov	r0, r4
 800acfa:	f7ff fd9f 	bl	800a83c <rshift>
 800acfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad02:	3701      	adds	r7, #1
 800ad04:	42bb      	cmp	r3, r7
 800ad06:	f6ff aee0 	blt.w	800aaca <__gethex+0x1be>
 800ad0a:	2501      	movs	r5, #1
 800ad0c:	e7c2      	b.n	800ac94 <__gethex+0x388>
 800ad0e:	f016 061f 	ands.w	r6, r6, #31
 800ad12:	d0fa      	beq.n	800ad0a <__gethex+0x3fe>
 800ad14:	4453      	add	r3, sl
 800ad16:	f1c6 0620 	rsb	r6, r6, #32
 800ad1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad1e:	f7fe f949 	bl	8008fb4 <__hi0bits>
 800ad22:	42b0      	cmp	r0, r6
 800ad24:	dbe7      	blt.n	800acf6 <__gethex+0x3ea>
 800ad26:	e7f0      	b.n	800ad0a <__gethex+0x3fe>
 800ad28:	0800cf86 	.word	0x0800cf86

0800ad2c <L_shift>:
 800ad2c:	f1c2 0208 	rsb	r2, r2, #8
 800ad30:	0092      	lsls	r2, r2, #2
 800ad32:	b570      	push	{r4, r5, r6, lr}
 800ad34:	f1c2 0620 	rsb	r6, r2, #32
 800ad38:	6843      	ldr	r3, [r0, #4]
 800ad3a:	6804      	ldr	r4, [r0, #0]
 800ad3c:	fa03 f506 	lsl.w	r5, r3, r6
 800ad40:	432c      	orrs	r4, r5
 800ad42:	40d3      	lsrs	r3, r2
 800ad44:	6004      	str	r4, [r0, #0]
 800ad46:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad4a:	4288      	cmp	r0, r1
 800ad4c:	d3f4      	bcc.n	800ad38 <L_shift+0xc>
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}

0800ad50 <__match>:
 800ad50:	b530      	push	{r4, r5, lr}
 800ad52:	6803      	ldr	r3, [r0, #0]
 800ad54:	3301      	adds	r3, #1
 800ad56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad5a:	b914      	cbnz	r4, 800ad62 <__match+0x12>
 800ad5c:	6003      	str	r3, [r0, #0]
 800ad5e:	2001      	movs	r0, #1
 800ad60:	bd30      	pop	{r4, r5, pc}
 800ad62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ad6a:	2d19      	cmp	r5, #25
 800ad6c:	bf98      	it	ls
 800ad6e:	3220      	addls	r2, #32
 800ad70:	42a2      	cmp	r2, r4
 800ad72:	d0f0      	beq.n	800ad56 <__match+0x6>
 800ad74:	2000      	movs	r0, #0
 800ad76:	e7f3      	b.n	800ad60 <__match+0x10>

0800ad78 <__hexnan>:
 800ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7c:	680b      	ldr	r3, [r1, #0]
 800ad7e:	6801      	ldr	r1, [r0, #0]
 800ad80:	115e      	asrs	r6, r3, #5
 800ad82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad86:	f013 031f 	ands.w	r3, r3, #31
 800ad8a:	b087      	sub	sp, #28
 800ad8c:	bf18      	it	ne
 800ad8e:	3604      	addne	r6, #4
 800ad90:	2500      	movs	r5, #0
 800ad92:	1f37      	subs	r7, r6, #4
 800ad94:	4682      	mov	sl, r0
 800ad96:	4690      	mov	r8, r2
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad9e:	46b9      	mov	r9, r7
 800ada0:	463c      	mov	r4, r7
 800ada2:	9502      	str	r5, [sp, #8]
 800ada4:	46ab      	mov	fp, r5
 800ada6:	784a      	ldrb	r2, [r1, #1]
 800ada8:	1c4b      	adds	r3, r1, #1
 800adaa:	9303      	str	r3, [sp, #12]
 800adac:	b342      	cbz	r2, 800ae00 <__hexnan+0x88>
 800adae:	4610      	mov	r0, r2
 800adb0:	9105      	str	r1, [sp, #20]
 800adb2:	9204      	str	r2, [sp, #16]
 800adb4:	f7ff fd94 	bl	800a8e0 <__hexdig_fun>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d151      	bne.n	800ae60 <__hexnan+0xe8>
 800adbc:	9a04      	ldr	r2, [sp, #16]
 800adbe:	9905      	ldr	r1, [sp, #20]
 800adc0:	2a20      	cmp	r2, #32
 800adc2:	d818      	bhi.n	800adf6 <__hexnan+0x7e>
 800adc4:	9b02      	ldr	r3, [sp, #8]
 800adc6:	459b      	cmp	fp, r3
 800adc8:	dd13      	ble.n	800adf2 <__hexnan+0x7a>
 800adca:	454c      	cmp	r4, r9
 800adcc:	d206      	bcs.n	800addc <__hexnan+0x64>
 800adce:	2d07      	cmp	r5, #7
 800add0:	dc04      	bgt.n	800addc <__hexnan+0x64>
 800add2:	462a      	mov	r2, r5
 800add4:	4649      	mov	r1, r9
 800add6:	4620      	mov	r0, r4
 800add8:	f7ff ffa8 	bl	800ad2c <L_shift>
 800addc:	4544      	cmp	r4, r8
 800adde:	d952      	bls.n	800ae86 <__hexnan+0x10e>
 800ade0:	2300      	movs	r3, #0
 800ade2:	f1a4 0904 	sub.w	r9, r4, #4
 800ade6:	f844 3c04 	str.w	r3, [r4, #-4]
 800adea:	f8cd b008 	str.w	fp, [sp, #8]
 800adee:	464c      	mov	r4, r9
 800adf0:	461d      	mov	r5, r3
 800adf2:	9903      	ldr	r1, [sp, #12]
 800adf4:	e7d7      	b.n	800ada6 <__hexnan+0x2e>
 800adf6:	2a29      	cmp	r2, #41	@ 0x29
 800adf8:	d157      	bne.n	800aeaa <__hexnan+0x132>
 800adfa:	3102      	adds	r1, #2
 800adfc:	f8ca 1000 	str.w	r1, [sl]
 800ae00:	f1bb 0f00 	cmp.w	fp, #0
 800ae04:	d051      	beq.n	800aeaa <__hexnan+0x132>
 800ae06:	454c      	cmp	r4, r9
 800ae08:	d206      	bcs.n	800ae18 <__hexnan+0xa0>
 800ae0a:	2d07      	cmp	r5, #7
 800ae0c:	dc04      	bgt.n	800ae18 <__hexnan+0xa0>
 800ae0e:	462a      	mov	r2, r5
 800ae10:	4649      	mov	r1, r9
 800ae12:	4620      	mov	r0, r4
 800ae14:	f7ff ff8a 	bl	800ad2c <L_shift>
 800ae18:	4544      	cmp	r4, r8
 800ae1a:	d936      	bls.n	800ae8a <__hexnan+0x112>
 800ae1c:	f1a8 0204 	sub.w	r2, r8, #4
 800ae20:	4623      	mov	r3, r4
 800ae22:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae26:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae2a:	429f      	cmp	r7, r3
 800ae2c:	d2f9      	bcs.n	800ae22 <__hexnan+0xaa>
 800ae2e:	1b3b      	subs	r3, r7, r4
 800ae30:	f023 0303 	bic.w	r3, r3, #3
 800ae34:	3304      	adds	r3, #4
 800ae36:	3401      	adds	r4, #1
 800ae38:	3e03      	subs	r6, #3
 800ae3a:	42b4      	cmp	r4, r6
 800ae3c:	bf88      	it	hi
 800ae3e:	2304      	movhi	r3, #4
 800ae40:	4443      	add	r3, r8
 800ae42:	2200      	movs	r2, #0
 800ae44:	f843 2b04 	str.w	r2, [r3], #4
 800ae48:	429f      	cmp	r7, r3
 800ae4a:	d2fb      	bcs.n	800ae44 <__hexnan+0xcc>
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	b91b      	cbnz	r3, 800ae58 <__hexnan+0xe0>
 800ae50:	4547      	cmp	r7, r8
 800ae52:	d128      	bne.n	800aea6 <__hexnan+0x12e>
 800ae54:	2301      	movs	r3, #1
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	2005      	movs	r0, #5
 800ae5a:	b007      	add	sp, #28
 800ae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae60:	3501      	adds	r5, #1
 800ae62:	2d08      	cmp	r5, #8
 800ae64:	f10b 0b01 	add.w	fp, fp, #1
 800ae68:	dd06      	ble.n	800ae78 <__hexnan+0x100>
 800ae6a:	4544      	cmp	r4, r8
 800ae6c:	d9c1      	bls.n	800adf2 <__hexnan+0x7a>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae74:	2501      	movs	r5, #1
 800ae76:	3c04      	subs	r4, #4
 800ae78:	6822      	ldr	r2, [r4, #0]
 800ae7a:	f000 000f 	and.w	r0, r0, #15
 800ae7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ae82:	6020      	str	r0, [r4, #0]
 800ae84:	e7b5      	b.n	800adf2 <__hexnan+0x7a>
 800ae86:	2508      	movs	r5, #8
 800ae88:	e7b3      	b.n	800adf2 <__hexnan+0x7a>
 800ae8a:	9b01      	ldr	r3, [sp, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d0dd      	beq.n	800ae4c <__hexnan+0xd4>
 800ae90:	f1c3 0320 	rsb	r3, r3, #32
 800ae94:	f04f 32ff 	mov.w	r2, #4294967295
 800ae98:	40da      	lsrs	r2, r3
 800ae9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae9e:	4013      	ands	r3, r2
 800aea0:	f846 3c04 	str.w	r3, [r6, #-4]
 800aea4:	e7d2      	b.n	800ae4c <__hexnan+0xd4>
 800aea6:	3f04      	subs	r7, #4
 800aea8:	e7d0      	b.n	800ae4c <__hexnan+0xd4>
 800aeaa:	2004      	movs	r0, #4
 800aeac:	e7d5      	b.n	800ae5a <__hexnan+0xe2>

0800aeae <__ascii_mbtowc>:
 800aeae:	b082      	sub	sp, #8
 800aeb0:	b901      	cbnz	r1, 800aeb4 <__ascii_mbtowc+0x6>
 800aeb2:	a901      	add	r1, sp, #4
 800aeb4:	b142      	cbz	r2, 800aec8 <__ascii_mbtowc+0x1a>
 800aeb6:	b14b      	cbz	r3, 800aecc <__ascii_mbtowc+0x1e>
 800aeb8:	7813      	ldrb	r3, [r2, #0]
 800aeba:	600b      	str	r3, [r1, #0]
 800aebc:	7812      	ldrb	r2, [r2, #0]
 800aebe:	1e10      	subs	r0, r2, #0
 800aec0:	bf18      	it	ne
 800aec2:	2001      	movne	r0, #1
 800aec4:	b002      	add	sp, #8
 800aec6:	4770      	bx	lr
 800aec8:	4610      	mov	r0, r2
 800aeca:	e7fb      	b.n	800aec4 <__ascii_mbtowc+0x16>
 800aecc:	f06f 0001 	mvn.w	r0, #1
 800aed0:	e7f8      	b.n	800aec4 <__ascii_mbtowc+0x16>

0800aed2 <_realloc_r>:
 800aed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed6:	4680      	mov	r8, r0
 800aed8:	4615      	mov	r5, r2
 800aeda:	460c      	mov	r4, r1
 800aedc:	b921      	cbnz	r1, 800aee8 <_realloc_r+0x16>
 800aede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee2:	4611      	mov	r1, r2
 800aee4:	f7fd bee8 	b.w	8008cb8 <_malloc_r>
 800aee8:	b92a      	cbnz	r2, 800aef6 <_realloc_r+0x24>
 800aeea:	f7fd fe71 	bl	8008bd0 <_free_r>
 800aeee:	2400      	movs	r4, #0
 800aef0:	4620      	mov	r0, r4
 800aef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef6:	f000 f840 	bl	800af7a <_malloc_usable_size_r>
 800aefa:	4285      	cmp	r5, r0
 800aefc:	4606      	mov	r6, r0
 800aefe:	d802      	bhi.n	800af06 <_realloc_r+0x34>
 800af00:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af04:	d8f4      	bhi.n	800aef0 <_realloc_r+0x1e>
 800af06:	4629      	mov	r1, r5
 800af08:	4640      	mov	r0, r8
 800af0a:	f7fd fed5 	bl	8008cb8 <_malloc_r>
 800af0e:	4607      	mov	r7, r0
 800af10:	2800      	cmp	r0, #0
 800af12:	d0ec      	beq.n	800aeee <_realloc_r+0x1c>
 800af14:	42b5      	cmp	r5, r6
 800af16:	462a      	mov	r2, r5
 800af18:	4621      	mov	r1, r4
 800af1a:	bf28      	it	cs
 800af1c:	4632      	movcs	r2, r6
 800af1e:	f7fc fff6 	bl	8007f0e <memcpy>
 800af22:	4621      	mov	r1, r4
 800af24:	4640      	mov	r0, r8
 800af26:	f7fd fe53 	bl	8008bd0 <_free_r>
 800af2a:	463c      	mov	r4, r7
 800af2c:	e7e0      	b.n	800aef0 <_realloc_r+0x1e>

0800af2e <__ascii_wctomb>:
 800af2e:	4603      	mov	r3, r0
 800af30:	4608      	mov	r0, r1
 800af32:	b141      	cbz	r1, 800af46 <__ascii_wctomb+0x18>
 800af34:	2aff      	cmp	r2, #255	@ 0xff
 800af36:	d904      	bls.n	800af42 <__ascii_wctomb+0x14>
 800af38:	228a      	movs	r2, #138	@ 0x8a
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	f04f 30ff 	mov.w	r0, #4294967295
 800af40:	4770      	bx	lr
 800af42:	700a      	strb	r2, [r1, #0]
 800af44:	2001      	movs	r0, #1
 800af46:	4770      	bx	lr

0800af48 <fiprintf>:
 800af48:	b40e      	push	{r1, r2, r3}
 800af4a:	b503      	push	{r0, r1, lr}
 800af4c:	4601      	mov	r1, r0
 800af4e:	ab03      	add	r3, sp, #12
 800af50:	4805      	ldr	r0, [pc, #20]	@ (800af68 <fiprintf+0x20>)
 800af52:	f853 2b04 	ldr.w	r2, [r3], #4
 800af56:	6800      	ldr	r0, [r0, #0]
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	f000 f83f 	bl	800afdc <_vfiprintf_r>
 800af5e:	b002      	add	sp, #8
 800af60:	f85d eb04 	ldr.w	lr, [sp], #4
 800af64:	b003      	add	sp, #12
 800af66:	4770      	bx	lr
 800af68:	20000300 	.word	0x20000300

0800af6c <abort>:
 800af6c:	b508      	push	{r3, lr}
 800af6e:	2006      	movs	r0, #6
 800af70:	f000 fa08 	bl	800b384 <raise>
 800af74:	2001      	movs	r0, #1
 800af76:	f7f9 ff8f 	bl	8004e98 <_exit>

0800af7a <_malloc_usable_size_r>:
 800af7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af7e:	1f18      	subs	r0, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	bfbc      	itt	lt
 800af84:	580b      	ldrlt	r3, [r1, r0]
 800af86:	18c0      	addlt	r0, r0, r3
 800af88:	4770      	bx	lr

0800af8a <__sfputc_r>:
 800af8a:	6893      	ldr	r3, [r2, #8]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	b410      	push	{r4}
 800af92:	6093      	str	r3, [r2, #8]
 800af94:	da08      	bge.n	800afa8 <__sfputc_r+0x1e>
 800af96:	6994      	ldr	r4, [r2, #24]
 800af98:	42a3      	cmp	r3, r4
 800af9a:	db01      	blt.n	800afa0 <__sfputc_r+0x16>
 800af9c:	290a      	cmp	r1, #10
 800af9e:	d103      	bne.n	800afa8 <__sfputc_r+0x1e>
 800afa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afa4:	f000 b932 	b.w	800b20c <__swbuf_r>
 800afa8:	6813      	ldr	r3, [r2, #0]
 800afaa:	1c58      	adds	r0, r3, #1
 800afac:	6010      	str	r0, [r2, #0]
 800afae:	7019      	strb	r1, [r3, #0]
 800afb0:	4608      	mov	r0, r1
 800afb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <__sfputs_r>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	4606      	mov	r6, r0
 800afbc:	460f      	mov	r7, r1
 800afbe:	4614      	mov	r4, r2
 800afc0:	18d5      	adds	r5, r2, r3
 800afc2:	42ac      	cmp	r4, r5
 800afc4:	d101      	bne.n	800afca <__sfputs_r+0x12>
 800afc6:	2000      	movs	r0, #0
 800afc8:	e007      	b.n	800afda <__sfputs_r+0x22>
 800afca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afce:	463a      	mov	r2, r7
 800afd0:	4630      	mov	r0, r6
 800afd2:	f7ff ffda 	bl	800af8a <__sfputc_r>
 800afd6:	1c43      	adds	r3, r0, #1
 800afd8:	d1f3      	bne.n	800afc2 <__sfputs_r+0xa>
 800afda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afdc <_vfiprintf_r>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	460d      	mov	r5, r1
 800afe2:	b09d      	sub	sp, #116	@ 0x74
 800afe4:	4614      	mov	r4, r2
 800afe6:	4698      	mov	r8, r3
 800afe8:	4606      	mov	r6, r0
 800afea:	b118      	cbz	r0, 800aff4 <_vfiprintf_r+0x18>
 800afec:	6a03      	ldr	r3, [r0, #32]
 800afee:	b90b      	cbnz	r3, 800aff4 <_vfiprintf_r+0x18>
 800aff0:	f7fc fe74 	bl	8007cdc <__sinit>
 800aff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aff6:	07d9      	lsls	r1, r3, #31
 800aff8:	d405      	bmi.n	800b006 <_vfiprintf_r+0x2a>
 800affa:	89ab      	ldrh	r3, [r5, #12]
 800affc:	059a      	lsls	r2, r3, #22
 800affe:	d402      	bmi.n	800b006 <_vfiprintf_r+0x2a>
 800b000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b002:	f7fc ff82 	bl	8007f0a <__retarget_lock_acquire_recursive>
 800b006:	89ab      	ldrh	r3, [r5, #12]
 800b008:	071b      	lsls	r3, r3, #28
 800b00a:	d501      	bpl.n	800b010 <_vfiprintf_r+0x34>
 800b00c:	692b      	ldr	r3, [r5, #16]
 800b00e:	b99b      	cbnz	r3, 800b038 <_vfiprintf_r+0x5c>
 800b010:	4629      	mov	r1, r5
 800b012:	4630      	mov	r0, r6
 800b014:	f000 f938 	bl	800b288 <__swsetup_r>
 800b018:	b170      	cbz	r0, 800b038 <_vfiprintf_r+0x5c>
 800b01a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b01c:	07dc      	lsls	r4, r3, #31
 800b01e:	d504      	bpl.n	800b02a <_vfiprintf_r+0x4e>
 800b020:	f04f 30ff 	mov.w	r0, #4294967295
 800b024:	b01d      	add	sp, #116	@ 0x74
 800b026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b02a:	89ab      	ldrh	r3, [r5, #12]
 800b02c:	0598      	lsls	r0, r3, #22
 800b02e:	d4f7      	bmi.n	800b020 <_vfiprintf_r+0x44>
 800b030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b032:	f7fc ff6b 	bl	8007f0c <__retarget_lock_release_recursive>
 800b036:	e7f3      	b.n	800b020 <_vfiprintf_r+0x44>
 800b038:	2300      	movs	r3, #0
 800b03a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b03c:	2320      	movs	r3, #32
 800b03e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b042:	f8cd 800c 	str.w	r8, [sp, #12]
 800b046:	2330      	movs	r3, #48	@ 0x30
 800b048:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b1f8 <_vfiprintf_r+0x21c>
 800b04c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b050:	f04f 0901 	mov.w	r9, #1
 800b054:	4623      	mov	r3, r4
 800b056:	469a      	mov	sl, r3
 800b058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b05c:	b10a      	cbz	r2, 800b062 <_vfiprintf_r+0x86>
 800b05e:	2a25      	cmp	r2, #37	@ 0x25
 800b060:	d1f9      	bne.n	800b056 <_vfiprintf_r+0x7a>
 800b062:	ebba 0b04 	subs.w	fp, sl, r4
 800b066:	d00b      	beq.n	800b080 <_vfiprintf_r+0xa4>
 800b068:	465b      	mov	r3, fp
 800b06a:	4622      	mov	r2, r4
 800b06c:	4629      	mov	r1, r5
 800b06e:	4630      	mov	r0, r6
 800b070:	f7ff ffa2 	bl	800afb8 <__sfputs_r>
 800b074:	3001      	adds	r0, #1
 800b076:	f000 80a7 	beq.w	800b1c8 <_vfiprintf_r+0x1ec>
 800b07a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b07c:	445a      	add	r2, fp
 800b07e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b080:	f89a 3000 	ldrb.w	r3, [sl]
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 809f 	beq.w	800b1c8 <_vfiprintf_r+0x1ec>
 800b08a:	2300      	movs	r3, #0
 800b08c:	f04f 32ff 	mov.w	r2, #4294967295
 800b090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b094:	f10a 0a01 	add.w	sl, sl, #1
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	9307      	str	r3, [sp, #28]
 800b09c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0a2:	4654      	mov	r4, sl
 800b0a4:	2205      	movs	r2, #5
 800b0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0aa:	4853      	ldr	r0, [pc, #332]	@ (800b1f8 <_vfiprintf_r+0x21c>)
 800b0ac:	f7f5 f8a0 	bl	80001f0 <memchr>
 800b0b0:	9a04      	ldr	r2, [sp, #16]
 800b0b2:	b9d8      	cbnz	r0, 800b0ec <_vfiprintf_r+0x110>
 800b0b4:	06d1      	lsls	r1, r2, #27
 800b0b6:	bf44      	itt	mi
 800b0b8:	2320      	movmi	r3, #32
 800b0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0be:	0713      	lsls	r3, r2, #28
 800b0c0:	bf44      	itt	mi
 800b0c2:	232b      	movmi	r3, #43	@ 0x2b
 800b0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0ce:	d015      	beq.n	800b0fc <_vfiprintf_r+0x120>
 800b0d0:	9a07      	ldr	r2, [sp, #28]
 800b0d2:	4654      	mov	r4, sl
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	f04f 0c0a 	mov.w	ip, #10
 800b0da:	4621      	mov	r1, r4
 800b0dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e0:	3b30      	subs	r3, #48	@ 0x30
 800b0e2:	2b09      	cmp	r3, #9
 800b0e4:	d94b      	bls.n	800b17e <_vfiprintf_r+0x1a2>
 800b0e6:	b1b0      	cbz	r0, 800b116 <_vfiprintf_r+0x13a>
 800b0e8:	9207      	str	r2, [sp, #28]
 800b0ea:	e014      	b.n	800b116 <_vfiprintf_r+0x13a>
 800b0ec:	eba0 0308 	sub.w	r3, r0, r8
 800b0f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	9304      	str	r3, [sp, #16]
 800b0f8:	46a2      	mov	sl, r4
 800b0fa:	e7d2      	b.n	800b0a2 <_vfiprintf_r+0xc6>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	1d19      	adds	r1, r3, #4
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	9103      	str	r1, [sp, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	bfbb      	ittet	lt
 800b108:	425b      	neglt	r3, r3
 800b10a:	f042 0202 	orrlt.w	r2, r2, #2
 800b10e:	9307      	strge	r3, [sp, #28]
 800b110:	9307      	strlt	r3, [sp, #28]
 800b112:	bfb8      	it	lt
 800b114:	9204      	strlt	r2, [sp, #16]
 800b116:	7823      	ldrb	r3, [r4, #0]
 800b118:	2b2e      	cmp	r3, #46	@ 0x2e
 800b11a:	d10a      	bne.n	800b132 <_vfiprintf_r+0x156>
 800b11c:	7863      	ldrb	r3, [r4, #1]
 800b11e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b120:	d132      	bne.n	800b188 <_vfiprintf_r+0x1ac>
 800b122:	9b03      	ldr	r3, [sp, #12]
 800b124:	1d1a      	adds	r2, r3, #4
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	9203      	str	r2, [sp, #12]
 800b12a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b12e:	3402      	adds	r4, #2
 800b130:	9305      	str	r3, [sp, #20]
 800b132:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b208 <_vfiprintf_r+0x22c>
 800b136:	7821      	ldrb	r1, [r4, #0]
 800b138:	2203      	movs	r2, #3
 800b13a:	4650      	mov	r0, sl
 800b13c:	f7f5 f858 	bl	80001f0 <memchr>
 800b140:	b138      	cbz	r0, 800b152 <_vfiprintf_r+0x176>
 800b142:	9b04      	ldr	r3, [sp, #16]
 800b144:	eba0 000a 	sub.w	r0, r0, sl
 800b148:	2240      	movs	r2, #64	@ 0x40
 800b14a:	4082      	lsls	r2, r0
 800b14c:	4313      	orrs	r3, r2
 800b14e:	3401      	adds	r4, #1
 800b150:	9304      	str	r3, [sp, #16]
 800b152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b156:	4829      	ldr	r0, [pc, #164]	@ (800b1fc <_vfiprintf_r+0x220>)
 800b158:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b15c:	2206      	movs	r2, #6
 800b15e:	f7f5 f847 	bl	80001f0 <memchr>
 800b162:	2800      	cmp	r0, #0
 800b164:	d03f      	beq.n	800b1e6 <_vfiprintf_r+0x20a>
 800b166:	4b26      	ldr	r3, [pc, #152]	@ (800b200 <_vfiprintf_r+0x224>)
 800b168:	bb1b      	cbnz	r3, 800b1b2 <_vfiprintf_r+0x1d6>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	3307      	adds	r3, #7
 800b16e:	f023 0307 	bic.w	r3, r3, #7
 800b172:	3308      	adds	r3, #8
 800b174:	9303      	str	r3, [sp, #12]
 800b176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b178:	443b      	add	r3, r7
 800b17a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b17c:	e76a      	b.n	800b054 <_vfiprintf_r+0x78>
 800b17e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b182:	460c      	mov	r4, r1
 800b184:	2001      	movs	r0, #1
 800b186:	e7a8      	b.n	800b0da <_vfiprintf_r+0xfe>
 800b188:	2300      	movs	r3, #0
 800b18a:	3401      	adds	r4, #1
 800b18c:	9305      	str	r3, [sp, #20]
 800b18e:	4619      	mov	r1, r3
 800b190:	f04f 0c0a 	mov.w	ip, #10
 800b194:	4620      	mov	r0, r4
 800b196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b19a:	3a30      	subs	r2, #48	@ 0x30
 800b19c:	2a09      	cmp	r2, #9
 800b19e:	d903      	bls.n	800b1a8 <_vfiprintf_r+0x1cc>
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0c6      	beq.n	800b132 <_vfiprintf_r+0x156>
 800b1a4:	9105      	str	r1, [sp, #20]
 800b1a6:	e7c4      	b.n	800b132 <_vfiprintf_r+0x156>
 800b1a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e7f0      	b.n	800b194 <_vfiprintf_r+0x1b8>
 800b1b2:	ab03      	add	r3, sp, #12
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	4b12      	ldr	r3, [pc, #72]	@ (800b204 <_vfiprintf_r+0x228>)
 800b1ba:	a904      	add	r1, sp, #16
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f7fb ff35 	bl	800702c <_printf_float>
 800b1c2:	4607      	mov	r7, r0
 800b1c4:	1c78      	adds	r0, r7, #1
 800b1c6:	d1d6      	bne.n	800b176 <_vfiprintf_r+0x19a>
 800b1c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1ca:	07d9      	lsls	r1, r3, #31
 800b1cc:	d405      	bmi.n	800b1da <_vfiprintf_r+0x1fe>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	059a      	lsls	r2, r3, #22
 800b1d2:	d402      	bmi.n	800b1da <_vfiprintf_r+0x1fe>
 800b1d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1d6:	f7fc fe99 	bl	8007f0c <__retarget_lock_release_recursive>
 800b1da:	89ab      	ldrh	r3, [r5, #12]
 800b1dc:	065b      	lsls	r3, r3, #25
 800b1de:	f53f af1f 	bmi.w	800b020 <_vfiprintf_r+0x44>
 800b1e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1e4:	e71e      	b.n	800b024 <_vfiprintf_r+0x48>
 800b1e6:	ab03      	add	r3, sp, #12
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	462a      	mov	r2, r5
 800b1ec:	4b05      	ldr	r3, [pc, #20]	@ (800b204 <_vfiprintf_r+0x228>)
 800b1ee:	a904      	add	r1, sp, #16
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f7fc f9b3 	bl	800755c <_printf_i>
 800b1f6:	e7e4      	b.n	800b1c2 <_vfiprintf_r+0x1e6>
 800b1f8:	0800d148 	.word	0x0800d148
 800b1fc:	0800d152 	.word	0x0800d152
 800b200:	0800702d 	.word	0x0800702d
 800b204:	0800afb9 	.word	0x0800afb9
 800b208:	0800d14e 	.word	0x0800d14e

0800b20c <__swbuf_r>:
 800b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20e:	460e      	mov	r6, r1
 800b210:	4614      	mov	r4, r2
 800b212:	4605      	mov	r5, r0
 800b214:	b118      	cbz	r0, 800b21e <__swbuf_r+0x12>
 800b216:	6a03      	ldr	r3, [r0, #32]
 800b218:	b90b      	cbnz	r3, 800b21e <__swbuf_r+0x12>
 800b21a:	f7fc fd5f 	bl	8007cdc <__sinit>
 800b21e:	69a3      	ldr	r3, [r4, #24]
 800b220:	60a3      	str	r3, [r4, #8]
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	071a      	lsls	r2, r3, #28
 800b226:	d501      	bpl.n	800b22c <__swbuf_r+0x20>
 800b228:	6923      	ldr	r3, [r4, #16]
 800b22a:	b943      	cbnz	r3, 800b23e <__swbuf_r+0x32>
 800b22c:	4621      	mov	r1, r4
 800b22e:	4628      	mov	r0, r5
 800b230:	f000 f82a 	bl	800b288 <__swsetup_r>
 800b234:	b118      	cbz	r0, 800b23e <__swbuf_r+0x32>
 800b236:	f04f 37ff 	mov.w	r7, #4294967295
 800b23a:	4638      	mov	r0, r7
 800b23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	6922      	ldr	r2, [r4, #16]
 800b242:	1a98      	subs	r0, r3, r2
 800b244:	6963      	ldr	r3, [r4, #20]
 800b246:	b2f6      	uxtb	r6, r6
 800b248:	4283      	cmp	r3, r0
 800b24a:	4637      	mov	r7, r6
 800b24c:	dc05      	bgt.n	800b25a <__swbuf_r+0x4e>
 800b24e:	4621      	mov	r1, r4
 800b250:	4628      	mov	r0, r5
 800b252:	f7ff fa53 	bl	800a6fc <_fflush_r>
 800b256:	2800      	cmp	r0, #0
 800b258:	d1ed      	bne.n	800b236 <__swbuf_r+0x2a>
 800b25a:	68a3      	ldr	r3, [r4, #8]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	60a3      	str	r3, [r4, #8]
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	6022      	str	r2, [r4, #0]
 800b266:	701e      	strb	r6, [r3, #0]
 800b268:	6962      	ldr	r2, [r4, #20]
 800b26a:	1c43      	adds	r3, r0, #1
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d004      	beq.n	800b27a <__swbuf_r+0x6e>
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	07db      	lsls	r3, r3, #31
 800b274:	d5e1      	bpl.n	800b23a <__swbuf_r+0x2e>
 800b276:	2e0a      	cmp	r6, #10
 800b278:	d1df      	bne.n	800b23a <__swbuf_r+0x2e>
 800b27a:	4621      	mov	r1, r4
 800b27c:	4628      	mov	r0, r5
 800b27e:	f7ff fa3d 	bl	800a6fc <_fflush_r>
 800b282:	2800      	cmp	r0, #0
 800b284:	d0d9      	beq.n	800b23a <__swbuf_r+0x2e>
 800b286:	e7d6      	b.n	800b236 <__swbuf_r+0x2a>

0800b288 <__swsetup_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4b29      	ldr	r3, [pc, #164]	@ (800b330 <__swsetup_r+0xa8>)
 800b28c:	4605      	mov	r5, r0
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	460c      	mov	r4, r1
 800b292:	b118      	cbz	r0, 800b29c <__swsetup_r+0x14>
 800b294:	6a03      	ldr	r3, [r0, #32]
 800b296:	b90b      	cbnz	r3, 800b29c <__swsetup_r+0x14>
 800b298:	f7fc fd20 	bl	8007cdc <__sinit>
 800b29c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a0:	0719      	lsls	r1, r3, #28
 800b2a2:	d422      	bmi.n	800b2ea <__swsetup_r+0x62>
 800b2a4:	06da      	lsls	r2, r3, #27
 800b2a6:	d407      	bmi.n	800b2b8 <__swsetup_r+0x30>
 800b2a8:	2209      	movs	r2, #9
 800b2aa:	602a      	str	r2, [r5, #0]
 800b2ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2b0:	81a3      	strh	r3, [r4, #12]
 800b2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b6:	e033      	b.n	800b320 <__swsetup_r+0x98>
 800b2b8:	0758      	lsls	r0, r3, #29
 800b2ba:	d512      	bpl.n	800b2e2 <__swsetup_r+0x5a>
 800b2bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2be:	b141      	cbz	r1, 800b2d2 <__swsetup_r+0x4a>
 800b2c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2c4:	4299      	cmp	r1, r3
 800b2c6:	d002      	beq.n	800b2ce <__swsetup_r+0x46>
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f7fd fc81 	bl	8008bd0 <_free_r>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2d8:	81a3      	strh	r3, [r4, #12]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	6063      	str	r3, [r4, #4]
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	f043 0308 	orr.w	r3, r3, #8
 800b2e8:	81a3      	strh	r3, [r4, #12]
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	b94b      	cbnz	r3, 800b302 <__swsetup_r+0x7a>
 800b2ee:	89a3      	ldrh	r3, [r4, #12]
 800b2f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2f8:	d003      	beq.n	800b302 <__swsetup_r+0x7a>
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f000 f883 	bl	800b408 <__smakebuf_r>
 800b302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b306:	f013 0201 	ands.w	r2, r3, #1
 800b30a:	d00a      	beq.n	800b322 <__swsetup_r+0x9a>
 800b30c:	2200      	movs	r2, #0
 800b30e:	60a2      	str	r2, [r4, #8]
 800b310:	6962      	ldr	r2, [r4, #20]
 800b312:	4252      	negs	r2, r2
 800b314:	61a2      	str	r2, [r4, #24]
 800b316:	6922      	ldr	r2, [r4, #16]
 800b318:	b942      	cbnz	r2, 800b32c <__swsetup_r+0xa4>
 800b31a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b31e:	d1c5      	bne.n	800b2ac <__swsetup_r+0x24>
 800b320:	bd38      	pop	{r3, r4, r5, pc}
 800b322:	0799      	lsls	r1, r3, #30
 800b324:	bf58      	it	pl
 800b326:	6962      	ldrpl	r2, [r4, #20]
 800b328:	60a2      	str	r2, [r4, #8]
 800b32a:	e7f4      	b.n	800b316 <__swsetup_r+0x8e>
 800b32c:	2000      	movs	r0, #0
 800b32e:	e7f7      	b.n	800b320 <__swsetup_r+0x98>
 800b330:	20000300 	.word	0x20000300

0800b334 <_raise_r>:
 800b334:	291f      	cmp	r1, #31
 800b336:	b538      	push	{r3, r4, r5, lr}
 800b338:	4605      	mov	r5, r0
 800b33a:	460c      	mov	r4, r1
 800b33c:	d904      	bls.n	800b348 <_raise_r+0x14>
 800b33e:	2316      	movs	r3, #22
 800b340:	6003      	str	r3, [r0, #0]
 800b342:	f04f 30ff 	mov.w	r0, #4294967295
 800b346:	bd38      	pop	{r3, r4, r5, pc}
 800b348:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b34a:	b112      	cbz	r2, 800b352 <_raise_r+0x1e>
 800b34c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b350:	b94b      	cbnz	r3, 800b366 <_raise_r+0x32>
 800b352:	4628      	mov	r0, r5
 800b354:	f000 f830 	bl	800b3b8 <_getpid_r>
 800b358:	4622      	mov	r2, r4
 800b35a:	4601      	mov	r1, r0
 800b35c:	4628      	mov	r0, r5
 800b35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b362:	f000 b817 	b.w	800b394 <_kill_r>
 800b366:	2b01      	cmp	r3, #1
 800b368:	d00a      	beq.n	800b380 <_raise_r+0x4c>
 800b36a:	1c59      	adds	r1, r3, #1
 800b36c:	d103      	bne.n	800b376 <_raise_r+0x42>
 800b36e:	2316      	movs	r3, #22
 800b370:	6003      	str	r3, [r0, #0]
 800b372:	2001      	movs	r0, #1
 800b374:	e7e7      	b.n	800b346 <_raise_r+0x12>
 800b376:	2100      	movs	r1, #0
 800b378:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b37c:	4620      	mov	r0, r4
 800b37e:	4798      	blx	r3
 800b380:	2000      	movs	r0, #0
 800b382:	e7e0      	b.n	800b346 <_raise_r+0x12>

0800b384 <raise>:
 800b384:	4b02      	ldr	r3, [pc, #8]	@ (800b390 <raise+0xc>)
 800b386:	4601      	mov	r1, r0
 800b388:	6818      	ldr	r0, [r3, #0]
 800b38a:	f7ff bfd3 	b.w	800b334 <_raise_r>
 800b38e:	bf00      	nop
 800b390:	20000300 	.word	0x20000300

0800b394 <_kill_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4d07      	ldr	r5, [pc, #28]	@ (800b3b4 <_kill_r+0x20>)
 800b398:	2300      	movs	r3, #0
 800b39a:	4604      	mov	r4, r0
 800b39c:	4608      	mov	r0, r1
 800b39e:	4611      	mov	r1, r2
 800b3a0:	602b      	str	r3, [r5, #0]
 800b3a2:	f7f9 fd69 	bl	8004e78 <_kill>
 800b3a6:	1c43      	adds	r3, r0, #1
 800b3a8:	d102      	bne.n	800b3b0 <_kill_r+0x1c>
 800b3aa:	682b      	ldr	r3, [r5, #0]
 800b3ac:	b103      	cbz	r3, 800b3b0 <_kill_r+0x1c>
 800b3ae:	6023      	str	r3, [r4, #0]
 800b3b0:	bd38      	pop	{r3, r4, r5, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20000f24 	.word	0x20000f24

0800b3b8 <_getpid_r>:
 800b3b8:	f7f9 bd56 	b.w	8004e68 <_getpid>

0800b3bc <__swhatbuf_r>:
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	460c      	mov	r4, r1
 800b3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c4:	2900      	cmp	r1, #0
 800b3c6:	b096      	sub	sp, #88	@ 0x58
 800b3c8:	4615      	mov	r5, r2
 800b3ca:	461e      	mov	r6, r3
 800b3cc:	da0d      	bge.n	800b3ea <__swhatbuf_r+0x2e>
 800b3ce:	89a3      	ldrh	r3, [r4, #12]
 800b3d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b3d4:	f04f 0100 	mov.w	r1, #0
 800b3d8:	bf14      	ite	ne
 800b3da:	2340      	movne	r3, #64	@ 0x40
 800b3dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	6031      	str	r1, [r6, #0]
 800b3e4:	602b      	str	r3, [r5, #0]
 800b3e6:	b016      	add	sp, #88	@ 0x58
 800b3e8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ea:	466a      	mov	r2, sp
 800b3ec:	f000 f848 	bl	800b480 <_fstat_r>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	dbec      	blt.n	800b3ce <__swhatbuf_r+0x12>
 800b3f4:	9901      	ldr	r1, [sp, #4]
 800b3f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b3fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3fe:	4259      	negs	r1, r3
 800b400:	4159      	adcs	r1, r3
 800b402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b406:	e7eb      	b.n	800b3e0 <__swhatbuf_r+0x24>

0800b408 <__smakebuf_r>:
 800b408:	898b      	ldrh	r3, [r1, #12]
 800b40a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b40c:	079d      	lsls	r5, r3, #30
 800b40e:	4606      	mov	r6, r0
 800b410:	460c      	mov	r4, r1
 800b412:	d507      	bpl.n	800b424 <__smakebuf_r+0x1c>
 800b414:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	6123      	str	r3, [r4, #16]
 800b41c:	2301      	movs	r3, #1
 800b41e:	6163      	str	r3, [r4, #20]
 800b420:	b003      	add	sp, #12
 800b422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b424:	ab01      	add	r3, sp, #4
 800b426:	466a      	mov	r2, sp
 800b428:	f7ff ffc8 	bl	800b3bc <__swhatbuf_r>
 800b42c:	9f00      	ldr	r7, [sp, #0]
 800b42e:	4605      	mov	r5, r0
 800b430:	4639      	mov	r1, r7
 800b432:	4630      	mov	r0, r6
 800b434:	f7fd fc40 	bl	8008cb8 <_malloc_r>
 800b438:	b948      	cbnz	r0, 800b44e <__smakebuf_r+0x46>
 800b43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b43e:	059a      	lsls	r2, r3, #22
 800b440:	d4ee      	bmi.n	800b420 <__smakebuf_r+0x18>
 800b442:	f023 0303 	bic.w	r3, r3, #3
 800b446:	f043 0302 	orr.w	r3, r3, #2
 800b44a:	81a3      	strh	r3, [r4, #12]
 800b44c:	e7e2      	b.n	800b414 <__smakebuf_r+0xc>
 800b44e:	89a3      	ldrh	r3, [r4, #12]
 800b450:	6020      	str	r0, [r4, #0]
 800b452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b456:	81a3      	strh	r3, [r4, #12]
 800b458:	9b01      	ldr	r3, [sp, #4]
 800b45a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b45e:	b15b      	cbz	r3, 800b478 <__smakebuf_r+0x70>
 800b460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b464:	4630      	mov	r0, r6
 800b466:	f000 f81d 	bl	800b4a4 <_isatty_r>
 800b46a:	b128      	cbz	r0, 800b478 <__smakebuf_r+0x70>
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	f023 0303 	bic.w	r3, r3, #3
 800b472:	f043 0301 	orr.w	r3, r3, #1
 800b476:	81a3      	strh	r3, [r4, #12]
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	431d      	orrs	r5, r3
 800b47c:	81a5      	strh	r5, [r4, #12]
 800b47e:	e7cf      	b.n	800b420 <__smakebuf_r+0x18>

0800b480 <_fstat_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	4d07      	ldr	r5, [pc, #28]	@ (800b4a0 <_fstat_r+0x20>)
 800b484:	2300      	movs	r3, #0
 800b486:	4604      	mov	r4, r0
 800b488:	4608      	mov	r0, r1
 800b48a:	4611      	mov	r1, r2
 800b48c:	602b      	str	r3, [r5, #0]
 800b48e:	f7f9 fd53 	bl	8004f38 <_fstat>
 800b492:	1c43      	adds	r3, r0, #1
 800b494:	d102      	bne.n	800b49c <_fstat_r+0x1c>
 800b496:	682b      	ldr	r3, [r5, #0]
 800b498:	b103      	cbz	r3, 800b49c <_fstat_r+0x1c>
 800b49a:	6023      	str	r3, [r4, #0]
 800b49c:	bd38      	pop	{r3, r4, r5, pc}
 800b49e:	bf00      	nop
 800b4a0:	20000f24 	.word	0x20000f24

0800b4a4 <_isatty_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	4d06      	ldr	r5, [pc, #24]	@ (800b4c0 <_isatty_r+0x1c>)
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	4608      	mov	r0, r1
 800b4ae:	602b      	str	r3, [r5, #0]
 800b4b0:	f7f9 fd52 	bl	8004f58 <_isatty>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d102      	bne.n	800b4be <_isatty_r+0x1a>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	b103      	cbz	r3, 800b4be <_isatty_r+0x1a>
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	bd38      	pop	{r3, r4, r5, pc}
 800b4c0:	20000f24 	.word	0x20000f24

0800b4c4 <_init>:
 800b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c6:	bf00      	nop
 800b4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ca:	bc08      	pop	{r3}
 800b4cc:	469e      	mov	lr, r3
 800b4ce:	4770      	bx	lr

0800b4d0 <_fini>:
 800b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d2:	bf00      	nop
 800b4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4d6:	bc08      	pop	{r3}
 800b4d8:	469e      	mov	lr, r3
 800b4da:	4770      	bx	lr
