
cpoc_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031c8  08013350  08013350  00014350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016518  08016518  0001861c  2**0
                  CONTENTS
  4 .ARM          00000008  08016518  08016518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016520  08016520  0001861c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016520  08016520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016524  08016524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000061c  20000000  08016528  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001861c  2**0
                  CONTENTS
 10 .bss          00006114  2000061c  2000061c  0001861c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006730  20006730  0001861c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001861c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000edfd  00000000  00000000  0001864c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000366b  00000000  00000000  00027449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  0002aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7b  00000000  00000000  0002b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ceaa  00000000  00000000  0002c34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000128f5  00000000  00000000  000491f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095824  00000000  00000000  0005baea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f130e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c0c  00000000  00000000  000f1354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000f5f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000061c 	.word	0x2000061c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013334 	.word	0x08013334

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000620 	.word	0x20000620
 80001cc:	08013334 	.word	0x08013334

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001014:	2b80      	cmp	r3, #128	@ 0x80
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103a:	2b40      	cmp	r3, #64	@ 0x40
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b01      	cmp	r3, #1
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	b2db      	uxtb	r3, r3
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	611a      	str	r2, [r3, #16]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <DS3231_Write>:
#include "ds3231.h"

#define DS3231_ADDRESS 0xD0

void DS3231_Write(uint8_t reg, uint8_t data)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	4613      	mov	r3, r2
 800119e:	71bb      	strb	r3, [r7, #6]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 80011a0:	bf00      	nop
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <DS3231_Write+0x8c>)
 80011a4:	f7ff ff7a 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <DS3231_Write+0x12>
    LL_I2C_GenerateStartCondition(I2C1);
 80011ae:	481b      	ldr	r0, [pc, #108]	@ (800121c <DS3231_Write+0x8c>)
 80011b0:	f7ff ffac 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 80011b4:	bf00      	nop
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <DS3231_Write+0x8c>)
 80011b8:	f7ff ff4a 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <DS3231_Write+0x26>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 80011c2:	21d0      	movs	r1, #208	@ 0xd0
 80011c4:	4815      	ldr	r0, [pc, #84]	@ (800121c <DS3231_Write+0x8c>)
 80011c6:	f7ff ffce 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80011ca:	bf00      	nop
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <DS3231_Write+0x8c>)
 80011ce:	f7ff ff52 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <DS3231_Write+0x3c>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <DS3231_Write+0x8c>)
 80011da:	f7ff ff72 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <DS3231_Write+0x8c>)
 80011e4:	f7ff ffbf 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 80011e8:	bf00      	nop
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <DS3231_Write+0x8c>)
 80011ec:	f7ff ff0a 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f9      	beq.n	80011ea <DS3231_Write+0x5a>
    LL_I2C_TransmitData8(I2C1, data);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <DS3231_Write+0x8c>)
 80011fc:	f7ff ffb3 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001200:	bf00      	nop
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <DS3231_Write+0x8c>)
 8001204:	f7ff fefe 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <DS3231_Write+0x72>
    LL_I2C_GenerateStopCondition(I2C1);
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <DS3231_Write+0x8c>)
 8001210:	f7ff ff8c 	bl	800112c <LL_I2C_GenerateStopCondition>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400

08001220 <DS3231_Read>:

uint8_t DS3231_Read(uint8_t reg)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
    uint8_t data = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
    while(LL_I2C_IsActiveFlag_BUSY(I2C1));
 800122e:	bf00      	nop
 8001230:	482c      	ldr	r0, [pc, #176]	@ (80012e4 <DS3231_Read+0xc4>)
 8001232:	f7ff ff33 	bl	800109c <LL_I2C_IsActiveFlag_BUSY>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <DS3231_Read+0x10>
    LL_I2C_GenerateStartCondition(I2C1);
 800123c:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <DS3231_Read+0xc4>)
 800123e:	f7ff ff65 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 8001242:	bf00      	nop
 8001244:	4827      	ldr	r0, [pc, #156]	@ (80012e4 <DS3231_Read+0xc4>)
 8001246:	f7ff ff03 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <DS3231_Read+0x24>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS);
 8001250:	21d0      	movs	r1, #208	@ 0xd0
 8001252:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <DS3231_Read+0xc4>)
 8001254:	f7ff ff87 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 8001258:	bf00      	nop
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <DS3231_Read+0xc4>)
 800125c:	f7ff ff0b 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f9      	beq.n	800125a <DS3231_Read+0x3a>
    LL_I2C_ClearFlag_ADDR(I2C1);
 8001266:	481f      	ldr	r0, [pc, #124]	@ (80012e4 <DS3231_Read+0xc4>)
 8001268:	f7ff ff2b 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_TransmitData8(I2C1, reg);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	@ (80012e4 <DS3231_Read+0xc4>)
 8001272:	f7ff ff78 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_TXE(I2C1));
 8001276:	bf00      	nop
 8001278:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <DS3231_Read+0xc4>)
 800127a:	f7ff fec3 	bl	8001004 <LL_I2C_IsActiveFlag_TXE>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <DS3231_Read+0x58>
    LL_I2C_GenerateStartCondition(I2C1);
 8001284:	4817      	ldr	r0, [pc, #92]	@ (80012e4 <DS3231_Read+0xc4>)
 8001286:	f7ff ff41 	bl	800110c <LL_I2C_GenerateStartCondition>
    while(!LL_I2C_IsActiveFlag_SB(I2C1));
 800128a:	bf00      	nop
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <DS3231_Read+0xc4>)
 800128e:	f7ff fedf 	bl	8001050 <LL_I2C_IsActiveFlag_SB>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f9      	beq.n	800128c <DS3231_Read+0x6c>
    LL_I2C_TransmitData8(I2C1, DS3231_ADDRESS | 1);
 8001298:	21d1      	movs	r1, #209	@ 0xd1
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <DS3231_Read+0xc4>)
 800129c:	f7ff ff63 	bl	8001166 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_ADDR(I2C1));
 80012a0:	bf00      	nop
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <DS3231_Read+0xc4>)
 80012a4:	f7ff fee7 	bl	8001076 <LL_I2C_IsActiveFlag_ADDR>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f9      	beq.n	80012a2 <DS3231_Read+0x82>
    LL_I2C_ClearFlag_ADDR(I2C1);
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b0:	f7ff ff07 	bl	80010c2 <LL_I2C_ClearFlag_ADDR>
    LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
 80012b4:	2100      	movs	r1, #0
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <DS3231_Read+0xc4>)
 80012b8:	f7ff ff15 	bl	80010e6 <LL_I2C_AcknowledgeNextData>
    while(!LL_I2C_IsActiveFlag_RXNE(I2C1));
 80012bc:	bf00      	nop
 80012be:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <DS3231_Read+0xc4>)
 80012c0:	f7ff feb3 	bl	800102a <LL_I2C_IsActiveFlag_RXNE>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <DS3231_Read+0x9e>
    data = LL_I2C_ReceiveData8(I2C1);
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <DS3231_Read+0xc4>)
 80012cc:	f7ff ff3e 	bl	800114c <LL_I2C_ReceiveData8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
    LL_I2C_GenerateStopCondition(I2C1);
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <DS3231_Read+0xc4>)
 80012d6:	f7ff ff29 	bl	800112c <LL_I2C_GenerateStopCondition>
    return data;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400

080012e8 <DS3231_SetDateTime>:

void DS3231_SetDateTime(uint8_t day, uint8_t date, uint8_t month, uint8_t year, uint8_t hour, uint8_t min, uint8_t sec)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4603      	mov	r3, r0
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	460b      	mov	r3, r1
 8001300:	717b      	strb	r3, [r7, #5]
 8001302:	4613      	mov	r3, r2
 8001304:	713b      	strb	r3, [r7, #4]
    DS3231_Write(0x00, ((sec / 10) << 4) | (sec % 10));
 8001306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130a:	4a55      	ldr	r2, [pc, #340]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	b258      	sxtb	r0, r3
 8001318:	f897 2020 	ldrb.w	r2, [r7, #32]
 800131c:	4b50      	ldr	r3, [pc, #320]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4303      	orrs	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff28 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x01, ((min / 10) << 4) | (min % 10));
 8001340:	7f3b      	ldrb	r3, [r7, #28]
 8001342:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	b258      	sxtb	r0, r3
 8001350:	7f3a      	ldrb	r2, [r7, #28]
 8001352:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001354:	fba3 1302 	umull	r1, r3, r3, r2
 8001358:	08d9      	lsrs	r1, r3, #3
 800135a:	460b      	mov	r3, r1
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4303      	orrs	r3, r0
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff0d 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x02, ((hour / 10) << 4) | (hour % 10));
 8001376:	7e3b      	ldrb	r3, [r7, #24]
 8001378:	4a39      	ldr	r2, [pc, #228]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b258      	sxtb	r0, r3
 8001386:	7e3a      	ldrb	r2, [r7, #24]
 8001388:	4b35      	ldr	r3, [pc, #212]	@ (8001460 <DS3231_SetDateTime+0x178>)
 800138a:	fba3 1302 	umull	r1, r3, r3, r2
 800138e:	08d9      	lsrs	r1, r3, #3
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4303      	orrs	r3, r0
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fef2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x03, day);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	2003      	movs	r0, #3
 80013b2:	f7ff feed 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x04, ((date / 10) << 4) | (date % 10));
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b258      	sxtb	r0, r3
 80013c6:	79ba      	ldrb	r2, [r7, #6]
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013ca:	fba3 1302 	umull	r1, r3, r3, r2
 80013ce:	08d9      	lsrs	r1, r3, #3
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4303      	orrs	r3, r0
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff fed2 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x05, ((month / 10) << 4) | (month % 10));
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <DS3231_SetDateTime+0x178>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	b258      	sxtb	r0, r3
 80013fc:	797a      	ldrb	r2, [r7, #5]
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001400:	fba3 1302 	umull	r1, r3, r3, r2
 8001404:	08d9      	lsrs	r1, r3, #3
 8001406:	460b      	mov	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	4303      	orrs	r3, r0
 8001416:	b25b      	sxtb	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	2005      	movs	r0, #5
 800141e:	f7ff feb7 	bl	8001190 <DS3231_Write>
    DS3231_Write(0x06, ((year / 10) << 4) | (year % 10));
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b258      	sxtb	r0, r3
 8001432:	793a      	ldrb	r2, [r7, #4]
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <DS3231_SetDateTime+0x178>)
 8001436:	fba3 1302 	umull	r1, r3, r3, r2
 800143a:	08d9      	lsrs	r1, r3, #3
 800143c:	460b      	mov	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4303      	orrs	r3, r0
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2006      	movs	r0, #6
 8001454:	f7ff fe9c 	bl	8001190 <DS3231_Write>
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	cccccccd 	.word	0xcccccccd

08001464 <DS3231_GetDateTime>:

void DS3231_GetDateTime(uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *year, uint8_t *hour, uint8_t *min, uint8_t *sec)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    *sec = DS3231_Read(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fed4 	bl	8001220 <DS3231_Read>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	701a      	strb	r2, [r3, #0]
    *min = DS3231_Read(0x01);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fecd 	bl	8001220 <DS3231_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	701a      	strb	r2, [r3, #0]
    *hour = DS3231_Read(0x02);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff fec6 	bl	8001220 <DS3231_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	701a      	strb	r2, [r3, #0]
    *day = DS3231_Read(0x03);
 800149c:	2003      	movs	r0, #3
 800149e:	f7ff febf 	bl	8001220 <DS3231_Read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]
    *date = DS3231_Read(0x04);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff feb8 	bl	8001220 <DS3231_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	701a      	strb	r2, [r3, #0]
    *month = DS3231_Read(0x05);
 80014b8:	2005      	movs	r0, #5
 80014ba:	f7ff feb1 	bl	8001220 <DS3231_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	701a      	strb	r2, [r3, #0]
    *year = DS3231_Read(0x06);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff feaa 	bl	8001220 <DS3231_Read>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]

    *sec = ((*sec >> 4) * 10) + (*sec & 0x0F);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	701a      	strb	r2, [r3, #0]
    *min = ((*min >> 4) * 10) + (*min & 0x0F);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	701a      	strb	r2, [r3, #0]
    *hour = ((*hour >> 4) * 10) + (*hour & 0x0F);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2da      	uxtb	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	701a      	strb	r2, [r3, #0]
    *date = ((*date >> 4) * 10) + (*date & 0x0F);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	701a      	strb	r2, [r3, #0]
    *month = ((*month >> 4) * 10) + (*month & 0x0F);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4413      	add	r3, r2
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	701a      	strb	r2, [r3, #0]
    *year = ((*year >> 4) * 10) + (*year & 0x0F);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <DS3231_GetTemperature>:

float DS3231_GetTemperature(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
    uint8_t temp_msb = DS3231_Read(0x11);
 80015ba:	2011      	movs	r0, #17
 80015bc:	f7ff fe30 	bl	8001220 <DS3231_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_lsb = DS3231_Read(0x12);
 80015c4:	2012      	movs	r0, #18
 80015c6:	f7ff fe2b 	bl	8001220 <DS3231_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71bb      	strb	r3, [r7, #6]
    int16_t temp = (temp_msb << 8) | temp_lsb;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
    float temperature = temp / 256.0;
 80015dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffaf 	bl	8000544 <__aeabi_i2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <DS3231_GetTemperature+0x5c>)
 80015ec:	f7ff f93e 	bl	800086c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fb06 	bl	8000c08 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	603b      	str	r3, [r7, #0]
    return temperature;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40700000 	.word	0x40700000

08001614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	6039      	str	r1, [r7, #0]
 800161e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db0a      	blt.n	800163e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	490c      	ldr	r1, [pc, #48]	@ (8001660 <__NVIC_SetPriority+0x4c>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	440b      	add	r3, r1
 8001638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800163c:	e00a      	b.n	8001654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4908      	ldr	r1, [pc, #32]	@ (8001664 <__NVIC_SetPriority+0x50>)
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	3b04      	subs	r3, #4
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	440b      	add	r3, r1
 8001652:	761a      	strb	r2, [r3, #24]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ffc2 	bl	8001614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <systick_timer_start>:

#include "systick.h"
#include "stm32f4xx.h"

void systick_timer_start(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    // Reset SysTick counter value
   // SysTick->VAL = 0;

    // Enable SysTick counter
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <systick_timer_start+0x1c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <systick_timer_init>:
    // Disable SysTick counter
   // SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

void systick_timer_init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    // Set SysTick to trigger interrupt every 1ms
    SysTick_Config(SystemCoreClock/1000);
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <systick_timer_init+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <systick_timer_init+0x20>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffc3 	bl	8001668 <SysTick_Config>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000440 	.word	0x20000440
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b02      	cmp	r3, #2
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b08      	cmp	r3, #8
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	2b20      	cmp	r3, #32
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001798:	2b80      	cmp	r3, #128	@ 0x80
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001804:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800181a:	b480      	push	{r7}
 800181c:	b089      	sub	sp, #36	@ 0x24
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	330c      	adds	r3, #12
 8001826:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	e853 3f00 	ldrex	r3, [r3]
 800182e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	330c      	adds	r3, #12
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	61ba      	str	r2, [r7, #24]
 8001840:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001842:	6979      	ldr	r1, [r7, #20]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	e841 2300 	strex	r3, r2, [r1]
 800184a:	613b      	str	r3, [r7, #16]
   return(result);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e7      	bne.n	8001822 <LL_USART_EnableIT_RXNE+0x8>
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3724      	adds	r7, #36	@ 0x24
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	330c      	adds	r3, #12
 800186c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	e853 3f00 	ldrex	r3, [r3]
 8001874:	60bb      	str	r3, [r7, #8]
   return(result);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	330c      	adds	r3, #12
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	61ba      	str	r2, [r7, #24]
 8001886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	e841 2300 	strex	r3, r2, [r1]
 8001890:	613b      	str	r3, [r7, #16]
   return(result);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e7      	bne.n	8001868 <LL_USART_EnableIT_TXE+0x8>
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b089      	sub	sp, #36	@ 0x24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3314      	adds	r3, #20
 80018b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	e853 3f00 	ldrex	r3, [r3]
 80018ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3314      	adds	r3, #20
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	61ba      	str	r2, [r7, #24]
 80018cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	e841 2300 	strex	r3, r2, [r1]
 80018d6:	613b      	str	r3, [r7, #16]
   return(result);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e7      	bne.n	80018ae <LL_USART_EnableIT_ERROR+0x8>
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	@ 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	330c      	adds	r3, #12
 80018f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	e853 3f00 	ldrex	r3, [r3]
 8001900:	60bb      	str	r3, [r7, #8]
   return(result);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f023 0320 	bic.w	r3, r3, #32
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	61ba      	str	r2, [r7, #24]
 8001912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001914:	6979      	ldr	r1, [r7, #20]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	e841 2300 	strex	r3, r2, [r1]
 800191c:	613b      	str	r3, [r7, #16]
   return(result);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e7      	bne.n	80018f4 <LL_USART_DisableIT_RXNE+0x8>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001932:	b480      	push	{r7}
 8001934:	b089      	sub	sp, #36	@ 0x24
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	330c      	adds	r3, #12
 800193e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	e853 3f00 	ldrex	r3, [r3]
 8001946:	60bb      	str	r3, [r7, #8]
   return(result);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	330c      	adds	r3, #12
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	61ba      	str	r2, [r7, #24]
 8001958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800195a:	6979      	ldr	r1, [r7, #20]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	e841 2300 	strex	r3, r2, [r1]
 8001962:	613b      	str	r3, [r7, #16]
   return(result);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1e7      	bne.n	800193a <LL_USART_DisableIT_TXE+0x8>
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3724      	adds	r7, #36	@ 0x24
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b20      	cmp	r3, #32
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	2b80      	cmp	r3, #128	@ 0x80
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	b2db      	uxtb	r3, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	605a      	str	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <Ringbuf_init>:


void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <Ringbuf_init+0xa8>)
 8001a02:	4a29      	ldr	r2, [pc, #164]	@ (8001aa8 <Ringbuf_init+0xac>)
 8001a04:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <Ringbuf_init+0xb0>)
 8001a08:	4a29      	ldr	r2, [pc, #164]	@ (8001ab0 <Ringbuf_init+0xb4>)
 8001a0a:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <Ringbuf_init+0xb8>)
 8001a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab8 <Ringbuf_init+0xbc>)
 8001a10:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001a12:	4b2a      	ldr	r3, [pc, #168]	@ (8001abc <Ringbuf_init+0xc0>)
 8001a14:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac0 <Ringbuf_init+0xc4>)
 8001a16:	601a      	str	r2, [r3, #0]
  _rx_buffer3 = &rx_buffer3;
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <Ringbuf_init+0xc8>)
 8001a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac8 <Ringbuf_init+0xcc>)
 8001a1c:	601a      	str	r2, [r3, #0]
  _tx_buffer3 = &tx_buffer3;
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001acc <Ringbuf_init+0xd0>)
 8001a20:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad0 <Ringbuf_init+0xd4>)
 8001a22:	601a      	str	r2, [r3, #0]
  _rx_buffer5 = &rx_buffer5;
 8001a24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <Ringbuf_init+0xd8>)
 8001a26:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad8 <Ringbuf_init+0xdc>)
 8001a28:	601a      	str	r2, [r3, #0]
  _tx_buffer5 = &tx_buffer5;
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <Ringbuf_init+0xe0>)
 8001a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ae0 <Ringbuf_init+0xe4>)
 8001a2e:	601a      	str	r2, [r3, #0]
  _rx_buffer6 = &rx_buffer6;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <Ringbuf_init+0xe8>)
 8001a32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae8 <Ringbuf_init+0xec>)
 8001a34:	601a      	str	r2, [r3, #0]
  _tx_buffer6 = &tx_buffer6;
 8001a36:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <Ringbuf_init+0xf0>)
 8001a38:	4a2d      	ldr	r2, [pc, #180]	@ (8001af0 <Ringbuf_init+0xf4>)
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  LL_USART_EnableIT_ERROR(uart1);
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <Ringbuf_init+0xf8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff30 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart2);
 8001a46:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <Ringbuf_init+0xfc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff2b 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart3);
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <Ringbuf_init+0x100>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff26 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart5);
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <Ringbuf_init+0x104>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff21 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  LL_USART_EnableIT_ERROR(uart6);
 8001a64:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <Ringbuf_init+0x108>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff1c 	bl	80018a6 <LL_USART_EnableIT_ERROR>
  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart1);
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <Ringbuf_init+0xf8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fed1 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart2);
 8001a78:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <Ringbuf_init+0xfc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fecc 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart3);
 8001a82:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <Ringbuf_init+0x100>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fec7 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart5);
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <Ringbuf_init+0x104>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fec2 	bl	800181a <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(uart6);
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <Ringbuf_init+0x108>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff febd 	bl	800181a <LL_USART_EnableIT_RXNE>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20005688 	.word	0x20005688
 8001aa8:	20000638 	.word	0x20000638
 8001aac:	2000568c 	.word	0x2000568c
 8001ab0:	20000e40 	.word	0x20000e40
 8001ab4:	20005690 	.word	0x20005690
 8001ab8:	20001648 	.word	0x20001648
 8001abc:	20005694 	.word	0x20005694
 8001ac0:	20001e50 	.word	0x20001e50
 8001ac4:	20005698 	.word	0x20005698
 8001ac8:	20002658 	.word	0x20002658
 8001acc:	2000569c 	.word	0x2000569c
 8001ad0:	20002e60 	.word	0x20002e60
 8001ad4:	200056a0 	.word	0x200056a0
 8001ad8:	20003668 	.word	0x20003668
 8001adc:	200056a4 	.word	0x200056a4
 8001ae0:	20003e70 	.word	0x20003e70
 8001ae4:	200056a8 	.word	0x200056a8
 8001ae8:	20004678 	.word	0x20004678
 8001aec:	200056ac 	.word	0x200056ac
 8001af0:	20004e80 	.word	0x20004e80
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004
 8001afc:	20000008 	.word	0x20000008
 8001b00:	2000000c 	.word	0x2000000c
 8001b04:	20000010 	.word	0x20000010

08001b08 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b20:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d03b      	beq.n	8001ba6 <store_char+0x9e>
    ATOMIC_BLOCK_START(USART1)
 8001b2e:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <store_char+0xa8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff feda 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(USART2)
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <store_char+0xac>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fed5 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(USART3)
 8001b42:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <store_char+0xb0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fed0 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(UART5)
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <store_char+0xb4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fecb 	bl	80018ec <LL_USART_DisableIT_RXNE>
    ATOMIC_BLOCK_START(USART6)
 8001b56:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <store_char+0xb8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fec6 	bl	80018ec <LL_USART_DisableIT_RXNE>
    buffer->buffer[buffer->head] = c;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	79f9      	ldrb	r1, [r7, #7]
 8001b6a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
    ATOMIC_BLOCK_END(USART1)
 8001b74:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <store_char+0xa8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fe4e 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART2)
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <store_char+0xac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fe49 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART3)
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <store_char+0xb0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fe44 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(UART5)
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <store_char+0xb4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fe3f 	bl	800181a <LL_USART_EnableIT_RXNE>
    ATOMIC_BLOCK_END(USART6)
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <store_char+0xb8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fe3a 	bl	800181a <LL_USART_EnableIT_RXNE>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	2000000c 	.word	0x2000000c
 8001bc0:	20000010 	.word	0x20000010

08001bc4 <Uart_read>:

int Uart_read(USART_TypeDef *uart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  ring_buffer *_rx_buffer;

  switch ((uint32_t)uart) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a50      	ldr	r2, [pc, #320]	@ (8001d10 <Uart_read+0x14c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00f      	beq.n	8001bf4 <Uart_read+0x30>
 8001bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d10 <Uart_read+0x14c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d81c      	bhi.n	8001c14 <Uart_read+0x50>
 8001bda:	4a4e      	ldr	r2, [pc, #312]	@ (8001d14 <Uart_read+0x150>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d015      	beq.n	8001c0c <Uart_read+0x48>
 8001be0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d14 <Uart_read+0x150>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d816      	bhi.n	8001c14 <Uart_read+0x50>
 8001be6:	4a4c      	ldr	r2, [pc, #304]	@ (8001d18 <Uart_read+0x154>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d007      	beq.n	8001bfc <Uart_read+0x38>
 8001bec:	4a4b      	ldr	r2, [pc, #300]	@ (8001d1c <Uart_read+0x158>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d008      	beq.n	8001c04 <Uart_read+0x40>
 8001bf2:	e00f      	b.n	8001c14 <Uart_read+0x50>
    case (uint32_t)USART1:
      _rx_buffer = _rx_buffer1;
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d20 <Uart_read+0x15c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
      break;
 8001bfa:	e00f      	b.n	8001c1c <Uart_read+0x58>
    case (uint32_t)USART2:
      _rx_buffer = _rx_buffer2;
 8001bfc:	4b49      	ldr	r3, [pc, #292]	@ (8001d24 <Uart_read+0x160>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
      break;
 8001c02:	e00b      	b.n	8001c1c <Uart_read+0x58>
    case (uint32_t)USART3:
      _rx_buffer = _rx_buffer3;
 8001c04:	4b48      	ldr	r3, [pc, #288]	@ (8001d28 <Uart_read+0x164>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
      break;
 8001c0a:	e007      	b.n	8001c1c <Uart_read+0x58>
    case (uint32_t)UART5:
      _rx_buffer = _rx_buffer5;
 8001c0c:	4b47      	ldr	r3, [pc, #284]	@ (8001d2c <Uart_read+0x168>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
      break;
 8001c12:	e003      	b.n	8001c1c <Uart_read+0x58>
    default:
      _rx_buffer = _rx_buffer6;
 8001c14:	4b46      	ldr	r3, [pc, #280]	@ (8001d30 <Uart_read+0x16c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
      break;
 8001c1a:	bf00      	nop
  }

  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d102      	bne.n	8001c32 <Uart_read+0x6e>
  {
    return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	e069      	b.n	8001d06 <Uart_read+0x142>
  }
  else
  {
    ATOMIC_BLOCK_START(uart)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a36      	ldr	r2, [pc, #216]	@ (8001d10 <Uart_read+0x14c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d105      	bne.n	8001c46 <Uart_read+0x82>
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d34 <Uart_read+0x170>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe54 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c44:	e022      	b.n	8001c8c <Uart_read+0xc8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a33      	ldr	r2, [pc, #204]	@ (8001d18 <Uart_read+0x154>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d105      	bne.n	8001c5a <Uart_read+0x96>
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d38 <Uart_read+0x174>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe4a 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c58:	e018      	b.n	8001c8c <Uart_read+0xc8>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001d1c <Uart_read+0x158>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d105      	bne.n	8001c6e <Uart_read+0xaa>
 8001c62:	4b36      	ldr	r3, [pc, #216]	@ (8001d3c <Uart_read+0x178>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fe40 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c6c:	e00e      	b.n	8001c8c <Uart_read+0xc8>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a28      	ldr	r2, [pc, #160]	@ (8001d14 <Uart_read+0x150>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d105      	bne.n	8001c82 <Uart_read+0xbe>
 8001c76:	4b32      	ldr	r3, [pc, #200]	@ (8001d40 <Uart_read+0x17c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe36 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001c80:	e004      	b.n	8001c8c <Uart_read+0xc8>
 8001c82:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <Uart_read+0x180>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fe30 	bl	80018ec <LL_USART_DisableIT_RXNE>
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	72fb      	strb	r3, [r7, #11]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    ATOMIC_BLOCK_END(uart)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <Uart_read+0x14c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d105      	bne.n	8001cbe <Uart_read+0xfa>
 8001cb2:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <Uart_read+0x170>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fdaf 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cbc:	e022      	b.n	8001d04 <Uart_read+0x140>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a15      	ldr	r2, [pc, #84]	@ (8001d18 <Uart_read+0x154>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d105      	bne.n	8001cd2 <Uart_read+0x10e>
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <Uart_read+0x174>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fda5 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cd0:	e018      	b.n	8001d04 <Uart_read+0x140>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a11      	ldr	r2, [pc, #68]	@ (8001d1c <Uart_read+0x158>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d105      	bne.n	8001ce6 <Uart_read+0x122>
 8001cda:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <Uart_read+0x178>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fd9b 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001ce4:	e00e      	b.n	8001d04 <Uart_read+0x140>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <Uart_read+0x150>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d105      	bne.n	8001cfa <Uart_read+0x136>
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <Uart_read+0x17c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fd91 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001cf8:	e004      	b.n	8001d04 <Uart_read+0x140>
 8001cfa:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <Uart_read+0x180>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fd8b 	bl	800181a <LL_USART_EnableIT_RXNE>
    return c;
 8001d04:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40011000 	.word	0x40011000
 8001d14:	40005000 	.word	0x40005000
 8001d18:	40004400 	.word	0x40004400
 8001d1c:	40004800 	.word	0x40004800
 8001d20:	20005688 	.word	0x20005688
 8001d24:	20005690 	.word	0x20005690
 8001d28:	20005698 	.word	0x20005698
 8001d2c:	200056a0 	.word	0x200056a0
 8001d30:	200056a8 	.word	0x200056a8
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	2000000c 	.word	0x2000000c
 8001d44:	20000010 	.word	0x20000010

08001d48 <Uart_write>:

void Uart_write(USART_TypeDef *uart, int c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  ring_buffer *_tx_buffer;
  switch ((uint32_t)uart) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a69      	ldr	r2, [pc, #420]	@ (8001efc <Uart_write+0x1b4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00f      	beq.n	8001d7a <Uart_write+0x32>
 8001d5a:	4a68      	ldr	r2, [pc, #416]	@ (8001efc <Uart_write+0x1b4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d81c      	bhi.n	8001d9a <Uart_write+0x52>
 8001d60:	4a67      	ldr	r2, [pc, #412]	@ (8001f00 <Uart_write+0x1b8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d015      	beq.n	8001d92 <Uart_write+0x4a>
 8001d66:	4a66      	ldr	r2, [pc, #408]	@ (8001f00 <Uart_write+0x1b8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d816      	bhi.n	8001d9a <Uart_write+0x52>
 8001d6c:	4a65      	ldr	r2, [pc, #404]	@ (8001f04 <Uart_write+0x1bc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <Uart_write+0x3a>
 8001d72:	4a65      	ldr	r2, [pc, #404]	@ (8001f08 <Uart_write+0x1c0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d008      	beq.n	8001d8a <Uart_write+0x42>
 8001d78:	e00f      	b.n	8001d9a <Uart_write+0x52>
    case (uint32_t)USART1:
      _tx_buffer = _tx_buffer1;
 8001d7a:	4b64      	ldr	r3, [pc, #400]	@ (8001f0c <Uart_write+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]
      break;
 8001d80:	e00f      	b.n	8001da2 <Uart_write+0x5a>
    case (uint32_t)USART2:
      _tx_buffer = _tx_buffer2;
 8001d82:	4b63      	ldr	r3, [pc, #396]	@ (8001f10 <Uart_write+0x1c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
      break;
 8001d88:	e00b      	b.n	8001da2 <Uart_write+0x5a>
    case (uint32_t)USART3:
      _tx_buffer = _tx_buffer3;
 8001d8a:	4b62      	ldr	r3, [pc, #392]	@ (8001f14 <Uart_write+0x1cc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]
      break;
 8001d90:	e007      	b.n	8001da2 <Uart_write+0x5a>
    case (uint32_t)UART5:
      _tx_buffer = _tx_buffer5;
 8001d92:	4b61      	ldr	r3, [pc, #388]	@ (8001f18 <Uart_write+0x1d0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60fb      	str	r3, [r7, #12]
      break;
 8001d98:	e003      	b.n	8001da2 <Uart_write+0x5a>
    default:
      _tx_buffer = _tx_buffer6;
 8001d9a:	4b60      	ldr	r3, [pc, #384]	@ (8001f1c <Uart_write+0x1d4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]
      break;
 8001da0:	bf00      	nop
  }

  if (c >= 0)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f2c0 80a5 	blt.w	8001ef4 <Uart_write+0x1ac>
  {
    int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001db0:	3301      	adds	r3, #1
 8001db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db6:	60bb      	str	r3, [r7, #8]

    ATOMIC_BLOCK_START(uart)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a50      	ldr	r2, [pc, #320]	@ (8001efc <Uart_write+0x1b4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d105      	bne.n	8001dcc <Uart_write+0x84>
 8001dc0:	4b57      	ldr	r3, [pc, #348]	@ (8001f20 <Uart_write+0x1d8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fd91 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001dca:	e022      	b.n	8001e12 <Uart_write+0xca>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4d      	ldr	r2, [pc, #308]	@ (8001f04 <Uart_write+0x1bc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d105      	bne.n	8001de0 <Uart_write+0x98>
 8001dd4:	4b53      	ldr	r3, [pc, #332]	@ (8001f24 <Uart_write+0x1dc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fd87 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001dde:	e018      	b.n	8001e12 <Uart_write+0xca>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a49      	ldr	r2, [pc, #292]	@ (8001f08 <Uart_write+0x1c0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d105      	bne.n	8001df4 <Uart_write+0xac>
 8001de8:	4b4f      	ldr	r3, [pc, #316]	@ (8001f28 <Uart_write+0x1e0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fd7d 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001df2:	e00e      	b.n	8001e12 <Uart_write+0xca>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a42      	ldr	r2, [pc, #264]	@ (8001f00 <Uart_write+0x1b8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d105      	bne.n	8001e08 <Uart_write+0xc0>
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8001f2c <Uart_write+0x1e4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fd73 	bl	80018ec <LL_USART_DisableIT_RXNE>
 8001e06:	e004      	b.n	8001e12 <Uart_write+0xca>
 8001e08:	4b49      	ldr	r3, [pc, #292]	@ (8001f30 <Uart_write+0x1e8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fd6d 	bl	80018ec <LL_USART_DisableIT_RXNE>
    while (i == _tx_buffer->tail);
 8001e12:	bf00      	nop
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d0f9      	beq.n	8001e14 <Uart_write+0xcc>

    _tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	b2d1      	uxtb	r1, r2
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	54d1      	strb	r1, [r2, r3]
    _tx_buffer->head = i;
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
    ATOMIC_BLOCK_END(uart)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a30      	ldr	r2, [pc, #192]	@ (8001efc <Uart_write+0x1b4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d105      	bne.n	8001e4a <Uart_write+0x102>
 8001e3e:	4b38      	ldr	r3, [pc, #224]	@ (8001f20 <Uart_write+0x1d8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fce9 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e48:	e022      	b.n	8001e90 <Uart_write+0x148>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f04 <Uart_write+0x1bc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d105      	bne.n	8001e5e <Uart_write+0x116>
 8001e52:	4b34      	ldr	r3, [pc, #208]	@ (8001f24 <Uart_write+0x1dc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fcdf 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e5c:	e018      	b.n	8001e90 <Uart_write+0x148>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a29      	ldr	r2, [pc, #164]	@ (8001f08 <Uart_write+0x1c0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d105      	bne.n	8001e72 <Uart_write+0x12a>
 8001e66:	4b30      	ldr	r3, [pc, #192]	@ (8001f28 <Uart_write+0x1e0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fcd5 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e70:	e00e      	b.n	8001e90 <Uart_write+0x148>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a22      	ldr	r2, [pc, #136]	@ (8001f00 <Uart_write+0x1b8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d105      	bne.n	8001e86 <Uart_write+0x13e>
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f2c <Uart_write+0x1e4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fccb 	bl	800181a <LL_USART_EnableIT_RXNE>
 8001e84:	e004      	b.n	8001e90 <Uart_write+0x148>
 8001e86:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <Uart_write+0x1e8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fcc5 	bl	800181a <LL_USART_EnableIT_RXNE>

    switch ((uint32_t)uart) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a1a      	ldr	r2, [pc, #104]	@ (8001efc <Uart_write+0x1b4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00f      	beq.n	8001eb8 <Uart_write+0x170>
 8001e98:	4a18      	ldr	r2, [pc, #96]	@ (8001efc <Uart_write+0x1b4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d824      	bhi.n	8001ee8 <Uart_write+0x1a0>
 8001e9e:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <Uart_write+0x1b8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d01b      	beq.n	8001edc <Uart_write+0x194>
 8001ea4:	4a16      	ldr	r2, [pc, #88]	@ (8001f00 <Uart_write+0x1b8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d81e      	bhi.n	8001ee8 <Uart_write+0x1a0>
 8001eaa:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <Uart_write+0x1bc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <Uart_write+0x17c>
 8001eb0:	4a15      	ldr	r2, [pc, #84]	@ (8001f08 <Uart_write+0x1c0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00c      	beq.n	8001ed0 <Uart_write+0x188>
 8001eb6:	e017      	b.n	8001ee8 <Uart_write+0x1a0>
      case (uint32_t)USART1:
        LL_USART_EnableIT_TXE(uart1);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <Uart_write+0x1d8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fccf 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ec2:	e017      	b.n	8001ef4 <Uart_write+0x1ac>
      case (uint32_t)USART2:
        LL_USART_EnableIT_TXE(uart2);
 8001ec4:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <Uart_write+0x1dc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fcc9 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ece:	e011      	b.n	8001ef4 <Uart_write+0x1ac>
      case (uint32_t)USART3:
        LL_USART_EnableIT_TXE(uart3);
 8001ed0:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <Uart_write+0x1e0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fcc3 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001eda:	e00b      	b.n	8001ef4 <Uart_write+0x1ac>
      case (uint32_t)UART5:
        LL_USART_EnableIT_TXE(uart5);
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <Uart_write+0x1e4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fcbd 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ee6:	e005      	b.n	8001ef4 <Uart_write+0x1ac>
      default:
        LL_USART_EnableIT_TXE(uart6);
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <Uart_write+0x1e8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fcb7 	bl	8001860 <LL_USART_EnableIT_TXE>
        break;
 8001ef2:	bf00      	nop
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40011000 	.word	0x40011000
 8001f00:	40005000 	.word	0x40005000
 8001f04:	40004400 	.word	0x40004400
 8001f08:	40004800 	.word	0x40004800
 8001f0c:	2000568c 	.word	0x2000568c
 8001f10:	20005694 	.word	0x20005694
 8001f14:	2000569c 	.word	0x2000569c
 8001f18:	200056a4 	.word	0x200056a4
 8001f1c:	200056ac 	.word	0x200056ac
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	2000000c 	.word	0x2000000c
 8001f30:	20000010 	.word	0x20000010

08001f34 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(USART_TypeDef *uart)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;
	  switch ((uint32_t)uart) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb8 <IsDataAvailable+0x84>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00f      	beq.n	8001f64 <IsDataAvailable+0x30>
 8001f44:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb8 <IsDataAvailable+0x84>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d81c      	bhi.n	8001f84 <IsDataAvailable+0x50>
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fbc <IsDataAvailable+0x88>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d015      	beq.n	8001f7c <IsDataAvailable+0x48>
 8001f50:	4a1a      	ldr	r2, [pc, #104]	@ (8001fbc <IsDataAvailable+0x88>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d816      	bhi.n	8001f84 <IsDataAvailable+0x50>
 8001f56:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc0 <IsDataAvailable+0x8c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d007      	beq.n	8001f6c <IsDataAvailable+0x38>
 8001f5c:	4a19      	ldr	r2, [pc, #100]	@ (8001fc4 <IsDataAvailable+0x90>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d008      	beq.n	8001f74 <IsDataAvailable+0x40>
 8001f62:	e00f      	b.n	8001f84 <IsDataAvailable+0x50>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 8001f64:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <IsDataAvailable+0x94>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
	      break;
 8001f6a:	e00f      	b.n	8001f8c <IsDataAvailable+0x58>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <IsDataAvailable+0x98>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
	      break;
 8001f72:	e00b      	b.n	8001f8c <IsDataAvailable+0x58>
	    case (uint32_t)USART3:
	      _rx_buffer = _rx_buffer3;
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <IsDataAvailable+0x9c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
	      break;
 8001f7a:	e007      	b.n	8001f8c <IsDataAvailable+0x58>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8001f7c:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <IsDataAvailable+0xa0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
	      break;
 8001f82:	e003      	b.n	8001f8c <IsDataAvailable+0x58>
	    default:
	      _rx_buffer = _rx_buffer6;
 8001f84:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <IsDataAvailable+0xa4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
	      break;
 8001f8a:	bf00      	nop
	  }

  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40011000 	.word	0x40011000
 8001fbc:	40005000 	.word	0x40005000
 8001fc0:	40004400 	.word	0x40004400
 8001fc4:	40004800 	.word	0x40004800
 8001fc8:	20005688 	.word	0x20005688
 8001fcc:	20005690 	.word	0x20005690
 8001fd0:	20005698 	.word	0x20005698
 8001fd4:	200056a0 	.word	0x200056a0
 8001fd8:	200056a8 	.word	0x200056a8

08001fdc <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (USART_TypeDef *uart, const char *s)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	while(*s) Uart_write(uart, *s++);
 8001fe6:	e007      	b.n	8001ff8 <Uart_sendstring+0x1c>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	603a      	str	r2, [r7, #0]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fea8 	bl	8001d48 <Uart_write>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f3      	bne.n	8001fe8 <Uart_sendstring+0xc>
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <Uart_flush>:


}

void Uart_flush (USART_TypeDef *uart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	  ring_buffer *_rx_buffer;

	  switch ((uint32_t)uart) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a1d      	ldr	r2, [pc, #116]	@ (800208c <Uart_flush+0x80>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00f      	beq.n	800203c <Uart_flush+0x30>
 800201c:	4a1b      	ldr	r2, [pc, #108]	@ (800208c <Uart_flush+0x80>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d81c      	bhi.n	800205c <Uart_flush+0x50>
 8002022:	4a1b      	ldr	r2, [pc, #108]	@ (8002090 <Uart_flush+0x84>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d015      	beq.n	8002054 <Uart_flush+0x48>
 8002028:	4a19      	ldr	r2, [pc, #100]	@ (8002090 <Uart_flush+0x84>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d816      	bhi.n	800205c <Uart_flush+0x50>
 800202e:	4a19      	ldr	r2, [pc, #100]	@ (8002094 <Uart_flush+0x88>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <Uart_flush+0x38>
 8002034:	4a18      	ldr	r2, [pc, #96]	@ (8002098 <Uart_flush+0x8c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d008      	beq.n	800204c <Uart_flush+0x40>
 800203a:	e00f      	b.n	800205c <Uart_flush+0x50>
	    case (uint32_t)USART1:
	      _rx_buffer = _rx_buffer1;
 800203c:	4b17      	ldr	r3, [pc, #92]	@ (800209c <Uart_flush+0x90>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
	      break;
 8002042:	e00f      	b.n	8002064 <Uart_flush+0x58>
	    case (uint32_t)USART2:
	      _rx_buffer = _rx_buffer2;
 8002044:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <Uart_flush+0x94>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
	      break;
 800204a:	e00b      	b.n	8002064 <Uart_flush+0x58>
	    case (uint32_t)USART3:
	      _rx_buffer = _rx_buffer3;
 800204c:	4b15      	ldr	r3, [pc, #84]	@ (80020a4 <Uart_flush+0x98>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
	      break;
 8002052:	e007      	b.n	8002064 <Uart_flush+0x58>
	    case (uint32_t)UART5:
	      _rx_buffer = _rx_buffer5;
 8002054:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <Uart_flush+0x9c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
	      break;
 800205a:	e003      	b.n	8002064 <Uart_flush+0x58>
	    default:
	      _rx_buffer = _rx_buffer6;
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <Uart_flush+0xa0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
	      break;
 8002062:	bf00      	nop
	  }

	  memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f00d fe04 	bl	800fc7a <memset>
	  _rx_buffer->head = 0;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	  _rx_buffer->tail = 0;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40011000 	.word	0x40011000
 8002090:	40005000 	.word	0x40005000
 8002094:	40004400 	.word	0x40004400
 8002098:	40004800 	.word	0x40004800
 800209c:	20005688 	.word	0x20005688
 80020a0:	20005690 	.word	0x20005690
 80020a4:	20005698 	.word	0x20005698
 80020a8:	200056a0 	.word	0x200056a0
 80020ac:	200056a8 	.word	0x200056a8

080020b0 <Uart_isr>:
	if (so_far == len) return 1;
	else return 0;
}

void Uart_isr (USART_TypeDef *uart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  //  uint32_t isrflags   = LL_USART_ReadReg(uart, SR);
    ring_buffer *_rx_buffer;
    ring_buffer *_tx_buffer;

    switch ((uint32_t)uart) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a4c      	ldr	r2, [pc, #304]	@ (80021ec <Uart_isr+0x13c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00f      	beq.n	80020e0 <Uart_isr+0x30>
 80020c0:	4a4a      	ldr	r2, [pc, #296]	@ (80021ec <Uart_isr+0x13c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d828      	bhi.n	8002118 <Uart_isr+0x68>
 80020c6:	4a4a      	ldr	r2, [pc, #296]	@ (80021f0 <Uart_isr+0x140>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d01e      	beq.n	800210a <Uart_isr+0x5a>
 80020cc:	4a48      	ldr	r2, [pc, #288]	@ (80021f0 <Uart_isr+0x140>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d822      	bhi.n	8002118 <Uart_isr+0x68>
 80020d2:	4a48      	ldr	r2, [pc, #288]	@ (80021f4 <Uart_isr+0x144>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00a      	beq.n	80020ee <Uart_isr+0x3e>
 80020d8:	4a47      	ldr	r2, [pc, #284]	@ (80021f8 <Uart_isr+0x148>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <Uart_isr+0x4c>
 80020de:	e01b      	b.n	8002118 <Uart_isr+0x68>
      case (uint32_t)USART1:
        _rx_buffer = _rx_buffer1;
 80020e0:	4b46      	ldr	r3, [pc, #280]	@ (80021fc <Uart_isr+0x14c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer1;
 80020e6:	4b46      	ldr	r3, [pc, #280]	@ (8002200 <Uart_isr+0x150>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	613b      	str	r3, [r7, #16]
        break;
 80020ec:	e01b      	b.n	8002126 <Uart_isr+0x76>
      case (uint32_t)USART2:
        _rx_buffer = _rx_buffer2;
 80020ee:	4b45      	ldr	r3, [pc, #276]	@ (8002204 <Uart_isr+0x154>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer2;
 80020f4:	4b44      	ldr	r3, [pc, #272]	@ (8002208 <Uart_isr+0x158>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	613b      	str	r3, [r7, #16]
        break;
 80020fa:	e014      	b.n	8002126 <Uart_isr+0x76>
      case (uint32_t)USART3:
        _rx_buffer = _rx_buffer3;
 80020fc:	4b43      	ldr	r3, [pc, #268]	@ (800220c <Uart_isr+0x15c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer3;
 8002102:	4b43      	ldr	r3, [pc, #268]	@ (8002210 <Uart_isr+0x160>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	613b      	str	r3, [r7, #16]
        break;
 8002108:	e00d      	b.n	8002126 <Uart_isr+0x76>
      case (uint32_t)UART5:
        _rx_buffer = _rx_buffer5;
 800210a:	4b42      	ldr	r3, [pc, #264]	@ (8002214 <Uart_isr+0x164>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer5;
 8002110:	4b41      	ldr	r3, [pc, #260]	@ (8002218 <Uart_isr+0x168>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	613b      	str	r3, [r7, #16]
        break;
 8002116:	e006      	b.n	8002126 <Uart_isr+0x76>
      default:
        _rx_buffer = _rx_buffer6;
 8002118:	4b40      	ldr	r3, [pc, #256]	@ (800221c <Uart_isr+0x16c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	617b      	str	r3, [r7, #20]
        _tx_buffer = _tx_buffer6;
 800211e:	4b40      	ldr	r3, [pc, #256]	@ (8002220 <Uart_isr+0x170>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	613b      	str	r3, [r7, #16]
        break;
 8002124:	bf00      	nop
    }

    /* if DR is not empty and the Rx Int is enabled */
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) && (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fb1b 	bl	8001762 <LL_USART_IsActiveFlag_RXNE>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d02c      	beq.n	800218c <Uart_isr+0xdc>
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fc20 	bl	8001978 <LL_USART_IsEnabledIT_RXNE>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d026      	beq.n	800218c <Uart_isr+0xdc>
//        LL_USART_ReceiveData8(uart);                /* Read status register */
//        unsigned char c = LL_USART_ReceiveData8(uart);    /* Read data register */
//        store_char (c, _rx_buffer);  // store data in buffer
//        return;

        unsigned char data = LL_USART_ReceiveData8(uart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fc40 	bl	80019c4 <LL_USART_ReceiveData8>
 8002144:	4603      	mov	r3, r0
 8002146:	73fb      	strb	r3, [r7, #15]
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff faf7 	bl	800173c <LL_USART_IsActiveFlag_ORE>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10b      	bne.n	800216c <Uart_isr+0xbc>
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff facb 	bl	80016f0 <LL_USART_IsActiveFlag_FE>
 800215a:	4603      	mov	r3, r0
        if ((LL_USART_IsActiveFlag_ORE(uart) != RESET) ||
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <Uart_isr+0xbc>
            (LL_USART_IsActiveFlag_NE(uart) != RESET))
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fad8 	bl	8001716 <LL_USART_IsActiveFlag_NE>
 8002166:	4603      	mov	r3, r0
            (LL_USART_IsActiveFlag_FE(uart) != RESET) ||
 8002168:	2b00      	cmp	r3, #0
 800216a:	d009      	beq.n	8002180 <Uart_isr+0xd0>
        {
          // if error, del flag
          LL_USART_ClearFlag_ORE(uart);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fb42 	bl	80017f6 <LL_USART_ClearFlag_ORE>
          LL_USART_ClearFlag_FE(uart);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fb1b 	bl	80017ae <LL_USART_ClearFlag_FE>
          LL_USART_ClearFlag_NE(uart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fb2a 	bl	80017d2 <LL_USART_ClearFlag_NE>
        }
        else
        {
          store_char(data, _rx_buffer); // store data in buffer
        }
        return;
 800217e:	e032      	b.n	80021e6 <Uart_isr+0x136>
          store_char(data, _rx_buffer); // store data in buffer
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	6979      	ldr	r1, [r7, #20]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fcbf 	bl	8001b08 <store_char>
        return;
 800218a:	e02c      	b.n	80021e6 <Uart_isr+0x136>


    }
    /*If interrupt is caused due to Transmit Data Register Empty */
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) && (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fafb 	bl	8001788 <LL_USART_IsActiveFlag_TXE>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d026      	beq.n	80021e6 <Uart_isr+0x136>
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff fc00 	bl	800199e <LL_USART_IsEnabledIT_TXE>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <Uart_isr+0x136>
    {
        if(_tx_buffer->head == _tx_buffer->tail)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d103      	bne.n	80021bc <Uart_isr+0x10c>
        {
          // Buffer empty, so disable interrupts
          LL_USART_DisableIT_TXE(uart);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fbbc 	bl	8001932 <LL_USART_DisableIT_TXE>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;

          LL_USART_TransmitData8(uart, c);
        }
        return;
 80021ba:	e013      	b.n	80021e4 <Uart_isr+0x134>
          unsigned char c = _tx_buffer->buffer[_tx_buffer->tail];
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	73bb      	strb	r3, [r7, #14]
          _tx_buffer->tail = (_tx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
          LL_USART_TransmitData8(uart, c);
 80021da:	7bbb      	ldrb	r3, [r7, #14]
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fbfd 	bl	80019de <LL_USART_TransmitData8>
        return;
 80021e4:	bf00      	nop
    }
}
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40011000 	.word	0x40011000
 80021f0:	40005000 	.word	0x40005000
 80021f4:	40004400 	.word	0x40004400
 80021f8:	40004800 	.word	0x40004800
 80021fc:	20005688 	.word	0x20005688
 8002200:	2000568c 	.word	0x2000568c
 8002204:	20005690 	.word	0x20005690
 8002208:	20005694 	.word	0x20005694
 800220c:	20005698 	.word	0x20005698
 8002210:	2000569c 	.word	0x2000569c
 8002214:	200056a0 	.word	0x200056a0
 8002218:	200056a4 	.word	0x200056a4
 800221c:	200056a8 	.word	0x200056a8
 8002220:	200056ac 	.word	0x200056ac

08002224 <send_packet_init>:
		status_ACKsend_update					// taskFunction;
	}
};

void send_packet_init(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <send_packet_init+0x1c>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
    retryCount = 0;
 800222e:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <send_packet_init+0x20>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	200057b1 	.word	0x200057b1
 8002244:	200057b2 	.word	0x200057b2

08002248 <set_send_flag>:

void set_send_flag(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
    sendFlag = 1;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <set_send_flag+0x14>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	200057b1 	.word	0x200057b1

08002260 <clear_send_flag>:

void clear_send_flag(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
    sendFlag = 0;
 8002264:	4b03      	ldr	r3, [pc, #12]	@ (8002274 <clear_send_flag+0x14>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	200057b1 	.word	0x200057b1

08002278 <set_fsp_packet>:


void set_fsp_packet(uint8_t *encoded_pkt, uint8_t encoded_len)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
	while (g_pkt_lock);
 8002284:	bf00      	nop
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <set_fsp_packet+0x58>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1fa      	bne.n	8002286 <set_fsp_packet+0xe>
	g_pkt_lock = 1;
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <set_fsp_packet+0x58>)
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
	memset((void *)g_encoded_pkt, 0, sizeof(g_encoded_pkt));
 8002296:	22ff      	movs	r2, #255	@ 0xff
 8002298:	2100      	movs	r1, #0
 800229a:	480e      	ldr	r0, [pc, #56]	@ (80022d4 <set_fsp_packet+0x5c>)
 800229c:	f00d fced 	bl	800fc7a <memset>
    memcpy((void *)g_encoded_pkt, encoded_pkt, encoded_len);
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	461a      	mov	r2, r3
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	480b      	ldr	r0, [pc, #44]	@ (80022d4 <set_fsp_packet+0x5c>)
 80022a8:	f00d fd67 	bl	800fd7a <memcpy>
    g_encoded_len = encoded_len;
 80022ac:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <set_fsp_packet+0x60>)
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	7013      	strb	r3, [r2, #0]
    g_pkt_lock = 0;
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <set_fsp_packet+0x58>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
    sendFlag = 1;
 80022b8:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <set_fsp_packet+0x64>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
    SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);
 80022be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022c2:	2003      	movs	r0, #3
 80022c4:	f009 fafa 	bl	800b8bc <SCH_TIM_Start>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200057b0 	.word	0x200057b0
 80022d4:	200056b0 	.word	0x200056b0
 80022d8:	200057af 	.word	0x200057af
 80022dc:	200057b1 	.word	0x200057b1

080022e0 <send_packet_create_task>:

void send_packet_create_task(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&ACKsend_task_context.taskHandle, &ACKsend_task_context.taskProperty);
 80022e4:	4902      	ldr	r1, [pc, #8]	@ (80022f0 <send_packet_create_task+0x10>)
 80022e6:	4803      	ldr	r0, [pc, #12]	@ (80022f4 <send_packet_create_task+0x14>)
 80022e8:	f009 fb14 	bl	800b914 <SCH_TASK_CreateTask>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000018 	.word	0x20000018
 80022f4:	20000014 	.word	0x20000014

080022f8 <status_ACKsend_update>:


uint8_t sendBuffer[FSP_PKT_MAX_LENGTH];

void	status_ACKsend_update(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0

			if (SCH_TIM_HasCompleted(SCH_TIM_ACK))
 80022fe:	2003      	movs	r0, #3
 8002300:	f009 faf2 	bl	800b8e8 <SCH_TIM_HasCompleted>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d061      	beq.n	80023ce <status_ACKsend_update+0xd6>
			{

			    if (sendFlag)
 800230a:	4b33      	ldr	r3, [pc, #204]	@ (80023d8 <status_ACKsend_update+0xe0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d057      	beq.n	80023c4 <status_ACKsend_update+0xcc>
			    {
			    	if(retryCount < MAX_RETRIES){
 8002314:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <status_ACKsend_update+0xe4>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d833      	bhi.n	8002386 <status_ACKsend_update+0x8e>
			    		while (g_pkt_lock);
 800231e:	bf00      	nop
 8002320:	4b2f      	ldr	r3, [pc, #188]	@ (80023e0 <status_ACKsend_update+0xe8>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1fa      	bne.n	8002320 <status_ACKsend_update+0x28>
			    		g_pkt_lock = 1;
 800232a:	4b2d      	ldr	r3, [pc, #180]	@ (80023e0 <status_ACKsend_update+0xe8>)
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
			            memcpy(sendBuffer, (const void *)g_encoded_pkt, g_encoded_len);
 8002330:	4b2c      	ldr	r3, [pc, #176]	@ (80023e4 <status_ACKsend_update+0xec>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	492b      	ldr	r1, [pc, #172]	@ (80023e8 <status_ACKsend_update+0xf0>)
 800233a:	482c      	ldr	r0, [pc, #176]	@ (80023ec <status_ACKsend_update+0xf4>)
 800233c:	f00d fd1d 	bl	800fd7a <memcpy>
			            for (int i = 0; i < g_encoded_len; i++) {
 8002340:	2300      	movs	r3, #0
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	e00a      	b.n	800235c <status_ACKsend_update+0x64>
			                Uart_write(USART1, sendBuffer[i]);
 8002346:	4a29      	ldr	r2, [pc, #164]	@ (80023ec <status_ACKsend_update+0xf4>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	4827      	ldr	r0, [pc, #156]	@ (80023f0 <status_ACKsend_update+0xf8>)
 8002352:	f7ff fcf9 	bl	8001d48 <Uart_write>
			            for (int i = 0; i < g_encoded_len; i++) {
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3301      	adds	r3, #1
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	4b21      	ldr	r3, [pc, #132]	@ (80023e4 <status_ACKsend_update+0xec>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4293      	cmp	r3, r2
 8002368:	dbed      	blt.n	8002346 <status_ACKsend_update+0x4e>
			            }
						retryCount++;
 800236a:	4b1c      	ldr	r3, [pc, #112]	@ (80023dc <status_ACKsend_update+0xe4>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <status_ACKsend_update+0xe4>)
 8002376:	701a      	strb	r2, [r3, #0]
						sendFlag = 1;
 8002378:	4b17      	ldr	r3, [pc, #92]	@ (80023d8 <status_ACKsend_update+0xe0>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
						g_pkt_lock = 0;
 800237e:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <status_ACKsend_update+0xe8>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e01e      	b.n	80023c4 <status_ACKsend_update+0xcc>
			    	}
			    	else {
			    		retryCount = 0;
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <status_ACKsend_update+0xe4>)
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
			    		clear_send_flag();
 800238c:	f7ff ff68 	bl	8002260 <clear_send_flag>

			    		Uart_sendstring(UART5, "\nTIMEOUT_NORESPONE");
 8002390:	4918      	ldr	r1, [pc, #96]	@ (80023f4 <status_ACKsend_update+0xfc>)
 8002392:	4819      	ldr	r0, [pc, #100]	@ (80023f8 <status_ACKsend_update+0x100>)
 8002394:	f7ff fe22 	bl	8001fdc <Uart_sendstring>
			    		Uart_sendstring(UART5, "\r\n> ");
 8002398:	4918      	ldr	r1, [pc, #96]	@ (80023fc <status_ACKsend_update+0x104>)
 800239a:	4817      	ldr	r0, [pc, #92]	@ (80023f8 <status_ACKsend_update+0x100>)
 800239c:	f7ff fe1e 	bl	8001fdc <Uart_sendstring>
			    		Uart_sendstring(USART6, "\nTIMEOUT_NORESPONE");
 80023a0:	4914      	ldr	r1, [pc, #80]	@ (80023f4 <status_ACKsend_update+0xfc>)
 80023a2:	4817      	ldr	r0, [pc, #92]	@ (8002400 <status_ACKsend_update+0x108>)
 80023a4:	f7ff fe1a 	bl	8001fdc <Uart_sendstring>
			    		Uart_sendstring(USART6, "\r\n> ");
 80023a8:	4914      	ldr	r1, [pc, #80]	@ (80023fc <status_ACKsend_update+0x104>)
 80023aa:	4815      	ldr	r0, [pc, #84]	@ (8002400 <status_ACKsend_update+0x108>)
 80023ac:	f7ff fe16 	bl	8001fdc <Uart_sendstring>
			    		Uart_sendstring(USART2, "\nTIMEOUT_NORESPONE");
 80023b0:	4910      	ldr	r1, [pc, #64]	@ (80023f4 <status_ACKsend_update+0xfc>)
 80023b2:	4814      	ldr	r0, [pc, #80]	@ (8002404 <status_ACKsend_update+0x10c>)
 80023b4:	f7ff fe12 	bl	8001fdc <Uart_sendstring>
			    		Uart_sendstring(USART2, "\r\n> ");
 80023b8:	4910      	ldr	r1, [pc, #64]	@ (80023fc <status_ACKsend_update+0x104>)
 80023ba:	4812      	ldr	r0, [pc, #72]	@ (8002404 <status_ACKsend_update+0x10c>)
 80023bc:	f7ff fe0e 	bl	8001fdc <Uart_sendstring>
			    		clear_send_flag();
 80023c0:	f7ff ff4e 	bl	8002260 <clear_send_flag>
			        }


			    }

				SCH_TIM_Start(SCH_TIM_ACK, ACK_TIMEOUT);	//restart
 80023c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023c8:	2003      	movs	r0, #3
 80023ca:	f009 fa77 	bl	800b8bc <SCH_TIM_Start>

			}


		//	[set trang thai]
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200057b1 	.word	0x200057b1
 80023dc:	200057b2 	.word	0x200057b2
 80023e0:	200057b0 	.word	0x200057b0
 80023e4:	200057af 	.word	0x200057af
 80023e8:	200056b0 	.word	0x200056b0
 80023ec:	200057b4 	.word	0x200057b4
 80023f0:	40011000 	.word	0x40011000
 80023f4:	08013350 	.word	0x08013350
 80023f8:	40005000 	.word	0x40005000
 80023fc:	08013364 	.word	0x08013364
 8002400:	40011400 	.word	0x40011400
 8002404:	40004400 	.word	0x40004400

08002408 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	619a      	str	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <IOU_create_task>:
};



void IOU_create_task(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&IOU_task_context.taskHandle, &IOU_task_context.taskProperty);
 8002428:	4906      	ldr	r1, [pc, #24]	@ (8002444 <IOU_create_task+0x20>)
 800242a:	4807      	ldr	r0, [pc, #28]	@ (8002448 <IOU_create_task+0x24>)
 800242c:	f009 fa72 	bl	800b914 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 8002430:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002434:	2007      	movs	r0, #7
 8002436:	f009 fa41 	bl	800b8bc <SCH_TIM_Start>
    Ringbuf_init();
 800243a:	f7ff fadf 	bl	80019fc <Ringbuf_init>
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000034 	.word	0x20000034
 8002448:	20000030 	.word	0x20000030

0800244c <IOU_update_task>:
volatile uint8_t send_rs422 = 0;

volatile uint8_t timeout_counter_iou = 0;


void IOU_update_task(void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 8002452:	4b41      	ldr	r3, [pc, #260]	@ (8002558 <IOU_update_task+0x10c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d079      	beq.n	8002550 <IOU_update_task+0x104>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_IOU))
 800245c:	2007      	movs	r0, #7
 800245e:	f009 fa43 	bl	800b8e8 <SCH_TIM_HasCompleted>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d073      	beq.n	8002550 <IOU_update_task+0x104>
		{

			if(!sendFlag){
 8002468:	4b3c      	ldr	r3, [pc, #240]	@ (800255c <IOU_update_task+0x110>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d16e      	bne.n	8002550 <IOU_update_task+0x104>
				if(!send_rs422){
 8002472:	4b3b      	ldr	r3, [pc, #236]	@ (8002560 <IOU_update_task+0x114>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d130      	bne.n	80024de <IOU_update_task+0x92>
					if(receive_pduFlag&&receive_pmuFlag){
 800247c:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <IOU_update_task+0x118>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02b      	beq.n	80024de <IOU_update_task+0x92>
 8002486:	4b38      	ldr	r3, [pc, #224]	@ (8002568 <IOU_update_task+0x11c>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d026      	beq.n	80024de <IOU_update_task+0x92>
						switch_board(3);
 8002490:	2003      	movs	r0, #3
 8002492:	f005 fb63 	bl	8007b5c <switch_board>
						Uart_flush(USART1);
 8002496:	4835      	ldr	r0, [pc, #212]	@ (800256c <IOU_update_task+0x120>)
 8002498:	f7ff fdb8 	bl	800200c <Uart_flush>

						frame = iou_frame;
 800249c:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <IOU_update_task+0x124>)
 800249e:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(iou_frame);
 80024a0:	2309      	movs	r3, #9
 80024a2:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e00a      	b.n	80024c0 <IOU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	482d      	ldr	r0, [pc, #180]	@ (800256c <IOU_update_task+0x120>)
 80024b6:	f7ff fc47 	bl	8001d48 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	dbf0      	blt.n	80024aa <IOU_update_task+0x5e>
						}
						receive_iouFlag = 0;
 80024c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002574 <IOU_update_task+0x128>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80024ce:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <IOU_update_task+0x114>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_IOU, IOU_PERIOD);
 80024d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024d8:	2007      	movs	r0, #7
 80024da:	f009 f9ef 	bl	800b8bc <SCH_TIM_Start>
					}
				}
				if(!receive_iouFlag){
 80024de:	4b25      	ldr	r3, [pc, #148]	@ (8002574 <IOU_update_task+0x128>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d133      	bne.n	8002550 <IOU_update_task+0x104>
					timeout_counter_iou++;
 80024e8:	4b23      	ldr	r3, [pc, #140]	@ (8002578 <IOU_update_task+0x12c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <IOU_update_task+0x12c>)
 80024f4:	701a      	strb	r2, [r3, #0]
					if (timeout_counter_iou > 2){
 80024f6:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <IOU_update_task+0x12c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d927      	bls.n	8002550 <IOU_update_task+0x104>
						disconnect_counter_iou++;
 8002500:	4b1e      	ldr	r3, [pc, #120]	@ (800257c <IOU_update_task+0x130>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	3301      	adds	r3, #1
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <IOU_update_task+0x130>)
 800250c:	701a      	strb	r2, [r3, #0]
						timeout_counter_iou = 0;
 800250e:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <IOU_update_task+0x12c>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
						receive_iouFlag = 1;
 8002514:	4b17      	ldr	r3, [pc, #92]	@ (8002574 <IOU_update_task+0x128>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
						send_rs422 = 0;
 800251a:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <IOU_update_task+0x114>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
						if(disconnect_counter_iou> 4){
 8002520:	4b16      	ldr	r3, [pc, #88]	@ (800257c <IOU_update_task+0x130>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b04      	cmp	r3, #4
 8002528:	d912      	bls.n	8002550 <IOU_update_task+0x104>
							disconnect_counter_iou = 5;
 800252a:	4b14      	ldr	r3, [pc, #80]	@ (800257c <IOU_update_task+0x130>)
 800252c:	2205      	movs	r2, #5
 800252e:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 35; i++) {
 8002530:	2301      	movs	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	e009      	b.n	800254a <IOU_update_task+0xfe>
								nextBuffer[i + 7] = 0xFF; //42   =  35  + 7      8 -> pay 1   9 -> pay2    43 -< pay35
 8002536:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <IOU_update_task+0x134>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3307      	adds	r3, #7
 800253e:	4413      	add	r3, r2
 8002540:	22ff      	movs	r2, #255	@ 0xff
 8002542:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 35; i++) {
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3301      	adds	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b23      	cmp	r3, #35	@ 0x23
 800254e:	ddf2      	ble.n	8002536 <IOU_update_task+0xea>
					}
				}
			}
		}
	}
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	200059e1 	.word	0x200059e1
 800255c:	200057b1 	.word	0x200057b1
 8002560:	200058b6 	.word	0x200058b6
 8002564:	20000040 	.word	0x20000040
 8002568:	20000041 	.word	0x20000041
 800256c:	40011000 	.word	0x40011000
 8002570:	20000024 	.word	0x20000024
 8002574:	20000042 	.word	0x20000042
 8002578:	200058b7 	.word	0x200058b7
 800257c:	200058b3 	.word	0x200058b3
 8002580:	200003ec 	.word	0x200003ec

08002584 <Cmd_iou_set_temp>:

volatile uint8_t uart_choose_uart5 = 0;
volatile uint8_t uart_choose_usart2 = 0;

int Cmd_iou_set_temp(int argc, char *argv[])
{
 8002584:	b580      	push	{r7, lr}
 8002586:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800258a:	af02      	add	r7, sp, #8
 800258c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002590:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002594:	6018      	str	r0, [r3, #0]
 8002596:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800259a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800259e:	6019      	str	r1, [r3, #0]


    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80025a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025a4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	dc01      	bgt.n	80025b2 <Cmd_iou_set_temp+0x2e>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0e4      	b.n	800277c <Cmd_iou_set_temp+0x1f8>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80025b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025b6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	dd01      	ble.n	80025c4 <Cmd_iou_set_temp+0x40>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0db      	b.n	800277c <Cmd_iou_set_temp+0x1f8>

    uint8_t channel = atoi(argv[1]);
 80025c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025c8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3304      	adds	r3, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00c fb36 	bl	800ec44 <atoi>
 80025d8:	4603      	mov	r3, r0
 80025da:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 80025de:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d901      	bls.n	80025ea <Cmd_iou_set_temp+0x66>
 80025e6:	2304      	movs	r3, #4
 80025e8:	e0c8      	b.n	800277c <Cmd_iou_set_temp+0x1f8>

    uint16_t temp = atoi(argv[2]);
 80025ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80025ee:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3308      	adds	r3, #8
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00c fb23 	bl	800ec44 <atoi>
 80025fe:	4603      	mov	r3, r0
 8002600:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (temp > 500)    return CMDLINE_INVALID_ARG;
 8002604:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8002608:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800260c:	d901      	bls.n	8002612 <Cmd_iou_set_temp+0x8e>
 800260e:	2304      	movs	r3, #4
 8002610:	e0b4      	b.n	800277c <Cmd_iou_set_temp+0x1f8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002612:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002616:	485c      	ldr	r0, [pc, #368]	@ (8002788 <Cmd_iou_set_temp+0x204>)
 8002618:	f7ff fef6 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800261c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002620:	4859      	ldr	r0, [pc, #356]	@ (8002788 <Cmd_iou_set_temp+0x204>)
 8002622:	f7ff fef1 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002626:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800262a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002634:	3b01      	subs	r3, #1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800263c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	4413      	add	r3, r2
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800264a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800264e:	4a4f      	ldr	r2, [pc, #316]	@ (800278c <Cmd_iou_set_temp+0x208>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d103      	bne.n	800265c <Cmd_iou_set_temp+0xd8>
    	uart_choose_uart5 = 1;
 8002654:	4b4e      	ldr	r3, [pc, #312]	@ (8002790 <Cmd_iou_set_temp+0x20c>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e002      	b.n	8002662 <Cmd_iou_set_temp+0xde>
    }else{
    	uart_choose_uart5 = 0;
 800265c:	4b4c      	ldr	r3, [pc, #304]	@ (8002790 <Cmd_iou_set_temp+0x20c>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002662:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002666:	4a4b      	ldr	r2, [pc, #300]	@ (8002794 <Cmd_iou_set_temp+0x210>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d103      	bne.n	8002674 <Cmd_iou_set_temp+0xf0>
    	uart_choose_usart2 = 1;
 800266c:	4b4a      	ldr	r3, [pc, #296]	@ (8002798 <Cmd_iou_set_temp+0x214>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e002      	b.n	800267a <Cmd_iou_set_temp+0xf6>
    }else{
    	uart_choose_usart2 = 0;
 8002674:	4b48      	ldr	r3, [pc, #288]	@ (8002798 <Cmd_iou_set_temp+0x214>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
    }

    // Create the command payload
    uint8_t cmd  = CMD_CODE_SET_TEMP;
 800267a:	2301      	movs	r3, #1
 800267c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0]  = channel;
 8002680:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002684:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(temp >> 8);   //high
 8002688:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	b29b      	uxth	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(temp & 0xFF); //low
 8002696:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
    fsp_packet_t  fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80026a0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80026a4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80026a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2301      	movs	r3, #1
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2305      	movs	r3, #5
 80026b4:	2203      	movs	r2, #3
 80026b6:	f009 fad9 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80026ba:	f107 020f 	add.w	r2, r7, #15
 80026be:	f107 0110 	add.w	r1, r7, #16
 80026c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026c6:	4618      	mov	r0, r3
 80026c8:	f009 fb56 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 80026cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026d0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d02c      	beq.n	8002734 <Cmd_iou_set_temp+0x1b0>
        for (int i = 0; i < frame_len; i++) {
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80026e0:	e010      	b.n	8002704 <Cmd_iou_set_temp+0x180>
            Uart_write(USART1, encoded_frame[i]);
 80026e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80026e6:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80026ea:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4829      	ldr	r0, [pc, #164]	@ (800279c <Cmd_iou_set_temp+0x218>)
 80026f6:	f7ff fb27 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80026fa:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80026fe:	3301      	adds	r3, #1
 8002700:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002704:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002708:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002714:	4293      	cmp	r3, r2
 8002716:	dbe4      	blt.n	80026e2 <Cmd_iou_set_temp+0x15e>

        }
        set_fsp_packet(encoded_frame, frame_len);
 8002718:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800271c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fda5 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 800272e:	f7ff fd8b 	bl	8002248 <set_send_flag>
 8002732:	e022      	b.n	800277a <Cmd_iou_set_temp+0x1f6>
    }else{
    	fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002734:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002738:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800273c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	2301      	movs	r3, #1
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2305      	movs	r3, #5
 8002748:	2203      	movs	r2, #3
 800274a:	f009 fa8f 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
    	frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800274e:	f107 020f 	add.w	r2, r7, #15
 8002752:	f107 0110 	add.w	r1, r7, #16
 8002756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800275a:	4618      	mov	r0, r3
 800275c:	f009 fb0c 	bl	800bd78 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8002760:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002764:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fd81 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8002776:	f7ff fd67 	bl	8002248 <set_send_flag>
//  ==>>>> khi gui thi mo cong ra, + delay vai ms -> Set co`
//	==>>>> Neu vay thi luon luon mo cong, khi mà nhắn bên 1 2 3 4, nhắn bên 1 thì mở luôn bên 1
//	==>>>> Nhắn bên 2 thì mở luôn bên 2 nếu mà chưa nhận được ack -> busy please wait (processing...)
//  ==>>>> Đoạn đấy bỏ vào trong timeout -> Sau đó mới hiện ok, hoặc done gì đó

    return CMDLINE_PENDING;
 800277a:	2305      	movs	r3, #5
}
 800277c:	4618      	mov	r0, r3
 800277e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40020000 	.word	0x40020000
 800278c:	40005000 	.word	0x40005000
 8002790:	200058b8 	.word	0x200058b8
 8002794:	40004400 	.word	0x40004400
 8002798:	200058b9 	.word	0x200058b9
 800279c:	40011000 	.word	0x40011000

080027a0 <Cmd_iou_get_temp>:


int Cmd_iou_get_temp(int argc, char *argv[])
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80027a6:	af02      	add	r7, sp, #8
 80027a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027ac:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80027b0:	6018      	str	r0, [r3, #0]
 80027b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027b6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80027ba:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80027bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027c0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	dc01      	bgt.n	80027ce <Cmd_iou_get_temp+0x2e>
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0db      	b.n	8002986 <Cmd_iou_get_temp+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80027ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027d2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	dd01      	ble.n	80027e0 <Cmd_iou_get_temp+0x40>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0d2      	b.n	8002986 <Cmd_iou_get_temp+0x1e6>


    uint8_t sensor = atoi(argv[1]);
 80027e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80027e4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3304      	adds	r3, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f00c fa28 	bl	800ec44 <atoi>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (sensor > 1)    return CMDLINE_INVALID_ARG;
 80027fa:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d901      	bls.n	8002806 <Cmd_iou_get_temp+0x66>
 8002802:	2304      	movs	r3, #4
 8002804:	e0bf      	b.n	8002986 <Cmd_iou_get_temp+0x1e6>

    uint8_t channel = atoi(argv[2]);
 8002806:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800280a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3308      	adds	r3, #8
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f00c fa15 	bl	800ec44 <atoi>
 800281a:	4603      	mov	r3, r0
 800281c:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002820:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8002824:	2b03      	cmp	r3, #3
 8002826:	d901      	bls.n	800282c <Cmd_iou_get_temp+0x8c>
 8002828:	2304      	movs	r3, #4
 800282a:	e0ac      	b.n	8002986 <Cmd_iou_get_temp+0x1e6>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800282c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002830:	4857      	ldr	r0, [pc, #348]	@ (8002990 <Cmd_iou_get_temp+0x1f0>)
 8002832:	f7ff fde9 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800283a:	4855      	ldr	r0, [pc, #340]	@ (8002990 <Cmd_iou_get_temp+0x1f0>)
 800283c:	f7ff fde4 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002840:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002844:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800284e:	3b01      	subs	r3, #1
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002856:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4413      	add	r3, r2
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002864:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002868:	4a4a      	ldr	r2, [pc, #296]	@ (8002994 <Cmd_iou_get_temp+0x1f4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d103      	bne.n	8002876 <Cmd_iou_get_temp+0xd6>
    	uart_choose_uart5 = 1;
 800286e:	4b4a      	ldr	r3, [pc, #296]	@ (8002998 <Cmd_iou_get_temp+0x1f8>)
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e002      	b.n	800287c <Cmd_iou_get_temp+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8002876:	4b48      	ldr	r3, [pc, #288]	@ (8002998 <Cmd_iou_get_temp+0x1f8>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800287c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002880:	4a46      	ldr	r2, [pc, #280]	@ (800299c <Cmd_iou_get_temp+0x1fc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d103      	bne.n	800288e <Cmd_iou_get_temp+0xee>
    	uart_choose_usart2 = 1;
 8002886:	4b46      	ldr	r3, [pc, #280]	@ (80029a0 <Cmd_iou_get_temp+0x200>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e002      	b.n	8002894 <Cmd_iou_get_temp+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 800288e:	4b44      	ldr	r3, [pc, #272]	@ (80029a0 <Cmd_iou_get_temp+0x200>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_GET_TEMP;
 8002894:	2302      	movs	r3, #2
 8002896:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];


    payload[0] = sensor;
 800289a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800289e:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1] = channel;
 80028a2:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 80028a6:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80028aa:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80028ae:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80028b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2301      	movs	r3, #1
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2305      	movs	r3, #5
 80028be:	2202      	movs	r2, #2
 80028c0:	f009 f9d4 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80028c4:	f107 020f 	add.w	r2, r7, #15
 80028c8:	f107 0110 	add.w	r1, r7, #16
 80028cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80028d0:	4618      	mov	r0, r3
 80028d2:	f009 fa51 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 80028d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028da:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d02c      	beq.n	800293e <Cmd_iou_get_temp+0x19e>
        for (int i = 0; i < frame_len; i++) {
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80028ea:	e010      	b.n	800290e <Cmd_iou_get_temp+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 80028ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028f0:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80028f4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80028f8:	4413      	add	r3, r2
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	4829      	ldr	r0, [pc, #164]	@ (80029a4 <Cmd_iou_get_temp+0x204>)
 8002900:	f7ff fa22 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002904:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002908:	3301      	adds	r3, #1
 800290a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800290e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002912:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800291e:	4293      	cmp	r3, r2
 8002920:	dbe4      	blt.n	80028ec <Cmd_iou_get_temp+0x14c>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002922:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002926:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fca0 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002938:	f7ff fc86 	bl	8002248 <set_send_flag>
 800293c:	e022      	b.n	8002984 <Cmd_iou_get_temp+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800293e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002942:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002946:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	2301      	movs	r3, #1
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2305      	movs	r3, #5
 8002952:	2202      	movs	r2, #2
 8002954:	f009 f98a 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002958:	f107 020f 	add.w	r2, r7, #15
 800295c:	f107 0110 	add.w	r1, r7, #16
 8002960:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002964:	4618      	mov	r0, r3
 8002966:	f009 fa07 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800296a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800296e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fc7c 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002980:	f7ff fc62 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002984:	2305      	movs	r3, #5
}
 8002986:	4618      	mov	r0, r3
 8002988:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40020000 	.word	0x40020000
 8002994:	40005000 	.word	0x40005000
 8002998:	200058b8 	.word	0x200058b8
 800299c:	40004400 	.word	0x40004400
 80029a0:	200058b9 	.word	0x200058b9
 80029a4:	40011000 	.word	0x40011000

080029a8 <Cmd_iou_temp_setpoint>:

int Cmd_iou_temp_setpoint(int argc, char *argv[])
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80029ae:	af02      	add	r7, sp, #8
 80029b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029b8:	6018      	str	r0, [r3, #0]
 80029ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80029c2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80029c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	dc01      	bgt.n	80029d6 <Cmd_iou_temp_setpoint+0x2e>
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0c4      	b.n	8002b60 <Cmd_iou_temp_setpoint+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80029d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	dd01      	ble.n	80029e8 <Cmd_iou_temp_setpoint+0x40>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0bb      	b.n	8002b60 <Cmd_iou_temp_setpoint+0x1b8>
    uint8_t channel = atoi(argv[1]);
 80029e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029ec:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3304      	adds	r3, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f00c f924 	bl	800ec44 <atoi>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002a02:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d901      	bls.n	8002a0e <Cmd_iou_temp_setpoint+0x66>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e0a8      	b.n	8002b60 <Cmd_iou_temp_setpoint+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002a0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a12:	4856      	ldr	r0, [pc, #344]	@ (8002b6c <Cmd_iou_temp_setpoint+0x1c4>)
 8002a14:	f7ff fcf8 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002a18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a1c:	4853      	ldr	r0, [pc, #332]	@ (8002b6c <Cmd_iou_temp_setpoint+0x1c4>)
 8002a1e:	f7ff fcf3 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002a22:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a26:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a30:	3b01      	subs	r3, #1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002a38:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002a46:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002a4a:	4a49      	ldr	r2, [pc, #292]	@ (8002b70 <Cmd_iou_temp_setpoint+0x1c8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d103      	bne.n	8002a58 <Cmd_iou_temp_setpoint+0xb0>
    	uart_choose_uart5 = 1;
 8002a50:	4b48      	ldr	r3, [pc, #288]	@ (8002b74 <Cmd_iou_temp_setpoint+0x1cc>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e002      	b.n	8002a5e <Cmd_iou_temp_setpoint+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002a58:	4b46      	ldr	r3, [pc, #280]	@ (8002b74 <Cmd_iou_temp_setpoint+0x1cc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002a5e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002a62:	4a45      	ldr	r2, [pc, #276]	@ (8002b78 <Cmd_iou_temp_setpoint+0x1d0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d103      	bne.n	8002a70 <Cmd_iou_temp_setpoint+0xc8>
    	uart_choose_usart2 = 1;
 8002a68:	4b44      	ldr	r3, [pc, #272]	@ (8002b7c <Cmd_iou_temp_setpoint+0x1d4>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	e002      	b.n	8002a76 <Cmd_iou_temp_setpoint+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002a70:	4b42      	ldr	r3, [pc, #264]	@ (8002b7c <Cmd_iou_temp_setpoint+0x1d4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEMP_SETPOINT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002a7c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002a80:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002a84:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002a88:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002a8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	2301      	movs	r3, #1
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2305      	movs	r3, #5
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f009 f8e7 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002a9e:	f107 020f 	add.w	r2, r7, #15
 8002aa2:	f107 0110 	add.w	r1, r7, #16
 8002aa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f009 f964 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 8002ab0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ab4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d02c      	beq.n	8002b18 <Cmd_iou_temp_setpoint+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ac4:	e010      	b.n	8002ae8 <Cmd_iou_temp_setpoint+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002ac6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002aca:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002ace:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ad2:	4413      	add	r3, r2
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4829      	ldr	r0, [pc, #164]	@ (8002b80 <Cmd_iou_temp_setpoint+0x1d8>)
 8002ada:	f7ff f935 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002ade:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ae8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002aec:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002af8:	4293      	cmp	r3, r2
 8002afa:	dbe4      	blt.n	8002ac6 <Cmd_iou_temp_setpoint+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002afc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b00:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002b04:	781a      	ldrb	r2, [r3, #0]
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fbb3 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002b12:	f7ff fb99 	bl	8002248 <set_send_flag>
 8002b16:	e022      	b.n	8002b5e <Cmd_iou_temp_setpoint+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002b18:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002b1c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002b20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	2301      	movs	r3, #1
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f009 f89d 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002b32:	f107 020f 	add.w	r2, r7, #15
 8002b36:	f107 0110 	add.w	r1, r7, #16
 8002b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f009 f91a 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002b44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b48:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	f107 0310 	add.w	r3, r7, #16
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fb8f 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002b5a:	f7ff fb75 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002b5e:	2305      	movs	r3, #5
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40020000 	.word	0x40020000
 8002b70:	40005000 	.word	0x40005000
 8002b74:	200058b8 	.word	0x200058b8
 8002b78:	40004400 	.word	0x40004400
 8002b7c:	200058b9 	.word	0x200058b9
 8002b80:	40011000 	.word	0x40011000

08002b84 <Cmd_iou_tec_ena>:

int Cmd_iou_tec_ena(int argc, char *argv[])
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002b8a:	af02      	add	r7, sp, #8
 8002b8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b90:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002b94:	6018      	str	r0, [r3, #0]
 8002b96:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002b9a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002b9e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002ba0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ba4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	dc01      	bgt.n	8002bb2 <Cmd_iou_tec_ena+0x2e>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0c4      	b.n	8002d3c <Cmd_iou_tec_ena+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002bb2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bb6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	dd01      	ble.n	8002bc4 <Cmd_iou_tec_ena+0x40>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e0bb      	b.n	8002d3c <Cmd_iou_tec_ena+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002bc4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bc8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f00c f836 	bl	800ec44 <atoi>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002bde:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d901      	bls.n	8002bea <Cmd_iou_tec_ena+0x66>
 8002be6:	2304      	movs	r3, #4
 8002be8:	e0a8      	b.n	8002d3c <Cmd_iou_tec_ena+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002bea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bee:	4856      	ldr	r0, [pc, #344]	@ (8002d48 <Cmd_iou_tec_ena+0x1c4>)
 8002bf0:	f7ff fc0a 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002bf4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002bf8:	4853      	ldr	r0, [pc, #332]	@ (8002d48 <Cmd_iou_tec_ena+0x1c4>)
 8002bfa:	f7ff fc05 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002bfe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c02:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002c14:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002c22:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002c26:	4a49      	ldr	r2, [pc, #292]	@ (8002d4c <Cmd_iou_tec_ena+0x1c8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d103      	bne.n	8002c34 <Cmd_iou_tec_ena+0xb0>
    	uart_choose_uart5 = 1;
 8002c2c:	4b48      	ldr	r3, [pc, #288]	@ (8002d50 <Cmd_iou_tec_ena+0x1cc>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e002      	b.n	8002c3a <Cmd_iou_tec_ena+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002c34:	4b46      	ldr	r3, [pc, #280]	@ (8002d50 <Cmd_iou_tec_ena+0x1cc>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002c3a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002c3e:	4a45      	ldr	r2, [pc, #276]	@ (8002d54 <Cmd_iou_tec_ena+0x1d0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d103      	bne.n	8002c4c <Cmd_iou_tec_ena+0xc8>
    	uart_choose_usart2 = 1;
 8002c44:	4b44      	ldr	r3, [pc, #272]	@ (8002d58 <Cmd_iou_tec_ena+0x1d4>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e002      	b.n	8002c52 <Cmd_iou_tec_ena+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002c4c:	4b42      	ldr	r3, [pc, #264]	@ (8002d58 <Cmd_iou_tec_ena+0x1d4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_ENA;
 8002c52:	2304      	movs	r3, #4
 8002c54:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002c58:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002c5c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002c60:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002c64:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002c68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2301      	movs	r3, #1
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2305      	movs	r3, #5
 8002c74:	2201      	movs	r2, #1
 8002c76:	f008 fff9 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002c7a:	f107 020f 	add.w	r2, r7, #15
 8002c7e:	f107 0110 	add.w	r1, r7, #16
 8002c82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002c86:	4618      	mov	r0, r3
 8002c88:	f009 f876 	bl	800bd78 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002c8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c90:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d02c      	beq.n	8002cf4 <Cmd_iou_tec_ena+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ca0:	e010      	b.n	8002cc4 <Cmd_iou_tec_ena+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002ca2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ca6:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002caa:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002cae:	4413      	add	r3, r2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4829      	ldr	r0, [pc, #164]	@ (8002d5c <Cmd_iou_tec_ena+0x1d8>)
 8002cb6:	f7ff f847 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002cba:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002cc4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cc8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	dbe4      	blt.n	8002ca2 <Cmd_iou_tec_ena+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002cd8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cdc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	f107 0310 	add.w	r3, r7, #16
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fac5 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002cee:	f7ff faab 	bl	8002248 <set_send_flag>
 8002cf2:	e022      	b.n	8002d3a <Cmd_iou_tec_ena+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002cf4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002cf8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002cfc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2301      	movs	r3, #1
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2305      	movs	r3, #5
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f008 ffaf 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002d0e:	f107 020f 	add.w	r2, r7, #15
 8002d12:	f107 0110 	add.w	r1, r7, #16
 8002d16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f009 f82c 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002d20:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d24:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff faa1 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002d36:	f7ff fa87 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002d3a:	2305      	movs	r3, #5
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	40005000 	.word	0x40005000
 8002d50:	200058b8 	.word	0x200058b8
 8002d54:	40004400 	.word	0x40004400
 8002d58:	200058b9 	.word	0x200058b9
 8002d5c:	40011000 	.word	0x40011000

08002d60 <Cmd_iou_tec_dis>:

int Cmd_iou_tec_dis(int argc, char *argv[])
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002d66:	af02      	add	r7, sp, #8
 8002d68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d6c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d70:	6018      	str	r0, [r3, #0]
 8002d72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d76:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002d7a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002d7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d80:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	dc01      	bgt.n	8002d8e <Cmd_iou_tec_dis+0x2e>
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0c4      	b.n	8002f18 <Cmd_iou_tec_dis+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002d8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d92:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	dd01      	ble.n	8002da0 <Cmd_iou_tec_dis+0x40>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e0bb      	b.n	8002f18 <Cmd_iou_tec_dis+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002da0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002da4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3304      	adds	r3, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f00b ff48 	bl	800ec44 <atoi>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002dba:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d901      	bls.n	8002dc6 <Cmd_iou_tec_dis+0x66>
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	e0a8      	b.n	8002f18 <Cmd_iou_tec_dis+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002dc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002dca:	4856      	ldr	r0, [pc, #344]	@ (8002f24 <Cmd_iou_tec_dis+0x1c4>)
 8002dcc:	f7ff fb1c 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002dd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002dd4:	4853      	ldr	r0, [pc, #332]	@ (8002f24 <Cmd_iou_tec_dis+0x1c4>)
 8002dd6:	f7ff fb17 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002dda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002dde:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002de8:	3b01      	subs	r3, #1
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002df0:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002dfe:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002e02:	4a49      	ldr	r2, [pc, #292]	@ (8002f28 <Cmd_iou_tec_dis+0x1c8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <Cmd_iou_tec_dis+0xb0>
    	uart_choose_uart5 = 1;
 8002e08:	4b48      	ldr	r3, [pc, #288]	@ (8002f2c <Cmd_iou_tec_dis+0x1cc>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e002      	b.n	8002e16 <Cmd_iou_tec_dis+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002e10:	4b46      	ldr	r3, [pc, #280]	@ (8002f2c <Cmd_iou_tec_dis+0x1cc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002e16:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002e1a:	4a45      	ldr	r2, [pc, #276]	@ (8002f30 <Cmd_iou_tec_dis+0x1d0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d103      	bne.n	8002e28 <Cmd_iou_tec_dis+0xc8>
    	uart_choose_usart2 = 1;
 8002e20:	4b44      	ldr	r3, [pc, #272]	@ (8002f34 <Cmd_iou_tec_dis+0x1d4>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	e002      	b.n	8002e2e <Cmd_iou_tec_dis+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8002e28:	4b42      	ldr	r3, [pc, #264]	@ (8002f34 <Cmd_iou_tec_dis+0x1d4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_TEC_DIS;
 8002e2e:	2305      	movs	r3, #5
 8002e30:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8002e34:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002e38:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002e3c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002e40:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002e44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2305      	movs	r3, #5
 8002e50:	2201      	movs	r2, #1
 8002e52:	f008 ff0b 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002e56:	f107 020f 	add.w	r2, r7, #15
 8002e5a:	f107 0110 	add.w	r1, r7, #16
 8002e5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e62:	4618      	mov	r0, r3
 8002e64:	f008 ff88 	bl	800bd78 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8002e68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e6c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d02c      	beq.n	8002ed0 <Cmd_iou_tec_dis+0x170>
        for (int i = 0; i < frame_len; i++) {
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002e7c:	e010      	b.n	8002ea0 <Cmd_iou_tec_dis+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8002e7e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e82:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8002e86:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4829      	ldr	r0, [pc, #164]	@ (8002f38 <Cmd_iou_tec_dis+0x1d8>)
 8002e92:	f7fe ff59 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8002e96:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002ea0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ea4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	dbe4      	blt.n	8002e7e <Cmd_iou_tec_dis+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8002eb4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002eb8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	f107 0310 	add.w	r3, r7, #16
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f9d7 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002eca:	f7ff f9bd 	bl	8002248 <set_send_flag>
 8002ece:	e022      	b.n	8002f16 <Cmd_iou_tec_dis+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8002ed0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8002ed4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8002ed8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	2305      	movs	r3, #5
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f008 fec1 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8002eea:	f107 020f 	add.w	r2, r7, #15
 8002eee:	f107 0110 	add.w	r1, r7, #16
 8002ef2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f008 ff3e 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8002efc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f00:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	f107 0310 	add.w	r3, r7, #16
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff f9b3 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8002f12:	f7ff f999 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8002f16:	2305      	movs	r3, #5
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40005000 	.word	0x40005000
 8002f2c:	200058b8 	.word	0x200058b8
 8002f30:	40004400 	.word	0x40004400
 8002f34:	200058b9 	.word	0x200058b9
 8002f38:	40011000 	.word	0x40011000

08002f3c <Cmd_iou_tec_ena_auto>:

int Cmd_iou_tec_ena_auto(int argc, char *argv[])
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8002f42:	af02      	add	r7, sp, #8
 8002f44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f48:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f4c:	6018      	str	r0, [r3, #0]
 8002f4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f52:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f56:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8002f58:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f5c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	dc01      	bgt.n	8002f6a <Cmd_iou_tec_ena_auto+0x2e>
 8002f66:	2303      	movs	r3, #3
 8002f68:	e0c4      	b.n	80030f4 <Cmd_iou_tec_ena_auto+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8002f6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f6e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	dd01      	ble.n	8002f7c <Cmd_iou_tec_ena_auto+0x40>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e0bb      	b.n	80030f4 <Cmd_iou_tec_ena_auto+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8002f7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f80:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3304      	adds	r3, #4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f00b fe5a 	bl	800ec44 <atoi>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8002f96:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d901      	bls.n	8002fa2 <Cmd_iou_tec_ena_auto+0x66>
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	e0a8      	b.n	80030f4 <Cmd_iou_tec_ena_auto+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8002fa2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fa6:	4856      	ldr	r0, [pc, #344]	@ (8003100 <Cmd_iou_tec_ena_auto+0x1c4>)
 8002fa8:	f7ff fa2e 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8002fac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fb0:	4853      	ldr	r0, [pc, #332]	@ (8003100 <Cmd_iou_tec_ena_auto+0x1c4>)
 8002fb2:	f7ff fa29 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8002fb6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002fba:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002fcc:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8002fda:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002fde:	4a49      	ldr	r2, [pc, #292]	@ (8003104 <Cmd_iou_tec_ena_auto+0x1c8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d103      	bne.n	8002fec <Cmd_iou_tec_ena_auto+0xb0>
    	uart_choose_uart5 = 1;
 8002fe4:	4b48      	ldr	r3, [pc, #288]	@ (8003108 <Cmd_iou_tec_ena_auto+0x1cc>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e002      	b.n	8002ff2 <Cmd_iou_tec_ena_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8002fec:	4b46      	ldr	r3, [pc, #280]	@ (8003108 <Cmd_iou_tec_ena_auto+0x1cc>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8002ff2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002ff6:	4a45      	ldr	r2, [pc, #276]	@ (800310c <Cmd_iou_tec_ena_auto+0x1d0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d103      	bne.n	8003004 <Cmd_iou_tec_ena_auto+0xc8>
    	uart_choose_usart2 = 1;
 8002ffc:	4b44      	ldr	r3, [pc, #272]	@ (8003110 <Cmd_iou_tec_ena_auto+0x1d4>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e002      	b.n	800300a <Cmd_iou_tec_ena_auto+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8003004:	4b42      	ldr	r3, [pc, #264]	@ (8003110 <Cmd_iou_tec_ena_auto+0x1d4>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_ENA_AUTO;
 800300a:	2306      	movs	r3, #6
 800300c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 8003010:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003014:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003018:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800301c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003020:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	2301      	movs	r3, #1
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2305      	movs	r3, #5
 800302c:	2201      	movs	r2, #1
 800302e:	f008 fe1d 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003032:	f107 020f 	add.w	r2, r7, #15
 8003036:	f107 0110 	add.w	r1, r7, #16
 800303a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800303e:	4618      	mov	r0, r3
 8003040:	f008 fe9a 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 8003044:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003048:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d02c      	beq.n	80030ac <Cmd_iou_tec_ena_auto+0x170>
        for (int i = 0; i < frame_len; i++) {
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003058:	e010      	b.n	800307c <Cmd_iou_tec_ena_auto+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800305a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800305e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8003062:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003066:	4413      	add	r3, r2
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	4619      	mov	r1, r3
 800306c:	4829      	ldr	r0, [pc, #164]	@ (8003114 <Cmd_iou_tec_ena_auto+0x1d8>)
 800306e:	f7fe fe6b 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003072:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003076:	3301      	adds	r3, #1
 8003078:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800307c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003080:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800308c:	4293      	cmp	r3, r2
 800308e:	dbe4      	blt.n	800305a <Cmd_iou_tec_ena_auto+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003090:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003094:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	f107 0310 	add.w	r3, r7, #16
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f8e9 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80030a6:	f7ff f8cf 	bl	8002248 <set_send_flag>
 80030aa:	e022      	b.n	80030f2 <Cmd_iou_tec_ena_auto+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80030ac:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80030b0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80030b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	2301      	movs	r3, #1
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2305      	movs	r3, #5
 80030c0:	2201      	movs	r2, #1
 80030c2:	f008 fdd3 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80030c6:	f107 020f 	add.w	r2, r7, #15
 80030ca:	f107 0110 	add.w	r1, r7, #16
 80030ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80030d2:	4618      	mov	r0, r3
 80030d4:	f008 fe50 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80030d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030dc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80030e0:	781a      	ldrb	r2, [r3, #0]
 80030e2:	f107 0310 	add.w	r3, r7, #16
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f8c5 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80030ee:	f7ff f8ab 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80030f2:	2305      	movs	r3, #5
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40020000 	.word	0x40020000
 8003104:	40005000 	.word	0x40005000
 8003108:	200058b8 	.word	0x200058b8
 800310c:	40004400 	.word	0x40004400
 8003110:	200058b9 	.word	0x200058b9
 8003114:	40011000 	.word	0x40011000

08003118 <Cmd_iou_tec_dis_auto>:

int Cmd_iou_tec_dis_auto(int argc, char *argv[])
{
 8003118:	b580      	push	{r7, lr}
 800311a:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800311e:	af02      	add	r7, sp, #8
 8003120:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003124:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003128:	6018      	str	r0, [r3, #0]
 800312a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800312e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003132:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8003134:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003138:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b02      	cmp	r3, #2
 8003140:	dc01      	bgt.n	8003146 <Cmd_iou_tec_dis_auto+0x2e>
 8003142:	2303      	movs	r3, #3
 8003144:	e0c4      	b.n	80032d0 <Cmd_iou_tec_dis_auto+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8003146:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800314a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b03      	cmp	r3, #3
 8003152:	dd01      	ble.n	8003158 <Cmd_iou_tec_dis_auto+0x40>
 8003154:	2302      	movs	r3, #2
 8003156:	e0bb      	b.n	80032d0 <Cmd_iou_tec_dis_auto+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8003158:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800315c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3304      	adds	r3, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f00b fd6c 	bl	800ec44 <atoi>
 800316c:	4603      	mov	r3, r0
 800316e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8003172:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003176:	2b03      	cmp	r3, #3
 8003178:	d901      	bls.n	800317e <Cmd_iou_tec_dis_auto+0x66>
 800317a:	2304      	movs	r3, #4
 800317c:	e0a8      	b.n	80032d0 <Cmd_iou_tec_dis_auto+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800317e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003182:	4856      	ldr	r0, [pc, #344]	@ (80032dc <Cmd_iou_tec_dis_auto+0x1c4>)
 8003184:	f7ff f940 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800318c:	4853      	ldr	r0, [pc, #332]	@ (80032dc <Cmd_iou_tec_dis_auto+0x1c4>)
 800318e:	f7ff f93b 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003192:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003196:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031a0:	3b01      	subs	r3, #1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80031a8:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80031b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80031ba:	4a49      	ldr	r2, [pc, #292]	@ (80032e0 <Cmd_iou_tec_dis_auto+0x1c8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d103      	bne.n	80031c8 <Cmd_iou_tec_dis_auto+0xb0>
    	uart_choose_uart5 = 1;
 80031c0:	4b48      	ldr	r3, [pc, #288]	@ (80032e4 <Cmd_iou_tec_dis_auto+0x1cc>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e002      	b.n	80031ce <Cmd_iou_tec_dis_auto+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 80031c8:	4b46      	ldr	r3, [pc, #280]	@ (80032e4 <Cmd_iou_tec_dis_auto+0x1cc>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80031ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80031d2:	4a45      	ldr	r2, [pc, #276]	@ (80032e8 <Cmd_iou_tec_dis_auto+0x1d0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d103      	bne.n	80031e0 <Cmd_iou_tec_dis_auto+0xc8>
    	uart_choose_usart2 = 1;
 80031d8:	4b44      	ldr	r3, [pc, #272]	@ (80032ec <Cmd_iou_tec_dis_auto+0x1d4>)
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e002      	b.n	80031e6 <Cmd_iou_tec_dis_auto+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80031e0:	4b42      	ldr	r3, [pc, #264]	@ (80032ec <Cmd_iou_tec_dis_auto+0x1d4>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_DIS_AUTO;
 80031e6:	2307      	movs	r3, #7
 80031e8:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0] = channel;
 80031ec:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80031f0:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80031f4:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80031f8:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80031fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	2301      	movs	r3, #1
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2305      	movs	r3, #5
 8003208:	2201      	movs	r2, #1
 800320a:	f008 fd2f 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800320e:	f107 020f 	add.w	r2, r7, #15
 8003212:	f107 0110 	add.w	r1, r7, #16
 8003216:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800321a:	4618      	mov	r0, r3
 800321c:	f008 fdac 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 8003220:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003224:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d02c      	beq.n	8003288 <Cmd_iou_tec_dis_auto+0x170>
        for (int i = 0; i < frame_len; i++) {
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003234:	e010      	b.n	8003258 <Cmd_iou_tec_dis_auto+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8003236:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800323a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800323e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	4619      	mov	r1, r3
 8003248:	4829      	ldr	r0, [pc, #164]	@ (80032f0 <Cmd_iou_tec_dis_auto+0x1d8>)
 800324a:	f7fe fd7d 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800324e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003252:	3301      	adds	r3, #1
 8003254:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003258:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800325c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003268:	4293      	cmp	r3, r2
 800326a:	dbe4      	blt.n	8003236 <Cmd_iou_tec_dis_auto+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800326c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003270:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	f107 0310 	add.w	r3, r7, #16
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fffb 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003282:	f7fe ffe1 	bl	8002248 <set_send_flag>
 8003286:	e022      	b.n	80032ce <Cmd_iou_tec_dis_auto+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003288:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800328c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003290:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2301      	movs	r3, #1
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2305      	movs	r3, #5
 800329c:	2201      	movs	r2, #1
 800329e:	f008 fce5 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80032a2:	f107 020f 	add.w	r2, r7, #15
 80032a6:	f107 0110 	add.w	r1, r7, #16
 80032aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80032ae:	4618      	mov	r0, r3
 80032b0:	f008 fd62 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80032b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032b8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	f107 0310 	add.w	r3, r7, #16
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe ffd7 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80032ca:	f7fe ffbd 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80032ce:	2305      	movs	r3, #5
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40020000 	.word	0x40020000
 80032e0:	40005000 	.word	0x40005000
 80032e4:	200058b8 	.word	0x200058b8
 80032e8:	40004400 	.word	0x40004400
 80032ec:	200058b9 	.word	0x200058b9
 80032f0:	40011000 	.word	0x40011000

080032f4 <Cmd_iou_tec_set_output>:


int Cmd_iou_tec_set_output(int argc, char *argv[])
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80032fa:	af02      	add	r7, sp, #8
 80032fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003300:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003304:	6018      	str	r0, [r3, #0]
 8003306:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800330a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800330e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 4) return CMDLINE_TOO_FEW_ARGS;
 8003310:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003314:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b04      	cmp	r3, #4
 800331c:	dc01      	bgt.n	8003322 <Cmd_iou_tec_set_output+0x2e>
 800331e:	2303      	movs	r3, #3
 8003320:	e0fb      	b.n	800351a <Cmd_iou_tec_set_output+0x226>
    if ((argc-1) > 4) return CMDLINE_TOO_MANY_ARGS;
 8003322:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003326:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b05      	cmp	r3, #5
 800332e:	dd01      	ble.n	8003334 <Cmd_iou_tec_set_output+0x40>
 8003330:	2302      	movs	r3, #2
 8003332:	e0f2      	b.n	800351a <Cmd_iou_tec_set_output+0x226>
    uint8_t channel = atoi(argv[1]);
 8003334:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003338:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3304      	adds	r3, #4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f00b fc7e 	bl	800ec44 <atoi>
 8003348:	4603      	mov	r3, r0
 800334a:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 800334e:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003352:	2b03      	cmp	r3, #3
 8003354:	d901      	bls.n	800335a <Cmd_iou_tec_set_output+0x66>
 8003356:	2304      	movs	r3, #4
 8003358:	e0df      	b.n	800351a <Cmd_iou_tec_set_output+0x226>

    uint8_t mode = atoi(argv[2]);
 800335a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800335e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3308      	adds	r3, #8
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f00b fc6b 	bl	800ec44 <atoi>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (mode > 1)    return CMDLINE_INVALID_ARG;
 8003374:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003378:	2b01      	cmp	r3, #1
 800337a:	d901      	bls.n	8003380 <Cmd_iou_tec_set_output+0x8c>
 800337c:	2304      	movs	r3, #4
 800337e:	e0cc      	b.n	800351a <Cmd_iou_tec_set_output+0x226>

    uint16_t vol = atoi(argv[3]);
 8003380:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003384:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f00b fc58 	bl	800ec44 <atoi>
 8003394:	4603      	mov	r3, r0
 8003396:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 800339a:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800339e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80033a2:	d901      	bls.n	80033a8 <Cmd_iou_tec_set_output+0xb4>
 80033a4:	2304      	movs	r3, #4
 80033a6:	e0b8      	b.n	800351a <Cmd_iou_tec_set_output+0x226>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80033a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80033ac:	485d      	ldr	r0, [pc, #372]	@ (8003524 <Cmd_iou_tec_set_output+0x230>)
 80033ae:	f7ff f82b 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80033b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033b6:	485b      	ldr	r0, [pc, #364]	@ (8003524 <Cmd_iou_tec_set_output+0x230>)
 80033b8:	f7ff f826 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80033bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033c0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033ca:	3b01      	subs	r3, #1
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80033d2:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 80033e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80033e4:	4a50      	ldr	r2, [pc, #320]	@ (8003528 <Cmd_iou_tec_set_output+0x234>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d103      	bne.n	80033f2 <Cmd_iou_tec_set_output+0xfe>
    	uart_choose_uart5 = 1;
 80033ea:	4b50      	ldr	r3, [pc, #320]	@ (800352c <Cmd_iou_tec_set_output+0x238>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e002      	b.n	80033f8 <Cmd_iou_tec_set_output+0x104>
    }else{
    	uart_choose_uart5 = 0;
 80033f2:	4b4e      	ldr	r3, [pc, #312]	@ (800352c <Cmd_iou_tec_set_output+0x238>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80033f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80033fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003530 <Cmd_iou_tec_set_output+0x23c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d103      	bne.n	800340a <Cmd_iou_tec_set_output+0x116>
    	uart_choose_usart2 = 1;
 8003402:	4b4c      	ldr	r3, [pc, #304]	@ (8003534 <Cmd_iou_tec_set_output+0x240>)
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	e002      	b.n	8003410 <Cmd_iou_tec_set_output+0x11c>
    }else{
    	uart_choose_usart2 = 0;
 800340a:	4b4a      	ldr	r3, [pc, #296]	@ (8003534 <Cmd_iou_tec_set_output+0x240>)
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_SET_OUTPUT;
 8003410:	2308      	movs	r3, #8
 8003412:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];
    payload[0] = channel;
 8003416:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800341a:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1] = mode;
 800341e:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003422:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(vol >> 8);   //high
 8003426:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	b29b      	uxth	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(vol & 0xFF); //low
 8003434:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800343e:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003442:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003446:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	2301      	movs	r3, #1
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2305      	movs	r3, #5
 8003452:	2204      	movs	r2, #4
 8003454:	f008 fc0a 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003458:	f107 020b 	add.w	r2, r7, #11
 800345c:	f107 010c 	add.w	r1, r7, #12
 8003460:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003464:	4618      	mov	r0, r3
 8003466:	f008 fc87 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 800346a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800346e:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02c      	beq.n	80034d2 <Cmd_iou_tec_set_output+0x1de>
        for (int i = 0; i < frame_len; i++) {
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800347e:	e010      	b.n	80034a2 <Cmd_iou_tec_set_output+0x1ae>
            Uart_write(USART1, encoded_frame[i]);
 8003480:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003484:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003488:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800348c:	4413      	add	r3, r2
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	4829      	ldr	r0, [pc, #164]	@ (8003538 <Cmd_iou_tec_set_output+0x244>)
 8003494:	f7fe fc58 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003498:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800349c:	3301      	adds	r3, #1
 800349e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80034a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034a6:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80034b2:	4293      	cmp	r3, r2
 80034b4:	dbe4      	blt.n	8003480 <Cmd_iou_tec_set_output+0x18c>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80034b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034ba:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fed6 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80034cc:	f7fe febc 	bl	8002248 <set_send_flag>
 80034d0:	e022      	b.n	8003518 <Cmd_iou_tec_set_output+0x224>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80034d2:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80034d6:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80034da:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	2301      	movs	r3, #1
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2305      	movs	r3, #5
 80034e6:	2204      	movs	r2, #4
 80034e8:	f008 fbc0 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80034ec:	f107 020b 	add.w	r2, r7, #11
 80034f0:	f107 010c 	add.w	r1, r7, #12
 80034f4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80034f8:	4618      	mov	r0, r3
 80034fa:	f008 fc3d 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80034fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003502:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	f107 030c 	add.w	r3, r7, #12
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe feb2 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003514:	f7fe fe98 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003518:	2305      	movs	r3, #5
}
 800351a:	4618      	mov	r0, r3
 800351c:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40020000 	.word	0x40020000
 8003528:	40005000 	.word	0x40005000
 800352c:	200058b8 	.word	0x200058b8
 8003530:	40004400 	.word	0x40004400
 8003534:	200058b9 	.word	0x200058b9
 8003538:	40011000 	.word	0x40011000

0800353c <Cmd_iou_tec_auto_vol>:

int Cmd_iou_tec_auto_vol(int argc, char *argv[])
{
 800353c:	b580      	push	{r7, lr}
 800353e:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003542:	af02      	add	r7, sp, #8
 8003544:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003548:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800354c:	6018      	str	r0, [r3, #0]
 800354e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003552:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003556:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8003558:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800355c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b03      	cmp	r3, #3
 8003564:	dc01      	bgt.n	800356a <Cmd_iou_tec_auto_vol+0x2e>
 8003566:	2303      	movs	r3, #3
 8003568:	e0e4      	b.n	8003734 <Cmd_iou_tec_auto_vol+0x1f8>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 800356a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800356e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b04      	cmp	r3, #4
 8003576:	dd01      	ble.n	800357c <Cmd_iou_tec_auto_vol+0x40>
 8003578:	2302      	movs	r3, #2
 800357a:	e0db      	b.n	8003734 <Cmd_iou_tec_auto_vol+0x1f8>
    uint8_t channel = atoi(argv[1]);
 800357c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003580:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3304      	adds	r3, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f00b fb5a 	bl	800ec44 <atoi>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 3)    return CMDLINE_INVALID_ARG;
 8003596:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800359a:	2b03      	cmp	r3, #3
 800359c:	d901      	bls.n	80035a2 <Cmd_iou_tec_auto_vol+0x66>
 800359e:	2304      	movs	r3, #4
 80035a0:	e0c8      	b.n	8003734 <Cmd_iou_tec_auto_vol+0x1f8>

    uint16_t vol = atoi(argv[2]);
 80035a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035a6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3308      	adds	r3, #8
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f00b fb47 	bl	800ec44 <atoi>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    if (vol > 500)    return CMDLINE_INVALID_ARG;
 80035bc:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80035c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80035c4:	d901      	bls.n	80035ca <Cmd_iou_tec_auto_vol+0x8e>
 80035c6:	2304      	movs	r3, #4
 80035c8:	e0b4      	b.n	8003734 <Cmd_iou_tec_auto_vol+0x1f8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80035ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80035ce:	485c      	ldr	r0, [pc, #368]	@ (8003740 <Cmd_iou_tec_auto_vol+0x204>)
 80035d0:	f7fe ff1a 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80035d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035d8:	4859      	ldr	r0, [pc, #356]	@ (8003740 <Cmd_iou_tec_auto_vol+0x204>)
 80035da:	f7fe ff15 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80035de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035e2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035ec:	3b01      	subs	r3, #1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80035f4:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	4413      	add	r3, r2
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003602:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003606:	4a4f      	ldr	r2, [pc, #316]	@ (8003744 <Cmd_iou_tec_auto_vol+0x208>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d103      	bne.n	8003614 <Cmd_iou_tec_auto_vol+0xd8>
    	uart_choose_uart5 = 1;
 800360c:	4b4e      	ldr	r3, [pc, #312]	@ (8003748 <Cmd_iou_tec_auto_vol+0x20c>)
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e002      	b.n	800361a <Cmd_iou_tec_auto_vol+0xde>
    }else{
    	uart_choose_uart5 = 0;
 8003614:	4b4c      	ldr	r3, [pc, #304]	@ (8003748 <Cmd_iou_tec_auto_vol+0x20c>)
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800361a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800361e:	4a4b      	ldr	r2, [pc, #300]	@ (800374c <Cmd_iou_tec_auto_vol+0x210>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d103      	bne.n	800362c <Cmd_iou_tec_auto_vol+0xf0>
    	uart_choose_usart2 = 1;
 8003624:	4b4a      	ldr	r3, [pc, #296]	@ (8003750 <Cmd_iou_tec_auto_vol+0x214>)
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e002      	b.n	8003632 <Cmd_iou_tec_auto_vol+0xf6>
    }else{
    	uart_choose_usart2 = 0;
 800362c:	4b48      	ldr	r3, [pc, #288]	@ (8003750 <Cmd_iou_tec_auto_vol+0x214>)
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_AUTO_VOL;
 8003632:	2309      	movs	r3, #9
 8003634:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[3];
    payload[0] = channel;
 8003638:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800363c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = (uint8_t)(vol >> 8);   //high
 8003640:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	b29b      	uxth	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
    payload[2]  = (uint8_t)(vol & 0xFF); //low
 800364e:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003658:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800365c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003660:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	2301      	movs	r3, #1
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2305      	movs	r3, #5
 800366c:	2203      	movs	r2, #3
 800366e:	f008 fafd 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003672:	f107 020f 	add.w	r2, r7, #15
 8003676:	f107 0110 	add.w	r1, r7, #16
 800367a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800367e:	4618      	mov	r0, r3
 8003680:	f008 fb7a 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 8003684:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003688:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d02c      	beq.n	80036ec <Cmd_iou_tec_auto_vol+0x1b0>
        for (int i = 0; i < frame_len; i++) {
 8003692:	2300      	movs	r3, #0
 8003694:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003698:	e010      	b.n	80036bc <Cmd_iou_tec_auto_vol+0x180>
            Uart_write(USART1, encoded_frame[i]);
 800369a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800369e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80036a2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80036a6:	4413      	add	r3, r2
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	4829      	ldr	r0, [pc, #164]	@ (8003754 <Cmd_iou_tec_auto_vol+0x218>)
 80036ae:	f7fe fb4b 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80036b2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80036b6:	3301      	adds	r3, #1
 80036b8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80036bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036c0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80036cc:	4293      	cmp	r3, r2
 80036ce:	dbe4      	blt.n	800369a <Cmd_iou_tec_auto_vol+0x15e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80036d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036d4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	f107 0310 	add.w	r3, r7, #16
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fe fdc9 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80036e6:	f7fe fdaf 	bl	8002248 <set_send_flag>
 80036ea:	e022      	b.n	8003732 <Cmd_iou_tec_auto_vol+0x1f6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80036ec:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80036f0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80036f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	2301      	movs	r3, #1
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2305      	movs	r3, #5
 8003700:	2203      	movs	r2, #3
 8003702:	f008 fab3 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003706:	f107 020f 	add.w	r2, r7, #15
 800370a:	f107 0110 	add.w	r1, r7, #16
 800370e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003712:	4618      	mov	r0, r3
 8003714:	f008 fb30 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003718:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800371c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	f107 0310 	add.w	r3, r7, #16
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe fda5 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 800372e:	f7fe fd8b 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003732:	2305      	movs	r3, #5
}
 8003734:	4618      	mov	r0, r3
 8003736:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40020000 	.word	0x40020000
 8003744:	40005000 	.word	0x40005000
 8003748:	200058b8 	.word	0x200058b8
 800374c:	40004400 	.word	0x40004400
 8003750:	200058b9 	.word	0x200058b9
 8003754:	40011000 	.word	0x40011000

08003758 <Cmd_iou_tec_status>:

int Cmd_iou_tec_status(int argc, char *argv[])
{
 8003758:	b580      	push	{r7, lr}
 800375a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800375e:	af00      	add	r7, sp, #0
 8003760:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003764:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003768:	6018      	str	r0, [r3, #0]
 800376a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800376e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003772:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003774:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003778:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	dc01      	bgt.n	8003786 <Cmd_iou_tec_status+0x2e>
 8003782:	2303      	movs	r3, #3
 8003784:	e0a3      	b.n	80038ce <Cmd_iou_tec_status+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003786:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800378a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b02      	cmp	r3, #2
 8003792:	dd01      	ble.n	8003798 <Cmd_iou_tec_status+0x40>
 8003794:	2302      	movs	r3, #2
 8003796:	e09a      	b.n	80038ce <Cmd_iou_tec_status+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003798:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800379c:	484e      	ldr	r0, [pc, #312]	@ (80038d8 <Cmd_iou_tec_status+0x180>)
 800379e:	f7fe fe33 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80037a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037a6:	484c      	ldr	r0, [pc, #304]	@ (80038d8 <Cmd_iou_tec_status+0x180>)
 80037a8:	f7fe fe2e 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80037ac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80037b0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037ba:	3b01      	subs	r3, #1
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80037c2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	4413      	add	r3, r2
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80037d0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80037d4:	4a41      	ldr	r2, [pc, #260]	@ (80038dc <Cmd_iou_tec_status+0x184>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d103      	bne.n	80037e2 <Cmd_iou_tec_status+0x8a>
    	uart_choose_uart5 = 1;
 80037da:	4b41      	ldr	r3, [pc, #260]	@ (80038e0 <Cmd_iou_tec_status+0x188>)
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e002      	b.n	80037e8 <Cmd_iou_tec_status+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80037e2:	4b3f      	ldr	r3, [pc, #252]	@ (80038e0 <Cmd_iou_tec_status+0x188>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80037e8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80037ec:	4a3d      	ldr	r2, [pc, #244]	@ (80038e4 <Cmd_iou_tec_status+0x18c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d103      	bne.n	80037fa <Cmd_iou_tec_status+0xa2>
    	uart_choose_usart2 = 1;
 80037f2:	4b3d      	ldr	r3, [pc, #244]	@ (80038e8 <Cmd_iou_tec_status+0x190>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e002      	b.n	8003800 <Cmd_iou_tec_status+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80037fa:	4b3b      	ldr	r3, [pc, #236]	@ (80038e8 <Cmd_iou_tec_status+0x190>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_STATUS;
 8003800:	230a      	movs	r3, #10
 8003802:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003806:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800380a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800380e:	2201      	movs	r2, #1
 8003810:	2105      	movs	r1, #5
 8003812:	f008 fa03 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003816:	f107 020f 	add.w	r2, r7, #15
 800381a:	f107 0110 	add.w	r1, r7, #16
 800381e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003822:	4618      	mov	r0, r3
 8003824:	f008 faa8 	bl	800bd78 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003828:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800382c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d02c      	beq.n	8003890 <Cmd_iou_tec_status+0x138>
        for (int i = 0; i < frame_len; i++) {
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800383c:	e010      	b.n	8003860 <Cmd_iou_tec_status+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800383e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003842:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003846:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800384a:	4413      	add	r3, r2
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	4619      	mov	r1, r3
 8003850:	4826      	ldr	r0, [pc, #152]	@ (80038ec <Cmd_iou_tec_status+0x194>)
 8003852:	f7fe fa79 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003856:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800385a:	3301      	adds	r3, #1
 800385c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003860:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003864:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003870:	4293      	cmp	r3, r2
 8003872:	dbe4      	blt.n	800383e <Cmd_iou_tec_status+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003874:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003878:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	f107 0310 	add.w	r3, r7, #16
 8003882:	4611      	mov	r1, r2
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe fcf7 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 800388a:	f7fe fcdd 	bl	8002248 <set_send_flag>
 800388e:	e01d      	b.n	80038cc <Cmd_iou_tec_status+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003890:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003894:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003898:	2201      	movs	r2, #1
 800389a:	2105      	movs	r1, #5
 800389c:	f008 f9be 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80038a0:	f107 020f 	add.w	r2, r7, #15
 80038a4:	f107 0110 	add.w	r1, r7, #16
 80038a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80038ac:	4618      	mov	r0, r3
 80038ae:	f008 fa63 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80038b2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038b6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80038ba:	781a      	ldrb	r2, [r3, #0]
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fcd8 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80038c8:	f7fe fcbe 	bl	8002248 <set_send_flag>
    }
    return CMDLINE_PENDING;
 80038cc:	2305      	movs	r3, #5
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40005000 	.word	0x40005000
 80038e0:	200058b8 	.word	0x200058b8
 80038e4:	40004400 	.word	0x40004400
 80038e8:	200058b9 	.word	0x200058b9
 80038ec:	40011000 	.word	0x40011000

080038f0 <Cmd_iou_tec_log_ena>:

int Cmd_iou_tec_log_ena(int argc, char *argv[])
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80038fc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003900:	6018      	str	r0, [r3, #0]
 8003902:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003906:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800390a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800390c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003910:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	dc01      	bgt.n	800391e <Cmd_iou_tec_log_ena+0x2e>
 800391a:	2303      	movs	r3, #3
 800391c:	e0a3      	b.n	8003a66 <Cmd_iou_tec_log_ena+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800391e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003922:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b02      	cmp	r3, #2
 800392a:	dd01      	ble.n	8003930 <Cmd_iou_tec_log_ena+0x40>
 800392c:	2302      	movs	r3, #2
 800392e:	e09a      	b.n	8003a66 <Cmd_iou_tec_log_ena+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003930:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003934:	484e      	ldr	r0, [pc, #312]	@ (8003a70 <Cmd_iou_tec_log_ena+0x180>)
 8003936:	f7fe fd67 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800393a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800393e:	484c      	ldr	r0, [pc, #304]	@ (8003a70 <Cmd_iou_tec_log_ena+0x180>)
 8003940:	f7fe fd62 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003944:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003948:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003952:	3b01      	subs	r3, #1
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800395a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	4413      	add	r3, r2
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003968:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800396c:	4a41      	ldr	r2, [pc, #260]	@ (8003a74 <Cmd_iou_tec_log_ena+0x184>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d103      	bne.n	800397a <Cmd_iou_tec_log_ena+0x8a>
    	uart_choose_uart5 = 1;
 8003972:	4b41      	ldr	r3, [pc, #260]	@ (8003a78 <Cmd_iou_tec_log_ena+0x188>)
 8003974:	2201      	movs	r2, #1
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e002      	b.n	8003980 <Cmd_iou_tec_log_ena+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800397a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a78 <Cmd_iou_tec_log_ena+0x188>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003980:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003984:	4a3d      	ldr	r2, [pc, #244]	@ (8003a7c <Cmd_iou_tec_log_ena+0x18c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d103      	bne.n	8003992 <Cmd_iou_tec_log_ena+0xa2>
    	uart_choose_usart2 = 1;
 800398a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a80 <Cmd_iou_tec_log_ena+0x190>)
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e002      	b.n	8003998 <Cmd_iou_tec_log_ena+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003992:	4b3b      	ldr	r3, [pc, #236]	@ (8003a80 <Cmd_iou_tec_log_ena+0x190>)
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_LOG_ENA;
 8003998:	230b      	movs	r3, #11
 800399a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800399e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039a2:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80039a6:	2201      	movs	r2, #1
 80039a8:	2105      	movs	r1, #5
 80039aa:	f008 f937 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80039ae:	f107 020f 	add.w	r2, r7, #15
 80039b2:	f107 0110 	add.w	r1, r7, #16
 80039b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039ba:	4618      	mov	r0, r3
 80039bc:	f008 f9dc 	bl	800bd78 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80039c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039c4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d02c      	beq.n	8003a28 <Cmd_iou_tec_log_ena+0x138>
        for (int i = 0; i < frame_len; i++) {
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80039d4:	e010      	b.n	80039f8 <Cmd_iou_tec_log_ena+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80039d6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039da:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80039de:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80039e2:	4413      	add	r3, r2
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	4619      	mov	r1, r3
 80039e8:	4826      	ldr	r0, [pc, #152]	@ (8003a84 <Cmd_iou_tec_log_ena+0x194>)
 80039ea:	f7fe f9ad 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80039ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80039f2:	3301      	adds	r3, #1
 80039f4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80039f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80039fc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	dbe4      	blt.n	80039d6 <Cmd_iou_tec_log_ena+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003a0c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a10:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	f107 0310 	add.w	r3, r7, #16
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe fc2b 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003a22:	f7fe fc11 	bl	8002248 <set_send_flag>
 8003a26:	e01d      	b.n	8003a64 <Cmd_iou_tec_log_ena+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003a28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a2c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003a30:	2201      	movs	r2, #1
 8003a32:	2105      	movs	r1, #5
 8003a34:	f008 f8f2 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003a38:	f107 020f 	add.w	r2, r7, #15
 8003a3c:	f107 0110 	add.w	r1, r7, #16
 8003a40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a44:	4618      	mov	r0, r3
 8003a46:	f008 f997 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003a4a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a4e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003a52:	781a      	ldrb	r2, [r3, #0]
 8003a54:	f107 0310 	add.w	r3, r7, #16
 8003a58:	4611      	mov	r1, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fc0c 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003a60:	f7fe fbf2 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003a64:	2305      	movs	r3, #5
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40020000 	.word	0x40020000
 8003a74:	40005000 	.word	0x40005000
 8003a78:	200058b8 	.word	0x200058b8
 8003a7c:	40004400 	.word	0x40004400
 8003a80:	200058b9 	.word	0x200058b9
 8003a84:	40011000 	.word	0x40011000

08003a88 <Cmd_iou_tec_log_dis>:

int Cmd_iou_tec_log_dis(int argc, char *argv[])
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a94:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003a98:	6018      	str	r0, [r3, #0]
 8003a9a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003a9e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003aa2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003aa4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003aa8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	dc01      	bgt.n	8003ab6 <Cmd_iou_tec_log_dis+0x2e>
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0a3      	b.n	8003bfe <Cmd_iou_tec_log_dis+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003ab6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003aba:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	dd01      	ble.n	8003ac8 <Cmd_iou_tec_log_dis+0x40>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e09a      	b.n	8003bfe <Cmd_iou_tec_log_dis+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003ac8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003acc:	484e      	ldr	r0, [pc, #312]	@ (8003c08 <Cmd_iou_tec_log_dis+0x180>)
 8003ace:	f7fe fc9b 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003ad2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ad6:	484c      	ldr	r0, [pc, #304]	@ (8003c08 <Cmd_iou_tec_log_dis+0x180>)
 8003ad8:	f7fe fc96 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003adc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ae0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aea:	3b01      	subs	r3, #1
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003af2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003b00:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003b04:	4a41      	ldr	r2, [pc, #260]	@ (8003c0c <Cmd_iou_tec_log_dis+0x184>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d103      	bne.n	8003b12 <Cmd_iou_tec_log_dis+0x8a>
    	uart_choose_uart5 = 1;
 8003b0a:	4b41      	ldr	r3, [pc, #260]	@ (8003c10 <Cmd_iou_tec_log_dis+0x188>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e002      	b.n	8003b18 <Cmd_iou_tec_log_dis+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003b12:	4b3f      	ldr	r3, [pc, #252]	@ (8003c10 <Cmd_iou_tec_log_dis+0x188>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003b18:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003b1c:	4a3d      	ldr	r2, [pc, #244]	@ (8003c14 <Cmd_iou_tec_log_dis+0x18c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d103      	bne.n	8003b2a <Cmd_iou_tec_log_dis+0xa2>
    	uart_choose_usart2 = 1;
 8003b22:	4b3d      	ldr	r3, [pc, #244]	@ (8003c18 <Cmd_iou_tec_log_dis+0x190>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e002      	b.n	8003b30 <Cmd_iou_tec_log_dis+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c18 <Cmd_iou_tec_log_dis+0x190>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_TEC_LOG_DIS;
 8003b30:	230c      	movs	r3, #12
 8003b32:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003b36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b3a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003b3e:	2201      	movs	r2, #1
 8003b40:	2105      	movs	r1, #5
 8003b42:	f008 f86b 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003b46:	f107 020f 	add.w	r2, r7, #15
 8003b4a:	f107 0110 	add.w	r1, r7, #16
 8003b4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b52:	4618      	mov	r0, r3
 8003b54:	f008 f910 	bl	800bd78 <frame_encode>

//    SCH_Delay(5);
    if (frame_len > 0) {
 8003b58:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b5c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d02c      	beq.n	8003bc0 <Cmd_iou_tec_log_dis+0x138>
        for (int i = 0; i < frame_len; i++) {
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003b6c:	e010      	b.n	8003b90 <Cmd_iou_tec_log_dis+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8003b6e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b72:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003b76:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4826      	ldr	r0, [pc, #152]	@ (8003c1c <Cmd_iou_tec_log_dis+0x194>)
 8003b82:	f7fe f8e1 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003b86:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003b90:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003b94:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	dbe4      	blt.n	8003b6e <Cmd_iou_tec_log_dis+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003ba4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003ba8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	f107 0310 	add.w	r3, r7, #16
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe fb5f 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003bba:	f7fe fb45 	bl	8002248 <set_send_flag>
 8003bbe:	e01d      	b.n	8003bfc <Cmd_iou_tec_log_dis+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003bc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bc4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2105      	movs	r1, #5
 8003bcc:	f008 f826 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003bd0:	f107 020f 	add.w	r2, r7, #15
 8003bd4:	f107 0110 	add.w	r1, r7, #16
 8003bd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f008 f8cb 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003be2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003be6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	f107 0310 	add.w	r3, r7, #16
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fb40 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003bf8:	f7fe fb26 	bl	8002248 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8003bfc:	2305      	movs	r3, #5
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	40005000 	.word	0x40005000
 8003c10:	200058b8 	.word	0x200058b8
 8003c14:	40004400 	.word	0x40004400
 8003c18:	200058b9 	.word	0x200058b9
 8003c1c:	40011000 	.word	0x40011000

08003c20 <Cmd_iou_ringled_setRGB>:

int Cmd_iou_ringled_setRGB(int argc, char *argv[])
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003c26:	af02      	add	r7, sp, #8
 8003c28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c2c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c30:	6018      	str	r0, [r3, #0]
 8003c32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c36:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c3a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 5) return CMDLINE_TOO_FEW_ARGS;
 8003c3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c40:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	dc01      	bgt.n	8003c4e <Cmd_iou_ringled_setRGB+0x2e>
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e0f1      	b.n	8003e32 <Cmd_iou_ringled_setRGB+0x212>
    if ((argc-1) > 5) return CMDLINE_TOO_MANY_ARGS;
 8003c4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c52:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	dd01      	ble.n	8003c60 <Cmd_iou_ringled_setRGB+0x40>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e0e8      	b.n	8003e32 <Cmd_iou_ringled_setRGB+0x212>
    uint8_t red = atoi(argv[1]);
 8003c60:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c64:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f00a ffe8 	bl	800ec44 <atoi>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (red > 255)    return CMDLINE_INVALID_ARG;
    uint8_t green = atoi(argv[2]);
 8003c7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c7e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3308      	adds	r3, #8
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f00a ffdb 	bl	800ec44 <atoi>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (green > 255)    return CMDLINE_INVALID_ARG;
    uint8_t blue = atoi(argv[3]);
 8003c94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c98:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f00a ffce 	bl	800ec44 <atoi>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
    if (blue > 255)    return CMDLINE_INVALID_ARG;
    uint8_t white = atoi(argv[4]);
 8003cae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003cb2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3310      	adds	r3, #16
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f00a ffc1 	bl	800ec44 <atoi>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003cc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ccc:	485b      	ldr	r0, [pc, #364]	@ (8003e3c <Cmd_iou_ringled_setRGB+0x21c>)
 8003cce:	f7fe fb9b 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003cd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cd6:	4859      	ldr	r0, [pc, #356]	@ (8003e3c <Cmd_iou_ringled_setRGB+0x21c>)
 8003cd8:	f7fe fb96 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003cdc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ce0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cea:	3b01      	subs	r3, #1
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003cf2:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8003d00:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003d04:	4a4e      	ldr	r2, [pc, #312]	@ (8003e40 <Cmd_iou_ringled_setRGB+0x220>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d103      	bne.n	8003d12 <Cmd_iou_ringled_setRGB+0xf2>
    	uart_choose_uart5 = 1;
 8003d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e44 <Cmd_iou_ringled_setRGB+0x224>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e002      	b.n	8003d18 <Cmd_iou_ringled_setRGB+0xf8>
    }else{
    	uart_choose_uart5 = 0;
 8003d12:	4b4c      	ldr	r3, [pc, #304]	@ (8003e44 <Cmd_iou_ringled_setRGB+0x224>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003d18:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8003e48 <Cmd_iou_ringled_setRGB+0x228>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d103      	bne.n	8003d2a <Cmd_iou_ringled_setRGB+0x10a>
    	uart_choose_usart2 = 1;
 8003d22:	4b4a      	ldr	r3, [pc, #296]	@ (8003e4c <Cmd_iou_ringled_setRGB+0x22c>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	e002      	b.n	8003d30 <Cmd_iou_ringled_setRGB+0x110>
    }else{
    	uart_choose_usart2 = 0;
 8003d2a:	4b48      	ldr	r3, [pc, #288]	@ (8003e4c <Cmd_iou_ringled_setRGB+0x22c>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_RINGLED_SETRGB;
 8003d30:	230d      	movs	r3, #13
 8003d32:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[4];

    payload[0]  = red; //low
 8003d36:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8003d3a:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = green; //low
 8003d3e:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8003d42:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = blue; //low
 8003d46:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8003d4a:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = white; //low
 8003d4e:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8003d52:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003d56:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003d5a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003d5e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	2301      	movs	r3, #1
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	2305      	movs	r3, #5
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	f007 ff7e 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003d70:	f107 020b 	add.w	r2, r7, #11
 8003d74:	f107 010c 	add.w	r1, r7, #12
 8003d78:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f007 fffb 	bl	800bd78 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8003d82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d86:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02c      	beq.n	8003dea <Cmd_iou_ringled_setRGB+0x1ca>
        for (int i = 0; i < frame_len; i++) {
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003d96:	e010      	b.n	8003dba <Cmd_iou_ringled_setRGB+0x19a>
            Uart_write(USART1, encoded_frame[i]);
 8003d98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d9c:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8003da0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003da4:	4413      	add	r3, r2
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4619      	mov	r1, r3
 8003daa:	4829      	ldr	r0, [pc, #164]	@ (8003e50 <Cmd_iou_ringled_setRGB+0x230>)
 8003dac:	f7fd ffcc 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003db0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003db4:	3301      	adds	r3, #1
 8003db6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003dba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dbe:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	dbe4      	blt.n	8003d98 <Cmd_iou_ringled_setRGB+0x178>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003dce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dd2:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	f107 030c 	add.w	r3, r7, #12
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe fa4a 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003de4:	f7fe fa30 	bl	8002248 <set_send_flag>
 8003de8:	e022      	b.n	8003e30 <Cmd_iou_ringled_setRGB+0x210>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003dea:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8003dee:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8003df2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2301      	movs	r3, #1
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2305      	movs	r3, #5
 8003dfe:	2204      	movs	r2, #4
 8003e00:	f007 ff34 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003e04:	f107 020b 	add.w	r2, r7, #11
 8003e08:	f107 010c 	add.w	r1, r7, #12
 8003e0c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003e10:	4618      	mov	r0, r3
 8003e12:	f007 ffb1 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003e16:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e1a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8003e1e:	781a      	ldrb	r2, [r3, #0]
 8003e20:	f107 030c 	add.w	r3, r7, #12
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fa26 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003e2c:	f7fe fa0c 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003e30:	2305      	movs	r3, #5
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	40005000 	.word	0x40005000
 8003e44:	200058b8 	.word	0x200058b8
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	200058b9 	.word	0x200058b9
 8003e50:	40011000 	.word	0x40011000

08003e54 <Cmd_iou_ringled_getRGB>:

int Cmd_iou_ringled_getRGB(int argc, char *argv[])
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e60:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e64:	6018      	str	r0, [r3, #0]
 8003e66:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e6a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003e6e:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8003e70:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e74:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	dc01      	bgt.n	8003e82 <Cmd_iou_ringled_getRGB+0x2e>
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e0a3      	b.n	8003fca <Cmd_iou_ringled_getRGB+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8003e82:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003e86:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	dd01      	ble.n	8003e94 <Cmd_iou_ringled_getRGB+0x40>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e09a      	b.n	8003fca <Cmd_iou_ringled_getRGB+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8003e94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e98:	484e      	ldr	r0, [pc, #312]	@ (8003fd4 <Cmd_iou_ringled_getRGB+0x180>)
 8003e9a:	f7fe fab5 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8003e9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ea2:	484c      	ldr	r0, [pc, #304]	@ (8003fd4 <Cmd_iou_ringled_getRGB+0x180>)
 8003ea4:	f7fe fab0 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8003ea8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003eac:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8003ebe:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8003ecc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ed0:	4a41      	ldr	r2, [pc, #260]	@ (8003fd8 <Cmd_iou_ringled_getRGB+0x184>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d103      	bne.n	8003ede <Cmd_iou_ringled_getRGB+0x8a>
    	uart_choose_uart5 = 1;
 8003ed6:	4b41      	ldr	r3, [pc, #260]	@ (8003fdc <Cmd_iou_ringled_getRGB+0x188>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e002      	b.n	8003ee4 <Cmd_iou_ringled_getRGB+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8003ede:	4b3f      	ldr	r3, [pc, #252]	@ (8003fdc <Cmd_iou_ringled_getRGB+0x188>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8003ee4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003ee8:	4a3d      	ldr	r2, [pc, #244]	@ (8003fe0 <Cmd_iou_ringled_getRGB+0x18c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d103      	bne.n	8003ef6 <Cmd_iou_ringled_getRGB+0xa2>
    	uart_choose_usart2 = 1;
 8003eee:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe4 <Cmd_iou_ringled_getRGB+0x190>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	e002      	b.n	8003efc <Cmd_iou_ringled_getRGB+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe4 <Cmd_iou_ringled_getRGB+0x190>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_RINGLED_GETRGB;
 8003efc:	230e      	movs	r3, #14
 8003efe:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003f02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f06:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	2105      	movs	r1, #5
 8003f0e:	f007 fe85 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003f12:	f107 020f 	add.w	r2, r7, #15
 8003f16:	f107 0110 	add.w	r1, r7, #16
 8003f1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f007 ff2a 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 8003f24:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f28:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d02c      	beq.n	8003f8c <Cmd_iou_ringled_getRGB+0x138>
        for (int i = 0; i < frame_len; i++) {
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003f38:	e010      	b.n	8003f5c <Cmd_iou_ringled_getRGB+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8003f3a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f3e:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8003f42:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f46:	4413      	add	r3, r2
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4826      	ldr	r0, [pc, #152]	@ (8003fe8 <Cmd_iou_ringled_getRGB+0x194>)
 8003f4e:	f7fd fefb 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8003f52:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f56:	3301      	adds	r3, #1
 8003f58:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003f5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f60:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	dbe4      	blt.n	8003f3a <Cmd_iou_ringled_getRGB+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8003f70:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003f74:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	f107 0310 	add.w	r3, r7, #16
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe f979 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003f86:	f7fe f95f 	bl	8002248 <set_send_flag>
 8003f8a:	e01d      	b.n	8003fc8 <Cmd_iou_ringled_getRGB+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8003f8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f90:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8003f94:	2201      	movs	r2, #1
 8003f96:	2105      	movs	r1, #5
 8003f98:	f007 fe40 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8003f9c:	f107 020f 	add.w	r2, r7, #15
 8003fa0:	f107 0110 	add.w	r1, r7, #16
 8003fa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f007 fee5 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8003fae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8003fb2:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8003fb6:	781a      	ldrb	r2, [r3, #0]
 8003fb8:	f107 0310 	add.w	r3, r7, #16
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe f95a 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8003fc4:	f7fe f940 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8003fc8:	2305      	movs	r3, #5
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40020000 	.word	0x40020000
 8003fd8:	40005000 	.word	0x40005000
 8003fdc:	200058b8 	.word	0x200058b8
 8003fe0:	40004400 	.word	0x40004400
 8003fe4:	200058b9 	.word	0x200058b9
 8003fe8:	40011000 	.word	0x40011000

08003fec <Cmd_iou_irled_set_bright>:

int Cmd_iou_irled_set_bright(int argc, char *argv[])
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8003ff2:	af02      	add	r7, sp, #8
 8003ff4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ff8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003ffc:	6018      	str	r0, [r3, #0]
 8003ffe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004002:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004006:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004008:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800400c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b02      	cmp	r3, #2
 8004014:	dc01      	bgt.n	800401a <Cmd_iou_irled_set_bright+0x2e>
 8004016:	2303      	movs	r3, #3
 8004018:	e0c4      	b.n	80041a4 <Cmd_iou_irled_set_bright+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 800401a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800401e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b03      	cmp	r3, #3
 8004026:	dd01      	ble.n	800402c <Cmd_iou_irled_set_bright+0x40>
 8004028:	2302      	movs	r3, #2
 800402a:	e0bb      	b.n	80041a4 <Cmd_iou_irled_set_bright+0x1b8>
    uint8_t percent = atoi(argv[1]);
 800402c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004030:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3304      	adds	r3, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f00a fe02 	bl	800ec44 <atoi>
 8004040:	4603      	mov	r3, r0
 8004042:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (percent > 100)    return CMDLINE_INVALID_ARG;
 8004046:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800404a:	2b64      	cmp	r3, #100	@ 0x64
 800404c:	d901      	bls.n	8004052 <Cmd_iou_irled_set_bright+0x66>
 800404e:	2304      	movs	r3, #4
 8004050:	e0a8      	b.n	80041a4 <Cmd_iou_irled_set_bright+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004052:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004056:	4856      	ldr	r0, [pc, #344]	@ (80041b0 <Cmd_iou_irled_set_bright+0x1c4>)
 8004058:	f7fe f9d6 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800405c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004060:	4853      	ldr	r0, [pc, #332]	@ (80041b0 <Cmd_iou_irled_set_bright+0x1c4>)
 8004062:	f7fe f9d1 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004066:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800406a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004074:	3b01      	subs	r3, #1
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800407c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	4413      	add	r3, r2
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800408a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800408e:	4a49      	ldr	r2, [pc, #292]	@ (80041b4 <Cmd_iou_irled_set_bright+0x1c8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d103      	bne.n	800409c <Cmd_iou_irled_set_bright+0xb0>
    	uart_choose_uart5 = 1;
 8004094:	4b48      	ldr	r3, [pc, #288]	@ (80041b8 <Cmd_iou_irled_set_bright+0x1cc>)
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	e002      	b.n	80040a2 <Cmd_iou_irled_set_bright+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 800409c:	4b46      	ldr	r3, [pc, #280]	@ (80041b8 <Cmd_iou_irled_set_bright+0x1cc>)
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80040a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80040a6:	4a45      	ldr	r2, [pc, #276]	@ (80041bc <Cmd_iou_irled_set_bright+0x1d0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d103      	bne.n	80040b4 <Cmd_iou_irled_set_bright+0xc8>
    	uart_choose_usart2 = 1;
 80040ac:	4b44      	ldr	r3, [pc, #272]	@ (80041c0 <Cmd_iou_irled_set_bright+0x1d4>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e002      	b.n	80040ba <Cmd_iou_irled_set_bright+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80040b4:	4b42      	ldr	r3, [pc, #264]	@ (80041c0 <Cmd_iou_irled_set_bright+0x1d4>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_IRLED_SET_BRIGHT;
 80040ba:	230f      	movs	r3, #15
 80040bc:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];

    payload[0]  = percent; //low
 80040c0:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80040c4:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80040c8:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80040cc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80040d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	2301      	movs	r3, #1
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2305      	movs	r3, #5
 80040dc:	2201      	movs	r2, #1
 80040de:	f007 fdc5 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80040e2:	f107 020f 	add.w	r2, r7, #15
 80040e6:	f107 0110 	add.w	r1, r7, #16
 80040ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040ee:	4618      	mov	r0, r3
 80040f0:	f007 fe42 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 80040f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040f8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d02c      	beq.n	800415c <Cmd_iou_irled_set_bright+0x170>
        for (int i = 0; i < frame_len; i++) {
 8004102:	2300      	movs	r3, #0
 8004104:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004108:	e010      	b.n	800412c <Cmd_iou_irled_set_bright+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800410a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800410e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004112:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004116:	4413      	add	r3, r2
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	4619      	mov	r1, r3
 800411c:	4829      	ldr	r0, [pc, #164]	@ (80041c4 <Cmd_iou_irled_set_bright+0x1d8>)
 800411e:	f7fd fe13 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004122:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004126:	3301      	adds	r3, #1
 8004128:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800412c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004130:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800413c:	4293      	cmp	r3, r2
 800413e:	dbe4      	blt.n	800410a <Cmd_iou_irled_set_bright+0x11e>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8004140:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004144:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	f107 0310 	add.w	r3, r7, #16
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe f891 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004156:	f7fe f877 	bl	8002248 <set_send_flag>
 800415a:	e022      	b.n	80041a2 <Cmd_iou_irled_set_bright+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800415c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004160:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004164:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	2301      	movs	r3, #1
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2305      	movs	r3, #5
 8004170:	2201      	movs	r2, #1
 8004172:	f007 fd7b 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004176:	f107 020f 	add.w	r2, r7, #15
 800417a:	f107 0110 	add.w	r1, r7, #16
 800417e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004182:	4618      	mov	r0, r3
 8004184:	f007 fdf8 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004188:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800418c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004190:	781a      	ldrb	r2, [r3, #0]
 8004192:	f107 0310 	add.w	r3, r7, #16
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe f86d 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 800419e:	f7fe f853 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80041a2:	2305      	movs	r3, #5
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40020000 	.word	0x40020000
 80041b4:	40005000 	.word	0x40005000
 80041b8:	200058b8 	.word	0x200058b8
 80041bc:	40004400 	.word	0x40004400
 80041c0:	200058b9 	.word	0x200058b9
 80041c4:	40011000 	.word	0x40011000

080041c8 <Cmd_iou_irled_get_bright>:

int Cmd_iou_irled_get_bright(int argc, char *argv[])
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041d4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041d8:	6018      	str	r0, [r3, #0]
 80041da:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041de:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80041e2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80041e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041e8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	dc01      	bgt.n	80041f6 <Cmd_iou_irled_get_bright+0x2e>
 80041f2:	2303      	movs	r3, #3
 80041f4:	e0a3      	b.n	800433e <Cmd_iou_irled_get_bright+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80041f6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80041fa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b02      	cmp	r3, #2
 8004202:	dd01      	ble.n	8004208 <Cmd_iou_irled_get_bright+0x40>
 8004204:	2302      	movs	r3, #2
 8004206:	e09a      	b.n	800433e <Cmd_iou_irled_get_bright+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004208:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800420c:	484e      	ldr	r0, [pc, #312]	@ (8004348 <Cmd_iou_irled_get_bright+0x180>)
 800420e:	f7fe f8fb 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004212:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004216:	484c      	ldr	r0, [pc, #304]	@ (8004348 <Cmd_iou_irled_get_bright+0x180>)
 8004218:	f7fe f8f6 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800421c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004220:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800422a:	3b01      	subs	r3, #1
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004232:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	4413      	add	r3, r2
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004240:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004244:	4a41      	ldr	r2, [pc, #260]	@ (800434c <Cmd_iou_irled_get_bright+0x184>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d103      	bne.n	8004252 <Cmd_iou_irled_get_bright+0x8a>
    	uart_choose_uart5 = 1;
 800424a:	4b41      	ldr	r3, [pc, #260]	@ (8004350 <Cmd_iou_irled_get_bright+0x188>)
 800424c:	2201      	movs	r2, #1
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	e002      	b.n	8004258 <Cmd_iou_irled_get_bright+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004252:	4b3f      	ldr	r3, [pc, #252]	@ (8004350 <Cmd_iou_irled_get_bright+0x188>)
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004258:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800425c:	4a3d      	ldr	r2, [pc, #244]	@ (8004354 <Cmd_iou_irled_get_bright+0x18c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d103      	bne.n	800426a <Cmd_iou_irled_get_bright+0xa2>
    	uart_choose_usart2 = 1;
 8004262:	4b3d      	ldr	r3, [pc, #244]	@ (8004358 <Cmd_iou_irled_get_bright+0x190>)
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	e002      	b.n	8004270 <Cmd_iou_irled_get_bright+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800426a:	4b3b      	ldr	r3, [pc, #236]	@ (8004358 <Cmd_iou_irled_get_bright+0x190>)
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_IRLED_GET_BRIGHT;
 8004270:	2310      	movs	r3, #16
 8004272:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800427a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800427e:	2201      	movs	r2, #1
 8004280:	2105      	movs	r1, #5
 8004282:	f007 fccb 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004286:	f107 020f 	add.w	r2, r7, #15
 800428a:	f107 0110 	add.w	r1, r7, #16
 800428e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004292:	4618      	mov	r0, r3
 8004294:	f007 fd70 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 8004298:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800429c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d02c      	beq.n	8004300 <Cmd_iou_irled_get_bright+0x138>
        for (int i = 0; i < frame_len; i++) {
 80042a6:	2300      	movs	r3, #0
 80042a8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80042ac:	e010      	b.n	80042d0 <Cmd_iou_irled_get_bright+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80042ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042b2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80042b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80042ba:	4413      	add	r3, r2
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	4619      	mov	r1, r3
 80042c0:	4826      	ldr	r0, [pc, #152]	@ (800435c <Cmd_iou_irled_get_bright+0x194>)
 80042c2:	f7fd fd41 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80042c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80042ca:	3301      	adds	r3, #1
 80042cc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80042d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042d4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80042e0:	4293      	cmp	r3, r2
 80042e2:	dbe4      	blt.n	80042ae <Cmd_iou_irled_get_bright+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80042e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80042e8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80042ec:	781a      	ldrb	r2, [r3, #0]
 80042ee:	f107 0310 	add.w	r3, r7, #16
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd ffbf 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80042fa:	f7fd ffa5 	bl	8002248 <set_send_flag>
 80042fe:	e01d      	b.n	800433c <Cmd_iou_irled_get_bright+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004300:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004304:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004308:	2201      	movs	r2, #1
 800430a:	2105      	movs	r1, #5
 800430c:	f007 fc86 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004310:	f107 020f 	add.w	r2, r7, #15
 8004314:	f107 0110 	add.w	r1, r7, #16
 8004318:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800431c:	4618      	mov	r0, r3
 800431e:	f007 fd2b 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004322:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004326:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	f107 0310 	add.w	r3, r7, #16
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd ffa0 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004338:	f7fd ff86 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800433c:	2305      	movs	r3, #5
}
 800433e:	4618      	mov	r0, r3
 8004340:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40020000 	.word	0x40020000
 800434c:	40005000 	.word	0x40005000
 8004350:	200058b8 	.word	0x200058b8
 8004354:	40004400 	.word	0x40004400
 8004358:	200058b9 	.word	0x200058b9
 800435c:	40011000 	.word	0x40011000

08004360 <Cmd_iou_get_accel>:



int Cmd_iou_get_accel(int argc, char *argv[])
{
 8004360:	b580      	push	{r7, lr}
 8004362:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8004366:	af00      	add	r7, sp, #0
 8004368:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800436c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004370:	6018      	str	r0, [r3, #0]
 8004372:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004376:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800437a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800437c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004380:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b01      	cmp	r3, #1
 8004388:	dc01      	bgt.n	800438e <Cmd_iou_get_accel+0x2e>
 800438a:	2303      	movs	r3, #3
 800438c:	e0a3      	b.n	80044d6 <Cmd_iou_get_accel+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800438e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004392:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b02      	cmp	r3, #2
 800439a:	dd01      	ble.n	80043a0 <Cmd_iou_get_accel+0x40>
 800439c:	2302      	movs	r3, #2
 800439e:	e09a      	b.n	80044d6 <Cmd_iou_get_accel+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80043a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043a4:	484e      	ldr	r0, [pc, #312]	@ (80044e0 <Cmd_iou_get_accel+0x180>)
 80043a6:	f7fe f82f 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80043aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043ae:	484c      	ldr	r0, [pc, #304]	@ (80044e0 <Cmd_iou_get_accel+0x180>)
 80043b0:	f7fe f82a 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80043b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80043b8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043c2:	3b01      	subs	r3, #1
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80043ca:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	4413      	add	r3, r2
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80043d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80043dc:	4a41      	ldr	r2, [pc, #260]	@ (80044e4 <Cmd_iou_get_accel+0x184>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d103      	bne.n	80043ea <Cmd_iou_get_accel+0x8a>
    	uart_choose_uart5 = 1;
 80043e2:	4b41      	ldr	r3, [pc, #260]	@ (80044e8 <Cmd_iou_get_accel+0x188>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	e002      	b.n	80043f0 <Cmd_iou_get_accel+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80043ea:	4b3f      	ldr	r3, [pc, #252]	@ (80044e8 <Cmd_iou_get_accel+0x188>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80043f0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80043f4:	4a3d      	ldr	r2, [pc, #244]	@ (80044ec <Cmd_iou_get_accel+0x18c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d103      	bne.n	8004402 <Cmd_iou_get_accel+0xa2>
    	uart_choose_usart2 = 1;
 80043fa:	4b3d      	ldr	r3, [pc, #244]	@ (80044f0 <Cmd_iou_get_accel+0x190>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e002      	b.n	8004408 <Cmd_iou_get_accel+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8004402:	4b3b      	ldr	r3, [pc, #236]	@ (80044f0 <Cmd_iou_get_accel+0x190>)
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_ACCEL_GYRO;
 8004408:	2311      	movs	r3, #17
 800440a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800440e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004412:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004416:	2201      	movs	r2, #1
 8004418:	2105      	movs	r1, #5
 800441a:	f007 fbff 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800441e:	f107 020f 	add.w	r2, r7, #15
 8004422:	f107 0110 	add.w	r1, r7, #16
 8004426:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800442a:	4618      	mov	r0, r3
 800442c:	f007 fca4 	bl	800bd78 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8004430:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004434:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d02c      	beq.n	8004498 <Cmd_iou_get_accel+0x138>
        for (int i = 0; i < frame_len; i++) {
 800443e:	2300      	movs	r3, #0
 8004440:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004444:	e010      	b.n	8004468 <Cmd_iou_get_accel+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8004446:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800444a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800444e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004452:	4413      	add	r3, r2
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	4619      	mov	r1, r3
 8004458:	4826      	ldr	r0, [pc, #152]	@ (80044f4 <Cmd_iou_get_accel+0x194>)
 800445a:	f7fd fc75 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800445e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004462:	3301      	adds	r3, #1
 8004464:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004468:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800446c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004478:	4293      	cmp	r3, r2
 800447a:	dbe4      	blt.n	8004446 <Cmd_iou_get_accel+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 800447c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004480:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004484:	781a      	ldrb	r2, [r3, #0]
 8004486:	f107 0310 	add.w	r3, r7, #16
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f7fd fef3 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004492:	f7fd fed9 	bl	8002248 <set_send_flag>
 8004496:	e01d      	b.n	80044d4 <Cmd_iou_get_accel+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004498:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800449c:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80044a0:	2201      	movs	r2, #1
 80044a2:	2105      	movs	r1, #5
 80044a4:	f007 fbba 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80044a8:	f107 020f 	add.w	r2, r7, #15
 80044ac:	f107 0110 	add.w	r1, r7, #16
 80044b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80044b4:	4618      	mov	r0, r3
 80044b6:	f007 fc5f 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80044ba:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80044be:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	f107 0310 	add.w	r3, r7, #16
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fd fed4 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80044d0:	f7fd feba 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80044d4:	2305      	movs	r3, #5
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40020000 	.word	0x40020000
 80044e4:	40005000 	.word	0x40005000
 80044e8:	200058b8 	.word	0x200058b8
 80044ec:	40004400 	.word	0x40004400
 80044f0:	200058b9 	.word	0x200058b9
 80044f4:	40011000 	.word	0x40011000

080044f8 <Cmd_iou_get_press>:

int Cmd_iou_get_press(int argc, char *argv[])
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80044fe:	af00      	add	r7, sp, #0
 8004500:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004504:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004508:	6018      	str	r0, [r3, #0]
 800450a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800450e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004512:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8004514:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004518:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	dc01      	bgt.n	8004526 <Cmd_iou_get_press+0x2e>
 8004522:	2303      	movs	r3, #3
 8004524:	e0a3      	b.n	800466e <Cmd_iou_get_press+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8004526:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800452a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b02      	cmp	r3, #2
 8004532:	dd01      	ble.n	8004538 <Cmd_iou_get_press+0x40>
 8004534:	2302      	movs	r3, #2
 8004536:	e09a      	b.n	800466e <Cmd_iou_get_press+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004538:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800453c:	484e      	ldr	r0, [pc, #312]	@ (8004678 <Cmd_iou_get_press+0x180>)
 800453e:	f7fd ff63 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004542:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004546:	484c      	ldr	r0, [pc, #304]	@ (8004678 <Cmd_iou_get_press+0x180>)
 8004548:	f7fd ff5e 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800454c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004550:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800455a:	3b01      	subs	r3, #1
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8004562:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4413      	add	r3, r2
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004570:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004574:	4a41      	ldr	r2, [pc, #260]	@ (800467c <Cmd_iou_get_press+0x184>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d103      	bne.n	8004582 <Cmd_iou_get_press+0x8a>
    	uart_choose_uart5 = 1;
 800457a:	4b41      	ldr	r3, [pc, #260]	@ (8004680 <Cmd_iou_get_press+0x188>)
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e002      	b.n	8004588 <Cmd_iou_get_press+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8004582:	4b3f      	ldr	r3, [pc, #252]	@ (8004680 <Cmd_iou_get_press+0x188>)
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004588:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800458c:	4a3d      	ldr	r2, [pc, #244]	@ (8004684 <Cmd_iou_get_press+0x18c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d103      	bne.n	800459a <Cmd_iou_get_press+0xa2>
    	uart_choose_usart2 = 1;
 8004592:	4b3d      	ldr	r3, [pc, #244]	@ (8004688 <Cmd_iou_get_press+0x190>)
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	e002      	b.n	80045a0 <Cmd_iou_get_press+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800459a:	4b3b      	ldr	r3, [pc, #236]	@ (8004688 <Cmd_iou_get_press+0x190>)
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_PRESS;
 80045a0:	2312      	movs	r3, #18
 80045a2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80045a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045aa:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80045ae:	2201      	movs	r2, #1
 80045b0:	2105      	movs	r1, #5
 80045b2:	f007 fb33 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80045b6:	f107 020f 	add.w	r2, r7, #15
 80045ba:	f107 0110 	add.w	r1, r7, #16
 80045be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80045c2:	4618      	mov	r0, r3
 80045c4:	f007 fbd8 	bl	800bd78 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 80045c8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80045cc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d02c      	beq.n	8004630 <Cmd_iou_get_press+0x138>
        for (int i = 0; i < frame_len; i++) {
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80045dc:	e010      	b.n	8004600 <Cmd_iou_get_press+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80045de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80045e2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80045e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80045ea:	4413      	add	r3, r2
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	4619      	mov	r1, r3
 80045f0:	4826      	ldr	r0, [pc, #152]	@ (800468c <Cmd_iou_get_press+0x194>)
 80045f2:	f7fd fba9 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80045f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80045fa:	3301      	adds	r3, #1
 80045fc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004600:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004604:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004610:	4293      	cmp	r3, r2
 8004612:	dbe4      	blt.n	80045de <Cmd_iou_get_press+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 8004614:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004618:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800461c:	781a      	ldrb	r2, [r3, #0]
 800461e:	f107 0310 	add.w	r3, r7, #16
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f7fd fe27 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 800462a:	f7fd fe0d 	bl	8002248 <set_send_flag>
 800462e:	e01d      	b.n	800466c <Cmd_iou_get_press+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004630:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004634:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004638:	2201      	movs	r2, #1
 800463a:	2105      	movs	r1, #5
 800463c:	f007 faee 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004640:	f107 020f 	add.w	r2, r7, #15
 8004644:	f107 0110 	add.w	r1, r7, #16
 8004648:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800464c:	4618      	mov	r0, r3
 800464e:	f007 fb93 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004652:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004656:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	f107 0310 	add.w	r3, r7, #16
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f7fd fe08 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004668:	f7fd fdee 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800466c:	2305      	movs	r3, #5
}
 800466e:	4618      	mov	r0, r3
 8004670:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40020000 	.word	0x40020000
 800467c:	40005000 	.word	0x40005000
 8004680:	200058b8 	.word	0x200058b8
 8004684:	40004400 	.word	0x40004400
 8004688:	200058b9 	.word	0x200058b9
 800468c:	40011000 	.word	0x40011000

08004690 <Cmd_iou_get_parameters>:


int Cmd_iou_get_parameters(int argc, char *argv[])
{
 8004690:	b580      	push	{r7, lr}
 8004692:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8004696:	af00      	add	r7, sp, #0
 8004698:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800469c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046a0:	6018      	str	r0, [r3, #0]
 80046a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046a6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80046aa:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80046ac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046b0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	dc01      	bgt.n	80046be <Cmd_iou_get_parameters+0x2e>
 80046ba:	2303      	movs	r3, #3
 80046bc:	e0a3      	b.n	8004806 <Cmd_iou_get_parameters+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80046be:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046c2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	dd01      	ble.n	80046d0 <Cmd_iou_get_parameters+0x40>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e09a      	b.n	8004806 <Cmd_iou_get_parameters+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU (*)
     */
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80046d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80046d4:	484e      	ldr	r0, [pc, #312]	@ (8004810 <Cmd_iou_get_parameters+0x180>)
 80046d6:	f7fd fe97 	bl	8002408 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80046da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046de:	484c      	ldr	r0, [pc, #304]	@ (8004810 <Cmd_iou_get_parameters+0x180>)
 80046e0:	f7fd fe92 	bl	8002408 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80046e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80046e8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046f2:	3b01      	subs	r3, #1
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80046fa:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	4413      	add	r3, r2
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8004708:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800470c:	4a41      	ldr	r2, [pc, #260]	@ (8004814 <Cmd_iou_get_parameters+0x184>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d103      	bne.n	800471a <Cmd_iou_get_parameters+0x8a>
    	uart_choose_uart5 = 1;
 8004712:	4b41      	ldr	r3, [pc, #260]	@ (8004818 <Cmd_iou_get_parameters+0x188>)
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e002      	b.n	8004720 <Cmd_iou_get_parameters+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800471a:	4b3f      	ldr	r3, [pc, #252]	@ (8004818 <Cmd_iou_get_parameters+0x188>)
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004720:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004724:	4a3d      	ldr	r2, [pc, #244]	@ (800481c <Cmd_iou_get_parameters+0x18c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d103      	bne.n	8004732 <Cmd_iou_get_parameters+0xa2>
    	uart_choose_usart2 = 1;
 800472a:	4b3d      	ldr	r3, [pc, #244]	@ (8004820 <Cmd_iou_get_parameters+0x190>)
 800472c:	2201      	movs	r2, #1
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	e002      	b.n	8004738 <Cmd_iou_get_parameters+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8004732:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <Cmd_iou_get_parameters+0x190>)
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_GET_PARAMETERS;
 8004738:	2313      	movs	r3, #19
 800473a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800473e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004742:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8004746:	2201      	movs	r2, #1
 8004748:	2105      	movs	r1, #5
 800474a:	f007 fa67 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800474e:	f107 020f 	add.w	r2, r7, #15
 8004752:	f107 0110 	add.w	r1, r7, #16
 8004756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800475a:	4618      	mov	r0, r3
 800475c:	f007 fb0c 	bl	800bd78 <frame_encode>

  //  SCH_Delay(5);.
    if (frame_len > 0) {
 8004760:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8004764:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02c      	beq.n	80047c8 <Cmd_iou_get_parameters+0x138>
        for (int i = 0; i < frame_len; i++) {
 800476e:	2300      	movs	r3, #0
 8004770:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004774:	e010      	b.n	8004798 <Cmd_iou_get_parameters+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8004776:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800477a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800477e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004782:	4413      	add	r3, r2
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	4619      	mov	r1, r3
 8004788:	4826      	ldr	r0, [pc, #152]	@ (8004824 <Cmd_iou_get_parameters+0x194>)
 800478a:	f7fd fadd 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800478e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004792:	3301      	adds	r3, #1
 8004794:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004798:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800479c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80047a8:	4293      	cmp	r3, r2
 80047aa:	dbe4      	blt.n	8004776 <Cmd_iou_get_parameters+0xe6>
        }
		set_fsp_packet(encoded_frame, frame_len);
 80047ac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80047b0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	f107 0310 	add.w	r3, r7, #16
 80047ba:	4611      	mov	r1, r2
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fd fd5b 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80047c2:	f7fd fd41 	bl	8002248 <set_send_flag>
 80047c6:	e01d      	b.n	8004804 <Cmd_iou_get_parameters+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80047c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047cc:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80047d0:	2201      	movs	r2, #1
 80047d2:	2105      	movs	r1, #5
 80047d4:	f007 fa22 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80047d8:	f107 020f 	add.w	r2, r7, #15
 80047dc:	f107 0110 	add.w	r1, r7, #16
 80047e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80047e4:	4618      	mov	r0, r3
 80047e6:	f007 fac7 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80047ea:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80047ee:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80047f2:	781a      	ldrb	r2, [r3, #0]
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	4611      	mov	r1, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd fd3c 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004800:	f7fd fd22 	bl	8002248 <set_send_flag>

    }

    return CMDLINE_PENDING;
 8004804:	2305      	movs	r3, #5
}
 8004806:	4618      	mov	r0, r3
 8004808:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40020000 	.word	0x40020000
 8004814:	40005000 	.word	0x40005000
 8004818:	200058b8 	.word	0x200058b8
 800481c:	40004400 	.word	0x40004400
 8004820:	200058b9 	.word	0x200058b9
 8004824:	40011000 	.word	0x40011000

08004828 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	041a      	lsls	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	619a      	str	r2, [r3, #24]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <PDU_create_task>:
};



void PDU_create_task(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PDU_task_context.taskHandle, &PDU_task_context.taskProperty);
 800484c:	4906      	ldr	r1, [pc, #24]	@ (8004868 <PDU_create_task+0x20>)
 800484e:	4807      	ldr	r0, [pc, #28]	@ (800486c <PDU_create_task+0x24>)
 8004850:	f007 f860 	bl	800b914 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 8004854:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004858:	2006      	movs	r0, #6
 800485a:	f007 f82f 	bl	800b8bc <SCH_TIM_Start>
    Ringbuf_init();
 800485e:	f7fd f8cd 	bl	80019fc <Ringbuf_init>
}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000054 	.word	0x20000054
 800486c:	20000050 	.word	0x20000050

08004870 <PDU_update_task>:


volatile uint8_t timeout_counter_pdu = 0;

void PDU_update_task(void) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 8004876:	4b41      	ldr	r3, [pc, #260]	@ (800497c <PDU_update_task+0x10c>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d079      	beq.n	8004974 <PDU_update_task+0x104>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PDU))
 8004880:	2006      	movs	r0, #6
 8004882:	f007 f831 	bl	800b8e8 <SCH_TIM_HasCompleted>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d073      	beq.n	8004974 <PDU_update_task+0x104>
		{

			if(!sendFlag){
 800488c:	4b3c      	ldr	r3, [pc, #240]	@ (8004980 <PDU_update_task+0x110>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d16e      	bne.n	8004974 <PDU_update_task+0x104>
				if(!send_rs422){
 8004896:	4b3b      	ldr	r3, [pc, #236]	@ (8004984 <PDU_update_task+0x114>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d130      	bne.n	8004902 <PDU_update_task+0x92>
					if(receive_iouFlag&&receive_pmuFlag){
 80048a0:	4b39      	ldr	r3, [pc, #228]	@ (8004988 <PDU_update_task+0x118>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d02b      	beq.n	8004902 <PDU_update_task+0x92>
 80048aa:	4b38      	ldr	r3, [pc, #224]	@ (800498c <PDU_update_task+0x11c>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d026      	beq.n	8004902 <PDU_update_task+0x92>
						switch_board(0);
 80048b4:	2000      	movs	r0, #0
 80048b6:	f003 f951 	bl	8007b5c <switch_board>
						Uart_flush(USART1);
 80048ba:	4835      	ldr	r0, [pc, #212]	@ (8004990 <PDU_update_task+0x120>)
 80048bc:	f7fd fba6 	bl	800200c <Uart_flush>

						frame = pdu_frame;
 80048c0:	4b34      	ldr	r3, [pc, #208]	@ (8004994 <PDU_update_task+0x124>)
 80048c2:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(pdu_frame);
 80048c4:	2309      	movs	r3, #9
 80048c6:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e00a      	b.n	80048e4 <PDU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	4619      	mov	r1, r3
 80048d8:	482d      	ldr	r0, [pc, #180]	@ (8004990 <PDU_update_task+0x120>)
 80048da:	f7fd fa35 	bl	8001d48 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3301      	adds	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	dbf0      	blt.n	80048ce <PDU_update_task+0x5e>
						}
						receive_pduFlag = 0;
 80048ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004998 <PDU_update_task+0x128>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80048f2:	4b24      	ldr	r3, [pc, #144]	@ (8004984 <PDU_update_task+0x114>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PDU, PDU_PERIOD);
 80048f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80048fc:	2006      	movs	r0, #6
 80048fe:	f006 ffdd 	bl	800b8bc <SCH_TIM_Start>
					}
				}
				if(!receive_pduFlag){
 8004902:	4b25      	ldr	r3, [pc, #148]	@ (8004998 <PDU_update_task+0x128>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d133      	bne.n	8004974 <PDU_update_task+0x104>
					timeout_counter_pdu++;
 800490c:	4b23      	ldr	r3, [pc, #140]	@ (800499c <PDU_update_task+0x12c>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	3301      	adds	r3, #1
 8004914:	b2da      	uxtb	r2, r3
 8004916:	4b21      	ldr	r3, [pc, #132]	@ (800499c <PDU_update_task+0x12c>)
 8004918:	701a      	strb	r2, [r3, #0]
					if (timeout_counter_pdu > 2){
 800491a:	4b20      	ldr	r3, [pc, #128]	@ (800499c <PDU_update_task+0x12c>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d927      	bls.n	8004974 <PDU_update_task+0x104>
						disconnect_counter_pdu++;
 8004924:	4b1e      	ldr	r3, [pc, #120]	@ (80049a0 <PDU_update_task+0x130>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	3301      	adds	r3, #1
 800492c:	b2da      	uxtb	r2, r3
 800492e:	4b1c      	ldr	r3, [pc, #112]	@ (80049a0 <PDU_update_task+0x130>)
 8004930:	701a      	strb	r2, [r3, #0]
						timeout_counter_pdu = 0;
 8004932:	4b1a      	ldr	r3, [pc, #104]	@ (800499c <PDU_update_task+0x12c>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
						receive_pduFlag = 1;
 8004938:	4b17      	ldr	r3, [pc, #92]	@ (8004998 <PDU_update_task+0x128>)
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
						send_rs422 = 0;
 800493e:	4b11      	ldr	r3, [pc, #68]	@ (8004984 <PDU_update_task+0x114>)
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
						if(disconnect_counter_pdu > 4){
 8004944:	4b16      	ldr	r3, [pc, #88]	@ (80049a0 <PDU_update_task+0x130>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b04      	cmp	r3, #4
 800494c:	d912      	bls.n	8004974 <PDU_update_task+0x104>
							disconnect_counter_pdu = 5;
 800494e:	4b14      	ldr	r3, [pc, #80]	@ (80049a0 <PDU_update_task+0x130>)
 8004950:	2205      	movs	r2, #5
 8004952:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 54; i++) {
 8004954:	2301      	movs	r3, #1
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	e009      	b.n	800496e <PDU_update_task+0xfe>
									nextBuffer[i + 42] = 0xFF; //43   pay1    + 44  pay2        96-<54
 800495a:	4b12      	ldr	r3, [pc, #72]	@ (80049a4 <PDU_update_task+0x134>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	332a      	adds	r3, #42	@ 0x2a
 8004962:	4413      	add	r3, r2
 8004964:	22ff      	movs	r2, #255	@ 0xff
 8004966:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 54; i++) {
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	3301      	adds	r3, #1
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b36      	cmp	r3, #54	@ 0x36
 8004972:	ddf2      	ble.n	800495a <PDU_update_task+0xea>
					}
				}
			}
		}
	}
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	200059e1 	.word	0x200059e1
 8004980:	200057b1 	.word	0x200057b1
 8004984:	200058b6 	.word	0x200058b6
 8004988:	20000042 	.word	0x20000042
 800498c:	20000041 	.word	0x20000041
 8004990:	40011000 	.word	0x40011000
 8004994:	20000044 	.word	0x20000044
 8004998:	20000040 	.word	0x20000040
 800499c:	200058ba 	.word	0x200058ba
 80049a0:	200058b4 	.word	0x200058b4
 80049a4:	200003ec 	.word	0x200003ec

080049a8 <Cmd_pdu_set_channel>:


#define DEST_ADDR FSP_ADR_PDU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pdu_set_channel(int argc, char *argv[])
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80049ae:	af02      	add	r7, sp, #8
 80049b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049b8:	6018      	str	r0, [r3, #0]
 80049ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80049c2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 80049c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	dc01      	bgt.n	80049d6 <Cmd_pdu_set_channel+0x2e>
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0db      	b.n	8004b8e <Cmd_pdu_set_channel+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 80049d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	dd01      	ble.n	80049e8 <Cmd_pdu_set_channel+0x40>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e0d2      	b.n	8004b8e <Cmd_pdu_set_channel+0x1e6>
    uint8_t channel = atoi(argv[1]);
 80049e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049ec:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3304      	adds	r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f00a f924 	bl	800ec44 <atoi>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8004a02:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004a06:	2b09      	cmp	r3, #9
 8004a08:	d901      	bls.n	8004a0e <Cmd_pdu_set_channel+0x66>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e0bf      	b.n	8004b8e <Cmd_pdu_set_channel+0x1e6>

    uint8_t state = atoi(argv[2]);
 8004a0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a12:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f00a f911 	bl	800ec44 <atoi>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004a28:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d901      	bls.n	8004a34 <Cmd_pdu_set_channel+0x8c>
 8004a30:	2304      	movs	r3, #4
 8004a32:	e0ac      	b.n	8004b8e <Cmd_pdu_set_channel+0x1e6>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004a34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a38:	4857      	ldr	r0, [pc, #348]	@ (8004b98 <Cmd_pdu_set_channel+0x1f0>)
 8004a3a:	f7ff fef5 	bl	8004828 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004a3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004a42:	4855      	ldr	r0, [pc, #340]	@ (8004b98 <Cmd_pdu_set_channel+0x1f0>)
 8004a44:	f7ff fef0 	bl	8004828 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004a48:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a4c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a56:	3b01      	subs	r3, #1
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004a5e:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	4413      	add	r3, r2
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004a6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004a70:	4a4a      	ldr	r2, [pc, #296]	@ (8004b9c <Cmd_pdu_set_channel+0x1f4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d103      	bne.n	8004a7e <Cmd_pdu_set_channel+0xd6>
    	uart_choose_uart5 = 1;
 8004a76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba0 <Cmd_pdu_set_channel+0x1f8>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	e002      	b.n	8004a84 <Cmd_pdu_set_channel+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8004a7e:	4b48      	ldr	r3, [pc, #288]	@ (8004ba0 <Cmd_pdu_set_channel+0x1f8>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004a84:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004a88:	4a46      	ldr	r2, [pc, #280]	@ (8004ba4 <Cmd_pdu_set_channel+0x1fc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d103      	bne.n	8004a96 <Cmd_pdu_set_channel+0xee>
    	uart_choose_usart2 = 1;
 8004a8e:	4b46      	ldr	r3, [pc, #280]	@ (8004ba8 <Cmd_pdu_set_channel+0x200>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	e002      	b.n	8004a9c <Cmd_pdu_set_channel+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 8004a96:	4b44      	ldr	r3, [pc, #272]	@ (8004ba8 <Cmd_pdu_set_channel+0x200>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_CHANNEL;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = channel;
 8004aa2:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004aa6:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 8004aaa:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004aae:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004ab2:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004ab6:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004aba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f007 f8d0 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004acc:	f107 020f 	add.w	r2, r7, #15
 8004ad0:	f107 0110 	add.w	r1, r7, #16
 8004ad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f007 f94d 	bl	800bd78 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004ade:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ae2:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d02c      	beq.n	8004b46 <Cmd_pdu_set_channel+0x19e>
        for (int i = 0; i < frame_len; i++) {
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004af2:	e010      	b.n	8004b16 <Cmd_pdu_set_channel+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 8004af4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004af8:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004afc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b00:	4413      	add	r3, r2
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	4619      	mov	r1, r3
 8004b06:	4829      	ldr	r0, [pc, #164]	@ (8004bac <Cmd_pdu_set_channel+0x204>)
 8004b08:	f7fd f91e 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004b0c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b10:	3301      	adds	r3, #1
 8004b12:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004b16:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b1a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004b26:	4293      	cmp	r3, r2
 8004b28:	dbe4      	blt.n	8004af4 <Cmd_pdu_set_channel+0x14c>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004b2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b2e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	f107 0310 	add.w	r3, r7, #16
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd fb9c 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8004b40:	f7fd fb82 	bl	8002248 <set_send_flag>
 8004b44:	e022      	b.n	8004b8c <Cmd_pdu_set_channel+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004b46:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004b4a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004b4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	2301      	movs	r3, #1
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2303      	movs	r3, #3
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f007 f886 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004b60:	f107 020f 	add.w	r2, r7, #15
 8004b64:	f107 0110 	add.w	r1, r7, #16
 8004b68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f007 f903 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004b72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b76:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004b7a:	781a      	ldrb	r2, [r3, #0]
 8004b7c:	f107 0310 	add.w	r3, r7, #16
 8004b80:	4611      	mov	r1, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fd fb78 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004b88:	f7fd fb5e 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004b8c:	2305      	movs	r3, #5
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40020000 	.word	0x40020000
 8004b9c:	40005000 	.word	0x40005000
 8004ba0:	200058b8 	.word	0x200058b8
 8004ba4:	40004400 	.word	0x40004400
 8004ba8:	200058b9 	.word	0x200058b9
 8004bac:	40011000 	.word	0x40011000

08004bb0 <Cmd_pdu_set_buck>:

int Cmd_pdu_set_buck(int argc, char *argv[])
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004bb6:	af02      	add	r7, sp, #8
 8004bb8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bbc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004bc0:	6018      	str	r0, [r3, #0]
 8004bc2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bc6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004bca:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8004bcc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bd0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	dc01      	bgt.n	8004bde <Cmd_pdu_set_buck+0x2e>
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e0db      	b.n	8004d96 <Cmd_pdu_set_buck+0x1e6>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8004bde:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004be2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	dd01      	ble.n	8004bf0 <Cmd_pdu_set_buck+0x40>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e0d2      	b.n	8004d96 <Cmd_pdu_set_buck+0x1e6>
    uint8_t buck = atoi(argv[1]);
 8004bf0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bf4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f00a f820 	bl	800ec44 <atoi>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 8004c0a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004c0e:	2b06      	cmp	r3, #6
 8004c10:	d901      	bls.n	8004c16 <Cmd_pdu_set_buck+0x66>
 8004c12:	2304      	movs	r3, #4
 8004c14:	e0bf      	b.n	8004d96 <Cmd_pdu_set_buck+0x1e6>

    uint8_t state = atoi(argv[2]);
 8004c16:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c1a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f00a f80d 	bl	800ec44 <atoi>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004c30:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d901      	bls.n	8004c3c <Cmd_pdu_set_buck+0x8c>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	e0ac      	b.n	8004d96 <Cmd_pdu_set_buck+0x1e6>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004c3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c40:	4857      	ldr	r0, [pc, #348]	@ (8004da0 <Cmd_pdu_set_buck+0x1f0>)
 8004c42:	f7ff fdf1 	bl	8004828 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004c46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004c4a:	4855      	ldr	r0, [pc, #340]	@ (8004da0 <Cmd_pdu_set_buck+0x1f0>)
 8004c4c:	f7ff fdec 	bl	8004828 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004c50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c54:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004c66:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004c74:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004c78:	4a4a      	ldr	r2, [pc, #296]	@ (8004da4 <Cmd_pdu_set_buck+0x1f4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d103      	bne.n	8004c86 <Cmd_pdu_set_buck+0xd6>
    	uart_choose_uart5 = 1;
 8004c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004da8 <Cmd_pdu_set_buck+0x1f8>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e002      	b.n	8004c8c <Cmd_pdu_set_buck+0xdc>
    }else{
    	uart_choose_uart5 = 0;
 8004c86:	4b48      	ldr	r3, [pc, #288]	@ (8004da8 <Cmd_pdu_set_buck+0x1f8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004c8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004c90:	4a46      	ldr	r2, [pc, #280]	@ (8004dac <Cmd_pdu_set_buck+0x1fc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d103      	bne.n	8004c9e <Cmd_pdu_set_buck+0xee>
    	uart_choose_usart2 = 1;
 8004c96:	4b46      	ldr	r3, [pc, #280]	@ (8004db0 <Cmd_pdu_set_buck+0x200>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e002      	b.n	8004ca4 <Cmd_pdu_set_buck+0xf4>
    }else{
    	uart_choose_usart2 = 0;
 8004c9e:	4b44      	ldr	r3, [pc, #272]	@ (8004db0 <Cmd_pdu_set_buck+0x200>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_BUCK;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[2];
    payload[0]  = buck;
 8004caa:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004cae:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
    payload[1]  = state;
 8004cb2:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8004cb6:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004cba:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004cbe:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004cc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	2301      	movs	r3, #1
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2303      	movs	r3, #3
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f006 ffcc 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004cd4:	f107 020f 	add.w	r2, r7, #15
 8004cd8:	f107 0110 	add.w	r1, r7, #16
 8004cdc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f007 f849 	bl	800bd78 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8004ce6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cea:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02c      	beq.n	8004d4e <Cmd_pdu_set_buck+0x19e>
        for (int i = 0; i < frame_len; i++) {
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004cfa:	e010      	b.n	8004d1e <Cmd_pdu_set_buck+0x16e>
            Uart_write(USART1, encoded_frame[i]);
 8004cfc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d00:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004d04:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d08:	4413      	add	r3, r2
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4829      	ldr	r0, [pc, #164]	@ (8004db4 <Cmd_pdu_set_buck+0x204>)
 8004d10:	f7fd f81a 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004d14:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d18:	3301      	adds	r3, #1
 8004d1a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004d1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d22:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	dbe4      	blt.n	8004cfc <Cmd_pdu_set_buck+0x14c>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004d32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d36:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d3a:	781a      	ldrb	r2, [r3, #0]
 8004d3c:	f107 0310 	add.w	r3, r7, #16
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fd fa98 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8004d48:	f7fd fa7e 	bl	8002248 <set_send_flag>
 8004d4c:	e022      	b.n	8004d94 <Cmd_pdu_set_buck+0x1e4>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004d4e:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004d52:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004d56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2303      	movs	r3, #3
 8004d62:	2202      	movs	r2, #2
 8004d64:	f006 ff82 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004d68:	f107 020f 	add.w	r2, r7, #15
 8004d6c:	f107 0110 	add.w	r1, r7, #16
 8004d70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004d74:	4618      	mov	r0, r3
 8004d76:	f006 ffff 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004d7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d7e:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004d82:	781a      	ldrb	r2, [r3, #0]
 8004d84:	f107 0310 	add.w	r3, r7, #16
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fd fa74 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004d90:	f7fd fa5a 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8004d94:	2305      	movs	r3, #5
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40020000 	.word	0x40020000
 8004da4:	40005000 	.word	0x40005000
 8004da8:	200058b8 	.word	0x200058b8
 8004dac:	40004400 	.word	0x40004400
 8004db0:	200058b9 	.word	0x200058b9
 8004db4:	40011000 	.word	0x40011000

08004db8 <Cmd_pdu_set_all>:

int Cmd_pdu_set_all(int argc, char *argv[])
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004dbe:	af02      	add	r7, sp, #8
 8004dc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dc4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004dc8:	6018      	str	r0, [r3, #0]
 8004dca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dce:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004dd2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004dd4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dd8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	dc01      	bgt.n	8004de6 <Cmd_pdu_set_all+0x2e>
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0c4      	b.n	8004f70 <Cmd_pdu_set_all+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004de6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	dd01      	ble.n	8004df8 <Cmd_pdu_set_all+0x40>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e0bb      	b.n	8004f70 <Cmd_pdu_set_all+0x1b8>

    uint8_t state = atoi(argv[1]);
 8004df8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dfc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3304      	adds	r3, #4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f009 ff1c 	bl	800ec44 <atoi>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1) return CMDLINE_INVALID_ARG;
 8004e12:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d901      	bls.n	8004e1e <Cmd_pdu_set_all+0x66>
 8004e1a:	2304      	movs	r3, #4
 8004e1c:	e0a8      	b.n	8004f70 <Cmd_pdu_set_all+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004e1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e22:	4856      	ldr	r0, [pc, #344]	@ (8004f7c <Cmd_pdu_set_all+0x1c4>)
 8004e24:	f7ff fd00 	bl	8004828 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8004e28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e2c:	4853      	ldr	r0, [pc, #332]	@ (8004f7c <Cmd_pdu_set_all+0x1c4>)
 8004e2e:	f7ff fcfb 	bl	8004828 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8004e32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e36:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e40:	3b01      	subs	r3, #1
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004e48:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	4413      	add	r3, r2
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8004e56:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004e5a:	4a49      	ldr	r2, [pc, #292]	@ (8004f80 <Cmd_pdu_set_all+0x1c8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d103      	bne.n	8004e68 <Cmd_pdu_set_all+0xb0>
    	uart_choose_uart5 = 1;
 8004e60:	4b48      	ldr	r3, [pc, #288]	@ (8004f84 <Cmd_pdu_set_all+0x1cc>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e002      	b.n	8004e6e <Cmd_pdu_set_all+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8004e68:	4b46      	ldr	r3, [pc, #280]	@ (8004f84 <Cmd_pdu_set_all+0x1cc>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8004e6e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004e72:	4a45      	ldr	r2, [pc, #276]	@ (8004f88 <Cmd_pdu_set_all+0x1d0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d103      	bne.n	8004e80 <Cmd_pdu_set_all+0xc8>
    	uart_choose_usart2 = 1;
 8004e78:	4b44      	ldr	r3, [pc, #272]	@ (8004f8c <Cmd_pdu_set_all+0x1d4>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e002      	b.n	8004e86 <Cmd_pdu_set_all+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8004e80:	4b42      	ldr	r3, [pc, #264]	@ (8004f8c <Cmd_pdu_set_all+0x1d4>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_SET_ALL;
 8004e86:	2303      	movs	r3, #3
 8004e88:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = state;
 8004e8c:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004e90:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004e94:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004e98:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004e9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f006 fedf 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004eae:	f107 020f 	add.w	r2, r7, #15
 8004eb2:	f107 0110 	add.w	r1, r7, #16
 8004eb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f006 ff5c 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 8004ec0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ec4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d02c      	beq.n	8004f28 <Cmd_pdu_set_all+0x170>
        for (int i = 0; i < frame_len; i++) {
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004ed4:	e010      	b.n	8004ef8 <Cmd_pdu_set_all+0x140>
            Uart_write(USART1, encoded_frame[i]);
 8004ed6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004eda:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8004ede:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004ee2:	4413      	add	r3, r2
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4829      	ldr	r0, [pc, #164]	@ (8004f90 <Cmd_pdu_set_all+0x1d8>)
 8004eea:	f7fc ff2d 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8004eee:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004ef8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004efc:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	dbe4      	blt.n	8004ed6 <Cmd_pdu_set_all+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8004f0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f10:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	f107 0310 	add.w	r3, r7, #16
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fd f9ab 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8004f22:	f7fd f991 	bl	8002248 <set_send_flag>
 8004f26:	e022      	b.n	8004f6e <Cmd_pdu_set_all+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8004f28:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004f2c:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8004f30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	2301      	movs	r3, #1
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f006 fe95 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8004f42:	f107 020f 	add.w	r2, r7, #15
 8004f46:	f107 0110 	add.w	r1, r7, #16
 8004f4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f006 ff12 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8004f54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f58:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	f107 0310 	add.w	r3, r7, #16
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fd f987 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8004f6a:	f7fd f96d 	bl	8002248 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8004f6e:	2305      	movs	r3, #5
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40020000 	.word	0x40020000
 8004f80:	40005000 	.word	0x40005000
 8004f84:	200058b8 	.word	0x200058b8
 8004f88:	40004400 	.word	0x40004400
 8004f8c:	200058b9 	.word	0x200058b9
 8004f90:	40011000 	.word	0x40011000

08004f94 <Cmd_pdu_get_channel>:

int Cmd_pdu_get_channel(int argc, char *argv[])
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8004f9a:	af02      	add	r7, sp, #8
 8004f9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fa0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004fa4:	6018      	str	r0, [r3, #0]
 8004fa6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004faa:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004fae:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8004fb0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fb4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	dc01      	bgt.n	8004fc2 <Cmd_pdu_get_channel+0x2e>
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e0c4      	b.n	800514c <Cmd_pdu_get_channel+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8004fc2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fc6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	dd01      	ble.n	8004fd4 <Cmd_pdu_get_channel+0x40>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e0bb      	b.n	800514c <Cmd_pdu_get_channel+0x1b8>
    uint8_t channel = atoi(argv[1]);
 8004fd4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fd8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f009 fe2e 	bl	800ec44 <atoi>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (channel > 9)   return CMDLINE_INVALID_ARG;
 8004fee:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8004ff2:	2b09      	cmp	r3, #9
 8004ff4:	d901      	bls.n	8004ffa <Cmd_pdu_get_channel+0x66>
 8004ff6:	2304      	movs	r3, #4
 8004ff8:	e0a8      	b.n	800514c <Cmd_pdu_get_channel+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8004ffa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ffe:	4856      	ldr	r0, [pc, #344]	@ (8005158 <Cmd_pdu_get_channel+0x1c4>)
 8005000:	f7ff fc12 	bl	8004828 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005004:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005008:	4853      	ldr	r0, [pc, #332]	@ (8005158 <Cmd_pdu_get_channel+0x1c4>)
 800500a:	f7ff fc0d 	bl	8004828 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800500e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005012:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800501c:	3b01      	subs	r3, #1
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005024:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	4413      	add	r3, r2
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005032:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005036:	4a49      	ldr	r2, [pc, #292]	@ (800515c <Cmd_pdu_get_channel+0x1c8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d103      	bne.n	8005044 <Cmd_pdu_get_channel+0xb0>
    	uart_choose_uart5 = 1;
 800503c:	4b48      	ldr	r3, [pc, #288]	@ (8005160 <Cmd_pdu_get_channel+0x1cc>)
 800503e:	2201      	movs	r2, #1
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	e002      	b.n	800504a <Cmd_pdu_get_channel+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005044:	4b46      	ldr	r3, [pc, #280]	@ (8005160 <Cmd_pdu_get_channel+0x1cc>)
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 800504a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800504e:	4a45      	ldr	r2, [pc, #276]	@ (8005164 <Cmd_pdu_get_channel+0x1d0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d103      	bne.n	800505c <Cmd_pdu_get_channel+0xc8>
    	uart_choose_usart2 = 1;
 8005054:	4b44      	ldr	r3, [pc, #272]	@ (8005168 <Cmd_pdu_get_channel+0x1d4>)
 8005056:	2201      	movs	r2, #1
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e002      	b.n	8005062 <Cmd_pdu_get_channel+0xce>
    }else{
    	uart_choose_usart2 = 0;
 800505c:	4b42      	ldr	r3, [pc, #264]	@ (8005168 <Cmd_pdu_get_channel+0x1d4>)
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
    }



    uint8_t cmd  = CMD_CODE_PDU_GET_CHANNEL;
 8005062:	2304      	movs	r3, #4
 8005064:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = channel;
 8005068:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800506c:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005070:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8005074:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005078:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	2301      	movs	r3, #1
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	2303      	movs	r3, #3
 8005084:	2201      	movs	r2, #1
 8005086:	f006 fdf1 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800508a:	f107 020f 	add.w	r2, r7, #15
 800508e:	f107 0110 	add.w	r1, r7, #16
 8005092:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005096:	4618      	mov	r0, r3
 8005098:	f006 fe6e 	bl	800bd78 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 800509c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050a0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d02c      	beq.n	8005104 <Cmd_pdu_get_channel+0x170>
        for (int i = 0; i < frame_len; i++) {
 80050aa:	2300      	movs	r3, #0
 80050ac:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80050b0:	e010      	b.n	80050d4 <Cmd_pdu_get_channel+0x140>
            Uart_write(USART1, encoded_frame[i]);
 80050b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050b6:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 80050ba:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050be:	4413      	add	r3, r2
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	4619      	mov	r1, r3
 80050c4:	4829      	ldr	r0, [pc, #164]	@ (800516c <Cmd_pdu_get_channel+0x1d8>)
 80050c6:	f7fc fe3f 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80050ca:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050ce:	3301      	adds	r3, #1
 80050d0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80050d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050d8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80050e4:	4293      	cmp	r3, r2
 80050e6:	dbe4      	blt.n	80050b2 <Cmd_pdu_get_channel+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80050e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050ec:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80050f0:	781a      	ldrb	r2, [r3, #0]
 80050f2:	f107 0310 	add.w	r3, r7, #16
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fd f8bd 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 80050fe:	f7fd f8a3 	bl	8002248 <set_send_flag>
 8005102:	e022      	b.n	800514a <Cmd_pdu_get_channel+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005104:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8005108:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 800510c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	2301      	movs	r3, #1
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	2303      	movs	r3, #3
 8005118:	2201      	movs	r2, #1
 800511a:	f006 fda7 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800511e:	f107 020f 	add.w	r2, r7, #15
 8005122:	f107 0110 	add.w	r1, r7, #16
 8005126:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800512a:	4618      	mov	r0, r3
 800512c:	f006 fe24 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005130:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005134:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	f107 0310 	add.w	r3, r7, #16
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f7fd f899 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005146:	f7fd f87f 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800514a:	2305      	movs	r3, #5
}
 800514c:	4618      	mov	r0, r3
 800514e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40020000 	.word	0x40020000
 800515c:	40005000 	.word	0x40005000
 8005160:	200058b8 	.word	0x200058b8
 8005164:	40004400 	.word	0x40004400
 8005168:	200058b9 	.word	0x200058b9
 800516c:	40011000 	.word	0x40011000

08005170 <Cmd_pdu_get_buck>:

int Cmd_pdu_get_buck(int argc, char *argv[])
{
 8005170:	b580      	push	{r7, lr}
 8005172:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005176:	af02      	add	r7, sp, #8
 8005178:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800517c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005180:	6018      	str	r0, [r3, #0]
 8005182:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005186:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800518a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 800518c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005190:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b02      	cmp	r3, #2
 8005198:	dc01      	bgt.n	800519e <Cmd_pdu_get_buck+0x2e>
 800519a:	2303      	movs	r3, #3
 800519c:	e0c4      	b.n	8005328 <Cmd_pdu_get_buck+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 800519e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80051a2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	dd01      	ble.n	80051b0 <Cmd_pdu_get_buck+0x40>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e0bb      	b.n	8005328 <Cmd_pdu_get_buck+0x1b8>
    uint8_t buck = atoi(argv[1]);
 80051b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80051b4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3304      	adds	r3, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f009 fd40 	bl	800ec44 <atoi>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (buck > 6)   return CMDLINE_INVALID_ARG;
 80051ca:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	d901      	bls.n	80051d6 <Cmd_pdu_get_buck+0x66>
 80051d2:	2304      	movs	r3, #4
 80051d4:	e0a8      	b.n	8005328 <Cmd_pdu_get_buck+0x1b8>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80051d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80051da:	4856      	ldr	r0, [pc, #344]	@ (8005334 <Cmd_pdu_get_buck+0x1c4>)
 80051dc:	f7ff fb24 	bl	8004828 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80051e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051e4:	4853      	ldr	r0, [pc, #332]	@ (8005334 <Cmd_pdu_get_buck+0x1c4>)
 80051e6:	f7ff fb1f 	bl	8004828 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80051ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80051ee:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051f8:	3b01      	subs	r3, #1
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005200:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	4413      	add	r3, r2
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800520e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005212:	4a49      	ldr	r2, [pc, #292]	@ (8005338 <Cmd_pdu_get_buck+0x1c8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d103      	bne.n	8005220 <Cmd_pdu_get_buck+0xb0>
    	uart_choose_uart5 = 1;
 8005218:	4b48      	ldr	r3, [pc, #288]	@ (800533c <Cmd_pdu_get_buck+0x1cc>)
 800521a:	2201      	movs	r2, #1
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	e002      	b.n	8005226 <Cmd_pdu_get_buck+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005220:	4b46      	ldr	r3, [pc, #280]	@ (800533c <Cmd_pdu_get_buck+0x1cc>)
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005226:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800522a:	4a45      	ldr	r2, [pc, #276]	@ (8005340 <Cmd_pdu_get_buck+0x1d0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d103      	bne.n	8005238 <Cmd_pdu_get_buck+0xc8>
    	uart_choose_usart2 = 1;
 8005230:	4b44      	ldr	r3, [pc, #272]	@ (8005344 <Cmd_pdu_get_buck+0x1d4>)
 8005232:	2201      	movs	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e002      	b.n	800523e <Cmd_pdu_get_buck+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8005238:	4b42      	ldr	r3, [pc, #264]	@ (8005344 <Cmd_pdu_get_buck+0x1d4>)
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_GET_BUCK;
 800523e:	2305      	movs	r3, #5
 8005240:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
    uint8_t payload[1];
    payload[0]  = buck;
 8005244:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005248:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800524c:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8005250:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005254:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	2301      	movs	r3, #1
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	2303      	movs	r3, #3
 8005260:	2201      	movs	r2, #1
 8005262:	f006 fd03 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005266:	f107 020f 	add.w	r2, r7, #15
 800526a:	f107 0110 	add.w	r1, r7, #16
 800526e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005272:	4618      	mov	r0, r3
 8005274:	f006 fd80 	bl	800bd78 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8005278:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800527c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d02c      	beq.n	80052e0 <Cmd_pdu_get_buck+0x170>
        for (int i = 0; i < frame_len; i++) {
 8005286:	2300      	movs	r3, #0
 8005288:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800528c:	e010      	b.n	80052b0 <Cmd_pdu_get_buck+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800528e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005292:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8005296:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800529a:	4413      	add	r3, r2
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	4619      	mov	r1, r3
 80052a0:	4829      	ldr	r0, [pc, #164]	@ (8005348 <Cmd_pdu_get_buck+0x1d8>)
 80052a2:	f7fc fd51 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80052a6:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80052aa:	3301      	adds	r3, #1
 80052ac:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80052b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052b4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80052c0:	4293      	cmp	r3, r2
 80052c2:	dbe4      	blt.n	800528e <Cmd_pdu_get_buck+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80052c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052c8:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80052cc:	781a      	ldrb	r2, [r3, #0]
 80052ce:	f107 0310 	add.w	r3, r7, #16
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fc ffcf 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 80052da:	f7fc ffb5 	bl	8002248 <set_send_flag>
 80052de:	e022      	b.n	8005326 <Cmd_pdu_get_buck+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80052e0:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80052e4:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80052e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	2301      	movs	r3, #1
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	2303      	movs	r3, #3
 80052f4:	2201      	movs	r2, #1
 80052f6:	f006 fcb9 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80052fa:	f107 020f 	add.w	r2, r7, #15
 80052fe:	f107 0110 	add.w	r1, r7, #16
 8005302:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005306:	4618      	mov	r0, r3
 8005308:	f006 fd36 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 800530c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005310:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	f107 0310 	add.w	r3, r7, #16
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f7fc ffab 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005322:	f7fc ff91 	bl	8002248 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8005326:	2305      	movs	r3, #5
}
 8005328:	4618      	mov	r0, r3
 800532a:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40020000 	.word	0x40020000
 8005338:	40005000 	.word	0x40005000
 800533c:	200058b8 	.word	0x200058b8
 8005340:	40004400 	.word	0x40004400
 8005344:	200058b9 	.word	0x200058b9
 8005348:	40011000 	.word	0x40011000

0800534c <Cmd_pdu_get_all>:

int Cmd_pdu_get_all(int argc, char *argv[])
{
 800534c:	b580      	push	{r7, lr}
 800534e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005352:	af00      	add	r7, sp, #0
 8005354:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005358:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800535c:	6018      	str	r0, [r3, #0]
 800535e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005362:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005366:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005368:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800536c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	dc01      	bgt.n	800537a <Cmd_pdu_get_all+0x2e>
 8005376:	2303      	movs	r3, #3
 8005378:	e0a3      	b.n	80054c2 <Cmd_pdu_get_all+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 800537a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800537e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b02      	cmp	r3, #2
 8005386:	dd01      	ble.n	800538c <Cmd_pdu_get_all+0x40>
 8005388:	2302      	movs	r3, #2
 800538a:	e09a      	b.n	80054c2 <Cmd_pdu_get_all+0x176>
:  --> 00   -> PDU (*)
:  --> 01   -> PMU
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 800538c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005390:	484e      	ldr	r0, [pc, #312]	@ (80054cc <Cmd_pdu_get_all+0x180>)
 8005392:	f7ff fa49 	bl	8004828 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005396:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800539a:	484c      	ldr	r0, [pc, #304]	@ (80054cc <Cmd_pdu_get_all+0x180>)
 800539c:	f7ff fa44 	bl	8004828 <LL_GPIO_ResetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80053a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80053a4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053ae:	3b01      	subs	r3, #1
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80053b6:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	4413      	add	r3, r2
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80053c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80053c8:	4a41      	ldr	r2, [pc, #260]	@ (80054d0 <Cmd_pdu_get_all+0x184>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d103      	bne.n	80053d6 <Cmd_pdu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 80053ce:	4b41      	ldr	r3, [pc, #260]	@ (80054d4 <Cmd_pdu_get_all+0x188>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e002      	b.n	80053dc <Cmd_pdu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80053d6:	4b3f      	ldr	r3, [pc, #252]	@ (80054d4 <Cmd_pdu_get_all+0x188>)
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80053dc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80053e0:	4a3d      	ldr	r2, [pc, #244]	@ (80054d8 <Cmd_pdu_get_all+0x18c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d103      	bne.n	80053ee <Cmd_pdu_get_all+0xa2>
    	uart_choose_usart2 = 1;
 80053e6:	4b3d      	ldr	r3, [pc, #244]	@ (80054dc <Cmd_pdu_get_all+0x190>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e002      	b.n	80053f4 <Cmd_pdu_get_all+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80053ee:	4b3b      	ldr	r3, [pc, #236]	@ (80054dc <Cmd_pdu_get_all+0x190>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PDU_GET_ALL;
 80053f4:	2306      	movs	r3, #6
 80053f6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80053fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80053fe:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005402:	2201      	movs	r2, #1
 8005404:	2103      	movs	r1, #3
 8005406:	f006 fc09 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800540a:	f107 020f 	add.w	r2, r7, #15
 800540e:	f107 0110 	add.w	r1, r7, #16
 8005412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005416:	4618      	mov	r0, r3
 8005418:	f006 fcae 	bl	800bd78 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 800541c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005420:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d02c      	beq.n	8005484 <Cmd_pdu_get_all+0x138>
        for (int i = 0; i < frame_len; i++) {
 800542a:	2300      	movs	r3, #0
 800542c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005430:	e010      	b.n	8005454 <Cmd_pdu_get_all+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005432:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005436:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800543a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800543e:	4413      	add	r3, r2
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	4619      	mov	r1, r3
 8005444:	4826      	ldr	r0, [pc, #152]	@ (80054e0 <Cmd_pdu_get_all+0x194>)
 8005446:	f7fc fc7f 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800544a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800544e:	3301      	adds	r3, #1
 8005450:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005454:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005458:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005464:	4293      	cmp	r3, r2
 8005466:	dbe4      	blt.n	8005432 <Cmd_pdu_get_all+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005468:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800546c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	f107 0310 	add.w	r3, r7, #16
 8005476:	4611      	mov	r1, r2
 8005478:	4618      	mov	r0, r3
 800547a:	f7fc fefd 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 800547e:	f7fc fee3 	bl	8002248 <set_send_flag>
 8005482:	e01d      	b.n	80054c0 <Cmd_pdu_get_all+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005484:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005488:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800548c:	2201      	movs	r2, #1
 800548e:	2103      	movs	r1, #3
 8005490:	f006 fbc4 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005494:	f107 020f 	add.w	r2, r7, #15
 8005498:	f107 0110 	add.w	r1, r7, #16
 800549c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80054a0:	4618      	mov	r0, r3
 80054a2:	f006 fc69 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80054a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80054aa:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	4611      	mov	r1, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fc fede 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80054bc:	f7fc fec4 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80054c0:	2305      	movs	r3, #5
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40020000 	.word	0x40020000
 80054d0:	40005000 	.word	0x40005000
 80054d4:	200058b8 	.word	0x200058b8
 80054d8:	40004400 	.word	0x40004400
 80054dc:	200058b9 	.word	0x200058b9
 80054e0:	40011000 	.word	0x40011000

080054e4 <LL_GPIO_SetOutputPin>:
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	619a      	str	r2, [r3, #24]
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <LL_GPIO_ResetOutputPin>:
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	041a      	lsls	r2, r3, #16
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	619a      	str	r2, [r3, #24]
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <PMU_create_task>:
};



void PMU_create_task(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
    SCH_TASK_CreateTask(&PMU_task_context.taskHandle, &PMU_task_context.taskProperty);
 8005524:	4906      	ldr	r1, [pc, #24]	@ (8005540 <PMU_create_task+0x20>)
 8005526:	4807      	ldr	r0, [pc, #28]	@ (8005544 <PMU_create_task+0x24>)
 8005528:	f006 f9f4 	bl	800b914 <SCH_TASK_CreateTask>
    SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 800552c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005530:	2005      	movs	r0, #5
 8005532:	f006 f9c3 	bl	800b8bc <SCH_TIM_Start>
    Ringbuf_init();
 8005536:	f7fc fa61 	bl	80019fc <Ringbuf_init>
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000070 	.word	0x20000070
 8005544:	2000006c 	.word	0x2000006c

08005548 <PMU_update_task>:



volatile uint8_t timeout_counter_pmu = 0;

void PMU_update_task(void) {
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
	if (rs422_report_enable) {
 800554e:	4b41      	ldr	r3, [pc, #260]	@ (8005654 <PMU_update_task+0x10c>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d079      	beq.n	800564c <PMU_update_task+0x104>

//	if  not in send and wait

		uint8_t *frame;
		uint8_t frame_len;
		if (SCH_TIM_HasCompleted(SCH_TIM_PMU))
 8005558:	2005      	movs	r0, #5
 800555a:	f006 f9c5 	bl	800b8e8 <SCH_TIM_HasCompleted>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d073      	beq.n	800564c <PMU_update_task+0x104>
		{

			if(!sendFlag){
 8005564:	4b3c      	ldr	r3, [pc, #240]	@ (8005658 <PMU_update_task+0x110>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d16e      	bne.n	800564c <PMU_update_task+0x104>
				if(!send_rs422){
 800556e:	4b3b      	ldr	r3, [pc, #236]	@ (800565c <PMU_update_task+0x114>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d130      	bne.n	80055da <PMU_update_task+0x92>
					if(receive_iouFlag&&receive_pduFlag){
 8005578:	4b39      	ldr	r3, [pc, #228]	@ (8005660 <PMU_update_task+0x118>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d02b      	beq.n	80055da <PMU_update_task+0x92>
 8005582:	4b38      	ldr	r3, [pc, #224]	@ (8005664 <PMU_update_task+0x11c>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d026      	beq.n	80055da <PMU_update_task+0x92>
						switch_board(1);
 800558c:	2001      	movs	r0, #1
 800558e:	f002 fae5 	bl	8007b5c <switch_board>
						Uart_flush(USART1);
 8005592:	4835      	ldr	r0, [pc, #212]	@ (8005668 <PMU_update_task+0x120>)
 8005594:	f7fc fd3a 	bl	800200c <Uart_flush>

						frame = pmu_frame;
 8005598:	4b34      	ldr	r3, [pc, #208]	@ (800566c <PMU_update_task+0x124>)
 800559a:	607b      	str	r3, [r7, #4]
						frame_len = sizeof(pmu_frame);
 800559c:	2309      	movs	r3, #9
 800559e:	70fb      	strb	r3, [r7, #3]
						for (int i = 0; i < frame_len; i++) {
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e00a      	b.n	80055bc <PMU_update_task+0x74>
							Uart_write(USART1, frame[i]);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	4413      	add	r3, r2
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	4619      	mov	r1, r3
 80055b0:	482d      	ldr	r0, [pc, #180]	@ (8005668 <PMU_update_task+0x120>)
 80055b2:	f7fc fbc9 	bl	8001d48 <Uart_write>
						for (int i = 0; i < frame_len; i++) {
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	dbf0      	blt.n	80055a6 <PMU_update_task+0x5e>
						}
						receive_pmuFlag = 0;
 80055c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005670 <PMU_update_task+0x128>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
						send_rs422 = 1;
 80055ca:	4b24      	ldr	r3, [pc, #144]	@ (800565c <PMU_update_task+0x114>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	701a      	strb	r2, [r3, #0]
						SCH_TIM_Start(SCH_TIM_PMU, PMU_PERIOD);
 80055d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80055d4:	2005      	movs	r0, #5
 80055d6:	f006 f971 	bl	800b8bc <SCH_TIM_Start>
					}
				}
				if(!receive_pmuFlag){
 80055da:	4b25      	ldr	r3, [pc, #148]	@ (8005670 <PMU_update_task+0x128>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d133      	bne.n	800564c <PMU_update_task+0x104>
					timeout_counter_pmu++;
 80055e4:	4b23      	ldr	r3, [pc, #140]	@ (8005674 <PMU_update_task+0x12c>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	3301      	adds	r3, #1
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4b21      	ldr	r3, [pc, #132]	@ (8005674 <PMU_update_task+0x12c>)
 80055f0:	701a      	strb	r2, [r3, #0]
					if (timeout_counter_pmu > 2){
 80055f2:	4b20      	ldr	r3, [pc, #128]	@ (8005674 <PMU_update_task+0x12c>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d927      	bls.n	800564c <PMU_update_task+0x104>
						disconnect_counter_pmu++;
 80055fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005678 <PMU_update_task+0x130>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	3301      	adds	r3, #1
 8005604:	b2da      	uxtb	r2, r3
 8005606:	4b1c      	ldr	r3, [pc, #112]	@ (8005678 <PMU_update_task+0x130>)
 8005608:	701a      	strb	r2, [r3, #0]
						timeout_counter_pmu = 0;
 800560a:	4b1a      	ldr	r3, [pc, #104]	@ (8005674 <PMU_update_task+0x12c>)
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
						receive_pmuFlag = 1;
 8005610:	4b17      	ldr	r3, [pc, #92]	@ (8005670 <PMU_update_task+0x128>)
 8005612:	2201      	movs	r2, #1
 8005614:	701a      	strb	r2, [r3, #0]
						send_rs422 = 0;
 8005616:	4b11      	ldr	r3, [pc, #68]	@ (800565c <PMU_update_task+0x114>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
						if(disconnect_counter_pmu> 4){
 800561c:	4b16      	ldr	r3, [pc, #88]	@ (8005678 <PMU_update_task+0x130>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b04      	cmp	r3, #4
 8005624:	d912      	bls.n	800564c <PMU_update_task+0x104>
							for (int i = 1; i <= 24; i++) {
 8005626:	2301      	movs	r3, #1
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	e00c      	b.n	8005646 <PMU_update_task+0xfe>
								disconnect_counter_pmu = 5;
 800562c:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <PMU_update_task+0x130>)
 800562e:	2205      	movs	r2, #5
 8005630:	701a      	strb	r2, [r3, #0]
								nextBuffer[i + 96] = 0xFF; //97   pay1    + 98 pay2    120    pay24
 8005632:	4b12      	ldr	r3, [pc, #72]	@ (800567c <PMU_update_task+0x134>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	3360      	adds	r3, #96	@ 0x60
 800563a:	4413      	add	r3, r2
 800563c:	22ff      	movs	r2, #255	@ 0xff
 800563e:	701a      	strb	r2, [r3, #0]
							for (int i = 1; i <= 24; i++) {
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	3301      	adds	r3, #1
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b18      	cmp	r3, #24
 800564a:	ddef      	ble.n	800562c <PMU_update_task+0xe4>
					}
				}
			}
		}
	}
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	200059e1 	.word	0x200059e1
 8005658:	200057b1 	.word	0x200057b1
 800565c:	200058b6 	.word	0x200058b6
 8005660:	20000042 	.word	0x20000042
 8005664:	20000040 	.word	0x20000040
 8005668:	40011000 	.word	0x40011000
 800566c:	20000060 	.word	0x20000060
 8005670:	20000041 	.word	0x20000041
 8005674:	200058bb 	.word	0x200058bb
 8005678:	200058b5 	.word	0x200058b5
 800567c:	200003ec 	.word	0x200003ec

08005680 <Cmd_pmu_get_temp>:


#define DEST_ADDR FSP_ADR_PMU
//volatile uint8_t uart_choose_uart5 = 0;
int Cmd_pmu_get_temp(int argc, char *argv[])
{
 8005680:	b580      	push	{r7, lr}
 8005682:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005686:	af00      	add	r7, sp, #0
 8005688:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800568c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005690:	6018      	str	r0, [r3, #0]
 8005692:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005696:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800569a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800569c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80056a0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	dc01      	bgt.n	80056ae <Cmd_pmu_get_temp+0x2e>
 80056aa:	2303      	movs	r3, #3
 80056ac:	e0a3      	b.n	80057f6 <Cmd_pmu_get_temp+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80056ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80056b2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	dd01      	ble.n	80056c0 <Cmd_pmu_get_temp+0x40>
 80056bc:	2302      	movs	r3, #2
 80056be:	e09a      	b.n	80057f6 <Cmd_pmu_get_temp+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80056c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80056c4:	484e      	ldr	r0, [pc, #312]	@ (8005800 <Cmd_pmu_get_temp+0x180>)
 80056c6:	f7ff ff1b 	bl	8005500 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80056ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056ce:	484c      	ldr	r0, [pc, #304]	@ (8005800 <Cmd_pmu_get_temp+0x180>)
 80056d0:	f7ff ff08 	bl	80054e4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80056d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80056d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056e2:	3b01      	subs	r3, #1
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80056ea:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	4413      	add	r3, r2
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 80056f8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80056fc:	4a41      	ldr	r2, [pc, #260]	@ (8005804 <Cmd_pmu_get_temp+0x184>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d103      	bne.n	800570a <Cmd_pmu_get_temp+0x8a>
    	uart_choose_uart5 = 1;
 8005702:	4b41      	ldr	r3, [pc, #260]	@ (8005808 <Cmd_pmu_get_temp+0x188>)
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e002      	b.n	8005710 <Cmd_pmu_get_temp+0x90>
    }else{
    	uart_choose_uart5 = 0;
 800570a:	4b3f      	ldr	r3, [pc, #252]	@ (8005808 <Cmd_pmu_get_temp+0x188>)
 800570c:	2200      	movs	r2, #0
 800570e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005710:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005714:	4a3d      	ldr	r2, [pc, #244]	@ (800580c <Cmd_pmu_get_temp+0x18c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d103      	bne.n	8005722 <Cmd_pmu_get_temp+0xa2>
    	uart_choose_usart2 = 1;
 800571a:	4b3d      	ldr	r3, [pc, #244]	@ (8005810 <Cmd_pmu_get_temp+0x190>)
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e002      	b.n	8005728 <Cmd_pmu_get_temp+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005722:	4b3b      	ldr	r3, [pc, #236]	@ (8005810 <Cmd_pmu_get_temp+0x190>)
 8005724:	2200      	movs	r2, #0
 8005726:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PMU_GET_TEMP;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800572e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005732:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005736:	2201      	movs	r2, #1
 8005738:	2102      	movs	r1, #2
 800573a:	f006 fa6f 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800573e:	f107 020f 	add.w	r2, r7, #15
 8005742:	f107 0110 	add.w	r1, r7, #16
 8005746:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800574a:	4618      	mov	r0, r3
 800574c:	f006 fb14 	bl	800bd78 <frame_encode>

    if (frame_len > 0) {
 8005750:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005754:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d02c      	beq.n	80057b8 <Cmd_pmu_get_temp+0x138>
        for (int i = 0; i < frame_len; i++) {
 800575e:	2300      	movs	r3, #0
 8005760:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005764:	e010      	b.n	8005788 <Cmd_pmu_get_temp+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005766:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800576a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 800576e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005772:	4413      	add	r3, r2
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	4619      	mov	r1, r3
 8005778:	4826      	ldr	r0, [pc, #152]	@ (8005814 <Cmd_pmu_get_temp+0x194>)
 800577a:	f7fc fae5 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 800577e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005782:	3301      	adds	r3, #1
 8005784:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005788:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800578c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005798:	4293      	cmp	r3, r2
 800579a:	dbe4      	blt.n	8005766 <Cmd_pmu_get_temp+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 800579c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80057a0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80057a4:	781a      	ldrb	r2, [r3, #0]
 80057a6:	f107 0310 	add.w	r3, r7, #16
 80057aa:	4611      	mov	r1, r2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fc fd63 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 80057b2:	f7fc fd49 	bl	8002248 <set_send_flag>
 80057b6:	e01d      	b.n	80057f4 <Cmd_pmu_get_temp+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80057b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057bc:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80057c0:	2201      	movs	r2, #1
 80057c2:	2102      	movs	r1, #2
 80057c4:	f006 fa2a 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80057c8:	f107 020f 	add.w	r2, r7, #15
 80057cc:	f107 0110 	add.w	r1, r7, #16
 80057d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057d4:	4618      	mov	r0, r3
 80057d6:	f006 facf 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 80057da:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80057de:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80057e2:	781a      	ldrb	r2, [r3, #0]
 80057e4:	f107 0310 	add.w	r3, r7, #16
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fc fd44 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 80057f0:	f7fc fd2a 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 80057f4:	2305      	movs	r3, #5
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40020000 	.word	0x40020000
 8005804:	40005000 	.word	0x40005000
 8005808:	200058b8 	.word	0x200058b8
 800580c:	40004400 	.word	0x40004400
 8005810:	200058b9 	.word	0x200058b9
 8005814:	40011000 	.word	0x40011000

08005818 <Cmd_pmu_bat_vol>:

int Cmd_pmu_bat_vol(int argc, char *argv[])
{
 8005818:	b580      	push	{r7, lr}
 800581a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800581e:	af00      	add	r7, sp, #0
 8005820:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005824:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005828:	6018      	str	r0, [r3, #0]
 800582a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800582e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005832:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005834:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005838:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	dc01      	bgt.n	8005846 <Cmd_pmu_bat_vol+0x2e>
 8005842:	2303      	movs	r3, #3
 8005844:	e0a3      	b.n	800598e <Cmd_pmu_bat_vol+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005846:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800584a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b02      	cmp	r3, #2
 8005852:	dd01      	ble.n	8005858 <Cmd_pmu_bat_vol+0x40>
 8005854:	2302      	movs	r3, #2
 8005856:	e09a      	b.n	800598e <Cmd_pmu_bat_vol+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005858:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800585c:	484e      	ldr	r0, [pc, #312]	@ (8005998 <Cmd_pmu_bat_vol+0x180>)
 800585e:	f7ff fe4f 	bl	8005500 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005862:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005866:	484c      	ldr	r0, [pc, #304]	@ (8005998 <Cmd_pmu_bat_vol+0x180>)
 8005868:	f7ff fe3c 	bl	80054e4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800586c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005870:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800587a:	3b01      	subs	r3, #1
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005882:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	4413      	add	r3, r2
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005890:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005894:	4a41      	ldr	r2, [pc, #260]	@ (800599c <Cmd_pmu_bat_vol+0x184>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d103      	bne.n	80058a2 <Cmd_pmu_bat_vol+0x8a>
    	uart_choose_uart5 = 1;
 800589a:	4b41      	ldr	r3, [pc, #260]	@ (80059a0 <Cmd_pmu_bat_vol+0x188>)
 800589c:	2201      	movs	r2, #1
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	e002      	b.n	80058a8 <Cmd_pmu_bat_vol+0x90>
    }else{
    	uart_choose_uart5 = 0;
 80058a2:	4b3f      	ldr	r3, [pc, #252]	@ (80059a0 <Cmd_pmu_bat_vol+0x188>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 80058a8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80058ac:	4a3d      	ldr	r2, [pc, #244]	@ (80059a4 <Cmd_pmu_bat_vol+0x18c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d103      	bne.n	80058ba <Cmd_pmu_bat_vol+0xa2>
    	uart_choose_usart2 = 1;
 80058b2:	4b3d      	ldr	r3, [pc, #244]	@ (80059a8 <Cmd_pmu_bat_vol+0x190>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	e002      	b.n	80058c0 <Cmd_pmu_bat_vol+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 80058ba:	4b3b      	ldr	r3, [pc, #236]	@ (80059a8 <Cmd_pmu_bat_vol+0x190>)
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_BAT_VOL;
 80058c0:	2302      	movs	r3, #2
 80058c2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80058c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058ca:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80058ce:	2201      	movs	r2, #1
 80058d0:	2102      	movs	r1, #2
 80058d2:	f006 f9a3 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80058d6:	f107 020f 	add.w	r2, r7, #15
 80058da:	f107 0110 	add.w	r1, r7, #16
 80058de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058e2:	4618      	mov	r0, r3
 80058e4:	f006 fa48 	bl	800bd78 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80058e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80058ec:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d02c      	beq.n	8005950 <Cmd_pmu_bat_vol+0x138>
        for (int i = 0; i < frame_len; i++) {
 80058f6:	2300      	movs	r3, #0
 80058f8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80058fc:	e010      	b.n	8005920 <Cmd_pmu_bat_vol+0x108>
            Uart_write(USART1, encoded_frame[i]);
 80058fe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005902:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005906:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800590a:	4413      	add	r3, r2
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	4619      	mov	r1, r3
 8005910:	4826      	ldr	r0, [pc, #152]	@ (80059ac <Cmd_pmu_bat_vol+0x194>)
 8005912:	f7fc fa19 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005916:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800591a:	3301      	adds	r3, #1
 800591c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005920:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005924:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005930:	4293      	cmp	r3, r2
 8005932:	dbe4      	blt.n	80058fe <Cmd_pmu_bat_vol+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005934:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005938:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800593c:	781a      	ldrb	r2, [r3, #0]
 800593e:	f107 0310 	add.w	r3, r7, #16
 8005942:	4611      	mov	r1, r2
 8005944:	4618      	mov	r0, r3
 8005946:	f7fc fc97 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 800594a:	f7fc fc7d 	bl	8002248 <set_send_flag>
 800594e:	e01d      	b.n	800598c <Cmd_pmu_bat_vol+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005950:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005954:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005958:	2201      	movs	r2, #1
 800595a:	2102      	movs	r1, #2
 800595c:	f006 f95e 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005960:	f107 020f 	add.w	r2, r7, #15
 8005964:	f107 0110 	add.w	r1, r7, #16
 8005968:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800596c:	4618      	mov	r0, r3
 800596e:	f006 fa03 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005972:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005976:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800597a:	781a      	ldrb	r2, [r3, #0]
 800597c:	f107 0310 	add.w	r3, r7, #16
 8005980:	4611      	mov	r1, r2
 8005982:	4618      	mov	r0, r3
 8005984:	f7fc fc78 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005988:	f7fc fc5e 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 800598c:	2305      	movs	r3, #5
}
 800598e:	4618      	mov	r0, r3
 8005990:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40020000 	.word	0x40020000
 800599c:	40005000 	.word	0x40005000
 80059a0:	200058b8 	.word	0x200058b8
 80059a4:	40004400 	.word	0x40004400
 80059a8:	200058b9 	.word	0x200058b9
 80059ac:	40011000 	.word	0x40011000

080059b0 <Cmd_pmu_parag_in>:

int Cmd_pmu_parag_in(int argc, char *argv[])
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059bc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80059c0:	6018      	str	r0, [r3, #0]
 80059c2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059c6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80059ca:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80059cc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059d0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	dc01      	bgt.n	80059de <Cmd_pmu_parag_in+0x2e>
 80059da:	2303      	movs	r3, #3
 80059dc:	e0a3      	b.n	8005b26 <Cmd_pmu_parag_in+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80059de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80059e2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	dd01      	ble.n	80059f0 <Cmd_pmu_parag_in+0x40>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e09a      	b.n	8005b26 <Cmd_pmu_parag_in+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80059f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059f4:	484e      	ldr	r0, [pc, #312]	@ (8005b30 <Cmd_pmu_parag_in+0x180>)
 80059f6:	f7ff fd83 	bl	8005500 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 80059fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80059fe:	484c      	ldr	r0, [pc, #304]	@ (8005b30 <Cmd_pmu_parag_in+0x180>)
 8005a00:	f7ff fd70 	bl	80054e4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005a04:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a08:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a12:	3b01      	subs	r3, #1
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005a1a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	4413      	add	r3, r2
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005a28:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005a2c:	4a41      	ldr	r2, [pc, #260]	@ (8005b34 <Cmd_pmu_parag_in+0x184>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d103      	bne.n	8005a3a <Cmd_pmu_parag_in+0x8a>
    	uart_choose_uart5 = 1;
 8005a32:	4b41      	ldr	r3, [pc, #260]	@ (8005b38 <Cmd_pmu_parag_in+0x188>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	e002      	b.n	8005a40 <Cmd_pmu_parag_in+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b38 <Cmd_pmu_parag_in+0x188>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005a40:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005a44:	4a3d      	ldr	r2, [pc, #244]	@ (8005b3c <Cmd_pmu_parag_in+0x18c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d103      	bne.n	8005a52 <Cmd_pmu_parag_in+0xa2>
    	uart_choose_usart2 = 1;
 8005a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8005b40 <Cmd_pmu_parag_in+0x190>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	e002      	b.n	8005a58 <Cmd_pmu_parag_in+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005a52:	4b3b      	ldr	r3, [pc, #236]	@ (8005b40 <Cmd_pmu_parag_in+0x190>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PARAG_IN;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005a5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a62:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005a66:	2201      	movs	r2, #1
 8005a68:	2102      	movs	r1, #2
 8005a6a:	f006 f8d7 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005a6e:	f107 020f 	add.w	r2, r7, #15
 8005a72:	f107 0110 	add.w	r1, r7, #16
 8005a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f006 f97c 	bl	800bd78 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005a80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a84:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d02c      	beq.n	8005ae8 <Cmd_pmu_parag_in+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005a94:	e010      	b.n	8005ab8 <Cmd_pmu_parag_in+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005a96:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005a9a:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005a9e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005aa2:	4413      	add	r3, r2
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4826      	ldr	r0, [pc, #152]	@ (8005b44 <Cmd_pmu_parag_in+0x194>)
 8005aaa:	f7fc f94d 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005aae:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005ab8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005abc:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	dbe4      	blt.n	8005a96 <Cmd_pmu_parag_in+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005acc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005ad0:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	f107 0310 	add.w	r3, r7, #16
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fc fbcb 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8005ae2:	f7fc fbb1 	bl	8002248 <set_send_flag>
 8005ae6:	e01d      	b.n	8005b24 <Cmd_pmu_parag_in+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005ae8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005aec:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005af0:	2201      	movs	r2, #1
 8005af2:	2102      	movs	r1, #2
 8005af4:	f006 f892 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005af8:	f107 020f 	add.w	r2, r7, #15
 8005afc:	f107 0110 	add.w	r1, r7, #16
 8005b00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b04:	4618      	mov	r0, r3
 8005b06:	f006 f937 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005b0a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b0e:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005b12:	781a      	ldrb	r2, [r3, #0]
 8005b14:	f107 0310 	add.w	r3, r7, #16
 8005b18:	4611      	mov	r1, r2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fc fbac 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005b20:	f7fc fb92 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005b24:	2305      	movs	r3, #5
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40020000 	.word	0x40020000
 8005b34:	40005000 	.word	0x40005000
 8005b38:	200058b8 	.word	0x200058b8
 8005b3c:	40004400 	.word	0x40004400
 8005b40:	200058b9 	.word	0x200058b9
 8005b44:	40011000 	.word	0x40011000

08005b48 <Cmd_pmu_parag_out>:

int Cmd_pmu_parag_out(int argc, char *argv[])
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b54:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005b58:	6018      	str	r0, [r3, #0]
 8005b5a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b5e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005b62:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8005b64:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b68:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	dc01      	bgt.n	8005b76 <Cmd_pmu_parag_out+0x2e>
 8005b72:	2303      	movs	r3, #3
 8005b74:	e0a3      	b.n	8005cbe <Cmd_pmu_parag_out+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8005b76:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005b7a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	dd01      	ble.n	8005b88 <Cmd_pmu_parag_out+0x40>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e09a      	b.n	8005cbe <Cmd_pmu_parag_out+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005b88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b8c:	484e      	ldr	r0, [pc, #312]	@ (8005cc8 <Cmd_pmu_parag_out+0x180>)
 8005b8e:	f7ff fcb7 	bl	8005500 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005b92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b96:	484c      	ldr	r0, [pc, #304]	@ (8005cc8 <Cmd_pmu_parag_out+0x180>)
 8005b98:	f7ff fca4 	bl	80054e4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005b9c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005ba0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005baa:	3b01      	subs	r3, #1
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8005bb2:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8005bb6:	6812      	ldr	r2, [r2, #0]
 8005bb8:	4413      	add	r3, r2
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8005bc0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005bc4:	4a41      	ldr	r2, [pc, #260]	@ (8005ccc <Cmd_pmu_parag_out+0x184>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d103      	bne.n	8005bd2 <Cmd_pmu_parag_out+0x8a>
    	uart_choose_uart5 = 1;
 8005bca:	4b41      	ldr	r3, [pc, #260]	@ (8005cd0 <Cmd_pmu_parag_out+0x188>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	e002      	b.n	8005bd8 <Cmd_pmu_parag_out+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8005bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8005cd0 <Cmd_pmu_parag_out+0x188>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005bd8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005bdc:	4a3d      	ldr	r2, [pc, #244]	@ (8005cd4 <Cmd_pmu_parag_out+0x18c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d103      	bne.n	8005bea <Cmd_pmu_parag_out+0xa2>
    	uart_choose_usart2 = 1;
 8005be2:	4b3d      	ldr	r3, [pc, #244]	@ (8005cd8 <Cmd_pmu_parag_out+0x190>)
 8005be4:	2201      	movs	r2, #1
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	e002      	b.n	8005bf0 <Cmd_pmu_parag_out+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 8005bea:	4b3b      	ldr	r3, [pc, #236]	@ (8005cd8 <Cmd_pmu_parag_out+0x190>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PARAG_OUT;
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005bf6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005bfa:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005bfe:	2201      	movs	r2, #1
 8005c00:	2102      	movs	r1, #2
 8005c02:	f006 f80b 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005c06:	f107 020f 	add.w	r2, r7, #15
 8005c0a:	f107 0110 	add.w	r1, r7, #16
 8005c0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c12:	4618      	mov	r0, r3
 8005c14:	f006 f8b0 	bl	800bd78 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8005c18:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c1c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d02c      	beq.n	8005c80 <Cmd_pmu_parag_out+0x138>
        for (int i = 0; i < frame_len; i++) {
 8005c26:	2300      	movs	r3, #0
 8005c28:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005c2c:	e010      	b.n	8005c50 <Cmd_pmu_parag_out+0x108>
            Uart_write(USART1, encoded_frame[i]);
 8005c2e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c32:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8005c36:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005c3a:	4413      	add	r3, r2
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4826      	ldr	r0, [pc, #152]	@ (8005cdc <Cmd_pmu_parag_out+0x194>)
 8005c42:	f7fc f881 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005c46:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8005c50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c54:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005c60:	4293      	cmp	r3, r2
 8005c62:	dbe4      	blt.n	8005c2e <Cmd_pmu_parag_out+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005c64:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005c68:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005c6c:	781a      	ldrb	r2, [r3, #0]
 8005c6e:	f107 0310 	add.w	r3, r7, #16
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fc faff 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8005c7a:	f7fc fae5 	bl	8002248 <set_send_flag>
 8005c7e:	e01d      	b.n	8005cbc <Cmd_pmu_parag_out+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005c80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c84:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 8005c88:	2201      	movs	r2, #1
 8005c8a:	2102      	movs	r1, #2
 8005c8c:	f005 ffc6 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005c90:	f107 020f 	add.w	r2, r7, #15
 8005c94:	f107 0110 	add.w	r1, r7, #16
 8005c98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f006 f86b 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005ca2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8005ca6:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8005caa:	781a      	ldrb	r2, [r3, #0]
 8005cac:	f107 0310 	add.w	r3, r7, #16
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fc fae0 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005cb8:	f7fc fac6 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005cbc:	2305      	movs	r3, #5
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40020000 	.word	0x40020000
 8005ccc:	40005000 	.word	0x40005000
 8005cd0:	200058b8 	.word	0x200058b8
 8005cd4:	40004400 	.word	0x40004400
 8005cd8:	200058b9 	.word	0x200058b9
 8005cdc:	40011000 	.word	0x40011000

08005ce0 <Cmd_pmu_set_temppoint>:

int Cmd_pmu_set_temppoint(int argc, char *argv[])
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005ce6:	af02      	add	r7, sp, #8
 8005ce8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005cec:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005cf0:	6018      	str	r0, [r3, #0]
 8005cf2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005cf6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005cfa:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 3) return CMDLINE_TOO_FEW_ARGS;
 8005cfc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d00:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	dc01      	bgt.n	8005d0e <Cmd_pmu_set_temppoint+0x2e>
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e0e7      	b.n	8005ede <Cmd_pmu_set_temppoint+0x1fe>
    if ((argc-1) > 3) return CMDLINE_TOO_MANY_ARGS;
 8005d0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d12:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	dd01      	ble.n	8005d20 <Cmd_pmu_set_temppoint+0x40>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e0de      	b.n	8005ede <Cmd_pmu_set_temppoint+0x1fe>
    uint16_t lowpoint = atoi(argv[1]);
 8005d20:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d24:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f008 ff88 	bl	800ec44 <atoi>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
   // if (lowpoint > 6)   return CMDLINE_INVALID_ARG;
    uint16_t highpoint = atoi(argv[2]);
 8005d3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d3e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3308      	adds	r3, #8
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f008 ff7b 	bl	800ec44 <atoi>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
   // if (highpoint > 6)   return CMDLINE_INVALID_ARG;
    if (highpoint < lowpoint)   return CMDLINE_INVALID_ARG;
 8005d54:	f8b7 2218 	ldrh.w	r2, [r7, #536]	@ 0x218
 8005d58:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d201      	bcs.n	8005d64 <Cmd_pmu_set_temppoint+0x84>
 8005d60:	2304      	movs	r3, #4
 8005d62:	e0bc      	b.n	8005ede <Cmd_pmu_set_temppoint+0x1fe>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005d64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d68:	485f      	ldr	r0, [pc, #380]	@ (8005ee8 <Cmd_pmu_set_temppoint+0x208>)
 8005d6a:	f7ff fbc9 	bl	8005500 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005d6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005d72:	485d      	ldr	r0, [pc, #372]	@ (8005ee8 <Cmd_pmu_set_temppoint+0x208>)
 8005d74:	f7ff fbb6 	bl	80054e4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005d78:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d7c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d86:	3b01      	subs	r3, #1
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005d8e:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005d9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005da0:	4a52      	ldr	r2, [pc, #328]	@ (8005eec <Cmd_pmu_set_temppoint+0x20c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d103      	bne.n	8005dae <Cmd_pmu_set_temppoint+0xce>
    	uart_choose_uart5 = 1;
 8005da6:	4b52      	ldr	r3, [pc, #328]	@ (8005ef0 <Cmd_pmu_set_temppoint+0x210>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e002      	b.n	8005db4 <Cmd_pmu_set_temppoint+0xd4>
    }else{
    	uart_choose_uart5 = 0;
 8005dae:	4b50      	ldr	r3, [pc, #320]	@ (8005ef0 <Cmd_pmu_set_temppoint+0x210>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
    }
    if (USARTx == USART2) {
 8005db4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005db8:	4a4e      	ldr	r2, [pc, #312]	@ (8005ef4 <Cmd_pmu_set_temppoint+0x214>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d103      	bne.n	8005dc6 <Cmd_pmu_set_temppoint+0xe6>
    	uart_choose_usart2 = 1;
 8005dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8005ef8 <Cmd_pmu_set_temppoint+0x218>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	e002      	b.n	8005dcc <Cmd_pmu_set_temppoint+0xec>
    }else{
    	uart_choose_usart2 = 0;
 8005dc6:	4b4c      	ldr	r3, [pc, #304]	@ (8005ef8 <Cmd_pmu_set_temppoint+0x218>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
    }
    uint8_t cmd  = CMD_CODE_PMU_TEMP_POINT;
 8005dcc:	2305      	movs	r3, #5
 8005dce:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = (uint8_t)(lowpoint >> 8);
 8005dd2:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
    payload[1]  = (uint8_t)(lowpoint & 0xFF);
 8005de0:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    payload[2]  = (uint8_t)(highpoint >> 8);
 8005dea:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    payload[3]  = (uint8_t)(highpoint & 0xFF);
 8005df8:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f

    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005e02:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005e06:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005e0a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	2301      	movs	r3, #1
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	2302      	movs	r3, #2
 8005e16:	2204      	movs	r2, #4
 8005e18:	f005 ff28 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005e1c:	f107 020b 	add.w	r2, r7, #11
 8005e20:	f107 010c 	add.w	r1, r7, #12
 8005e24:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f005 ffa5 	bl	800bd78 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 8005e2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e32:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d02c      	beq.n	8005e96 <Cmd_pmu_set_temppoint+0x1b6>
        for (int i = 0; i < frame_len; i++) {
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005e42:	e010      	b.n	8005e66 <Cmd_pmu_set_temppoint+0x186>
            Uart_write(USART1, encoded_frame[i]);
 8005e44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e48:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8005e4c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005e50:	4413      	add	r3, r2
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	4619      	mov	r1, r3
 8005e56:	4829      	ldr	r0, [pc, #164]	@ (8005efc <Cmd_pmu_set_temppoint+0x21c>)
 8005e58:	f7fb ff76 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8005e5c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005e60:	3301      	adds	r3, #1
 8005e62:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005e66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e6a:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	461a      	mov	r2, r3
 8005e72:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005e76:	4293      	cmp	r3, r2
 8005e78:	dbe4      	blt.n	8005e44 <Cmd_pmu_set_temppoint+0x164>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8005e7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e7e:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	f107 030c 	add.w	r3, r7, #12
 8005e88:	4611      	mov	r1, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fc f9f4 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8005e90:	f7fc f9da 	bl	8002248 <set_send_flag>
 8005e94:	e022      	b.n	8005edc <Cmd_pmu_set_temppoint+0x1fc>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005e96:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005e9a:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005e9e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	2204      	movs	r2, #4
 8005eac:	f005 fede 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005eb0:	f107 020b 	add.w	r2, r7, #11
 8005eb4:	f107 010c 	add.w	r1, r7, #12
 8005eb8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f005 ff5b 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8005ec2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ec6:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	f107 030c 	add.w	r3, r7, #12
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fc f9d0 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8005ed8:	f7fc f9b6 	bl	8002248 <set_send_flag>
    }

    return CMDLINE_PENDING;
 8005edc:	2305      	movs	r3, #5
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40020000 	.word	0x40020000
 8005eec:	40005000 	.word	0x40005000
 8005ef0:	200058b8 	.word	0x200058b8
 8005ef4:	40004400 	.word	0x40004400
 8005ef8:	200058b9 	.word	0x200058b9
 8005efc:	40011000 	.word	0x40011000

08005f00 <Cmd_pmu_set_output>:

int Cmd_pmu_set_output(int argc, char *argv[])
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8005f06:	af02      	add	r7, sp, #8
 8005f08:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f0c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f10:	6018      	str	r0, [r3, #0]
 8005f12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f16:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005f1a:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8005f1c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f20:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	dc01      	bgt.n	8005f2e <Cmd_pmu_set_output+0x2e>
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e0c4      	b.n	80060b8 <Cmd_pmu_set_output+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8005f2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f32:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	dd01      	ble.n	8005f40 <Cmd_pmu_set_output+0x40>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e0bb      	b.n	80060b8 <Cmd_pmu_set_output+0x1b8>
    uint8_t state = atoi(argv[1]);
 8005f40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f44:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f008 fe78 	bl	800ec44 <atoi>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (state > 1)   return CMDLINE_INVALID_ARG;
 8005f5a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d901      	bls.n	8005f66 <Cmd_pmu_set_output+0x66>
 8005f62:	2304      	movs	r3, #4
 8005f64:	e0a8      	b.n	80060b8 <Cmd_pmu_set_output+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8005f66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f6a:	4856      	ldr	r0, [pc, #344]	@ (80060c4 <Cmd_pmu_set_output+0x1c4>)
 8005f6c:	f7ff fac8 	bl	8005500 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8005f70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f74:	4853      	ldr	r0, [pc, #332]	@ (80060c4 <Cmd_pmu_set_output+0x1c4>)
 8005f76:	f7ff fab5 	bl	80054e4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8005f7a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005f7e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005f90:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	4413      	add	r3, r2
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 8005f9e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005fa2:	4a49      	ldr	r2, [pc, #292]	@ (80060c8 <Cmd_pmu_set_output+0x1c8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d103      	bne.n	8005fb0 <Cmd_pmu_set_output+0xb0>
    	uart_choose_uart5 = 1;
 8005fa8:	4b48      	ldr	r3, [pc, #288]	@ (80060cc <Cmd_pmu_set_output+0x1cc>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	e002      	b.n	8005fb6 <Cmd_pmu_set_output+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 8005fb0:	4b46      	ldr	r3, [pc, #280]	@ (80060cc <Cmd_pmu_set_output+0x1cc>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8005fb6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8005fba:	4a45      	ldr	r2, [pc, #276]	@ (80060d0 <Cmd_pmu_set_output+0x1d0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d103      	bne.n	8005fc8 <Cmd_pmu_set_output+0xc8>
    	uart_choose_usart2 = 1;
 8005fc0:	4b44      	ldr	r3, [pc, #272]	@ (80060d4 <Cmd_pmu_set_output+0x1d4>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e002      	b.n	8005fce <Cmd_pmu_set_output+0xce>
    }else{
    	uart_choose_usart2 = 0;
 8005fc8:	4b42      	ldr	r3, [pc, #264]	@ (80060d4 <Cmd_pmu_set_output+0x1d4>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	701a      	strb	r2, [r3, #0]
    }



    uint8_t cmd  = CMD_CODE_PMU_OUTPUT;
 8005fce:	2306      	movs	r3, #6
 8005fd0:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = state;
 8005fd4:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8005fd8:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8005fdc:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8005fe0:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8005fe4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	2301      	movs	r3, #1
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	2302      	movs	r3, #2
 8005ff0:	2204      	movs	r2, #4
 8005ff2:	f005 fe3b 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8005ff6:	f107 020b 	add.w	r2, r7, #11
 8005ffa:	f107 010c 	add.w	r1, r7, #12
 8005ffe:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006002:	4618      	mov	r0, r3
 8006004:	f005 feb8 	bl	800bd78 <frame_encode>

   // SCH_Delay(5);
    if (frame_len > 0) {
 8006008:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800600c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d02c      	beq.n	8006070 <Cmd_pmu_set_output+0x170>
        for (int i = 0; i < frame_len; i++) {
 8006016:	2300      	movs	r3, #0
 8006018:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800601c:	e010      	b.n	8006040 <Cmd_pmu_set_output+0x140>
            Uart_write(USART1, encoded_frame[i]);
 800601e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006022:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8006026:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800602a:	4413      	add	r3, r2
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	4619      	mov	r1, r3
 8006030:	4829      	ldr	r0, [pc, #164]	@ (80060d8 <Cmd_pmu_set_output+0x1d8>)
 8006032:	f7fb fe89 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8006036:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800603a:	3301      	adds	r3, #1
 800603c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8006040:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006044:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006050:	4293      	cmp	r3, r2
 8006052:	dbe4      	blt.n	800601e <Cmd_pmu_set_output+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8006054:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006058:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800605c:	781a      	ldrb	r2, [r3, #0]
 800605e:	f107 030c 	add.w	r3, r7, #12
 8006062:	4611      	mov	r1, r2
 8006064:	4618      	mov	r0, r3
 8006066:	f7fc f907 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 800606a:	f7fc f8ed 	bl	8002248 <set_send_flag>
 800606e:	e022      	b.n	80060b6 <Cmd_pmu_set_output+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8006070:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8006074:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8006078:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800607c:	9301      	str	r3, [sp, #4]
 800607e:	2301      	movs	r3, #1
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	2302      	movs	r3, #2
 8006084:	2204      	movs	r2, #4
 8006086:	f005 fdf1 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 800608a:	f107 020b 	add.w	r2, r7, #11
 800608e:	f107 010c 	add.w	r1, r7, #12
 8006092:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006096:	4618      	mov	r0, r3
 8006098:	f005 fe6e 	bl	800bd78 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 800609c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060a0:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	f107 030c 	add.w	r3, r7, #12
 80060aa:	4611      	mov	r1, r2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fc f8e3 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 80060b2:	f7fc f8c9 	bl	8002248 <set_send_flag>
    }


    return CMDLINE_PENDING;
 80060b6:	2305      	movs	r3, #5
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40020000 	.word	0x40020000
 80060c8:	40005000 	.word	0x40005000
 80060cc:	200058b8 	.word	0x200058b8
 80060d0:	40004400 	.word	0x40004400
 80060d4:	200058b9 	.word	0x200058b9
 80060d8:	40011000 	.word	0x40011000

080060dc <Cmd_pmu_set_pwm>:

int Cmd_pmu_set_pwm(int argc, char *argv[])
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80060e2:	af02      	add	r7, sp, #8
 80060e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060e8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80060ec:	6018      	str	r0, [r3, #0]
 80060ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060f2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80060f6:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80060f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80060fc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b02      	cmp	r3, #2
 8006104:	dc01      	bgt.n	800610a <Cmd_pmu_set_pwm+0x2e>
 8006106:	2303      	movs	r3, #3
 8006108:	e0c4      	b.n	8006294 <Cmd_pmu_set_pwm+0x1b8>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 800610a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800610e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b03      	cmp	r3, #3
 8006116:	dd01      	ble.n	800611c <Cmd_pmu_set_pwm+0x40>
 8006118:	2302      	movs	r3, #2
 800611a:	e0bb      	b.n	8006294 <Cmd_pmu_set_pwm+0x1b8>
    uint8_t duty = atoi(argv[1]);
 800611c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006120:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3304      	adds	r3, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f008 fd8a 	bl	800ec44 <atoi>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    if (duty > 100)   return CMDLINE_INVALID_ARG;
 8006136:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800613a:	2b64      	cmp	r3, #100	@ 0x64
 800613c:	d901      	bls.n	8006142 <Cmd_pmu_set_pwm+0x66>
 800613e:	2304      	movs	r3, #4
 8006140:	e0a8      	b.n	8006294 <Cmd_pmu_set_pwm+0x1b8>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8006142:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006146:	4856      	ldr	r0, [pc, #344]	@ (80062a0 <Cmd_pmu_set_pwm+0x1c4>)
 8006148:	f7ff f9da 	bl	8005500 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 800614c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006150:	4853      	ldr	r0, [pc, #332]	@ (80062a0 <Cmd_pmu_set_pwm+0x1c4>)
 8006152:	f7ff f9c7 	bl	80054e4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006156:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800615a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006164:	3b01      	subs	r3, #1
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800616c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	4413      	add	r3, r2
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    if (USARTx == UART5) {
 800617a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800617e:	4a49      	ldr	r2, [pc, #292]	@ (80062a4 <Cmd_pmu_set_pwm+0x1c8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d103      	bne.n	800618c <Cmd_pmu_set_pwm+0xb0>
    	uart_choose_uart5 = 1;
 8006184:	4b48      	ldr	r3, [pc, #288]	@ (80062a8 <Cmd_pmu_set_pwm+0x1cc>)
 8006186:	2201      	movs	r2, #1
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	e002      	b.n	8006192 <Cmd_pmu_set_pwm+0xb6>
    }else{
    	uart_choose_uart5 = 0;
 800618c:	4b46      	ldr	r3, [pc, #280]	@ (80062a8 <Cmd_pmu_set_pwm+0x1cc>)
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8006192:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8006196:	4a45      	ldr	r2, [pc, #276]	@ (80062ac <Cmd_pmu_set_pwm+0x1d0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d103      	bne.n	80061a4 <Cmd_pmu_set_pwm+0xc8>
    	uart_choose_usart2 = 1;
 800619c:	4b44      	ldr	r3, [pc, #272]	@ (80062b0 <Cmd_pmu_set_pwm+0x1d4>)
 800619e:	2201      	movs	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e002      	b.n	80061aa <Cmd_pmu_set_pwm+0xce>
    }else{
    	uart_choose_usart2 = 0;
 80061a4:	4b42      	ldr	r3, [pc, #264]	@ (80062b0 <Cmd_pmu_set_pwm+0x1d4>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	701a      	strb	r2, [r3, #0]
    }


    uint8_t cmd  = CMD_CODE_PMU_PWM;
 80061aa:	2307      	movs	r3, #7
 80061ac:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    uint8_t payload[4];
    payload[0]  = duty;
 80061b0:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 80061b4:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c


    fsp_packet_t fsp_pkt;
    fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80061b8:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80061bc:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 80061c0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	2301      	movs	r3, #1
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	2302      	movs	r3, #2
 80061cc:	2204      	movs	r2, #4
 80061ce:	f005 fd4d 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 80061d2:	f107 020b 	add.w	r2, r7, #11
 80061d6:	f107 010c 	add.w	r1, r7, #12
 80061da:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80061de:	4618      	mov	r0, r3
 80061e0:	f005 fdca 	bl	800bd78 <frame_encode>

  //  SCH_Delay(5);
    if (frame_len > 0) {
 80061e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80061e8:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d02c      	beq.n	800624c <Cmd_pmu_set_pwm+0x170>
        for (int i = 0; i < frame_len; i++) {
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80061f8:	e010      	b.n	800621c <Cmd_pmu_set_pwm+0x140>
            Uart_write(USART1, encoded_frame[i]);
 80061fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80061fe:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 8006202:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006206:	4413      	add	r3, r2
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	4619      	mov	r1, r3
 800620c:	4829      	ldr	r0, [pc, #164]	@ (80062b4 <Cmd_pmu_set_pwm+0x1d8>)
 800620e:	f7fb fd9b 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 8006212:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8006216:	3301      	adds	r3, #1
 8006218:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800621c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006220:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800622c:	4293      	cmp	r3, r2
 800622e:	dbe4      	blt.n	80061fa <Cmd_pmu_set_pwm+0x11e>
        }
        set_fsp_packet(encoded_frame, frame_len);
 8006230:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8006234:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	f107 030c 	add.w	r3, r7, #12
 800623e:	4611      	mov	r1, r2
 8006240:	4618      	mov	r0, r3
 8006242:	f7fc f819 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 8006246:	f7fb ffff 	bl	8002248 <set_send_flag>
 800624a:	e022      	b.n	8006292 <Cmd_pmu_set_pwm+0x1b6>
    }else{
        fsp_gen_cmd_w_data_pkt(cmd, payload, sizeof(payload), DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 800624c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8006250:	f897 0213 	ldrb.w	r0, [r7, #531]	@ 0x213
 8006254:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	2301      	movs	r3, #1
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	2302      	movs	r3, #2
 8006260:	2204      	movs	r2, #4
 8006262:	f005 fd03 	bl	800bc6c <fsp_gen_cmd_w_data_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006266:	f107 020b 	add.w	r2, r7, #11
 800626a:	f107 010c 	add.w	r1, r7, #12
 800626e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006272:	4618      	mov	r0, r3
 8006274:	f005 fd80 	bl	800bd78 <frame_encode>
        set_fsp_packet(encoded_frame, frame_len);
 8006278:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800627c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	f107 030c 	add.w	r3, r7, #12
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f7fb fff5 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 800628e:	f7fb ffdb 	bl	8002248 <set_send_flag>
    }


    return CMDLINE_PENDING;
 8006292:	2305      	movs	r3, #5
}
 8006294:	4618      	mov	r0, r3
 8006296:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	40020000 	.word	0x40020000
 80062a4:	40005000 	.word	0x40005000
 80062a8:	200058b8 	.word	0x200058b8
 80062ac:	40004400 	.word	0x40004400
 80062b0:	200058b9 	.word	0x200058b9
 80062b4:	40011000 	.word	0x40011000

080062b8 <Cmd_pmu_get_all>:

int Cmd_pmu_get_all(int argc, char *argv[])
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 80062be:	af00      	add	r7, sp, #0
 80062c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80062c8:	6018      	str	r0, [r3, #0]
 80062ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062ce:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80062d2:	6019      	str	r1, [r3, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80062d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	dc01      	bgt.n	80062e6 <Cmd_pmu_get_all+0x2e>
 80062e2:	2303      	movs	r3, #3
 80062e4:	e0a3      	b.n	800642e <Cmd_pmu_get_all+0x176>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80062e6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80062ea:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	dd01      	ble.n	80062f8 <Cmd_pmu_get_all+0x40>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e09a      	b.n	800642e <Cmd_pmu_get_all+0x176>
:  --> 00   -> PDU
:  --> 01   -> PMU (*)
:  --> 10   -> CAM
:  --> 11   -> IOU
     */
    LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 80062f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80062fc:	484e      	ldr	r0, [pc, #312]	@ (8006438 <Cmd_pmu_get_all+0x180>)
 80062fe:	f7ff f8ff 	bl	8005500 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8006302:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006306:	484c      	ldr	r0, [pc, #304]	@ (8006438 <Cmd_pmu_get_all+0x180>)
 8006308:	f7ff f8ec 	bl	80054e4 <LL_GPIO_SetOutputPin>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800630c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006310:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800631a:	3b01      	subs	r3, #1
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8006322:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8006326:	6812      	ldr	r2, [r2, #0]
 8006328:	4413      	add	r3, r2
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    if (USARTx == UART5) {
 8006330:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8006334:	4a41      	ldr	r2, [pc, #260]	@ (800643c <Cmd_pmu_get_all+0x184>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d103      	bne.n	8006342 <Cmd_pmu_get_all+0x8a>
    	uart_choose_uart5 = 1;
 800633a:	4b41      	ldr	r3, [pc, #260]	@ (8006440 <Cmd_pmu_get_all+0x188>)
 800633c:	2201      	movs	r2, #1
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	e002      	b.n	8006348 <Cmd_pmu_get_all+0x90>
    }else{
    	uart_choose_uart5 = 0;
 8006342:	4b3f      	ldr	r3, [pc, #252]	@ (8006440 <Cmd_pmu_get_all+0x188>)
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]
    }

    if (USARTx == USART2) {
 8006348:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800634c:	4a3d      	ldr	r2, [pc, #244]	@ (8006444 <Cmd_pmu_get_all+0x18c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d103      	bne.n	800635a <Cmd_pmu_get_all+0xa2>
    	uart_choose_usart2 = 1;
 8006352:	4b3d      	ldr	r3, [pc, #244]	@ (8006448 <Cmd_pmu_get_all+0x190>)
 8006354:	2201      	movs	r2, #1
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	e002      	b.n	8006360 <Cmd_pmu_get_all+0xa8>
    }else{
    	uart_choose_usart2 = 0;
 800635a:	4b3b      	ldr	r3, [pc, #236]	@ (8006448 <Cmd_pmu_get_all+0x190>)
 800635c:	2200      	movs	r2, #0
 800635e:	701a      	strb	r2, [r3, #0]
    }

    uint8_t cmd  = CMD_CODE_PMU_ALL;
 8006360:	2308      	movs	r3, #8
 8006362:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_packet_t fsp_pkt;

    fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 8006366:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800636a:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 800636e:	2201      	movs	r2, #1
 8006370:	2102      	movs	r1, #2
 8006372:	f005 fc53 	bl	800bc1c <fsp_gen_cmd_pkt>

    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t frame_len;

    frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006376:	f107 020f 	add.w	r2, r7, #15
 800637a:	f107 0110 	add.w	r1, r7, #16
 800637e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006382:	4618      	mov	r0, r3
 8006384:	f005 fcf8 	bl	800bd78 <frame_encode>

 //   SCH_Delay(5);
    if (frame_len > 0) {
 8006388:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800638c:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d02c      	beq.n	80063f0 <Cmd_pmu_get_all+0x138>
        for (int i = 0; i < frame_len; i++) {
 8006396:	2300      	movs	r3, #0
 8006398:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800639c:	e010      	b.n	80063c0 <Cmd_pmu_get_all+0x108>
            Uart_write(USART1, encoded_frame[i]);
 800639e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80063a2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80063a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80063aa:	4413      	add	r3, r2
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	4826      	ldr	r0, [pc, #152]	@ (800644c <Cmd_pmu_get_all+0x194>)
 80063b2:	f7fb fcc9 	bl	8001d48 <Uart_write>
        for (int i = 0; i < frame_len; i++) {
 80063b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80063ba:	3301      	adds	r3, #1
 80063bc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80063c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80063c4:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80063d0:	4293      	cmp	r3, r2
 80063d2:	dbe4      	blt.n	800639e <Cmd_pmu_get_all+0xe6>
        }
        set_fsp_packet(encoded_frame, frame_len);
 80063d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80063d8:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	f107 0310 	add.w	r3, r7, #16
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fb ff47 	bl	8002278 <set_fsp_packet>
        set_send_flag();
 80063ea:	f7fb ff2d 	bl	8002248 <set_send_flag>
 80063ee:	e01d      	b.n	800642c <Cmd_pmu_get_all+0x174>
    }else{
        fsp_gen_cmd_pkt(cmd, DEST_ADDR, FSP_PKT_WITH_ACK, &fsp_pkt);
 80063f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063f4:	f897 020f 	ldrb.w	r0, [r7, #527]	@ 0x20f
 80063f8:	2201      	movs	r2, #1
 80063fa:	2102      	movs	r1, #2
 80063fc:	f005 fc0e 	bl	800bc1c <fsp_gen_cmd_pkt>
        frame_encode(&fsp_pkt, encoded_frame, &frame_len);
 8006400:	f107 020f 	add.w	r2, r7, #15
 8006404:	f107 0110 	add.w	r1, r7, #16
 8006408:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800640c:	4618      	mov	r0, r3
 800640e:	f005 fcb3 	bl	800bd78 <frame_encode>
		set_fsp_packet(encoded_frame, frame_len);
 8006412:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006416:	f2a3 2309 	subw	r3, r3, #521	@ 0x209
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	f107 0310 	add.w	r3, r7, #16
 8006420:	4611      	mov	r1, r2
 8006422:	4618      	mov	r0, r3
 8006424:	f7fb ff28 	bl	8002278 <set_fsp_packet>
		set_send_flag();
 8006428:	f7fb ff0e 	bl	8002248 <set_send_flag>
    }
    return CMDLINE_PENDING;
 800642c:	2305      	movs	r3, #5
}
 800642e:	4618      	mov	r0, r3
 8006430:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40020000 	.word	0x40020000
 800643c:	40005000 	.word	0x40005000
 8006440:	200058b8 	.word	0x200058b8
 8006444:	40004400 	.word	0x40004400
 8006448:	200058b9 	.word	0x200058b9
 800644c:	40011000 	.word	0x40011000

08006450 <CmdLineProcess>:
//! Otherwise it returns the code that was returned by the command function.
//
//*****************************************************************************
uint8_t
CmdLineProcess(char *pcCmdLine, USART_TypeDef* USARTx)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
    char *pcChar;
    uint_fast8_t ui8Argc;
    bool bFindArg = true;
 800645a:	2301      	movs	r3, #1
 800645c:	73fb      	strb	r3, [r7, #15]

    //
    // Initialize the argument counter, and point to the beginning of the
    // command line string.
    //
    ui8Argc = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
    pcChar = pcCmdLine;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	617b      	str	r3, [r7, #20]

    //
    // Advance through the command line until a zero character is found.
    //
    while(*pcChar)
 8006466:	e01f      	b.n	80064a8 <CmdLineProcess+0x58>
    {
        //
        // If there is a space, then replace it with a zero, and set the flag
        // to search for the next argument.
        //
        if(*pcChar == ' ')
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b20      	cmp	r3, #32
 800646e:	d105      	bne.n	800647c <CmdLineProcess+0x2c>
        {
            *pcChar = 0;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	2200      	movs	r2, #0
 8006474:	701a      	strb	r2, [r3, #0]
            bFindArg = true;
 8006476:	2301      	movs	r3, #1
 8006478:	73fb      	strb	r3, [r7, #15]
 800647a:	e012      	b.n	80064a2 <CmdLineProcess+0x52>
        {
            //
            // If bFindArg is set, then that means we are looking for the start
            // of the next argument.
            //
            if(bFindArg)
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00f      	beq.n	80064a2 <CmdLineProcess+0x52>
                //
                // As long as the maximum number of arguments has not been
                // reached, then save the pointer to the start of this new arg
                // in the argv array, and increment the count of args, argc.
                //
                if(ui8Argc < CMDLINE_MAX_ARGS)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b07      	cmp	r3, #7
 8006486:	d80a      	bhi.n	800649e <CmdLineProcess+0x4e>
                {
                    g_ppcArgv[ui8Argc] = pcChar;
 8006488:	4920      	ldr	r1, [pc, #128]	@ (800650c <CmdLineProcess+0xbc>)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    ui8Argc++;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	3301      	adds	r3, #1
 8006496:	613b      	str	r3, [r7, #16]
                    bFindArg = false;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]
 800649c:	e001      	b.n	80064a2 <CmdLineProcess+0x52>
                // The maximum number of arguments has been reached so return
                // the error.
                //
                else
                {
                    return(CMDLINE_TOO_MANY_ARGS);
 800649e:	2302      	movs	r3, #2
 80064a0:	e030      	b.n	8006504 <CmdLineProcess+0xb4>
        }

        //
        // Advance to the next character in the command line.
        //
        pcChar++;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	3301      	adds	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
    while(*pcChar)
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1db      	bne.n	8006468 <CmdLineProcess+0x18>
    }

    //
    // If one or more arguments was found, then process the command.
    //
    if(ui8Argc)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d025      	beq.n	8006502 <CmdLineProcess+0xb2>
    {
        g_ppcArgv[ui8Argc] = (char*)USARTx;
 80064b6:	4915      	ldr	r1, [pc, #84]	@ (800650c <CmdLineProcess+0xbc>)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui8Argc++;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	3301      	adds	r3, #1
 80064c4:	613b      	str	r3, [r7, #16]
        //
        // Start at the beginning of the command table, to look for a matching
        // command.
        //
        psCmdEntry = &g_psCmdTable[0];
 80064c6:	4b12      	ldr	r3, [pc, #72]	@ (8006510 <CmdLineProcess+0xc0>)
 80064c8:	60bb      	str	r3, [r7, #8]

        //
        // Search through the command table until a null command string is
        // found, which marks the end of the table.
        //
        while(psCmdEntry->pcCmd)
 80064ca:	e016      	b.n	80064fa <CmdLineProcess+0xaa>
            //
            // If this command entry command string matches argv[0], then call
            // the function for this command, passing the command line
            // arguments.
            //
            if(!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 80064cc:	4b0f      	ldr	r3, [pc, #60]	@ (800650c <CmdLineProcess+0xbc>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f7f9 fe7a 	bl	80001d0 <strcmp>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d108      	bne.n	80064f4 <CmdLineProcess+0xa4>
            {

                return(psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4908      	ldr	r1, [pc, #32]	@ (800650c <CmdLineProcess+0xbc>)
 80064ea:	4610      	mov	r0, r2
 80064ec:	4798      	blx	r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	e007      	b.n	8006504 <CmdLineProcess+0xb4>
            }

            //
            // Not found, so advance to the next entry.
            //
            psCmdEntry++;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	330c      	adds	r3, #12
 80064f8:	60bb      	str	r3, [r7, #8]
        while(psCmdEntry->pcCmd)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e4      	bne.n	80064cc <CmdLineProcess+0x7c>

    //
    // Fall through to here means that no matching command was found, so return
    // an error.
    //
    return(CMDLINE_BAD_CMD);
 8006502:	2301      	movs	r3, #1
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	200058bc 	.word	0x200058bc
 8006510:	20000094 	.word	0x20000094

08006514 <__NVIC_SystemReset>:
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006518:	f3bf 8f4f 	dsb	sy
}
 800651c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800651e:	4b06      	ldr	r3, [pc, #24]	@ (8006538 <__NVIC_SystemReset+0x24>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006526:	4904      	ldr	r1, [pc, #16]	@ (8006538 <__NVIC_SystemReset+0x24>)
 8006528:	4b04      	ldr	r3, [pc, #16]	@ (800653c <__NVIC_SystemReset+0x28>)
 800652a:	4313      	orrs	r3, r2
 800652c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800652e:	f3bf 8f4f 	dsb	sy
}
 8006532:	bf00      	nop
    __NOP();
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <__NVIC_SystemReset+0x20>
 8006538:	e000ed00 	.word	0xe000ed00
 800653c:	05fa0004 	.word	0x05fa0004

08006540 <LL_USART_Enable>:
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60da      	str	r2, [r3, #12]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <LL_USART_Disable>:
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	60da      	str	r2, [r3, #12]
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <LL_USART_SetBaudRate>:
{
 8006580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006584:	b0c0      	sub	sp, #256	@ 0x100
 8006586:	af00      	add	r7, sp, #0
 8006588:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800658c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8006590:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8006594:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a0:	f040 810c 	bne.w	80067bc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80065a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065b6:	4622      	mov	r2, r4
 80065b8:	462b      	mov	r3, r5
 80065ba:	1891      	adds	r1, r2, r2
 80065bc:	6639      	str	r1, [r7, #96]	@ 0x60
 80065be:	415b      	adcs	r3, r3
 80065c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80065c2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80065c6:	4621      	mov	r1, r4
 80065c8:	eb12 0801 	adds.w	r8, r2, r1
 80065cc:	4629      	mov	r1, r5
 80065ce:	eb43 0901 	adc.w	r9, r3, r1
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065e6:	4690      	mov	r8, r2
 80065e8:	4699      	mov	r9, r3
 80065ea:	4623      	mov	r3, r4
 80065ec:	eb18 0303 	adds.w	r3, r8, r3
 80065f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065f4:	462b      	mov	r3, r5
 80065f6:	eb49 0303 	adc.w	r3, r9, r3
 80065fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006602:	2200      	movs	r2, #0
 8006604:	469a      	mov	sl, r3
 8006606:	4693      	mov	fp, r2
 8006608:	eb1a 030a 	adds.w	r3, sl, sl
 800660c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800660e:	eb4b 030b 	adc.w	r3, fp, fp
 8006612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006614:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800661c:	f7fa fb44 	bl	8000ca8 <__aeabi_uldivmod>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4b64      	ldr	r3, [pc, #400]	@ (80067b8 <LL_USART_SetBaudRate+0x238>)
 8006626:	fba3 2302 	umull	r2, r3, r3, r2
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	b29b      	uxth	r3, r3
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	b29c      	uxth	r4, r3
 8006632:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006636:	2200      	movs	r2, #0
 8006638:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800663c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006640:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	1891      	adds	r1, r2, r2
 800664a:	6539      	str	r1, [r7, #80]	@ 0x50
 800664c:	415b      	adcs	r3, r3
 800664e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006654:	4641      	mov	r1, r8
 8006656:	1851      	adds	r1, r2, r1
 8006658:	64b9      	str	r1, [r7, #72]	@ 0x48
 800665a:	4649      	mov	r1, r9
 800665c:	414b      	adcs	r3, r1
 800665e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800666c:	4659      	mov	r1, fp
 800666e:	00cb      	lsls	r3, r1, #3
 8006670:	4651      	mov	r1, sl
 8006672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006676:	4651      	mov	r1, sl
 8006678:	00ca      	lsls	r2, r1, #3
 800667a:	4610      	mov	r0, r2
 800667c:	4619      	mov	r1, r3
 800667e:	4603      	mov	r3, r0
 8006680:	4642      	mov	r2, r8
 8006682:	189b      	adds	r3, r3, r2
 8006684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006688:	464b      	mov	r3, r9
 800668a:	460a      	mov	r2, r1
 800668c:	eb42 0303 	adc.w	r3, r2, r3
 8006690:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006694:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006698:	2200      	movs	r2, #0
 800669a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800669e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80066a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80066a6:	460b      	mov	r3, r1
 80066a8:	18db      	adds	r3, r3, r3
 80066aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ac:	4613      	mov	r3, r2
 80066ae:	eb42 0303 	adc.w	r3, r2, r3
 80066b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066b8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80066bc:	f7fa faf4 	bl	8000ca8 <__aeabi_uldivmod>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4611      	mov	r1, r2
 80066c6:	4b3c      	ldr	r3, [pc, #240]	@ (80067b8 <LL_USART_SetBaudRate+0x238>)
 80066c8:	fba3 2301 	umull	r2, r3, r3, r1
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	2264      	movs	r2, #100	@ 0x64
 80066d0:	fb02 f303 	mul.w	r3, r2, r3
 80066d4:	1acb      	subs	r3, r1, r3
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066dc:	4b36      	ldr	r3, [pc, #216]	@ (80067b8 <LL_USART_SetBaudRate+0x238>)
 80066de:	fba3 2302 	umull	r2, r3, r3, r2
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	4423      	add	r3, r4
 80066f2:	b29c      	uxth	r4, r3
 80066f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066fe:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006702:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8006706:	4642      	mov	r2, r8
 8006708:	464b      	mov	r3, r9
 800670a:	1891      	adds	r1, r2, r2
 800670c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800670e:	415b      	adcs	r3, r3
 8006710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006712:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006716:	4641      	mov	r1, r8
 8006718:	1851      	adds	r1, r2, r1
 800671a:	6339      	str	r1, [r7, #48]	@ 0x30
 800671c:	4649      	mov	r1, r9
 800671e:	414b      	adcs	r3, r1
 8006720:	637b      	str	r3, [r7, #52]	@ 0x34
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800672e:	4659      	mov	r1, fp
 8006730:	00cb      	lsls	r3, r1, #3
 8006732:	4651      	mov	r1, sl
 8006734:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006738:	4651      	mov	r1, sl
 800673a:	00ca      	lsls	r2, r1, #3
 800673c:	4610      	mov	r0, r2
 800673e:	4619      	mov	r1, r3
 8006740:	4603      	mov	r3, r0
 8006742:	4642      	mov	r2, r8
 8006744:	189b      	adds	r3, r3, r2
 8006746:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800674a:	464b      	mov	r3, r9
 800674c:	460a      	mov	r2, r1
 800674e:	eb42 0303 	adc.w	r3, r2, r3
 8006752:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800675a:	2200      	movs	r2, #0
 800675c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006760:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006764:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006768:	460b      	mov	r3, r1
 800676a:	18db      	adds	r3, r3, r3
 800676c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800676e:	4613      	mov	r3, r2
 8006770:	eb42 0303 	adc.w	r3, r2, r3
 8006774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800677a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800677e:	f7fa fa93 	bl	8000ca8 <__aeabi_uldivmod>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4b0c      	ldr	r3, [pc, #48]	@ (80067b8 <LL_USART_SetBaudRate+0x238>)
 8006788:	fba3 1302 	umull	r1, r3, r3, r2
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	2164      	movs	r1, #100	@ 0x64
 8006790:	fb01 f303 	mul.w	r3, r1, r3
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	3332      	adds	r3, #50	@ 0x32
 800679a:	4a07      	ldr	r2, [pc, #28]	@ (80067b8 <LL_USART_SetBaudRate+0x238>)
 800679c:	fba2 2303 	umull	r2, r3, r2, r3
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	4423      	add	r3, r4
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b4:	609a      	str	r2, [r3, #8]
}
 80067b6:	e108      	b.n	80069ca <LL_USART_SetBaudRate+0x44a>
 80067b8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80067bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067c6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067ca:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80067ce:	4642      	mov	r2, r8
 80067d0:	464b      	mov	r3, r9
 80067d2:	1891      	adds	r1, r2, r2
 80067d4:	6239      	str	r1, [r7, #32]
 80067d6:	415b      	adcs	r3, r3
 80067d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067de:	4641      	mov	r1, r8
 80067e0:	1854      	adds	r4, r2, r1
 80067e2:	4649      	mov	r1, r9
 80067e4:	eb43 0501 	adc.w	r5, r3, r1
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	00eb      	lsls	r3, r5, #3
 80067f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067f6:	00e2      	lsls	r2, r4, #3
 80067f8:	4614      	mov	r4, r2
 80067fa:	461d      	mov	r5, r3
 80067fc:	4643      	mov	r3, r8
 80067fe:	18e3      	adds	r3, r4, r3
 8006800:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006804:	464b      	mov	r3, r9
 8006806:	eb45 0303 	adc.w	r3, r5, r3
 800680a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800680e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006818:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8006828:	4629      	mov	r1, r5
 800682a:	008b      	lsls	r3, r1, #2
 800682c:	4621      	mov	r1, r4
 800682e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006832:	4621      	mov	r1, r4
 8006834:	008a      	lsls	r2, r1, #2
 8006836:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800683a:	f7fa fa35 	bl	8000ca8 <__aeabi_uldivmod>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4b65      	ldr	r3, [pc, #404]	@ (80069d8 <LL_USART_SetBaudRate+0x458>)
 8006844:	fba3 2302 	umull	r2, r3, r3, r2
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	b29b      	uxth	r3, r3
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	b29c      	uxth	r4, r3
 8006850:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006854:	2200      	movs	r2, #0
 8006856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800685a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800685e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8006862:	4642      	mov	r2, r8
 8006864:	464b      	mov	r3, r9
 8006866:	1891      	adds	r1, r2, r2
 8006868:	61b9      	str	r1, [r7, #24]
 800686a:	415b      	adcs	r3, r3
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006872:	4641      	mov	r1, r8
 8006874:	1851      	adds	r1, r2, r1
 8006876:	6139      	str	r1, [r7, #16]
 8006878:	4649      	mov	r1, r9
 800687a:	414b      	adcs	r3, r1
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800688a:	4659      	mov	r1, fp
 800688c:	00cb      	lsls	r3, r1, #3
 800688e:	4651      	mov	r1, sl
 8006890:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006894:	4651      	mov	r1, sl
 8006896:	00ca      	lsls	r2, r1, #3
 8006898:	4610      	mov	r0, r2
 800689a:	4619      	mov	r1, r3
 800689c:	4603      	mov	r3, r0
 800689e:	4642      	mov	r2, r8
 80068a0:	189b      	adds	r3, r3, r2
 80068a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068a6:	464b      	mov	r3, r9
 80068a8:	460a      	mov	r2, r1
 80068aa:	eb42 0303 	adc.w	r3, r2, r3
 80068ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80068cc:	4649      	mov	r1, r9
 80068ce:	008b      	lsls	r3, r1, #2
 80068d0:	4641      	mov	r1, r8
 80068d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068d6:	4641      	mov	r1, r8
 80068d8:	008a      	lsls	r2, r1, #2
 80068da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80068de:	f7fa f9e3 	bl	8000ca8 <__aeabi_uldivmod>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	4611      	mov	r1, r2
 80068e8:	4b3b      	ldr	r3, [pc, #236]	@ (80069d8 <LL_USART_SetBaudRate+0x458>)
 80068ea:	fba3 2301 	umull	r2, r3, r3, r1
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	2264      	movs	r2, #100	@ 0x64
 80068f2:	fb02 f303 	mul.w	r3, r2, r3
 80068f6:	1acb      	subs	r3, r1, r3
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	3332      	adds	r3, #50	@ 0x32
 80068fc:	4a36      	ldr	r2, [pc, #216]	@ (80069d8 <LL_USART_SetBaudRate+0x458>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	b29b      	uxth	r3, r3
 8006906:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800690a:	b29b      	uxth	r3, r3
 800690c:	4423      	add	r3, r4
 800690e:	b29c      	uxth	r4, r3
 8006910:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006914:	2200      	movs	r2, #0
 8006916:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006918:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800691a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800691e:	4642      	mov	r2, r8
 8006920:	464b      	mov	r3, r9
 8006922:	1891      	adds	r1, r2, r2
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	415b      	adcs	r3, r3
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800692e:	4641      	mov	r1, r8
 8006930:	1851      	adds	r1, r2, r1
 8006932:	6039      	str	r1, [r7, #0]
 8006934:	4649      	mov	r1, r9
 8006936:	414b      	adcs	r3, r1
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006946:	4659      	mov	r1, fp
 8006948:	00cb      	lsls	r3, r1, #3
 800694a:	4651      	mov	r1, sl
 800694c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006950:	4651      	mov	r1, sl
 8006952:	00ca      	lsls	r2, r1, #3
 8006954:	4610      	mov	r0, r2
 8006956:	4619      	mov	r1, r3
 8006958:	4603      	mov	r3, r0
 800695a:	4642      	mov	r2, r8
 800695c:	189b      	adds	r3, r3, r2
 800695e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006960:	464b      	mov	r3, r9
 8006962:	460a      	mov	r2, r1
 8006964:	eb42 0303 	adc.w	r3, r2, r3
 8006968:	677b      	str	r3, [r7, #116]	@ 0x74
 800696a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800696e:	2200      	movs	r2, #0
 8006970:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006972:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8006980:	4649      	mov	r1, r9
 8006982:	008b      	lsls	r3, r1, #2
 8006984:	4641      	mov	r1, r8
 8006986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698a:	4641      	mov	r1, r8
 800698c:	008a      	lsls	r2, r1, #2
 800698e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006992:	f7fa f989 	bl	8000ca8 <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4b0f      	ldr	r3, [pc, #60]	@ (80069d8 <LL_USART_SetBaudRate+0x458>)
 800699c:	fba3 1302 	umull	r1, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2164      	movs	r1, #100	@ 0x64
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	3332      	adds	r3, #50	@ 0x32
 80069ae:	4a0a      	ldr	r2, [pc, #40]	@ (80069d8 <LL_USART_SetBaudRate+0x458>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4423      	add	r3, r4
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	461a      	mov	r2, r3
 80069c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069c8:	609a      	str	r2, [r3, #8]
}
 80069ca:	bf00      	nop
 80069cc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069d0:	46bd      	mov	sp, r7
 80069d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d6:	bf00      	nop
 80069d8:	51eb851f 	.word	0x51eb851f

080069dc <LL_GPIO_IsOutputPinSet>:
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695a      	ldr	r2, [r3, #20]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	4013      	ands	r3, r2
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	bf0c      	ite	eq
 80069f4:	2301      	moveq	r3, #1
 80069f6:	2300      	movne	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <LL_GPIO_SetOutputPin>:
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	619a      	str	r2, [r3, #24]
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <LL_GPIO_ResetOutputPin>:
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	041a      	lsls	r2, r3, #16
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	619a      	str	r2, [r3, #24]
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <command_init>:
		command_task_update                // taskFunction;
	}
};

void	command_init(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8006a46:	f7fa ffd9 	bl	80019fc <Ringbuf_init>

//	p_CommandRingBuffer = uart_get_uart0_rx_buffer_address();
	memset((void *)s_commandBuffer, 0, sizeof(s_commandBuffer));
 8006a4a:	22ff      	movs	r2, #255	@ 0xff
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	484c      	ldr	r0, [pc, #304]	@ (8006b80 <command_init+0x140>)
 8006a50:	f009 f913 	bl	800fc7a <memset>
	s_commandBufferIndex = 0;
 8006a54:	4b4b      	ldr	r3, [pc, #300]	@ (8006b84 <command_init+0x144>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]
	Uart_sendstring(UART5,"\r\n");
 8006a5a:	494b      	ldr	r1, [pc, #300]	@ (8006b88 <command_init+0x148>)
 8006a5c:	484b      	ldr	r0, [pc, #300]	@ (8006b8c <command_init+0x14c>)
 8006a5e:	f7fb fabd 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART5,"> CPOC FIRMWARE V1.2.0 \r\n");
 8006a62:	494b      	ldr	r1, [pc, #300]	@ (8006b90 <command_init+0x150>)
 8006a64:	4849      	ldr	r0, [pc, #292]	@ (8006b8c <command_init+0x14c>)
 8006a66:	f7fb fab9 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART5,"\r\n");
 8006a6a:	4947      	ldr	r1, [pc, #284]	@ (8006b88 <command_init+0x148>)
 8006a6c:	4847      	ldr	r0, [pc, #284]	@ (8006b8c <command_init+0x14c>)
 8006a6e:	f7fb fab5 	bl	8001fdc <Uart_sendstring>

    Uart_sendstring(USART6, "\r\n");
 8006a72:	4945      	ldr	r1, [pc, #276]	@ (8006b88 <command_init+0x148>)
 8006a74:	4847      	ldr	r0, [pc, #284]	@ (8006b94 <command_init+0x154>)
 8006a76:	f7fb fab1 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART6, "> CPOC FIRMWARE V1.2.0 \r\n");
 8006a7a:	4945      	ldr	r1, [pc, #276]	@ (8006b90 <command_init+0x150>)
 8006a7c:	4845      	ldr	r0, [pc, #276]	@ (8006b94 <command_init+0x154>)
 8006a7e:	f7fb faad 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART6, "\r\n");
 8006a82:	4941      	ldr	r1, [pc, #260]	@ (8006b88 <command_init+0x148>)
 8006a84:	4843      	ldr	r0, [pc, #268]	@ (8006b94 <command_init+0x154>)
 8006a86:	f7fb faa9 	bl	8001fdc <Uart_sendstring>

    Uart_sendstring(USART2, "B");
 8006a8a:	4943      	ldr	r1, [pc, #268]	@ (8006b98 <command_init+0x158>)
 8006a8c:	4843      	ldr	r0, [pc, #268]	@ (8006b9c <command_init+0x15c>)
 8006a8e:	f7fb faa5 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n");
 8006a92:	493d      	ldr	r1, [pc, #244]	@ (8006b88 <command_init+0x148>)
 8006a94:	4841      	ldr	r0, [pc, #260]	@ (8006b9c <command_init+0x15c>)
 8006a96:	f7fb faa1 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "> CPOC FIRMWARE V1.2.0 \r\n");
 8006a9a:	493d      	ldr	r1, [pc, #244]	@ (8006b90 <command_init+0x150>)
 8006a9c:	483f      	ldr	r0, [pc, #252]	@ (8006b9c <command_init+0x15c>)
 8006a9e:	f7fb fa9d 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n");
 8006aa2:	4939      	ldr	r1, [pc, #228]	@ (8006b88 <command_init+0x148>)
 8006aa4:	483d      	ldr	r0, [pc, #244]	@ (8006b9c <command_init+0x15c>)
 8006aa6:	f7fb fa99 	bl	8001fdc <Uart_sendstring>

    command_send_splash();
 8006aaa:	f000 ff7f 	bl	80079ac <command_send_splash>

	tCmdLineEntry *pEntry;


	Uart_sendstring(UART5, "\nStart with <help_xxxx> command\r\n");
 8006aae:	493c      	ldr	r1, [pc, #240]	@ (8006ba0 <command_init+0x160>)
 8006ab0:	4836      	ldr	r0, [pc, #216]	@ (8006b8c <command_init+0x14c>)
 8006ab2:	f7fb fa93 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART5, "-------------------------------------\r\n");
 8006ab6:	493b      	ldr	r1, [pc, #236]	@ (8006ba4 <command_init+0x164>)
 8006ab8:	4834      	ldr	r0, [pc, #208]	@ (8006b8c <command_init+0x14c>)
 8006aba:	f7fb fa8f 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART6, "\nStart with <help_xxxx> command\r\n");
 8006abe:	4938      	ldr	r1, [pc, #224]	@ (8006ba0 <command_init+0x160>)
 8006ac0:	4834      	ldr	r0, [pc, #208]	@ (8006b94 <command_init+0x154>)
 8006ac2:	f7fb fa8b 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART6, "-------------------------------------\r\n");
 8006ac6:	4937      	ldr	r1, [pc, #220]	@ (8006ba4 <command_init+0x164>)
 8006ac8:	4832      	ldr	r0, [pc, #200]	@ (8006b94 <command_init+0x154>)
 8006aca:	f7fb fa87 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "\nStart with <help_xxxx> command\r\n");
 8006ace:	4934      	ldr	r1, [pc, #208]	@ (8006ba0 <command_init+0x160>)
 8006ad0:	4832      	ldr	r0, [pc, #200]	@ (8006b9c <command_init+0x15c>)
 8006ad2:	f7fb fa83 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "-------------------------------------\r\n");
 8006ad6:	4933      	ldr	r1, [pc, #204]	@ (8006ba4 <command_init+0x164>)
 8006ad8:	4830      	ldr	r0, [pc, #192]	@ (8006b9c <command_init+0x15c>)
 8006ada:	f7fb fa7f 	bl	8001fdc <Uart_sendstring>

	pEntry = &g_psCmdTable[0];
 8006ade:	4b32      	ldr	r3, [pc, #200]	@ (8006ba8 <command_init+0x168>)
 8006ae0:	607b      	str	r3, [r7, #4]

	while (pEntry->pcCmd) {
 8006ae2:	e036      	b.n	8006b52 <command_init+0x112>
		Uart_sendstring(UART5, pEntry->pcCmd);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4828      	ldr	r0, [pc, #160]	@ (8006b8c <command_init+0x14c>)
 8006aec:	f7fb fa76 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(UART5, pEntry->pcHelp);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4619      	mov	r1, r3
 8006af6:	4825      	ldr	r0, [pc, #148]	@ (8006b8c <command_init+0x14c>)
 8006af8:	f7fb fa70 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(UART5, "\r\n");
 8006afc:	4922      	ldr	r1, [pc, #136]	@ (8006b88 <command_init+0x148>)
 8006afe:	4823      	ldr	r0, [pc, #140]	@ (8006b8c <command_init+0x14c>)
 8006b00:	f7fb fa6c 	bl	8001fdc <Uart_sendstring>

        Uart_sendstring(USART6, pEntry->pcCmd);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4822      	ldr	r0, [pc, #136]	@ (8006b94 <command_init+0x154>)
 8006b0c:	f7fb fa66 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(USART6, pEntry->pcHelp);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4619      	mov	r1, r3
 8006b16:	481f      	ldr	r0, [pc, #124]	@ (8006b94 <command_init+0x154>)
 8006b18:	f7fb fa60 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(USART6, "\r\n");
 8006b1c:	491a      	ldr	r1, [pc, #104]	@ (8006b88 <command_init+0x148>)
 8006b1e:	481d      	ldr	r0, [pc, #116]	@ (8006b94 <command_init+0x154>)
 8006b20:	f7fb fa5c 	bl	8001fdc <Uart_sendstring>

        Uart_sendstring(USART2, pEntry->pcCmd);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	481c      	ldr	r0, [pc, #112]	@ (8006b9c <command_init+0x15c>)
 8006b2c:	f7fb fa56 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(USART2, pEntry->pcHelp);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	4619      	mov	r1, r3
 8006b36:	4819      	ldr	r0, [pc, #100]	@ (8006b9c <command_init+0x15c>)
 8006b38:	f7fb fa50 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(USART2, "\r\n");
 8006b3c:	4912      	ldr	r1, [pc, #72]	@ (8006b88 <command_init+0x148>)
 8006b3e:	4817      	ldr	r0, [pc, #92]	@ (8006b9c <command_init+0x15c>)
 8006b40:	f7fb fa4c 	bl	8001fdc <Uart_sendstring>

	    if (pEntry == &g_psCmdTable[12]) {
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a19      	ldr	r2, [pc, #100]	@ (8006bac <command_init+0x16c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d007      	beq.n	8006b5c <command_init+0x11c>
	        break;
	    }
	    pEntry++;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	607b      	str	r3, [r7, #4]
	while (pEntry->pcCmd) {
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1c4      	bne.n	8006ae4 <command_init+0xa4>
 8006b5a:	e000      	b.n	8006b5e <command_init+0x11e>
	        break;
 8006b5c:	bf00      	nop
	}

	Uart_sendstring(UART5, "\r\n> ");
 8006b5e:	4914      	ldr	r1, [pc, #80]	@ (8006bb0 <command_init+0x170>)
 8006b60:	480a      	ldr	r0, [pc, #40]	@ (8006b8c <command_init+0x14c>)
 8006b62:	f7fb fa3b 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART6, "\r\n> ");
 8006b66:	4912      	ldr	r1, [pc, #72]	@ (8006bb0 <command_init+0x170>)
 8006b68:	480a      	ldr	r0, [pc, #40]	@ (8006b94 <command_init+0x154>)
 8006b6a:	f7fb fa37 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART2, "\r\n> ");
 8006b6e:	4910      	ldr	r1, [pc, #64]	@ (8006bb0 <command_init+0x170>)
 8006b70:	480a      	ldr	r0, [pc, #40]	@ (8006b9c <command_init+0x15c>)
 8006b72:	f7fb fa33 	bl	8001fdc <Uart_sendstring>
}
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	200058e0 	.word	0x200058e0
 8006b84:	200059df 	.word	0x200059df
 8006b88:	080148e0 	.word	0x080148e0
 8006b8c:	40005000 	.word	0x40005000
 8006b90:	080148e4 	.word	0x080148e4
 8006b94:	40011400 	.word	0x40011400
 8006b98:	08014900 	.word	0x08014900
 8006b9c:	40004400 	.word	0x40004400
 8006ba0:	08014904 	.word	0x08014904
 8006ba4:	08014928 	.word	0x08014928
 8006ba8:	20000094 	.word	0x20000094
 8006bac:	20000124 	.word	0x20000124
 8006bb0:	08014950 	.word	0x08014950

08006bb4 <command_task_update>:
volatile uint8_t rs422_report_enable = 0;
void process_command(USART_TypeDef* USARTx, char rxData);


static void command_task_update(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
    char rxData;


    while (IsDataAvailable(UART5) || IsDataAvailable(USART6) || IsDataAvailable(USART2))
 8006bba:	e03e      	b.n	8006c3a <command_task_update+0x86>
    {
        if (IsDataAvailable(UART5)) {
 8006bbc:	482a      	ldr	r0, [pc, #168]	@ (8006c68 <command_task_update+0xb4>)
 8006bbe:	f7fb f9b9 	bl	8001f34 <IsDataAvailable>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00e      	beq.n	8006be6 <command_task_update+0x32>
            rxData = Uart_read(UART5);
 8006bc8:	4827      	ldr	r0, [pc, #156]	@ (8006c68 <command_task_update+0xb4>)
 8006bca:	f7fa fffb 	bl	8001bc4 <Uart_read>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	71fb      	strb	r3, [r7, #7]
            Uart_write(UART5, rxData);
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4824      	ldr	r0, [pc, #144]	@ (8006c68 <command_task_update+0xb4>)
 8006bd8:	f7fb f8b6 	bl	8001d48 <Uart_write>
            process_command(UART5, rxData);
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	4619      	mov	r1, r3
 8006be0:	4821      	ldr	r0, [pc, #132]	@ (8006c68 <command_task_update+0xb4>)
 8006be2:	f000 f847 	bl	8006c74 <process_command>
        }

        if (IsDataAvailable(USART6)) {
 8006be6:	4821      	ldr	r0, [pc, #132]	@ (8006c6c <command_task_update+0xb8>)
 8006be8:	f7fb f9a4 	bl	8001f34 <IsDataAvailable>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00e      	beq.n	8006c10 <command_task_update+0x5c>
            rxData = Uart_read(USART6);
 8006bf2:	481e      	ldr	r0, [pc, #120]	@ (8006c6c <command_task_update+0xb8>)
 8006bf4:	f7fa ffe6 	bl	8001bc4 <Uart_read>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	71fb      	strb	r3, [r7, #7]
            Uart_write(USART6, rxData);
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	481a      	ldr	r0, [pc, #104]	@ (8006c6c <command_task_update+0xb8>)
 8006c02:	f7fb f8a1 	bl	8001d48 <Uart_write>
            process_command(USART6, rxData);
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4818      	ldr	r0, [pc, #96]	@ (8006c6c <command_task_update+0xb8>)
 8006c0c:	f000 f832 	bl	8006c74 <process_command>
        }

        if (IsDataAvailable(USART2)) {
 8006c10:	4817      	ldr	r0, [pc, #92]	@ (8006c70 <command_task_update+0xbc>)
 8006c12:	f7fb f98f 	bl	8001f34 <IsDataAvailable>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00e      	beq.n	8006c3a <command_task_update+0x86>
            rxData = Uart_read(USART2);
 8006c1c:	4814      	ldr	r0, [pc, #80]	@ (8006c70 <command_task_update+0xbc>)
 8006c1e:	f7fa ffd1 	bl	8001bc4 <Uart_read>
 8006c22:	4603      	mov	r3, r0
 8006c24:	71fb      	strb	r3, [r7, #7]
            Uart_write(USART2, rxData);
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4811      	ldr	r0, [pc, #68]	@ (8006c70 <command_task_update+0xbc>)
 8006c2c:	f7fb f88c 	bl	8001d48 <Uart_write>
            process_command(USART2, rxData);
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	4619      	mov	r1, r3
 8006c34:	480e      	ldr	r0, [pc, #56]	@ (8006c70 <command_task_update+0xbc>)
 8006c36:	f000 f81d 	bl	8006c74 <process_command>
    while (IsDataAvailable(UART5) || IsDataAvailable(USART6) || IsDataAvailable(USART2))
 8006c3a:	480b      	ldr	r0, [pc, #44]	@ (8006c68 <command_task_update+0xb4>)
 8006c3c:	f7fb f97a 	bl	8001f34 <IsDataAvailable>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1ba      	bne.n	8006bbc <command_task_update+0x8>
 8006c46:	4809      	ldr	r0, [pc, #36]	@ (8006c6c <command_task_update+0xb8>)
 8006c48:	f7fb f974 	bl	8001f34 <IsDataAvailable>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1b4      	bne.n	8006bbc <command_task_update+0x8>
 8006c52:	4807      	ldr	r0, [pc, #28]	@ (8006c70 <command_task_update+0xbc>)
 8006c54:	f7fb f96e 	bl	8001f34 <IsDataAvailable>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1ae      	bne.n	8006bbc <command_task_update+0x8>
        }
    }
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40005000 	.word	0x40005000
 8006c6c:	40011400 	.word	0x40011400
 8006c70:	40004400 	.word	0x40004400

08006c74 <process_command>:

void process_command(USART_TypeDef* USARTx, char rxData)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
    int8_t ret_val;
    if (rxData == 27)  // ASCII code for ESC key
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	2b1b      	cmp	r3, #27
 8006c84:	d10c      	bne.n	8006ca0 <process_command+0x2c>
    {
    	auto_report_enabled = 0;
 8006c86:	4b31      	ldr	r3, [pc, #196]	@ (8006d4c <process_command+0xd8>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	701a      	strb	r2, [r3, #0]
        rs422_report_enable = 0;
 8006c8c:	4b30      	ldr	r3, [pc, #192]	@ (8006d50 <process_command+0xdc>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
        rf_report_enable = 0;
 8006c92:	4b30      	ldr	r3, [pc, #192]	@ (8006d54 <process_command+0xe0>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]
        gps_report_enable = 0;
 8006c98:	4b2f      	ldr	r3, [pc, #188]	@ (8006d58 <process_command+0xe4>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	701a      	strb	r2, [r3, #0]
        return;
 8006c9e:	e052      	b.n	8006d46 <process_command+0xd2>
    }

    if ((rxData == '\r') || (rxData == '\n'))
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	2b0d      	cmp	r3, #13
 8006ca4:	d002      	beq.n	8006cac <process_command+0x38>
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	2b0a      	cmp	r3, #10
 8006caa:	d12f      	bne.n	8006d0c <process_command+0x98>
    {
        if (s_commandBufferIndex > 0)
 8006cac:	4b2b      	ldr	r3, [pc, #172]	@ (8006d5c <process_command+0xe8>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d026      	beq.n	8006d02 <process_command+0x8e>
        {
            s_commandBuffer[s_commandBufferIndex] = 0;
 8006cb4:	4b29      	ldr	r3, [pc, #164]	@ (8006d5c <process_command+0xe8>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4b29      	ldr	r3, [pc, #164]	@ (8006d60 <process_command+0xec>)
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	5499      	strb	r1, [r3, r2]
            s_commandBufferIndex++;
 8006cc0:	4b26      	ldr	r3, [pc, #152]	@ (8006d5c <process_command+0xe8>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	4b24      	ldr	r3, [pc, #144]	@ (8006d5c <process_command+0xe8>)
 8006cca:	701a      	strb	r2, [r3, #0]
            ret_val = CmdLineProcess(s_commandBuffer,USARTx);
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4824      	ldr	r0, [pc, #144]	@ (8006d60 <process_command+0xec>)
 8006cd0:	f7ff fbbe 	bl	8006450 <CmdLineProcess>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73fb      	strb	r3, [r7, #15]
            s_commandBufferIndex = 0;
 8006cd8:	4b20      	ldr	r3, [pc, #128]	@ (8006d5c <process_command+0xe8>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
            Uart_sendstring(USARTx, "\r\n> ");
 8006cde:	4921      	ldr	r1, [pc, #132]	@ (8006d64 <process_command+0xf0>)
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7fb f97b 	bl	8001fdc <Uart_sendstring>
            Uart_sendstring(USARTx, ErrorCode[ret_val]);
 8006ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cea:	4a1f      	ldr	r2, [pc, #124]	@ (8006d68 <process_command+0xf4>)
 8006cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fb f972 	bl	8001fdc <Uart_sendstring>
            Uart_sendstring(USARTx, "> ");
 8006cf8:	491c      	ldr	r1, [pc, #112]	@ (8006d6c <process_command+0xf8>)
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fb f96e 	bl	8001fdc <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 8006d00:	e021      	b.n	8006d46 <process_command+0xd2>
        }
        else
        {
            Uart_sendstring(USARTx, "\r\n> ");
 8006d02:	4918      	ldr	r1, [pc, #96]	@ (8006d64 <process_command+0xf0>)
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fb f969 	bl	8001fdc <Uart_sendstring>
        if (s_commandBufferIndex > 0)
 8006d0a:	e01c      	b.n	8006d46 <process_command+0xd2>
        }
    }
    else if ((rxData == 8) || (rxData == 127))
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d002      	beq.n	8006d18 <process_command+0xa4>
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d16:	d10a      	bne.n	8006d2e <process_command+0xba>
    {
        if (s_commandBufferIndex > 0)
 8006d18:	4b10      	ldr	r3, [pc, #64]	@ (8006d5c <process_command+0xe8>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d012      	beq.n	8006d46 <process_command+0xd2>
        {
            s_commandBufferIndex--;
 8006d20:	4b0e      	ldr	r3, [pc, #56]	@ (8006d5c <process_command+0xe8>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	4b0c      	ldr	r3, [pc, #48]	@ (8006d5c <process_command+0xe8>)
 8006d2a:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > 0)
 8006d2c:	e00b      	b.n	8006d46 <process_command+0xd2>
        }
    }
    else
    {
        s_commandBuffer[s_commandBufferIndex] = rxData;
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d5c <process_command+0xe8>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	4619      	mov	r1, r3
 8006d34:	4a0a      	ldr	r2, [pc, #40]	@ (8006d60 <process_command+0xec>)
 8006d36:	78fb      	ldrb	r3, [r7, #3]
 8006d38:	5453      	strb	r3, [r2, r1]
        s_commandBufferIndex++;
 8006d3a:	4b08      	ldr	r3, [pc, #32]	@ (8006d5c <process_command+0xe8>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	4b06      	ldr	r3, [pc, #24]	@ (8006d5c <process_command+0xe8>)
 8006d44:	701a      	strb	r2, [r3, #0]
        if (s_commandBufferIndex > COMMAND_MAX_LENGTH)
        {
            s_commandBufferIndex = 0;
        }
    }
}
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	200059e0 	.word	0x200059e0
 8006d50:	200059e1 	.word	0x200059e1
 8006d54:	200059e2 	.word	0x200059e2
 8006d58:	200059e4 	.word	0x200059e4
 8006d5c:	200059df 	.word	0x200059df
 8006d60:	200058e0 	.word	0x200058e0
 8006d64:	08014950 	.word	0x08014950
 8006d68:	2000007c 	.word	0x2000007c
 8006d6c:	08014958 	.word	0x08014958

08006d70 <Cmd_help>:

//USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];

int Cmd_help(int argc, char *argv[]) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
    tCmdLineEntry *pEntry;
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d80:	3b01      	subs	r3, #1
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	4413      	add	r3, r2
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60bb      	str	r3, [r7, #8]

    Uart_sendstring(USARTx, "\nSimple commands\r\n");
 8006d8c:	4916      	ldr	r1, [pc, #88]	@ (8006de8 <Cmd_help+0x78>)
 8006d8e:	68b8      	ldr	r0, [r7, #8]
 8006d90:	f7fb f924 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USARTx, "------------------\r\n");
 8006d94:	4915      	ldr	r1, [pc, #84]	@ (8006dec <Cmd_help+0x7c>)
 8006d96:	68b8      	ldr	r0, [r7, #8]
 8006d98:	f7fb f920 	bl	8001fdc <Uart_sendstring>
    pEntry = &g_psCmdTable[0];
 8006d9c:	4b14      	ldr	r3, [pc, #80]	@ (8006df0 <Cmd_help+0x80>)
 8006d9e:	60fb      	str	r3, [r7, #12]

    while (pEntry->pcCmd) {
 8006da0:	e016      	b.n	8006dd0 <Cmd_help+0x60>
        Uart_sendstring(USARTx, pEntry->pcCmd);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4619      	mov	r1, r3
 8006da8:	68b8      	ldr	r0, [r7, #8]
 8006daa:	f7fb f917 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(USARTx, pEntry->pcHelp);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	4619      	mov	r1, r3
 8006db4:	68b8      	ldr	r0, [r7, #8]
 8006db6:	f7fb f911 	bl	8001fdc <Uart_sendstring>
        Uart_sendstring(USARTx, "\r\n");
 8006dba:	490e      	ldr	r1, [pc, #56]	@ (8006df4 <Cmd_help+0x84>)
 8006dbc:	68b8      	ldr	r0, [r7, #8]
 8006dbe:	f7fb f90d 	bl	8001fdc <Uart_sendstring>
        if (pEntry == &g_psCmdTable[12]) {
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8006df8 <Cmd_help+0x88>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d007      	beq.n	8006dda <Cmd_help+0x6a>
            break;
        }
        pEntry++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	60fb      	str	r3, [r7, #12]
    while (pEntry->pcCmd) {
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e4      	bne.n	8006da2 <Cmd_help+0x32>
 8006dd8:	e000      	b.n	8006ddc <Cmd_help+0x6c>
            break;
 8006dda:	bf00      	nop
    }

    return (CMDLINE_OK);
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	0801495c 	.word	0x0801495c
 8006dec:	08014970 	.word	0x08014970
 8006df0:	20000094 	.word	0x20000094
 8006df4:	080148e0 	.word	0x080148e0
 8006df8:	20000124 	.word	0x20000124

08006dfc <Cmd_help_all>:

// 9table <-> 8 o day
int Cmd_help_all(int argc, char *argv[]) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	4413      	add	r3, r2
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60bb      	str	r3, [r7, #8]
	Uart_sendstring(USARTx, "\nAvailable commands\r\n");
 8006e18:	4915      	ldr	r1, [pc, #84]	@ (8006e70 <Cmd_help_all+0x74>)
 8006e1a:	68b8      	ldr	r0, [r7, #8]
 8006e1c:	f7fb f8de 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USARTx, "------------------\r\n");
 8006e20:	4914      	ldr	r1, [pc, #80]	@ (8006e74 <Cmd_help_all+0x78>)
 8006e22:	68b8      	ldr	r0, [r7, #8]
 8006e24:	f7fb f8da 	bl	8001fdc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[0];
 8006e28:	4b13      	ldr	r3, [pc, #76]	@ (8006e78 <Cmd_help_all+0x7c>)
 8006e2a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006e2c:	e012      	b.n	8006e54 <Cmd_help_all+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4619      	mov	r1, r3
 8006e34:	68b8      	ldr	r0, [r7, #8]
 8006e36:	f7fb f8d1 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	68b8      	ldr	r0, [r7, #8]
 8006e42:	f7fb f8cb 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006e46:	490d      	ldr	r1, [pc, #52]	@ (8006e7c <Cmd_help_all+0x80>)
 8006e48:	68b8      	ldr	r0, [r7, #8]
 8006e4a:	f7fb f8c7 	bl	8001fdc <Uart_sendstring>
//	        Uart_sendstring(USARTx, "\n--------------IOU Command List-------------\r\n");
//	    }


		// Advance to the next entry in the table.
		pEntry++;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	330c      	adds	r3, #12
 8006e52:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e8      	bne.n	8006e2e <Cmd_help_all+0x32>

	}
	Uart_sendstring(USARTx, "--------------    END    -------------\r\n");
 8006e5c:	4908      	ldr	r1, [pc, #32]	@ (8006e80 <Cmd_help_all+0x84>)
 8006e5e:	68b8      	ldr	r0, [r7, #8]
 8006e60:	f7fb f8bc 	bl	8001fdc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	08014988 	.word	0x08014988
 8006e74:	08014970 	.word	0x08014970
 8006e78:	20000094 	.word	0x20000094
 8006e7c:	080148e0 	.word	0x080148e0
 8006e80:	080149a0 	.word	0x080149a0

08006e84 <Cmd_help_cpoc>:

int Cmd_help_cpoc(int argc, char *argv[]) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e94:	3b01      	subs	r3, #1
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CPOC Command List-------------\r\n");
 8006ea0:	4914      	ldr	r1, [pc, #80]	@ (8006ef4 <Cmd_help_cpoc+0x70>)
 8006ea2:	68b8      	ldr	r0, [r7, #8]
 8006ea4:	f7fb f89a 	bl	8001fdc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[13];
 8006ea8:	4b13      	ldr	r3, [pc, #76]	@ (8006ef8 <Cmd_help_cpoc+0x74>)
 8006eaa:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006eac:	e016      	b.n	8006edc <Cmd_help_cpoc+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68b8      	ldr	r0, [r7, #8]
 8006eb6:	f7fb f891 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	68b8      	ldr	r0, [r7, #8]
 8006ec2:	f7fb f88b 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006ec6:	490d      	ldr	r1, [pc, #52]	@ (8006efc <Cmd_help_cpoc+0x78>)
 8006ec8:	68b8      	ldr	r0, [r7, #8]
 8006eca:	f7fb f887 	bl	8001fdc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[27]) {
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8006f00 <Cmd_help_cpoc+0x7c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d007      	beq.n	8006ee6 <Cmd_help_cpoc+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e4      	bne.n	8006eae <Cmd_help_cpoc+0x2a>
 8006ee4:	e000      	b.n	8006ee8 <Cmd_help_cpoc+0x64>
	        break;
 8006ee6:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006ee8:	2300      	movs	r3, #0

}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	080149cc 	.word	0x080149cc
 8006ef8:	20000130 	.word	0x20000130
 8006efc:	080148e0 	.word	0x080148e0
 8006f00:	200001d8 	.word	0x200001d8

08006f04 <Cmd_help_pmu>:
int Cmd_help_pmu(int argc, char *argv[]) {
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f14:	3b01      	subs	r3, #1
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PMU Command List-------------\r\n");
 8006f20:	4914      	ldr	r1, [pc, #80]	@ (8006f74 <Cmd_help_pmu+0x70>)
 8006f22:	68b8      	ldr	r0, [r7, #8]
 8006f24:	f7fb f85a 	bl	8001fdc <Uart_sendstring>
	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[28];
 8006f28:	4b13      	ldr	r3, [pc, #76]	@ (8006f78 <Cmd_help_pmu+0x74>)
 8006f2a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006f2c:	e016      	b.n	8006f5c <Cmd_help_pmu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4619      	mov	r1, r3
 8006f34:	68b8      	ldr	r0, [r7, #8]
 8006f36:	f7fb f851 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	68b8      	ldr	r0, [r7, #8]
 8006f42:	f7fb f84b 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006f46:	490d      	ldr	r1, [pc, #52]	@ (8006f7c <Cmd_help_pmu+0x78>)
 8006f48:	68b8      	ldr	r0, [r7, #8]
 8006f4a:	f7fb f847 	bl	8001fdc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[34]) {
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4a0b      	ldr	r2, [pc, #44]	@ (8006f80 <Cmd_help_pmu+0x7c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d007      	beq.n	8006f66 <Cmd_help_pmu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e4      	bne.n	8006f2e <Cmd_help_pmu+0x2a>
 8006f64:	e000      	b.n	8006f68 <Cmd_help_pmu+0x64>
	        break;
 8006f66:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	080149fc 	.word	0x080149fc
 8006f78:	200001e4 	.word	0x200001e4
 8006f7c:	080148e0 	.word	0x080148e0
 8006f80:	2000022c 	.word	0x2000022c

08006f84 <Cmd_help_pdu>:
int Cmd_help_pdu(int argc, char *argv[]) {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f94:	3b01      	subs	r3, #1
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------PDU Command List-------------\r\n");
 8006fa0:	4914      	ldr	r1, [pc, #80]	@ (8006ff4 <Cmd_help_pdu+0x70>)
 8006fa2:	68b8      	ldr	r0, [r7, #8]
 8006fa4:	f7fb f81a 	bl	8001fdc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[35];
 8006fa8:	4b13      	ldr	r3, [pc, #76]	@ (8006ff8 <Cmd_help_pdu+0x74>)
 8006faa:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 8006fac:	e016      	b.n	8006fdc <Cmd_help_pdu+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	68b8      	ldr	r0, [r7, #8]
 8006fb6:	f7fb f811 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	68b8      	ldr	r0, [r7, #8]
 8006fc2:	f7fb f80b 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8006fc6:	490d      	ldr	r1, [pc, #52]	@ (8006ffc <Cmd_help_pdu+0x78>)
 8006fc8:	68b8      	ldr	r0, [r7, #8]
 8006fca:	f7fb f807 	bl	8001fdc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[40]) {
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8007000 <Cmd_help_pdu+0x7c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d007      	beq.n	8006fe6 <Cmd_help_pdu+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e4      	bne.n	8006fae <Cmd_help_pdu+0x2a>
 8006fe4:	e000      	b.n	8006fe8 <Cmd_help_pdu+0x64>
	        break;
 8006fe6:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	08014a2c 	.word	0x08014a2c
 8006ff8:	20000238 	.word	0x20000238
 8006ffc:	080148e0 	.word	0x080148e0
 8007000:	20000274 	.word	0x20000274

08007004 <Cmd_help_cam>:
int Cmd_help_cam(int argc, char *argv[]) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007014:	3b01      	subs	r3, #1
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	4413      	add	r3, r2
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------CAM Command List-------------\r\n");
 8007020:	4914      	ldr	r1, [pc, #80]	@ (8007074 <Cmd_help_cam+0x70>)
 8007022:	68b8      	ldr	r0, [r7, #8]
 8007024:	f7fa ffda 	bl	8001fdc <Uart_sendstring>

	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[41];
 8007028:	4b13      	ldr	r3, [pc, #76]	@ (8007078 <Cmd_help_cam+0x74>)
 800702a:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 800702c:	e016      	b.n	800705c <Cmd_help_cam+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4619      	mov	r1, r3
 8007034:	68b8      	ldr	r0, [r7, #8]
 8007036:	f7fa ffd1 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	4619      	mov	r1, r3
 8007040:	68b8      	ldr	r0, [r7, #8]
 8007042:	f7fa ffcb 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 8007046:	490d      	ldr	r1, [pc, #52]	@ (800707c <Cmd_help_cam+0x78>)
 8007048:	68b8      	ldr	r0, [r7, #8]
 800704a:	f7fa ffc7 	bl	8001fdc <Uart_sendstring>



	    if (pEntry == &g_psCmdTable[41]) {
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4a09      	ldr	r2, [pc, #36]	@ (8007078 <Cmd_help_cam+0x74>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d007      	beq.n	8007066 <Cmd_help_cam+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	330c      	adds	r3, #12
 800705a:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e4      	bne.n	800702e <Cmd_help_cam+0x2a>
 8007064:	e000      	b.n	8007068 <Cmd_help_cam+0x64>
	        break;
 8007066:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	08014a5c 	.word	0x08014a5c
 8007078:	20000280 	.word	0x20000280
 800707c:	080148e0 	.word	0x080148e0

08007080 <Cmd_help_iou>:
int Cmd_help_iou(int argc, char *argv[]) {
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
	tCmdLineEntry *pEntry;
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007090:	3b01      	subs	r3, #1
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	4413      	add	r3, r2
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60bb      	str	r3, [r7, #8]
    Uart_sendstring(USARTx, "--------------IOU Command List-------------\r\n");
 800709c:	4914      	ldr	r1, [pc, #80]	@ (80070f0 <Cmd_help_iou+0x70>)
 800709e:	68b8      	ldr	r0, [r7, #8]
 80070a0:	f7fa ff9c 	bl	8001fdc <Uart_sendstring>


	// Point at the beginning of the command table.
	pEntry = &g_psCmdTable[42];
 80070a4:	4b13      	ldr	r3, [pc, #76]	@ (80070f4 <Cmd_help_iou+0x74>)
 80070a6:	60fb      	str	r3, [r7, #12]

	// Enter a loop to read each entry from the command table.  The
	// end of the table has been reached when the command name is NULL.
	while (pEntry->pcCmd) {
 80070a8:	e016      	b.n	80070d8 <Cmd_help_iou+0x58>
		// Print the command name and the brief description.
		Uart_sendstring(USARTx, pEntry->pcCmd);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4619      	mov	r1, r3
 80070b0:	68b8      	ldr	r0, [r7, #8]
 80070b2:	f7fa ff93 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, pEntry->pcHelp);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	4619      	mov	r1, r3
 80070bc:	68b8      	ldr	r0, [r7, #8]
 80070be:	f7fa ff8d 	bl	8001fdc <Uart_sendstring>
		Uart_sendstring(USARTx, "\r\n");
 80070c2:	490d      	ldr	r1, [pc, #52]	@ (80070f8 <Cmd_help_iou+0x78>)
 80070c4:	68b8      	ldr	r0, [r7, #8]
 80070c6:	f7fa ff89 	bl	8001fdc <Uart_sendstring>


	    if (pEntry == &g_psCmdTable[23]) {
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4a0b      	ldr	r2, [pc, #44]	@ (80070fc <Cmd_help_iou+0x7c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d007      	beq.n	80070e2 <Cmd_help_iou+0x62>
	        break;
	    }

		// Advance to the next entry in the table.
		pEntry++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	330c      	adds	r3, #12
 80070d6:	60fb      	str	r3, [r7, #12]
	while (pEntry->pcCmd) {
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e4      	bne.n	80070aa <Cmd_help_iou+0x2a>
 80070e0:	e000      	b.n	80070e4 <Cmd_help_iou+0x64>
	        break;
 80070e2:	bf00      	nop

	}
	// Return success.
	return (CMDLINE_OK);
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	08014a8c 	.word	0x08014a8c
 80070f4:	2000028c 	.word	0x2000028c
 80070f8:	080148e0 	.word	0x080148e0
 80070fc:	200001a8 	.word	0x200001a8

08007100 <NotYetDefine>:





int NotYetDefine(int argc, char *argv[]) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007110:	3b01      	subs	r3, #1
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	4413      	add	r3, r2
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60fb      	str	r3, [r7, #12]
	Uart_sendstring(USARTx, "\nThis function is not defined yet \r\n");
 800711c:	4904      	ldr	r1, [pc, #16]	@ (8007130 <NotYetDefine+0x30>)
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7fa ff5c 	bl	8001fdc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	08014abc 	.word	0x08014abc

08007134 <Cmd_splash>:

int Cmd_splash(int argc, char *argv[]) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
	command_send_splash();
 800713e:	f000 fc35 	bl	80079ac <command_send_splash>
	// Return success.
	return (CMDLINE_OK);
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <Cmd_status_now>:

int Cmd_status_now(int argc, char *argv[]){
 800714c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714e:	b0a5      	sub	sp, #148	@ 0x94
 8007150:	af04      	add	r7, sp, #16
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800715c:	3b01      	subs	r3, #1
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	4413      	add	r3, r2
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint8_t day, date, month, year, hour, min, sec;
    float temp;
    char buffer[100];

    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8007168:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800716c:	f107 0275 	add.w	r2, r7, #117	@ 0x75
 8007170:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 8007174:	f107 0077 	add.w	r0, r7, #119	@ 0x77
 8007178:	f107 0371 	add.w	r3, r7, #113	@ 0x71
 800717c:	9302      	str	r3, [sp, #8]
 800717e:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	4623      	mov	r3, r4
 800718c:	f7fa f96a 	bl	8001464 <DS3231_GetDateTime>

    // Get current temperature from DS3231
    temp = DS3231_GetTemperature();
 8007190:	f7fa fa10 	bl	80015b4 <DS3231_GetTemperature>
 8007194:	ed87 0a1e 	vstr	s0, [r7, #120]	@ 0x78

    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8007198:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800719c:	461d      	mov	r5, r3
 800719e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80071a2:	461e      	mov	r6, r3
 80071a4:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80071a8:	461a      	mov	r2, r3
 80071aa:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80071ae:	4619      	mov	r1, r3
 80071b0:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80071b4:	461c      	mov	r4, r3
 80071b6:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80071ba:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80071be:	f107 000c 	add.w	r0, r7, #12
 80071c2:	9303      	str	r3, [sp, #12]
 80071c4:	9402      	str	r4, [sp, #8]
 80071c6:	9101      	str	r1, [sp, #4]
 80071c8:	9200      	str	r2, [sp, #0]
 80071ca:	4633      	mov	r3, r6
 80071cc:	462a      	mov	r2, r5
 80071ce:	4931      	ldr	r1, [pc, #196]	@ (8007294 <Cmd_status_now+0x148>)
 80071d0:	f008 fcf0 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, buffer);
 80071d4:	f107 030c 	add.w	r3, r7, #12
 80071d8:	4619      	mov	r1, r3
 80071da:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80071dc:	f7fa fefe 	bl	8001fdc <Uart_sendstring>

    sprintf(buffer, "Temperature: %.2f *C\r\n", temp);
 80071e0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80071e2:	f7f9 f9c1 	bl	8000568 <__aeabi_f2d>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	f107 000c 	add.w	r0, r7, #12
 80071ee:	492a      	ldr	r1, [pc, #168]	@ (8007298 <Cmd_status_now+0x14c>)
 80071f0:	f008 fce0 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, buffer);
 80071f4:	f107 030c 	add.w	r3, r7, #12
 80071f8:	4619      	mov	r1, r3
 80071fa:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80071fc:	f7fa feee 	bl	8001fdc <Uart_sendstring>
    sprintf(buffer, "HardwareVer: CPOC Hardware 1.2.0\r\n");
 8007200:	f107 030c 	add.w	r3, r7, #12
 8007204:	4925      	ldr	r1, [pc, #148]	@ (800729c <Cmd_status_now+0x150>)
 8007206:	4618      	mov	r0, r3
 8007208:	f008 fcd4 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, buffer);
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	4619      	mov	r1, r3
 8007212:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007214:	f7fa fee2 	bl	8001fdc <Uart_sendstring>
    sprintf(buffer, "FirmwareVer: CPOC Firmware 1.2.0\r\n");
 8007218:	f107 030c 	add.w	r3, r7, #12
 800721c:	4920      	ldr	r1, [pc, #128]	@ (80072a0 <Cmd_status_now+0x154>)
 800721e:	4618      	mov	r0, r3
 8007220:	f008 fcc8 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007224:	f107 030c 	add.w	r3, r7, #12
 8007228:	4619      	mov	r1, r3
 800722a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800722c:	f7fa fed6 	bl	8001fdc <Uart_sendstring>

    if (LL_GPIO_IsOutputPinSet(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin)) {
 8007230:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007234:	481b      	ldr	r0, [pc, #108]	@ (80072a4 <Cmd_status_now+0x158>)
 8007236:	f7ff fbd1 	bl	80069dc <LL_GPIO_IsOutputPinSet>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00c      	beq.n	800725a <Cmd_status_now+0x10e>
        sprintf(buffer, "Enable: RF[OFF]\r\n");
 8007240:	f107 030c 	add.w	r3, r7, #12
 8007244:	4918      	ldr	r1, [pc, #96]	@ (80072a8 <Cmd_status_now+0x15c>)
 8007246:	4618      	mov	r0, r3
 8007248:	f008 fcb4 	bl	800fbb4 <siprintf>
        Uart_sendstring(USARTx, buffer);
 800724c:	f107 030c 	add.w	r3, r7, #12
 8007250:	4619      	mov	r1, r3
 8007252:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007254:	f7fa fec2 	bl	8001fdc <Uart_sendstring>
 8007258:	e00b      	b.n	8007272 <Cmd_status_now+0x126>
    } else {
        sprintf(buffer, "Enable: RF[ON]\r\n");
 800725a:	f107 030c 	add.w	r3, r7, #12
 800725e:	4913      	ldr	r1, [pc, #76]	@ (80072ac <Cmd_status_now+0x160>)
 8007260:	4618      	mov	r0, r3
 8007262:	f008 fca7 	bl	800fbb4 <siprintf>
        Uart_sendstring(USARTx, buffer);
 8007266:	f107 030c 	add.w	r3, r7, #12
 800726a:	4619      	mov	r1, r3
 800726c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800726e:	f7fa feb5 	bl	8001fdc <Uart_sendstring>
    }

    sprintf(buffer, "MuxMode: Auto\r\n");
 8007272:	f107 030c 	add.w	r3, r7, #12
 8007276:	490e      	ldr	r1, [pc, #56]	@ (80072b0 <Cmd_status_now+0x164>)
 8007278:	4618      	mov	r0, r3
 800727a:	f008 fc9b 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, buffer);
 800727e:	f107 030c 	add.w	r3, r7, #12
 8007282:	4619      	mov	r1, r3
 8007284:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007286:	f7fa fea9 	bl	8001fdc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3784      	adds	r7, #132	@ 0x84
 8007290:	46bd      	mov	sp, r7
 8007292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007294:	08014ae4 	.word	0x08014ae4
 8007298:	08014b08 	.word	0x08014b08
 800729c:	08014b20 	.word	0x08014b20
 80072a0:	08014b44 	.word	0x08014b44
 80072a4:	40020400 	.word	0x40020400
 80072a8:	08014b68 	.word	0x08014b68
 80072ac:	08014b7c 	.word	0x08014b7c
 80072b0:	08014b90 	.word	0x08014b90

080072b4 <Cmd_set_byte_rs422>:
//uint32_t RS422_PERIOD = 3000;

uint16_t ARRAY_SIZE = 282;

int Cmd_set_byte_rs422(int argc, char *argv[])
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b090      	sub	sp, #64	@ 0x40
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	dc01      	bgt.n	80072c8 <Cmd_set_byte_rs422+0x14>
 80072c4:	2303      	movs	r3, #3
 80072c6:	e03c      	b.n	8007342 <Cmd_set_byte_rs422+0x8e>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	dd01      	ble.n	80072d2 <Cmd_set_byte_rs422+0x1e>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e037      	b.n	8007342 <Cmd_set_byte_rs422+0x8e>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072d8:	3b01      	subs	r3, #1
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	4413      	add	r3, r2
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint16_t size = atoi(argv[1]);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	3304      	adds	r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f007 fcaa 	bl	800ec44 <atoi>
 80072f0:	4603      	mov	r3, r0
 80072f2:	877b      	strh	r3, [r7, #58]	@ 0x3a
    if (size <= 0) {
 80072f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <Cmd_set_byte_rs422+0x52>
        Uart_sendstring(USARTx,"\nPositive integer!!!\n");
 80072fa:	4914      	ldr	r1, [pc, #80]	@ (800734c <Cmd_set_byte_rs422+0x98>)
 80072fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80072fe:	f7fa fe6d 	bl	8001fdc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 8007302:	2304      	movs	r3, #4
 8007304:	e01d      	b.n	8007342 <Cmd_set_byte_rs422+0x8e>
    }

    if ( size > 1000 || size < 150) {
 8007306:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800730c:	d802      	bhi.n	8007314 <Cmd_set_byte_rs422+0x60>
 800730e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007310:	2b95      	cmp	r3, #149	@ 0x95
 8007312:	d805      	bhi.n	8007320 <Cmd_set_byte_rs422+0x6c>
        Uart_sendstring(USARTx,"Array size > 150 or < 1000.\n");
 8007314:	490e      	ldr	r1, [pc, #56]	@ (8007350 <Cmd_set_byte_rs422+0x9c>)
 8007316:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007318:	f7fa fe60 	bl	8001fdc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 800731c:	2304      	movs	r3, #4
 800731e:	e010      	b.n	8007342 <Cmd_set_byte_rs422+0x8e>
    }

    ARRAY_SIZE = size;
 8007320:	4a0c      	ldr	r2, [pc, #48]	@ (8007354 <Cmd_set_byte_rs422+0xa0>)
 8007322:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007324:	8013      	strh	r3, [r2, #0]

    char msg[50];
    sprintf(msg, "\nArray size set to %d bytes.\n", size);
 8007326:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007328:	f107 0308 	add.w	r3, r7, #8
 800732c:	490a      	ldr	r1, [pc, #40]	@ (8007358 <Cmd_set_byte_rs422+0xa4>)
 800732e:	4618      	mov	r0, r3
 8007330:	f008 fc40 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, msg);
 8007334:	f107 0308 	add.w	r3, r7, #8
 8007338:	4619      	mov	r1, r3
 800733a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800733c:	f7fa fe4e 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3740      	adds	r7, #64	@ 0x40
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	08014ba0 	.word	0x08014ba0
 8007350:	08014bb8 	.word	0x08014bb8
 8007354:	200003d4 	.word	0x200003d4
 8007358:	08014bd8 	.word	0x08014bd8

0800735c <Cmd_set_baudrate_rs422>:



int Cmd_set_baudrate_rs422(int argc, char *argv[])
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b096      	sub	sp, #88	@ 0x58
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 2) return CMDLINE_TOO_FEW_ARGS;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b02      	cmp	r3, #2
 800736a:	dc01      	bgt.n	8007370 <Cmd_set_baudrate_rs422+0x14>
 800736c:	2303      	movs	r3, #3
 800736e:	e055      	b.n	800741c <Cmd_set_baudrate_rs422+0xc0>
    if ((argc-1) > 2) return CMDLINE_TOO_MANY_ARGS;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b03      	cmp	r3, #3
 8007374:	dd01      	ble.n	800737a <Cmd_set_baudrate_rs422+0x1e>
 8007376:	2302      	movs	r3, #2
 8007378:	e050      	b.n	800741c <Cmd_set_baudrate_rs422+0xc0>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007380:	3b01      	subs	r3, #1
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	4413      	add	r3, r2
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	657b      	str	r3, [r7, #84]	@ 0x54

//	{"set_baudrate_rs422", Cmd_set_baudrate_rs422, ": [9600|19200|38400|115200|230400|460800], Default 115200 | format: set_baudrate_rs422 <size>"},


    uint32_t baudrate = atoi(argv[1]);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	3304      	adds	r3, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f007 fc56 	bl	800ec44 <atoi>
 8007398:	4603      	mov	r3, r0
 800739a:	653b      	str	r3, [r7, #80]	@ 0x50

    if (baudrate != 9600 && baudrate != 19200 && baudrate != 38400 &&
 800739c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800739e:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80073a2:	d019      	beq.n	80073d8 <Cmd_set_baudrate_rs422+0x7c>
 80073a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073a6:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 80073aa:	d015      	beq.n	80073d8 <Cmd_set_baudrate_rs422+0x7c>
 80073ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ae:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80073b2:	d011      	beq.n	80073d8 <Cmd_set_baudrate_rs422+0x7c>
 80073b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073b6:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80073ba:	d00d      	beq.n	80073d8 <Cmd_set_baudrate_rs422+0x7c>
        baudrate != 115200 && baudrate != 230400 && baudrate != 460800) {
 80073bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073be:	f5b3 3f61 	cmp.w	r3, #230400	@ 0x38400
 80073c2:	d009      	beq.n	80073d8 <Cmd_set_baudrate_rs422+0x7c>
 80073c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073c6:	f5b3 2fe1 	cmp.w	r3, #460800	@ 0x70800
 80073ca:	d005      	beq.n	80073d8 <Cmd_set_baudrate_rs422+0x7c>
        Uart_sendstring(USARTx, "\n Allowed Baudrates: [9600|19200|38400|115200|230400|460800]\n");
 80073cc:	4915      	ldr	r1, [pc, #84]	@ (8007424 <Cmd_set_baudrate_rs422+0xc8>)
 80073ce:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80073d0:	f7fa fe04 	bl	8001fdc <Uart_sendstring>
        return CMDLINE_INVALID_ARG;
 80073d4:	2304      	movs	r3, #4
 80073d6:	e021      	b.n	800741c <Cmd_set_baudrate_rs422+0xc0>
    }

    // Disable UART5
    LL_USART_Disable(UART5);
 80073d8:	4813      	ldr	r0, [pc, #76]	@ (8007428 <Cmd_set_baudrate_rs422+0xcc>)
 80073da:	f7ff f8c1 	bl	8006560 <LL_USART_Disable>

    LL_RCC_ClocksTypeDef rcc_clocks;
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80073de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80073e2:	4618      	mov	r0, r3
 80073e4:	f003 fe56 	bl	800b094 <LL_RCC_GetSystemClocksFreq>
    // Configure baudrate
    LL_USART_SetBaudRate(UART5, rcc_clocks.PCLK1_Frequency, LL_USART_OVERSAMPLING_16, baudrate);
 80073e8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80073ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ec:	2200      	movs	r2, #0
 80073ee:	480e      	ldr	r0, [pc, #56]	@ (8007428 <Cmd_set_baudrate_rs422+0xcc>)
 80073f0:	f7ff f8c6 	bl	8006580 <LL_USART_SetBaudRate>

    // Enable UART5
    LL_USART_Enable(UART5);
 80073f4:	480c      	ldr	r0, [pc, #48]	@ (8007428 <Cmd_set_baudrate_rs422+0xcc>)
 80073f6:	f7ff f8a3 	bl	8006540 <LL_USART_Enable>

	Uart_flush(UART5);
 80073fa:	480b      	ldr	r0, [pc, #44]	@ (8007428 <Cmd_set_baudrate_rs422+0xcc>)
 80073fc:	f7fa fe06 	bl	800200c <Uart_flush>

    char msg[50];
    sprintf(msg, "\nRS422 Baudrate set to  %ld.\n", baudrate);
 8007400:	f107 030c 	add.w	r3, r7, #12
 8007404:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007406:	4909      	ldr	r1, [pc, #36]	@ (800742c <Cmd_set_baudrate_rs422+0xd0>)
 8007408:	4618      	mov	r0, r3
 800740a:	f008 fbd3 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, msg);
 800740e:	f107 030c 	add.w	r3, r7, #12
 8007412:	4619      	mov	r1, r3
 8007414:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007416:	f7fa fde1 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3758      	adds	r7, #88	@ 0x58
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	08014bf8 	.word	0x08014bf8
 8007428:	40005000 	.word	0x40005000
 800742c:	08014c38 	.word	0x08014c38

08007430 <Cmd_auto_report_ena>:



int Cmd_auto_report_ena(int argc, char *argv[])
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b01      	cmp	r3, #1
 800743e:	dc01      	bgt.n	8007444 <Cmd_auto_report_ena+0x14>
 8007440:	2303      	movs	r3, #3
 8007442:	e015      	b.n	8007470 <Cmd_auto_report_ena+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b02      	cmp	r3, #2
 8007448:	dd01      	ble.n	800744e <Cmd_auto_report_ena+0x1e>
 800744a:	2302      	movs	r3, #2
 800744c:	e010      	b.n	8007470 <Cmd_auto_report_ena+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007454:	3b01      	subs	r3, #1
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	4413      	add	r3, r2
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]


    auto_report_enabled = 1;
 8007460:	4b05      	ldr	r3, [pc, #20]	@ (8007478 <Cmd_auto_report_ena+0x48>)
 8007462:	2201      	movs	r2, #1
 8007464:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nAuto report mirror from RS422 Packet, [ESC] to Stop\n");
 8007466:	4905      	ldr	r1, [pc, #20]	@ (800747c <Cmd_auto_report_ena+0x4c>)
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7fa fdb7 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	200059e0 	.word	0x200059e0
 800747c:	08014c58 	.word	0x08014c58

08007480 <Cmd_rs422_report_ena>:



int Cmd_rs422_report_ena(int argc, char *argv[])
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b090      	sub	sp, #64	@ 0x40
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b01      	cmp	r3, #1
 800748e:	dc01      	bgt.n	8007494 <Cmd_rs422_report_ena+0x14>
 8007490:	2303      	movs	r3, #3
 8007492:	e020      	b.n	80074d6 <Cmd_rs422_report_ena+0x56>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b02      	cmp	r3, #2
 8007498:	dd01      	ble.n	800749e <Cmd_rs422_report_ena+0x1e>
 800749a:	2302      	movs	r3, #2
 800749c:	e01b      	b.n	80074d6 <Cmd_rs422_report_ena+0x56>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074a4:	3b01      	subs	r3, #1
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	4413      	add	r3, r2
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

    rs422_report_enable = 1;
 80074b0:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <Cmd_rs422_report_ena+0x60>)
 80074b2:	2201      	movs	r2, #1
 80074b4:	701a      	strb	r2, [r3, #0]
 // Convert seconds to milliseconds
    Uart_flush(USART1);
 80074b6:	480b      	ldr	r0, [pc, #44]	@ (80074e4 <Cmd_rs422_report_ena+0x64>)
 80074b8:	f7fa fda8 	bl	800200c <Uart_flush>

    char msg[50];
    sprintf(msg, "\nAuto report RS422, [ESC] to Stop\n");
 80074bc:	f107 0308 	add.w	r3, r7, #8
 80074c0:	4909      	ldr	r1, [pc, #36]	@ (80074e8 <Cmd_rs422_report_ena+0x68>)
 80074c2:	4618      	mov	r0, r3
 80074c4:	f008 fb76 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, msg);
 80074c8:	f107 0308 	add.w	r3, r7, #8
 80074cc:	4619      	mov	r1, r3
 80074ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80074d0:	f7fa fd84 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3740      	adds	r7, #64	@ 0x40
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	200059e1 	.word	0x200059e1
 80074e4:	40011000 	.word	0x40011000
 80074e8:	08014c90 	.word	0x08014c90

080074ec <Cmd_rf_report_ena>:

volatile uint8_t rf_report_enable = 0;
int Cmd_rf_report_ena(int argc, char *argv[])
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b090      	sub	sp, #64	@ 0x40
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	dc01      	bgt.n	8007500 <Cmd_rf_report_ena+0x14>
 80074fc:	2303      	movs	r3, #3
 80074fe:	e01d      	b.n	800753c <Cmd_rf_report_ena+0x50>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b02      	cmp	r3, #2
 8007504:	dd01      	ble.n	800750a <Cmd_rf_report_ena+0x1e>
 8007506:	2302      	movs	r3, #2
 8007508:	e018      	b.n	800753c <Cmd_rf_report_ena+0x50>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007510:	3b01      	subs	r3, #1
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	4413      	add	r3, r2
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    rf_report_enable = 1;
 800751c:	4b09      	ldr	r3, [pc, #36]	@ (8007544 <Cmd_rf_report_ena+0x58>)
 800751e:	2201      	movs	r2, #1
 8007520:	701a      	strb	r2, [r3, #0]
 // Convert seconds to milliseconds

    char msg[50];
    sprintf(msg, "\nAuto report RF, [ESC] to Stop\n");
 8007522:	f107 0308 	add.w	r3, r7, #8
 8007526:	4908      	ldr	r1, [pc, #32]	@ (8007548 <Cmd_rf_report_ena+0x5c>)
 8007528:	4618      	mov	r0, r3
 800752a:	f008 fb43 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, msg);
 800752e:	f107 0308 	add.w	r3, r7, #8
 8007532:	4619      	mov	r1, r3
 8007534:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007536:	f7fa fd51 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3740      	adds	r7, #64	@ 0x40
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	200059e2 	.word	0x200059e2
 8007548:	08014cb4 	.word	0x08014cb4

0800754c <Cmd_swap_byte_ena>:


volatile uint8_t swap_byte_enable = 0;

int Cmd_swap_byte_ena(int argc, char *argv[])
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b01      	cmp	r3, #1
 800755a:	dc01      	bgt.n	8007560 <Cmd_swap_byte_ena+0x14>
 800755c:	2303      	movs	r3, #3
 800755e:	e015      	b.n	800758c <Cmd_swap_byte_ena+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b02      	cmp	r3, #2
 8007564:	dd01      	ble.n	800756a <Cmd_swap_byte_ena+0x1e>
 8007566:	2302      	movs	r3, #2
 8007568:	e010      	b.n	800758c <Cmd_swap_byte_ena+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007570:	3b01      	subs	r3, #1
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	4413      	add	r3, r2
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]


    swap_byte_enable = 1;
 800757c:	4b05      	ldr	r3, [pc, #20]	@ (8007594 <Cmd_swap_byte_ena+0x48>)
 800757e:	2201      	movs	r2, #1
 8007580:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nEnabled swap byte RS422, NOT INCLUDE STX-ETX, 0x02->0xFE, 0x03->0xFD \n");
 8007582:	4905      	ldr	r1, [pc, #20]	@ (8007598 <Cmd_swap_byte_ena+0x4c>)
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7fa fd29 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	200059e3 	.word	0x200059e3
 8007598:	08014cd4 	.word	0x08014cd4

0800759c <Cmd_swap_byte_dis>:

int Cmd_swap_byte_dis(int argc, char *argv[])
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 1) return CMDLINE_TOO_FEW_ARGS;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	dc01      	bgt.n	80075b0 <Cmd_swap_byte_dis+0x14>
 80075ac:	2303      	movs	r3, #3
 80075ae:	e015      	b.n	80075dc <Cmd_swap_byte_dis+0x40>
    if ((argc-1) > 1) return CMDLINE_TOO_MANY_ARGS;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	dd01      	ble.n	80075ba <Cmd_swap_byte_dis+0x1e>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e010      	b.n	80075dc <Cmd_swap_byte_dis+0x40>
    USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075c0:	3b01      	subs	r3, #1
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	4413      	add	r3, r2
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60fb      	str	r3, [r7, #12]


    swap_byte_enable = 0;
 80075cc:	4b05      	ldr	r3, [pc, #20]	@ (80075e4 <Cmd_swap_byte_dis+0x48>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
 //   RS422_PERIOD = sec * 1000; // Convert seconds to milliseconds


    Uart_sendstring(USARTx, "\nDISABLE!!!\n");
 80075d2:	4905      	ldr	r1, [pc, #20]	@ (80075e8 <Cmd_swap_byte_dis+0x4c>)
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7fa fd01 	bl	8001fdc <Uart_sendstring>
    return CMDLINE_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	200059e3 	.word	0x200059e3
 80075e8:	08014d1c 	.word	0x08014d1c

080075ec <Cmd_memory_usage>:



int Cmd_memory_usage(int argc, char *argv[]) {
 80075ec:	b5b0      	push	{r4, r5, r7, lr}
 80075ee:	b0a6      	sub	sp, #152	@ 0x98
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	4674      	mov	r4, lr
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075fe:	3b01      	subs	r3, #1
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4413      	add	r3, r2
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    // STM32F405RGT7 có 192KB SRAM [[5]]
    uint32_t totalRAM = 192 * 1024;
 800760c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8007610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8007614:	f3ef 8308 	mrs	r3, MSP
 8007618:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 800761a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    uint32_t usedRAM = SRAM1_BASE + totalRAM - __get_MSP();
 800761c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007626:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    float ramUsage = (float)usedRAM / totalRAM * 100;
 800762a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007636:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007646:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80076c4 <Cmd_memory_usage+0xd8>
 800764a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800764e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80

    // STM32F405RGT7 có 1MB Flash [[1]] [[4]]
    uint32_t totalFlash = 1 * 1024 * 1024;
 8007652:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007656:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t usedFlash = (uint32_t)__builtin_return_address(0) - FLASH_BASE;
 8007658:	4623      	mov	r3, r4
 800765a:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800765e:	67bb      	str	r3, [r7, #120]	@ 0x78
    float flashUsage = (float)usedFlash / totalFlash * 100;
 8007660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800766c:	ee07 3a90 	vmov	s15, r3
 8007670:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007678:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80076c4 <Cmd_memory_usage+0xd8>
 800767c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007680:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74


    char buffer[100];
    sprintf(buffer, "\nRAM: %.2f%% used\r\nFlash: %.2f%% used\r\n", ramUsage, flashUsage);
 8007684:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8007688:	f7f8 ff6e 	bl	8000568 <__aeabi_f2d>
 800768c:	4604      	mov	r4, r0
 800768e:	460d      	mov	r5, r1
 8007690:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007692:	f7f8 ff69 	bl	8000568 <__aeabi_f2d>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	f107 000c 	add.w	r0, r7, #12
 800769e:	e9cd 2300 	strd	r2, r3, [sp]
 80076a2:	4622      	mov	r2, r4
 80076a4:	462b      	mov	r3, r5
 80076a6:	4908      	ldr	r1, [pc, #32]	@ (80076c8 <Cmd_memory_usage+0xdc>)
 80076a8:	f008 fa84 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, buffer);
 80076ac:	f107 030c 	add.w	r3, r7, #12
 80076b0:	4619      	mov	r1, r3
 80076b2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80076b6:	f7fa fc91 	bl	8001fdc <Uart_sendstring>

    return CMDLINE_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3790      	adds	r7, #144	@ 0x90
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bdb0      	pop	{r4, r5, r7, pc}
 80076c4:	42c80000 	.word	0x42c80000
 80076c8:	08014d2c 	.word	0x08014d2c

080076cc <Cmd_time_get>:


int Cmd_time_get(int argc, char *argv[]){
 80076cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ce:	b0a3      	sub	sp, #140	@ 0x8c
 80076d0:	af04      	add	r7, sp, #16
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
    uint8_t day, date, month, year, hour, min, sec;
    char buffer[100];
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076dc:	3b01      	subs	r3, #1
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	4413      	add	r3, r2
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	677b      	str	r3, [r7, #116]	@ 0x74
    // Get current date and time from DS3231
    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 80076e8:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80076ec:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 80076f0:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 80076f4:	f107 0073 	add.w	r0, r7, #115	@ 0x73
 80076f8:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 80076fc:	9302      	str	r3, [sp, #8]
 80076fe:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	f107 036f 	add.w	r3, r7, #111	@ 0x6f
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	4623      	mov	r3, r4
 800770c:	f7f9 feaa 	bl	8001464 <DS3231_GetDateTime>
    sprintf(buffer, "\n%02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 8007710:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007714:	461d      	mov	r5, r3
 8007716:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800771a:	461e      	mov	r6, r3
 800771c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007720:	461a      	mov	r2, r3
 8007722:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8007726:	4619      	mov	r1, r3
 8007728:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800772c:	461c      	mov	r4, r3
 800772e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8007732:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8007736:	f107 0008 	add.w	r0, r7, #8
 800773a:	9303      	str	r3, [sp, #12]
 800773c:	9402      	str	r4, [sp, #8]
 800773e:	9101      	str	r1, [sp, #4]
 8007740:	9200      	str	r2, [sp, #0]
 8007742:	4633      	mov	r3, r6
 8007744:	462a      	mov	r2, r5
 8007746:	4907      	ldr	r1, [pc, #28]	@ (8007764 <Cmd_time_get+0x98>)
 8007748:	f008 fa34 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, buffer);
 800774c:	f107 0308 	add.w	r3, r7, #8
 8007750:	4619      	mov	r1, r3
 8007752:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007754:	f7fa fc42 	bl	8001fdc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	377c      	adds	r7, #124	@ 0x7c
 800775e:	46bd      	mov	sp, r7
 8007760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007762:	bf00      	nop
 8007764:	08014ae4 	.word	0x08014ae4

08007768 <Cmd_time_set>:

int Cmd_time_set(int argc, char *argv[]){
 8007768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776a:	b0a3      	sub	sp, #140	@ 0x8c
 800776c:	af04      	add	r7, sp, #16
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
    if ((argc-1) < 7) return CMDLINE_TOO_FEW_ARGS;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b07      	cmp	r3, #7
 8007776:	dc01      	bgt.n	800777c <Cmd_time_set+0x14>
 8007778:	2303      	movs	r3, #3
 800777a:	e091      	b.n	80078a0 <Cmd_time_set+0x138>
    if ((argc-1) > 7) return CMDLINE_TOO_MANY_ARGS;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b08      	cmp	r3, #8
 8007780:	dd01      	ble.n	8007786 <Cmd_time_set+0x1e>
 8007782:	2302      	movs	r3, #2
 8007784:	e08c      	b.n	80078a0 <Cmd_time_set+0x138>
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800778c:	3b01      	subs	r3, #1
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	4413      	add	r3, r2
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	677b      	str	r3, [r7, #116]	@ 0x74
    uint8_t hour = atoi(argv[1]);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	3304      	adds	r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f007 fa50 	bl	800ec44 <atoi>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    uint8_t min = atoi(argv[2]);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	3308      	adds	r3, #8
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f007 fa47 	bl	800ec44 <atoi>
 80077b6:	4603      	mov	r3, r0
 80077b8:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    uint8_t sec = atoi(argv[3]);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	330c      	adds	r3, #12
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f007 fa3e 	bl	800ec44 <atoi>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
    uint8_t date = atoi(argv[4]);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	3310      	adds	r3, #16
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f007 fa35 	bl	800ec44 <atoi>
 80077da:	4603      	mov	r3, r0
 80077dc:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
    uint8_t month = atoi(argv[5]);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	3314      	adds	r3, #20
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f007 fa2c 	bl	800ec44 <atoi>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t year = atoi(argv[6]);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	3318      	adds	r3, #24
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f007 fa23 	bl	800ec44 <atoi>
 80077fe:	4603      	mov	r3, r0
 8007800:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

    if (hour > 23 || min > 59 || sec > 59 || date > 31 || month > 12 || year > 99)
 8007804:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8007808:	2b17      	cmp	r3, #23
 800780a:	d813      	bhi.n	8007834 <Cmd_time_set+0xcc>
 800780c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8007810:	2b3b      	cmp	r3, #59	@ 0x3b
 8007812:	d80f      	bhi.n	8007834 <Cmd_time_set+0xcc>
 8007814:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007818:	2b3b      	cmp	r3, #59	@ 0x3b
 800781a:	d80b      	bhi.n	8007834 <Cmd_time_set+0xcc>
 800781c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8007820:	2b1f      	cmp	r3, #31
 8007822:	d807      	bhi.n	8007834 <Cmd_time_set+0xcc>
 8007824:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007828:	2b0c      	cmp	r3, #12
 800782a:	d803      	bhi.n	8007834 <Cmd_time_set+0xcc>
 800782c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007830:	2b63      	cmp	r3, #99	@ 0x63
 8007832:	d901      	bls.n	8007838 <Cmd_time_set+0xd0>
        return CMDLINE_INVALID_ARG;
 8007834:	2304      	movs	r3, #4
 8007836:	e033      	b.n	80078a0 <Cmd_time_set+0x138>

    DS3231_SetDateTime(1, date, month, year, hour, min, sec);
 8007838:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 800783c:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8007840:	f897 1070 	ldrb.w	r1, [r7, #112]	@ 0x70
 8007844:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8007848:	9302      	str	r3, [sp, #8]
 800784a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4603      	mov	r3, r0
 8007858:	2001      	movs	r0, #1
 800785a:	f7f9 fd45 	bl	80012e8 <DS3231_SetDateTime>

    char buffer[100];
    sprintf(buffer, "\nTime set to: %02d:%02d:%02d %02d/%02d/%04d\r\n", hour, min, sec, date, month, 2000 + year);
 800785e:	f897 5073 	ldrb.w	r5, [r7, #115]	@ 0x73
 8007862:	f897 6072 	ldrb.w	r6, [r7, #114]	@ 0x72
 8007866:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800786a:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 800786e:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 8007872:	f897 006e 	ldrb.w	r0, [r7, #110]	@ 0x6e
 8007876:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 800787a:	f107 0408 	add.w	r4, r7, #8
 800787e:	9003      	str	r0, [sp, #12]
 8007880:	9102      	str	r1, [sp, #8]
 8007882:	9201      	str	r2, [sp, #4]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	4633      	mov	r3, r6
 8007888:	462a      	mov	r2, r5
 800788a:	4907      	ldr	r1, [pc, #28]	@ (80078a8 <Cmd_time_set+0x140>)
 800788c:	4620      	mov	r0, r4
 800788e:	f008 f991 	bl	800fbb4 <siprintf>
    Uart_sendstring(USARTx, buffer);
 8007892:	f107 0308 	add.w	r3, r7, #8
 8007896:	4619      	mov	r1, r3
 8007898:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800789a:	f7fa fb9f 	bl	8001fdc <Uart_sendstring>

	// Return success.
	return (CMDLINE_OK);
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	377c      	adds	r7, #124	@ 0x7c
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078a8:	08014d54 	.word	0x08014d54

080078ac <Cmd_cpoc_reset>:

int Cmd_cpoc_reset(int argc, char *argv[]){
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
	NVIC_SystemReset();
 80078b6:	f7fe fe2d 	bl	8006514 <__NVIC_SystemReset>
	...

080078bc <Cmd_rf_ena>:
//	Cmd_pmu_board_alive();
//	Cmd_pmu_board_alive();
//
//}

int Cmd_rf_ena(int argc, char *argv[]){
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078cc:	3b01      	subs	r3, #1
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	4413      	add	r3, r2
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]
	LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 80078d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80078dc:	4807      	ldr	r0, [pc, #28]	@ (80078fc <Cmd_rf_ena+0x40>)
 80078de:	f7ff f8a0 	bl	8006a22 <LL_GPIO_ResetOutputPin>
	 Uart_sendstring(USARTx, "\nRF Set to Enable\r\n");
 80078e2:	4907      	ldr	r1, [pc, #28]	@ (8007900 <Cmd_rf_ena+0x44>)
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7fa fb79 	bl	8001fdc <Uart_sendstring>
	// Return success.
	Uart_sendstring(USART2, "B");
 80078ea:	4906      	ldr	r1, [pc, #24]	@ (8007904 <Cmd_rf_ena+0x48>)
 80078ec:	4806      	ldr	r0, [pc, #24]	@ (8007908 <Cmd_rf_ena+0x4c>)
 80078ee:	f7fa fb75 	bl	8001fdc <Uart_sendstring>
	return (CMDLINE_OK);
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40020400 	.word	0x40020400
 8007900:	08014d84 	.word	0x08014d84
 8007904:	08014900 	.word	0x08014900
 8007908:	40004400 	.word	0x40004400

0800790c <Cmd_rf_dis>:

int Cmd_rf_dis(int argc, char *argv[]){
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800791c:	3b01      	subs	r3, #1
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	4413      	add	r3, r2
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]
	LL_GPIO_SetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 8007928:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800792c:	4805      	ldr	r0, [pc, #20]	@ (8007944 <Cmd_rf_dis+0x38>)
 800792e:	f7ff f86a 	bl	8006a06 <LL_GPIO_SetOutputPin>
	Uart_sendstring(USARTx, "\nRF Disable\r\n");
 8007932:	4905      	ldr	r1, [pc, #20]	@ (8007948 <Cmd_rf_dis+0x3c>)
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7fa fb51 	bl	8001fdc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	40020400 	.word	0x40020400
 8007948:	08014d98 	.word	0x08014d98

0800794c <Cmd_start_positioining>:

volatile uint8_t gps_report_enable = 0;
int Cmd_start_positioining (int argc, char *argv[]){
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
	USART_TypeDef* USARTx = (USART_TypeDef*)argv[argc-1];
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800795c:	3b01      	subs	r3, #1
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	4413      	add	r3, r2
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]
	gps_report_enable = 1;
 8007968:	4b07      	ldr	r3, [pc, #28]	@ (8007988 <Cmd_start_positioining+0x3c>)
 800796a:	2201      	movs	r2, #1
 800796c:	701a      	strb	r2, [r3, #0]
	Uart_flush(USART3);
 800796e:	4807      	ldr	r0, [pc, #28]	@ (800798c <Cmd_start_positioining+0x40>)
 8007970:	f7fa fb4c 	bl	800200c <Uart_flush>
	Uart_sendstring(USARTx, "\nStart reporting position to RF, [ESC] to Stop\r\n");
 8007974:	4906      	ldr	r1, [pc, #24]	@ (8007990 <Cmd_start_positioining+0x44>)
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7fa fb30 	bl	8001fdc <Uart_sendstring>
	// Return success.
	return (CMDLINE_OK);
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200059e4 	.word	0x200059e4
 800798c:	40004800 	.word	0x40004800
 8007990:	08014da8 	.word	0x08014da8

08007994 <command_create_task>:


void	command_create_task(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle, &s_CommandTaskContext.taskProperty);
 8007998:	4902      	ldr	r1, [pc, #8]	@ (80079a4 <command_create_task+0x10>)
 800799a:	4803      	ldr	r0, [pc, #12]	@ (80079a8 <command_create_task+0x14>)
 800799c:	f003 ffba 	bl	800b914 <SCH_TASK_CreateTask>
}
 80079a0:	bf00      	nop
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	200003c8 	.word	0x200003c8
 80079a8:	200003c4 	.word	0x200003c4

080079ac <command_send_splash>:

void	command_send_splash(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
	Uart_sendstring(USART6, "------------------------------------------------\r\n");
 80079b0:	493e      	ldr	r1, [pc, #248]	@ (8007aac <command_send_splash+0x100>)
 80079b2:	483f      	ldr	r0, [pc, #252]	@ (8007ab0 <command_send_splash+0x104>)
 80079b4:	f7fa fb12 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--        ____                                --\r\n");
 80079b8:	493e      	ldr	r1, [pc, #248]	@ (8007ab4 <command_send_splash+0x108>)
 80079ba:	483d      	ldr	r0, [pc, #244]	@ (8007ab0 <command_send_splash+0x104>)
 80079bc:	f7fa fb0e 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--       / ___| _ __   __ _  ___ ___          --\r\n");
 80079c0:	493d      	ldr	r1, [pc, #244]	@ (8007ab8 <command_send_splash+0x10c>)
 80079c2:	483b      	ldr	r0, [pc, #236]	@ (8007ab0 <command_send_splash+0x104>)
 80079c4:	f7fa fb0a 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--       \\___ \\| '_ \\ / _` |/ __/ _ \\         --  \r\n");
 80079c8:	493c      	ldr	r1, [pc, #240]	@ (8007abc <command_send_splash+0x110>)
 80079ca:	4839      	ldr	r0, [pc, #228]	@ (8007ab0 <command_send_splash+0x104>)
 80079cc:	f7fa fb06 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--        ___) | |_) | (_| | (_|  __/         --\r\n");
 80079d0:	493b      	ldr	r1, [pc, #236]	@ (8007ac0 <command_send_splash+0x114>)
 80079d2:	4837      	ldr	r0, [pc, #220]	@ (8007ab0 <command_send_splash+0x104>)
 80079d4:	f7fa fb02 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--       |____/| -__/ \\__,_|\\___\\___|         --  \r\n");
 80079d8:	493a      	ldr	r1, [pc, #232]	@ (8007ac4 <command_send_splash+0x118>)
 80079da:	4835      	ldr	r0, [pc, #212]	@ (8007ab0 <command_send_splash+0x104>)
 80079dc:	f7fa fafe 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--             |_|                            --\r\n");
 80079e0:	4939      	ldr	r1, [pc, #228]	@ (8007ac8 <command_send_splash+0x11c>)
 80079e2:	4833      	ldr	r0, [pc, #204]	@ (8007ab0 <command_send_splash+0x104>)
 80079e4:	f7fa fafa 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--     _     _ _     _____         _          --\r\n");
 80079e8:	4938      	ldr	r1, [pc, #224]	@ (8007acc <command_send_splash+0x120>)
 80079ea:	4831      	ldr	r0, [pc, #196]	@ (8007ab0 <command_send_splash+0x104>)
 80079ec:	f7fa faf6 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |   (_|_)_ _|_   _|__  ___| |__       --\r\n");
 80079f0:	4937      	ldr	r1, [pc, #220]	@ (8007ad0 <command_send_splash+0x124>)
 80079f2:	482f      	ldr	r0, [pc, #188]	@ (8007ab0 <command_send_splash+0x104>)
 80079f4:	f7fa faf2 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |   | | | '_ \\| |/ _ \\/ __| '_ \\      --\r\n");
 80079f8:	4936      	ldr	r1, [pc, #216]	@ (8007ad4 <command_send_splash+0x128>)
 80079fa:	482d      	ldr	r0, [pc, #180]	@ (8007ab0 <command_send_splash+0x104>)
 80079fc:	f7fa faee 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--    | |___| | | | | | |  __/ (__| | | |     --\r\n");
 8007a00:	4935      	ldr	r1, [pc, #212]	@ (8007ad8 <command_send_splash+0x12c>)
 8007a02:	482b      	ldr	r0, [pc, #172]	@ (8007ab0 <command_send_splash+0x104>)
 8007a04:	f7fa faea 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--    |_____|_|_|_| |_|_|\\___|\\___| |_|_|     --\r\n");
 8007a08:	4934      	ldr	r1, [pc, #208]	@ (8007adc <command_send_splash+0x130>)
 8007a0a:	4829      	ldr	r0, [pc, #164]	@ (8007ab0 <command_send_splash+0x104>)
 8007a0c:	f7fa fae6 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "------------------------------------------------\r\n");
 8007a10:	4926      	ldr	r1, [pc, #152]	@ (8007aac <command_send_splash+0x100>)
 8007a12:	4827      	ldr	r0, [pc, #156]	@ (8007ab0 <command_send_splash+0x104>)
 8007a14:	f7fa fae2 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--           ____ ____   ___   ____           --\r\n");
 8007a18:	4931      	ldr	r1, [pc, #196]	@ (8007ae0 <command_send_splash+0x134>)
 8007a1a:	4825      	ldr	r0, [pc, #148]	@ (8007ab0 <command_send_splash+0x104>)
 8007a1c:	f7fa fade 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--          / ___|  _ \\ / _ \\ / ___|          --\r\n");
 8007a20:	4930      	ldr	r1, [pc, #192]	@ (8007ae4 <command_send_splash+0x138>)
 8007a22:	4823      	ldr	r0, [pc, #140]	@ (8007ab0 <command_send_splash+0x104>)
 8007a24:	f7fa fada 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--         | |   | |_) | | | | |              --\r\n");
 8007a28:	492f      	ldr	r1, [pc, #188]	@ (8007ae8 <command_send_splash+0x13c>)
 8007a2a:	4821      	ldr	r0, [pc, #132]	@ (8007ab0 <command_send_splash+0x104>)
 8007a2c:	f7fa fad6 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--         | |___|  __/| |_| | |___           --\r\n");
 8007a30:	492e      	ldr	r1, [pc, #184]	@ (8007aec <command_send_splash+0x140>)
 8007a32:	481f      	ldr	r0, [pc, #124]	@ (8007ab0 <command_send_splash+0x104>)
 8007a34:	f7fa fad2 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--          \\____|_|    \\___/ \\____|          -- \r\n");
 8007a38:	492d      	ldr	r1, [pc, #180]	@ (8007af0 <command_send_splash+0x144>)
 8007a3a:	481d      	ldr	r0, [pc, #116]	@ (8007ab0 <command_send_splash+0x104>)
 8007a3c:	f7fa face 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--                  _   ___   ___             --\r\n");
 8007a40:	492c      	ldr	r1, [pc, #176]	@ (8007af4 <command_send_splash+0x148>)
 8007a42:	481b      	ldr	r0, [pc, #108]	@ (8007ab0 <command_send_splash+0x104>)
 8007a44:	f7fa faca 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--          __   __/ | / _ \\ / _ \\            -- \r\n");
 8007a48:	492b      	ldr	r1, [pc, #172]	@ (8007af8 <command_send_splash+0x14c>)
 8007a4a:	4819      	ldr	r0, [pc, #100]	@ (8007ab0 <command_send_splash+0x104>)
 8007a4c:	f7fa fac6 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--          \\ \\ / /| || | | | | | |           --  \r\n");
 8007a50:	492a      	ldr	r1, [pc, #168]	@ (8007afc <command_send_splash+0x150>)
 8007a52:	4817      	ldr	r0, [pc, #92]	@ (8007ab0 <command_send_splash+0x104>)
 8007a54:	f7fa fac2 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--           \\ V / | || |_| | |_| |           -- \r\n");
 8007a58:	4929      	ldr	r1, [pc, #164]	@ (8007b00 <command_send_splash+0x154>)
 8007a5a:	4815      	ldr	r0, [pc, #84]	@ (8007ab0 <command_send_splash+0x104>)
 8007a5c:	f7fa fabe 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "--            \\_/  |_(_)___(_)___/            -- \r\n");
 8007a60:	4928      	ldr	r1, [pc, #160]	@ (8007b04 <command_send_splash+0x158>)
 8007a62:	4813      	ldr	r0, [pc, #76]	@ (8007ab0 <command_send_splash+0x104>)
 8007a64:	f7fa faba 	bl	8001fdc <Uart_sendstring>
    Uart_sendstring(USART6, "------------------------------------------------\r\n");
 8007a68:	4910      	ldr	r1, [pc, #64]	@ (8007aac <command_send_splash+0x100>)
 8007a6a:	4811      	ldr	r0, [pc, #68]	@ (8007ab0 <command_send_splash+0x104>)
 8007a6c:	f7fa fab6 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART6, "> ");
 8007a70:	4925      	ldr	r1, [pc, #148]	@ (8007b08 <command_send_splash+0x15c>)
 8007a72:	480f      	ldr	r0, [pc, #60]	@ (8007ab0 <command_send_splash+0x104>)
 8007a74:	f7fa fab2 	bl	8001fdc <Uart_sendstring>

	Uart_sendstring(UART5, "\r\n");
 8007a78:	4924      	ldr	r1, [pc, #144]	@ (8007b0c <command_send_splash+0x160>)
 8007a7a:	4825      	ldr	r0, [pc, #148]	@ (8007b10 <command_send_splash+0x164>)
 8007a7c:	f7fa faae 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART5, ">>>>> CPOC V1.2.0 RS422 <<<<<\r\n");
 8007a80:	4924      	ldr	r1, [pc, #144]	@ (8007b14 <command_send_splash+0x168>)
 8007a82:	4823      	ldr	r0, [pc, #140]	@ (8007b10 <command_send_splash+0x164>)
 8007a84:	f7fa faaa 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(UART5, "> ");
 8007a88:	491f      	ldr	r1, [pc, #124]	@ (8007b08 <command_send_splash+0x15c>)
 8007a8a:	4821      	ldr	r0, [pc, #132]	@ (8007b10 <command_send_splash+0x164>)
 8007a8c:	f7fa faa6 	bl	8001fdc <Uart_sendstring>

	Uart_sendstring(USART2, "\r\n");
 8007a90:	491e      	ldr	r1, [pc, #120]	@ (8007b0c <command_send_splash+0x160>)
 8007a92:	4821      	ldr	r0, [pc, #132]	@ (8007b18 <command_send_splash+0x16c>)
 8007a94:	f7fa faa2 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART2, ">>>>> CPOC V1.2.0 XBEE RF <<<<<\r\n");
 8007a98:	4920      	ldr	r1, [pc, #128]	@ (8007b1c <command_send_splash+0x170>)
 8007a9a:	481f      	ldr	r0, [pc, #124]	@ (8007b18 <command_send_splash+0x16c>)
 8007a9c:	f7fa fa9e 	bl	8001fdc <Uart_sendstring>
	Uart_sendstring(USART2, "> ");
 8007aa0:	4919      	ldr	r1, [pc, #100]	@ (8007b08 <command_send_splash+0x15c>)
 8007aa2:	481d      	ldr	r0, [pc, #116]	@ (8007b18 <command_send_splash+0x16c>)
 8007aa4:	f7fa fa9a 	bl	8001fdc <Uart_sendstring>
}
 8007aa8:	bf00      	nop
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	08014ddc 	.word	0x08014ddc
 8007ab0:	40011400 	.word	0x40011400
 8007ab4:	08014e10 	.word	0x08014e10
 8007ab8:	08014e44 	.word	0x08014e44
 8007abc:	08014e78 	.word	0x08014e78
 8007ac0:	08014eb0 	.word	0x08014eb0
 8007ac4:	08014ee4 	.word	0x08014ee4
 8007ac8:	08014f1c 	.word	0x08014f1c
 8007acc:	08014f50 	.word	0x08014f50
 8007ad0:	08014f84 	.word	0x08014f84
 8007ad4:	08014fb8 	.word	0x08014fb8
 8007ad8:	08014fec 	.word	0x08014fec
 8007adc:	08015020 	.word	0x08015020
 8007ae0:	08015054 	.word	0x08015054
 8007ae4:	08015088 	.word	0x08015088
 8007ae8:	080150bc 	.word	0x080150bc
 8007aec:	080150f0 	.word	0x080150f0
 8007af0:	08015124 	.word	0x08015124
 8007af4:	08015158 	.word	0x08015158
 8007af8:	0801518c 	.word	0x0801518c
 8007afc:	080151c0 	.word	0x080151c0
 8007b00:	080151f8 	.word	0x080151f8
 8007b04:	0801522c 	.word	0x0801522c
 8007b08:	08014958 	.word	0x08014958
 8007b0c:	080148e0 	.word	0x080148e0
 8007b10:	40005000 	.word	0x40005000
 8007b14:	08015260 	.word	0x08015260
 8007b18:	40004400 	.word	0x40004400
 8007b1c:	08015280 	.word	0x08015280

08007b20 <LL_GPIO_SetOutputPin>:
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	619a      	str	r2, [r3, #24]
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <LL_GPIO_ResetOutputPin>:
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	041a      	lsls	r2, r3, #16
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	619a      	str	r2, [r3, #24]
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
	...

08007b5c <switch_board>:
	}
};



void switch_board(uint8_t board_id) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	71fb      	strb	r3, [r7, #7]
    switch (board_id) {
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d837      	bhi.n	8007bdc <switch_board+0x80>
 8007b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b74 <switch_board+0x18>)
 8007b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b72:	bf00      	nop
 8007b74:	08007b85 	.word	0x08007b85
 8007b78:	08007b9b 	.word	0x08007b9b
 8007b7c:	08007bb1 	.word	0x08007bb1
 8007b80:	08007bc7 	.word	0x08007bc7
        case 0: // PDU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007b84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007b88:	4816      	ldr	r0, [pc, #88]	@ (8007be4 <switch_board+0x88>)
 8007b8a:	f7ff ffd7 	bl	8007b3c <LL_GPIO_ResetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007b8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007b92:	4814      	ldr	r0, [pc, #80]	@ (8007be4 <switch_board+0x88>)
 8007b94:	f7ff ffd2 	bl	8007b3c <LL_GPIO_ResetOutputPin>
            break;
 8007b98:	e020      	b.n	8007bdc <switch_board+0x80>
        case 1: // PMU
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007b9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007b9e:	4811      	ldr	r0, [pc, #68]	@ (8007be4 <switch_board+0x88>)
 8007ba0:	f7ff ffcc 	bl	8007b3c <LL_GPIO_ResetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007ba4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007ba8:	480e      	ldr	r0, [pc, #56]	@ (8007be4 <switch_board+0x88>)
 8007baa:	f7ff ffb9 	bl	8007b20 <LL_GPIO_SetOutputPin>
            break;
 8007bae:	e015      	b.n	8007bdc <switch_board+0x80>
        case 2: // CAM
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007bb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007bb4:	480b      	ldr	r0, [pc, #44]	@ (8007be4 <switch_board+0x88>)
 8007bb6:	f7ff ffb3 	bl	8007b20 <LL_GPIO_SetOutputPin>
            LL_GPIO_ResetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007bba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007bbe:	4809      	ldr	r0, [pc, #36]	@ (8007be4 <switch_board+0x88>)
 8007bc0:	f7ff ffbc 	bl	8007b3c <LL_GPIO_ResetOutputPin>
            break;
 8007bc4:	e00a      	b.n	8007bdc <switch_board+0x80>
        case 3: // IOU
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_B_Pin);
 8007bc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007bca:	4806      	ldr	r0, [pc, #24]	@ (8007be4 <switch_board+0x88>)
 8007bcc:	f7ff ffa8 	bl	8007b20 <LL_GPIO_SetOutputPin>
            LL_GPIO_SetOutputPin(GPIOA, BOARD_SEL_A_Pin);
 8007bd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007bd4:	4803      	ldr	r0, [pc, #12]	@ (8007be4 <switch_board+0x88>)
 8007bd6:	f7ff ffa3 	bl	8007b20 <LL_GPIO_SetOutputPin>
            break;
 8007bda:	bf00      	nop
    }
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	40020000 	.word	0x40020000

08007be8 <RS422_periodic_task>:
uint8_t packet_sig = 0;
uint8_t currentSourceBuffer = 0;
volatile uint8_t count_packet = 0x0A;


void RS422_periodic_task(void) {
 8007be8:	b590      	push	{r4, r7, lr}
 8007bea:	b091      	sub	sp, #68	@ 0x44
 8007bec:	af04      	add	r7, sp, #16
	if (rs422_report_enable) {
 8007bee:	4b89      	ldr	r3, [pc, #548]	@ (8007e14 <RS422_periodic_task+0x22c>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8108 	beq.w	8007e0a <RS422_periodic_task+0x222>

		if (count_packet == 0x0A)
 8007bfa:	4b87      	ldr	r3, [pc, #540]	@ (8007e18 <RS422_periodic_task+0x230>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b0a      	cmp	r3, #10
 8007c02:	f040 80a0 	bne.w	8007d46 <RS422_periodic_task+0x15e>
		{

			nextBuffer[0] = 0x02;
 8007c06:	4b85      	ldr	r3, [pc, #532]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	701a      	strb	r2, [r3, #0]
			nextBuffer[ARRAY_SIZE - 1] = 0x03;
 8007c0e:	4b83      	ldr	r3, [pc, #524]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b83      	ldr	r3, [pc, #524]	@ (8007e20 <RS422_periodic_task+0x238>)
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	4413      	add	r3, r2
 8007c1a:	2203      	movs	r2, #3
 8007c1c:	701a      	strb	r2, [r3, #0]

		    uint8_t day, date, month, year, hour, min, sec;
		    DS3231_GetDateTime(&day, &date, &month, &year, &hour, &min, &sec);
 8007c1e:	f107 0410 	add.w	r4, r7, #16
 8007c22:	f107 0211 	add.w	r2, r7, #17
 8007c26:	f107 0112 	add.w	r1, r7, #18
 8007c2a:	f107 0013 	add.w	r0, r7, #19
 8007c2e:	f107 030d 	add.w	r3, r7, #13
 8007c32:	9302      	str	r3, [sp, #8]
 8007c34:	f107 030e 	add.w	r3, r7, #14
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	f107 030f 	add.w	r3, r7, #15
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	4623      	mov	r3, r4
 8007c42:	f7f9 fc0f 	bl	8001464 <DS3231_GetDateTime>

		    float temp;
		    uint8_t rounded_temp;

		    temp = DS3231_GetTemperature();
 8007c46:	f7f9 fcb5 	bl	80015b4 <DS3231_GetTemperature>
 8007c4a:	ed87 0a07 	vstr	s0, [r7, #28]
		    rounded_temp = (uint8_t)temp;
 8007c4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8007c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c56:	edc7 7a01 	vstr	s15, [r7, #4]
 8007c5a:	793b      	ldrb	r3, [r7, #4]
 8007c5c:	76fb      	strb	r3, [r7, #27]

		    nextBuffer[2] = sec;
 8007c5e:	4b6f      	ldr	r3, [pc, #444]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3302      	adds	r3, #2
 8007c64:	7b7a      	ldrb	r2, [r7, #13]
 8007c66:	701a      	strb	r2, [r3, #0]
		    nextBuffer[3] = min;
 8007c68:	4b6c      	ldr	r3, [pc, #432]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3303      	adds	r3, #3
 8007c6e:	7bba      	ldrb	r2, [r7, #14]
 8007c70:	701a      	strb	r2, [r3, #0]
		    nextBuffer[4] = hour;
 8007c72:	4b6a      	ldr	r3, [pc, #424]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3304      	adds	r3, #4
 8007c78:	7bfa      	ldrb	r2, [r7, #15]
 8007c7a:	701a      	strb	r2, [r3, #0]
		    nextBuffer[5] = date;
 8007c7c:	4b67      	ldr	r3, [pc, #412]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3305      	adds	r3, #5
 8007c82:	7cba      	ldrb	r2, [r7, #18]
 8007c84:	701a      	strb	r2, [r3, #0]
		    nextBuffer[6] = month;
 8007c86:	4b65      	ldr	r3, [pc, #404]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3306      	adds	r3, #6
 8007c8c:	7c7a      	ldrb	r2, [r7, #17]
 8007c8e:	701a      	strb	r2, [r3, #0]
		    nextBuffer[7] = rounded_temp;
 8007c90:	4b62      	ldr	r3, [pc, #392]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3307      	adds	r3, #7
 8007c96:	7efa      	ldrb	r2, [r7, #27]
 8007c98:	701a      	strb	r2, [r3, #0]


			count_packet = 0;
 8007c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8007e18 <RS422_periodic_task+0x230>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]

			for (int i = 135; i <= 160; i++) {
 8007ca0:	2387      	movs	r3, #135	@ 0x87
 8007ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ca4:	e00b      	b.n	8007cbe <RS422_periodic_task+0xd6>
				nextBuffer[i] = i - 135;
 8007ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	4b5c      	ldr	r3, [pc, #368]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007cac:	6819      	ldr	r1, [r3, #0]
 8007cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb0:	440b      	add	r3, r1
 8007cb2:	3279      	adds	r2, #121	@ 0x79
 8007cb4:	b2d2      	uxtb	r2, r2
 8007cb6:	701a      	strb	r2, [r3, #0]
			for (int i = 135; i <= 160; i++) {
 8007cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cba:	3301      	adds	r3, #1
 8007cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc0:	2ba0      	cmp	r3, #160	@ 0xa0
 8007cc2:	ddf0      	ble.n	8007ca6 <RS422_periodic_task+0xbe>
			}


			for (int i = 161; i <= ARRAY_SIZE-2; i++) {
 8007cc4:	23a1      	movs	r3, #161	@ 0xa1
 8007cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cc8:	e00b      	b.n	8007ce2 <RS422_periodic_task+0xfa>
				nextBuffer[i] = i - 161;
 8007cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	4b53      	ldr	r3, [pc, #332]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd4:	440b      	add	r3, r1
 8007cd6:	325f      	adds	r2, #95	@ 0x5f
 8007cd8:	b2d2      	uxtb	r2, r2
 8007cda:	701a      	strb	r2, [r3, #0]
			for (int i = 161; i <= ARRAY_SIZE-2; i++) {
 8007cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cde:	3301      	adds	r3, #1
 8007ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8007e20 <RS422_periodic_task+0x238>)
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cea:	429a      	cmp	r2, r3
 8007cec:	dbed      	blt.n	8007cca <RS422_periodic_task+0xe2>
			}


			uint16_t crc = crc16_CCITT(0xFFFF, &nextBuffer[1], ARRAY_SIZE - 4);
 8007cee:	4b4b      	ldr	r3, [pc, #300]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	1c59      	adds	r1, r3, #1
 8007cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8007e20 <RS422_periodic_task+0x238>)
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	3b04      	subs	r3, #4
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007d02:	f003 ff39 	bl	800bb78 <crc16_CCITT>
 8007d06:	4603      	mov	r3, r0
 8007d08:	833b      	strh	r3, [r7, #24]

			nextBuffer[ARRAY_SIZE - 3] = (crc >> 8) & 0xFF;  // CRC#HIGH
 8007d0a:	8b3b      	ldrh	r3, [r7, #24]
 8007d0c:	0a1b      	lsrs	r3, r3, #8
 8007d0e:	b299      	uxth	r1, r3
 8007d10:	4b42      	ldr	r3, [pc, #264]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	4b42      	ldr	r3, [pc, #264]	@ (8007e20 <RS422_periodic_task+0x238>)
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	3b03      	subs	r3, #3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	b2ca      	uxtb	r2, r1
 8007d1e:	701a      	strb	r2, [r3, #0]
			nextBuffer[ARRAY_SIZE - 2] = crc & 0xFF;         // CRC#LOW
 8007d20:	4b3e      	ldr	r3, [pc, #248]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b3e      	ldr	r3, [pc, #248]	@ (8007e20 <RS422_periodic_task+0x238>)
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	3b02      	subs	r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	8b3a      	ldrh	r2, [r7, #24]
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]

            // Switch buffers
            uint8_t* tempz = currentBuffer;
 8007d32:	4b3c      	ldr	r3, [pc, #240]	@ (8007e24 <RS422_periodic_task+0x23c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	617b      	str	r3, [r7, #20]
            currentBuffer = nextBuffer;
 8007d38:	4b38      	ldr	r3, [pc, #224]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a39      	ldr	r2, [pc, #228]	@ (8007e24 <RS422_periodic_task+0x23c>)
 8007d3e:	6013      	str	r3, [r2, #0]
            nextBuffer = tempz;
 8007d40:	4a36      	ldr	r2, [pc, #216]	@ (8007e1c <RS422_periodic_task+0x234>)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	6013      	str	r3, [r2, #0]

		}

		currentBuffer[1] = count_packet;
 8007d46:	4b37      	ldr	r3, [pc, #220]	@ (8007e24 <RS422_periodic_task+0x23c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	4a32      	ldr	r2, [pc, #200]	@ (8007e18 <RS422_periodic_task+0x230>)
 8007d4e:	7812      	ldrb	r2, [r2, #0]
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	701a      	strb	r2, [r3, #0]

		if (swap_byte_enable){
 8007d54:	4b34      	ldr	r3, [pc, #208]	@ (8007e28 <RS422_periodic_task+0x240>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d026      	beq.n	8007dac <RS422_periodic_task+0x1c4>
			for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 8007d5e:	2301      	movs	r3, #1
 8007d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d62:	e01d      	b.n	8007da0 <RS422_periodic_task+0x1b8>
				if (currentBuffer[i] == 0x02) {
 8007d64:	4b2f      	ldr	r3, [pc, #188]	@ (8007e24 <RS422_periodic_task+0x23c>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6a:	4413      	add	r3, r2
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d106      	bne.n	8007d80 <RS422_periodic_task+0x198>
					currentBuffer[i] = 0xFE;
 8007d72:	4b2c      	ldr	r3, [pc, #176]	@ (8007e24 <RS422_periodic_task+0x23c>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	4413      	add	r3, r2
 8007d7a:	22fe      	movs	r2, #254	@ 0xfe
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e00c      	b.n	8007d9a <RS422_periodic_task+0x1b2>
				} else if (currentBuffer[i] == 0x03) {
 8007d80:	4b28      	ldr	r3, [pc, #160]	@ (8007e24 <RS422_periodic_task+0x23c>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d86:	4413      	add	r3, r2
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d105      	bne.n	8007d9a <RS422_periodic_task+0x1b2>
					currentBuffer[i] = 0xFD;
 8007d8e:	4b25      	ldr	r3, [pc, #148]	@ (8007e24 <RS422_periodic_task+0x23c>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	4413      	add	r3, r2
 8007d96:	22fd      	movs	r2, #253	@ 0xfd
 8007d98:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i < ARRAY_SIZE - 1; i++) {
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007da0:	4b1f      	ldr	r3, [pc, #124]	@ (8007e20 <RS422_periodic_task+0x238>)
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da8:	429a      	cmp	r2, r3
 8007daa:	dbdb      	blt.n	8007d64 <RS422_periodic_task+0x17c>
				}
			}
		}

        for (int i = 0; i < ARRAY_SIZE; i++) {
 8007dac:	2300      	movs	r3, #0
 8007dae:	623b      	str	r3, [r7, #32]
 8007db0:	e00b      	b.n	8007dca <RS422_periodic_task+0x1e2>
            Uart_write(UART5, currentBuffer[i]);
 8007db2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e24 <RS422_periodic_task+0x23c>)
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	4413      	add	r3, r2
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	481b      	ldr	r0, [pc, #108]	@ (8007e2c <RS422_periodic_task+0x244>)
 8007dc0:	f7f9 ffc2 	bl	8001d48 <Uart_write>
        for (int i = 0; i < ARRAY_SIZE; i++) {
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	623b      	str	r3, [r7, #32]
 8007dca:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <RS422_periodic_task+0x238>)
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	dbed      	blt.n	8007db2 <RS422_periodic_task+0x1ca>
        }

        if(packet_sig){
 8007dd6:	4b16      	ldr	r3, [pc, #88]	@ (8007e30 <RS422_periodic_task+0x248>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <RS422_periodic_task+0x206>
        	packet_sig = 0;
 8007dde:	4b14      	ldr	r3, [pc, #80]	@ (8007e30 <RS422_periodic_task+0x248>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
            LL_GPIO_ResetOutputPin(GPIOA,LORA_IO0_Pin);
 8007de4:	2110      	movs	r1, #16
 8007de6:	4813      	ldr	r0, [pc, #76]	@ (8007e34 <RS422_periodic_task+0x24c>)
 8007de8:	f7ff fea8 	bl	8007b3c <LL_GPIO_ResetOutputPin>
 8007dec:	e006      	b.n	8007dfc <RS422_periodic_task+0x214>
        }else{
        	packet_sig = 1;
 8007dee:	4b10      	ldr	r3, [pc, #64]	@ (8007e30 <RS422_periodic_task+0x248>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	701a      	strb	r2, [r3, #0]
        	LL_GPIO_SetOutputPin(GPIOA,LORA_IO0_Pin);
 8007df4:	2110      	movs	r1, #16
 8007df6:	480f      	ldr	r0, [pc, #60]	@ (8007e34 <RS422_periodic_task+0x24c>)
 8007df8:	f7ff fe92 	bl	8007b20 <LL_GPIO_SetOutputPin>
        }

        count_packet++;
 8007dfc:	4b06      	ldr	r3, [pc, #24]	@ (8007e18 <RS422_periodic_task+0x230>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	3301      	adds	r3, #1
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	4b04      	ldr	r3, [pc, #16]	@ (8007e18 <RS422_periodic_task+0x230>)
 8007e08:	701a      	strb	r2, [r3, #0]
	}
}
 8007e0a:	bf00      	nop
 8007e0c:	3734      	adds	r7, #52	@ 0x34
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd90      	pop	{r4, r7, pc}
 8007e12:	bf00      	nop
 8007e14:	200059e1 	.word	0x200059e1
 8007e18:	200003f0 	.word	0x200003f0
 8007e1c:	200003ec 	.word	0x200003ec
 8007e20:	200003d4 	.word	0x200003d4
 8007e24:	200003e8 	.word	0x200003e8
 8007e28:	200059e3 	.word	0x200059e3
 8007e2c:	40005000 	.word	0x40005000
 8007e30:	200061b8 	.word	0x200061b8
 8007e34:	40020000 	.word	0x40020000

08007e38 <frame_processing_rs422>:

void frame_processing_rs422(fsp_packet_t *fsp_pkt){
 8007e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3c:	f5ad 6ddb 	sub.w	sp, sp, #1752	@ 0x6d8
 8007e40:	af34      	add	r7, sp, #208	@ 0xd0
 8007e42:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007e46:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007e4a:	6018      	str	r0, [r3, #0]
	switch(fsp_pkt->payload[0])
 8007e4c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007e50:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	795b      	ldrb	r3, [r3, #5]
 8007e58:	2b13      	cmp	r3, #19
 8007e5a:	f000 8629 	beq.w	8008ab0 <frame_processing_rs422+0xc78>
 8007e5e:	2b13      	cmp	r3, #19
 8007e60:	f301 833a 	bgt.w	80094d8 <frame_processing_rs422+0x16a0>
 8007e64:	2b06      	cmp	r3, #6
 8007e66:	f000 82eb 	beq.w	8008440 <frame_processing_rs422+0x608>
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	f041 8334 	bne.w	80094d8 <frame_processing_rs422+0x16a0>
	{
		case 0x08:
	    {
			if(auto_report_enabled || rf_report_enable){
 8007e70:	4bab      	ldr	r3, [pc, #684]	@ (8008120 <frame_processing_rs422+0x2e8>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d105      	bne.n	8007e86 <frame_processing_rs422+0x4e>
 8007e7a:	4baa      	ldr	r3, [pc, #680]	@ (8008124 <frame_processing_rs422+0x2ec>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 82a3 	beq.w	80083cc <frame_processing_rs422+0x594>
				if(auto_report_enabled){
 8007e86:	4ba6      	ldr	r3, [pc, #664]	@ (8008120 <frame_processing_rs422+0x2e8>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <frame_processing_rs422+0x62>
					Uart_sendstring(USART6, "\nPMU:\n");
 8007e90:	49a5      	ldr	r1, [pc, #660]	@ (8008128 <frame_processing_rs422+0x2f0>)
 8007e92:	48a6      	ldr	r0, [pc, #664]	@ (800812c <frame_processing_rs422+0x2f4>)
 8007e94:	f7fa f8a2 	bl	8001fdc <Uart_sendstring>
 8007e98:	e003      	b.n	8007ea2 <frame_processing_rs422+0x6a>
				}else{
					Uart_sendstring(USART2, "\nPMU:\n");
 8007e9a:	49a3      	ldr	r1, [pc, #652]	@ (8008128 <frame_processing_rs422+0x2f0>)
 8007e9c:	48a4      	ldr	r0, [pc, #656]	@ (8008130 <frame_processing_rs422+0x2f8>)
 8007e9e:	f7fa f89d 	bl	8001fdc <Uart_sendstring>
				}

				int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8007ea2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007ea6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	799b      	ldrb	r3, [r3, #6]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	b21a      	sxth	r2, r3
 8007eb2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007eb6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	79db      	ldrb	r3, [r3, #7]
 8007ebe:	b21b      	sxth	r3, r3
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	f8a7 35c8 	strh.w	r3, [r7, #1480]	@ 0x5c8
				int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8007ec6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007eca:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	7a1b      	ldrb	r3, [r3, #8]
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	b21a      	sxth	r2, r3
 8007ed6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007eda:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	7a5b      	ldrb	r3, [r3, #9]
 8007ee2:	b21b      	sxth	r3, r3
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	f8a7 35c6 	strh.w	r3, [r7, #1478]	@ 0x5c6
				int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 8007eea:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007eee:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	7a9b      	ldrb	r3, [r3, #10]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	b21a      	sxth	r2, r3
 8007efa:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007efe:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	7adb      	ldrb	r3, [r3, #11]
 8007f06:	b21b      	sxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8a7 35c4 	strh.w	r3, [r7, #1476]	@ 0x5c4
				int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 8007f0e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007f12:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	7b1b      	ldrb	r3, [r3, #12]
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	b21a      	sxth	r2, r3
 8007f1e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007f22:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	7b5b      	ldrb	r3, [r3, #13]
 8007f2a:	b21b      	sxth	r3, r3
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	f8a7 35c2 	strh.w	r3, [r7, #1474]	@ 0x5c2

				uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 8007f32:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007f36:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	7b9b      	ldrb	r3, [r3, #14]
 8007f3e:	021b      	lsls	r3, r3, #8
 8007f40:	b21a      	sxth	r2, r3
 8007f42:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007f46:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	7bdb      	ldrb	r3, [r3, #15]
 8007f4e:	b21b      	sxth	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b21b      	sxth	r3, r3
 8007f54:	f8a7 35c0 	strh.w	r3, [r7, #1472]	@ 0x5c0
				uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8007f58:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007f5c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	7c1b      	ldrb	r3, [r3, #16]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	b21a      	sxth	r2, r3
 8007f68:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007f6c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	7c5b      	ldrb	r3, [r3, #17]
 8007f74:	b21b      	sxth	r3, r3
 8007f76:	4313      	orrs	r3, r2
 8007f78:	b21b      	sxth	r3, r3
 8007f7a:	f8a7 35be 	strh.w	r3, [r7, #1470]	@ 0x5be
				uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 8007f7e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007f82:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	7c9b      	ldrb	r3, [r3, #18]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	b21a      	sxth	r2, r3
 8007f8e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007f92:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	7cdb      	ldrb	r3, [r3, #19]
 8007f9a:	b21b      	sxth	r3, r3
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	b21b      	sxth	r3, r3
 8007fa0:	f8a7 35bc 	strh.w	r3, [r7, #1468]	@ 0x5bc
				uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8007fa4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007fa8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	7d1b      	ldrb	r3, [r3, #20]
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	b21a      	sxth	r2, r3
 8007fb4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007fb8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	7d5b      	ldrb	r3, [r3, #21]
 8007fc0:	b21b      	sxth	r3, r3
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	b21b      	sxth	r3, r3
 8007fc6:	f8a7 35ba 	strh.w	r3, [r7, #1466]	@ 0x5ba

				uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 8007fca:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007fce:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	7d9b      	ldrb	r3, [r3, #22]
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	b21a      	sxth	r2, r3
 8007fda:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007fde:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	7ddb      	ldrb	r3, [r3, #23]
 8007fe6:	b21b      	sxth	r3, r3
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	b21b      	sxth	r3, r3
 8007fec:	f8a7 35b8 	strh.w	r3, [r7, #1464]	@ 0x5b8
				uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 8007ff0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8007ff4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	7e1b      	ldrb	r3, [r3, #24]
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	b21a      	sxth	r2, r3
 8008000:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008004:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	7e5b      	ldrb	r3, [r3, #25]
 800800c:	b21b      	sxth	r3, r3
 800800e:	4313      	orrs	r3, r2
 8008010:	b21b      	sxth	r3, r3
 8008012:	f8a7 35b6 	strh.w	r3, [r7, #1462]	@ 0x5b6

				uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 8008016:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800801a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	7e9b      	ldrb	r3, [r3, #26]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	b21a      	sxth	r2, r3
 8008026:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800802a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	7edb      	ldrb	r3, [r3, #27]
 8008032:	b21b      	sxth	r3, r3
 8008034:	4313      	orrs	r3, r2
 8008036:	b21b      	sxth	r3, r3
 8008038:	f8a7 35b4 	strh.w	r3, [r7, #1460]	@ 0x5b4
				uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800803c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008040:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	7f1b      	ldrb	r3, [r3, #28]
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	b21a      	sxth	r2, r3
 800804c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008050:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	7f5b      	ldrb	r3, [r3, #29]
 8008058:	b21b      	sxth	r3, r3
 800805a:	4313      	orrs	r3, r2
 800805c:	b21b      	sxth	r3, r3
 800805e:	f8a7 35b2 	strh.w	r3, [r7, #1458]	@ 0x5b2

				char buffer_0x08[500];
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008062:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 8008066:	2b00      	cmp	r3, #0
 8008068:	da03      	bge.n	8008072 <frame_processing_rs422+0x23a>
 800806a:	4b32      	ldr	r3, [pc, #200]	@ (8008134 <frame_processing_rs422+0x2fc>)
 800806c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008070:	e002      	b.n	8008078 <frame_processing_rs422+0x240>
 8008072:	4b31      	ldr	r3, [pc, #196]	@ (8008138 <frame_processing_rs422+0x300>)
 8008074:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 8008078:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 800807c:	2b00      	cmp	r3, #0
 800807e:	bfb8      	it	lt
 8008080:	425b      	neglt	r3, r3
 8008082:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008084:	4a2d      	ldr	r2, [pc, #180]	@ (800813c <frame_processing_rs422+0x304>)
 8008086:	fb82 1203 	smull	r1, r2, r2, r3
 800808a:	1152      	asrs	r2, r2, #5
 800808c:	17db      	asrs	r3, r3, #31
 800808e:	eba2 0c03 	sub.w	ip, r2, r3
						ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 8008092:	f9b7 35c8 	ldrsh.w	r3, [r7, #1480]	@ 0x5c8
 8008096:	2b00      	cmp	r3, #0
 8008098:	bfb8      	it	lt
 800809a:	425b      	neglt	r3, r3
 800809c:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800809e:	4a27      	ldr	r2, [pc, #156]	@ (800813c <frame_processing_rs422+0x304>)
 80080a0:	fb82 1203 	smull	r1, r2, r2, r3
 80080a4:	1151      	asrs	r1, r2, #5
 80080a6:	17da      	asrs	r2, r3, #31
 80080a8:	1a8a      	subs	r2, r1, r2
 80080aa:	4611      	mov	r1, r2
 80080ac:	2264      	movs	r2, #100	@ 0x64
 80080ae:	fb01 f202 	mul.w	r2, r1, r2
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80080b8:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 80080bc:	2b00      	cmp	r3, #0
 80080be:	da03      	bge.n	80080c8 <frame_processing_rs422+0x290>
 80080c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008134 <frame_processing_rs422+0x2fc>)
 80080c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080c6:	e002      	b.n	80080ce <frame_processing_rs422+0x296>
 80080c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008138 <frame_processing_rs422+0x300>)
 80080ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 80080ce:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bfb8      	it	lt
 80080d6:	425b      	neglt	r3, r3
 80080d8:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80080da:	4a18      	ldr	r2, [pc, #96]	@ (800813c <frame_processing_rs422+0x304>)
 80080dc:	fb82 1203 	smull	r1, r2, r2, r3
 80080e0:	1152      	asrs	r2, r2, #5
 80080e2:	17db      	asrs	r3, r3, #31
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 80080ea:	f9b7 35c6 	ldrsh.w	r3, [r7, #1478]	@ 0x5c6
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bfb8      	it	lt
 80080f2:	425b      	neglt	r3, r3
 80080f4:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80080f6:	4a11      	ldr	r2, [pc, #68]	@ (800813c <frame_processing_rs422+0x304>)
 80080f8:	fb82 1203 	smull	r1, r2, r2, r3
 80080fc:	1151      	asrs	r1, r2, #5
 80080fe:	17da      	asrs	r2, r3, #31
 8008100:	1a8a      	subs	r2, r1, r2
 8008102:	4611      	mov	r1, r2
 8008104:	2264      	movs	r2, #100	@ 0x64
 8008106:	fb01 f202 	mul.w	r2, r1, r2
 800810a:	1a9b      	subs	r3, r3, r2
 800810c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008110:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 8008114:	2b00      	cmp	r3, #0
 8008116:	da13      	bge.n	8008140 <frame_processing_rs422+0x308>
 8008118:	4b06      	ldr	r3, [pc, #24]	@ (8008134 <frame_processing_rs422+0x2fc>)
 800811a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800811e:	e012      	b.n	8008146 <frame_processing_rs422+0x30e>
 8008120:	200059e0 	.word	0x200059e0
 8008124:	200059e2 	.word	0x200059e2
 8008128:	080152a4 	.word	0x080152a4
 800812c:	40011400 	.word	0x40011400
 8008130:	40004400 	.word	0x40004400
 8008134:	080152ac 	.word	0x080152ac
 8008138:	080152b0 	.word	0x080152b0
 800813c:	51eb851f 	.word	0x51eb851f
 8008140:	4bb5      	ldr	r3, [pc, #724]	@ (8008418 <frame_processing_rs422+0x5e0>)
 8008142:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 8008146:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 800814a:	2b00      	cmp	r3, #0
 800814c:	bfb8      	it	lt
 800814e:	425b      	neglt	r3, r3
 8008150:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 8008152:	4ab2      	ldr	r2, [pc, #712]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008154:	fb82 1203 	smull	r1, r2, r2, r3
 8008158:	1152      	asrs	r2, r2, #5
 800815a:	17db      	asrs	r3, r3, #31
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
						ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 8008162:	f9b7 35c4 	ldrsh.w	r3, [r7, #1476]	@ 0x5c4
 8008166:	2b00      	cmp	r3, #0
 8008168:	bfb8      	it	lt
 800816a:	425b      	neglt	r3, r3
 800816c:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800816e:	4aab      	ldr	r2, [pc, #684]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008170:	fb82 1203 	smull	r1, r2, r2, r3
 8008174:	1151      	asrs	r1, r2, #5
 8008176:	17da      	asrs	r2, r3, #31
 8008178:	1a8a      	subs	r2, r1, r2
 800817a:	4611      	mov	r1, r2
 800817c:	2264      	movs	r2, #100	@ 0x64
 800817e:	fb01 f202 	mul.w	r2, r1, r2
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008188:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 800818c:	2b00      	cmp	r3, #0
 800818e:	da03      	bge.n	8008198 <frame_processing_rs422+0x360>
 8008190:	4ba3      	ldr	r3, [pc, #652]	@ (8008420 <frame_processing_rs422+0x5e8>)
 8008192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008196:	e002      	b.n	800819e <frame_processing_rs422+0x366>
 8008198:	4b9f      	ldr	r3, [pc, #636]	@ (8008418 <frame_processing_rs422+0x5e0>)
 800819a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800819e:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bfb8      	it	lt
 80081a6:	425b      	neglt	r3, r3
 80081a8:	b29b      	uxth	r3, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80081aa:	4a9c      	ldr	r2, [pc, #624]	@ (800841c <frame_processing_rs422+0x5e4>)
 80081ac:	fb82 1203 	smull	r1, r2, r2, r3
 80081b0:	1152      	asrs	r2, r2, #5
 80081b2:	17db      	asrs	r3, r3, #31
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 80081ba:	f9b7 35c2 	ldrsh.w	r3, [r7, #1474]	@ 0x5c2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	bfb8      	it	lt
 80081c2:	425b      	neglt	r3, r3
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	4619      	mov	r1, r3
				sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 80081c8:	4b94      	ldr	r3, [pc, #592]	@ (800841c <frame_processing_rs422+0x5e4>)
 80081ca:	fb83 2301 	smull	r2, r3, r3, r1
 80081ce:	115a      	asrs	r2, r3, #5
 80081d0:	17cb      	asrs	r3, r1, #31
 80081d2:	1ad6      	subs	r6, r2, r3
 80081d4:	2364      	movs	r3, #100	@ 0x64
 80081d6:	fb06 f303 	mul.w	r3, r6, r3
 80081da:	1ace      	subs	r6, r1, r3
 80081dc:	f8b7 35c0 	ldrh.w	r3, [r7, #1472]	@ 0x5c0
 80081e0:	4a8e      	ldr	r2, [pc, #568]	@ (800841c <frame_processing_rs422+0x5e4>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081ee:	f8b7 15c0 	ldrh.w	r1, [r7, #1472]	@ 0x5c0
 80081f2:	4b8a      	ldr	r3, [pc, #552]	@ (800841c <frame_processing_rs422+0x5e4>)
 80081f4:	fba3 2301 	umull	r2, r3, r3, r1
 80081f8:	095a      	lsrs	r2, r3, #5
 80081fa:	2364      	movs	r3, #100	@ 0x64
 80081fc:	fb02 f303 	mul.w	r3, r2, r3
 8008200:	1acb      	subs	r3, r1, r3
 8008202:	b29b      	uxth	r3, r3
 8008204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008208:	f8b7 25be 	ldrh.w	r2, [r7, #1470]	@ 0x5be
 800820c:	4b83      	ldr	r3, [pc, #524]	@ (800841c <frame_processing_rs422+0x5e4>)
 800820e:	fba3 2302 	umull	r2, r3, r3, r2
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	b29b      	uxth	r3, r3
 8008216:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800821a:	f8b7 15be 	ldrh.w	r1, [r7, #1470]	@ 0x5be
 800821e:	4b7f      	ldr	r3, [pc, #508]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008220:	fba3 2301 	umull	r2, r3, r3, r1
 8008224:	095a      	lsrs	r2, r3, #5
 8008226:	2364      	movs	r3, #100	@ 0x64
 8008228:	fb02 f303 	mul.w	r3, r2, r3
 800822c:	1acb      	subs	r3, r1, r3
 800822e:	b29b      	uxth	r3, r3
 8008230:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008232:	f8b7 25bc 	ldrh.w	r2, [r7, #1468]	@ 0x5bc
 8008236:	4b79      	ldr	r3, [pc, #484]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008238:	fba3 2302 	umull	r2, r3, r3, r2
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	b29b      	uxth	r3, r3
 8008240:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008242:	f8b7 15bc 	ldrh.w	r1, [r7, #1468]	@ 0x5bc
 8008246:	4b75      	ldr	r3, [pc, #468]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008248:	fba3 2301 	umull	r2, r3, r3, r1
 800824c:	095a      	lsrs	r2, r3, #5
 800824e:	2364      	movs	r3, #100	@ 0x64
 8008250:	fb02 f303 	mul.w	r3, r2, r3
 8008254:	1acb      	subs	r3, r1, r3
 8008256:	b29b      	uxth	r3, r3
 8008258:	677b      	str	r3, [r7, #116]	@ 0x74
 800825a:	f8b7 25ba 	ldrh.w	r2, [r7, #1466]	@ 0x5ba
 800825e:	4b6f      	ldr	r3, [pc, #444]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008260:	fba3 2302 	umull	r2, r3, r3, r2
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	b29b      	uxth	r3, r3
 8008268:	673b      	str	r3, [r7, #112]	@ 0x70
 800826a:	f8b7 15ba 	ldrh.w	r1, [r7, #1466]	@ 0x5ba
 800826e:	4b6b      	ldr	r3, [pc, #428]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008270:	fba3 2301 	umull	r2, r3, r3, r1
 8008274:	095a      	lsrs	r2, r3, #5
 8008276:	2364      	movs	r3, #100	@ 0x64
 8008278:	fb02 f303 	mul.w	r3, r2, r3
 800827c:	1acb      	subs	r3, r1, r3
 800827e:	b29b      	uxth	r3, r3
 8008280:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008282:	f8b7 25b8 	ldrh.w	r2, [r7, #1464]	@ 0x5b8
 8008286:	4b65      	ldr	r3, [pc, #404]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008288:	fba3 2302 	umull	r2, r3, r3, r2
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	b29b      	uxth	r3, r3
 8008290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008292:	f8b7 15b8 	ldrh.w	r1, [r7, #1464]	@ 0x5b8
 8008296:	4b61      	ldr	r3, [pc, #388]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008298:	fba3 2301 	umull	r2, r3, r3, r1
 800829c:	095a      	lsrs	r2, r3, #5
 800829e:	2364      	movs	r3, #100	@ 0x64
 80082a0:	fb02 f303 	mul.w	r3, r2, r3
 80082a4:	1acb      	subs	r3, r1, r3
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80082aa:	f8b7 25b6 	ldrh.w	r2, [r7, #1462]	@ 0x5b6
 80082ae:	4b5b      	ldr	r3, [pc, #364]	@ (800841c <frame_processing_rs422+0x5e4>)
 80082b0:	fba3 2302 	umull	r2, r3, r3, r2
 80082b4:	095b      	lsrs	r3, r3, #5
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80082ba:	f8b7 15b6 	ldrh.w	r1, [r7, #1462]	@ 0x5b6
 80082be:	4b57      	ldr	r3, [pc, #348]	@ (800841c <frame_processing_rs422+0x5e4>)
 80082c0:	fba3 2301 	umull	r2, r3, r3, r1
 80082c4:	095a      	lsrs	r2, r3, #5
 80082c6:	2364      	movs	r3, #100	@ 0x64
 80082c8:	fb02 f303 	mul.w	r3, r2, r3
 80082cc:	1acb      	subs	r3, r1, r3
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082d2:	f8b7 25b4 	ldrh.w	r2, [r7, #1460]	@ 0x5b4
 80082d6:	4b51      	ldr	r3, [pc, #324]	@ (800841c <frame_processing_rs422+0x5e4>)
 80082d8:	fba3 2302 	umull	r2, r3, r3, r2
 80082dc:	095b      	lsrs	r3, r3, #5
 80082de:	b29b      	uxth	r3, r3
 80082e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082e2:	f8b7 15b4 	ldrh.w	r1, [r7, #1460]	@ 0x5b4
 80082e6:	4b4d      	ldr	r3, [pc, #308]	@ (800841c <frame_processing_rs422+0x5e4>)
 80082e8:	fba3 2301 	umull	r2, r3, r3, r1
 80082ec:	095a      	lsrs	r2, r3, #5
 80082ee:	2364      	movs	r3, #100	@ 0x64
 80082f0:	fb02 f303 	mul.w	r3, r2, r3
 80082f4:	1acb      	subs	r3, r1, r3
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	461d      	mov	r5, r3
 80082fa:	f8b7 25b2 	ldrh.w	r2, [r7, #1458]	@ 0x5b2
 80082fe:	4b47      	ldr	r3, [pc, #284]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008300:	fba3 2302 	umull	r2, r3, r3, r2
 8008304:	095b      	lsrs	r3, r3, #5
 8008306:	b29b      	uxth	r3, r3
 8008308:	461c      	mov	r4, r3
 800830a:	f8b7 15b2 	ldrh.w	r1, [r7, #1458]	@ 0x5b2
 800830e:	4b43      	ldr	r3, [pc, #268]	@ (800841c <frame_processing_rs422+0x5e4>)
 8008310:	fba3 2301 	umull	r2, r3, r3, r1
 8008314:	095a      	lsrs	r2, r3, #5
 8008316:	2364      	movs	r3, #100	@ 0x64
 8008318:	fb02 f303 	mul.w	r3, r2, r3
 800831c:	1acb      	subs	r3, r1, r3
 800831e:	b29b      	uxth	r3, r3
 8008320:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8008324:	9319      	str	r3, [sp, #100]	@ 0x64
 8008326:	9418      	str	r4, [sp, #96]	@ 0x60
 8008328:	9517      	str	r5, [sp, #92]	@ 0x5c
 800832a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800832c:	9216      	str	r2, [sp, #88]	@ 0x58
 800832e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008330:	9215      	str	r2, [sp, #84]	@ 0x54
 8008332:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008334:	9214      	str	r2, [sp, #80]	@ 0x50
 8008336:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008338:	9213      	str	r2, [sp, #76]	@ 0x4c
 800833a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800833c:	9212      	str	r2, [sp, #72]	@ 0x48
 800833e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008340:	9211      	str	r2, [sp, #68]	@ 0x44
 8008342:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008344:	9210      	str	r2, [sp, #64]	@ 0x40
 8008346:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008348:	920f      	str	r2, [sp, #60]	@ 0x3c
 800834a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800834c:	920e      	str	r2, [sp, #56]	@ 0x38
 800834e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008350:	920d      	str	r2, [sp, #52]	@ 0x34
 8008352:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008356:	920c      	str	r2, [sp, #48]	@ 0x30
 8008358:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800835c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800835e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008362:	920a      	str	r2, [sp, #40]	@ 0x28
 8008364:	9609      	str	r6, [sp, #36]	@ 0x24
 8008366:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800836a:	9308      	str	r3, [sp, #32]
 800836c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008370:	9307      	str	r3, [sp, #28]
 8008372:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008376:	9306      	str	r3, [sp, #24]
 8008378:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800837c:	9305      	str	r3, [sp, #20]
 800837e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008388:	9303      	str	r3, [sp, #12]
 800838a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800838e:	9302      	str	r3, [sp, #8]
 8008390:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	4663      	mov	r3, ip
 800839e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80083a2:	4920      	ldr	r1, [pc, #128]	@ (8008424 <frame_processing_rs422+0x5ec>)
 80083a4:	f007 fc06 	bl	800fbb4 <siprintf>
						bat0 / 100, bat0 % 100, bat1 / 100, bat1 % 100,
						bat2 / 100, bat2 % 100, bat3 / 100, bat3 % 100,
						vin / 100, vin % 100, iin / 100, iin % 100,
						vout / 100, vout % 100, iout / 100, iout % 100);

				if(auto_report_enabled){
 80083a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008428 <frame_processing_rs422+0x5f0>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d006      	beq.n	80083c0 <frame_processing_rs422+0x588>
					Uart_sendstring(USART6, buffer_0x08);
 80083b2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80083b6:	4619      	mov	r1, r3
 80083b8:	481c      	ldr	r0, [pc, #112]	@ (800842c <frame_processing_rs422+0x5f4>)
 80083ba:	f7f9 fe0f 	bl	8001fdc <Uart_sendstring>
 80083be:	e005      	b.n	80083cc <frame_processing_rs422+0x594>
				}else{
					Uart_sendstring(USART2, buffer_0x08);
 80083c0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80083c4:	4619      	mov	r1, r3
 80083c6:	481a      	ldr	r0, [pc, #104]	@ (8008430 <frame_processing_rs422+0x5f8>)
 80083c8:	f7f9 fe08 	bl	8001fdc <Uart_sendstring>
				}
			}
			receive_pmuFlag = 1;
 80083cc:	4b19      	ldr	r3, [pc, #100]	@ (8008434 <frame_processing_rs422+0x5fc>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	701a      	strb	r2, [r3, #0]

			for (int i = 1; i <= 24; i++) {
 80083d2:	2301      	movs	r3, #1
 80083d4:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 80083d8:	e015      	b.n	8008406 <frame_processing_rs422+0x5ce>
			    nextBuffer[i + 110] = fsp_pkt->payload[i]; //97   pay1    + 98 pay2    120    pay24
 80083da:	4b17      	ldr	r3, [pc, #92]	@ (8008438 <frame_processing_rs422+0x600>)
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 80083e2:	336e      	adds	r3, #110	@ 0x6e
 80083e4:	4413      	add	r3, r2
 80083e6:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 80083ea:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 80083ee:	6811      	ldr	r1, [r2, #0]
 80083f0:	f8d7 2604 	ldr.w	r2, [r7, #1540]	@ 0x604
 80083f4:	440a      	add	r2, r1
 80083f6:	3205      	adds	r2, #5
 80083f8:	7812      	ldrb	r2, [r2, #0]
 80083fa:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= 24; i++) {
 80083fc:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8008400:	3301      	adds	r3, #1
 8008402:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8008406:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 800840a:	2b18      	cmp	r3, #24
 800840c:	dde5      	ble.n	80083da <frame_processing_rs422+0x5a2>
			}
//			Uart_sendstring(USART6, "\nPMU_Collected\r\n");

			disconnect_counter_pmu = 0;
 800840e:	4b0b      	ldr	r3, [pc, #44]	@ (800843c <frame_processing_rs422+0x604>)
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]

	    }
	    break;
 8008414:	f001 b869 	b.w	80094ea <frame_processing_rs422+0x16b2>
 8008418:	080152b0 	.word	0x080152b0
 800841c:	51eb851f 	.word	0x51eb851f
 8008420:	080152ac 	.word	0x080152ac
 8008424:	080152b4 	.word	0x080152b4
 8008428:	200059e0 	.word	0x200059e0
 800842c:	40011400 	.word	0x40011400
 8008430:	40004400 	.word	0x40004400
 8008434:	20000041 	.word	0x20000041
 8008438:	200003ec 	.word	0x200003ec
 800843c:	200058b5 	.word	0x200058b5

		case 0x06:
		{
			if(auto_report_enabled || rf_report_enable){
 8008440:	4b0a      	ldr	r3, [pc, #40]	@ (800846c <frame_processing_rs422+0x634>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d105      	bne.n	8008456 <frame_processing_rs422+0x61e>
 800844a:	4b09      	ldr	r3, [pc, #36]	@ (8008470 <frame_processing_rs422+0x638>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8307 	beq.w	8008a64 <frame_processing_rs422+0xc2c>
				if(auto_report_enabled){
 8008456:	4b05      	ldr	r3, [pc, #20]	@ (800846c <frame_processing_rs422+0x634>)
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00d      	beq.n	800847c <frame_processing_rs422+0x644>
					Uart_sendstring(USART6, "\nPDU:\n");
 8008460:	4904      	ldr	r1, [pc, #16]	@ (8008474 <frame_processing_rs422+0x63c>)
 8008462:	4805      	ldr	r0, [pc, #20]	@ (8008478 <frame_processing_rs422+0x640>)
 8008464:	f7f9 fdba 	bl	8001fdc <Uart_sendstring>
 8008468:	e012      	b.n	8008490 <frame_processing_rs422+0x658>
 800846a:	bf00      	nop
 800846c:	200059e0 	.word	0x200059e0
 8008470:	200059e2 	.word	0x200059e2
 8008474:	080153a4 	.word	0x080153a4
 8008478:	40011400 	.word	0x40011400
				}else{
					Uart_sendstring(USART2, "\nPDU:\n");
 800847c:	4902      	ldr	r1, [pc, #8]	@ (8008488 <frame_processing_rs422+0x650>)
 800847e:	4803      	ldr	r0, [pc, #12]	@ (800848c <frame_processing_rs422+0x654>)
 8008480:	f7f9 fdac 	bl	8001fdc <Uart_sendstring>
 8008484:	e004      	b.n	8008490 <frame_processing_rs422+0x658>
 8008486:	bf00      	nop
 8008488:	080153a4 	.word	0x080153a4
 800848c:	40004400 	.word	0x40004400
				}
				uint8_t tec1buck_status = fsp_pkt->payload[1];
 8008490:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008494:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	799b      	ldrb	r3, [r3, #6]
 800849c:	f887 35b1 	strb.w	r3, [r7, #1457]	@ 0x5b1
				uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 80084a0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80084a4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	79db      	ldrb	r3, [r3, #7]
 80084ac:	021b      	lsls	r3, r3, #8
 80084ae:	b21a      	sxth	r2, r3
 80084b0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80084b4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	7a1b      	ldrb	r3, [r3, #8]
 80084bc:	b21b      	sxth	r3, r3
 80084be:	4313      	orrs	r3, r2
 80084c0:	b21b      	sxth	r3, r3
 80084c2:	f8a7 35ae 	strh.w	r3, [r7, #1454]	@ 0x5ae

				uint8_t tec2buck_status = fsp_pkt->payload[4];
 80084c6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80084ca:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	7a5b      	ldrb	r3, [r3, #9]
 80084d2:	f887 35ad 	strb.w	r3, [r7, #1453]	@ 0x5ad
				uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 80084d6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80084da:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	7a9b      	ldrb	r3, [r3, #10]
 80084e2:	021b      	lsls	r3, r3, #8
 80084e4:	b21a      	sxth	r2, r3
 80084e6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80084ea:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	7adb      	ldrb	r3, [r3, #11]
 80084f2:	b21b      	sxth	r3, r3
 80084f4:	4313      	orrs	r3, r2
 80084f6:	b21b      	sxth	r3, r3
 80084f8:	f8a7 35aa 	strh.w	r3, [r7, #1450]	@ 0x5aa

				uint8_t tec3buck_status = fsp_pkt->payload[7];
 80084fc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008500:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	7b1b      	ldrb	r3, [r3, #12]
 8008508:	f887 35a9 	strb.w	r3, [r7, #1449]	@ 0x5a9
				uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 800850c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008510:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	7b5b      	ldrb	r3, [r3, #13]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	b21a      	sxth	r2, r3
 800851c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008520:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	7b9b      	ldrb	r3, [r3, #14]
 8008528:	b21b      	sxth	r3, r3
 800852a:	4313      	orrs	r3, r2
 800852c:	b21b      	sxth	r3, r3
 800852e:	f8a7 35a6 	strh.w	r3, [r7, #1446]	@ 0x5a6

				uint8_t tec4buck_status = fsp_pkt->payload[10];
 8008532:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008536:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	7bdb      	ldrb	r3, [r3, #15]
 800853e:	f887 35a5 	strb.w	r3, [r7, #1445]	@ 0x5a5
				uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 8008542:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008546:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	7c1b      	ldrb	r3, [r3, #16]
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	b21a      	sxth	r2, r3
 8008552:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008556:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	7c5b      	ldrb	r3, [r3, #17]
 800855e:	b21b      	sxth	r3, r3
 8008560:	4313      	orrs	r3, r2
 8008562:	b21b      	sxth	r3, r3
 8008564:	f8a7 35a2 	strh.w	r3, [r7, #1442]	@ 0x5a2

				uint8_t mcubuck_status = fsp_pkt->payload[13];
 8008568:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800856c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	7c9b      	ldrb	r3, [r3, #18]
 8008574:	f887 35a1 	strb.w	r3, [r7, #1441]	@ 0x5a1
				uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 8008578:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800857c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	7cdb      	ldrb	r3, [r3, #19]
 8008584:	021b      	lsls	r3, r3, #8
 8008586:	b21a      	sxth	r2, r3
 8008588:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800858c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	7d1b      	ldrb	r3, [r3, #20]
 8008594:	b21b      	sxth	r3, r3
 8008596:	4313      	orrs	r3, r2
 8008598:	b21b      	sxth	r3, r3
 800859a:	f8a7 359e 	strh.w	r3, [r7, #1438]	@ 0x59e

				uint8_t ledbuck_status = fsp_pkt->payload[16];
 800859e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085a2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	7d5b      	ldrb	r3, [r3, #21]
 80085aa:	f887 359d 	strb.w	r3, [r7, #1437]	@ 0x59d
				uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 80085ae:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085b2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	7d9b      	ldrb	r3, [r3, #22]
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	b21a      	sxth	r2, r3
 80085be:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085c2:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	7ddb      	ldrb	r3, [r3, #23]
 80085ca:	b21b      	sxth	r3, r3
 80085cc:	4313      	orrs	r3, r2
 80085ce:	b21b      	sxth	r3, r3
 80085d0:	f8a7 359a 	strh.w	r3, [r7, #1434]	@ 0x59a

				uint8_t cm4buck_status = fsp_pkt->payload[19];
 80085d4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085d8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	7e1b      	ldrb	r3, [r3, #24]
 80085e0:	f887 3599 	strb.w	r3, [r7, #1433]	@ 0x599
				uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 80085e4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085e8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	7e5b      	ldrb	r3, [r3, #25]
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	b21a      	sxth	r2, r3
 80085f4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80085f8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	7e9b      	ldrb	r3, [r3, #26]
 8008600:	b21b      	sxth	r3, r3
 8008602:	4313      	orrs	r3, r2
 8008604:	b21b      	sxth	r3, r3
 8008606:	f8a7 3596 	strh.w	r3, [r7, #1430]	@ 0x596

				uint8_t tec1_status = fsp_pkt->payload[22];
 800860a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800860e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	7edb      	ldrb	r3, [r3, #27]
 8008616:	f887 3595 	strb.w	r3, [r7, #1429]	@ 0x595
				uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 800861a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800861e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	7f1b      	ldrb	r3, [r3, #28]
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	b21a      	sxth	r2, r3
 800862a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800862e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	7f5b      	ldrb	r3, [r3, #29]
 8008636:	b21b      	sxth	r3, r3
 8008638:	4313      	orrs	r3, r2
 800863a:	b21b      	sxth	r3, r3
 800863c:	f8a7 3592 	strh.w	r3, [r7, #1426]	@ 0x592

				uint8_t tec2_status = fsp_pkt->payload[25];
 8008640:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008644:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	7f9b      	ldrb	r3, [r3, #30]
 800864c:	f887 3591 	strb.w	r3, [r7, #1425]	@ 0x591
				uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 8008650:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008654:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	7fdb      	ldrb	r3, [r3, #31]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	b21a      	sxth	r2, r3
 8008660:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008664:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800866e:	b21b      	sxth	r3, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	b21b      	sxth	r3, r3
 8008674:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e

				uint8_t tec3_status = fsp_pkt->payload[28];
 8008678:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800867c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008686:	f887 358d 	strb.w	r3, [r7, #1421]	@ 0x58d
				uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 800868a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800868e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	b21a      	sxth	r2, r3
 800869c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086a0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80086aa:	b21b      	sxth	r3, r3
 80086ac:	4313      	orrs	r3, r2
 80086ae:	b21b      	sxth	r3, r3
 80086b0:	f8a7 358a 	strh.w	r3, [r7, #1418]	@ 0x58a

				uint8_t tec4_status = fsp_pkt->payload[31];
 80086b4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086b8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80086c2:	f887 3589 	strb.w	r3, [r7, #1417]	@ 0x589
				uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 80086c6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086ca:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80086d4:	021b      	lsls	r3, r3, #8
 80086d6:	b21a      	sxth	r2, r3
 80086d8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086dc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80086e6:	b21b      	sxth	r3, r3
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b21b      	sxth	r3, r3
 80086ec:	f8a7 3586 	strh.w	r3, [r7, #1414]	@ 0x586

				uint8_t copc_status = fsp_pkt->payload[34];
 80086f0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80086f4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80086fe:	f887 3585 	strb.w	r3, [r7, #1413]	@ 0x585
				uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 8008702:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008706:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	b21a      	sxth	r2, r3
 8008714:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008718:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008722:	b21b      	sxth	r3, r3
 8008724:	4313      	orrs	r3, r2
 8008726:	b21b      	sxth	r3, r3
 8008728:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582

				uint8_t iou_status = fsp_pkt->payload[37];
 800872c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008730:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800873a:	f887 3581 	strb.w	r3, [r7, #1409]	@ 0x581
				uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800873e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008742:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	b21a      	sxth	r2, r3
 8008750:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008754:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800875e:	b21b      	sxth	r3, r3
 8008760:	4313      	orrs	r3, r2
 8008762:	b21b      	sxth	r3, r3
 8008764:	f8a7 357e 	strh.w	r3, [r7, #1406]	@ 0x57e

				uint8_t rgb_status = fsp_pkt->payload[40];
 8008768:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800876c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008776:	f887 357d 	strb.w	r3, [r7, #1405]	@ 0x57d
				uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 800877a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800877e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8008788:	021b      	lsls	r3, r3, #8
 800878a:	b21a      	sxth	r2, r3
 800878c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008790:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800879a:	b21b      	sxth	r3, r3
 800879c:	4313      	orrs	r3, r2
 800879e:	b21b      	sxth	r3, r3
 80087a0:	f8a7 357a 	strh.w	r3, [r7, #1402]	@ 0x57a

				uint8_t ir_status = fsp_pkt->payload[43];
 80087a4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087a8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80087b2:	f887 3579 	strb.w	r3, [r7, #1401]	@ 0x579
				uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 80087b6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087ba:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	b21a      	sxth	r2, r3
 80087c8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087cc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80087d6:	b21b      	sxth	r3, r3
 80087d8:	4313      	orrs	r3, r2
 80087da:	b21b      	sxth	r3, r3
 80087dc:	f8a7 3576 	strh.w	r3, [r7, #1398]	@ 0x576

				uint8_t cm4_status = fsp_pkt->payload[46];
 80087e0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087e4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80087ee:	f887 3575 	strb.w	r3, [r7, #1397]	@ 0x575
				uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 80087f2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80087f6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	b21a      	sxth	r2, r3
 8008804:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008808:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008812:	b21b      	sxth	r3, r3
 8008814:	4313      	orrs	r3, r2
 8008816:	b21b      	sxth	r3, r3
 8008818:	f8a7 3572 	strh.w	r3, [r7, #1394]	@ 0x572

				uint8_t vin_status = fsp_pkt->payload[49];
 800881c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008820:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800882a:	f887 3571 	strb.w	r3, [r7, #1393]	@ 0x571
				uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 800882e:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008832:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	b21a      	sxth	r2, r3
 8008840:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008844:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800884e:	b21b      	sxth	r3, r3
 8008850:	4313      	orrs	r3, r2
 8008852:	b21b      	sxth	r3, r3
 8008854:	f8a7 356e 	strh.w	r3, [r7, #1390]	@ 0x56e

				uint8_t vbus_status = fsp_pkt->payload[52];
 8008858:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800885c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008866:	f887 356d 	strb.w	r3, [r7, #1389]	@ 0x56d
				uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 800886a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 800886e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	b21a      	sxth	r2, r3
 800887c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008880:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800888a:	b21b      	sxth	r3, r3
 800888c:	4313      	orrs	r3, r2
 800888e:	b21b      	sxth	r3, r3
 8008890:	f8a7 356a 	strh.w	r3, [r7, #1386]	@ 0x56a


						char buffer_0x06[1000];
						sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 8008894:	f897 e5b1 	ldrb.w	lr, [r7, #1457]	@ 0x5b1
 8008898:	f8b7 85ae 	ldrh.w	r8, [r7, #1454]	@ 0x5ae
 800889c:	f897 35ad 	ldrb.w	r3, [r7, #1453]	@ 0x5ad
 80088a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088a4:	f8b7 25aa 	ldrh.w	r2, [r7, #1450]	@ 0x5aa
 80088a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80088ac:	f897 15a9 	ldrb.w	r1, [r7, #1449]	@ 0x5a9
 80088b0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80088b4:	f8b7 05a6 	ldrh.w	r0, [r7, #1446]	@ 0x5a6
 80088b8:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 80088bc:	f897 45a5 	ldrb.w	r4, [r7, #1445]	@ 0x5a5
 80088c0:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 80088c4:	f8b7 55a2 	ldrh.w	r5, [r7, #1442]	@ 0x5a2
 80088c8:	f8c7 509c 	str.w	r5, [r7, #156]	@ 0x9c
 80088cc:	f897 65a1 	ldrb.w	r6, [r7, #1441]	@ 0x5a1
 80088d0:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 80088d4:	f8b7 c59e 	ldrh.w	ip, [r7, #1438]	@ 0x59e
 80088d8:	4663      	mov	r3, ip
 80088da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80088de:	f897 c59d 	ldrb.w	ip, [r7, #1437]	@ 0x59d
 80088e2:	4662      	mov	r2, ip
 80088e4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80088e8:	f8b7 c59a 	ldrh.w	ip, [r7, #1434]	@ 0x59a
 80088ec:	4661      	mov	r1, ip
 80088ee:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 80088f2:	f897 c599 	ldrb.w	ip, [r7, #1433]	@ 0x599
 80088f6:	4660      	mov	r0, ip
 80088f8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 80088fc:	f8b7 c596 	ldrh.w	ip, [r7, #1430]	@ 0x596
 8008900:	4664      	mov	r4, ip
 8008902:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
 8008906:	f897 c595 	ldrb.w	ip, [r7, #1429]	@ 0x595
 800890a:	4665      	mov	r5, ip
 800890c:	f8c7 5080 	str.w	r5, [r7, #128]	@ 0x80
 8008910:	f8b7 c592 	ldrh.w	ip, [r7, #1426]	@ 0x592
 8008914:	4666      	mov	r6, ip
 8008916:	67fe      	str	r6, [r7, #124]	@ 0x7c
 8008918:	f897 c591 	ldrb.w	ip, [r7, #1425]	@ 0x591
 800891c:	4663      	mov	r3, ip
 800891e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008920:	f8b7 c58e 	ldrh.w	ip, [r7, #1422]	@ 0x58e
 8008924:	4662      	mov	r2, ip
 8008926:	677a      	str	r2, [r7, #116]	@ 0x74
 8008928:	f897 c58d 	ldrb.w	ip, [r7, #1421]	@ 0x58d
 800892c:	4661      	mov	r1, ip
 800892e:	6739      	str	r1, [r7, #112]	@ 0x70
 8008930:	f8b7 c58a 	ldrh.w	ip, [r7, #1418]	@ 0x58a
 8008934:	4660      	mov	r0, ip
 8008936:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8008938:	f897 c589 	ldrb.w	ip, [r7, #1417]	@ 0x589
 800893c:	4664      	mov	r4, ip
 800893e:	66bc      	str	r4, [r7, #104]	@ 0x68
 8008940:	f8b7 c586 	ldrh.w	ip, [r7, #1414]	@ 0x586
 8008944:	4665      	mov	r5, ip
 8008946:	667d      	str	r5, [r7, #100]	@ 0x64
 8008948:	f897 c585 	ldrb.w	ip, [r7, #1413]	@ 0x585
 800894c:	4666      	mov	r6, ip
 800894e:	663e      	str	r6, [r7, #96]	@ 0x60
 8008950:	f8b7 c582 	ldrh.w	ip, [r7, #1410]	@ 0x582
 8008954:	4663      	mov	r3, ip
 8008956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008958:	f897 c581 	ldrb.w	ip, [r7, #1409]	@ 0x581
 800895c:	4662      	mov	r2, ip
 800895e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008960:	f8b7 c57e 	ldrh.w	ip, [r7, #1406]	@ 0x57e
 8008964:	4661      	mov	r1, ip
 8008966:	6579      	str	r1, [r7, #84]	@ 0x54
 8008968:	f897 c57d 	ldrb.w	ip, [r7, #1405]	@ 0x57d
 800896c:	4660      	mov	r0, ip
 800896e:	6538      	str	r0, [r7, #80]	@ 0x50
 8008970:	f8b7 c57a 	ldrh.w	ip, [r7, #1402]	@ 0x57a
 8008974:	4664      	mov	r4, ip
 8008976:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8008978:	f897 c579 	ldrb.w	ip, [r7, #1401]	@ 0x579
 800897c:	4665      	mov	r5, ip
 800897e:	64bd      	str	r5, [r7, #72]	@ 0x48
 8008980:	f8b7 6576 	ldrh.w	r6, [r7, #1398]	@ 0x576
 8008984:	f897 5575 	ldrb.w	r5, [r7, #1397]	@ 0x575
 8008988:	f8b7 4572 	ldrh.w	r4, [r7, #1394]	@ 0x572
 800898c:	f897 0571 	ldrb.w	r0, [r7, #1393]	@ 0x571
 8008990:	f8b7 156e 	ldrh.w	r1, [r7, #1390]	@ 0x56e
 8008994:	f897 256d 	ldrb.w	r2, [r7, #1389]	@ 0x56d
 8008998:	f8b7 356a 	ldrh.w	r3, [r7, #1386]	@ 0x56a
 800899c:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 80089a0:	9321      	str	r3, [sp, #132]	@ 0x84
 80089a2:	9220      	str	r2, [sp, #128]	@ 0x80
 80089a4:	911f      	str	r1, [sp, #124]	@ 0x7c
 80089a6:	901e      	str	r0, [sp, #120]	@ 0x78
 80089a8:	941d      	str	r4, [sp, #116]	@ 0x74
 80089aa:	951c      	str	r5, [sp, #112]	@ 0x70
 80089ac:	961b      	str	r6, [sp, #108]	@ 0x6c
 80089ae:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 80089b0:	951a      	str	r5, [sp, #104]	@ 0x68
 80089b2:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 80089b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80089b6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80089b8:	9018      	str	r0, [sp, #96]	@ 0x60
 80089ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089bc:	9117      	str	r1, [sp, #92]	@ 0x5c
 80089be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089c0:	9216      	str	r2, [sp, #88]	@ 0x58
 80089c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80089c6:	6e3e      	ldr	r6, [r7, #96]	@ 0x60
 80089c8:	9614      	str	r6, [sp, #80]	@ 0x50
 80089ca:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 80089cc:	9513      	str	r5, [sp, #76]	@ 0x4c
 80089ce:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 80089d0:	9412      	str	r4, [sp, #72]	@ 0x48
 80089d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80089d4:	9011      	str	r0, [sp, #68]	@ 0x44
 80089d6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80089d8:	9110      	str	r1, [sp, #64]	@ 0x40
 80089da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80089dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80089de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80089e2:	6ffe      	ldr	r6, [r7, #124]	@ 0x7c
 80089e4:	960d      	str	r6, [sp, #52]	@ 0x34
 80089e6:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 80089ea:	950c      	str	r5, [sp, #48]	@ 0x30
 80089ec:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 80089f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80089f2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80089f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80089f8:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80089fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80089fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008a02:	9208      	str	r2, [sp, #32]
 8008a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008a08:	9307      	str	r3, [sp, #28]
 8008a0a:	f8d7 6098 	ldr.w	r6, [r7, #152]	@ 0x98
 8008a0e:	9606      	str	r6, [sp, #24]
 8008a10:	f8d7 509c 	ldr.w	r5, [r7, #156]	@ 0x9c
 8008a14:	9505      	str	r5, [sp, #20]
 8008a16:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8008a1a:	9404      	str	r4, [sp, #16]
 8008a1c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8008a20:	9003      	str	r0, [sp, #12]
 8008a22:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8008a26:	9102      	str	r1, [sp, #8]
 8008a28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a2c:	9201      	str	r2, [sp, #4]
 8008a2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	4643      	mov	r3, r8
 8008a36:	4672      	mov	r2, lr
 8008a38:	4928      	ldr	r1, [pc, #160]	@ (8008adc <frame_processing_rs422+0xca4>)
 8008a3a:	4660      	mov	r0, ip
 8008a3c:	f007 f8ba 	bl	800fbb4 <siprintf>
							cm4_status, cm4_current,
							vin_status, vin_voltage,
							vbus_status, vbus_voltage);


					if(auto_report_enabled){
 8008a40:	4b27      	ldr	r3, [pc, #156]	@ (8008ae0 <frame_processing_rs422+0xca8>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d006      	beq.n	8008a58 <frame_processing_rs422+0xc20>
							Uart_sendstring(USART6, buffer_0x06);
 8008a4a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4824      	ldr	r0, [pc, #144]	@ (8008ae4 <frame_processing_rs422+0xcac>)
 8008a52:	f7f9 fac3 	bl	8001fdc <Uart_sendstring>
 8008a56:	e005      	b.n	8008a64 <frame_processing_rs422+0xc2c>
					}else{
							Uart_sendstring(USART2, buffer_0x06);
 8008a58:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4822      	ldr	r0, [pc, #136]	@ (8008ae8 <frame_processing_rs422+0xcb0>)
 8008a60:	f7f9 fabc 	bl	8001fdc <Uart_sendstring>
					}
			}

					receive_pduFlag = 1;
 8008a64:	4b21      	ldr	r3, [pc, #132]	@ (8008aec <frame_processing_rs422+0xcb4>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	701a      	strb	r2, [r3, #0]

					for (int i = 1; i <= 54; i++) {
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8008a70:	e015      	b.n	8008a9e <frame_processing_rs422+0xc66>
					    nextBuffer[i + 56] = fsp_pkt->payload[i]; //43   pay1    + 44  pay2        96-<54
 8008a72:	4b1f      	ldr	r3, [pc, #124]	@ (8008af0 <frame_processing_rs422+0xcb8>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8008a7a:	3338      	adds	r3, #56	@ 0x38
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 8008a82:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 8008a86:	6811      	ldr	r1, [r2, #0]
 8008a88:	f8d7 2600 	ldr.w	r2, [r7, #1536]	@ 0x600
 8008a8c:	440a      	add	r2, r1
 8008a8e:	3205      	adds	r2, #5
 8008a90:	7812      	ldrb	r2, [r2, #0]
 8008a92:	701a      	strb	r2, [r3, #0]
					for (int i = 1; i <= 54; i++) {
 8008a94:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8008a98:	3301      	adds	r3, #1
 8008a9a:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8008a9e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8008aa2:	2b36      	cmp	r3, #54	@ 0x36
 8008aa4:	dde5      	ble.n	8008a72 <frame_processing_rs422+0xc3a>
					}
//					Uart_sendstring(USART6, "\nPDU_Collected\r\n");

					disconnect_counter_pdu = 0;
 8008aa6:	4b13      	ldr	r3, [pc, #76]	@ (8008af4 <frame_processing_rs422+0xcbc>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	701a      	strb	r2, [r3, #0]
		}
		break;
 8008aac:	f000 bd1d 	b.w	80094ea <frame_processing_rs422+0x16b2>


		case 0x13:
		{
			if(auto_report_enabled || rf_report_enable){
 8008ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae0 <frame_processing_rs422+0xca8>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <frame_processing_rs422+0xc8e>
 8008aba:	4b0f      	ldr	r3, [pc, #60]	@ (8008af8 <frame_processing_rs422+0xcc0>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 84e4 	beq.w	800948e <frame_processing_rs422+0x1656>
				if(auto_report_enabled){
 8008ac6:	4b06      	ldr	r3, [pc, #24]	@ (8008ae0 <frame_processing_rs422+0xca8>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d017      	beq.n	8008b00 <frame_processing_rs422+0xcc8>
					Uart_sendstring(USART6, "\nIOU:\n");
 8008ad0:	490a      	ldr	r1, [pc, #40]	@ (8008afc <frame_processing_rs422+0xcc4>)
 8008ad2:	4804      	ldr	r0, [pc, #16]	@ (8008ae4 <frame_processing_rs422+0xcac>)
 8008ad4:	f7f9 fa82 	bl	8001fdc <Uart_sendstring>
 8008ad8:	e01c      	b.n	8008b14 <frame_processing_rs422+0xcdc>
 8008ada:	bf00      	nop
 8008adc:	080153ac 	.word	0x080153ac
 8008ae0:	200059e0 	.word	0x200059e0
 8008ae4:	40011400 	.word	0x40011400
 8008ae8:	40004400 	.word	0x40004400
 8008aec:	20000040 	.word	0x20000040
 8008af0:	200003ec 	.word	0x200003ec
 8008af4:	200058b4 	.word	0x200058b4
 8008af8:	200059e2 	.word	0x200059e2
 8008afc:	080155f4 	.word	0x080155f4
				}else{
					Uart_sendstring(USART2, "\nIOU:\n");
 8008b00:	4902      	ldr	r1, [pc, #8]	@ (8008b0c <frame_processing_rs422+0xcd4>)
 8008b02:	4803      	ldr	r0, [pc, #12]	@ (8008b10 <frame_processing_rs422+0xcd8>)
 8008b04:	f7f9 fa6a 	bl	8001fdc <Uart_sendstring>
 8008b08:	e004      	b.n	8008b14 <frame_processing_rs422+0xcdc>
 8008b0a:	bf00      	nop
 8008b0c:	080155f4 	.word	0x080155f4
 8008b10:	40004400 	.word	0x40004400
				}

			int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 8008b14:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b18:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	799b      	ldrb	r3, [r3, #6]
 8008b20:	021b      	lsls	r3, r3, #8
 8008b22:	b21a      	sxth	r2, r3
 8008b24:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b28:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	79db      	ldrb	r3, [r3, #7]
 8008b30:	b21b      	sxth	r3, r3
 8008b32:	4313      	orrs	r3, r2
 8008b34:	f8a7 35fa 	strh.w	r3, [r7, #1530]	@ 0x5fa
			int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 8008b38:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b3c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	7a1b      	ldrb	r3, [r3, #8]
 8008b44:	021b      	lsls	r3, r3, #8
 8008b46:	b21a      	sxth	r2, r3
 8008b48:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b4c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	7a5b      	ldrb	r3, [r3, #9]
 8008b54:	b21b      	sxth	r3, r3
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f8a7 35f8 	strh.w	r3, [r7, #1528]	@ 0x5f8
			int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 8008b5c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b60:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	7a9b      	ldrb	r3, [r3, #10]
 8008b68:	021b      	lsls	r3, r3, #8
 8008b6a:	b21a      	sxth	r2, r3
 8008b6c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b70:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	7adb      	ldrb	r3, [r3, #11]
 8008b78:	b21b      	sxth	r3, r3
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	f8a7 35f6 	strh.w	r3, [r7, #1526]	@ 0x5f6
			int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 8008b80:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b84:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	7b1b      	ldrb	r3, [r3, #12]
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	b21a      	sxth	r2, r3
 8008b90:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008b94:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	7b5b      	ldrb	r3, [r3, #13]
 8008b9c:	b21b      	sxth	r3, r3
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	f8a7 35f4 	strh.w	r3, [r7, #1524]	@ 0x5f4

			int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 8008ba4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ba8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	7b9b      	ldrb	r3, [r3, #14]
 8008bb0:	021b      	lsls	r3, r3, #8
 8008bb2:	b21a      	sxth	r2, r3
 8008bb4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008bb8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	7bdb      	ldrb	r3, [r3, #15]
 8008bc0:	b21b      	sxth	r3, r3
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	f8a7 35f2 	strh.w	r3, [r7, #1522]	@ 0x5f2
			int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 8008bc8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008bcc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	7c1b      	ldrb	r3, [r3, #16]
 8008bd4:	021b      	lsls	r3, r3, #8
 8008bd6:	b21a      	sxth	r2, r3
 8008bd8:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008bdc:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	7c5b      	ldrb	r3, [r3, #17]
 8008be4:	b21b      	sxth	r3, r3
 8008be6:	4313      	orrs	r3, r2
 8008be8:	f8a7 35f0 	strh.w	r3, [r7, #1520]	@ 0x5f0

			int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 8008bec:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008bf0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	7c9b      	ldrb	r3, [r3, #18]
 8008bf8:	021b      	lsls	r3, r3, #8
 8008bfa:	b21a      	sxth	r2, r3
 8008bfc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c00:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	7cdb      	ldrb	r3, [r3, #19]
 8008c08:	b21b      	sxth	r3, r3
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	f8a7 35ee 	strh.w	r3, [r7, #1518]	@ 0x5ee

			int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 8008c10:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c14:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	7d1b      	ldrb	r3, [r3, #20]
 8008c1c:	021b      	lsls	r3, r3, #8
 8008c1e:	b21a      	sxth	r2, r3
 8008c20:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c24:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	7d5b      	ldrb	r3, [r3, #21]
 8008c2c:	b21b      	sxth	r3, r3
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	f8a7 35ec 	strh.w	r3, [r7, #1516]	@ 0x5ec
			int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 8008c34:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c38:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	7d9b      	ldrb	r3, [r3, #22]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	b21a      	sxth	r2, r3
 8008c44:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c48:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	7ddb      	ldrb	r3, [r3, #23]
 8008c50:	b21b      	sxth	r3, r3
 8008c52:	4313      	orrs	r3, r2
 8008c54:	f8a7 35ea 	strh.w	r3, [r7, #1514]	@ 0x5ea
			int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 8008c58:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c5c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	7e1b      	ldrb	r3, [r3, #24]
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	b21a      	sxth	r2, r3
 8008c68:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c6c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	7e5b      	ldrb	r3, [r3, #25]
 8008c74:	b21b      	sxth	r3, r3
 8008c76:	4313      	orrs	r3, r2
 8008c78:	f8a7 35e8 	strh.w	r3, [r7, #1512]	@ 0x5e8
			int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 8008c7c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c80:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	7e9b      	ldrb	r3, [r3, #26]
 8008c88:	021b      	lsls	r3, r3, #8
 8008c8a:	b21a      	sxth	r2, r3
 8008c8c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008c90:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	7edb      	ldrb	r3, [r3, #27]
 8008c98:	b21b      	sxth	r3, r3
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	f8a7 35e6 	strh.w	r3, [r7, #1510]	@ 0x5e6

			uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 8008ca0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ca4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	7f1b      	ldrb	r3, [r3, #28]
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	b21a      	sxth	r2, r3
 8008cb0:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008cb4:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	7f5b      	ldrb	r3, [r3, #29]
 8008cbc:	b21b      	sxth	r3, r3
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	b21b      	sxth	r3, r3
 8008cc2:	f8a7 35e4 	strh.w	r3, [r7, #1508]	@ 0x5e4
			uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 8008cc6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008cca:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	7f9b      	ldrb	r3, [r3, #30]
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	b21a      	sxth	r2, r3
 8008cd6:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008cda:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	7fdb      	ldrb	r3, [r3, #31]
 8008ce2:	b21b      	sxth	r3, r3
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	b21b      	sxth	r3, r3
 8008ce8:	f8a7 35e2 	strh.w	r3, [r7, #1506]	@ 0x5e2
			uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 8008cec:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008cf0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008cfa:	021b      	lsls	r3, r3, #8
 8008cfc:	b21a      	sxth	r2, r3
 8008cfe:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d02:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008d0c:	b21b      	sxth	r3, r3
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	b21b      	sxth	r3, r3
 8008d12:	f8a7 35e0 	strh.w	r3, [r7, #1504]	@ 0x5e0
			uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 8008d16:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d1a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008d24:	021b      	lsls	r3, r3, #8
 8008d26:	b21a      	sxth	r2, r3
 8008d28:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d2c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008d36:	b21b      	sxth	r3, r3
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	b21b      	sxth	r3, r3
 8008d3c:	f8a7 35de 	strh.w	r3, [r7, #1502]	@ 0x5de

			uint8_t neo_led_r = fsp_pkt->payload[31];
 8008d40:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d44:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008d4e:	f887 35dd 	strb.w	r3, [r7, #1501]	@ 0x5dd
			uint8_t neo_led_g = fsp_pkt->payload[32];
 8008d52:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d56:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008d60:	f887 35dc 	strb.w	r3, [r7, #1500]	@ 0x5dc
			uint8_t neo_led_b = fsp_pkt->payload[33];
 8008d64:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d68:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8008d72:	f887 35db 	strb.w	r3, [r7, #1499]	@ 0x5db
			uint8_t neo_led_w = fsp_pkt->payload[34];
 8008d76:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d7a:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8008d84:	f887 35da 	strb.w	r3, [r7, #1498]	@ 0x5da

			uint8_t ir_led_duty = fsp_pkt->payload[35];
 8008d88:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d8c:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d96:	f887 35d9 	strb.w	r3, [r7, #1497]	@ 0x5d9

		    int16_t accel_x = (int16_t)((fsp_pkt->payload[36] << 8) | fsp_pkt->payload[37]);
 8008d9a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008d9e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8008da8:	021b      	lsls	r3, r3, #8
 8008daa:	b21a      	sxth	r2, r3
 8008dac:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008db0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8008dba:	b21b      	sxth	r3, r3
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	f8a7 35d6 	strh.w	r3, [r7, #1494]	@ 0x5d6
		    int16_t accel_y = (int16_t)((fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39]);
 8008dc2:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dc6:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	b21a      	sxth	r2, r3
 8008dd4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dd8:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008de2:	b21b      	sxth	r3, r3
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f8a7 35d4 	strh.w	r3, [r7, #1492]	@ 0x5d4
		    int16_t accel_z = (int16_t)((fsp_pkt->payload[40] << 8) | fsp_pkt->payload[41]);
 8008dea:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008dee:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	b21a      	sxth	r2, r3
 8008dfc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e00:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8008e0a:	b21b      	sxth	r3, r3
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	f8a7 35d2 	strh.w	r3, [r7, #1490]	@ 0x5d2

		    int16_t gyro_x = (int16_t)((fsp_pkt->payload[42] << 8) | fsp_pkt->payload[43]);
 8008e12:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e16:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008e20:	021b      	lsls	r3, r3, #8
 8008e22:	b21a      	sxth	r2, r3
 8008e24:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e28:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e32:	b21b      	sxth	r3, r3
 8008e34:	4313      	orrs	r3, r2
 8008e36:	f8a7 35d0 	strh.w	r3, [r7, #1488]	@ 0x5d0
		    int16_t gyro_y = (int16_t)((fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45]);
 8008e3a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e3e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008e48:	021b      	lsls	r3, r3, #8
 8008e4a:	b21a      	sxth	r2, r3
 8008e4c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e50:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008e5a:	b21b      	sxth	r3, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	f8a7 35ce 	strh.w	r3, [r7, #1486]	@ 0x5ce
		    int16_t gyro_z = (int16_t)((fsp_pkt->payload[46] << 8) | fsp_pkt->payload[47]);
 8008e62:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e66:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	b21a      	sxth	r2, r3
 8008e74:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e78:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008e82:	b21b      	sxth	r3, r3
 8008e84:	4313      	orrs	r3, r2
 8008e86:	f8a7 35cc 	strh.w	r3, [r7, #1484]	@ 0x5cc

		    int16_t press = (int16_t)((fsp_pkt->payload[48] << 8) | fsp_pkt->payload[49]);
 8008e8a:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008e8e:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	b21a      	sxth	r2, r3
 8008e9c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8008ea0:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008eaa:	b21b      	sxth	r3, r3
 8008eac:	4313      	orrs	r3, r2
 8008eae:	f8a7 35ca 	strh.w	r3, [r7, #1482]	@ 0x5ca


			char buffer_0x13[1200];
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008eb2:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da03      	bge.n	8008ec2 <frame_processing_rs422+0x108a>
 8008eba:	4bb5      	ldr	r3, [pc, #724]	@ (8009190 <frame_processing_rs422+0x1358>)
 8008ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ec0:	e002      	b.n	8008ec8 <frame_processing_rs422+0x1090>
 8008ec2:	4bb4      	ldr	r3, [pc, #720]	@ (8009194 <frame_processing_rs422+0x135c>)
 8008ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			                     "Neo LED: R=%u, G=%u, B=%u, W=%u\n"
			                     "IR LED Duty: %u%%\n"
					 	 	 	 "Accel: X=%d, Y=%d, Z=%d\n"
					             "Gyro: X=%d, Y=%d, Z=%d\n"
					             "Pressure: %d]\n",
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 8008ec8:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	bfb8      	it	lt
 8008ed0:	425b      	neglt	r3, r3
 8008ed2:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008ed4:	4ab0      	ldr	r2, [pc, #704]	@ (8009198 <frame_processing_rs422+0x1360>)
 8008ed6:	fb82 1203 	smull	r1, r2, r2, r3
 8008eda:	1092      	asrs	r2, r2, #2
 8008edc:	17db      	asrs	r3, r3, #31
 8008ede:	eba2 0e03 	sub.w	lr, r2, r3
			        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 8008ee2:	f9b7 35fa 	ldrsh.w	r3, [r7, #1530]	@ 0x5fa
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bfb8      	it	lt
 8008eea:	425b      	neglt	r3, r3
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008ef0:	4ba9      	ldr	r3, [pc, #676]	@ (8009198 <frame_processing_rs422+0x1360>)
 8008ef2:	fb83 1302 	smull	r1, r3, r3, r2
 8008ef6:	1099      	asrs	r1, r3, #2
 8008ef8:	17d3      	asrs	r3, r2, #31
 8008efa:	1acb      	subs	r3, r1, r3
 8008efc:	4619      	mov	r1, r3
 8008efe:	460b      	mov	r3, r1
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	440b      	add	r3, r1
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f0c:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da03      	bge.n	8008f1c <frame_processing_rs422+0x10e4>
 8008f14:	4b9e      	ldr	r3, [pc, #632]	@ (8009190 <frame_processing_rs422+0x1358>)
 8008f16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f1a:	e002      	b.n	8008f22 <frame_processing_rs422+0x10ea>
 8008f1c:	4b9d      	ldr	r3, [pc, #628]	@ (8009194 <frame_processing_rs422+0x135c>)
 8008f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 8008f22:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bfb8      	it	lt
 8008f2a:	425b      	neglt	r3, r3
 8008f2c:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008f2e:	4a9a      	ldr	r2, [pc, #616]	@ (8009198 <frame_processing_rs422+0x1360>)
 8008f30:	fb82 1203 	smull	r1, r2, r2, r3
 8008f34:	1092      	asrs	r2, r2, #2
 8008f36:	17db      	asrs	r3, r3, #31
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 8008f3e:	f9b7 35f8 	ldrsh.w	r3, [r7, #1528]	@ 0x5f8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	bfb8      	it	lt
 8008f46:	425b      	neglt	r3, r3
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008f4c:	4b92      	ldr	r3, [pc, #584]	@ (8009198 <frame_processing_rs422+0x1360>)
 8008f4e:	fb83 1302 	smull	r1, r3, r3, r2
 8008f52:	1099      	asrs	r1, r3, #2
 8008f54:	17d3      	asrs	r3, r2, #31
 8008f56:	1acb      	subs	r3, r1, r3
 8008f58:	4619      	mov	r1, r3
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	440b      	add	r3, r1
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f66:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	da03      	bge.n	8008f76 <frame_processing_rs422+0x113e>
 8008f6e:	4b88      	ldr	r3, [pc, #544]	@ (8009190 <frame_processing_rs422+0x1358>)
 8008f70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008f74:	e002      	b.n	8008f7c <frame_processing_rs422+0x1144>
 8008f76:	4b87      	ldr	r3, [pc, #540]	@ (8009194 <frame_processing_rs422+0x135c>)
 8008f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 8008f7c:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	bfb8      	it	lt
 8008f84:	425b      	neglt	r3, r3
 8008f86:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008f88:	4a83      	ldr	r2, [pc, #524]	@ (8009198 <frame_processing_rs422+0x1360>)
 8008f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8008f8e:	1092      	asrs	r2, r2, #2
 8008f90:	17db      	asrs	r3, r3, #31
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	67bb      	str	r3, [r7, #120]	@ 0x78
			        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 8008f96:	f9b7 35f6 	ldrsh.w	r3, [r7, #1526]	@ 0x5f6
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	bfb8      	it	lt
 8008f9e:	425b      	neglt	r3, r3
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	461a      	mov	r2, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008fa4:	4b7c      	ldr	r3, [pc, #496]	@ (8009198 <frame_processing_rs422+0x1360>)
 8008fa6:	fb83 1302 	smull	r1, r3, r3, r2
 8008faa:	1099      	asrs	r1, r3, #2
 8008fac:	17d3      	asrs	r3, r2, #31
 8008fae:	1acb      	subs	r3, r1, r3
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	440b      	add	r3, r1
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	677b      	str	r3, [r7, #116]	@ 0x74
 8008fbe:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	da03      	bge.n	8008fce <frame_processing_rs422+0x1196>
 8008fc6:	4b72      	ldr	r3, [pc, #456]	@ (8009190 <frame_processing_rs422+0x1358>)
 8008fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fcc:	e002      	b.n	8008fd4 <frame_processing_rs422+0x119c>
 8008fce:	4b71      	ldr	r3, [pc, #452]	@ (8009194 <frame_processing_rs422+0x135c>)
 8008fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 8008fd4:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfb8      	it	lt
 8008fdc:	425b      	neglt	r3, r3
 8008fde:	b29b      	uxth	r3, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008fe0:	4a6d      	ldr	r2, [pc, #436]	@ (8009198 <frame_processing_rs422+0x1360>)
 8008fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8008fe6:	1092      	asrs	r2, r2, #2
 8008fe8:	17db      	asrs	r3, r3, #31
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	673b      	str	r3, [r7, #112]	@ 0x70
			        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 8008fee:	f9b7 35f4 	ldrsh.w	r3, [r7, #1524]	@ 0x5f4
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	bfb8      	it	lt
 8008ff6:	425b      	neglt	r3, r3
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8008ffc:	4b66      	ldr	r3, [pc, #408]	@ (8009198 <frame_processing_rs422+0x1360>)
 8008ffe:	fb83 2301 	smull	r2, r3, r3, r1
 8009002:	109a      	asrs	r2, r3, #2
 8009004:	17cb      	asrs	r3, r1, #31
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	461a      	mov	r2, r3
 800900a:	4613      	mov	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	1acb      	subs	r3, r1, r3
 8009014:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009016:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 800901a:	2b00      	cmp	r3, #0
 800901c:	da03      	bge.n	8009026 <frame_processing_rs422+0x11ee>
 800901e:	4b5c      	ldr	r3, [pc, #368]	@ (8009190 <frame_processing_rs422+0x1358>)
 8009020:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009024:	e002      	b.n	800902c <frame_processing_rs422+0x11f4>
 8009026:	4b5b      	ldr	r3, [pc, #364]	@ (8009194 <frame_processing_rs422+0x135c>)
 8009028:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800902c:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 8009030:	2b00      	cmp	r3, #0
 8009032:	bfb8      	it	lt
 8009034:	425b      	neglt	r3, r3
 8009036:	b29b      	uxth	r3, r3
 8009038:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800903a:	4b57      	ldr	r3, [pc, #348]	@ (8009198 <frame_processing_rs422+0x1360>)
 800903c:	fb83 2301 	smull	r2, r3, r3, r1
 8009040:	109a      	asrs	r2, r3, #2
 8009042:	17cb      	asrs	r3, r1, #31
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	66bb      	str	r3, [r7, #104]	@ 0x68
			        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 8009048:	f9b7 35f2 	ldrsh.w	r3, [r7, #1522]	@ 0x5f2
 800904c:	2b00      	cmp	r3, #0
 800904e:	bfb8      	it	lt
 8009050:	425b      	neglt	r3, r3
 8009052:	b29b      	uxth	r3, r3
 8009054:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009056:	4b50      	ldr	r3, [pc, #320]	@ (8009198 <frame_processing_rs422+0x1360>)
 8009058:	fb83 2301 	smull	r2, r3, r3, r1
 800905c:	109a      	asrs	r2, r3, #2
 800905e:	17cb      	asrs	r3, r1, #31
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	461a      	mov	r2, r3
 8009064:	4613      	mov	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	1acb      	subs	r3, r1, r3
 800906e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009070:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 8009074:	2b00      	cmp	r3, #0
 8009076:	da03      	bge.n	8009080 <frame_processing_rs422+0x1248>
 8009078:	4b45      	ldr	r3, [pc, #276]	@ (8009190 <frame_processing_rs422+0x1358>)
 800907a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800907e:	e002      	b.n	8009086 <frame_processing_rs422+0x124e>
 8009080:	4b44      	ldr	r3, [pc, #272]	@ (8009194 <frame_processing_rs422+0x135c>)
 8009082:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 8009086:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 800908a:	2b00      	cmp	r3, #0
 800908c:	bfb8      	it	lt
 800908e:	425b      	neglt	r3, r3
 8009090:	b29b      	uxth	r3, r3
 8009092:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009094:	4b40      	ldr	r3, [pc, #256]	@ (8009198 <frame_processing_rs422+0x1360>)
 8009096:	fb83 2301 	smull	r2, r3, r3, r1
 800909a:	109a      	asrs	r2, r3, #2
 800909c:	17cb      	asrs	r3, r1, #31
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	663b      	str	r3, [r7, #96]	@ 0x60
			        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 80090a2:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	bfb8      	it	lt
 80090aa:	425b      	neglt	r3, r3
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80090b0:	4b39      	ldr	r3, [pc, #228]	@ (8009198 <frame_processing_rs422+0x1360>)
 80090b2:	fb83 2301 	smull	r2, r3, r3, r1
 80090b6:	109a      	asrs	r2, r3, #2
 80090b8:	17cb      	asrs	r3, r1, #31
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	1acb      	subs	r3, r1, r3
 80090c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090ca:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	da03      	bge.n	80090da <frame_processing_rs422+0x12a2>
 80090d2:	4b2f      	ldr	r3, [pc, #188]	@ (8009190 <frame_processing_rs422+0x1358>)
 80090d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090d8:	e002      	b.n	80090e0 <frame_processing_rs422+0x12a8>
 80090da:	4b2e      	ldr	r3, [pc, #184]	@ (8009194 <frame_processing_rs422+0x135c>)
 80090dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 80090e0:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfb8      	it	lt
 80090e8:	425b      	neglt	r3, r3
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80090ee:	4b2a      	ldr	r3, [pc, #168]	@ (8009198 <frame_processing_rs422+0x1360>)
 80090f0:	fb83 2301 	smull	r2, r3, r3, r1
 80090f4:	109a      	asrs	r2, r3, #2
 80090f6:	17cb      	asrs	r3, r1, #31
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	65bb      	str	r3, [r7, #88]	@ 0x58
			        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 80090fc:	f9b7 35ee 	ldrsh.w	r3, [r7, #1518]	@ 0x5ee
 8009100:	2b00      	cmp	r3, #0
 8009102:	bfb8      	it	lt
 8009104:	425b      	neglt	r3, r3
 8009106:	b29b      	uxth	r3, r3
 8009108:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800910a:	4b23      	ldr	r3, [pc, #140]	@ (8009198 <frame_processing_rs422+0x1360>)
 800910c:	fb83 2301 	smull	r2, r3, r3, r1
 8009110:	109a      	asrs	r2, r3, #2
 8009112:	17cb      	asrs	r3, r1, #31
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	461a      	mov	r2, r3
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	1acb      	subs	r3, r1, r3
 8009122:	657b      	str	r3, [r7, #84]	@ 0x54
 8009124:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 8009128:	2b00      	cmp	r3, #0
 800912a:	da03      	bge.n	8009134 <frame_processing_rs422+0x12fc>
 800912c:	4b18      	ldr	r3, [pc, #96]	@ (8009190 <frame_processing_rs422+0x1358>)
 800912e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009132:	e002      	b.n	800913a <frame_processing_rs422+0x1302>
 8009134:	4b17      	ldr	r3, [pc, #92]	@ (8009194 <frame_processing_rs422+0x135c>)
 8009136:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800913a:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfb8      	it	lt
 8009142:	425b      	neglt	r3, r3
 8009144:	b29b      	uxth	r3, r3
 8009146:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009148:	4b13      	ldr	r3, [pc, #76]	@ (8009198 <frame_processing_rs422+0x1360>)
 800914a:	fb83 2301 	smull	r2, r3, r3, r1
 800914e:	109a      	asrs	r2, r3, #2
 8009150:	17cb      	asrs	r3, r1, #31
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	653b      	str	r3, [r7, #80]	@ 0x50
			        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 8009156:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 800915a:	2b00      	cmp	r3, #0
 800915c:	bfb8      	it	lt
 800915e:	425b      	neglt	r3, r3
 8009160:	b29b      	uxth	r3, r3
 8009162:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009164:	4b0c      	ldr	r3, [pc, #48]	@ (8009198 <frame_processing_rs422+0x1360>)
 8009166:	fb83 2301 	smull	r2, r3, r3, r1
 800916a:	109a      	asrs	r2, r3, #2
 800916c:	17cb      	asrs	r3, r1, #31
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	461a      	mov	r2, r3
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	1acb      	subs	r3, r1, r3
 800917c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800917e:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 8009182:	2b00      	cmp	r3, #0
 8009184:	da0a      	bge.n	800919c <frame_processing_rs422+0x1364>
 8009186:	4b02      	ldr	r3, [pc, #8]	@ (8009190 <frame_processing_rs422+0x1358>)
 8009188:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800918c:	e009      	b.n	80091a2 <frame_processing_rs422+0x136a>
 800918e:	bf00      	nop
 8009190:	080152ac 	.word	0x080152ac
 8009194:	080152b0 	.word	0x080152b0
 8009198:	66666667 	.word	0x66666667
 800919c:	4b2c      	ldr	r3, [pc, #176]	@ (8009250 <frame_processing_rs422+0x1418>)
 800919e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 80091a2:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bfb8      	it	lt
 80091aa:	425b      	neglt	r3, r3
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80091b0:	4b28      	ldr	r3, [pc, #160]	@ (8009254 <frame_processing_rs422+0x141c>)
 80091b2:	fb83 2301 	smull	r2, r3, r3, r1
 80091b6:	109a      	asrs	r2, r3, #2
 80091b8:	17cb      	asrs	r3, r1, #31
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	64bb      	str	r3, [r7, #72]	@ 0x48
			        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 80091be:	f9b7 35ea 	ldrsh.w	r3, [r7, #1514]	@ 0x5ea
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfb8      	it	lt
 80091c6:	425b      	neglt	r3, r3
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 80091cc:	4b21      	ldr	r3, [pc, #132]	@ (8009254 <frame_processing_rs422+0x141c>)
 80091ce:	fb83 2301 	smull	r2, r3, r3, r1
 80091d2:	109a      	asrs	r2, r3, #2
 80091d4:	17cb      	asrs	r3, r1, #31
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	461a      	mov	r2, r3
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	1acb      	subs	r3, r1, r3
 80091e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80091e6:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	da03      	bge.n	80091f6 <frame_processing_rs422+0x13be>
 80091ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009258 <frame_processing_rs422+0x1420>)
 80091f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091f4:	e002      	b.n	80091fc <frame_processing_rs422+0x13c4>
 80091f6:	4b16      	ldr	r3, [pc, #88]	@ (8009250 <frame_processing_rs422+0x1418>)
 80091f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 80091fc:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 8009200:	2b00      	cmp	r3, #0
 8009202:	bfb8      	it	lt
 8009204:	425b      	neglt	r3, r3
 8009206:	b29b      	uxth	r3, r3
 8009208:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800920a:	4b12      	ldr	r3, [pc, #72]	@ (8009254 <frame_processing_rs422+0x141c>)
 800920c:	fb83 2301 	smull	r2, r3, r3, r1
 8009210:	109a      	asrs	r2, r3, #2
 8009212:	17cb      	asrs	r3, r1, #31
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	643b      	str	r3, [r7, #64]	@ 0x40
			        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 8009218:	f9b7 35e8 	ldrsh.w	r3, [r7, #1512]	@ 0x5e8
 800921c:	2b00      	cmp	r3, #0
 800921e:	bfb8      	it	lt
 8009220:	425b      	neglt	r3, r3
 8009222:	b29b      	uxth	r3, r3
 8009224:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009226:	4b0b      	ldr	r3, [pc, #44]	@ (8009254 <frame_processing_rs422+0x141c>)
 8009228:	fb83 2301 	smull	r2, r3, r3, r1
 800922c:	109a      	asrs	r2, r3, #2
 800922e:	17cb      	asrs	r3, r1, #31
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	461a      	mov	r2, r3
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	1acb      	subs	r3, r1, r3
 800923e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009240:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 8009244:	2b00      	cmp	r3, #0
 8009246:	da09      	bge.n	800925c <frame_processing_rs422+0x1424>
 8009248:	4b03      	ldr	r3, [pc, #12]	@ (8009258 <frame_processing_rs422+0x1420>)
 800924a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800924e:	e008      	b.n	8009262 <frame_processing_rs422+0x142a>
 8009250:	080152b0 	.word	0x080152b0
 8009254:	66666667 	.word	0x66666667
 8009258:	080152ac 	.word	0x080152ac
 800925c:	4ba6      	ldr	r3, [pc, #664]	@ (80094f8 <frame_processing_rs422+0x16c0>)
 800925e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 8009262:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfb8      	it	lt
 800926a:	425b      	neglt	r3, r3
 800926c:	b29b      	uxth	r3, r3
 800926e:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 8009270:	4ba2      	ldr	r3, [pc, #648]	@ (80094fc <frame_processing_rs422+0x16c4>)
 8009272:	fb83 2301 	smull	r2, r3, r3, r1
 8009276:	109a      	asrs	r2, r3, #2
 8009278:	17cb      	asrs	r3, r1, #31
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	63bb      	str	r3, [r7, #56]	@ 0x38
			        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800927e:	f9b7 35e6 	ldrsh.w	r3, [r7, #1510]	@ 0x5e6
 8009282:	2b00      	cmp	r3, #0
 8009284:	bfb8      	it	lt
 8009286:	425b      	neglt	r3, r3
 8009288:	b29b      	uxth	r3, r3
 800928a:	4619      	mov	r1, r3
			sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800928c:	4b9b      	ldr	r3, [pc, #620]	@ (80094fc <frame_processing_rs422+0x16c4>)
 800928e:	fb83 2301 	smull	r2, r3, r3, r1
 8009292:	109a      	asrs	r2, r3, #2
 8009294:	17cb      	asrs	r3, r1, #31
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	461a      	mov	r2, r3
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	1aca      	subs	r2, r1, r3
 80092a4:	637a      	str	r2, [r7, #52]	@ 0x34
 80092a6:	f8b7 25e4 	ldrh.w	r2, [r7, #1508]	@ 0x5e4
 80092aa:	4b95      	ldr	r3, [pc, #596]	@ (8009500 <frame_processing_rs422+0x16c8>)
 80092ac:	fba3 2302 	umull	r2, r3, r3, r2
 80092b0:	095b      	lsrs	r3, r3, #5
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80092b6:	f8b7 15e4 	ldrh.w	r1, [r7, #1508]	@ 0x5e4
 80092ba:	4b91      	ldr	r3, [pc, #580]	@ (8009500 <frame_processing_rs422+0x16c8>)
 80092bc:	fba3 2301 	umull	r2, r3, r3, r1
 80092c0:	095a      	lsrs	r2, r3, #5
 80092c2:	2364      	movs	r3, #100	@ 0x64
 80092c4:	fb02 f303 	mul.w	r3, r2, r3
 80092c8:	1acb      	subs	r3, r1, r3
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092ce:	f8b7 25e2 	ldrh.w	r2, [r7, #1506]	@ 0x5e2
 80092d2:	4b8b      	ldr	r3, [pc, #556]	@ (8009500 <frame_processing_rs422+0x16c8>)
 80092d4:	fba3 2302 	umull	r2, r3, r3, r2
 80092d8:	095b      	lsrs	r3, r3, #5
 80092da:	b29b      	uxth	r3, r3
 80092dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092de:	f8b7 15e2 	ldrh.w	r1, [r7, #1506]	@ 0x5e2
 80092e2:	4b87      	ldr	r3, [pc, #540]	@ (8009500 <frame_processing_rs422+0x16c8>)
 80092e4:	fba3 2301 	umull	r2, r3, r3, r1
 80092e8:	095a      	lsrs	r2, r3, #5
 80092ea:	2364      	movs	r3, #100	@ 0x64
 80092ec:	fb02 f303 	mul.w	r3, r2, r3
 80092f0:	1acb      	subs	r3, r1, r3
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80092f6:	f8b7 25e0 	ldrh.w	r2, [r7, #1504]	@ 0x5e0
 80092fa:	4b81      	ldr	r3, [pc, #516]	@ (8009500 <frame_processing_rs422+0x16c8>)
 80092fc:	fba3 2302 	umull	r2, r3, r3, r2
 8009300:	095b      	lsrs	r3, r3, #5
 8009302:	b29b      	uxth	r3, r3
 8009304:	623b      	str	r3, [r7, #32]
 8009306:	f8b7 15e0 	ldrh.w	r1, [r7, #1504]	@ 0x5e0
 800930a:	4b7d      	ldr	r3, [pc, #500]	@ (8009500 <frame_processing_rs422+0x16c8>)
 800930c:	fba3 2301 	umull	r2, r3, r3, r1
 8009310:	095a      	lsrs	r2, r3, #5
 8009312:	2364      	movs	r3, #100	@ 0x64
 8009314:	fb02 f303 	mul.w	r3, r2, r3
 8009318:	1acb      	subs	r3, r1, r3
 800931a:	b29b      	uxth	r3, r3
 800931c:	61fb      	str	r3, [r7, #28]
 800931e:	f8b7 25de 	ldrh.w	r2, [r7, #1502]	@ 0x5de
 8009322:	4b77      	ldr	r3, [pc, #476]	@ (8009500 <frame_processing_rs422+0x16c8>)
 8009324:	fba3 2302 	umull	r2, r3, r3, r2
 8009328:	095b      	lsrs	r3, r3, #5
 800932a:	b29b      	uxth	r3, r3
 800932c:	61bb      	str	r3, [r7, #24]
 800932e:	f8b7 15de 	ldrh.w	r1, [r7, #1502]	@ 0x5de
 8009332:	4b73      	ldr	r3, [pc, #460]	@ (8009500 <frame_processing_rs422+0x16c8>)
 8009334:	fba3 2301 	umull	r2, r3, r3, r1
 8009338:	095a      	lsrs	r2, r3, #5
 800933a:	2364      	movs	r3, #100	@ 0x64
 800933c:	fb02 f303 	mul.w	r3, r2, r3
 8009340:	1acb      	subs	r3, r1, r3
 8009342:	b29b      	uxth	r3, r3
 8009344:	617b      	str	r3, [r7, #20]
 8009346:	f897 05dd 	ldrb.w	r0, [r7, #1501]	@ 0x5dd
 800934a:	4601      	mov	r1, r0
 800934c:	6139      	str	r1, [r7, #16]
 800934e:	f897 05dc 	ldrb.w	r0, [r7, #1500]	@ 0x5dc
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	f897 45db 	ldrb.w	r4, [r7, #1499]	@ 0x5db
 8009358:	60bc      	str	r4, [r7, #8]
 800935a:	f897 55da 	ldrb.w	r5, [r7, #1498]	@ 0x5da
 800935e:	607d      	str	r5, [r7, #4]
 8009360:	f897 65d9 	ldrb.w	r6, [r7, #1497]	@ 0x5d9
 8009364:	603e      	str	r6, [r7, #0]
 8009366:	f9b7 65d6 	ldrsh.w	r6, [r7, #1494]	@ 0x5d6
 800936a:	f9b7 55d4 	ldrsh.w	r5, [r7, #1492]	@ 0x5d4
 800936e:	f9b7 45d2 	ldrsh.w	r4, [r7, #1490]	@ 0x5d2
 8009372:	f9b7 05d0 	ldrsh.w	r0, [r7, #1488]	@ 0x5d0
 8009376:	f9b7 15ce 	ldrsh.w	r1, [r7, #1486]	@ 0x5ce
 800937a:	f9b7 25cc 	ldrsh.w	r2, [r7, #1484]	@ 0x5cc
 800937e:	f9b7 35ca 	ldrsh.w	r3, [r7, #1482]	@ 0x5ca
 8009382:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 8009386:	9332      	str	r3, [sp, #200]	@ 0xc8
 8009388:	9231      	str	r2, [sp, #196]	@ 0xc4
 800938a:	9130      	str	r1, [sp, #192]	@ 0xc0
 800938c:	902f      	str	r0, [sp, #188]	@ 0xbc
 800938e:	942e      	str	r4, [sp, #184]	@ 0xb8
 8009390:	952d      	str	r5, [sp, #180]	@ 0xb4
 8009392:	962c      	str	r6, [sp, #176]	@ 0xb0
 8009394:	683e      	ldr	r6, [r7, #0]
 8009396:	962b      	str	r6, [sp, #172]	@ 0xac
 8009398:	687d      	ldr	r5, [r7, #4]
 800939a:	952a      	str	r5, [sp, #168]	@ 0xa8
 800939c:	68bc      	ldr	r4, [r7, #8]
 800939e:	9429      	str	r4, [sp, #164]	@ 0xa4
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	9028      	str	r0, [sp, #160]	@ 0xa0
 80093a4:	6939      	ldr	r1, [r7, #16]
 80093a6:	9127      	str	r1, [sp, #156]	@ 0x9c
 80093a8:	6979      	ldr	r1, [r7, #20]
 80093aa:	9126      	str	r1, [sp, #152]	@ 0x98
 80093ac:	69b9      	ldr	r1, [r7, #24]
 80093ae:	9125      	str	r1, [sp, #148]	@ 0x94
 80093b0:	69f9      	ldr	r1, [r7, #28]
 80093b2:	9124      	str	r1, [sp, #144]	@ 0x90
 80093b4:	6a39      	ldr	r1, [r7, #32]
 80093b6:	9123      	str	r1, [sp, #140]	@ 0x8c
 80093b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093ba:	9122      	str	r1, [sp, #136]	@ 0x88
 80093bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093be:	9121      	str	r1, [sp, #132]	@ 0x84
 80093c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093c2:	9120      	str	r1, [sp, #128]	@ 0x80
 80093c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80093c6:	911f      	str	r1, [sp, #124]	@ 0x7c
 80093c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093ca:	921e      	str	r2, [sp, #120]	@ 0x78
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	931d      	str	r3, [sp, #116]	@ 0x74
 80093d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093d4:	931c      	str	r3, [sp, #112]	@ 0x70
 80093d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80093da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80093de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093e2:	9319      	str	r3, [sp, #100]	@ 0x64
 80093e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093e6:	9318      	str	r3, [sp, #96]	@ 0x60
 80093e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093ea:	9317      	str	r3, [sp, #92]	@ 0x5c
 80093ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80093f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80093f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093f8:	9314      	str	r3, [sp, #80]	@ 0x50
 80093fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80093fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009402:	9312      	str	r3, [sp, #72]	@ 0x48
 8009404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009406:	9311      	str	r3, [sp, #68]	@ 0x44
 8009408:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800940c:	9310      	str	r3, [sp, #64]	@ 0x40
 800940e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009410:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009414:	930e      	str	r3, [sp, #56]	@ 0x38
 8009416:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800941a:	930d      	str	r3, [sp, #52]	@ 0x34
 800941c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800941e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009422:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009424:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009428:	930a      	str	r3, [sp, #40]	@ 0x28
 800942a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800942c:	9309      	str	r3, [sp, #36]	@ 0x24
 800942e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009430:	9308      	str	r3, [sp, #32]
 8009432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009436:	9307      	str	r3, [sp, #28]
 8009438:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800943a:	9306      	str	r3, [sp, #24]
 800943c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800943e:	9305      	str	r3, [sp, #20]
 8009440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009444:	9304      	str	r3, [sp, #16]
 8009446:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009448:	9303      	str	r3, [sp, #12]
 800944a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800944e:	9302      	str	r3, [sp, #8]
 8009450:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009454:	9301      	str	r3, [sp, #4]
 8009456:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	4673      	mov	r3, lr
 800945e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009462:	4928      	ldr	r1, [pc, #160]	@ (8009504 <frame_processing_rs422+0x16cc>)
 8009464:	4660      	mov	r0, ip
 8009466:	f006 fba5 	bl	800fbb4 <siprintf>
			        neo_led_r, neo_led_g, neo_led_b, neo_led_w,
			        ir_led_duty, accel_x, accel_y, accel_z,
		            gyro_x, gyro_y, gyro_z,
		            press);

			if(auto_report_enabled){
 800946a:	4b27      	ldr	r3, [pc, #156]	@ (8009508 <frame_processing_rs422+0x16d0>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	d006      	beq.n	8009482 <frame_processing_rs422+0x164a>
				Uart_sendstring(USART6, buffer_0x13);
 8009474:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8009478:	4619      	mov	r1, r3
 800947a:	4824      	ldr	r0, [pc, #144]	@ (800950c <frame_processing_rs422+0x16d4>)
 800947c:	f7f8 fdae 	bl	8001fdc <Uart_sendstring>
 8009480:	e005      	b.n	800948e <frame_processing_rs422+0x1656>
			}else{
				Uart_sendstring(USART2, buffer_0x13);
 8009482:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8009486:	4619      	mov	r1, r3
 8009488:	4821      	ldr	r0, [pc, #132]	@ (8009510 <frame_processing_rs422+0x16d8>)
 800948a:	f7f8 fda7 	bl	8001fdc <Uart_sendstring>
			}



			}
			receive_iouFlag = 1;
 800948e:	4b21      	ldr	r3, [pc, #132]	@ (8009514 <frame_processing_rs422+0x16dc>)
 8009490:	2201      	movs	r2, #1
 8009492:	701a      	strb	r2, [r3, #0]

			for (int i = 1; i <= 49; i++) {
 8009494:	2301      	movs	r3, #1
 8009496:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 800949a:	e015      	b.n	80094c8 <frame_processing_rs422+0x1690>
					    nextBuffer[i + 7] = fsp_pkt->payload[i]; //42   =  35  + 7      8 -> pay 1   9 -> pay2    43 -< pay35
 800949c:	4b1e      	ldr	r3, [pc, #120]	@ (8009518 <frame_processing_rs422+0x16e0>)
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 80094a4:	3307      	adds	r3, #7
 80094a6:	4413      	add	r3, r2
 80094a8:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 80094ac:	f2a2 5254 	subw	r2, r2, #1364	@ 0x554
 80094b0:	6811      	ldr	r1, [r2, #0]
 80094b2:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 80094b6:	440a      	add	r2, r1
 80094b8:	3205      	adds	r2, #5
 80094ba:	7812      	ldrb	r2, [r2, #0]
 80094bc:	701a      	strb	r2, [r3, #0]
			for (int i = 1; i <= 49; i++) {
 80094be:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 80094c2:	3301      	adds	r3, #1
 80094c4:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 80094c8:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 80094cc:	2b31      	cmp	r3, #49	@ 0x31
 80094ce:	dde5      	ble.n	800949c <frame_processing_rs422+0x1664>
			}
//			Uart_sendstring(USART6, "\nIOU_Collected\r\n");

			disconnect_counter_iou = 0;
 80094d0:	4b12      	ldr	r3, [pc, #72]	@ (800951c <frame_processing_rs422+0x16e4>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	701a      	strb	r2, [r3, #0]

		}
		break;
 80094d6:	e008      	b.n	80094ea <frame_processing_rs422+0x16b2>


		default:
			Uart_sendstring(USART6, "Failed to get all");
 80094d8:	4911      	ldr	r1, [pc, #68]	@ (8009520 <frame_processing_rs422+0x16e8>)
 80094da:	480c      	ldr	r0, [pc, #48]	@ (800950c <frame_processing_rs422+0x16d4>)
 80094dc:	f7f8 fd7e 	bl	8001fdc <Uart_sendstring>
			Uart_sendstring(USART2, "Failed to get all");
 80094e0:	490f      	ldr	r1, [pc, #60]	@ (8009520 <frame_processing_rs422+0x16e8>)
 80094e2:	480b      	ldr	r0, [pc, #44]	@ (8009510 <frame_processing_rs422+0x16d8>)
 80094e4:	f7f8 fd7a 	bl	8001fdc <Uart_sendstring>
			break;
 80094e8:	bf00      	nop
	}

}
 80094ea:	bf00      	nop
 80094ec:	f507 67c1 	add.w	r7, r7, #1544	@ 0x608
 80094f0:	46bd      	mov	sp, r7
 80094f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f6:	bf00      	nop
 80094f8:	080152b0 	.word	0x080152b0
 80094fc:	66666667 	.word	0x66666667
 8009500:	51eb851f 	.word	0x51eb851f
 8009504:	080155fc 	.word	0x080155fc
 8009508:	200059e0 	.word	0x200059e0
 800950c:	40011400 	.word	0x40011400
 8009510:	40004400 	.word	0x40004400
 8009514:	20000042 	.word	0x20000042
 8009518:	200003ec 	.word	0x200003ec
 800951c:	200058b3 	.word	0x200058b3
 8009520:	08015780 	.word	0x08015780

08009524 <rs422_create_task>:

void	rs422_create_task(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&RS422_task_context.taskHandle, &RS422_task_context.taskProperty);
 8009528:	4903      	ldr	r1, [pc, #12]	@ (8009538 <rs422_create_task+0x14>)
 800952a:	4804      	ldr	r0, [pc, #16]	@ (800953c <rs422_create_task+0x18>)
 800952c:	f002 f9f2 	bl	800b914 <SCH_TASK_CreateTask>
	Ringbuf_init();
 8009530:	f7f8 fa64 	bl	80019fc <Ringbuf_init>

}
 8009534:	bf00      	nop
 8009536:	bd80      	pop	{r7, pc}
 8009538:	200003dc 	.word	0x200003dc
 800953c:	200003d8 	.word	0x200003d8

08009540 <COPC_init>:
		COPC_task_update                // taskFunction;
	}
};

void	COPC_init(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
	Ringbuf_init();
 8009544:	f7f8 fa5a 	bl	80019fc <Ringbuf_init>
	fsp_init(FSP_ADR_CPOC);
 8009548:	2001      	movs	r0, #1
 800954a:	f002 fb51 	bl	800bbf0 <fsp_init>
	s_pCOPC_Sfp_Payload = (COPC_Sfp_Payload_t *)(&s_COPC_FspPacket.payload);
 800954e:	4b02      	ldr	r3, [pc, #8]	@ (8009558 <COPC_init+0x18>)
 8009550:	4a02      	ldr	r2, [pc, #8]	@ (800955c <COPC_init+0x1c>)
 8009552:	601a      	str	r2, [r3, #0]
}
 8009554:	bf00      	nop
 8009556:	bd80      	pop	{r7, pc}
 8009558:	200062bc 	.word	0x200062bc
 800955c:	200061c1 	.word	0x200061c1

08009560 <COPC_task_update>:
volatile uint8_t receiving = 0;
volatile uint8_t receive_buffer[FSP_PKT_MAX_LENGTH];
volatile uint8_t receive_index = 0;

static void COPC_task_update(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b0d0      	sub	sp, #320	@ 0x140
 8009564:	af00      	add	r7, sp, #0
	uint8_t rxData;


    while (IsDataAvailable(USART1))
 8009566:	e079      	b.n	800965c <COPC_task_update+0xfc>
    {
        rxData = Uart_read(USART1);
 8009568:	4843      	ldr	r0, [pc, #268]	@ (8009678 <COPC_task_update+0x118>)
 800956a:	f7f8 fb2b 	bl	8001bc4 <Uart_read>
 800956e:	4603      	mov	r3, r0
 8009570:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

//		char pos_str2[10];
//		sprintf(pos_str2, "%d", rxData);
//		Uart_sendstring(UART5, pos_str2);

        if (!receiving) {
 8009574:	4b41      	ldr	r3, [pc, #260]	@ (800967c <COPC_task_update+0x11c>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10a      	bne.n	8009594 <COPC_task_update+0x34>
            if (rxData == FSP_PKT_SOD) {
 800957e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009582:	2bca      	cmp	r3, #202	@ 0xca
 8009584:	d16a      	bne.n	800965c <COPC_task_update+0xfc>
                receiving = 1;
 8009586:	4b3d      	ldr	r3, [pc, #244]	@ (800967c <COPC_task_update+0x11c>)
 8009588:	2201      	movs	r2, #1
 800958a:	701a      	strb	r2, [r3, #0]
                receive_index = 0;
 800958c:	4b3c      	ldr	r3, [pc, #240]	@ (8009680 <COPC_task_update+0x120>)
 800958e:	2200      	movs	r2, #0
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	e063      	b.n	800965c <COPC_task_update+0xfc>
            }
        } else {

            if (rxData == FSP_PKT_EOF) {
 8009594:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8009598:	2bef      	cmp	r3, #239	@ 0xef
 800959a:	d14b      	bne.n	8009634 <COPC_task_update+0xd4>
                receiving = 0;
 800959c:	4b37      	ldr	r3, [pc, #220]	@ (800967c <COPC_task_update+0x11c>)
 800959e:	2200      	movs	r2, #0
 80095a0:	701a      	strb	r2, [r3, #0]
                fsp_packet_t fsp_pkt;
                if(send_rs422){
 80095a2:	4b38      	ldr	r3, [pc, #224]	@ (8009684 <COPC_task_update+0x124>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d01a      	beq.n	80095e2 <COPC_task_update+0x82>
					frame_decode_rs422((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 80095ac:	4b34      	ldr	r3, [pc, #208]	@ (8009680 <COPC_task_update+0x120>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80095b6:	4619      	mov	r1, r3
 80095b8:	4833      	ldr	r0, [pc, #204]	@ (8009688 <COPC_task_update+0x128>)
 80095ba:	f002 ff43 	bl	800c444 <frame_decode_rs422>
					frame_processing_rs422(&fsp_pkt);
 80095be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fc38 	bl	8007e38 <frame_processing_rs422>
					receive_pduFlag = 1;
 80095c8:	4b30      	ldr	r3, [pc, #192]	@ (800968c <COPC_task_update+0x12c>)
 80095ca:	2201      	movs	r2, #1
 80095cc:	701a      	strb	r2, [r3, #0]
					receive_pmuFlag = 1;
 80095ce:	4b30      	ldr	r3, [pc, #192]	@ (8009690 <COPC_task_update+0x130>)
 80095d0:	2201      	movs	r2, #1
 80095d2:	701a      	strb	r2, [r3, #0]
					receive_iouFlag = 1;
 80095d4:	4b2f      	ldr	r3, [pc, #188]	@ (8009694 <COPC_task_update+0x134>)
 80095d6:	2201      	movs	r2, #1
 80095d8:	701a      	strb	r2, [r3, #0]
					send_rs422 = 0;
 80095da:	4b2a      	ldr	r3, [pc, #168]	@ (8009684 <COPC_task_update+0x124>)
 80095dc:	2200      	movs	r2, #0
 80095de:	701a      	strb	r2, [r3, #0]
 80095e0:	e034      	b.n	800964c <COPC_task_update+0xec>
                }else{
                    int ret = frame_decode((uint8_t *)receive_buffer, receive_index, &fsp_pkt);
 80095e2:	4b27      	ldr	r3, [pc, #156]	@ (8009680 <COPC_task_update+0x120>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80095ec:	4619      	mov	r1, r3
 80095ee:	4826      	ldr	r0, [pc, #152]	@ (8009688 <COPC_task_update+0x128>)
 80095f0:	f002 fdc6 	bl	800c180 <frame_decode>
 80095f4:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138

                    if (ret > 0) {
 80095f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dd25      	ble.n	800964c <COPC_task_update+0xec>
                        char error_msg[50];
                        sprintf(error_msg, "Error: %s\r\n", decode_error_msgs[ret]);
 8009600:	4a25      	ldr	r2, [pc, #148]	@ (8009698 <COPC_task_update+0x138>)
 8009602:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009606:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800960a:	1d3b      	adds	r3, r7, #4
 800960c:	4923      	ldr	r1, [pc, #140]	@ (800969c <COPC_task_update+0x13c>)
 800960e:	4618      	mov	r0, r3
 8009610:	f006 fad0 	bl	800fbb4 <siprintf>
                        Uart_sendstring(UART5, error_msg);
 8009614:	1d3b      	adds	r3, r7, #4
 8009616:	4619      	mov	r1, r3
 8009618:	4821      	ldr	r0, [pc, #132]	@ (80096a0 <COPC_task_update+0x140>)
 800961a:	f7f8 fcdf 	bl	8001fdc <Uart_sendstring>
                        Uart_sendstring(USART6, error_msg);
 800961e:	1d3b      	adds	r3, r7, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4820      	ldr	r0, [pc, #128]	@ (80096a4 <COPC_task_update+0x144>)
 8009624:	f7f8 fcda 	bl	8001fdc <Uart_sendstring>
                        Uart_sendstring(USART2, error_msg);
 8009628:	1d3b      	adds	r3, r7, #4
 800962a:	4619      	mov	r1, r3
 800962c:	481e      	ldr	r0, [pc, #120]	@ (80096a8 <COPC_task_update+0x148>)
 800962e:	f7f8 fcd5 	bl	8001fdc <Uart_sendstring>
 8009632:	e00b      	b.n	800964c <COPC_task_update+0xec>
                }



            }else{
            	receive_buffer[receive_index++] = rxData;
 8009634:	4b12      	ldr	r3, [pc, #72]	@ (8009680 <COPC_task_update+0x120>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	b2d1      	uxtb	r1, r2
 800963e:	4a10      	ldr	r2, [pc, #64]	@ (8009680 <COPC_task_update+0x120>)
 8009640:	7011      	strb	r1, [r2, #0]
 8009642:	4619      	mov	r1, r3
 8009644:	4a10      	ldr	r2, [pc, #64]	@ (8009688 <COPC_task_update+0x128>)
 8009646:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800964a:	5453      	strb	r3, [r2, r1]
            }

            if (receive_index >= FSP_PKT_MAX_LENGTH) {
 800964c:	4b0c      	ldr	r3, [pc, #48]	@ (8009680 <COPC_task_update+0x120>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2bff      	cmp	r3, #255	@ 0xff
 8009654:	d102      	bne.n	800965c <COPC_task_update+0xfc>
                // Frame quá dài, reset lại

                receiving = 0;
 8009656:	4b09      	ldr	r3, [pc, #36]	@ (800967c <COPC_task_update+0x11c>)
 8009658:	2200      	movs	r2, #0
 800965a:	701a      	strb	r2, [r3, #0]
    while (IsDataAvailable(USART1))
 800965c:	4806      	ldr	r0, [pc, #24]	@ (8009678 <COPC_task_update+0x118>)
 800965e:	f7f8 fc69 	bl	8001f34 <IsDataAvailable>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	f47f af7f 	bne.w	8009568 <COPC_task_update+0x8>
            }
    }
}

}
 800966a:	bf00      	nop
 800966c:	bf00      	nop
 800966e:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	40011000 	.word	0x40011000
 800967c:	200062c0 	.word	0x200062c0
 8009680:	200063c3 	.word	0x200063c3
 8009684:	200058b6 	.word	0x200058b6
 8009688:	200062c4 	.word	0x200062c4
 800968c:	20000040 	.word	0x20000040
 8009690:	20000041 	.word	0x20000041
 8009694:	20000042 	.word	0x20000042
 8009698:	200003f4 	.word	0x200003f4
 800969c:	08015820 	.word	0x08015820
 80096a0:	40005000 	.word	0x40005000
 80096a4:	40011400 	.word	0x40011400
 80096a8:	40004400 	.word	0x40004400

080096ac <COPC_create_task>:
void	COPC_create_task(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
	COPC_init();
 80096b0:	f7ff ff46 	bl	8009540 <COPC_init>
	SCH_TASK_CreateTask(&s_COPC_task_context.taskHandle, &s_COPC_task_context.taskProperty);
 80096b4:	4902      	ldr	r1, [pc, #8]	@ (80096c0 <COPC_create_task+0x14>)
 80096b6:	4803      	ldr	r0, [pc, #12]	@ (80096c4 <COPC_create_task+0x18>)
 80096b8:	f002 f92c 	bl	800b914 <SCH_TASK_CreateTask>
}
 80096bc:	bf00      	nop
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000414 	.word	0x20000414
 80096c4:	20000410 	.word	0x20000410

080096c8 <GPS_create_task>:
		}
};


void GPS_create_task(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	af00      	add	r7, sp, #0
	Ringbuf_init();
 80096cc:	f7f8 f996 	bl	80019fc <Ringbuf_init>
	SCH_TASK_CreateTask(&gps_task_context.taskHandle, &gps_task_context.taskProperty);
 80096d0:	4902      	ldr	r1, [pc, #8]	@ (80096dc <GPS_create_task+0x14>)
 80096d2:	4803      	ldr	r0, [pc, #12]	@ (80096e0 <GPS_create_task+0x18>)
 80096d4:	f002 f91e 	bl	800b914 <SCH_TASK_CreateTask>
}
 80096d8:	bf00      	nop
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20000424 	.word	0x20000424
 80096e0:	20000420 	.word	0x20000420

080096e4 <GPS_task_update>:



static void GPS_task_update(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
	if(gps_report_enable){
 80096ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009728 <GPS_task_update+0x44>)
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d015      	beq.n	8009720 <GPS_task_update+0x3c>
		uint8_t rxData;
		while (IsDataAvailable(USART3))
 80096f4:	e00e      	b.n	8009714 <GPS_task_update+0x30>
		{
			rxData = Uart_read(USART3);
 80096f6:	480d      	ldr	r0, [pc, #52]	@ (800972c <GPS_task_update+0x48>)
 80096f8:	f7f8 fa64 	bl	8001bc4 <Uart_read>
 80096fc:	4603      	mov	r3, r0
 80096fe:	71fb      	strb	r3, [r7, #7]
			Uart_write(USART2, rxData);
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	4619      	mov	r1, r3
 8009704:	480a      	ldr	r0, [pc, #40]	@ (8009730 <GPS_task_update+0x4c>)
 8009706:	f7f8 fb1f 	bl	8001d48 <Uart_write>
			Uart_write(USART6, rxData);
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	4619      	mov	r1, r3
 800970e:	4809      	ldr	r0, [pc, #36]	@ (8009734 <GPS_task_update+0x50>)
 8009710:	f7f8 fb1a 	bl	8001d48 <Uart_write>
		while (IsDataAvailable(USART3))
 8009714:	4805      	ldr	r0, [pc, #20]	@ (800972c <GPS_task_update+0x48>)
 8009716:	f7f8 fc0d 	bl	8001f34 <IsDataAvailable>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1ea      	bne.n	80096f6 <GPS_task_update+0x12>
		}
	}
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	200059e4 	.word	0x200059e4
 800972c:	40004800 	.word	0x40004800
 8009730:	40004400 	.word	0x40004400
 8009734:	40011400 	.word	0x40011400

08009738 <LL_GPIO_SetOutputPin>:
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	619a      	str	r2, [r3, #24]
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <LL_GPIO_ResetOutputPin>:
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	041a      	lsls	r2, r3, #16
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	619a      	str	r2, [r3, #24]
}
 8009766:	bf00      	nop
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
	...

08009774 <status_led_init>:
{
	s_led_display_status.state = status;
}

void status_led_init(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	af00      	add	r7, sp, #0
    // Initialize LED status variable
    s_led_display_status.led = 0;
 8009778:	4a06      	ldr	r2, [pc, #24]	@ (8009794 <status_led_init+0x20>)
 800977a:	7813      	ldrb	r3, [r2, #0]
 800977c:	f36f 0300 	bfc	r3, #0, #1
 8009780:	7013      	strb	r3, [r2, #0]
    s_led_display_status.state = POWERUP;
 8009782:	4a04      	ldr	r2, [pc, #16]	@ (8009794 <status_led_init+0x20>)
 8009784:	7813      	ldrb	r3, [r2, #0]
 8009786:	f36f 0347 	bfc	r3, #1, #7
 800978a:	7013      	strb	r3, [r2, #0]

    // Turn off LED initially
    status_led_off();
 800978c:	f000 f804 	bl	8009798 <status_led_off>
}
 8009790:	bf00      	nop
 8009792:	bd80      	pop	{r7, pc}
 8009794:	200063c4 	.word	0x200063c4

08009798 <status_led_off>:

static void status_led_off(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0

	LL_GPIO_ResetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 800979c:	2120      	movs	r1, #32
 800979e:	4802      	ldr	r0, [pc, #8]	@ (80097a8 <status_led_off+0x10>)
 80097a0:	f7ff ffd8 	bl	8009754 <LL_GPIO_ResetOutputPin>
}
 80097a4:	bf00      	nop
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	40020800 	.word	0x40020800

080097ac <status_led_on>:

static void status_led_on(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0

	LL_GPIO_SetOutputPin(LED_busy_GPIO_Port, LED_busy_Pin);
 80097b0:	2120      	movs	r1, #32
 80097b2:	4802      	ldr	r0, [pc, #8]	@ (80097bc <status_led_on+0x10>)
 80097b4:	f7ff ffc0 	bl	8009738 <LL_GPIO_SetOutputPin>
}
 80097b8:	bf00      	nop
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	40020800 	.word	0x40020800

080097c0 <status_led_update>:

void	status_led_update(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
	switch (s_led_display_status.state) {
 80097c4:	4b0d      	ldr	r3, [pc, #52]	@ (80097fc <status_led_update+0x3c>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d811      	bhi.n	80097f6 <status_led_update+0x36>
 80097d2:	a201      	add	r2, pc, #4	@ (adr r2, 80097d8 <status_led_update+0x18>)
 80097d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d8:	080097e9 	.word	0x080097e9
 80097dc:	080097ef 	.word	0x080097ef
 80097e0:	080097f5 	.word	0x080097f5
 80097e4:	080097f5 	.word	0x080097f5
	case POWERUP:
		status_led_powerup();
 80097e8:	f000 f80a 	bl	8009800 <status_led_powerup>
		break;
 80097ec:	e003      	b.n	80097f6 <status_led_update+0x36>
	case NORMAL:
		status_led_normal();
 80097ee:	f000 f841 	bl	8009874 <status_led_normal>
		break;
 80097f2:	e000      	b.n	80097f6 <status_led_update+0x36>
	case POWERING_SUB:
		break;
 80097f4:	bf00      	nop
	case OVERCURRENT:
		break;
	}
}
 80097f6:	bf00      	nop
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	200063c4 	.word	0x200063c4

08009800 <status_led_powerup>:

static void status_led_powerup(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
    if (s_led_display_status.led == 1) // LED is ON
 8009804:	4b1a      	ldr	r3, [pc, #104]	@ (8009870 <status_led_powerup+0x70>)
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	f003 0301 	and.w	r3, r3, #1
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d012      	beq.n	8009838 <status_led_powerup+0x38>
    {
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8009812:	2000      	movs	r0, #0
 8009814:	f002 f868 	bl	800b8e8 <SCH_TIM_HasCompleted>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d025      	beq.n	800986a <status_led_powerup+0x6a>
        {
            s_led_display_status.led = 0;
 800981e:	4a14      	ldr	r2, [pc, #80]	@ (8009870 <status_led_powerup+0x70>)
 8009820:	7813      	ldrb	r3, [r2, #0]
 8009822:	f36f 0300 	bfc	r3, #0, #1
 8009826:	7013      	strb	r3, [r2, #0]
//            char buffered[100];
//            sprintf(buffered, "PMU_INT: %d, PDU_INT: %d, IOU_INT: %d, CAM_INT: %d\r\n",
//                    pmu_int_value, pdu_int_value, iou_int_value, cam_int_value);
//            Uart_sendstring(USART6, buffered);

            status_led_off();
 8009828:	f7ff ffb6 	bl	8009798 <status_led_off>
//            command_send_splash();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 800982c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009830:	2000      	movs	r0, #0
 8009832:	f002 f843 	bl	800b8bc <SCH_TIM_Start>
            s_led_display_status.led = 1;
            status_led_on();
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
        }
    }
}
 8009836:	e018      	b.n	800986a <status_led_powerup+0x6a>
    else if (s_led_display_status.led == 0) // LED is OFF
 8009838:	4b0d      	ldr	r3, [pc, #52]	@ (8009870 <status_led_powerup+0x70>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d111      	bne.n	800986a <status_led_powerup+0x6a>
        if (SCH_TIM_HasCompleted(SCH_TIM_LED))
 8009846:	2000      	movs	r0, #0
 8009848:	f002 f84e 	bl	800b8e8 <SCH_TIM_HasCompleted>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00b      	beq.n	800986a <status_led_powerup+0x6a>
            s_led_display_status.led = 1;
 8009852:	4a07      	ldr	r2, [pc, #28]	@ (8009870 <status_led_powerup+0x70>)
 8009854:	7813      	ldrb	r3, [r2, #0]
 8009856:	f043 0301 	orr.w	r3, r3, #1
 800985a:	7013      	strb	r3, [r2, #0]
            status_led_on();
 800985c:	f7ff ffa6 	bl	80097ac <status_led_on>
            SCH_TIM_Start(SCH_TIM_LED, POWERUP_PERIOD); // restart
 8009860:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009864:	2000      	movs	r0, #0
 8009866:	f002 f829 	bl	800b8bc <SCH_TIM_Start>
}
 800986a:	bf00      	nop
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	200063c4 	.word	0x200063c4

08009874 <status_led_normal>:
//}
//


static void status_led_normal(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
//			s_led_display_status.led = 1;
//			status_led_on();
//			SCH_TIM_Start(SCH_TIM_LED,POWER_NORMAL_ON_PERIOD);	//restart
//		}
//	}
}
 8009878:	bf00      	nop
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
	...

08009884 <status_led_create_task>:

void	status_led_create_task(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&s_task_context.taskHandle, &s_task_context.taskProperty);
 8009888:	4902      	ldr	r1, [pc, #8]	@ (8009894 <status_led_create_task+0x10>)
 800988a:	4803      	ldr	r0, [pc, #12]	@ (8009898 <status_led_create_task+0x14>)
 800988c:	f002 f842 	bl	800b914 <SCH_TASK_CreateTask>
}
 8009890:	bf00      	nop
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20000434 	.word	0x20000434
 8009898:	20000430 	.word	0x20000430

0800989c <__NVIC_SetPriorityGrouping>:
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f003 0307 	and.w	r3, r3, #7
 80098aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80098ac:	4b0c      	ldr	r3, [pc, #48]	@ (80098e0 <__NVIC_SetPriorityGrouping+0x44>)
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80098b8:	4013      	ands	r3, r2
 80098ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80098c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80098c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80098ce:	4a04      	ldr	r2, [pc, #16]	@ (80098e0 <__NVIC_SetPriorityGrouping+0x44>)
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	60d3      	str	r3, [r2, #12]
}
 80098d4:	bf00      	nop
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	e000ed00 	.word	0xe000ed00

080098e4 <__NVIC_GetPriorityGrouping>:
{
 80098e4:	b480      	push	{r7}
 80098e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80098e8:	4b04      	ldr	r3, [pc, #16]	@ (80098fc <__NVIC_GetPriorityGrouping+0x18>)
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	0a1b      	lsrs	r3, r3, #8
 80098ee:	f003 0307 	and.w	r3, r3, #7
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	e000ed00 	.word	0xe000ed00

08009900 <__NVIC_EnableIRQ>:
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800990a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800990e:	2b00      	cmp	r3, #0
 8009910:	db0b      	blt.n	800992a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	f003 021f 	and.w	r2, r3, #31
 8009918:	4907      	ldr	r1, [pc, #28]	@ (8009938 <__NVIC_EnableIRQ+0x38>)
 800991a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800991e:	095b      	lsrs	r3, r3, #5
 8009920:	2001      	movs	r0, #1
 8009922:	fa00 f202 	lsl.w	r2, r0, r2
 8009926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800992a:	bf00      	nop
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	e000e100 	.word	0xe000e100

0800993c <__NVIC_SetPriority>:
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	6039      	str	r1, [r7, #0]
 8009946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800994c:	2b00      	cmp	r3, #0
 800994e:	db0a      	blt.n	8009966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	b2da      	uxtb	r2, r3
 8009954:	490c      	ldr	r1, [pc, #48]	@ (8009988 <__NVIC_SetPriority+0x4c>)
 8009956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800995a:	0112      	lsls	r2, r2, #4
 800995c:	b2d2      	uxtb	r2, r2
 800995e:	440b      	add	r3, r1
 8009960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009964:	e00a      	b.n	800997c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	b2da      	uxtb	r2, r3
 800996a:	4908      	ldr	r1, [pc, #32]	@ (800998c <__NVIC_SetPriority+0x50>)
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	3b04      	subs	r3, #4
 8009974:	0112      	lsls	r2, r2, #4
 8009976:	b2d2      	uxtb	r2, r2
 8009978:	440b      	add	r3, r1
 800997a:	761a      	strb	r2, [r3, #24]
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	e000e100 	.word	0xe000e100
 800998c:	e000ed00 	.word	0xe000ed00

08009990 <NVIC_EncodePriority>:
{
 8009990:	b480      	push	{r7}
 8009992:	b089      	sub	sp, #36	@ 0x24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	f1c3 0307 	rsb	r3, r3, #7
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	bf28      	it	cs
 80099ae:	2304      	movcs	r3, #4
 80099b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	3304      	adds	r3, #4
 80099b6:	2b06      	cmp	r3, #6
 80099b8:	d902      	bls.n	80099c0 <NVIC_EncodePriority+0x30>
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	3b03      	subs	r3, #3
 80099be:	e000      	b.n	80099c2 <NVIC_EncodePriority+0x32>
 80099c0:	2300      	movs	r3, #0
 80099c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099c4:	f04f 32ff 	mov.w	r2, #4294967295
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	fa02 f303 	lsl.w	r3, r2, r3
 80099ce:	43da      	mvns	r2, r3
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	401a      	ands	r2, r3
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099d8:	f04f 31ff 	mov.w	r1, #4294967295
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	fa01 f303 	lsl.w	r3, r1, r3
 80099e2:	43d9      	mvns	r1, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099e8:	4313      	orrs	r3, r2
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3724      	adds	r7, #36	@ 0x24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <LL_I2C_EnableClockStretching>:
{
 80099f6:	b480      	push	{r7}
 80099f8:	b083      	sub	sp, #12
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	601a      	str	r2, [r3, #0]
}
 8009a0a:	bf00      	nop
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <LL_I2C_DisableGeneralCall>:
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	601a      	str	r2, [r3, #0]
}
 8009a2a:	bf00      	nop
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <LL_I2C_SetOwnAddress2>:
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	60da      	str	r2, [r3, #12]
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <LL_I2C_DisableOwnAddress2>:
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	f023 0201 	bic.w	r2, r3, #1
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	60da      	str	r2, [r3, #12]
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009a80:	4b05      	ldr	r3, [pc, #20]	@ (8009a98 <LL_RCC_HSE_Enable+0x1c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a04      	ldr	r2, [pc, #16]	@ (8009a98 <LL_RCC_HSE_Enable+0x1c>)
 8009a86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a8a:	6013      	str	r3, [r2, #0]
}
 8009a8c:	bf00      	nop
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	40023800 	.word	0x40023800

08009a9c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8009aa0:	4b07      	ldr	r3, [pc, #28]	@ (8009ac0 <LL_RCC_HSE_IsReady+0x24>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aac:	bf0c      	ite	eq
 8009aae:	2301      	moveq	r3, #1
 8009ab0:	2300      	movne	r3, #0
 8009ab2:	b2db      	uxtb	r3, r3
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	40023800 	.word	0x40023800

08009ac4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8009acc:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <LL_RCC_SetSysClkSource+0x24>)
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f023 0203 	bic.w	r2, r3, #3
 8009ad4:	4904      	ldr	r1, [pc, #16]	@ (8009ae8 <LL_RCC_SetSysClkSource+0x24>)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	608b      	str	r3, [r1, #8]
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	40023800 	.word	0x40023800

08009aec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009aec:	b480      	push	{r7}
 8009aee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009af0:	4b04      	ldr	r3, [pc, #16]	@ (8009b04 <LL_RCC_GetSysClkSource+0x18>)
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f003 030c 	and.w	r3, r3, #12
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	40023800 	.word	0x40023800

08009b08 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8009b10:	4b06      	ldr	r3, [pc, #24]	@ (8009b2c <LL_RCC_SetAHBPrescaler+0x24>)
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009b18:	4904      	ldr	r1, [pc, #16]	@ (8009b2c <LL_RCC_SetAHBPrescaler+0x24>)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	608b      	str	r3, [r1, #8]
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	40023800 	.word	0x40023800

08009b30 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8009b38:	4b06      	ldr	r3, [pc, #24]	@ (8009b54 <LL_RCC_SetAPB1Prescaler+0x24>)
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009b40:	4904      	ldr	r1, [pc, #16]	@ (8009b54 <LL_RCC_SetAPB1Prescaler+0x24>)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	608b      	str	r3, [r1, #8]
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	40023800 	.word	0x40023800

08009b58 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8009b60:	4b06      	ldr	r3, [pc, #24]	@ (8009b7c <LL_RCC_SetAPB2Prescaler+0x24>)
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009b68:	4904      	ldr	r1, [pc, #16]	@ (8009b7c <LL_RCC_SetAPB2Prescaler+0x24>)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	608b      	str	r3, [r1, #8]
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	40023800 	.word	0x40023800

08009b80 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8009b80:	b480      	push	{r7}
 8009b82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009b84:	4b05      	ldr	r3, [pc, #20]	@ (8009b9c <LL_RCC_PLL_Enable+0x1c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a04      	ldr	r2, [pc, #16]	@ (8009b9c <LL_RCC_PLL_Enable+0x1c>)
 8009b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b8e:	6013      	str	r3, [r2, #0]
}
 8009b90:	bf00      	nop
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	40023800 	.word	0x40023800

08009ba0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8009ba4:	4b07      	ldr	r3, [pc, #28]	@ (8009bc4 <LL_RCC_PLL_IsReady+0x24>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bb0:	bf0c      	ite	eq
 8009bb2:	2301      	moveq	r3, #1
 8009bb4:	2300      	movne	r3, #0
 8009bb6:	b2db      	uxtb	r3, r3
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	40023800 	.word	0x40023800

08009bc8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
 8009bd4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8009bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	4b0d      	ldr	r3, [pc, #52]	@ (8009c10 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8009bdc:	4013      	ands	r3, r2
 8009bde:	68f9      	ldr	r1, [r7, #12]
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	4311      	orrs	r1, r2
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	0192      	lsls	r2, r2, #6
 8009be8:	430a      	orrs	r2, r1
 8009bea:	4908      	ldr	r1, [pc, #32]	@ (8009c0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8009bec:	4313      	orrs	r3, r2
 8009bee:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8009bf0:	4b06      	ldr	r3, [pc, #24]	@ (8009c0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009bf8:	4904      	ldr	r1, [pc, #16]	@ (8009c0c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8009c00:	bf00      	nop
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	40023800 	.word	0x40023800
 8009c10:	ffbf8000 	.word	0xffbf8000

08009c14 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009c1c:	4b08      	ldr	r3, [pc, #32]	@ (8009c40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c20:	4907      	ldr	r1, [pc, #28]	@ (8009c40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8009c28:	4b05      	ldr	r3, [pc, #20]	@ (8009c40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8009c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009c32:	68fb      	ldr	r3, [r7, #12]
}
 8009c34:	bf00      	nop
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	40023800 	.word	0x40023800

08009c44 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8009c4c:	4b08      	ldr	r3, [pc, #32]	@ (8009c70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c50:	4907      	ldr	r1, [pc, #28]	@ (8009c70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8009c58:	4b05      	ldr	r3, [pc, #20]	@ (8009c70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8009c5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4013      	ands	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009c62:	68fb      	ldr	r3, [r7, #12]
}
 8009c64:	bf00      	nop
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	40023800 	.word	0x40023800

08009c74 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8009c7c:	4b08      	ldr	r3, [pc, #32]	@ (8009ca0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009c7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c80:	4907      	ldr	r1, [pc, #28]	@ (8009ca0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009c88:	4b05      	ldr	r3, [pc, #20]	@ (8009ca0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8009c8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009c92:	68fb      	ldr	r3, [r7, #12]
}
 8009c94:	bf00      	nop
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	40023800 	.word	0x40023800

08009ca4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8009cac:	4b06      	ldr	r3, [pc, #24]	@ (8009cc8 <LL_FLASH_SetLatency+0x24>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f023 0207 	bic.w	r2, r3, #7
 8009cb4:	4904      	ldr	r1, [pc, #16]	@ (8009cc8 <LL_FLASH_SetLatency+0x24>)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	600b      	str	r3, [r1, #0]
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	40023c00 	.word	0x40023c00

08009ccc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8009cd0:	4b04      	ldr	r3, [pc, #16]	@ (8009ce4 <LL_FLASH_GetLatency+0x18>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0307 	and.w	r3, r3, #7
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	40023c00 	.word	0x40023c00

08009ce8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8009cf0:	4b06      	ldr	r3, [pc, #24]	@ (8009d0c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009cf8:	4904      	ldr	r1, [pc, #16]	@ (8009d0c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	600b      	str	r3, [r1, #0]
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	40007000 	.word	0x40007000

08009d10 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8009d10:	b480      	push	{r7}
 8009d12:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8009d14:	4b07      	ldr	r3, [pc, #28]	@ (8009d34 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d20:	bf0c      	ite	eq
 8009d22:	2301      	moveq	r3, #1
 8009d24:	2300      	movne	r3, #0
 8009d26:	b2db      	uxtb	r3, r3
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	40007000 	.word	0x40007000

08009d38 <LL_USART_Enable>:
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	60da      	str	r2, [r3, #12]
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <LL_USART_ConfigAsyncMode>:
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	615a      	str	r2, [r3, #20]
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <LL_GPIO_ResetOutputPin>:
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	041a      	lsls	r2, r3, #16
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	619a      	str	r2, [r3, #24]
}
 8009d96:	bf00      	nop
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
	...

08009da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8009da8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009dac:	f7ff ff62 	bl	8009c74 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8009db0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8009db4:	f7ff ff46 	bl	8009c44 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009db8:	2003      	movs	r0, #3
 8009dba:	f7ff fd6f 	bl	800989c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8009dbe:	f7ff fd91 	bl	80098e4 <__NVIC_GetPriorityGrouping>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	210f      	movs	r1, #15
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7ff fde1 	bl	8009990 <NVIC_EncodePriority>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd6:	f7ff fdb1 	bl	800993c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009dda:	f000 f83f 	bl	8009e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009dde:	f000 fbab 	bl	800a538 <MX_GPIO_Init>
  MX_I2C1_Init();
 8009de2:	f000 f885 	bl	8009ef0 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8009de6:	f000 fb47 	bl	800a478 <MX_USART6_UART_Init>
  MX_UART5_Init();
 8009dea:	f000 f9ab 	bl	800a144 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8009dee:	f000 fa21 	bl	800a234 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8009df2:	f000 f945 	bl	800a080 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8009df6:	f000 fadd 	bl	800a3b4 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 8009dfa:	f000 f8d1 	bl	8009fa0 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8009dfe:	f000 fa79 	bl	800a2f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  command_init();
 8009e02:	f7fc fe1d 	bl	8006a40 <command_init>

  fsp_init(FSP_ADR_CPOC);
 8009e06:	2001      	movs	r0, #1
 8009e08:	f001 fef2 	bl	800bbf0 <fsp_init>
  LL_GPIO_ResetOutputPin(GPIOC, ENABLE_MUX_Pin);
 8009e0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009e10:	4811      	ldr	r0, [pc, #68]	@ (8009e58 <main+0xb4>)
 8009e12:	f7ff ffb7 	bl	8009d84 <LL_GPIO_ResetOutputPin>

  status_led_init();
 8009e16:	f7ff fcad 	bl	8009774 <status_led_init>



  WDT_init();
 8009e1a:	f000 fd8f 	bl	800a93c <WDT_init>

  SCH_Initialize();
 8009e1e:	f001 fd23 	bl	800b868 <SCH_Initialize>

  status_led_create_task();
 8009e22:	f7ff fd2f 	bl	8009884 <status_led_create_task>

  send_packet_init();
 8009e26:	f7f8 f9fd 	bl	8002224 <send_packet_init>
  send_packet_create_task();
 8009e2a:	f7f8 fa59 	bl	80022e0 <send_packet_create_task>


  command_create_task();
 8009e2e:	f7fd fdb1 	bl	8007994 <command_create_task>

  COPC_create_task();
 8009e32:	f7ff fc3b 	bl	80096ac <COPC_create_task>

  WDT_create_task();
 8009e36:	f000 fd8d 	bl	800a954 <WDT_create_task>

  IOU_create_task();
 8009e3a:	f7f8 faf3 	bl	8002424 <IOU_create_task>
  PMU_create_task();
 8009e3e:	f7fb fb6f 	bl	8005520 <PMU_create_task>
  PDU_create_task();
 8009e42:	f7fa fd01 	bl	8004848 <PDU_create_task>
  rs422_create_task();
 8009e46:	f7ff fb6d 	bl	8009524 <rs422_create_task>
  GPS_create_task();
 8009e4a:	f7ff fc3d 	bl	80096c8 <GPS_create_task>
  SCH_StartSchedular();
 8009e4e:	f001 fe33 	bl	800bab8 <SCH_StartSchedular>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 8009e52:	f001 fe37 	bl	800bac4 <SCH_HandleScheduledTask>
 8009e56:	e7fc      	b.n	8009e52 <main+0xae>
 8009e58:	40020800 	.word	0x40020800

08009e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8009e60:	2001      	movs	r0, #1
 8009e62:	f7ff ff1f 	bl	8009ca4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8009e66:	bf00      	nop
 8009e68:	f7ff ff30 	bl	8009ccc <LL_FLASH_GetLatency>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d1fa      	bne.n	8009e68 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8009e72:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009e76:	f7ff ff37 	bl	8009ce8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8009e7a:	f7ff fdff 	bl	8009a7c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8009e7e:	bf00      	nop
 8009e80:	f7ff fe0c 	bl	8009a9c <LL_RCC_HSE_IsReady>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d1fa      	bne.n	8009e80 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 192, LL_RCC_PLLP_DIV_4);
 8009e8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009e8e:	22c0      	movs	r2, #192	@ 0xc0
 8009e90:	2104      	movs	r1, #4
 8009e92:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8009e96:	f7ff fe97 	bl	8009bc8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8009e9a:	f7ff fe71 	bl	8009b80 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8009e9e:	bf00      	nop
 8009ea0:	f7ff fe7e 	bl	8009ba0 <LL_RCC_PLL_IsReady>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d1fa      	bne.n	8009ea0 <SystemClock_Config+0x44>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8009eaa:	bf00      	nop
 8009eac:	f7ff ff30 	bl	8009d10 <LL_PWR_IsActiveFlag_VOS>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0fa      	beq.n	8009eac <SystemClock_Config+0x50>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8009eb6:	2080      	movs	r0, #128	@ 0x80
 8009eb8:	f7ff fe26 	bl	8009b08 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8009ebc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009ec0:	f7ff fe36 	bl	8009b30 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	f7ff fe47 	bl	8009b58 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8009eca:	2002      	movs	r0, #2
 8009ecc:	f7ff fdfa 	bl	8009ac4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8009ed0:	bf00      	nop
 8009ed2:	f7ff fe0b 	bl	8009aec <LL_RCC_GetSysClkSource>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b08      	cmp	r3, #8
 8009eda:	d1fa      	bne.n	8009ed2 <SystemClock_Config+0x76>
  {

  }
  LL_Init1msTick(48000000);
 8009edc:	4803      	ldr	r0, [pc, #12]	@ (8009eec <SystemClock_Config+0x90>)
 8009ede:	f001 fca5 	bl	800b82c <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8009ee2:	4802      	ldr	r0, [pc, #8]	@ (8009eec <SystemClock_Config+0x90>)
 8009ee4:	f001 fcb0 	bl	800b848 <LL_SetSystemCoreClock>
}
 8009ee8:	bf00      	nop
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	02dc6c00 	.word	0x02dc6c00

08009ef0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08c      	sub	sp, #48	@ 0x30
 8009ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8009ef6:	f107 0318 	add.w	r3, r7, #24
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	605a      	str	r2, [r3, #4]
 8009f00:	609a      	str	r2, [r3, #8]
 8009f02:	60da      	str	r2, [r3, #12]
 8009f04:	611a      	str	r2, [r3, #16]
 8009f06:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f08:	463b      	mov	r3, r7
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	605a      	str	r2, [r3, #4]
 8009f10:	609a      	str	r2, [r3, #8]
 8009f12:	60da      	str	r2, [r3, #12]
 8009f14:	611a      	str	r2, [r3, #16]
 8009f16:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8009f18:	2002      	movs	r0, #2
 8009f1a:	f7ff fe7b 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8009f1e:	23c0      	movs	r3, #192	@ 0xc0
 8009f20:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009f22:	2302      	movs	r3, #2
 8009f24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8009f26:	2303      	movs	r3, #3
 8009f28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8009f32:	2304      	movs	r3, #4
 8009f34:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f36:	463b      	mov	r3, r7
 8009f38:	4619      	mov	r1, r3
 8009f3a:	4816      	ldr	r0, [pc, #88]	@ (8009f94 <MX_I2C1_Init+0xa4>)
 8009f3c:	f000 fe91 	bl	800ac62 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8009f40:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009f44:	f7ff fe7e 	bl	8009c44 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8009f48:	4813      	ldr	r0, [pc, #76]	@ (8009f98 <MX_I2C1_Init+0xa8>)
 8009f4a:	f7ff fd87 	bl	8009a5c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8009f4e:	4812      	ldr	r0, [pc, #72]	@ (8009f98 <MX_I2C1_Init+0xa8>)
 8009f50:	f7ff fd61 	bl	8009a16 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8009f54:	4810      	ldr	r0, [pc, #64]	@ (8009f98 <MX_I2C1_Init+0xa8>)
 8009f56:	f7ff fd4e 	bl	80099f6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 8009f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8009f9c <MX_I2C1_Init+0xac>)
 8009f60:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8009f62:	2300      	movs	r3, #0
 8009f64:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8009f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8009f70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8009f76:	f107 0318 	add.w	r3, r7, #24
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4806      	ldr	r0, [pc, #24]	@ (8009f98 <MX_I2C1_Init+0xa8>)
 8009f7e:	f000 ffe7 	bl	800af50 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8009f82:	2100      	movs	r1, #0
 8009f84:	4804      	ldr	r0, [pc, #16]	@ (8009f98 <MX_I2C1_Init+0xa8>)
 8009f86:	f7ff fd56 	bl	8009a36 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009f8a:	bf00      	nop
 8009f8c:	3730      	adds	r7, #48	@ 0x30
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	40020400 	.word	0x40020400
 8009f98:	40005400 	.word	0x40005400
 8009f9c:	00061a80 	.word	0x00061a80

08009fa0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b08c      	sub	sp, #48	@ 0x30
 8009fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8009fa6:	f107 0318 	add.w	r3, r7, #24
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	605a      	str	r2, [r3, #4]
 8009fb0:	609a      	str	r2, [r3, #8]
 8009fb2:	60da      	str	r2, [r3, #12]
 8009fb4:	611a      	str	r2, [r3, #16]
 8009fb6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fb8:	463b      	mov	r3, r7
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	605a      	str	r2, [r3, #4]
 8009fc0:	609a      	str	r2, [r3, #8]
 8009fc2:	60da      	str	r2, [r3, #12]
 8009fc4:	611a      	str	r2, [r3, #16]
 8009fc6:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8009fc8:	2004      	movs	r0, #4
 8009fca:	f7ff fe23 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8009fce:	2001      	movs	r0, #1
 8009fd0:	f7ff fe20 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  /**I2C3 GPIO Configuration
  PC9   ------> I2C3_SDA
  PA8   ------> I2C3_SCL
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8009fd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009fd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009fda:	2302      	movs	r3, #2
 8009fdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8009fea:	2304      	movs	r3, #4
 8009fec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fee:	463b      	mov	r3, r7
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	481f      	ldr	r0, [pc, #124]	@ (800a070 <MX_I2C3_Init+0xd0>)
 8009ff4:	f000 fe35 	bl	800ac62 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8009ff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ffc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8009ffe:	2302      	movs	r3, #2
 800a000:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a002:	2303      	movs	r3, #3
 800a004:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800a006:	2301      	movs	r3, #1
 800a008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a00a:	2300      	movs	r3, #0
 800a00c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800a00e:	2304      	movs	r3, #4
 800a010:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a012:	463b      	mov	r3, r7
 800a014:	4619      	mov	r1, r3
 800a016:	4817      	ldr	r0, [pc, #92]	@ (800a074 <MX_I2C3_Init+0xd4>)
 800a018:	f000 fe23 	bl	800ac62 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C3);
 800a01c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a020:	f7ff fe10 	bl	8009c44 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C3_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C3);
 800a024:	4814      	ldr	r0, [pc, #80]	@ (800a078 <MX_I2C3_Init+0xd8>)
 800a026:	f7ff fd19 	bl	8009a5c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C3);
 800a02a:	4813      	ldr	r0, [pc, #76]	@ (800a078 <MX_I2C3_Init+0xd8>)
 800a02c:	f7ff fcf3 	bl	8009a16 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C3);
 800a030:	4811      	ldr	r0, [pc, #68]	@ (800a078 <MX_I2C3_Init+0xd8>)
 800a032:	f7ff fce0 	bl	80099f6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800a036:	2300      	movs	r3, #0
 800a038:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800a03a:	4b10      	ldr	r3, [pc, #64]	@ (800a07c <MX_I2C3_Init+0xdc>)
 800a03c:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 800a03e:	2300      	movs	r3, #0
 800a040:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800a046:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a04a:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800a04c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C3, &I2C_InitStruct);
 800a052:	f107 0318 	add.w	r3, r7, #24
 800a056:	4619      	mov	r1, r3
 800a058:	4807      	ldr	r0, [pc, #28]	@ (800a078 <MX_I2C3_Init+0xd8>)
 800a05a:	f000 ff79 	bl	800af50 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C3, 0);
 800a05e:	2100      	movs	r1, #0
 800a060:	4805      	ldr	r0, [pc, #20]	@ (800a078 <MX_I2C3_Init+0xd8>)
 800a062:	f7ff fce8 	bl	8009a36 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800a066:	bf00      	nop
 800a068:	3730      	adds	r7, #48	@ 0x30
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	40020800 	.word	0x40020800
 800a074:	40020000 	.word	0x40020000
 800a078:	40005c00 	.word	0x40005c00
 800a07c:	000186a0 	.word	0x000186a0

0800a080 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08e      	sub	sp, #56	@ 0x38
 800a084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a086:	f107 031c 	add.w	r3, r7, #28
 800a08a:	2200      	movs	r2, #0
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	605a      	str	r2, [r3, #4]
 800a090:	609a      	str	r2, [r3, #8]
 800a092:	60da      	str	r2, [r3, #12]
 800a094:	611a      	str	r2, [r3, #16]
 800a096:	615a      	str	r2, [r3, #20]
 800a098:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a09a:	1d3b      	adds	r3, r7, #4
 800a09c:	2200      	movs	r2, #0
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	605a      	str	r2, [r3, #4]
 800a0a2:	609a      	str	r2, [r3, #8]
 800a0a4:	60da      	str	r2, [r3, #12]
 800a0a6:	611a      	str	r2, [r3, #16]
 800a0a8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800a0aa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a0ae:	f7ff fdc9 	bl	8009c44 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a0b2:	2004      	movs	r0, #4
 800a0b4:	f7ff fdae 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800a0b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a0bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a0be:	2302      	movs	r3, #2
 800a0c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a0ce:	2308      	movs	r3, #8
 800a0d0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0d2:	1d3b      	adds	r3, r7, #4
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4819      	ldr	r0, [pc, #100]	@ (800a13c <MX_UART4_Init+0xbc>)
 800a0d8:	f000 fdc3 	bl	800ac62 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a0dc:	f7ff fc02 	bl	80098e4 <__NVIC_GetPriorityGrouping>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff fc52 	bl	8009990 <NVIC_EncodePriority>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	2034      	movs	r0, #52	@ 0x34
 800a0f2:	f7ff fc23 	bl	800993c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800a0f6:	2034      	movs	r0, #52	@ 0x34
 800a0f8:	f7ff fc02 	bl	8009900 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800a0fc:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800a100:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a102:	2300      	movs	r3, #0
 800a104:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a106:	2300      	movs	r3, #0
 800a108:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a10a:	2300      	movs	r3, #0
 800a10c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a10e:	230c      	movs	r3, #12
 800a110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a112:	2300      	movs	r3, #0
 800a114:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a116:	2300      	movs	r3, #0
 800a118:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800a11a:	f107 031c 	add.w	r3, r7, #28
 800a11e:	4619      	mov	r1, r3
 800a120:	4807      	ldr	r0, [pc, #28]	@ (800a140 <MX_UART4_Init+0xc0>)
 800a122:	f001 fae9 	bl	800b6f8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800a126:	4806      	ldr	r0, [pc, #24]	@ (800a140 <MX_UART4_Init+0xc0>)
 800a128:	f7ff fe16 	bl	8009d58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800a12c:	4804      	ldr	r0, [pc, #16]	@ (800a140 <MX_UART4_Init+0xc0>)
 800a12e:	f7ff fe03 	bl	8009d38 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a132:	bf00      	nop
 800a134:	3738      	adds	r7, #56	@ 0x38
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	40020800 	.word	0x40020800
 800a140:	40004c00 	.word	0x40004c00

0800a144 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08e      	sub	sp, #56	@ 0x38
 800a148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a14a:	f107 031c 	add.w	r3, r7, #28
 800a14e:	2200      	movs	r2, #0
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	605a      	str	r2, [r3, #4]
 800a154:	609a      	str	r2, [r3, #8]
 800a156:	60da      	str	r2, [r3, #12]
 800a158:	611a      	str	r2, [r3, #16]
 800a15a:	615a      	str	r2, [r3, #20]
 800a15c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a15e:	1d3b      	adds	r3, r7, #4
 800a160:	2200      	movs	r2, #0
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	605a      	str	r2, [r3, #4]
 800a166:	609a      	str	r2, [r3, #8]
 800a168:	60da      	str	r2, [r3, #12]
 800a16a:	611a      	str	r2, [r3, #16]
 800a16c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800a16e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a172:	f7ff fd67 	bl	8009c44 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a176:	2004      	movs	r0, #4
 800a178:	f7ff fd4c 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800a17c:	2008      	movs	r0, #8
 800a17e:	f7ff fd49 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800a182:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a186:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a188:	2302      	movs	r3, #2
 800a18a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a18c:	2303      	movs	r3, #3
 800a18e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a190:	2300      	movs	r3, #0
 800a192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a194:	2300      	movs	r3, #0
 800a196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a198:	2308      	movs	r3, #8
 800a19a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a19c:	1d3b      	adds	r3, r7, #4
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4821      	ldr	r0, [pc, #132]	@ (800a228 <MX_UART5_Init+0xe4>)
 800a1a2:	f000 fd5e 	bl	800ac62 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800a1a6:	2304      	movs	r3, #4
 800a1a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a1ba:	2308      	movs	r3, #8
 800a1bc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a1be:	1d3b      	adds	r3, r7, #4
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	481a      	ldr	r0, [pc, #104]	@ (800a22c <MX_UART5_Init+0xe8>)
 800a1c4:	f000 fd4d 	bl	800ac62 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a1c8:	f7ff fb8c 	bl	80098e4 <__NVIC_GetPriorityGrouping>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff fbdc 	bl	8009990 <NVIC_EncodePriority>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	4619      	mov	r1, r3
 800a1dc:	2035      	movs	r0, #53	@ 0x35
 800a1de:	f7ff fbad 	bl	800993c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800a1e2:	2035      	movs	r0, #53	@ 0x35
 800a1e4:	f7ff fb8c 	bl	8009900 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a1e8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a1ec:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a1fa:	230c      	movs	r3, #12
 800a1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a1fe:	2300      	movs	r3, #0
 800a200:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a202:	2300      	movs	r3, #0
 800a204:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800a206:	f107 031c 	add.w	r3, r7, #28
 800a20a:	4619      	mov	r1, r3
 800a20c:	4808      	ldr	r0, [pc, #32]	@ (800a230 <MX_UART5_Init+0xec>)
 800a20e:	f001 fa73 	bl	800b6f8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800a212:	4807      	ldr	r0, [pc, #28]	@ (800a230 <MX_UART5_Init+0xec>)
 800a214:	f7ff fda0 	bl	8009d58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800a218:	4805      	ldr	r0, [pc, #20]	@ (800a230 <MX_UART5_Init+0xec>)
 800a21a:	f7ff fd8d 	bl	8009d38 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800a21e:	bf00      	nop
 800a220:	3738      	adds	r7, #56	@ 0x38
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	40020800 	.word	0x40020800
 800a22c:	40020c00 	.word	0x40020c00
 800a230:	40005000 	.word	0x40005000

0800a234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08e      	sub	sp, #56	@ 0x38
 800a238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a23a:	f107 031c 	add.w	r3, r7, #28
 800a23e:	2200      	movs	r2, #0
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	605a      	str	r2, [r3, #4]
 800a244:	609a      	str	r2, [r3, #8]
 800a246:	60da      	str	r2, [r3, #12]
 800a248:	611a      	str	r2, [r3, #16]
 800a24a:	615a      	str	r2, [r3, #20]
 800a24c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a24e:	1d3b      	adds	r3, r7, #4
 800a250:	2200      	movs	r2, #0
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	605a      	str	r2, [r3, #4]
 800a256:	609a      	str	r2, [r3, #8]
 800a258:	60da      	str	r2, [r3, #12]
 800a25a:	611a      	str	r2, [r3, #16]
 800a25c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800a25e:	2010      	movs	r0, #16
 800a260:	f7ff fd08 	bl	8009c74 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a264:	2001      	movs	r0, #1
 800a266:	f7ff fcd5 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800a26a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a26e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a270:	2302      	movs	r3, #2
 800a272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a274:	2303      	movs	r3, #3
 800a276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a278:	2300      	movs	r3, #0
 800a27a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a27c:	2300      	movs	r3, #0
 800a27e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a280:	2307      	movs	r3, #7
 800a282:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a284:	1d3b      	adds	r3, r7, #4
 800a286:	4619      	mov	r1, r3
 800a288:	4818      	ldr	r0, [pc, #96]	@ (800a2ec <MX_USART1_UART_Init+0xb8>)
 800a28a:	f000 fcea 	bl	800ac62 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a28e:	f7ff fb29 	bl	80098e4 <__NVIC_GetPriorityGrouping>
 800a292:	4603      	mov	r3, r0
 800a294:	2200      	movs	r2, #0
 800a296:	2100      	movs	r1, #0
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff fb79 	bl	8009990 <NVIC_EncodePriority>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	2025      	movs	r0, #37	@ 0x25
 800a2a4:	f7ff fb4a 	bl	800993c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800a2a8:	2025      	movs	r0, #37	@ 0x25
 800a2aa:	f7ff fb29 	bl	8009900 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 800a2ae:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 800a2b2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a2c0:	230c      	movs	r3, #12
 800a2c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800a2cc:	f107 031c 	add.w	r3, r7, #28
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4807      	ldr	r0, [pc, #28]	@ (800a2f0 <MX_USART1_UART_Init+0xbc>)
 800a2d4:	f001 fa10 	bl	800b6f8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800a2d8:	4805      	ldr	r0, [pc, #20]	@ (800a2f0 <MX_USART1_UART_Init+0xbc>)
 800a2da:	f7ff fd3d 	bl	8009d58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800a2de:	4804      	ldr	r0, [pc, #16]	@ (800a2f0 <MX_USART1_UART_Init+0xbc>)
 800a2e0:	f7ff fd2a 	bl	8009d38 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a2e4:	bf00      	nop
 800a2e6:	3738      	adds	r7, #56	@ 0x38
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	40020000 	.word	0x40020000
 800a2f0:	40011000 	.word	0x40011000

0800a2f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b08e      	sub	sp, #56	@ 0x38
 800a2f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a2fa:	f107 031c 	add.w	r3, r7, #28
 800a2fe:	2200      	movs	r2, #0
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	605a      	str	r2, [r3, #4]
 800a304:	609a      	str	r2, [r3, #8]
 800a306:	60da      	str	r2, [r3, #12]
 800a308:	611a      	str	r2, [r3, #16]
 800a30a:	615a      	str	r2, [r3, #20]
 800a30c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a30e:	1d3b      	adds	r3, r7, #4
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	609a      	str	r2, [r3, #8]
 800a318:	60da      	str	r2, [r3, #12]
 800a31a:	611a      	str	r2, [r3, #16]
 800a31c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800a31e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a322:	f7ff fc8f 	bl	8009c44 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a326:	2001      	movs	r0, #1
 800a328:	f7ff fc74 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800a32c:	230c      	movs	r3, #12
 800a32e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a330:	2302      	movs	r3, #2
 800a332:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a334:	2303      	movs	r3, #3
 800a336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a33c:	2300      	movs	r3, #0
 800a33e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a340:	2307      	movs	r3, #7
 800a342:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a344:	1d3b      	adds	r3, r7, #4
 800a346:	4619      	mov	r1, r3
 800a348:	4818      	ldr	r0, [pc, #96]	@ (800a3ac <MX_USART2_UART_Init+0xb8>)
 800a34a:	f000 fc8a 	bl	800ac62 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a34e:	f7ff fac9 	bl	80098e4 <__NVIC_GetPriorityGrouping>
 800a352:	4603      	mov	r3, r0
 800a354:	2200      	movs	r2, #0
 800a356:	2100      	movs	r1, #0
 800a358:	4618      	mov	r0, r3
 800a35a:	f7ff fb19 	bl	8009990 <NVIC_EncodePriority>
 800a35e:	4603      	mov	r3, r0
 800a360:	4619      	mov	r1, r3
 800a362:	2026      	movs	r0, #38	@ 0x26
 800a364:	f7ff faea 	bl	800993c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800a368:	2026      	movs	r0, #38	@ 0x26
 800a36a:	f7ff fac9 	bl	8009900 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a36e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a372:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a374:	2300      	movs	r3, #0
 800a376:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a378:	2300      	movs	r3, #0
 800a37a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a37c:	2300      	movs	r3, #0
 800a37e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a380:	230c      	movs	r3, #12
 800a382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a384:	2300      	movs	r3, #0
 800a386:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a388:	2300      	movs	r3, #0
 800a38a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800a38c:	f107 031c 	add.w	r3, r7, #28
 800a390:	4619      	mov	r1, r3
 800a392:	4807      	ldr	r0, [pc, #28]	@ (800a3b0 <MX_USART2_UART_Init+0xbc>)
 800a394:	f001 f9b0 	bl	800b6f8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800a398:	4805      	ldr	r0, [pc, #20]	@ (800a3b0 <MX_USART2_UART_Init+0xbc>)
 800a39a:	f7ff fcdd 	bl	8009d58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800a39e:	4804      	ldr	r0, [pc, #16]	@ (800a3b0 <MX_USART2_UART_Init+0xbc>)
 800a3a0:	f7ff fcca 	bl	8009d38 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a3a4:	bf00      	nop
 800a3a6:	3738      	adds	r7, #56	@ 0x38
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	40020000 	.word	0x40020000
 800a3b0:	40004400 	.word	0x40004400

0800a3b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08e      	sub	sp, #56	@ 0x38
 800a3b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a3ba:	f107 031c 	add.w	r3, r7, #28
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	605a      	str	r2, [r3, #4]
 800a3c4:	609a      	str	r2, [r3, #8]
 800a3c6:	60da      	str	r2, [r3, #12]
 800a3c8:	611a      	str	r2, [r3, #16]
 800a3ca:	615a      	str	r2, [r3, #20]
 800a3cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ce:	1d3b      	adds	r3, r7, #4
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	605a      	str	r2, [r3, #4]
 800a3d6:	609a      	str	r2, [r3, #8]
 800a3d8:	60da      	str	r2, [r3, #12]
 800a3da:	611a      	str	r2, [r3, #16]
 800a3dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800a3de:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800a3e2:	f7ff fc2f 	bl	8009c44 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800a3e6:	2002      	movs	r0, #2
 800a3e8:	f7ff fc14 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800a3ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a3f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a402:	2307      	movs	r3, #7
 800a404:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a406:	1d3b      	adds	r3, r7, #4
 800a408:	4619      	mov	r1, r3
 800a40a:	4819      	ldr	r0, [pc, #100]	@ (800a470 <MX_USART3_UART_Init+0xbc>)
 800a40c:	f000 fc29 	bl	800ac62 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a410:	f7ff fa68 	bl	80098e4 <__NVIC_GetPriorityGrouping>
 800a414:	4603      	mov	r3, r0
 800a416:	2200      	movs	r2, #0
 800a418:	2100      	movs	r1, #0
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff fab8 	bl	8009990 <NVIC_EncodePriority>
 800a420:	4603      	mov	r3, r0
 800a422:	4619      	mov	r1, r3
 800a424:	2027      	movs	r0, #39	@ 0x27
 800a426:	f7ff fa89 	bl	800993c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800a42a:	2027      	movs	r0, #39	@ 0x27
 800a42c:	f7ff fa68 	bl	8009900 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a430:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a434:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a436:	2300      	movs	r3, #0
 800a438:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a43a:	2300      	movs	r3, #0
 800a43c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a43e:	2300      	movs	r3, #0
 800a440:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a442:	230c      	movs	r3, #12
 800a444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a446:	2300      	movs	r3, #0
 800a448:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a44a:	2300      	movs	r3, #0
 800a44c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800a44e:	f107 031c 	add.w	r3, r7, #28
 800a452:	4619      	mov	r1, r3
 800a454:	4807      	ldr	r0, [pc, #28]	@ (800a474 <MX_USART3_UART_Init+0xc0>)
 800a456:	f001 f94f 	bl	800b6f8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800a45a:	4806      	ldr	r0, [pc, #24]	@ (800a474 <MX_USART3_UART_Init+0xc0>)
 800a45c:	f7ff fc7c 	bl	8009d58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800a460:	4804      	ldr	r0, [pc, #16]	@ (800a474 <MX_USART3_UART_Init+0xc0>)
 800a462:	f7ff fc69 	bl	8009d38 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a466:	bf00      	nop
 800a468:	3738      	adds	r7, #56	@ 0x38
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	40020400 	.word	0x40020400
 800a474:	40004800 	.word	0x40004800

0800a478 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08e      	sub	sp, #56	@ 0x38
 800a47c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a47e:	f107 031c 	add.w	r3, r7, #28
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
 800a486:	605a      	str	r2, [r3, #4]
 800a488:	609a      	str	r2, [r3, #8]
 800a48a:	60da      	str	r2, [r3, #12]
 800a48c:	611a      	str	r2, [r3, #16]
 800a48e:	615a      	str	r2, [r3, #20]
 800a490:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a492:	1d3b      	adds	r3, r7, #4
 800a494:	2200      	movs	r2, #0
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	605a      	str	r2, [r3, #4]
 800a49a:	609a      	str	r2, [r3, #8]
 800a49c:	60da      	str	r2, [r3, #12]
 800a49e:	611a      	str	r2, [r3, #16]
 800a4a0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800a4a2:	2020      	movs	r0, #32
 800a4a4:	f7ff fbe6 	bl	8009c74 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a4a8:	2004      	movs	r0, #4
 800a4aa:	f7ff fbb3 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800a4ae:	23c0      	movs	r3, #192	@ 0xc0
 800a4b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800a4c2:	2308      	movs	r3, #8
 800a4c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4c6:	1d3b      	adds	r3, r7, #4
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	4819      	ldr	r0, [pc, #100]	@ (800a530 <MX_USART6_UART_Init+0xb8>)
 800a4cc:	f000 fbc9 	bl	800ac62 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800a4d0:	f7ff fa08 	bl	80098e4 <__NVIC_GetPriorityGrouping>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2100      	movs	r1, #0
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff fa58 	bl	8009990 <NVIC_EncodePriority>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	2047      	movs	r0, #71	@ 0x47
 800a4e6:	f7ff fa29 	bl	800993c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800a4ea:	2047      	movs	r0, #71	@ 0x47
 800a4ec:	f7ff fa08 	bl	8009900 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800a4f0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800a4f4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a4fe:	2300      	movs	r3, #0
 800a500:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a502:	230c      	movs	r3, #12
 800a504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a506:	2300      	movs	r3, #0
 800a508:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a50a:	2300      	movs	r3, #0
 800a50c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800a50e:	f107 031c 	add.w	r3, r7, #28
 800a512:	4619      	mov	r1, r3
 800a514:	4807      	ldr	r0, [pc, #28]	@ (800a534 <MX_USART6_UART_Init+0xbc>)
 800a516:	f001 f8ef 	bl	800b6f8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800a51a:	4806      	ldr	r0, [pc, #24]	@ (800a534 <MX_USART6_UART_Init+0xbc>)
 800a51c:	f7ff fc1c 	bl	8009d58 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800a520:	4804      	ldr	r0, [pc, #16]	@ (800a534 <MX_USART6_UART_Init+0xbc>)
 800a522:	f7ff fc09 	bl	8009d38 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800a526:	bf00      	nop
 800a528:	3738      	adds	r7, #56	@ 0x38
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	40020800 	.word	0x40020800
 800a534:	40011400 	.word	0x40011400

0800a538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a53e:	463b      	mov	r3, r7
 800a540:	2200      	movs	r2, #0
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	605a      	str	r2, [r3, #4]
 800a546:	609a      	str	r2, [r3, #8]
 800a548:	60da      	str	r2, [r3, #12]
 800a54a:	611a      	str	r2, [r3, #16]
 800a54c:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800a54e:	2004      	movs	r0, #4
 800a550:	f7ff fb60 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800a554:	2080      	movs	r0, #128	@ 0x80
 800a556:	f7ff fb5d 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800a55a:	2001      	movs	r0, #1
 800a55c:	f7ff fb5a 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800a560:	2002      	movs	r0, #2
 800a562:	f7ff fb57 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800a566:	2008      	movs	r0, #8
 800a568:	f7ff fb54 	bl	8009c14 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, WD_DONE_Pin|LORA_IO0_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin);
 800a56c:	f641 0112 	movw	r1, #6162	@ 0x1812
 800a570:	4826      	ldr	r0, [pc, #152]	@ (800a60c <MX_GPIO_Init+0xd4>)
 800a572:	f7ff fc07 	bl	8009d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_busy_Pin|ENABLE_MUX_Pin);
 800a576:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800a57a:	4825      	ldr	r0, [pc, #148]	@ (800a610 <MX_GPIO_Init+0xd8>)
 800a57c:	f7ff fc02 	bl	8009d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ENABLE_RF_GPIO_Port, ENABLE_RF_Pin);
 800a580:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a584:	4823      	ldr	r0, [pc, #140]	@ (800a614 <MX_GPIO_Init+0xdc>)
 800a586:	f7ff fbfd 	bl	8009d84 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = PMU_INT_MCU_Pin|PDU_INT_MCU_Pin|IOU_INT_MCU_Pin|EJECT_Pin
 800a58a:	f24e 030c 	movw	r3, #57356	@ 0xe00c
 800a58e:	603b      	str	r3, [r7, #0]
                          |CAM_INT_MCU_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800a590:	2300      	movs	r3, #0
 800a592:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a594:	2300      	movs	r3, #0
 800a596:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a598:	463b      	mov	r3, r7
 800a59a:	4619      	mov	r1, r3
 800a59c:	481c      	ldr	r0, [pc, #112]	@ (800a610 <MX_GPIO_Init+0xd8>)
 800a59e:	f000 fb60 	bl	800ac62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin|LORA_IO0_Pin|BOARD_SEL_B_Pin|BOARD_SEL_A_Pin;
 800a5a2:	f641 0312 	movw	r3, #6162	@ 0x1812
 800a5a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5b8:	463b      	mov	r3, r7
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	4813      	ldr	r0, [pc, #76]	@ (800a60c <MX_GPIO_Init+0xd4>)
 800a5be:	f000 fb50 	bl	800ac62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_busy_Pin|ENABLE_MUX_Pin;
 800a5c2:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800a5c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5d8:	463b      	mov	r3, r7
 800a5da:	4619      	mov	r1, r3
 800a5dc:	480c      	ldr	r0, [pc, #48]	@ (800a610 <MX_GPIO_Init+0xd8>)
 800a5de:	f000 fb40 	bl	800ac62 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_RF_Pin;
 800a5e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5e6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ENABLE_RF_GPIO_Port, &GPIO_InitStruct);
 800a5f8:	463b      	mov	r3, r7
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4805      	ldr	r0, [pc, #20]	@ (800a614 <MX_GPIO_Init+0xdc>)
 800a5fe:	f000 fb30 	bl	800ac62 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800a602:	bf00      	nop
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	40020000 	.word	0x40020000
 800a610:	40020800 	.word	0x40020800
 800a614:	40020400 	.word	0x40020400

0800a618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a618:	b480      	push	{r7}
 800a61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a61c:	bf00      	nop
 800a61e:	e7fd      	b.n	800a61c <NMI_Handler+0x4>

0800a620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a620:	b480      	push	{r7}
 800a622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a624:	bf00      	nop
 800a626:	e7fd      	b.n	800a624 <HardFault_Handler+0x4>

0800a628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a62c:	bf00      	nop
 800a62e:	e7fd      	b.n	800a62c <MemManage_Handler+0x4>

0800a630 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a630:	b480      	push	{r7}
 800a632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a634:	bf00      	nop
 800a636:	e7fd      	b.n	800a634 <BusFault_Handler+0x4>

0800a638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a638:	b480      	push	{r7}
 800a63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a63c:	bf00      	nop
 800a63e:	e7fd      	b.n	800a63c <UsageFault_Handler+0x4>

0800a640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a644:	bf00      	nop
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a64e:	b480      	push	{r7}
 800a650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a652:	bf00      	nop
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a660:	bf00      	nop
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
	...

0800a66c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    g_systick_count++;
 800a670:	4b04      	ldr	r3, [pc, #16]	@ (800a684 <SysTick_Handler+0x18>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3301      	adds	r3, #1
 800a676:	4a03      	ldr	r2, [pc, #12]	@ (800a684 <SysTick_Handler+0x18>)
 800a678:	6013      	str	r3, [r2, #0]
	SCH_RunSystemTickTimer();
 800a67a:	f001 f989 	bl	800b990 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a67e:	bf00      	nop
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200063c8 	.word	0x200063c8

0800a688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (USART1);
 800a68c:	4802      	ldr	r0, [pc, #8]	@ (800a698 <USART1_IRQHandler+0x10>)
 800a68e:	f7f7 fd0f 	bl	80020b0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a692:	bf00      	nop
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	40011000 	.word	0x40011000

0800a69c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (USART2);
 800a6a0:	4802      	ldr	r0, [pc, #8]	@ (800a6ac <USART2_IRQHandler+0x10>)
 800a6a2:	f7f7 fd05 	bl	80020b0 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a6a6:	bf00      	nop
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	40004400 	.word	0x40004400

0800a6b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (USART3);
 800a6b4:	4802      	ldr	r0, [pc, #8]	@ (800a6c0 <USART3_IRQHandler+0x10>)
 800a6b6:	f7f7 fcfb 	bl	80020b0 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800a6ba:	bf00      	nop
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	40004800 	.word	0x40004800

0800a6c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	Uart_isr (UART4);
 800a6c8:	4802      	ldr	r0, [pc, #8]	@ (800a6d4 <UART4_IRQHandler+0x10>)
 800a6ca:	f7f7 fcf1 	bl	80020b0 <Uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800a6ce:	bf00      	nop
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	40004c00 	.word	0x40004c00

0800a6d8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr (UART5);
 800a6dc:	4802      	ldr	r0, [pc, #8]	@ (800a6e8 <UART5_IRQHandler+0x10>)
 800a6de:	f7f7 fce7 	bl	80020b0 <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800a6e2:	bf00      	nop
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	40005000 	.word	0x40005000

0800a6ec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr (USART6);
 800a6f0:	4802      	ldr	r0, [pc, #8]	@ (800a6fc <USART6_IRQHandler+0x10>)
 800a6f2:	f7f7 fcdd 	bl	80020b0 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800a6f6:	bf00      	nop
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	40011400 	.word	0x40011400

0800a700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
  return 1;
 800a704:	2301      	movs	r3, #1
}
 800a706:	4618      	mov	r0, r3
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <_kill>:

int _kill(int pid, int sig)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a71a:	f005 fb01 	bl	800fd20 <__errno>
 800a71e:	4603      	mov	r3, r0
 800a720:	2216      	movs	r2, #22
 800a722:	601a      	str	r2, [r3, #0]
  return -1;
 800a724:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <_exit>:

void _exit (int status)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a738:	f04f 31ff 	mov.w	r1, #4294967295
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f7ff ffe7 	bl	800a710 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a742:	bf00      	nop
 800a744:	e7fd      	b.n	800a742 <_exit+0x12>

0800a746 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b086      	sub	sp, #24
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a752:	2300      	movs	r3, #0
 800a754:	617b      	str	r3, [r7, #20]
 800a756:	e00a      	b.n	800a76e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a758:	f3af 8000 	nop.w
 800a75c:	4601      	mov	r1, r0
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	60ba      	str	r2, [r7, #8]
 800a764:	b2ca      	uxtb	r2, r1
 800a766:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	3301      	adds	r3, #1
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	429a      	cmp	r2, r3
 800a774:	dbf0      	blt.n	800a758 <_read+0x12>
  }

  return len;
 800a776:	687b      	ldr	r3, [r7, #4]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a78c:	2300      	movs	r3, #0
 800a78e:	617b      	str	r3, [r7, #20]
 800a790:	e009      	b.n	800a7a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	1c5a      	adds	r2, r3, #1
 800a796:	60ba      	str	r2, [r7, #8]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	617b      	str	r3, [r7, #20]
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	dbf1      	blt.n	800a792 <_write+0x12>
  }
  return len;
 800a7ae:	687b      	ldr	r3, [r7, #4]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <_close>:

int _close(int file)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a7c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a7e0:	605a      	str	r2, [r3, #4]
  return 0;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <_isatty>:

int _isatty(int file)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a7f8:	2301      	movs	r3, #1
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	60b9      	str	r1, [r7, #8]
 800a810:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a828:	4a14      	ldr	r2, [pc, #80]	@ (800a87c <_sbrk+0x5c>)
 800a82a:	4b15      	ldr	r3, [pc, #84]	@ (800a880 <_sbrk+0x60>)
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a834:	4b13      	ldr	r3, [pc, #76]	@ (800a884 <_sbrk+0x64>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d102      	bne.n	800a842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a83c:	4b11      	ldr	r3, [pc, #68]	@ (800a884 <_sbrk+0x64>)
 800a83e:	4a12      	ldr	r2, [pc, #72]	@ (800a888 <_sbrk+0x68>)
 800a840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a842:	4b10      	ldr	r3, [pc, #64]	@ (800a884 <_sbrk+0x64>)
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4413      	add	r3, r2
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d207      	bcs.n	800a860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a850:	f005 fa66 	bl	800fd20 <__errno>
 800a854:	4603      	mov	r3, r0
 800a856:	220c      	movs	r2, #12
 800a858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295
 800a85e:	e009      	b.n	800a874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a860:	4b08      	ldr	r3, [pc, #32]	@ (800a884 <_sbrk+0x64>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a866:	4b07      	ldr	r3, [pc, #28]	@ (800a884 <_sbrk+0x64>)
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4413      	add	r3, r2
 800a86e:	4a05      	ldr	r2, [pc, #20]	@ (800a884 <_sbrk+0x64>)
 800a870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a872:	68fb      	ldr	r3, [r7, #12]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20020000 	.word	0x20020000
 800a880:	00000400 	.word	0x00000400
 800a884:	200063cc 	.word	0x200063cc
 800a888:	20006730 	.word	0x20006730

0800a88c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a88c:	b480      	push	{r7}
 800a88e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a890:	4b06      	ldr	r3, [pc, #24]	@ (800a8ac <SystemInit+0x20>)
 800a892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a896:	4a05      	ldr	r2, [pc, #20]	@ (800a8ac <SystemInit+0x20>)
 800a898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a89c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a8a0:	bf00      	nop
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	e000ed00 	.word	0xe000ed00

0800a8b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a8b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a8e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a8b4:	f7ff ffea 	bl	800a88c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a8b8:	480c      	ldr	r0, [pc, #48]	@ (800a8ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a8ba:	490d      	ldr	r1, [pc, #52]	@ (800a8f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a8bc:	4a0d      	ldr	r2, [pc, #52]	@ (800a8f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a8be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a8c0:	e002      	b.n	800a8c8 <LoopCopyDataInit>

0800a8c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a8c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a8c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a8c6:	3304      	adds	r3, #4

0800a8c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a8c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a8ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a8cc:	d3f9      	bcc.n	800a8c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a8ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a8f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a8d0:	4c0a      	ldr	r4, [pc, #40]	@ (800a8fc <LoopFillZerobss+0x22>)
  movs r3, #0
 800a8d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a8d4:	e001      	b.n	800a8da <LoopFillZerobss>

0800a8d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a8d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a8d8:	3204      	adds	r2, #4

0800a8da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a8da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a8dc:	d3fb      	bcc.n	800a8d6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800a8de:	f005 fa25 	bl	800fd2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a8e2:	f7ff fa5f 	bl	8009da4 <main>
  bx  lr    
 800a8e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a8e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a8ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a8f0:	2000061c 	.word	0x2000061c
  ldr r2, =_sidata
 800a8f4:	08016528 	.word	0x08016528
  ldr r2, =_sbss
 800a8f8:	2000061c 	.word	0x2000061c
  ldr r4, =_ebss
 800a8fc:	20006730 	.word	0x20006730

0800a900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a900:	e7fe      	b.n	800a900 <ADC_IRQHandler>

0800a902 <LL_GPIO_SetOutputPin>:
{
 800a902:	b480      	push	{r7}
 800a904:	b083      	sub	sp, #12
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	619a      	str	r2, [r3, #24]
}
 800a912:	bf00      	nop
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <LL_GPIO_ResetOutputPin>:
{
 800a91e:	b480      	push	{r7}
 800a920:	b083      	sub	sp, #12
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	041a      	lsls	r2, r3, #16
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	619a      	str	r2, [r3, #24]
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <WDT_init>:




void WDT_init(void)
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	WDT_Current = 0;
 800a940:	4b03      	ldr	r3, [pc, #12]	@ (800a950 <WDT_init+0x14>)
 800a942:	2200      	movs	r2, #0
 800a944:	701a      	strb	r2, [r3, #0]

}
 800a946:	bf00      	nop
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	200063d0 	.word	0x200063d0

0800a954 <WDT_create_task>:

void WDT_create_task(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
	SCH_TASK_CreateTask(&wdt_task_context.taskHandle, &wdt_task_context.taskProperty);
 800a958:	4902      	ldr	r1, [pc, #8]	@ (800a964 <WDT_create_task+0x10>)
 800a95a:	4803      	ldr	r0, [pc, #12]	@ (800a968 <WDT_create_task+0x14>)
 800a95c:	f000 ffda 	bl	800b914 <SCH_TASK_CreateTask>

}
 800a960:	bf00      	nop
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20000448 	.word	0x20000448
 800a968:	20000444 	.word	0x20000444

0800a96c <status_wdt_update>:

void	status_wdt_update(void)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	af00      	add	r7, sp, #0

		if (WDT_Current){
 800a970:	4b14      	ldr	r3, [pc, #80]	@ (800a9c4 <status_wdt_update+0x58>)
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d012      	beq.n	800a99e <status_wdt_update+0x32>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800a978:	2001      	movs	r0, #1
 800a97a:	f000 ffb5 	bl	800b8e8 <SCH_TIM_HasCompleted>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d01d      	beq.n	800a9c0 <status_wdt_update+0x54>
			{
				WDT_Current = 0;
 800a984:	4b0f      	ldr	r3, [pc, #60]	@ (800a9c4 <status_wdt_update+0x58>)
 800a986:	2200      	movs	r2, #0
 800a988:	701a      	strb	r2, [r3, #0]
				LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800a98a:	2102      	movs	r1, #2
 800a98c:	480e      	ldr	r0, [pc, #56]	@ (800a9c8 <status_wdt_update+0x5c>)
 800a98e:	f7ff ffc6 	bl	800a91e <LL_GPIO_ResetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,LOW_PERIOD);	//restart
 800a992:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a996:	2001      	movs	r0, #1
 800a998:	f000 ff90 	bl	800b8bc <SCH_TIM_Start>
				WDT_Current = 1;
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
			}
	}
}
 800a99c:	e010      	b.n	800a9c0 <status_wdt_update+0x54>
			if (SCH_TIM_HasCompleted(SCH_TIM_WDT))
 800a99e:	2001      	movs	r0, #1
 800a9a0:	f000 ffa2 	bl	800b8e8 <SCH_TIM_HasCompleted>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00a      	beq.n	800a9c0 <status_wdt_update+0x54>
				WDT_Current = 1;
 800a9aa:	4b06      	ldr	r3, [pc, #24]	@ (800a9c4 <status_wdt_update+0x58>)
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	701a      	strb	r2, [r3, #0]
				LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 800a9b0:	2102      	movs	r1, #2
 800a9b2:	4805      	ldr	r0, [pc, #20]	@ (800a9c8 <status_wdt_update+0x5c>)
 800a9b4:	f7ff ffa5 	bl	800a902 <LL_GPIO_SetOutputPin>
				SCH_TIM_Start(SCH_TIM_WDT,HIGH_PERIOD);	//restart
 800a9b8:	21c8      	movs	r1, #200	@ 0xc8
 800a9ba:	2001      	movs	r0, #1
 800a9bc:	f000 ff7e 	bl	800b8bc <SCH_TIM_Start>
}
 800a9c0:	bf00      	nop
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	200063d0 	.word	0x200063d0
 800a9c8:	40020000 	.word	0x40020000

0800a9cc <LL_GPIO_SetPinMode>:
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b08b      	sub	sp, #44	@ 0x2c
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	fa93 f3a3 	rbit	r3, r3
 800a9e6:	613b      	str	r3, [r7, #16]
  return result;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a9f2:	2320      	movs	r3, #32
 800a9f4:	e003      	b.n	800a9fe <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	fab3 f383 	clz	r3, r3
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	2103      	movs	r1, #3
 800aa02:	fa01 f303 	lsl.w	r3, r1, r3
 800aa06:	43db      	mvns	r3, r3
 800aa08:	401a      	ands	r2, r3
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	fa93 f3a3 	rbit	r3, r3
 800aa14:	61fb      	str	r3, [r7, #28]
  return result;
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800aa20:	2320      	movs	r3, #32
 800aa22:	e003      	b.n	800aa2c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800aa24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa26:	fab3 f383 	clz	r3, r3
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	6879      	ldr	r1, [r7, #4]
 800aa30:	fa01 f303 	lsl.w	r3, r1, r3
 800aa34:	431a      	orrs	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	601a      	str	r2, [r3, #0]
}
 800aa3a:	bf00      	nop
 800aa3c:	372c      	adds	r7, #44	@ 0x2c
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <LL_GPIO_SetPinOutputType>:
{
 800aa46:	b480      	push	{r7}
 800aa48:	b085      	sub	sp, #20
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	43db      	mvns	r3, r3
 800aa5a:	401a      	ands	r2, r3
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	fb01 f303 	mul.w	r3, r1, r3
 800aa64:	431a      	orrs	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	605a      	str	r2, [r3, #4]
}
 800aa6a:	bf00      	nop
 800aa6c:	3714      	adds	r7, #20
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <LL_GPIO_SetPinSpeed>:
{
 800aa76:	b480      	push	{r7}
 800aa78:	b08b      	sub	sp, #44	@ 0x2c
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	fa93 f3a3 	rbit	r3, r3
 800aa90:	613b      	str	r3, [r7, #16]
  return result;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800aa9c:	2320      	movs	r3, #32
 800aa9e:	e003      	b.n	800aaa8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	fab3 f383 	clz	r3, r3
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	2103      	movs	r1, #3
 800aaac:	fa01 f303 	lsl.w	r3, r1, r3
 800aab0:	43db      	mvns	r3, r3
 800aab2:	401a      	ands	r2, r3
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	fa93 f3a3 	rbit	r3, r3
 800aabe:	61fb      	str	r3, [r7, #28]
  return result;
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800aac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800aaca:	2320      	movs	r3, #32
 800aacc:	e003      	b.n	800aad6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	fab3 f383 	clz	r3, r3
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	fa01 f303 	lsl.w	r3, r1, r3
 800aade:	431a      	orrs	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	609a      	str	r2, [r3, #8]
}
 800aae4:	bf00      	nop
 800aae6:	372c      	adds	r7, #44	@ 0x2c
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <LL_GPIO_SetPinPull>:
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b08b      	sub	sp, #44	@ 0x2c
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	68da      	ldr	r2, [r3, #12]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	fa93 f3a3 	rbit	r3, r3
 800ab0a:	613b      	str	r3, [r7, #16]
  return result;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d101      	bne.n	800ab1a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800ab16:	2320      	movs	r3, #32
 800ab18:	e003      	b.n	800ab22 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	fab3 f383 	clz	r3, r3
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	005b      	lsls	r3, r3, #1
 800ab24:	2103      	movs	r1, #3
 800ab26:	fa01 f303 	lsl.w	r3, r1, r3
 800ab2a:	43db      	mvns	r3, r3
 800ab2c:	401a      	ands	r2, r3
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	fa93 f3a3 	rbit	r3, r3
 800ab38:	61fb      	str	r3, [r7, #28]
  return result;
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800ab44:	2320      	movs	r3, #32
 800ab46:	e003      	b.n	800ab50 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800ab48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4a:	fab3 f383 	clz	r3, r3
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	fa01 f303 	lsl.w	r3, r1, r3
 800ab58:	431a      	orrs	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	60da      	str	r2, [r3, #12]
}
 800ab5e:	bf00      	nop
 800ab60:	372c      	adds	r7, #44	@ 0x2c
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <LL_GPIO_SetAFPin_0_7>:
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b08b      	sub	sp, #44	@ 0x2c
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	60f8      	str	r0, [r7, #12]
 800ab72:	60b9      	str	r1, [r7, #8]
 800ab74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6a1a      	ldr	r2, [r3, #32]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	fa93 f3a3 	rbit	r3, r3
 800ab84:	613b      	str	r3, [r7, #16]
  return result;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ab90:	2320      	movs	r3, #32
 800ab92:	e003      	b.n	800ab9c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	fab3 f383 	clz	r3, r3
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	210f      	movs	r1, #15
 800aba0:	fa01 f303 	lsl.w	r3, r1, r3
 800aba4:	43db      	mvns	r3, r3
 800aba6:	401a      	ands	r2, r3
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	fa93 f3a3 	rbit	r3, r3
 800abb2:	61fb      	str	r3, [r7, #28]
  return result;
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800abb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800abbe:	2320      	movs	r3, #32
 800abc0:	e003      	b.n	800abca <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800abc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc4:	fab3 f383 	clz	r3, r3
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	fa01 f303 	lsl.w	r3, r1, r3
 800abd2:	431a      	orrs	r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	621a      	str	r2, [r3, #32]
}
 800abd8:	bf00      	nop
 800abda:	372c      	adds	r7, #44	@ 0x2c
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <LL_GPIO_SetAFPin_8_15>:
{
 800abe4:	b480      	push	{r7}
 800abe6:	b08b      	sub	sp, #44	@ 0x2c
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	0a1b      	lsrs	r3, r3, #8
 800abf8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	fa93 f3a3 	rbit	r3, r3
 800ac00:	613b      	str	r3, [r7, #16]
  return result;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800ac0c:	2320      	movs	r3, #32
 800ac0e:	e003      	b.n	800ac18 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	fab3 f383 	clz	r3, r3
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	210f      	movs	r1, #15
 800ac1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac20:	43db      	mvns	r3, r3
 800ac22:	401a      	ands	r2, r3
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	0a1b      	lsrs	r3, r3, #8
 800ac28:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	fa93 f3a3 	rbit	r3, r3
 800ac30:	61fb      	str	r3, [r7, #28]
  return result;
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ac36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800ac3c:	2320      	movs	r3, #32
 800ac3e:	e003      	b.n	800ac48 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	fab3 f383 	clz	r3, r3
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac50:	431a      	orrs	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ac56:	bf00      	nop
 800ac58:	372c      	adds	r7, #44	@ 0x2c
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b08a      	sub	sp, #40	@ 0x28
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800ac70:	2300      	movs	r3, #0
 800ac72:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	fa93 f3a3 	rbit	r3, r3
 800ac80:	617b      	str	r3, [r7, #20]
  return result;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <LL_GPIO_Init+0x2e>
    return 32U;
 800ac8c:	2320      	movs	r3, #32
 800ac8e:	e003      	b.n	800ac98 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	fab3 f383 	clz	r3, r3
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ac9a:	e057      	b.n	800ad4c <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	2101      	movs	r1, #1
 800aca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca4:	fa01 f303 	lsl.w	r3, r1, r3
 800aca8:	4013      	ands	r3, r2
 800acaa:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d049      	beq.n	800ad46 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d003      	beq.n	800acc2 <LL_GPIO_Init+0x60>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d10d      	bne.n	800acde <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6a39      	ldr	r1, [r7, #32]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7ff fed3 	bl	800aa76 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	461a      	mov	r2, r3
 800acd6:	6a39      	ldr	r1, [r7, #32]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f7ff feb4 	bl	800aa46 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	461a      	mov	r2, r3
 800ace4:	6a39      	ldr	r1, [r7, #32]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7ff ff02 	bl	800aaf0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d121      	bne.n	800ad38 <LL_GPIO_Init+0xd6>
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	fa93 f3a3 	rbit	r3, r3
 800acfe:	60bb      	str	r3, [r7, #8]
  return result;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <LL_GPIO_Init+0xac>
    return 32U;
 800ad0a:	2320      	movs	r3, #32
 800ad0c:	e003      	b.n	800ad16 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	fab3 f383 	clz	r3, r3
 800ad14:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800ad16:	2b07      	cmp	r3, #7
 800ad18:	d807      	bhi.n	800ad2a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6a39      	ldr	r1, [r7, #32]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff ff21 	bl	800ab6a <LL_GPIO_SetAFPin_0_7>
 800ad28:	e006      	b.n	800ad38 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	6a39      	ldr	r1, [r7, #32]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff ff56 	bl	800abe4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	6a39      	ldr	r1, [r7, #32]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff fe43 	bl	800a9cc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad48:	3301      	adds	r3, #1
 800ad4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad52:	fa22 f303 	lsr.w	r3, r2, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1a0      	bne.n	800ac9c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3728      	adds	r7, #40	@ 0x28
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <LL_I2C_Enable>:
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f043 0201 	orr.w	r2, r3, #1
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	601a      	str	r2, [r3, #0]
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <LL_I2C_Disable>:
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f023 0201 	bic.w	r2, r3, #1
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	601a      	str	r2, [r3, #0]
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <LL_I2C_SetOwnAddress1>:
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800adb8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800adbc:	68b9      	ldr	r1, [r7, #8]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	430a      	orrs	r2, r1
 800adc2:	431a      	orrs	r2, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	609a      	str	r2, [r3, #8]
}
 800adc8:	bf00      	nop
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <LL_I2C_ConfigSpeed>:
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
 800ade0:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800ade6:	2300      	movs	r3, #0
 800ade8:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	4a42      	ldr	r2, [pc, #264]	@ (800aef8 <LL_I2C_ConfigSpeed+0x124>)
 800adee:	fba2 2303 	umull	r2, r3, r2, r3
 800adf2:	0c9b      	lsrs	r3, r3, #18
 800adf4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	431a      	orrs	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	493a      	ldr	r1, [pc, #232]	@ (800aefc <LL_I2C_ConfigSpeed+0x128>)
 800ae12:	428b      	cmp	r3, r1
 800ae14:	d802      	bhi.n	800ae1c <LL_I2C_ConfigSpeed+0x48>
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	e009      	b.n	800ae30 <LL_I2C_ConfigSpeed+0x5c>
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800ae22:	fb01 f303 	mul.w	r3, r1, r3
 800ae26:	4936      	ldr	r1, [pc, #216]	@ (800af00 <LL_I2C_ConfigSpeed+0x12c>)
 800ae28:	fba1 1303 	umull	r1, r3, r1, r3
 800ae2c:	099b      	lsrs	r3, r3, #6
 800ae2e:	3301      	adds	r3, #1
 800ae30:	431a      	orrs	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a30      	ldr	r2, [pc, #192]	@ (800aefc <LL_I2C_ConfigSpeed+0x128>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d939      	bls.n	800aeb2 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d117      	bne.n	800ae74 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	4613      	mov	r3, r2
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	4413      	add	r3, r2
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae52:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d009      	beq.n	800ae6e <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	4413      	add	r3, r2
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800ae68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae6c:	e01d      	b.n	800aeaa <LL_I2C_ConfigSpeed+0xd6>
 800ae6e:	f248 0301 	movw	r3, #32769	@ 0x8001
 800ae72:	e01a      	b.n	800aeaa <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	4613      	mov	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	009a      	lsls	r2, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae86:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00b      	beq.n	800aea6 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009a      	lsls	r2, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800aea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aea4:	e001      	b.n	800aeaa <LL_I2C_ConfigSpeed+0xd6>
 800aea6:	f248 0301 	movw	r3, #32769	@ 0x8001
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	617b      	str	r3, [r7, #20]
 800aeb0:	e011      	b.n	800aed6 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	fbb2 f2f3 	udiv	r2, r2, r3
 800aebc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aec0:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d005      	beq.n	800aed2 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800aeca:	68ba      	ldr	r2, [r7, #8]
 800aecc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed0:	e000      	b.n	800aed4 <LL_I2C_ConfigSpeed+0x100>
 800aed2:	2304      	movs	r3, #4
 800aed4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 800aede:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	431a      	orrs	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	61da      	str	r2, [r3, #28]
}
 800aeea:	bf00      	nop
 800aeec:	371c      	adds	r7, #28
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	431bde83 	.word	0x431bde83
 800aefc:	000186a0 	.word	0x000186a0
 800af00:	10624dd3 	.word	0x10624dd3

0800af04 <LL_I2C_SetMode>:
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f023 021a 	bic.w	r2, r3, #26
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	431a      	orrs	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	601a      	str	r2, [r3, #0]
}
 800af1e:	bf00      	nop
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <LL_I2C_AcknowledgeNextData>:
{
 800af2a:	b480      	push	{r7}
 800af2c:	b083      	sub	sp, #12
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	431a      	orrs	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	601a      	str	r2, [r3, #0]
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7ff ff12 	bl	800ad84 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800af60:	f107 0308 	add.w	r3, r7, #8
 800af64:	4618      	mov	r0, r3
 800af66:	f000 f895 	bl	800b094 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800af6a:	6939      	ldr	r1, [r7, #16]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7ff ff2d 	bl	800add4 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68d9      	ldr	r1, [r3, #12]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	461a      	mov	r2, r3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f7ff ff0d 	bl	800ada4 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff ffb7 	bl	800af04 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff fee4 	bl	800ad64 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	4619      	mov	r1, r3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7ff ffc1 	bl	800af2a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <LL_RCC_GetSysClkSource>:
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800afb8:	4b04      	ldr	r3, [pc, #16]	@ (800afcc <LL_RCC_GetSysClkSource+0x18>)
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f003 030c 	and.w	r3, r3, #12
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	40023800 	.word	0x40023800

0800afd0 <LL_RCC_GetAHBPrescaler>:
{
 800afd0:	b480      	push	{r7}
 800afd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800afd4:	4b04      	ldr	r3, [pc, #16]	@ (800afe8 <LL_RCC_GetAHBPrescaler+0x18>)
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	40023800 	.word	0x40023800

0800afec <LL_RCC_GetAPB1Prescaler>:
{
 800afec:	b480      	push	{r7}
 800afee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800aff0:	4b04      	ldr	r3, [pc, #16]	@ (800b004 <LL_RCC_GetAPB1Prescaler+0x18>)
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800aff8:	4618      	mov	r0, r3
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	40023800 	.word	0x40023800

0800b008 <LL_RCC_GetAPB2Prescaler>:
{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b00c:	4b04      	ldr	r3, [pc, #16]	@ (800b020 <LL_RCC_GetAPB2Prescaler+0x18>)
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800b014:	4618      	mov	r0, r3
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	40023800 	.word	0x40023800

0800b024 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b024:	b480      	push	{r7}
 800b026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b028:	4b04      	ldr	r3, [pc, #16]	@ (800b03c <LL_RCC_PLL_GetMainSource+0x18>)
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800b030:	4618      	mov	r0, r3
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	40023800 	.word	0x40023800

0800b040 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b044:	4b04      	ldr	r3, [pc, #16]	@ (800b058 <LL_RCC_PLL_GetN+0x18>)
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	099b      	lsrs	r3, r3, #6
 800b04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800b04e:	4618      	mov	r0, r3
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	40023800 	.word	0x40023800

0800b05c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800b060:	4b04      	ldr	r3, [pc, #16]	@ (800b074 <LL_RCC_PLL_GetP+0x18>)
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800b068:	4618      	mov	r0, r3
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	40023800 	.word	0x40023800

0800b078 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b078:	b480      	push	{r7}
 800b07a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b07c:	4b04      	ldr	r3, [pc, #16]	@ (800b090 <LL_RCC_PLL_GetDivider+0x18>)
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800b084:	4618      	mov	r0, r3
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	40023800 	.word	0x40023800

0800b094 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800b09c:	f000 f820 	bl	800b0e0 <RCC_GetSystemClockFreq>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 f840 	bl	800b130 <RCC_GetHCLKClockFreq>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 f84e 	bl	800b15c <RCC_GetPCLK1ClockFreq>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 f85a 	bl	800b184 <RCC_GetPCLK2ClockFreq>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	60da      	str	r2, [r3, #12]
}
 800b0d6:	bf00      	nop
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b0ea:	f7ff ff63 	bl	800afb4 <LL_RCC_GetSysClkSource>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b08      	cmp	r3, #8
 800b0f2:	d00c      	beq.n	800b10e <RCC_GetSystemClockFreq+0x2e>
 800b0f4:	2b08      	cmp	r3, #8
 800b0f6:	d80f      	bhi.n	800b118 <RCC_GetSystemClockFreq+0x38>
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <RCC_GetSystemClockFreq+0x22>
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	d003      	beq.n	800b108 <RCC_GetSystemClockFreq+0x28>
 800b100:	e00a      	b.n	800b118 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b102:	4b09      	ldr	r3, [pc, #36]	@ (800b128 <RCC_GetSystemClockFreq+0x48>)
 800b104:	607b      	str	r3, [r7, #4]
      break;
 800b106:	e00a      	b.n	800b11e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b108:	4b08      	ldr	r3, [pc, #32]	@ (800b12c <RCC_GetSystemClockFreq+0x4c>)
 800b10a:	607b      	str	r3, [r7, #4]
      break;
 800b10c:	e007      	b.n	800b11e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800b10e:	2008      	movs	r0, #8
 800b110:	f000 f84c 	bl	800b1ac <RCC_PLL_GetFreqDomain_SYS>
 800b114:	6078      	str	r0, [r7, #4]
      break;
 800b116:	e002      	b.n	800b11e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800b118:	4b03      	ldr	r3, [pc, #12]	@ (800b128 <RCC_GetSystemClockFreq+0x48>)
 800b11a:	607b      	str	r3, [r7, #4]
      break;
 800b11c:	bf00      	nop
  }

  return frequency;
 800b11e:	687b      	ldr	r3, [r7, #4]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	00f42400 	.word	0x00f42400
 800b12c:	007a1200 	.word	0x007a1200

0800b130 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b138:	f7ff ff4a 	bl	800afd0 <LL_RCC_GetAHBPrescaler>
 800b13c:	4603      	mov	r3, r0
 800b13e:	091b      	lsrs	r3, r3, #4
 800b140:	f003 030f 	and.w	r3, r3, #15
 800b144:	4a04      	ldr	r2, [pc, #16]	@ (800b158 <RCC_GetHCLKClockFreq+0x28>)
 800b146:	5cd3      	ldrb	r3, [r2, r3]
 800b148:	461a      	mov	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	40d3      	lsrs	r3, r2
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	080160d4 	.word	0x080160d4

0800b15c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b164:	f7ff ff42 	bl	800afec <LL_RCC_GetAPB1Prescaler>
 800b168:	4603      	mov	r3, r0
 800b16a:	0a9b      	lsrs	r3, r3, #10
 800b16c:	4a04      	ldr	r2, [pc, #16]	@ (800b180 <RCC_GetPCLK1ClockFreq+0x24>)
 800b16e:	5cd3      	ldrb	r3, [r2, r3]
 800b170:	461a      	mov	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	40d3      	lsrs	r3, r2
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	080160e4 	.word	0x080160e4

0800b184 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800b18c:	f7ff ff3c 	bl	800b008 <LL_RCC_GetAPB2Prescaler>
 800b190:	4603      	mov	r3, r0
 800b192:	0b5b      	lsrs	r3, r3, #13
 800b194:	4a04      	ldr	r2, [pc, #16]	@ (800b1a8 <RCC_GetPCLK2ClockFreq+0x24>)
 800b196:	5cd3      	ldrb	r3, [r2, r3]
 800b198:	461a      	mov	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	40d3      	lsrs	r3, r2
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	080160e4 	.word	0x080160e4

0800b1ac <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b087      	sub	sp, #28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	617b      	str	r3, [r7, #20]
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	60fb      	str	r3, [r7, #12]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b1c0:	f7ff ff30 	bl	800b024 <LL_RCC_PLL_GetMainSource>
 800b1c4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d004      	beq.n	800b1d6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1d2:	d003      	beq.n	800b1dc <RCC_PLL_GetFreqDomain_SYS+0x30>
 800b1d4:	e005      	b.n	800b1e2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800b1d6:	4b12      	ldr	r3, [pc, #72]	@ (800b220 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b1d8:	617b      	str	r3, [r7, #20]
      break;
 800b1da:	e005      	b.n	800b1e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800b1dc:	4b11      	ldr	r3, [pc, #68]	@ (800b224 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800b1de:	617b      	str	r3, [r7, #20]
      break;
 800b1e0:	e002      	b.n	800b1e8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800b1e2:	4b0f      	ldr	r3, [pc, #60]	@ (800b220 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b1e4:	617b      	str	r3, [r7, #20]
      break;
 800b1e6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b08      	cmp	r3, #8
 800b1ec:	d113      	bne.n	800b216 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800b1ee:	f7ff ff43 	bl	800b078 <LL_RCC_PLL_GetDivider>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	fbb3 f4f2 	udiv	r4, r3, r2
 800b1fa:	f7ff ff21 	bl	800b040 <LL_RCC_PLL_GetN>
 800b1fe:	4603      	mov	r3, r0
 800b200:	fb03 f404 	mul.w	r4, r3, r4
 800b204:	f7ff ff2a 	bl	800b05c <LL_RCC_PLL_GetP>
 800b208:	4603      	mov	r3, r0
 800b20a:	0c1b      	lsrs	r3, r3, #16
 800b20c:	3301      	adds	r3, #1
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	fbb4 f3f3 	udiv	r3, r4, r3
 800b214:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800b216:	693b      	ldr	r3, [r7, #16]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd90      	pop	{r4, r7, pc}
 800b220:	00f42400 	.word	0x00f42400
 800b224:	007a1200 	.word	0x007a1200

0800b228 <LL_USART_IsEnabled>:
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b23c:	bf0c      	ite	eq
 800b23e:	2301      	moveq	r3, #1
 800b240:	2300      	movne	r3, #0
 800b242:	b2db      	uxtb	r3, r3
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <LL_USART_SetStopBitsLength>:
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	431a      	orrs	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	611a      	str	r2, [r3, #16]
}
 800b26a:	bf00      	nop
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <LL_USART_SetHWFlowCtrl>:
{
 800b276:	b480      	push	{r7}
 800b278:	b083      	sub	sp, #12
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	431a      	orrs	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	615a      	str	r2, [r3, #20]
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <LL_USART_SetBaudRate>:
{
 800b29c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2a0:	b0c0      	sub	sp, #256	@ 0x100
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b2a8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800b2ac:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800b2b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800b2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2bc:	f040 810c 	bne.w	800b4d8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800b2c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b2ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b2ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b2d2:	4622      	mov	r2, r4
 800b2d4:	462b      	mov	r3, r5
 800b2d6:	1891      	adds	r1, r2, r2
 800b2d8:	6639      	str	r1, [r7, #96]	@ 0x60
 800b2da:	415b      	adcs	r3, r3
 800b2dc:	667b      	str	r3, [r7, #100]	@ 0x64
 800b2de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	eb12 0801 	adds.w	r8, r2, r1
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	eb43 0901 	adc.w	r9, r3, r1
 800b2ee:	f04f 0200 	mov.w	r2, #0
 800b2f2:	f04f 0300 	mov.w	r3, #0
 800b2f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b2fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b2fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b302:	4690      	mov	r8, r2
 800b304:	4699      	mov	r9, r3
 800b306:	4623      	mov	r3, r4
 800b308:	eb18 0303 	adds.w	r3, r8, r3
 800b30c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b310:	462b      	mov	r3, r5
 800b312:	eb49 0303 	adc.w	r3, r9, r3
 800b316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b31a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b31e:	2200      	movs	r2, #0
 800b320:	469a      	mov	sl, r3
 800b322:	4693      	mov	fp, r2
 800b324:	eb1a 030a 	adds.w	r3, sl, sl
 800b328:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b32a:	eb4b 030b 	adc.w	r3, fp, fp
 800b32e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b330:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b338:	f7f5 fcb6 	bl	8000ca8 <__aeabi_uldivmod>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	4b64      	ldr	r3, [pc, #400]	@ (800b4d4 <LL_USART_SetBaudRate+0x238>)
 800b342:	fba3 2302 	umull	r2, r3, r3, r2
 800b346:	095b      	lsrs	r3, r3, #5
 800b348:	b29b      	uxth	r3, r3
 800b34a:	011b      	lsls	r3, r3, #4
 800b34c:	b29c      	uxth	r4, r3
 800b34e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b352:	2200      	movs	r2, #0
 800b354:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b358:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b35c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800b360:	4642      	mov	r2, r8
 800b362:	464b      	mov	r3, r9
 800b364:	1891      	adds	r1, r2, r2
 800b366:	6539      	str	r1, [r7, #80]	@ 0x50
 800b368:	415b      	adcs	r3, r3
 800b36a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b36c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b370:	4641      	mov	r1, r8
 800b372:	1851      	adds	r1, r2, r1
 800b374:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b376:	4649      	mov	r1, r9
 800b378:	414b      	adcs	r3, r1
 800b37a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b37c:	f04f 0200 	mov.w	r2, #0
 800b380:	f04f 0300 	mov.w	r3, #0
 800b384:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800b388:	4659      	mov	r1, fp
 800b38a:	00cb      	lsls	r3, r1, #3
 800b38c:	4651      	mov	r1, sl
 800b38e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b392:	4651      	mov	r1, sl
 800b394:	00ca      	lsls	r2, r1, #3
 800b396:	4610      	mov	r0, r2
 800b398:	4619      	mov	r1, r3
 800b39a:	4603      	mov	r3, r0
 800b39c:	4642      	mov	r2, r8
 800b39e:	189b      	adds	r3, r3, r2
 800b3a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3a4:	464b      	mov	r3, r9
 800b3a6:	460a      	mov	r2, r1
 800b3a8:	eb42 0303 	adc.w	r3, r2, r3
 800b3ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b3b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b3ba:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800b3be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	18db      	adds	r3, r3, r3
 800b3c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	eb42 0303 	adc.w	r3, r2, r3
 800b3ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b3d4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800b3d8:	f7f5 fc66 	bl	8000ca8 <__aeabi_uldivmod>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4b3c      	ldr	r3, [pc, #240]	@ (800b4d4 <LL_USART_SetBaudRate+0x238>)
 800b3e4:	fba3 2301 	umull	r2, r3, r3, r1
 800b3e8:	095b      	lsrs	r3, r3, #5
 800b3ea:	2264      	movs	r2, #100	@ 0x64
 800b3ec:	fb02 f303 	mul.w	r3, r2, r3
 800b3f0:	1acb      	subs	r3, r1, r3
 800b3f2:	00db      	lsls	r3, r3, #3
 800b3f4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b3f8:	4b36      	ldr	r3, [pc, #216]	@ (800b4d4 <LL_USART_SetBaudRate+0x238>)
 800b3fa:	fba3 2302 	umull	r2, r3, r3, r2
 800b3fe:	095b      	lsrs	r3, r3, #5
 800b400:	b29b      	uxth	r3, r3
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	b29b      	uxth	r3, r3
 800b406:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	4423      	add	r3, r4
 800b40e:	b29c      	uxth	r4, r3
 800b410:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b414:	2200      	movs	r2, #0
 800b416:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b41a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b41e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800b422:	4642      	mov	r2, r8
 800b424:	464b      	mov	r3, r9
 800b426:	1891      	adds	r1, r2, r2
 800b428:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b42a:	415b      	adcs	r3, r3
 800b42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b42e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b432:	4641      	mov	r1, r8
 800b434:	1851      	adds	r1, r2, r1
 800b436:	6339      	str	r1, [r7, #48]	@ 0x30
 800b438:	4649      	mov	r1, r9
 800b43a:	414b      	adcs	r3, r1
 800b43c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b43e:	f04f 0200 	mov.w	r2, #0
 800b442:	f04f 0300 	mov.w	r3, #0
 800b446:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b44a:	4659      	mov	r1, fp
 800b44c:	00cb      	lsls	r3, r1, #3
 800b44e:	4651      	mov	r1, sl
 800b450:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b454:	4651      	mov	r1, sl
 800b456:	00ca      	lsls	r2, r1, #3
 800b458:	4610      	mov	r0, r2
 800b45a:	4619      	mov	r1, r3
 800b45c:	4603      	mov	r3, r0
 800b45e:	4642      	mov	r2, r8
 800b460:	189b      	adds	r3, r3, r2
 800b462:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b466:	464b      	mov	r3, r9
 800b468:	460a      	mov	r2, r1
 800b46a:	eb42 0303 	adc.w	r3, r2, r3
 800b46e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b472:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b476:	2200      	movs	r2, #0
 800b478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b47c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800b480:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b484:	460b      	mov	r3, r1
 800b486:	18db      	adds	r3, r3, r3
 800b488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b48a:	4613      	mov	r3, r2
 800b48c:	eb42 0303 	adc.w	r3, r2, r3
 800b490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b496:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800b49a:	f7f5 fc05 	bl	8000ca8 <__aeabi_uldivmod>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d4 <LL_USART_SetBaudRate+0x238>)
 800b4a4:	fba3 1302 	umull	r1, r3, r3, r2
 800b4a8:	095b      	lsrs	r3, r3, #5
 800b4aa:	2164      	movs	r1, #100	@ 0x64
 800b4ac:	fb01 f303 	mul.w	r3, r1, r3
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	3332      	adds	r3, #50	@ 0x32
 800b4b6:	4a07      	ldr	r2, [pc, #28]	@ (800b4d4 <LL_USART_SetBaudRate+0x238>)
 800b4b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4bc:	095b      	lsrs	r3, r3, #5
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	f003 0307 	and.w	r3, r3, #7
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	4423      	add	r3, r4
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4d0:	609a      	str	r2, [r3, #8]
}
 800b4d2:	e108      	b.n	800b6e6 <LL_USART_SetBaudRate+0x44a>
 800b4d4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800b4d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b4e2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b4e6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800b4ea:	4642      	mov	r2, r8
 800b4ec:	464b      	mov	r3, r9
 800b4ee:	1891      	adds	r1, r2, r2
 800b4f0:	6239      	str	r1, [r7, #32]
 800b4f2:	415b      	adcs	r3, r3
 800b4f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4fa:	4641      	mov	r1, r8
 800b4fc:	1854      	adds	r4, r2, r1
 800b4fe:	4649      	mov	r1, r9
 800b500:	eb43 0501 	adc.w	r5, r3, r1
 800b504:	f04f 0200 	mov.w	r2, #0
 800b508:	f04f 0300 	mov.w	r3, #0
 800b50c:	00eb      	lsls	r3, r5, #3
 800b50e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b512:	00e2      	lsls	r2, r4, #3
 800b514:	4614      	mov	r4, r2
 800b516:	461d      	mov	r5, r3
 800b518:	4643      	mov	r3, r8
 800b51a:	18e3      	adds	r3, r4, r3
 800b51c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b520:	464b      	mov	r3, r9
 800b522:	eb45 0303 	adc.w	r3, r5, r3
 800b526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b52a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b52e:	2200      	movs	r2, #0
 800b530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b534:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800b538:	f04f 0200 	mov.w	r2, #0
 800b53c:	f04f 0300 	mov.w	r3, #0
 800b540:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800b544:	4629      	mov	r1, r5
 800b546:	008b      	lsls	r3, r1, #2
 800b548:	4621      	mov	r1, r4
 800b54a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b54e:	4621      	mov	r1, r4
 800b550:	008a      	lsls	r2, r1, #2
 800b552:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800b556:	f7f5 fba7 	bl	8000ca8 <__aeabi_uldivmod>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	4b65      	ldr	r3, [pc, #404]	@ (800b6f4 <LL_USART_SetBaudRate+0x458>)
 800b560:	fba3 2302 	umull	r2, r3, r3, r2
 800b564:	095b      	lsrs	r3, r3, #5
 800b566:	b29b      	uxth	r3, r3
 800b568:	011b      	lsls	r3, r3, #4
 800b56a:	b29c      	uxth	r4, r3
 800b56c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b570:	2200      	movs	r2, #0
 800b572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b576:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b57a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800b57e:	4642      	mov	r2, r8
 800b580:	464b      	mov	r3, r9
 800b582:	1891      	adds	r1, r2, r2
 800b584:	61b9      	str	r1, [r7, #24]
 800b586:	415b      	adcs	r3, r3
 800b588:	61fb      	str	r3, [r7, #28]
 800b58a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b58e:	4641      	mov	r1, r8
 800b590:	1851      	adds	r1, r2, r1
 800b592:	6139      	str	r1, [r7, #16]
 800b594:	4649      	mov	r1, r9
 800b596:	414b      	adcs	r3, r1
 800b598:	617b      	str	r3, [r7, #20]
 800b59a:	f04f 0200 	mov.w	r2, #0
 800b59e:	f04f 0300 	mov.w	r3, #0
 800b5a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b5a6:	4659      	mov	r1, fp
 800b5a8:	00cb      	lsls	r3, r1, #3
 800b5aa:	4651      	mov	r1, sl
 800b5ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5b0:	4651      	mov	r1, sl
 800b5b2:	00ca      	lsls	r2, r1, #3
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	4642      	mov	r2, r8
 800b5bc:	189b      	adds	r3, r3, r2
 800b5be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b5c2:	464b      	mov	r3, r9
 800b5c4:	460a      	mov	r2, r1
 800b5c6:	eb42 0303 	adc.w	r3, r2, r3
 800b5ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b5ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b5d8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800b5dc:	f04f 0200 	mov.w	r2, #0
 800b5e0:	f04f 0300 	mov.w	r3, #0
 800b5e4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800b5e8:	4649      	mov	r1, r9
 800b5ea:	008b      	lsls	r3, r1, #2
 800b5ec:	4641      	mov	r1, r8
 800b5ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5f2:	4641      	mov	r1, r8
 800b5f4:	008a      	lsls	r2, r1, #2
 800b5f6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800b5fa:	f7f5 fb55 	bl	8000ca8 <__aeabi_uldivmod>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	4611      	mov	r1, r2
 800b604:	4b3b      	ldr	r3, [pc, #236]	@ (800b6f4 <LL_USART_SetBaudRate+0x458>)
 800b606:	fba3 2301 	umull	r2, r3, r3, r1
 800b60a:	095b      	lsrs	r3, r3, #5
 800b60c:	2264      	movs	r2, #100	@ 0x64
 800b60e:	fb02 f303 	mul.w	r3, r2, r3
 800b612:	1acb      	subs	r3, r1, r3
 800b614:	011b      	lsls	r3, r3, #4
 800b616:	3332      	adds	r3, #50	@ 0x32
 800b618:	4a36      	ldr	r2, [pc, #216]	@ (800b6f4 <LL_USART_SetBaudRate+0x458>)
 800b61a:	fba2 2303 	umull	r2, r3, r2, r3
 800b61e:	095b      	lsrs	r3, r3, #5
 800b620:	b29b      	uxth	r3, r3
 800b622:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b626:	b29b      	uxth	r3, r3
 800b628:	4423      	add	r3, r4
 800b62a:	b29c      	uxth	r4, r3
 800b62c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b630:	2200      	movs	r2, #0
 800b632:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b634:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b636:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b63a:	4642      	mov	r2, r8
 800b63c:	464b      	mov	r3, r9
 800b63e:	1891      	adds	r1, r2, r2
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	415b      	adcs	r3, r3
 800b644:	60fb      	str	r3, [r7, #12]
 800b646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b64a:	4641      	mov	r1, r8
 800b64c:	1851      	adds	r1, r2, r1
 800b64e:	6039      	str	r1, [r7, #0]
 800b650:	4649      	mov	r1, r9
 800b652:	414b      	adcs	r3, r1
 800b654:	607b      	str	r3, [r7, #4]
 800b656:	f04f 0200 	mov.w	r2, #0
 800b65a:	f04f 0300 	mov.w	r3, #0
 800b65e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b662:	4659      	mov	r1, fp
 800b664:	00cb      	lsls	r3, r1, #3
 800b666:	4651      	mov	r1, sl
 800b668:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b66c:	4651      	mov	r1, sl
 800b66e:	00ca      	lsls	r2, r1, #3
 800b670:	4610      	mov	r0, r2
 800b672:	4619      	mov	r1, r3
 800b674:	4603      	mov	r3, r0
 800b676:	4642      	mov	r2, r8
 800b678:	189b      	adds	r3, r3, r2
 800b67a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b67c:	464b      	mov	r3, r9
 800b67e:	460a      	mov	r2, r1
 800b680:	eb42 0303 	adc.w	r3, r2, r3
 800b684:	677b      	str	r3, [r7, #116]	@ 0x74
 800b686:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b68a:	2200      	movs	r2, #0
 800b68c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b68e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b690:	f04f 0200 	mov.w	r2, #0
 800b694:	f04f 0300 	mov.w	r3, #0
 800b698:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800b69c:	4649      	mov	r1, r9
 800b69e:	008b      	lsls	r3, r1, #2
 800b6a0:	4641      	mov	r1, r8
 800b6a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6a6:	4641      	mov	r1, r8
 800b6a8:	008a      	lsls	r2, r1, #2
 800b6aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800b6ae:	f7f5 fafb 	bl	8000ca8 <__aeabi_uldivmod>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b6f4 <LL_USART_SetBaudRate+0x458>)
 800b6b8:	fba3 1302 	umull	r1, r3, r3, r2
 800b6bc:	095b      	lsrs	r3, r3, #5
 800b6be:	2164      	movs	r1, #100	@ 0x64
 800b6c0:	fb01 f303 	mul.w	r3, r1, r3
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	011b      	lsls	r3, r3, #4
 800b6c8:	3332      	adds	r3, #50	@ 0x32
 800b6ca:	4a0a      	ldr	r2, [pc, #40]	@ (800b6f4 <LL_USART_SetBaudRate+0x458>)
 800b6cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d0:	095b      	lsrs	r3, r3, #5
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	f003 030f 	and.w	r3, r3, #15
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	4423      	add	r3, r4
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	461a      	mov	r2, r3
 800b6e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b6e4:	609a      	str	r2, [r3, #8]
}
 800b6e6:	bf00      	nop
 800b6e8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6f2:	bf00      	nop
 800b6f4:	51eb851f 	.word	0x51eb851f

0800b6f8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800b706:	2300      	movs	r3, #0
 800b708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff fd8c 	bl	800b228 <LL_USART_IsEnabled>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d15e      	bne.n	800b7d4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800b71e:	f023 030c 	bic.w	r3, r3, #12
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	6851      	ldr	r1, [r2, #4]
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	68d2      	ldr	r2, [r2, #12]
 800b72a:	4311      	orrs	r1, r2
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	6912      	ldr	r2, [r2, #16]
 800b730:	4311      	orrs	r1, r2
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	6992      	ldr	r2, [r2, #24]
 800b736:	430a      	orrs	r2, r1
 800b738:	431a      	orrs	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7ff fd83 	bl	800b250 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7ff fd90 	bl	800b276 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800b756:	f107 0308 	add.w	r3, r7, #8
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7ff fc9a 	bl	800b094 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a1f      	ldr	r2, [pc, #124]	@ (800b7e0 <LL_USART_Init+0xe8>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d102      	bne.n	800b76e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	61bb      	str	r3, [r7, #24]
 800b76c:	e021      	b.n	800b7b2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a1c      	ldr	r2, [pc, #112]	@ (800b7e4 <LL_USART_Init+0xec>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d102      	bne.n	800b77c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	61bb      	str	r3, [r7, #24]
 800b77a:	e01a      	b.n	800b7b2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a1a      	ldr	r2, [pc, #104]	@ (800b7e8 <LL_USART_Init+0xf0>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d102      	bne.n	800b78a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	61bb      	str	r3, [r7, #24]
 800b788:	e013      	b.n	800b7b2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a17      	ldr	r2, [pc, #92]	@ (800b7ec <LL_USART_Init+0xf4>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d102      	bne.n	800b798 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	61bb      	str	r3, [r7, #24]
 800b796:	e00c      	b.n	800b7b2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a15      	ldr	r2, [pc, #84]	@ (800b7f0 <LL_USART_Init+0xf8>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d102      	bne.n	800b7a6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	61bb      	str	r3, [r7, #24]
 800b7a4:	e005      	b.n	800b7b2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a12      	ldr	r2, [pc, #72]	@ (800b7f4 <LL_USART_Init+0xfc>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d101      	bne.n	800b7b2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00d      	beq.n	800b7d4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d009      	beq.n	800b7d4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800b7cc:	69b9      	ldr	r1, [r7, #24]
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff fd64 	bl	800b29c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800b7d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3720      	adds	r7, #32
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	40011000 	.word	0x40011000
 800b7e4:	40004400 	.word	0x40004400
 800b7e8:	40004800 	.word	0x40004800
 800b7ec:	40011400 	.word	0x40011400
 800b7f0:	40004c00 	.word	0x40004c00
 800b7f4:	40005000 	.word	0x40005000

0800b7f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	fbb2 f3f3 	udiv	r3, r2, r3
 800b80a:	4a07      	ldr	r2, [pc, #28]	@ (800b828 <LL_InitTick+0x30>)
 800b80c:	3b01      	subs	r3, #1
 800b80e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800b810:	4b05      	ldr	r3, [pc, #20]	@ (800b828 <LL_InitTick+0x30>)
 800b812:	2200      	movs	r2, #0
 800b814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b816:	4b04      	ldr	r3, [pc, #16]	@ (800b828 <LL_InitTick+0x30>)
 800b818:	2205      	movs	r2, #5
 800b81a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	e000e010 	.word	0xe000e010

0800b82c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800b834:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff ffdd 	bl	800b7f8 <LL_InitTick>
}
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800b850:	4a04      	ldr	r2, [pc, #16]	@ (800b864 <LL_SetSystemCoreClock+0x1c>)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6013      	str	r3, [r2, #0]
}
 800b856:	bf00      	nop
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	20000440 	.word	0x20000440

0800b868 <SCH_Initialize>:
  * @param  None
  * @retval None
  *****************************************************************************/

void SCH_Initialize(void)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	af00      	add	r7, sp, #0
  s_SystemTick = RESET;
 800b86c:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a4 <SCH_Initialize+0x3c>)
 800b86e:	2200      	movs	r2, #0
 800b870:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET;
 800b872:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a8 <SCH_Initialize+0x40>)
 800b874:	2200      	movs	r2, #0
 800b876:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers = RESET;
 800b878:	4b0c      	ldr	r3, [pc, #48]	@ (800b8ac <SCH_Initialize+0x44>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	701a      	strb	r2, [r3, #0]

  // Initial Scheduler Context
  memset((uint8_t*)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 800b87e:	22f0      	movs	r2, #240	@ 0xf0
 800b880:	2100      	movs	r1, #0
 800b882:	480b      	ldr	r0, [pc, #44]	@ (800b8b0 <SCH_Initialize+0x48>)
 800b884:	f004 f9f9 	bl	800fc7a <memset>
  memset((uint8_t*)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 800b888:	22f0      	movs	r2, #240	@ 0xf0
 800b88a:	2100      	movs	r1, #0
 800b88c:	4809      	ldr	r0, [pc, #36]	@ (800b8b4 <SCH_Initialize+0x4c>)
 800b88e:	f004 f9f4 	bl	800fc7a <memset>
  memset((uint8_t*)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 800b892:	2220      	movs	r2, #32
 800b894:	2100      	movs	r1, #0
 800b896:	4808      	ldr	r0, [pc, #32]	@ (800b8b8 <SCH_Initialize+0x50>)
 800b898:	f004 f9ef 	bl	800fc7a <memset>

    // Initialize Scheduler context
  systick_timer_init();
 800b89c:	f7f5 ff16 	bl	80016cc <systick_timer_init>
}
 800b8a0:	bf00      	nop
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	200065bc 	.word	0x200065bc
 800b8a8:	200064c4 	.word	0x200064c4
 800b8ac:	200065b8 	.word	0x200065b8
 800b8b0:	200063d4 	.word	0x200063d4
 800b8b4:	200064c8 	.word	0x200064c8
 800b8b8:	200065c0 	.word	0x200065c0

0800b8bc <SCH_TIM_Start>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  *         const uint32_t timeInMs - time in mSec
  * @retval None
  *****************************************************************************/
void SCH_TIM_Start(const SCH_SoftTimerTypedef timer, const uint32_t timeInMs)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	6039      	str	r1, [r7, #0]
 800b8c6:	71fb      	strb	r3, [r7, #7]
  if(timer < SCH_TIM_LAST)
 800b8c8:	79fb      	ldrb	r3, [r7, #7]
 800b8ca:	2b07      	cmp	r3, #7
 800b8cc:	d804      	bhi.n	800b8d8 <SCH_TIM_Start+0x1c>
  {
	//s_SoftTimers[timer] = timeInMs + s_SystemTick;
    s_SoftTimers[timer] = timeInMs;
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	4904      	ldr	r1, [pc, #16]	@ (800b8e4 <SCH_TIM_Start+0x28>)
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	200065c0 	.word	0x200065c0

0800b8e8 <SCH_TIM_HasCompleted>:
  * @param  const SCH_SoftTimerTypedef timer - type of soft timer
  * @retval TRUE / FALSE
  *****************************************************************************/

uint16_t SCH_TIM_HasCompleted(const SCH_SoftTimerTypedef timer)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	71fb      	strb	r3, [r7, #7]
  return (s_SoftTimers[timer] == 0 ? 1:0 ) ;
 800b8f2:	79fb      	ldrb	r3, [r7, #7]
 800b8f4:	4a06      	ldr	r2, [pc, #24]	@ (800b910 <SCH_TIM_HasCompleted+0x28>)
 800b8f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	bf0c      	ite	eq
 800b8fe:	2301      	moveq	r3, #1
 800b900:	2300      	movne	r3, #0
 800b902:	b2db      	uxtb	r3, r3
}
 800b904:	4618      	mov	r0, r3
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	200065c0 	.word	0x200065c0

0800b914 <SCH_TASK_CreateTask>:
  * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
  *         SCH_TaskPropertyTypedef* pTaskProperty - pointer to task property
  * @retval status
  *****************************************************************************/
t_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE* pHandle, SCH_TaskPropertyTypedef* pTaskProperty)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  t_Status                      status = STS_ERROR;
 800b91e:	2301      	movs	r3, #1
 800b920:	73fb      	strb	r3, [r7, #15]

  // make sure that we have valid parameters
  if((pHandle) && (pTaskProperty))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d028      	beq.n	800b97a <SCH_TASK_CreateTask+0x66>
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d025      	beq.n	800b97a <SCH_TASK_CreateTask+0x66>
  {
    // Check for number of task defined
    if(s_NumOfTaskScheduled < (MAX_TASK - 1))
 800b92e:	4b16      	ldr	r3, [pc, #88]	@ (800b988 <SCH_TASK_CreateTask+0x74>)
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	2b12      	cmp	r3, #18
 800b934:	d821      	bhi.n	800b97a <SCH_TASK_CreateTask+0x66>
    {
      SCH_TaskContextTypedef* pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 800b936:	4b14      	ldr	r3, [pc, #80]	@ (800b988 <SCH_TASK_CreateTask+0x74>)
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	4613      	mov	r3, r2
 800b93e:	005b      	lsls	r3, r3, #1
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4a11      	ldr	r2, [pc, #68]	@ (800b98c <SCH_TASK_CreateTask+0x78>)
 800b946:	4413      	add	r3, r2
 800b948:	60bb      	str	r3, [r7, #8]
      // get task context
      // memcpy((uint8_t*)pTaskContext->pTaskProperty, (uint8_t*)pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
      pTaskContext->pTaskProperty = pTaskProperty;
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	609a      	str	r2, [r3, #8]
      // Make sure we are initializing other members of task context
      pTaskContext->taskFlag = FALSE;
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2200      	movs	r2, #0
 800b954:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick = RESET;
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	2200      	movs	r2, #0
 800b95a:	605a      	str	r2, [r3, #4]
      // Put task in Ready State
      pTaskContext->taskState = TASK_StateReady;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	2201      	movs	r2, #1
 800b960:	701a      	strb	r2, [r3, #0]

      // Give Task Handle back to caller
      *pHandle = s_NumOfTaskScheduled;
 800b962:	4b09      	ldr	r3, [pc, #36]	@ (800b988 <SCH_TASK_CreateTask+0x74>)
 800b964:	781a      	ldrb	r2, [r3, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	701a      	strb	r2, [r3, #0]

      s_NumOfTaskScheduled++;
 800b96a:	4b07      	ldr	r3, [pc, #28]	@ (800b988 <SCH_TASK_CreateTask+0x74>)
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	3301      	adds	r3, #1
 800b970:	b2da      	uxtb	r2, r3
 800b972:	4b05      	ldr	r3, [pc, #20]	@ (800b988 <SCH_TASK_CreateTask+0x74>)
 800b974:	701a      	strb	r2, [r3, #0]
      // We were able to register task with schedular
      status = STS_DONE;
 800b976:	2300      	movs	r3, #0
 800b978:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	200064c4 	.word	0x200064c4
 800b98c:	200063d4 	.word	0x200063d4

0800b990 <SCH_RunSystemTickTimer>:
  * @brief  Function handles system tick timer
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // Increment System Tick counter

  s_SystemTick++;
 800b996:	4b42      	ldr	r3, [pc, #264]	@ (800baa0 <SCH_RunSystemTickTimer+0x110>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3301      	adds	r3, #1
 800b99c:	4a40      	ldr	r2, [pc, #256]	@ (800baa0 <SCH_RunSystemTickTimer+0x110>)
 800b99e:	6013      	str	r3, [r2, #0]
//  if(s_SystemTick > 100000){
//	  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
//  }
  // Check Status of other Periodic Task
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	73fb      	strb	r3, [r7, #15]
 800b9a4:	e025      	b.n	800b9f2 <SCH_RunSystemTickTimer+0x62>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800b9a6:	7bfa      	ldrb	r2, [r7, #15]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	005b      	lsls	r3, r3, #1
 800b9ac:	4413      	add	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4a3c      	ldr	r2, [pc, #240]	@ (800baa4 <SCH_RunSystemTickTimer+0x114>)
 800b9b2:	4413      	add	r3, r2
 800b9b4:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType) && (TASK_StateReady == pTaskContext->taskState))
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d115      	bne.n	800b9ec <SCH_RunSystemTickTimer+0x5c>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d111      	bne.n	800b9ec <SCH_RunSystemTickTimer+0x5c>
    {
      // Increment task tick
      pTaskContext->taskTick += 1;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d305      	bcc.n	800b9ec <SCH_RunSystemTickTimer+0x5c>
      {
        // Yes
        // Reset Task tick timer
        pTaskContext->taskTick = RESET;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	605a      	str	r2, [r3, #4]
        // Enable Flag
        pTaskContext->taskFlag = TRUE;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	805a      	strh	r2, [r3, #2]
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	73fb      	strb	r3, [r7, #15]
 800b9f2:	4b2d      	ldr	r3, [pc, #180]	@ (800baa8 <SCH_RunSystemTickTimer+0x118>)
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	7bfa      	ldrb	r2, [r7, #15]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d3d4      	bcc.n	800b9a6 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  // Check Status of other Periodic Task
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73bb      	strb	r3, [r7, #14]
 800ba00:	e02b      	b.n	800ba5a <SCH_RunSystemTickTimer+0xca>
  {
    // Get Task Context
    pTimerContext = &s_TimerContext[timerIndex];
 800ba02:	7bba      	ldrb	r2, [r7, #14]
 800ba04:	4613      	mov	r3, r2
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	4413      	add	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4a27      	ldr	r2, [pc, #156]	@ (800baac <SCH_RunSystemTickTimer+0x11c>)
 800ba0e:	4413      	add	r3, r2
 800ba10:	60bb      	str	r3, [r7, #8]

    // Check type and State of the task
    if(TIM_StateRun == pTimerContext->timerState)
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d11c      	bne.n	800ba54 <SCH_RunSystemTickTimer+0xc4>
    {
      // Increment task tick
      pTimerContext->timerTick += 1;
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	605a      	str	r2, [r3, #4]

      // Check if we reached task period
      if(pTimerContext->timerTick >= pTimerContext->pTimerProperty->timerPeriodInMS)
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	685a      	ldr	r2, [r3, #4]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d310      	bcc.n	800ba54 <SCH_RunSystemTickTimer+0xc4>
      {
        // Yes
        // Enable Flag
        pTimerContext->timerFlag = TRUE;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2201      	movs	r2, #1
 800ba36:	805a      	strh	r2, [r3, #2]
        // Reset tick timer
        pTimerContext->timerTick = RESET;
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	605a      	str	r2, [r3, #4]
        // Check timer type and change the state
        pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)?TIM_StateRun:TIM_StateStop;
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	bf0c      	ite	eq
 800ba48:	2301      	moveq	r3, #1
 800ba4a:	2300      	movne	r3, #0
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	461a      	mov	r2, r3
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	701a      	strb	r2, [r3, #0]
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800ba54:	7bbb      	ldrb	r3, [r7, #14]
 800ba56:	3301      	adds	r3, #1
 800ba58:	73bb      	strb	r3, [r7, #14]
 800ba5a:	4b15      	ldr	r3, [pc, #84]	@ (800bab0 <SCH_RunSystemTickTimer+0x120>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	7bba      	ldrb	r2, [r7, #14]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d3ce      	bcc.n	800ba02 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }
  // Update software timer
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800ba64:	2300      	movs	r3, #0
 800ba66:	73bb      	strb	r3, [r7, #14]
 800ba68:	e010      	b.n	800ba8c <SCH_RunSystemTickTimer+0xfc>
 	if (s_SoftTimers[timerIndex] > 0)	s_SoftTimers[timerIndex] --;
 800ba6a:	7bbb      	ldrb	r3, [r7, #14]
 800ba6c:	4a11      	ldr	r2, [pc, #68]	@ (800bab4 <SCH_RunSystemTickTimer+0x124>)
 800ba6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d007      	beq.n	800ba86 <SCH_RunSystemTickTimer+0xf6>
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	4a0e      	ldr	r2, [pc, #56]	@ (800bab4 <SCH_RunSystemTickTimer+0x124>)
 800ba7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ba7e:	3a01      	subs	r2, #1
 800ba80:	490c      	ldr	r1, [pc, #48]	@ (800bab4 <SCH_RunSystemTickTimer+0x124>)
 800ba82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 800ba86:	7bbb      	ldrb	r3, [r7, #14]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	73bb      	strb	r3, [r7, #14]
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b07      	cmp	r3, #7
 800ba90:	d9eb      	bls.n	800ba6a <SCH_RunSystemTickTimer+0xda>
}
 800ba92:	bf00      	nop
 800ba94:	bf00      	nop
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	200065bc 	.word	0x200065bc
 800baa4:	200063d4 	.word	0x200063d4
 800baa8:	200064c4 	.word	0x200064c4
 800baac:	200064c8 	.word	0x200064c8
 800bab0:	200065b8 	.word	0x200065b8
 800bab4:	200065c0 	.word	0x200065c0

0800bab8 <SCH_StartSchedular>:
  * @brief  Start schedular
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_StartSchedular(void)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
  // Start Schedular..i.e. start system tick timer
  SCH_START;
 800babc:	f7f5 fdf6 	bl	80016ac <systick_timer_start>
}
 800bac0:	bf00      	nop
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <SCH_HandleScheduledTask>:
  * @brief  Function handles scheduled task and timer events
  * @param  None
  * @retval None
  *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
  SCH_TaskContextTypedef*       pTaskContext;
  uint8_t                       timerIndex;
  SCH_TimerContextTypedef*      pTimerContext;

  // check for schedule flag
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]
 800bace:	e01e      	b.n	800bb0e <SCH_HandleScheduledTask+0x4a>
  {
    // Get Task Context
    pTaskContext = &s_TaskContext[taskIndex];
 800bad0:	7bfa      	ldrb	r2, [r7, #15]
 800bad2:	4613      	mov	r3, r2
 800bad4:	005b      	lsls	r3, r3, #1
 800bad6:	4413      	add	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4a23      	ldr	r2, [pc, #140]	@ (800bb68 <SCH_HandleScheduledTask+0xa4>)
 800badc:	4413      	add	r3, r2
 800bade:	607b      	str	r3, [r7, #4]

    // Check type and State of the task
    if((TRUE == pTaskContext->taskFlag) && (TASK_StateReady == pTaskContext->taskState))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	885b      	ldrh	r3, [r3, #2]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d10f      	bne.n	800bb08 <SCH_HandleScheduledTask+0x44>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d10b      	bne.n	800bb08 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	805a      	strh	r2, [r3, #2]
      if(pTaskContext->pTaskProperty->taskFunction)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	4798      	blx	r3
  for(taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	73fb      	strb	r3, [r7, #15]
 800bb0e:	4b17      	ldr	r3, [pc, #92]	@ (800bb6c <SCH_HandleScheduledTask+0xa8>)
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	7bfa      	ldrb	r2, [r7, #15]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d3db      	bcc.n	800bad0 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  // check for timer flag
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	73bb      	strb	r3, [r7, #14]
 800bb1c:	e01a      	b.n	800bb54 <SCH_HandleScheduledTask+0x90>
  {
    // Get Timer Context
    pTimerContext = &s_TimerContext[timerIndex];
 800bb1e:	7bba      	ldrb	r2, [r7, #14]
 800bb20:	4613      	mov	r3, r2
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	4413      	add	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4a11      	ldr	r2, [pc, #68]	@ (800bb70 <SCH_HandleScheduledTask+0xac>)
 800bb2a:	4413      	add	r3, r2
 800bb2c:	60bb      	str	r3, [r7, #8]

    // Check timer flag
    if(TRUE == pTimerContext->timerFlag)
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	885b      	ldrh	r3, [r3, #2]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d10b      	bne.n	800bb4e <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	805a      	strh	r2, [r3, #2]
      if(pTimerContext->pTimerProperty->timerCallbackFunction)
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d003      	beq.n	800bb4e <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	4798      	blx	r3
  for(timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
 800bb50:	3301      	adds	r3, #1
 800bb52:	73bb      	strb	r3, [r7, #14]
 800bb54:	4b07      	ldr	r3, [pc, #28]	@ (800bb74 <SCH_HandleScheduledTask+0xb0>)
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	7bba      	ldrb	r2, [r7, #14]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d3df      	bcc.n	800bb1e <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800bb5e:	bf00      	nop
 800bb60:	bf00      	nop
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	200063d4 	.word	0x200063d4
 800bb6c:	200064c4 	.word	0x200064c4
 800bb70:	200064c8 	.word	0x200064c8
 800bb74:	200065b8 	.word	0x200065b8

0800bb78 <crc16_CCITT>:


#include "crc.h"

uint16_t crc16_CCITT(uint16_t initial_value, uint8_t* data, uint16_t size)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	6039      	str	r1, [r7, #0]
 800bb82:	80fb      	strh	r3, [r7, #6]
 800bb84:	4613      	mov	r3, r2
 800bb86:	80bb      	strh	r3, [r7, #4]
    uint8_t x;
    uint16_t crc = initial_value;
 800bb88:	88fb      	ldrh	r3, [r7, #6]
 800bb8a:	81fb      	strh	r3, [r7, #14]

    while(size--)
 800bb8c:	e023      	b.n	800bbd6 <crc16_CCITT+0x5e>
    {
        x = crc >> 8 ^ *data++;
 800bb8e:	89fb      	ldrh	r3, [r7, #14]
 800bb90:	0a1b      	lsrs	r3, r3, #8
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	1c59      	adds	r1, r3, #1
 800bb9a:	6039      	str	r1, [r7, #0]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	4053      	eors	r3, r2
 800bba0:	737b      	strb	r3, [r7, #13]
        x ^= x >> 4;
 800bba2:	7b7b      	ldrb	r3, [r7, #13]
 800bba4:	091b      	lsrs	r3, r3, #4
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	7b7b      	ldrb	r3, [r7, #13]
 800bbaa:	4053      	eors	r3, r2
 800bbac:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x << 5)) ^ ((uint16_t)x);
 800bbae:	89fb      	ldrh	r3, [r7, #14]
 800bbb0:	021b      	lsls	r3, r3, #8
 800bbb2:	b21a      	sxth	r2, r3
 800bbb4:	7b7b      	ldrb	r3, [r7, #13]
 800bbb6:	b21b      	sxth	r3, r3
 800bbb8:	031b      	lsls	r3, r3, #12
 800bbba:	b21b      	sxth	r3, r3
 800bbbc:	4053      	eors	r3, r2
 800bbbe:	b21a      	sxth	r2, r3
 800bbc0:	7b7b      	ldrb	r3, [r7, #13]
 800bbc2:	b21b      	sxth	r3, r3
 800bbc4:	015b      	lsls	r3, r3, #5
 800bbc6:	b21b      	sxth	r3, r3
 800bbc8:	4053      	eors	r3, r2
 800bbca:	b21a      	sxth	r2, r3
 800bbcc:	7b7b      	ldrb	r3, [r7, #13]
 800bbce:	b21b      	sxth	r3, r3
 800bbd0:	4053      	eors	r3, r2
 800bbd2:	b21b      	sxth	r3, r3
 800bbd4:	81fb      	strh	r3, [r7, #14]
    while(size--)
 800bbd6:	88bb      	ldrh	r3, [r7, #4]
 800bbd8:	1e5a      	subs	r2, r3, #1
 800bbda:	80ba      	strh	r2, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1d6      	bne.n	800bb8e <crc16_CCITT+0x16>
    }

    return crc;
 800bbe0:	89fb      	ldrh	r3, [r7, #14]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
	...

0800bbf0 <fsp_init>:
uint8_t fsp_my_adr;

volatile uint8_t fsp_decode_pos = 0;

void fsp_init(uint8_t module_adr)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	71fb      	strb	r3, [r7, #7]
    fsp_my_adr = module_adr;
 800bbfa:	4a06      	ldr	r2, [pc, #24]	@ (800bc14 <fsp_init+0x24>)
 800bbfc:	79fb      	ldrb	r3, [r7, #7]
 800bbfe:	7013      	strb	r3, [r2, #0]

    fsp_decode_pos = 0;
 800bc00:	4b05      	ldr	r3, [pc, #20]	@ (800bc18 <fsp_init+0x28>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	701a      	strb	r2, [r3, #0]
}
 800bc06:	bf00      	nop
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	200065e0 	.word	0x200065e0
 800bc18:	200065e1 	.word	0x200065e1

0800bc1c <fsp_gen_cmd_pkt>:
        fsp_gen_pkt((void*)0, data, data_len, dst_adr, FSP_PKT_TYPE_DATA, fsp);
    }
}

void fsp_gen_cmd_pkt(uint8_t cmd, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af02      	add	r7, sp, #8
 800bc22:	603b      	str	r3, [r7, #0]
 800bc24:	4603      	mov	r3, r0
 800bc26:	71fb      	strb	r3, [r7, #7]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	71bb      	strb	r3, [r7, #6]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800bc30:	797b      	ldrb	r3, [r7, #5]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d10b      	bne.n	800bc4e <fsp_gen_cmd_pkt+0x32>
    {
        fsp_gen_pkt(&cmd,(void*)0, 0, dst_adr, FSP_PKT_TYPE_CMD_WITH_ACK, fsp);
 800bc36:	79ba      	ldrb	r2, [r7, #6]
 800bc38:	1df8      	adds	r0, r7, #7
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	9301      	str	r3, [sp, #4]
 800bc3e:	2304      	movs	r3, #4
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	4613      	mov	r3, r2
 800bc44:	2200      	movs	r2, #0
 800bc46:	2100      	movs	r1, #0
 800bc48:	f000 f83a 	bl	800bcc0 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
    }
}
 800bc4c:	e00a      	b.n	800bc64 <fsp_gen_cmd_pkt+0x48>
        fsp_gen_pkt(&cmd,(void*)0,  0, dst_adr, FSP_PKT_TYPE_CMD, fsp);
 800bc4e:	79ba      	ldrb	r2, [r7, #6]
 800bc50:	1df8      	adds	r0, r7, #7
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	9301      	str	r3, [sp, #4]
 800bc56:	2303      	movs	r3, #3
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2100      	movs	r1, #0
 800bc60:	f000 f82e 	bl	800bcc0 <fsp_gen_pkt>
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <fsp_gen_cmd_w_data_pkt>:

void fsp_gen_cmd_w_data_pkt(uint8_t cmd, uint8_t *data, uint8_t data_len, uint8_t dst_adr, uint8_t ack, fsp_packet_t *fsp)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af02      	add	r7, sp, #8
 800bc72:	6039      	str	r1, [r7, #0]
 800bc74:	4611      	mov	r1, r2
 800bc76:	461a      	mov	r2, r3
 800bc78:	4603      	mov	r3, r0
 800bc7a:	71fb      	strb	r3, [r7, #7]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	71bb      	strb	r3, [r7, #6]
 800bc80:	4613      	mov	r3, r2
 800bc82:	717b      	strb	r3, [r7, #5]
    if (ack == FSP_PKT_WITH_ACK)
 800bc84:	7c3b      	ldrb	r3, [r7, #16]
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d10b      	bne.n	800bca2 <fsp_gen_cmd_w_data_pkt+0x36>
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA_ACK, fsp);
 800bc8a:	7979      	ldrb	r1, [r7, #5]
 800bc8c:	79ba      	ldrb	r2, [r7, #6]
 800bc8e:	1df8      	adds	r0, r7, #7
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	9301      	str	r3, [sp, #4]
 800bc94:	2308      	movs	r3, #8
 800bc96:	9300      	str	r3, [sp, #0]
 800bc98:	460b      	mov	r3, r1
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	f000 f810 	bl	800bcc0 <fsp_gen_pkt>
    }
    else
    {
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
    }
}
 800bca0:	e00a      	b.n	800bcb8 <fsp_gen_cmd_w_data_pkt+0x4c>
        fsp_gen_pkt(&cmd, data, data_len, dst_adr, FSP_PKT_TYPE_CMD_W_DATA, fsp);
 800bca2:	7979      	ldrb	r1, [r7, #5]
 800bca4:	79ba      	ldrb	r2, [r7, #6]
 800bca6:	1df8      	adds	r0, r7, #7
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	9301      	str	r3, [sp, #4]
 800bcac:	2307      	movs	r3, #7
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	f000 f804 	bl	800bcc0 <fsp_gen_pkt>
}
 800bcb8:	bf00      	nop
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <fsp_gen_pkt>:
    fsp_gen_pkt((void*)0, (void*)0, 0, dst_adr, FSP_PKT_TYPE_NACK, fsp);
}


void fsp_gen_pkt(uint8_t *cmd, uint8_t *payload, uint8_t payload_len, uint8_t dst_adr, uint8_t type, fsp_packet_t *fsp)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	4611      	mov	r1, r2
 800bccc:	461a      	mov	r2, r3
 800bcce:	460b      	mov	r3, r1
 800bcd0:	71fb      	strb	r3, [r7, #7]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	71bb      	strb	r3, [r7, #6]
    fsp->sod        = FSP_PKT_SOD;
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	22ca      	movs	r2, #202	@ 0xca
 800bcda:	701a      	strb	r2, [r3, #0]
    fsp->src_adr    = fsp_my_adr;
 800bcdc:	4b25      	ldr	r3, [pc, #148]	@ (800bd74 <fsp_gen_pkt+0xb4>)
 800bcde:	781a      	ldrb	r2, [r3, #0]
 800bce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce2:	705a      	strb	r2, [r3, #1]
    fsp->dst_adr    = dst_adr;
 800bce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce6:	79ba      	ldrb	r2, [r7, #6]
 800bce8:	709a      	strb	r2, [r3, #2]
    fsp->length     = payload_len;
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcec:	79fa      	ldrb	r2, [r7, #7]
 800bcee:	70da      	strb	r2, [r3, #3]
    fsp->type       = type;
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bcf6:	711a      	strb	r2, [r3, #4]

    uint8_t i = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	75fb      	strb	r3, [r7, #23]
    uint8_t j = 0;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	75bb      	strb	r3, [r7, #22]

    // Copy cmd payload
    if (cmd != NULL) {
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00e      	beq.n	800bd24 <fsp_gen_pkt+0x64>
        fsp->length++; // length + byte cmd
 800bd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd08:	78db      	ldrb	r3, [r3, #3]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd10:	70da      	strb	r2, [r3, #3]
        fsp->payload[j++] = *cmd;
 800bd12:	7dbb      	ldrb	r3, [r7, #22]
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	75ba      	strb	r2, [r7, #22]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	781a      	ldrb	r2, [r3, #0]
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd20:	440b      	add	r3, r1
 800bd22:	715a      	strb	r2, [r3, #5]
    }

    // Copy payload fsp->payload
    for(i=0; i<payload_len; i++)
 800bd24:	2300      	movs	r3, #0
 800bd26:	75fb      	strb	r3, [r7, #23]
 800bd28:	e00d      	b.n	800bd46 <fsp_gen_pkt+0x86>
    {
        fsp->payload[j++] = payload[i];
 800bd2a:	7dfb      	ldrb	r3, [r7, #23]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	441a      	add	r2, r3
 800bd30:	7dbb      	ldrb	r3, [r7, #22]
 800bd32:	1c59      	adds	r1, r3, #1
 800bd34:	75b9      	strb	r1, [r7, #22]
 800bd36:	4619      	mov	r1, r3
 800bd38:	7812      	ldrb	r2, [r2, #0]
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3c:	440b      	add	r3, r1
 800bd3e:	715a      	strb	r2, [r3, #5]
    for(i=0; i<payload_len; i++)
 800bd40:	7dfb      	ldrb	r3, [r7, #23]
 800bd42:	3301      	adds	r3, #1
 800bd44:	75fb      	strb	r3, [r7, #23]
 800bd46:	7dfa      	ldrb	r2, [r7, #23]
 800bd48:	79fb      	ldrb	r3, [r7, #7]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d3ed      	bcc.n	800bd2a <fsp_gen_pkt+0x6a>
    }

    fsp->crc16 = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp->src_adr, fsp->length + 4);
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd50:	1c59      	adds	r1, r3, #1
 800bd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd54:	78db      	ldrb	r3, [r3, #3]
 800bd56:	3304      	adds	r3, #4
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f7ff ff0b 	bl	800bb78 <crc16_CCITT>
 800bd62:	4603      	mov	r3, r0
 800bd64:	461a      	mov	r2, r3
 800bd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd68:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

}
 800bd6c:	bf00      	nop
 800bd6e:	3718      	adds	r7, #24
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	200065e0 	.word	0x200065e0

0800bd78 <frame_encode>:


void frame_encode(fsp_packet_t *fsp, uint8_t *frame, uint8_t *frame_len)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b0c8      	sub	sp, #288	@ 0x120
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bd82:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bd86:	6018      	str	r0, [r3, #0]
 800bd88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bd8c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800bd90:	6019      	str	r1, [r3, #0]
 800bd92:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bd96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800bd9a:	601a      	str	r2, [r3, #0]
    //frame
    uint8_t encoded_frame[FSP_PKT_MAX_LENGTH];
    uint8_t encoded_length = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    encoded_frame[encoded_length++] = fsp->sod;
 800bda2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bda6:	1c5a      	adds	r2, r3, #1
 800bda8:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bdac:	461a      	mov	r2, r3
 800bdae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bdb2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	7819      	ldrb	r1, [r3, #0]
 800bdba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bdbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bdc2:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->src_adr;
 800bdc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdc8:	1c5a      	adds	r2, r3, #1
 800bdca:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bdce:	461a      	mov	r2, r3
 800bdd0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bdd4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	7859      	ldrb	r1, [r3, #1]
 800bddc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bde0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bde4:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->dst_adr;
 800bde6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bdf6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	7899      	ldrb	r1, [r3, #2]
 800bdfe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800be02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800be06:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->length;
 800be08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800be12:	461a      	mov	r2, r3
 800be14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800be18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	78d9      	ldrb	r1, [r3, #3]
 800be20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800be24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800be28:	5499      	strb	r1, [r3, r2]
    encoded_frame[encoded_length++] = fsp->type;
 800be2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800be34:	461a      	mov	r2, r3
 800be36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800be3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	7919      	ldrb	r1, [r3, #4]
 800be42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800be46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800be4a:	5499      	strb	r1, [r3, r2]

    for(int i=0; i<fsp->length; i++)
 800be4c:	2300      	movs	r3, #0
 800be4e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800be52:	e088      	b.n	800bf66 <frame_encode+0x1ee>
    {
        if (fsp->payload[i] == FSP_PKT_SOD) {
 800be54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800be58:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800be62:	4413      	add	r3, r2
 800be64:	3305      	adds	r3, #5
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2bca      	cmp	r3, #202	@ 0xca
 800be6a:	d118      	bne.n	800be9e <frame_encode+0x126>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800be6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800be76:	461a      	mov	r2, r3
 800be78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800be7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800be80:	21bd      	movs	r1, #189	@ 0xbd
 800be82:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800be84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800be8e:	461a      	mov	r2, r3
 800be90:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800be94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800be98:	21dc      	movs	r1, #220	@ 0xdc
 800be9a:	5499      	strb	r1, [r3, r2]
 800be9c:	e05e      	b.n	800bf5c <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_EOF) {
 800be9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bea2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800beac:	4413      	add	r3, r2
 800beae:	3305      	adds	r3, #5
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2bef      	cmp	r3, #239	@ 0xef
 800beb4:	d118      	bne.n	800bee8 <frame_encode+0x170>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800beb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800beba:	1c5a      	adds	r2, r3, #1
 800bebc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bec0:	461a      	mov	r2, r3
 800bec2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bec6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800beca:	21bd      	movs	r1, #189	@ 0xbd
 800becc:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800bece:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bed8:	461a      	mov	r2, r3
 800beda:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bede:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bee2:	21de      	movs	r1, #222	@ 0xde
 800bee4:	5499      	strb	r1, [r3, r2]
 800bee6:	e039      	b.n	800bf5c <frame_encode+0x1e4>
        } else if (fsp->payload[i] == FSP_PKT_ESC) {
 800bee8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800beec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bef6:	4413      	add	r3, r2
 800bef8:	3305      	adds	r3, #5
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2bbd      	cmp	r3, #189	@ 0xbd
 800befe:	d118      	bne.n	800bf32 <frame_encode+0x1ba>
            encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800bf00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf04:	1c5a      	adds	r2, r3, #1
 800bf06:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bf10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bf14:	21bd      	movs	r1, #189	@ 0xbd
 800bf16:	5499      	strb	r1, [r3, r2]
            encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800bf18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bf22:	461a      	mov	r2, r3
 800bf24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bf28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bf2c:	21db      	movs	r1, #219	@ 0xdb
 800bf2e:	5499      	strb	r1, [r3, r2]
 800bf30:	e014      	b.n	800bf5c <frame_encode+0x1e4>
        } else {
            encoded_frame[encoded_length++] = fsp->payload[i];
 800bf32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bf42:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bf4c:	4413      	add	r3, r2
 800bf4e:	3305      	adds	r3, #5
 800bf50:	781a      	ldrb	r2, [r3, #0]
 800bf52:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bf56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bf5a:	545a      	strb	r2, [r3, r1]
    for(int i=0; i<fsp->length; i++)
 800bf5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bf60:	3301      	adds	r3, #1
 800bf62:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800bf66:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bf6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	78db      	ldrb	r3, [r3, #3]
 800bf72:	461a      	mov	r2, r3
 800bf74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	f6ff af6b 	blt.w	800be54 <frame_encode+0xdc>
        }
    }

    // CRC16
    uint8_t crc_msb = (uint8_t)(fsp->crc16 >> 8);
 800bf7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bf82:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800bf8c:	0a1b      	lsrs	r3, r3, #8
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    uint8_t crc_lsb = (uint8_t)(fsp->crc16 & 0xFF);
 800bf94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bf98:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 800bfa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

    if (crc_msb == FSP_PKT_SOD) {
 800bfa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfaa:	2bca      	cmp	r3, #202	@ 0xca
 800bfac:	d118      	bne.n	800bfe0 <frame_encode+0x268>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800bfae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bfb2:	1c5a      	adds	r2, r3, #1
 800bfb4:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bfb8:	461a      	mov	r2, r3
 800bfba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bfbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bfc2:	21bd      	movs	r1, #189	@ 0xbd
 800bfc4:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800bfc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bfd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bfda:	21dc      	movs	r1, #220	@ 0xdc
 800bfdc:	5499      	strb	r1, [r3, r2]
 800bfde:	e046      	b.n	800c06e <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_EOF) {
 800bfe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfe4:	2bef      	cmp	r3, #239	@ 0xef
 800bfe6:	d118      	bne.n	800c01a <frame_encode+0x2a2>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800bfe8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800bff2:	461a      	mov	r2, r3
 800bff4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bff8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800bffc:	21bd      	movs	r1, #189	@ 0xbd
 800bffe:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800c000:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c004:	1c5a      	adds	r2, r3, #1
 800c006:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c00a:	461a      	mov	r2, r3
 800c00c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c010:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c014:	21de      	movs	r1, #222	@ 0xde
 800c016:	5499      	strb	r1, [r3, r2]
 800c018:	e029      	b.n	800c06e <frame_encode+0x2f6>
    } else if (crc_msb == FSP_PKT_ESC) {
 800c01a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c01e:	2bbd      	cmp	r3, #189	@ 0xbd
 800c020:	d118      	bne.n	800c054 <frame_encode+0x2dc>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c022:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c02c:	461a      	mov	r2, r3
 800c02e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c032:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c036:	21bd      	movs	r1, #189	@ 0xbd
 800c038:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800c03a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c044:	461a      	mov	r2, r3
 800c046:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c04a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c04e:	21db      	movs	r1, #219	@ 0xdb
 800c050:	5499      	strb	r1, [r3, r2]
 800c052:	e00c      	b.n	800c06e <frame_encode+0x2f6>
    } else {
        encoded_frame[encoded_length++] = crc_msb;
 800c054:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c05e:	4619      	mov	r1, r3
 800c060:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c064:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c068:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800c06c:	545a      	strb	r2, [r3, r1]
    }

    if (crc_lsb == FSP_PKT_SOD) {
 800c06e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c072:	2bca      	cmp	r3, #202	@ 0xca
 800c074:	d118      	bne.n	800c0a8 <frame_encode+0x330>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c076:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c07a:	1c5a      	adds	r2, r3, #1
 800c07c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c080:	461a      	mov	r2, r3
 800c082:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c086:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c08a:	21bd      	movs	r1, #189	@ 0xbd
 800c08c:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TSOD;
 800c08e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c092:	1c5a      	adds	r2, r3, #1
 800c094:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c098:	461a      	mov	r2, r3
 800c09a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c09e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c0a2:	21dc      	movs	r1, #220	@ 0xdc
 800c0a4:	5499      	strb	r1, [r3, r2]
 800c0a6:	e046      	b.n	800c136 <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_EOF) {
 800c0a8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c0ac:	2bef      	cmp	r3, #239	@ 0xef
 800c0ae:	d118      	bne.n	800c0e2 <frame_encode+0x36a>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c0b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0b4:	1c5a      	adds	r2, r3, #1
 800c0b6:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c0c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c0c4:	21bd      	movs	r1, #189	@ 0xbd
 800c0c6:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TEOF;
 800c0c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c0d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c0dc:	21de      	movs	r1, #222	@ 0xde
 800c0de:	5499      	strb	r1, [r3, r2]
 800c0e0:	e029      	b.n	800c136 <frame_encode+0x3be>
    } else if (crc_lsb == FSP_PKT_ESC) {
 800c0e2:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c0e6:	2bbd      	cmp	r3, #189	@ 0xbd
 800c0e8:	d118      	bne.n	800c11c <frame_encode+0x3a4>
        encoded_frame[encoded_length++] = FSP_PKT_ESC;
 800c0ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c0fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c0fe:	21bd      	movs	r1, #189	@ 0xbd
 800c100:	5499      	strb	r1, [r3, r2]
        encoded_frame[encoded_length++] = FSP_PKT_TESC;
 800c102:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c10c:	461a      	mov	r2, r3
 800c10e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c112:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c116:	21db      	movs	r1, #219	@ 0xdb
 800c118:	5499      	strb	r1, [r3, r2]
 800c11a:	e00c      	b.n	800c136 <frame_encode+0x3be>
    } else {
        encoded_frame[encoded_length++] = crc_lsb;
 800c11c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c126:	4619      	mov	r1, r3
 800c128:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c12c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c130:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800c134:	545a      	strb	r2, [r3, r1]
    }

    encoded_frame[encoded_length++] = FSP_PKT_EOF;
 800c136:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c13a:	1c5a      	adds	r2, r3, #1
 800c13c:	f887 211f 	strb.w	r2, [r7, #287]	@ 0x11f
 800c140:	461a      	mov	r2, r3
 800c142:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c146:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800c14a:	21ef      	movs	r1, #239	@ 0xef
 800c14c:	5499      	strb	r1, [r3, r2]

    memcpy(frame, encoded_frame, encoded_length);
 800c14e:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800c152:	f107 0114 	add.w	r1, r7, #20
 800c156:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c15a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800c15e:	6818      	ldr	r0, [r3, #0]
 800c160:	f003 fe0b 	bl	800fd7a <memcpy>
    *frame_len = encoded_length;
 800c164:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c168:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800c172:	701a      	strb	r2, [r3, #0]
}
 800c174:	bf00      	nop
 800c176:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
	...

0800c180 <frame_decode>:
                return FSP_PKT_ERROR;
            }
    }
}

int frame_decode(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800c180:	b580      	push	{r7, lr}
 800c182:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800c186:	af00      	add	r7, sp, #0
 800c188:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c18c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c190:	6018      	str	r0, [r3, #0]
 800c192:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c196:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c1a0:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c1a4:	460a      	mov	r2, r1
 800c1a6:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
    uint8_t decoded_payload[FSP_PAYLOAD_MAX_LENGTH];


	if (length < FSP_PKT_MIN_LENGTH - 2) {
 800c1ba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c1be:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	2b05      	cmp	r3, #5
 800c1c6:	d862      	bhi.n	800c28e <frame_decode+0x10e>
	        return FSP_PKT_INVALID;
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	e133      	b.n	800c434 <frame_decode+0x2b4>
	}


	while (i < length){
        uint8_t byte = buffer[i++];
 800c1cc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c1d0:	1c5a      	adds	r2, r3, #1
 800c1d2:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c1dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
        if (escape) {
 800c1ea:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d038      	beq.n	800c264 <frame_decode+0xe4>
            if (byte == FSP_PKT_TSOD) {
 800c1f2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c1f6:	2bdc      	cmp	r3, #220	@ 0xdc
 800c1f8:	d10c      	bne.n	800c214 <frame_decode+0x94>
                decoded_payload[j++] = FSP_PKT_SOD;
 800c1fa:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c1fe:	1c5a      	adds	r2, r3, #1
 800c200:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c204:	461a      	mov	r2, r3
 800c206:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c20a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c20e:	21ca      	movs	r1, #202	@ 0xca
 800c210:	5499      	strb	r1, [r3, r2]
 800c212:	e023      	b.n	800c25c <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TEOF) {
 800c214:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c218:	2bde      	cmp	r3, #222	@ 0xde
 800c21a:	d10c      	bne.n	800c236 <frame_decode+0xb6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800c21c:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c220:	1c5a      	adds	r2, r3, #1
 800c222:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c226:	461a      	mov	r2, r3
 800c228:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c22c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c230:	21ef      	movs	r1, #239	@ 0xef
 800c232:	5499      	strb	r1, [r3, r2]
 800c234:	e012      	b.n	800c25c <frame_decode+0xdc>
            } else if (byte == FSP_PKT_TESC) {
 800c236:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c23a:	2bdb      	cmp	r3, #219	@ 0xdb
 800c23c:	d10c      	bne.n	800c258 <frame_decode+0xd8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800c23e:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c248:	461a      	mov	r2, r3
 800c24a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c24e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c252:	21bd      	movs	r1, #189	@ 0xbd
 800c254:	5499      	strb	r1, [r3, r2]
 800c256:	e001      	b.n	800c25c <frame_decode+0xdc>
            } else {
            	return FSP_PKT_INVALID;
 800c258:	2302      	movs	r3, #2
 800c25a:	e0eb      	b.n	800c434 <frame_decode+0x2b4>
            }
            escape = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800c262:	e014      	b.n	800c28e <frame_decode+0x10e>
        } else if (byte == FSP_PKT_ESC) {
 800c264:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800c268:	2bbd      	cmp	r3, #189	@ 0xbd
 800c26a:	d103      	bne.n	800c274 <frame_decode+0xf4>
        	escape = 1;
 800c26c:	2301      	movs	r3, #1
 800c26e:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800c272:	e00c      	b.n	800c28e <frame_decode+0x10e>
        } else {
            decoded_payload[j++] = byte;
 800c274:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c278:	1c5a      	adds	r2, r3, #1
 800c27a:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c27e:	4619      	mov	r1, r3
 800c280:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c284:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c288:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800c28c:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800c28e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c292:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c296:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d395      	bcc.n	800c1cc <frame_decode+0x4c>
        }
	}

    i = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800c2a6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c2b6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c2ba:	5c9a      	ldrb	r2, [r3, r2]
 800c2bc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c2c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2c4:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800c2c6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c2d6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c2da:	5c9a      	ldrb	r2, [r3, r2]
 800c2dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c2e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2e4:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800c2e6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c2ea:	1c5a      	adds	r2, r3, #1
 800c2ec:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c2f6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c2fa:	5c9a      	ldrb	r2, [r3, r2]
 800c2fc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c304:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800c306:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c30a:	1c5a      	adds	r2, r3, #1
 800c30c:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c310:	461a      	mov	r2, r3
 800c312:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c316:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c31a:	5c9a      	ldrb	r2, [r3, r2]
 800c31c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c324:	711a      	strb	r2, [r3, #4]

    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
 800c326:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c32a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c32e:	78db      	ldrb	r3, [r3, #3]
 800c330:	2bf7      	cmp	r3, #247	@ 0xf7
 800c332:	d80a      	bhi.n	800c34a <frame_decode+0x1ca>
 800c334:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c33c:	78db      	ldrb	r3, [r3, #3]
 800c33e:	461a      	mov	r2, r3
 800c340:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c344:	3b06      	subs	r3, #6
 800c346:	429a      	cmp	r2, r3
 800c348:	d001      	beq.n	800c34e <frame_decode+0x1ce>
        return FSP_PKT_WRONG_LENGTH;
 800c34a:	2306      	movs	r3, #6
 800c34c:	e072      	b.n	800c434 <frame_decode+0x2b4>
    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800c34e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c352:	f107 0210 	add.w	r2, r7, #16
 800c356:	18d1      	adds	r1, r2, r3
 800c358:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c35c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c360:	78db      	ldrb	r3, [r3, #3]
 800c362:	461a      	mov	r2, r3
 800c364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c368:	3305      	adds	r3, #5
 800c36a:	4618      	mov	r0, r3
 800c36c:	f003 fd05 	bl	800fd7a <memcpy>
    i += fsp_pkt.length;
 800c370:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c378:	78da      	ldrb	r2, [r3, #3]
 800c37a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c37e:	4413      	add	r3, r2
 800c380:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    //CRC
    uint16_t crc_received = (uint16_t)(decoded_payload[i++] << 8);
 800c384:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c388:	1c5a      	adds	r2, r3, #1
 800c38a:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c38e:	461a      	mov	r2, r3
 800c390:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c394:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c398:	5c9b      	ldrb	r3, [r3, r2]
 800c39a:	021b      	lsls	r3, r3, #8
 800c39c:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a
    crc_received |= (uint16_t)(decoded_payload[i++]);
 800c3a0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c3a4:	1c5a      	adds	r2, r3, #1
 800c3a6:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c3b0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800c3b4:	5c9b      	ldrb	r3, [r3, r2]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a


    // CAL CRC
    uint16_t crc_calculated = crc16_CCITT(FSP_CRC16_INITIAL_VALUE, &fsp_pkt.src_adr, fsp_pkt.length + 4);
 800c3c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c3c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ca:	78db      	ldrb	r3, [r3, #3]
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f7ff fbcd 	bl	800bb78 <crc16_CCITT>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208


    // CHECK CRC
    if (crc_received != crc_calculated) {
 800c3e4:	f8b7 220a 	ldrh.w	r2, [r7, #522]	@ 0x20a
 800c3e8:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d001      	beq.n	800c3f4 <frame_decode+0x274>
        return FSP_PKT_CRC_FAIL;
 800c3f0:	2305      	movs	r3, #5
 800c3f2:	e01f      	b.n	800c434 <frame_decode+0x2b4>
    }

    // Address
    if (fsp_pkt.dst_adr != fsp_my_adr) {
 800c3f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c3f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3fc:	789a      	ldrb	r2, [r3, #2]
 800c3fe:	4b10      	ldr	r3, [pc, #64]	@ (800c440 <frame_decode+0x2c0>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	429a      	cmp	r2, r3
 800c404:	d001      	beq.n	800c40a <frame_decode+0x28a>
        return FSP_PKT_WRONG_ADR;
 800c406:	2303      	movs	r3, #3
 800c408:	e014      	b.n	800c434 <frame_decode+0x2b4>
    }

    *pkt = fsp_pkt;
 800c40a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c40e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c41c:	4610      	mov	r0, r2
 800c41e:	4619      	mov	r1, r3
 800c420:	23fe      	movs	r3, #254	@ 0xfe
 800c422:	461a      	mov	r2, r3
 800c424:	f003 fca9 	bl	800fd7a <memcpy>


    frame_processing(&fsp_pkt);
 800c428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 f905 	bl	800c63c <frame_processing>


    return 0;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	200065e0 	.word	0x200065e0

0800c444 <frame_decode_rs422>:



int frame_decode_rs422(uint8_t *buffer, uint8_t length, fsp_packet_t *pkt){
 800c444:	b580      	push	{r7, lr}
 800c446:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c450:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c454:	6018      	str	r0, [r3, #0]
 800c456:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c45a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800c45e:	601a      	str	r2, [r3, #0]
 800c460:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c464:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c468:	460a      	mov	r2, r1
 800c46a:	701a      	strb	r2, [r3, #0]

    fsp_packet_t fsp_pkt;
    uint8_t i = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    uint8_t j = 0;
 800c472:	2300      	movs	r3, #0
 800c474:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    uint8_t escape = 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
//	if (length < FSP_PKT_MIN_LENGTH - 2) {
//	        return FSP_PKT_INVALID;
//	}


	while (i < length){
 800c47e:	e060      	b.n	800c542 <frame_decode_rs422+0xfe>
        uint8_t byte = buffer[i++];
 800c480:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c484:	1c5a      	adds	r2, r3, #1
 800c486:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c48a:	461a      	mov	r2, r3
 800c48c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c490:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4413      	add	r3, r2
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (escape) {
 800c49e:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d038      	beq.n	800c518 <frame_decode_rs422+0xd4>
            if (byte == FSP_PKT_TSOD) {
 800c4a6:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800c4aa:	2bdc      	cmp	r3, #220	@ 0xdc
 800c4ac:	d10c      	bne.n	800c4c8 <frame_decode_rs422+0x84>
                decoded_payload[j++] = FSP_PKT_SOD;
 800c4ae:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c4b2:	1c5a      	adds	r2, r3, #1
 800c4b4:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c4be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c4c2:	21ca      	movs	r1, #202	@ 0xca
 800c4c4:	5499      	strb	r1, [r3, r2]
 800c4c6:	e023      	b.n	800c510 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TEOF) {
 800c4c8:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800c4cc:	2bde      	cmp	r3, #222	@ 0xde
 800c4ce:	d10c      	bne.n	800c4ea <frame_decode_rs422+0xa6>
                decoded_payload[j++] = FSP_PKT_EOF;
 800c4d0:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c4d4:	1c5a      	adds	r2, r3, #1
 800c4d6:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c4e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c4e4:	21ef      	movs	r1, #239	@ 0xef
 800c4e6:	5499      	strb	r1, [r3, r2]
 800c4e8:	e012      	b.n	800c510 <frame_decode_rs422+0xcc>
            } else if (byte == FSP_PKT_TESC) {
 800c4ea:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800c4ee:	2bdb      	cmp	r3, #219	@ 0xdb
 800c4f0:	d10c      	bne.n	800c50c <frame_decode_rs422+0xc8>
                decoded_payload[j++] = FSP_PKT_ESC;
 800c4f2:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c4f6:	1c5a      	adds	r2, r3, #1
 800c4f8:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c502:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c506:	21bd      	movs	r1, #189	@ 0xbd
 800c508:	5499      	strb	r1, [r3, r2]
 800c50a:	e001      	b.n	800c510 <frame_decode_rs422+0xcc>
            } else {
            	return FSP_PKT_INVALID;
 800c50c:	2302      	movs	r3, #2
 800c50e:	e08f      	b.n	800c630 <frame_decode_rs422+0x1ec>
            }
            escape = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800c516:	e014      	b.n	800c542 <frame_decode_rs422+0xfe>
        } else if (byte == FSP_PKT_ESC) {
 800c518:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 800c51c:	2bbd      	cmp	r3, #189	@ 0xbd
 800c51e:	d103      	bne.n	800c528 <frame_decode_rs422+0xe4>
        	escape = 1;
 800c520:	2301      	movs	r3, #1
 800c522:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 800c526:	e00c      	b.n	800c542 <frame_decode_rs422+0xfe>
        } else {
            decoded_payload[j++] = byte;
 800c528:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 800c52c:	1c5a      	adds	r2, r3, #1
 800c52e:	f887 220e 	strb.w	r2, [r7, #526]	@ 0x20e
 800c532:	4619      	mov	r1, r3
 800c534:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c538:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c53c:	f897 220c 	ldrb.w	r2, [r7, #524]	@ 0x20c
 800c540:	545a      	strb	r2, [r3, r1]
	while (i < length){
 800c542:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c546:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 800c54a:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	429a      	cmp	r2, r3
 800c552:	d395      	bcc.n	800c480 <frame_decode_rs422+0x3c>
        }
	}

    i = 0;
 800c554:	2300      	movs	r3, #0
 800c556:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
    fsp_pkt.src_adr = decoded_payload[i++];
 800c55a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c564:	461a      	mov	r2, r3
 800c566:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c56a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c56e:	5c9a      	ldrb	r2, [r3, r2]
 800c570:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c578:	705a      	strb	r2, [r3, #1]
    fsp_pkt.dst_adr = decoded_payload[i++];
 800c57a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c584:	461a      	mov	r2, r3
 800c586:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c58a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c58e:	5c9a      	ldrb	r2, [r3, r2]
 800c590:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c598:	709a      	strb	r2, [r3, #2]
    fsp_pkt.length = decoded_payload[i++];
 800c59a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c59e:	1c5a      	adds	r2, r3, #1
 800c5a0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c5aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c5ae:	5c9a      	ldrb	r2, [r3, r2]
 800c5b0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c5b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5b8:	70da      	strb	r2, [r3, #3]
    fsp_pkt.type = decoded_payload[i++];
 800c5ba:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	f887 220f 	strb.w	r2, [r7, #527]	@ 0x20f
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c5ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c5ce:	5c9a      	ldrb	r2, [r3, r2]
 800c5d0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c5d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5d8:	711a      	strb	r2, [r3, #4]

//    if (fsp_pkt.length > FSP_PAYLOAD_MAX_LENGTH || fsp_pkt.length != j - FSP_PKT_HEADER_LENGTH  - FSP_PKT_CRC_LENGTH) {
//        return FSP_PKT_WRONG_LENGTH;
//    }

    memcpy(fsp_pkt.payload, &decoded_payload[i], fsp_pkt.length);
 800c5da:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c5de:	f107 0214 	add.w	r2, r7, #20
 800c5e2:	18d1      	adds	r1, r2, r3
 800c5e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c5e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5ec:	78db      	ldrb	r3, [r3, #3]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800c5f4:	3305      	adds	r3, #5
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f003 fbbf 	bl	800fd7a <memcpy>
    i += fsp_pkt.length;
 800c5fc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c604:	78da      	ldrb	r2, [r3, #3]
 800c606:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800c60a:	4413      	add	r3, r2
 800c60c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
//    // Address
//    if (fsp_pkt.dst_adr != fsp_my_adr) {
//        return FSP_PKT_WRONG_ADR;
//    }

    *pkt = fsp_pkt;
 800c610:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c614:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800c61e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c622:	4610      	mov	r0, r2
 800c624:	4619      	mov	r1, r3
 800c626:	23fe      	movs	r3, #254	@ 0xfe
 800c628:	461a      	mov	r2, r3
 800c62a:	f003 fba6 	bl	800fd7a <memcpy>


    return 0;
 800c62e:	2300      	movs	r3, #0
}
 800c630:	4618      	mov	r0, r3
 800c632:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
	...

0800c63c <frame_processing>:


char pos_str2[10];

int frame_processing(fsp_packet_t *fsp_pkt){
 800c63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c640:	f5ad 6de1 	sub.w	sp, sp, #1800	@ 0x708
 800c644:	af34      	add	r7, sp, #208	@ 0xd0
 800c646:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c64a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c64e:	6018      	str	r0, [r3, #0]


	switch (fsp_pkt->src_adr){
 800c650:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c654:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	785b      	ldrb	r3, [r3, #1]
 800c65c:	3b02      	subs	r3, #2
 800c65e:	2b03      	cmp	r3, #3
 800c660:	f202 82d3 	bhi.w	800ec0a <frame_processing+0x25ce>
 800c664:	a201      	add	r2, pc, #4	@ (adr r2, 800c66c <frame_processing+0x30>)
 800c666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66a:	bf00      	nop
 800c66c:	0800c67d 	.word	0x0800c67d
 800c670:	0800d321 	.word	0x0800d321
 800c674:	0800dc3f 	.word	0x0800dc3f
 800c678:	0800dc47 	.word	0x0800dc47
		case FSP_ADR_PMU:
			switch (fsp_pkt->type)
 800c67c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c680:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	791b      	ldrb	r3, [r3, #4]
 800c688:	2b05      	cmp	r3, #5
 800c68a:	d003      	beq.n	800c694 <frame_processing+0x58>
 800c68c:	2b07      	cmp	r3, #7
 800c68e:	d019      	beq.n	800c6c4 <frame_processing+0x88>
 800c690:	f000 be3c 	b.w	800d30c <frame_processing+0xcd0>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800c694:	f7f5 fde4 	bl	8002260 <clear_send_flag>

                    if (uart_choose_uart5) {
 800c698:	4bad      	ldr	r3, [pc, #692]	@ (800c950 <frame_processing+0x314>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d003      	beq.n	800c6aa <frame_processing+0x6e>
                    	Uart_sendstring(UART5, "\nPMU_ACK\r\n> ");
 800c6a2:	49ac      	ldr	r1, [pc, #688]	@ (800c954 <frame_processing+0x318>)
 800c6a4:	48ac      	ldr	r0, [pc, #688]	@ (800c958 <frame_processing+0x31c>)
 800c6a6:	f7f5 fc99 	bl	8001fdc <Uart_sendstring>
                    }
                    if (uart_choose_usart2) {
 800c6aa:	4bac      	ldr	r3, [pc, #688]	@ (800c95c <frame_processing+0x320>)
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d003      	beq.n	800c6bc <frame_processing+0x80>
                    	Uart_sendstring(USART2, "\nPMU_ACK\r\n> ");
 800c6b4:	49a7      	ldr	r1, [pc, #668]	@ (800c954 <frame_processing+0x318>)
 800c6b6:	48aa      	ldr	r0, [pc, #680]	@ (800c960 <frame_processing+0x324>)
 800c6b8:	f7f5 fc90 	bl	8001fdc <Uart_sendstring>
                    }
					Uart_sendstring(USART6, "\nPMU_ACK\r\n> ");
 800c6bc:	49a5      	ldr	r1, [pc, #660]	@ (800c954 <frame_processing+0x318>)
 800c6be:	48a9      	ldr	r0, [pc, #676]	@ (800c964 <frame_processing+0x328>)
 800c6c0:	f7f5 fc8c 	bl	8001fdc <Uart_sendstring>

				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800c6c4:	f7f5 fdcc 	bl	8002260 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800c6c8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c6cc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	795b      	ldrb	r3, [r3, #5]
 800c6d4:	2b08      	cmp	r3, #8
 800c6d6:	dc1b      	bgt.n	800c710 <frame_processing+0xd4>
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f2c0 861c 	blt.w	800d316 <frame_processing+0xcda>
 800c6de:	2b08      	cmp	r3, #8
 800c6e0:	f200 8619 	bhi.w	800d316 <frame_processing+0xcda>
 800c6e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c6ec <frame_processing+0xb0>)
 800c6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ea:	bf00      	nop
 800c6ec:	0800c719 	.word	0x0800c719
 800c6f0:	0800c7c5 	.word	0x0800c7c5
 800c6f4:	0800ca35 	.word	0x0800ca35
 800c6f8:	0800cbf1 	.word	0x0800cbf1
 800c6fc:	0800ccd7 	.word	0x0800ccd7
 800c700:	0800d317 	.word	0x0800d317
 800c704:	0800d317 	.word	0x0800d317
 800c708:	0800d317 	.word	0x0800d317
 800c70c:	0800cddd 	.word	0x0800cddd
 800c710:	2bff      	cmp	r3, #255	@ 0xff
 800c712:	d02c      	beq.n	800c76e <frame_processing+0x132>

							    }
							    break;
					}

					break;
 800c714:	f000 bdff 	b.w	800d316 <frame_processing+0xcda>
							sprintf(buffer_0x00, "PMU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800c718:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c71c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	799b      	ldrb	r3, [r3, #6]
 800c724:	461a      	mov	r2, r3
 800c726:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800c72a:	498f      	ldr	r1, [pc, #572]	@ (800c968 <frame_processing+0x32c>)
 800c72c:	4618      	mov	r0, r3
 800c72e:	f003 fa41 	bl	800fbb4 <siprintf>
		                    if (uart_choose_uart5) {
 800c732:	4b87      	ldr	r3, [pc, #540]	@ (800c950 <frame_processing+0x314>)
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d005      	beq.n	800c748 <frame_processing+0x10c>
								Uart_sendstring(UART5, buffer_0x00);
 800c73c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800c740:	4619      	mov	r1, r3
 800c742:	4885      	ldr	r0, [pc, #532]	@ (800c958 <frame_processing+0x31c>)
 800c744:	f7f5 fc4a 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800c748:	4b84      	ldr	r3, [pc, #528]	@ (800c95c <frame_processing+0x320>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d005      	beq.n	800c75e <frame_processing+0x122>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800c752:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800c756:	4619      	mov	r1, r3
 800c758:	4881      	ldr	r0, [pc, #516]	@ (800c960 <frame_processing+0x324>)
 800c75a:	f7f5 fc3f 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x00);
 800c75e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800c762:	4619      	mov	r1, r3
 800c764:	487f      	ldr	r0, [pc, #508]	@ (800c964 <frame_processing+0x328>)
 800c766:	f7f5 fc39 	bl	8001fdc <Uart_sendstring>
							break;
 800c76a:	f000 bdce 	b.w	800d30a <frame_processing+0xcce>
							sprintf(buffer_0xFF, "PMU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800c76e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c772:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	799b      	ldrb	r3, [r3, #6]
 800c77a:	461a      	mov	r2, r3
 800c77c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800c780:	497a      	ldr	r1, [pc, #488]	@ (800c96c <frame_processing+0x330>)
 800c782:	4618      	mov	r0, r3
 800c784:	f003 fa16 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800c788:	4b71      	ldr	r3, [pc, #452]	@ (800c950 <frame_processing+0x314>)
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d005      	beq.n	800c79e <frame_processing+0x162>
								Uart_sendstring(UART5, buffer_0xFF);
 800c792:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800c796:	4619      	mov	r1, r3
 800c798:	486f      	ldr	r0, [pc, #444]	@ (800c958 <frame_processing+0x31c>)
 800c79a:	f7f5 fc1f 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800c79e:	4b6f      	ldr	r3, [pc, #444]	@ (800c95c <frame_processing+0x320>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d005      	beq.n	800c7b4 <frame_processing+0x178>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800c7a8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	486c      	ldr	r0, [pc, #432]	@ (800c960 <frame_processing+0x324>)
 800c7b0:	f7f5 fc14 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0xFF);
 800c7b4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	486a      	ldr	r0, [pc, #424]	@ (800c964 <frame_processing+0x328>)
 800c7bc:	f7f5 fc0e 	bl	8001fdc <Uart_sendstring>
							break;
 800c7c0:	f000 bda3 	b.w	800d30a <frame_processing+0xcce>
						    int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800c7c4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c7c8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	799b      	ldrb	r3, [r3, #6]
 800c7d0:	021b      	lsls	r3, r3, #8
 800c7d2:	b21a      	sxth	r2, r3
 800c7d4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c7d8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	79db      	ldrb	r3, [r3, #7]
 800c7e0:	b21b      	sxth	r3, r3
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	f8a7 356e 	strh.w	r3, [r7, #1390]	@ 0x56e
						    int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800c7e8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c7ec:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	7a1b      	ldrb	r3, [r3, #8]
 800c7f4:	021b      	lsls	r3, r3, #8
 800c7f6:	b21a      	sxth	r2, r3
 800c7f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c7fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	7a5b      	ldrb	r3, [r3, #9]
 800c804:	b21b      	sxth	r3, r3
 800c806:	4313      	orrs	r3, r2
 800c808:	f8a7 356c 	strh.w	r3, [r7, #1388]	@ 0x56c
						    int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800c80c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c810:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	7a9b      	ldrb	r3, [r3, #10]
 800c818:	021b      	lsls	r3, r3, #8
 800c81a:	b21a      	sxth	r2, r3
 800c81c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c820:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	7adb      	ldrb	r3, [r3, #11]
 800c828:	b21b      	sxth	r3, r3
 800c82a:	4313      	orrs	r3, r2
 800c82c:	f8a7 356a 	strh.w	r3, [r7, #1386]	@ 0x56a
						    int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800c830:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c834:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	7b1b      	ldrb	r3, [r3, #12]
 800c83c:	021b      	lsls	r3, r3, #8
 800c83e:	b21a      	sxth	r2, r3
 800c840:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800c844:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	7b5b      	ldrb	r3, [r3, #13]
 800c84c:	b21b      	sxth	r3, r3
 800c84e:	4313      	orrs	r3, r2
 800c850:	f8a7 3568 	strh.w	r3, [r7, #1384]	@ 0x568
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800c854:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800c858:	2b00      	cmp	r3, #0
 800c85a:	da03      	bge.n	800c864 <frame_processing+0x228>
 800c85c:	4b44      	ldr	r3, [pc, #272]	@ (800c970 <frame_processing+0x334>)
 800c85e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c862:	e002      	b.n	800c86a <frame_processing+0x22e>
 800c864:	4b43      	ldr	r3, [pc, #268]	@ (800c974 <frame_processing+0x338>)
 800c866:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800c86a:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800c86e:	2b00      	cmp	r3, #0
 800c870:	bfb8      	it	lt
 800c872:	425b      	neglt	r3, r3
 800c874:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800c876:	4a40      	ldr	r2, [pc, #256]	@ (800c978 <frame_processing+0x33c>)
 800c878:	fb82 1203 	smull	r1, r2, r2, r3
 800c87c:	1152      	asrs	r2, r2, #5
 800c87e:	17db      	asrs	r3, r3, #31
 800c880:	eba2 0c03 	sub.w	ip, r2, r3
						            ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800c884:	f9b7 356e 	ldrsh.w	r3, [r7, #1390]	@ 0x56e
 800c888:	2b00      	cmp	r3, #0
 800c88a:	bfb8      	it	lt
 800c88c:	425b      	neglt	r3, r3
 800c88e:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800c890:	4a39      	ldr	r2, [pc, #228]	@ (800c978 <frame_processing+0x33c>)
 800c892:	fb82 1203 	smull	r1, r2, r2, r3
 800c896:	1151      	asrs	r1, r2, #5
 800c898:	17da      	asrs	r2, r3, #31
 800c89a:	1a8c      	subs	r4, r1, r2
 800c89c:	2264      	movs	r2, #100	@ 0x64
 800c89e:	fb04 f202 	mul.w	r2, r4, r2
 800c8a2:	1a9c      	subs	r4, r3, r2
 800c8a4:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	da01      	bge.n	800c8b0 <frame_processing+0x274>
 800c8ac:	4e30      	ldr	r6, [pc, #192]	@ (800c970 <frame_processing+0x334>)
 800c8ae:	e000      	b.n	800c8b2 <frame_processing+0x276>
 800c8b0:	4e30      	ldr	r6, [pc, #192]	@ (800c974 <frame_processing+0x338>)
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800c8b2:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	bfb8      	it	lt
 800c8ba:	425b      	neglt	r3, r3
 800c8bc:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800c8be:	4a2e      	ldr	r2, [pc, #184]	@ (800c978 <frame_processing+0x33c>)
 800c8c0:	fb82 1203 	smull	r1, r2, r2, r3
 800c8c4:	1152      	asrs	r2, r2, #5
 800c8c6:	17db      	asrs	r3, r3, #31
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						            ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800c8ce:	f9b7 356c 	ldrsh.w	r3, [r7, #1388]	@ 0x56c
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	bfb8      	it	lt
 800c8d6:	425b      	neglt	r3, r3
 800c8d8:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800c8da:	4a27      	ldr	r2, [pc, #156]	@ (800c978 <frame_processing+0x33c>)
 800c8dc:	fb82 1203 	smull	r1, r2, r2, r3
 800c8e0:	1151      	asrs	r1, r2, #5
 800c8e2:	17da      	asrs	r2, r3, #31
 800c8e4:	1a8d      	subs	r5, r1, r2
 800c8e6:	2264      	movs	r2, #100	@ 0x64
 800c8e8:	fb05 f202 	mul.w	r2, r5, r2
 800c8ec:	1a9d      	subs	r5, r3, r2
 800c8ee:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	da03      	bge.n	800c8fe <frame_processing+0x2c2>
 800c8f6:	4b1e      	ldr	r3, [pc, #120]	@ (800c970 <frame_processing+0x334>)
 800c8f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c8fc:	e002      	b.n	800c904 <frame_processing+0x2c8>
 800c8fe:	4b1d      	ldr	r3, [pc, #116]	@ (800c974 <frame_processing+0x338>)
 800c900:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800c904:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800c908:	2b00      	cmp	r3, #0
 800c90a:	bfb8      	it	lt
 800c90c:	425b      	neglt	r3, r3
 800c90e:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800c910:	4a19      	ldr	r2, [pc, #100]	@ (800c978 <frame_processing+0x33c>)
 800c912:	fb82 1203 	smull	r1, r2, r2, r3
 800c916:	1152      	asrs	r2, r2, #5
 800c918:	17db      	asrs	r3, r3, #31
 800c91a:	1ad3      	subs	r3, r2, r3
 800c91c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
						            ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800c920:	f9b7 356a 	ldrsh.w	r3, [r7, #1386]	@ 0x56a
 800c924:	2b00      	cmp	r3, #0
 800c926:	bfb8      	it	lt
 800c928:	425b      	neglt	r3, r3
 800c92a:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800c92c:	4a12      	ldr	r2, [pc, #72]	@ (800c978 <frame_processing+0x33c>)
 800c92e:	fb82 1203 	smull	r1, r2, r2, r3
 800c932:	1151      	asrs	r1, r2, #5
 800c934:	17da      	asrs	r2, r3, #31
 800c936:	1a89      	subs	r1, r1, r2
 800c938:	2264      	movs	r2, #100	@ 0x64
 800c93a:	fb01 f202 	mul.w	r2, r1, r2
 800c93e:	1a99      	subs	r1, r3, r2
 800c940:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800c944:	2b00      	cmp	r3, #0
 800c946:	da19      	bge.n	800c97c <frame_processing+0x340>
 800c948:	4b09      	ldr	r3, [pc, #36]	@ (800c970 <frame_processing+0x334>)
 800c94a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c94e:	e018      	b.n	800c982 <frame_processing+0x346>
 800c950:	200058b8 	.word	0x200058b8
 800c954:	0801582c 	.word	0x0801582c
 800c958:	40005000 	.word	0x40005000
 800c95c:	200058b9 	.word	0x200058b9
 800c960:	40004400 	.word	0x40004400
 800c964:	40011400 	.word	0x40011400
 800c968:	0801583c 	.word	0x0801583c
 800c96c:	08015858 	.word	0x08015858
 800c970:	08015874 	.word	0x08015874
 800c974:	08015878 	.word	0x08015878
 800c978:	51eb851f 	.word	0x51eb851f
 800c97c:	4b93      	ldr	r3, [pc, #588]	@ (800cbcc <frame_processing+0x590>)
 800c97e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800c982:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800c986:	2b00      	cmp	r3, #0
 800c988:	bfb8      	it	lt
 800c98a:	425b      	neglt	r3, r3
 800c98c:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800c98e:	4a90      	ldr	r2, [pc, #576]	@ (800cbd0 <frame_processing+0x594>)
 800c990:	fb82 0203 	smull	r0, r2, r2, r3
 800c994:	1152      	asrs	r2, r2, #5
 800c996:	17db      	asrs	r3, r3, #31
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						            ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100);
 800c99e:	f9b7 3568 	ldrsh.w	r3, [r7, #1384]	@ 0x568
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bfb8      	it	lt
 800c9a6:	425b      	neglt	r3, r3
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	4618      	mov	r0, r3
						    sprintf(buffer_0x01, "PMU_Res: CMDcode 0x01 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d]\n",
 800c9ac:	4b88      	ldr	r3, [pc, #544]	@ (800cbd0 <frame_processing+0x594>)
 800c9ae:	fb83 2300 	smull	r2, r3, r3, r0
 800c9b2:	115a      	asrs	r2, r3, #5
 800c9b4:	17c3      	asrs	r3, r0, #31
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	2264      	movs	r2, #100	@ 0x64
 800c9ba:	fb02 f303 	mul.w	r3, r2, r3
 800c9be:	1ac3      	subs	r3, r0, r3
 800c9c0:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800c9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c9ca:	9308      	str	r3, [sp, #32]
 800c9cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c9d0:	9307      	str	r3, [sp, #28]
 800c9d2:	9106      	str	r1, [sp, #24]
 800c9d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c9d8:	9305      	str	r3, [sp, #20]
 800c9da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9de:	9304      	str	r3, [sp, #16]
 800c9e0:	9503      	str	r5, [sp, #12]
 800c9e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c9e6:	9302      	str	r3, [sp, #8]
 800c9e8:	9601      	str	r6, [sp, #4]
 800c9ea:	9400      	str	r4, [sp, #0]
 800c9ec:	4663      	mov	r3, ip
 800c9ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c9f2:	4978      	ldr	r1, [pc, #480]	@ (800cbd4 <frame_processing+0x598>)
 800c9f4:	f003 f8de 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800c9f8:	4b77      	ldr	r3, [pc, #476]	@ (800cbd8 <frame_processing+0x59c>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d005      	beq.n	800ca0e <frame_processing+0x3d2>
								Uart_sendstring(UART5, buffer_0x01);
 800ca02:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ca06:	4619      	mov	r1, r3
 800ca08:	4874      	ldr	r0, [pc, #464]	@ (800cbdc <frame_processing+0x5a0>)
 800ca0a:	f7f5 fae7 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800ca0e:	4b74      	ldr	r3, [pc, #464]	@ (800cbe0 <frame_processing+0x5a4>)
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d005      	beq.n	800ca24 <frame_processing+0x3e8>
		                    	Uart_sendstring(USART2, buffer_0x01);
 800ca18:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	4871      	ldr	r0, [pc, #452]	@ (800cbe4 <frame_processing+0x5a8>)
 800ca20:	f7f5 fadc 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x01);
 800ca24:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ca28:	4619      	mov	r1, r3
 800ca2a:	486f      	ldr	r0, [pc, #444]	@ (800cbe8 <frame_processing+0x5ac>)
 800ca2c:	f7f5 fad6 	bl	8001fdc <Uart_sendstring>
						break;
 800ca30:	f000 bc6b 	b.w	800d30a <frame_processing+0xcce>
					        uint16_t bat0 = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800ca34:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ca38:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	799b      	ldrb	r3, [r3, #6]
 800ca40:	021b      	lsls	r3, r3, #8
 800ca42:	b21a      	sxth	r2, r3
 800ca44:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ca48:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	79db      	ldrb	r3, [r3, #7]
 800ca50:	b21b      	sxth	r3, r3
 800ca52:	4313      	orrs	r3, r2
 800ca54:	b21b      	sxth	r3, r3
 800ca56:	f8a7 3576 	strh.w	r3, [r7, #1398]	@ 0x576
					        uint16_t bat1 = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800ca5a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ca5e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	7a1b      	ldrb	r3, [r3, #8]
 800ca66:	021b      	lsls	r3, r3, #8
 800ca68:	b21a      	sxth	r2, r3
 800ca6a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ca6e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	7a5b      	ldrb	r3, [r3, #9]
 800ca76:	b21b      	sxth	r3, r3
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	b21b      	sxth	r3, r3
 800ca7c:	f8a7 3574 	strh.w	r3, [r7, #1396]	@ 0x574
					        uint16_t bat2 = (uint16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800ca80:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ca84:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	7a9b      	ldrb	r3, [r3, #10]
 800ca8c:	021b      	lsls	r3, r3, #8
 800ca8e:	b21a      	sxth	r2, r3
 800ca90:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ca94:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	7adb      	ldrb	r3, [r3, #11]
 800ca9c:	b21b      	sxth	r3, r3
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	b21b      	sxth	r3, r3
 800caa2:	f8a7 3572 	strh.w	r3, [r7, #1394]	@ 0x572
					        uint16_t bat3 = (uint16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800caa6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800caaa:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	7b1b      	ldrb	r3, [r3, #12]
 800cab2:	021b      	lsls	r3, r3, #8
 800cab4:	b21a      	sxth	r2, r3
 800cab6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800caba:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	7b5b      	ldrb	r3, [r3, #13]
 800cac2:	b21b      	sxth	r3, r3
 800cac4:	4313      	orrs	r3, r2
 800cac6:	b21b      	sxth	r3, r3
 800cac8:	f8a7 3570 	strh.w	r3, [r7, #1392]	@ 0x570
					        sprintf(buffer_0x02, "PMU_Res: CMDcode 0x02 [BAT0: %d.%02d V, BAT1: %d.%02d V, BAT2: %d.%02d V, BAT3: %d.%02d V]\n",
 800cacc:	f8b7 3576 	ldrh.w	r3, [r7, #1398]	@ 0x576
 800cad0:	4a3f      	ldr	r2, [pc, #252]	@ (800cbd0 <frame_processing+0x594>)
 800cad2:	fba2 2303 	umull	r2, r3, r2, r3
 800cad6:	095b      	lsrs	r3, r3, #5
 800cad8:	b29b      	uxth	r3, r3
 800cada:	469c      	mov	ip, r3
 800cadc:	f8b7 3576 	ldrh.w	r3, [r7, #1398]	@ 0x576
 800cae0:	4a3b      	ldr	r2, [pc, #236]	@ (800cbd0 <frame_processing+0x594>)
 800cae2:	fba2 1203 	umull	r1, r2, r2, r3
 800cae6:	0952      	lsrs	r2, r2, #5
 800cae8:	2164      	movs	r1, #100	@ 0x64
 800caea:	fb01 f202 	mul.w	r2, r1, r2
 800caee:	1a9b      	subs	r3, r3, r2
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	469e      	mov	lr, r3
 800caf4:	f8b7 3574 	ldrh.w	r3, [r7, #1396]	@ 0x574
 800caf8:	4a35      	ldr	r2, [pc, #212]	@ (800cbd0 <frame_processing+0x594>)
 800cafa:	fba2 2303 	umull	r2, r3, r2, r3
 800cafe:	095b      	lsrs	r3, r3, #5
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	461c      	mov	r4, r3
 800cb04:	f8b7 3574 	ldrh.w	r3, [r7, #1396]	@ 0x574
 800cb08:	4a31      	ldr	r2, [pc, #196]	@ (800cbd0 <frame_processing+0x594>)
 800cb0a:	fba2 1203 	umull	r1, r2, r2, r3
 800cb0e:	0952      	lsrs	r2, r2, #5
 800cb10:	2164      	movs	r1, #100	@ 0x64
 800cb12:	fb01 f202 	mul.w	r2, r1, r2
 800cb16:	1a9b      	subs	r3, r3, r2
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	461d      	mov	r5, r3
 800cb1c:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	@ 0x572
 800cb20:	4a2b      	ldr	r2, [pc, #172]	@ (800cbd0 <frame_processing+0x594>)
 800cb22:	fba2 2303 	umull	r2, r3, r2, r3
 800cb26:	095b      	lsrs	r3, r3, #5
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	461e      	mov	r6, r3
 800cb2c:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	@ 0x572
 800cb30:	4a27      	ldr	r2, [pc, #156]	@ (800cbd0 <frame_processing+0x594>)
 800cb32:	fba2 1203 	umull	r1, r2, r2, r3
 800cb36:	0952      	lsrs	r2, r2, #5
 800cb38:	2164      	movs	r1, #100	@ 0x64
 800cb3a:	fb01 f202 	mul.w	r2, r1, r2
 800cb3e:	1a9b      	subs	r3, r3, r2
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cb46:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	@ 0x570
 800cb4a:	4a21      	ldr	r2, [pc, #132]	@ (800cbd0 <frame_processing+0x594>)
 800cb4c:	fba2 2303 	umull	r2, r3, r2, r3
 800cb50:	095b      	lsrs	r3, r3, #5
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cb58:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	@ 0x570
 800cb5c:	4a1c      	ldr	r2, [pc, #112]	@ (800cbd0 <frame_processing+0x594>)
 800cb5e:	fba2 1203 	umull	r1, r2, r2, r3
 800cb62:	0952      	lsrs	r2, r2, #5
 800cb64:	2164      	movs	r1, #100	@ 0x64
 800cb66:	fb01 f202 	mul.w	r2, r1, r2
 800cb6a:	1a9b      	subs	r3, r3, r2
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800cb72:	9305      	str	r3, [sp, #20]
 800cb74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cb78:	9204      	str	r2, [sp, #16]
 800cb7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cb7e:	9303      	str	r3, [sp, #12]
 800cb80:	9602      	str	r6, [sp, #8]
 800cb82:	9501      	str	r5, [sp, #4]
 800cb84:	9400      	str	r4, [sp, #0]
 800cb86:	4673      	mov	r3, lr
 800cb88:	4662      	mov	r2, ip
 800cb8a:	4918      	ldr	r1, [pc, #96]	@ (800cbec <frame_processing+0x5b0>)
 800cb8c:	f003 f812 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800cb90:	4b11      	ldr	r3, [pc, #68]	@ (800cbd8 <frame_processing+0x59c>)
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d005      	beq.n	800cba6 <frame_processing+0x56a>
								Uart_sendstring(UART5, buffer_0x02);
 800cb9a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cb9e:	4619      	mov	r1, r3
 800cba0:	480e      	ldr	r0, [pc, #56]	@ (800cbdc <frame_processing+0x5a0>)
 800cba2:	f7f5 fa1b 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800cba6:	4b0e      	ldr	r3, [pc, #56]	@ (800cbe0 <frame_processing+0x5a4>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d005      	beq.n	800cbbc <frame_processing+0x580>
		                    	Uart_sendstring(USART2, buffer_0x02);
 800cbb0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	480b      	ldr	r0, [pc, #44]	@ (800cbe4 <frame_processing+0x5a8>)
 800cbb8:	f7f5 fa10 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x02);
 800cbbc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	4809      	ldr	r0, [pc, #36]	@ (800cbe8 <frame_processing+0x5ac>)
 800cbc4:	f7f5 fa0a 	bl	8001fdc <Uart_sendstring>
							break;
 800cbc8:	e39f      	b.n	800d30a <frame_processing+0xcce>
 800cbca:	bf00      	nop
 800cbcc:	08015878 	.word	0x08015878
 800cbd0:	51eb851f 	.word	0x51eb851f
 800cbd4:	0801587c 	.word	0x0801587c
 800cbd8:	200058b8 	.word	0x200058b8
 800cbdc:	40005000 	.word	0x40005000
 800cbe0:	200058b9 	.word	0x200058b9
 800cbe4:	40004400 	.word	0x40004400
 800cbe8:	40011400 	.word	0x40011400
 800cbec:	080158dc 	.word	0x080158dc
						    uint16_t vin = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800cbf0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cbf4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	799b      	ldrb	r3, [r3, #6]
 800cbfc:	021b      	lsls	r3, r3, #8
 800cbfe:	b21a      	sxth	r2, r3
 800cc00:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cc04:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	79db      	ldrb	r3, [r3, #7]
 800cc0c:	b21b      	sxth	r3, r3
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	b21b      	sxth	r3, r3
 800cc12:	f8a7 357a 	strh.w	r3, [r7, #1402]	@ 0x57a
						    uint16_t iin = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800cc16:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cc1a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	7a1b      	ldrb	r3, [r3, #8]
 800cc22:	021b      	lsls	r3, r3, #8
 800cc24:	b21a      	sxth	r2, r3
 800cc26:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cc2a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	7a5b      	ldrb	r3, [r3, #9]
 800cc32:	b21b      	sxth	r3, r3
 800cc34:	4313      	orrs	r3, r2
 800cc36:	b21b      	sxth	r3, r3
 800cc38:	f8a7 3578 	strh.w	r3, [r7, #1400]	@ 0x578
						    sprintf(buffer_0x03, "PMU_Res: CMDcode 0x03 [VIN: %d.%02d V, IIN: %d.%02d A]\n",
 800cc3c:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	@ 0x57a
 800cc40:	4a5e      	ldr	r2, [pc, #376]	@ (800cdbc <frame_processing+0x780>)
 800cc42:	fba2 2303 	umull	r2, r3, r2, r3
 800cc46:	095b      	lsrs	r3, r3, #5
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	461d      	mov	r5, r3
 800cc4c:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	@ 0x57a
 800cc50:	4a5a      	ldr	r2, [pc, #360]	@ (800cdbc <frame_processing+0x780>)
 800cc52:	fba2 1203 	umull	r1, r2, r2, r3
 800cc56:	0952      	lsrs	r2, r2, #5
 800cc58:	2164      	movs	r1, #100	@ 0x64
 800cc5a:	fb01 f202 	mul.w	r2, r1, r2
 800cc5e:	1a9b      	subs	r3, r3, r2
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	461e      	mov	r6, r3
 800cc64:	f8b7 3578 	ldrh.w	r3, [r7, #1400]	@ 0x578
 800cc68:	4a54      	ldr	r2, [pc, #336]	@ (800cdbc <frame_processing+0x780>)
 800cc6a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc6e:	095b      	lsrs	r3, r3, #5
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	461c      	mov	r4, r3
 800cc74:	f8b7 3578 	ldrh.w	r3, [r7, #1400]	@ 0x578
 800cc78:	4a50      	ldr	r2, [pc, #320]	@ (800cdbc <frame_processing+0x780>)
 800cc7a:	fba2 1203 	umull	r1, r2, r2, r3
 800cc7e:	0952      	lsrs	r2, r2, #5
 800cc80:	2164      	movs	r1, #100	@ 0x64
 800cc82:	fb01 f202 	mul.w	r2, r1, r2
 800cc86:	1a9b      	subs	r3, r3, r2
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800cc8e:	9301      	str	r3, [sp, #4]
 800cc90:	9400      	str	r4, [sp, #0]
 800cc92:	4633      	mov	r3, r6
 800cc94:	462a      	mov	r2, r5
 800cc96:	494a      	ldr	r1, [pc, #296]	@ (800cdc0 <frame_processing+0x784>)
 800cc98:	f002 ff8c 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800cc9c:	4b49      	ldr	r3, [pc, #292]	@ (800cdc4 <frame_processing+0x788>)
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d005      	beq.n	800ccb2 <frame_processing+0x676>
								Uart_sendstring(UART5, buffer_0x03);
 800cca6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4846      	ldr	r0, [pc, #280]	@ (800cdc8 <frame_processing+0x78c>)
 800ccae:	f7f5 f995 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800ccb2:	4b46      	ldr	r3, [pc, #280]	@ (800cdcc <frame_processing+0x790>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d005      	beq.n	800ccc8 <frame_processing+0x68c>
		                    	Uart_sendstring(USART2, buffer_0x03);
 800ccbc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	4843      	ldr	r0, [pc, #268]	@ (800cdd0 <frame_processing+0x794>)
 800ccc4:	f7f5 f98a 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x03);
 800ccc8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cccc:	4619      	mov	r1, r3
 800ccce:	4841      	ldr	r0, [pc, #260]	@ (800cdd4 <frame_processing+0x798>)
 800ccd0:	f7f5 f984 	bl	8001fdc <Uart_sendstring>
						    break;
 800ccd4:	e319      	b.n	800d30a <frame_processing+0xcce>
						    uint16_t vout = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800ccd6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ccda:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	799b      	ldrb	r3, [r3, #6]
 800cce2:	021b      	lsls	r3, r3, #8
 800cce4:	b21a      	sxth	r2, r3
 800cce6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ccea:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	79db      	ldrb	r3, [r3, #7]
 800ccf2:	b21b      	sxth	r3, r3
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	b21b      	sxth	r3, r3
 800ccf8:	f8a7 357e 	strh.w	r3, [r7, #1406]	@ 0x57e
						    uint16_t iout = (uint16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800ccfc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cd00:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	7a1b      	ldrb	r3, [r3, #8]
 800cd08:	021b      	lsls	r3, r3, #8
 800cd0a:	b21a      	sxth	r2, r3
 800cd0c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cd10:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	7a5b      	ldrb	r3, [r3, #9]
 800cd18:	b21b      	sxth	r3, r3
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	b21b      	sxth	r3, r3
 800cd1e:	f8a7 357c 	strh.w	r3, [r7, #1404]	@ 0x57c
						    sprintf(buffer_0x04_pmu, "PMU_Res: CMDcode 0x04 [VOUT: %d.%02d V, IOUT: %d.%02d A]\n",
 800cd22:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 800cd26:	4a25      	ldr	r2, [pc, #148]	@ (800cdbc <frame_processing+0x780>)
 800cd28:	fba2 2303 	umull	r2, r3, r2, r3
 800cd2c:	095b      	lsrs	r3, r3, #5
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	461d      	mov	r5, r3
 800cd32:	f8b7 357e 	ldrh.w	r3, [r7, #1406]	@ 0x57e
 800cd36:	4a21      	ldr	r2, [pc, #132]	@ (800cdbc <frame_processing+0x780>)
 800cd38:	fba2 1203 	umull	r1, r2, r2, r3
 800cd3c:	0952      	lsrs	r2, r2, #5
 800cd3e:	2164      	movs	r1, #100	@ 0x64
 800cd40:	fb01 f202 	mul.w	r2, r1, r2
 800cd44:	1a9b      	subs	r3, r3, r2
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	461e      	mov	r6, r3
 800cd4a:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 800cd4e:	4a1b      	ldr	r2, [pc, #108]	@ (800cdbc <frame_processing+0x780>)
 800cd50:	fba2 2303 	umull	r2, r3, r2, r3
 800cd54:	095b      	lsrs	r3, r3, #5
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	461c      	mov	r4, r3
 800cd5a:	f8b7 357c 	ldrh.w	r3, [r7, #1404]	@ 0x57c
 800cd5e:	4a17      	ldr	r2, [pc, #92]	@ (800cdbc <frame_processing+0x780>)
 800cd60:	fba2 1203 	umull	r1, r2, r2, r3
 800cd64:	0952      	lsrs	r2, r2, #5
 800cd66:	2164      	movs	r1, #100	@ 0x64
 800cd68:	fb01 f202 	mul.w	r2, r1, r2
 800cd6c:	1a9b      	subs	r3, r3, r2
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800cd74:	9301      	str	r3, [sp, #4]
 800cd76:	9400      	str	r4, [sp, #0]
 800cd78:	4633      	mov	r3, r6
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	4916      	ldr	r1, [pc, #88]	@ (800cdd8 <frame_processing+0x79c>)
 800cd7e:	f002 ff19 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800cd82:	4b10      	ldr	r3, [pc, #64]	@ (800cdc4 <frame_processing+0x788>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d005      	beq.n	800cd98 <frame_processing+0x75c>
							    Uart_sendstring(UART5, buffer_0x04_pmu);
 800cd8c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cd90:	4619      	mov	r1, r3
 800cd92:	480d      	ldr	r0, [pc, #52]	@ (800cdc8 <frame_processing+0x78c>)
 800cd94:	f7f5 f922 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800cd98:	4b0c      	ldr	r3, [pc, #48]	@ (800cdcc <frame_processing+0x790>)
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d005      	beq.n	800cdae <frame_processing+0x772>
		                    	Uart_sendstring(USART2, buffer_0x04_pmu);
 800cda2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cda6:	4619      	mov	r1, r3
 800cda8:	4809      	ldr	r0, [pc, #36]	@ (800cdd0 <frame_processing+0x794>)
 800cdaa:	f7f5 f917 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x04_pmu);
 800cdae:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	4807      	ldr	r0, [pc, #28]	@ (800cdd4 <frame_processing+0x798>)
 800cdb6:	f7f5 f911 	bl	8001fdc <Uart_sendstring>
							break;
 800cdba:	e2a6      	b.n	800d30a <frame_processing+0xcce>
 800cdbc:	51eb851f 	.word	0x51eb851f
 800cdc0:	08015938 	.word	0x08015938
 800cdc4:	200058b8 	.word	0x200058b8
 800cdc8:	40005000 	.word	0x40005000
 800cdcc:	200058b9 	.word	0x200058b9
 800cdd0:	40004400 	.word	0x40004400
 800cdd4:	40011400 	.word	0x40011400
 800cdd8:	08015970 	.word	0x08015970
							    	int16_t ntc0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800cddc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cde0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	799b      	ldrb	r3, [r3, #6]
 800cde8:	021b      	lsls	r3, r3, #8
 800cdea:	b21a      	sxth	r2, r3
 800cdec:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cdf0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	79db      	ldrb	r3, [r3, #7]
 800cdf8:	b21b      	sxth	r3, r3
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	f8a7 3596 	strh.w	r3, [r7, #1430]	@ 0x596
							    	int16_t ntc1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800ce00:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ce04:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	7a1b      	ldrb	r3, [r3, #8]
 800ce0c:	021b      	lsls	r3, r3, #8
 800ce0e:	b21a      	sxth	r2, r3
 800ce10:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ce14:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	7a5b      	ldrb	r3, [r3, #9]
 800ce1c:	b21b      	sxth	r3, r3
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	f8a7 3594 	strh.w	r3, [r7, #1428]	@ 0x594
							    	int16_t ntc2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800ce24:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ce28:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	7a9b      	ldrb	r3, [r3, #10]
 800ce30:	021b      	lsls	r3, r3, #8
 800ce32:	b21a      	sxth	r2, r3
 800ce34:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ce38:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	7adb      	ldrb	r3, [r3, #11]
 800ce40:	b21b      	sxth	r3, r3
 800ce42:	4313      	orrs	r3, r2
 800ce44:	f8a7 3592 	strh.w	r3, [r7, #1426]	@ 0x592
							    	int16_t ntc3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800ce48:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ce4c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	7b1b      	ldrb	r3, [r3, #12]
 800ce54:	021b      	lsls	r3, r3, #8
 800ce56:	b21a      	sxth	r2, r3
 800ce58:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ce5c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	7b5b      	ldrb	r3, [r3, #13]
 800ce64:	b21b      	sxth	r3, r3
 800ce66:	4313      	orrs	r3, r2
 800ce68:	f8a7 3590 	strh.w	r3, [r7, #1424]	@ 0x590
							    	uint16_t bat0 = (uint16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800ce6c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ce70:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	7b9b      	ldrb	r3, [r3, #14]
 800ce78:	021b      	lsls	r3, r3, #8
 800ce7a:	b21a      	sxth	r2, r3
 800ce7c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ce80:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	7bdb      	ldrb	r3, [r3, #15]
 800ce88:	b21b      	sxth	r3, r3
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	b21b      	sxth	r3, r3
 800ce8e:	f8a7 358e 	strh.w	r3, [r7, #1422]	@ 0x58e
							    	uint16_t bat1 = (uint16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800ce92:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ce96:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	7c1b      	ldrb	r3, [r3, #16]
 800ce9e:	021b      	lsls	r3, r3, #8
 800cea0:	b21a      	sxth	r2, r3
 800cea2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cea6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	7c5b      	ldrb	r3, [r3, #17]
 800ceae:	b21b      	sxth	r3, r3
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	b21b      	sxth	r3, r3
 800ceb4:	f8a7 358c 	strh.w	r3, [r7, #1420]	@ 0x58c
							    	uint16_t bat2 = (uint16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800ceb8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cebc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	7c9b      	ldrb	r3, [r3, #18]
 800cec4:	021b      	lsls	r3, r3, #8
 800cec6:	b21a      	sxth	r2, r3
 800cec8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cecc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	7cdb      	ldrb	r3, [r3, #19]
 800ced4:	b21b      	sxth	r3, r3
 800ced6:	4313      	orrs	r3, r2
 800ced8:	b21b      	sxth	r3, r3
 800ceda:	f8a7 358a 	strh.w	r3, [r7, #1418]	@ 0x58a
							    	uint16_t bat3 = (uint16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800cede:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cee2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	7d1b      	ldrb	r3, [r3, #20]
 800ceea:	021b      	lsls	r3, r3, #8
 800ceec:	b21a      	sxth	r2, r3
 800ceee:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cef2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	7d5b      	ldrb	r3, [r3, #21]
 800cefa:	b21b      	sxth	r3, r3
 800cefc:	4313      	orrs	r3, r2
 800cefe:	b21b      	sxth	r3, r3
 800cf00:	f8a7 3588 	strh.w	r3, [r7, #1416]	@ 0x588
							    	uint16_t vin = (uint16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800cf04:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf08:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	7d9b      	ldrb	r3, [r3, #22]
 800cf10:	021b      	lsls	r3, r3, #8
 800cf12:	b21a      	sxth	r2, r3
 800cf14:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf18:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	7ddb      	ldrb	r3, [r3, #23]
 800cf20:	b21b      	sxth	r3, r3
 800cf22:	4313      	orrs	r3, r2
 800cf24:	b21b      	sxth	r3, r3
 800cf26:	f8a7 3586 	strh.w	r3, [r7, #1414]	@ 0x586
							    	uint16_t iin = (uint16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800cf2a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf2e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	7e1b      	ldrb	r3, [r3, #24]
 800cf36:	021b      	lsls	r3, r3, #8
 800cf38:	b21a      	sxth	r2, r3
 800cf3a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf3e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	7e5b      	ldrb	r3, [r3, #25]
 800cf46:	b21b      	sxth	r3, r3
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	b21b      	sxth	r3, r3
 800cf4c:	f8a7 3584 	strh.w	r3, [r7, #1412]	@ 0x584
							    	uint16_t vout = (uint16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800cf50:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf54:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	7e9b      	ldrb	r3, [r3, #26]
 800cf5c:	021b      	lsls	r3, r3, #8
 800cf5e:	b21a      	sxth	r2, r3
 800cf60:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf64:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	7edb      	ldrb	r3, [r3, #27]
 800cf6c:	b21b      	sxth	r3, r3
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	b21b      	sxth	r3, r3
 800cf72:	f8a7 3582 	strh.w	r3, [r7, #1410]	@ 0x582
							    	uint16_t iout = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800cf76:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf7a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	7f1b      	ldrb	r3, [r3, #28]
 800cf82:	021b      	lsls	r3, r3, #8
 800cf84:	b21a      	sxth	r2, r3
 800cf86:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800cf8a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	7f5b      	ldrb	r3, [r3, #29]
 800cf92:	b21b      	sxth	r3, r3
 800cf94:	4313      	orrs	r3, r2
 800cf96:	b21b      	sxth	r3, r3
 800cf98:	f8a7 3580 	strh.w	r3, [r7, #1408]	@ 0x580
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800cf9c:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	da03      	bge.n	800cfac <frame_processing+0x970>
 800cfa4:	4b43      	ldr	r3, [pc, #268]	@ (800d0b4 <frame_processing+0xa78>)
 800cfa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cfaa:	e002      	b.n	800cfb2 <frame_processing+0x976>
 800cfac:	4b42      	ldr	r3, [pc, #264]	@ (800d0b8 <frame_processing+0xa7c>)
 800cfae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800cfb2:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	bfb8      	it	lt
 800cfba:	425b      	neglt	r3, r3
 800cfbc:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800cfbe:	4a3f      	ldr	r2, [pc, #252]	@ (800d0bc <frame_processing+0xa80>)
 800cfc0:	fb82 1203 	smull	r1, r2, r2, r3
 800cfc4:	1152      	asrs	r2, r2, #5
 800cfc6:	17db      	asrs	r3, r3, #31
 800cfc8:	eba2 0c03 	sub.w	ip, r2, r3
							    	        ntc0 < 0 ? "-" : "", abs(ntc0) / 100, abs(ntc0) % 100,
 800cfcc:	f9b7 3596 	ldrsh.w	r3, [r7, #1430]	@ 0x596
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	bfb8      	it	lt
 800cfd4:	425b      	neglt	r3, r3
 800cfd6:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800cfd8:	4a38      	ldr	r2, [pc, #224]	@ (800d0bc <frame_processing+0xa80>)
 800cfda:	fb82 1203 	smull	r1, r2, r2, r3
 800cfde:	1151      	asrs	r1, r2, #5
 800cfe0:	17da      	asrs	r2, r3, #31
 800cfe2:	1a8a      	subs	r2, r1, r2
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	2264      	movs	r2, #100	@ 0x64
 800cfe8:	fb01 f202 	mul.w	r2, r1, r2
 800cfec:	1a9b      	subs	r3, r3, r2
 800cfee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cff2:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	da03      	bge.n	800d002 <frame_processing+0x9c6>
 800cffa:	4b2e      	ldr	r3, [pc, #184]	@ (800d0b4 <frame_processing+0xa78>)
 800cffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d000:	e002      	b.n	800d008 <frame_processing+0x9cc>
 800d002:	4b2d      	ldr	r3, [pc, #180]	@ (800d0b8 <frame_processing+0xa7c>)
 800d004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800d008:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	bfb8      	it	lt
 800d010:	425b      	neglt	r3, r3
 800d012:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d014:	4a29      	ldr	r2, [pc, #164]	@ (800d0bc <frame_processing+0xa80>)
 800d016:	fb82 1203 	smull	r1, r2, r2, r3
 800d01a:	1152      	asrs	r2, r2, #5
 800d01c:	17db      	asrs	r3, r3, #31
 800d01e:	1ad3      	subs	r3, r2, r3
 800d020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
							    	        ntc1 < 0 ? "-" : "", abs(ntc1) / 100, abs(ntc1) % 100,
 800d024:	f9b7 3594 	ldrsh.w	r3, [r7, #1428]	@ 0x594
 800d028:	2b00      	cmp	r3, #0
 800d02a:	bfb8      	it	lt
 800d02c:	425b      	neglt	r3, r3
 800d02e:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d030:	4a22      	ldr	r2, [pc, #136]	@ (800d0bc <frame_processing+0xa80>)
 800d032:	fb82 1203 	smull	r1, r2, r2, r3
 800d036:	1151      	asrs	r1, r2, #5
 800d038:	17da      	asrs	r2, r3, #31
 800d03a:	1a8a      	subs	r2, r1, r2
 800d03c:	4611      	mov	r1, r2
 800d03e:	2264      	movs	r2, #100	@ 0x64
 800d040:	fb01 f202 	mul.w	r2, r1, r2
 800d044:	1a9b      	subs	r3, r3, r2
 800d046:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d04a:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800d04e:	2b00      	cmp	r3, #0
 800d050:	da03      	bge.n	800d05a <frame_processing+0xa1e>
 800d052:	4b18      	ldr	r3, [pc, #96]	@ (800d0b4 <frame_processing+0xa78>)
 800d054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d058:	e002      	b.n	800d060 <frame_processing+0xa24>
 800d05a:	4b17      	ldr	r3, [pc, #92]	@ (800d0b8 <frame_processing+0xa7c>)
 800d05c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800d060:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800d064:	2b00      	cmp	r3, #0
 800d066:	bfb8      	it	lt
 800d068:	425b      	neglt	r3, r3
 800d06a:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d06c:	4a13      	ldr	r2, [pc, #76]	@ (800d0bc <frame_processing+0xa80>)
 800d06e:	fb82 1203 	smull	r1, r2, r2, r3
 800d072:	1152      	asrs	r2, r2, #5
 800d074:	17db      	asrs	r3, r3, #31
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							    	        ntc2 < 0 ? "-" : "", abs(ntc2) / 100, abs(ntc2) % 100,
 800d07c:	f9b7 3592 	ldrsh.w	r3, [r7, #1426]	@ 0x592
 800d080:	2b00      	cmp	r3, #0
 800d082:	bfb8      	it	lt
 800d084:	425b      	neglt	r3, r3
 800d086:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d088:	4a0c      	ldr	r2, [pc, #48]	@ (800d0bc <frame_processing+0xa80>)
 800d08a:	fb82 1203 	smull	r1, r2, r2, r3
 800d08e:	1151      	asrs	r1, r2, #5
 800d090:	17da      	asrs	r2, r3, #31
 800d092:	1a8a      	subs	r2, r1, r2
 800d094:	4611      	mov	r1, r2
 800d096:	2264      	movs	r2, #100	@ 0x64
 800d098:	fb01 f202 	mul.w	r2, r1, r2
 800d09c:	1a9b      	subs	r3, r3, r2
 800d09e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d0a2:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	da0a      	bge.n	800d0c0 <frame_processing+0xa84>
 800d0aa:	4b02      	ldr	r3, [pc, #8]	@ (800d0b4 <frame_processing+0xa78>)
 800d0ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d0b0:	e009      	b.n	800d0c6 <frame_processing+0xa8a>
 800d0b2:	bf00      	nop
 800d0b4:	08015874 	.word	0x08015874
 800d0b8:	08015878 	.word	0x08015878
 800d0bc:	51eb851f 	.word	0x51eb851f
 800d0c0:	4bbd      	ldr	r3, [pc, #756]	@ (800d3b8 <frame_processing+0xd7c>)
 800d0c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800d0c6:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	bfb8      	it	lt
 800d0ce:	425b      	neglt	r3, r3
 800d0d0:	b29b      	uxth	r3, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d0d2:	4aba      	ldr	r2, [pc, #744]	@ (800d3bc <frame_processing+0xd80>)
 800d0d4:	fb82 1203 	smull	r1, r2, r2, r3
 800d0d8:	1152      	asrs	r2, r2, #5
 800d0da:	17db      	asrs	r3, r3, #31
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							    	        ntc3 < 0 ? "-" : "", abs(ntc3) / 100, abs(ntc3) % 100,
 800d0e2:	f9b7 3590 	ldrsh.w	r3, [r7, #1424]	@ 0x590
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	bfb8      	it	lt
 800d0ea:	425b      	neglt	r3, r3
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	4619      	mov	r1, r3
							    	sprintf(buffer_0x08, "PMU_Res: CMDcode 0x08 [\nNTC0: %s%d.%02d, \nNTC1: %s%d.%02d, \nNTC2: %s%d.%02d, \nNTC3: %s%d.%02d, \nBAT0: %d.%02d V, \nBAT1: %d.%02d V, \nBAT2: %d.%02d V, \nBAT3: %d.%02d V, \nVIN: %d.%02d V, \nIIN: %d.%02d A, \nVOUT: %d.%02d V, \nIOUT: %d.%02d A]\n",
 800d0f0:	4bb2      	ldr	r3, [pc, #712]	@ (800d3bc <frame_processing+0xd80>)
 800d0f2:	fb83 2301 	smull	r2, r3, r3, r1
 800d0f6:	115a      	asrs	r2, r3, #5
 800d0f8:	17cb      	asrs	r3, r1, #31
 800d0fa:	1ad6      	subs	r6, r2, r3
 800d0fc:	2364      	movs	r3, #100	@ 0x64
 800d0fe:	fb06 f303 	mul.w	r3, r6, r3
 800d102:	1ace      	subs	r6, r1, r3
 800d104:	f8b7 358e 	ldrh.w	r3, [r7, #1422]	@ 0x58e
 800d108:	4aac      	ldr	r2, [pc, #688]	@ (800d3bc <frame_processing+0xd80>)
 800d10a:	fba2 2303 	umull	r2, r3, r2, r3
 800d10e:	095b      	lsrs	r3, r3, #5
 800d110:	b29b      	uxth	r3, r3
 800d112:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d116:	f8b7 158e 	ldrh.w	r1, [r7, #1422]	@ 0x58e
 800d11a:	4ba8      	ldr	r3, [pc, #672]	@ (800d3bc <frame_processing+0xd80>)
 800d11c:	fba3 2301 	umull	r2, r3, r3, r1
 800d120:	095a      	lsrs	r2, r3, #5
 800d122:	2364      	movs	r3, #100	@ 0x64
 800d124:	fb02 f303 	mul.w	r3, r2, r3
 800d128:	1acb      	subs	r3, r1, r3
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d130:	f8b7 258c 	ldrh.w	r2, [r7, #1420]	@ 0x58c
 800d134:	4ba1      	ldr	r3, [pc, #644]	@ (800d3bc <frame_processing+0xd80>)
 800d136:	fba3 2302 	umull	r2, r3, r3, r2
 800d13a:	095b      	lsrs	r3, r3, #5
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d142:	f8b7 158c 	ldrh.w	r1, [r7, #1420]	@ 0x58c
 800d146:	4b9d      	ldr	r3, [pc, #628]	@ (800d3bc <frame_processing+0xd80>)
 800d148:	fba3 2301 	umull	r2, r3, r3, r1
 800d14c:	095a      	lsrs	r2, r3, #5
 800d14e:	2364      	movs	r3, #100	@ 0x64
 800d150:	fb02 f303 	mul.w	r3, r2, r3
 800d154:	1acb      	subs	r3, r1, r3
 800d156:	b29b      	uxth	r3, r3
 800d158:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d15a:	f8b7 258a 	ldrh.w	r2, [r7, #1418]	@ 0x58a
 800d15e:	4b97      	ldr	r3, [pc, #604]	@ (800d3bc <frame_processing+0xd80>)
 800d160:	fba3 2302 	umull	r2, r3, r3, r2
 800d164:	095b      	lsrs	r3, r3, #5
 800d166:	b29b      	uxth	r3, r3
 800d168:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d16a:	f8b7 158a 	ldrh.w	r1, [r7, #1418]	@ 0x58a
 800d16e:	4b93      	ldr	r3, [pc, #588]	@ (800d3bc <frame_processing+0xd80>)
 800d170:	fba3 2301 	umull	r2, r3, r3, r1
 800d174:	095a      	lsrs	r2, r3, #5
 800d176:	2364      	movs	r3, #100	@ 0x64
 800d178:	fb02 f303 	mul.w	r3, r2, r3
 800d17c:	1acb      	subs	r3, r1, r3
 800d17e:	b29b      	uxth	r3, r3
 800d180:	677b      	str	r3, [r7, #116]	@ 0x74
 800d182:	f8b7 2588 	ldrh.w	r2, [r7, #1416]	@ 0x588
 800d186:	4b8d      	ldr	r3, [pc, #564]	@ (800d3bc <frame_processing+0xd80>)
 800d188:	fba3 2302 	umull	r2, r3, r3, r2
 800d18c:	095b      	lsrs	r3, r3, #5
 800d18e:	b29b      	uxth	r3, r3
 800d190:	673b      	str	r3, [r7, #112]	@ 0x70
 800d192:	f8b7 1588 	ldrh.w	r1, [r7, #1416]	@ 0x588
 800d196:	4b89      	ldr	r3, [pc, #548]	@ (800d3bc <frame_processing+0xd80>)
 800d198:	fba3 2301 	umull	r2, r3, r3, r1
 800d19c:	095a      	lsrs	r2, r3, #5
 800d19e:	2364      	movs	r3, #100	@ 0x64
 800d1a0:	fb02 f303 	mul.w	r3, r2, r3
 800d1a4:	1acb      	subs	r3, r1, r3
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d1aa:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	@ 0x586
 800d1ae:	4b83      	ldr	r3, [pc, #524]	@ (800d3bc <frame_processing+0xd80>)
 800d1b0:	fba3 2302 	umull	r2, r3, r3, r2
 800d1b4:	095b      	lsrs	r3, r3, #5
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d1ba:	f8b7 1586 	ldrh.w	r1, [r7, #1414]	@ 0x586
 800d1be:	4b7f      	ldr	r3, [pc, #508]	@ (800d3bc <frame_processing+0xd80>)
 800d1c0:	fba3 2301 	umull	r2, r3, r3, r1
 800d1c4:	095a      	lsrs	r2, r3, #5
 800d1c6:	2364      	movs	r3, #100	@ 0x64
 800d1c8:	fb02 f303 	mul.w	r3, r2, r3
 800d1cc:	1acb      	subs	r3, r1, r3
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800d1d2:	f8b7 2584 	ldrh.w	r2, [r7, #1412]	@ 0x584
 800d1d6:	4b79      	ldr	r3, [pc, #484]	@ (800d3bc <frame_processing+0xd80>)
 800d1d8:	fba3 2302 	umull	r2, r3, r3, r2
 800d1dc:	095b      	lsrs	r3, r3, #5
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d1e2:	f8b7 1584 	ldrh.w	r1, [r7, #1412]	@ 0x584
 800d1e6:	4b75      	ldr	r3, [pc, #468]	@ (800d3bc <frame_processing+0xd80>)
 800d1e8:	fba3 2301 	umull	r2, r3, r3, r1
 800d1ec:	095a      	lsrs	r2, r3, #5
 800d1ee:	2364      	movs	r3, #100	@ 0x64
 800d1f0:	fb02 f303 	mul.w	r3, r2, r3
 800d1f4:	1acb      	subs	r3, r1, r3
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d1fa:	f8b7 2582 	ldrh.w	r2, [r7, #1410]	@ 0x582
 800d1fe:	4b6f      	ldr	r3, [pc, #444]	@ (800d3bc <frame_processing+0xd80>)
 800d200:	fba3 2302 	umull	r2, r3, r3, r2
 800d204:	095b      	lsrs	r3, r3, #5
 800d206:	b29b      	uxth	r3, r3
 800d208:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d20a:	f8b7 1582 	ldrh.w	r1, [r7, #1410]	@ 0x582
 800d20e:	4b6b      	ldr	r3, [pc, #428]	@ (800d3bc <frame_processing+0xd80>)
 800d210:	fba3 2301 	umull	r2, r3, r3, r1
 800d214:	095a      	lsrs	r2, r3, #5
 800d216:	2364      	movs	r3, #100	@ 0x64
 800d218:	fb02 f303 	mul.w	r3, r2, r3
 800d21c:	1acb      	subs	r3, r1, r3
 800d21e:	b29b      	uxth	r3, r3
 800d220:	461d      	mov	r5, r3
 800d222:	f8b7 2580 	ldrh.w	r2, [r7, #1408]	@ 0x580
 800d226:	4b65      	ldr	r3, [pc, #404]	@ (800d3bc <frame_processing+0xd80>)
 800d228:	fba3 2302 	umull	r2, r3, r3, r2
 800d22c:	095b      	lsrs	r3, r3, #5
 800d22e:	b29b      	uxth	r3, r3
 800d230:	461c      	mov	r4, r3
 800d232:	f8b7 1580 	ldrh.w	r1, [r7, #1408]	@ 0x580
 800d236:	4b61      	ldr	r3, [pc, #388]	@ (800d3bc <frame_processing+0xd80>)
 800d238:	fba3 2301 	umull	r2, r3, r3, r1
 800d23c:	095a      	lsrs	r2, r3, #5
 800d23e:	2364      	movs	r3, #100	@ 0x64
 800d240:	fb02 f303 	mul.w	r3, r2, r3
 800d244:	1acb      	subs	r3, r1, r3
 800d246:	b29b      	uxth	r3, r3
 800d248:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d24c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d24e:	9418      	str	r4, [sp, #96]	@ 0x60
 800d250:	9517      	str	r5, [sp, #92]	@ 0x5c
 800d252:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d254:	9216      	str	r2, [sp, #88]	@ 0x58
 800d256:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d258:	9215      	str	r2, [sp, #84]	@ 0x54
 800d25a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d25c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d25e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d260:	9213      	str	r2, [sp, #76]	@ 0x4c
 800d262:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d264:	9212      	str	r2, [sp, #72]	@ 0x48
 800d266:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d268:	9211      	str	r2, [sp, #68]	@ 0x44
 800d26a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d26c:	9210      	str	r2, [sp, #64]	@ 0x40
 800d26e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d270:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d272:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d274:	920e      	str	r2, [sp, #56]	@ 0x38
 800d276:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d278:	920d      	str	r2, [sp, #52]	@ 0x34
 800d27a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d27e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d280:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d284:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d286:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d28a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d28c:	9609      	str	r6, [sp, #36]	@ 0x24
 800d28e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d292:	9308      	str	r3, [sp, #32]
 800d294:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d298:	9307      	str	r3, [sp, #28]
 800d29a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d29e:	9306      	str	r3, [sp, #24]
 800d2a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d2a4:	9305      	str	r3, [sp, #20]
 800d2a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d2aa:	9304      	str	r3, [sp, #16]
 800d2ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2b0:	9303      	str	r3, [sp, #12]
 800d2b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d2b6:	9302      	str	r3, [sp, #8]
 800d2b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2bc:	9301      	str	r3, [sp, #4]
 800d2be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	4663      	mov	r3, ip
 800d2c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d2ca:	493d      	ldr	r1, [pc, #244]	@ (800d3c0 <frame_processing+0xd84>)
 800d2cc:	f002 fc72 	bl	800fbb4 <siprintf>
									if (uart_choose_uart5) {
 800d2d0:	4b3c      	ldr	r3, [pc, #240]	@ (800d3c4 <frame_processing+0xd88>)
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d005      	beq.n	800d2e6 <frame_processing+0xcaa>
								    	Uart_sendstring(UART5, buffer_0x08);
 800d2da:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4839      	ldr	r0, [pc, #228]	@ (800d3c8 <frame_processing+0xd8c>)
 800d2e2:	f7f4 fe7b 	bl	8001fdc <Uart_sendstring>
				                    if (uart_choose_usart2) {
 800d2e6:	4b39      	ldr	r3, [pc, #228]	@ (800d3cc <frame_processing+0xd90>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d005      	beq.n	800d2fc <frame_processing+0xcc0>
				                    	Uart_sendstring(USART2, buffer_0x08);
 800d2f0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4836      	ldr	r0, [pc, #216]	@ (800d3d0 <frame_processing+0xd94>)
 800d2f8:	f7f4 fe70 	bl	8001fdc <Uart_sendstring>
									Uart_sendstring(USART6, buffer_0x08);
 800d2fc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d300:	4619      	mov	r1, r3
 800d302:	4834      	ldr	r0, [pc, #208]	@ (800d3d4 <frame_processing+0xd98>)
 800d304:	f7f4 fe6a 	bl	8001fdc <Uart_sendstring>
							    break;
 800d308:	bf00      	nop
					break;
 800d30a:	e004      	b.n	800d316 <frame_processing+0xcda>
				default:
					clear_send_flag();
 800d30c:	f7f4 ffa8 	bl	8002260 <clear_send_flag>
					return FSP_PKT_INVALID;
 800d310:	2302      	movs	r3, #2
 800d312:	f001 bc7f 	b.w	800ec14 <frame_processing+0x25d8>
					break;
 800d316:	bf00      	nop
					break;
			}
			clear_send_flag();
 800d318:	f7f4 ffa2 	bl	8002260 <clear_send_flag>
			break;
 800d31c:	f001 bc79 	b.w	800ec12 <frame_processing+0x25d6>
		case FSP_ADR_PDU:
			switch (fsp_pkt->type)
 800d320:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d324:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	791b      	ldrb	r3, [r3, #4]
 800d32c:	2b05      	cmp	r3, #5
 800d32e:	d003      	beq.n	800d338 <frame_processing+0xcfc>
 800d330:	2b07      	cmp	r3, #7
 800d332:	d01b      	beq.n	800d36c <frame_processing+0xd30>
 800d334:	f000 bc7c 	b.w	800dc30 <frame_processing+0x15f4>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800d338:	f7f4 ff92 	bl	8002260 <clear_send_flag>
					if (uart_choose_uart5) {
 800d33c:	4b21      	ldr	r3, [pc, #132]	@ (800d3c4 <frame_processing+0xd88>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	b2db      	uxtb	r3, r3
 800d342:	2b00      	cmp	r3, #0
 800d344:	d003      	beq.n	800d34e <frame_processing+0xd12>
						Uart_sendstring(UART5, "\n> PDU_ACK\r\n> ");
 800d346:	4924      	ldr	r1, [pc, #144]	@ (800d3d8 <frame_processing+0xd9c>)
 800d348:	481f      	ldr	r0, [pc, #124]	@ (800d3c8 <frame_processing+0xd8c>)
 800d34a:	f7f4 fe47 	bl	8001fdc <Uart_sendstring>
					}
                    if (uart_choose_usart2) {
 800d34e:	4b1f      	ldr	r3, [pc, #124]	@ (800d3cc <frame_processing+0xd90>)
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	b2db      	uxtb	r3, r3
 800d354:	2b00      	cmp	r3, #0
 800d356:	d003      	beq.n	800d360 <frame_processing+0xd24>
                    	Uart_sendstring(USART2, "\n> PDU_ACK\r\n> ");
 800d358:	491f      	ldr	r1, [pc, #124]	@ (800d3d8 <frame_processing+0xd9c>)
 800d35a:	481d      	ldr	r0, [pc, #116]	@ (800d3d0 <frame_processing+0xd94>)
 800d35c:	f7f4 fe3e 	bl	8001fdc <Uart_sendstring>
                    }
					Uart_sendstring(USART6, "\n> PDU_ACK\r\n> ");
 800d360:	491d      	ldr	r1, [pc, #116]	@ (800d3d8 <frame_processing+0xd9c>)
 800d362:	481c      	ldr	r0, [pc, #112]	@ (800d3d4 <frame_processing+0xd98>)
 800d364:	f7f4 fe3a 	bl	8001fdc <Uart_sendstring>

					break;
 800d368:	f000 bc67 	b.w	800dc3a <frame_processing+0x15fe>
				case FSP_PKT_TYPE_CMD_W_DATA:
					//reverse
					clear_send_flag();
 800d36c:	f7f4 ff78 	bl	8002260 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800d370:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d374:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	795b      	ldrb	r3, [r3, #5]
 800d37c:	2b06      	cmp	r3, #6
 800d37e:	dc17      	bgt.n	800d3b0 <frame_processing+0xd74>
 800d380:	2b00      	cmp	r3, #0
 800d382:	f2c0 844d 	blt.w	800dc20 <frame_processing+0x15e4>
 800d386:	2b06      	cmp	r3, #6
 800d388:	f200 844a 	bhi.w	800dc20 <frame_processing+0x15e4>
 800d38c:	a201      	add	r2, pc, #4	@ (adr r2, 800d394 <frame_processing+0xd58>)
 800d38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d392:	bf00      	nop
 800d394:	0800d3dd 	.word	0x0800d3dd
 800d398:	0800dc21 	.word	0x0800dc21
 800d39c:	0800dc21 	.word	0x0800dc21
 800d3a0:	0800dc21 	.word	0x0800dc21
 800d3a4:	0800d485 	.word	0x0800d485
 800d3a8:	0800d54d 	.word	0x0800d54d
 800d3ac:	0800d639 	.word	0x0800d639
 800d3b0:	2bff      	cmp	r3, #255	@ 0xff
 800d3b2:	d03d      	beq.n	800d430 <frame_processing+0xdf4>
 800d3b4:	f000 bc34 	b.w	800dc20 <frame_processing+0x15e4>
 800d3b8:	08015878 	.word	0x08015878
 800d3bc:	51eb851f 	.word	0x51eb851f
 800d3c0:	080159ac 	.word	0x080159ac
 800d3c4:	200058b8 	.word	0x200058b8
 800d3c8:	40005000 	.word	0x40005000
 800d3cc:	200058b9 	.word	0x200058b9
 800d3d0:	40004400 	.word	0x40004400
 800d3d4:	40011400 	.word	0x40011400
 800d3d8:	08015a9c 	.word	0x08015a9c
					{
						case 0x00:
						{
							char buffer_0x00[50];
							sprintf(buffer_0x00, "PDU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800d3dc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d3e0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	799b      	ldrb	r3, [r3, #6]
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d3ee:	4989      	ldr	r1, [pc, #548]	@ (800d614 <frame_processing+0xfd8>)
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f002 fbdf 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800d3f6:	4b88      	ldr	r3, [pc, #544]	@ (800d618 <frame_processing+0xfdc>)
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d005      	beq.n	800d40c <frame_processing+0xdd0>
								Uart_sendstring(UART5, buffer_0x00);
 800d400:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d404:	4619      	mov	r1, r3
 800d406:	4885      	ldr	r0, [pc, #532]	@ (800d61c <frame_processing+0xfe0>)
 800d408:	f7f4 fde8 	bl	8001fdc <Uart_sendstring>
							}
		                    if (uart_choose_usart2) {
 800d40c:	4b84      	ldr	r3, [pc, #528]	@ (800d620 <frame_processing+0xfe4>)
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	b2db      	uxtb	r3, r3
 800d412:	2b00      	cmp	r3, #0
 800d414:	d005      	beq.n	800d422 <frame_processing+0xde6>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800d416:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d41a:	4619      	mov	r1, r3
 800d41c:	4881      	ldr	r0, [pc, #516]	@ (800d624 <frame_processing+0xfe8>)
 800d41e:	f7f4 fddd 	bl	8001fdc <Uart_sendstring>
		                    }
							Uart_sendstring(USART6, buffer_0x00);
 800d422:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d426:	4619      	mov	r1, r3
 800d428:	487f      	ldr	r0, [pc, #508]	@ (800d628 <frame_processing+0xfec>)
 800d42a:	f7f4 fdd7 	bl	8001fdc <Uart_sendstring>

						}
							break;
 800d42e:	e3fc      	b.n	800dc2a <frame_processing+0x15ee>
						case 0xFF:
						{
							char buffer_0xFF[50];
							sprintf(buffer_0xFF, "PDU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800d430:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d434:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	799b      	ldrb	r3, [r3, #6]
 800d43c:	461a      	mov	r2, r3
 800d43e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d442:	497a      	ldr	r1, [pc, #488]	@ (800d62c <frame_processing+0xff0>)
 800d444:	4618      	mov	r0, r3
 800d446:	f002 fbb5 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800d44a:	4b73      	ldr	r3, [pc, #460]	@ (800d618 <frame_processing+0xfdc>)
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	2b00      	cmp	r3, #0
 800d452:	d005      	beq.n	800d460 <frame_processing+0xe24>
								Uart_sendstring(UART5, buffer_0xFF);
 800d454:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d458:	4619      	mov	r1, r3
 800d45a:	4870      	ldr	r0, [pc, #448]	@ (800d61c <frame_processing+0xfe0>)
 800d45c:	f7f4 fdbe 	bl	8001fdc <Uart_sendstring>
							}
		                    if (uart_choose_usart2) {
 800d460:	4b6f      	ldr	r3, [pc, #444]	@ (800d620 <frame_processing+0xfe4>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	b2db      	uxtb	r3, r3
 800d466:	2b00      	cmp	r3, #0
 800d468:	d005      	beq.n	800d476 <frame_processing+0xe3a>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800d46a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d46e:	4619      	mov	r1, r3
 800d470:	486c      	ldr	r0, [pc, #432]	@ (800d624 <frame_processing+0xfe8>)
 800d472:	f7f4 fdb3 	bl	8001fdc <Uart_sendstring>
		                    }
							Uart_sendstring(USART6, buffer_0xFF);
 800d476:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d47a:	4619      	mov	r1, r3
 800d47c:	486a      	ldr	r0, [pc, #424]	@ (800d628 <frame_processing+0xfec>)
 800d47e:	f7f4 fdad 	bl	8001fdc <Uart_sendstring>

						}
							break;
 800d482:	e3d2      	b.n	800dc2a <frame_processing+0x15ee>

						case 0x04:
						{
							        uint8_t channel = fsp_pkt->payload[1];
 800d484:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d488:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	799b      	ldrb	r3, [r3, #6]
 800d490:	f887 359d 	strb.w	r3, [r7, #1437]	@ 0x59d
							        uint8_t status_0x04 = fsp_pkt->payload[2];
 800d494:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d498:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	79db      	ldrb	r3, [r3, #7]
 800d4a0:	f887 359c 	strb.w	r3, [r7, #1436]	@ 0x59c
							        uint16_t voltage_0x04 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800d4a4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d4a8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	7a1b      	ldrb	r3, [r3, #8]
 800d4b0:	021b      	lsls	r3, r3, #8
 800d4b2:	b21a      	sxth	r2, r3
 800d4b4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d4b8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	7a5b      	ldrb	r3, [r3, #9]
 800d4c0:	b21b      	sxth	r3, r3
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	b21b      	sxth	r3, r3
 800d4c6:	f8a7 359a 	strh.w	r3, [r7, #1434]	@ 0x59a
							        uint16_t current_0x04 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800d4ca:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d4ce:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	7a9b      	ldrb	r3, [r3, #10]
 800d4d6:	021b      	lsls	r3, r3, #8
 800d4d8:	b21a      	sxth	r2, r3
 800d4da:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d4de:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	7adb      	ldrb	r3, [r3, #11]
 800d4e6:	b21b      	sxth	r3, r3
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	b21b      	sxth	r3, r3
 800d4ec:	f8a7 3598 	strh.w	r3, [r7, #1432]	@ 0x598

							        char buffer_0x07[100];
							        sprintf(buffer_0x07, "PDU_Res: CMDcode 0x04 [{Channel %u} Status %u, Voltage: %u, Current: %u]\n", channel, status_0x04, voltage_0x04, current_0x04);
 800d4f0:	f897 159d 	ldrb.w	r1, [r7, #1437]	@ 0x59d
 800d4f4:	f897 459c 	ldrb.w	r4, [r7, #1436]	@ 0x59c
 800d4f8:	f8b7 359a 	ldrh.w	r3, [r7, #1434]	@ 0x59a
 800d4fc:	f8b7 2598 	ldrh.w	r2, [r7, #1432]	@ 0x598
 800d500:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d504:	9201      	str	r2, [sp, #4]
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	4623      	mov	r3, r4
 800d50a:	460a      	mov	r2, r1
 800d50c:	4948      	ldr	r1, [pc, #288]	@ (800d630 <frame_processing+0xff4>)
 800d50e:	f002 fb51 	bl	800fbb4 <siprintf>
									if (uart_choose_uart5) {
 800d512:	4b41      	ldr	r3, [pc, #260]	@ (800d618 <frame_processing+0xfdc>)
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d005      	beq.n	800d528 <frame_processing+0xeec>
										Uart_sendstring(UART5, buffer_0x07);
 800d51c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d520:	4619      	mov	r1, r3
 800d522:	483e      	ldr	r0, [pc, #248]	@ (800d61c <frame_processing+0xfe0>)
 800d524:	f7f4 fd5a 	bl	8001fdc <Uart_sendstring>
									}
				                    if (uart_choose_usart2) {
 800d528:	4b3d      	ldr	r3, [pc, #244]	@ (800d620 <frame_processing+0xfe4>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d005      	beq.n	800d53e <frame_processing+0xf02>
				                    	Uart_sendstring(USART2, buffer_0x07);
 800d532:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d536:	4619      	mov	r1, r3
 800d538:	483a      	ldr	r0, [pc, #232]	@ (800d624 <frame_processing+0xfe8>)
 800d53a:	f7f4 fd4f 	bl	8001fdc <Uart_sendstring>
				                    }
									Uart_sendstring(USART6, buffer_0x07);
 800d53e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d542:	4619      	mov	r1, r3
 800d544:	4838      	ldr	r0, [pc, #224]	@ (800d628 <frame_processing+0xfec>)
 800d546:	f7f4 fd49 	bl	8001fdc <Uart_sendstring>

						}
									break;
 800d54a:	e36e      	b.n	800dc2a <frame_processing+0x15ee>
						case 0x05:
						{
						            uint8_t buck = fsp_pkt->payload[1];
 800d54c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d550:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	799b      	ldrb	r3, [r3, #6]
 800d558:	f887 35a3 	strb.w	r3, [r7, #1443]	@ 0x5a3
						            uint8_t status_0x05 = fsp_pkt->payload[2];
 800d55c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d560:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	79db      	ldrb	r3, [r3, #7]
 800d568:	f887 35a2 	strb.w	r3, [r7, #1442]	@ 0x5a2
						            uint16_t voltage_0x05 = (fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4];
 800d56c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d570:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	7a1b      	ldrb	r3, [r3, #8]
 800d578:	021b      	lsls	r3, r3, #8
 800d57a:	b21a      	sxth	r2, r3
 800d57c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d580:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	7a5b      	ldrb	r3, [r3, #9]
 800d588:	b21b      	sxth	r3, r3
 800d58a:	4313      	orrs	r3, r2
 800d58c:	b21b      	sxth	r3, r3
 800d58e:	f8a7 35a0 	strh.w	r3, [r7, #1440]	@ 0x5a0
						            uint16_t current_0x05 = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800d592:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d596:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	7a9b      	ldrb	r3, [r3, #10]
 800d59e:	021b      	lsls	r3, r3, #8
 800d5a0:	b21a      	sxth	r2, r3
 800d5a2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d5a6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	7adb      	ldrb	r3, [r3, #11]
 800d5ae:	b21b      	sxth	r3, r3
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	b21b      	sxth	r3, r3
 800d5b4:	f8a7 359e 	strh.w	r3, [r7, #1438]	@ 0x59e

						            char buffer_0x05[100];
						            sprintf(buffer_0x05, "PDU_Res: CMDcode 0x05 [{Buck %u} Status %u, Voltage: %u, Current: %u]\n", buck, status_0x05, voltage_0x05, current_0x05);
 800d5b8:	f897 15a3 	ldrb.w	r1, [r7, #1443]	@ 0x5a3
 800d5bc:	f897 45a2 	ldrb.w	r4, [r7, #1442]	@ 0x5a2
 800d5c0:	f8b7 35a0 	ldrh.w	r3, [r7, #1440]	@ 0x5a0
 800d5c4:	f8b7 259e 	ldrh.w	r2, [r7, #1438]	@ 0x59e
 800d5c8:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d5cc:	9201      	str	r2, [sp, #4]
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	4623      	mov	r3, r4
 800d5d2:	460a      	mov	r2, r1
 800d5d4:	4917      	ldr	r1, [pc, #92]	@ (800d634 <frame_processing+0xff8>)
 800d5d6:	f002 faed 	bl	800fbb4 <siprintf>
									if (uart_choose_uart5) {
 800d5da:	4b0f      	ldr	r3, [pc, #60]	@ (800d618 <frame_processing+0xfdc>)
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d005      	beq.n	800d5f0 <frame_processing+0xfb4>
										Uart_sendstring(UART5, buffer_0x05);
 800d5e4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	480c      	ldr	r0, [pc, #48]	@ (800d61c <frame_processing+0xfe0>)
 800d5ec:	f7f4 fcf6 	bl	8001fdc <Uart_sendstring>
									}
				                    if (uart_choose_usart2) {
 800d5f0:	4b0b      	ldr	r3, [pc, #44]	@ (800d620 <frame_processing+0xfe4>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d005      	beq.n	800d606 <frame_processing+0xfca>
				                    	Uart_sendstring(USART2, buffer_0x05);
 800d5fa:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d5fe:	4619      	mov	r1, r3
 800d600:	4808      	ldr	r0, [pc, #32]	@ (800d624 <frame_processing+0xfe8>)
 800d602:	f7f4 fceb 	bl	8001fdc <Uart_sendstring>
				                    }
									Uart_sendstring(USART6, buffer_0x05);
 800d606:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d60a:	4619      	mov	r1, r3
 800d60c:	4806      	ldr	r0, [pc, #24]	@ (800d628 <frame_processing+0xfec>)
 800d60e:	f7f4 fce5 	bl	8001fdc <Uart_sendstring>

						}
									break;
 800d612:	e30a      	b.n	800dc2a <frame_processing+0x15ee>
 800d614:	08015aac 	.word	0x08015aac
 800d618:	200058b8 	.word	0x200058b8
 800d61c:	40005000 	.word	0x40005000
 800d620:	200058b9 	.word	0x200058b9
 800d624:	40004400 	.word	0x40004400
 800d628:	40011400 	.word	0x40011400
 800d62c:	08015ac8 	.word	0x08015ac8
 800d630:	08015ae4 	.word	0x08015ae4
 800d634:	08015b30 	.word	0x08015b30
						case 0x06:
						{
							uint8_t tec1buck_status = fsp_pkt->payload[1];
 800d638:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d63c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	799b      	ldrb	r3, [r3, #6]
 800d644:	f887 35eb 	strb.w	r3, [r7, #1515]	@ 0x5eb
							uint16_t tec1buck_voltage = (fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3];
 800d648:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d64c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	79db      	ldrb	r3, [r3, #7]
 800d654:	021b      	lsls	r3, r3, #8
 800d656:	b21a      	sxth	r2, r3
 800d658:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d65c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	7a1b      	ldrb	r3, [r3, #8]
 800d664:	b21b      	sxth	r3, r3
 800d666:	4313      	orrs	r3, r2
 800d668:	b21b      	sxth	r3, r3
 800d66a:	f8a7 35e8 	strh.w	r3, [r7, #1512]	@ 0x5e8

							uint8_t tec2buck_status = fsp_pkt->payload[4];
 800d66e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d672:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	7a5b      	ldrb	r3, [r3, #9]
 800d67a:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
							uint16_t tec2buck_voltage = (fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6];
 800d67e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d682:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	7a9b      	ldrb	r3, [r3, #10]
 800d68a:	021b      	lsls	r3, r3, #8
 800d68c:	b21a      	sxth	r2, r3
 800d68e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d692:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	7adb      	ldrb	r3, [r3, #11]
 800d69a:	b21b      	sxth	r3, r3
 800d69c:	4313      	orrs	r3, r2
 800d69e:	b21b      	sxth	r3, r3
 800d6a0:	f8a7 35e4 	strh.w	r3, [r7, #1508]	@ 0x5e4

							uint8_t tec3buck_status = fsp_pkt->payload[7];
 800d6a4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d6a8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	7b1b      	ldrb	r3, [r3, #12]
 800d6b0:	f887 35e3 	strb.w	r3, [r7, #1507]	@ 0x5e3
							uint16_t tec3buck_voltage = (fsp_pkt->payload[8] << 8) | fsp_pkt->payload[9];
 800d6b4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d6b8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	7b5b      	ldrb	r3, [r3, #13]
 800d6c0:	021b      	lsls	r3, r3, #8
 800d6c2:	b21a      	sxth	r2, r3
 800d6c4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d6c8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	7b9b      	ldrb	r3, [r3, #14]
 800d6d0:	b21b      	sxth	r3, r3
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	b21b      	sxth	r3, r3
 800d6d6:	f8a7 35e0 	strh.w	r3, [r7, #1504]	@ 0x5e0

							uint8_t tec4buck_status = fsp_pkt->payload[10];
 800d6da:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d6de:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	7bdb      	ldrb	r3, [r3, #15]
 800d6e6:	f887 35df 	strb.w	r3, [r7, #1503]	@ 0x5df
							uint16_t tec4buck_voltage = (fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12];
 800d6ea:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d6ee:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	7c1b      	ldrb	r3, [r3, #16]
 800d6f6:	021b      	lsls	r3, r3, #8
 800d6f8:	b21a      	sxth	r2, r3
 800d6fa:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d6fe:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	7c5b      	ldrb	r3, [r3, #17]
 800d706:	b21b      	sxth	r3, r3
 800d708:	4313      	orrs	r3, r2
 800d70a:	b21b      	sxth	r3, r3
 800d70c:	f8a7 35dc 	strh.w	r3, [r7, #1500]	@ 0x5dc

							uint8_t mcubuck_status = fsp_pkt->payload[13];
 800d710:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d714:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	7c9b      	ldrb	r3, [r3, #18]
 800d71c:	f887 35db 	strb.w	r3, [r7, #1499]	@ 0x5db
							uint16_t mcubuck_voltage = (fsp_pkt->payload[14] << 8) | fsp_pkt->payload[15];
 800d720:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d724:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	7cdb      	ldrb	r3, [r3, #19]
 800d72c:	021b      	lsls	r3, r3, #8
 800d72e:	b21a      	sxth	r2, r3
 800d730:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d734:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	7d1b      	ldrb	r3, [r3, #20]
 800d73c:	b21b      	sxth	r3, r3
 800d73e:	4313      	orrs	r3, r2
 800d740:	b21b      	sxth	r3, r3
 800d742:	f8a7 35d8 	strh.w	r3, [r7, #1496]	@ 0x5d8

							uint8_t ledbuck_status = fsp_pkt->payload[16];
 800d746:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d74a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	7d5b      	ldrb	r3, [r3, #21]
 800d752:	f887 35d7 	strb.w	r3, [r7, #1495]	@ 0x5d7
							uint16_t ledbuck_voltage = (fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18];
 800d756:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d75a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	7d9b      	ldrb	r3, [r3, #22]
 800d762:	021b      	lsls	r3, r3, #8
 800d764:	b21a      	sxth	r2, r3
 800d766:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d76a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	7ddb      	ldrb	r3, [r3, #23]
 800d772:	b21b      	sxth	r3, r3
 800d774:	4313      	orrs	r3, r2
 800d776:	b21b      	sxth	r3, r3
 800d778:	f8a7 35d4 	strh.w	r3, [r7, #1492]	@ 0x5d4

							uint8_t cm4buck_status = fsp_pkt->payload[19];
 800d77c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d780:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	7e1b      	ldrb	r3, [r3, #24]
 800d788:	f887 35d3 	strb.w	r3, [r7, #1491]	@ 0x5d3
							uint16_t cm4buck_voltage = (fsp_pkt->payload[20] << 8) | fsp_pkt->payload[21];
 800d78c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d790:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	7e5b      	ldrb	r3, [r3, #25]
 800d798:	021b      	lsls	r3, r3, #8
 800d79a:	b21a      	sxth	r2, r3
 800d79c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d7a0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	7e9b      	ldrb	r3, [r3, #26]
 800d7a8:	b21b      	sxth	r3, r3
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	b21b      	sxth	r3, r3
 800d7ae:	f8a7 35d0 	strh.w	r3, [r7, #1488]	@ 0x5d0

							uint8_t tec1_status = fsp_pkt->payload[22];
 800d7b2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d7b6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	7edb      	ldrb	r3, [r3, #27]
 800d7be:	f887 35cf 	strb.w	r3, [r7, #1487]	@ 0x5cf
							uint16_t tec1_current = (fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24];
 800d7c2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d7c6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	7f1b      	ldrb	r3, [r3, #28]
 800d7ce:	021b      	lsls	r3, r3, #8
 800d7d0:	b21a      	sxth	r2, r3
 800d7d2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d7d6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	7f5b      	ldrb	r3, [r3, #29]
 800d7de:	b21b      	sxth	r3, r3
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	b21b      	sxth	r3, r3
 800d7e4:	f8a7 35cc 	strh.w	r3, [r7, #1484]	@ 0x5cc

							uint8_t tec2_status = fsp_pkt->payload[25];
 800d7e8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d7ec:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	7f9b      	ldrb	r3, [r3, #30]
 800d7f4:	f887 35cb 	strb.w	r3, [r7, #1483]	@ 0x5cb
							uint16_t tec2_current = (fsp_pkt->payload[26] << 8) | fsp_pkt->payload[27];
 800d7f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d7fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	7fdb      	ldrb	r3, [r3, #31]
 800d804:	021b      	lsls	r3, r3, #8
 800d806:	b21a      	sxth	r2, r3
 800d808:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d80c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d816:	b21b      	sxth	r3, r3
 800d818:	4313      	orrs	r3, r2
 800d81a:	b21b      	sxth	r3, r3
 800d81c:	f8a7 35c8 	strh.w	r3, [r7, #1480]	@ 0x5c8

							uint8_t tec3_status = fsp_pkt->payload[28];
 800d820:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d824:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d82e:	f887 35c7 	strb.w	r3, [r7, #1479]	@ 0x5c7
							uint16_t tec3_current = (fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30];
 800d832:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d836:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800d840:	021b      	lsls	r3, r3, #8
 800d842:	b21a      	sxth	r2, r3
 800d844:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d848:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800d852:	b21b      	sxth	r3, r3
 800d854:	4313      	orrs	r3, r2
 800d856:	b21b      	sxth	r3, r3
 800d858:	f8a7 35c4 	strh.w	r3, [r7, #1476]	@ 0x5c4

							uint8_t tec4_status = fsp_pkt->payload[31];
 800d85c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d860:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d86a:	f887 35c3 	strb.w	r3, [r7, #1475]	@ 0x5c3
							uint16_t tec4_current = (fsp_pkt->payload[32] << 8) | fsp_pkt->payload[33];
 800d86e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d872:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d87c:	021b      	lsls	r3, r3, #8
 800d87e:	b21a      	sxth	r2, r3
 800d880:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d884:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800d88e:	b21b      	sxth	r3, r3
 800d890:	4313      	orrs	r3, r2
 800d892:	b21b      	sxth	r3, r3
 800d894:	f8a7 35c0 	strh.w	r3, [r7, #1472]	@ 0x5c0

							uint8_t copc_status = fsp_pkt->payload[34];
 800d898:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d89c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800d8a6:	f887 35bf 	strb.w	r3, [r7, #1471]	@ 0x5bf
							uint16_t copc_current = (fsp_pkt->payload[35] << 8) | fsp_pkt->payload[36];
 800d8aa:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8ae:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8b8:	021b      	lsls	r3, r3, #8
 800d8ba:	b21a      	sxth	r2, r3
 800d8bc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8c0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800d8ca:	b21b      	sxth	r3, r3
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	b21b      	sxth	r3, r3
 800d8d0:	f8a7 35bc 	strh.w	r3, [r7, #1468]	@ 0x5bc

							uint8_t iou_status = fsp_pkt->payload[37];
 800d8d4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8d8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800d8e2:	f887 35bb 	strb.w	r3, [r7, #1467]	@ 0x5bb
							uint16_t iou_current = (fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39];
 800d8e6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8ea:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800d8f4:	021b      	lsls	r3, r3, #8
 800d8f6:	b21a      	sxth	r2, r3
 800d8f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d8fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d906:	b21b      	sxth	r3, r3
 800d908:	4313      	orrs	r3, r2
 800d90a:	b21b      	sxth	r3, r3
 800d90c:	f8a7 35b8 	strh.w	r3, [r7, #1464]	@ 0x5b8

							uint8_t rgb_status = fsp_pkt->payload[40];
 800d910:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d914:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d91e:	f887 35b7 	strb.w	r3, [r7, #1463]	@ 0x5b7
							uint16_t rgb_current = (fsp_pkt->payload[41] << 8) | fsp_pkt->payload[42];
 800d922:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d926:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d930:	021b      	lsls	r3, r3, #8
 800d932:	b21a      	sxth	r2, r3
 800d934:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d938:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d942:	b21b      	sxth	r3, r3
 800d944:	4313      	orrs	r3, r2
 800d946:	b21b      	sxth	r3, r3
 800d948:	f8a7 35b4 	strh.w	r3, [r7, #1460]	@ 0x5b4

							uint8_t ir_status = fsp_pkt->payload[43];
 800d94c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d950:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d95a:	f887 35b3 	strb.w	r3, [r7, #1459]	@ 0x5b3
							uint16_t ir_current = (fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45];
 800d95e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d962:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d96c:	021b      	lsls	r3, r3, #8
 800d96e:	b21a      	sxth	r2, r3
 800d970:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d974:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d97e:	b21b      	sxth	r3, r3
 800d980:	4313      	orrs	r3, r2
 800d982:	b21b      	sxth	r3, r3
 800d984:	f8a7 35b0 	strh.w	r3, [r7, #1456]	@ 0x5b0

							uint8_t cm4_status = fsp_pkt->payload[46];
 800d988:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d98c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800d996:	f887 35af 	strb.w	r3, [r7, #1455]	@ 0x5af
							uint16_t cm4_current = (fsp_pkt->payload[47] << 8) | fsp_pkt->payload[48];
 800d99a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d99e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d9a8:	021b      	lsls	r3, r3, #8
 800d9aa:	b21a      	sxth	r2, r3
 800d9ac:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d9b0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d9ba:	b21b      	sxth	r3, r3
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	b21b      	sxth	r3, r3
 800d9c0:	f8a7 35ac 	strh.w	r3, [r7, #1452]	@ 0x5ac

							uint8_t vin_status = fsp_pkt->payload[49];
 800d9c4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d9c8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d9d2:	f887 35ab 	strb.w	r3, [r7, #1451]	@ 0x5ab
							uint16_t vin_voltage = (fsp_pkt->payload[50] << 8) | fsp_pkt->payload[51];
 800d9d6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d9da:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800d9e4:	021b      	lsls	r3, r3, #8
 800d9e6:	b21a      	sxth	r2, r3
 800d9e8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800d9ec:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d9f6:	b21b      	sxth	r3, r3
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	b21b      	sxth	r3, r3
 800d9fc:	f8a7 35a8 	strh.w	r3, [r7, #1448]	@ 0x5a8

							uint8_t vbus_status = fsp_pkt->payload[52];
 800da00:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da04:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800da0e:	f887 35a7 	strb.w	r3, [r7, #1447]	@ 0x5a7
							uint16_t vbus_voltage = (fsp_pkt->payload[53] << 8) | fsp_pkt->payload[54];
 800da12:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da16:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800da20:	021b      	lsls	r3, r3, #8
 800da22:	b21a      	sxth	r2, r3
 800da24:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800da28:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800da32:	b21b      	sxth	r3, r3
 800da34:	4313      	orrs	r3, r2
 800da36:	b21b      	sxth	r3, r3
 800da38:	f8a7 35a4 	strh.w	r3, [r7, #1444]	@ 0x5a4


						            char buffer_0x06[1000];
						            sprintf(buffer_0x06, "PDU_Res: CMDcode 0x06 [TEC1BUCK: Status %u, Voltage: %u\r\nTEC2BUCK: Status %u, Voltage: %u\r\nTEC3BUCK: Status %u, Voltage: %u\r\nTEC4BUCK: Status %u, Voltage: %u\r\nMCUBUCK: Status %u, Voltage: %u\r\nLEDBUCK: Status %u, Voltage: %u\r\nCM4BUCK: Status %u, Voltage: %u\r\nTEC1: Status %u, Current: %u\r\nTEC2: Status %u, Current: %u\r\nTEC3: Status %u, Current: %u\r\nTEC4: Status %u, Current: %u\r\nCOPC: Status %u, Current: %u\r\nIOU: Status %u, Current: %u\r\nRGB: Status %u, Current: %u\r\nIR: Status %u, Current: %u\r\nCM4: Status %u, Current: %u\r\nVIN: Status %u, Voltage: %u\r\nVBUS: Status %u, Voltage: %u\r\n]",
 800da3c:	f897 e5eb 	ldrb.w	lr, [r7, #1515]	@ 0x5eb
 800da40:	f8b7 85e8 	ldrh.w	r8, [r7, #1512]	@ 0x5e8
 800da44:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800da48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800da4c:	f8b7 25e4 	ldrh.w	r2, [r7, #1508]	@ 0x5e4
 800da50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800da54:	f897 15e3 	ldrb.w	r1, [r7, #1507]	@ 0x5e3
 800da58:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800da5c:	f8b7 05e0 	ldrh.w	r0, [r7, #1504]	@ 0x5e0
 800da60:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800da64:	f897 45df 	ldrb.w	r4, [r7, #1503]	@ 0x5df
 800da68:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 800da6c:	f8b7 55dc 	ldrh.w	r5, [r7, #1500]	@ 0x5dc
 800da70:	f8c7 509c 	str.w	r5, [r7, #156]	@ 0x9c
 800da74:	f897 65db 	ldrb.w	r6, [r7, #1499]	@ 0x5db
 800da78:	f8c7 6098 	str.w	r6, [r7, #152]	@ 0x98
 800da7c:	f8b7 c5d8 	ldrh.w	ip, [r7, #1496]	@ 0x5d8
 800da80:	4663      	mov	r3, ip
 800da82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800da86:	f897 c5d7 	ldrb.w	ip, [r7, #1495]	@ 0x5d7
 800da8a:	4662      	mov	r2, ip
 800da8c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800da90:	f8b7 c5d4 	ldrh.w	ip, [r7, #1492]	@ 0x5d4
 800da94:	4661      	mov	r1, ip
 800da96:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 800da9a:	f897 c5d3 	ldrb.w	ip, [r7, #1491]	@ 0x5d3
 800da9e:	4660      	mov	r0, ip
 800daa0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 800daa4:	f8b7 c5d0 	ldrh.w	ip, [r7, #1488]	@ 0x5d0
 800daa8:	4664      	mov	r4, ip
 800daaa:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
 800daae:	f897 c5cf 	ldrb.w	ip, [r7, #1487]	@ 0x5cf
 800dab2:	4665      	mov	r5, ip
 800dab4:	f8c7 5080 	str.w	r5, [r7, #128]	@ 0x80
 800dab8:	f8b7 c5cc 	ldrh.w	ip, [r7, #1484]	@ 0x5cc
 800dabc:	4666      	mov	r6, ip
 800dabe:	67fe      	str	r6, [r7, #124]	@ 0x7c
 800dac0:	f897 c5cb 	ldrb.w	ip, [r7, #1483]	@ 0x5cb
 800dac4:	4663      	mov	r3, ip
 800dac6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dac8:	f8b7 c5c8 	ldrh.w	ip, [r7, #1480]	@ 0x5c8
 800dacc:	4662      	mov	r2, ip
 800dace:	677a      	str	r2, [r7, #116]	@ 0x74
 800dad0:	f897 c5c7 	ldrb.w	ip, [r7, #1479]	@ 0x5c7
 800dad4:	4661      	mov	r1, ip
 800dad6:	6739      	str	r1, [r7, #112]	@ 0x70
 800dad8:	f8b7 c5c4 	ldrh.w	ip, [r7, #1476]	@ 0x5c4
 800dadc:	4660      	mov	r0, ip
 800dade:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800dae0:	f897 c5c3 	ldrb.w	ip, [r7, #1475]	@ 0x5c3
 800dae4:	4664      	mov	r4, ip
 800dae6:	66bc      	str	r4, [r7, #104]	@ 0x68
 800dae8:	f8b7 c5c0 	ldrh.w	ip, [r7, #1472]	@ 0x5c0
 800daec:	4665      	mov	r5, ip
 800daee:	667d      	str	r5, [r7, #100]	@ 0x64
 800daf0:	f897 c5bf 	ldrb.w	ip, [r7, #1471]	@ 0x5bf
 800daf4:	4666      	mov	r6, ip
 800daf6:	663e      	str	r6, [r7, #96]	@ 0x60
 800daf8:	f8b7 c5bc 	ldrh.w	ip, [r7, #1468]	@ 0x5bc
 800dafc:	4663      	mov	r3, ip
 800dafe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db00:	f897 c5bb 	ldrb.w	ip, [r7, #1467]	@ 0x5bb
 800db04:	4662      	mov	r2, ip
 800db06:	65ba      	str	r2, [r7, #88]	@ 0x58
 800db08:	f8b7 c5b8 	ldrh.w	ip, [r7, #1464]	@ 0x5b8
 800db0c:	4661      	mov	r1, ip
 800db0e:	6579      	str	r1, [r7, #84]	@ 0x54
 800db10:	f897 c5b7 	ldrb.w	ip, [r7, #1463]	@ 0x5b7
 800db14:	4660      	mov	r0, ip
 800db16:	6538      	str	r0, [r7, #80]	@ 0x50
 800db18:	f8b7 c5b4 	ldrh.w	ip, [r7, #1460]	@ 0x5b4
 800db1c:	4664      	mov	r4, ip
 800db1e:	64fc      	str	r4, [r7, #76]	@ 0x4c
 800db20:	f897 c5b3 	ldrb.w	ip, [r7, #1459]	@ 0x5b3
 800db24:	4665      	mov	r5, ip
 800db26:	64bd      	str	r5, [r7, #72]	@ 0x48
 800db28:	f8b7 65b0 	ldrh.w	r6, [r7, #1456]	@ 0x5b0
 800db2c:	f897 55af 	ldrb.w	r5, [r7, #1455]	@ 0x5af
 800db30:	f8b7 45ac 	ldrh.w	r4, [r7, #1452]	@ 0x5ac
 800db34:	f897 05ab 	ldrb.w	r0, [r7, #1451]	@ 0x5ab
 800db38:	f8b7 15a8 	ldrh.w	r1, [r7, #1448]	@ 0x5a8
 800db3c:	f897 25a7 	ldrb.w	r2, [r7, #1447]	@ 0x5a7
 800db40:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	@ 0x5a4
 800db44:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 800db48:	9321      	str	r3, [sp, #132]	@ 0x84
 800db4a:	9220      	str	r2, [sp, #128]	@ 0x80
 800db4c:	911f      	str	r1, [sp, #124]	@ 0x7c
 800db4e:	901e      	str	r0, [sp, #120]	@ 0x78
 800db50:	941d      	str	r4, [sp, #116]	@ 0x74
 800db52:	951c      	str	r5, [sp, #112]	@ 0x70
 800db54:	961b      	str	r6, [sp, #108]	@ 0x6c
 800db56:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 800db58:	951a      	str	r5, [sp, #104]	@ 0x68
 800db5a:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800db5c:	9419      	str	r4, [sp, #100]	@ 0x64
 800db5e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800db60:	9018      	str	r0, [sp, #96]	@ 0x60
 800db62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db64:	9117      	str	r1, [sp, #92]	@ 0x5c
 800db66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db68:	9216      	str	r2, [sp, #88]	@ 0x58
 800db6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db6c:	9315      	str	r3, [sp, #84]	@ 0x54
 800db6e:	6e3e      	ldr	r6, [r7, #96]	@ 0x60
 800db70:	9614      	str	r6, [sp, #80]	@ 0x50
 800db72:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 800db74:	9513      	str	r5, [sp, #76]	@ 0x4c
 800db76:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 800db78:	9412      	str	r4, [sp, #72]	@ 0x48
 800db7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800db7c:	9011      	str	r0, [sp, #68]	@ 0x44
 800db7e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800db80:	9110      	str	r1, [sp, #64]	@ 0x40
 800db82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800db84:	920f      	str	r2, [sp, #60]	@ 0x3c
 800db86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db88:	930e      	str	r3, [sp, #56]	@ 0x38
 800db8a:	6ffe      	ldr	r6, [r7, #124]	@ 0x7c
 800db8c:	960d      	str	r6, [sp, #52]	@ 0x34
 800db8e:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 800db92:	950c      	str	r5, [sp, #48]	@ 0x30
 800db94:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800db98:	940b      	str	r4, [sp, #44]	@ 0x2c
 800db9a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800db9e:	900a      	str	r0, [sp, #40]	@ 0x28
 800dba0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800dba4:	9109      	str	r1, [sp, #36]	@ 0x24
 800dba6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dbaa:	9208      	str	r2, [sp, #32]
 800dbac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dbb0:	9307      	str	r3, [sp, #28]
 800dbb2:	f8d7 6098 	ldr.w	r6, [r7, #152]	@ 0x98
 800dbb6:	9606      	str	r6, [sp, #24]
 800dbb8:	f8d7 509c 	ldr.w	r5, [r7, #156]	@ 0x9c
 800dbbc:	9505      	str	r5, [sp, #20]
 800dbbe:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800dbc2:	9404      	str	r4, [sp, #16]
 800dbc4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800dbc8:	9003      	str	r0, [sp, #12]
 800dbca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800dbce:	9102      	str	r1, [sp, #8]
 800dbd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800dbd4:	9201      	str	r2, [sp, #4]
 800dbd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	4643      	mov	r3, r8
 800dbde:	4672      	mov	r2, lr
 800dbe0:	49ad      	ldr	r1, [pc, #692]	@ (800de98 <frame_processing+0x185c>)
 800dbe2:	4660      	mov	r0, ip
 800dbe4:	f001 ffe6 	bl	800fbb4 <siprintf>
						                rgb_status, rgb_current,
						                ir_status, ir_current,
						                cm4_status, cm4_current,
						                vin_status, vin_voltage,
						                vbus_status, vbus_voltage);
									if (uart_choose_uart5) {
 800dbe8:	4bac      	ldr	r3, [pc, #688]	@ (800de9c <frame_processing+0x1860>)
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d005      	beq.n	800dbfe <frame_processing+0x15c2>
										Uart_sendstring(UART5, buffer_0x06);
 800dbf2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	48a9      	ldr	r0, [pc, #676]	@ (800dea0 <frame_processing+0x1864>)
 800dbfa:	f7f4 f9ef 	bl	8001fdc <Uart_sendstring>
									}
				                    if (uart_choose_usart2) {
 800dbfe:	4ba9      	ldr	r3, [pc, #676]	@ (800dea4 <frame_processing+0x1868>)
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d005      	beq.n	800dc14 <frame_processing+0x15d8>
				                    	Uart_sendstring(USART2, buffer_0x06);
 800dc08:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	48a6      	ldr	r0, [pc, #664]	@ (800dea8 <frame_processing+0x186c>)
 800dc10:	f7f4 f9e4 	bl	8001fdc <Uart_sendstring>
				                    }
									Uart_sendstring(USART6, buffer_0x06);
 800dc14:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dc18:	4619      	mov	r1, r3
 800dc1a:	48a4      	ldr	r0, [pc, #656]	@ (800deac <frame_processing+0x1870>)
 800dc1c:	f7f4 f9de 	bl	8001fdc <Uart_sendstring>

						}

						default:
							clear_send_flag();
 800dc20:	f7f4 fb1e 	bl	8002260 <clear_send_flag>
							return FSP_PKT_INVALID;
 800dc24:	2302      	movs	r3, #2
 800dc26:	f000 bff5 	b.w	800ec14 <frame_processing+0x25d8>
//													for (int i = 0; i < fsp_pkt->length; i++) {
//													      sprintf(buffer, "\n{%d}", fsp_pkt->payload[i]);
//													      Uart_sendstring(UART5, buffer);
//													}

					clear_send_flag();
 800dc2a:	f7f4 fb19 	bl	8002260 <clear_send_flag>
					break;
 800dc2e:	e004      	b.n	800dc3a <frame_processing+0x15fe>
				default:
					clear_send_flag();
 800dc30:	f7f4 fb16 	bl	8002260 <clear_send_flag>
					return FSP_PKT_INVALID;
 800dc34:	2302      	movs	r3, #2
 800dc36:	f000 bfed 	b.w	800ec14 <frame_processing+0x25d8>
					break;
			}

			break;
 800dc3a:	f000 bfea 	b.w	800ec12 <frame_processing+0x25d6>
		case FSP_ADR_CAM:
			clear_send_flag();
 800dc3e:	f7f4 fb0f 	bl	8002260 <clear_send_flag>

			break;
 800dc42:	f000 bfe6 	b.w	800ec12 <frame_processing+0x25d6>

		case FSP_ADR_IOU:
			switch (fsp_pkt->type)
 800dc46:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dc4a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	791b      	ldrb	r3, [r3, #4]
 800dc52:	2b05      	cmp	r3, #5
 800dc54:	d003      	beq.n	800dc5e <frame_processing+0x1622>
 800dc56:	2b07      	cmp	r3, #7
 800dc58:	d01e      	beq.n	800dc98 <frame_processing+0x165c>
 800dc5a:	f000 bfd2 	b.w	800ec02 <frame_processing+0x25c6>
			{
				case FSP_PKT_TYPE_ACK:
					clear_send_flag();
 800dc5e:	f7f4 faff 	bl	8002260 <clear_send_flag>
					if (uart_choose_uart5) {
 800dc62:	4b8e      	ldr	r3, [pc, #568]	@ (800de9c <frame_processing+0x1860>)
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d003      	beq.n	800dc74 <frame_processing+0x1638>
						Uart_sendstring(UART5, "\nIOU_ACK\r\n> ");
 800dc6c:	4990      	ldr	r1, [pc, #576]	@ (800deb0 <frame_processing+0x1874>)
 800dc6e:	488c      	ldr	r0, [pc, #560]	@ (800dea0 <frame_processing+0x1864>)
 800dc70:	f7f4 f9b4 	bl	8001fdc <Uart_sendstring>
					}
                    if (uart_choose_usart2) {
 800dc74:	4b8b      	ldr	r3, [pc, #556]	@ (800dea4 <frame_processing+0x1868>)
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d003      	beq.n	800dc86 <frame_processing+0x164a>
                    	Uart_sendstring(USART2, "\nIOU_ACK\r\n> ");
 800dc7e:	498c      	ldr	r1, [pc, #560]	@ (800deb0 <frame_processing+0x1874>)
 800dc80:	4889      	ldr	r0, [pc, #548]	@ (800dea8 <frame_processing+0x186c>)
 800dc82:	f7f4 f9ab 	bl	8001fdc <Uart_sendstring>
                    }
					Uart_sendstring(USART6, "\nIOU_ACK\r\n> ");
 800dc86:	498a      	ldr	r1, [pc, #552]	@ (800deb0 <frame_processing+0x1874>)
 800dc88:	4888      	ldr	r0, [pc, #544]	@ (800deac <frame_processing+0x1870>)
 800dc8a:	f7f4 f9a7 	bl	8001fdc <Uart_sendstring>

					break;
 800dc8e:	bf00      	nop
				default:
					clear_send_flag();
					return FSP_PKT_INVALID;
					break;
			}
			clear_send_flag();
 800dc90:	f7f4 fae6 	bl	8002260 <clear_send_flag>
			break;
 800dc94:	f000 bfbd 	b.w	800ec12 <frame_processing+0x25d6>
					clear_send_flag();
 800dc98:	f7f4 fae2 	bl	8002260 <clear_send_flag>
					switch(fsp_pkt->payload[0])
 800dc9c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dca0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	795b      	ldrb	r3, [r3, #5]
 800dca8:	2b13      	cmp	r3, #19
 800dcaa:	dc31      	bgt.n	800dd10 <frame_processing+0x16d4>
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f2c0 87a5 	blt.w	800ebfc <frame_processing+0x25c0>
 800dcb2:	2b13      	cmp	r3, #19
 800dcb4:	f200 87a2 	bhi.w	800ebfc <frame_processing+0x25c0>
 800dcb8:	a201      	add	r2, pc, #4	@ (adr r2, 800dcc0 <frame_processing+0x1684>)
 800dcba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcbe:	bf00      	nop
 800dcc0:	0800dd19 	.word	0x0800dd19
 800dcc4:	0800ebfd 	.word	0x0800ebfd
 800dcc8:	0800ddc5 	.word	0x0800ddc5
 800dccc:	0800dec5 	.word	0x0800dec5
 800dcd0:	0800ebfd 	.word	0x0800ebfd
 800dcd4:	0800ebfd 	.word	0x0800ebfd
 800dcd8:	0800ebfd 	.word	0x0800ebfd
 800dcdc:	0800ebfd 	.word	0x0800ebfd
 800dce0:	0800ebfd 	.word	0x0800ebfd
 800dce4:	0800ebfd 	.word	0x0800ebfd
 800dce8:	0800ebfd 	.word	0x0800ebfd
 800dcec:	0800ebfd 	.word	0x0800ebfd
 800dcf0:	0800ebfd 	.word	0x0800ebfd
 800dcf4:	0800ebfd 	.word	0x0800ebfd
 800dcf8:	0800df79 	.word	0x0800df79
 800dcfc:	0800ebfd 	.word	0x0800ebfd
 800dd00:	0800e017 	.word	0x0800e017
 800dd04:	0800e073 	.word	0x0800e073
 800dd08:	0800e1e1 	.word	0x0800e1e1
 800dd0c:	0800e26d 	.word	0x0800e26d
 800dd10:	2bff      	cmp	r3, #255	@ 0xff
 800dd12:	d02c      	beq.n	800dd6e <frame_processing+0x1732>
 800dd14:	f000 bf72 	b.w	800ebfc <frame_processing+0x25c0>
							sprintf(buffer_0x00, "IOU_Done: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800dd18:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd1c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	799b      	ldrb	r3, [r3, #6]
 800dd24:	461a      	mov	r2, r3
 800dd26:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dd2a:	4962      	ldr	r1, [pc, #392]	@ (800deb4 <frame_processing+0x1878>)
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f001 ff41 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800dd32:	4b5a      	ldr	r3, [pc, #360]	@ (800de9c <frame_processing+0x1860>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d005      	beq.n	800dd48 <frame_processing+0x170c>
								Uart_sendstring(UART5, buffer_0x00);
 800dd3c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dd40:	4619      	mov	r1, r3
 800dd42:	4857      	ldr	r0, [pc, #348]	@ (800dea0 <frame_processing+0x1864>)
 800dd44:	f7f4 f94a 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800dd48:	4b56      	ldr	r3, [pc, #344]	@ (800dea4 <frame_processing+0x1868>)
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d005      	beq.n	800dd5e <frame_processing+0x1722>
		                    	Uart_sendstring(USART2, buffer_0x00);
 800dd52:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dd56:	4619      	mov	r1, r3
 800dd58:	4853      	ldr	r0, [pc, #332]	@ (800dea8 <frame_processing+0x186c>)
 800dd5a:	f7f4 f93f 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x00);
 800dd5e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dd62:	4619      	mov	r1, r3
 800dd64:	4851      	ldr	r0, [pc, #324]	@ (800deac <frame_processing+0x1870>)
 800dd66:	f7f4 f939 	bl	8001fdc <Uart_sendstring>
							break;
 800dd6a:	f000 bf4a 	b.w	800ec02 <frame_processing+0x25c6>
							sprintf(buffer_0xFF, "IOU_Failed: CMDcode 0x%02X\n", fsp_pkt->payload[1]);
 800dd6e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dd72:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	799b      	ldrb	r3, [r3, #6]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dd80:	494d      	ldr	r1, [pc, #308]	@ (800deb8 <frame_processing+0x187c>)
 800dd82:	4618      	mov	r0, r3
 800dd84:	f001 ff16 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800dd88:	4b44      	ldr	r3, [pc, #272]	@ (800de9c <frame_processing+0x1860>)
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d005      	beq.n	800dd9e <frame_processing+0x1762>
								Uart_sendstring(UART5, buffer_0xFF);
 800dd92:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dd96:	4619      	mov	r1, r3
 800dd98:	4841      	ldr	r0, [pc, #260]	@ (800dea0 <frame_processing+0x1864>)
 800dd9a:	f7f4 f91f 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800dd9e:	4b41      	ldr	r3, [pc, #260]	@ (800dea4 <frame_processing+0x1868>)
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d005      	beq.n	800ddb4 <frame_processing+0x1778>
		                    	Uart_sendstring(USART2, buffer_0xFF);
 800dda8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ddac:	4619      	mov	r1, r3
 800ddae:	483e      	ldr	r0, [pc, #248]	@ (800dea8 <frame_processing+0x186c>)
 800ddb0:	f7f4 f914 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0xFF);
 800ddb4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ddb8:	4619      	mov	r1, r3
 800ddba:	483c      	ldr	r0, [pc, #240]	@ (800deac <frame_processing+0x1870>)
 800ddbc:	f7f4 f90e 	bl	8001fdc <Uart_sendstring>
							break;
 800ddc0:	f000 bf1f 	b.w	800ec02 <frame_processing+0x25c6>
						    uint8_t device = fsp_pkt->payload[1];
 800ddc4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ddc8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	799b      	ldrb	r3, [r3, #6]
 800ddd0:	f887 35ef 	strb.w	r3, [r7, #1519]	@ 0x5ef
						    uint8_t channel = fsp_pkt->payload[2];
 800ddd4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ddd8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	79db      	ldrb	r3, [r3, #7]
 800dde0:	f887 35ee 	strb.w	r3, [r7, #1518]	@ 0x5ee
						    int16_t temp = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800dde4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dde8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	7a1b      	ldrb	r3, [r3, #8]
 800ddf0:	021b      	lsls	r3, r3, #8
 800ddf2:	b21a      	sxth	r2, r3
 800ddf4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ddf8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	7a5b      	ldrb	r3, [r3, #9]
 800de00:	b21b      	sxth	r3, r3
 800de02:	4313      	orrs	r3, r2
 800de04:	f8a7 35ec 	strh.w	r3, [r7, #1516]	@ 0x5ec
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800de08:	f897 45ef 	ldrb.w	r4, [r7, #1519]	@ 0x5ef
 800de0c:	f897 55ee 	ldrb.w	r5, [r7, #1518]	@ 0x5ee
 800de10:	f9b7 35ec 	ldrsh.w	r3, [r7, #1516]	@ 0x5ec
 800de14:	4a29      	ldr	r2, [pc, #164]	@ (800debc <frame_processing+0x1880>)
 800de16:	fb82 1203 	smull	r1, r2, r2, r3
 800de1a:	1092      	asrs	r2, r2, #2
 800de1c:	17db      	asrs	r3, r3, #31
 800de1e:	1ad3      	subs	r3, r2, r3
 800de20:	b21b      	sxth	r3, r3
 800de22:	461e      	mov	r6, r3
						            device, channel, temp / 10, abs(temp % 10));
 800de24:	f9b7 25ec 	ldrsh.w	r2, [r7, #1516]	@ 0x5ec
 800de28:	4b24      	ldr	r3, [pc, #144]	@ (800debc <frame_processing+0x1880>)
 800de2a:	fb83 1302 	smull	r1, r3, r3, r2
 800de2e:	1099      	asrs	r1, r3, #2
 800de30:	17d3      	asrs	r3, r2, #31
 800de32:	1ac9      	subs	r1, r1, r3
 800de34:	460b      	mov	r3, r1
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	440b      	add	r3, r1
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	b21b      	sxth	r3, r3
 800de40:	2b00      	cmp	r3, #0
 800de42:	bfb8      	it	lt
 800de44:	425b      	neglt	r3, r3
 800de46:	b29b      	uxth	r3, r3
						    sprintf(buffer_0x02, "IOU_Res: CMDcode 0x02 [{Device: %u, Channel: %u} Temp: %d.%d]\n",
 800de48:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800de4c:	9301      	str	r3, [sp, #4]
 800de4e:	9600      	str	r6, [sp, #0]
 800de50:	462b      	mov	r3, r5
 800de52:	4622      	mov	r2, r4
 800de54:	491a      	ldr	r1, [pc, #104]	@ (800dec0 <frame_processing+0x1884>)
 800de56:	f001 fead 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800de5a:	4b10      	ldr	r3, [pc, #64]	@ (800de9c <frame_processing+0x1860>)
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b00      	cmp	r3, #0
 800de62:	d005      	beq.n	800de70 <frame_processing+0x1834>
								Uart_sendstring(UART5, buffer_0x02);
 800de64:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800de68:	4619      	mov	r1, r3
 800de6a:	480d      	ldr	r0, [pc, #52]	@ (800dea0 <frame_processing+0x1864>)
 800de6c:	f7f4 f8b6 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800de70:	4b0c      	ldr	r3, [pc, #48]	@ (800dea4 <frame_processing+0x1868>)
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	b2db      	uxtb	r3, r3
 800de76:	2b00      	cmp	r3, #0
 800de78:	d005      	beq.n	800de86 <frame_processing+0x184a>
		                    	Uart_sendstring(USART2, buffer_0x02);
 800de7a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800de7e:	4619      	mov	r1, r3
 800de80:	4809      	ldr	r0, [pc, #36]	@ (800dea8 <frame_processing+0x186c>)
 800de82:	f7f4 f8ab 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x02);
 800de86:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800de8a:	4619      	mov	r1, r3
 800de8c:	4807      	ldr	r0, [pc, #28]	@ (800deac <frame_processing+0x1870>)
 800de8e:	f7f4 f8a5 	bl	8001fdc <Uart_sendstring>
						break;
 800de92:	f000 beb6 	b.w	800ec02 <frame_processing+0x25c6>
 800de96:	bf00      	nop
 800de98:	08015b78 	.word	0x08015b78
 800de9c:	200058b8 	.word	0x200058b8
 800dea0:	40005000 	.word	0x40005000
 800dea4:	200058b9 	.word	0x200058b9
 800dea8:	40004400 	.word	0x40004400
 800deac:	40011400 	.word	0x40011400
 800deb0:	08015dc0 	.word	0x08015dc0
 800deb4:	08015dd0 	.word	0x08015dd0
 800deb8:	08015dec 	.word	0x08015dec
 800debc:	66666667 	.word	0x66666667
 800dec0:	08015e08 	.word	0x08015e08
						    uint8_t channel = fsp_pkt->payload[1];
 800dec4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dec8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	799b      	ldrb	r3, [r3, #6]
 800ded0:	f887 35f2 	strb.w	r3, [r7, #1522]	@ 0x5f2
						    int16_t temp = (int16_t)((fsp_pkt->payload[2] << 8) | fsp_pkt->payload[3]);
 800ded4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800ded8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	79db      	ldrb	r3, [r3, #7]
 800dee0:	021b      	lsls	r3, r3, #8
 800dee2:	b21a      	sxth	r2, r3
 800dee4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dee8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	7a1b      	ldrb	r3, [r3, #8]
 800def0:	b21b      	sxth	r3, r3
 800def2:	4313      	orrs	r3, r2
 800def4:	f8a7 35f0 	strh.w	r3, [r7, #1520]	@ 0x5f0
						    sprintf(buffer_0x03, "IOU_Res: CMDcode 0x03 [{Channel: %u} Temp: %d.%d]\n",
 800def8:	f897 45f2 	ldrb.w	r4, [r7, #1522]	@ 0x5f2
 800defc:	f9b7 35f0 	ldrsh.w	r3, [r7, #1520]	@ 0x5f0
 800df00:	4aad      	ldr	r2, [pc, #692]	@ (800e1b8 <frame_processing+0x1b7c>)
 800df02:	fb82 1203 	smull	r1, r2, r2, r3
 800df06:	1092      	asrs	r2, r2, #2
 800df08:	17db      	asrs	r3, r3, #31
 800df0a:	1ad3      	subs	r3, r2, r3
 800df0c:	b21b      	sxth	r3, r3
 800df0e:	461d      	mov	r5, r3
 800df10:	f9b7 25f0 	ldrsh.w	r2, [r7, #1520]	@ 0x5f0
 800df14:	4ba8      	ldr	r3, [pc, #672]	@ (800e1b8 <frame_processing+0x1b7c>)
 800df16:	fb83 1302 	smull	r1, r3, r3, r2
 800df1a:	1099      	asrs	r1, r3, #2
 800df1c:	17d3      	asrs	r3, r2, #31
 800df1e:	1ac9      	subs	r1, r1, r3
 800df20:	460b      	mov	r3, r1
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	440b      	add	r3, r1
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	b21b      	sxth	r3, r3
 800df2c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	462b      	mov	r3, r5
 800df34:	4622      	mov	r2, r4
 800df36:	49a1      	ldr	r1, [pc, #644]	@ (800e1bc <frame_processing+0x1b80>)
 800df38:	f001 fe3c 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800df3c:	4ba0      	ldr	r3, [pc, #640]	@ (800e1c0 <frame_processing+0x1b84>)
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	b2db      	uxtb	r3, r3
 800df42:	2b00      	cmp	r3, #0
 800df44:	d005      	beq.n	800df52 <frame_processing+0x1916>
								Uart_sendstring(UART5, buffer_0x03);
 800df46:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800df4a:	4619      	mov	r1, r3
 800df4c:	489d      	ldr	r0, [pc, #628]	@ (800e1c4 <frame_processing+0x1b88>)
 800df4e:	f7f4 f845 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800df52:	4b9d      	ldr	r3, [pc, #628]	@ (800e1c8 <frame_processing+0x1b8c>)
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	b2db      	uxtb	r3, r3
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d005      	beq.n	800df68 <frame_processing+0x192c>
		                    	Uart_sendstring(USART2, buffer_0x03);
 800df5c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800df60:	4619      	mov	r1, r3
 800df62:	489a      	ldr	r0, [pc, #616]	@ (800e1cc <frame_processing+0x1b90>)
 800df64:	f7f4 f83a 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x03);
 800df68:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800df6c:	4619      	mov	r1, r3
 800df6e:	4898      	ldr	r0, [pc, #608]	@ (800e1d0 <frame_processing+0x1b94>)
 800df70:	f7f4 f834 	bl	8001fdc <Uart_sendstring>
						break;
 800df74:	f000 be45 	b.w	800ec02 <frame_processing+0x25c6>
						    uint8_t red = fsp_pkt->payload[1];
 800df78:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800df7c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	799b      	ldrb	r3, [r3, #6]
 800df84:	f887 35f6 	strb.w	r3, [r7, #1526]	@ 0x5f6
						    uint8_t blue = fsp_pkt->payload[2];
 800df88:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800df8c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	79db      	ldrb	r3, [r3, #7]
 800df94:	f887 35f5 	strb.w	r3, [r7, #1525]	@ 0x5f5
						    uint8_t green = fsp_pkt->payload[3];
 800df98:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800df9c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	7a1b      	ldrb	r3, [r3, #8]
 800dfa4:	f887 35f4 	strb.w	r3, [r7, #1524]	@ 0x5f4
						    uint8_t white = fsp_pkt->payload[4];
 800dfa8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800dfac:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	7a5b      	ldrb	r3, [r3, #9]
 800dfb4:	f887 35f3 	strb.w	r3, [r7, #1523]	@ 0x5f3
						    sprintf(buffer_0x0E, "IOU_Res: CMDcode 0x0E [Red: %u, Blue: %u, Green: %u, White: %u]\n",
 800dfb8:	f897 15f6 	ldrb.w	r1, [r7, #1526]	@ 0x5f6
 800dfbc:	f897 45f5 	ldrb.w	r4, [r7, #1525]	@ 0x5f5
 800dfc0:	f897 35f4 	ldrb.w	r3, [r7, #1524]	@ 0x5f4
 800dfc4:	f897 25f3 	ldrb.w	r2, [r7, #1523]	@ 0x5f3
 800dfc8:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800dfcc:	9201      	str	r2, [sp, #4]
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	4623      	mov	r3, r4
 800dfd2:	460a      	mov	r2, r1
 800dfd4:	497f      	ldr	r1, [pc, #508]	@ (800e1d4 <frame_processing+0x1b98>)
 800dfd6:	f001 fded 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800dfda:	4b79      	ldr	r3, [pc, #484]	@ (800e1c0 <frame_processing+0x1b84>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d005      	beq.n	800dff0 <frame_processing+0x19b4>
								Uart_sendstring(UART5, buffer_0x0E);
 800dfe4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dfe8:	4619      	mov	r1, r3
 800dfea:	4876      	ldr	r0, [pc, #472]	@ (800e1c4 <frame_processing+0x1b88>)
 800dfec:	f7f3 fff6 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800dff0:	4b75      	ldr	r3, [pc, #468]	@ (800e1c8 <frame_processing+0x1b8c>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d005      	beq.n	800e006 <frame_processing+0x19ca>
		                    	Uart_sendstring(USART2, buffer_0x0E);
 800dffa:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800dffe:	4619      	mov	r1, r3
 800e000:	4872      	ldr	r0, [pc, #456]	@ (800e1cc <frame_processing+0x1b90>)
 800e002:	f7f3 ffeb 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x0E);
 800e006:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e00a:	4619      	mov	r1, r3
 800e00c:	4870      	ldr	r0, [pc, #448]	@ (800e1d0 <frame_processing+0x1b94>)
 800e00e:	f7f3 ffe5 	bl	8001fdc <Uart_sendstring>
						break;
 800e012:	f000 bdf6 	b.w	800ec02 <frame_processing+0x25c6>
						    uint8_t duty = fsp_pkt->payload[1];
 800e016:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e01a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	799b      	ldrb	r3, [r3, #6]
 800e022:	f887 35f7 	strb.w	r3, [r7, #1527]	@ 0x5f7
						    sprintf(buffer_0x10, "IOU_Res: CMDcode 0x10 [Duty: %u%%]\n", duty);
 800e026:	f897 25f7 	ldrb.w	r2, [r7, #1527]	@ 0x5f7
 800e02a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e02e:	496a      	ldr	r1, [pc, #424]	@ (800e1d8 <frame_processing+0x1b9c>)
 800e030:	4618      	mov	r0, r3
 800e032:	f001 fdbf 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800e036:	4b62      	ldr	r3, [pc, #392]	@ (800e1c0 <frame_processing+0x1b84>)
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d005      	beq.n	800e04c <frame_processing+0x1a10>
								Uart_sendstring(UART5, buffer_0x10);
 800e040:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e044:	4619      	mov	r1, r3
 800e046:	485f      	ldr	r0, [pc, #380]	@ (800e1c4 <frame_processing+0x1b88>)
 800e048:	f7f3 ffc8 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800e04c:	4b5e      	ldr	r3, [pc, #376]	@ (800e1c8 <frame_processing+0x1b8c>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	b2db      	uxtb	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	d005      	beq.n	800e062 <frame_processing+0x1a26>
		                    	Uart_sendstring(USART2, buffer_0x10);
 800e056:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e05a:	4619      	mov	r1, r3
 800e05c:	485b      	ldr	r0, [pc, #364]	@ (800e1cc <frame_processing+0x1b90>)
 800e05e:	f7f3 ffbd 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x10);
 800e062:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e066:	4619      	mov	r1, r3
 800e068:	4859      	ldr	r0, [pc, #356]	@ (800e1d0 <frame_processing+0x1b94>)
 800e06a:	f7f3 ffb7 	bl	8001fdc <Uart_sendstring>
						break;
 800e06e:	f000 bdc8 	b.w	800ec02 <frame_processing+0x25c6>
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800e072:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e076:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	799b      	ldrb	r3, [r3, #6]
 800e07e:	021b      	lsls	r3, r3, #8
 800e080:	b21a      	sxth	r2, r3
 800e082:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e086:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	79db      	ldrb	r3, [r3, #7]
 800e08e:	b21b      	sxth	r3, r3
 800e090:	4313      	orrs	r3, r2
 800e092:	f8a7 3602 	strh.w	r3, [r7, #1538]	@ 0x602
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800e096:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e09a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	7a1b      	ldrb	r3, [r3, #8]
 800e0a2:	021b      	lsls	r3, r3, #8
 800e0a4:	b21a      	sxth	r2, r3
 800e0a6:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0aa:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	7a5b      	ldrb	r3, [r3, #9]
 800e0b2:	b21b      	sxth	r3, r3
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	f8a7 3600 	strh.w	r3, [r7, #1536]	@ 0x600
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800e0ba:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0be:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	7a9b      	ldrb	r3, [r3, #10]
 800e0c6:	021b      	lsls	r3, r3, #8
 800e0c8:	b21a      	sxth	r2, r3
 800e0ca:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0ce:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	7adb      	ldrb	r3, [r3, #11]
 800e0d6:	b21b      	sxth	r3, r3
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	f8a7 35fe 	strh.w	r3, [r7, #1534]	@ 0x5fe
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800e0de:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0e2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	7b1b      	ldrb	r3, [r3, #12]
 800e0ea:	021b      	lsls	r3, r3, #8
 800e0ec:	b21a      	sxth	r2, r3
 800e0ee:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e0f2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	7b5b      	ldrb	r3, [r3, #13]
 800e0fa:	b21b      	sxth	r3, r3
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	f8a7 35fc 	strh.w	r3, [r7, #1532]	@ 0x5fc
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800e102:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e106:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	7b9b      	ldrb	r3, [r3, #14]
 800e10e:	021b      	lsls	r3, r3, #8
 800e110:	b21a      	sxth	r2, r3
 800e112:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e116:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	7bdb      	ldrb	r3, [r3, #15]
 800e11e:	b21b      	sxth	r3, r3
 800e120:	4313      	orrs	r3, r2
 800e122:	f8a7 35fa 	strh.w	r3, [r7, #1530]	@ 0x5fa
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800e126:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e12a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	7c1b      	ldrb	r3, [r3, #16]
 800e132:	021b      	lsls	r3, r3, #8
 800e134:	b21a      	sxth	r2, r3
 800e136:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e13a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	7c5b      	ldrb	r3, [r3, #17]
 800e142:	b21b      	sxth	r3, r3
 800e144:	4313      	orrs	r3, r2
 800e146:	f8a7 35f8 	strh.w	r3, [r7, #1528]	@ 0x5f8
						    sprintf(buffer_0x11, "IOU_Res: CMDcode 0x11 [Accel: X=%d, Y=%d, Z=%d\nGyro: X=%d, Y=%d, Z=%d]\n",
 800e14a:	f9b7 5602 	ldrsh.w	r5, [r7, #1538]	@ 0x602
 800e14e:	f9b7 6600 	ldrsh.w	r6, [r7, #1536]	@ 0x600
 800e152:	f9b7 35fe 	ldrsh.w	r3, [r7, #1534]	@ 0x5fe
 800e156:	f9b7 25fc 	ldrsh.w	r2, [r7, #1532]	@ 0x5fc
 800e15a:	f9b7 15fa 	ldrsh.w	r1, [r7, #1530]	@ 0x5fa
 800e15e:	f9b7 05f8 	ldrsh.w	r0, [r7, #1528]	@ 0x5f8
 800e162:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 800e166:	9003      	str	r0, [sp, #12]
 800e168:	9102      	str	r1, [sp, #8]
 800e16a:	9201      	str	r2, [sp, #4]
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	4633      	mov	r3, r6
 800e170:	462a      	mov	r2, r5
 800e172:	491a      	ldr	r1, [pc, #104]	@ (800e1dc <frame_processing+0x1ba0>)
 800e174:	4620      	mov	r0, r4
 800e176:	f001 fd1d 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800e17a:	4b11      	ldr	r3, [pc, #68]	@ (800e1c0 <frame_processing+0x1b84>)
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	2b00      	cmp	r3, #0
 800e182:	d005      	beq.n	800e190 <frame_processing+0x1b54>
								Uart_sendstring(UART5, buffer_0x11);
 800e184:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e188:	4619      	mov	r1, r3
 800e18a:	480e      	ldr	r0, [pc, #56]	@ (800e1c4 <frame_processing+0x1b88>)
 800e18c:	f7f3 ff26 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800e190:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c8 <frame_processing+0x1b8c>)
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	b2db      	uxtb	r3, r3
 800e196:	2b00      	cmp	r3, #0
 800e198:	d005      	beq.n	800e1a6 <frame_processing+0x1b6a>
		                    	Uart_sendstring(USART2, buffer_0x11);
 800e19a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e19e:	4619      	mov	r1, r3
 800e1a0:	480a      	ldr	r0, [pc, #40]	@ (800e1cc <frame_processing+0x1b90>)
 800e1a2:	f7f3 ff1b 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x11);
 800e1a6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	4808      	ldr	r0, [pc, #32]	@ (800e1d0 <frame_processing+0x1b94>)
 800e1ae:	f7f3 ff15 	bl	8001fdc <Uart_sendstring>
						break;
 800e1b2:	f000 bd26 	b.w	800ec02 <frame_processing+0x25c6>
 800e1b6:	bf00      	nop
 800e1b8:	66666667 	.word	0x66666667
 800e1bc:	08015e48 	.word	0x08015e48
 800e1c0:	200058b8 	.word	0x200058b8
 800e1c4:	40005000 	.word	0x40005000
 800e1c8:	200058b9 	.word	0x200058b9
 800e1cc:	40004400 	.word	0x40004400
 800e1d0:	40011400 	.word	0x40011400
 800e1d4:	08015e7c 	.word	0x08015e7c
 800e1d8:	08015ec0 	.word	0x08015ec0
 800e1dc:	08015ee4 	.word	0x08015ee4
						    uint16_t pressure = (uint16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800e1e0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e1e4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	799b      	ldrb	r3, [r3, #6]
 800e1ec:	021b      	lsls	r3, r3, #8
 800e1ee:	b21a      	sxth	r2, r3
 800e1f0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e1f4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	79db      	ldrb	r3, [r3, #7]
 800e1fc:	b21b      	sxth	r3, r3
 800e1fe:	4313      	orrs	r3, r2
 800e200:	b21b      	sxth	r3, r3
 800e202:	f8a7 3604 	strh.w	r3, [r7, #1540]	@ 0x604
						    sprintf(buffer_0x12, "IOU_Res: CMDcode 0x12 [Press: %u]\n", pressure);
 800e206:	f8b7 2604 	ldrh.w	r2, [r7, #1540]	@ 0x604
 800e20a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e20e:	4911      	ldr	r1, [pc, #68]	@ (800e254 <frame_processing+0x1c18>)
 800e210:	4618      	mov	r0, r3
 800e212:	f001 fccf 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800e216:	4b10      	ldr	r3, [pc, #64]	@ (800e258 <frame_processing+0x1c1c>)
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d005      	beq.n	800e22c <frame_processing+0x1bf0>
								Uart_sendstring(UART5, buffer_0x12);
 800e220:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e224:	4619      	mov	r1, r3
 800e226:	480d      	ldr	r0, [pc, #52]	@ (800e25c <frame_processing+0x1c20>)
 800e228:	f7f3 fed8 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800e22c:	4b0c      	ldr	r3, [pc, #48]	@ (800e260 <frame_processing+0x1c24>)
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	b2db      	uxtb	r3, r3
 800e232:	2b00      	cmp	r3, #0
 800e234:	d005      	beq.n	800e242 <frame_processing+0x1c06>
		                    	Uart_sendstring(USART2, buffer_0x12);
 800e236:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e23a:	4619      	mov	r1, r3
 800e23c:	4809      	ldr	r0, [pc, #36]	@ (800e264 <frame_processing+0x1c28>)
 800e23e:	f7f3 fecd 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x12);
 800e242:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800e246:	4619      	mov	r1, r3
 800e248:	4807      	ldr	r0, [pc, #28]	@ (800e268 <frame_processing+0x1c2c>)
 800e24a:	f7f3 fec7 	bl	8001fdc <Uart_sendstring>
						break;
 800e24e:	f000 bcd8 	b.w	800ec02 <frame_processing+0x25c6>
 800e252:	bf00      	nop
 800e254:	08015f2c 	.word	0x08015f2c
 800e258:	200058b8 	.word	0x200058b8
 800e25c:	40005000 	.word	0x40005000
 800e260:	200058b9 	.word	0x200058b9
 800e264:	40004400 	.word	0x40004400
 800e268:	40011400 	.word	0x40011400
							int16_t temp_ntc_channel0 = (int16_t)((fsp_pkt->payload[1] << 8) | fsp_pkt->payload[2]);
 800e26c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e270:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	799b      	ldrb	r3, [r3, #6]
 800e278:	021b      	lsls	r3, r3, #8
 800e27a:	b21a      	sxth	r2, r3
 800e27c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e280:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	79db      	ldrb	r3, [r3, #7]
 800e288:	b21b      	sxth	r3, r3
 800e28a:	4313      	orrs	r3, r2
 800e28c:	f8a7 3636 	strh.w	r3, [r7, #1590]	@ 0x636
							int16_t temp_ntc_channel1 = (int16_t)((fsp_pkt->payload[3] << 8) | fsp_pkt->payload[4]);
 800e290:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e294:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	7a1b      	ldrb	r3, [r3, #8]
 800e29c:	021b      	lsls	r3, r3, #8
 800e29e:	b21a      	sxth	r2, r3
 800e2a0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2a4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	7a5b      	ldrb	r3, [r3, #9]
 800e2ac:	b21b      	sxth	r3, r3
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	f8a7 3634 	strh.w	r3, [r7, #1588]	@ 0x634
							int16_t temp_ntc_channel2 = (int16_t)((fsp_pkt->payload[5] << 8) | fsp_pkt->payload[6]);
 800e2b4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2b8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	7a9b      	ldrb	r3, [r3, #10]
 800e2c0:	021b      	lsls	r3, r3, #8
 800e2c2:	b21a      	sxth	r2, r3
 800e2c4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2c8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	7adb      	ldrb	r3, [r3, #11]
 800e2d0:	b21b      	sxth	r3, r3
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	f8a7 3632 	strh.w	r3, [r7, #1586]	@ 0x632
							int16_t temp_ntc_channel3 = (int16_t)((fsp_pkt->payload[7] << 8) | fsp_pkt->payload[8]);
 800e2d8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2dc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	7b1b      	ldrb	r3, [r3, #12]
 800e2e4:	021b      	lsls	r3, r3, #8
 800e2e6:	b21a      	sxth	r2, r3
 800e2e8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e2ec:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	7b5b      	ldrb	r3, [r3, #13]
 800e2f4:	b21b      	sxth	r3, r3
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	f8a7 3630 	strh.w	r3, [r7, #1584]	@ 0x630
							int16_t temp_onewire_channel0 = (int16_t)((fsp_pkt->payload[9] << 8) | fsp_pkt->payload[10]);
 800e2fc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e300:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	7b9b      	ldrb	r3, [r3, #14]
 800e308:	021b      	lsls	r3, r3, #8
 800e30a:	b21a      	sxth	r2, r3
 800e30c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e310:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	7bdb      	ldrb	r3, [r3, #15]
 800e318:	b21b      	sxth	r3, r3
 800e31a:	4313      	orrs	r3, r2
 800e31c:	f8a7 362e 	strh.w	r3, [r7, #1582]	@ 0x62e
							int16_t temp_onewire_channel1 = (int16_t)((fsp_pkt->payload[11] << 8) | fsp_pkt->payload[12]);
 800e320:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e324:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	7c1b      	ldrb	r3, [r3, #16]
 800e32c:	021b      	lsls	r3, r3, #8
 800e32e:	b21a      	sxth	r2, r3
 800e330:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e334:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	7c5b      	ldrb	r3, [r3, #17]
 800e33c:	b21b      	sxth	r3, r3
 800e33e:	4313      	orrs	r3, r2
 800e340:	f8a7 362c 	strh.w	r3, [r7, #1580]	@ 0x62c
							int16_t temp_sensor = (int16_t)((fsp_pkt->payload[13] << 8) | fsp_pkt->payload[14]);
 800e344:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e348:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	7c9b      	ldrb	r3, [r3, #18]
 800e350:	021b      	lsls	r3, r3, #8
 800e352:	b21a      	sxth	r2, r3
 800e354:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e358:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	7cdb      	ldrb	r3, [r3, #19]
 800e360:	b21b      	sxth	r3, r3
 800e362:	4313      	orrs	r3, r2
 800e364:	f8a7 362a 	strh.w	r3, [r7, #1578]	@ 0x62a
							int16_t temp_setpoint_channel0 = (int16_t)((fsp_pkt->payload[15] << 8) | fsp_pkt->payload[16]);
 800e368:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e36c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	7d1b      	ldrb	r3, [r3, #20]
 800e374:	021b      	lsls	r3, r3, #8
 800e376:	b21a      	sxth	r2, r3
 800e378:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e37c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	7d5b      	ldrb	r3, [r3, #21]
 800e384:	b21b      	sxth	r3, r3
 800e386:	4313      	orrs	r3, r2
 800e388:	f8a7 3628 	strh.w	r3, [r7, #1576]	@ 0x628
							int16_t temp_setpoint_channel1 = (int16_t)((fsp_pkt->payload[17] << 8) | fsp_pkt->payload[18]);
 800e38c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e390:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	7d9b      	ldrb	r3, [r3, #22]
 800e398:	021b      	lsls	r3, r3, #8
 800e39a:	b21a      	sxth	r2, r3
 800e39c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3a0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	7ddb      	ldrb	r3, [r3, #23]
 800e3a8:	b21b      	sxth	r3, r3
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	f8a7 3626 	strh.w	r3, [r7, #1574]	@ 0x626
							int16_t temp_setpoint_channel2 = (int16_t)((fsp_pkt->payload[19] << 8) | fsp_pkt->payload[20]);
 800e3b0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3b4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	7e1b      	ldrb	r3, [r3, #24]
 800e3bc:	021b      	lsls	r3, r3, #8
 800e3be:	b21a      	sxth	r2, r3
 800e3c0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3c4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	7e5b      	ldrb	r3, [r3, #25]
 800e3cc:	b21b      	sxth	r3, r3
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	f8a7 3624 	strh.w	r3, [r7, #1572]	@ 0x624
							int16_t temp_setpoint_channel3 = (int16_t)((fsp_pkt->payload[21] << 8) | fsp_pkt->payload[22]);
 800e3d4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3d8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	7e9b      	ldrb	r3, [r3, #26]
 800e3e0:	021b      	lsls	r3, r3, #8
 800e3e2:	b21a      	sxth	r2, r3
 800e3e4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3e8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	7edb      	ldrb	r3, [r3, #27]
 800e3f0:	b21b      	sxth	r3, r3
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	f8a7 3622 	strh.w	r3, [r7, #1570]	@ 0x622
							uint16_t voltage_out_tec_channel0 = (uint16_t)((fsp_pkt->payload[23] << 8) | fsp_pkt->payload[24]);
 800e3f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e3fc:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	7f1b      	ldrb	r3, [r3, #28]
 800e404:	021b      	lsls	r3, r3, #8
 800e406:	b21a      	sxth	r2, r3
 800e408:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e40c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	7f5b      	ldrb	r3, [r3, #29]
 800e414:	b21b      	sxth	r3, r3
 800e416:	4313      	orrs	r3, r2
 800e418:	b21b      	sxth	r3, r3
 800e41a:	f8a7 3620 	strh.w	r3, [r7, #1568]	@ 0x620
							uint16_t voltage_out_tec_channel1 = (uint16_t)((fsp_pkt->payload[25] << 8) | fsp_pkt->payload[26]);
 800e41e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e422:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	7f9b      	ldrb	r3, [r3, #30]
 800e42a:	021b      	lsls	r3, r3, #8
 800e42c:	b21a      	sxth	r2, r3
 800e42e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e432:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	7fdb      	ldrb	r3, [r3, #31]
 800e43a:	b21b      	sxth	r3, r3
 800e43c:	4313      	orrs	r3, r2
 800e43e:	b21b      	sxth	r3, r3
 800e440:	f8a7 361e 	strh.w	r3, [r7, #1566]	@ 0x61e
							uint16_t voltage_out_tec_channel2 = (uint16_t)((fsp_pkt->payload[27] << 8) | fsp_pkt->payload[28]);
 800e444:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e448:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e452:	021b      	lsls	r3, r3, #8
 800e454:	b21a      	sxth	r2, r3
 800e456:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e45a:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800e464:	b21b      	sxth	r3, r3
 800e466:	4313      	orrs	r3, r2
 800e468:	b21b      	sxth	r3, r3
 800e46a:	f8a7 361c 	strh.w	r3, [r7, #1564]	@ 0x61c
							uint16_t voltage_out_tec_channel3 = (uint16_t)((fsp_pkt->payload[29] << 8) | fsp_pkt->payload[30]);
 800e46e:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e472:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800e47c:	021b      	lsls	r3, r3, #8
 800e47e:	b21a      	sxth	r2, r3
 800e480:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e484:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800e48e:	b21b      	sxth	r3, r3
 800e490:	4313      	orrs	r3, r2
 800e492:	b21b      	sxth	r3, r3
 800e494:	f8a7 361a 	strh.w	r3, [r7, #1562]	@ 0x61a
							uint8_t neo_led_r = fsp_pkt->payload[31];
 800e498:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e49c:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e4a6:	f887 3619 	strb.w	r3, [r7, #1561]	@ 0x619
							uint8_t neo_led_g = fsp_pkt->payload[32];
 800e4aa:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4ae:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800e4b8:	f887 3618 	strb.w	r3, [r7, #1560]	@ 0x618
							uint8_t neo_led_b = fsp_pkt->payload[33];
 800e4bc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4c0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e4ca:	f887 3617 	strb.w	r3, [r7, #1559]	@ 0x617
							uint8_t neo_led_w = fsp_pkt->payload[34];
 800e4ce:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4d2:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e4dc:	f887 3616 	strb.w	r3, [r7, #1558]	@ 0x616
							uint8_t ir_led_duty = fsp_pkt->payload[35];
 800e4e0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4e4:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4ee:	f887 3615 	strb.w	r3, [r7, #1557]	@ 0x615
						    int16_t accel_x = (int16_t)((fsp_pkt->payload[36] << 8) | fsp_pkt->payload[37]);
 800e4f2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e4f6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800e500:	021b      	lsls	r3, r3, #8
 800e502:	b21a      	sxth	r2, r3
 800e504:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e508:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800e512:	b21b      	sxth	r3, r3
 800e514:	4313      	orrs	r3, r2
 800e516:	f8a7 3612 	strh.w	r3, [r7, #1554]	@ 0x612
						    int16_t accel_y = (int16_t)((fsp_pkt->payload[38] << 8) | fsp_pkt->payload[39]);
 800e51a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e51e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800e528:	021b      	lsls	r3, r3, #8
 800e52a:	b21a      	sxth	r2, r3
 800e52c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e530:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e53a:	b21b      	sxth	r3, r3
 800e53c:	4313      	orrs	r3, r2
 800e53e:	f8a7 3610 	strh.w	r3, [r7, #1552]	@ 0x610
						    int16_t accel_z = (int16_t)((fsp_pkt->payload[40] << 8) | fsp_pkt->payload[41]);
 800e542:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e546:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e550:	021b      	lsls	r3, r3, #8
 800e552:	b21a      	sxth	r2, r3
 800e554:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e558:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800e562:	b21b      	sxth	r3, r3
 800e564:	4313      	orrs	r3, r2
 800e566:	f8a7 360e 	strh.w	r3, [r7, #1550]	@ 0x60e
						    int16_t gyro_x = (int16_t)((fsp_pkt->payload[42] << 8) | fsp_pkt->payload[43]);
 800e56a:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e56e:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e578:	021b      	lsls	r3, r3, #8
 800e57a:	b21a      	sxth	r2, r3
 800e57c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e580:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e58a:	b21b      	sxth	r3, r3
 800e58c:	4313      	orrs	r3, r2
 800e58e:	f8a7 360c 	strh.w	r3, [r7, #1548]	@ 0x60c
						    int16_t gyro_y = (int16_t)((fsp_pkt->payload[44] << 8) | fsp_pkt->payload[45]);
 800e592:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e596:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e5a0:	021b      	lsls	r3, r3, #8
 800e5a2:	b21a      	sxth	r2, r3
 800e5a4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5a8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e5b2:	b21b      	sxth	r3, r3
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	f8a7 360a 	strh.w	r3, [r7, #1546]	@ 0x60a
						    int16_t gyro_z = (int16_t)((fsp_pkt->payload[46] << 8) | fsp_pkt->payload[47]);
 800e5ba:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5be:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e5c8:	021b      	lsls	r3, r3, #8
 800e5ca:	b21a      	sxth	r2, r3
 800e5cc:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5d0:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e5da:	b21b      	sxth	r3, r3
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	f8a7 3608 	strh.w	r3, [r7, #1544]	@ 0x608
						    int16_t press = (int16_t)((fsp_pkt->payload[48] << 8) | fsp_pkt->payload[49]);
 800e5e2:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5e6:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e5f0:	021b      	lsls	r3, r3, #8
 800e5f2:	b21a      	sxth	r2, r3
 800e5f4:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800e5f8:	f2a3 5384 	subw	r3, r3, #1412	@ 0x584
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e602:	b21b      	sxth	r3, r3
 800e604:	4313      	orrs	r3, r2
 800e606:	f8a7 3606 	strh.w	r3, [r7, #1542]	@ 0x606
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e60a:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800e60e:	2b00      	cmp	r3, #0
 800e610:	da03      	bge.n	800e61a <frame_processing+0x1fde>
 800e612:	4bb5      	ldr	r3, [pc, #724]	@ (800e8e8 <frame_processing+0x22ac>)
 800e614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e618:	e002      	b.n	800e620 <frame_processing+0x1fe4>
 800e61a:	4bb4      	ldr	r3, [pc, #720]	@ (800e8ec <frame_processing+0x22b0>)
 800e61c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800e620:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800e624:	2b00      	cmp	r3, #0
 800e626:	bfb8      	it	lt
 800e628:	425b      	neglt	r3, r3
 800e62a:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e62c:	4ab0      	ldr	r2, [pc, #704]	@ (800e8f0 <frame_processing+0x22b4>)
 800e62e:	fb82 1203 	smull	r1, r2, r2, r3
 800e632:	1092      	asrs	r2, r2, #2
 800e634:	17db      	asrs	r3, r3, #31
 800e636:	eba2 0e03 	sub.w	lr, r2, r3
							        temp_ntc_channel0 < 0 ? "-" : "", abs(temp_ntc_channel0)/ 10, abs(temp_ntc_channel0) % 10,
 800e63a:	f9b7 3636 	ldrsh.w	r3, [r7, #1590]	@ 0x636
 800e63e:	2b00      	cmp	r3, #0
 800e640:	bfb8      	it	lt
 800e642:	425b      	neglt	r3, r3
 800e644:	b29b      	uxth	r3, r3
 800e646:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e648:	4ba9      	ldr	r3, [pc, #676]	@ (800e8f0 <frame_processing+0x22b4>)
 800e64a:	fb83 1302 	smull	r1, r3, r3, r2
 800e64e:	1099      	asrs	r1, r3, #2
 800e650:	17d3      	asrs	r3, r2, #31
 800e652:	1acb      	subs	r3, r1, r3
 800e654:	4619      	mov	r1, r3
 800e656:	460b      	mov	r3, r1
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	440b      	add	r3, r1
 800e65c:	005b      	lsls	r3, r3, #1
 800e65e:	1ad3      	subs	r3, r2, r3
 800e660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e664:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800e668:	2b00      	cmp	r3, #0
 800e66a:	da03      	bge.n	800e674 <frame_processing+0x2038>
 800e66c:	4b9e      	ldr	r3, [pc, #632]	@ (800e8e8 <frame_processing+0x22ac>)
 800e66e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e672:	e002      	b.n	800e67a <frame_processing+0x203e>
 800e674:	4b9d      	ldr	r3, [pc, #628]	@ (800e8ec <frame_processing+0x22b0>)
 800e676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800e67a:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800e67e:	2b00      	cmp	r3, #0
 800e680:	bfb8      	it	lt
 800e682:	425b      	neglt	r3, r3
 800e684:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e686:	4a9a      	ldr	r2, [pc, #616]	@ (800e8f0 <frame_processing+0x22b4>)
 800e688:	fb82 1203 	smull	r1, r2, r2, r3
 800e68c:	1092      	asrs	r2, r2, #2
 800e68e:	17db      	asrs	r3, r3, #31
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
							        temp_ntc_channel1 < 0 ? "-" : "", abs(temp_ntc_channel1)/ 10, abs(temp_ntc_channel1) % 10,
 800e696:	f9b7 3634 	ldrsh.w	r3, [r7, #1588]	@ 0x634
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	bfb8      	it	lt
 800e69e:	425b      	neglt	r3, r3
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e6a4:	4b92      	ldr	r3, [pc, #584]	@ (800e8f0 <frame_processing+0x22b4>)
 800e6a6:	fb83 1302 	smull	r1, r3, r3, r2
 800e6aa:	1099      	asrs	r1, r3, #2
 800e6ac:	17d3      	asrs	r3, r2, #31
 800e6ae:	1acb      	subs	r3, r1, r3
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	440b      	add	r3, r1
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e6be:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	da03      	bge.n	800e6ce <frame_processing+0x2092>
 800e6c6:	4b88      	ldr	r3, [pc, #544]	@ (800e8e8 <frame_processing+0x22ac>)
 800e6c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e6cc:	e002      	b.n	800e6d4 <frame_processing+0x2098>
 800e6ce:	4b87      	ldr	r3, [pc, #540]	@ (800e8ec <frame_processing+0x22b0>)
 800e6d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800e6d4:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	bfb8      	it	lt
 800e6dc:	425b      	neglt	r3, r3
 800e6de:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e6e0:	4a83      	ldr	r2, [pc, #524]	@ (800e8f0 <frame_processing+0x22b4>)
 800e6e2:	fb82 1203 	smull	r1, r2, r2, r3
 800e6e6:	1092      	asrs	r2, r2, #2
 800e6e8:	17db      	asrs	r3, r3, #31
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	67bb      	str	r3, [r7, #120]	@ 0x78
							        temp_ntc_channel2 < 0 ? "-" : "", abs(temp_ntc_channel2)/ 10, abs(temp_ntc_channel2) % 10,
 800e6ee:	f9b7 3632 	ldrsh.w	r3, [r7, #1586]	@ 0x632
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	bfb8      	it	lt
 800e6f6:	425b      	neglt	r3, r3
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	461a      	mov	r2, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e6fc:	4b7c      	ldr	r3, [pc, #496]	@ (800e8f0 <frame_processing+0x22b4>)
 800e6fe:	fb83 1302 	smull	r1, r3, r3, r2
 800e702:	1099      	asrs	r1, r3, #2
 800e704:	17d3      	asrs	r3, r2, #31
 800e706:	1acb      	subs	r3, r1, r3
 800e708:	4619      	mov	r1, r3
 800e70a:	460b      	mov	r3, r1
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	440b      	add	r3, r1
 800e710:	005b      	lsls	r3, r3, #1
 800e712:	1ad3      	subs	r3, r2, r3
 800e714:	677b      	str	r3, [r7, #116]	@ 0x74
 800e716:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	da03      	bge.n	800e726 <frame_processing+0x20ea>
 800e71e:	4b72      	ldr	r3, [pc, #456]	@ (800e8e8 <frame_processing+0x22ac>)
 800e720:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e724:	e002      	b.n	800e72c <frame_processing+0x20f0>
 800e726:	4b71      	ldr	r3, [pc, #452]	@ (800e8ec <frame_processing+0x22b0>)
 800e728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800e72c:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800e730:	2b00      	cmp	r3, #0
 800e732:	bfb8      	it	lt
 800e734:	425b      	neglt	r3, r3
 800e736:	b29b      	uxth	r3, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e738:	4a6d      	ldr	r2, [pc, #436]	@ (800e8f0 <frame_processing+0x22b4>)
 800e73a:	fb82 1203 	smull	r1, r2, r2, r3
 800e73e:	1092      	asrs	r2, r2, #2
 800e740:	17db      	asrs	r3, r3, #31
 800e742:	1ad3      	subs	r3, r2, r3
 800e744:	673b      	str	r3, [r7, #112]	@ 0x70
							        temp_ntc_channel3 < 0 ? "-" : "", abs(temp_ntc_channel3)/ 10, abs(temp_ntc_channel3) % 10,
 800e746:	f9b7 3630 	ldrsh.w	r3, [r7, #1584]	@ 0x630
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	bfb8      	it	lt
 800e74e:	425b      	neglt	r3, r3
 800e750:	b29b      	uxth	r3, r3
 800e752:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e754:	4b66      	ldr	r3, [pc, #408]	@ (800e8f0 <frame_processing+0x22b4>)
 800e756:	fb83 2301 	smull	r2, r3, r3, r1
 800e75a:	109a      	asrs	r2, r3, #2
 800e75c:	17cb      	asrs	r3, r1, #31
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	461a      	mov	r2, r3
 800e762:	4613      	mov	r3, r2
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	4413      	add	r3, r2
 800e768:	005b      	lsls	r3, r3, #1
 800e76a:	1acb      	subs	r3, r1, r3
 800e76c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e76e:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800e772:	2b00      	cmp	r3, #0
 800e774:	da03      	bge.n	800e77e <frame_processing+0x2142>
 800e776:	4b5c      	ldr	r3, [pc, #368]	@ (800e8e8 <frame_processing+0x22ac>)
 800e778:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e77c:	e002      	b.n	800e784 <frame_processing+0x2148>
 800e77e:	4b5b      	ldr	r3, [pc, #364]	@ (800e8ec <frame_processing+0x22b0>)
 800e780:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800e784:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800e788:	2b00      	cmp	r3, #0
 800e78a:	bfb8      	it	lt
 800e78c:	425b      	neglt	r3, r3
 800e78e:	b29b      	uxth	r3, r3
 800e790:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e792:	4b57      	ldr	r3, [pc, #348]	@ (800e8f0 <frame_processing+0x22b4>)
 800e794:	fb83 2301 	smull	r2, r3, r3, r1
 800e798:	109a      	asrs	r2, r3, #2
 800e79a:	17cb      	asrs	r3, r1, #31
 800e79c:	1ad3      	subs	r3, r2, r3
 800e79e:	66bb      	str	r3, [r7, #104]	@ 0x68
							        temp_onewire_channel0 < 0 ? "-" : "", abs(temp_onewire_channel0)/ 10, abs(temp_onewire_channel0) % 10,
 800e7a0:	f9b7 362e 	ldrsh.w	r3, [r7, #1582]	@ 0x62e
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	bfb8      	it	lt
 800e7a8:	425b      	neglt	r3, r3
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e7ae:	4b50      	ldr	r3, [pc, #320]	@ (800e8f0 <frame_processing+0x22b4>)
 800e7b0:	fb83 2301 	smull	r2, r3, r3, r1
 800e7b4:	109a      	asrs	r2, r3, #2
 800e7b6:	17cb      	asrs	r3, r1, #31
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	4613      	mov	r3, r2
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	4413      	add	r3, r2
 800e7c2:	005b      	lsls	r3, r3, #1
 800e7c4:	1acb      	subs	r3, r1, r3
 800e7c6:	667b      	str	r3, [r7, #100]	@ 0x64
 800e7c8:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	da03      	bge.n	800e7d8 <frame_processing+0x219c>
 800e7d0:	4b45      	ldr	r3, [pc, #276]	@ (800e8e8 <frame_processing+0x22ac>)
 800e7d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e7d6:	e002      	b.n	800e7de <frame_processing+0x21a2>
 800e7d8:	4b44      	ldr	r3, [pc, #272]	@ (800e8ec <frame_processing+0x22b0>)
 800e7da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800e7de:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	bfb8      	it	lt
 800e7e6:	425b      	neglt	r3, r3
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e7ec:	4b40      	ldr	r3, [pc, #256]	@ (800e8f0 <frame_processing+0x22b4>)
 800e7ee:	fb83 2301 	smull	r2, r3, r3, r1
 800e7f2:	109a      	asrs	r2, r3, #2
 800e7f4:	17cb      	asrs	r3, r1, #31
 800e7f6:	1ad3      	subs	r3, r2, r3
 800e7f8:	663b      	str	r3, [r7, #96]	@ 0x60
							        temp_onewire_channel1 < 0 ? "-" : "", abs(temp_onewire_channel1)/ 10, abs(temp_onewire_channel1) % 10,
 800e7fa:	f9b7 362c 	ldrsh.w	r3, [r7, #1580]	@ 0x62c
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	bfb8      	it	lt
 800e802:	425b      	neglt	r3, r3
 800e804:	b29b      	uxth	r3, r3
 800e806:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e808:	4b39      	ldr	r3, [pc, #228]	@ (800e8f0 <frame_processing+0x22b4>)
 800e80a:	fb83 2301 	smull	r2, r3, r3, r1
 800e80e:	109a      	asrs	r2, r3, #2
 800e810:	17cb      	asrs	r3, r1, #31
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	461a      	mov	r2, r3
 800e816:	4613      	mov	r3, r2
 800e818:	009b      	lsls	r3, r3, #2
 800e81a:	4413      	add	r3, r2
 800e81c:	005b      	lsls	r3, r3, #1
 800e81e:	1acb      	subs	r3, r1, r3
 800e820:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e822:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800e826:	2b00      	cmp	r3, #0
 800e828:	da03      	bge.n	800e832 <frame_processing+0x21f6>
 800e82a:	4b2f      	ldr	r3, [pc, #188]	@ (800e8e8 <frame_processing+0x22ac>)
 800e82c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e830:	e002      	b.n	800e838 <frame_processing+0x21fc>
 800e832:	4b2e      	ldr	r3, [pc, #184]	@ (800e8ec <frame_processing+0x22b0>)
 800e834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800e838:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	bfb8      	it	lt
 800e840:	425b      	neglt	r3, r3
 800e842:	b29b      	uxth	r3, r3
 800e844:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e846:	4b2a      	ldr	r3, [pc, #168]	@ (800e8f0 <frame_processing+0x22b4>)
 800e848:	fb83 2301 	smull	r2, r3, r3, r1
 800e84c:	109a      	asrs	r2, r3, #2
 800e84e:	17cb      	asrs	r3, r1, #31
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	65bb      	str	r3, [r7, #88]	@ 0x58
							        temp_sensor < 0 ? "-" : "", abs(temp_sensor)/ 10, abs(temp_sensor) % 10,
 800e854:	f9b7 362a 	ldrsh.w	r3, [r7, #1578]	@ 0x62a
 800e858:	2b00      	cmp	r3, #0
 800e85a:	bfb8      	it	lt
 800e85c:	425b      	neglt	r3, r3
 800e85e:	b29b      	uxth	r3, r3
 800e860:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e862:	4b23      	ldr	r3, [pc, #140]	@ (800e8f0 <frame_processing+0x22b4>)
 800e864:	fb83 2301 	smull	r2, r3, r3, r1
 800e868:	109a      	asrs	r2, r3, #2
 800e86a:	17cb      	asrs	r3, r1, #31
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	461a      	mov	r2, r3
 800e870:	4613      	mov	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	4413      	add	r3, r2
 800e876:	005b      	lsls	r3, r3, #1
 800e878:	1acb      	subs	r3, r1, r3
 800e87a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e87c:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800e880:	2b00      	cmp	r3, #0
 800e882:	da03      	bge.n	800e88c <frame_processing+0x2250>
 800e884:	4b18      	ldr	r3, [pc, #96]	@ (800e8e8 <frame_processing+0x22ac>)
 800e886:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e88a:	e002      	b.n	800e892 <frame_processing+0x2256>
 800e88c:	4b17      	ldr	r3, [pc, #92]	@ (800e8ec <frame_processing+0x22b0>)
 800e88e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800e892:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800e896:	2b00      	cmp	r3, #0
 800e898:	bfb8      	it	lt
 800e89a:	425b      	neglt	r3, r3
 800e89c:	b29b      	uxth	r3, r3
 800e89e:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e8a0:	4b13      	ldr	r3, [pc, #76]	@ (800e8f0 <frame_processing+0x22b4>)
 800e8a2:	fb83 2301 	smull	r2, r3, r3, r1
 800e8a6:	109a      	asrs	r2, r3, #2
 800e8a8:	17cb      	asrs	r3, r1, #31
 800e8aa:	1ad3      	subs	r3, r2, r3
 800e8ac:	653b      	str	r3, [r7, #80]	@ 0x50
							        temp_setpoint_channel0 < 0 ? "-" : "", abs(temp_setpoint_channel0)/ 10, abs(temp_setpoint_channel0) % 10,
 800e8ae:	f9b7 3628 	ldrsh.w	r3, [r7, #1576]	@ 0x628
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	bfb8      	it	lt
 800e8b6:	425b      	neglt	r3, r3
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e8bc:	4b0c      	ldr	r3, [pc, #48]	@ (800e8f0 <frame_processing+0x22b4>)
 800e8be:	fb83 2301 	smull	r2, r3, r3, r1
 800e8c2:	109a      	asrs	r2, r3, #2
 800e8c4:	17cb      	asrs	r3, r1, #31
 800e8c6:	1ad3      	subs	r3, r2, r3
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	4413      	add	r3, r2
 800e8d0:	005b      	lsls	r3, r3, #1
 800e8d2:	1acb      	subs	r3, r1, r3
 800e8d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e8d6:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	da0a      	bge.n	800e8f4 <frame_processing+0x22b8>
 800e8de:	4b02      	ldr	r3, [pc, #8]	@ (800e8e8 <frame_processing+0x22ac>)
 800e8e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e8e4:	e009      	b.n	800e8fa <frame_processing+0x22be>
 800e8e6:	bf00      	nop
 800e8e8:	08015874 	.word	0x08015874
 800e8ec:	08015878 	.word	0x08015878
 800e8f0:	66666667 	.word	0x66666667
 800e8f4:	4b2c      	ldr	r3, [pc, #176]	@ (800e9a8 <frame_processing+0x236c>)
 800e8f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800e8fa:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	bfb8      	it	lt
 800e902:	425b      	neglt	r3, r3
 800e904:	b29b      	uxth	r3, r3
 800e906:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e908:	4b28      	ldr	r3, [pc, #160]	@ (800e9ac <frame_processing+0x2370>)
 800e90a:	fb83 2301 	smull	r2, r3, r3, r1
 800e90e:	109a      	asrs	r2, r3, #2
 800e910:	17cb      	asrs	r3, r1, #31
 800e912:	1ad3      	subs	r3, r2, r3
 800e914:	64bb      	str	r3, [r7, #72]	@ 0x48
							        temp_setpoint_channel1 < 0 ? "-" : "", abs(temp_setpoint_channel1)/ 10, abs(temp_setpoint_channel1) % 10,
 800e916:	f9b7 3626 	ldrsh.w	r3, [r7, #1574]	@ 0x626
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	bfb8      	it	lt
 800e91e:	425b      	neglt	r3, r3
 800e920:	b29b      	uxth	r3, r3
 800e922:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e924:	4b21      	ldr	r3, [pc, #132]	@ (800e9ac <frame_processing+0x2370>)
 800e926:	fb83 2301 	smull	r2, r3, r3, r1
 800e92a:	109a      	asrs	r2, r3, #2
 800e92c:	17cb      	asrs	r3, r1, #31
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	461a      	mov	r2, r3
 800e932:	4613      	mov	r3, r2
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	4413      	add	r3, r2
 800e938:	005b      	lsls	r3, r3, #1
 800e93a:	1acb      	subs	r3, r1, r3
 800e93c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e93e:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800e942:	2b00      	cmp	r3, #0
 800e944:	da03      	bge.n	800e94e <frame_processing+0x2312>
 800e946:	4b1a      	ldr	r3, [pc, #104]	@ (800e9b0 <frame_processing+0x2374>)
 800e948:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e94c:	e002      	b.n	800e954 <frame_processing+0x2318>
 800e94e:	4b16      	ldr	r3, [pc, #88]	@ (800e9a8 <frame_processing+0x236c>)
 800e950:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800e954:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800e958:	2b00      	cmp	r3, #0
 800e95a:	bfb8      	it	lt
 800e95c:	425b      	neglt	r3, r3
 800e95e:	b29b      	uxth	r3, r3
 800e960:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e962:	4b12      	ldr	r3, [pc, #72]	@ (800e9ac <frame_processing+0x2370>)
 800e964:	fb83 2301 	smull	r2, r3, r3, r1
 800e968:	109a      	asrs	r2, r3, #2
 800e96a:	17cb      	asrs	r3, r1, #31
 800e96c:	1ad3      	subs	r3, r2, r3
 800e96e:	643b      	str	r3, [r7, #64]	@ 0x40
							        temp_setpoint_channel2 < 0 ? "-" : "", abs(temp_setpoint_channel2)/ 10, abs(temp_setpoint_channel2) % 10,
 800e970:	f9b7 3624 	ldrsh.w	r3, [r7, #1572]	@ 0x624
 800e974:	2b00      	cmp	r3, #0
 800e976:	bfb8      	it	lt
 800e978:	425b      	neglt	r3, r3
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e97e:	4b0b      	ldr	r3, [pc, #44]	@ (800e9ac <frame_processing+0x2370>)
 800e980:	fb83 2301 	smull	r2, r3, r3, r1
 800e984:	109a      	asrs	r2, r3, #2
 800e986:	17cb      	asrs	r3, r1, #31
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	461a      	mov	r2, r3
 800e98c:	4613      	mov	r3, r2
 800e98e:	009b      	lsls	r3, r3, #2
 800e990:	4413      	add	r3, r2
 800e992:	005b      	lsls	r3, r3, #1
 800e994:	1acb      	subs	r3, r1, r3
 800e996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e998:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	da09      	bge.n	800e9b4 <frame_processing+0x2378>
 800e9a0:	4b03      	ldr	r3, [pc, #12]	@ (800e9b0 <frame_processing+0x2374>)
 800e9a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e9a6:	e008      	b.n	800e9ba <frame_processing+0x237e>
 800e9a8:	08015878 	.word	0x08015878
 800e9ac:	66666667 	.word	0x66666667
 800e9b0:	08015874 	.word	0x08015874
 800e9b4:	4b9a      	ldr	r3, [pc, #616]	@ (800ec20 <frame_processing+0x25e4>)
 800e9b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800e9ba:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	bfb8      	it	lt
 800e9c2:	425b      	neglt	r3, r3
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e9c8:	4b96      	ldr	r3, [pc, #600]	@ (800ec24 <frame_processing+0x25e8>)
 800e9ca:	fb83 2301 	smull	r2, r3, r3, r1
 800e9ce:	109a      	asrs	r2, r3, #2
 800e9d0:	17cb      	asrs	r3, r1, #31
 800e9d2:	1ad3      	subs	r3, r2, r3
 800e9d4:	63bb      	str	r3, [r7, #56]	@ 0x38
							        temp_setpoint_channel3 < 0 ? "-" : "", abs(temp_setpoint_channel3)/ 10, abs(temp_setpoint_channel3) % 10,
 800e9d6:	f9b7 3622 	ldrsh.w	r3, [r7, #1570]	@ 0x622
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	bfb8      	it	lt
 800e9de:	425b      	neglt	r3, r3
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	4619      	mov	r1, r3
							sprintf(buffer_0x13, "IOU_Res: CMDcode 0x13 [NTC Temp: Ch0=%s%d.%d, Ch1=%s%d.%d, Ch2=%s%d.%d, Ch3=%s%d.%d\n"
 800e9e4:	4b8f      	ldr	r3, [pc, #572]	@ (800ec24 <frame_processing+0x25e8>)
 800e9e6:	fb83 2301 	smull	r2, r3, r3, r1
 800e9ea:	109a      	asrs	r2, r3, #2
 800e9ec:	17cb      	asrs	r3, r1, #31
 800e9ee:	1ad3      	subs	r3, r2, r3
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	005b      	lsls	r3, r3, #1
 800e9fa:	1aca      	subs	r2, r1, r3
 800e9fc:	637a      	str	r2, [r7, #52]	@ 0x34
 800e9fe:	f8b7 2620 	ldrh.w	r2, [r7, #1568]	@ 0x620
 800ea02:	4b89      	ldr	r3, [pc, #548]	@ (800ec28 <frame_processing+0x25ec>)
 800ea04:	fba3 2302 	umull	r2, r3, r3, r2
 800ea08:	095b      	lsrs	r3, r3, #5
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea0e:	f8b7 1620 	ldrh.w	r1, [r7, #1568]	@ 0x620
 800ea12:	4b85      	ldr	r3, [pc, #532]	@ (800ec28 <frame_processing+0x25ec>)
 800ea14:	fba3 2301 	umull	r2, r3, r3, r1
 800ea18:	095a      	lsrs	r2, r3, #5
 800ea1a:	2364      	movs	r3, #100	@ 0x64
 800ea1c:	fb02 f303 	mul.w	r3, r2, r3
 800ea20:	1acb      	subs	r3, r1, r3
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea26:	f8b7 261e 	ldrh.w	r2, [r7, #1566]	@ 0x61e
 800ea2a:	4b7f      	ldr	r3, [pc, #508]	@ (800ec28 <frame_processing+0x25ec>)
 800ea2c:	fba3 2302 	umull	r2, r3, r3, r2
 800ea30:	095b      	lsrs	r3, r3, #5
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea36:	f8b7 161e 	ldrh.w	r1, [r7, #1566]	@ 0x61e
 800ea3a:	4b7b      	ldr	r3, [pc, #492]	@ (800ec28 <frame_processing+0x25ec>)
 800ea3c:	fba3 2301 	umull	r2, r3, r3, r1
 800ea40:	095a      	lsrs	r2, r3, #5
 800ea42:	2364      	movs	r3, #100	@ 0x64
 800ea44:	fb02 f303 	mul.w	r3, r2, r3
 800ea48:	1acb      	subs	r3, r1, r3
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea4e:	f8b7 261c 	ldrh.w	r2, [r7, #1564]	@ 0x61c
 800ea52:	4b75      	ldr	r3, [pc, #468]	@ (800ec28 <frame_processing+0x25ec>)
 800ea54:	fba3 2302 	umull	r2, r3, r3, r2
 800ea58:	095b      	lsrs	r3, r3, #5
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	623b      	str	r3, [r7, #32]
 800ea5e:	f8b7 161c 	ldrh.w	r1, [r7, #1564]	@ 0x61c
 800ea62:	4b71      	ldr	r3, [pc, #452]	@ (800ec28 <frame_processing+0x25ec>)
 800ea64:	fba3 2301 	umull	r2, r3, r3, r1
 800ea68:	095a      	lsrs	r2, r3, #5
 800ea6a:	2364      	movs	r3, #100	@ 0x64
 800ea6c:	fb02 f303 	mul.w	r3, r2, r3
 800ea70:	1acb      	subs	r3, r1, r3
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	61fb      	str	r3, [r7, #28]
 800ea76:	f8b7 261a 	ldrh.w	r2, [r7, #1562]	@ 0x61a
 800ea7a:	4b6b      	ldr	r3, [pc, #428]	@ (800ec28 <frame_processing+0x25ec>)
 800ea7c:	fba3 2302 	umull	r2, r3, r3, r2
 800ea80:	095b      	lsrs	r3, r3, #5
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	61bb      	str	r3, [r7, #24]
 800ea86:	f8b7 161a 	ldrh.w	r1, [r7, #1562]	@ 0x61a
 800ea8a:	4b67      	ldr	r3, [pc, #412]	@ (800ec28 <frame_processing+0x25ec>)
 800ea8c:	fba3 2301 	umull	r2, r3, r3, r1
 800ea90:	095a      	lsrs	r2, r3, #5
 800ea92:	2364      	movs	r3, #100	@ 0x64
 800ea94:	fb02 f303 	mul.w	r3, r2, r3
 800ea98:	1acb      	subs	r3, r1, r3
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	617b      	str	r3, [r7, #20]
 800ea9e:	f897 0619 	ldrb.w	r0, [r7, #1561]	@ 0x619
 800eaa2:	4601      	mov	r1, r0
 800eaa4:	6139      	str	r1, [r7, #16]
 800eaa6:	f897 0618 	ldrb.w	r0, [r7, #1560]	@ 0x618
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	f897 4617 	ldrb.w	r4, [r7, #1559]	@ 0x617
 800eab0:	60bc      	str	r4, [r7, #8]
 800eab2:	f897 5616 	ldrb.w	r5, [r7, #1558]	@ 0x616
 800eab6:	607d      	str	r5, [r7, #4]
 800eab8:	f897 6615 	ldrb.w	r6, [r7, #1557]	@ 0x615
 800eabc:	603e      	str	r6, [r7, #0]
 800eabe:	f9b7 6612 	ldrsh.w	r6, [r7, #1554]	@ 0x612
 800eac2:	f9b7 5610 	ldrsh.w	r5, [r7, #1552]	@ 0x610
 800eac6:	f9b7 460e 	ldrsh.w	r4, [r7, #1550]	@ 0x60e
 800eaca:	f9b7 060c 	ldrsh.w	r0, [r7, #1548]	@ 0x60c
 800eace:	f9b7 160a 	ldrsh.w	r1, [r7, #1546]	@ 0x60a
 800ead2:	f9b7 2608 	ldrsh.w	r2, [r7, #1544]	@ 0x608
 800ead6:	f9b7 3606 	ldrsh.w	r3, [r7, #1542]	@ 0x606
 800eada:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 800eade:	9332      	str	r3, [sp, #200]	@ 0xc8
 800eae0:	9231      	str	r2, [sp, #196]	@ 0xc4
 800eae2:	9130      	str	r1, [sp, #192]	@ 0xc0
 800eae4:	902f      	str	r0, [sp, #188]	@ 0xbc
 800eae6:	942e      	str	r4, [sp, #184]	@ 0xb8
 800eae8:	952d      	str	r5, [sp, #180]	@ 0xb4
 800eaea:	962c      	str	r6, [sp, #176]	@ 0xb0
 800eaec:	683e      	ldr	r6, [r7, #0]
 800eaee:	962b      	str	r6, [sp, #172]	@ 0xac
 800eaf0:	687d      	ldr	r5, [r7, #4]
 800eaf2:	952a      	str	r5, [sp, #168]	@ 0xa8
 800eaf4:	68bc      	ldr	r4, [r7, #8]
 800eaf6:	9429      	str	r4, [sp, #164]	@ 0xa4
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	9028      	str	r0, [sp, #160]	@ 0xa0
 800eafc:	6939      	ldr	r1, [r7, #16]
 800eafe:	9127      	str	r1, [sp, #156]	@ 0x9c
 800eb00:	6979      	ldr	r1, [r7, #20]
 800eb02:	9126      	str	r1, [sp, #152]	@ 0x98
 800eb04:	69b9      	ldr	r1, [r7, #24]
 800eb06:	9125      	str	r1, [sp, #148]	@ 0x94
 800eb08:	69f9      	ldr	r1, [r7, #28]
 800eb0a:	9124      	str	r1, [sp, #144]	@ 0x90
 800eb0c:	6a39      	ldr	r1, [r7, #32]
 800eb0e:	9123      	str	r1, [sp, #140]	@ 0x8c
 800eb10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb12:	9122      	str	r1, [sp, #136]	@ 0x88
 800eb14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb16:	9121      	str	r1, [sp, #132]	@ 0x84
 800eb18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb1a:	9120      	str	r1, [sp, #128]	@ 0x80
 800eb1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eb1e:	911f      	str	r1, [sp, #124]	@ 0x7c
 800eb20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb22:	921e      	str	r2, [sp, #120]	@ 0x78
 800eb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb26:	931d      	str	r3, [sp, #116]	@ 0x74
 800eb28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eb2c:	931c      	str	r3, [sp, #112]	@ 0x70
 800eb2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb30:	931b      	str	r3, [sp, #108]	@ 0x6c
 800eb32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb34:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eb3a:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb3e:	9318      	str	r3, [sp, #96]	@ 0x60
 800eb40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb42:	9317      	str	r3, [sp, #92]	@ 0x5c
 800eb44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800eb48:	9316      	str	r3, [sp, #88]	@ 0x58
 800eb4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb4c:	9315      	str	r3, [sp, #84]	@ 0x54
 800eb4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb50:	9314      	str	r3, [sp, #80]	@ 0x50
 800eb52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800eb56:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb5a:	9312      	str	r3, [sp, #72]	@ 0x48
 800eb5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb5e:	9311      	str	r3, [sp, #68]	@ 0x44
 800eb60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eb64:	9310      	str	r3, [sp, #64]	@ 0x40
 800eb66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb68:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eb6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb6c:	930e      	str	r3, [sp, #56]	@ 0x38
 800eb6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800eb72:	930d      	str	r3, [sp, #52]	@ 0x34
 800eb74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb76:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eb80:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb84:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eb88:	9308      	str	r3, [sp, #32]
 800eb8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eb8e:	9307      	str	r3, [sp, #28]
 800eb90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb92:	9306      	str	r3, [sp, #24]
 800eb94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eb96:	9305      	str	r3, [sp, #20]
 800eb98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb9c:	9304      	str	r3, [sp, #16]
 800eb9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eba0:	9303      	str	r3, [sp, #12]
 800eba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eba6:	9302      	str	r3, [sp, #8]
 800eba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebac:	9301      	str	r3, [sp, #4]
 800ebae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	4673      	mov	r3, lr
 800ebb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ebba:	491c      	ldr	r1, [pc, #112]	@ (800ec2c <frame_processing+0x25f0>)
 800ebbc:	4660      	mov	r0, ip
 800ebbe:	f000 fff9 	bl	800fbb4 <siprintf>
							if (uart_choose_uart5) {
 800ebc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ec30 <frame_processing+0x25f4>)
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d005      	beq.n	800ebd8 <frame_processing+0x259c>
								Uart_sendstring(UART5, buffer_0x13);
 800ebcc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	4818      	ldr	r0, [pc, #96]	@ (800ec34 <frame_processing+0x25f8>)
 800ebd4:	f7f3 fa02 	bl	8001fdc <Uart_sendstring>
		                    if (uart_choose_usart2) {
 800ebd8:	4b17      	ldr	r3, [pc, #92]	@ (800ec38 <frame_processing+0x25fc>)
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d005      	beq.n	800ebee <frame_processing+0x25b2>
		                    	Uart_sendstring(USART2, buffer_0x13);
 800ebe2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	4814      	ldr	r0, [pc, #80]	@ (800ec3c <frame_processing+0x2600>)
 800ebea:	f7f3 f9f7 	bl	8001fdc <Uart_sendstring>
							Uart_sendstring(USART6, buffer_0x13);
 800ebee:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	4812      	ldr	r0, [pc, #72]	@ (800ec40 <frame_processing+0x2604>)
 800ebf6:	f7f3 f9f1 	bl	8001fdc <Uart_sendstring>
						break;
 800ebfa:	e002      	b.n	800ec02 <frame_processing+0x25c6>
							clear_send_flag();
 800ebfc:	f7f3 fb30 	bl	8002260 <clear_send_flag>
							break;
 800ec00:	bf00      	nop
					clear_send_flag();
 800ec02:	f7f3 fb2d 	bl	8002260 <clear_send_flag>
					return FSP_PKT_INVALID;
 800ec06:	2302      	movs	r3, #2
 800ec08:	e004      	b.n	800ec14 <frame_processing+0x25d8>
		default:
			clear_send_flag();
 800ec0a:	f7f3 fb29 	bl	8002260 <clear_send_flag>
			return FSP_PKT_WRONG_ADR;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	e000      	b.n	800ec14 <frame_processing+0x25d8>
			break;

	}
	return 0;
 800ec12:	2300      	movs	r3, #0

}
 800ec14:	4618      	mov	r0, r3
 800ec16:	f507 67c7 	add.w	r7, r7, #1592	@ 0x638
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec20:	08015878 	.word	0x08015878
 800ec24:	66666667 	.word	0x66666667
 800ec28:	51eb851f 	.word	0x51eb851f
 800ec2c:	08015f50 	.word	0x08015f50
 800ec30:	200058b8 	.word	0x200058b8
 800ec34:	40005000 	.word	0x40005000
 800ec38:	200058b9 	.word	0x200058b9
 800ec3c:	40004400 	.word	0x40004400
 800ec40:	40011400 	.word	0x40011400

0800ec44 <atoi>:
 800ec44:	220a      	movs	r2, #10
 800ec46:	2100      	movs	r1, #0
 800ec48:	f000 b87c 	b.w	800ed44 <strtol>

0800ec4c <_strtol_l.constprop.0>:
 800ec4c:	2b24      	cmp	r3, #36	@ 0x24
 800ec4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec52:	4686      	mov	lr, r0
 800ec54:	4690      	mov	r8, r2
 800ec56:	d801      	bhi.n	800ec5c <_strtol_l.constprop.0+0x10>
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d106      	bne.n	800ec6a <_strtol_l.constprop.0+0x1e>
 800ec5c:	f001 f860 	bl	800fd20 <__errno>
 800ec60:	2316      	movs	r3, #22
 800ec62:	6003      	str	r3, [r0, #0]
 800ec64:	2000      	movs	r0, #0
 800ec66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec6a:	4834      	ldr	r0, [pc, #208]	@ (800ed3c <_strtol_l.constprop.0+0xf0>)
 800ec6c:	460d      	mov	r5, r1
 800ec6e:	462a      	mov	r2, r5
 800ec70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec74:	5d06      	ldrb	r6, [r0, r4]
 800ec76:	f016 0608 	ands.w	r6, r6, #8
 800ec7a:	d1f8      	bne.n	800ec6e <_strtol_l.constprop.0+0x22>
 800ec7c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ec7e:	d12d      	bne.n	800ecdc <_strtol_l.constprop.0+0x90>
 800ec80:	782c      	ldrb	r4, [r5, #0]
 800ec82:	2601      	movs	r6, #1
 800ec84:	1c95      	adds	r5, r2, #2
 800ec86:	f033 0210 	bics.w	r2, r3, #16
 800ec8a:	d109      	bne.n	800eca0 <_strtol_l.constprop.0+0x54>
 800ec8c:	2c30      	cmp	r4, #48	@ 0x30
 800ec8e:	d12a      	bne.n	800ece6 <_strtol_l.constprop.0+0x9a>
 800ec90:	782a      	ldrb	r2, [r5, #0]
 800ec92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec96:	2a58      	cmp	r2, #88	@ 0x58
 800ec98:	d125      	bne.n	800ece6 <_strtol_l.constprop.0+0x9a>
 800ec9a:	786c      	ldrb	r4, [r5, #1]
 800ec9c:	2310      	movs	r3, #16
 800ec9e:	3502      	adds	r5, #2
 800eca0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800eca4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eca8:	2200      	movs	r2, #0
 800ecaa:	fbbc f9f3 	udiv	r9, ip, r3
 800ecae:	4610      	mov	r0, r2
 800ecb0:	fb03 ca19 	mls	sl, r3, r9, ip
 800ecb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ecb8:	2f09      	cmp	r7, #9
 800ecba:	d81b      	bhi.n	800ecf4 <_strtol_l.constprop.0+0xa8>
 800ecbc:	463c      	mov	r4, r7
 800ecbe:	42a3      	cmp	r3, r4
 800ecc0:	dd27      	ble.n	800ed12 <_strtol_l.constprop.0+0xc6>
 800ecc2:	1c57      	adds	r7, r2, #1
 800ecc4:	d007      	beq.n	800ecd6 <_strtol_l.constprop.0+0x8a>
 800ecc6:	4581      	cmp	r9, r0
 800ecc8:	d320      	bcc.n	800ed0c <_strtol_l.constprop.0+0xc0>
 800ecca:	d101      	bne.n	800ecd0 <_strtol_l.constprop.0+0x84>
 800eccc:	45a2      	cmp	sl, r4
 800ecce:	db1d      	blt.n	800ed0c <_strtol_l.constprop.0+0xc0>
 800ecd0:	fb00 4003 	mla	r0, r0, r3, r4
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecda:	e7eb      	b.n	800ecb4 <_strtol_l.constprop.0+0x68>
 800ecdc:	2c2b      	cmp	r4, #43	@ 0x2b
 800ecde:	bf04      	itt	eq
 800ece0:	782c      	ldrbeq	r4, [r5, #0]
 800ece2:	1c95      	addeq	r5, r2, #2
 800ece4:	e7cf      	b.n	800ec86 <_strtol_l.constprop.0+0x3a>
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d1da      	bne.n	800eca0 <_strtol_l.constprop.0+0x54>
 800ecea:	2c30      	cmp	r4, #48	@ 0x30
 800ecec:	bf0c      	ite	eq
 800ecee:	2308      	moveq	r3, #8
 800ecf0:	230a      	movne	r3, #10
 800ecf2:	e7d5      	b.n	800eca0 <_strtol_l.constprop.0+0x54>
 800ecf4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ecf8:	2f19      	cmp	r7, #25
 800ecfa:	d801      	bhi.n	800ed00 <_strtol_l.constprop.0+0xb4>
 800ecfc:	3c37      	subs	r4, #55	@ 0x37
 800ecfe:	e7de      	b.n	800ecbe <_strtol_l.constprop.0+0x72>
 800ed00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ed04:	2f19      	cmp	r7, #25
 800ed06:	d804      	bhi.n	800ed12 <_strtol_l.constprop.0+0xc6>
 800ed08:	3c57      	subs	r4, #87	@ 0x57
 800ed0a:	e7d8      	b.n	800ecbe <_strtol_l.constprop.0+0x72>
 800ed0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed10:	e7e1      	b.n	800ecd6 <_strtol_l.constprop.0+0x8a>
 800ed12:	1c53      	adds	r3, r2, #1
 800ed14:	d108      	bne.n	800ed28 <_strtol_l.constprop.0+0xdc>
 800ed16:	2322      	movs	r3, #34	@ 0x22
 800ed18:	f8ce 3000 	str.w	r3, [lr]
 800ed1c:	4660      	mov	r0, ip
 800ed1e:	f1b8 0f00 	cmp.w	r8, #0
 800ed22:	d0a0      	beq.n	800ec66 <_strtol_l.constprop.0+0x1a>
 800ed24:	1e69      	subs	r1, r5, #1
 800ed26:	e006      	b.n	800ed36 <_strtol_l.constprop.0+0xea>
 800ed28:	b106      	cbz	r6, 800ed2c <_strtol_l.constprop.0+0xe0>
 800ed2a:	4240      	negs	r0, r0
 800ed2c:	f1b8 0f00 	cmp.w	r8, #0
 800ed30:	d099      	beq.n	800ec66 <_strtol_l.constprop.0+0x1a>
 800ed32:	2a00      	cmp	r2, #0
 800ed34:	d1f6      	bne.n	800ed24 <_strtol_l.constprop.0+0xd8>
 800ed36:	f8c8 1000 	str.w	r1, [r8]
 800ed3a:	e794      	b.n	800ec66 <_strtol_l.constprop.0+0x1a>
 800ed3c:	080160ed 	.word	0x080160ed

0800ed40 <_strtol_r>:
 800ed40:	f7ff bf84 	b.w	800ec4c <_strtol_l.constprop.0>

0800ed44 <strtol>:
 800ed44:	4613      	mov	r3, r2
 800ed46:	460a      	mov	r2, r1
 800ed48:	4601      	mov	r1, r0
 800ed4a:	4802      	ldr	r0, [pc, #8]	@ (800ed54 <strtol+0x10>)
 800ed4c:	6800      	ldr	r0, [r0, #0]
 800ed4e:	f7ff bf7d 	b.w	800ec4c <_strtol_l.constprop.0>
 800ed52:	bf00      	nop
 800ed54:	20000460 	.word	0x20000460

0800ed58 <__cvt>:
 800ed58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed5c:	ec57 6b10 	vmov	r6, r7, d0
 800ed60:	2f00      	cmp	r7, #0
 800ed62:	460c      	mov	r4, r1
 800ed64:	4619      	mov	r1, r3
 800ed66:	463b      	mov	r3, r7
 800ed68:	bfbb      	ittet	lt
 800ed6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ed6e:	461f      	movlt	r7, r3
 800ed70:	2300      	movge	r3, #0
 800ed72:	232d      	movlt	r3, #45	@ 0x2d
 800ed74:	700b      	strb	r3, [r1, #0]
 800ed76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ed7c:	4691      	mov	r9, r2
 800ed7e:	f023 0820 	bic.w	r8, r3, #32
 800ed82:	bfbc      	itt	lt
 800ed84:	4632      	movlt	r2, r6
 800ed86:	4616      	movlt	r6, r2
 800ed88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ed8c:	d005      	beq.n	800ed9a <__cvt+0x42>
 800ed8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ed92:	d100      	bne.n	800ed96 <__cvt+0x3e>
 800ed94:	3401      	adds	r4, #1
 800ed96:	2102      	movs	r1, #2
 800ed98:	e000      	b.n	800ed9c <__cvt+0x44>
 800ed9a:	2103      	movs	r1, #3
 800ed9c:	ab03      	add	r3, sp, #12
 800ed9e:	9301      	str	r3, [sp, #4]
 800eda0:	ab02      	add	r3, sp, #8
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	ec47 6b10 	vmov	d0, r6, r7
 800eda8:	4653      	mov	r3, sl
 800edaa:	4622      	mov	r2, r4
 800edac:	f001 f884 	bl	800feb8 <_dtoa_r>
 800edb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800edb4:	4605      	mov	r5, r0
 800edb6:	d119      	bne.n	800edec <__cvt+0x94>
 800edb8:	f019 0f01 	tst.w	r9, #1
 800edbc:	d00e      	beq.n	800eddc <__cvt+0x84>
 800edbe:	eb00 0904 	add.w	r9, r0, r4
 800edc2:	2200      	movs	r2, #0
 800edc4:	2300      	movs	r3, #0
 800edc6:	4630      	mov	r0, r6
 800edc8:	4639      	mov	r1, r7
 800edca:	f7f1 fe8d 	bl	8000ae8 <__aeabi_dcmpeq>
 800edce:	b108      	cbz	r0, 800edd4 <__cvt+0x7c>
 800edd0:	f8cd 900c 	str.w	r9, [sp, #12]
 800edd4:	2230      	movs	r2, #48	@ 0x30
 800edd6:	9b03      	ldr	r3, [sp, #12]
 800edd8:	454b      	cmp	r3, r9
 800edda:	d31e      	bcc.n	800ee1a <__cvt+0xc2>
 800eddc:	9b03      	ldr	r3, [sp, #12]
 800edde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ede0:	1b5b      	subs	r3, r3, r5
 800ede2:	4628      	mov	r0, r5
 800ede4:	6013      	str	r3, [r2, #0]
 800ede6:	b004      	add	sp, #16
 800ede8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800edf0:	eb00 0904 	add.w	r9, r0, r4
 800edf4:	d1e5      	bne.n	800edc2 <__cvt+0x6a>
 800edf6:	7803      	ldrb	r3, [r0, #0]
 800edf8:	2b30      	cmp	r3, #48	@ 0x30
 800edfa:	d10a      	bne.n	800ee12 <__cvt+0xba>
 800edfc:	2200      	movs	r2, #0
 800edfe:	2300      	movs	r3, #0
 800ee00:	4630      	mov	r0, r6
 800ee02:	4639      	mov	r1, r7
 800ee04:	f7f1 fe70 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee08:	b918      	cbnz	r0, 800ee12 <__cvt+0xba>
 800ee0a:	f1c4 0401 	rsb	r4, r4, #1
 800ee0e:	f8ca 4000 	str.w	r4, [sl]
 800ee12:	f8da 3000 	ldr.w	r3, [sl]
 800ee16:	4499      	add	r9, r3
 800ee18:	e7d3      	b.n	800edc2 <__cvt+0x6a>
 800ee1a:	1c59      	adds	r1, r3, #1
 800ee1c:	9103      	str	r1, [sp, #12]
 800ee1e:	701a      	strb	r2, [r3, #0]
 800ee20:	e7d9      	b.n	800edd6 <__cvt+0x7e>

0800ee22 <__exponent>:
 800ee22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee24:	2900      	cmp	r1, #0
 800ee26:	bfba      	itte	lt
 800ee28:	4249      	neglt	r1, r1
 800ee2a:	232d      	movlt	r3, #45	@ 0x2d
 800ee2c:	232b      	movge	r3, #43	@ 0x2b
 800ee2e:	2909      	cmp	r1, #9
 800ee30:	7002      	strb	r2, [r0, #0]
 800ee32:	7043      	strb	r3, [r0, #1]
 800ee34:	dd29      	ble.n	800ee8a <__exponent+0x68>
 800ee36:	f10d 0307 	add.w	r3, sp, #7
 800ee3a:	461d      	mov	r5, r3
 800ee3c:	270a      	movs	r7, #10
 800ee3e:	461a      	mov	r2, r3
 800ee40:	fbb1 f6f7 	udiv	r6, r1, r7
 800ee44:	fb07 1416 	mls	r4, r7, r6, r1
 800ee48:	3430      	adds	r4, #48	@ 0x30
 800ee4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ee4e:	460c      	mov	r4, r1
 800ee50:	2c63      	cmp	r4, #99	@ 0x63
 800ee52:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee56:	4631      	mov	r1, r6
 800ee58:	dcf1      	bgt.n	800ee3e <__exponent+0x1c>
 800ee5a:	3130      	adds	r1, #48	@ 0x30
 800ee5c:	1e94      	subs	r4, r2, #2
 800ee5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ee62:	1c41      	adds	r1, r0, #1
 800ee64:	4623      	mov	r3, r4
 800ee66:	42ab      	cmp	r3, r5
 800ee68:	d30a      	bcc.n	800ee80 <__exponent+0x5e>
 800ee6a:	f10d 0309 	add.w	r3, sp, #9
 800ee6e:	1a9b      	subs	r3, r3, r2
 800ee70:	42ac      	cmp	r4, r5
 800ee72:	bf88      	it	hi
 800ee74:	2300      	movhi	r3, #0
 800ee76:	3302      	adds	r3, #2
 800ee78:	4403      	add	r3, r0
 800ee7a:	1a18      	subs	r0, r3, r0
 800ee7c:	b003      	add	sp, #12
 800ee7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee80:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ee84:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ee88:	e7ed      	b.n	800ee66 <__exponent+0x44>
 800ee8a:	2330      	movs	r3, #48	@ 0x30
 800ee8c:	3130      	adds	r1, #48	@ 0x30
 800ee8e:	7083      	strb	r3, [r0, #2]
 800ee90:	70c1      	strb	r1, [r0, #3]
 800ee92:	1d03      	adds	r3, r0, #4
 800ee94:	e7f1      	b.n	800ee7a <__exponent+0x58>
	...

0800ee98 <_printf_float>:
 800ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9c:	b08d      	sub	sp, #52	@ 0x34
 800ee9e:	460c      	mov	r4, r1
 800eea0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800eea4:	4616      	mov	r6, r2
 800eea6:	461f      	mov	r7, r3
 800eea8:	4605      	mov	r5, r0
 800eeaa:	f000 feef 	bl	800fc8c <_localeconv_r>
 800eeae:	6803      	ldr	r3, [r0, #0]
 800eeb0:	9304      	str	r3, [sp, #16]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7f1 f9ec 	bl	8000290 <strlen>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	930a      	str	r3, [sp, #40]	@ 0x28
 800eebc:	f8d8 3000 	ldr.w	r3, [r8]
 800eec0:	9005      	str	r0, [sp, #20]
 800eec2:	3307      	adds	r3, #7
 800eec4:	f023 0307 	bic.w	r3, r3, #7
 800eec8:	f103 0208 	add.w	r2, r3, #8
 800eecc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800eed0:	f8d4 b000 	ldr.w	fp, [r4]
 800eed4:	f8c8 2000 	str.w	r2, [r8]
 800eed8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eedc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800eee0:	9307      	str	r3, [sp, #28]
 800eee2:	f8cd 8018 	str.w	r8, [sp, #24]
 800eee6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800eeea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeee:	4b9c      	ldr	r3, [pc, #624]	@ (800f160 <_printf_float+0x2c8>)
 800eef0:	f04f 32ff 	mov.w	r2, #4294967295
 800eef4:	f7f1 fe2a 	bl	8000b4c <__aeabi_dcmpun>
 800eef8:	bb70      	cbnz	r0, 800ef58 <_printf_float+0xc0>
 800eefa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eefe:	4b98      	ldr	r3, [pc, #608]	@ (800f160 <_printf_float+0x2c8>)
 800ef00:	f04f 32ff 	mov.w	r2, #4294967295
 800ef04:	f7f1 fe04 	bl	8000b10 <__aeabi_dcmple>
 800ef08:	bb30      	cbnz	r0, 800ef58 <_printf_float+0xc0>
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	4640      	mov	r0, r8
 800ef10:	4649      	mov	r1, r9
 800ef12:	f7f1 fdf3 	bl	8000afc <__aeabi_dcmplt>
 800ef16:	b110      	cbz	r0, 800ef1e <_printf_float+0x86>
 800ef18:	232d      	movs	r3, #45	@ 0x2d
 800ef1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef1e:	4a91      	ldr	r2, [pc, #580]	@ (800f164 <_printf_float+0x2cc>)
 800ef20:	4b91      	ldr	r3, [pc, #580]	@ (800f168 <_printf_float+0x2d0>)
 800ef22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ef26:	bf94      	ite	ls
 800ef28:	4690      	movls	r8, r2
 800ef2a:	4698      	movhi	r8, r3
 800ef2c:	2303      	movs	r3, #3
 800ef2e:	6123      	str	r3, [r4, #16]
 800ef30:	f02b 0304 	bic.w	r3, fp, #4
 800ef34:	6023      	str	r3, [r4, #0]
 800ef36:	f04f 0900 	mov.w	r9, #0
 800ef3a:	9700      	str	r7, [sp, #0]
 800ef3c:	4633      	mov	r3, r6
 800ef3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ef40:	4621      	mov	r1, r4
 800ef42:	4628      	mov	r0, r5
 800ef44:	f000 f9d2 	bl	800f2ec <_printf_common>
 800ef48:	3001      	adds	r0, #1
 800ef4a:	f040 808d 	bne.w	800f068 <_printf_float+0x1d0>
 800ef4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef52:	b00d      	add	sp, #52	@ 0x34
 800ef54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef58:	4642      	mov	r2, r8
 800ef5a:	464b      	mov	r3, r9
 800ef5c:	4640      	mov	r0, r8
 800ef5e:	4649      	mov	r1, r9
 800ef60:	f7f1 fdf4 	bl	8000b4c <__aeabi_dcmpun>
 800ef64:	b140      	cbz	r0, 800ef78 <_printf_float+0xe0>
 800ef66:	464b      	mov	r3, r9
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	bfbc      	itt	lt
 800ef6c:	232d      	movlt	r3, #45	@ 0x2d
 800ef6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ef72:	4a7e      	ldr	r2, [pc, #504]	@ (800f16c <_printf_float+0x2d4>)
 800ef74:	4b7e      	ldr	r3, [pc, #504]	@ (800f170 <_printf_float+0x2d8>)
 800ef76:	e7d4      	b.n	800ef22 <_printf_float+0x8a>
 800ef78:	6863      	ldr	r3, [r4, #4]
 800ef7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ef7e:	9206      	str	r2, [sp, #24]
 800ef80:	1c5a      	adds	r2, r3, #1
 800ef82:	d13b      	bne.n	800effc <_printf_float+0x164>
 800ef84:	2306      	movs	r3, #6
 800ef86:	6063      	str	r3, [r4, #4]
 800ef88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	6022      	str	r2, [r4, #0]
 800ef90:	9303      	str	r3, [sp, #12]
 800ef92:	ab0a      	add	r3, sp, #40	@ 0x28
 800ef94:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ef98:	ab09      	add	r3, sp, #36	@ 0x24
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	6861      	ldr	r1, [r4, #4]
 800ef9e:	ec49 8b10 	vmov	d0, r8, r9
 800efa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800efa6:	4628      	mov	r0, r5
 800efa8:	f7ff fed6 	bl	800ed58 <__cvt>
 800efac:	9b06      	ldr	r3, [sp, #24]
 800efae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efb0:	2b47      	cmp	r3, #71	@ 0x47
 800efb2:	4680      	mov	r8, r0
 800efb4:	d129      	bne.n	800f00a <_printf_float+0x172>
 800efb6:	1cc8      	adds	r0, r1, #3
 800efb8:	db02      	blt.n	800efc0 <_printf_float+0x128>
 800efba:	6863      	ldr	r3, [r4, #4]
 800efbc:	4299      	cmp	r1, r3
 800efbe:	dd41      	ble.n	800f044 <_printf_float+0x1ac>
 800efc0:	f1aa 0a02 	sub.w	sl, sl, #2
 800efc4:	fa5f fa8a 	uxtb.w	sl, sl
 800efc8:	3901      	subs	r1, #1
 800efca:	4652      	mov	r2, sl
 800efcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800efd0:	9109      	str	r1, [sp, #36]	@ 0x24
 800efd2:	f7ff ff26 	bl	800ee22 <__exponent>
 800efd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800efd8:	1813      	adds	r3, r2, r0
 800efda:	2a01      	cmp	r2, #1
 800efdc:	4681      	mov	r9, r0
 800efde:	6123      	str	r3, [r4, #16]
 800efe0:	dc02      	bgt.n	800efe8 <_printf_float+0x150>
 800efe2:	6822      	ldr	r2, [r4, #0]
 800efe4:	07d2      	lsls	r2, r2, #31
 800efe6:	d501      	bpl.n	800efec <_printf_float+0x154>
 800efe8:	3301      	adds	r3, #1
 800efea:	6123      	str	r3, [r4, #16]
 800efec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d0a2      	beq.n	800ef3a <_printf_float+0xa2>
 800eff4:	232d      	movs	r3, #45	@ 0x2d
 800eff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800effa:	e79e      	b.n	800ef3a <_printf_float+0xa2>
 800effc:	9a06      	ldr	r2, [sp, #24]
 800effe:	2a47      	cmp	r2, #71	@ 0x47
 800f000:	d1c2      	bne.n	800ef88 <_printf_float+0xf0>
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1c0      	bne.n	800ef88 <_printf_float+0xf0>
 800f006:	2301      	movs	r3, #1
 800f008:	e7bd      	b.n	800ef86 <_printf_float+0xee>
 800f00a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f00e:	d9db      	bls.n	800efc8 <_printf_float+0x130>
 800f010:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f014:	d118      	bne.n	800f048 <_printf_float+0x1b0>
 800f016:	2900      	cmp	r1, #0
 800f018:	6863      	ldr	r3, [r4, #4]
 800f01a:	dd0b      	ble.n	800f034 <_printf_float+0x19c>
 800f01c:	6121      	str	r1, [r4, #16]
 800f01e:	b913      	cbnz	r3, 800f026 <_printf_float+0x18e>
 800f020:	6822      	ldr	r2, [r4, #0]
 800f022:	07d0      	lsls	r0, r2, #31
 800f024:	d502      	bpl.n	800f02c <_printf_float+0x194>
 800f026:	3301      	adds	r3, #1
 800f028:	440b      	add	r3, r1
 800f02a:	6123      	str	r3, [r4, #16]
 800f02c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f02e:	f04f 0900 	mov.w	r9, #0
 800f032:	e7db      	b.n	800efec <_printf_float+0x154>
 800f034:	b913      	cbnz	r3, 800f03c <_printf_float+0x1a4>
 800f036:	6822      	ldr	r2, [r4, #0]
 800f038:	07d2      	lsls	r2, r2, #31
 800f03a:	d501      	bpl.n	800f040 <_printf_float+0x1a8>
 800f03c:	3302      	adds	r3, #2
 800f03e:	e7f4      	b.n	800f02a <_printf_float+0x192>
 800f040:	2301      	movs	r3, #1
 800f042:	e7f2      	b.n	800f02a <_printf_float+0x192>
 800f044:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f04a:	4299      	cmp	r1, r3
 800f04c:	db05      	blt.n	800f05a <_printf_float+0x1c2>
 800f04e:	6823      	ldr	r3, [r4, #0]
 800f050:	6121      	str	r1, [r4, #16]
 800f052:	07d8      	lsls	r0, r3, #31
 800f054:	d5ea      	bpl.n	800f02c <_printf_float+0x194>
 800f056:	1c4b      	adds	r3, r1, #1
 800f058:	e7e7      	b.n	800f02a <_printf_float+0x192>
 800f05a:	2900      	cmp	r1, #0
 800f05c:	bfd4      	ite	le
 800f05e:	f1c1 0202 	rsble	r2, r1, #2
 800f062:	2201      	movgt	r2, #1
 800f064:	4413      	add	r3, r2
 800f066:	e7e0      	b.n	800f02a <_printf_float+0x192>
 800f068:	6823      	ldr	r3, [r4, #0]
 800f06a:	055a      	lsls	r2, r3, #21
 800f06c:	d407      	bmi.n	800f07e <_printf_float+0x1e6>
 800f06e:	6923      	ldr	r3, [r4, #16]
 800f070:	4642      	mov	r2, r8
 800f072:	4631      	mov	r1, r6
 800f074:	4628      	mov	r0, r5
 800f076:	47b8      	blx	r7
 800f078:	3001      	adds	r0, #1
 800f07a:	d12b      	bne.n	800f0d4 <_printf_float+0x23c>
 800f07c:	e767      	b.n	800ef4e <_printf_float+0xb6>
 800f07e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f082:	f240 80dd 	bls.w	800f240 <_printf_float+0x3a8>
 800f086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f08a:	2200      	movs	r2, #0
 800f08c:	2300      	movs	r3, #0
 800f08e:	f7f1 fd2b 	bl	8000ae8 <__aeabi_dcmpeq>
 800f092:	2800      	cmp	r0, #0
 800f094:	d033      	beq.n	800f0fe <_printf_float+0x266>
 800f096:	4a37      	ldr	r2, [pc, #220]	@ (800f174 <_printf_float+0x2dc>)
 800f098:	2301      	movs	r3, #1
 800f09a:	4631      	mov	r1, r6
 800f09c:	4628      	mov	r0, r5
 800f09e:	47b8      	blx	r7
 800f0a0:	3001      	adds	r0, #1
 800f0a2:	f43f af54 	beq.w	800ef4e <_printf_float+0xb6>
 800f0a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f0aa:	4543      	cmp	r3, r8
 800f0ac:	db02      	blt.n	800f0b4 <_printf_float+0x21c>
 800f0ae:	6823      	ldr	r3, [r4, #0]
 800f0b0:	07d8      	lsls	r0, r3, #31
 800f0b2:	d50f      	bpl.n	800f0d4 <_printf_float+0x23c>
 800f0b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0b8:	4631      	mov	r1, r6
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	47b8      	blx	r7
 800f0be:	3001      	adds	r0, #1
 800f0c0:	f43f af45 	beq.w	800ef4e <_printf_float+0xb6>
 800f0c4:	f04f 0900 	mov.w	r9, #0
 800f0c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0cc:	f104 0a1a 	add.w	sl, r4, #26
 800f0d0:	45c8      	cmp	r8, r9
 800f0d2:	dc09      	bgt.n	800f0e8 <_printf_float+0x250>
 800f0d4:	6823      	ldr	r3, [r4, #0]
 800f0d6:	079b      	lsls	r3, r3, #30
 800f0d8:	f100 8103 	bmi.w	800f2e2 <_printf_float+0x44a>
 800f0dc:	68e0      	ldr	r0, [r4, #12]
 800f0de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0e0:	4298      	cmp	r0, r3
 800f0e2:	bfb8      	it	lt
 800f0e4:	4618      	movlt	r0, r3
 800f0e6:	e734      	b.n	800ef52 <_printf_float+0xba>
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	4652      	mov	r2, sl
 800f0ec:	4631      	mov	r1, r6
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	47b8      	blx	r7
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	f43f af2b 	beq.w	800ef4e <_printf_float+0xb6>
 800f0f8:	f109 0901 	add.w	r9, r9, #1
 800f0fc:	e7e8      	b.n	800f0d0 <_printf_float+0x238>
 800f0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f100:	2b00      	cmp	r3, #0
 800f102:	dc39      	bgt.n	800f178 <_printf_float+0x2e0>
 800f104:	4a1b      	ldr	r2, [pc, #108]	@ (800f174 <_printf_float+0x2dc>)
 800f106:	2301      	movs	r3, #1
 800f108:	4631      	mov	r1, r6
 800f10a:	4628      	mov	r0, r5
 800f10c:	47b8      	blx	r7
 800f10e:	3001      	adds	r0, #1
 800f110:	f43f af1d 	beq.w	800ef4e <_printf_float+0xb6>
 800f114:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f118:	ea59 0303 	orrs.w	r3, r9, r3
 800f11c:	d102      	bne.n	800f124 <_printf_float+0x28c>
 800f11e:	6823      	ldr	r3, [r4, #0]
 800f120:	07d9      	lsls	r1, r3, #31
 800f122:	d5d7      	bpl.n	800f0d4 <_printf_float+0x23c>
 800f124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f128:	4631      	mov	r1, r6
 800f12a:	4628      	mov	r0, r5
 800f12c:	47b8      	blx	r7
 800f12e:	3001      	adds	r0, #1
 800f130:	f43f af0d 	beq.w	800ef4e <_printf_float+0xb6>
 800f134:	f04f 0a00 	mov.w	sl, #0
 800f138:	f104 0b1a 	add.w	fp, r4, #26
 800f13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f13e:	425b      	negs	r3, r3
 800f140:	4553      	cmp	r3, sl
 800f142:	dc01      	bgt.n	800f148 <_printf_float+0x2b0>
 800f144:	464b      	mov	r3, r9
 800f146:	e793      	b.n	800f070 <_printf_float+0x1d8>
 800f148:	2301      	movs	r3, #1
 800f14a:	465a      	mov	r2, fp
 800f14c:	4631      	mov	r1, r6
 800f14e:	4628      	mov	r0, r5
 800f150:	47b8      	blx	r7
 800f152:	3001      	adds	r0, #1
 800f154:	f43f aefb 	beq.w	800ef4e <_printf_float+0xb6>
 800f158:	f10a 0a01 	add.w	sl, sl, #1
 800f15c:	e7ee      	b.n	800f13c <_printf_float+0x2a4>
 800f15e:	bf00      	nop
 800f160:	7fefffff 	.word	0x7fefffff
 800f164:	080161ed 	.word	0x080161ed
 800f168:	080161f1 	.word	0x080161f1
 800f16c:	080161f5 	.word	0x080161f5
 800f170:	080161f9 	.word	0x080161f9
 800f174:	080161fd 	.word	0x080161fd
 800f178:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f17a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f17e:	4553      	cmp	r3, sl
 800f180:	bfa8      	it	ge
 800f182:	4653      	movge	r3, sl
 800f184:	2b00      	cmp	r3, #0
 800f186:	4699      	mov	r9, r3
 800f188:	dc36      	bgt.n	800f1f8 <_printf_float+0x360>
 800f18a:	f04f 0b00 	mov.w	fp, #0
 800f18e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f192:	f104 021a 	add.w	r2, r4, #26
 800f196:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f198:	9306      	str	r3, [sp, #24]
 800f19a:	eba3 0309 	sub.w	r3, r3, r9
 800f19e:	455b      	cmp	r3, fp
 800f1a0:	dc31      	bgt.n	800f206 <_printf_float+0x36e>
 800f1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1a4:	459a      	cmp	sl, r3
 800f1a6:	dc3a      	bgt.n	800f21e <_printf_float+0x386>
 800f1a8:	6823      	ldr	r3, [r4, #0]
 800f1aa:	07da      	lsls	r2, r3, #31
 800f1ac:	d437      	bmi.n	800f21e <_printf_float+0x386>
 800f1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1b0:	ebaa 0903 	sub.w	r9, sl, r3
 800f1b4:	9b06      	ldr	r3, [sp, #24]
 800f1b6:	ebaa 0303 	sub.w	r3, sl, r3
 800f1ba:	4599      	cmp	r9, r3
 800f1bc:	bfa8      	it	ge
 800f1be:	4699      	movge	r9, r3
 800f1c0:	f1b9 0f00 	cmp.w	r9, #0
 800f1c4:	dc33      	bgt.n	800f22e <_printf_float+0x396>
 800f1c6:	f04f 0800 	mov.w	r8, #0
 800f1ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1ce:	f104 0b1a 	add.w	fp, r4, #26
 800f1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1d4:	ebaa 0303 	sub.w	r3, sl, r3
 800f1d8:	eba3 0309 	sub.w	r3, r3, r9
 800f1dc:	4543      	cmp	r3, r8
 800f1de:	f77f af79 	ble.w	800f0d4 <_printf_float+0x23c>
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	465a      	mov	r2, fp
 800f1e6:	4631      	mov	r1, r6
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	47b8      	blx	r7
 800f1ec:	3001      	adds	r0, #1
 800f1ee:	f43f aeae 	beq.w	800ef4e <_printf_float+0xb6>
 800f1f2:	f108 0801 	add.w	r8, r8, #1
 800f1f6:	e7ec      	b.n	800f1d2 <_printf_float+0x33a>
 800f1f8:	4642      	mov	r2, r8
 800f1fa:	4631      	mov	r1, r6
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	47b8      	blx	r7
 800f200:	3001      	adds	r0, #1
 800f202:	d1c2      	bne.n	800f18a <_printf_float+0x2f2>
 800f204:	e6a3      	b.n	800ef4e <_printf_float+0xb6>
 800f206:	2301      	movs	r3, #1
 800f208:	4631      	mov	r1, r6
 800f20a:	4628      	mov	r0, r5
 800f20c:	9206      	str	r2, [sp, #24]
 800f20e:	47b8      	blx	r7
 800f210:	3001      	adds	r0, #1
 800f212:	f43f ae9c 	beq.w	800ef4e <_printf_float+0xb6>
 800f216:	9a06      	ldr	r2, [sp, #24]
 800f218:	f10b 0b01 	add.w	fp, fp, #1
 800f21c:	e7bb      	b.n	800f196 <_printf_float+0x2fe>
 800f21e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f222:	4631      	mov	r1, r6
 800f224:	4628      	mov	r0, r5
 800f226:	47b8      	blx	r7
 800f228:	3001      	adds	r0, #1
 800f22a:	d1c0      	bne.n	800f1ae <_printf_float+0x316>
 800f22c:	e68f      	b.n	800ef4e <_printf_float+0xb6>
 800f22e:	9a06      	ldr	r2, [sp, #24]
 800f230:	464b      	mov	r3, r9
 800f232:	4442      	add	r2, r8
 800f234:	4631      	mov	r1, r6
 800f236:	4628      	mov	r0, r5
 800f238:	47b8      	blx	r7
 800f23a:	3001      	adds	r0, #1
 800f23c:	d1c3      	bne.n	800f1c6 <_printf_float+0x32e>
 800f23e:	e686      	b.n	800ef4e <_printf_float+0xb6>
 800f240:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f244:	f1ba 0f01 	cmp.w	sl, #1
 800f248:	dc01      	bgt.n	800f24e <_printf_float+0x3b6>
 800f24a:	07db      	lsls	r3, r3, #31
 800f24c:	d536      	bpl.n	800f2bc <_printf_float+0x424>
 800f24e:	2301      	movs	r3, #1
 800f250:	4642      	mov	r2, r8
 800f252:	4631      	mov	r1, r6
 800f254:	4628      	mov	r0, r5
 800f256:	47b8      	blx	r7
 800f258:	3001      	adds	r0, #1
 800f25a:	f43f ae78 	beq.w	800ef4e <_printf_float+0xb6>
 800f25e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f262:	4631      	mov	r1, r6
 800f264:	4628      	mov	r0, r5
 800f266:	47b8      	blx	r7
 800f268:	3001      	adds	r0, #1
 800f26a:	f43f ae70 	beq.w	800ef4e <_printf_float+0xb6>
 800f26e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f272:	2200      	movs	r2, #0
 800f274:	2300      	movs	r3, #0
 800f276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f27a:	f7f1 fc35 	bl	8000ae8 <__aeabi_dcmpeq>
 800f27e:	b9c0      	cbnz	r0, 800f2b2 <_printf_float+0x41a>
 800f280:	4653      	mov	r3, sl
 800f282:	f108 0201 	add.w	r2, r8, #1
 800f286:	4631      	mov	r1, r6
 800f288:	4628      	mov	r0, r5
 800f28a:	47b8      	blx	r7
 800f28c:	3001      	adds	r0, #1
 800f28e:	d10c      	bne.n	800f2aa <_printf_float+0x412>
 800f290:	e65d      	b.n	800ef4e <_printf_float+0xb6>
 800f292:	2301      	movs	r3, #1
 800f294:	465a      	mov	r2, fp
 800f296:	4631      	mov	r1, r6
 800f298:	4628      	mov	r0, r5
 800f29a:	47b8      	blx	r7
 800f29c:	3001      	adds	r0, #1
 800f29e:	f43f ae56 	beq.w	800ef4e <_printf_float+0xb6>
 800f2a2:	f108 0801 	add.w	r8, r8, #1
 800f2a6:	45d0      	cmp	r8, sl
 800f2a8:	dbf3      	blt.n	800f292 <_printf_float+0x3fa>
 800f2aa:	464b      	mov	r3, r9
 800f2ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f2b0:	e6df      	b.n	800f072 <_printf_float+0x1da>
 800f2b2:	f04f 0800 	mov.w	r8, #0
 800f2b6:	f104 0b1a 	add.w	fp, r4, #26
 800f2ba:	e7f4      	b.n	800f2a6 <_printf_float+0x40e>
 800f2bc:	2301      	movs	r3, #1
 800f2be:	4642      	mov	r2, r8
 800f2c0:	e7e1      	b.n	800f286 <_printf_float+0x3ee>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	464a      	mov	r2, r9
 800f2c6:	4631      	mov	r1, r6
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	47b8      	blx	r7
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	f43f ae3e 	beq.w	800ef4e <_printf_float+0xb6>
 800f2d2:	f108 0801 	add.w	r8, r8, #1
 800f2d6:	68e3      	ldr	r3, [r4, #12]
 800f2d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f2da:	1a5b      	subs	r3, r3, r1
 800f2dc:	4543      	cmp	r3, r8
 800f2de:	dcf0      	bgt.n	800f2c2 <_printf_float+0x42a>
 800f2e0:	e6fc      	b.n	800f0dc <_printf_float+0x244>
 800f2e2:	f04f 0800 	mov.w	r8, #0
 800f2e6:	f104 0919 	add.w	r9, r4, #25
 800f2ea:	e7f4      	b.n	800f2d6 <_printf_float+0x43e>

0800f2ec <_printf_common>:
 800f2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2f0:	4616      	mov	r6, r2
 800f2f2:	4698      	mov	r8, r3
 800f2f4:	688a      	ldr	r2, [r1, #8]
 800f2f6:	690b      	ldr	r3, [r1, #16]
 800f2f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f2fc:	4293      	cmp	r3, r2
 800f2fe:	bfb8      	it	lt
 800f300:	4613      	movlt	r3, r2
 800f302:	6033      	str	r3, [r6, #0]
 800f304:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f308:	4607      	mov	r7, r0
 800f30a:	460c      	mov	r4, r1
 800f30c:	b10a      	cbz	r2, 800f312 <_printf_common+0x26>
 800f30e:	3301      	adds	r3, #1
 800f310:	6033      	str	r3, [r6, #0]
 800f312:	6823      	ldr	r3, [r4, #0]
 800f314:	0699      	lsls	r1, r3, #26
 800f316:	bf42      	ittt	mi
 800f318:	6833      	ldrmi	r3, [r6, #0]
 800f31a:	3302      	addmi	r3, #2
 800f31c:	6033      	strmi	r3, [r6, #0]
 800f31e:	6825      	ldr	r5, [r4, #0]
 800f320:	f015 0506 	ands.w	r5, r5, #6
 800f324:	d106      	bne.n	800f334 <_printf_common+0x48>
 800f326:	f104 0a19 	add.w	sl, r4, #25
 800f32a:	68e3      	ldr	r3, [r4, #12]
 800f32c:	6832      	ldr	r2, [r6, #0]
 800f32e:	1a9b      	subs	r3, r3, r2
 800f330:	42ab      	cmp	r3, r5
 800f332:	dc26      	bgt.n	800f382 <_printf_common+0x96>
 800f334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f338:	6822      	ldr	r2, [r4, #0]
 800f33a:	3b00      	subs	r3, #0
 800f33c:	bf18      	it	ne
 800f33e:	2301      	movne	r3, #1
 800f340:	0692      	lsls	r2, r2, #26
 800f342:	d42b      	bmi.n	800f39c <_printf_common+0xb0>
 800f344:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f348:	4641      	mov	r1, r8
 800f34a:	4638      	mov	r0, r7
 800f34c:	47c8      	blx	r9
 800f34e:	3001      	adds	r0, #1
 800f350:	d01e      	beq.n	800f390 <_printf_common+0xa4>
 800f352:	6823      	ldr	r3, [r4, #0]
 800f354:	6922      	ldr	r2, [r4, #16]
 800f356:	f003 0306 	and.w	r3, r3, #6
 800f35a:	2b04      	cmp	r3, #4
 800f35c:	bf02      	ittt	eq
 800f35e:	68e5      	ldreq	r5, [r4, #12]
 800f360:	6833      	ldreq	r3, [r6, #0]
 800f362:	1aed      	subeq	r5, r5, r3
 800f364:	68a3      	ldr	r3, [r4, #8]
 800f366:	bf0c      	ite	eq
 800f368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f36c:	2500      	movne	r5, #0
 800f36e:	4293      	cmp	r3, r2
 800f370:	bfc4      	itt	gt
 800f372:	1a9b      	subgt	r3, r3, r2
 800f374:	18ed      	addgt	r5, r5, r3
 800f376:	2600      	movs	r6, #0
 800f378:	341a      	adds	r4, #26
 800f37a:	42b5      	cmp	r5, r6
 800f37c:	d11a      	bne.n	800f3b4 <_printf_common+0xc8>
 800f37e:	2000      	movs	r0, #0
 800f380:	e008      	b.n	800f394 <_printf_common+0xa8>
 800f382:	2301      	movs	r3, #1
 800f384:	4652      	mov	r2, sl
 800f386:	4641      	mov	r1, r8
 800f388:	4638      	mov	r0, r7
 800f38a:	47c8      	blx	r9
 800f38c:	3001      	adds	r0, #1
 800f38e:	d103      	bne.n	800f398 <_printf_common+0xac>
 800f390:	f04f 30ff 	mov.w	r0, #4294967295
 800f394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f398:	3501      	adds	r5, #1
 800f39a:	e7c6      	b.n	800f32a <_printf_common+0x3e>
 800f39c:	18e1      	adds	r1, r4, r3
 800f39e:	1c5a      	adds	r2, r3, #1
 800f3a0:	2030      	movs	r0, #48	@ 0x30
 800f3a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f3a6:	4422      	add	r2, r4
 800f3a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f3ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f3b0:	3302      	adds	r3, #2
 800f3b2:	e7c7      	b.n	800f344 <_printf_common+0x58>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	4622      	mov	r2, r4
 800f3b8:	4641      	mov	r1, r8
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	47c8      	blx	r9
 800f3be:	3001      	adds	r0, #1
 800f3c0:	d0e6      	beq.n	800f390 <_printf_common+0xa4>
 800f3c2:	3601      	adds	r6, #1
 800f3c4:	e7d9      	b.n	800f37a <_printf_common+0x8e>
	...

0800f3c8 <_printf_i>:
 800f3c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3cc:	7e0f      	ldrb	r7, [r1, #24]
 800f3ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f3d0:	2f78      	cmp	r7, #120	@ 0x78
 800f3d2:	4691      	mov	r9, r2
 800f3d4:	4680      	mov	r8, r0
 800f3d6:	460c      	mov	r4, r1
 800f3d8:	469a      	mov	sl, r3
 800f3da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f3de:	d807      	bhi.n	800f3f0 <_printf_i+0x28>
 800f3e0:	2f62      	cmp	r7, #98	@ 0x62
 800f3e2:	d80a      	bhi.n	800f3fa <_printf_i+0x32>
 800f3e4:	2f00      	cmp	r7, #0
 800f3e6:	f000 80d2 	beq.w	800f58e <_printf_i+0x1c6>
 800f3ea:	2f58      	cmp	r7, #88	@ 0x58
 800f3ec:	f000 80b9 	beq.w	800f562 <_printf_i+0x19a>
 800f3f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f3f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f3f8:	e03a      	b.n	800f470 <_printf_i+0xa8>
 800f3fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f3fe:	2b15      	cmp	r3, #21
 800f400:	d8f6      	bhi.n	800f3f0 <_printf_i+0x28>
 800f402:	a101      	add	r1, pc, #4	@ (adr r1, 800f408 <_printf_i+0x40>)
 800f404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f408:	0800f461 	.word	0x0800f461
 800f40c:	0800f475 	.word	0x0800f475
 800f410:	0800f3f1 	.word	0x0800f3f1
 800f414:	0800f3f1 	.word	0x0800f3f1
 800f418:	0800f3f1 	.word	0x0800f3f1
 800f41c:	0800f3f1 	.word	0x0800f3f1
 800f420:	0800f475 	.word	0x0800f475
 800f424:	0800f3f1 	.word	0x0800f3f1
 800f428:	0800f3f1 	.word	0x0800f3f1
 800f42c:	0800f3f1 	.word	0x0800f3f1
 800f430:	0800f3f1 	.word	0x0800f3f1
 800f434:	0800f575 	.word	0x0800f575
 800f438:	0800f49f 	.word	0x0800f49f
 800f43c:	0800f52f 	.word	0x0800f52f
 800f440:	0800f3f1 	.word	0x0800f3f1
 800f444:	0800f3f1 	.word	0x0800f3f1
 800f448:	0800f597 	.word	0x0800f597
 800f44c:	0800f3f1 	.word	0x0800f3f1
 800f450:	0800f49f 	.word	0x0800f49f
 800f454:	0800f3f1 	.word	0x0800f3f1
 800f458:	0800f3f1 	.word	0x0800f3f1
 800f45c:	0800f537 	.word	0x0800f537
 800f460:	6833      	ldr	r3, [r6, #0]
 800f462:	1d1a      	adds	r2, r3, #4
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	6032      	str	r2, [r6, #0]
 800f468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f46c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f470:	2301      	movs	r3, #1
 800f472:	e09d      	b.n	800f5b0 <_printf_i+0x1e8>
 800f474:	6833      	ldr	r3, [r6, #0]
 800f476:	6820      	ldr	r0, [r4, #0]
 800f478:	1d19      	adds	r1, r3, #4
 800f47a:	6031      	str	r1, [r6, #0]
 800f47c:	0606      	lsls	r6, r0, #24
 800f47e:	d501      	bpl.n	800f484 <_printf_i+0xbc>
 800f480:	681d      	ldr	r5, [r3, #0]
 800f482:	e003      	b.n	800f48c <_printf_i+0xc4>
 800f484:	0645      	lsls	r5, r0, #25
 800f486:	d5fb      	bpl.n	800f480 <_printf_i+0xb8>
 800f488:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f48c:	2d00      	cmp	r5, #0
 800f48e:	da03      	bge.n	800f498 <_printf_i+0xd0>
 800f490:	232d      	movs	r3, #45	@ 0x2d
 800f492:	426d      	negs	r5, r5
 800f494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f498:	4859      	ldr	r0, [pc, #356]	@ (800f600 <_printf_i+0x238>)
 800f49a:	230a      	movs	r3, #10
 800f49c:	e011      	b.n	800f4c2 <_printf_i+0xfa>
 800f49e:	6821      	ldr	r1, [r4, #0]
 800f4a0:	6833      	ldr	r3, [r6, #0]
 800f4a2:	0608      	lsls	r0, r1, #24
 800f4a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f4a8:	d402      	bmi.n	800f4b0 <_printf_i+0xe8>
 800f4aa:	0649      	lsls	r1, r1, #25
 800f4ac:	bf48      	it	mi
 800f4ae:	b2ad      	uxthmi	r5, r5
 800f4b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f4b2:	4853      	ldr	r0, [pc, #332]	@ (800f600 <_printf_i+0x238>)
 800f4b4:	6033      	str	r3, [r6, #0]
 800f4b6:	bf14      	ite	ne
 800f4b8:	230a      	movne	r3, #10
 800f4ba:	2308      	moveq	r3, #8
 800f4bc:	2100      	movs	r1, #0
 800f4be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f4c2:	6866      	ldr	r6, [r4, #4]
 800f4c4:	60a6      	str	r6, [r4, #8]
 800f4c6:	2e00      	cmp	r6, #0
 800f4c8:	bfa2      	ittt	ge
 800f4ca:	6821      	ldrge	r1, [r4, #0]
 800f4cc:	f021 0104 	bicge.w	r1, r1, #4
 800f4d0:	6021      	strge	r1, [r4, #0]
 800f4d2:	b90d      	cbnz	r5, 800f4d8 <_printf_i+0x110>
 800f4d4:	2e00      	cmp	r6, #0
 800f4d6:	d04b      	beq.n	800f570 <_printf_i+0x1a8>
 800f4d8:	4616      	mov	r6, r2
 800f4da:	fbb5 f1f3 	udiv	r1, r5, r3
 800f4de:	fb03 5711 	mls	r7, r3, r1, r5
 800f4e2:	5dc7      	ldrb	r7, [r0, r7]
 800f4e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f4e8:	462f      	mov	r7, r5
 800f4ea:	42bb      	cmp	r3, r7
 800f4ec:	460d      	mov	r5, r1
 800f4ee:	d9f4      	bls.n	800f4da <_printf_i+0x112>
 800f4f0:	2b08      	cmp	r3, #8
 800f4f2:	d10b      	bne.n	800f50c <_printf_i+0x144>
 800f4f4:	6823      	ldr	r3, [r4, #0]
 800f4f6:	07df      	lsls	r7, r3, #31
 800f4f8:	d508      	bpl.n	800f50c <_printf_i+0x144>
 800f4fa:	6923      	ldr	r3, [r4, #16]
 800f4fc:	6861      	ldr	r1, [r4, #4]
 800f4fe:	4299      	cmp	r1, r3
 800f500:	bfde      	ittt	le
 800f502:	2330      	movle	r3, #48	@ 0x30
 800f504:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f508:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f50c:	1b92      	subs	r2, r2, r6
 800f50e:	6122      	str	r2, [r4, #16]
 800f510:	f8cd a000 	str.w	sl, [sp]
 800f514:	464b      	mov	r3, r9
 800f516:	aa03      	add	r2, sp, #12
 800f518:	4621      	mov	r1, r4
 800f51a:	4640      	mov	r0, r8
 800f51c:	f7ff fee6 	bl	800f2ec <_printf_common>
 800f520:	3001      	adds	r0, #1
 800f522:	d14a      	bne.n	800f5ba <_printf_i+0x1f2>
 800f524:	f04f 30ff 	mov.w	r0, #4294967295
 800f528:	b004      	add	sp, #16
 800f52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f52e:	6823      	ldr	r3, [r4, #0]
 800f530:	f043 0320 	orr.w	r3, r3, #32
 800f534:	6023      	str	r3, [r4, #0]
 800f536:	4833      	ldr	r0, [pc, #204]	@ (800f604 <_printf_i+0x23c>)
 800f538:	2778      	movs	r7, #120	@ 0x78
 800f53a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f53e:	6823      	ldr	r3, [r4, #0]
 800f540:	6831      	ldr	r1, [r6, #0]
 800f542:	061f      	lsls	r7, r3, #24
 800f544:	f851 5b04 	ldr.w	r5, [r1], #4
 800f548:	d402      	bmi.n	800f550 <_printf_i+0x188>
 800f54a:	065f      	lsls	r7, r3, #25
 800f54c:	bf48      	it	mi
 800f54e:	b2ad      	uxthmi	r5, r5
 800f550:	6031      	str	r1, [r6, #0]
 800f552:	07d9      	lsls	r1, r3, #31
 800f554:	bf44      	itt	mi
 800f556:	f043 0320 	orrmi.w	r3, r3, #32
 800f55a:	6023      	strmi	r3, [r4, #0]
 800f55c:	b11d      	cbz	r5, 800f566 <_printf_i+0x19e>
 800f55e:	2310      	movs	r3, #16
 800f560:	e7ac      	b.n	800f4bc <_printf_i+0xf4>
 800f562:	4827      	ldr	r0, [pc, #156]	@ (800f600 <_printf_i+0x238>)
 800f564:	e7e9      	b.n	800f53a <_printf_i+0x172>
 800f566:	6823      	ldr	r3, [r4, #0]
 800f568:	f023 0320 	bic.w	r3, r3, #32
 800f56c:	6023      	str	r3, [r4, #0]
 800f56e:	e7f6      	b.n	800f55e <_printf_i+0x196>
 800f570:	4616      	mov	r6, r2
 800f572:	e7bd      	b.n	800f4f0 <_printf_i+0x128>
 800f574:	6833      	ldr	r3, [r6, #0]
 800f576:	6825      	ldr	r5, [r4, #0]
 800f578:	6961      	ldr	r1, [r4, #20]
 800f57a:	1d18      	adds	r0, r3, #4
 800f57c:	6030      	str	r0, [r6, #0]
 800f57e:	062e      	lsls	r6, r5, #24
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	d501      	bpl.n	800f588 <_printf_i+0x1c0>
 800f584:	6019      	str	r1, [r3, #0]
 800f586:	e002      	b.n	800f58e <_printf_i+0x1c6>
 800f588:	0668      	lsls	r0, r5, #25
 800f58a:	d5fb      	bpl.n	800f584 <_printf_i+0x1bc>
 800f58c:	8019      	strh	r1, [r3, #0]
 800f58e:	2300      	movs	r3, #0
 800f590:	6123      	str	r3, [r4, #16]
 800f592:	4616      	mov	r6, r2
 800f594:	e7bc      	b.n	800f510 <_printf_i+0x148>
 800f596:	6833      	ldr	r3, [r6, #0]
 800f598:	1d1a      	adds	r2, r3, #4
 800f59a:	6032      	str	r2, [r6, #0]
 800f59c:	681e      	ldr	r6, [r3, #0]
 800f59e:	6862      	ldr	r2, [r4, #4]
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	f7f0 fe24 	bl	80001f0 <memchr>
 800f5a8:	b108      	cbz	r0, 800f5ae <_printf_i+0x1e6>
 800f5aa:	1b80      	subs	r0, r0, r6
 800f5ac:	6060      	str	r0, [r4, #4]
 800f5ae:	6863      	ldr	r3, [r4, #4]
 800f5b0:	6123      	str	r3, [r4, #16]
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5b8:	e7aa      	b.n	800f510 <_printf_i+0x148>
 800f5ba:	6923      	ldr	r3, [r4, #16]
 800f5bc:	4632      	mov	r2, r6
 800f5be:	4649      	mov	r1, r9
 800f5c0:	4640      	mov	r0, r8
 800f5c2:	47d0      	blx	sl
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	d0ad      	beq.n	800f524 <_printf_i+0x15c>
 800f5c8:	6823      	ldr	r3, [r4, #0]
 800f5ca:	079b      	lsls	r3, r3, #30
 800f5cc:	d413      	bmi.n	800f5f6 <_printf_i+0x22e>
 800f5ce:	68e0      	ldr	r0, [r4, #12]
 800f5d0:	9b03      	ldr	r3, [sp, #12]
 800f5d2:	4298      	cmp	r0, r3
 800f5d4:	bfb8      	it	lt
 800f5d6:	4618      	movlt	r0, r3
 800f5d8:	e7a6      	b.n	800f528 <_printf_i+0x160>
 800f5da:	2301      	movs	r3, #1
 800f5dc:	4632      	mov	r2, r6
 800f5de:	4649      	mov	r1, r9
 800f5e0:	4640      	mov	r0, r8
 800f5e2:	47d0      	blx	sl
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	d09d      	beq.n	800f524 <_printf_i+0x15c>
 800f5e8:	3501      	adds	r5, #1
 800f5ea:	68e3      	ldr	r3, [r4, #12]
 800f5ec:	9903      	ldr	r1, [sp, #12]
 800f5ee:	1a5b      	subs	r3, r3, r1
 800f5f0:	42ab      	cmp	r3, r5
 800f5f2:	dcf2      	bgt.n	800f5da <_printf_i+0x212>
 800f5f4:	e7eb      	b.n	800f5ce <_printf_i+0x206>
 800f5f6:	2500      	movs	r5, #0
 800f5f8:	f104 0619 	add.w	r6, r4, #25
 800f5fc:	e7f5      	b.n	800f5ea <_printf_i+0x222>
 800f5fe:	bf00      	nop
 800f600:	080161ff 	.word	0x080161ff
 800f604:	08016210 	.word	0x08016210

0800f608 <_scanf_float>:
 800f608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60c:	b087      	sub	sp, #28
 800f60e:	4617      	mov	r7, r2
 800f610:	9303      	str	r3, [sp, #12]
 800f612:	688b      	ldr	r3, [r1, #8]
 800f614:	1e5a      	subs	r2, r3, #1
 800f616:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f61a:	bf81      	itttt	hi
 800f61c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f620:	eb03 0b05 	addhi.w	fp, r3, r5
 800f624:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f628:	608b      	strhi	r3, [r1, #8]
 800f62a:	680b      	ldr	r3, [r1, #0]
 800f62c:	460a      	mov	r2, r1
 800f62e:	f04f 0500 	mov.w	r5, #0
 800f632:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f636:	f842 3b1c 	str.w	r3, [r2], #28
 800f63a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f63e:	4680      	mov	r8, r0
 800f640:	460c      	mov	r4, r1
 800f642:	bf98      	it	ls
 800f644:	f04f 0b00 	movls.w	fp, #0
 800f648:	9201      	str	r2, [sp, #4]
 800f64a:	4616      	mov	r6, r2
 800f64c:	46aa      	mov	sl, r5
 800f64e:	46a9      	mov	r9, r5
 800f650:	9502      	str	r5, [sp, #8]
 800f652:	68a2      	ldr	r2, [r4, #8]
 800f654:	b152      	cbz	r2, 800f66c <_scanf_float+0x64>
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	2b4e      	cmp	r3, #78	@ 0x4e
 800f65c:	d864      	bhi.n	800f728 <_scanf_float+0x120>
 800f65e:	2b40      	cmp	r3, #64	@ 0x40
 800f660:	d83c      	bhi.n	800f6dc <_scanf_float+0xd4>
 800f662:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f666:	b2c8      	uxtb	r0, r1
 800f668:	280e      	cmp	r0, #14
 800f66a:	d93a      	bls.n	800f6e2 <_scanf_float+0xda>
 800f66c:	f1b9 0f00 	cmp.w	r9, #0
 800f670:	d003      	beq.n	800f67a <_scanf_float+0x72>
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f678:	6023      	str	r3, [r4, #0]
 800f67a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f67e:	f1ba 0f01 	cmp.w	sl, #1
 800f682:	f200 8117 	bhi.w	800f8b4 <_scanf_float+0x2ac>
 800f686:	9b01      	ldr	r3, [sp, #4]
 800f688:	429e      	cmp	r6, r3
 800f68a:	f200 8108 	bhi.w	800f89e <_scanf_float+0x296>
 800f68e:	2001      	movs	r0, #1
 800f690:	b007      	add	sp, #28
 800f692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f696:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f69a:	2a0d      	cmp	r2, #13
 800f69c:	d8e6      	bhi.n	800f66c <_scanf_float+0x64>
 800f69e:	a101      	add	r1, pc, #4	@ (adr r1, 800f6a4 <_scanf_float+0x9c>)
 800f6a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f6a4:	0800f7eb 	.word	0x0800f7eb
 800f6a8:	0800f66d 	.word	0x0800f66d
 800f6ac:	0800f66d 	.word	0x0800f66d
 800f6b0:	0800f66d 	.word	0x0800f66d
 800f6b4:	0800f84b 	.word	0x0800f84b
 800f6b8:	0800f823 	.word	0x0800f823
 800f6bc:	0800f66d 	.word	0x0800f66d
 800f6c0:	0800f66d 	.word	0x0800f66d
 800f6c4:	0800f7f9 	.word	0x0800f7f9
 800f6c8:	0800f66d 	.word	0x0800f66d
 800f6cc:	0800f66d 	.word	0x0800f66d
 800f6d0:	0800f66d 	.word	0x0800f66d
 800f6d4:	0800f66d 	.word	0x0800f66d
 800f6d8:	0800f7b1 	.word	0x0800f7b1
 800f6dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f6e0:	e7db      	b.n	800f69a <_scanf_float+0x92>
 800f6e2:	290e      	cmp	r1, #14
 800f6e4:	d8c2      	bhi.n	800f66c <_scanf_float+0x64>
 800f6e6:	a001      	add	r0, pc, #4	@ (adr r0, 800f6ec <_scanf_float+0xe4>)
 800f6e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f6ec:	0800f7a1 	.word	0x0800f7a1
 800f6f0:	0800f66d 	.word	0x0800f66d
 800f6f4:	0800f7a1 	.word	0x0800f7a1
 800f6f8:	0800f837 	.word	0x0800f837
 800f6fc:	0800f66d 	.word	0x0800f66d
 800f700:	0800f749 	.word	0x0800f749
 800f704:	0800f787 	.word	0x0800f787
 800f708:	0800f787 	.word	0x0800f787
 800f70c:	0800f787 	.word	0x0800f787
 800f710:	0800f787 	.word	0x0800f787
 800f714:	0800f787 	.word	0x0800f787
 800f718:	0800f787 	.word	0x0800f787
 800f71c:	0800f787 	.word	0x0800f787
 800f720:	0800f787 	.word	0x0800f787
 800f724:	0800f787 	.word	0x0800f787
 800f728:	2b6e      	cmp	r3, #110	@ 0x6e
 800f72a:	d809      	bhi.n	800f740 <_scanf_float+0x138>
 800f72c:	2b60      	cmp	r3, #96	@ 0x60
 800f72e:	d8b2      	bhi.n	800f696 <_scanf_float+0x8e>
 800f730:	2b54      	cmp	r3, #84	@ 0x54
 800f732:	d07b      	beq.n	800f82c <_scanf_float+0x224>
 800f734:	2b59      	cmp	r3, #89	@ 0x59
 800f736:	d199      	bne.n	800f66c <_scanf_float+0x64>
 800f738:	2d07      	cmp	r5, #7
 800f73a:	d197      	bne.n	800f66c <_scanf_float+0x64>
 800f73c:	2508      	movs	r5, #8
 800f73e:	e02c      	b.n	800f79a <_scanf_float+0x192>
 800f740:	2b74      	cmp	r3, #116	@ 0x74
 800f742:	d073      	beq.n	800f82c <_scanf_float+0x224>
 800f744:	2b79      	cmp	r3, #121	@ 0x79
 800f746:	e7f6      	b.n	800f736 <_scanf_float+0x12e>
 800f748:	6821      	ldr	r1, [r4, #0]
 800f74a:	05c8      	lsls	r0, r1, #23
 800f74c:	d51b      	bpl.n	800f786 <_scanf_float+0x17e>
 800f74e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f752:	6021      	str	r1, [r4, #0]
 800f754:	f109 0901 	add.w	r9, r9, #1
 800f758:	f1bb 0f00 	cmp.w	fp, #0
 800f75c:	d003      	beq.n	800f766 <_scanf_float+0x15e>
 800f75e:	3201      	adds	r2, #1
 800f760:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f764:	60a2      	str	r2, [r4, #8]
 800f766:	68a3      	ldr	r3, [r4, #8]
 800f768:	3b01      	subs	r3, #1
 800f76a:	60a3      	str	r3, [r4, #8]
 800f76c:	6923      	ldr	r3, [r4, #16]
 800f76e:	3301      	adds	r3, #1
 800f770:	6123      	str	r3, [r4, #16]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	3b01      	subs	r3, #1
 800f776:	2b00      	cmp	r3, #0
 800f778:	607b      	str	r3, [r7, #4]
 800f77a:	f340 8087 	ble.w	800f88c <_scanf_float+0x284>
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	3301      	adds	r3, #1
 800f782:	603b      	str	r3, [r7, #0]
 800f784:	e765      	b.n	800f652 <_scanf_float+0x4a>
 800f786:	eb1a 0105 	adds.w	r1, sl, r5
 800f78a:	f47f af6f 	bne.w	800f66c <_scanf_float+0x64>
 800f78e:	6822      	ldr	r2, [r4, #0]
 800f790:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f794:	6022      	str	r2, [r4, #0]
 800f796:	460d      	mov	r5, r1
 800f798:	468a      	mov	sl, r1
 800f79a:	f806 3b01 	strb.w	r3, [r6], #1
 800f79e:	e7e2      	b.n	800f766 <_scanf_float+0x15e>
 800f7a0:	6822      	ldr	r2, [r4, #0]
 800f7a2:	0610      	lsls	r0, r2, #24
 800f7a4:	f57f af62 	bpl.w	800f66c <_scanf_float+0x64>
 800f7a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f7ac:	6022      	str	r2, [r4, #0]
 800f7ae:	e7f4      	b.n	800f79a <_scanf_float+0x192>
 800f7b0:	f1ba 0f00 	cmp.w	sl, #0
 800f7b4:	d10e      	bne.n	800f7d4 <_scanf_float+0x1cc>
 800f7b6:	f1b9 0f00 	cmp.w	r9, #0
 800f7ba:	d10e      	bne.n	800f7da <_scanf_float+0x1d2>
 800f7bc:	6822      	ldr	r2, [r4, #0]
 800f7be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f7c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f7c6:	d108      	bne.n	800f7da <_scanf_float+0x1d2>
 800f7c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f7cc:	6022      	str	r2, [r4, #0]
 800f7ce:	f04f 0a01 	mov.w	sl, #1
 800f7d2:	e7e2      	b.n	800f79a <_scanf_float+0x192>
 800f7d4:	f1ba 0f02 	cmp.w	sl, #2
 800f7d8:	d055      	beq.n	800f886 <_scanf_float+0x27e>
 800f7da:	2d01      	cmp	r5, #1
 800f7dc:	d002      	beq.n	800f7e4 <_scanf_float+0x1dc>
 800f7de:	2d04      	cmp	r5, #4
 800f7e0:	f47f af44 	bne.w	800f66c <_scanf_float+0x64>
 800f7e4:	3501      	adds	r5, #1
 800f7e6:	b2ed      	uxtb	r5, r5
 800f7e8:	e7d7      	b.n	800f79a <_scanf_float+0x192>
 800f7ea:	f1ba 0f01 	cmp.w	sl, #1
 800f7ee:	f47f af3d 	bne.w	800f66c <_scanf_float+0x64>
 800f7f2:	f04f 0a02 	mov.w	sl, #2
 800f7f6:	e7d0      	b.n	800f79a <_scanf_float+0x192>
 800f7f8:	b97d      	cbnz	r5, 800f81a <_scanf_float+0x212>
 800f7fa:	f1b9 0f00 	cmp.w	r9, #0
 800f7fe:	f47f af38 	bne.w	800f672 <_scanf_float+0x6a>
 800f802:	6822      	ldr	r2, [r4, #0]
 800f804:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f808:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f80c:	f040 8108 	bne.w	800fa20 <_scanf_float+0x418>
 800f810:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f814:	6022      	str	r2, [r4, #0]
 800f816:	2501      	movs	r5, #1
 800f818:	e7bf      	b.n	800f79a <_scanf_float+0x192>
 800f81a:	2d03      	cmp	r5, #3
 800f81c:	d0e2      	beq.n	800f7e4 <_scanf_float+0x1dc>
 800f81e:	2d05      	cmp	r5, #5
 800f820:	e7de      	b.n	800f7e0 <_scanf_float+0x1d8>
 800f822:	2d02      	cmp	r5, #2
 800f824:	f47f af22 	bne.w	800f66c <_scanf_float+0x64>
 800f828:	2503      	movs	r5, #3
 800f82a:	e7b6      	b.n	800f79a <_scanf_float+0x192>
 800f82c:	2d06      	cmp	r5, #6
 800f82e:	f47f af1d 	bne.w	800f66c <_scanf_float+0x64>
 800f832:	2507      	movs	r5, #7
 800f834:	e7b1      	b.n	800f79a <_scanf_float+0x192>
 800f836:	6822      	ldr	r2, [r4, #0]
 800f838:	0591      	lsls	r1, r2, #22
 800f83a:	f57f af17 	bpl.w	800f66c <_scanf_float+0x64>
 800f83e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f842:	6022      	str	r2, [r4, #0]
 800f844:	f8cd 9008 	str.w	r9, [sp, #8]
 800f848:	e7a7      	b.n	800f79a <_scanf_float+0x192>
 800f84a:	6822      	ldr	r2, [r4, #0]
 800f84c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f850:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f854:	d006      	beq.n	800f864 <_scanf_float+0x25c>
 800f856:	0550      	lsls	r0, r2, #21
 800f858:	f57f af08 	bpl.w	800f66c <_scanf_float+0x64>
 800f85c:	f1b9 0f00 	cmp.w	r9, #0
 800f860:	f000 80de 	beq.w	800fa20 <_scanf_float+0x418>
 800f864:	0591      	lsls	r1, r2, #22
 800f866:	bf58      	it	pl
 800f868:	9902      	ldrpl	r1, [sp, #8]
 800f86a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f86e:	bf58      	it	pl
 800f870:	eba9 0101 	subpl.w	r1, r9, r1
 800f874:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f878:	bf58      	it	pl
 800f87a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f87e:	6022      	str	r2, [r4, #0]
 800f880:	f04f 0900 	mov.w	r9, #0
 800f884:	e789      	b.n	800f79a <_scanf_float+0x192>
 800f886:	f04f 0a03 	mov.w	sl, #3
 800f88a:	e786      	b.n	800f79a <_scanf_float+0x192>
 800f88c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f890:	4639      	mov	r1, r7
 800f892:	4640      	mov	r0, r8
 800f894:	4798      	blx	r3
 800f896:	2800      	cmp	r0, #0
 800f898:	f43f aedb 	beq.w	800f652 <_scanf_float+0x4a>
 800f89c:	e6e6      	b.n	800f66c <_scanf_float+0x64>
 800f89e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8a6:	463a      	mov	r2, r7
 800f8a8:	4640      	mov	r0, r8
 800f8aa:	4798      	blx	r3
 800f8ac:	6923      	ldr	r3, [r4, #16]
 800f8ae:	3b01      	subs	r3, #1
 800f8b0:	6123      	str	r3, [r4, #16]
 800f8b2:	e6e8      	b.n	800f686 <_scanf_float+0x7e>
 800f8b4:	1e6b      	subs	r3, r5, #1
 800f8b6:	2b06      	cmp	r3, #6
 800f8b8:	d824      	bhi.n	800f904 <_scanf_float+0x2fc>
 800f8ba:	2d02      	cmp	r5, #2
 800f8bc:	d836      	bhi.n	800f92c <_scanf_float+0x324>
 800f8be:	9b01      	ldr	r3, [sp, #4]
 800f8c0:	429e      	cmp	r6, r3
 800f8c2:	f67f aee4 	bls.w	800f68e <_scanf_float+0x86>
 800f8c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8ce:	463a      	mov	r2, r7
 800f8d0:	4640      	mov	r0, r8
 800f8d2:	4798      	blx	r3
 800f8d4:	6923      	ldr	r3, [r4, #16]
 800f8d6:	3b01      	subs	r3, #1
 800f8d8:	6123      	str	r3, [r4, #16]
 800f8da:	e7f0      	b.n	800f8be <_scanf_float+0x2b6>
 800f8dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f8e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f8e4:	463a      	mov	r2, r7
 800f8e6:	4640      	mov	r0, r8
 800f8e8:	4798      	blx	r3
 800f8ea:	6923      	ldr	r3, [r4, #16]
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	6123      	str	r3, [r4, #16]
 800f8f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8f4:	fa5f fa8a 	uxtb.w	sl, sl
 800f8f8:	f1ba 0f02 	cmp.w	sl, #2
 800f8fc:	d1ee      	bne.n	800f8dc <_scanf_float+0x2d4>
 800f8fe:	3d03      	subs	r5, #3
 800f900:	b2ed      	uxtb	r5, r5
 800f902:	1b76      	subs	r6, r6, r5
 800f904:	6823      	ldr	r3, [r4, #0]
 800f906:	05da      	lsls	r2, r3, #23
 800f908:	d530      	bpl.n	800f96c <_scanf_float+0x364>
 800f90a:	055b      	lsls	r3, r3, #21
 800f90c:	d511      	bpl.n	800f932 <_scanf_float+0x32a>
 800f90e:	9b01      	ldr	r3, [sp, #4]
 800f910:	429e      	cmp	r6, r3
 800f912:	f67f aebc 	bls.w	800f68e <_scanf_float+0x86>
 800f916:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f91a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f91e:	463a      	mov	r2, r7
 800f920:	4640      	mov	r0, r8
 800f922:	4798      	blx	r3
 800f924:	6923      	ldr	r3, [r4, #16]
 800f926:	3b01      	subs	r3, #1
 800f928:	6123      	str	r3, [r4, #16]
 800f92a:	e7f0      	b.n	800f90e <_scanf_float+0x306>
 800f92c:	46aa      	mov	sl, r5
 800f92e:	46b3      	mov	fp, r6
 800f930:	e7de      	b.n	800f8f0 <_scanf_float+0x2e8>
 800f932:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f936:	6923      	ldr	r3, [r4, #16]
 800f938:	2965      	cmp	r1, #101	@ 0x65
 800f93a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f93e:	f106 35ff 	add.w	r5, r6, #4294967295
 800f942:	6123      	str	r3, [r4, #16]
 800f944:	d00c      	beq.n	800f960 <_scanf_float+0x358>
 800f946:	2945      	cmp	r1, #69	@ 0x45
 800f948:	d00a      	beq.n	800f960 <_scanf_float+0x358>
 800f94a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f94e:	463a      	mov	r2, r7
 800f950:	4640      	mov	r0, r8
 800f952:	4798      	blx	r3
 800f954:	6923      	ldr	r3, [r4, #16]
 800f956:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f95a:	3b01      	subs	r3, #1
 800f95c:	1eb5      	subs	r5, r6, #2
 800f95e:	6123      	str	r3, [r4, #16]
 800f960:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f964:	463a      	mov	r2, r7
 800f966:	4640      	mov	r0, r8
 800f968:	4798      	blx	r3
 800f96a:	462e      	mov	r6, r5
 800f96c:	6822      	ldr	r2, [r4, #0]
 800f96e:	f012 0210 	ands.w	r2, r2, #16
 800f972:	d001      	beq.n	800f978 <_scanf_float+0x370>
 800f974:	2000      	movs	r0, #0
 800f976:	e68b      	b.n	800f690 <_scanf_float+0x88>
 800f978:	7032      	strb	r2, [r6, #0]
 800f97a:	6823      	ldr	r3, [r4, #0]
 800f97c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f984:	d11c      	bne.n	800f9c0 <_scanf_float+0x3b8>
 800f986:	9b02      	ldr	r3, [sp, #8]
 800f988:	454b      	cmp	r3, r9
 800f98a:	eba3 0209 	sub.w	r2, r3, r9
 800f98e:	d123      	bne.n	800f9d8 <_scanf_float+0x3d0>
 800f990:	9901      	ldr	r1, [sp, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	4640      	mov	r0, r8
 800f996:	f002 fc07 	bl	80121a8 <_strtod_r>
 800f99a:	9b03      	ldr	r3, [sp, #12]
 800f99c:	6821      	ldr	r1, [r4, #0]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f011 0f02 	tst.w	r1, #2
 800f9a4:	ec57 6b10 	vmov	r6, r7, d0
 800f9a8:	f103 0204 	add.w	r2, r3, #4
 800f9ac:	d01f      	beq.n	800f9ee <_scanf_float+0x3e6>
 800f9ae:	9903      	ldr	r1, [sp, #12]
 800f9b0:	600a      	str	r2, [r1, #0]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	e9c3 6700 	strd	r6, r7, [r3]
 800f9b8:	68e3      	ldr	r3, [r4, #12]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	60e3      	str	r3, [r4, #12]
 800f9be:	e7d9      	b.n	800f974 <_scanf_float+0x36c>
 800f9c0:	9b04      	ldr	r3, [sp, #16]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d0e4      	beq.n	800f990 <_scanf_float+0x388>
 800f9c6:	9905      	ldr	r1, [sp, #20]
 800f9c8:	230a      	movs	r3, #10
 800f9ca:	3101      	adds	r1, #1
 800f9cc:	4640      	mov	r0, r8
 800f9ce:	f7ff f9b7 	bl	800ed40 <_strtol_r>
 800f9d2:	9b04      	ldr	r3, [sp, #16]
 800f9d4:	9e05      	ldr	r6, [sp, #20]
 800f9d6:	1ac2      	subs	r2, r0, r3
 800f9d8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f9dc:	429e      	cmp	r6, r3
 800f9de:	bf28      	it	cs
 800f9e0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f9e4:	4910      	ldr	r1, [pc, #64]	@ (800fa28 <_scanf_float+0x420>)
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f000 f8e4 	bl	800fbb4 <siprintf>
 800f9ec:	e7d0      	b.n	800f990 <_scanf_float+0x388>
 800f9ee:	f011 0f04 	tst.w	r1, #4
 800f9f2:	9903      	ldr	r1, [sp, #12]
 800f9f4:	600a      	str	r2, [r1, #0]
 800f9f6:	d1dc      	bne.n	800f9b2 <_scanf_float+0x3aa>
 800f9f8:	681d      	ldr	r5, [r3, #0]
 800f9fa:	4632      	mov	r2, r6
 800f9fc:	463b      	mov	r3, r7
 800f9fe:	4630      	mov	r0, r6
 800fa00:	4639      	mov	r1, r7
 800fa02:	f7f1 f8a3 	bl	8000b4c <__aeabi_dcmpun>
 800fa06:	b128      	cbz	r0, 800fa14 <_scanf_float+0x40c>
 800fa08:	4808      	ldr	r0, [pc, #32]	@ (800fa2c <_scanf_float+0x424>)
 800fa0a:	f000 f9c5 	bl	800fd98 <nanf>
 800fa0e:	ed85 0a00 	vstr	s0, [r5]
 800fa12:	e7d1      	b.n	800f9b8 <_scanf_float+0x3b0>
 800fa14:	4630      	mov	r0, r6
 800fa16:	4639      	mov	r1, r7
 800fa18:	f7f1 f8f6 	bl	8000c08 <__aeabi_d2f>
 800fa1c:	6028      	str	r0, [r5, #0]
 800fa1e:	e7cb      	b.n	800f9b8 <_scanf_float+0x3b0>
 800fa20:	f04f 0900 	mov.w	r9, #0
 800fa24:	e629      	b.n	800f67a <_scanf_float+0x72>
 800fa26:	bf00      	nop
 800fa28:	08016221 	.word	0x08016221
 800fa2c:	080164b4 	.word	0x080164b4

0800fa30 <std>:
 800fa30:	2300      	movs	r3, #0
 800fa32:	b510      	push	{r4, lr}
 800fa34:	4604      	mov	r4, r0
 800fa36:	e9c0 3300 	strd	r3, r3, [r0]
 800fa3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa3e:	6083      	str	r3, [r0, #8]
 800fa40:	8181      	strh	r1, [r0, #12]
 800fa42:	6643      	str	r3, [r0, #100]	@ 0x64
 800fa44:	81c2      	strh	r2, [r0, #14]
 800fa46:	6183      	str	r3, [r0, #24]
 800fa48:	4619      	mov	r1, r3
 800fa4a:	2208      	movs	r2, #8
 800fa4c:	305c      	adds	r0, #92	@ 0x5c
 800fa4e:	f000 f914 	bl	800fc7a <memset>
 800fa52:	4b0d      	ldr	r3, [pc, #52]	@ (800fa88 <std+0x58>)
 800fa54:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa56:	4b0d      	ldr	r3, [pc, #52]	@ (800fa8c <std+0x5c>)
 800fa58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa5a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa90 <std+0x60>)
 800fa5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa94 <std+0x64>)
 800fa60:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa62:	4b0d      	ldr	r3, [pc, #52]	@ (800fa98 <std+0x68>)
 800fa64:	6224      	str	r4, [r4, #32]
 800fa66:	429c      	cmp	r4, r3
 800fa68:	d006      	beq.n	800fa78 <std+0x48>
 800fa6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa6e:	4294      	cmp	r4, r2
 800fa70:	d002      	beq.n	800fa78 <std+0x48>
 800fa72:	33d0      	adds	r3, #208	@ 0xd0
 800fa74:	429c      	cmp	r4, r3
 800fa76:	d105      	bne.n	800fa84 <std+0x54>
 800fa78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa80:	f000 b978 	b.w	800fd74 <__retarget_lock_init_recursive>
 800fa84:	bd10      	pop	{r4, pc}
 800fa86:	bf00      	nop
 800fa88:	0800fbf5 	.word	0x0800fbf5
 800fa8c:	0800fc17 	.word	0x0800fc17
 800fa90:	0800fc4f 	.word	0x0800fc4f
 800fa94:	0800fc73 	.word	0x0800fc73
 800fa98:	200065e4 	.word	0x200065e4

0800fa9c <stdio_exit_handler>:
 800fa9c:	4a02      	ldr	r2, [pc, #8]	@ (800faa8 <stdio_exit_handler+0xc>)
 800fa9e:	4903      	ldr	r1, [pc, #12]	@ (800faac <stdio_exit_handler+0x10>)
 800faa0:	4803      	ldr	r0, [pc, #12]	@ (800fab0 <stdio_exit_handler+0x14>)
 800faa2:	f000 b869 	b.w	800fb78 <_fwalk_sglue>
 800faa6:	bf00      	nop
 800faa8:	20000454 	.word	0x20000454
 800faac:	0801256d 	.word	0x0801256d
 800fab0:	20000464 	.word	0x20000464

0800fab4 <cleanup_stdio>:
 800fab4:	6841      	ldr	r1, [r0, #4]
 800fab6:	4b0c      	ldr	r3, [pc, #48]	@ (800fae8 <cleanup_stdio+0x34>)
 800fab8:	4299      	cmp	r1, r3
 800faba:	b510      	push	{r4, lr}
 800fabc:	4604      	mov	r4, r0
 800fabe:	d001      	beq.n	800fac4 <cleanup_stdio+0x10>
 800fac0:	f002 fd54 	bl	801256c <_fflush_r>
 800fac4:	68a1      	ldr	r1, [r4, #8]
 800fac6:	4b09      	ldr	r3, [pc, #36]	@ (800faec <cleanup_stdio+0x38>)
 800fac8:	4299      	cmp	r1, r3
 800faca:	d002      	beq.n	800fad2 <cleanup_stdio+0x1e>
 800facc:	4620      	mov	r0, r4
 800face:	f002 fd4d 	bl	801256c <_fflush_r>
 800fad2:	68e1      	ldr	r1, [r4, #12]
 800fad4:	4b06      	ldr	r3, [pc, #24]	@ (800faf0 <cleanup_stdio+0x3c>)
 800fad6:	4299      	cmp	r1, r3
 800fad8:	d004      	beq.n	800fae4 <cleanup_stdio+0x30>
 800fada:	4620      	mov	r0, r4
 800fadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fae0:	f002 bd44 	b.w	801256c <_fflush_r>
 800fae4:	bd10      	pop	{r4, pc}
 800fae6:	bf00      	nop
 800fae8:	200065e4 	.word	0x200065e4
 800faec:	2000664c 	.word	0x2000664c
 800faf0:	200066b4 	.word	0x200066b4

0800faf4 <global_stdio_init.part.0>:
 800faf4:	b510      	push	{r4, lr}
 800faf6:	4b0b      	ldr	r3, [pc, #44]	@ (800fb24 <global_stdio_init.part.0+0x30>)
 800faf8:	4c0b      	ldr	r4, [pc, #44]	@ (800fb28 <global_stdio_init.part.0+0x34>)
 800fafa:	4a0c      	ldr	r2, [pc, #48]	@ (800fb2c <global_stdio_init.part.0+0x38>)
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	4620      	mov	r0, r4
 800fb00:	2200      	movs	r2, #0
 800fb02:	2104      	movs	r1, #4
 800fb04:	f7ff ff94 	bl	800fa30 <std>
 800fb08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	2109      	movs	r1, #9
 800fb10:	f7ff ff8e 	bl	800fa30 <std>
 800fb14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fb18:	2202      	movs	r2, #2
 800fb1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb1e:	2112      	movs	r1, #18
 800fb20:	f7ff bf86 	b.w	800fa30 <std>
 800fb24:	2000671c 	.word	0x2000671c
 800fb28:	200065e4 	.word	0x200065e4
 800fb2c:	0800fa9d 	.word	0x0800fa9d

0800fb30 <__sfp_lock_acquire>:
 800fb30:	4801      	ldr	r0, [pc, #4]	@ (800fb38 <__sfp_lock_acquire+0x8>)
 800fb32:	f000 b920 	b.w	800fd76 <__retarget_lock_acquire_recursive>
 800fb36:	bf00      	nop
 800fb38:	20006725 	.word	0x20006725

0800fb3c <__sfp_lock_release>:
 800fb3c:	4801      	ldr	r0, [pc, #4]	@ (800fb44 <__sfp_lock_release+0x8>)
 800fb3e:	f000 b91b 	b.w	800fd78 <__retarget_lock_release_recursive>
 800fb42:	bf00      	nop
 800fb44:	20006725 	.word	0x20006725

0800fb48 <__sinit>:
 800fb48:	b510      	push	{r4, lr}
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	f7ff fff0 	bl	800fb30 <__sfp_lock_acquire>
 800fb50:	6a23      	ldr	r3, [r4, #32]
 800fb52:	b11b      	cbz	r3, 800fb5c <__sinit+0x14>
 800fb54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb58:	f7ff bff0 	b.w	800fb3c <__sfp_lock_release>
 800fb5c:	4b04      	ldr	r3, [pc, #16]	@ (800fb70 <__sinit+0x28>)
 800fb5e:	6223      	str	r3, [r4, #32]
 800fb60:	4b04      	ldr	r3, [pc, #16]	@ (800fb74 <__sinit+0x2c>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d1f5      	bne.n	800fb54 <__sinit+0xc>
 800fb68:	f7ff ffc4 	bl	800faf4 <global_stdio_init.part.0>
 800fb6c:	e7f2      	b.n	800fb54 <__sinit+0xc>
 800fb6e:	bf00      	nop
 800fb70:	0800fab5 	.word	0x0800fab5
 800fb74:	2000671c 	.word	0x2000671c

0800fb78 <_fwalk_sglue>:
 800fb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb7c:	4607      	mov	r7, r0
 800fb7e:	4688      	mov	r8, r1
 800fb80:	4614      	mov	r4, r2
 800fb82:	2600      	movs	r6, #0
 800fb84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb88:	f1b9 0901 	subs.w	r9, r9, #1
 800fb8c:	d505      	bpl.n	800fb9a <_fwalk_sglue+0x22>
 800fb8e:	6824      	ldr	r4, [r4, #0]
 800fb90:	2c00      	cmp	r4, #0
 800fb92:	d1f7      	bne.n	800fb84 <_fwalk_sglue+0xc>
 800fb94:	4630      	mov	r0, r6
 800fb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb9a:	89ab      	ldrh	r3, [r5, #12]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d907      	bls.n	800fbb0 <_fwalk_sglue+0x38>
 800fba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fba4:	3301      	adds	r3, #1
 800fba6:	d003      	beq.n	800fbb0 <_fwalk_sglue+0x38>
 800fba8:	4629      	mov	r1, r5
 800fbaa:	4638      	mov	r0, r7
 800fbac:	47c0      	blx	r8
 800fbae:	4306      	orrs	r6, r0
 800fbb0:	3568      	adds	r5, #104	@ 0x68
 800fbb2:	e7e9      	b.n	800fb88 <_fwalk_sglue+0x10>

0800fbb4 <siprintf>:
 800fbb4:	b40e      	push	{r1, r2, r3}
 800fbb6:	b500      	push	{lr}
 800fbb8:	b09c      	sub	sp, #112	@ 0x70
 800fbba:	ab1d      	add	r3, sp, #116	@ 0x74
 800fbbc:	9002      	str	r0, [sp, #8]
 800fbbe:	9006      	str	r0, [sp, #24]
 800fbc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fbc4:	4809      	ldr	r0, [pc, #36]	@ (800fbec <siprintf+0x38>)
 800fbc6:	9107      	str	r1, [sp, #28]
 800fbc8:	9104      	str	r1, [sp, #16]
 800fbca:	4909      	ldr	r1, [pc, #36]	@ (800fbf0 <siprintf+0x3c>)
 800fbcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbd0:	9105      	str	r1, [sp, #20]
 800fbd2:	6800      	ldr	r0, [r0, #0]
 800fbd4:	9301      	str	r3, [sp, #4]
 800fbd6:	a902      	add	r1, sp, #8
 800fbd8:	f002 fb48 	bl	801226c <_svfiprintf_r>
 800fbdc:	9b02      	ldr	r3, [sp, #8]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	701a      	strb	r2, [r3, #0]
 800fbe2:	b01c      	add	sp, #112	@ 0x70
 800fbe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbe8:	b003      	add	sp, #12
 800fbea:	4770      	bx	lr
 800fbec:	20000460 	.word	0x20000460
 800fbf0:	ffff0208 	.word	0xffff0208

0800fbf4 <__sread>:
 800fbf4:	b510      	push	{r4, lr}
 800fbf6:	460c      	mov	r4, r1
 800fbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbfc:	f000 f86c 	bl	800fcd8 <_read_r>
 800fc00:	2800      	cmp	r0, #0
 800fc02:	bfab      	itete	ge
 800fc04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fc06:	89a3      	ldrhlt	r3, [r4, #12]
 800fc08:	181b      	addge	r3, r3, r0
 800fc0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fc0e:	bfac      	ite	ge
 800fc10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fc12:	81a3      	strhlt	r3, [r4, #12]
 800fc14:	bd10      	pop	{r4, pc}

0800fc16 <__swrite>:
 800fc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc1a:	461f      	mov	r7, r3
 800fc1c:	898b      	ldrh	r3, [r1, #12]
 800fc1e:	05db      	lsls	r3, r3, #23
 800fc20:	4605      	mov	r5, r0
 800fc22:	460c      	mov	r4, r1
 800fc24:	4616      	mov	r6, r2
 800fc26:	d505      	bpl.n	800fc34 <__swrite+0x1e>
 800fc28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc2c:	2302      	movs	r3, #2
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f000 f840 	bl	800fcb4 <_lseek_r>
 800fc34:	89a3      	ldrh	r3, [r4, #12]
 800fc36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc3e:	81a3      	strh	r3, [r4, #12]
 800fc40:	4632      	mov	r2, r6
 800fc42:	463b      	mov	r3, r7
 800fc44:	4628      	mov	r0, r5
 800fc46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc4a:	f000 b857 	b.w	800fcfc <_write_r>

0800fc4e <__sseek>:
 800fc4e:	b510      	push	{r4, lr}
 800fc50:	460c      	mov	r4, r1
 800fc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc56:	f000 f82d 	bl	800fcb4 <_lseek_r>
 800fc5a:	1c43      	adds	r3, r0, #1
 800fc5c:	89a3      	ldrh	r3, [r4, #12]
 800fc5e:	bf15      	itete	ne
 800fc60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc6a:	81a3      	strheq	r3, [r4, #12]
 800fc6c:	bf18      	it	ne
 800fc6e:	81a3      	strhne	r3, [r4, #12]
 800fc70:	bd10      	pop	{r4, pc}

0800fc72 <__sclose>:
 800fc72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc76:	f000 b80d 	b.w	800fc94 <_close_r>

0800fc7a <memset>:
 800fc7a:	4402      	add	r2, r0
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d100      	bne.n	800fc84 <memset+0xa>
 800fc82:	4770      	bx	lr
 800fc84:	f803 1b01 	strb.w	r1, [r3], #1
 800fc88:	e7f9      	b.n	800fc7e <memset+0x4>
	...

0800fc8c <_localeconv_r>:
 800fc8c:	4800      	ldr	r0, [pc, #0]	@ (800fc90 <_localeconv_r+0x4>)
 800fc8e:	4770      	bx	lr
 800fc90:	200005a0 	.word	0x200005a0

0800fc94 <_close_r>:
 800fc94:	b538      	push	{r3, r4, r5, lr}
 800fc96:	4d06      	ldr	r5, [pc, #24]	@ (800fcb0 <_close_r+0x1c>)
 800fc98:	2300      	movs	r3, #0
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	4608      	mov	r0, r1
 800fc9e:	602b      	str	r3, [r5, #0]
 800fca0:	f7fa fd8a 	bl	800a7b8 <_close>
 800fca4:	1c43      	adds	r3, r0, #1
 800fca6:	d102      	bne.n	800fcae <_close_r+0x1a>
 800fca8:	682b      	ldr	r3, [r5, #0]
 800fcaa:	b103      	cbz	r3, 800fcae <_close_r+0x1a>
 800fcac:	6023      	str	r3, [r4, #0]
 800fcae:	bd38      	pop	{r3, r4, r5, pc}
 800fcb0:	20006720 	.word	0x20006720

0800fcb4 <_lseek_r>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4d07      	ldr	r5, [pc, #28]	@ (800fcd4 <_lseek_r+0x20>)
 800fcb8:	4604      	mov	r4, r0
 800fcba:	4608      	mov	r0, r1
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	602a      	str	r2, [r5, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f7fa fd9f 	bl	800a806 <_lseek>
 800fcc8:	1c43      	adds	r3, r0, #1
 800fcca:	d102      	bne.n	800fcd2 <_lseek_r+0x1e>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	b103      	cbz	r3, 800fcd2 <_lseek_r+0x1e>
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	bd38      	pop	{r3, r4, r5, pc}
 800fcd4:	20006720 	.word	0x20006720

0800fcd8 <_read_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4d07      	ldr	r5, [pc, #28]	@ (800fcf8 <_read_r+0x20>)
 800fcdc:	4604      	mov	r4, r0
 800fcde:	4608      	mov	r0, r1
 800fce0:	4611      	mov	r1, r2
 800fce2:	2200      	movs	r2, #0
 800fce4:	602a      	str	r2, [r5, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	f7fa fd2d 	bl	800a746 <_read>
 800fcec:	1c43      	adds	r3, r0, #1
 800fcee:	d102      	bne.n	800fcf6 <_read_r+0x1e>
 800fcf0:	682b      	ldr	r3, [r5, #0]
 800fcf2:	b103      	cbz	r3, 800fcf6 <_read_r+0x1e>
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	bd38      	pop	{r3, r4, r5, pc}
 800fcf8:	20006720 	.word	0x20006720

0800fcfc <_write_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	4d07      	ldr	r5, [pc, #28]	@ (800fd1c <_write_r+0x20>)
 800fd00:	4604      	mov	r4, r0
 800fd02:	4608      	mov	r0, r1
 800fd04:	4611      	mov	r1, r2
 800fd06:	2200      	movs	r2, #0
 800fd08:	602a      	str	r2, [r5, #0]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	f7fa fd38 	bl	800a780 <_write>
 800fd10:	1c43      	adds	r3, r0, #1
 800fd12:	d102      	bne.n	800fd1a <_write_r+0x1e>
 800fd14:	682b      	ldr	r3, [r5, #0]
 800fd16:	b103      	cbz	r3, 800fd1a <_write_r+0x1e>
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	bd38      	pop	{r3, r4, r5, pc}
 800fd1c:	20006720 	.word	0x20006720

0800fd20 <__errno>:
 800fd20:	4b01      	ldr	r3, [pc, #4]	@ (800fd28 <__errno+0x8>)
 800fd22:	6818      	ldr	r0, [r3, #0]
 800fd24:	4770      	bx	lr
 800fd26:	bf00      	nop
 800fd28:	20000460 	.word	0x20000460

0800fd2c <__libc_init_array>:
 800fd2c:	b570      	push	{r4, r5, r6, lr}
 800fd2e:	4d0d      	ldr	r5, [pc, #52]	@ (800fd64 <__libc_init_array+0x38>)
 800fd30:	4c0d      	ldr	r4, [pc, #52]	@ (800fd68 <__libc_init_array+0x3c>)
 800fd32:	1b64      	subs	r4, r4, r5
 800fd34:	10a4      	asrs	r4, r4, #2
 800fd36:	2600      	movs	r6, #0
 800fd38:	42a6      	cmp	r6, r4
 800fd3a:	d109      	bne.n	800fd50 <__libc_init_array+0x24>
 800fd3c:	4d0b      	ldr	r5, [pc, #44]	@ (800fd6c <__libc_init_array+0x40>)
 800fd3e:	4c0c      	ldr	r4, [pc, #48]	@ (800fd70 <__libc_init_array+0x44>)
 800fd40:	f003 faf8 	bl	8013334 <_init>
 800fd44:	1b64      	subs	r4, r4, r5
 800fd46:	10a4      	asrs	r4, r4, #2
 800fd48:	2600      	movs	r6, #0
 800fd4a:	42a6      	cmp	r6, r4
 800fd4c:	d105      	bne.n	800fd5a <__libc_init_array+0x2e>
 800fd4e:	bd70      	pop	{r4, r5, r6, pc}
 800fd50:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd54:	4798      	blx	r3
 800fd56:	3601      	adds	r6, #1
 800fd58:	e7ee      	b.n	800fd38 <__libc_init_array+0xc>
 800fd5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd5e:	4798      	blx	r3
 800fd60:	3601      	adds	r6, #1
 800fd62:	e7f2      	b.n	800fd4a <__libc_init_array+0x1e>
 800fd64:	08016520 	.word	0x08016520
 800fd68:	08016520 	.word	0x08016520
 800fd6c:	08016520 	.word	0x08016520
 800fd70:	08016524 	.word	0x08016524

0800fd74 <__retarget_lock_init_recursive>:
 800fd74:	4770      	bx	lr

0800fd76 <__retarget_lock_acquire_recursive>:
 800fd76:	4770      	bx	lr

0800fd78 <__retarget_lock_release_recursive>:
 800fd78:	4770      	bx	lr

0800fd7a <memcpy>:
 800fd7a:	440a      	add	r2, r1
 800fd7c:	4291      	cmp	r1, r2
 800fd7e:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd82:	d100      	bne.n	800fd86 <memcpy+0xc>
 800fd84:	4770      	bx	lr
 800fd86:	b510      	push	{r4, lr}
 800fd88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd90:	4291      	cmp	r1, r2
 800fd92:	d1f9      	bne.n	800fd88 <memcpy+0xe>
 800fd94:	bd10      	pop	{r4, pc}
	...

0800fd98 <nanf>:
 800fd98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fda0 <nanf+0x8>
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	7fc00000 	.word	0x7fc00000

0800fda4 <quorem>:
 800fda4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda8:	6903      	ldr	r3, [r0, #16]
 800fdaa:	690c      	ldr	r4, [r1, #16]
 800fdac:	42a3      	cmp	r3, r4
 800fdae:	4607      	mov	r7, r0
 800fdb0:	db7e      	blt.n	800feb0 <quorem+0x10c>
 800fdb2:	3c01      	subs	r4, #1
 800fdb4:	f101 0814 	add.w	r8, r1, #20
 800fdb8:	00a3      	lsls	r3, r4, #2
 800fdba:	f100 0514 	add.w	r5, r0, #20
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdc4:	9301      	str	r3, [sp, #4]
 800fdc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fdca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdce:	3301      	adds	r3, #1
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdd6:	fbb2 f6f3 	udiv	r6, r2, r3
 800fdda:	d32e      	bcc.n	800fe3a <quorem+0x96>
 800fddc:	f04f 0a00 	mov.w	sl, #0
 800fde0:	46c4      	mov	ip, r8
 800fde2:	46ae      	mov	lr, r5
 800fde4:	46d3      	mov	fp, sl
 800fde6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fdea:	b298      	uxth	r0, r3
 800fdec:	fb06 a000 	mla	r0, r6, r0, sl
 800fdf0:	0c02      	lsrs	r2, r0, #16
 800fdf2:	0c1b      	lsrs	r3, r3, #16
 800fdf4:	fb06 2303 	mla	r3, r6, r3, r2
 800fdf8:	f8de 2000 	ldr.w	r2, [lr]
 800fdfc:	b280      	uxth	r0, r0
 800fdfe:	b292      	uxth	r2, r2
 800fe00:	1a12      	subs	r2, r2, r0
 800fe02:	445a      	add	r2, fp
 800fe04:	f8de 0000 	ldr.w	r0, [lr]
 800fe08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fe12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fe16:	b292      	uxth	r2, r2
 800fe18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fe1c:	45e1      	cmp	r9, ip
 800fe1e:	f84e 2b04 	str.w	r2, [lr], #4
 800fe22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fe26:	d2de      	bcs.n	800fde6 <quorem+0x42>
 800fe28:	9b00      	ldr	r3, [sp, #0]
 800fe2a:	58eb      	ldr	r3, [r5, r3]
 800fe2c:	b92b      	cbnz	r3, 800fe3a <quorem+0x96>
 800fe2e:	9b01      	ldr	r3, [sp, #4]
 800fe30:	3b04      	subs	r3, #4
 800fe32:	429d      	cmp	r5, r3
 800fe34:	461a      	mov	r2, r3
 800fe36:	d32f      	bcc.n	800fe98 <quorem+0xf4>
 800fe38:	613c      	str	r4, [r7, #16]
 800fe3a:	4638      	mov	r0, r7
 800fe3c:	f001 f9c4 	bl	80111c8 <__mcmp>
 800fe40:	2800      	cmp	r0, #0
 800fe42:	db25      	blt.n	800fe90 <quorem+0xec>
 800fe44:	4629      	mov	r1, r5
 800fe46:	2000      	movs	r0, #0
 800fe48:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe4c:	f8d1 c000 	ldr.w	ip, [r1]
 800fe50:	fa1f fe82 	uxth.w	lr, r2
 800fe54:	fa1f f38c 	uxth.w	r3, ip
 800fe58:	eba3 030e 	sub.w	r3, r3, lr
 800fe5c:	4403      	add	r3, r0
 800fe5e:	0c12      	lsrs	r2, r2, #16
 800fe60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe6e:	45c1      	cmp	r9, r8
 800fe70:	f841 3b04 	str.w	r3, [r1], #4
 800fe74:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe78:	d2e6      	bcs.n	800fe48 <quorem+0xa4>
 800fe7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe82:	b922      	cbnz	r2, 800fe8e <quorem+0xea>
 800fe84:	3b04      	subs	r3, #4
 800fe86:	429d      	cmp	r5, r3
 800fe88:	461a      	mov	r2, r3
 800fe8a:	d30b      	bcc.n	800fea4 <quorem+0x100>
 800fe8c:	613c      	str	r4, [r7, #16]
 800fe8e:	3601      	adds	r6, #1
 800fe90:	4630      	mov	r0, r6
 800fe92:	b003      	add	sp, #12
 800fe94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe98:	6812      	ldr	r2, [r2, #0]
 800fe9a:	3b04      	subs	r3, #4
 800fe9c:	2a00      	cmp	r2, #0
 800fe9e:	d1cb      	bne.n	800fe38 <quorem+0x94>
 800fea0:	3c01      	subs	r4, #1
 800fea2:	e7c6      	b.n	800fe32 <quorem+0x8e>
 800fea4:	6812      	ldr	r2, [r2, #0]
 800fea6:	3b04      	subs	r3, #4
 800fea8:	2a00      	cmp	r2, #0
 800feaa:	d1ef      	bne.n	800fe8c <quorem+0xe8>
 800feac:	3c01      	subs	r4, #1
 800feae:	e7ea      	b.n	800fe86 <quorem+0xe2>
 800feb0:	2000      	movs	r0, #0
 800feb2:	e7ee      	b.n	800fe92 <quorem+0xee>
 800feb4:	0000      	movs	r0, r0
	...

0800feb8 <_dtoa_r>:
 800feb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800febc:	69c7      	ldr	r7, [r0, #28]
 800febe:	b099      	sub	sp, #100	@ 0x64
 800fec0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fec4:	ec55 4b10 	vmov	r4, r5, d0
 800fec8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800feca:	9109      	str	r1, [sp, #36]	@ 0x24
 800fecc:	4683      	mov	fp, r0
 800fece:	920e      	str	r2, [sp, #56]	@ 0x38
 800fed0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fed2:	b97f      	cbnz	r7, 800fef4 <_dtoa_r+0x3c>
 800fed4:	2010      	movs	r0, #16
 800fed6:	f000 fdfd 	bl	8010ad4 <malloc>
 800feda:	4602      	mov	r2, r0
 800fedc:	f8cb 001c 	str.w	r0, [fp, #28]
 800fee0:	b920      	cbnz	r0, 800feec <_dtoa_r+0x34>
 800fee2:	4ba7      	ldr	r3, [pc, #668]	@ (8010180 <_dtoa_r+0x2c8>)
 800fee4:	21ef      	movs	r1, #239	@ 0xef
 800fee6:	48a7      	ldr	r0, [pc, #668]	@ (8010184 <_dtoa_r+0x2cc>)
 800fee8:	f002 fbae 	bl	8012648 <__assert_func>
 800feec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fef0:	6007      	str	r7, [r0, #0]
 800fef2:	60c7      	str	r7, [r0, #12]
 800fef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fef8:	6819      	ldr	r1, [r3, #0]
 800fefa:	b159      	cbz	r1, 800ff14 <_dtoa_r+0x5c>
 800fefc:	685a      	ldr	r2, [r3, #4]
 800fefe:	604a      	str	r2, [r1, #4]
 800ff00:	2301      	movs	r3, #1
 800ff02:	4093      	lsls	r3, r2
 800ff04:	608b      	str	r3, [r1, #8]
 800ff06:	4658      	mov	r0, fp
 800ff08:	f000 feda 	bl	8010cc0 <_Bfree>
 800ff0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ff10:	2200      	movs	r2, #0
 800ff12:	601a      	str	r2, [r3, #0]
 800ff14:	1e2b      	subs	r3, r5, #0
 800ff16:	bfb9      	ittee	lt
 800ff18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ff1c:	9303      	strlt	r3, [sp, #12]
 800ff1e:	2300      	movge	r3, #0
 800ff20:	6033      	strge	r3, [r6, #0]
 800ff22:	9f03      	ldr	r7, [sp, #12]
 800ff24:	4b98      	ldr	r3, [pc, #608]	@ (8010188 <_dtoa_r+0x2d0>)
 800ff26:	bfbc      	itt	lt
 800ff28:	2201      	movlt	r2, #1
 800ff2a:	6032      	strlt	r2, [r6, #0]
 800ff2c:	43bb      	bics	r3, r7
 800ff2e:	d112      	bne.n	800ff56 <_dtoa_r+0x9e>
 800ff30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ff32:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ff36:	6013      	str	r3, [r2, #0]
 800ff38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff3c:	4323      	orrs	r3, r4
 800ff3e:	f000 854d 	beq.w	80109dc <_dtoa_r+0xb24>
 800ff42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801019c <_dtoa_r+0x2e4>
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f000 854f 	beq.w	80109ec <_dtoa_r+0xb34>
 800ff4e:	f10a 0303 	add.w	r3, sl, #3
 800ff52:	f000 bd49 	b.w	80109e8 <_dtoa_r+0xb30>
 800ff56:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	ec51 0b17 	vmov	r0, r1, d7
 800ff60:	2300      	movs	r3, #0
 800ff62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ff66:	f7f0 fdbf 	bl	8000ae8 <__aeabi_dcmpeq>
 800ff6a:	4680      	mov	r8, r0
 800ff6c:	b158      	cbz	r0, 800ff86 <_dtoa_r+0xce>
 800ff6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ff70:	2301      	movs	r3, #1
 800ff72:	6013      	str	r3, [r2, #0]
 800ff74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff76:	b113      	cbz	r3, 800ff7e <_dtoa_r+0xc6>
 800ff78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ff7a:	4b84      	ldr	r3, [pc, #528]	@ (801018c <_dtoa_r+0x2d4>)
 800ff7c:	6013      	str	r3, [r2, #0]
 800ff7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80101a0 <_dtoa_r+0x2e8>
 800ff82:	f000 bd33 	b.w	80109ec <_dtoa_r+0xb34>
 800ff86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ff8a:	aa16      	add	r2, sp, #88	@ 0x58
 800ff8c:	a917      	add	r1, sp, #92	@ 0x5c
 800ff8e:	4658      	mov	r0, fp
 800ff90:	f001 fa3a 	bl	8011408 <__d2b>
 800ff94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ff98:	4681      	mov	r9, r0
 800ff9a:	2e00      	cmp	r6, #0
 800ff9c:	d077      	beq.n	801008e <_dtoa_r+0x1d6>
 800ff9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ffa0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ffa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ffac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ffb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ffb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ffb8:	4619      	mov	r1, r3
 800ffba:	2200      	movs	r2, #0
 800ffbc:	4b74      	ldr	r3, [pc, #464]	@ (8010190 <_dtoa_r+0x2d8>)
 800ffbe:	f7f0 f973 	bl	80002a8 <__aeabi_dsub>
 800ffc2:	a369      	add	r3, pc, #420	@ (adr r3, 8010168 <_dtoa_r+0x2b0>)
 800ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc8:	f7f0 fb26 	bl	8000618 <__aeabi_dmul>
 800ffcc:	a368      	add	r3, pc, #416	@ (adr r3, 8010170 <_dtoa_r+0x2b8>)
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	f7f0 f96b 	bl	80002ac <__adddf3>
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	4630      	mov	r0, r6
 800ffda:	460d      	mov	r5, r1
 800ffdc:	f7f0 fab2 	bl	8000544 <__aeabi_i2d>
 800ffe0:	a365      	add	r3, pc, #404	@ (adr r3, 8010178 <_dtoa_r+0x2c0>)
 800ffe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe6:	f7f0 fb17 	bl	8000618 <__aeabi_dmul>
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	4620      	mov	r0, r4
 800fff0:	4629      	mov	r1, r5
 800fff2:	f7f0 f95b 	bl	80002ac <__adddf3>
 800fff6:	4604      	mov	r4, r0
 800fff8:	460d      	mov	r5, r1
 800fffa:	f7f0 fdbd 	bl	8000b78 <__aeabi_d2iz>
 800fffe:	2200      	movs	r2, #0
 8010000:	4607      	mov	r7, r0
 8010002:	2300      	movs	r3, #0
 8010004:	4620      	mov	r0, r4
 8010006:	4629      	mov	r1, r5
 8010008:	f7f0 fd78 	bl	8000afc <__aeabi_dcmplt>
 801000c:	b140      	cbz	r0, 8010020 <_dtoa_r+0x168>
 801000e:	4638      	mov	r0, r7
 8010010:	f7f0 fa98 	bl	8000544 <__aeabi_i2d>
 8010014:	4622      	mov	r2, r4
 8010016:	462b      	mov	r3, r5
 8010018:	f7f0 fd66 	bl	8000ae8 <__aeabi_dcmpeq>
 801001c:	b900      	cbnz	r0, 8010020 <_dtoa_r+0x168>
 801001e:	3f01      	subs	r7, #1
 8010020:	2f16      	cmp	r7, #22
 8010022:	d851      	bhi.n	80100c8 <_dtoa_r+0x210>
 8010024:	4b5b      	ldr	r3, [pc, #364]	@ (8010194 <_dtoa_r+0x2dc>)
 8010026:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010032:	f7f0 fd63 	bl	8000afc <__aeabi_dcmplt>
 8010036:	2800      	cmp	r0, #0
 8010038:	d048      	beq.n	80100cc <_dtoa_r+0x214>
 801003a:	3f01      	subs	r7, #1
 801003c:	2300      	movs	r3, #0
 801003e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010040:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010042:	1b9b      	subs	r3, r3, r6
 8010044:	1e5a      	subs	r2, r3, #1
 8010046:	bf44      	itt	mi
 8010048:	f1c3 0801 	rsbmi	r8, r3, #1
 801004c:	2300      	movmi	r3, #0
 801004e:	9208      	str	r2, [sp, #32]
 8010050:	bf54      	ite	pl
 8010052:	f04f 0800 	movpl.w	r8, #0
 8010056:	9308      	strmi	r3, [sp, #32]
 8010058:	2f00      	cmp	r7, #0
 801005a:	db39      	blt.n	80100d0 <_dtoa_r+0x218>
 801005c:	9b08      	ldr	r3, [sp, #32]
 801005e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010060:	443b      	add	r3, r7
 8010062:	9308      	str	r3, [sp, #32]
 8010064:	2300      	movs	r3, #0
 8010066:	930a      	str	r3, [sp, #40]	@ 0x28
 8010068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801006a:	2b09      	cmp	r3, #9
 801006c:	d864      	bhi.n	8010138 <_dtoa_r+0x280>
 801006e:	2b05      	cmp	r3, #5
 8010070:	bfc4      	itt	gt
 8010072:	3b04      	subgt	r3, #4
 8010074:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010078:	f1a3 0302 	sub.w	r3, r3, #2
 801007c:	bfcc      	ite	gt
 801007e:	2400      	movgt	r4, #0
 8010080:	2401      	movle	r4, #1
 8010082:	2b03      	cmp	r3, #3
 8010084:	d863      	bhi.n	801014e <_dtoa_r+0x296>
 8010086:	e8df f003 	tbb	[pc, r3]
 801008a:	372a      	.short	0x372a
 801008c:	5535      	.short	0x5535
 801008e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010092:	441e      	add	r6, r3
 8010094:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010098:	2b20      	cmp	r3, #32
 801009a:	bfc1      	itttt	gt
 801009c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80100a0:	409f      	lslgt	r7, r3
 80100a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80100a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80100aa:	bfd6      	itet	le
 80100ac:	f1c3 0320 	rsble	r3, r3, #32
 80100b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80100b4:	fa04 f003 	lslle.w	r0, r4, r3
 80100b8:	f7f0 fa34 	bl	8000524 <__aeabi_ui2d>
 80100bc:	2201      	movs	r2, #1
 80100be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80100c2:	3e01      	subs	r6, #1
 80100c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80100c6:	e777      	b.n	800ffb8 <_dtoa_r+0x100>
 80100c8:	2301      	movs	r3, #1
 80100ca:	e7b8      	b.n	801003e <_dtoa_r+0x186>
 80100cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80100ce:	e7b7      	b.n	8010040 <_dtoa_r+0x188>
 80100d0:	427b      	negs	r3, r7
 80100d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80100d4:	2300      	movs	r3, #0
 80100d6:	eba8 0807 	sub.w	r8, r8, r7
 80100da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80100dc:	e7c4      	b.n	8010068 <_dtoa_r+0x1b0>
 80100de:	2300      	movs	r3, #0
 80100e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	dc35      	bgt.n	8010154 <_dtoa_r+0x29c>
 80100e8:	2301      	movs	r3, #1
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	9307      	str	r3, [sp, #28]
 80100ee:	461a      	mov	r2, r3
 80100f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80100f2:	e00b      	b.n	801010c <_dtoa_r+0x254>
 80100f4:	2301      	movs	r3, #1
 80100f6:	e7f3      	b.n	80100e0 <_dtoa_r+0x228>
 80100f8:	2300      	movs	r3, #0
 80100fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100fe:	18fb      	adds	r3, r7, r3
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	3301      	adds	r3, #1
 8010104:	2b01      	cmp	r3, #1
 8010106:	9307      	str	r3, [sp, #28]
 8010108:	bfb8      	it	lt
 801010a:	2301      	movlt	r3, #1
 801010c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010110:	2100      	movs	r1, #0
 8010112:	2204      	movs	r2, #4
 8010114:	f102 0514 	add.w	r5, r2, #20
 8010118:	429d      	cmp	r5, r3
 801011a:	d91f      	bls.n	801015c <_dtoa_r+0x2a4>
 801011c:	6041      	str	r1, [r0, #4]
 801011e:	4658      	mov	r0, fp
 8010120:	f000 fd8e 	bl	8010c40 <_Balloc>
 8010124:	4682      	mov	sl, r0
 8010126:	2800      	cmp	r0, #0
 8010128:	d13c      	bne.n	80101a4 <_dtoa_r+0x2ec>
 801012a:	4b1b      	ldr	r3, [pc, #108]	@ (8010198 <_dtoa_r+0x2e0>)
 801012c:	4602      	mov	r2, r0
 801012e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010132:	e6d8      	b.n	800fee6 <_dtoa_r+0x2e>
 8010134:	2301      	movs	r3, #1
 8010136:	e7e0      	b.n	80100fa <_dtoa_r+0x242>
 8010138:	2401      	movs	r4, #1
 801013a:	2300      	movs	r3, #0
 801013c:	9309      	str	r3, [sp, #36]	@ 0x24
 801013e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010140:	f04f 33ff 	mov.w	r3, #4294967295
 8010144:	9300      	str	r3, [sp, #0]
 8010146:	9307      	str	r3, [sp, #28]
 8010148:	2200      	movs	r2, #0
 801014a:	2312      	movs	r3, #18
 801014c:	e7d0      	b.n	80100f0 <_dtoa_r+0x238>
 801014e:	2301      	movs	r3, #1
 8010150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010152:	e7f5      	b.n	8010140 <_dtoa_r+0x288>
 8010154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	9307      	str	r3, [sp, #28]
 801015a:	e7d7      	b.n	801010c <_dtoa_r+0x254>
 801015c:	3101      	adds	r1, #1
 801015e:	0052      	lsls	r2, r2, #1
 8010160:	e7d8      	b.n	8010114 <_dtoa_r+0x25c>
 8010162:	bf00      	nop
 8010164:	f3af 8000 	nop.w
 8010168:	636f4361 	.word	0x636f4361
 801016c:	3fd287a7 	.word	0x3fd287a7
 8010170:	8b60c8b3 	.word	0x8b60c8b3
 8010174:	3fc68a28 	.word	0x3fc68a28
 8010178:	509f79fb 	.word	0x509f79fb
 801017c:	3fd34413 	.word	0x3fd34413
 8010180:	08016233 	.word	0x08016233
 8010184:	0801624a 	.word	0x0801624a
 8010188:	7ff00000 	.word	0x7ff00000
 801018c:	080161fe 	.word	0x080161fe
 8010190:	3ff80000 	.word	0x3ff80000
 8010194:	08016340 	.word	0x08016340
 8010198:	080162a2 	.word	0x080162a2
 801019c:	0801622f 	.word	0x0801622f
 80101a0:	080161fd 	.word	0x080161fd
 80101a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80101a8:	6018      	str	r0, [r3, #0]
 80101aa:	9b07      	ldr	r3, [sp, #28]
 80101ac:	2b0e      	cmp	r3, #14
 80101ae:	f200 80a4 	bhi.w	80102fa <_dtoa_r+0x442>
 80101b2:	2c00      	cmp	r4, #0
 80101b4:	f000 80a1 	beq.w	80102fa <_dtoa_r+0x442>
 80101b8:	2f00      	cmp	r7, #0
 80101ba:	dd33      	ble.n	8010224 <_dtoa_r+0x36c>
 80101bc:	4bad      	ldr	r3, [pc, #692]	@ (8010474 <_dtoa_r+0x5bc>)
 80101be:	f007 020f 	and.w	r2, r7, #15
 80101c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101c6:	ed93 7b00 	vldr	d7, [r3]
 80101ca:	05f8      	lsls	r0, r7, #23
 80101cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80101d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80101d4:	d516      	bpl.n	8010204 <_dtoa_r+0x34c>
 80101d6:	4ba8      	ldr	r3, [pc, #672]	@ (8010478 <_dtoa_r+0x5c0>)
 80101d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101e0:	f7f0 fb44 	bl	800086c <__aeabi_ddiv>
 80101e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101e8:	f004 040f 	and.w	r4, r4, #15
 80101ec:	2603      	movs	r6, #3
 80101ee:	4da2      	ldr	r5, [pc, #648]	@ (8010478 <_dtoa_r+0x5c0>)
 80101f0:	b954      	cbnz	r4, 8010208 <_dtoa_r+0x350>
 80101f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101fa:	f7f0 fb37 	bl	800086c <__aeabi_ddiv>
 80101fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010202:	e028      	b.n	8010256 <_dtoa_r+0x39e>
 8010204:	2602      	movs	r6, #2
 8010206:	e7f2      	b.n	80101ee <_dtoa_r+0x336>
 8010208:	07e1      	lsls	r1, r4, #31
 801020a:	d508      	bpl.n	801021e <_dtoa_r+0x366>
 801020c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010210:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010214:	f7f0 fa00 	bl	8000618 <__aeabi_dmul>
 8010218:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801021c:	3601      	adds	r6, #1
 801021e:	1064      	asrs	r4, r4, #1
 8010220:	3508      	adds	r5, #8
 8010222:	e7e5      	b.n	80101f0 <_dtoa_r+0x338>
 8010224:	f000 80d2 	beq.w	80103cc <_dtoa_r+0x514>
 8010228:	427c      	negs	r4, r7
 801022a:	4b92      	ldr	r3, [pc, #584]	@ (8010474 <_dtoa_r+0x5bc>)
 801022c:	4d92      	ldr	r5, [pc, #584]	@ (8010478 <_dtoa_r+0x5c0>)
 801022e:	f004 020f 	and.w	r2, r4, #15
 8010232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801023e:	f7f0 f9eb 	bl	8000618 <__aeabi_dmul>
 8010242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010246:	1124      	asrs	r4, r4, #4
 8010248:	2300      	movs	r3, #0
 801024a:	2602      	movs	r6, #2
 801024c:	2c00      	cmp	r4, #0
 801024e:	f040 80b2 	bne.w	80103b6 <_dtoa_r+0x4fe>
 8010252:	2b00      	cmp	r3, #0
 8010254:	d1d3      	bne.n	80101fe <_dtoa_r+0x346>
 8010256:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010258:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801025c:	2b00      	cmp	r3, #0
 801025e:	f000 80b7 	beq.w	80103d0 <_dtoa_r+0x518>
 8010262:	4b86      	ldr	r3, [pc, #536]	@ (801047c <_dtoa_r+0x5c4>)
 8010264:	2200      	movs	r2, #0
 8010266:	4620      	mov	r0, r4
 8010268:	4629      	mov	r1, r5
 801026a:	f7f0 fc47 	bl	8000afc <__aeabi_dcmplt>
 801026e:	2800      	cmp	r0, #0
 8010270:	f000 80ae 	beq.w	80103d0 <_dtoa_r+0x518>
 8010274:	9b07      	ldr	r3, [sp, #28]
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 80aa 	beq.w	80103d0 <_dtoa_r+0x518>
 801027c:	9b00      	ldr	r3, [sp, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	dd37      	ble.n	80102f2 <_dtoa_r+0x43a>
 8010282:	1e7b      	subs	r3, r7, #1
 8010284:	9304      	str	r3, [sp, #16]
 8010286:	4620      	mov	r0, r4
 8010288:	4b7d      	ldr	r3, [pc, #500]	@ (8010480 <_dtoa_r+0x5c8>)
 801028a:	2200      	movs	r2, #0
 801028c:	4629      	mov	r1, r5
 801028e:	f7f0 f9c3 	bl	8000618 <__aeabi_dmul>
 8010292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010296:	9c00      	ldr	r4, [sp, #0]
 8010298:	3601      	adds	r6, #1
 801029a:	4630      	mov	r0, r6
 801029c:	f7f0 f952 	bl	8000544 <__aeabi_i2d>
 80102a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102a4:	f7f0 f9b8 	bl	8000618 <__aeabi_dmul>
 80102a8:	4b76      	ldr	r3, [pc, #472]	@ (8010484 <_dtoa_r+0x5cc>)
 80102aa:	2200      	movs	r2, #0
 80102ac:	f7ef fffe 	bl	80002ac <__adddf3>
 80102b0:	4605      	mov	r5, r0
 80102b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80102b6:	2c00      	cmp	r4, #0
 80102b8:	f040 808d 	bne.w	80103d6 <_dtoa_r+0x51e>
 80102bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102c0:	4b71      	ldr	r3, [pc, #452]	@ (8010488 <_dtoa_r+0x5d0>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	f7ef fff0 	bl	80002a8 <__aeabi_dsub>
 80102c8:	4602      	mov	r2, r0
 80102ca:	460b      	mov	r3, r1
 80102cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80102d0:	462a      	mov	r2, r5
 80102d2:	4633      	mov	r3, r6
 80102d4:	f7f0 fc30 	bl	8000b38 <__aeabi_dcmpgt>
 80102d8:	2800      	cmp	r0, #0
 80102da:	f040 828b 	bne.w	80107f4 <_dtoa_r+0x93c>
 80102de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102e2:	462a      	mov	r2, r5
 80102e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80102e8:	f7f0 fc08 	bl	8000afc <__aeabi_dcmplt>
 80102ec:	2800      	cmp	r0, #0
 80102ee:	f040 8128 	bne.w	8010542 <_dtoa_r+0x68a>
 80102f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80102f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80102fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f2c0 815a 	blt.w	80105b6 <_dtoa_r+0x6fe>
 8010302:	2f0e      	cmp	r7, #14
 8010304:	f300 8157 	bgt.w	80105b6 <_dtoa_r+0x6fe>
 8010308:	4b5a      	ldr	r3, [pc, #360]	@ (8010474 <_dtoa_r+0x5bc>)
 801030a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801030e:	ed93 7b00 	vldr	d7, [r3]
 8010312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010314:	2b00      	cmp	r3, #0
 8010316:	ed8d 7b00 	vstr	d7, [sp]
 801031a:	da03      	bge.n	8010324 <_dtoa_r+0x46c>
 801031c:	9b07      	ldr	r3, [sp, #28]
 801031e:	2b00      	cmp	r3, #0
 8010320:	f340 8101 	ble.w	8010526 <_dtoa_r+0x66e>
 8010324:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010328:	4656      	mov	r6, sl
 801032a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801032e:	4620      	mov	r0, r4
 8010330:	4629      	mov	r1, r5
 8010332:	f7f0 fa9b 	bl	800086c <__aeabi_ddiv>
 8010336:	f7f0 fc1f 	bl	8000b78 <__aeabi_d2iz>
 801033a:	4680      	mov	r8, r0
 801033c:	f7f0 f902 	bl	8000544 <__aeabi_i2d>
 8010340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010344:	f7f0 f968 	bl	8000618 <__aeabi_dmul>
 8010348:	4602      	mov	r2, r0
 801034a:	460b      	mov	r3, r1
 801034c:	4620      	mov	r0, r4
 801034e:	4629      	mov	r1, r5
 8010350:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010354:	f7ef ffa8 	bl	80002a8 <__aeabi_dsub>
 8010358:	f806 4b01 	strb.w	r4, [r6], #1
 801035c:	9d07      	ldr	r5, [sp, #28]
 801035e:	eba6 040a 	sub.w	r4, r6, sl
 8010362:	42a5      	cmp	r5, r4
 8010364:	4602      	mov	r2, r0
 8010366:	460b      	mov	r3, r1
 8010368:	f040 8117 	bne.w	801059a <_dtoa_r+0x6e2>
 801036c:	f7ef ff9e 	bl	80002ac <__adddf3>
 8010370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010374:	4604      	mov	r4, r0
 8010376:	460d      	mov	r5, r1
 8010378:	f7f0 fbde 	bl	8000b38 <__aeabi_dcmpgt>
 801037c:	2800      	cmp	r0, #0
 801037e:	f040 80f9 	bne.w	8010574 <_dtoa_r+0x6bc>
 8010382:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010386:	4620      	mov	r0, r4
 8010388:	4629      	mov	r1, r5
 801038a:	f7f0 fbad 	bl	8000ae8 <__aeabi_dcmpeq>
 801038e:	b118      	cbz	r0, 8010398 <_dtoa_r+0x4e0>
 8010390:	f018 0f01 	tst.w	r8, #1
 8010394:	f040 80ee 	bne.w	8010574 <_dtoa_r+0x6bc>
 8010398:	4649      	mov	r1, r9
 801039a:	4658      	mov	r0, fp
 801039c:	f000 fc90 	bl	8010cc0 <_Bfree>
 80103a0:	2300      	movs	r3, #0
 80103a2:	7033      	strb	r3, [r6, #0]
 80103a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80103a6:	3701      	adds	r7, #1
 80103a8:	601f      	str	r7, [r3, #0]
 80103aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	f000 831d 	beq.w	80109ec <_dtoa_r+0xb34>
 80103b2:	601e      	str	r6, [r3, #0]
 80103b4:	e31a      	b.n	80109ec <_dtoa_r+0xb34>
 80103b6:	07e2      	lsls	r2, r4, #31
 80103b8:	d505      	bpl.n	80103c6 <_dtoa_r+0x50e>
 80103ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80103be:	f7f0 f92b 	bl	8000618 <__aeabi_dmul>
 80103c2:	3601      	adds	r6, #1
 80103c4:	2301      	movs	r3, #1
 80103c6:	1064      	asrs	r4, r4, #1
 80103c8:	3508      	adds	r5, #8
 80103ca:	e73f      	b.n	801024c <_dtoa_r+0x394>
 80103cc:	2602      	movs	r6, #2
 80103ce:	e742      	b.n	8010256 <_dtoa_r+0x39e>
 80103d0:	9c07      	ldr	r4, [sp, #28]
 80103d2:	9704      	str	r7, [sp, #16]
 80103d4:	e761      	b.n	801029a <_dtoa_r+0x3e2>
 80103d6:	4b27      	ldr	r3, [pc, #156]	@ (8010474 <_dtoa_r+0x5bc>)
 80103d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80103da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80103de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103e2:	4454      	add	r4, sl
 80103e4:	2900      	cmp	r1, #0
 80103e6:	d053      	beq.n	8010490 <_dtoa_r+0x5d8>
 80103e8:	4928      	ldr	r1, [pc, #160]	@ (801048c <_dtoa_r+0x5d4>)
 80103ea:	2000      	movs	r0, #0
 80103ec:	f7f0 fa3e 	bl	800086c <__aeabi_ddiv>
 80103f0:	4633      	mov	r3, r6
 80103f2:	462a      	mov	r2, r5
 80103f4:	f7ef ff58 	bl	80002a8 <__aeabi_dsub>
 80103f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80103fc:	4656      	mov	r6, sl
 80103fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010402:	f7f0 fbb9 	bl	8000b78 <__aeabi_d2iz>
 8010406:	4605      	mov	r5, r0
 8010408:	f7f0 f89c 	bl	8000544 <__aeabi_i2d>
 801040c:	4602      	mov	r2, r0
 801040e:	460b      	mov	r3, r1
 8010410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010414:	f7ef ff48 	bl	80002a8 <__aeabi_dsub>
 8010418:	3530      	adds	r5, #48	@ 0x30
 801041a:	4602      	mov	r2, r0
 801041c:	460b      	mov	r3, r1
 801041e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010422:	f806 5b01 	strb.w	r5, [r6], #1
 8010426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801042a:	f7f0 fb67 	bl	8000afc <__aeabi_dcmplt>
 801042e:	2800      	cmp	r0, #0
 8010430:	d171      	bne.n	8010516 <_dtoa_r+0x65e>
 8010432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010436:	4911      	ldr	r1, [pc, #68]	@ (801047c <_dtoa_r+0x5c4>)
 8010438:	2000      	movs	r0, #0
 801043a:	f7ef ff35 	bl	80002a8 <__aeabi_dsub>
 801043e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010442:	f7f0 fb5b 	bl	8000afc <__aeabi_dcmplt>
 8010446:	2800      	cmp	r0, #0
 8010448:	f040 8095 	bne.w	8010576 <_dtoa_r+0x6be>
 801044c:	42a6      	cmp	r6, r4
 801044e:	f43f af50 	beq.w	80102f2 <_dtoa_r+0x43a>
 8010452:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010456:	4b0a      	ldr	r3, [pc, #40]	@ (8010480 <_dtoa_r+0x5c8>)
 8010458:	2200      	movs	r2, #0
 801045a:	f7f0 f8dd 	bl	8000618 <__aeabi_dmul>
 801045e:	4b08      	ldr	r3, [pc, #32]	@ (8010480 <_dtoa_r+0x5c8>)
 8010460:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010464:	2200      	movs	r2, #0
 8010466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801046a:	f7f0 f8d5 	bl	8000618 <__aeabi_dmul>
 801046e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010472:	e7c4      	b.n	80103fe <_dtoa_r+0x546>
 8010474:	08016340 	.word	0x08016340
 8010478:	08016318 	.word	0x08016318
 801047c:	3ff00000 	.word	0x3ff00000
 8010480:	40240000 	.word	0x40240000
 8010484:	401c0000 	.word	0x401c0000
 8010488:	40140000 	.word	0x40140000
 801048c:	3fe00000 	.word	0x3fe00000
 8010490:	4631      	mov	r1, r6
 8010492:	4628      	mov	r0, r5
 8010494:	f7f0 f8c0 	bl	8000618 <__aeabi_dmul>
 8010498:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801049c:	9415      	str	r4, [sp, #84]	@ 0x54
 801049e:	4656      	mov	r6, sl
 80104a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104a4:	f7f0 fb68 	bl	8000b78 <__aeabi_d2iz>
 80104a8:	4605      	mov	r5, r0
 80104aa:	f7f0 f84b 	bl	8000544 <__aeabi_i2d>
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104b6:	f7ef fef7 	bl	80002a8 <__aeabi_dsub>
 80104ba:	3530      	adds	r5, #48	@ 0x30
 80104bc:	f806 5b01 	strb.w	r5, [r6], #1
 80104c0:	4602      	mov	r2, r0
 80104c2:	460b      	mov	r3, r1
 80104c4:	42a6      	cmp	r6, r4
 80104c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104ca:	f04f 0200 	mov.w	r2, #0
 80104ce:	d124      	bne.n	801051a <_dtoa_r+0x662>
 80104d0:	4bac      	ldr	r3, [pc, #688]	@ (8010784 <_dtoa_r+0x8cc>)
 80104d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80104d6:	f7ef fee9 	bl	80002ac <__adddf3>
 80104da:	4602      	mov	r2, r0
 80104dc:	460b      	mov	r3, r1
 80104de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104e2:	f7f0 fb29 	bl	8000b38 <__aeabi_dcmpgt>
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d145      	bne.n	8010576 <_dtoa_r+0x6be>
 80104ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80104ee:	49a5      	ldr	r1, [pc, #660]	@ (8010784 <_dtoa_r+0x8cc>)
 80104f0:	2000      	movs	r0, #0
 80104f2:	f7ef fed9 	bl	80002a8 <__aeabi_dsub>
 80104f6:	4602      	mov	r2, r0
 80104f8:	460b      	mov	r3, r1
 80104fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104fe:	f7f0 fafd 	bl	8000afc <__aeabi_dcmplt>
 8010502:	2800      	cmp	r0, #0
 8010504:	f43f aef5 	beq.w	80102f2 <_dtoa_r+0x43a>
 8010508:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801050a:	1e73      	subs	r3, r6, #1
 801050c:	9315      	str	r3, [sp, #84]	@ 0x54
 801050e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010512:	2b30      	cmp	r3, #48	@ 0x30
 8010514:	d0f8      	beq.n	8010508 <_dtoa_r+0x650>
 8010516:	9f04      	ldr	r7, [sp, #16]
 8010518:	e73e      	b.n	8010398 <_dtoa_r+0x4e0>
 801051a:	4b9b      	ldr	r3, [pc, #620]	@ (8010788 <_dtoa_r+0x8d0>)
 801051c:	f7f0 f87c 	bl	8000618 <__aeabi_dmul>
 8010520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010524:	e7bc      	b.n	80104a0 <_dtoa_r+0x5e8>
 8010526:	d10c      	bne.n	8010542 <_dtoa_r+0x68a>
 8010528:	4b98      	ldr	r3, [pc, #608]	@ (801078c <_dtoa_r+0x8d4>)
 801052a:	2200      	movs	r2, #0
 801052c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010530:	f7f0 f872 	bl	8000618 <__aeabi_dmul>
 8010534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010538:	f7f0 faf4 	bl	8000b24 <__aeabi_dcmpge>
 801053c:	2800      	cmp	r0, #0
 801053e:	f000 8157 	beq.w	80107f0 <_dtoa_r+0x938>
 8010542:	2400      	movs	r4, #0
 8010544:	4625      	mov	r5, r4
 8010546:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010548:	43db      	mvns	r3, r3
 801054a:	9304      	str	r3, [sp, #16]
 801054c:	4656      	mov	r6, sl
 801054e:	2700      	movs	r7, #0
 8010550:	4621      	mov	r1, r4
 8010552:	4658      	mov	r0, fp
 8010554:	f000 fbb4 	bl	8010cc0 <_Bfree>
 8010558:	2d00      	cmp	r5, #0
 801055a:	d0dc      	beq.n	8010516 <_dtoa_r+0x65e>
 801055c:	b12f      	cbz	r7, 801056a <_dtoa_r+0x6b2>
 801055e:	42af      	cmp	r7, r5
 8010560:	d003      	beq.n	801056a <_dtoa_r+0x6b2>
 8010562:	4639      	mov	r1, r7
 8010564:	4658      	mov	r0, fp
 8010566:	f000 fbab 	bl	8010cc0 <_Bfree>
 801056a:	4629      	mov	r1, r5
 801056c:	4658      	mov	r0, fp
 801056e:	f000 fba7 	bl	8010cc0 <_Bfree>
 8010572:	e7d0      	b.n	8010516 <_dtoa_r+0x65e>
 8010574:	9704      	str	r7, [sp, #16]
 8010576:	4633      	mov	r3, r6
 8010578:	461e      	mov	r6, r3
 801057a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801057e:	2a39      	cmp	r2, #57	@ 0x39
 8010580:	d107      	bne.n	8010592 <_dtoa_r+0x6da>
 8010582:	459a      	cmp	sl, r3
 8010584:	d1f8      	bne.n	8010578 <_dtoa_r+0x6c0>
 8010586:	9a04      	ldr	r2, [sp, #16]
 8010588:	3201      	adds	r2, #1
 801058a:	9204      	str	r2, [sp, #16]
 801058c:	2230      	movs	r2, #48	@ 0x30
 801058e:	f88a 2000 	strb.w	r2, [sl]
 8010592:	781a      	ldrb	r2, [r3, #0]
 8010594:	3201      	adds	r2, #1
 8010596:	701a      	strb	r2, [r3, #0]
 8010598:	e7bd      	b.n	8010516 <_dtoa_r+0x65e>
 801059a:	4b7b      	ldr	r3, [pc, #492]	@ (8010788 <_dtoa_r+0x8d0>)
 801059c:	2200      	movs	r2, #0
 801059e:	f7f0 f83b 	bl	8000618 <__aeabi_dmul>
 80105a2:	2200      	movs	r2, #0
 80105a4:	2300      	movs	r3, #0
 80105a6:	4604      	mov	r4, r0
 80105a8:	460d      	mov	r5, r1
 80105aa:	f7f0 fa9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	f43f aebb 	beq.w	801032a <_dtoa_r+0x472>
 80105b4:	e6f0      	b.n	8010398 <_dtoa_r+0x4e0>
 80105b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80105b8:	2a00      	cmp	r2, #0
 80105ba:	f000 80db 	beq.w	8010774 <_dtoa_r+0x8bc>
 80105be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105c0:	2a01      	cmp	r2, #1
 80105c2:	f300 80bf 	bgt.w	8010744 <_dtoa_r+0x88c>
 80105c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80105c8:	2a00      	cmp	r2, #0
 80105ca:	f000 80b7 	beq.w	801073c <_dtoa_r+0x884>
 80105ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80105d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80105d4:	4646      	mov	r6, r8
 80105d6:	9a08      	ldr	r2, [sp, #32]
 80105d8:	2101      	movs	r1, #1
 80105da:	441a      	add	r2, r3
 80105dc:	4658      	mov	r0, fp
 80105de:	4498      	add	r8, r3
 80105e0:	9208      	str	r2, [sp, #32]
 80105e2:	f000 fc6b 	bl	8010ebc <__i2b>
 80105e6:	4605      	mov	r5, r0
 80105e8:	b15e      	cbz	r6, 8010602 <_dtoa_r+0x74a>
 80105ea:	9b08      	ldr	r3, [sp, #32]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	dd08      	ble.n	8010602 <_dtoa_r+0x74a>
 80105f0:	42b3      	cmp	r3, r6
 80105f2:	9a08      	ldr	r2, [sp, #32]
 80105f4:	bfa8      	it	ge
 80105f6:	4633      	movge	r3, r6
 80105f8:	eba8 0803 	sub.w	r8, r8, r3
 80105fc:	1af6      	subs	r6, r6, r3
 80105fe:	1ad3      	subs	r3, r2, r3
 8010600:	9308      	str	r3, [sp, #32]
 8010602:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010604:	b1f3      	cbz	r3, 8010644 <_dtoa_r+0x78c>
 8010606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010608:	2b00      	cmp	r3, #0
 801060a:	f000 80b7 	beq.w	801077c <_dtoa_r+0x8c4>
 801060e:	b18c      	cbz	r4, 8010634 <_dtoa_r+0x77c>
 8010610:	4629      	mov	r1, r5
 8010612:	4622      	mov	r2, r4
 8010614:	4658      	mov	r0, fp
 8010616:	f000 fd11 	bl	801103c <__pow5mult>
 801061a:	464a      	mov	r2, r9
 801061c:	4601      	mov	r1, r0
 801061e:	4605      	mov	r5, r0
 8010620:	4658      	mov	r0, fp
 8010622:	f000 fc61 	bl	8010ee8 <__multiply>
 8010626:	4649      	mov	r1, r9
 8010628:	9004      	str	r0, [sp, #16]
 801062a:	4658      	mov	r0, fp
 801062c:	f000 fb48 	bl	8010cc0 <_Bfree>
 8010630:	9b04      	ldr	r3, [sp, #16]
 8010632:	4699      	mov	r9, r3
 8010634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010636:	1b1a      	subs	r2, r3, r4
 8010638:	d004      	beq.n	8010644 <_dtoa_r+0x78c>
 801063a:	4649      	mov	r1, r9
 801063c:	4658      	mov	r0, fp
 801063e:	f000 fcfd 	bl	801103c <__pow5mult>
 8010642:	4681      	mov	r9, r0
 8010644:	2101      	movs	r1, #1
 8010646:	4658      	mov	r0, fp
 8010648:	f000 fc38 	bl	8010ebc <__i2b>
 801064c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801064e:	4604      	mov	r4, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	f000 81cf 	beq.w	80109f4 <_dtoa_r+0xb3c>
 8010656:	461a      	mov	r2, r3
 8010658:	4601      	mov	r1, r0
 801065a:	4658      	mov	r0, fp
 801065c:	f000 fcee 	bl	801103c <__pow5mult>
 8010660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010662:	2b01      	cmp	r3, #1
 8010664:	4604      	mov	r4, r0
 8010666:	f300 8095 	bgt.w	8010794 <_dtoa_r+0x8dc>
 801066a:	9b02      	ldr	r3, [sp, #8]
 801066c:	2b00      	cmp	r3, #0
 801066e:	f040 8087 	bne.w	8010780 <_dtoa_r+0x8c8>
 8010672:	9b03      	ldr	r3, [sp, #12]
 8010674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010678:	2b00      	cmp	r3, #0
 801067a:	f040 8089 	bne.w	8010790 <_dtoa_r+0x8d8>
 801067e:	9b03      	ldr	r3, [sp, #12]
 8010680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010684:	0d1b      	lsrs	r3, r3, #20
 8010686:	051b      	lsls	r3, r3, #20
 8010688:	b12b      	cbz	r3, 8010696 <_dtoa_r+0x7de>
 801068a:	9b08      	ldr	r3, [sp, #32]
 801068c:	3301      	adds	r3, #1
 801068e:	9308      	str	r3, [sp, #32]
 8010690:	f108 0801 	add.w	r8, r8, #1
 8010694:	2301      	movs	r3, #1
 8010696:	930a      	str	r3, [sp, #40]	@ 0x28
 8010698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801069a:	2b00      	cmp	r3, #0
 801069c:	f000 81b0 	beq.w	8010a00 <_dtoa_r+0xb48>
 80106a0:	6923      	ldr	r3, [r4, #16]
 80106a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80106a6:	6918      	ldr	r0, [r3, #16]
 80106a8:	f000 fbbc 	bl	8010e24 <__hi0bits>
 80106ac:	f1c0 0020 	rsb	r0, r0, #32
 80106b0:	9b08      	ldr	r3, [sp, #32]
 80106b2:	4418      	add	r0, r3
 80106b4:	f010 001f 	ands.w	r0, r0, #31
 80106b8:	d077      	beq.n	80107aa <_dtoa_r+0x8f2>
 80106ba:	f1c0 0320 	rsb	r3, r0, #32
 80106be:	2b04      	cmp	r3, #4
 80106c0:	dd6b      	ble.n	801079a <_dtoa_r+0x8e2>
 80106c2:	9b08      	ldr	r3, [sp, #32]
 80106c4:	f1c0 001c 	rsb	r0, r0, #28
 80106c8:	4403      	add	r3, r0
 80106ca:	4480      	add	r8, r0
 80106cc:	4406      	add	r6, r0
 80106ce:	9308      	str	r3, [sp, #32]
 80106d0:	f1b8 0f00 	cmp.w	r8, #0
 80106d4:	dd05      	ble.n	80106e2 <_dtoa_r+0x82a>
 80106d6:	4649      	mov	r1, r9
 80106d8:	4642      	mov	r2, r8
 80106da:	4658      	mov	r0, fp
 80106dc:	f000 fd08 	bl	80110f0 <__lshift>
 80106e0:	4681      	mov	r9, r0
 80106e2:	9b08      	ldr	r3, [sp, #32]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	dd05      	ble.n	80106f4 <_dtoa_r+0x83c>
 80106e8:	4621      	mov	r1, r4
 80106ea:	461a      	mov	r2, r3
 80106ec:	4658      	mov	r0, fp
 80106ee:	f000 fcff 	bl	80110f0 <__lshift>
 80106f2:	4604      	mov	r4, r0
 80106f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d059      	beq.n	80107ae <_dtoa_r+0x8f6>
 80106fa:	4621      	mov	r1, r4
 80106fc:	4648      	mov	r0, r9
 80106fe:	f000 fd63 	bl	80111c8 <__mcmp>
 8010702:	2800      	cmp	r0, #0
 8010704:	da53      	bge.n	80107ae <_dtoa_r+0x8f6>
 8010706:	1e7b      	subs	r3, r7, #1
 8010708:	9304      	str	r3, [sp, #16]
 801070a:	4649      	mov	r1, r9
 801070c:	2300      	movs	r3, #0
 801070e:	220a      	movs	r2, #10
 8010710:	4658      	mov	r0, fp
 8010712:	f000 faf7 	bl	8010d04 <__multadd>
 8010716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010718:	4681      	mov	r9, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	f000 8172 	beq.w	8010a04 <_dtoa_r+0xb4c>
 8010720:	2300      	movs	r3, #0
 8010722:	4629      	mov	r1, r5
 8010724:	220a      	movs	r2, #10
 8010726:	4658      	mov	r0, fp
 8010728:	f000 faec 	bl	8010d04 <__multadd>
 801072c:	9b00      	ldr	r3, [sp, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	4605      	mov	r5, r0
 8010732:	dc67      	bgt.n	8010804 <_dtoa_r+0x94c>
 8010734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010736:	2b02      	cmp	r3, #2
 8010738:	dc41      	bgt.n	80107be <_dtoa_r+0x906>
 801073a:	e063      	b.n	8010804 <_dtoa_r+0x94c>
 801073c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801073e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010742:	e746      	b.n	80105d2 <_dtoa_r+0x71a>
 8010744:	9b07      	ldr	r3, [sp, #28]
 8010746:	1e5c      	subs	r4, r3, #1
 8010748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801074a:	42a3      	cmp	r3, r4
 801074c:	bfbf      	itttt	lt
 801074e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010750:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010752:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010754:	1ae3      	sublt	r3, r4, r3
 8010756:	bfb4      	ite	lt
 8010758:	18d2      	addlt	r2, r2, r3
 801075a:	1b1c      	subge	r4, r3, r4
 801075c:	9b07      	ldr	r3, [sp, #28]
 801075e:	bfbc      	itt	lt
 8010760:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010762:	2400      	movlt	r4, #0
 8010764:	2b00      	cmp	r3, #0
 8010766:	bfb5      	itete	lt
 8010768:	eba8 0603 	sublt.w	r6, r8, r3
 801076c:	9b07      	ldrge	r3, [sp, #28]
 801076e:	2300      	movlt	r3, #0
 8010770:	4646      	movge	r6, r8
 8010772:	e730      	b.n	80105d6 <_dtoa_r+0x71e>
 8010774:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010776:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010778:	4646      	mov	r6, r8
 801077a:	e735      	b.n	80105e8 <_dtoa_r+0x730>
 801077c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801077e:	e75c      	b.n	801063a <_dtoa_r+0x782>
 8010780:	2300      	movs	r3, #0
 8010782:	e788      	b.n	8010696 <_dtoa_r+0x7de>
 8010784:	3fe00000 	.word	0x3fe00000
 8010788:	40240000 	.word	0x40240000
 801078c:	40140000 	.word	0x40140000
 8010790:	9b02      	ldr	r3, [sp, #8]
 8010792:	e780      	b.n	8010696 <_dtoa_r+0x7de>
 8010794:	2300      	movs	r3, #0
 8010796:	930a      	str	r3, [sp, #40]	@ 0x28
 8010798:	e782      	b.n	80106a0 <_dtoa_r+0x7e8>
 801079a:	d099      	beq.n	80106d0 <_dtoa_r+0x818>
 801079c:	9a08      	ldr	r2, [sp, #32]
 801079e:	331c      	adds	r3, #28
 80107a0:	441a      	add	r2, r3
 80107a2:	4498      	add	r8, r3
 80107a4:	441e      	add	r6, r3
 80107a6:	9208      	str	r2, [sp, #32]
 80107a8:	e792      	b.n	80106d0 <_dtoa_r+0x818>
 80107aa:	4603      	mov	r3, r0
 80107ac:	e7f6      	b.n	801079c <_dtoa_r+0x8e4>
 80107ae:	9b07      	ldr	r3, [sp, #28]
 80107b0:	9704      	str	r7, [sp, #16]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	dc20      	bgt.n	80107f8 <_dtoa_r+0x940>
 80107b6:	9300      	str	r3, [sp, #0]
 80107b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	dd1e      	ble.n	80107fc <_dtoa_r+0x944>
 80107be:	9b00      	ldr	r3, [sp, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f47f aec0 	bne.w	8010546 <_dtoa_r+0x68e>
 80107c6:	4621      	mov	r1, r4
 80107c8:	2205      	movs	r2, #5
 80107ca:	4658      	mov	r0, fp
 80107cc:	f000 fa9a 	bl	8010d04 <__multadd>
 80107d0:	4601      	mov	r1, r0
 80107d2:	4604      	mov	r4, r0
 80107d4:	4648      	mov	r0, r9
 80107d6:	f000 fcf7 	bl	80111c8 <__mcmp>
 80107da:	2800      	cmp	r0, #0
 80107dc:	f77f aeb3 	ble.w	8010546 <_dtoa_r+0x68e>
 80107e0:	4656      	mov	r6, sl
 80107e2:	2331      	movs	r3, #49	@ 0x31
 80107e4:	f806 3b01 	strb.w	r3, [r6], #1
 80107e8:	9b04      	ldr	r3, [sp, #16]
 80107ea:	3301      	adds	r3, #1
 80107ec:	9304      	str	r3, [sp, #16]
 80107ee:	e6ae      	b.n	801054e <_dtoa_r+0x696>
 80107f0:	9c07      	ldr	r4, [sp, #28]
 80107f2:	9704      	str	r7, [sp, #16]
 80107f4:	4625      	mov	r5, r4
 80107f6:	e7f3      	b.n	80107e0 <_dtoa_r+0x928>
 80107f8:	9b07      	ldr	r3, [sp, #28]
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f000 8104 	beq.w	8010a0c <_dtoa_r+0xb54>
 8010804:	2e00      	cmp	r6, #0
 8010806:	dd05      	ble.n	8010814 <_dtoa_r+0x95c>
 8010808:	4629      	mov	r1, r5
 801080a:	4632      	mov	r2, r6
 801080c:	4658      	mov	r0, fp
 801080e:	f000 fc6f 	bl	80110f0 <__lshift>
 8010812:	4605      	mov	r5, r0
 8010814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010816:	2b00      	cmp	r3, #0
 8010818:	d05a      	beq.n	80108d0 <_dtoa_r+0xa18>
 801081a:	6869      	ldr	r1, [r5, #4]
 801081c:	4658      	mov	r0, fp
 801081e:	f000 fa0f 	bl	8010c40 <_Balloc>
 8010822:	4606      	mov	r6, r0
 8010824:	b928      	cbnz	r0, 8010832 <_dtoa_r+0x97a>
 8010826:	4b84      	ldr	r3, [pc, #528]	@ (8010a38 <_dtoa_r+0xb80>)
 8010828:	4602      	mov	r2, r0
 801082a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801082e:	f7ff bb5a 	b.w	800fee6 <_dtoa_r+0x2e>
 8010832:	692a      	ldr	r2, [r5, #16]
 8010834:	3202      	adds	r2, #2
 8010836:	0092      	lsls	r2, r2, #2
 8010838:	f105 010c 	add.w	r1, r5, #12
 801083c:	300c      	adds	r0, #12
 801083e:	f7ff fa9c 	bl	800fd7a <memcpy>
 8010842:	2201      	movs	r2, #1
 8010844:	4631      	mov	r1, r6
 8010846:	4658      	mov	r0, fp
 8010848:	f000 fc52 	bl	80110f0 <__lshift>
 801084c:	f10a 0301 	add.w	r3, sl, #1
 8010850:	9307      	str	r3, [sp, #28]
 8010852:	9b00      	ldr	r3, [sp, #0]
 8010854:	4453      	add	r3, sl
 8010856:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010858:	9b02      	ldr	r3, [sp, #8]
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	462f      	mov	r7, r5
 8010860:	930a      	str	r3, [sp, #40]	@ 0x28
 8010862:	4605      	mov	r5, r0
 8010864:	9b07      	ldr	r3, [sp, #28]
 8010866:	4621      	mov	r1, r4
 8010868:	3b01      	subs	r3, #1
 801086a:	4648      	mov	r0, r9
 801086c:	9300      	str	r3, [sp, #0]
 801086e:	f7ff fa99 	bl	800fda4 <quorem>
 8010872:	4639      	mov	r1, r7
 8010874:	9002      	str	r0, [sp, #8]
 8010876:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801087a:	4648      	mov	r0, r9
 801087c:	f000 fca4 	bl	80111c8 <__mcmp>
 8010880:	462a      	mov	r2, r5
 8010882:	9008      	str	r0, [sp, #32]
 8010884:	4621      	mov	r1, r4
 8010886:	4658      	mov	r0, fp
 8010888:	f000 fcba 	bl	8011200 <__mdiff>
 801088c:	68c2      	ldr	r2, [r0, #12]
 801088e:	4606      	mov	r6, r0
 8010890:	bb02      	cbnz	r2, 80108d4 <_dtoa_r+0xa1c>
 8010892:	4601      	mov	r1, r0
 8010894:	4648      	mov	r0, r9
 8010896:	f000 fc97 	bl	80111c8 <__mcmp>
 801089a:	4602      	mov	r2, r0
 801089c:	4631      	mov	r1, r6
 801089e:	4658      	mov	r0, fp
 80108a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80108a2:	f000 fa0d 	bl	8010cc0 <_Bfree>
 80108a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108aa:	9e07      	ldr	r6, [sp, #28]
 80108ac:	ea43 0102 	orr.w	r1, r3, r2
 80108b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108b2:	4319      	orrs	r1, r3
 80108b4:	d110      	bne.n	80108d8 <_dtoa_r+0xa20>
 80108b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80108ba:	d029      	beq.n	8010910 <_dtoa_r+0xa58>
 80108bc:	9b08      	ldr	r3, [sp, #32]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	dd02      	ble.n	80108c8 <_dtoa_r+0xa10>
 80108c2:	9b02      	ldr	r3, [sp, #8]
 80108c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80108c8:	9b00      	ldr	r3, [sp, #0]
 80108ca:	f883 8000 	strb.w	r8, [r3]
 80108ce:	e63f      	b.n	8010550 <_dtoa_r+0x698>
 80108d0:	4628      	mov	r0, r5
 80108d2:	e7bb      	b.n	801084c <_dtoa_r+0x994>
 80108d4:	2201      	movs	r2, #1
 80108d6:	e7e1      	b.n	801089c <_dtoa_r+0x9e4>
 80108d8:	9b08      	ldr	r3, [sp, #32]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	db04      	blt.n	80108e8 <_dtoa_r+0xa30>
 80108de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80108e0:	430b      	orrs	r3, r1
 80108e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108e4:	430b      	orrs	r3, r1
 80108e6:	d120      	bne.n	801092a <_dtoa_r+0xa72>
 80108e8:	2a00      	cmp	r2, #0
 80108ea:	dded      	ble.n	80108c8 <_dtoa_r+0xa10>
 80108ec:	4649      	mov	r1, r9
 80108ee:	2201      	movs	r2, #1
 80108f0:	4658      	mov	r0, fp
 80108f2:	f000 fbfd 	bl	80110f0 <__lshift>
 80108f6:	4621      	mov	r1, r4
 80108f8:	4681      	mov	r9, r0
 80108fa:	f000 fc65 	bl	80111c8 <__mcmp>
 80108fe:	2800      	cmp	r0, #0
 8010900:	dc03      	bgt.n	801090a <_dtoa_r+0xa52>
 8010902:	d1e1      	bne.n	80108c8 <_dtoa_r+0xa10>
 8010904:	f018 0f01 	tst.w	r8, #1
 8010908:	d0de      	beq.n	80108c8 <_dtoa_r+0xa10>
 801090a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801090e:	d1d8      	bne.n	80108c2 <_dtoa_r+0xa0a>
 8010910:	9a00      	ldr	r2, [sp, #0]
 8010912:	2339      	movs	r3, #57	@ 0x39
 8010914:	7013      	strb	r3, [r2, #0]
 8010916:	4633      	mov	r3, r6
 8010918:	461e      	mov	r6, r3
 801091a:	3b01      	subs	r3, #1
 801091c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010920:	2a39      	cmp	r2, #57	@ 0x39
 8010922:	d052      	beq.n	80109ca <_dtoa_r+0xb12>
 8010924:	3201      	adds	r2, #1
 8010926:	701a      	strb	r2, [r3, #0]
 8010928:	e612      	b.n	8010550 <_dtoa_r+0x698>
 801092a:	2a00      	cmp	r2, #0
 801092c:	dd07      	ble.n	801093e <_dtoa_r+0xa86>
 801092e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010932:	d0ed      	beq.n	8010910 <_dtoa_r+0xa58>
 8010934:	9a00      	ldr	r2, [sp, #0]
 8010936:	f108 0301 	add.w	r3, r8, #1
 801093a:	7013      	strb	r3, [r2, #0]
 801093c:	e608      	b.n	8010550 <_dtoa_r+0x698>
 801093e:	9b07      	ldr	r3, [sp, #28]
 8010940:	9a07      	ldr	r2, [sp, #28]
 8010942:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010948:	4293      	cmp	r3, r2
 801094a:	d028      	beq.n	801099e <_dtoa_r+0xae6>
 801094c:	4649      	mov	r1, r9
 801094e:	2300      	movs	r3, #0
 8010950:	220a      	movs	r2, #10
 8010952:	4658      	mov	r0, fp
 8010954:	f000 f9d6 	bl	8010d04 <__multadd>
 8010958:	42af      	cmp	r7, r5
 801095a:	4681      	mov	r9, r0
 801095c:	f04f 0300 	mov.w	r3, #0
 8010960:	f04f 020a 	mov.w	r2, #10
 8010964:	4639      	mov	r1, r7
 8010966:	4658      	mov	r0, fp
 8010968:	d107      	bne.n	801097a <_dtoa_r+0xac2>
 801096a:	f000 f9cb 	bl	8010d04 <__multadd>
 801096e:	4607      	mov	r7, r0
 8010970:	4605      	mov	r5, r0
 8010972:	9b07      	ldr	r3, [sp, #28]
 8010974:	3301      	adds	r3, #1
 8010976:	9307      	str	r3, [sp, #28]
 8010978:	e774      	b.n	8010864 <_dtoa_r+0x9ac>
 801097a:	f000 f9c3 	bl	8010d04 <__multadd>
 801097e:	4629      	mov	r1, r5
 8010980:	4607      	mov	r7, r0
 8010982:	2300      	movs	r3, #0
 8010984:	220a      	movs	r2, #10
 8010986:	4658      	mov	r0, fp
 8010988:	f000 f9bc 	bl	8010d04 <__multadd>
 801098c:	4605      	mov	r5, r0
 801098e:	e7f0      	b.n	8010972 <_dtoa_r+0xaba>
 8010990:	9b00      	ldr	r3, [sp, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	bfcc      	ite	gt
 8010996:	461e      	movgt	r6, r3
 8010998:	2601      	movle	r6, #1
 801099a:	4456      	add	r6, sl
 801099c:	2700      	movs	r7, #0
 801099e:	4649      	mov	r1, r9
 80109a0:	2201      	movs	r2, #1
 80109a2:	4658      	mov	r0, fp
 80109a4:	f000 fba4 	bl	80110f0 <__lshift>
 80109a8:	4621      	mov	r1, r4
 80109aa:	4681      	mov	r9, r0
 80109ac:	f000 fc0c 	bl	80111c8 <__mcmp>
 80109b0:	2800      	cmp	r0, #0
 80109b2:	dcb0      	bgt.n	8010916 <_dtoa_r+0xa5e>
 80109b4:	d102      	bne.n	80109bc <_dtoa_r+0xb04>
 80109b6:	f018 0f01 	tst.w	r8, #1
 80109ba:	d1ac      	bne.n	8010916 <_dtoa_r+0xa5e>
 80109bc:	4633      	mov	r3, r6
 80109be:	461e      	mov	r6, r3
 80109c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80109c4:	2a30      	cmp	r2, #48	@ 0x30
 80109c6:	d0fa      	beq.n	80109be <_dtoa_r+0xb06>
 80109c8:	e5c2      	b.n	8010550 <_dtoa_r+0x698>
 80109ca:	459a      	cmp	sl, r3
 80109cc:	d1a4      	bne.n	8010918 <_dtoa_r+0xa60>
 80109ce:	9b04      	ldr	r3, [sp, #16]
 80109d0:	3301      	adds	r3, #1
 80109d2:	9304      	str	r3, [sp, #16]
 80109d4:	2331      	movs	r3, #49	@ 0x31
 80109d6:	f88a 3000 	strb.w	r3, [sl]
 80109da:	e5b9      	b.n	8010550 <_dtoa_r+0x698>
 80109dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80109de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010a3c <_dtoa_r+0xb84>
 80109e2:	b11b      	cbz	r3, 80109ec <_dtoa_r+0xb34>
 80109e4:	f10a 0308 	add.w	r3, sl, #8
 80109e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80109ea:	6013      	str	r3, [r2, #0]
 80109ec:	4650      	mov	r0, sl
 80109ee:	b019      	add	sp, #100	@ 0x64
 80109f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	f77f ae37 	ble.w	801066a <_dtoa_r+0x7b2>
 80109fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a00:	2001      	movs	r0, #1
 8010a02:	e655      	b.n	80106b0 <_dtoa_r+0x7f8>
 8010a04:	9b00      	ldr	r3, [sp, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	f77f aed6 	ble.w	80107b8 <_dtoa_r+0x900>
 8010a0c:	4656      	mov	r6, sl
 8010a0e:	4621      	mov	r1, r4
 8010a10:	4648      	mov	r0, r9
 8010a12:	f7ff f9c7 	bl	800fda4 <quorem>
 8010a16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010a1a:	f806 8b01 	strb.w	r8, [r6], #1
 8010a1e:	9b00      	ldr	r3, [sp, #0]
 8010a20:	eba6 020a 	sub.w	r2, r6, sl
 8010a24:	4293      	cmp	r3, r2
 8010a26:	ddb3      	ble.n	8010990 <_dtoa_r+0xad8>
 8010a28:	4649      	mov	r1, r9
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	220a      	movs	r2, #10
 8010a2e:	4658      	mov	r0, fp
 8010a30:	f000 f968 	bl	8010d04 <__multadd>
 8010a34:	4681      	mov	r9, r0
 8010a36:	e7ea      	b.n	8010a0e <_dtoa_r+0xb56>
 8010a38:	080162a2 	.word	0x080162a2
 8010a3c:	08016226 	.word	0x08016226

08010a40 <_free_r>:
 8010a40:	b538      	push	{r3, r4, r5, lr}
 8010a42:	4605      	mov	r5, r0
 8010a44:	2900      	cmp	r1, #0
 8010a46:	d041      	beq.n	8010acc <_free_r+0x8c>
 8010a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a4c:	1f0c      	subs	r4, r1, #4
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	bfb8      	it	lt
 8010a52:	18e4      	addlt	r4, r4, r3
 8010a54:	f000 f8e8 	bl	8010c28 <__malloc_lock>
 8010a58:	4a1d      	ldr	r2, [pc, #116]	@ (8010ad0 <_free_r+0x90>)
 8010a5a:	6813      	ldr	r3, [r2, #0]
 8010a5c:	b933      	cbnz	r3, 8010a6c <_free_r+0x2c>
 8010a5e:	6063      	str	r3, [r4, #4]
 8010a60:	6014      	str	r4, [r2, #0]
 8010a62:	4628      	mov	r0, r5
 8010a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a68:	f000 b8e4 	b.w	8010c34 <__malloc_unlock>
 8010a6c:	42a3      	cmp	r3, r4
 8010a6e:	d908      	bls.n	8010a82 <_free_r+0x42>
 8010a70:	6820      	ldr	r0, [r4, #0]
 8010a72:	1821      	adds	r1, r4, r0
 8010a74:	428b      	cmp	r3, r1
 8010a76:	bf01      	itttt	eq
 8010a78:	6819      	ldreq	r1, [r3, #0]
 8010a7a:	685b      	ldreq	r3, [r3, #4]
 8010a7c:	1809      	addeq	r1, r1, r0
 8010a7e:	6021      	streq	r1, [r4, #0]
 8010a80:	e7ed      	b.n	8010a5e <_free_r+0x1e>
 8010a82:	461a      	mov	r2, r3
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	b10b      	cbz	r3, 8010a8c <_free_r+0x4c>
 8010a88:	42a3      	cmp	r3, r4
 8010a8a:	d9fa      	bls.n	8010a82 <_free_r+0x42>
 8010a8c:	6811      	ldr	r1, [r2, #0]
 8010a8e:	1850      	adds	r0, r2, r1
 8010a90:	42a0      	cmp	r0, r4
 8010a92:	d10b      	bne.n	8010aac <_free_r+0x6c>
 8010a94:	6820      	ldr	r0, [r4, #0]
 8010a96:	4401      	add	r1, r0
 8010a98:	1850      	adds	r0, r2, r1
 8010a9a:	4283      	cmp	r3, r0
 8010a9c:	6011      	str	r1, [r2, #0]
 8010a9e:	d1e0      	bne.n	8010a62 <_free_r+0x22>
 8010aa0:	6818      	ldr	r0, [r3, #0]
 8010aa2:	685b      	ldr	r3, [r3, #4]
 8010aa4:	6053      	str	r3, [r2, #4]
 8010aa6:	4408      	add	r0, r1
 8010aa8:	6010      	str	r0, [r2, #0]
 8010aaa:	e7da      	b.n	8010a62 <_free_r+0x22>
 8010aac:	d902      	bls.n	8010ab4 <_free_r+0x74>
 8010aae:	230c      	movs	r3, #12
 8010ab0:	602b      	str	r3, [r5, #0]
 8010ab2:	e7d6      	b.n	8010a62 <_free_r+0x22>
 8010ab4:	6820      	ldr	r0, [r4, #0]
 8010ab6:	1821      	adds	r1, r4, r0
 8010ab8:	428b      	cmp	r3, r1
 8010aba:	bf04      	itt	eq
 8010abc:	6819      	ldreq	r1, [r3, #0]
 8010abe:	685b      	ldreq	r3, [r3, #4]
 8010ac0:	6063      	str	r3, [r4, #4]
 8010ac2:	bf04      	itt	eq
 8010ac4:	1809      	addeq	r1, r1, r0
 8010ac6:	6021      	streq	r1, [r4, #0]
 8010ac8:	6054      	str	r4, [r2, #4]
 8010aca:	e7ca      	b.n	8010a62 <_free_r+0x22>
 8010acc:	bd38      	pop	{r3, r4, r5, pc}
 8010ace:	bf00      	nop
 8010ad0:	2000672c 	.word	0x2000672c

08010ad4 <malloc>:
 8010ad4:	4b02      	ldr	r3, [pc, #8]	@ (8010ae0 <malloc+0xc>)
 8010ad6:	4601      	mov	r1, r0
 8010ad8:	6818      	ldr	r0, [r3, #0]
 8010ada:	f000 b825 	b.w	8010b28 <_malloc_r>
 8010ade:	bf00      	nop
 8010ae0:	20000460 	.word	0x20000460

08010ae4 <sbrk_aligned>:
 8010ae4:	b570      	push	{r4, r5, r6, lr}
 8010ae6:	4e0f      	ldr	r6, [pc, #60]	@ (8010b24 <sbrk_aligned+0x40>)
 8010ae8:	460c      	mov	r4, r1
 8010aea:	6831      	ldr	r1, [r6, #0]
 8010aec:	4605      	mov	r5, r0
 8010aee:	b911      	cbnz	r1, 8010af6 <sbrk_aligned+0x12>
 8010af0:	f001 fd90 	bl	8012614 <_sbrk_r>
 8010af4:	6030      	str	r0, [r6, #0]
 8010af6:	4621      	mov	r1, r4
 8010af8:	4628      	mov	r0, r5
 8010afa:	f001 fd8b 	bl	8012614 <_sbrk_r>
 8010afe:	1c43      	adds	r3, r0, #1
 8010b00:	d103      	bne.n	8010b0a <sbrk_aligned+0x26>
 8010b02:	f04f 34ff 	mov.w	r4, #4294967295
 8010b06:	4620      	mov	r0, r4
 8010b08:	bd70      	pop	{r4, r5, r6, pc}
 8010b0a:	1cc4      	adds	r4, r0, #3
 8010b0c:	f024 0403 	bic.w	r4, r4, #3
 8010b10:	42a0      	cmp	r0, r4
 8010b12:	d0f8      	beq.n	8010b06 <sbrk_aligned+0x22>
 8010b14:	1a21      	subs	r1, r4, r0
 8010b16:	4628      	mov	r0, r5
 8010b18:	f001 fd7c 	bl	8012614 <_sbrk_r>
 8010b1c:	3001      	adds	r0, #1
 8010b1e:	d1f2      	bne.n	8010b06 <sbrk_aligned+0x22>
 8010b20:	e7ef      	b.n	8010b02 <sbrk_aligned+0x1e>
 8010b22:	bf00      	nop
 8010b24:	20006728 	.word	0x20006728

08010b28 <_malloc_r>:
 8010b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b2c:	1ccd      	adds	r5, r1, #3
 8010b2e:	f025 0503 	bic.w	r5, r5, #3
 8010b32:	3508      	adds	r5, #8
 8010b34:	2d0c      	cmp	r5, #12
 8010b36:	bf38      	it	cc
 8010b38:	250c      	movcc	r5, #12
 8010b3a:	2d00      	cmp	r5, #0
 8010b3c:	4606      	mov	r6, r0
 8010b3e:	db01      	blt.n	8010b44 <_malloc_r+0x1c>
 8010b40:	42a9      	cmp	r1, r5
 8010b42:	d904      	bls.n	8010b4e <_malloc_r+0x26>
 8010b44:	230c      	movs	r3, #12
 8010b46:	6033      	str	r3, [r6, #0]
 8010b48:	2000      	movs	r0, #0
 8010b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010c24 <_malloc_r+0xfc>
 8010b52:	f000 f869 	bl	8010c28 <__malloc_lock>
 8010b56:	f8d8 3000 	ldr.w	r3, [r8]
 8010b5a:	461c      	mov	r4, r3
 8010b5c:	bb44      	cbnz	r4, 8010bb0 <_malloc_r+0x88>
 8010b5e:	4629      	mov	r1, r5
 8010b60:	4630      	mov	r0, r6
 8010b62:	f7ff ffbf 	bl	8010ae4 <sbrk_aligned>
 8010b66:	1c43      	adds	r3, r0, #1
 8010b68:	4604      	mov	r4, r0
 8010b6a:	d158      	bne.n	8010c1e <_malloc_r+0xf6>
 8010b6c:	f8d8 4000 	ldr.w	r4, [r8]
 8010b70:	4627      	mov	r7, r4
 8010b72:	2f00      	cmp	r7, #0
 8010b74:	d143      	bne.n	8010bfe <_malloc_r+0xd6>
 8010b76:	2c00      	cmp	r4, #0
 8010b78:	d04b      	beq.n	8010c12 <_malloc_r+0xea>
 8010b7a:	6823      	ldr	r3, [r4, #0]
 8010b7c:	4639      	mov	r1, r7
 8010b7e:	4630      	mov	r0, r6
 8010b80:	eb04 0903 	add.w	r9, r4, r3
 8010b84:	f001 fd46 	bl	8012614 <_sbrk_r>
 8010b88:	4581      	cmp	r9, r0
 8010b8a:	d142      	bne.n	8010c12 <_malloc_r+0xea>
 8010b8c:	6821      	ldr	r1, [r4, #0]
 8010b8e:	1a6d      	subs	r5, r5, r1
 8010b90:	4629      	mov	r1, r5
 8010b92:	4630      	mov	r0, r6
 8010b94:	f7ff ffa6 	bl	8010ae4 <sbrk_aligned>
 8010b98:	3001      	adds	r0, #1
 8010b9a:	d03a      	beq.n	8010c12 <_malloc_r+0xea>
 8010b9c:	6823      	ldr	r3, [r4, #0]
 8010b9e:	442b      	add	r3, r5
 8010ba0:	6023      	str	r3, [r4, #0]
 8010ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8010ba6:	685a      	ldr	r2, [r3, #4]
 8010ba8:	bb62      	cbnz	r2, 8010c04 <_malloc_r+0xdc>
 8010baa:	f8c8 7000 	str.w	r7, [r8]
 8010bae:	e00f      	b.n	8010bd0 <_malloc_r+0xa8>
 8010bb0:	6822      	ldr	r2, [r4, #0]
 8010bb2:	1b52      	subs	r2, r2, r5
 8010bb4:	d420      	bmi.n	8010bf8 <_malloc_r+0xd0>
 8010bb6:	2a0b      	cmp	r2, #11
 8010bb8:	d917      	bls.n	8010bea <_malloc_r+0xc2>
 8010bba:	1961      	adds	r1, r4, r5
 8010bbc:	42a3      	cmp	r3, r4
 8010bbe:	6025      	str	r5, [r4, #0]
 8010bc0:	bf18      	it	ne
 8010bc2:	6059      	strne	r1, [r3, #4]
 8010bc4:	6863      	ldr	r3, [r4, #4]
 8010bc6:	bf08      	it	eq
 8010bc8:	f8c8 1000 	streq.w	r1, [r8]
 8010bcc:	5162      	str	r2, [r4, r5]
 8010bce:	604b      	str	r3, [r1, #4]
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	f000 f82f 	bl	8010c34 <__malloc_unlock>
 8010bd6:	f104 000b 	add.w	r0, r4, #11
 8010bda:	1d23      	adds	r3, r4, #4
 8010bdc:	f020 0007 	bic.w	r0, r0, #7
 8010be0:	1ac2      	subs	r2, r0, r3
 8010be2:	bf1c      	itt	ne
 8010be4:	1a1b      	subne	r3, r3, r0
 8010be6:	50a3      	strne	r3, [r4, r2]
 8010be8:	e7af      	b.n	8010b4a <_malloc_r+0x22>
 8010bea:	6862      	ldr	r2, [r4, #4]
 8010bec:	42a3      	cmp	r3, r4
 8010bee:	bf0c      	ite	eq
 8010bf0:	f8c8 2000 	streq.w	r2, [r8]
 8010bf4:	605a      	strne	r2, [r3, #4]
 8010bf6:	e7eb      	b.n	8010bd0 <_malloc_r+0xa8>
 8010bf8:	4623      	mov	r3, r4
 8010bfa:	6864      	ldr	r4, [r4, #4]
 8010bfc:	e7ae      	b.n	8010b5c <_malloc_r+0x34>
 8010bfe:	463c      	mov	r4, r7
 8010c00:	687f      	ldr	r7, [r7, #4]
 8010c02:	e7b6      	b.n	8010b72 <_malloc_r+0x4a>
 8010c04:	461a      	mov	r2, r3
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	42a3      	cmp	r3, r4
 8010c0a:	d1fb      	bne.n	8010c04 <_malloc_r+0xdc>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	6053      	str	r3, [r2, #4]
 8010c10:	e7de      	b.n	8010bd0 <_malloc_r+0xa8>
 8010c12:	230c      	movs	r3, #12
 8010c14:	6033      	str	r3, [r6, #0]
 8010c16:	4630      	mov	r0, r6
 8010c18:	f000 f80c 	bl	8010c34 <__malloc_unlock>
 8010c1c:	e794      	b.n	8010b48 <_malloc_r+0x20>
 8010c1e:	6005      	str	r5, [r0, #0]
 8010c20:	e7d6      	b.n	8010bd0 <_malloc_r+0xa8>
 8010c22:	bf00      	nop
 8010c24:	2000672c 	.word	0x2000672c

08010c28 <__malloc_lock>:
 8010c28:	4801      	ldr	r0, [pc, #4]	@ (8010c30 <__malloc_lock+0x8>)
 8010c2a:	f7ff b8a4 	b.w	800fd76 <__retarget_lock_acquire_recursive>
 8010c2e:	bf00      	nop
 8010c30:	20006724 	.word	0x20006724

08010c34 <__malloc_unlock>:
 8010c34:	4801      	ldr	r0, [pc, #4]	@ (8010c3c <__malloc_unlock+0x8>)
 8010c36:	f7ff b89f 	b.w	800fd78 <__retarget_lock_release_recursive>
 8010c3a:	bf00      	nop
 8010c3c:	20006724 	.word	0x20006724

08010c40 <_Balloc>:
 8010c40:	b570      	push	{r4, r5, r6, lr}
 8010c42:	69c6      	ldr	r6, [r0, #28]
 8010c44:	4604      	mov	r4, r0
 8010c46:	460d      	mov	r5, r1
 8010c48:	b976      	cbnz	r6, 8010c68 <_Balloc+0x28>
 8010c4a:	2010      	movs	r0, #16
 8010c4c:	f7ff ff42 	bl	8010ad4 <malloc>
 8010c50:	4602      	mov	r2, r0
 8010c52:	61e0      	str	r0, [r4, #28]
 8010c54:	b920      	cbnz	r0, 8010c60 <_Balloc+0x20>
 8010c56:	4b18      	ldr	r3, [pc, #96]	@ (8010cb8 <_Balloc+0x78>)
 8010c58:	4818      	ldr	r0, [pc, #96]	@ (8010cbc <_Balloc+0x7c>)
 8010c5a:	216b      	movs	r1, #107	@ 0x6b
 8010c5c:	f001 fcf4 	bl	8012648 <__assert_func>
 8010c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c64:	6006      	str	r6, [r0, #0]
 8010c66:	60c6      	str	r6, [r0, #12]
 8010c68:	69e6      	ldr	r6, [r4, #28]
 8010c6a:	68f3      	ldr	r3, [r6, #12]
 8010c6c:	b183      	cbz	r3, 8010c90 <_Balloc+0x50>
 8010c6e:	69e3      	ldr	r3, [r4, #28]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c76:	b9b8      	cbnz	r0, 8010ca8 <_Balloc+0x68>
 8010c78:	2101      	movs	r1, #1
 8010c7a:	fa01 f605 	lsl.w	r6, r1, r5
 8010c7e:	1d72      	adds	r2, r6, #5
 8010c80:	0092      	lsls	r2, r2, #2
 8010c82:	4620      	mov	r0, r4
 8010c84:	f001 fcfe 	bl	8012684 <_calloc_r>
 8010c88:	b160      	cbz	r0, 8010ca4 <_Balloc+0x64>
 8010c8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010c8e:	e00e      	b.n	8010cae <_Balloc+0x6e>
 8010c90:	2221      	movs	r2, #33	@ 0x21
 8010c92:	2104      	movs	r1, #4
 8010c94:	4620      	mov	r0, r4
 8010c96:	f001 fcf5 	bl	8012684 <_calloc_r>
 8010c9a:	69e3      	ldr	r3, [r4, #28]
 8010c9c:	60f0      	str	r0, [r6, #12]
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d1e4      	bne.n	8010c6e <_Balloc+0x2e>
 8010ca4:	2000      	movs	r0, #0
 8010ca6:	bd70      	pop	{r4, r5, r6, pc}
 8010ca8:	6802      	ldr	r2, [r0, #0]
 8010caa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010cae:	2300      	movs	r3, #0
 8010cb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010cb4:	e7f7      	b.n	8010ca6 <_Balloc+0x66>
 8010cb6:	bf00      	nop
 8010cb8:	08016233 	.word	0x08016233
 8010cbc:	080162b3 	.word	0x080162b3

08010cc0 <_Bfree>:
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	69c6      	ldr	r6, [r0, #28]
 8010cc4:	4605      	mov	r5, r0
 8010cc6:	460c      	mov	r4, r1
 8010cc8:	b976      	cbnz	r6, 8010ce8 <_Bfree+0x28>
 8010cca:	2010      	movs	r0, #16
 8010ccc:	f7ff ff02 	bl	8010ad4 <malloc>
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	61e8      	str	r0, [r5, #28]
 8010cd4:	b920      	cbnz	r0, 8010ce0 <_Bfree+0x20>
 8010cd6:	4b09      	ldr	r3, [pc, #36]	@ (8010cfc <_Bfree+0x3c>)
 8010cd8:	4809      	ldr	r0, [pc, #36]	@ (8010d00 <_Bfree+0x40>)
 8010cda:	218f      	movs	r1, #143	@ 0x8f
 8010cdc:	f001 fcb4 	bl	8012648 <__assert_func>
 8010ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ce4:	6006      	str	r6, [r0, #0]
 8010ce6:	60c6      	str	r6, [r0, #12]
 8010ce8:	b13c      	cbz	r4, 8010cfa <_Bfree+0x3a>
 8010cea:	69eb      	ldr	r3, [r5, #28]
 8010cec:	6862      	ldr	r2, [r4, #4]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010cf4:	6021      	str	r1, [r4, #0]
 8010cf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010cfa:	bd70      	pop	{r4, r5, r6, pc}
 8010cfc:	08016233 	.word	0x08016233
 8010d00:	080162b3 	.word	0x080162b3

08010d04 <__multadd>:
 8010d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d08:	690d      	ldr	r5, [r1, #16]
 8010d0a:	4607      	mov	r7, r0
 8010d0c:	460c      	mov	r4, r1
 8010d0e:	461e      	mov	r6, r3
 8010d10:	f101 0c14 	add.w	ip, r1, #20
 8010d14:	2000      	movs	r0, #0
 8010d16:	f8dc 3000 	ldr.w	r3, [ip]
 8010d1a:	b299      	uxth	r1, r3
 8010d1c:	fb02 6101 	mla	r1, r2, r1, r6
 8010d20:	0c1e      	lsrs	r6, r3, #16
 8010d22:	0c0b      	lsrs	r3, r1, #16
 8010d24:	fb02 3306 	mla	r3, r2, r6, r3
 8010d28:	b289      	uxth	r1, r1
 8010d2a:	3001      	adds	r0, #1
 8010d2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010d30:	4285      	cmp	r5, r0
 8010d32:	f84c 1b04 	str.w	r1, [ip], #4
 8010d36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010d3a:	dcec      	bgt.n	8010d16 <__multadd+0x12>
 8010d3c:	b30e      	cbz	r6, 8010d82 <__multadd+0x7e>
 8010d3e:	68a3      	ldr	r3, [r4, #8]
 8010d40:	42ab      	cmp	r3, r5
 8010d42:	dc19      	bgt.n	8010d78 <__multadd+0x74>
 8010d44:	6861      	ldr	r1, [r4, #4]
 8010d46:	4638      	mov	r0, r7
 8010d48:	3101      	adds	r1, #1
 8010d4a:	f7ff ff79 	bl	8010c40 <_Balloc>
 8010d4e:	4680      	mov	r8, r0
 8010d50:	b928      	cbnz	r0, 8010d5e <__multadd+0x5a>
 8010d52:	4602      	mov	r2, r0
 8010d54:	4b0c      	ldr	r3, [pc, #48]	@ (8010d88 <__multadd+0x84>)
 8010d56:	480d      	ldr	r0, [pc, #52]	@ (8010d8c <__multadd+0x88>)
 8010d58:	21ba      	movs	r1, #186	@ 0xba
 8010d5a:	f001 fc75 	bl	8012648 <__assert_func>
 8010d5e:	6922      	ldr	r2, [r4, #16]
 8010d60:	3202      	adds	r2, #2
 8010d62:	f104 010c 	add.w	r1, r4, #12
 8010d66:	0092      	lsls	r2, r2, #2
 8010d68:	300c      	adds	r0, #12
 8010d6a:	f7ff f806 	bl	800fd7a <memcpy>
 8010d6e:	4621      	mov	r1, r4
 8010d70:	4638      	mov	r0, r7
 8010d72:	f7ff ffa5 	bl	8010cc0 <_Bfree>
 8010d76:	4644      	mov	r4, r8
 8010d78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d7c:	3501      	adds	r5, #1
 8010d7e:	615e      	str	r6, [r3, #20]
 8010d80:	6125      	str	r5, [r4, #16]
 8010d82:	4620      	mov	r0, r4
 8010d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d88:	080162a2 	.word	0x080162a2
 8010d8c:	080162b3 	.word	0x080162b3

08010d90 <__s2b>:
 8010d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d94:	460c      	mov	r4, r1
 8010d96:	4615      	mov	r5, r2
 8010d98:	461f      	mov	r7, r3
 8010d9a:	2209      	movs	r2, #9
 8010d9c:	3308      	adds	r3, #8
 8010d9e:	4606      	mov	r6, r0
 8010da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010da4:	2100      	movs	r1, #0
 8010da6:	2201      	movs	r2, #1
 8010da8:	429a      	cmp	r2, r3
 8010daa:	db09      	blt.n	8010dc0 <__s2b+0x30>
 8010dac:	4630      	mov	r0, r6
 8010dae:	f7ff ff47 	bl	8010c40 <_Balloc>
 8010db2:	b940      	cbnz	r0, 8010dc6 <__s2b+0x36>
 8010db4:	4602      	mov	r2, r0
 8010db6:	4b19      	ldr	r3, [pc, #100]	@ (8010e1c <__s2b+0x8c>)
 8010db8:	4819      	ldr	r0, [pc, #100]	@ (8010e20 <__s2b+0x90>)
 8010dba:	21d3      	movs	r1, #211	@ 0xd3
 8010dbc:	f001 fc44 	bl	8012648 <__assert_func>
 8010dc0:	0052      	lsls	r2, r2, #1
 8010dc2:	3101      	adds	r1, #1
 8010dc4:	e7f0      	b.n	8010da8 <__s2b+0x18>
 8010dc6:	9b08      	ldr	r3, [sp, #32]
 8010dc8:	6143      	str	r3, [r0, #20]
 8010dca:	2d09      	cmp	r5, #9
 8010dcc:	f04f 0301 	mov.w	r3, #1
 8010dd0:	6103      	str	r3, [r0, #16]
 8010dd2:	dd16      	ble.n	8010e02 <__s2b+0x72>
 8010dd4:	f104 0909 	add.w	r9, r4, #9
 8010dd8:	46c8      	mov	r8, r9
 8010dda:	442c      	add	r4, r5
 8010ddc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010de0:	4601      	mov	r1, r0
 8010de2:	3b30      	subs	r3, #48	@ 0x30
 8010de4:	220a      	movs	r2, #10
 8010de6:	4630      	mov	r0, r6
 8010de8:	f7ff ff8c 	bl	8010d04 <__multadd>
 8010dec:	45a0      	cmp	r8, r4
 8010dee:	d1f5      	bne.n	8010ddc <__s2b+0x4c>
 8010df0:	f1a5 0408 	sub.w	r4, r5, #8
 8010df4:	444c      	add	r4, r9
 8010df6:	1b2d      	subs	r5, r5, r4
 8010df8:	1963      	adds	r3, r4, r5
 8010dfa:	42bb      	cmp	r3, r7
 8010dfc:	db04      	blt.n	8010e08 <__s2b+0x78>
 8010dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e02:	340a      	adds	r4, #10
 8010e04:	2509      	movs	r5, #9
 8010e06:	e7f6      	b.n	8010df6 <__s2b+0x66>
 8010e08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010e0c:	4601      	mov	r1, r0
 8010e0e:	3b30      	subs	r3, #48	@ 0x30
 8010e10:	220a      	movs	r2, #10
 8010e12:	4630      	mov	r0, r6
 8010e14:	f7ff ff76 	bl	8010d04 <__multadd>
 8010e18:	e7ee      	b.n	8010df8 <__s2b+0x68>
 8010e1a:	bf00      	nop
 8010e1c:	080162a2 	.word	0x080162a2
 8010e20:	080162b3 	.word	0x080162b3

08010e24 <__hi0bits>:
 8010e24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010e28:	4603      	mov	r3, r0
 8010e2a:	bf36      	itet	cc
 8010e2c:	0403      	lslcc	r3, r0, #16
 8010e2e:	2000      	movcs	r0, #0
 8010e30:	2010      	movcc	r0, #16
 8010e32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010e36:	bf3c      	itt	cc
 8010e38:	021b      	lslcc	r3, r3, #8
 8010e3a:	3008      	addcc	r0, #8
 8010e3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010e40:	bf3c      	itt	cc
 8010e42:	011b      	lslcc	r3, r3, #4
 8010e44:	3004      	addcc	r0, #4
 8010e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e4a:	bf3c      	itt	cc
 8010e4c:	009b      	lslcc	r3, r3, #2
 8010e4e:	3002      	addcc	r0, #2
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	db05      	blt.n	8010e60 <__hi0bits+0x3c>
 8010e54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010e58:	f100 0001 	add.w	r0, r0, #1
 8010e5c:	bf08      	it	eq
 8010e5e:	2020      	moveq	r0, #32
 8010e60:	4770      	bx	lr

08010e62 <__lo0bits>:
 8010e62:	6803      	ldr	r3, [r0, #0]
 8010e64:	4602      	mov	r2, r0
 8010e66:	f013 0007 	ands.w	r0, r3, #7
 8010e6a:	d00b      	beq.n	8010e84 <__lo0bits+0x22>
 8010e6c:	07d9      	lsls	r1, r3, #31
 8010e6e:	d421      	bmi.n	8010eb4 <__lo0bits+0x52>
 8010e70:	0798      	lsls	r0, r3, #30
 8010e72:	bf49      	itett	mi
 8010e74:	085b      	lsrmi	r3, r3, #1
 8010e76:	089b      	lsrpl	r3, r3, #2
 8010e78:	2001      	movmi	r0, #1
 8010e7a:	6013      	strmi	r3, [r2, #0]
 8010e7c:	bf5c      	itt	pl
 8010e7e:	6013      	strpl	r3, [r2, #0]
 8010e80:	2002      	movpl	r0, #2
 8010e82:	4770      	bx	lr
 8010e84:	b299      	uxth	r1, r3
 8010e86:	b909      	cbnz	r1, 8010e8c <__lo0bits+0x2a>
 8010e88:	0c1b      	lsrs	r3, r3, #16
 8010e8a:	2010      	movs	r0, #16
 8010e8c:	b2d9      	uxtb	r1, r3
 8010e8e:	b909      	cbnz	r1, 8010e94 <__lo0bits+0x32>
 8010e90:	3008      	adds	r0, #8
 8010e92:	0a1b      	lsrs	r3, r3, #8
 8010e94:	0719      	lsls	r1, r3, #28
 8010e96:	bf04      	itt	eq
 8010e98:	091b      	lsreq	r3, r3, #4
 8010e9a:	3004      	addeq	r0, #4
 8010e9c:	0799      	lsls	r1, r3, #30
 8010e9e:	bf04      	itt	eq
 8010ea0:	089b      	lsreq	r3, r3, #2
 8010ea2:	3002      	addeq	r0, #2
 8010ea4:	07d9      	lsls	r1, r3, #31
 8010ea6:	d403      	bmi.n	8010eb0 <__lo0bits+0x4e>
 8010ea8:	085b      	lsrs	r3, r3, #1
 8010eaa:	f100 0001 	add.w	r0, r0, #1
 8010eae:	d003      	beq.n	8010eb8 <__lo0bits+0x56>
 8010eb0:	6013      	str	r3, [r2, #0]
 8010eb2:	4770      	bx	lr
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	4770      	bx	lr
 8010eb8:	2020      	movs	r0, #32
 8010eba:	4770      	bx	lr

08010ebc <__i2b>:
 8010ebc:	b510      	push	{r4, lr}
 8010ebe:	460c      	mov	r4, r1
 8010ec0:	2101      	movs	r1, #1
 8010ec2:	f7ff febd 	bl	8010c40 <_Balloc>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	b928      	cbnz	r0, 8010ed6 <__i2b+0x1a>
 8010eca:	4b05      	ldr	r3, [pc, #20]	@ (8010ee0 <__i2b+0x24>)
 8010ecc:	4805      	ldr	r0, [pc, #20]	@ (8010ee4 <__i2b+0x28>)
 8010ece:	f240 1145 	movw	r1, #325	@ 0x145
 8010ed2:	f001 fbb9 	bl	8012648 <__assert_func>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	6144      	str	r4, [r0, #20]
 8010eda:	6103      	str	r3, [r0, #16]
 8010edc:	bd10      	pop	{r4, pc}
 8010ede:	bf00      	nop
 8010ee0:	080162a2 	.word	0x080162a2
 8010ee4:	080162b3 	.word	0x080162b3

08010ee8 <__multiply>:
 8010ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eec:	4614      	mov	r4, r2
 8010eee:	690a      	ldr	r2, [r1, #16]
 8010ef0:	6923      	ldr	r3, [r4, #16]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	bfa8      	it	ge
 8010ef6:	4623      	movge	r3, r4
 8010ef8:	460f      	mov	r7, r1
 8010efa:	bfa4      	itt	ge
 8010efc:	460c      	movge	r4, r1
 8010efe:	461f      	movge	r7, r3
 8010f00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010f04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010f08:	68a3      	ldr	r3, [r4, #8]
 8010f0a:	6861      	ldr	r1, [r4, #4]
 8010f0c:	eb0a 0609 	add.w	r6, sl, r9
 8010f10:	42b3      	cmp	r3, r6
 8010f12:	b085      	sub	sp, #20
 8010f14:	bfb8      	it	lt
 8010f16:	3101      	addlt	r1, #1
 8010f18:	f7ff fe92 	bl	8010c40 <_Balloc>
 8010f1c:	b930      	cbnz	r0, 8010f2c <__multiply+0x44>
 8010f1e:	4602      	mov	r2, r0
 8010f20:	4b44      	ldr	r3, [pc, #272]	@ (8011034 <__multiply+0x14c>)
 8010f22:	4845      	ldr	r0, [pc, #276]	@ (8011038 <__multiply+0x150>)
 8010f24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010f28:	f001 fb8e 	bl	8012648 <__assert_func>
 8010f2c:	f100 0514 	add.w	r5, r0, #20
 8010f30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010f34:	462b      	mov	r3, r5
 8010f36:	2200      	movs	r2, #0
 8010f38:	4543      	cmp	r3, r8
 8010f3a:	d321      	bcc.n	8010f80 <__multiply+0x98>
 8010f3c:	f107 0114 	add.w	r1, r7, #20
 8010f40:	f104 0214 	add.w	r2, r4, #20
 8010f44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010f48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010f4c:	9302      	str	r3, [sp, #8]
 8010f4e:	1b13      	subs	r3, r2, r4
 8010f50:	3b15      	subs	r3, #21
 8010f52:	f023 0303 	bic.w	r3, r3, #3
 8010f56:	3304      	adds	r3, #4
 8010f58:	f104 0715 	add.w	r7, r4, #21
 8010f5c:	42ba      	cmp	r2, r7
 8010f5e:	bf38      	it	cc
 8010f60:	2304      	movcc	r3, #4
 8010f62:	9301      	str	r3, [sp, #4]
 8010f64:	9b02      	ldr	r3, [sp, #8]
 8010f66:	9103      	str	r1, [sp, #12]
 8010f68:	428b      	cmp	r3, r1
 8010f6a:	d80c      	bhi.n	8010f86 <__multiply+0x9e>
 8010f6c:	2e00      	cmp	r6, #0
 8010f6e:	dd03      	ble.n	8010f78 <__multiply+0x90>
 8010f70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d05b      	beq.n	8011030 <__multiply+0x148>
 8010f78:	6106      	str	r6, [r0, #16]
 8010f7a:	b005      	add	sp, #20
 8010f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f80:	f843 2b04 	str.w	r2, [r3], #4
 8010f84:	e7d8      	b.n	8010f38 <__multiply+0x50>
 8010f86:	f8b1 a000 	ldrh.w	sl, [r1]
 8010f8a:	f1ba 0f00 	cmp.w	sl, #0
 8010f8e:	d024      	beq.n	8010fda <__multiply+0xf2>
 8010f90:	f104 0e14 	add.w	lr, r4, #20
 8010f94:	46a9      	mov	r9, r5
 8010f96:	f04f 0c00 	mov.w	ip, #0
 8010f9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f9e:	f8d9 3000 	ldr.w	r3, [r9]
 8010fa2:	fa1f fb87 	uxth.w	fp, r7
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	fb0a 330b 	mla	r3, sl, fp, r3
 8010fac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010fb0:	f8d9 7000 	ldr.w	r7, [r9]
 8010fb4:	4463      	add	r3, ip
 8010fb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010fba:	fb0a c70b 	mla	r7, sl, fp, ip
 8010fbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010fc8:	4572      	cmp	r2, lr
 8010fca:	f849 3b04 	str.w	r3, [r9], #4
 8010fce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010fd2:	d8e2      	bhi.n	8010f9a <__multiply+0xb2>
 8010fd4:	9b01      	ldr	r3, [sp, #4]
 8010fd6:	f845 c003 	str.w	ip, [r5, r3]
 8010fda:	9b03      	ldr	r3, [sp, #12]
 8010fdc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010fe0:	3104      	adds	r1, #4
 8010fe2:	f1b9 0f00 	cmp.w	r9, #0
 8010fe6:	d021      	beq.n	801102c <__multiply+0x144>
 8010fe8:	682b      	ldr	r3, [r5, #0]
 8010fea:	f104 0c14 	add.w	ip, r4, #20
 8010fee:	46ae      	mov	lr, r5
 8010ff0:	f04f 0a00 	mov.w	sl, #0
 8010ff4:	f8bc b000 	ldrh.w	fp, [ip]
 8010ff8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010ffc:	fb09 770b 	mla	r7, r9, fp, r7
 8011000:	4457      	add	r7, sl
 8011002:	b29b      	uxth	r3, r3
 8011004:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011008:	f84e 3b04 	str.w	r3, [lr], #4
 801100c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011010:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011014:	f8be 3000 	ldrh.w	r3, [lr]
 8011018:	fb09 330a 	mla	r3, r9, sl, r3
 801101c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011020:	4562      	cmp	r2, ip
 8011022:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011026:	d8e5      	bhi.n	8010ff4 <__multiply+0x10c>
 8011028:	9f01      	ldr	r7, [sp, #4]
 801102a:	51eb      	str	r3, [r5, r7]
 801102c:	3504      	adds	r5, #4
 801102e:	e799      	b.n	8010f64 <__multiply+0x7c>
 8011030:	3e01      	subs	r6, #1
 8011032:	e79b      	b.n	8010f6c <__multiply+0x84>
 8011034:	080162a2 	.word	0x080162a2
 8011038:	080162b3 	.word	0x080162b3

0801103c <__pow5mult>:
 801103c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011040:	4615      	mov	r5, r2
 8011042:	f012 0203 	ands.w	r2, r2, #3
 8011046:	4607      	mov	r7, r0
 8011048:	460e      	mov	r6, r1
 801104a:	d007      	beq.n	801105c <__pow5mult+0x20>
 801104c:	4c25      	ldr	r4, [pc, #148]	@ (80110e4 <__pow5mult+0xa8>)
 801104e:	3a01      	subs	r2, #1
 8011050:	2300      	movs	r3, #0
 8011052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011056:	f7ff fe55 	bl	8010d04 <__multadd>
 801105a:	4606      	mov	r6, r0
 801105c:	10ad      	asrs	r5, r5, #2
 801105e:	d03d      	beq.n	80110dc <__pow5mult+0xa0>
 8011060:	69fc      	ldr	r4, [r7, #28]
 8011062:	b97c      	cbnz	r4, 8011084 <__pow5mult+0x48>
 8011064:	2010      	movs	r0, #16
 8011066:	f7ff fd35 	bl	8010ad4 <malloc>
 801106a:	4602      	mov	r2, r0
 801106c:	61f8      	str	r0, [r7, #28]
 801106e:	b928      	cbnz	r0, 801107c <__pow5mult+0x40>
 8011070:	4b1d      	ldr	r3, [pc, #116]	@ (80110e8 <__pow5mult+0xac>)
 8011072:	481e      	ldr	r0, [pc, #120]	@ (80110ec <__pow5mult+0xb0>)
 8011074:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011078:	f001 fae6 	bl	8012648 <__assert_func>
 801107c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011080:	6004      	str	r4, [r0, #0]
 8011082:	60c4      	str	r4, [r0, #12]
 8011084:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801108c:	b94c      	cbnz	r4, 80110a2 <__pow5mult+0x66>
 801108e:	f240 2171 	movw	r1, #625	@ 0x271
 8011092:	4638      	mov	r0, r7
 8011094:	f7ff ff12 	bl	8010ebc <__i2b>
 8011098:	2300      	movs	r3, #0
 801109a:	f8c8 0008 	str.w	r0, [r8, #8]
 801109e:	4604      	mov	r4, r0
 80110a0:	6003      	str	r3, [r0, #0]
 80110a2:	f04f 0900 	mov.w	r9, #0
 80110a6:	07eb      	lsls	r3, r5, #31
 80110a8:	d50a      	bpl.n	80110c0 <__pow5mult+0x84>
 80110aa:	4631      	mov	r1, r6
 80110ac:	4622      	mov	r2, r4
 80110ae:	4638      	mov	r0, r7
 80110b0:	f7ff ff1a 	bl	8010ee8 <__multiply>
 80110b4:	4631      	mov	r1, r6
 80110b6:	4680      	mov	r8, r0
 80110b8:	4638      	mov	r0, r7
 80110ba:	f7ff fe01 	bl	8010cc0 <_Bfree>
 80110be:	4646      	mov	r6, r8
 80110c0:	106d      	asrs	r5, r5, #1
 80110c2:	d00b      	beq.n	80110dc <__pow5mult+0xa0>
 80110c4:	6820      	ldr	r0, [r4, #0]
 80110c6:	b938      	cbnz	r0, 80110d8 <__pow5mult+0x9c>
 80110c8:	4622      	mov	r2, r4
 80110ca:	4621      	mov	r1, r4
 80110cc:	4638      	mov	r0, r7
 80110ce:	f7ff ff0b 	bl	8010ee8 <__multiply>
 80110d2:	6020      	str	r0, [r4, #0]
 80110d4:	f8c0 9000 	str.w	r9, [r0]
 80110d8:	4604      	mov	r4, r0
 80110da:	e7e4      	b.n	80110a6 <__pow5mult+0x6a>
 80110dc:	4630      	mov	r0, r6
 80110de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110e2:	bf00      	nop
 80110e4:	0801630c 	.word	0x0801630c
 80110e8:	08016233 	.word	0x08016233
 80110ec:	080162b3 	.word	0x080162b3

080110f0 <__lshift>:
 80110f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110f4:	460c      	mov	r4, r1
 80110f6:	6849      	ldr	r1, [r1, #4]
 80110f8:	6923      	ldr	r3, [r4, #16]
 80110fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80110fe:	68a3      	ldr	r3, [r4, #8]
 8011100:	4607      	mov	r7, r0
 8011102:	4691      	mov	r9, r2
 8011104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011108:	f108 0601 	add.w	r6, r8, #1
 801110c:	42b3      	cmp	r3, r6
 801110e:	db0b      	blt.n	8011128 <__lshift+0x38>
 8011110:	4638      	mov	r0, r7
 8011112:	f7ff fd95 	bl	8010c40 <_Balloc>
 8011116:	4605      	mov	r5, r0
 8011118:	b948      	cbnz	r0, 801112e <__lshift+0x3e>
 801111a:	4602      	mov	r2, r0
 801111c:	4b28      	ldr	r3, [pc, #160]	@ (80111c0 <__lshift+0xd0>)
 801111e:	4829      	ldr	r0, [pc, #164]	@ (80111c4 <__lshift+0xd4>)
 8011120:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011124:	f001 fa90 	bl	8012648 <__assert_func>
 8011128:	3101      	adds	r1, #1
 801112a:	005b      	lsls	r3, r3, #1
 801112c:	e7ee      	b.n	801110c <__lshift+0x1c>
 801112e:	2300      	movs	r3, #0
 8011130:	f100 0114 	add.w	r1, r0, #20
 8011134:	f100 0210 	add.w	r2, r0, #16
 8011138:	4618      	mov	r0, r3
 801113a:	4553      	cmp	r3, sl
 801113c:	db33      	blt.n	80111a6 <__lshift+0xb6>
 801113e:	6920      	ldr	r0, [r4, #16]
 8011140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011144:	f104 0314 	add.w	r3, r4, #20
 8011148:	f019 091f 	ands.w	r9, r9, #31
 801114c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011154:	d02b      	beq.n	80111ae <__lshift+0xbe>
 8011156:	f1c9 0e20 	rsb	lr, r9, #32
 801115a:	468a      	mov	sl, r1
 801115c:	2200      	movs	r2, #0
 801115e:	6818      	ldr	r0, [r3, #0]
 8011160:	fa00 f009 	lsl.w	r0, r0, r9
 8011164:	4310      	orrs	r0, r2
 8011166:	f84a 0b04 	str.w	r0, [sl], #4
 801116a:	f853 2b04 	ldr.w	r2, [r3], #4
 801116e:	459c      	cmp	ip, r3
 8011170:	fa22 f20e 	lsr.w	r2, r2, lr
 8011174:	d8f3      	bhi.n	801115e <__lshift+0x6e>
 8011176:	ebac 0304 	sub.w	r3, ip, r4
 801117a:	3b15      	subs	r3, #21
 801117c:	f023 0303 	bic.w	r3, r3, #3
 8011180:	3304      	adds	r3, #4
 8011182:	f104 0015 	add.w	r0, r4, #21
 8011186:	4584      	cmp	ip, r0
 8011188:	bf38      	it	cc
 801118a:	2304      	movcc	r3, #4
 801118c:	50ca      	str	r2, [r1, r3]
 801118e:	b10a      	cbz	r2, 8011194 <__lshift+0xa4>
 8011190:	f108 0602 	add.w	r6, r8, #2
 8011194:	3e01      	subs	r6, #1
 8011196:	4638      	mov	r0, r7
 8011198:	612e      	str	r6, [r5, #16]
 801119a:	4621      	mov	r1, r4
 801119c:	f7ff fd90 	bl	8010cc0 <_Bfree>
 80111a0:	4628      	mov	r0, r5
 80111a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80111aa:	3301      	adds	r3, #1
 80111ac:	e7c5      	b.n	801113a <__lshift+0x4a>
 80111ae:	3904      	subs	r1, #4
 80111b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80111b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80111b8:	459c      	cmp	ip, r3
 80111ba:	d8f9      	bhi.n	80111b0 <__lshift+0xc0>
 80111bc:	e7ea      	b.n	8011194 <__lshift+0xa4>
 80111be:	bf00      	nop
 80111c0:	080162a2 	.word	0x080162a2
 80111c4:	080162b3 	.word	0x080162b3

080111c8 <__mcmp>:
 80111c8:	690a      	ldr	r2, [r1, #16]
 80111ca:	4603      	mov	r3, r0
 80111cc:	6900      	ldr	r0, [r0, #16]
 80111ce:	1a80      	subs	r0, r0, r2
 80111d0:	b530      	push	{r4, r5, lr}
 80111d2:	d10e      	bne.n	80111f2 <__mcmp+0x2a>
 80111d4:	3314      	adds	r3, #20
 80111d6:	3114      	adds	r1, #20
 80111d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80111dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80111e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80111e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80111e8:	4295      	cmp	r5, r2
 80111ea:	d003      	beq.n	80111f4 <__mcmp+0x2c>
 80111ec:	d205      	bcs.n	80111fa <__mcmp+0x32>
 80111ee:	f04f 30ff 	mov.w	r0, #4294967295
 80111f2:	bd30      	pop	{r4, r5, pc}
 80111f4:	42a3      	cmp	r3, r4
 80111f6:	d3f3      	bcc.n	80111e0 <__mcmp+0x18>
 80111f8:	e7fb      	b.n	80111f2 <__mcmp+0x2a>
 80111fa:	2001      	movs	r0, #1
 80111fc:	e7f9      	b.n	80111f2 <__mcmp+0x2a>
	...

08011200 <__mdiff>:
 8011200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011204:	4689      	mov	r9, r1
 8011206:	4606      	mov	r6, r0
 8011208:	4611      	mov	r1, r2
 801120a:	4648      	mov	r0, r9
 801120c:	4614      	mov	r4, r2
 801120e:	f7ff ffdb 	bl	80111c8 <__mcmp>
 8011212:	1e05      	subs	r5, r0, #0
 8011214:	d112      	bne.n	801123c <__mdiff+0x3c>
 8011216:	4629      	mov	r1, r5
 8011218:	4630      	mov	r0, r6
 801121a:	f7ff fd11 	bl	8010c40 <_Balloc>
 801121e:	4602      	mov	r2, r0
 8011220:	b928      	cbnz	r0, 801122e <__mdiff+0x2e>
 8011222:	4b3f      	ldr	r3, [pc, #252]	@ (8011320 <__mdiff+0x120>)
 8011224:	f240 2137 	movw	r1, #567	@ 0x237
 8011228:	483e      	ldr	r0, [pc, #248]	@ (8011324 <__mdiff+0x124>)
 801122a:	f001 fa0d 	bl	8012648 <__assert_func>
 801122e:	2301      	movs	r3, #1
 8011230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011234:	4610      	mov	r0, r2
 8011236:	b003      	add	sp, #12
 8011238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801123c:	bfbc      	itt	lt
 801123e:	464b      	movlt	r3, r9
 8011240:	46a1      	movlt	r9, r4
 8011242:	4630      	mov	r0, r6
 8011244:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011248:	bfba      	itte	lt
 801124a:	461c      	movlt	r4, r3
 801124c:	2501      	movlt	r5, #1
 801124e:	2500      	movge	r5, #0
 8011250:	f7ff fcf6 	bl	8010c40 <_Balloc>
 8011254:	4602      	mov	r2, r0
 8011256:	b918      	cbnz	r0, 8011260 <__mdiff+0x60>
 8011258:	4b31      	ldr	r3, [pc, #196]	@ (8011320 <__mdiff+0x120>)
 801125a:	f240 2145 	movw	r1, #581	@ 0x245
 801125e:	e7e3      	b.n	8011228 <__mdiff+0x28>
 8011260:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011264:	6926      	ldr	r6, [r4, #16]
 8011266:	60c5      	str	r5, [r0, #12]
 8011268:	f109 0310 	add.w	r3, r9, #16
 801126c:	f109 0514 	add.w	r5, r9, #20
 8011270:	f104 0e14 	add.w	lr, r4, #20
 8011274:	f100 0b14 	add.w	fp, r0, #20
 8011278:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801127c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011280:	9301      	str	r3, [sp, #4]
 8011282:	46d9      	mov	r9, fp
 8011284:	f04f 0c00 	mov.w	ip, #0
 8011288:	9b01      	ldr	r3, [sp, #4]
 801128a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801128e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011292:	9301      	str	r3, [sp, #4]
 8011294:	fa1f f38a 	uxth.w	r3, sl
 8011298:	4619      	mov	r1, r3
 801129a:	b283      	uxth	r3, r0
 801129c:	1acb      	subs	r3, r1, r3
 801129e:	0c00      	lsrs	r0, r0, #16
 80112a0:	4463      	add	r3, ip
 80112a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80112a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80112b0:	4576      	cmp	r6, lr
 80112b2:	f849 3b04 	str.w	r3, [r9], #4
 80112b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80112ba:	d8e5      	bhi.n	8011288 <__mdiff+0x88>
 80112bc:	1b33      	subs	r3, r6, r4
 80112be:	3b15      	subs	r3, #21
 80112c0:	f023 0303 	bic.w	r3, r3, #3
 80112c4:	3415      	adds	r4, #21
 80112c6:	3304      	adds	r3, #4
 80112c8:	42a6      	cmp	r6, r4
 80112ca:	bf38      	it	cc
 80112cc:	2304      	movcc	r3, #4
 80112ce:	441d      	add	r5, r3
 80112d0:	445b      	add	r3, fp
 80112d2:	461e      	mov	r6, r3
 80112d4:	462c      	mov	r4, r5
 80112d6:	4544      	cmp	r4, r8
 80112d8:	d30e      	bcc.n	80112f8 <__mdiff+0xf8>
 80112da:	f108 0103 	add.w	r1, r8, #3
 80112de:	1b49      	subs	r1, r1, r5
 80112e0:	f021 0103 	bic.w	r1, r1, #3
 80112e4:	3d03      	subs	r5, #3
 80112e6:	45a8      	cmp	r8, r5
 80112e8:	bf38      	it	cc
 80112ea:	2100      	movcc	r1, #0
 80112ec:	440b      	add	r3, r1
 80112ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80112f2:	b191      	cbz	r1, 801131a <__mdiff+0x11a>
 80112f4:	6117      	str	r7, [r2, #16]
 80112f6:	e79d      	b.n	8011234 <__mdiff+0x34>
 80112f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80112fc:	46e6      	mov	lr, ip
 80112fe:	0c08      	lsrs	r0, r1, #16
 8011300:	fa1c fc81 	uxtah	ip, ip, r1
 8011304:	4471      	add	r1, lr
 8011306:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801130a:	b289      	uxth	r1, r1
 801130c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011310:	f846 1b04 	str.w	r1, [r6], #4
 8011314:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011318:	e7dd      	b.n	80112d6 <__mdiff+0xd6>
 801131a:	3f01      	subs	r7, #1
 801131c:	e7e7      	b.n	80112ee <__mdiff+0xee>
 801131e:	bf00      	nop
 8011320:	080162a2 	.word	0x080162a2
 8011324:	080162b3 	.word	0x080162b3

08011328 <__ulp>:
 8011328:	b082      	sub	sp, #8
 801132a:	ed8d 0b00 	vstr	d0, [sp]
 801132e:	9a01      	ldr	r2, [sp, #4]
 8011330:	4b0f      	ldr	r3, [pc, #60]	@ (8011370 <__ulp+0x48>)
 8011332:	4013      	ands	r3, r2
 8011334:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011338:	2b00      	cmp	r3, #0
 801133a:	dc08      	bgt.n	801134e <__ulp+0x26>
 801133c:	425b      	negs	r3, r3
 801133e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011342:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011346:	da04      	bge.n	8011352 <__ulp+0x2a>
 8011348:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801134c:	4113      	asrs	r3, r2
 801134e:	2200      	movs	r2, #0
 8011350:	e008      	b.n	8011364 <__ulp+0x3c>
 8011352:	f1a2 0314 	sub.w	r3, r2, #20
 8011356:	2b1e      	cmp	r3, #30
 8011358:	bfda      	itte	le
 801135a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801135e:	40da      	lsrle	r2, r3
 8011360:	2201      	movgt	r2, #1
 8011362:	2300      	movs	r3, #0
 8011364:	4619      	mov	r1, r3
 8011366:	4610      	mov	r0, r2
 8011368:	ec41 0b10 	vmov	d0, r0, r1
 801136c:	b002      	add	sp, #8
 801136e:	4770      	bx	lr
 8011370:	7ff00000 	.word	0x7ff00000

08011374 <__b2d>:
 8011374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011378:	6906      	ldr	r6, [r0, #16]
 801137a:	f100 0814 	add.w	r8, r0, #20
 801137e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011382:	1f37      	subs	r7, r6, #4
 8011384:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011388:	4610      	mov	r0, r2
 801138a:	f7ff fd4b 	bl	8010e24 <__hi0bits>
 801138e:	f1c0 0320 	rsb	r3, r0, #32
 8011392:	280a      	cmp	r0, #10
 8011394:	600b      	str	r3, [r1, #0]
 8011396:	491b      	ldr	r1, [pc, #108]	@ (8011404 <__b2d+0x90>)
 8011398:	dc15      	bgt.n	80113c6 <__b2d+0x52>
 801139a:	f1c0 0c0b 	rsb	ip, r0, #11
 801139e:	fa22 f30c 	lsr.w	r3, r2, ip
 80113a2:	45b8      	cmp	r8, r7
 80113a4:	ea43 0501 	orr.w	r5, r3, r1
 80113a8:	bf34      	ite	cc
 80113aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80113ae:	2300      	movcs	r3, #0
 80113b0:	3015      	adds	r0, #21
 80113b2:	fa02 f000 	lsl.w	r0, r2, r0
 80113b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80113ba:	4303      	orrs	r3, r0
 80113bc:	461c      	mov	r4, r3
 80113be:	ec45 4b10 	vmov	d0, r4, r5
 80113c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113c6:	45b8      	cmp	r8, r7
 80113c8:	bf3a      	itte	cc
 80113ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80113ce:	f1a6 0708 	subcc.w	r7, r6, #8
 80113d2:	2300      	movcs	r3, #0
 80113d4:	380b      	subs	r0, #11
 80113d6:	d012      	beq.n	80113fe <__b2d+0x8a>
 80113d8:	f1c0 0120 	rsb	r1, r0, #32
 80113dc:	fa23 f401 	lsr.w	r4, r3, r1
 80113e0:	4082      	lsls	r2, r0
 80113e2:	4322      	orrs	r2, r4
 80113e4:	4547      	cmp	r7, r8
 80113e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80113ea:	bf8c      	ite	hi
 80113ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80113f0:	2200      	movls	r2, #0
 80113f2:	4083      	lsls	r3, r0
 80113f4:	40ca      	lsrs	r2, r1
 80113f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80113fa:	4313      	orrs	r3, r2
 80113fc:	e7de      	b.n	80113bc <__b2d+0x48>
 80113fe:	ea42 0501 	orr.w	r5, r2, r1
 8011402:	e7db      	b.n	80113bc <__b2d+0x48>
 8011404:	3ff00000 	.word	0x3ff00000

08011408 <__d2b>:
 8011408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801140c:	460f      	mov	r7, r1
 801140e:	2101      	movs	r1, #1
 8011410:	ec59 8b10 	vmov	r8, r9, d0
 8011414:	4616      	mov	r6, r2
 8011416:	f7ff fc13 	bl	8010c40 <_Balloc>
 801141a:	4604      	mov	r4, r0
 801141c:	b930      	cbnz	r0, 801142c <__d2b+0x24>
 801141e:	4602      	mov	r2, r0
 8011420:	4b23      	ldr	r3, [pc, #140]	@ (80114b0 <__d2b+0xa8>)
 8011422:	4824      	ldr	r0, [pc, #144]	@ (80114b4 <__d2b+0xac>)
 8011424:	f240 310f 	movw	r1, #783	@ 0x30f
 8011428:	f001 f90e 	bl	8012648 <__assert_func>
 801142c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011430:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011434:	b10d      	cbz	r5, 801143a <__d2b+0x32>
 8011436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801143a:	9301      	str	r3, [sp, #4]
 801143c:	f1b8 0300 	subs.w	r3, r8, #0
 8011440:	d023      	beq.n	801148a <__d2b+0x82>
 8011442:	4668      	mov	r0, sp
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	f7ff fd0c 	bl	8010e62 <__lo0bits>
 801144a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801144e:	b1d0      	cbz	r0, 8011486 <__d2b+0x7e>
 8011450:	f1c0 0320 	rsb	r3, r0, #32
 8011454:	fa02 f303 	lsl.w	r3, r2, r3
 8011458:	430b      	orrs	r3, r1
 801145a:	40c2      	lsrs	r2, r0
 801145c:	6163      	str	r3, [r4, #20]
 801145e:	9201      	str	r2, [sp, #4]
 8011460:	9b01      	ldr	r3, [sp, #4]
 8011462:	61a3      	str	r3, [r4, #24]
 8011464:	2b00      	cmp	r3, #0
 8011466:	bf0c      	ite	eq
 8011468:	2201      	moveq	r2, #1
 801146a:	2202      	movne	r2, #2
 801146c:	6122      	str	r2, [r4, #16]
 801146e:	b1a5      	cbz	r5, 801149a <__d2b+0x92>
 8011470:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011474:	4405      	add	r5, r0
 8011476:	603d      	str	r5, [r7, #0]
 8011478:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801147c:	6030      	str	r0, [r6, #0]
 801147e:	4620      	mov	r0, r4
 8011480:	b003      	add	sp, #12
 8011482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011486:	6161      	str	r1, [r4, #20]
 8011488:	e7ea      	b.n	8011460 <__d2b+0x58>
 801148a:	a801      	add	r0, sp, #4
 801148c:	f7ff fce9 	bl	8010e62 <__lo0bits>
 8011490:	9b01      	ldr	r3, [sp, #4]
 8011492:	6163      	str	r3, [r4, #20]
 8011494:	3020      	adds	r0, #32
 8011496:	2201      	movs	r2, #1
 8011498:	e7e8      	b.n	801146c <__d2b+0x64>
 801149a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801149e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80114a2:	6038      	str	r0, [r7, #0]
 80114a4:	6918      	ldr	r0, [r3, #16]
 80114a6:	f7ff fcbd 	bl	8010e24 <__hi0bits>
 80114aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80114ae:	e7e5      	b.n	801147c <__d2b+0x74>
 80114b0:	080162a2 	.word	0x080162a2
 80114b4:	080162b3 	.word	0x080162b3

080114b8 <__ratio>:
 80114b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114bc:	b085      	sub	sp, #20
 80114be:	e9cd 1000 	strd	r1, r0, [sp]
 80114c2:	a902      	add	r1, sp, #8
 80114c4:	f7ff ff56 	bl	8011374 <__b2d>
 80114c8:	9800      	ldr	r0, [sp, #0]
 80114ca:	a903      	add	r1, sp, #12
 80114cc:	ec55 4b10 	vmov	r4, r5, d0
 80114d0:	f7ff ff50 	bl	8011374 <__b2d>
 80114d4:	9b01      	ldr	r3, [sp, #4]
 80114d6:	6919      	ldr	r1, [r3, #16]
 80114d8:	9b00      	ldr	r3, [sp, #0]
 80114da:	691b      	ldr	r3, [r3, #16]
 80114dc:	1ac9      	subs	r1, r1, r3
 80114de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80114e2:	1a9b      	subs	r3, r3, r2
 80114e4:	ec5b ab10 	vmov	sl, fp, d0
 80114e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	bfce      	itee	gt
 80114f0:	462a      	movgt	r2, r5
 80114f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80114f6:	465a      	movle	r2, fp
 80114f8:	462f      	mov	r7, r5
 80114fa:	46d9      	mov	r9, fp
 80114fc:	bfcc      	ite	gt
 80114fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011502:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011506:	464b      	mov	r3, r9
 8011508:	4652      	mov	r2, sl
 801150a:	4620      	mov	r0, r4
 801150c:	4639      	mov	r1, r7
 801150e:	f7ef f9ad 	bl	800086c <__aeabi_ddiv>
 8011512:	ec41 0b10 	vmov	d0, r0, r1
 8011516:	b005      	add	sp, #20
 8011518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801151c <__copybits>:
 801151c:	3901      	subs	r1, #1
 801151e:	b570      	push	{r4, r5, r6, lr}
 8011520:	1149      	asrs	r1, r1, #5
 8011522:	6914      	ldr	r4, [r2, #16]
 8011524:	3101      	adds	r1, #1
 8011526:	f102 0314 	add.w	r3, r2, #20
 801152a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801152e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011532:	1f05      	subs	r5, r0, #4
 8011534:	42a3      	cmp	r3, r4
 8011536:	d30c      	bcc.n	8011552 <__copybits+0x36>
 8011538:	1aa3      	subs	r3, r4, r2
 801153a:	3b11      	subs	r3, #17
 801153c:	f023 0303 	bic.w	r3, r3, #3
 8011540:	3211      	adds	r2, #17
 8011542:	42a2      	cmp	r2, r4
 8011544:	bf88      	it	hi
 8011546:	2300      	movhi	r3, #0
 8011548:	4418      	add	r0, r3
 801154a:	2300      	movs	r3, #0
 801154c:	4288      	cmp	r0, r1
 801154e:	d305      	bcc.n	801155c <__copybits+0x40>
 8011550:	bd70      	pop	{r4, r5, r6, pc}
 8011552:	f853 6b04 	ldr.w	r6, [r3], #4
 8011556:	f845 6f04 	str.w	r6, [r5, #4]!
 801155a:	e7eb      	b.n	8011534 <__copybits+0x18>
 801155c:	f840 3b04 	str.w	r3, [r0], #4
 8011560:	e7f4      	b.n	801154c <__copybits+0x30>

08011562 <__any_on>:
 8011562:	f100 0214 	add.w	r2, r0, #20
 8011566:	6900      	ldr	r0, [r0, #16]
 8011568:	114b      	asrs	r3, r1, #5
 801156a:	4298      	cmp	r0, r3
 801156c:	b510      	push	{r4, lr}
 801156e:	db11      	blt.n	8011594 <__any_on+0x32>
 8011570:	dd0a      	ble.n	8011588 <__any_on+0x26>
 8011572:	f011 011f 	ands.w	r1, r1, #31
 8011576:	d007      	beq.n	8011588 <__any_on+0x26>
 8011578:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801157c:	fa24 f001 	lsr.w	r0, r4, r1
 8011580:	fa00 f101 	lsl.w	r1, r0, r1
 8011584:	428c      	cmp	r4, r1
 8011586:	d10b      	bne.n	80115a0 <__any_on+0x3e>
 8011588:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801158c:	4293      	cmp	r3, r2
 801158e:	d803      	bhi.n	8011598 <__any_on+0x36>
 8011590:	2000      	movs	r0, #0
 8011592:	bd10      	pop	{r4, pc}
 8011594:	4603      	mov	r3, r0
 8011596:	e7f7      	b.n	8011588 <__any_on+0x26>
 8011598:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801159c:	2900      	cmp	r1, #0
 801159e:	d0f5      	beq.n	801158c <__any_on+0x2a>
 80115a0:	2001      	movs	r0, #1
 80115a2:	e7f6      	b.n	8011592 <__any_on+0x30>

080115a4 <sulp>:
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	4604      	mov	r4, r0
 80115a8:	460d      	mov	r5, r1
 80115aa:	ec45 4b10 	vmov	d0, r4, r5
 80115ae:	4616      	mov	r6, r2
 80115b0:	f7ff feba 	bl	8011328 <__ulp>
 80115b4:	ec51 0b10 	vmov	r0, r1, d0
 80115b8:	b17e      	cbz	r6, 80115da <sulp+0x36>
 80115ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80115be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	dd09      	ble.n	80115da <sulp+0x36>
 80115c6:	051b      	lsls	r3, r3, #20
 80115c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80115cc:	2400      	movs	r4, #0
 80115ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80115d2:	4622      	mov	r2, r4
 80115d4:	462b      	mov	r3, r5
 80115d6:	f7ef f81f 	bl	8000618 <__aeabi_dmul>
 80115da:	ec41 0b10 	vmov	d0, r0, r1
 80115de:	bd70      	pop	{r4, r5, r6, pc}

080115e0 <_strtod_l>:
 80115e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e4:	b09f      	sub	sp, #124	@ 0x7c
 80115e6:	460c      	mov	r4, r1
 80115e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80115ea:	2200      	movs	r2, #0
 80115ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80115ee:	9005      	str	r0, [sp, #20]
 80115f0:	f04f 0a00 	mov.w	sl, #0
 80115f4:	f04f 0b00 	mov.w	fp, #0
 80115f8:	460a      	mov	r2, r1
 80115fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80115fc:	7811      	ldrb	r1, [r2, #0]
 80115fe:	292b      	cmp	r1, #43	@ 0x2b
 8011600:	d04a      	beq.n	8011698 <_strtod_l+0xb8>
 8011602:	d838      	bhi.n	8011676 <_strtod_l+0x96>
 8011604:	290d      	cmp	r1, #13
 8011606:	d832      	bhi.n	801166e <_strtod_l+0x8e>
 8011608:	2908      	cmp	r1, #8
 801160a:	d832      	bhi.n	8011672 <_strtod_l+0x92>
 801160c:	2900      	cmp	r1, #0
 801160e:	d03b      	beq.n	8011688 <_strtod_l+0xa8>
 8011610:	2200      	movs	r2, #0
 8011612:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011614:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011616:	782a      	ldrb	r2, [r5, #0]
 8011618:	2a30      	cmp	r2, #48	@ 0x30
 801161a:	f040 80b3 	bne.w	8011784 <_strtod_l+0x1a4>
 801161e:	786a      	ldrb	r2, [r5, #1]
 8011620:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011624:	2a58      	cmp	r2, #88	@ 0x58
 8011626:	d16e      	bne.n	8011706 <_strtod_l+0x126>
 8011628:	9302      	str	r3, [sp, #8]
 801162a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	ab1a      	add	r3, sp, #104	@ 0x68
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	4a8e      	ldr	r2, [pc, #568]	@ (801186c <_strtod_l+0x28c>)
 8011634:	9805      	ldr	r0, [sp, #20]
 8011636:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011638:	a919      	add	r1, sp, #100	@ 0x64
 801163a:	f001 f89f 	bl	801277c <__gethex>
 801163e:	f010 060f 	ands.w	r6, r0, #15
 8011642:	4604      	mov	r4, r0
 8011644:	d005      	beq.n	8011652 <_strtod_l+0x72>
 8011646:	2e06      	cmp	r6, #6
 8011648:	d128      	bne.n	801169c <_strtod_l+0xbc>
 801164a:	3501      	adds	r5, #1
 801164c:	2300      	movs	r3, #0
 801164e:	9519      	str	r5, [sp, #100]	@ 0x64
 8011650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011652:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011654:	2b00      	cmp	r3, #0
 8011656:	f040 858e 	bne.w	8012176 <_strtod_l+0xb96>
 801165a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801165c:	b1cb      	cbz	r3, 8011692 <_strtod_l+0xb2>
 801165e:	4652      	mov	r2, sl
 8011660:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011664:	ec43 2b10 	vmov	d0, r2, r3
 8011668:	b01f      	add	sp, #124	@ 0x7c
 801166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801166e:	2920      	cmp	r1, #32
 8011670:	d1ce      	bne.n	8011610 <_strtod_l+0x30>
 8011672:	3201      	adds	r2, #1
 8011674:	e7c1      	b.n	80115fa <_strtod_l+0x1a>
 8011676:	292d      	cmp	r1, #45	@ 0x2d
 8011678:	d1ca      	bne.n	8011610 <_strtod_l+0x30>
 801167a:	2101      	movs	r1, #1
 801167c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801167e:	1c51      	adds	r1, r2, #1
 8011680:	9119      	str	r1, [sp, #100]	@ 0x64
 8011682:	7852      	ldrb	r2, [r2, #1]
 8011684:	2a00      	cmp	r2, #0
 8011686:	d1c5      	bne.n	8011614 <_strtod_l+0x34>
 8011688:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801168a:	9419      	str	r4, [sp, #100]	@ 0x64
 801168c:	2b00      	cmp	r3, #0
 801168e:	f040 8570 	bne.w	8012172 <_strtod_l+0xb92>
 8011692:	4652      	mov	r2, sl
 8011694:	465b      	mov	r3, fp
 8011696:	e7e5      	b.n	8011664 <_strtod_l+0x84>
 8011698:	2100      	movs	r1, #0
 801169a:	e7ef      	b.n	801167c <_strtod_l+0x9c>
 801169c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801169e:	b13a      	cbz	r2, 80116b0 <_strtod_l+0xd0>
 80116a0:	2135      	movs	r1, #53	@ 0x35
 80116a2:	a81c      	add	r0, sp, #112	@ 0x70
 80116a4:	f7ff ff3a 	bl	801151c <__copybits>
 80116a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80116aa:	9805      	ldr	r0, [sp, #20]
 80116ac:	f7ff fb08 	bl	8010cc0 <_Bfree>
 80116b0:	3e01      	subs	r6, #1
 80116b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80116b4:	2e04      	cmp	r6, #4
 80116b6:	d806      	bhi.n	80116c6 <_strtod_l+0xe6>
 80116b8:	e8df f006 	tbb	[pc, r6]
 80116bc:	201d0314 	.word	0x201d0314
 80116c0:	14          	.byte	0x14
 80116c1:	00          	.byte	0x00
 80116c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80116c6:	05e1      	lsls	r1, r4, #23
 80116c8:	bf48      	it	mi
 80116ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80116ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80116d2:	0d1b      	lsrs	r3, r3, #20
 80116d4:	051b      	lsls	r3, r3, #20
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d1bb      	bne.n	8011652 <_strtod_l+0x72>
 80116da:	f7fe fb21 	bl	800fd20 <__errno>
 80116de:	2322      	movs	r3, #34	@ 0x22
 80116e0:	6003      	str	r3, [r0, #0]
 80116e2:	e7b6      	b.n	8011652 <_strtod_l+0x72>
 80116e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80116e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80116ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80116f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80116f4:	e7e7      	b.n	80116c6 <_strtod_l+0xe6>
 80116f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011874 <_strtod_l+0x294>
 80116fa:	e7e4      	b.n	80116c6 <_strtod_l+0xe6>
 80116fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011700:	f04f 3aff 	mov.w	sl, #4294967295
 8011704:	e7df      	b.n	80116c6 <_strtod_l+0xe6>
 8011706:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011708:	1c5a      	adds	r2, r3, #1
 801170a:	9219      	str	r2, [sp, #100]	@ 0x64
 801170c:	785b      	ldrb	r3, [r3, #1]
 801170e:	2b30      	cmp	r3, #48	@ 0x30
 8011710:	d0f9      	beq.n	8011706 <_strtod_l+0x126>
 8011712:	2b00      	cmp	r3, #0
 8011714:	d09d      	beq.n	8011652 <_strtod_l+0x72>
 8011716:	2301      	movs	r3, #1
 8011718:	9309      	str	r3, [sp, #36]	@ 0x24
 801171a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801171c:	930c      	str	r3, [sp, #48]	@ 0x30
 801171e:	2300      	movs	r3, #0
 8011720:	9308      	str	r3, [sp, #32]
 8011722:	930a      	str	r3, [sp, #40]	@ 0x28
 8011724:	461f      	mov	r7, r3
 8011726:	220a      	movs	r2, #10
 8011728:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801172a:	7805      	ldrb	r5, [r0, #0]
 801172c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011730:	b2d9      	uxtb	r1, r3
 8011732:	2909      	cmp	r1, #9
 8011734:	d928      	bls.n	8011788 <_strtod_l+0x1a8>
 8011736:	494e      	ldr	r1, [pc, #312]	@ (8011870 <_strtod_l+0x290>)
 8011738:	2201      	movs	r2, #1
 801173a:	f000 ff59 	bl	80125f0 <strncmp>
 801173e:	2800      	cmp	r0, #0
 8011740:	d032      	beq.n	80117a8 <_strtod_l+0x1c8>
 8011742:	2000      	movs	r0, #0
 8011744:	462a      	mov	r2, r5
 8011746:	4681      	mov	r9, r0
 8011748:	463d      	mov	r5, r7
 801174a:	4603      	mov	r3, r0
 801174c:	2a65      	cmp	r2, #101	@ 0x65
 801174e:	d001      	beq.n	8011754 <_strtod_l+0x174>
 8011750:	2a45      	cmp	r2, #69	@ 0x45
 8011752:	d114      	bne.n	801177e <_strtod_l+0x19e>
 8011754:	b91d      	cbnz	r5, 801175e <_strtod_l+0x17e>
 8011756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011758:	4302      	orrs	r2, r0
 801175a:	d095      	beq.n	8011688 <_strtod_l+0xa8>
 801175c:	2500      	movs	r5, #0
 801175e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011760:	1c62      	adds	r2, r4, #1
 8011762:	9219      	str	r2, [sp, #100]	@ 0x64
 8011764:	7862      	ldrb	r2, [r4, #1]
 8011766:	2a2b      	cmp	r2, #43	@ 0x2b
 8011768:	d077      	beq.n	801185a <_strtod_l+0x27a>
 801176a:	2a2d      	cmp	r2, #45	@ 0x2d
 801176c:	d07b      	beq.n	8011866 <_strtod_l+0x286>
 801176e:	f04f 0c00 	mov.w	ip, #0
 8011772:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011776:	2909      	cmp	r1, #9
 8011778:	f240 8082 	bls.w	8011880 <_strtod_l+0x2a0>
 801177c:	9419      	str	r4, [sp, #100]	@ 0x64
 801177e:	f04f 0800 	mov.w	r8, #0
 8011782:	e0a2      	b.n	80118ca <_strtod_l+0x2ea>
 8011784:	2300      	movs	r3, #0
 8011786:	e7c7      	b.n	8011718 <_strtod_l+0x138>
 8011788:	2f08      	cmp	r7, #8
 801178a:	bfd5      	itete	le
 801178c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801178e:	9908      	ldrgt	r1, [sp, #32]
 8011790:	fb02 3301 	mlale	r3, r2, r1, r3
 8011794:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011798:	f100 0001 	add.w	r0, r0, #1
 801179c:	bfd4      	ite	le
 801179e:	930a      	strle	r3, [sp, #40]	@ 0x28
 80117a0:	9308      	strgt	r3, [sp, #32]
 80117a2:	3701      	adds	r7, #1
 80117a4:	9019      	str	r0, [sp, #100]	@ 0x64
 80117a6:	e7bf      	b.n	8011728 <_strtod_l+0x148>
 80117a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80117ae:	785a      	ldrb	r2, [r3, #1]
 80117b0:	b37f      	cbz	r7, 8011812 <_strtod_l+0x232>
 80117b2:	4681      	mov	r9, r0
 80117b4:	463d      	mov	r5, r7
 80117b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80117ba:	2b09      	cmp	r3, #9
 80117bc:	d912      	bls.n	80117e4 <_strtod_l+0x204>
 80117be:	2301      	movs	r3, #1
 80117c0:	e7c4      	b.n	801174c <_strtod_l+0x16c>
 80117c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117c4:	1c5a      	adds	r2, r3, #1
 80117c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80117c8:	785a      	ldrb	r2, [r3, #1]
 80117ca:	3001      	adds	r0, #1
 80117cc:	2a30      	cmp	r2, #48	@ 0x30
 80117ce:	d0f8      	beq.n	80117c2 <_strtod_l+0x1e2>
 80117d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80117d4:	2b08      	cmp	r3, #8
 80117d6:	f200 84d3 	bhi.w	8012180 <_strtod_l+0xba0>
 80117da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80117de:	4681      	mov	r9, r0
 80117e0:	2000      	movs	r0, #0
 80117e2:	4605      	mov	r5, r0
 80117e4:	3a30      	subs	r2, #48	@ 0x30
 80117e6:	f100 0301 	add.w	r3, r0, #1
 80117ea:	d02a      	beq.n	8011842 <_strtod_l+0x262>
 80117ec:	4499      	add	r9, r3
 80117ee:	eb00 0c05 	add.w	ip, r0, r5
 80117f2:	462b      	mov	r3, r5
 80117f4:	210a      	movs	r1, #10
 80117f6:	4563      	cmp	r3, ip
 80117f8:	d10d      	bne.n	8011816 <_strtod_l+0x236>
 80117fa:	1c69      	adds	r1, r5, #1
 80117fc:	4401      	add	r1, r0
 80117fe:	4428      	add	r0, r5
 8011800:	2808      	cmp	r0, #8
 8011802:	dc16      	bgt.n	8011832 <_strtod_l+0x252>
 8011804:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011806:	230a      	movs	r3, #10
 8011808:	fb03 2300 	mla	r3, r3, r0, r2
 801180c:	930a      	str	r3, [sp, #40]	@ 0x28
 801180e:	2300      	movs	r3, #0
 8011810:	e018      	b.n	8011844 <_strtod_l+0x264>
 8011812:	4638      	mov	r0, r7
 8011814:	e7da      	b.n	80117cc <_strtod_l+0x1ec>
 8011816:	2b08      	cmp	r3, #8
 8011818:	f103 0301 	add.w	r3, r3, #1
 801181c:	dc03      	bgt.n	8011826 <_strtod_l+0x246>
 801181e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011820:	434e      	muls	r6, r1
 8011822:	960a      	str	r6, [sp, #40]	@ 0x28
 8011824:	e7e7      	b.n	80117f6 <_strtod_l+0x216>
 8011826:	2b10      	cmp	r3, #16
 8011828:	bfde      	ittt	le
 801182a:	9e08      	ldrle	r6, [sp, #32]
 801182c:	434e      	mulle	r6, r1
 801182e:	9608      	strle	r6, [sp, #32]
 8011830:	e7e1      	b.n	80117f6 <_strtod_l+0x216>
 8011832:	280f      	cmp	r0, #15
 8011834:	dceb      	bgt.n	801180e <_strtod_l+0x22e>
 8011836:	9808      	ldr	r0, [sp, #32]
 8011838:	230a      	movs	r3, #10
 801183a:	fb03 2300 	mla	r3, r3, r0, r2
 801183e:	9308      	str	r3, [sp, #32]
 8011840:	e7e5      	b.n	801180e <_strtod_l+0x22e>
 8011842:	4629      	mov	r1, r5
 8011844:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011846:	1c50      	adds	r0, r2, #1
 8011848:	9019      	str	r0, [sp, #100]	@ 0x64
 801184a:	7852      	ldrb	r2, [r2, #1]
 801184c:	4618      	mov	r0, r3
 801184e:	460d      	mov	r5, r1
 8011850:	e7b1      	b.n	80117b6 <_strtod_l+0x1d6>
 8011852:	f04f 0900 	mov.w	r9, #0
 8011856:	2301      	movs	r3, #1
 8011858:	e77d      	b.n	8011756 <_strtod_l+0x176>
 801185a:	f04f 0c00 	mov.w	ip, #0
 801185e:	1ca2      	adds	r2, r4, #2
 8011860:	9219      	str	r2, [sp, #100]	@ 0x64
 8011862:	78a2      	ldrb	r2, [r4, #2]
 8011864:	e785      	b.n	8011772 <_strtod_l+0x192>
 8011866:	f04f 0c01 	mov.w	ip, #1
 801186a:	e7f8      	b.n	801185e <_strtod_l+0x27e>
 801186c:	08016420 	.word	0x08016420
 8011870:	08016408 	.word	0x08016408
 8011874:	7ff00000 	.word	0x7ff00000
 8011878:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801187a:	1c51      	adds	r1, r2, #1
 801187c:	9119      	str	r1, [sp, #100]	@ 0x64
 801187e:	7852      	ldrb	r2, [r2, #1]
 8011880:	2a30      	cmp	r2, #48	@ 0x30
 8011882:	d0f9      	beq.n	8011878 <_strtod_l+0x298>
 8011884:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011888:	2908      	cmp	r1, #8
 801188a:	f63f af78 	bhi.w	801177e <_strtod_l+0x19e>
 801188e:	3a30      	subs	r2, #48	@ 0x30
 8011890:	920e      	str	r2, [sp, #56]	@ 0x38
 8011892:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011894:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011896:	f04f 080a 	mov.w	r8, #10
 801189a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801189c:	1c56      	adds	r6, r2, #1
 801189e:	9619      	str	r6, [sp, #100]	@ 0x64
 80118a0:	7852      	ldrb	r2, [r2, #1]
 80118a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80118a6:	f1be 0f09 	cmp.w	lr, #9
 80118aa:	d939      	bls.n	8011920 <_strtod_l+0x340>
 80118ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80118ae:	1a76      	subs	r6, r6, r1
 80118b0:	2e08      	cmp	r6, #8
 80118b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80118b6:	dc03      	bgt.n	80118c0 <_strtod_l+0x2e0>
 80118b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80118ba:	4588      	cmp	r8, r1
 80118bc:	bfa8      	it	ge
 80118be:	4688      	movge	r8, r1
 80118c0:	f1bc 0f00 	cmp.w	ip, #0
 80118c4:	d001      	beq.n	80118ca <_strtod_l+0x2ea>
 80118c6:	f1c8 0800 	rsb	r8, r8, #0
 80118ca:	2d00      	cmp	r5, #0
 80118cc:	d14e      	bne.n	801196c <_strtod_l+0x38c>
 80118ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80118d0:	4308      	orrs	r0, r1
 80118d2:	f47f aebe 	bne.w	8011652 <_strtod_l+0x72>
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	f47f aed6 	bne.w	8011688 <_strtod_l+0xa8>
 80118dc:	2a69      	cmp	r2, #105	@ 0x69
 80118de:	d028      	beq.n	8011932 <_strtod_l+0x352>
 80118e0:	dc25      	bgt.n	801192e <_strtod_l+0x34e>
 80118e2:	2a49      	cmp	r2, #73	@ 0x49
 80118e4:	d025      	beq.n	8011932 <_strtod_l+0x352>
 80118e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80118e8:	f47f aece 	bne.w	8011688 <_strtod_l+0xa8>
 80118ec:	499b      	ldr	r1, [pc, #620]	@ (8011b5c <_strtod_l+0x57c>)
 80118ee:	a819      	add	r0, sp, #100	@ 0x64
 80118f0:	f001 f966 	bl	8012bc0 <__match>
 80118f4:	2800      	cmp	r0, #0
 80118f6:	f43f aec7 	beq.w	8011688 <_strtod_l+0xa8>
 80118fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	2b28      	cmp	r3, #40	@ 0x28
 8011900:	d12e      	bne.n	8011960 <_strtod_l+0x380>
 8011902:	4997      	ldr	r1, [pc, #604]	@ (8011b60 <_strtod_l+0x580>)
 8011904:	aa1c      	add	r2, sp, #112	@ 0x70
 8011906:	a819      	add	r0, sp, #100	@ 0x64
 8011908:	f001 f96e 	bl	8012be8 <__hexnan>
 801190c:	2805      	cmp	r0, #5
 801190e:	d127      	bne.n	8011960 <_strtod_l+0x380>
 8011910:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011912:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011916:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801191a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801191e:	e698      	b.n	8011652 <_strtod_l+0x72>
 8011920:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011922:	fb08 2101 	mla	r1, r8, r1, r2
 8011926:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801192a:	920e      	str	r2, [sp, #56]	@ 0x38
 801192c:	e7b5      	b.n	801189a <_strtod_l+0x2ba>
 801192e:	2a6e      	cmp	r2, #110	@ 0x6e
 8011930:	e7da      	b.n	80118e8 <_strtod_l+0x308>
 8011932:	498c      	ldr	r1, [pc, #560]	@ (8011b64 <_strtod_l+0x584>)
 8011934:	a819      	add	r0, sp, #100	@ 0x64
 8011936:	f001 f943 	bl	8012bc0 <__match>
 801193a:	2800      	cmp	r0, #0
 801193c:	f43f aea4 	beq.w	8011688 <_strtod_l+0xa8>
 8011940:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011942:	4989      	ldr	r1, [pc, #548]	@ (8011b68 <_strtod_l+0x588>)
 8011944:	3b01      	subs	r3, #1
 8011946:	a819      	add	r0, sp, #100	@ 0x64
 8011948:	9319      	str	r3, [sp, #100]	@ 0x64
 801194a:	f001 f939 	bl	8012bc0 <__match>
 801194e:	b910      	cbnz	r0, 8011956 <_strtod_l+0x376>
 8011950:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011952:	3301      	adds	r3, #1
 8011954:	9319      	str	r3, [sp, #100]	@ 0x64
 8011956:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011b78 <_strtod_l+0x598>
 801195a:	f04f 0a00 	mov.w	sl, #0
 801195e:	e678      	b.n	8011652 <_strtod_l+0x72>
 8011960:	4882      	ldr	r0, [pc, #520]	@ (8011b6c <_strtod_l+0x58c>)
 8011962:	f000 fe69 	bl	8012638 <nan>
 8011966:	ec5b ab10 	vmov	sl, fp, d0
 801196a:	e672      	b.n	8011652 <_strtod_l+0x72>
 801196c:	eba8 0309 	sub.w	r3, r8, r9
 8011970:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011972:	9309      	str	r3, [sp, #36]	@ 0x24
 8011974:	2f00      	cmp	r7, #0
 8011976:	bf08      	it	eq
 8011978:	462f      	moveq	r7, r5
 801197a:	2d10      	cmp	r5, #16
 801197c:	462c      	mov	r4, r5
 801197e:	bfa8      	it	ge
 8011980:	2410      	movge	r4, #16
 8011982:	f7ee fdcf 	bl	8000524 <__aeabi_ui2d>
 8011986:	2d09      	cmp	r5, #9
 8011988:	4682      	mov	sl, r0
 801198a:	468b      	mov	fp, r1
 801198c:	dc13      	bgt.n	80119b6 <_strtod_l+0x3d6>
 801198e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011990:	2b00      	cmp	r3, #0
 8011992:	f43f ae5e 	beq.w	8011652 <_strtod_l+0x72>
 8011996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011998:	dd78      	ble.n	8011a8c <_strtod_l+0x4ac>
 801199a:	2b16      	cmp	r3, #22
 801199c:	dc5f      	bgt.n	8011a5e <_strtod_l+0x47e>
 801199e:	4974      	ldr	r1, [pc, #464]	@ (8011b70 <_strtod_l+0x590>)
 80119a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80119a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119a8:	4652      	mov	r2, sl
 80119aa:	465b      	mov	r3, fp
 80119ac:	f7ee fe34 	bl	8000618 <__aeabi_dmul>
 80119b0:	4682      	mov	sl, r0
 80119b2:	468b      	mov	fp, r1
 80119b4:	e64d      	b.n	8011652 <_strtod_l+0x72>
 80119b6:	4b6e      	ldr	r3, [pc, #440]	@ (8011b70 <_strtod_l+0x590>)
 80119b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80119bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80119c0:	f7ee fe2a 	bl	8000618 <__aeabi_dmul>
 80119c4:	4682      	mov	sl, r0
 80119c6:	9808      	ldr	r0, [sp, #32]
 80119c8:	468b      	mov	fp, r1
 80119ca:	f7ee fdab 	bl	8000524 <__aeabi_ui2d>
 80119ce:	4602      	mov	r2, r0
 80119d0:	460b      	mov	r3, r1
 80119d2:	4650      	mov	r0, sl
 80119d4:	4659      	mov	r1, fp
 80119d6:	f7ee fc69 	bl	80002ac <__adddf3>
 80119da:	2d0f      	cmp	r5, #15
 80119dc:	4682      	mov	sl, r0
 80119de:	468b      	mov	fp, r1
 80119e0:	ddd5      	ble.n	801198e <_strtod_l+0x3ae>
 80119e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119e4:	1b2c      	subs	r4, r5, r4
 80119e6:	441c      	add	r4, r3
 80119e8:	2c00      	cmp	r4, #0
 80119ea:	f340 8096 	ble.w	8011b1a <_strtod_l+0x53a>
 80119ee:	f014 030f 	ands.w	r3, r4, #15
 80119f2:	d00a      	beq.n	8011a0a <_strtod_l+0x42a>
 80119f4:	495e      	ldr	r1, [pc, #376]	@ (8011b70 <_strtod_l+0x590>)
 80119f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80119fa:	4652      	mov	r2, sl
 80119fc:	465b      	mov	r3, fp
 80119fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a02:	f7ee fe09 	bl	8000618 <__aeabi_dmul>
 8011a06:	4682      	mov	sl, r0
 8011a08:	468b      	mov	fp, r1
 8011a0a:	f034 040f 	bics.w	r4, r4, #15
 8011a0e:	d073      	beq.n	8011af8 <_strtod_l+0x518>
 8011a10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011a14:	dd48      	ble.n	8011aa8 <_strtod_l+0x4c8>
 8011a16:	2400      	movs	r4, #0
 8011a18:	46a0      	mov	r8, r4
 8011a1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8011a1c:	46a1      	mov	r9, r4
 8011a1e:	9a05      	ldr	r2, [sp, #20]
 8011a20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011b78 <_strtod_l+0x598>
 8011a24:	2322      	movs	r3, #34	@ 0x22
 8011a26:	6013      	str	r3, [r2, #0]
 8011a28:	f04f 0a00 	mov.w	sl, #0
 8011a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	f43f ae0f 	beq.w	8011652 <_strtod_l+0x72>
 8011a34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011a36:	9805      	ldr	r0, [sp, #20]
 8011a38:	f7ff f942 	bl	8010cc0 <_Bfree>
 8011a3c:	9805      	ldr	r0, [sp, #20]
 8011a3e:	4649      	mov	r1, r9
 8011a40:	f7ff f93e 	bl	8010cc0 <_Bfree>
 8011a44:	9805      	ldr	r0, [sp, #20]
 8011a46:	4641      	mov	r1, r8
 8011a48:	f7ff f93a 	bl	8010cc0 <_Bfree>
 8011a4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011a4e:	9805      	ldr	r0, [sp, #20]
 8011a50:	f7ff f936 	bl	8010cc0 <_Bfree>
 8011a54:	9805      	ldr	r0, [sp, #20]
 8011a56:	4621      	mov	r1, r4
 8011a58:	f7ff f932 	bl	8010cc0 <_Bfree>
 8011a5c:	e5f9      	b.n	8011652 <_strtod_l+0x72>
 8011a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011a64:	4293      	cmp	r3, r2
 8011a66:	dbbc      	blt.n	80119e2 <_strtod_l+0x402>
 8011a68:	4c41      	ldr	r4, [pc, #260]	@ (8011b70 <_strtod_l+0x590>)
 8011a6a:	f1c5 050f 	rsb	r5, r5, #15
 8011a6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011a72:	4652      	mov	r2, sl
 8011a74:	465b      	mov	r3, fp
 8011a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a7a:	f7ee fdcd 	bl	8000618 <__aeabi_dmul>
 8011a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a80:	1b5d      	subs	r5, r3, r5
 8011a82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011a86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011a8a:	e78f      	b.n	80119ac <_strtod_l+0x3cc>
 8011a8c:	3316      	adds	r3, #22
 8011a8e:	dba8      	blt.n	80119e2 <_strtod_l+0x402>
 8011a90:	4b37      	ldr	r3, [pc, #220]	@ (8011b70 <_strtod_l+0x590>)
 8011a92:	eba9 0808 	sub.w	r8, r9, r8
 8011a96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011a9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011a9e:	4650      	mov	r0, sl
 8011aa0:	4659      	mov	r1, fp
 8011aa2:	f7ee fee3 	bl	800086c <__aeabi_ddiv>
 8011aa6:	e783      	b.n	80119b0 <_strtod_l+0x3d0>
 8011aa8:	4b32      	ldr	r3, [pc, #200]	@ (8011b74 <_strtod_l+0x594>)
 8011aaa:	9308      	str	r3, [sp, #32]
 8011aac:	2300      	movs	r3, #0
 8011aae:	1124      	asrs	r4, r4, #4
 8011ab0:	4650      	mov	r0, sl
 8011ab2:	4659      	mov	r1, fp
 8011ab4:	461e      	mov	r6, r3
 8011ab6:	2c01      	cmp	r4, #1
 8011ab8:	dc21      	bgt.n	8011afe <_strtod_l+0x51e>
 8011aba:	b10b      	cbz	r3, 8011ac0 <_strtod_l+0x4e0>
 8011abc:	4682      	mov	sl, r0
 8011abe:	468b      	mov	fp, r1
 8011ac0:	492c      	ldr	r1, [pc, #176]	@ (8011b74 <_strtod_l+0x594>)
 8011ac2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011ac6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011aca:	4652      	mov	r2, sl
 8011acc:	465b      	mov	r3, fp
 8011ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ad2:	f7ee fda1 	bl	8000618 <__aeabi_dmul>
 8011ad6:	4b28      	ldr	r3, [pc, #160]	@ (8011b78 <_strtod_l+0x598>)
 8011ad8:	460a      	mov	r2, r1
 8011ada:	400b      	ands	r3, r1
 8011adc:	4927      	ldr	r1, [pc, #156]	@ (8011b7c <_strtod_l+0x59c>)
 8011ade:	428b      	cmp	r3, r1
 8011ae0:	4682      	mov	sl, r0
 8011ae2:	d898      	bhi.n	8011a16 <_strtod_l+0x436>
 8011ae4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011ae8:	428b      	cmp	r3, r1
 8011aea:	bf86      	itte	hi
 8011aec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011b80 <_strtod_l+0x5a0>
 8011af0:	f04f 3aff 	movhi.w	sl, #4294967295
 8011af4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011af8:	2300      	movs	r3, #0
 8011afa:	9308      	str	r3, [sp, #32]
 8011afc:	e07a      	b.n	8011bf4 <_strtod_l+0x614>
 8011afe:	07e2      	lsls	r2, r4, #31
 8011b00:	d505      	bpl.n	8011b0e <_strtod_l+0x52e>
 8011b02:	9b08      	ldr	r3, [sp, #32]
 8011b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b08:	f7ee fd86 	bl	8000618 <__aeabi_dmul>
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	9a08      	ldr	r2, [sp, #32]
 8011b10:	3208      	adds	r2, #8
 8011b12:	3601      	adds	r6, #1
 8011b14:	1064      	asrs	r4, r4, #1
 8011b16:	9208      	str	r2, [sp, #32]
 8011b18:	e7cd      	b.n	8011ab6 <_strtod_l+0x4d6>
 8011b1a:	d0ed      	beq.n	8011af8 <_strtod_l+0x518>
 8011b1c:	4264      	negs	r4, r4
 8011b1e:	f014 020f 	ands.w	r2, r4, #15
 8011b22:	d00a      	beq.n	8011b3a <_strtod_l+0x55a>
 8011b24:	4b12      	ldr	r3, [pc, #72]	@ (8011b70 <_strtod_l+0x590>)
 8011b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b2a:	4650      	mov	r0, sl
 8011b2c:	4659      	mov	r1, fp
 8011b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b32:	f7ee fe9b 	bl	800086c <__aeabi_ddiv>
 8011b36:	4682      	mov	sl, r0
 8011b38:	468b      	mov	fp, r1
 8011b3a:	1124      	asrs	r4, r4, #4
 8011b3c:	d0dc      	beq.n	8011af8 <_strtod_l+0x518>
 8011b3e:	2c1f      	cmp	r4, #31
 8011b40:	dd20      	ble.n	8011b84 <_strtod_l+0x5a4>
 8011b42:	2400      	movs	r4, #0
 8011b44:	46a0      	mov	r8, r4
 8011b46:	940a      	str	r4, [sp, #40]	@ 0x28
 8011b48:	46a1      	mov	r9, r4
 8011b4a:	9a05      	ldr	r2, [sp, #20]
 8011b4c:	2322      	movs	r3, #34	@ 0x22
 8011b4e:	f04f 0a00 	mov.w	sl, #0
 8011b52:	f04f 0b00 	mov.w	fp, #0
 8011b56:	6013      	str	r3, [r2, #0]
 8011b58:	e768      	b.n	8011a2c <_strtod_l+0x44c>
 8011b5a:	bf00      	nop
 8011b5c:	080161fa 	.word	0x080161fa
 8011b60:	0801640c 	.word	0x0801640c
 8011b64:	080161f2 	.word	0x080161f2
 8011b68:	08016229 	.word	0x08016229
 8011b6c:	080164b4 	.word	0x080164b4
 8011b70:	08016340 	.word	0x08016340
 8011b74:	08016318 	.word	0x08016318
 8011b78:	7ff00000 	.word	0x7ff00000
 8011b7c:	7ca00000 	.word	0x7ca00000
 8011b80:	7fefffff 	.word	0x7fefffff
 8011b84:	f014 0310 	ands.w	r3, r4, #16
 8011b88:	bf18      	it	ne
 8011b8a:	236a      	movne	r3, #106	@ 0x6a
 8011b8c:	4ea9      	ldr	r6, [pc, #676]	@ (8011e34 <_strtod_l+0x854>)
 8011b8e:	9308      	str	r3, [sp, #32]
 8011b90:	4650      	mov	r0, sl
 8011b92:	4659      	mov	r1, fp
 8011b94:	2300      	movs	r3, #0
 8011b96:	07e2      	lsls	r2, r4, #31
 8011b98:	d504      	bpl.n	8011ba4 <_strtod_l+0x5c4>
 8011b9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011b9e:	f7ee fd3b 	bl	8000618 <__aeabi_dmul>
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	1064      	asrs	r4, r4, #1
 8011ba6:	f106 0608 	add.w	r6, r6, #8
 8011baa:	d1f4      	bne.n	8011b96 <_strtod_l+0x5b6>
 8011bac:	b10b      	cbz	r3, 8011bb2 <_strtod_l+0x5d2>
 8011bae:	4682      	mov	sl, r0
 8011bb0:	468b      	mov	fp, r1
 8011bb2:	9b08      	ldr	r3, [sp, #32]
 8011bb4:	b1b3      	cbz	r3, 8011be4 <_strtod_l+0x604>
 8011bb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011bba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	4659      	mov	r1, fp
 8011bc2:	dd0f      	ble.n	8011be4 <_strtod_l+0x604>
 8011bc4:	2b1f      	cmp	r3, #31
 8011bc6:	dd55      	ble.n	8011c74 <_strtod_l+0x694>
 8011bc8:	2b34      	cmp	r3, #52	@ 0x34
 8011bca:	bfde      	ittt	le
 8011bcc:	f04f 33ff 	movle.w	r3, #4294967295
 8011bd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011bd4:	4093      	lslle	r3, r2
 8011bd6:	f04f 0a00 	mov.w	sl, #0
 8011bda:	bfcc      	ite	gt
 8011bdc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011be0:	ea03 0b01 	andle.w	fp, r3, r1
 8011be4:	2200      	movs	r2, #0
 8011be6:	2300      	movs	r3, #0
 8011be8:	4650      	mov	r0, sl
 8011bea:	4659      	mov	r1, fp
 8011bec:	f7ee ff7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d1a6      	bne.n	8011b42 <_strtod_l+0x562>
 8011bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011bf6:	9300      	str	r3, [sp, #0]
 8011bf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011bfa:	9805      	ldr	r0, [sp, #20]
 8011bfc:	462b      	mov	r3, r5
 8011bfe:	463a      	mov	r2, r7
 8011c00:	f7ff f8c6 	bl	8010d90 <__s2b>
 8011c04:	900a      	str	r0, [sp, #40]	@ 0x28
 8011c06:	2800      	cmp	r0, #0
 8011c08:	f43f af05 	beq.w	8011a16 <_strtod_l+0x436>
 8011c0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c0e:	2a00      	cmp	r2, #0
 8011c10:	eba9 0308 	sub.w	r3, r9, r8
 8011c14:	bfa8      	it	ge
 8011c16:	2300      	movge	r3, #0
 8011c18:	9312      	str	r3, [sp, #72]	@ 0x48
 8011c1a:	2400      	movs	r4, #0
 8011c1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011c20:	9316      	str	r3, [sp, #88]	@ 0x58
 8011c22:	46a0      	mov	r8, r4
 8011c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c26:	9805      	ldr	r0, [sp, #20]
 8011c28:	6859      	ldr	r1, [r3, #4]
 8011c2a:	f7ff f809 	bl	8010c40 <_Balloc>
 8011c2e:	4681      	mov	r9, r0
 8011c30:	2800      	cmp	r0, #0
 8011c32:	f43f aef4 	beq.w	8011a1e <_strtod_l+0x43e>
 8011c36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c38:	691a      	ldr	r2, [r3, #16]
 8011c3a:	3202      	adds	r2, #2
 8011c3c:	f103 010c 	add.w	r1, r3, #12
 8011c40:	0092      	lsls	r2, r2, #2
 8011c42:	300c      	adds	r0, #12
 8011c44:	f7fe f899 	bl	800fd7a <memcpy>
 8011c48:	ec4b ab10 	vmov	d0, sl, fp
 8011c4c:	9805      	ldr	r0, [sp, #20]
 8011c4e:	aa1c      	add	r2, sp, #112	@ 0x70
 8011c50:	a91b      	add	r1, sp, #108	@ 0x6c
 8011c52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011c56:	f7ff fbd7 	bl	8011408 <__d2b>
 8011c5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8011c5c:	2800      	cmp	r0, #0
 8011c5e:	f43f aede 	beq.w	8011a1e <_strtod_l+0x43e>
 8011c62:	9805      	ldr	r0, [sp, #20]
 8011c64:	2101      	movs	r1, #1
 8011c66:	f7ff f929 	bl	8010ebc <__i2b>
 8011c6a:	4680      	mov	r8, r0
 8011c6c:	b948      	cbnz	r0, 8011c82 <_strtod_l+0x6a2>
 8011c6e:	f04f 0800 	mov.w	r8, #0
 8011c72:	e6d4      	b.n	8011a1e <_strtod_l+0x43e>
 8011c74:	f04f 32ff 	mov.w	r2, #4294967295
 8011c78:	fa02 f303 	lsl.w	r3, r2, r3
 8011c7c:	ea03 0a0a 	and.w	sl, r3, sl
 8011c80:	e7b0      	b.n	8011be4 <_strtod_l+0x604>
 8011c82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011c84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011c86:	2d00      	cmp	r5, #0
 8011c88:	bfab      	itete	ge
 8011c8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011c8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011c8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011c90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011c92:	bfac      	ite	ge
 8011c94:	18ef      	addge	r7, r5, r3
 8011c96:	1b5e      	sublt	r6, r3, r5
 8011c98:	9b08      	ldr	r3, [sp, #32]
 8011c9a:	1aed      	subs	r5, r5, r3
 8011c9c:	4415      	add	r5, r2
 8011c9e:	4b66      	ldr	r3, [pc, #408]	@ (8011e38 <_strtod_l+0x858>)
 8011ca0:	3d01      	subs	r5, #1
 8011ca2:	429d      	cmp	r5, r3
 8011ca4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011ca8:	da50      	bge.n	8011d4c <_strtod_l+0x76c>
 8011caa:	1b5b      	subs	r3, r3, r5
 8011cac:	2b1f      	cmp	r3, #31
 8011cae:	eba2 0203 	sub.w	r2, r2, r3
 8011cb2:	f04f 0101 	mov.w	r1, #1
 8011cb6:	dc3d      	bgt.n	8011d34 <_strtod_l+0x754>
 8011cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8011cbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8011cc2:	18bd      	adds	r5, r7, r2
 8011cc4:	9b08      	ldr	r3, [sp, #32]
 8011cc6:	42af      	cmp	r7, r5
 8011cc8:	4416      	add	r6, r2
 8011cca:	441e      	add	r6, r3
 8011ccc:	463b      	mov	r3, r7
 8011cce:	bfa8      	it	ge
 8011cd0:	462b      	movge	r3, r5
 8011cd2:	42b3      	cmp	r3, r6
 8011cd4:	bfa8      	it	ge
 8011cd6:	4633      	movge	r3, r6
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	bfc2      	ittt	gt
 8011cdc:	1aed      	subgt	r5, r5, r3
 8011cde:	1af6      	subgt	r6, r6, r3
 8011ce0:	1aff      	subgt	r7, r7, r3
 8011ce2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	dd16      	ble.n	8011d16 <_strtod_l+0x736>
 8011ce8:	4641      	mov	r1, r8
 8011cea:	9805      	ldr	r0, [sp, #20]
 8011cec:	461a      	mov	r2, r3
 8011cee:	f7ff f9a5 	bl	801103c <__pow5mult>
 8011cf2:	4680      	mov	r8, r0
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	d0ba      	beq.n	8011c6e <_strtod_l+0x68e>
 8011cf8:	4601      	mov	r1, r0
 8011cfa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011cfc:	9805      	ldr	r0, [sp, #20]
 8011cfe:	f7ff f8f3 	bl	8010ee8 <__multiply>
 8011d02:	900e      	str	r0, [sp, #56]	@ 0x38
 8011d04:	2800      	cmp	r0, #0
 8011d06:	f43f ae8a 	beq.w	8011a1e <_strtod_l+0x43e>
 8011d0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d0c:	9805      	ldr	r0, [sp, #20]
 8011d0e:	f7fe ffd7 	bl	8010cc0 <_Bfree>
 8011d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d16:	2d00      	cmp	r5, #0
 8011d18:	dc1d      	bgt.n	8011d56 <_strtod_l+0x776>
 8011d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	dd23      	ble.n	8011d68 <_strtod_l+0x788>
 8011d20:	4649      	mov	r1, r9
 8011d22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011d24:	9805      	ldr	r0, [sp, #20]
 8011d26:	f7ff f989 	bl	801103c <__pow5mult>
 8011d2a:	4681      	mov	r9, r0
 8011d2c:	b9e0      	cbnz	r0, 8011d68 <_strtod_l+0x788>
 8011d2e:	f04f 0900 	mov.w	r9, #0
 8011d32:	e674      	b.n	8011a1e <_strtod_l+0x43e>
 8011d34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011d38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011d3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011d40:	35e2      	adds	r5, #226	@ 0xe2
 8011d42:	fa01 f305 	lsl.w	r3, r1, r5
 8011d46:	9310      	str	r3, [sp, #64]	@ 0x40
 8011d48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011d4a:	e7ba      	b.n	8011cc2 <_strtod_l+0x6e2>
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011d50:	2301      	movs	r3, #1
 8011d52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011d54:	e7b5      	b.n	8011cc2 <_strtod_l+0x6e2>
 8011d56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d58:	9805      	ldr	r0, [sp, #20]
 8011d5a:	462a      	mov	r2, r5
 8011d5c:	f7ff f9c8 	bl	80110f0 <__lshift>
 8011d60:	901a      	str	r0, [sp, #104]	@ 0x68
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d1d9      	bne.n	8011d1a <_strtod_l+0x73a>
 8011d66:	e65a      	b.n	8011a1e <_strtod_l+0x43e>
 8011d68:	2e00      	cmp	r6, #0
 8011d6a:	dd07      	ble.n	8011d7c <_strtod_l+0x79c>
 8011d6c:	4649      	mov	r1, r9
 8011d6e:	9805      	ldr	r0, [sp, #20]
 8011d70:	4632      	mov	r2, r6
 8011d72:	f7ff f9bd 	bl	80110f0 <__lshift>
 8011d76:	4681      	mov	r9, r0
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	d0d8      	beq.n	8011d2e <_strtod_l+0x74e>
 8011d7c:	2f00      	cmp	r7, #0
 8011d7e:	dd08      	ble.n	8011d92 <_strtod_l+0x7b2>
 8011d80:	4641      	mov	r1, r8
 8011d82:	9805      	ldr	r0, [sp, #20]
 8011d84:	463a      	mov	r2, r7
 8011d86:	f7ff f9b3 	bl	80110f0 <__lshift>
 8011d8a:	4680      	mov	r8, r0
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	f43f ae46 	beq.w	8011a1e <_strtod_l+0x43e>
 8011d92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d94:	9805      	ldr	r0, [sp, #20]
 8011d96:	464a      	mov	r2, r9
 8011d98:	f7ff fa32 	bl	8011200 <__mdiff>
 8011d9c:	4604      	mov	r4, r0
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	f43f ae3d 	beq.w	8011a1e <_strtod_l+0x43e>
 8011da4:	68c3      	ldr	r3, [r0, #12]
 8011da6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011da8:	2300      	movs	r3, #0
 8011daa:	60c3      	str	r3, [r0, #12]
 8011dac:	4641      	mov	r1, r8
 8011dae:	f7ff fa0b 	bl	80111c8 <__mcmp>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	da46      	bge.n	8011e44 <_strtod_l+0x864>
 8011db6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011db8:	ea53 030a 	orrs.w	r3, r3, sl
 8011dbc:	d16c      	bne.n	8011e98 <_strtod_l+0x8b8>
 8011dbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d168      	bne.n	8011e98 <_strtod_l+0x8b8>
 8011dc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011dca:	0d1b      	lsrs	r3, r3, #20
 8011dcc:	051b      	lsls	r3, r3, #20
 8011dce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011dd2:	d961      	bls.n	8011e98 <_strtod_l+0x8b8>
 8011dd4:	6963      	ldr	r3, [r4, #20]
 8011dd6:	b913      	cbnz	r3, 8011dde <_strtod_l+0x7fe>
 8011dd8:	6923      	ldr	r3, [r4, #16]
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	dd5c      	ble.n	8011e98 <_strtod_l+0x8b8>
 8011dde:	4621      	mov	r1, r4
 8011de0:	2201      	movs	r2, #1
 8011de2:	9805      	ldr	r0, [sp, #20]
 8011de4:	f7ff f984 	bl	80110f0 <__lshift>
 8011de8:	4641      	mov	r1, r8
 8011dea:	4604      	mov	r4, r0
 8011dec:	f7ff f9ec 	bl	80111c8 <__mcmp>
 8011df0:	2800      	cmp	r0, #0
 8011df2:	dd51      	ble.n	8011e98 <_strtod_l+0x8b8>
 8011df4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011df8:	9a08      	ldr	r2, [sp, #32]
 8011dfa:	0d1b      	lsrs	r3, r3, #20
 8011dfc:	051b      	lsls	r3, r3, #20
 8011dfe:	2a00      	cmp	r2, #0
 8011e00:	d06b      	beq.n	8011eda <_strtod_l+0x8fa>
 8011e02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011e06:	d868      	bhi.n	8011eda <_strtod_l+0x8fa>
 8011e08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011e0c:	f67f ae9d 	bls.w	8011b4a <_strtod_l+0x56a>
 8011e10:	4b0a      	ldr	r3, [pc, #40]	@ (8011e3c <_strtod_l+0x85c>)
 8011e12:	4650      	mov	r0, sl
 8011e14:	4659      	mov	r1, fp
 8011e16:	2200      	movs	r2, #0
 8011e18:	f7ee fbfe 	bl	8000618 <__aeabi_dmul>
 8011e1c:	4b08      	ldr	r3, [pc, #32]	@ (8011e40 <_strtod_l+0x860>)
 8011e1e:	400b      	ands	r3, r1
 8011e20:	4682      	mov	sl, r0
 8011e22:	468b      	mov	fp, r1
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	f47f ae05 	bne.w	8011a34 <_strtod_l+0x454>
 8011e2a:	9a05      	ldr	r2, [sp, #20]
 8011e2c:	2322      	movs	r3, #34	@ 0x22
 8011e2e:	6013      	str	r3, [r2, #0]
 8011e30:	e600      	b.n	8011a34 <_strtod_l+0x454>
 8011e32:	bf00      	nop
 8011e34:	08016438 	.word	0x08016438
 8011e38:	fffffc02 	.word	0xfffffc02
 8011e3c:	39500000 	.word	0x39500000
 8011e40:	7ff00000 	.word	0x7ff00000
 8011e44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011e48:	d165      	bne.n	8011f16 <_strtod_l+0x936>
 8011e4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011e4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e50:	b35a      	cbz	r2, 8011eaa <_strtod_l+0x8ca>
 8011e52:	4a9f      	ldr	r2, [pc, #636]	@ (80120d0 <_strtod_l+0xaf0>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d12b      	bne.n	8011eb0 <_strtod_l+0x8d0>
 8011e58:	9b08      	ldr	r3, [sp, #32]
 8011e5a:	4651      	mov	r1, sl
 8011e5c:	b303      	cbz	r3, 8011ea0 <_strtod_l+0x8c0>
 8011e5e:	4b9d      	ldr	r3, [pc, #628]	@ (80120d4 <_strtod_l+0xaf4>)
 8011e60:	465a      	mov	r2, fp
 8011e62:	4013      	ands	r3, r2
 8011e64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011e68:	f04f 32ff 	mov.w	r2, #4294967295
 8011e6c:	d81b      	bhi.n	8011ea6 <_strtod_l+0x8c6>
 8011e6e:	0d1b      	lsrs	r3, r3, #20
 8011e70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011e74:	fa02 f303 	lsl.w	r3, r2, r3
 8011e78:	4299      	cmp	r1, r3
 8011e7a:	d119      	bne.n	8011eb0 <_strtod_l+0x8d0>
 8011e7c:	4b96      	ldr	r3, [pc, #600]	@ (80120d8 <_strtod_l+0xaf8>)
 8011e7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d102      	bne.n	8011e8a <_strtod_l+0x8aa>
 8011e84:	3101      	adds	r1, #1
 8011e86:	f43f adca 	beq.w	8011a1e <_strtod_l+0x43e>
 8011e8a:	4b92      	ldr	r3, [pc, #584]	@ (80120d4 <_strtod_l+0xaf4>)
 8011e8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e8e:	401a      	ands	r2, r3
 8011e90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011e94:	f04f 0a00 	mov.w	sl, #0
 8011e98:	9b08      	ldr	r3, [sp, #32]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d1b8      	bne.n	8011e10 <_strtod_l+0x830>
 8011e9e:	e5c9      	b.n	8011a34 <_strtod_l+0x454>
 8011ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ea4:	e7e8      	b.n	8011e78 <_strtod_l+0x898>
 8011ea6:	4613      	mov	r3, r2
 8011ea8:	e7e6      	b.n	8011e78 <_strtod_l+0x898>
 8011eaa:	ea53 030a 	orrs.w	r3, r3, sl
 8011eae:	d0a1      	beq.n	8011df4 <_strtod_l+0x814>
 8011eb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011eb2:	b1db      	cbz	r3, 8011eec <_strtod_l+0x90c>
 8011eb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011eb6:	4213      	tst	r3, r2
 8011eb8:	d0ee      	beq.n	8011e98 <_strtod_l+0x8b8>
 8011eba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ebc:	9a08      	ldr	r2, [sp, #32]
 8011ebe:	4650      	mov	r0, sl
 8011ec0:	4659      	mov	r1, fp
 8011ec2:	b1bb      	cbz	r3, 8011ef4 <_strtod_l+0x914>
 8011ec4:	f7ff fb6e 	bl	80115a4 <sulp>
 8011ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ecc:	ec53 2b10 	vmov	r2, r3, d0
 8011ed0:	f7ee f9ec 	bl	80002ac <__adddf3>
 8011ed4:	4682      	mov	sl, r0
 8011ed6:	468b      	mov	fp, r1
 8011ed8:	e7de      	b.n	8011e98 <_strtod_l+0x8b8>
 8011eda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011ede:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011ee2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011ee6:	f04f 3aff 	mov.w	sl, #4294967295
 8011eea:	e7d5      	b.n	8011e98 <_strtod_l+0x8b8>
 8011eec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011eee:	ea13 0f0a 	tst.w	r3, sl
 8011ef2:	e7e1      	b.n	8011eb8 <_strtod_l+0x8d8>
 8011ef4:	f7ff fb56 	bl	80115a4 <sulp>
 8011ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011efc:	ec53 2b10 	vmov	r2, r3, d0
 8011f00:	f7ee f9d2 	bl	80002a8 <__aeabi_dsub>
 8011f04:	2200      	movs	r2, #0
 8011f06:	2300      	movs	r3, #0
 8011f08:	4682      	mov	sl, r0
 8011f0a:	468b      	mov	fp, r1
 8011f0c:	f7ee fdec 	bl	8000ae8 <__aeabi_dcmpeq>
 8011f10:	2800      	cmp	r0, #0
 8011f12:	d0c1      	beq.n	8011e98 <_strtod_l+0x8b8>
 8011f14:	e619      	b.n	8011b4a <_strtod_l+0x56a>
 8011f16:	4641      	mov	r1, r8
 8011f18:	4620      	mov	r0, r4
 8011f1a:	f7ff facd 	bl	80114b8 <__ratio>
 8011f1e:	ec57 6b10 	vmov	r6, r7, d0
 8011f22:	2200      	movs	r2, #0
 8011f24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011f28:	4630      	mov	r0, r6
 8011f2a:	4639      	mov	r1, r7
 8011f2c:	f7ee fdf0 	bl	8000b10 <__aeabi_dcmple>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	d06f      	beq.n	8012014 <_strtod_l+0xa34>
 8011f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d17a      	bne.n	8012030 <_strtod_l+0xa50>
 8011f3a:	f1ba 0f00 	cmp.w	sl, #0
 8011f3e:	d158      	bne.n	8011ff2 <_strtod_l+0xa12>
 8011f40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d15a      	bne.n	8012000 <_strtod_l+0xa20>
 8011f4a:	4b64      	ldr	r3, [pc, #400]	@ (80120dc <_strtod_l+0xafc>)
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	4630      	mov	r0, r6
 8011f50:	4639      	mov	r1, r7
 8011f52:	f7ee fdd3 	bl	8000afc <__aeabi_dcmplt>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	d159      	bne.n	801200e <_strtod_l+0xa2e>
 8011f5a:	4630      	mov	r0, r6
 8011f5c:	4639      	mov	r1, r7
 8011f5e:	4b60      	ldr	r3, [pc, #384]	@ (80120e0 <_strtod_l+0xb00>)
 8011f60:	2200      	movs	r2, #0
 8011f62:	f7ee fb59 	bl	8000618 <__aeabi_dmul>
 8011f66:	4606      	mov	r6, r0
 8011f68:	460f      	mov	r7, r1
 8011f6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011f6e:	9606      	str	r6, [sp, #24]
 8011f70:	9307      	str	r3, [sp, #28]
 8011f72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011f76:	4d57      	ldr	r5, [pc, #348]	@ (80120d4 <_strtod_l+0xaf4>)
 8011f78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011f7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f7e:	401d      	ands	r5, r3
 8011f80:	4b58      	ldr	r3, [pc, #352]	@ (80120e4 <_strtod_l+0xb04>)
 8011f82:	429d      	cmp	r5, r3
 8011f84:	f040 80b2 	bne.w	80120ec <_strtod_l+0xb0c>
 8011f88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011f8e:	ec4b ab10 	vmov	d0, sl, fp
 8011f92:	f7ff f9c9 	bl	8011328 <__ulp>
 8011f96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011f9a:	ec51 0b10 	vmov	r0, r1, d0
 8011f9e:	f7ee fb3b 	bl	8000618 <__aeabi_dmul>
 8011fa2:	4652      	mov	r2, sl
 8011fa4:	465b      	mov	r3, fp
 8011fa6:	f7ee f981 	bl	80002ac <__adddf3>
 8011faa:	460b      	mov	r3, r1
 8011fac:	4949      	ldr	r1, [pc, #292]	@ (80120d4 <_strtod_l+0xaf4>)
 8011fae:	4a4e      	ldr	r2, [pc, #312]	@ (80120e8 <_strtod_l+0xb08>)
 8011fb0:	4019      	ands	r1, r3
 8011fb2:	4291      	cmp	r1, r2
 8011fb4:	4682      	mov	sl, r0
 8011fb6:	d942      	bls.n	801203e <_strtod_l+0xa5e>
 8011fb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011fba:	4b47      	ldr	r3, [pc, #284]	@ (80120d8 <_strtod_l+0xaf8>)
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d103      	bne.n	8011fc8 <_strtod_l+0x9e8>
 8011fc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	f43f ad2b 	beq.w	8011a1e <_strtod_l+0x43e>
 8011fc8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80120d8 <_strtod_l+0xaf8>
 8011fcc:	f04f 3aff 	mov.w	sl, #4294967295
 8011fd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011fd2:	9805      	ldr	r0, [sp, #20]
 8011fd4:	f7fe fe74 	bl	8010cc0 <_Bfree>
 8011fd8:	9805      	ldr	r0, [sp, #20]
 8011fda:	4649      	mov	r1, r9
 8011fdc:	f7fe fe70 	bl	8010cc0 <_Bfree>
 8011fe0:	9805      	ldr	r0, [sp, #20]
 8011fe2:	4641      	mov	r1, r8
 8011fe4:	f7fe fe6c 	bl	8010cc0 <_Bfree>
 8011fe8:	9805      	ldr	r0, [sp, #20]
 8011fea:	4621      	mov	r1, r4
 8011fec:	f7fe fe68 	bl	8010cc0 <_Bfree>
 8011ff0:	e618      	b.n	8011c24 <_strtod_l+0x644>
 8011ff2:	f1ba 0f01 	cmp.w	sl, #1
 8011ff6:	d103      	bne.n	8012000 <_strtod_l+0xa20>
 8011ff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	f43f ada5 	beq.w	8011b4a <_strtod_l+0x56a>
 8012000:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80120b0 <_strtod_l+0xad0>
 8012004:	4f35      	ldr	r7, [pc, #212]	@ (80120dc <_strtod_l+0xafc>)
 8012006:	ed8d 7b06 	vstr	d7, [sp, #24]
 801200a:	2600      	movs	r6, #0
 801200c:	e7b1      	b.n	8011f72 <_strtod_l+0x992>
 801200e:	4f34      	ldr	r7, [pc, #208]	@ (80120e0 <_strtod_l+0xb00>)
 8012010:	2600      	movs	r6, #0
 8012012:	e7aa      	b.n	8011f6a <_strtod_l+0x98a>
 8012014:	4b32      	ldr	r3, [pc, #200]	@ (80120e0 <_strtod_l+0xb00>)
 8012016:	4630      	mov	r0, r6
 8012018:	4639      	mov	r1, r7
 801201a:	2200      	movs	r2, #0
 801201c:	f7ee fafc 	bl	8000618 <__aeabi_dmul>
 8012020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012022:	4606      	mov	r6, r0
 8012024:	460f      	mov	r7, r1
 8012026:	2b00      	cmp	r3, #0
 8012028:	d09f      	beq.n	8011f6a <_strtod_l+0x98a>
 801202a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801202e:	e7a0      	b.n	8011f72 <_strtod_l+0x992>
 8012030:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80120b8 <_strtod_l+0xad8>
 8012034:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012038:	ec57 6b17 	vmov	r6, r7, d7
 801203c:	e799      	b.n	8011f72 <_strtod_l+0x992>
 801203e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012042:	9b08      	ldr	r3, [sp, #32]
 8012044:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012048:	2b00      	cmp	r3, #0
 801204a:	d1c1      	bne.n	8011fd0 <_strtod_l+0x9f0>
 801204c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012050:	0d1b      	lsrs	r3, r3, #20
 8012052:	051b      	lsls	r3, r3, #20
 8012054:	429d      	cmp	r5, r3
 8012056:	d1bb      	bne.n	8011fd0 <_strtod_l+0x9f0>
 8012058:	4630      	mov	r0, r6
 801205a:	4639      	mov	r1, r7
 801205c:	f7ee fe3c 	bl	8000cd8 <__aeabi_d2lz>
 8012060:	f7ee faac 	bl	80005bc <__aeabi_l2d>
 8012064:	4602      	mov	r2, r0
 8012066:	460b      	mov	r3, r1
 8012068:	4630      	mov	r0, r6
 801206a:	4639      	mov	r1, r7
 801206c:	f7ee f91c 	bl	80002a8 <__aeabi_dsub>
 8012070:	460b      	mov	r3, r1
 8012072:	4602      	mov	r2, r0
 8012074:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012078:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801207c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801207e:	ea46 060a 	orr.w	r6, r6, sl
 8012082:	431e      	orrs	r6, r3
 8012084:	d06f      	beq.n	8012166 <_strtod_l+0xb86>
 8012086:	a30e      	add	r3, pc, #56	@ (adr r3, 80120c0 <_strtod_l+0xae0>)
 8012088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208c:	f7ee fd36 	bl	8000afc <__aeabi_dcmplt>
 8012090:	2800      	cmp	r0, #0
 8012092:	f47f accf 	bne.w	8011a34 <_strtod_l+0x454>
 8012096:	a30c      	add	r3, pc, #48	@ (adr r3, 80120c8 <_strtod_l+0xae8>)
 8012098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80120a0:	f7ee fd4a 	bl	8000b38 <__aeabi_dcmpgt>
 80120a4:	2800      	cmp	r0, #0
 80120a6:	d093      	beq.n	8011fd0 <_strtod_l+0x9f0>
 80120a8:	e4c4      	b.n	8011a34 <_strtod_l+0x454>
 80120aa:	bf00      	nop
 80120ac:	f3af 8000 	nop.w
 80120b0:	00000000 	.word	0x00000000
 80120b4:	bff00000 	.word	0xbff00000
 80120b8:	00000000 	.word	0x00000000
 80120bc:	3ff00000 	.word	0x3ff00000
 80120c0:	94a03595 	.word	0x94a03595
 80120c4:	3fdfffff 	.word	0x3fdfffff
 80120c8:	35afe535 	.word	0x35afe535
 80120cc:	3fe00000 	.word	0x3fe00000
 80120d0:	000fffff 	.word	0x000fffff
 80120d4:	7ff00000 	.word	0x7ff00000
 80120d8:	7fefffff 	.word	0x7fefffff
 80120dc:	3ff00000 	.word	0x3ff00000
 80120e0:	3fe00000 	.word	0x3fe00000
 80120e4:	7fe00000 	.word	0x7fe00000
 80120e8:	7c9fffff 	.word	0x7c9fffff
 80120ec:	9b08      	ldr	r3, [sp, #32]
 80120ee:	b323      	cbz	r3, 801213a <_strtod_l+0xb5a>
 80120f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80120f4:	d821      	bhi.n	801213a <_strtod_l+0xb5a>
 80120f6:	a328      	add	r3, pc, #160	@ (adr r3, 8012198 <_strtod_l+0xbb8>)
 80120f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fc:	4630      	mov	r0, r6
 80120fe:	4639      	mov	r1, r7
 8012100:	f7ee fd06 	bl	8000b10 <__aeabi_dcmple>
 8012104:	b1a0      	cbz	r0, 8012130 <_strtod_l+0xb50>
 8012106:	4639      	mov	r1, r7
 8012108:	4630      	mov	r0, r6
 801210a:	f7ee fd5d 	bl	8000bc8 <__aeabi_d2uiz>
 801210e:	2801      	cmp	r0, #1
 8012110:	bf38      	it	cc
 8012112:	2001      	movcc	r0, #1
 8012114:	f7ee fa06 	bl	8000524 <__aeabi_ui2d>
 8012118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801211a:	4606      	mov	r6, r0
 801211c:	460f      	mov	r7, r1
 801211e:	b9fb      	cbnz	r3, 8012160 <_strtod_l+0xb80>
 8012120:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012124:	9014      	str	r0, [sp, #80]	@ 0x50
 8012126:	9315      	str	r3, [sp, #84]	@ 0x54
 8012128:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801212c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012130:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012132:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012136:	1b5b      	subs	r3, r3, r5
 8012138:	9311      	str	r3, [sp, #68]	@ 0x44
 801213a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801213e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012142:	f7ff f8f1 	bl	8011328 <__ulp>
 8012146:	4650      	mov	r0, sl
 8012148:	ec53 2b10 	vmov	r2, r3, d0
 801214c:	4659      	mov	r1, fp
 801214e:	f7ee fa63 	bl	8000618 <__aeabi_dmul>
 8012152:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012156:	f7ee f8a9 	bl	80002ac <__adddf3>
 801215a:	4682      	mov	sl, r0
 801215c:	468b      	mov	fp, r1
 801215e:	e770      	b.n	8012042 <_strtod_l+0xa62>
 8012160:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012164:	e7e0      	b.n	8012128 <_strtod_l+0xb48>
 8012166:	a30e      	add	r3, pc, #56	@ (adr r3, 80121a0 <_strtod_l+0xbc0>)
 8012168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216c:	f7ee fcc6 	bl	8000afc <__aeabi_dcmplt>
 8012170:	e798      	b.n	80120a4 <_strtod_l+0xac4>
 8012172:	2300      	movs	r3, #0
 8012174:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012176:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012178:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801217a:	6013      	str	r3, [r2, #0]
 801217c:	f7ff ba6d 	b.w	801165a <_strtod_l+0x7a>
 8012180:	2a65      	cmp	r2, #101	@ 0x65
 8012182:	f43f ab66 	beq.w	8011852 <_strtod_l+0x272>
 8012186:	2a45      	cmp	r2, #69	@ 0x45
 8012188:	f43f ab63 	beq.w	8011852 <_strtod_l+0x272>
 801218c:	2301      	movs	r3, #1
 801218e:	f7ff bb9e 	b.w	80118ce <_strtod_l+0x2ee>
 8012192:	bf00      	nop
 8012194:	f3af 8000 	nop.w
 8012198:	ffc00000 	.word	0xffc00000
 801219c:	41dfffff 	.word	0x41dfffff
 80121a0:	94a03595 	.word	0x94a03595
 80121a4:	3fcfffff 	.word	0x3fcfffff

080121a8 <_strtod_r>:
 80121a8:	4b01      	ldr	r3, [pc, #4]	@ (80121b0 <_strtod_r+0x8>)
 80121aa:	f7ff ba19 	b.w	80115e0 <_strtod_l>
 80121ae:	bf00      	nop
 80121b0:	200004b0 	.word	0x200004b0

080121b4 <__ssputs_r>:
 80121b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121b8:	688e      	ldr	r6, [r1, #8]
 80121ba:	461f      	mov	r7, r3
 80121bc:	42be      	cmp	r6, r7
 80121be:	680b      	ldr	r3, [r1, #0]
 80121c0:	4682      	mov	sl, r0
 80121c2:	460c      	mov	r4, r1
 80121c4:	4690      	mov	r8, r2
 80121c6:	d82d      	bhi.n	8012224 <__ssputs_r+0x70>
 80121c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80121d0:	d026      	beq.n	8012220 <__ssputs_r+0x6c>
 80121d2:	6965      	ldr	r5, [r4, #20]
 80121d4:	6909      	ldr	r1, [r1, #16]
 80121d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80121da:	eba3 0901 	sub.w	r9, r3, r1
 80121de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121e2:	1c7b      	adds	r3, r7, #1
 80121e4:	444b      	add	r3, r9
 80121e6:	106d      	asrs	r5, r5, #1
 80121e8:	429d      	cmp	r5, r3
 80121ea:	bf38      	it	cc
 80121ec:	461d      	movcc	r5, r3
 80121ee:	0553      	lsls	r3, r2, #21
 80121f0:	d527      	bpl.n	8012242 <__ssputs_r+0x8e>
 80121f2:	4629      	mov	r1, r5
 80121f4:	f7fe fc98 	bl	8010b28 <_malloc_r>
 80121f8:	4606      	mov	r6, r0
 80121fa:	b360      	cbz	r0, 8012256 <__ssputs_r+0xa2>
 80121fc:	6921      	ldr	r1, [r4, #16]
 80121fe:	464a      	mov	r2, r9
 8012200:	f7fd fdbb 	bl	800fd7a <memcpy>
 8012204:	89a3      	ldrh	r3, [r4, #12]
 8012206:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801220a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801220e:	81a3      	strh	r3, [r4, #12]
 8012210:	6126      	str	r6, [r4, #16]
 8012212:	6165      	str	r5, [r4, #20]
 8012214:	444e      	add	r6, r9
 8012216:	eba5 0509 	sub.w	r5, r5, r9
 801221a:	6026      	str	r6, [r4, #0]
 801221c:	60a5      	str	r5, [r4, #8]
 801221e:	463e      	mov	r6, r7
 8012220:	42be      	cmp	r6, r7
 8012222:	d900      	bls.n	8012226 <__ssputs_r+0x72>
 8012224:	463e      	mov	r6, r7
 8012226:	6820      	ldr	r0, [r4, #0]
 8012228:	4632      	mov	r2, r6
 801222a:	4641      	mov	r1, r8
 801222c:	f000 f9c6 	bl	80125bc <memmove>
 8012230:	68a3      	ldr	r3, [r4, #8]
 8012232:	1b9b      	subs	r3, r3, r6
 8012234:	60a3      	str	r3, [r4, #8]
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	4433      	add	r3, r6
 801223a:	6023      	str	r3, [r4, #0]
 801223c:	2000      	movs	r0, #0
 801223e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012242:	462a      	mov	r2, r5
 8012244:	f000 fd7d 	bl	8012d42 <_realloc_r>
 8012248:	4606      	mov	r6, r0
 801224a:	2800      	cmp	r0, #0
 801224c:	d1e0      	bne.n	8012210 <__ssputs_r+0x5c>
 801224e:	6921      	ldr	r1, [r4, #16]
 8012250:	4650      	mov	r0, sl
 8012252:	f7fe fbf5 	bl	8010a40 <_free_r>
 8012256:	230c      	movs	r3, #12
 8012258:	f8ca 3000 	str.w	r3, [sl]
 801225c:	89a3      	ldrh	r3, [r4, #12]
 801225e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012262:	81a3      	strh	r3, [r4, #12]
 8012264:	f04f 30ff 	mov.w	r0, #4294967295
 8012268:	e7e9      	b.n	801223e <__ssputs_r+0x8a>
	...

0801226c <_svfiprintf_r>:
 801226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012270:	4698      	mov	r8, r3
 8012272:	898b      	ldrh	r3, [r1, #12]
 8012274:	061b      	lsls	r3, r3, #24
 8012276:	b09d      	sub	sp, #116	@ 0x74
 8012278:	4607      	mov	r7, r0
 801227a:	460d      	mov	r5, r1
 801227c:	4614      	mov	r4, r2
 801227e:	d510      	bpl.n	80122a2 <_svfiprintf_r+0x36>
 8012280:	690b      	ldr	r3, [r1, #16]
 8012282:	b973      	cbnz	r3, 80122a2 <_svfiprintf_r+0x36>
 8012284:	2140      	movs	r1, #64	@ 0x40
 8012286:	f7fe fc4f 	bl	8010b28 <_malloc_r>
 801228a:	6028      	str	r0, [r5, #0]
 801228c:	6128      	str	r0, [r5, #16]
 801228e:	b930      	cbnz	r0, 801229e <_svfiprintf_r+0x32>
 8012290:	230c      	movs	r3, #12
 8012292:	603b      	str	r3, [r7, #0]
 8012294:	f04f 30ff 	mov.w	r0, #4294967295
 8012298:	b01d      	add	sp, #116	@ 0x74
 801229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801229e:	2340      	movs	r3, #64	@ 0x40
 80122a0:	616b      	str	r3, [r5, #20]
 80122a2:	2300      	movs	r3, #0
 80122a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80122a6:	2320      	movs	r3, #32
 80122a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80122ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80122b0:	2330      	movs	r3, #48	@ 0x30
 80122b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012450 <_svfiprintf_r+0x1e4>
 80122b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80122ba:	f04f 0901 	mov.w	r9, #1
 80122be:	4623      	mov	r3, r4
 80122c0:	469a      	mov	sl, r3
 80122c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122c6:	b10a      	cbz	r2, 80122cc <_svfiprintf_r+0x60>
 80122c8:	2a25      	cmp	r2, #37	@ 0x25
 80122ca:	d1f9      	bne.n	80122c0 <_svfiprintf_r+0x54>
 80122cc:	ebba 0b04 	subs.w	fp, sl, r4
 80122d0:	d00b      	beq.n	80122ea <_svfiprintf_r+0x7e>
 80122d2:	465b      	mov	r3, fp
 80122d4:	4622      	mov	r2, r4
 80122d6:	4629      	mov	r1, r5
 80122d8:	4638      	mov	r0, r7
 80122da:	f7ff ff6b 	bl	80121b4 <__ssputs_r>
 80122de:	3001      	adds	r0, #1
 80122e0:	f000 80a7 	beq.w	8012432 <_svfiprintf_r+0x1c6>
 80122e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122e6:	445a      	add	r2, fp
 80122e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80122ea:	f89a 3000 	ldrb.w	r3, [sl]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f000 809f 	beq.w	8012432 <_svfiprintf_r+0x1c6>
 80122f4:	2300      	movs	r3, #0
 80122f6:	f04f 32ff 	mov.w	r2, #4294967295
 80122fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122fe:	f10a 0a01 	add.w	sl, sl, #1
 8012302:	9304      	str	r3, [sp, #16]
 8012304:	9307      	str	r3, [sp, #28]
 8012306:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801230a:	931a      	str	r3, [sp, #104]	@ 0x68
 801230c:	4654      	mov	r4, sl
 801230e:	2205      	movs	r2, #5
 8012310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012314:	484e      	ldr	r0, [pc, #312]	@ (8012450 <_svfiprintf_r+0x1e4>)
 8012316:	f7ed ff6b 	bl	80001f0 <memchr>
 801231a:	9a04      	ldr	r2, [sp, #16]
 801231c:	b9d8      	cbnz	r0, 8012356 <_svfiprintf_r+0xea>
 801231e:	06d0      	lsls	r0, r2, #27
 8012320:	bf44      	itt	mi
 8012322:	2320      	movmi	r3, #32
 8012324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012328:	0711      	lsls	r1, r2, #28
 801232a:	bf44      	itt	mi
 801232c:	232b      	movmi	r3, #43	@ 0x2b
 801232e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012332:	f89a 3000 	ldrb.w	r3, [sl]
 8012336:	2b2a      	cmp	r3, #42	@ 0x2a
 8012338:	d015      	beq.n	8012366 <_svfiprintf_r+0xfa>
 801233a:	9a07      	ldr	r2, [sp, #28]
 801233c:	4654      	mov	r4, sl
 801233e:	2000      	movs	r0, #0
 8012340:	f04f 0c0a 	mov.w	ip, #10
 8012344:	4621      	mov	r1, r4
 8012346:	f811 3b01 	ldrb.w	r3, [r1], #1
 801234a:	3b30      	subs	r3, #48	@ 0x30
 801234c:	2b09      	cmp	r3, #9
 801234e:	d94b      	bls.n	80123e8 <_svfiprintf_r+0x17c>
 8012350:	b1b0      	cbz	r0, 8012380 <_svfiprintf_r+0x114>
 8012352:	9207      	str	r2, [sp, #28]
 8012354:	e014      	b.n	8012380 <_svfiprintf_r+0x114>
 8012356:	eba0 0308 	sub.w	r3, r0, r8
 801235a:	fa09 f303 	lsl.w	r3, r9, r3
 801235e:	4313      	orrs	r3, r2
 8012360:	9304      	str	r3, [sp, #16]
 8012362:	46a2      	mov	sl, r4
 8012364:	e7d2      	b.n	801230c <_svfiprintf_r+0xa0>
 8012366:	9b03      	ldr	r3, [sp, #12]
 8012368:	1d19      	adds	r1, r3, #4
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	9103      	str	r1, [sp, #12]
 801236e:	2b00      	cmp	r3, #0
 8012370:	bfbb      	ittet	lt
 8012372:	425b      	neglt	r3, r3
 8012374:	f042 0202 	orrlt.w	r2, r2, #2
 8012378:	9307      	strge	r3, [sp, #28]
 801237a:	9307      	strlt	r3, [sp, #28]
 801237c:	bfb8      	it	lt
 801237e:	9204      	strlt	r2, [sp, #16]
 8012380:	7823      	ldrb	r3, [r4, #0]
 8012382:	2b2e      	cmp	r3, #46	@ 0x2e
 8012384:	d10a      	bne.n	801239c <_svfiprintf_r+0x130>
 8012386:	7863      	ldrb	r3, [r4, #1]
 8012388:	2b2a      	cmp	r3, #42	@ 0x2a
 801238a:	d132      	bne.n	80123f2 <_svfiprintf_r+0x186>
 801238c:	9b03      	ldr	r3, [sp, #12]
 801238e:	1d1a      	adds	r2, r3, #4
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	9203      	str	r2, [sp, #12]
 8012394:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012398:	3402      	adds	r4, #2
 801239a:	9305      	str	r3, [sp, #20]
 801239c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012460 <_svfiprintf_r+0x1f4>
 80123a0:	7821      	ldrb	r1, [r4, #0]
 80123a2:	2203      	movs	r2, #3
 80123a4:	4650      	mov	r0, sl
 80123a6:	f7ed ff23 	bl	80001f0 <memchr>
 80123aa:	b138      	cbz	r0, 80123bc <_svfiprintf_r+0x150>
 80123ac:	9b04      	ldr	r3, [sp, #16]
 80123ae:	eba0 000a 	sub.w	r0, r0, sl
 80123b2:	2240      	movs	r2, #64	@ 0x40
 80123b4:	4082      	lsls	r2, r0
 80123b6:	4313      	orrs	r3, r2
 80123b8:	3401      	adds	r4, #1
 80123ba:	9304      	str	r3, [sp, #16]
 80123bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123c0:	4824      	ldr	r0, [pc, #144]	@ (8012454 <_svfiprintf_r+0x1e8>)
 80123c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80123c6:	2206      	movs	r2, #6
 80123c8:	f7ed ff12 	bl	80001f0 <memchr>
 80123cc:	2800      	cmp	r0, #0
 80123ce:	d036      	beq.n	801243e <_svfiprintf_r+0x1d2>
 80123d0:	4b21      	ldr	r3, [pc, #132]	@ (8012458 <_svfiprintf_r+0x1ec>)
 80123d2:	bb1b      	cbnz	r3, 801241c <_svfiprintf_r+0x1b0>
 80123d4:	9b03      	ldr	r3, [sp, #12]
 80123d6:	3307      	adds	r3, #7
 80123d8:	f023 0307 	bic.w	r3, r3, #7
 80123dc:	3308      	adds	r3, #8
 80123de:	9303      	str	r3, [sp, #12]
 80123e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123e2:	4433      	add	r3, r6
 80123e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80123e6:	e76a      	b.n	80122be <_svfiprintf_r+0x52>
 80123e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80123ec:	460c      	mov	r4, r1
 80123ee:	2001      	movs	r0, #1
 80123f0:	e7a8      	b.n	8012344 <_svfiprintf_r+0xd8>
 80123f2:	2300      	movs	r3, #0
 80123f4:	3401      	adds	r4, #1
 80123f6:	9305      	str	r3, [sp, #20]
 80123f8:	4619      	mov	r1, r3
 80123fa:	f04f 0c0a 	mov.w	ip, #10
 80123fe:	4620      	mov	r0, r4
 8012400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012404:	3a30      	subs	r2, #48	@ 0x30
 8012406:	2a09      	cmp	r2, #9
 8012408:	d903      	bls.n	8012412 <_svfiprintf_r+0x1a6>
 801240a:	2b00      	cmp	r3, #0
 801240c:	d0c6      	beq.n	801239c <_svfiprintf_r+0x130>
 801240e:	9105      	str	r1, [sp, #20]
 8012410:	e7c4      	b.n	801239c <_svfiprintf_r+0x130>
 8012412:	fb0c 2101 	mla	r1, ip, r1, r2
 8012416:	4604      	mov	r4, r0
 8012418:	2301      	movs	r3, #1
 801241a:	e7f0      	b.n	80123fe <_svfiprintf_r+0x192>
 801241c:	ab03      	add	r3, sp, #12
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	462a      	mov	r2, r5
 8012422:	4b0e      	ldr	r3, [pc, #56]	@ (801245c <_svfiprintf_r+0x1f0>)
 8012424:	a904      	add	r1, sp, #16
 8012426:	4638      	mov	r0, r7
 8012428:	f7fc fd36 	bl	800ee98 <_printf_float>
 801242c:	1c42      	adds	r2, r0, #1
 801242e:	4606      	mov	r6, r0
 8012430:	d1d6      	bne.n	80123e0 <_svfiprintf_r+0x174>
 8012432:	89ab      	ldrh	r3, [r5, #12]
 8012434:	065b      	lsls	r3, r3, #25
 8012436:	f53f af2d 	bmi.w	8012294 <_svfiprintf_r+0x28>
 801243a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801243c:	e72c      	b.n	8012298 <_svfiprintf_r+0x2c>
 801243e:	ab03      	add	r3, sp, #12
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	462a      	mov	r2, r5
 8012444:	4b05      	ldr	r3, [pc, #20]	@ (801245c <_svfiprintf_r+0x1f0>)
 8012446:	a904      	add	r1, sp, #16
 8012448:	4638      	mov	r0, r7
 801244a:	f7fc ffbd 	bl	800f3c8 <_printf_i>
 801244e:	e7ed      	b.n	801242c <_svfiprintf_r+0x1c0>
 8012450:	08016460 	.word	0x08016460
 8012454:	0801646a 	.word	0x0801646a
 8012458:	0800ee99 	.word	0x0800ee99
 801245c:	080121b5 	.word	0x080121b5
 8012460:	08016466 	.word	0x08016466

08012464 <__sflush_r>:
 8012464:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801246c:	0716      	lsls	r6, r2, #28
 801246e:	4605      	mov	r5, r0
 8012470:	460c      	mov	r4, r1
 8012472:	d454      	bmi.n	801251e <__sflush_r+0xba>
 8012474:	684b      	ldr	r3, [r1, #4]
 8012476:	2b00      	cmp	r3, #0
 8012478:	dc02      	bgt.n	8012480 <__sflush_r+0x1c>
 801247a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801247c:	2b00      	cmp	r3, #0
 801247e:	dd48      	ble.n	8012512 <__sflush_r+0xae>
 8012480:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012482:	2e00      	cmp	r6, #0
 8012484:	d045      	beq.n	8012512 <__sflush_r+0xae>
 8012486:	2300      	movs	r3, #0
 8012488:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801248c:	682f      	ldr	r7, [r5, #0]
 801248e:	6a21      	ldr	r1, [r4, #32]
 8012490:	602b      	str	r3, [r5, #0]
 8012492:	d030      	beq.n	80124f6 <__sflush_r+0x92>
 8012494:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012496:	89a3      	ldrh	r3, [r4, #12]
 8012498:	0759      	lsls	r1, r3, #29
 801249a:	d505      	bpl.n	80124a8 <__sflush_r+0x44>
 801249c:	6863      	ldr	r3, [r4, #4]
 801249e:	1ad2      	subs	r2, r2, r3
 80124a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80124a2:	b10b      	cbz	r3, 80124a8 <__sflush_r+0x44>
 80124a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80124a6:	1ad2      	subs	r2, r2, r3
 80124a8:	2300      	movs	r3, #0
 80124aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80124ac:	6a21      	ldr	r1, [r4, #32]
 80124ae:	4628      	mov	r0, r5
 80124b0:	47b0      	blx	r6
 80124b2:	1c43      	adds	r3, r0, #1
 80124b4:	89a3      	ldrh	r3, [r4, #12]
 80124b6:	d106      	bne.n	80124c6 <__sflush_r+0x62>
 80124b8:	6829      	ldr	r1, [r5, #0]
 80124ba:	291d      	cmp	r1, #29
 80124bc:	d82b      	bhi.n	8012516 <__sflush_r+0xb2>
 80124be:	4a2a      	ldr	r2, [pc, #168]	@ (8012568 <__sflush_r+0x104>)
 80124c0:	410a      	asrs	r2, r1
 80124c2:	07d6      	lsls	r6, r2, #31
 80124c4:	d427      	bmi.n	8012516 <__sflush_r+0xb2>
 80124c6:	2200      	movs	r2, #0
 80124c8:	6062      	str	r2, [r4, #4]
 80124ca:	04d9      	lsls	r1, r3, #19
 80124cc:	6922      	ldr	r2, [r4, #16]
 80124ce:	6022      	str	r2, [r4, #0]
 80124d0:	d504      	bpl.n	80124dc <__sflush_r+0x78>
 80124d2:	1c42      	adds	r2, r0, #1
 80124d4:	d101      	bne.n	80124da <__sflush_r+0x76>
 80124d6:	682b      	ldr	r3, [r5, #0]
 80124d8:	b903      	cbnz	r3, 80124dc <__sflush_r+0x78>
 80124da:	6560      	str	r0, [r4, #84]	@ 0x54
 80124dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124de:	602f      	str	r7, [r5, #0]
 80124e0:	b1b9      	cbz	r1, 8012512 <__sflush_r+0xae>
 80124e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80124e6:	4299      	cmp	r1, r3
 80124e8:	d002      	beq.n	80124f0 <__sflush_r+0x8c>
 80124ea:	4628      	mov	r0, r5
 80124ec:	f7fe faa8 	bl	8010a40 <_free_r>
 80124f0:	2300      	movs	r3, #0
 80124f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80124f4:	e00d      	b.n	8012512 <__sflush_r+0xae>
 80124f6:	2301      	movs	r3, #1
 80124f8:	4628      	mov	r0, r5
 80124fa:	47b0      	blx	r6
 80124fc:	4602      	mov	r2, r0
 80124fe:	1c50      	adds	r0, r2, #1
 8012500:	d1c9      	bne.n	8012496 <__sflush_r+0x32>
 8012502:	682b      	ldr	r3, [r5, #0]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d0c6      	beq.n	8012496 <__sflush_r+0x32>
 8012508:	2b1d      	cmp	r3, #29
 801250a:	d001      	beq.n	8012510 <__sflush_r+0xac>
 801250c:	2b16      	cmp	r3, #22
 801250e:	d11e      	bne.n	801254e <__sflush_r+0xea>
 8012510:	602f      	str	r7, [r5, #0]
 8012512:	2000      	movs	r0, #0
 8012514:	e022      	b.n	801255c <__sflush_r+0xf8>
 8012516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801251a:	b21b      	sxth	r3, r3
 801251c:	e01b      	b.n	8012556 <__sflush_r+0xf2>
 801251e:	690f      	ldr	r7, [r1, #16]
 8012520:	2f00      	cmp	r7, #0
 8012522:	d0f6      	beq.n	8012512 <__sflush_r+0xae>
 8012524:	0793      	lsls	r3, r2, #30
 8012526:	680e      	ldr	r6, [r1, #0]
 8012528:	bf08      	it	eq
 801252a:	694b      	ldreq	r3, [r1, #20]
 801252c:	600f      	str	r7, [r1, #0]
 801252e:	bf18      	it	ne
 8012530:	2300      	movne	r3, #0
 8012532:	eba6 0807 	sub.w	r8, r6, r7
 8012536:	608b      	str	r3, [r1, #8]
 8012538:	f1b8 0f00 	cmp.w	r8, #0
 801253c:	dde9      	ble.n	8012512 <__sflush_r+0xae>
 801253e:	6a21      	ldr	r1, [r4, #32]
 8012540:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012542:	4643      	mov	r3, r8
 8012544:	463a      	mov	r2, r7
 8012546:	4628      	mov	r0, r5
 8012548:	47b0      	blx	r6
 801254a:	2800      	cmp	r0, #0
 801254c:	dc08      	bgt.n	8012560 <__sflush_r+0xfc>
 801254e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012556:	81a3      	strh	r3, [r4, #12]
 8012558:	f04f 30ff 	mov.w	r0, #4294967295
 801255c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012560:	4407      	add	r7, r0
 8012562:	eba8 0800 	sub.w	r8, r8, r0
 8012566:	e7e7      	b.n	8012538 <__sflush_r+0xd4>
 8012568:	dfbffffe 	.word	0xdfbffffe

0801256c <_fflush_r>:
 801256c:	b538      	push	{r3, r4, r5, lr}
 801256e:	690b      	ldr	r3, [r1, #16]
 8012570:	4605      	mov	r5, r0
 8012572:	460c      	mov	r4, r1
 8012574:	b913      	cbnz	r3, 801257c <_fflush_r+0x10>
 8012576:	2500      	movs	r5, #0
 8012578:	4628      	mov	r0, r5
 801257a:	bd38      	pop	{r3, r4, r5, pc}
 801257c:	b118      	cbz	r0, 8012586 <_fflush_r+0x1a>
 801257e:	6a03      	ldr	r3, [r0, #32]
 8012580:	b90b      	cbnz	r3, 8012586 <_fflush_r+0x1a>
 8012582:	f7fd fae1 	bl	800fb48 <__sinit>
 8012586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d0f3      	beq.n	8012576 <_fflush_r+0xa>
 801258e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012590:	07d0      	lsls	r0, r2, #31
 8012592:	d404      	bmi.n	801259e <_fflush_r+0x32>
 8012594:	0599      	lsls	r1, r3, #22
 8012596:	d402      	bmi.n	801259e <_fflush_r+0x32>
 8012598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801259a:	f7fd fbec 	bl	800fd76 <__retarget_lock_acquire_recursive>
 801259e:	4628      	mov	r0, r5
 80125a0:	4621      	mov	r1, r4
 80125a2:	f7ff ff5f 	bl	8012464 <__sflush_r>
 80125a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80125a8:	07da      	lsls	r2, r3, #31
 80125aa:	4605      	mov	r5, r0
 80125ac:	d4e4      	bmi.n	8012578 <_fflush_r+0xc>
 80125ae:	89a3      	ldrh	r3, [r4, #12]
 80125b0:	059b      	lsls	r3, r3, #22
 80125b2:	d4e1      	bmi.n	8012578 <_fflush_r+0xc>
 80125b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125b6:	f7fd fbdf 	bl	800fd78 <__retarget_lock_release_recursive>
 80125ba:	e7dd      	b.n	8012578 <_fflush_r+0xc>

080125bc <memmove>:
 80125bc:	4288      	cmp	r0, r1
 80125be:	b510      	push	{r4, lr}
 80125c0:	eb01 0402 	add.w	r4, r1, r2
 80125c4:	d902      	bls.n	80125cc <memmove+0x10>
 80125c6:	4284      	cmp	r4, r0
 80125c8:	4623      	mov	r3, r4
 80125ca:	d807      	bhi.n	80125dc <memmove+0x20>
 80125cc:	1e43      	subs	r3, r0, #1
 80125ce:	42a1      	cmp	r1, r4
 80125d0:	d008      	beq.n	80125e4 <memmove+0x28>
 80125d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80125da:	e7f8      	b.n	80125ce <memmove+0x12>
 80125dc:	4402      	add	r2, r0
 80125de:	4601      	mov	r1, r0
 80125e0:	428a      	cmp	r2, r1
 80125e2:	d100      	bne.n	80125e6 <memmove+0x2a>
 80125e4:	bd10      	pop	{r4, pc}
 80125e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80125ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80125ee:	e7f7      	b.n	80125e0 <memmove+0x24>

080125f0 <strncmp>:
 80125f0:	b510      	push	{r4, lr}
 80125f2:	b16a      	cbz	r2, 8012610 <strncmp+0x20>
 80125f4:	3901      	subs	r1, #1
 80125f6:	1884      	adds	r4, r0, r2
 80125f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012600:	429a      	cmp	r2, r3
 8012602:	d103      	bne.n	801260c <strncmp+0x1c>
 8012604:	42a0      	cmp	r0, r4
 8012606:	d001      	beq.n	801260c <strncmp+0x1c>
 8012608:	2a00      	cmp	r2, #0
 801260a:	d1f5      	bne.n	80125f8 <strncmp+0x8>
 801260c:	1ad0      	subs	r0, r2, r3
 801260e:	bd10      	pop	{r4, pc}
 8012610:	4610      	mov	r0, r2
 8012612:	e7fc      	b.n	801260e <strncmp+0x1e>

08012614 <_sbrk_r>:
 8012614:	b538      	push	{r3, r4, r5, lr}
 8012616:	4d06      	ldr	r5, [pc, #24]	@ (8012630 <_sbrk_r+0x1c>)
 8012618:	2300      	movs	r3, #0
 801261a:	4604      	mov	r4, r0
 801261c:	4608      	mov	r0, r1
 801261e:	602b      	str	r3, [r5, #0]
 8012620:	f7f8 f8fe 	bl	800a820 <_sbrk>
 8012624:	1c43      	adds	r3, r0, #1
 8012626:	d102      	bne.n	801262e <_sbrk_r+0x1a>
 8012628:	682b      	ldr	r3, [r5, #0]
 801262a:	b103      	cbz	r3, 801262e <_sbrk_r+0x1a>
 801262c:	6023      	str	r3, [r4, #0]
 801262e:	bd38      	pop	{r3, r4, r5, pc}
 8012630:	20006720 	.word	0x20006720
 8012634:	00000000 	.word	0x00000000

08012638 <nan>:
 8012638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012640 <nan+0x8>
 801263c:	4770      	bx	lr
 801263e:	bf00      	nop
 8012640:	00000000 	.word	0x00000000
 8012644:	7ff80000 	.word	0x7ff80000

08012648 <__assert_func>:
 8012648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801264a:	4614      	mov	r4, r2
 801264c:	461a      	mov	r2, r3
 801264e:	4b09      	ldr	r3, [pc, #36]	@ (8012674 <__assert_func+0x2c>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4605      	mov	r5, r0
 8012654:	68d8      	ldr	r0, [r3, #12]
 8012656:	b954      	cbnz	r4, 801266e <__assert_func+0x26>
 8012658:	4b07      	ldr	r3, [pc, #28]	@ (8012678 <__assert_func+0x30>)
 801265a:	461c      	mov	r4, r3
 801265c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012660:	9100      	str	r1, [sp, #0]
 8012662:	462b      	mov	r3, r5
 8012664:	4905      	ldr	r1, [pc, #20]	@ (801267c <__assert_func+0x34>)
 8012666:	f000 fba7 	bl	8012db8 <fiprintf>
 801266a:	f000 fbb7 	bl	8012ddc <abort>
 801266e:	4b04      	ldr	r3, [pc, #16]	@ (8012680 <__assert_func+0x38>)
 8012670:	e7f4      	b.n	801265c <__assert_func+0x14>
 8012672:	bf00      	nop
 8012674:	20000460 	.word	0x20000460
 8012678:	080164b4 	.word	0x080164b4
 801267c:	08016486 	.word	0x08016486
 8012680:	08016479 	.word	0x08016479

08012684 <_calloc_r>:
 8012684:	b570      	push	{r4, r5, r6, lr}
 8012686:	fba1 5402 	umull	r5, r4, r1, r2
 801268a:	b93c      	cbnz	r4, 801269c <_calloc_r+0x18>
 801268c:	4629      	mov	r1, r5
 801268e:	f7fe fa4b 	bl	8010b28 <_malloc_r>
 8012692:	4606      	mov	r6, r0
 8012694:	b928      	cbnz	r0, 80126a2 <_calloc_r+0x1e>
 8012696:	2600      	movs	r6, #0
 8012698:	4630      	mov	r0, r6
 801269a:	bd70      	pop	{r4, r5, r6, pc}
 801269c:	220c      	movs	r2, #12
 801269e:	6002      	str	r2, [r0, #0]
 80126a0:	e7f9      	b.n	8012696 <_calloc_r+0x12>
 80126a2:	462a      	mov	r2, r5
 80126a4:	4621      	mov	r1, r4
 80126a6:	f7fd fae8 	bl	800fc7a <memset>
 80126aa:	e7f5      	b.n	8012698 <_calloc_r+0x14>

080126ac <rshift>:
 80126ac:	6903      	ldr	r3, [r0, #16]
 80126ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80126b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80126ba:	f100 0414 	add.w	r4, r0, #20
 80126be:	dd45      	ble.n	801274c <rshift+0xa0>
 80126c0:	f011 011f 	ands.w	r1, r1, #31
 80126c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80126c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80126cc:	d10c      	bne.n	80126e8 <rshift+0x3c>
 80126ce:	f100 0710 	add.w	r7, r0, #16
 80126d2:	4629      	mov	r1, r5
 80126d4:	42b1      	cmp	r1, r6
 80126d6:	d334      	bcc.n	8012742 <rshift+0x96>
 80126d8:	1a9b      	subs	r3, r3, r2
 80126da:	009b      	lsls	r3, r3, #2
 80126dc:	1eea      	subs	r2, r5, #3
 80126de:	4296      	cmp	r6, r2
 80126e0:	bf38      	it	cc
 80126e2:	2300      	movcc	r3, #0
 80126e4:	4423      	add	r3, r4
 80126e6:	e015      	b.n	8012714 <rshift+0x68>
 80126e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80126ec:	f1c1 0820 	rsb	r8, r1, #32
 80126f0:	40cf      	lsrs	r7, r1
 80126f2:	f105 0e04 	add.w	lr, r5, #4
 80126f6:	46a1      	mov	r9, r4
 80126f8:	4576      	cmp	r6, lr
 80126fa:	46f4      	mov	ip, lr
 80126fc:	d815      	bhi.n	801272a <rshift+0x7e>
 80126fe:	1a9a      	subs	r2, r3, r2
 8012700:	0092      	lsls	r2, r2, #2
 8012702:	3a04      	subs	r2, #4
 8012704:	3501      	adds	r5, #1
 8012706:	42ae      	cmp	r6, r5
 8012708:	bf38      	it	cc
 801270a:	2200      	movcc	r2, #0
 801270c:	18a3      	adds	r3, r4, r2
 801270e:	50a7      	str	r7, [r4, r2]
 8012710:	b107      	cbz	r7, 8012714 <rshift+0x68>
 8012712:	3304      	adds	r3, #4
 8012714:	1b1a      	subs	r2, r3, r4
 8012716:	42a3      	cmp	r3, r4
 8012718:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801271c:	bf08      	it	eq
 801271e:	2300      	moveq	r3, #0
 8012720:	6102      	str	r2, [r0, #16]
 8012722:	bf08      	it	eq
 8012724:	6143      	streq	r3, [r0, #20]
 8012726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801272a:	f8dc c000 	ldr.w	ip, [ip]
 801272e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012732:	ea4c 0707 	orr.w	r7, ip, r7
 8012736:	f849 7b04 	str.w	r7, [r9], #4
 801273a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801273e:	40cf      	lsrs	r7, r1
 8012740:	e7da      	b.n	80126f8 <rshift+0x4c>
 8012742:	f851 cb04 	ldr.w	ip, [r1], #4
 8012746:	f847 cf04 	str.w	ip, [r7, #4]!
 801274a:	e7c3      	b.n	80126d4 <rshift+0x28>
 801274c:	4623      	mov	r3, r4
 801274e:	e7e1      	b.n	8012714 <rshift+0x68>

08012750 <__hexdig_fun>:
 8012750:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012754:	2b09      	cmp	r3, #9
 8012756:	d802      	bhi.n	801275e <__hexdig_fun+0xe>
 8012758:	3820      	subs	r0, #32
 801275a:	b2c0      	uxtb	r0, r0
 801275c:	4770      	bx	lr
 801275e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012762:	2b05      	cmp	r3, #5
 8012764:	d801      	bhi.n	801276a <__hexdig_fun+0x1a>
 8012766:	3847      	subs	r0, #71	@ 0x47
 8012768:	e7f7      	b.n	801275a <__hexdig_fun+0xa>
 801276a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801276e:	2b05      	cmp	r3, #5
 8012770:	d801      	bhi.n	8012776 <__hexdig_fun+0x26>
 8012772:	3827      	subs	r0, #39	@ 0x27
 8012774:	e7f1      	b.n	801275a <__hexdig_fun+0xa>
 8012776:	2000      	movs	r0, #0
 8012778:	4770      	bx	lr
	...

0801277c <__gethex>:
 801277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012780:	b085      	sub	sp, #20
 8012782:	468a      	mov	sl, r1
 8012784:	9302      	str	r3, [sp, #8]
 8012786:	680b      	ldr	r3, [r1, #0]
 8012788:	9001      	str	r0, [sp, #4]
 801278a:	4690      	mov	r8, r2
 801278c:	1c9c      	adds	r4, r3, #2
 801278e:	46a1      	mov	r9, r4
 8012790:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012794:	2830      	cmp	r0, #48	@ 0x30
 8012796:	d0fa      	beq.n	801278e <__gethex+0x12>
 8012798:	eba9 0303 	sub.w	r3, r9, r3
 801279c:	f1a3 0b02 	sub.w	fp, r3, #2
 80127a0:	f7ff ffd6 	bl	8012750 <__hexdig_fun>
 80127a4:	4605      	mov	r5, r0
 80127a6:	2800      	cmp	r0, #0
 80127a8:	d168      	bne.n	801287c <__gethex+0x100>
 80127aa:	49a0      	ldr	r1, [pc, #640]	@ (8012a2c <__gethex+0x2b0>)
 80127ac:	2201      	movs	r2, #1
 80127ae:	4648      	mov	r0, r9
 80127b0:	f7ff ff1e 	bl	80125f0 <strncmp>
 80127b4:	4607      	mov	r7, r0
 80127b6:	2800      	cmp	r0, #0
 80127b8:	d167      	bne.n	801288a <__gethex+0x10e>
 80127ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80127be:	4626      	mov	r6, r4
 80127c0:	f7ff ffc6 	bl	8012750 <__hexdig_fun>
 80127c4:	2800      	cmp	r0, #0
 80127c6:	d062      	beq.n	801288e <__gethex+0x112>
 80127c8:	4623      	mov	r3, r4
 80127ca:	7818      	ldrb	r0, [r3, #0]
 80127cc:	2830      	cmp	r0, #48	@ 0x30
 80127ce:	4699      	mov	r9, r3
 80127d0:	f103 0301 	add.w	r3, r3, #1
 80127d4:	d0f9      	beq.n	80127ca <__gethex+0x4e>
 80127d6:	f7ff ffbb 	bl	8012750 <__hexdig_fun>
 80127da:	fab0 f580 	clz	r5, r0
 80127de:	096d      	lsrs	r5, r5, #5
 80127e0:	f04f 0b01 	mov.w	fp, #1
 80127e4:	464a      	mov	r2, r9
 80127e6:	4616      	mov	r6, r2
 80127e8:	3201      	adds	r2, #1
 80127ea:	7830      	ldrb	r0, [r6, #0]
 80127ec:	f7ff ffb0 	bl	8012750 <__hexdig_fun>
 80127f0:	2800      	cmp	r0, #0
 80127f2:	d1f8      	bne.n	80127e6 <__gethex+0x6a>
 80127f4:	498d      	ldr	r1, [pc, #564]	@ (8012a2c <__gethex+0x2b0>)
 80127f6:	2201      	movs	r2, #1
 80127f8:	4630      	mov	r0, r6
 80127fa:	f7ff fef9 	bl	80125f0 <strncmp>
 80127fe:	2800      	cmp	r0, #0
 8012800:	d13f      	bne.n	8012882 <__gethex+0x106>
 8012802:	b944      	cbnz	r4, 8012816 <__gethex+0x9a>
 8012804:	1c74      	adds	r4, r6, #1
 8012806:	4622      	mov	r2, r4
 8012808:	4616      	mov	r6, r2
 801280a:	3201      	adds	r2, #1
 801280c:	7830      	ldrb	r0, [r6, #0]
 801280e:	f7ff ff9f 	bl	8012750 <__hexdig_fun>
 8012812:	2800      	cmp	r0, #0
 8012814:	d1f8      	bne.n	8012808 <__gethex+0x8c>
 8012816:	1ba4      	subs	r4, r4, r6
 8012818:	00a7      	lsls	r7, r4, #2
 801281a:	7833      	ldrb	r3, [r6, #0]
 801281c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012820:	2b50      	cmp	r3, #80	@ 0x50
 8012822:	d13e      	bne.n	80128a2 <__gethex+0x126>
 8012824:	7873      	ldrb	r3, [r6, #1]
 8012826:	2b2b      	cmp	r3, #43	@ 0x2b
 8012828:	d033      	beq.n	8012892 <__gethex+0x116>
 801282a:	2b2d      	cmp	r3, #45	@ 0x2d
 801282c:	d034      	beq.n	8012898 <__gethex+0x11c>
 801282e:	1c71      	adds	r1, r6, #1
 8012830:	2400      	movs	r4, #0
 8012832:	7808      	ldrb	r0, [r1, #0]
 8012834:	f7ff ff8c 	bl	8012750 <__hexdig_fun>
 8012838:	1e43      	subs	r3, r0, #1
 801283a:	b2db      	uxtb	r3, r3
 801283c:	2b18      	cmp	r3, #24
 801283e:	d830      	bhi.n	80128a2 <__gethex+0x126>
 8012840:	f1a0 0210 	sub.w	r2, r0, #16
 8012844:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012848:	f7ff ff82 	bl	8012750 <__hexdig_fun>
 801284c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012850:	fa5f fc8c 	uxtb.w	ip, ip
 8012854:	f1bc 0f18 	cmp.w	ip, #24
 8012858:	f04f 030a 	mov.w	r3, #10
 801285c:	d91e      	bls.n	801289c <__gethex+0x120>
 801285e:	b104      	cbz	r4, 8012862 <__gethex+0xe6>
 8012860:	4252      	negs	r2, r2
 8012862:	4417      	add	r7, r2
 8012864:	f8ca 1000 	str.w	r1, [sl]
 8012868:	b1ed      	cbz	r5, 80128a6 <__gethex+0x12a>
 801286a:	f1bb 0f00 	cmp.w	fp, #0
 801286e:	bf0c      	ite	eq
 8012870:	2506      	moveq	r5, #6
 8012872:	2500      	movne	r5, #0
 8012874:	4628      	mov	r0, r5
 8012876:	b005      	add	sp, #20
 8012878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801287c:	2500      	movs	r5, #0
 801287e:	462c      	mov	r4, r5
 8012880:	e7b0      	b.n	80127e4 <__gethex+0x68>
 8012882:	2c00      	cmp	r4, #0
 8012884:	d1c7      	bne.n	8012816 <__gethex+0x9a>
 8012886:	4627      	mov	r7, r4
 8012888:	e7c7      	b.n	801281a <__gethex+0x9e>
 801288a:	464e      	mov	r6, r9
 801288c:	462f      	mov	r7, r5
 801288e:	2501      	movs	r5, #1
 8012890:	e7c3      	b.n	801281a <__gethex+0x9e>
 8012892:	2400      	movs	r4, #0
 8012894:	1cb1      	adds	r1, r6, #2
 8012896:	e7cc      	b.n	8012832 <__gethex+0xb6>
 8012898:	2401      	movs	r4, #1
 801289a:	e7fb      	b.n	8012894 <__gethex+0x118>
 801289c:	fb03 0002 	mla	r0, r3, r2, r0
 80128a0:	e7ce      	b.n	8012840 <__gethex+0xc4>
 80128a2:	4631      	mov	r1, r6
 80128a4:	e7de      	b.n	8012864 <__gethex+0xe8>
 80128a6:	eba6 0309 	sub.w	r3, r6, r9
 80128aa:	3b01      	subs	r3, #1
 80128ac:	4629      	mov	r1, r5
 80128ae:	2b07      	cmp	r3, #7
 80128b0:	dc0a      	bgt.n	80128c8 <__gethex+0x14c>
 80128b2:	9801      	ldr	r0, [sp, #4]
 80128b4:	f7fe f9c4 	bl	8010c40 <_Balloc>
 80128b8:	4604      	mov	r4, r0
 80128ba:	b940      	cbnz	r0, 80128ce <__gethex+0x152>
 80128bc:	4b5c      	ldr	r3, [pc, #368]	@ (8012a30 <__gethex+0x2b4>)
 80128be:	4602      	mov	r2, r0
 80128c0:	21e4      	movs	r1, #228	@ 0xe4
 80128c2:	485c      	ldr	r0, [pc, #368]	@ (8012a34 <__gethex+0x2b8>)
 80128c4:	f7ff fec0 	bl	8012648 <__assert_func>
 80128c8:	3101      	adds	r1, #1
 80128ca:	105b      	asrs	r3, r3, #1
 80128cc:	e7ef      	b.n	80128ae <__gethex+0x132>
 80128ce:	f100 0a14 	add.w	sl, r0, #20
 80128d2:	2300      	movs	r3, #0
 80128d4:	4655      	mov	r5, sl
 80128d6:	469b      	mov	fp, r3
 80128d8:	45b1      	cmp	r9, r6
 80128da:	d337      	bcc.n	801294c <__gethex+0x1d0>
 80128dc:	f845 bb04 	str.w	fp, [r5], #4
 80128e0:	eba5 050a 	sub.w	r5, r5, sl
 80128e4:	10ad      	asrs	r5, r5, #2
 80128e6:	6125      	str	r5, [r4, #16]
 80128e8:	4658      	mov	r0, fp
 80128ea:	f7fe fa9b 	bl	8010e24 <__hi0bits>
 80128ee:	016d      	lsls	r5, r5, #5
 80128f0:	f8d8 6000 	ldr.w	r6, [r8]
 80128f4:	1a2d      	subs	r5, r5, r0
 80128f6:	42b5      	cmp	r5, r6
 80128f8:	dd54      	ble.n	80129a4 <__gethex+0x228>
 80128fa:	1bad      	subs	r5, r5, r6
 80128fc:	4629      	mov	r1, r5
 80128fe:	4620      	mov	r0, r4
 8012900:	f7fe fe2f 	bl	8011562 <__any_on>
 8012904:	4681      	mov	r9, r0
 8012906:	b178      	cbz	r0, 8012928 <__gethex+0x1ac>
 8012908:	1e6b      	subs	r3, r5, #1
 801290a:	1159      	asrs	r1, r3, #5
 801290c:	f003 021f 	and.w	r2, r3, #31
 8012910:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012914:	f04f 0901 	mov.w	r9, #1
 8012918:	fa09 f202 	lsl.w	r2, r9, r2
 801291c:	420a      	tst	r2, r1
 801291e:	d003      	beq.n	8012928 <__gethex+0x1ac>
 8012920:	454b      	cmp	r3, r9
 8012922:	dc36      	bgt.n	8012992 <__gethex+0x216>
 8012924:	f04f 0902 	mov.w	r9, #2
 8012928:	4629      	mov	r1, r5
 801292a:	4620      	mov	r0, r4
 801292c:	f7ff febe 	bl	80126ac <rshift>
 8012930:	442f      	add	r7, r5
 8012932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012936:	42bb      	cmp	r3, r7
 8012938:	da42      	bge.n	80129c0 <__gethex+0x244>
 801293a:	9801      	ldr	r0, [sp, #4]
 801293c:	4621      	mov	r1, r4
 801293e:	f7fe f9bf 	bl	8010cc0 <_Bfree>
 8012942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012944:	2300      	movs	r3, #0
 8012946:	6013      	str	r3, [r2, #0]
 8012948:	25a3      	movs	r5, #163	@ 0xa3
 801294a:	e793      	b.n	8012874 <__gethex+0xf8>
 801294c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012950:	2a2e      	cmp	r2, #46	@ 0x2e
 8012952:	d012      	beq.n	801297a <__gethex+0x1fe>
 8012954:	2b20      	cmp	r3, #32
 8012956:	d104      	bne.n	8012962 <__gethex+0x1e6>
 8012958:	f845 bb04 	str.w	fp, [r5], #4
 801295c:	f04f 0b00 	mov.w	fp, #0
 8012960:	465b      	mov	r3, fp
 8012962:	7830      	ldrb	r0, [r6, #0]
 8012964:	9303      	str	r3, [sp, #12]
 8012966:	f7ff fef3 	bl	8012750 <__hexdig_fun>
 801296a:	9b03      	ldr	r3, [sp, #12]
 801296c:	f000 000f 	and.w	r0, r0, #15
 8012970:	4098      	lsls	r0, r3
 8012972:	ea4b 0b00 	orr.w	fp, fp, r0
 8012976:	3304      	adds	r3, #4
 8012978:	e7ae      	b.n	80128d8 <__gethex+0x15c>
 801297a:	45b1      	cmp	r9, r6
 801297c:	d8ea      	bhi.n	8012954 <__gethex+0x1d8>
 801297e:	492b      	ldr	r1, [pc, #172]	@ (8012a2c <__gethex+0x2b0>)
 8012980:	9303      	str	r3, [sp, #12]
 8012982:	2201      	movs	r2, #1
 8012984:	4630      	mov	r0, r6
 8012986:	f7ff fe33 	bl	80125f0 <strncmp>
 801298a:	9b03      	ldr	r3, [sp, #12]
 801298c:	2800      	cmp	r0, #0
 801298e:	d1e1      	bne.n	8012954 <__gethex+0x1d8>
 8012990:	e7a2      	b.n	80128d8 <__gethex+0x15c>
 8012992:	1ea9      	subs	r1, r5, #2
 8012994:	4620      	mov	r0, r4
 8012996:	f7fe fde4 	bl	8011562 <__any_on>
 801299a:	2800      	cmp	r0, #0
 801299c:	d0c2      	beq.n	8012924 <__gethex+0x1a8>
 801299e:	f04f 0903 	mov.w	r9, #3
 80129a2:	e7c1      	b.n	8012928 <__gethex+0x1ac>
 80129a4:	da09      	bge.n	80129ba <__gethex+0x23e>
 80129a6:	1b75      	subs	r5, r6, r5
 80129a8:	4621      	mov	r1, r4
 80129aa:	9801      	ldr	r0, [sp, #4]
 80129ac:	462a      	mov	r2, r5
 80129ae:	f7fe fb9f 	bl	80110f0 <__lshift>
 80129b2:	1b7f      	subs	r7, r7, r5
 80129b4:	4604      	mov	r4, r0
 80129b6:	f100 0a14 	add.w	sl, r0, #20
 80129ba:	f04f 0900 	mov.w	r9, #0
 80129be:	e7b8      	b.n	8012932 <__gethex+0x1b6>
 80129c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80129c4:	42bd      	cmp	r5, r7
 80129c6:	dd6f      	ble.n	8012aa8 <__gethex+0x32c>
 80129c8:	1bed      	subs	r5, r5, r7
 80129ca:	42ae      	cmp	r6, r5
 80129cc:	dc34      	bgt.n	8012a38 <__gethex+0x2bc>
 80129ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80129d2:	2b02      	cmp	r3, #2
 80129d4:	d022      	beq.n	8012a1c <__gethex+0x2a0>
 80129d6:	2b03      	cmp	r3, #3
 80129d8:	d024      	beq.n	8012a24 <__gethex+0x2a8>
 80129da:	2b01      	cmp	r3, #1
 80129dc:	d115      	bne.n	8012a0a <__gethex+0x28e>
 80129de:	42ae      	cmp	r6, r5
 80129e0:	d113      	bne.n	8012a0a <__gethex+0x28e>
 80129e2:	2e01      	cmp	r6, #1
 80129e4:	d10b      	bne.n	80129fe <__gethex+0x282>
 80129e6:	9a02      	ldr	r2, [sp, #8]
 80129e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80129ec:	6013      	str	r3, [r2, #0]
 80129ee:	2301      	movs	r3, #1
 80129f0:	6123      	str	r3, [r4, #16]
 80129f2:	f8ca 3000 	str.w	r3, [sl]
 80129f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129f8:	2562      	movs	r5, #98	@ 0x62
 80129fa:	601c      	str	r4, [r3, #0]
 80129fc:	e73a      	b.n	8012874 <__gethex+0xf8>
 80129fe:	1e71      	subs	r1, r6, #1
 8012a00:	4620      	mov	r0, r4
 8012a02:	f7fe fdae 	bl	8011562 <__any_on>
 8012a06:	2800      	cmp	r0, #0
 8012a08:	d1ed      	bne.n	80129e6 <__gethex+0x26a>
 8012a0a:	9801      	ldr	r0, [sp, #4]
 8012a0c:	4621      	mov	r1, r4
 8012a0e:	f7fe f957 	bl	8010cc0 <_Bfree>
 8012a12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a14:	2300      	movs	r3, #0
 8012a16:	6013      	str	r3, [r2, #0]
 8012a18:	2550      	movs	r5, #80	@ 0x50
 8012a1a:	e72b      	b.n	8012874 <__gethex+0xf8>
 8012a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d1f3      	bne.n	8012a0a <__gethex+0x28e>
 8012a22:	e7e0      	b.n	80129e6 <__gethex+0x26a>
 8012a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d1dd      	bne.n	80129e6 <__gethex+0x26a>
 8012a2a:	e7ee      	b.n	8012a0a <__gethex+0x28e>
 8012a2c:	08016408 	.word	0x08016408
 8012a30:	080162a2 	.word	0x080162a2
 8012a34:	080164b5 	.word	0x080164b5
 8012a38:	1e6f      	subs	r7, r5, #1
 8012a3a:	f1b9 0f00 	cmp.w	r9, #0
 8012a3e:	d130      	bne.n	8012aa2 <__gethex+0x326>
 8012a40:	b127      	cbz	r7, 8012a4c <__gethex+0x2d0>
 8012a42:	4639      	mov	r1, r7
 8012a44:	4620      	mov	r0, r4
 8012a46:	f7fe fd8c 	bl	8011562 <__any_on>
 8012a4a:	4681      	mov	r9, r0
 8012a4c:	117a      	asrs	r2, r7, #5
 8012a4e:	2301      	movs	r3, #1
 8012a50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012a54:	f007 071f 	and.w	r7, r7, #31
 8012a58:	40bb      	lsls	r3, r7
 8012a5a:	4213      	tst	r3, r2
 8012a5c:	4629      	mov	r1, r5
 8012a5e:	4620      	mov	r0, r4
 8012a60:	bf18      	it	ne
 8012a62:	f049 0902 	orrne.w	r9, r9, #2
 8012a66:	f7ff fe21 	bl	80126ac <rshift>
 8012a6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012a6e:	1b76      	subs	r6, r6, r5
 8012a70:	2502      	movs	r5, #2
 8012a72:	f1b9 0f00 	cmp.w	r9, #0
 8012a76:	d047      	beq.n	8012b08 <__gethex+0x38c>
 8012a78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a7c:	2b02      	cmp	r3, #2
 8012a7e:	d015      	beq.n	8012aac <__gethex+0x330>
 8012a80:	2b03      	cmp	r3, #3
 8012a82:	d017      	beq.n	8012ab4 <__gethex+0x338>
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d109      	bne.n	8012a9c <__gethex+0x320>
 8012a88:	f019 0f02 	tst.w	r9, #2
 8012a8c:	d006      	beq.n	8012a9c <__gethex+0x320>
 8012a8e:	f8da 3000 	ldr.w	r3, [sl]
 8012a92:	ea49 0903 	orr.w	r9, r9, r3
 8012a96:	f019 0f01 	tst.w	r9, #1
 8012a9a:	d10e      	bne.n	8012aba <__gethex+0x33e>
 8012a9c:	f045 0510 	orr.w	r5, r5, #16
 8012aa0:	e032      	b.n	8012b08 <__gethex+0x38c>
 8012aa2:	f04f 0901 	mov.w	r9, #1
 8012aa6:	e7d1      	b.n	8012a4c <__gethex+0x2d0>
 8012aa8:	2501      	movs	r5, #1
 8012aaa:	e7e2      	b.n	8012a72 <__gethex+0x2f6>
 8012aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012aae:	f1c3 0301 	rsb	r3, r3, #1
 8012ab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d0f0      	beq.n	8012a9c <__gethex+0x320>
 8012aba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012abe:	f104 0314 	add.w	r3, r4, #20
 8012ac2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012ac6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012aca:	f04f 0c00 	mov.w	ip, #0
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ad4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012ad8:	d01b      	beq.n	8012b12 <__gethex+0x396>
 8012ada:	3201      	adds	r2, #1
 8012adc:	6002      	str	r2, [r0, #0]
 8012ade:	2d02      	cmp	r5, #2
 8012ae0:	f104 0314 	add.w	r3, r4, #20
 8012ae4:	d13c      	bne.n	8012b60 <__gethex+0x3e4>
 8012ae6:	f8d8 2000 	ldr.w	r2, [r8]
 8012aea:	3a01      	subs	r2, #1
 8012aec:	42b2      	cmp	r2, r6
 8012aee:	d109      	bne.n	8012b04 <__gethex+0x388>
 8012af0:	1171      	asrs	r1, r6, #5
 8012af2:	2201      	movs	r2, #1
 8012af4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012af8:	f006 061f 	and.w	r6, r6, #31
 8012afc:	fa02 f606 	lsl.w	r6, r2, r6
 8012b00:	421e      	tst	r6, r3
 8012b02:	d13a      	bne.n	8012b7a <__gethex+0x3fe>
 8012b04:	f045 0520 	orr.w	r5, r5, #32
 8012b08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b0a:	601c      	str	r4, [r3, #0]
 8012b0c:	9b02      	ldr	r3, [sp, #8]
 8012b0e:	601f      	str	r7, [r3, #0]
 8012b10:	e6b0      	b.n	8012874 <__gethex+0xf8>
 8012b12:	4299      	cmp	r1, r3
 8012b14:	f843 cc04 	str.w	ip, [r3, #-4]
 8012b18:	d8d9      	bhi.n	8012ace <__gethex+0x352>
 8012b1a:	68a3      	ldr	r3, [r4, #8]
 8012b1c:	459b      	cmp	fp, r3
 8012b1e:	db17      	blt.n	8012b50 <__gethex+0x3d4>
 8012b20:	6861      	ldr	r1, [r4, #4]
 8012b22:	9801      	ldr	r0, [sp, #4]
 8012b24:	3101      	adds	r1, #1
 8012b26:	f7fe f88b 	bl	8010c40 <_Balloc>
 8012b2a:	4681      	mov	r9, r0
 8012b2c:	b918      	cbnz	r0, 8012b36 <__gethex+0x3ba>
 8012b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8012b98 <__gethex+0x41c>)
 8012b30:	4602      	mov	r2, r0
 8012b32:	2184      	movs	r1, #132	@ 0x84
 8012b34:	e6c5      	b.n	80128c2 <__gethex+0x146>
 8012b36:	6922      	ldr	r2, [r4, #16]
 8012b38:	3202      	adds	r2, #2
 8012b3a:	f104 010c 	add.w	r1, r4, #12
 8012b3e:	0092      	lsls	r2, r2, #2
 8012b40:	300c      	adds	r0, #12
 8012b42:	f7fd f91a 	bl	800fd7a <memcpy>
 8012b46:	4621      	mov	r1, r4
 8012b48:	9801      	ldr	r0, [sp, #4]
 8012b4a:	f7fe f8b9 	bl	8010cc0 <_Bfree>
 8012b4e:	464c      	mov	r4, r9
 8012b50:	6923      	ldr	r3, [r4, #16]
 8012b52:	1c5a      	adds	r2, r3, #1
 8012b54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b58:	6122      	str	r2, [r4, #16]
 8012b5a:	2201      	movs	r2, #1
 8012b5c:	615a      	str	r2, [r3, #20]
 8012b5e:	e7be      	b.n	8012ade <__gethex+0x362>
 8012b60:	6922      	ldr	r2, [r4, #16]
 8012b62:	455a      	cmp	r2, fp
 8012b64:	dd0b      	ble.n	8012b7e <__gethex+0x402>
 8012b66:	2101      	movs	r1, #1
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f7ff fd9f 	bl	80126ac <rshift>
 8012b6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b72:	3701      	adds	r7, #1
 8012b74:	42bb      	cmp	r3, r7
 8012b76:	f6ff aee0 	blt.w	801293a <__gethex+0x1be>
 8012b7a:	2501      	movs	r5, #1
 8012b7c:	e7c2      	b.n	8012b04 <__gethex+0x388>
 8012b7e:	f016 061f 	ands.w	r6, r6, #31
 8012b82:	d0fa      	beq.n	8012b7a <__gethex+0x3fe>
 8012b84:	4453      	add	r3, sl
 8012b86:	f1c6 0620 	rsb	r6, r6, #32
 8012b8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012b8e:	f7fe f949 	bl	8010e24 <__hi0bits>
 8012b92:	42b0      	cmp	r0, r6
 8012b94:	dbe7      	blt.n	8012b66 <__gethex+0x3ea>
 8012b96:	e7f0      	b.n	8012b7a <__gethex+0x3fe>
 8012b98:	080162a2 	.word	0x080162a2

08012b9c <L_shift>:
 8012b9c:	f1c2 0208 	rsb	r2, r2, #8
 8012ba0:	0092      	lsls	r2, r2, #2
 8012ba2:	b570      	push	{r4, r5, r6, lr}
 8012ba4:	f1c2 0620 	rsb	r6, r2, #32
 8012ba8:	6843      	ldr	r3, [r0, #4]
 8012baa:	6804      	ldr	r4, [r0, #0]
 8012bac:	fa03 f506 	lsl.w	r5, r3, r6
 8012bb0:	432c      	orrs	r4, r5
 8012bb2:	40d3      	lsrs	r3, r2
 8012bb4:	6004      	str	r4, [r0, #0]
 8012bb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8012bba:	4288      	cmp	r0, r1
 8012bbc:	d3f4      	bcc.n	8012ba8 <L_shift+0xc>
 8012bbe:	bd70      	pop	{r4, r5, r6, pc}

08012bc0 <__match>:
 8012bc0:	b530      	push	{r4, r5, lr}
 8012bc2:	6803      	ldr	r3, [r0, #0]
 8012bc4:	3301      	adds	r3, #1
 8012bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bca:	b914      	cbnz	r4, 8012bd2 <__match+0x12>
 8012bcc:	6003      	str	r3, [r0, #0]
 8012bce:	2001      	movs	r0, #1
 8012bd0:	bd30      	pop	{r4, r5, pc}
 8012bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012bda:	2d19      	cmp	r5, #25
 8012bdc:	bf98      	it	ls
 8012bde:	3220      	addls	r2, #32
 8012be0:	42a2      	cmp	r2, r4
 8012be2:	d0f0      	beq.n	8012bc6 <__match+0x6>
 8012be4:	2000      	movs	r0, #0
 8012be6:	e7f3      	b.n	8012bd0 <__match+0x10>

08012be8 <__hexnan>:
 8012be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bec:	680b      	ldr	r3, [r1, #0]
 8012bee:	6801      	ldr	r1, [r0, #0]
 8012bf0:	115e      	asrs	r6, r3, #5
 8012bf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012bf6:	f013 031f 	ands.w	r3, r3, #31
 8012bfa:	b087      	sub	sp, #28
 8012bfc:	bf18      	it	ne
 8012bfe:	3604      	addne	r6, #4
 8012c00:	2500      	movs	r5, #0
 8012c02:	1f37      	subs	r7, r6, #4
 8012c04:	4682      	mov	sl, r0
 8012c06:	4690      	mov	r8, r2
 8012c08:	9301      	str	r3, [sp, #4]
 8012c0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8012c0e:	46b9      	mov	r9, r7
 8012c10:	463c      	mov	r4, r7
 8012c12:	9502      	str	r5, [sp, #8]
 8012c14:	46ab      	mov	fp, r5
 8012c16:	784a      	ldrb	r2, [r1, #1]
 8012c18:	1c4b      	adds	r3, r1, #1
 8012c1a:	9303      	str	r3, [sp, #12]
 8012c1c:	b342      	cbz	r2, 8012c70 <__hexnan+0x88>
 8012c1e:	4610      	mov	r0, r2
 8012c20:	9105      	str	r1, [sp, #20]
 8012c22:	9204      	str	r2, [sp, #16]
 8012c24:	f7ff fd94 	bl	8012750 <__hexdig_fun>
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	d151      	bne.n	8012cd0 <__hexnan+0xe8>
 8012c2c:	9a04      	ldr	r2, [sp, #16]
 8012c2e:	9905      	ldr	r1, [sp, #20]
 8012c30:	2a20      	cmp	r2, #32
 8012c32:	d818      	bhi.n	8012c66 <__hexnan+0x7e>
 8012c34:	9b02      	ldr	r3, [sp, #8]
 8012c36:	459b      	cmp	fp, r3
 8012c38:	dd13      	ble.n	8012c62 <__hexnan+0x7a>
 8012c3a:	454c      	cmp	r4, r9
 8012c3c:	d206      	bcs.n	8012c4c <__hexnan+0x64>
 8012c3e:	2d07      	cmp	r5, #7
 8012c40:	dc04      	bgt.n	8012c4c <__hexnan+0x64>
 8012c42:	462a      	mov	r2, r5
 8012c44:	4649      	mov	r1, r9
 8012c46:	4620      	mov	r0, r4
 8012c48:	f7ff ffa8 	bl	8012b9c <L_shift>
 8012c4c:	4544      	cmp	r4, r8
 8012c4e:	d952      	bls.n	8012cf6 <__hexnan+0x10e>
 8012c50:	2300      	movs	r3, #0
 8012c52:	f1a4 0904 	sub.w	r9, r4, #4
 8012c56:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c5a:	f8cd b008 	str.w	fp, [sp, #8]
 8012c5e:	464c      	mov	r4, r9
 8012c60:	461d      	mov	r5, r3
 8012c62:	9903      	ldr	r1, [sp, #12]
 8012c64:	e7d7      	b.n	8012c16 <__hexnan+0x2e>
 8012c66:	2a29      	cmp	r2, #41	@ 0x29
 8012c68:	d157      	bne.n	8012d1a <__hexnan+0x132>
 8012c6a:	3102      	adds	r1, #2
 8012c6c:	f8ca 1000 	str.w	r1, [sl]
 8012c70:	f1bb 0f00 	cmp.w	fp, #0
 8012c74:	d051      	beq.n	8012d1a <__hexnan+0x132>
 8012c76:	454c      	cmp	r4, r9
 8012c78:	d206      	bcs.n	8012c88 <__hexnan+0xa0>
 8012c7a:	2d07      	cmp	r5, #7
 8012c7c:	dc04      	bgt.n	8012c88 <__hexnan+0xa0>
 8012c7e:	462a      	mov	r2, r5
 8012c80:	4649      	mov	r1, r9
 8012c82:	4620      	mov	r0, r4
 8012c84:	f7ff ff8a 	bl	8012b9c <L_shift>
 8012c88:	4544      	cmp	r4, r8
 8012c8a:	d936      	bls.n	8012cfa <__hexnan+0x112>
 8012c8c:	f1a8 0204 	sub.w	r2, r8, #4
 8012c90:	4623      	mov	r3, r4
 8012c92:	f853 1b04 	ldr.w	r1, [r3], #4
 8012c96:	f842 1f04 	str.w	r1, [r2, #4]!
 8012c9a:	429f      	cmp	r7, r3
 8012c9c:	d2f9      	bcs.n	8012c92 <__hexnan+0xaa>
 8012c9e:	1b3b      	subs	r3, r7, r4
 8012ca0:	f023 0303 	bic.w	r3, r3, #3
 8012ca4:	3304      	adds	r3, #4
 8012ca6:	3401      	adds	r4, #1
 8012ca8:	3e03      	subs	r6, #3
 8012caa:	42b4      	cmp	r4, r6
 8012cac:	bf88      	it	hi
 8012cae:	2304      	movhi	r3, #4
 8012cb0:	4443      	add	r3, r8
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	f843 2b04 	str.w	r2, [r3], #4
 8012cb8:	429f      	cmp	r7, r3
 8012cba:	d2fb      	bcs.n	8012cb4 <__hexnan+0xcc>
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	b91b      	cbnz	r3, 8012cc8 <__hexnan+0xe0>
 8012cc0:	4547      	cmp	r7, r8
 8012cc2:	d128      	bne.n	8012d16 <__hexnan+0x12e>
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	603b      	str	r3, [r7, #0]
 8012cc8:	2005      	movs	r0, #5
 8012cca:	b007      	add	sp, #28
 8012ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cd0:	3501      	adds	r5, #1
 8012cd2:	2d08      	cmp	r5, #8
 8012cd4:	f10b 0b01 	add.w	fp, fp, #1
 8012cd8:	dd06      	ble.n	8012ce8 <__hexnan+0x100>
 8012cda:	4544      	cmp	r4, r8
 8012cdc:	d9c1      	bls.n	8012c62 <__hexnan+0x7a>
 8012cde:	2300      	movs	r3, #0
 8012ce0:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ce4:	2501      	movs	r5, #1
 8012ce6:	3c04      	subs	r4, #4
 8012ce8:	6822      	ldr	r2, [r4, #0]
 8012cea:	f000 000f 	and.w	r0, r0, #15
 8012cee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012cf2:	6020      	str	r0, [r4, #0]
 8012cf4:	e7b5      	b.n	8012c62 <__hexnan+0x7a>
 8012cf6:	2508      	movs	r5, #8
 8012cf8:	e7b3      	b.n	8012c62 <__hexnan+0x7a>
 8012cfa:	9b01      	ldr	r3, [sp, #4]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d0dd      	beq.n	8012cbc <__hexnan+0xd4>
 8012d00:	f1c3 0320 	rsb	r3, r3, #32
 8012d04:	f04f 32ff 	mov.w	r2, #4294967295
 8012d08:	40da      	lsrs	r2, r3
 8012d0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012d0e:	4013      	ands	r3, r2
 8012d10:	f846 3c04 	str.w	r3, [r6, #-4]
 8012d14:	e7d2      	b.n	8012cbc <__hexnan+0xd4>
 8012d16:	3f04      	subs	r7, #4
 8012d18:	e7d0      	b.n	8012cbc <__hexnan+0xd4>
 8012d1a:	2004      	movs	r0, #4
 8012d1c:	e7d5      	b.n	8012cca <__hexnan+0xe2>

08012d1e <__ascii_mbtowc>:
 8012d1e:	b082      	sub	sp, #8
 8012d20:	b901      	cbnz	r1, 8012d24 <__ascii_mbtowc+0x6>
 8012d22:	a901      	add	r1, sp, #4
 8012d24:	b142      	cbz	r2, 8012d38 <__ascii_mbtowc+0x1a>
 8012d26:	b14b      	cbz	r3, 8012d3c <__ascii_mbtowc+0x1e>
 8012d28:	7813      	ldrb	r3, [r2, #0]
 8012d2a:	600b      	str	r3, [r1, #0]
 8012d2c:	7812      	ldrb	r2, [r2, #0]
 8012d2e:	1e10      	subs	r0, r2, #0
 8012d30:	bf18      	it	ne
 8012d32:	2001      	movne	r0, #1
 8012d34:	b002      	add	sp, #8
 8012d36:	4770      	bx	lr
 8012d38:	4610      	mov	r0, r2
 8012d3a:	e7fb      	b.n	8012d34 <__ascii_mbtowc+0x16>
 8012d3c:	f06f 0001 	mvn.w	r0, #1
 8012d40:	e7f8      	b.n	8012d34 <__ascii_mbtowc+0x16>

08012d42 <_realloc_r>:
 8012d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d46:	4680      	mov	r8, r0
 8012d48:	4615      	mov	r5, r2
 8012d4a:	460c      	mov	r4, r1
 8012d4c:	b921      	cbnz	r1, 8012d58 <_realloc_r+0x16>
 8012d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d52:	4611      	mov	r1, r2
 8012d54:	f7fd bee8 	b.w	8010b28 <_malloc_r>
 8012d58:	b92a      	cbnz	r2, 8012d66 <_realloc_r+0x24>
 8012d5a:	f7fd fe71 	bl	8010a40 <_free_r>
 8012d5e:	2400      	movs	r4, #0
 8012d60:	4620      	mov	r0, r4
 8012d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d66:	f000 f840 	bl	8012dea <_malloc_usable_size_r>
 8012d6a:	4285      	cmp	r5, r0
 8012d6c:	4606      	mov	r6, r0
 8012d6e:	d802      	bhi.n	8012d76 <_realloc_r+0x34>
 8012d70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012d74:	d8f4      	bhi.n	8012d60 <_realloc_r+0x1e>
 8012d76:	4629      	mov	r1, r5
 8012d78:	4640      	mov	r0, r8
 8012d7a:	f7fd fed5 	bl	8010b28 <_malloc_r>
 8012d7e:	4607      	mov	r7, r0
 8012d80:	2800      	cmp	r0, #0
 8012d82:	d0ec      	beq.n	8012d5e <_realloc_r+0x1c>
 8012d84:	42b5      	cmp	r5, r6
 8012d86:	462a      	mov	r2, r5
 8012d88:	4621      	mov	r1, r4
 8012d8a:	bf28      	it	cs
 8012d8c:	4632      	movcs	r2, r6
 8012d8e:	f7fc fff4 	bl	800fd7a <memcpy>
 8012d92:	4621      	mov	r1, r4
 8012d94:	4640      	mov	r0, r8
 8012d96:	f7fd fe53 	bl	8010a40 <_free_r>
 8012d9a:	463c      	mov	r4, r7
 8012d9c:	e7e0      	b.n	8012d60 <_realloc_r+0x1e>

08012d9e <__ascii_wctomb>:
 8012d9e:	4603      	mov	r3, r0
 8012da0:	4608      	mov	r0, r1
 8012da2:	b141      	cbz	r1, 8012db6 <__ascii_wctomb+0x18>
 8012da4:	2aff      	cmp	r2, #255	@ 0xff
 8012da6:	d904      	bls.n	8012db2 <__ascii_wctomb+0x14>
 8012da8:	228a      	movs	r2, #138	@ 0x8a
 8012daa:	601a      	str	r2, [r3, #0]
 8012dac:	f04f 30ff 	mov.w	r0, #4294967295
 8012db0:	4770      	bx	lr
 8012db2:	700a      	strb	r2, [r1, #0]
 8012db4:	2001      	movs	r0, #1
 8012db6:	4770      	bx	lr

08012db8 <fiprintf>:
 8012db8:	b40e      	push	{r1, r2, r3}
 8012dba:	b503      	push	{r0, r1, lr}
 8012dbc:	4601      	mov	r1, r0
 8012dbe:	ab03      	add	r3, sp, #12
 8012dc0:	4805      	ldr	r0, [pc, #20]	@ (8012dd8 <fiprintf+0x20>)
 8012dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dc6:	6800      	ldr	r0, [r0, #0]
 8012dc8:	9301      	str	r3, [sp, #4]
 8012dca:	f000 f83f 	bl	8012e4c <_vfiprintf_r>
 8012dce:	b002      	add	sp, #8
 8012dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012dd4:	b003      	add	sp, #12
 8012dd6:	4770      	bx	lr
 8012dd8:	20000460 	.word	0x20000460

08012ddc <abort>:
 8012ddc:	b508      	push	{r3, lr}
 8012dde:	2006      	movs	r0, #6
 8012de0:	f000 fa08 	bl	80131f4 <raise>
 8012de4:	2001      	movs	r0, #1
 8012de6:	f7f7 fca3 	bl	800a730 <_exit>

08012dea <_malloc_usable_size_r>:
 8012dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dee:	1f18      	subs	r0, r3, #4
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	bfbc      	itt	lt
 8012df4:	580b      	ldrlt	r3, [r1, r0]
 8012df6:	18c0      	addlt	r0, r0, r3
 8012df8:	4770      	bx	lr

08012dfa <__sfputc_r>:
 8012dfa:	6893      	ldr	r3, [r2, #8]
 8012dfc:	3b01      	subs	r3, #1
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	b410      	push	{r4}
 8012e02:	6093      	str	r3, [r2, #8]
 8012e04:	da08      	bge.n	8012e18 <__sfputc_r+0x1e>
 8012e06:	6994      	ldr	r4, [r2, #24]
 8012e08:	42a3      	cmp	r3, r4
 8012e0a:	db01      	blt.n	8012e10 <__sfputc_r+0x16>
 8012e0c:	290a      	cmp	r1, #10
 8012e0e:	d103      	bne.n	8012e18 <__sfputc_r+0x1e>
 8012e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e14:	f000 b932 	b.w	801307c <__swbuf_r>
 8012e18:	6813      	ldr	r3, [r2, #0]
 8012e1a:	1c58      	adds	r0, r3, #1
 8012e1c:	6010      	str	r0, [r2, #0]
 8012e1e:	7019      	strb	r1, [r3, #0]
 8012e20:	4608      	mov	r0, r1
 8012e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e26:	4770      	bx	lr

08012e28 <__sfputs_r>:
 8012e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	460f      	mov	r7, r1
 8012e2e:	4614      	mov	r4, r2
 8012e30:	18d5      	adds	r5, r2, r3
 8012e32:	42ac      	cmp	r4, r5
 8012e34:	d101      	bne.n	8012e3a <__sfputs_r+0x12>
 8012e36:	2000      	movs	r0, #0
 8012e38:	e007      	b.n	8012e4a <__sfputs_r+0x22>
 8012e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e3e:	463a      	mov	r2, r7
 8012e40:	4630      	mov	r0, r6
 8012e42:	f7ff ffda 	bl	8012dfa <__sfputc_r>
 8012e46:	1c43      	adds	r3, r0, #1
 8012e48:	d1f3      	bne.n	8012e32 <__sfputs_r+0xa>
 8012e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012e4c <_vfiprintf_r>:
 8012e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e50:	460d      	mov	r5, r1
 8012e52:	b09d      	sub	sp, #116	@ 0x74
 8012e54:	4614      	mov	r4, r2
 8012e56:	4698      	mov	r8, r3
 8012e58:	4606      	mov	r6, r0
 8012e5a:	b118      	cbz	r0, 8012e64 <_vfiprintf_r+0x18>
 8012e5c:	6a03      	ldr	r3, [r0, #32]
 8012e5e:	b90b      	cbnz	r3, 8012e64 <_vfiprintf_r+0x18>
 8012e60:	f7fc fe72 	bl	800fb48 <__sinit>
 8012e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e66:	07d9      	lsls	r1, r3, #31
 8012e68:	d405      	bmi.n	8012e76 <_vfiprintf_r+0x2a>
 8012e6a:	89ab      	ldrh	r3, [r5, #12]
 8012e6c:	059a      	lsls	r2, r3, #22
 8012e6e:	d402      	bmi.n	8012e76 <_vfiprintf_r+0x2a>
 8012e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e72:	f7fc ff80 	bl	800fd76 <__retarget_lock_acquire_recursive>
 8012e76:	89ab      	ldrh	r3, [r5, #12]
 8012e78:	071b      	lsls	r3, r3, #28
 8012e7a:	d501      	bpl.n	8012e80 <_vfiprintf_r+0x34>
 8012e7c:	692b      	ldr	r3, [r5, #16]
 8012e7e:	b99b      	cbnz	r3, 8012ea8 <_vfiprintf_r+0x5c>
 8012e80:	4629      	mov	r1, r5
 8012e82:	4630      	mov	r0, r6
 8012e84:	f000 f938 	bl	80130f8 <__swsetup_r>
 8012e88:	b170      	cbz	r0, 8012ea8 <_vfiprintf_r+0x5c>
 8012e8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e8c:	07dc      	lsls	r4, r3, #31
 8012e8e:	d504      	bpl.n	8012e9a <_vfiprintf_r+0x4e>
 8012e90:	f04f 30ff 	mov.w	r0, #4294967295
 8012e94:	b01d      	add	sp, #116	@ 0x74
 8012e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e9a:	89ab      	ldrh	r3, [r5, #12]
 8012e9c:	0598      	lsls	r0, r3, #22
 8012e9e:	d4f7      	bmi.n	8012e90 <_vfiprintf_r+0x44>
 8012ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ea2:	f7fc ff69 	bl	800fd78 <__retarget_lock_release_recursive>
 8012ea6:	e7f3      	b.n	8012e90 <_vfiprintf_r+0x44>
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8012eac:	2320      	movs	r3, #32
 8012eae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012eb6:	2330      	movs	r3, #48	@ 0x30
 8012eb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013068 <_vfiprintf_r+0x21c>
 8012ebc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012ec0:	f04f 0901 	mov.w	r9, #1
 8012ec4:	4623      	mov	r3, r4
 8012ec6:	469a      	mov	sl, r3
 8012ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ecc:	b10a      	cbz	r2, 8012ed2 <_vfiprintf_r+0x86>
 8012ece:	2a25      	cmp	r2, #37	@ 0x25
 8012ed0:	d1f9      	bne.n	8012ec6 <_vfiprintf_r+0x7a>
 8012ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8012ed6:	d00b      	beq.n	8012ef0 <_vfiprintf_r+0xa4>
 8012ed8:	465b      	mov	r3, fp
 8012eda:	4622      	mov	r2, r4
 8012edc:	4629      	mov	r1, r5
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f7ff ffa2 	bl	8012e28 <__sfputs_r>
 8012ee4:	3001      	adds	r0, #1
 8012ee6:	f000 80a7 	beq.w	8013038 <_vfiprintf_r+0x1ec>
 8012eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012eec:	445a      	add	r2, fp
 8012eee:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	f000 809f 	beq.w	8013038 <_vfiprintf_r+0x1ec>
 8012efa:	2300      	movs	r3, #0
 8012efc:	f04f 32ff 	mov.w	r2, #4294967295
 8012f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f04:	f10a 0a01 	add.w	sl, sl, #1
 8012f08:	9304      	str	r3, [sp, #16]
 8012f0a:	9307      	str	r3, [sp, #28]
 8012f0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f10:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f12:	4654      	mov	r4, sl
 8012f14:	2205      	movs	r2, #5
 8012f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f1a:	4853      	ldr	r0, [pc, #332]	@ (8013068 <_vfiprintf_r+0x21c>)
 8012f1c:	f7ed f968 	bl	80001f0 <memchr>
 8012f20:	9a04      	ldr	r2, [sp, #16]
 8012f22:	b9d8      	cbnz	r0, 8012f5c <_vfiprintf_r+0x110>
 8012f24:	06d1      	lsls	r1, r2, #27
 8012f26:	bf44      	itt	mi
 8012f28:	2320      	movmi	r3, #32
 8012f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f2e:	0713      	lsls	r3, r2, #28
 8012f30:	bf44      	itt	mi
 8012f32:	232b      	movmi	r3, #43	@ 0x2b
 8012f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f38:	f89a 3000 	ldrb.w	r3, [sl]
 8012f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f3e:	d015      	beq.n	8012f6c <_vfiprintf_r+0x120>
 8012f40:	9a07      	ldr	r2, [sp, #28]
 8012f42:	4654      	mov	r4, sl
 8012f44:	2000      	movs	r0, #0
 8012f46:	f04f 0c0a 	mov.w	ip, #10
 8012f4a:	4621      	mov	r1, r4
 8012f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f50:	3b30      	subs	r3, #48	@ 0x30
 8012f52:	2b09      	cmp	r3, #9
 8012f54:	d94b      	bls.n	8012fee <_vfiprintf_r+0x1a2>
 8012f56:	b1b0      	cbz	r0, 8012f86 <_vfiprintf_r+0x13a>
 8012f58:	9207      	str	r2, [sp, #28]
 8012f5a:	e014      	b.n	8012f86 <_vfiprintf_r+0x13a>
 8012f5c:	eba0 0308 	sub.w	r3, r0, r8
 8012f60:	fa09 f303 	lsl.w	r3, r9, r3
 8012f64:	4313      	orrs	r3, r2
 8012f66:	9304      	str	r3, [sp, #16]
 8012f68:	46a2      	mov	sl, r4
 8012f6a:	e7d2      	b.n	8012f12 <_vfiprintf_r+0xc6>
 8012f6c:	9b03      	ldr	r3, [sp, #12]
 8012f6e:	1d19      	adds	r1, r3, #4
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	9103      	str	r1, [sp, #12]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	bfbb      	ittet	lt
 8012f78:	425b      	neglt	r3, r3
 8012f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8012f7e:	9307      	strge	r3, [sp, #28]
 8012f80:	9307      	strlt	r3, [sp, #28]
 8012f82:	bfb8      	it	lt
 8012f84:	9204      	strlt	r2, [sp, #16]
 8012f86:	7823      	ldrb	r3, [r4, #0]
 8012f88:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f8a:	d10a      	bne.n	8012fa2 <_vfiprintf_r+0x156>
 8012f8c:	7863      	ldrb	r3, [r4, #1]
 8012f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f90:	d132      	bne.n	8012ff8 <_vfiprintf_r+0x1ac>
 8012f92:	9b03      	ldr	r3, [sp, #12]
 8012f94:	1d1a      	adds	r2, r3, #4
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	9203      	str	r2, [sp, #12]
 8012f9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f9e:	3402      	adds	r4, #2
 8012fa0:	9305      	str	r3, [sp, #20]
 8012fa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013078 <_vfiprintf_r+0x22c>
 8012fa6:	7821      	ldrb	r1, [r4, #0]
 8012fa8:	2203      	movs	r2, #3
 8012faa:	4650      	mov	r0, sl
 8012fac:	f7ed f920 	bl	80001f0 <memchr>
 8012fb0:	b138      	cbz	r0, 8012fc2 <_vfiprintf_r+0x176>
 8012fb2:	9b04      	ldr	r3, [sp, #16]
 8012fb4:	eba0 000a 	sub.w	r0, r0, sl
 8012fb8:	2240      	movs	r2, #64	@ 0x40
 8012fba:	4082      	lsls	r2, r0
 8012fbc:	4313      	orrs	r3, r2
 8012fbe:	3401      	adds	r4, #1
 8012fc0:	9304      	str	r3, [sp, #16]
 8012fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fc6:	4829      	ldr	r0, [pc, #164]	@ (801306c <_vfiprintf_r+0x220>)
 8012fc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012fcc:	2206      	movs	r2, #6
 8012fce:	f7ed f90f 	bl	80001f0 <memchr>
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	d03f      	beq.n	8013056 <_vfiprintf_r+0x20a>
 8012fd6:	4b26      	ldr	r3, [pc, #152]	@ (8013070 <_vfiprintf_r+0x224>)
 8012fd8:	bb1b      	cbnz	r3, 8013022 <_vfiprintf_r+0x1d6>
 8012fda:	9b03      	ldr	r3, [sp, #12]
 8012fdc:	3307      	adds	r3, #7
 8012fde:	f023 0307 	bic.w	r3, r3, #7
 8012fe2:	3308      	adds	r3, #8
 8012fe4:	9303      	str	r3, [sp, #12]
 8012fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fe8:	443b      	add	r3, r7
 8012fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fec:	e76a      	b.n	8012ec4 <_vfiprintf_r+0x78>
 8012fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ff2:	460c      	mov	r4, r1
 8012ff4:	2001      	movs	r0, #1
 8012ff6:	e7a8      	b.n	8012f4a <_vfiprintf_r+0xfe>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	3401      	adds	r4, #1
 8012ffc:	9305      	str	r3, [sp, #20]
 8012ffe:	4619      	mov	r1, r3
 8013000:	f04f 0c0a 	mov.w	ip, #10
 8013004:	4620      	mov	r0, r4
 8013006:	f810 2b01 	ldrb.w	r2, [r0], #1
 801300a:	3a30      	subs	r2, #48	@ 0x30
 801300c:	2a09      	cmp	r2, #9
 801300e:	d903      	bls.n	8013018 <_vfiprintf_r+0x1cc>
 8013010:	2b00      	cmp	r3, #0
 8013012:	d0c6      	beq.n	8012fa2 <_vfiprintf_r+0x156>
 8013014:	9105      	str	r1, [sp, #20]
 8013016:	e7c4      	b.n	8012fa2 <_vfiprintf_r+0x156>
 8013018:	fb0c 2101 	mla	r1, ip, r1, r2
 801301c:	4604      	mov	r4, r0
 801301e:	2301      	movs	r3, #1
 8013020:	e7f0      	b.n	8013004 <_vfiprintf_r+0x1b8>
 8013022:	ab03      	add	r3, sp, #12
 8013024:	9300      	str	r3, [sp, #0]
 8013026:	462a      	mov	r2, r5
 8013028:	4b12      	ldr	r3, [pc, #72]	@ (8013074 <_vfiprintf_r+0x228>)
 801302a:	a904      	add	r1, sp, #16
 801302c:	4630      	mov	r0, r6
 801302e:	f7fb ff33 	bl	800ee98 <_printf_float>
 8013032:	4607      	mov	r7, r0
 8013034:	1c78      	adds	r0, r7, #1
 8013036:	d1d6      	bne.n	8012fe6 <_vfiprintf_r+0x19a>
 8013038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801303a:	07d9      	lsls	r1, r3, #31
 801303c:	d405      	bmi.n	801304a <_vfiprintf_r+0x1fe>
 801303e:	89ab      	ldrh	r3, [r5, #12]
 8013040:	059a      	lsls	r2, r3, #22
 8013042:	d402      	bmi.n	801304a <_vfiprintf_r+0x1fe>
 8013044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013046:	f7fc fe97 	bl	800fd78 <__retarget_lock_release_recursive>
 801304a:	89ab      	ldrh	r3, [r5, #12]
 801304c:	065b      	lsls	r3, r3, #25
 801304e:	f53f af1f 	bmi.w	8012e90 <_vfiprintf_r+0x44>
 8013052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013054:	e71e      	b.n	8012e94 <_vfiprintf_r+0x48>
 8013056:	ab03      	add	r3, sp, #12
 8013058:	9300      	str	r3, [sp, #0]
 801305a:	462a      	mov	r2, r5
 801305c:	4b05      	ldr	r3, [pc, #20]	@ (8013074 <_vfiprintf_r+0x228>)
 801305e:	a904      	add	r1, sp, #16
 8013060:	4630      	mov	r0, r6
 8013062:	f7fc f9b1 	bl	800f3c8 <_printf_i>
 8013066:	e7e4      	b.n	8013032 <_vfiprintf_r+0x1e6>
 8013068:	08016460 	.word	0x08016460
 801306c:	0801646a 	.word	0x0801646a
 8013070:	0800ee99 	.word	0x0800ee99
 8013074:	08012e29 	.word	0x08012e29
 8013078:	08016466 	.word	0x08016466

0801307c <__swbuf_r>:
 801307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801307e:	460e      	mov	r6, r1
 8013080:	4614      	mov	r4, r2
 8013082:	4605      	mov	r5, r0
 8013084:	b118      	cbz	r0, 801308e <__swbuf_r+0x12>
 8013086:	6a03      	ldr	r3, [r0, #32]
 8013088:	b90b      	cbnz	r3, 801308e <__swbuf_r+0x12>
 801308a:	f7fc fd5d 	bl	800fb48 <__sinit>
 801308e:	69a3      	ldr	r3, [r4, #24]
 8013090:	60a3      	str	r3, [r4, #8]
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	071a      	lsls	r2, r3, #28
 8013096:	d501      	bpl.n	801309c <__swbuf_r+0x20>
 8013098:	6923      	ldr	r3, [r4, #16]
 801309a:	b943      	cbnz	r3, 80130ae <__swbuf_r+0x32>
 801309c:	4621      	mov	r1, r4
 801309e:	4628      	mov	r0, r5
 80130a0:	f000 f82a 	bl	80130f8 <__swsetup_r>
 80130a4:	b118      	cbz	r0, 80130ae <__swbuf_r+0x32>
 80130a6:	f04f 37ff 	mov.w	r7, #4294967295
 80130aa:	4638      	mov	r0, r7
 80130ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130ae:	6823      	ldr	r3, [r4, #0]
 80130b0:	6922      	ldr	r2, [r4, #16]
 80130b2:	1a98      	subs	r0, r3, r2
 80130b4:	6963      	ldr	r3, [r4, #20]
 80130b6:	b2f6      	uxtb	r6, r6
 80130b8:	4283      	cmp	r3, r0
 80130ba:	4637      	mov	r7, r6
 80130bc:	dc05      	bgt.n	80130ca <__swbuf_r+0x4e>
 80130be:	4621      	mov	r1, r4
 80130c0:	4628      	mov	r0, r5
 80130c2:	f7ff fa53 	bl	801256c <_fflush_r>
 80130c6:	2800      	cmp	r0, #0
 80130c8:	d1ed      	bne.n	80130a6 <__swbuf_r+0x2a>
 80130ca:	68a3      	ldr	r3, [r4, #8]
 80130cc:	3b01      	subs	r3, #1
 80130ce:	60a3      	str	r3, [r4, #8]
 80130d0:	6823      	ldr	r3, [r4, #0]
 80130d2:	1c5a      	adds	r2, r3, #1
 80130d4:	6022      	str	r2, [r4, #0]
 80130d6:	701e      	strb	r6, [r3, #0]
 80130d8:	6962      	ldr	r2, [r4, #20]
 80130da:	1c43      	adds	r3, r0, #1
 80130dc:	429a      	cmp	r2, r3
 80130de:	d004      	beq.n	80130ea <__swbuf_r+0x6e>
 80130e0:	89a3      	ldrh	r3, [r4, #12]
 80130e2:	07db      	lsls	r3, r3, #31
 80130e4:	d5e1      	bpl.n	80130aa <__swbuf_r+0x2e>
 80130e6:	2e0a      	cmp	r6, #10
 80130e8:	d1df      	bne.n	80130aa <__swbuf_r+0x2e>
 80130ea:	4621      	mov	r1, r4
 80130ec:	4628      	mov	r0, r5
 80130ee:	f7ff fa3d 	bl	801256c <_fflush_r>
 80130f2:	2800      	cmp	r0, #0
 80130f4:	d0d9      	beq.n	80130aa <__swbuf_r+0x2e>
 80130f6:	e7d6      	b.n	80130a6 <__swbuf_r+0x2a>

080130f8 <__swsetup_r>:
 80130f8:	b538      	push	{r3, r4, r5, lr}
 80130fa:	4b29      	ldr	r3, [pc, #164]	@ (80131a0 <__swsetup_r+0xa8>)
 80130fc:	4605      	mov	r5, r0
 80130fe:	6818      	ldr	r0, [r3, #0]
 8013100:	460c      	mov	r4, r1
 8013102:	b118      	cbz	r0, 801310c <__swsetup_r+0x14>
 8013104:	6a03      	ldr	r3, [r0, #32]
 8013106:	b90b      	cbnz	r3, 801310c <__swsetup_r+0x14>
 8013108:	f7fc fd1e 	bl	800fb48 <__sinit>
 801310c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013110:	0719      	lsls	r1, r3, #28
 8013112:	d422      	bmi.n	801315a <__swsetup_r+0x62>
 8013114:	06da      	lsls	r2, r3, #27
 8013116:	d407      	bmi.n	8013128 <__swsetup_r+0x30>
 8013118:	2209      	movs	r2, #9
 801311a:	602a      	str	r2, [r5, #0]
 801311c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013120:	81a3      	strh	r3, [r4, #12]
 8013122:	f04f 30ff 	mov.w	r0, #4294967295
 8013126:	e033      	b.n	8013190 <__swsetup_r+0x98>
 8013128:	0758      	lsls	r0, r3, #29
 801312a:	d512      	bpl.n	8013152 <__swsetup_r+0x5a>
 801312c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801312e:	b141      	cbz	r1, 8013142 <__swsetup_r+0x4a>
 8013130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013134:	4299      	cmp	r1, r3
 8013136:	d002      	beq.n	801313e <__swsetup_r+0x46>
 8013138:	4628      	mov	r0, r5
 801313a:	f7fd fc81 	bl	8010a40 <_free_r>
 801313e:	2300      	movs	r3, #0
 8013140:	6363      	str	r3, [r4, #52]	@ 0x34
 8013142:	89a3      	ldrh	r3, [r4, #12]
 8013144:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013148:	81a3      	strh	r3, [r4, #12]
 801314a:	2300      	movs	r3, #0
 801314c:	6063      	str	r3, [r4, #4]
 801314e:	6923      	ldr	r3, [r4, #16]
 8013150:	6023      	str	r3, [r4, #0]
 8013152:	89a3      	ldrh	r3, [r4, #12]
 8013154:	f043 0308 	orr.w	r3, r3, #8
 8013158:	81a3      	strh	r3, [r4, #12]
 801315a:	6923      	ldr	r3, [r4, #16]
 801315c:	b94b      	cbnz	r3, 8013172 <__swsetup_r+0x7a>
 801315e:	89a3      	ldrh	r3, [r4, #12]
 8013160:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013168:	d003      	beq.n	8013172 <__swsetup_r+0x7a>
 801316a:	4621      	mov	r1, r4
 801316c:	4628      	mov	r0, r5
 801316e:	f000 f883 	bl	8013278 <__smakebuf_r>
 8013172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013176:	f013 0201 	ands.w	r2, r3, #1
 801317a:	d00a      	beq.n	8013192 <__swsetup_r+0x9a>
 801317c:	2200      	movs	r2, #0
 801317e:	60a2      	str	r2, [r4, #8]
 8013180:	6962      	ldr	r2, [r4, #20]
 8013182:	4252      	negs	r2, r2
 8013184:	61a2      	str	r2, [r4, #24]
 8013186:	6922      	ldr	r2, [r4, #16]
 8013188:	b942      	cbnz	r2, 801319c <__swsetup_r+0xa4>
 801318a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801318e:	d1c5      	bne.n	801311c <__swsetup_r+0x24>
 8013190:	bd38      	pop	{r3, r4, r5, pc}
 8013192:	0799      	lsls	r1, r3, #30
 8013194:	bf58      	it	pl
 8013196:	6962      	ldrpl	r2, [r4, #20]
 8013198:	60a2      	str	r2, [r4, #8]
 801319a:	e7f4      	b.n	8013186 <__swsetup_r+0x8e>
 801319c:	2000      	movs	r0, #0
 801319e:	e7f7      	b.n	8013190 <__swsetup_r+0x98>
 80131a0:	20000460 	.word	0x20000460

080131a4 <_raise_r>:
 80131a4:	291f      	cmp	r1, #31
 80131a6:	b538      	push	{r3, r4, r5, lr}
 80131a8:	4605      	mov	r5, r0
 80131aa:	460c      	mov	r4, r1
 80131ac:	d904      	bls.n	80131b8 <_raise_r+0x14>
 80131ae:	2316      	movs	r3, #22
 80131b0:	6003      	str	r3, [r0, #0]
 80131b2:	f04f 30ff 	mov.w	r0, #4294967295
 80131b6:	bd38      	pop	{r3, r4, r5, pc}
 80131b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80131ba:	b112      	cbz	r2, 80131c2 <_raise_r+0x1e>
 80131bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80131c0:	b94b      	cbnz	r3, 80131d6 <_raise_r+0x32>
 80131c2:	4628      	mov	r0, r5
 80131c4:	f000 f830 	bl	8013228 <_getpid_r>
 80131c8:	4622      	mov	r2, r4
 80131ca:	4601      	mov	r1, r0
 80131cc:	4628      	mov	r0, r5
 80131ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131d2:	f000 b817 	b.w	8013204 <_kill_r>
 80131d6:	2b01      	cmp	r3, #1
 80131d8:	d00a      	beq.n	80131f0 <_raise_r+0x4c>
 80131da:	1c59      	adds	r1, r3, #1
 80131dc:	d103      	bne.n	80131e6 <_raise_r+0x42>
 80131de:	2316      	movs	r3, #22
 80131e0:	6003      	str	r3, [r0, #0]
 80131e2:	2001      	movs	r0, #1
 80131e4:	e7e7      	b.n	80131b6 <_raise_r+0x12>
 80131e6:	2100      	movs	r1, #0
 80131e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80131ec:	4620      	mov	r0, r4
 80131ee:	4798      	blx	r3
 80131f0:	2000      	movs	r0, #0
 80131f2:	e7e0      	b.n	80131b6 <_raise_r+0x12>

080131f4 <raise>:
 80131f4:	4b02      	ldr	r3, [pc, #8]	@ (8013200 <raise+0xc>)
 80131f6:	4601      	mov	r1, r0
 80131f8:	6818      	ldr	r0, [r3, #0]
 80131fa:	f7ff bfd3 	b.w	80131a4 <_raise_r>
 80131fe:	bf00      	nop
 8013200:	20000460 	.word	0x20000460

08013204 <_kill_r>:
 8013204:	b538      	push	{r3, r4, r5, lr}
 8013206:	4d07      	ldr	r5, [pc, #28]	@ (8013224 <_kill_r+0x20>)
 8013208:	2300      	movs	r3, #0
 801320a:	4604      	mov	r4, r0
 801320c:	4608      	mov	r0, r1
 801320e:	4611      	mov	r1, r2
 8013210:	602b      	str	r3, [r5, #0]
 8013212:	f7f7 fa7d 	bl	800a710 <_kill>
 8013216:	1c43      	adds	r3, r0, #1
 8013218:	d102      	bne.n	8013220 <_kill_r+0x1c>
 801321a:	682b      	ldr	r3, [r5, #0]
 801321c:	b103      	cbz	r3, 8013220 <_kill_r+0x1c>
 801321e:	6023      	str	r3, [r4, #0]
 8013220:	bd38      	pop	{r3, r4, r5, pc}
 8013222:	bf00      	nop
 8013224:	20006720 	.word	0x20006720

08013228 <_getpid_r>:
 8013228:	f7f7 ba6a 	b.w	800a700 <_getpid>

0801322c <__swhatbuf_r>:
 801322c:	b570      	push	{r4, r5, r6, lr}
 801322e:	460c      	mov	r4, r1
 8013230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013234:	2900      	cmp	r1, #0
 8013236:	b096      	sub	sp, #88	@ 0x58
 8013238:	4615      	mov	r5, r2
 801323a:	461e      	mov	r6, r3
 801323c:	da0d      	bge.n	801325a <__swhatbuf_r+0x2e>
 801323e:	89a3      	ldrh	r3, [r4, #12]
 8013240:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013244:	f04f 0100 	mov.w	r1, #0
 8013248:	bf14      	ite	ne
 801324a:	2340      	movne	r3, #64	@ 0x40
 801324c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013250:	2000      	movs	r0, #0
 8013252:	6031      	str	r1, [r6, #0]
 8013254:	602b      	str	r3, [r5, #0]
 8013256:	b016      	add	sp, #88	@ 0x58
 8013258:	bd70      	pop	{r4, r5, r6, pc}
 801325a:	466a      	mov	r2, sp
 801325c:	f000 f848 	bl	80132f0 <_fstat_r>
 8013260:	2800      	cmp	r0, #0
 8013262:	dbec      	blt.n	801323e <__swhatbuf_r+0x12>
 8013264:	9901      	ldr	r1, [sp, #4]
 8013266:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801326a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801326e:	4259      	negs	r1, r3
 8013270:	4159      	adcs	r1, r3
 8013272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013276:	e7eb      	b.n	8013250 <__swhatbuf_r+0x24>

08013278 <__smakebuf_r>:
 8013278:	898b      	ldrh	r3, [r1, #12]
 801327a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801327c:	079d      	lsls	r5, r3, #30
 801327e:	4606      	mov	r6, r0
 8013280:	460c      	mov	r4, r1
 8013282:	d507      	bpl.n	8013294 <__smakebuf_r+0x1c>
 8013284:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013288:	6023      	str	r3, [r4, #0]
 801328a:	6123      	str	r3, [r4, #16]
 801328c:	2301      	movs	r3, #1
 801328e:	6163      	str	r3, [r4, #20]
 8013290:	b003      	add	sp, #12
 8013292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013294:	ab01      	add	r3, sp, #4
 8013296:	466a      	mov	r2, sp
 8013298:	f7ff ffc8 	bl	801322c <__swhatbuf_r>
 801329c:	9f00      	ldr	r7, [sp, #0]
 801329e:	4605      	mov	r5, r0
 80132a0:	4639      	mov	r1, r7
 80132a2:	4630      	mov	r0, r6
 80132a4:	f7fd fc40 	bl	8010b28 <_malloc_r>
 80132a8:	b948      	cbnz	r0, 80132be <__smakebuf_r+0x46>
 80132aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132ae:	059a      	lsls	r2, r3, #22
 80132b0:	d4ee      	bmi.n	8013290 <__smakebuf_r+0x18>
 80132b2:	f023 0303 	bic.w	r3, r3, #3
 80132b6:	f043 0302 	orr.w	r3, r3, #2
 80132ba:	81a3      	strh	r3, [r4, #12]
 80132bc:	e7e2      	b.n	8013284 <__smakebuf_r+0xc>
 80132be:	89a3      	ldrh	r3, [r4, #12]
 80132c0:	6020      	str	r0, [r4, #0]
 80132c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132c6:	81a3      	strh	r3, [r4, #12]
 80132c8:	9b01      	ldr	r3, [sp, #4]
 80132ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80132ce:	b15b      	cbz	r3, 80132e8 <__smakebuf_r+0x70>
 80132d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132d4:	4630      	mov	r0, r6
 80132d6:	f000 f81d 	bl	8013314 <_isatty_r>
 80132da:	b128      	cbz	r0, 80132e8 <__smakebuf_r+0x70>
 80132dc:	89a3      	ldrh	r3, [r4, #12]
 80132de:	f023 0303 	bic.w	r3, r3, #3
 80132e2:	f043 0301 	orr.w	r3, r3, #1
 80132e6:	81a3      	strh	r3, [r4, #12]
 80132e8:	89a3      	ldrh	r3, [r4, #12]
 80132ea:	431d      	orrs	r5, r3
 80132ec:	81a5      	strh	r5, [r4, #12]
 80132ee:	e7cf      	b.n	8013290 <__smakebuf_r+0x18>

080132f0 <_fstat_r>:
 80132f0:	b538      	push	{r3, r4, r5, lr}
 80132f2:	4d07      	ldr	r5, [pc, #28]	@ (8013310 <_fstat_r+0x20>)
 80132f4:	2300      	movs	r3, #0
 80132f6:	4604      	mov	r4, r0
 80132f8:	4608      	mov	r0, r1
 80132fa:	4611      	mov	r1, r2
 80132fc:	602b      	str	r3, [r5, #0]
 80132fe:	f7f7 fa67 	bl	800a7d0 <_fstat>
 8013302:	1c43      	adds	r3, r0, #1
 8013304:	d102      	bne.n	801330c <_fstat_r+0x1c>
 8013306:	682b      	ldr	r3, [r5, #0]
 8013308:	b103      	cbz	r3, 801330c <_fstat_r+0x1c>
 801330a:	6023      	str	r3, [r4, #0]
 801330c:	bd38      	pop	{r3, r4, r5, pc}
 801330e:	bf00      	nop
 8013310:	20006720 	.word	0x20006720

08013314 <_isatty_r>:
 8013314:	b538      	push	{r3, r4, r5, lr}
 8013316:	4d06      	ldr	r5, [pc, #24]	@ (8013330 <_isatty_r+0x1c>)
 8013318:	2300      	movs	r3, #0
 801331a:	4604      	mov	r4, r0
 801331c:	4608      	mov	r0, r1
 801331e:	602b      	str	r3, [r5, #0]
 8013320:	f7f7 fa66 	bl	800a7f0 <_isatty>
 8013324:	1c43      	adds	r3, r0, #1
 8013326:	d102      	bne.n	801332e <_isatty_r+0x1a>
 8013328:	682b      	ldr	r3, [r5, #0]
 801332a:	b103      	cbz	r3, 801332e <_isatty_r+0x1a>
 801332c:	6023      	str	r3, [r4, #0]
 801332e:	bd38      	pop	{r3, r4, r5, pc}
 8013330:	20006720 	.word	0x20006720

08013334 <_init>:
 8013334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013336:	bf00      	nop
 8013338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801333a:	bc08      	pop	{r3}
 801333c:	469e      	mov	lr, r3
 801333e:	4770      	bx	lr

08013340 <_fini>:
 8013340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013342:	bf00      	nop
 8013344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013346:	bc08      	pop	{r3}
 8013348:	469e      	mov	lr, r3
 801334a:	4770      	bx	lr
